// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// SMS Channel Subtype config
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SmsChannelSubtypeConfig {
    /// Allocates outbound capacity for the specific channel subtype of this campaign between multiple active campaigns
    pub capacity: ::std::option::Option<f64>,
    /// SMS Outbound Mode
    pub outbound_mode: ::std::option::Option<crate::types::SmsOutboundMode>,
    /// Default SMS Outbound config
    pub default_outbound_config: ::std::option::Option<crate::types::SmsOutboundConfig>,
}
impl SmsChannelSubtypeConfig {
    /// Allocates outbound capacity for the specific channel subtype of this campaign between multiple active campaigns
    pub fn capacity(&self) -> ::std::option::Option<f64> {
        self.capacity
    }
    /// SMS Outbound Mode
    pub fn outbound_mode(&self) -> ::std::option::Option<&crate::types::SmsOutboundMode> {
        self.outbound_mode.as_ref()
    }
    /// Default SMS Outbound config
    pub fn default_outbound_config(&self) -> ::std::option::Option<&crate::types::SmsOutboundConfig> {
        self.default_outbound_config.as_ref()
    }
}
impl SmsChannelSubtypeConfig {
    /// Creates a new builder-style object to manufacture [`SmsChannelSubtypeConfig`](crate::types::SmsChannelSubtypeConfig).
    pub fn builder() -> crate::types::builders::SmsChannelSubtypeConfigBuilder {
        crate::types::builders::SmsChannelSubtypeConfigBuilder::default()
    }
}

/// A builder for [`SmsChannelSubtypeConfig`](crate::types::SmsChannelSubtypeConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SmsChannelSubtypeConfigBuilder {
    pub(crate) capacity: ::std::option::Option<f64>,
    pub(crate) outbound_mode: ::std::option::Option<crate::types::SmsOutboundMode>,
    pub(crate) default_outbound_config: ::std::option::Option<crate::types::SmsOutboundConfig>,
}
impl SmsChannelSubtypeConfigBuilder {
    /// Allocates outbound capacity for the specific channel subtype of this campaign between multiple active campaigns
    pub fn capacity(mut self, input: f64) -> Self {
        self.capacity = ::std::option::Option::Some(input);
        self
    }
    /// Allocates outbound capacity for the specific channel subtype of this campaign between multiple active campaigns
    pub fn set_capacity(mut self, input: ::std::option::Option<f64>) -> Self {
        self.capacity = input;
        self
    }
    /// Allocates outbound capacity for the specific channel subtype of this campaign between multiple active campaigns
    pub fn get_capacity(&self) -> &::std::option::Option<f64> {
        &self.capacity
    }
    /// SMS Outbound Mode
    /// This field is required.
    pub fn outbound_mode(mut self, input: crate::types::SmsOutboundMode) -> Self {
        self.outbound_mode = ::std::option::Option::Some(input);
        self
    }
    /// SMS Outbound Mode
    pub fn set_outbound_mode(mut self, input: ::std::option::Option<crate::types::SmsOutboundMode>) -> Self {
        self.outbound_mode = input;
        self
    }
    /// SMS Outbound Mode
    pub fn get_outbound_mode(&self) -> &::std::option::Option<crate::types::SmsOutboundMode> {
        &self.outbound_mode
    }
    /// Default SMS Outbound config
    /// This field is required.
    pub fn default_outbound_config(mut self, input: crate::types::SmsOutboundConfig) -> Self {
        self.default_outbound_config = ::std::option::Option::Some(input);
        self
    }
    /// Default SMS Outbound config
    pub fn set_default_outbound_config(mut self, input: ::std::option::Option<crate::types::SmsOutboundConfig>) -> Self {
        self.default_outbound_config = input;
        self
    }
    /// Default SMS Outbound config
    pub fn get_default_outbound_config(&self) -> &::std::option::Option<crate::types::SmsOutboundConfig> {
        &self.default_outbound_config
    }
    /// Consumes the builder and constructs a [`SmsChannelSubtypeConfig`](crate::types::SmsChannelSubtypeConfig).
    pub fn build(self) -> crate::types::SmsChannelSubtypeConfig {
        crate::types::SmsChannelSubtypeConfig {
            capacity: self.capacity,
            outbound_mode: self.outbound_mode,
            default_outbound_config: self.default_outbound_config,
        }
    }
}
