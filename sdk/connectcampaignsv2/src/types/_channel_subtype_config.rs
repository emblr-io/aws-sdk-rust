// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Campaign Channel Subtype config
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ChannelSubtypeConfig {
    /// Telephony Channel Subtype config
    pub telephony: ::std::option::Option<crate::types::TelephonyChannelSubtypeConfig>,
    /// SMS Channel Subtype config
    pub sms: ::std::option::Option<crate::types::SmsChannelSubtypeConfig>,
    /// Email Channel Subtype config
    pub email: ::std::option::Option<crate::types::EmailChannelSubtypeConfig>,
}
impl ChannelSubtypeConfig {
    /// Telephony Channel Subtype config
    pub fn telephony(&self) -> ::std::option::Option<&crate::types::TelephonyChannelSubtypeConfig> {
        self.telephony.as_ref()
    }
    /// SMS Channel Subtype config
    pub fn sms(&self) -> ::std::option::Option<&crate::types::SmsChannelSubtypeConfig> {
        self.sms.as_ref()
    }
    /// Email Channel Subtype config
    pub fn email(&self) -> ::std::option::Option<&crate::types::EmailChannelSubtypeConfig> {
        self.email.as_ref()
    }
}
impl ChannelSubtypeConfig {
    /// Creates a new builder-style object to manufacture [`ChannelSubtypeConfig`](crate::types::ChannelSubtypeConfig).
    pub fn builder() -> crate::types::builders::ChannelSubtypeConfigBuilder {
        crate::types::builders::ChannelSubtypeConfigBuilder::default()
    }
}

/// A builder for [`ChannelSubtypeConfig`](crate::types::ChannelSubtypeConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ChannelSubtypeConfigBuilder {
    pub(crate) telephony: ::std::option::Option<crate::types::TelephonyChannelSubtypeConfig>,
    pub(crate) sms: ::std::option::Option<crate::types::SmsChannelSubtypeConfig>,
    pub(crate) email: ::std::option::Option<crate::types::EmailChannelSubtypeConfig>,
}
impl ChannelSubtypeConfigBuilder {
    /// Telephony Channel Subtype config
    pub fn telephony(mut self, input: crate::types::TelephonyChannelSubtypeConfig) -> Self {
        self.telephony = ::std::option::Option::Some(input);
        self
    }
    /// Telephony Channel Subtype config
    pub fn set_telephony(mut self, input: ::std::option::Option<crate::types::TelephonyChannelSubtypeConfig>) -> Self {
        self.telephony = input;
        self
    }
    /// Telephony Channel Subtype config
    pub fn get_telephony(&self) -> &::std::option::Option<crate::types::TelephonyChannelSubtypeConfig> {
        &self.telephony
    }
    /// SMS Channel Subtype config
    pub fn sms(mut self, input: crate::types::SmsChannelSubtypeConfig) -> Self {
        self.sms = ::std::option::Option::Some(input);
        self
    }
    /// SMS Channel Subtype config
    pub fn set_sms(mut self, input: ::std::option::Option<crate::types::SmsChannelSubtypeConfig>) -> Self {
        self.sms = input;
        self
    }
    /// SMS Channel Subtype config
    pub fn get_sms(&self) -> &::std::option::Option<crate::types::SmsChannelSubtypeConfig> {
        &self.sms
    }
    /// Email Channel Subtype config
    pub fn email(mut self, input: crate::types::EmailChannelSubtypeConfig) -> Self {
        self.email = ::std::option::Option::Some(input);
        self
    }
    /// Email Channel Subtype config
    pub fn set_email(mut self, input: ::std::option::Option<crate::types::EmailChannelSubtypeConfig>) -> Self {
        self.email = input;
        self
    }
    /// Email Channel Subtype config
    pub fn get_email(&self) -> &::std::option::Option<crate::types::EmailChannelSubtypeConfig> {
        &self.email
    }
    /// Consumes the builder and constructs a [`ChannelSubtypeConfig`](crate::types::ChannelSubtypeConfig).
    pub fn build(self) -> crate::types::ChannelSubtypeConfig {
        crate::types::ChannelSubtypeConfig {
            telephony: self.telephony,
            sms: self.sms,
            email: self.email,
        }
    }
}
