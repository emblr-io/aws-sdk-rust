// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Communication limits config
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CommunicationLimitsConfig {
    /// Communication limits
    pub all_channel_subtypes: ::std::option::Option<crate::types::CommunicationLimits>,
    /// Instance limits handling
    pub instance_limits_handling: ::std::option::Option<crate::types::InstanceLimitsHandling>,
}
impl CommunicationLimitsConfig {
    /// Communication limits
    pub fn all_channel_subtypes(&self) -> ::std::option::Option<&crate::types::CommunicationLimits> {
        self.all_channel_subtypes.as_ref()
    }
    /// Instance limits handling
    pub fn instance_limits_handling(&self) -> ::std::option::Option<&crate::types::InstanceLimitsHandling> {
        self.instance_limits_handling.as_ref()
    }
}
impl CommunicationLimitsConfig {
    /// Creates a new builder-style object to manufacture [`CommunicationLimitsConfig`](crate::types::CommunicationLimitsConfig).
    pub fn builder() -> crate::types::builders::CommunicationLimitsConfigBuilder {
        crate::types::builders::CommunicationLimitsConfigBuilder::default()
    }
}

/// A builder for [`CommunicationLimitsConfig`](crate::types::CommunicationLimitsConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CommunicationLimitsConfigBuilder {
    pub(crate) all_channel_subtypes: ::std::option::Option<crate::types::CommunicationLimits>,
    pub(crate) instance_limits_handling: ::std::option::Option<crate::types::InstanceLimitsHandling>,
}
impl CommunicationLimitsConfigBuilder {
    /// Communication limits
    pub fn all_channel_subtypes(mut self, input: crate::types::CommunicationLimits) -> Self {
        self.all_channel_subtypes = ::std::option::Option::Some(input);
        self
    }
    /// Communication limits
    pub fn set_all_channel_subtypes(mut self, input: ::std::option::Option<crate::types::CommunicationLimits>) -> Self {
        self.all_channel_subtypes = input;
        self
    }
    /// Communication limits
    pub fn get_all_channel_subtypes(&self) -> &::std::option::Option<crate::types::CommunicationLimits> {
        &self.all_channel_subtypes
    }
    /// Instance limits handling
    pub fn instance_limits_handling(mut self, input: crate::types::InstanceLimitsHandling) -> Self {
        self.instance_limits_handling = ::std::option::Option::Some(input);
        self
    }
    /// Instance limits handling
    pub fn set_instance_limits_handling(mut self, input: ::std::option::Option<crate::types::InstanceLimitsHandling>) -> Self {
        self.instance_limits_handling = input;
        self
    }
    /// Instance limits handling
    pub fn get_instance_limits_handling(&self) -> &::std::option::Option<crate::types::InstanceLimitsHandling> {
        &self.instance_limits_handling
    }
    /// Consumes the builder and constructs a [`CommunicationLimitsConfig`](crate::types::CommunicationLimitsConfig).
    pub fn build(self) -> crate::types::CommunicationLimitsConfig {
        crate::types::CommunicationLimitsConfig {
            all_channel_subtypes: self.all_channel_subtypes,
            instance_limits_handling: self.instance_limits_handling,
        }
    }
}
