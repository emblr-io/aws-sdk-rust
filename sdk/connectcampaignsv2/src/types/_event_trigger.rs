// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Event trigger of the campaign
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EventTrigger {
    /// Amazon Resource Names(ARN)
    pub customer_profiles_domain_arn: ::std::option::Option<::std::string::String>,
}
impl EventTrigger {
    /// Amazon Resource Names(ARN)
    pub fn customer_profiles_domain_arn(&self) -> ::std::option::Option<&str> {
        self.customer_profiles_domain_arn.as_deref()
    }
}
impl EventTrigger {
    /// Creates a new builder-style object to manufacture [`EventTrigger`](crate::types::EventTrigger).
    pub fn builder() -> crate::types::builders::EventTriggerBuilder {
        crate::types::builders::EventTriggerBuilder::default()
    }
}

/// A builder for [`EventTrigger`](crate::types::EventTrigger).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EventTriggerBuilder {
    pub(crate) customer_profiles_domain_arn: ::std::option::Option<::std::string::String>,
}
impl EventTriggerBuilder {
    /// Amazon Resource Names(ARN)
    pub fn customer_profiles_domain_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_profiles_domain_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// Amazon Resource Names(ARN)
    pub fn set_customer_profiles_domain_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_profiles_domain_arn = input;
        self
    }
    /// Amazon Resource Names(ARN)
    pub fn get_customer_profiles_domain_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_profiles_domain_arn
    }
    /// Consumes the builder and constructs a [`EventTrigger`](crate::types::EventTrigger).
    pub fn build(self) -> crate::types::EventTrigger {
        crate::types::EventTrigger {
            customer_profiles_domain_arn: self.customer_profiles_domain_arn,
        }
    }
}
