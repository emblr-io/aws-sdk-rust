// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Local time zone config
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LocalTimeZoneConfig {
    /// Time Zone Id in the IANA format
    pub default_time_zone: ::std::option::Option<::std::string::String>,
    /// Local TimeZone Detection method list
    pub local_time_zone_detection: ::std::option::Option<::std::vec::Vec<crate::types::LocalTimeZoneDetectionType>>,
}
impl LocalTimeZoneConfig {
    /// Time Zone Id in the IANA format
    pub fn default_time_zone(&self) -> ::std::option::Option<&str> {
        self.default_time_zone.as_deref()
    }
    /// Local TimeZone Detection method list
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.local_time_zone_detection.is_none()`.
    pub fn local_time_zone_detection(&self) -> &[crate::types::LocalTimeZoneDetectionType] {
        self.local_time_zone_detection.as_deref().unwrap_or_default()
    }
}
impl LocalTimeZoneConfig {
    /// Creates a new builder-style object to manufacture [`LocalTimeZoneConfig`](crate::types::LocalTimeZoneConfig).
    pub fn builder() -> crate::types::builders::LocalTimeZoneConfigBuilder {
        crate::types::builders::LocalTimeZoneConfigBuilder::default()
    }
}

/// A builder for [`LocalTimeZoneConfig`](crate::types::LocalTimeZoneConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LocalTimeZoneConfigBuilder {
    pub(crate) default_time_zone: ::std::option::Option<::std::string::String>,
    pub(crate) local_time_zone_detection: ::std::option::Option<::std::vec::Vec<crate::types::LocalTimeZoneDetectionType>>,
}
impl LocalTimeZoneConfigBuilder {
    /// Time Zone Id in the IANA format
    pub fn default_time_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_time_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// Time Zone Id in the IANA format
    pub fn set_default_time_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_time_zone = input;
        self
    }
    /// Time Zone Id in the IANA format
    pub fn get_default_time_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_time_zone
    }
    /// Appends an item to `local_time_zone_detection`.
    ///
    /// To override the contents of this collection use [`set_local_time_zone_detection`](Self::set_local_time_zone_detection).
    ///
    /// Local TimeZone Detection method list
    pub fn local_time_zone_detection(mut self, input: crate::types::LocalTimeZoneDetectionType) -> Self {
        let mut v = self.local_time_zone_detection.unwrap_or_default();
        v.push(input);
        self.local_time_zone_detection = ::std::option::Option::Some(v);
        self
    }
    /// Local TimeZone Detection method list
    pub fn set_local_time_zone_detection(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LocalTimeZoneDetectionType>>) -> Self {
        self.local_time_zone_detection = input;
        self
    }
    /// Local TimeZone Detection method list
    pub fn get_local_time_zone_detection(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LocalTimeZoneDetectionType>> {
        &self.local_time_zone_detection
    }
    /// Consumes the builder and constructs a [`LocalTimeZoneConfig`](crate::types::LocalTimeZoneConfig).
    pub fn build(self) -> crate::types::LocalTimeZoneConfig {
        crate::types::LocalTimeZoneConfig {
            default_time_zone: self.default_time_zone,
            local_time_zone_detection: self.local_time_zone_detection,
        }
    }
}
