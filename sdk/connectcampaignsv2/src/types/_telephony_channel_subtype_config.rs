// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Telephony Channel Subtype config
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TelephonyChannelSubtypeConfig {
    /// Allocates outbound capacity for the specific channel subtype of this campaign between multiple active campaigns
    pub capacity: ::std::option::Option<f64>,
    /// The queue for the call. If you specify a queue, the phone displayed for caller ID is the phone number specified in the queue. If you do not specify a queue, the queue defined in the contact flow is used. If you do not specify a queue, you must specify a source phone number.
    pub connect_queue_id: ::std::option::Option<::std::string::String>,
    /// Telephony Outbound Mode
    pub outbound_mode: ::std::option::Option<crate::types::TelephonyOutboundMode>,
    /// Default Telephony Outbound config
    pub default_outbound_config: ::std::option::Option<crate::types::TelephonyOutboundConfig>,
}
impl TelephonyChannelSubtypeConfig {
    /// Allocates outbound capacity for the specific channel subtype of this campaign between multiple active campaigns
    pub fn capacity(&self) -> ::std::option::Option<f64> {
        self.capacity
    }
    /// The queue for the call. If you specify a queue, the phone displayed for caller ID is the phone number specified in the queue. If you do not specify a queue, the queue defined in the contact flow is used. If you do not specify a queue, you must specify a source phone number.
    pub fn connect_queue_id(&self) -> ::std::option::Option<&str> {
        self.connect_queue_id.as_deref()
    }
    /// Telephony Outbound Mode
    pub fn outbound_mode(&self) -> ::std::option::Option<&crate::types::TelephonyOutboundMode> {
        self.outbound_mode.as_ref()
    }
    /// Default Telephony Outbound config
    pub fn default_outbound_config(&self) -> ::std::option::Option<&crate::types::TelephonyOutboundConfig> {
        self.default_outbound_config.as_ref()
    }
}
impl TelephonyChannelSubtypeConfig {
    /// Creates a new builder-style object to manufacture [`TelephonyChannelSubtypeConfig`](crate::types::TelephonyChannelSubtypeConfig).
    pub fn builder() -> crate::types::builders::TelephonyChannelSubtypeConfigBuilder {
        crate::types::builders::TelephonyChannelSubtypeConfigBuilder::default()
    }
}

/// A builder for [`TelephonyChannelSubtypeConfig`](crate::types::TelephonyChannelSubtypeConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TelephonyChannelSubtypeConfigBuilder {
    pub(crate) capacity: ::std::option::Option<f64>,
    pub(crate) connect_queue_id: ::std::option::Option<::std::string::String>,
    pub(crate) outbound_mode: ::std::option::Option<crate::types::TelephonyOutboundMode>,
    pub(crate) default_outbound_config: ::std::option::Option<crate::types::TelephonyOutboundConfig>,
}
impl TelephonyChannelSubtypeConfigBuilder {
    /// Allocates outbound capacity for the specific channel subtype of this campaign between multiple active campaigns
    pub fn capacity(mut self, input: f64) -> Self {
        self.capacity = ::std::option::Option::Some(input);
        self
    }
    /// Allocates outbound capacity for the specific channel subtype of this campaign between multiple active campaigns
    pub fn set_capacity(mut self, input: ::std::option::Option<f64>) -> Self {
        self.capacity = input;
        self
    }
    /// Allocates outbound capacity for the specific channel subtype of this campaign between multiple active campaigns
    pub fn get_capacity(&self) -> &::std::option::Option<f64> {
        &self.capacity
    }
    /// The queue for the call. If you specify a queue, the phone displayed for caller ID is the phone number specified in the queue. If you do not specify a queue, the queue defined in the contact flow is used. If you do not specify a queue, you must specify a source phone number.
    pub fn connect_queue_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connect_queue_id = ::std::option::Option::Some(input.into());
        self
    }
    /// The queue for the call. If you specify a queue, the phone displayed for caller ID is the phone number specified in the queue. If you do not specify a queue, the queue defined in the contact flow is used. If you do not specify a queue, you must specify a source phone number.
    pub fn set_connect_queue_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connect_queue_id = input;
        self
    }
    /// The queue for the call. If you specify a queue, the phone displayed for caller ID is the phone number specified in the queue. If you do not specify a queue, the queue defined in the contact flow is used. If you do not specify a queue, you must specify a source phone number.
    pub fn get_connect_queue_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connect_queue_id
    }
    /// Telephony Outbound Mode
    /// This field is required.
    pub fn outbound_mode(mut self, input: crate::types::TelephonyOutboundMode) -> Self {
        self.outbound_mode = ::std::option::Option::Some(input);
        self
    }
    /// Telephony Outbound Mode
    pub fn set_outbound_mode(mut self, input: ::std::option::Option<crate::types::TelephonyOutboundMode>) -> Self {
        self.outbound_mode = input;
        self
    }
    /// Telephony Outbound Mode
    pub fn get_outbound_mode(&self) -> &::std::option::Option<crate::types::TelephonyOutboundMode> {
        &self.outbound_mode
    }
    /// Default Telephony Outbound config
    /// This field is required.
    pub fn default_outbound_config(mut self, input: crate::types::TelephonyOutboundConfig) -> Self {
        self.default_outbound_config = ::std::option::Option::Some(input);
        self
    }
    /// Default Telephony Outbound config
    pub fn set_default_outbound_config(mut self, input: ::std::option::Option<crate::types::TelephonyOutboundConfig>) -> Self {
        self.default_outbound_config = input;
        self
    }
    /// Default Telephony Outbound config
    pub fn get_default_outbound_config(&self) -> &::std::option::Option<crate::types::TelephonyOutboundConfig> {
        &self.default_outbound_config
    }
    /// Consumes the builder and constructs a [`TelephonyChannelSubtypeConfig`](crate::types::TelephonyChannelSubtypeConfig).
    pub fn build(self) -> crate::types::TelephonyChannelSubtypeConfig {
        crate::types::TelephonyChannelSubtypeConfig {
            capacity: self.capacity,
            connect_queue_id: self.connect_queue_id,
            outbound_mode: self.outbound_mode,
            default_outbound_config: self.default_outbound_config,
        }
    }
}
