// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Communication Limit
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CommunicationLimit {
    /// Maximum number of contacts allowed for a given target within the given frequency.
    pub max_count_per_recipient: i32,
    /// The number of days to consider with regards to this limit.
    pub frequency: i32,
    /// The communication limit time unit.
    pub unit: crate::types::CommunicationLimitTimeUnit,
}
impl CommunicationLimit {
    /// Maximum number of contacts allowed for a given target within the given frequency.
    pub fn max_count_per_recipient(&self) -> i32 {
        self.max_count_per_recipient
    }
    /// The number of days to consider with regards to this limit.
    pub fn frequency(&self) -> i32 {
        self.frequency
    }
    /// The communication limit time unit.
    pub fn unit(&self) -> &crate::types::CommunicationLimitTimeUnit {
        &self.unit
    }
}
impl CommunicationLimit {
    /// Creates a new builder-style object to manufacture [`CommunicationLimit`](crate::types::CommunicationLimit).
    pub fn builder() -> crate::types::builders::CommunicationLimitBuilder {
        crate::types::builders::CommunicationLimitBuilder::default()
    }
}

/// A builder for [`CommunicationLimit`](crate::types::CommunicationLimit).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CommunicationLimitBuilder {
    pub(crate) max_count_per_recipient: ::std::option::Option<i32>,
    pub(crate) frequency: ::std::option::Option<i32>,
    pub(crate) unit: ::std::option::Option<crate::types::CommunicationLimitTimeUnit>,
}
impl CommunicationLimitBuilder {
    /// Maximum number of contacts allowed for a given target within the given frequency.
    /// This field is required.
    pub fn max_count_per_recipient(mut self, input: i32) -> Self {
        self.max_count_per_recipient = ::std::option::Option::Some(input);
        self
    }
    /// Maximum number of contacts allowed for a given target within the given frequency.
    pub fn set_max_count_per_recipient(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_count_per_recipient = input;
        self
    }
    /// Maximum number of contacts allowed for a given target within the given frequency.
    pub fn get_max_count_per_recipient(&self) -> &::std::option::Option<i32> {
        &self.max_count_per_recipient
    }
    /// The number of days to consider with regards to this limit.
    /// This field is required.
    pub fn frequency(mut self, input: i32) -> Self {
        self.frequency = ::std::option::Option::Some(input);
        self
    }
    /// The number of days to consider with regards to this limit.
    pub fn set_frequency(mut self, input: ::std::option::Option<i32>) -> Self {
        self.frequency = input;
        self
    }
    /// The number of days to consider with regards to this limit.
    pub fn get_frequency(&self) -> &::std::option::Option<i32> {
        &self.frequency
    }
    /// The communication limit time unit.
    /// This field is required.
    pub fn unit(mut self, input: crate::types::CommunicationLimitTimeUnit) -> Self {
        self.unit = ::std::option::Option::Some(input);
        self
    }
    /// The communication limit time unit.
    pub fn set_unit(mut self, input: ::std::option::Option<crate::types::CommunicationLimitTimeUnit>) -> Self {
        self.unit = input;
        self
    }
    /// The communication limit time unit.
    pub fn get_unit(&self) -> &::std::option::Option<crate::types::CommunicationLimitTimeUnit> {
        &self.unit
    }
    /// Consumes the builder and constructs a [`CommunicationLimit`](crate::types::CommunicationLimit).
    /// This method will fail if any of the following fields are not set:
    /// - [`max_count_per_recipient`](crate::types::builders::CommunicationLimitBuilder::max_count_per_recipient)
    /// - [`frequency`](crate::types::builders::CommunicationLimitBuilder::frequency)
    /// - [`unit`](crate::types::builders::CommunicationLimitBuilder::unit)
    pub fn build(self) -> ::std::result::Result<crate::types::CommunicationLimit, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CommunicationLimit {
            max_count_per_recipient: self.max_count_per_recipient.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "max_count_per_recipient",
                    "max_count_per_recipient was not specified but it is required when building CommunicationLimit",
                )
            })?,
            frequency: self.frequency.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "frequency",
                    "frequency was not specified but it is required when building CommunicationLimit",
                )
            })?,
            unit: self.unit.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "unit",
                    "unit was not specified but it is required when building CommunicationLimit",
                )
            })?,
        })
    }
}
