// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Failure details for a profile outbound request
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FailedProfileOutboundRequest {
    /// Client provided parameter used for idempotency. Its value must be unique for each request.
    pub client_token: ::std::option::Option<::std::string::String>,
    /// Identifier of the profile outbound request
    pub id: ::std::option::Option<::std::string::String>,
    /// Predefined code indicating the error that caused the failure
    pub failure_code: ::std::option::Option<crate::types::ProfileOutboundRequestFailureCode>,
}
impl FailedProfileOutboundRequest {
    /// Client provided parameter used for idempotency. Its value must be unique for each request.
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// Identifier of the profile outbound request
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// Predefined code indicating the error that caused the failure
    pub fn failure_code(&self) -> ::std::option::Option<&crate::types::ProfileOutboundRequestFailureCode> {
        self.failure_code.as_ref()
    }
}
impl FailedProfileOutboundRequest {
    /// Creates a new builder-style object to manufacture [`FailedProfileOutboundRequest`](crate::types::FailedProfileOutboundRequest).
    pub fn builder() -> crate::types::builders::FailedProfileOutboundRequestBuilder {
        crate::types::builders::FailedProfileOutboundRequestBuilder::default()
    }
}

/// A builder for [`FailedProfileOutboundRequest`](crate::types::FailedProfileOutboundRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FailedProfileOutboundRequestBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) failure_code: ::std::option::Option<crate::types::ProfileOutboundRequestFailureCode>,
}
impl FailedProfileOutboundRequestBuilder {
    /// Client provided parameter used for idempotency. Its value must be unique for each request.
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// Client provided parameter used for idempotency. Its value must be unique for each request.
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Client provided parameter used for idempotency. Its value must be unique for each request.
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Identifier of the profile outbound request
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// Identifier of the profile outbound request
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// Identifier of the profile outbound request
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Predefined code indicating the error that caused the failure
    pub fn failure_code(mut self, input: crate::types::ProfileOutboundRequestFailureCode) -> Self {
        self.failure_code = ::std::option::Option::Some(input);
        self
    }
    /// Predefined code indicating the error that caused the failure
    pub fn set_failure_code(mut self, input: ::std::option::Option<crate::types::ProfileOutboundRequestFailureCode>) -> Self {
        self.failure_code = input;
        self
    }
    /// Predefined code indicating the error that caused the failure
    pub fn get_failure_code(&self) -> &::std::option::Option<crate::types::ProfileOutboundRequestFailureCode> {
        &self.failure_code
    }
    /// Consumes the builder and constructs a [`FailedProfileOutboundRequest`](crate::types::FailedProfileOutboundRequest).
    pub fn build(self) -> crate::types::FailedProfileOutboundRequest {
        crate::types::FailedProfileOutboundRequest {
            client_token: self.client_token,
            id: self.id,
            failure_code: self.failure_code,
        }
    }
}
