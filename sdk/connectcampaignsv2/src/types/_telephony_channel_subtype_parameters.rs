// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Parameters for the Telephony Channel Subtype
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TelephonyChannelSubtypeParameters {
    /// The phone number of the customer, in E.164 format.
    pub destination_phone_number: ::std::string::String,
    /// A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in contact flows just like any other contact attributes.
    pub attributes: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    /// The phone number associated with the Amazon Connect instance, in E.164 format. If you do not specify a source phone number, you must specify a queue.
    pub connect_source_phone_number: ::std::option::Option<::std::string::String>,
    /// Answering Machine Detection config
    pub answer_machine_detection_config: ::std::option::Option<crate::types::AnswerMachineDetectionConfig>,
}
impl TelephonyChannelSubtypeParameters {
    /// The phone number of the customer, in E.164 format.
    pub fn destination_phone_number(&self) -> &str {
        use std::ops::Deref;
        self.destination_phone_number.deref()
    }
    /// A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in contact flows just like any other contact attributes.
    pub fn attributes(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.attributes
    }
    /// The phone number associated with the Amazon Connect instance, in E.164 format. If you do not specify a source phone number, you must specify a queue.
    pub fn connect_source_phone_number(&self) -> ::std::option::Option<&str> {
        self.connect_source_phone_number.as_deref()
    }
    /// Answering Machine Detection config
    pub fn answer_machine_detection_config(&self) -> ::std::option::Option<&crate::types::AnswerMachineDetectionConfig> {
        self.answer_machine_detection_config.as_ref()
    }
}
impl ::std::fmt::Debug for TelephonyChannelSubtypeParameters {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TelephonyChannelSubtypeParameters");
        formatter.field("destination_phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("attributes", &"*** Sensitive Data Redacted ***");
        formatter.field("connect_source_phone_number", &self.connect_source_phone_number);
        formatter.field("answer_machine_detection_config", &self.answer_machine_detection_config);
        formatter.finish()
    }
}
impl TelephonyChannelSubtypeParameters {
    /// Creates a new builder-style object to manufacture [`TelephonyChannelSubtypeParameters`](crate::types::TelephonyChannelSubtypeParameters).
    pub fn builder() -> crate::types::builders::TelephonyChannelSubtypeParametersBuilder {
        crate::types::builders::TelephonyChannelSubtypeParametersBuilder::default()
    }
}

/// A builder for [`TelephonyChannelSubtypeParameters`](crate::types::TelephonyChannelSubtypeParameters).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct TelephonyChannelSubtypeParametersBuilder {
    pub(crate) destination_phone_number: ::std::option::Option<::std::string::String>,
    pub(crate) attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) connect_source_phone_number: ::std::option::Option<::std::string::String>,
    pub(crate) answer_machine_detection_config: ::std::option::Option<crate::types::AnswerMachineDetectionConfig>,
}
impl TelephonyChannelSubtypeParametersBuilder {
    /// The phone number of the customer, in E.164 format.
    /// This field is required.
    pub fn destination_phone_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_phone_number = ::std::option::Option::Some(input.into());
        self
    }
    /// The phone number of the customer, in E.164 format.
    pub fn set_destination_phone_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_phone_number = input;
        self
    }
    /// The phone number of the customer, in E.164 format.
    pub fn get_destination_phone_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_phone_number
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in contact flows just like any other contact attributes.
    pub fn attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in contact flows just like any other contact attributes.
    pub fn set_attributes(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.attributes = input;
        self
    }
    /// A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in contact flows just like any other contact attributes.
    pub fn get_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.attributes
    }
    /// The phone number associated with the Amazon Connect instance, in E.164 format. If you do not specify a source phone number, you must specify a queue.
    pub fn connect_source_phone_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connect_source_phone_number = ::std::option::Option::Some(input.into());
        self
    }
    /// The phone number associated with the Amazon Connect instance, in E.164 format. If you do not specify a source phone number, you must specify a queue.
    pub fn set_connect_source_phone_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connect_source_phone_number = input;
        self
    }
    /// The phone number associated with the Amazon Connect instance, in E.164 format. If you do not specify a source phone number, you must specify a queue.
    pub fn get_connect_source_phone_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.connect_source_phone_number
    }
    /// Answering Machine Detection config
    pub fn answer_machine_detection_config(mut self, input: crate::types::AnswerMachineDetectionConfig) -> Self {
        self.answer_machine_detection_config = ::std::option::Option::Some(input);
        self
    }
    /// Answering Machine Detection config
    pub fn set_answer_machine_detection_config(mut self, input: ::std::option::Option<crate::types::AnswerMachineDetectionConfig>) -> Self {
        self.answer_machine_detection_config = input;
        self
    }
    /// Answering Machine Detection config
    pub fn get_answer_machine_detection_config(&self) -> &::std::option::Option<crate::types::AnswerMachineDetectionConfig> {
        &self.answer_machine_detection_config
    }
    /// Consumes the builder and constructs a [`TelephonyChannelSubtypeParameters`](crate::types::TelephonyChannelSubtypeParameters).
    /// This method will fail if any of the following fields are not set:
    /// - [`destination_phone_number`](crate::types::builders::TelephonyChannelSubtypeParametersBuilder::destination_phone_number)
    /// - [`attributes`](crate::types::builders::TelephonyChannelSubtypeParametersBuilder::attributes)
    pub fn build(self) -> ::std::result::Result<crate::types::TelephonyChannelSubtypeParameters, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TelephonyChannelSubtypeParameters {
            destination_phone_number: self.destination_phone_number.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "destination_phone_number",
                    "destination_phone_number was not specified but it is required when building TelephonyChannelSubtypeParameters",
                )
            })?,
            attributes: self.attributes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "attributes",
                    "attributes was not specified but it is required when building TelephonyChannelSubtypeParameters",
                )
            })?,
            connect_source_phone_number: self.connect_source_phone_number,
            answer_machine_detection_config: self.answer_machine_detection_config,
        })
    }
}
impl ::std::fmt::Debug for TelephonyChannelSubtypeParametersBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TelephonyChannelSubtypeParametersBuilder");
        formatter.field("destination_phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("attributes", &"*** Sensitive Data Redacted ***");
        formatter.field("connect_source_phone_number", &self.connect_source_phone_number);
        formatter.field("answer_machine_detection_config", &self.answer_machine_detection_config);
        formatter.finish()
    }
}
