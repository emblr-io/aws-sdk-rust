// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Restricted period
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RestrictedPeriod {
    /// The name of a restricted period.
    pub name: ::std::option::Option<::std::string::String>,
    /// Date in ISO 8601 format, e.g. 2024-01-01
    pub start_date: ::std::string::String,
    /// Date in ISO 8601 format, e.g. 2024-01-01
    pub end_date: ::std::string::String,
}
impl RestrictedPeriod {
    /// The name of a restricted period.
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// Date in ISO 8601 format, e.g. 2024-01-01
    pub fn start_date(&self) -> &str {
        use std::ops::Deref;
        self.start_date.deref()
    }
    /// Date in ISO 8601 format, e.g. 2024-01-01
    pub fn end_date(&self) -> &str {
        use std::ops::Deref;
        self.end_date.deref()
    }
}
impl RestrictedPeriod {
    /// Creates a new builder-style object to manufacture [`RestrictedPeriod`](crate::types::RestrictedPeriod).
    pub fn builder() -> crate::types::builders::RestrictedPeriodBuilder {
        crate::types::builders::RestrictedPeriodBuilder::default()
    }
}

/// A builder for [`RestrictedPeriod`](crate::types::RestrictedPeriod).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RestrictedPeriodBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) start_date: ::std::option::Option<::std::string::String>,
    pub(crate) end_date: ::std::option::Option<::std::string::String>,
}
impl RestrictedPeriodBuilder {
    /// The name of a restricted period.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// The name of a restricted period.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// The name of a restricted period.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Date in ISO 8601 format, e.g. 2024-01-01
    /// This field is required.
    pub fn start_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.start_date = ::std::option::Option::Some(input.into());
        self
    }
    /// Date in ISO 8601 format, e.g. 2024-01-01
    pub fn set_start_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.start_date = input;
        self
    }
    /// Date in ISO 8601 format, e.g. 2024-01-01
    pub fn get_start_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.start_date
    }
    /// Date in ISO 8601 format, e.g. 2024-01-01
    /// This field is required.
    pub fn end_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.end_date = ::std::option::Option::Some(input.into());
        self
    }
    /// Date in ISO 8601 format, e.g. 2024-01-01
    pub fn set_end_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.end_date = input;
        self
    }
    /// Date in ISO 8601 format, e.g. 2024-01-01
    pub fn get_end_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.end_date
    }
    /// Consumes the builder and constructs a [`RestrictedPeriod`](crate::types::RestrictedPeriod).
    /// This method will fail if any of the following fields are not set:
    /// - [`start_date`](crate::types::builders::RestrictedPeriodBuilder::start_date)
    /// - [`end_date`](crate::types::builders::RestrictedPeriodBuilder::end_date)
    pub fn build(self) -> ::std::result::Result<crate::types::RestrictedPeriod, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RestrictedPeriod {
            name: self.name,
            start_date: self.start_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_date",
                    "start_date was not specified but it is required when building RestrictedPeriod",
                )
            })?,
            end_date: self.end_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "end_date",
                    "end_date was not specified but it is required when building RestrictedPeriod",
                )
            })?,
        })
    }
}
