// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Time window config
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TimeWindow {
    /// Open Hours config
    pub open_hours: ::std::option::Option<crate::types::OpenHours>,
    /// Restricted period config
    pub restricted_periods: ::std::option::Option<crate::types::RestrictedPeriods>,
}
impl TimeWindow {
    /// Open Hours config
    pub fn open_hours(&self) -> ::std::option::Option<&crate::types::OpenHours> {
        self.open_hours.as_ref()
    }
    /// Restricted period config
    pub fn restricted_periods(&self) -> ::std::option::Option<&crate::types::RestrictedPeriods> {
        self.restricted_periods.as_ref()
    }
}
impl TimeWindow {
    /// Creates a new builder-style object to manufacture [`TimeWindow`](crate::types::TimeWindow).
    pub fn builder() -> crate::types::builders::TimeWindowBuilder {
        crate::types::builders::TimeWindowBuilder::default()
    }
}

/// A builder for [`TimeWindow`](crate::types::TimeWindow).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TimeWindowBuilder {
    pub(crate) open_hours: ::std::option::Option<crate::types::OpenHours>,
    pub(crate) restricted_periods: ::std::option::Option<crate::types::RestrictedPeriods>,
}
impl TimeWindowBuilder {
    /// Open Hours config
    /// This field is required.
    pub fn open_hours(mut self, input: crate::types::OpenHours) -> Self {
        self.open_hours = ::std::option::Option::Some(input);
        self
    }
    /// Open Hours config
    pub fn set_open_hours(mut self, input: ::std::option::Option<crate::types::OpenHours>) -> Self {
        self.open_hours = input;
        self
    }
    /// Open Hours config
    pub fn get_open_hours(&self) -> &::std::option::Option<crate::types::OpenHours> {
        &self.open_hours
    }
    /// Restricted period config
    pub fn restricted_periods(mut self, input: crate::types::RestrictedPeriods) -> Self {
        self.restricted_periods = ::std::option::Option::Some(input);
        self
    }
    /// Restricted period config
    pub fn set_restricted_periods(mut self, input: ::std::option::Option<crate::types::RestrictedPeriods>) -> Self {
        self.restricted_periods = input;
        self
    }
    /// Restricted period config
    pub fn get_restricted_periods(&self) -> &::std::option::Option<crate::types::RestrictedPeriods> {
        &self.restricted_periods
    }
    /// Consumes the builder and constructs a [`TimeWindow`](crate::types::TimeWindow).
    pub fn build(self) -> crate::types::TimeWindow {
        crate::types::TimeWindow {
            open_hours: self.open_hours,
            restricted_periods: self.restricted_periods,
        }
    }
}
