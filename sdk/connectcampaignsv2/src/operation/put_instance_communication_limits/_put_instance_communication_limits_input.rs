// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The request for PutInstanceCommunicationLimits API.
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutInstanceCommunicationLimitsInput {
    /// Amazon Connect Instance Id
    pub connect_instance_id: ::std::option::Option<::std::string::String>,
    /// Instance Communication limits config
    pub communication_limits_config: ::std::option::Option<crate::types::InstanceCommunicationLimitsConfig>,
}
impl PutInstanceCommunicationLimitsInput {
    /// Amazon Connect Instance Id
    pub fn connect_instance_id(&self) -> ::std::option::Option<&str> {
        self.connect_instance_id.as_deref()
    }
    /// Instance Communication limits config
    pub fn communication_limits_config(&self) -> ::std::option::Option<&crate::types::InstanceCommunicationLimitsConfig> {
        self.communication_limits_config.as_ref()
    }
}
impl PutInstanceCommunicationLimitsInput {
    /// Creates a new builder-style object to manufacture [`PutInstanceCommunicationLimitsInput`](crate::operation::put_instance_communication_limits::PutInstanceCommunicationLimitsInput).
    pub fn builder() -> crate::operation::put_instance_communication_limits::builders::PutInstanceCommunicationLimitsInputBuilder {
        crate::operation::put_instance_communication_limits::builders::PutInstanceCommunicationLimitsInputBuilder::default()
    }
}

/// A builder for [`PutInstanceCommunicationLimitsInput`](crate::operation::put_instance_communication_limits::PutInstanceCommunicationLimitsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PutInstanceCommunicationLimitsInputBuilder {
    pub(crate) connect_instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) communication_limits_config: ::std::option::Option<crate::types::InstanceCommunicationLimitsConfig>,
}
impl PutInstanceCommunicationLimitsInputBuilder {
    /// Amazon Connect Instance Id
    /// This field is required.
    pub fn connect_instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connect_instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Amazon Connect Instance Id
    pub fn set_connect_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connect_instance_id = input;
        self
    }
    /// Amazon Connect Instance Id
    pub fn get_connect_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connect_instance_id
    }
    /// Instance Communication limits config
    /// This field is required.
    pub fn communication_limits_config(mut self, input: crate::types::InstanceCommunicationLimitsConfig) -> Self {
        self.communication_limits_config = ::std::option::Option::Some(input);
        self
    }
    /// Instance Communication limits config
    pub fn set_communication_limits_config(mut self, input: ::std::option::Option<crate::types::InstanceCommunicationLimitsConfig>) -> Self {
        self.communication_limits_config = input;
        self
    }
    /// Instance Communication limits config
    pub fn get_communication_limits_config(&self) -> &::std::option::Option<crate::types::InstanceCommunicationLimitsConfig> {
        &self.communication_limits_config
    }
    /// Consumes the builder and constructs a [`PutInstanceCommunicationLimitsInput`](crate::operation::put_instance_communication_limits::PutInstanceCommunicationLimitsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_instance_communication_limits::PutInstanceCommunicationLimitsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::put_instance_communication_limits::PutInstanceCommunicationLimitsInput {
            connect_instance_id: self.connect_instance_id,
            communication_limits_config: self.communication_limits_config,
        })
    }
}
