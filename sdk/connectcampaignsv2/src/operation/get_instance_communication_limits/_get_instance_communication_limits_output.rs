// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The response for GetInstanceCommunicationLimits API.
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetInstanceCommunicationLimitsOutput {
    /// Instance Communication limits config
    pub communication_limits_config: ::std::option::Option<crate::types::InstanceCommunicationLimitsConfig>,
    _request_id: Option<String>,
}
impl GetInstanceCommunicationLimitsOutput {
    /// Instance Communication limits config
    pub fn communication_limits_config(&self) -> ::std::option::Option<&crate::types::InstanceCommunicationLimitsConfig> {
        self.communication_limits_config.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetInstanceCommunicationLimitsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetInstanceCommunicationLimitsOutput {
    /// Creates a new builder-style object to manufacture [`GetInstanceCommunicationLimitsOutput`](crate::operation::get_instance_communication_limits::GetInstanceCommunicationLimitsOutput).
    pub fn builder() -> crate::operation::get_instance_communication_limits::builders::GetInstanceCommunicationLimitsOutputBuilder {
        crate::operation::get_instance_communication_limits::builders::GetInstanceCommunicationLimitsOutputBuilder::default()
    }
}

/// A builder for [`GetInstanceCommunicationLimitsOutput`](crate::operation::get_instance_communication_limits::GetInstanceCommunicationLimitsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetInstanceCommunicationLimitsOutputBuilder {
    pub(crate) communication_limits_config: ::std::option::Option<crate::types::InstanceCommunicationLimitsConfig>,
    _request_id: Option<String>,
}
impl GetInstanceCommunicationLimitsOutputBuilder {
    /// Instance Communication limits config
    pub fn communication_limits_config(mut self, input: crate::types::InstanceCommunicationLimitsConfig) -> Self {
        self.communication_limits_config = ::std::option::Option::Some(input);
        self
    }
    /// Instance Communication limits config
    pub fn set_communication_limits_config(mut self, input: ::std::option::Option<crate::types::InstanceCommunicationLimitsConfig>) -> Self {
        self.communication_limits_config = input;
        self
    }
    /// Instance Communication limits config
    pub fn get_communication_limits_config(&self) -> &::std::option::Option<crate::types::InstanceCommunicationLimitsConfig> {
        &self.communication_limits_config
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetInstanceCommunicationLimitsOutput`](crate::operation::get_instance_communication_limits::GetInstanceCommunicationLimitsOutput).
    pub fn build(self) -> crate::operation::get_instance_communication_limits::GetInstanceCommunicationLimitsOutput {
        crate::operation::get_instance_communication_limits::GetInstanceCommunicationLimitsOutput {
            communication_limits_config: self.communication_limits_config,
            _request_id: self._request_id,
        }
    }
}
