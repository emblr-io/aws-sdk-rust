// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The identifier for a serverless namespace.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServerlessIdentifier {
    /// <p>The unique identifier for the serverless namespace.</p>
    pub namespace_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the workgroup associated with the serverless namespace.</p>
    pub workgroup_identifier: ::std::option::Option<::std::string::String>,
}
impl ServerlessIdentifier {
    /// <p>The unique identifier for the serverless namespace.</p>
    pub fn namespace_identifier(&self) -> ::std::option::Option<&str> {
        self.namespace_identifier.as_deref()
    }
    /// <p>The unique identifier for the workgroup associated with the serverless namespace.</p>
    pub fn workgroup_identifier(&self) -> ::std::option::Option<&str> {
        self.workgroup_identifier.as_deref()
    }
}
impl ServerlessIdentifier {
    /// Creates a new builder-style object to manufacture [`ServerlessIdentifier`](crate::types::ServerlessIdentifier).
    pub fn builder() -> crate::types::builders::ServerlessIdentifierBuilder {
        crate::types::builders::ServerlessIdentifierBuilder::default()
    }
}

/// A builder for [`ServerlessIdentifier`](crate::types::ServerlessIdentifier).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServerlessIdentifierBuilder {
    pub(crate) namespace_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) workgroup_identifier: ::std::option::Option<::std::string::String>,
}
impl ServerlessIdentifierBuilder {
    /// <p>The unique identifier for the serverless namespace.</p>
    /// This field is required.
    pub fn namespace_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.namespace_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the serverless namespace.</p>
    pub fn set_namespace_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.namespace_identifier = input;
        self
    }
    /// <p>The unique identifier for the serverless namespace.</p>
    pub fn get_namespace_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.namespace_identifier
    }
    /// <p>The unique identifier for the workgroup associated with the serverless namespace.</p>
    /// This field is required.
    pub fn workgroup_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workgroup_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the workgroup associated with the serverless namespace.</p>
    pub fn set_workgroup_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workgroup_identifier = input;
        self
    }
    /// <p>The unique identifier for the workgroup associated with the serverless namespace.</p>
    pub fn get_workgroup_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.workgroup_identifier
    }
    /// Consumes the builder and constructs a [`ServerlessIdentifier`](crate::types::ServerlessIdentifier).
    pub fn build(self) -> crate::types::ServerlessIdentifier {
        crate::types::ServerlessIdentifier {
            namespace_identifier: self.namespace_identifier,
            workgroup_identifier: self.workgroup_identifier,
        }
    }
}
