// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The recommended action from the Amazon Redshift Advisor recommendation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecommendedAction {
    /// <p>The specific instruction about the command.</p>
    pub text: ::std::option::Option<::std::string::String>,
    /// <p>The database name to perform the action on. Only applicable if the type of command is SQL.</p>
    pub database: ::std::option::Option<::std::string::String>,
    /// <p>The command to run.</p>
    pub command: ::std::option::Option<::std::string::String>,
    /// <p>The type of command.</p>
    pub r#type: ::std::option::Option<crate::types::RecommendedActionType>,
}
impl RecommendedAction {
    /// <p>The specific instruction about the command.</p>
    pub fn text(&self) -> ::std::option::Option<&str> {
        self.text.as_deref()
    }
    /// <p>The database name to perform the action on. Only applicable if the type of command is SQL.</p>
    pub fn database(&self) -> ::std::option::Option<&str> {
        self.database.as_deref()
    }
    /// <p>The command to run.</p>
    pub fn command(&self) -> ::std::option::Option<&str> {
        self.command.as_deref()
    }
    /// <p>The type of command.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::RecommendedActionType> {
        self.r#type.as_ref()
    }
}
impl RecommendedAction {
    /// Creates a new builder-style object to manufacture [`RecommendedAction`](crate::types::RecommendedAction).
    pub fn builder() -> crate::types::builders::RecommendedActionBuilder {
        crate::types::builders::RecommendedActionBuilder::default()
    }
}

/// A builder for [`RecommendedAction`](crate::types::RecommendedAction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RecommendedActionBuilder {
    pub(crate) text: ::std::option::Option<::std::string::String>,
    pub(crate) database: ::std::option::Option<::std::string::String>,
    pub(crate) command: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::RecommendedActionType>,
}
impl RecommendedActionBuilder {
    /// <p>The specific instruction about the command.</p>
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The specific instruction about the command.</p>
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>The specific instruction about the command.</p>
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }
    /// <p>The database name to perform the action on. Only applicable if the type of command is SQL.</p>
    pub fn database(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database name to perform the action on. Only applicable if the type of command is SQL.</p>
    pub fn set_database(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database = input;
        self
    }
    /// <p>The database name to perform the action on. Only applicable if the type of command is SQL.</p>
    pub fn get_database(&self) -> &::std::option::Option<::std::string::String> {
        &self.database
    }
    /// <p>The command to run.</p>
    pub fn command(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.command = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The command to run.</p>
    pub fn set_command(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.command = input;
        self
    }
    /// <p>The command to run.</p>
    pub fn get_command(&self) -> &::std::option::Option<::std::string::String> {
        &self.command
    }
    /// <p>The type of command.</p>
    pub fn r#type(mut self, input: crate::types::RecommendedActionType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of command.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RecommendedActionType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of command.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RecommendedActionType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`RecommendedAction`](crate::types::RecommendedAction).
    pub fn build(self) -> crate::types::RecommendedAction {
        crate::types::RecommendedAction {
            text: self.text,
            database: self.database,
            command: self.command,
            r#type: self.r#type,
        }
    }
}
