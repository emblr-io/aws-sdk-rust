// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A link to an Amazon Redshift Advisor reference for more information about a recommendation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReferenceLink {
    /// <p>The hyperlink text that describes the link to more information.</p>
    pub text: ::std::option::Option<::std::string::String>,
    /// <p>The URL address to find more information.</p>
    pub link: ::std::option::Option<::std::string::String>,
}
impl ReferenceLink {
    /// <p>The hyperlink text that describes the link to more information.</p>
    pub fn text(&self) -> ::std::option::Option<&str> {
        self.text.as_deref()
    }
    /// <p>The URL address to find more information.</p>
    pub fn link(&self) -> ::std::option::Option<&str> {
        self.link.as_deref()
    }
}
impl ReferenceLink {
    /// Creates a new builder-style object to manufacture [`ReferenceLink`](crate::types::ReferenceLink).
    pub fn builder() -> crate::types::builders::ReferenceLinkBuilder {
        crate::types::builders::ReferenceLinkBuilder::default()
    }
}

/// A builder for [`ReferenceLink`](crate::types::ReferenceLink).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ReferenceLinkBuilder {
    pub(crate) text: ::std::option::Option<::std::string::String>,
    pub(crate) link: ::std::option::Option<::std::string::String>,
}
impl ReferenceLinkBuilder {
    /// <p>The hyperlink text that describes the link to more information.</p>
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hyperlink text that describes the link to more information.</p>
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>The hyperlink text that describes the link to more information.</p>
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }
    /// <p>The URL address to find more information.</p>
    pub fn link(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.link = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL address to find more information.</p>
    pub fn set_link(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.link = input;
        self
    }
    /// <p>The URL address to find more information.</p>
    pub fn get_link(&self) -> &::std::option::Option<::std::string::String> {
        &self.link
    }
    /// Consumes the builder and constructs a [`ReferenceLink`](crate::types::ReferenceLink).
    pub fn build(self) -> crate::types::ReferenceLink {
        crate::types::ReferenceLink {
            text: self.text,
            link: self.link,
        }
    }
}
