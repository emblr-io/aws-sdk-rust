// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Response of GetDataAutomationStatus API.
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDataAutomationStatusOutput {
    /// Job Status.
    pub status: ::std::option::Option<crate::types::AutomationJobStatus>,
    /// Error Type.
    pub error_type: ::std::option::Option<::std::string::String>,
    /// Error Message.
    pub error_message: ::std::option::Option<::std::string::String>,
    /// Output configuration.
    pub output_configuration: ::std::option::Option<crate::types::OutputConfiguration>,
    _request_id: Option<String>,
}
impl GetDataAutomationStatusOutput {
    /// Job Status.
    pub fn status(&self) -> ::std::option::Option<&crate::types::AutomationJobStatus> {
        self.status.as_ref()
    }
    /// Error Type.
    pub fn error_type(&self) -> ::std::option::Option<&str> {
        self.error_type.as_deref()
    }
    /// Error Message.
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// Output configuration.
    pub fn output_configuration(&self) -> ::std::option::Option<&crate::types::OutputConfiguration> {
        self.output_configuration.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetDataAutomationStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDataAutomationStatusOutput {
    /// Creates a new builder-style object to manufacture [`GetDataAutomationStatusOutput`](crate::operation::get_data_automation_status::GetDataAutomationStatusOutput).
    pub fn builder() -> crate::operation::get_data_automation_status::builders::GetDataAutomationStatusOutputBuilder {
        crate::operation::get_data_automation_status::builders::GetDataAutomationStatusOutputBuilder::default()
    }
}

/// A builder for [`GetDataAutomationStatusOutput`](crate::operation::get_data_automation_status::GetDataAutomationStatusOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetDataAutomationStatusOutputBuilder {
    pub(crate) status: ::std::option::Option<crate::types::AutomationJobStatus>,
    pub(crate) error_type: ::std::option::Option<::std::string::String>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
    pub(crate) output_configuration: ::std::option::Option<crate::types::OutputConfiguration>,
    _request_id: Option<String>,
}
impl GetDataAutomationStatusOutputBuilder {
    /// Job Status.
    pub fn status(mut self, input: crate::types::AutomationJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// Job Status.
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AutomationJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// Job Status.
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AutomationJobStatus> {
        &self.status
    }
    /// Error Type.
    pub fn error_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_type = ::std::option::Option::Some(input.into());
        self
    }
    /// Error Type.
    pub fn set_error_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_type = input;
        self
    }
    /// Error Type.
    pub fn get_error_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_type
    }
    /// Error Message.
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// Error Message.
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// Error Message.
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// Output configuration.
    pub fn output_configuration(mut self, input: crate::types::OutputConfiguration) -> Self {
        self.output_configuration = ::std::option::Option::Some(input);
        self
    }
    /// Output configuration.
    pub fn set_output_configuration(mut self, input: ::std::option::Option<crate::types::OutputConfiguration>) -> Self {
        self.output_configuration = input;
        self
    }
    /// Output configuration.
    pub fn get_output_configuration(&self) -> &::std::option::Option<crate::types::OutputConfiguration> {
        &self.output_configuration
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDataAutomationStatusOutput`](crate::operation::get_data_automation_status::GetDataAutomationStatusOutput).
    pub fn build(self) -> crate::operation::get_data_automation_status::GetDataAutomationStatusOutput {
        crate::operation::get_data_automation_status::GetDataAutomationStatusOutput {
            status: self.status,
            error_type: self.error_type,
            error_message: self.error_message,
            output_configuration: self.output_configuration,
            _request_id: self._request_id,
        }
    }
}
