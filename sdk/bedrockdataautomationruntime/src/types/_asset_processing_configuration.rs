// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Config containing asset processing related knobs for all modalities
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssetProcessingConfiguration {
    /// Video asset processing configuration
    pub video: ::std::option::Option<crate::types::VideoAssetProcessingConfiguration>,
}
impl AssetProcessingConfiguration {
    /// Video asset processing configuration
    pub fn video(&self) -> ::std::option::Option<&crate::types::VideoAssetProcessingConfiguration> {
        self.video.as_ref()
    }
}
impl AssetProcessingConfiguration {
    /// Creates a new builder-style object to manufacture [`AssetProcessingConfiguration`](crate::types::AssetProcessingConfiguration).
    pub fn builder() -> crate::types::builders::AssetProcessingConfigurationBuilder {
        crate::types::builders::AssetProcessingConfigurationBuilder::default()
    }
}

/// A builder for [`AssetProcessingConfiguration`](crate::types::AssetProcessingConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssetProcessingConfigurationBuilder {
    pub(crate) video: ::std::option::Option<crate::types::VideoAssetProcessingConfiguration>,
}
impl AssetProcessingConfigurationBuilder {
    /// Video asset processing configuration
    pub fn video(mut self, input: crate::types::VideoAssetProcessingConfiguration) -> Self {
        self.video = ::std::option::Option::Some(input);
        self
    }
    /// Video asset processing configuration
    pub fn set_video(mut self, input: ::std::option::Option<crate::types::VideoAssetProcessingConfiguration>) -> Self {
        self.video = input;
        self
    }
    /// Video asset processing configuration
    pub fn get_video(&self) -> &::std::option::Option<crate::types::VideoAssetProcessingConfiguration> {
        &self.video
    }
    /// Consumes the builder and constructs a [`AssetProcessingConfiguration`](crate::types::AssetProcessingConfiguration).
    pub fn build(self) -> crate::types::AssetProcessingConfiguration {
        crate::types::AssetProcessingConfiguration { video: self.video }
    }
}
