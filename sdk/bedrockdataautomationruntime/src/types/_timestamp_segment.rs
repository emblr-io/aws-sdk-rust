// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Timestamp segment
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TimestampSegment {
    /// Start timestamp in milliseconds
    pub start_time_millis: i64,
    /// End timestamp in milliseconds
    pub end_time_millis: i64,
}
impl TimestampSegment {
    /// Start timestamp in milliseconds
    pub fn start_time_millis(&self) -> i64 {
        self.start_time_millis
    }
    /// End timestamp in milliseconds
    pub fn end_time_millis(&self) -> i64 {
        self.end_time_millis
    }
}
impl TimestampSegment {
    /// Creates a new builder-style object to manufacture [`TimestampSegment`](crate::types::TimestampSegment).
    pub fn builder() -> crate::types::builders::TimestampSegmentBuilder {
        crate::types::builders::TimestampSegmentBuilder::default()
    }
}

/// A builder for [`TimestampSegment`](crate::types::TimestampSegment).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TimestampSegmentBuilder {
    pub(crate) start_time_millis: ::std::option::Option<i64>,
    pub(crate) end_time_millis: ::std::option::Option<i64>,
}
impl TimestampSegmentBuilder {
    /// Start timestamp in milliseconds
    /// This field is required.
    pub fn start_time_millis(mut self, input: i64) -> Self {
        self.start_time_millis = ::std::option::Option::Some(input);
        self
    }
    /// Start timestamp in milliseconds
    pub fn set_start_time_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.start_time_millis = input;
        self
    }
    /// Start timestamp in milliseconds
    pub fn get_start_time_millis(&self) -> &::std::option::Option<i64> {
        &self.start_time_millis
    }
    /// End timestamp in milliseconds
    /// This field is required.
    pub fn end_time_millis(mut self, input: i64) -> Self {
        self.end_time_millis = ::std::option::Option::Some(input);
        self
    }
    /// End timestamp in milliseconds
    pub fn set_end_time_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.end_time_millis = input;
        self
    }
    /// End timestamp in milliseconds
    pub fn get_end_time_millis(&self) -> &::std::option::Option<i64> {
        &self.end_time_millis
    }
    /// Consumes the builder and constructs a [`TimestampSegment`](crate::types::TimestampSegment).
    /// This method will fail if any of the following fields are not set:
    /// - [`start_time_millis`](crate::types::builders::TimestampSegmentBuilder::start_time_millis)
    /// - [`end_time_millis`](crate::types::builders::TimestampSegmentBuilder::end_time_millis)
    pub fn build(self) -> ::std::result::Result<crate::types::TimestampSegment, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TimestampSegment {
            start_time_millis: self.start_time_millis.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_time_millis",
                    "start_time_millis was not specified but it is required when building TimestampSegment",
                )
            })?,
            end_time_millis: self.end_time_millis.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "end_time_millis",
                    "end_time_millis was not specified but it is required when building TimestampSegment",
                )
            })?,
        })
    }
}
