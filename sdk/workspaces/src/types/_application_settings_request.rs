// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The persistent application settings for WorkSpaces Pools users.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApplicationSettingsRequest {
    /// <p>Enables or disables persistent application settings for users during their pool sessions.</p>
    pub status: crate::types::ApplicationSettingsStatusEnum,
    /// <p>The path prefix for the S3 bucket where users’ persistent application settings are stored. You can allow the same persistent application settings to be used across multiple pools by specifying the same settings group for each pool.</p>
    pub settings_group: ::std::option::Option<::std::string::String>,
}
impl ApplicationSettingsRequest {
    /// <p>Enables or disables persistent application settings for users during their pool sessions.</p>
    pub fn status(&self) -> &crate::types::ApplicationSettingsStatusEnum {
        &self.status
    }
    /// <p>The path prefix for the S3 bucket where users’ persistent application settings are stored. You can allow the same persistent application settings to be used across multiple pools by specifying the same settings group for each pool.</p>
    pub fn settings_group(&self) -> ::std::option::Option<&str> {
        self.settings_group.as_deref()
    }
}
impl ApplicationSettingsRequest {
    /// Creates a new builder-style object to manufacture [`ApplicationSettingsRequest`](crate::types::ApplicationSettingsRequest).
    pub fn builder() -> crate::types::builders::ApplicationSettingsRequestBuilder {
        crate::types::builders::ApplicationSettingsRequestBuilder::default()
    }
}

/// A builder for [`ApplicationSettingsRequest`](crate::types::ApplicationSettingsRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ApplicationSettingsRequestBuilder {
    pub(crate) status: ::std::option::Option<crate::types::ApplicationSettingsStatusEnum>,
    pub(crate) settings_group: ::std::option::Option<::std::string::String>,
}
impl ApplicationSettingsRequestBuilder {
    /// <p>Enables or disables persistent application settings for users during their pool sessions.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ApplicationSettingsStatusEnum) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables or disables persistent application settings for users during their pool sessions.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ApplicationSettingsStatusEnum>) -> Self {
        self.status = input;
        self
    }
    /// <p>Enables or disables persistent application settings for users during their pool sessions.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ApplicationSettingsStatusEnum> {
        &self.status
    }
    /// <p>The path prefix for the S3 bucket where users’ persistent application settings are stored. You can allow the same persistent application settings to be used across multiple pools by specifying the same settings group for each pool.</p>
    pub fn settings_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.settings_group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path prefix for the S3 bucket where users’ persistent application settings are stored. You can allow the same persistent application settings to be used across multiple pools by specifying the same settings group for each pool.</p>
    pub fn set_settings_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.settings_group = input;
        self
    }
    /// <p>The path prefix for the S3 bucket where users’ persistent application settings are stored. You can allow the same persistent application settings to be used across multiple pools by specifying the same settings group for each pool.</p>
    pub fn get_settings_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.settings_group
    }
    /// Consumes the builder and constructs a [`ApplicationSettingsRequest`](crate::types::ApplicationSettingsRequest).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::types::builders::ApplicationSettingsRequestBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::ApplicationSettingsRequest, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ApplicationSettingsRequest {
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ApplicationSettingsRequest",
                )
            })?,
            settings_group: self.settings_group,
        })
    }
}
