// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a pool of WorkSpaces.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkspacesPool {
    /// <p>The identifier of a pool.</p>
    pub pool_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) for the pool.</p>
    pub pool_arn: ::std::string::String,
    /// <p>The capacity status for the pool</p>
    pub capacity_status: ::std::option::Option<crate::types::CapacityStatus>,
    /// <p>The name of the pool.</p>
    pub pool_name: ::std::string::String,
    /// <p>The description of the pool.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The current state of the pool.</p>
    pub state: crate::types::WorkspacesPoolState,
    /// <p>The time the pool was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The identifier of the bundle used by the pool.</p>
    pub bundle_id: ::std::string::String,
    /// <p>The identifier of the directory used by the pool.</p>
    pub directory_id: ::std::string::String,
    /// <p>The pool errors.</p>
    pub errors: ::std::option::Option<::std::vec::Vec<crate::types::WorkspacesPoolError>>,
    /// <p>The persistent application settings for users of the pool.</p>
    pub application_settings: ::std::option::Option<crate::types::ApplicationSettingsResponse>,
    /// <p>The amount of time that a pool session remains active after users disconnect. If they try to reconnect to the pool session after a disconnection or network interruption within this time interval, they are connected to their previous session. Otherwise, they are connected to a new session with a new pool instance.</p>
    pub timeout_settings: ::std::option::Option<crate::types::TimeoutSettings>,
    /// <p>The running mode of the pool.</p>
    pub running_mode: crate::types::PoolsRunningMode,
}
impl WorkspacesPool {
    /// <p>The identifier of a pool.</p>
    pub fn pool_id(&self) -> &str {
        use std::ops::Deref;
        self.pool_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the pool.</p>
    pub fn pool_arn(&self) -> &str {
        use std::ops::Deref;
        self.pool_arn.deref()
    }
    /// <p>The capacity status for the pool</p>
    pub fn capacity_status(&self) -> ::std::option::Option<&crate::types::CapacityStatus> {
        self.capacity_status.as_ref()
    }
    /// <p>The name of the pool.</p>
    pub fn pool_name(&self) -> &str {
        use std::ops::Deref;
        self.pool_name.deref()
    }
    /// <p>The description of the pool.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The current state of the pool.</p>
    pub fn state(&self) -> &crate::types::WorkspacesPoolState {
        &self.state
    }
    /// <p>The time the pool was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The identifier of the bundle used by the pool.</p>
    pub fn bundle_id(&self) -> &str {
        use std::ops::Deref;
        self.bundle_id.deref()
    }
    /// <p>The identifier of the directory used by the pool.</p>
    pub fn directory_id(&self) -> &str {
        use std::ops::Deref;
        self.directory_id.deref()
    }
    /// <p>The pool errors.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.errors.is_none()`.
    pub fn errors(&self) -> &[crate::types::WorkspacesPoolError] {
        self.errors.as_deref().unwrap_or_default()
    }
    /// <p>The persistent application settings for users of the pool.</p>
    pub fn application_settings(&self) -> ::std::option::Option<&crate::types::ApplicationSettingsResponse> {
        self.application_settings.as_ref()
    }
    /// <p>The amount of time that a pool session remains active after users disconnect. If they try to reconnect to the pool session after a disconnection or network interruption within this time interval, they are connected to their previous session. Otherwise, they are connected to a new session with a new pool instance.</p>
    pub fn timeout_settings(&self) -> ::std::option::Option<&crate::types::TimeoutSettings> {
        self.timeout_settings.as_ref()
    }
    /// <p>The running mode of the pool.</p>
    pub fn running_mode(&self) -> &crate::types::PoolsRunningMode {
        &self.running_mode
    }
}
impl WorkspacesPool {
    /// Creates a new builder-style object to manufacture [`WorkspacesPool`](crate::types::WorkspacesPool).
    pub fn builder() -> crate::types::builders::WorkspacesPoolBuilder {
        crate::types::builders::WorkspacesPoolBuilder::default()
    }
}

/// A builder for [`WorkspacesPool`](crate::types::WorkspacesPool).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WorkspacesPoolBuilder {
    pub(crate) pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) pool_arn: ::std::option::Option<::std::string::String>,
    pub(crate) capacity_status: ::std::option::Option<crate::types::CapacityStatus>,
    pub(crate) pool_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::WorkspacesPoolState>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) bundle_id: ::std::option::Option<::std::string::String>,
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) errors: ::std::option::Option<::std::vec::Vec<crate::types::WorkspacesPoolError>>,
    pub(crate) application_settings: ::std::option::Option<crate::types::ApplicationSettingsResponse>,
    pub(crate) timeout_settings: ::std::option::Option<crate::types::TimeoutSettings>,
    pub(crate) running_mode: ::std::option::Option<crate::types::PoolsRunningMode>,
}
impl WorkspacesPoolBuilder {
    /// <p>The identifier of a pool.</p>
    /// This field is required.
    pub fn pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of a pool.</p>
    pub fn set_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pool_id = input;
        self
    }
    /// <p>The identifier of a pool.</p>
    pub fn get_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.pool_id
    }
    /// <p>The Amazon Resource Name (ARN) for the pool.</p>
    /// This field is required.
    pub fn pool_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pool_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the pool.</p>
    pub fn set_pool_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pool_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the pool.</p>
    pub fn get_pool_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.pool_arn
    }
    /// <p>The capacity status for the pool</p>
    /// This field is required.
    pub fn capacity_status(mut self, input: crate::types::CapacityStatus) -> Self {
        self.capacity_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The capacity status for the pool</p>
    pub fn set_capacity_status(mut self, input: ::std::option::Option<crate::types::CapacityStatus>) -> Self {
        self.capacity_status = input;
        self
    }
    /// <p>The capacity status for the pool</p>
    pub fn get_capacity_status(&self) -> &::std::option::Option<crate::types::CapacityStatus> {
        &self.capacity_status
    }
    /// <p>The name of the pool.</p>
    /// This field is required.
    pub fn pool_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pool_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the pool.</p>
    pub fn set_pool_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pool_name = input;
        self
    }
    /// <p>The name of the pool.</p>
    pub fn get_pool_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.pool_name
    }
    /// <p>The description of the pool.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the pool.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the pool.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The current state of the pool.</p>
    /// This field is required.
    pub fn state(mut self, input: crate::types::WorkspacesPoolState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the pool.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::WorkspacesPoolState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of the pool.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::WorkspacesPoolState> {
        &self.state
    }
    /// <p>The time the pool was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the pool was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time the pool was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The identifier of the bundle used by the pool.</p>
    /// This field is required.
    pub fn bundle_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bundle_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the bundle used by the pool.</p>
    pub fn set_bundle_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bundle_id = input;
        self
    }
    /// <p>The identifier of the bundle used by the pool.</p>
    pub fn get_bundle_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bundle_id
    }
    /// <p>The identifier of the directory used by the pool.</p>
    /// This field is required.
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the directory used by the pool.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The identifier of the directory used by the pool.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>The pool errors.</p>
    pub fn errors(mut self, input: crate::types::WorkspacesPoolError) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = ::std::option::Option::Some(v);
        self
    }
    /// <p>The pool errors.</p>
    pub fn set_errors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WorkspacesPoolError>>) -> Self {
        self.errors = input;
        self
    }
    /// <p>The pool errors.</p>
    pub fn get_errors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WorkspacesPoolError>> {
        &self.errors
    }
    /// <p>The persistent application settings for users of the pool.</p>
    pub fn application_settings(mut self, input: crate::types::ApplicationSettingsResponse) -> Self {
        self.application_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The persistent application settings for users of the pool.</p>
    pub fn set_application_settings(mut self, input: ::std::option::Option<crate::types::ApplicationSettingsResponse>) -> Self {
        self.application_settings = input;
        self
    }
    /// <p>The persistent application settings for users of the pool.</p>
    pub fn get_application_settings(&self) -> &::std::option::Option<crate::types::ApplicationSettingsResponse> {
        &self.application_settings
    }
    /// <p>The amount of time that a pool session remains active after users disconnect. If they try to reconnect to the pool session after a disconnection or network interruption within this time interval, they are connected to their previous session. Otherwise, they are connected to a new session with a new pool instance.</p>
    pub fn timeout_settings(mut self, input: crate::types::TimeoutSettings) -> Self {
        self.timeout_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of time that a pool session remains active after users disconnect. If they try to reconnect to the pool session after a disconnection or network interruption within this time interval, they are connected to their previous session. Otherwise, they are connected to a new session with a new pool instance.</p>
    pub fn set_timeout_settings(mut self, input: ::std::option::Option<crate::types::TimeoutSettings>) -> Self {
        self.timeout_settings = input;
        self
    }
    /// <p>The amount of time that a pool session remains active after users disconnect. If they try to reconnect to the pool session after a disconnection or network interruption within this time interval, they are connected to their previous session. Otherwise, they are connected to a new session with a new pool instance.</p>
    pub fn get_timeout_settings(&self) -> &::std::option::Option<crate::types::TimeoutSettings> {
        &self.timeout_settings
    }
    /// <p>The running mode of the pool.</p>
    /// This field is required.
    pub fn running_mode(mut self, input: crate::types::PoolsRunningMode) -> Self {
        self.running_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The running mode of the pool.</p>
    pub fn set_running_mode(mut self, input: ::std::option::Option<crate::types::PoolsRunningMode>) -> Self {
        self.running_mode = input;
        self
    }
    /// <p>The running mode of the pool.</p>
    pub fn get_running_mode(&self) -> &::std::option::Option<crate::types::PoolsRunningMode> {
        &self.running_mode
    }
    /// Consumes the builder and constructs a [`WorkspacesPool`](crate::types::WorkspacesPool).
    /// This method will fail if any of the following fields are not set:
    /// - [`pool_id`](crate::types::builders::WorkspacesPoolBuilder::pool_id)
    /// - [`pool_arn`](crate::types::builders::WorkspacesPoolBuilder::pool_arn)
    /// - [`pool_name`](crate::types::builders::WorkspacesPoolBuilder::pool_name)
    /// - [`state`](crate::types::builders::WorkspacesPoolBuilder::state)
    /// - [`created_at`](crate::types::builders::WorkspacesPoolBuilder::created_at)
    /// - [`bundle_id`](crate::types::builders::WorkspacesPoolBuilder::bundle_id)
    /// - [`directory_id`](crate::types::builders::WorkspacesPoolBuilder::directory_id)
    pub fn build(self) -> ::std::result::Result<crate::types::WorkspacesPool, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WorkspacesPool {
            pool_id: self.pool_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "pool_id",
                    "pool_id was not specified but it is required when building WorkspacesPool",
                )
            })?,
            pool_arn: self.pool_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "pool_arn",
                    "pool_arn was not specified but it is required when building WorkspacesPool",
                )
            })?,
            capacity_status: self.capacity_status,
            pool_name: self.pool_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "pool_name",
                    "pool_name was not specified but it is required when building WorkspacesPool",
                )
            })?,
            description: self.description,
            state: self.state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "state",
                    "state was not specified but it is required when building WorkspacesPool",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building WorkspacesPool",
                )
            })?,
            bundle_id: self.bundle_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bundle_id",
                    "bundle_id was not specified but it is required when building WorkspacesPool",
                )
            })?,
            directory_id: self.directory_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "directory_id",
                    "directory_id was not specified but it is required when building WorkspacesPool",
                )
            })?,
            errors: self.errors,
            application_settings: self.application_settings,
            timeout_settings: self.timeout_settings,
            running_mode: self.running_mode.unwrap_or(
                "AUTO_STOP"
                    .parse::<crate::types::PoolsRunningMode>()
                    .expect("static value validated to member"),
            ),
        })
    }
}
