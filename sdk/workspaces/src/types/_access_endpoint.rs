// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the access type and endpoint for a WorkSpace.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccessEndpoint {
    /// <p>Indicates the type of access endpoint.</p>
    pub access_endpoint_type: ::std::option::Option<crate::types::AccessEndpointType>,
    /// <p>Indicates the VPC endpoint to use for access.</p>
    pub vpc_endpoint_id: ::std::option::Option<::std::string::String>,
}
impl AccessEndpoint {
    /// <p>Indicates the type of access endpoint.</p>
    pub fn access_endpoint_type(&self) -> ::std::option::Option<&crate::types::AccessEndpointType> {
        self.access_endpoint_type.as_ref()
    }
    /// <p>Indicates the VPC endpoint to use for access.</p>
    pub fn vpc_endpoint_id(&self) -> ::std::option::Option<&str> {
        self.vpc_endpoint_id.as_deref()
    }
}
impl AccessEndpoint {
    /// Creates a new builder-style object to manufacture [`AccessEndpoint`](crate::types::AccessEndpoint).
    pub fn builder() -> crate::types::builders::AccessEndpointBuilder {
        crate::types::builders::AccessEndpointBuilder::default()
    }
}

/// A builder for [`AccessEndpoint`](crate::types::AccessEndpoint).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AccessEndpointBuilder {
    pub(crate) access_endpoint_type: ::std::option::Option<crate::types::AccessEndpointType>,
    pub(crate) vpc_endpoint_id: ::std::option::Option<::std::string::String>,
}
impl AccessEndpointBuilder {
    /// <p>Indicates the type of access endpoint.</p>
    pub fn access_endpoint_type(mut self, input: crate::types::AccessEndpointType) -> Self {
        self.access_endpoint_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the type of access endpoint.</p>
    pub fn set_access_endpoint_type(mut self, input: ::std::option::Option<crate::types::AccessEndpointType>) -> Self {
        self.access_endpoint_type = input;
        self
    }
    /// <p>Indicates the type of access endpoint.</p>
    pub fn get_access_endpoint_type(&self) -> &::std::option::Option<crate::types::AccessEndpointType> {
        &self.access_endpoint_type
    }
    /// <p>Indicates the VPC endpoint to use for access.</p>
    pub fn vpc_endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates the VPC endpoint to use for access.</p>
    pub fn set_vpc_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_endpoint_id = input;
        self
    }
    /// <p>Indicates the VPC endpoint to use for access.</p>
    pub fn get_vpc_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_endpoint_id
    }
    /// Consumes the builder and constructs a [`AccessEndpoint`](crate::types::AccessEndpoint).
    pub fn build(self) -> crate::types::AccessEndpoint {
        crate::types::AccessEndpoint {
            access_endpoint_type: self.access_endpoint_type,
            vpc_endpoint_id: self.vpc_endpoint_id,
        }
    }
}
