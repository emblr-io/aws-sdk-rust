// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the user's permission settings.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UserSetting {
    /// <p>Indicates the type of action.</p>
    pub action: crate::types::UserSettingActionEnum,
    /// <p>Indicates if the setting is enabled or disabled.</p>
    pub permission: crate::types::UserSettingPermissionEnum,
    /// <p>Indicates the maximum character length for the specified user setting.</p>
    pub maximum_length: ::std::option::Option<i32>,
}
impl UserSetting {
    /// <p>Indicates the type of action.</p>
    pub fn action(&self) -> &crate::types::UserSettingActionEnum {
        &self.action
    }
    /// <p>Indicates if the setting is enabled or disabled.</p>
    pub fn permission(&self) -> &crate::types::UserSettingPermissionEnum {
        &self.permission
    }
    /// <p>Indicates the maximum character length for the specified user setting.</p>
    pub fn maximum_length(&self) -> ::std::option::Option<i32> {
        self.maximum_length
    }
}
impl UserSetting {
    /// Creates a new builder-style object to manufacture [`UserSetting`](crate::types::UserSetting).
    pub fn builder() -> crate::types::builders::UserSettingBuilder {
        crate::types::builders::UserSettingBuilder::default()
    }
}

/// A builder for [`UserSetting`](crate::types::UserSetting).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UserSettingBuilder {
    pub(crate) action: ::std::option::Option<crate::types::UserSettingActionEnum>,
    pub(crate) permission: ::std::option::Option<crate::types::UserSettingPermissionEnum>,
    pub(crate) maximum_length: ::std::option::Option<i32>,
}
impl UserSettingBuilder {
    /// <p>Indicates the type of action.</p>
    /// This field is required.
    pub fn action(mut self, input: crate::types::UserSettingActionEnum) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the type of action.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::UserSettingActionEnum>) -> Self {
        self.action = input;
        self
    }
    /// <p>Indicates the type of action.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::UserSettingActionEnum> {
        &self.action
    }
    /// <p>Indicates if the setting is enabled or disabled.</p>
    /// This field is required.
    pub fn permission(mut self, input: crate::types::UserSettingPermissionEnum) -> Self {
        self.permission = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates if the setting is enabled or disabled.</p>
    pub fn set_permission(mut self, input: ::std::option::Option<crate::types::UserSettingPermissionEnum>) -> Self {
        self.permission = input;
        self
    }
    /// <p>Indicates if the setting is enabled or disabled.</p>
    pub fn get_permission(&self) -> &::std::option::Option<crate::types::UserSettingPermissionEnum> {
        &self.permission
    }
    /// <p>Indicates the maximum character length for the specified user setting.</p>
    pub fn maximum_length(mut self, input: i32) -> Self {
        self.maximum_length = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the maximum character length for the specified user setting.</p>
    pub fn set_maximum_length(mut self, input: ::std::option::Option<i32>) -> Self {
        self.maximum_length = input;
        self
    }
    /// <p>Indicates the maximum character length for the specified user setting.</p>
    pub fn get_maximum_length(&self) -> &::std::option::Option<i32> {
        &self.maximum_length
    }
    /// Consumes the builder and constructs a [`UserSetting`](crate::types::UserSetting).
    /// This method will fail if any of the following fields are not set:
    /// - [`action`](crate::types::builders::UserSettingBuilder::action)
    /// - [`permission`](crate::types::builders::UserSettingBuilder::permission)
    pub fn build(self) -> ::std::result::Result<crate::types::UserSetting, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UserSetting {
            action: self.action.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action",
                    "action was not specified but it is required when building UserSetting",
                )
            })?,
            permission: self.permission.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "permission",
                    "permission was not specified but it is required when building UserSetting",
                )
            })?,
            maximum_length: self.maximum_length,
        })
    }
}
