// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the streaming properties.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StreamingProperties {
    /// <p>Indicates the type of preferred protocol for the streaming experience.</p>
    pub streaming_experience_preferred_protocol: ::std::option::Option<crate::types::StreamingExperiencePreferredProtocolEnum>,
    /// <p>Indicates the permission settings asscoiated with the user.</p>
    pub user_settings: ::std::option::Option<::std::vec::Vec<crate::types::UserSetting>>,
    /// <p>Indicates the storage connector used</p>
    pub storage_connectors: ::std::option::Option<::std::vec::Vec<crate::types::StorageConnector>>,
    /// <p>Indicates the Global Accelerator properties.</p>
    pub global_accelerator: ::std::option::Option<crate::types::GlobalAcceleratorForDirectory>,
}
impl StreamingProperties {
    /// <p>Indicates the type of preferred protocol for the streaming experience.</p>
    pub fn streaming_experience_preferred_protocol(&self) -> ::std::option::Option<&crate::types::StreamingExperiencePreferredProtocolEnum> {
        self.streaming_experience_preferred_protocol.as_ref()
    }
    /// <p>Indicates the permission settings asscoiated with the user.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_settings.is_none()`.
    pub fn user_settings(&self) -> &[crate::types::UserSetting] {
        self.user_settings.as_deref().unwrap_or_default()
    }
    /// <p>Indicates the storage connector used</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.storage_connectors.is_none()`.
    pub fn storage_connectors(&self) -> &[crate::types::StorageConnector] {
        self.storage_connectors.as_deref().unwrap_or_default()
    }
    /// <p>Indicates the Global Accelerator properties.</p>
    pub fn global_accelerator(&self) -> ::std::option::Option<&crate::types::GlobalAcceleratorForDirectory> {
        self.global_accelerator.as_ref()
    }
}
impl StreamingProperties {
    /// Creates a new builder-style object to manufacture [`StreamingProperties`](crate::types::StreamingProperties).
    pub fn builder() -> crate::types::builders::StreamingPropertiesBuilder {
        crate::types::builders::StreamingPropertiesBuilder::default()
    }
}

/// A builder for [`StreamingProperties`](crate::types::StreamingProperties).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StreamingPropertiesBuilder {
    pub(crate) streaming_experience_preferred_protocol: ::std::option::Option<crate::types::StreamingExperiencePreferredProtocolEnum>,
    pub(crate) user_settings: ::std::option::Option<::std::vec::Vec<crate::types::UserSetting>>,
    pub(crate) storage_connectors: ::std::option::Option<::std::vec::Vec<crate::types::StorageConnector>>,
    pub(crate) global_accelerator: ::std::option::Option<crate::types::GlobalAcceleratorForDirectory>,
}
impl StreamingPropertiesBuilder {
    /// <p>Indicates the type of preferred protocol for the streaming experience.</p>
    pub fn streaming_experience_preferred_protocol(mut self, input: crate::types::StreamingExperiencePreferredProtocolEnum) -> Self {
        self.streaming_experience_preferred_protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the type of preferred protocol for the streaming experience.</p>
    pub fn set_streaming_experience_preferred_protocol(
        mut self,
        input: ::std::option::Option<crate::types::StreamingExperiencePreferredProtocolEnum>,
    ) -> Self {
        self.streaming_experience_preferred_protocol = input;
        self
    }
    /// <p>Indicates the type of preferred protocol for the streaming experience.</p>
    pub fn get_streaming_experience_preferred_protocol(&self) -> &::std::option::Option<crate::types::StreamingExperiencePreferredProtocolEnum> {
        &self.streaming_experience_preferred_protocol
    }
    /// Appends an item to `user_settings`.
    ///
    /// To override the contents of this collection use [`set_user_settings`](Self::set_user_settings).
    ///
    /// <p>Indicates the permission settings asscoiated with the user.</p>
    pub fn user_settings(mut self, input: crate::types::UserSetting) -> Self {
        let mut v = self.user_settings.unwrap_or_default();
        v.push(input);
        self.user_settings = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates the permission settings asscoiated with the user.</p>
    pub fn set_user_settings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UserSetting>>) -> Self {
        self.user_settings = input;
        self
    }
    /// <p>Indicates the permission settings asscoiated with the user.</p>
    pub fn get_user_settings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UserSetting>> {
        &self.user_settings
    }
    /// Appends an item to `storage_connectors`.
    ///
    /// To override the contents of this collection use [`set_storage_connectors`](Self::set_storage_connectors).
    ///
    /// <p>Indicates the storage connector used</p>
    pub fn storage_connectors(mut self, input: crate::types::StorageConnector) -> Self {
        let mut v = self.storage_connectors.unwrap_or_default();
        v.push(input);
        self.storage_connectors = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates the storage connector used</p>
    pub fn set_storage_connectors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StorageConnector>>) -> Self {
        self.storage_connectors = input;
        self
    }
    /// <p>Indicates the storage connector used</p>
    pub fn get_storage_connectors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StorageConnector>> {
        &self.storage_connectors
    }
    /// <p>Indicates the Global Accelerator properties.</p>
    pub fn global_accelerator(mut self, input: crate::types::GlobalAcceleratorForDirectory) -> Self {
        self.global_accelerator = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the Global Accelerator properties.</p>
    pub fn set_global_accelerator(mut self, input: ::std::option::Option<crate::types::GlobalAcceleratorForDirectory>) -> Self {
        self.global_accelerator = input;
        self
    }
    /// <p>Indicates the Global Accelerator properties.</p>
    pub fn get_global_accelerator(&self) -> &::std::option::Option<crate::types::GlobalAcceleratorForDirectory> {
        &self.global_accelerator
    }
    /// Consumes the builder and constructs a [`StreamingProperties`](crate::types::StreamingProperties).
    pub fn build(self) -> crate::types::StreamingProperties {
        crate::types::StreamingProperties {
            streaming_experience_preferred_protocol: self.streaming_experience_preferred_protocol,
            user_settings: self.user_settings,
            storage_connectors: self.storage_connectors,
            global_accelerator: self.global_accelerator,
        }
    }
}
