// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a pool session.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkspacesPoolSession {
    /// <p>The authentication method. The user is authenticated using a WorkSpaces Pools URL (API) or SAML 2.0 federation (SAML).</p>
    pub authentication_type: ::std::option::Option<crate::types::AuthenticationType>,
    /// <p>Specifies whether a user is connected to the pool session.</p>
    pub connection_state: ::std::option::Option<crate::types::SessionConnectionState>,
    /// <p>The identifier of the session.</p>
    pub session_id: ::std::string::String,
    /// <p>The identifier for the instance hosting the session.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the pool.</p>
    pub pool_id: ::std::string::String,
    /// <p>The time that the pool session ended.</p>
    pub expiration_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Describes the network details of the pool.</p>
    pub network_access_configuration: ::std::option::Option<crate::types::NetworkAccessConfiguration>,
    /// <p>The time that the pool sission started.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The identifier of the user.</p>
    pub user_id: ::std::string::String,
}
impl WorkspacesPoolSession {
    /// <p>The authentication method. The user is authenticated using a WorkSpaces Pools URL (API) or SAML 2.0 federation (SAML).</p>
    pub fn authentication_type(&self) -> ::std::option::Option<&crate::types::AuthenticationType> {
        self.authentication_type.as_ref()
    }
    /// <p>Specifies whether a user is connected to the pool session.</p>
    pub fn connection_state(&self) -> ::std::option::Option<&crate::types::SessionConnectionState> {
        self.connection_state.as_ref()
    }
    /// <p>The identifier of the session.</p>
    pub fn session_id(&self) -> &str {
        use std::ops::Deref;
        self.session_id.deref()
    }
    /// <p>The identifier for the instance hosting the session.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The identifier of the pool.</p>
    pub fn pool_id(&self) -> &str {
        use std::ops::Deref;
        self.pool_id.deref()
    }
    /// <p>The time that the pool session ended.</p>
    pub fn expiration_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.expiration_time.as_ref()
    }
    /// <p>Describes the network details of the pool.</p>
    pub fn network_access_configuration(&self) -> ::std::option::Option<&crate::types::NetworkAccessConfiguration> {
        self.network_access_configuration.as_ref()
    }
    /// <p>The time that the pool sission started.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The identifier of the user.</p>
    pub fn user_id(&self) -> &str {
        use std::ops::Deref;
        self.user_id.deref()
    }
}
impl WorkspacesPoolSession {
    /// Creates a new builder-style object to manufacture [`WorkspacesPoolSession`](crate::types::WorkspacesPoolSession).
    pub fn builder() -> crate::types::builders::WorkspacesPoolSessionBuilder {
        crate::types::builders::WorkspacesPoolSessionBuilder::default()
    }
}

/// A builder for [`WorkspacesPoolSession`](crate::types::WorkspacesPoolSession).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WorkspacesPoolSessionBuilder {
    pub(crate) authentication_type: ::std::option::Option<crate::types::AuthenticationType>,
    pub(crate) connection_state: ::std::option::Option<crate::types::SessionConnectionState>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) expiration_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) network_access_configuration: ::std::option::Option<crate::types::NetworkAccessConfiguration>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
}
impl WorkspacesPoolSessionBuilder {
    /// <p>The authentication method. The user is authenticated using a WorkSpaces Pools URL (API) or SAML 2.0 federation (SAML).</p>
    pub fn authentication_type(mut self, input: crate::types::AuthenticationType) -> Self {
        self.authentication_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication method. The user is authenticated using a WorkSpaces Pools URL (API) or SAML 2.0 federation (SAML).</p>
    pub fn set_authentication_type(mut self, input: ::std::option::Option<crate::types::AuthenticationType>) -> Self {
        self.authentication_type = input;
        self
    }
    /// <p>The authentication method. The user is authenticated using a WorkSpaces Pools URL (API) or SAML 2.0 federation (SAML).</p>
    pub fn get_authentication_type(&self) -> &::std::option::Option<crate::types::AuthenticationType> {
        &self.authentication_type
    }
    /// <p>Specifies whether a user is connected to the pool session.</p>
    pub fn connection_state(mut self, input: crate::types::SessionConnectionState) -> Self {
        self.connection_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether a user is connected to the pool session.</p>
    pub fn set_connection_state(mut self, input: ::std::option::Option<crate::types::SessionConnectionState>) -> Self {
        self.connection_state = input;
        self
    }
    /// <p>Specifies whether a user is connected to the pool session.</p>
    pub fn get_connection_state(&self) -> &::std::option::Option<crate::types::SessionConnectionState> {
        &self.connection_state
    }
    /// <p>The identifier of the session.</p>
    /// This field is required.
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the session.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The identifier of the session.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>The identifier for the instance hosting the session.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the instance hosting the session.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The identifier for the instance hosting the session.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The identifier of the pool.</p>
    /// This field is required.
    pub fn pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the pool.</p>
    pub fn set_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pool_id = input;
        self
    }
    /// <p>The identifier of the pool.</p>
    pub fn get_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.pool_id
    }
    /// <p>The time that the pool session ended.</p>
    pub fn expiration_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expiration_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the pool session ended.</p>
    pub fn set_expiration_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expiration_time = input;
        self
    }
    /// <p>The time that the pool session ended.</p>
    pub fn get_expiration_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expiration_time
    }
    /// <p>Describes the network details of the pool.</p>
    pub fn network_access_configuration(mut self, input: crate::types::NetworkAccessConfiguration) -> Self {
        self.network_access_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the network details of the pool.</p>
    pub fn set_network_access_configuration(mut self, input: ::std::option::Option<crate::types::NetworkAccessConfiguration>) -> Self {
        self.network_access_configuration = input;
        self
    }
    /// <p>Describes the network details of the pool.</p>
    pub fn get_network_access_configuration(&self) -> &::std::option::Option<crate::types::NetworkAccessConfiguration> {
        &self.network_access_configuration
    }
    /// <p>The time that the pool sission started.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the pool sission started.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time that the pool sission started.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The identifier of the user.</p>
    /// This field is required.
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the user.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The identifier of the user.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// Consumes the builder and constructs a [`WorkspacesPoolSession`](crate::types::WorkspacesPoolSession).
    /// This method will fail if any of the following fields are not set:
    /// - [`session_id`](crate::types::builders::WorkspacesPoolSessionBuilder::session_id)
    /// - [`pool_id`](crate::types::builders::WorkspacesPoolSessionBuilder::pool_id)
    /// - [`user_id`](crate::types::builders::WorkspacesPoolSessionBuilder::user_id)
    pub fn build(self) -> ::std::result::Result<crate::types::WorkspacesPoolSession, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WorkspacesPoolSession {
            authentication_type: self.authentication_type,
            connection_state: self.connection_state,
            session_id: self.session_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "session_id",
                    "session_id was not specified but it is required when building WorkspacesPoolSession",
                )
            })?,
            instance_id: self.instance_id,
            pool_id: self.pool_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "pool_id",
                    "pool_id was not specified but it is required when building WorkspacesPoolSession",
                )
            })?,
            expiration_time: self.expiration_time,
            network_access_configuration: self.network_access_configuration,
            start_time: self.start_time,
            user_id: self.user_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "user_id",
                    "user_id was not specified but it is required when building WorkspacesPoolSession",
                )
            })?,
        })
    }
}
