// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the persistent application settings for WorkSpaces Pools users.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApplicationSettingsResponse {
    /// <p>Specifies whether persistent application settings are enabled for users during their pool sessions.</p>
    pub status: crate::types::ApplicationSettingsStatusEnum,
    /// <p>The path prefix for the S3 bucket where users’ persistent application settings are stored.</p>
    pub settings_group: ::std::option::Option<::std::string::String>,
    /// <p>The S3 bucket where users’ persistent application settings are stored. When persistent application settings are enabled for the first time for an account in an Amazon Web Services Region, an S3 bucket is created. The bucket is unique to the Amazon Web Services account and the Region.</p>
    pub s3_bucket_name: ::std::option::Option<::std::string::String>,
}
impl ApplicationSettingsResponse {
    /// <p>Specifies whether persistent application settings are enabled for users during their pool sessions.</p>
    pub fn status(&self) -> &crate::types::ApplicationSettingsStatusEnum {
        &self.status
    }
    /// <p>The path prefix for the S3 bucket where users’ persistent application settings are stored.</p>
    pub fn settings_group(&self) -> ::std::option::Option<&str> {
        self.settings_group.as_deref()
    }
    /// <p>The S3 bucket where users’ persistent application settings are stored. When persistent application settings are enabled for the first time for an account in an Amazon Web Services Region, an S3 bucket is created. The bucket is unique to the Amazon Web Services account and the Region.</p>
    pub fn s3_bucket_name(&self) -> ::std::option::Option<&str> {
        self.s3_bucket_name.as_deref()
    }
}
impl ApplicationSettingsResponse {
    /// Creates a new builder-style object to manufacture [`ApplicationSettingsResponse`](crate::types::ApplicationSettingsResponse).
    pub fn builder() -> crate::types::builders::ApplicationSettingsResponseBuilder {
        crate::types::builders::ApplicationSettingsResponseBuilder::default()
    }
}

/// A builder for [`ApplicationSettingsResponse`](crate::types::ApplicationSettingsResponse).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ApplicationSettingsResponseBuilder {
    pub(crate) status: ::std::option::Option<crate::types::ApplicationSettingsStatusEnum>,
    pub(crate) settings_group: ::std::option::Option<::std::string::String>,
    pub(crate) s3_bucket_name: ::std::option::Option<::std::string::String>,
}
impl ApplicationSettingsResponseBuilder {
    /// <p>Specifies whether persistent application settings are enabled for users during their pool sessions.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ApplicationSettingsStatusEnum) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether persistent application settings are enabled for users during their pool sessions.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ApplicationSettingsStatusEnum>) -> Self {
        self.status = input;
        self
    }
    /// <p>Specifies whether persistent application settings are enabled for users during their pool sessions.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ApplicationSettingsStatusEnum> {
        &self.status
    }
    /// <p>The path prefix for the S3 bucket where users’ persistent application settings are stored.</p>
    pub fn settings_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.settings_group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path prefix for the S3 bucket where users’ persistent application settings are stored.</p>
    pub fn set_settings_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.settings_group = input;
        self
    }
    /// <p>The path prefix for the S3 bucket where users’ persistent application settings are stored.</p>
    pub fn get_settings_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.settings_group
    }
    /// <p>The S3 bucket where users’ persistent application settings are stored. When persistent application settings are enabled for the first time for an account in an Amazon Web Services Region, an S3 bucket is created. The bucket is unique to the Amazon Web Services account and the Region.</p>
    pub fn s3_bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 bucket where users’ persistent application settings are stored. When persistent application settings are enabled for the first time for an account in an Amazon Web Services Region, an S3 bucket is created. The bucket is unique to the Amazon Web Services account and the Region.</p>
    pub fn set_s3_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_bucket_name = input;
        self
    }
    /// <p>The S3 bucket where users’ persistent application settings are stored. When persistent application settings are enabled for the first time for an account in an Amazon Web Services Region, an S3 bucket is created. The bucket is unique to the Amazon Web Services account and the Region.</p>
    pub fn get_s3_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_bucket_name
    }
    /// Consumes the builder and constructs a [`ApplicationSettingsResponse`](crate::types::ApplicationSettingsResponse).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::types::builders::ApplicationSettingsResponseBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::ApplicationSettingsResponse, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ApplicationSettingsResponse {
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ApplicationSettingsResponse",
                )
            })?,
            settings_group: self.settings_group,
            s3_bucket_name: self.s3_bucket_name,
        })
    }
}
