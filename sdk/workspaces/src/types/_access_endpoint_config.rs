// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the access endpoint configuration for a WorkSpace.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccessEndpointConfig {
    /// <p>Indicates a list of access endpoints associated with this directory.</p>
    pub access_endpoints: ::std::vec::Vec<crate::types::AccessEndpoint>,
    /// <p>Indicates a list of protocols that fallback to using the public Internet when streaming over a VPC endpoint is not available.</p>
    pub internet_fallback_protocols: ::std::option::Option<::std::vec::Vec<crate::types::InternetFallbackProtocol>>,
}
impl AccessEndpointConfig {
    /// <p>Indicates a list of access endpoints associated with this directory.</p>
    pub fn access_endpoints(&self) -> &[crate::types::AccessEndpoint] {
        use std::ops::Deref;
        self.access_endpoints.deref()
    }
    /// <p>Indicates a list of protocols that fallback to using the public Internet when streaming over a VPC endpoint is not available.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.internet_fallback_protocols.is_none()`.
    pub fn internet_fallback_protocols(&self) -> &[crate::types::InternetFallbackProtocol] {
        self.internet_fallback_protocols.as_deref().unwrap_or_default()
    }
}
impl AccessEndpointConfig {
    /// Creates a new builder-style object to manufacture [`AccessEndpointConfig`](crate::types::AccessEndpointConfig).
    pub fn builder() -> crate::types::builders::AccessEndpointConfigBuilder {
        crate::types::builders::AccessEndpointConfigBuilder::default()
    }
}

/// A builder for [`AccessEndpointConfig`](crate::types::AccessEndpointConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AccessEndpointConfigBuilder {
    pub(crate) access_endpoints: ::std::option::Option<::std::vec::Vec<crate::types::AccessEndpoint>>,
    pub(crate) internet_fallback_protocols: ::std::option::Option<::std::vec::Vec<crate::types::InternetFallbackProtocol>>,
}
impl AccessEndpointConfigBuilder {
    /// Appends an item to `access_endpoints`.
    ///
    /// To override the contents of this collection use [`set_access_endpoints`](Self::set_access_endpoints).
    ///
    /// <p>Indicates a list of access endpoints associated with this directory.</p>
    pub fn access_endpoints(mut self, input: crate::types::AccessEndpoint) -> Self {
        let mut v = self.access_endpoints.unwrap_or_default();
        v.push(input);
        self.access_endpoints = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates a list of access endpoints associated with this directory.</p>
    pub fn set_access_endpoints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AccessEndpoint>>) -> Self {
        self.access_endpoints = input;
        self
    }
    /// <p>Indicates a list of access endpoints associated with this directory.</p>
    pub fn get_access_endpoints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AccessEndpoint>> {
        &self.access_endpoints
    }
    /// Appends an item to `internet_fallback_protocols`.
    ///
    /// To override the contents of this collection use [`set_internet_fallback_protocols`](Self::set_internet_fallback_protocols).
    ///
    /// <p>Indicates a list of protocols that fallback to using the public Internet when streaming over a VPC endpoint is not available.</p>
    pub fn internet_fallback_protocols(mut self, input: crate::types::InternetFallbackProtocol) -> Self {
        let mut v = self.internet_fallback_protocols.unwrap_or_default();
        v.push(input);
        self.internet_fallback_protocols = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates a list of protocols that fallback to using the public Internet when streaming over a VPC endpoint is not available.</p>
    pub fn set_internet_fallback_protocols(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InternetFallbackProtocol>>) -> Self {
        self.internet_fallback_protocols = input;
        self
    }
    /// <p>Indicates a list of protocols that fallback to using the public Internet when streaming over a VPC endpoint is not available.</p>
    pub fn get_internet_fallback_protocols(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InternetFallbackProtocol>> {
        &self.internet_fallback_protocols
    }
    /// Consumes the builder and constructs a [`AccessEndpointConfig`](crate::types::AccessEndpointConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`access_endpoints`](crate::types::builders::AccessEndpointConfigBuilder::access_endpoints)
    pub fn build(self) -> ::std::result::Result<crate::types::AccessEndpointConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AccessEndpointConfig {
            access_endpoints: self.access_endpoints.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "access_endpoints",
                    "access_endpoints was not specified but it is required when building AccessEndpointConfig",
                )
            })?,
            internet_fallback_protocols: self.internet_fallback_protocols,
        })
    }
}
