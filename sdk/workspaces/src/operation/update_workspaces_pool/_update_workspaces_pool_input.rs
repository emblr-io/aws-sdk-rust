// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateWorkspacesPoolInput {
    /// <p>The identifier of the specified pool to update.</p>
    pub pool_id: ::std::option::Option<::std::string::String>,
    /// <p>Describes the specified pool to update.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the bundle.</p>
    pub bundle_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the directory.</p>
    pub directory_id: ::std::option::Option<::std::string::String>,
    /// <p>The desired capacity for the pool.</p>
    pub capacity: ::std::option::Option<crate::types::Capacity>,
    /// <p>The persistent application settings for users in the pool.</p>
    pub application_settings: ::std::option::Option<crate::types::ApplicationSettingsRequest>,
    /// <p>Indicates the timeout settings of the specified pool.</p>
    pub timeout_settings: ::std::option::Option<crate::types::TimeoutSettings>,
    /// <p>The desired running mode for the pool. The running mode can only be updated when the pool is in a stopped state.</p>
    pub running_mode: ::std::option::Option<crate::types::PoolsRunningMode>,
}
impl UpdateWorkspacesPoolInput {
    /// <p>The identifier of the specified pool to update.</p>
    pub fn pool_id(&self) -> ::std::option::Option<&str> {
        self.pool_id.as_deref()
    }
    /// <p>Describes the specified pool to update.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The identifier of the bundle.</p>
    pub fn bundle_id(&self) -> ::std::option::Option<&str> {
        self.bundle_id.as_deref()
    }
    /// <p>The identifier of the directory.</p>
    pub fn directory_id(&self) -> ::std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>The desired capacity for the pool.</p>
    pub fn capacity(&self) -> ::std::option::Option<&crate::types::Capacity> {
        self.capacity.as_ref()
    }
    /// <p>The persistent application settings for users in the pool.</p>
    pub fn application_settings(&self) -> ::std::option::Option<&crate::types::ApplicationSettingsRequest> {
        self.application_settings.as_ref()
    }
    /// <p>Indicates the timeout settings of the specified pool.</p>
    pub fn timeout_settings(&self) -> ::std::option::Option<&crate::types::TimeoutSettings> {
        self.timeout_settings.as_ref()
    }
    /// <p>The desired running mode for the pool. The running mode can only be updated when the pool is in a stopped state.</p>
    pub fn running_mode(&self) -> ::std::option::Option<&crate::types::PoolsRunningMode> {
        self.running_mode.as_ref()
    }
}
impl UpdateWorkspacesPoolInput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkspacesPoolInput`](crate::operation::update_workspaces_pool::UpdateWorkspacesPoolInput).
    pub fn builder() -> crate::operation::update_workspaces_pool::builders::UpdateWorkspacesPoolInputBuilder {
        crate::operation::update_workspaces_pool::builders::UpdateWorkspacesPoolInputBuilder::default()
    }
}

/// A builder for [`UpdateWorkspacesPoolInput`](crate::operation::update_workspaces_pool::UpdateWorkspacesPoolInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateWorkspacesPoolInputBuilder {
    pub(crate) pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) bundle_id: ::std::option::Option<::std::string::String>,
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) capacity: ::std::option::Option<crate::types::Capacity>,
    pub(crate) application_settings: ::std::option::Option<crate::types::ApplicationSettingsRequest>,
    pub(crate) timeout_settings: ::std::option::Option<crate::types::TimeoutSettings>,
    pub(crate) running_mode: ::std::option::Option<crate::types::PoolsRunningMode>,
}
impl UpdateWorkspacesPoolInputBuilder {
    /// <p>The identifier of the specified pool to update.</p>
    /// This field is required.
    pub fn pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the specified pool to update.</p>
    pub fn set_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pool_id = input;
        self
    }
    /// <p>The identifier of the specified pool to update.</p>
    pub fn get_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.pool_id
    }
    /// <p>Describes the specified pool to update.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes the specified pool to update.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Describes the specified pool to update.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The identifier of the bundle.</p>
    pub fn bundle_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bundle_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the bundle.</p>
    pub fn set_bundle_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bundle_id = input;
        self
    }
    /// <p>The identifier of the bundle.</p>
    pub fn get_bundle_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bundle_id
    }
    /// <p>The identifier of the directory.</p>
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the directory.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The identifier of the directory.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// <p>The desired capacity for the pool.</p>
    pub fn capacity(mut self, input: crate::types::Capacity) -> Self {
        self.capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The desired capacity for the pool.</p>
    pub fn set_capacity(mut self, input: ::std::option::Option<crate::types::Capacity>) -> Self {
        self.capacity = input;
        self
    }
    /// <p>The desired capacity for the pool.</p>
    pub fn get_capacity(&self) -> &::std::option::Option<crate::types::Capacity> {
        &self.capacity
    }
    /// <p>The persistent application settings for users in the pool.</p>
    pub fn application_settings(mut self, input: crate::types::ApplicationSettingsRequest) -> Self {
        self.application_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The persistent application settings for users in the pool.</p>
    pub fn set_application_settings(mut self, input: ::std::option::Option<crate::types::ApplicationSettingsRequest>) -> Self {
        self.application_settings = input;
        self
    }
    /// <p>The persistent application settings for users in the pool.</p>
    pub fn get_application_settings(&self) -> &::std::option::Option<crate::types::ApplicationSettingsRequest> {
        &self.application_settings
    }
    /// <p>Indicates the timeout settings of the specified pool.</p>
    pub fn timeout_settings(mut self, input: crate::types::TimeoutSettings) -> Self {
        self.timeout_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the timeout settings of the specified pool.</p>
    pub fn set_timeout_settings(mut self, input: ::std::option::Option<crate::types::TimeoutSettings>) -> Self {
        self.timeout_settings = input;
        self
    }
    /// <p>Indicates the timeout settings of the specified pool.</p>
    pub fn get_timeout_settings(&self) -> &::std::option::Option<crate::types::TimeoutSettings> {
        &self.timeout_settings
    }
    /// <p>The desired running mode for the pool. The running mode can only be updated when the pool is in a stopped state.</p>
    pub fn running_mode(mut self, input: crate::types::PoolsRunningMode) -> Self {
        self.running_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The desired running mode for the pool. The running mode can only be updated when the pool is in a stopped state.</p>
    pub fn set_running_mode(mut self, input: ::std::option::Option<crate::types::PoolsRunningMode>) -> Self {
        self.running_mode = input;
        self
    }
    /// <p>The desired running mode for the pool. The running mode can only be updated when the pool is in a stopped state.</p>
    pub fn get_running_mode(&self) -> &::std::option::Option<crate::types::PoolsRunningMode> {
        &self.running_mode
    }
    /// Consumes the builder and constructs a [`UpdateWorkspacesPoolInput`](crate::operation::update_workspaces_pool::UpdateWorkspacesPoolInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_workspaces_pool::UpdateWorkspacesPoolInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_workspaces_pool::UpdateWorkspacesPoolInput {
            pool_id: self.pool_id,
            description: self.description,
            bundle_id: self.bundle_id,
            directory_id: self.directory_id,
            capacity: self.capacity,
            application_settings: self.application_settings,
            timeout_settings: self.timeout_settings,
            running_mode: self.running_mode,
        })
    }
}
