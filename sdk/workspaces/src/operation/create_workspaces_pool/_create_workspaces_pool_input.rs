// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateWorkspacesPoolInput {
    /// <p>The name of the pool.</p>
    pub pool_name: ::std::option::Option<::std::string::String>,
    /// <p>The pool description.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the bundle for the pool.</p>
    pub bundle_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the directory for the pool.</p>
    pub directory_id: ::std::option::Option<::std::string::String>,
    /// <p>The user capacity of the pool.</p>
    pub capacity: ::std::option::Option<crate::types::Capacity>,
    /// <p>The tags for the pool.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>Indicates the application settings of the pool.</p>
    pub application_settings: ::std::option::Option<crate::types::ApplicationSettingsRequest>,
    /// <p>Indicates the timeout settings of the pool.</p>
    pub timeout_settings: ::std::option::Option<crate::types::TimeoutSettings>,
    /// <p>The running mode for the pool.</p>
    pub running_mode: ::std::option::Option<crate::types::PoolsRunningMode>,
}
impl CreateWorkspacesPoolInput {
    /// <p>The name of the pool.</p>
    pub fn pool_name(&self) -> ::std::option::Option<&str> {
        self.pool_name.as_deref()
    }
    /// <p>The pool description.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The identifier of the bundle for the pool.</p>
    pub fn bundle_id(&self) -> ::std::option::Option<&str> {
        self.bundle_id.as_deref()
    }
    /// <p>The identifier of the directory for the pool.</p>
    pub fn directory_id(&self) -> ::std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>The user capacity of the pool.</p>
    pub fn capacity(&self) -> ::std::option::Option<&crate::types::Capacity> {
        self.capacity.as_ref()
    }
    /// <p>The tags for the pool.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>Indicates the application settings of the pool.</p>
    pub fn application_settings(&self) -> ::std::option::Option<&crate::types::ApplicationSettingsRequest> {
        self.application_settings.as_ref()
    }
    /// <p>Indicates the timeout settings of the pool.</p>
    pub fn timeout_settings(&self) -> ::std::option::Option<&crate::types::TimeoutSettings> {
        self.timeout_settings.as_ref()
    }
    /// <p>The running mode for the pool.</p>
    pub fn running_mode(&self) -> ::std::option::Option<&crate::types::PoolsRunningMode> {
        self.running_mode.as_ref()
    }
}
impl CreateWorkspacesPoolInput {
    /// Creates a new builder-style object to manufacture [`CreateWorkspacesPoolInput`](crate::operation::create_workspaces_pool::CreateWorkspacesPoolInput).
    pub fn builder() -> crate::operation::create_workspaces_pool::builders::CreateWorkspacesPoolInputBuilder {
        crate::operation::create_workspaces_pool::builders::CreateWorkspacesPoolInputBuilder::default()
    }
}

/// A builder for [`CreateWorkspacesPoolInput`](crate::operation::create_workspaces_pool::CreateWorkspacesPoolInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateWorkspacesPoolInputBuilder {
    pub(crate) pool_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) bundle_id: ::std::option::Option<::std::string::String>,
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) capacity: ::std::option::Option<crate::types::Capacity>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) application_settings: ::std::option::Option<crate::types::ApplicationSettingsRequest>,
    pub(crate) timeout_settings: ::std::option::Option<crate::types::TimeoutSettings>,
    pub(crate) running_mode: ::std::option::Option<crate::types::PoolsRunningMode>,
}
impl CreateWorkspacesPoolInputBuilder {
    /// <p>The name of the pool.</p>
    /// This field is required.
    pub fn pool_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pool_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the pool.</p>
    pub fn set_pool_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pool_name = input;
        self
    }
    /// <p>The name of the pool.</p>
    pub fn get_pool_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.pool_name
    }
    /// <p>The pool description.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pool description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The pool description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The identifier of the bundle for the pool.</p>
    /// This field is required.
    pub fn bundle_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bundle_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the bundle for the pool.</p>
    pub fn set_bundle_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bundle_id = input;
        self
    }
    /// <p>The identifier of the bundle for the pool.</p>
    pub fn get_bundle_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bundle_id
    }
    /// <p>The identifier of the directory for the pool.</p>
    /// This field is required.
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the directory for the pool.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The identifier of the directory for the pool.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// <p>The user capacity of the pool.</p>
    /// This field is required.
    pub fn capacity(mut self, input: crate::types::Capacity) -> Self {
        self.capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The user capacity of the pool.</p>
    pub fn set_capacity(mut self, input: ::std::option::Option<crate::types::Capacity>) -> Self {
        self.capacity = input;
        self
    }
    /// <p>The user capacity of the pool.</p>
    pub fn get_capacity(&self) -> &::std::option::Option<crate::types::Capacity> {
        &self.capacity
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags for the pool.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags for the pool.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags for the pool.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>Indicates the application settings of the pool.</p>
    pub fn application_settings(mut self, input: crate::types::ApplicationSettingsRequest) -> Self {
        self.application_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the application settings of the pool.</p>
    pub fn set_application_settings(mut self, input: ::std::option::Option<crate::types::ApplicationSettingsRequest>) -> Self {
        self.application_settings = input;
        self
    }
    /// <p>Indicates the application settings of the pool.</p>
    pub fn get_application_settings(&self) -> &::std::option::Option<crate::types::ApplicationSettingsRequest> {
        &self.application_settings
    }
    /// <p>Indicates the timeout settings of the pool.</p>
    pub fn timeout_settings(mut self, input: crate::types::TimeoutSettings) -> Self {
        self.timeout_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the timeout settings of the pool.</p>
    pub fn set_timeout_settings(mut self, input: ::std::option::Option<crate::types::TimeoutSettings>) -> Self {
        self.timeout_settings = input;
        self
    }
    /// <p>Indicates the timeout settings of the pool.</p>
    pub fn get_timeout_settings(&self) -> &::std::option::Option<crate::types::TimeoutSettings> {
        &self.timeout_settings
    }
    /// <p>The running mode for the pool.</p>
    pub fn running_mode(mut self, input: crate::types::PoolsRunningMode) -> Self {
        self.running_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The running mode for the pool.</p>
    pub fn set_running_mode(mut self, input: ::std::option::Option<crate::types::PoolsRunningMode>) -> Self {
        self.running_mode = input;
        self
    }
    /// <p>The running mode for the pool.</p>
    pub fn get_running_mode(&self) -> &::std::option::Option<crate::types::PoolsRunningMode> {
        &self.running_mode
    }
    /// Consumes the builder and constructs a [`CreateWorkspacesPoolInput`](crate::operation::create_workspaces_pool::CreateWorkspacesPoolInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_workspaces_pool::CreateWorkspacesPoolInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_workspaces_pool::CreateWorkspacesPoolInput {
            pool_name: self.pool_name,
            description: self.description,
            bundle_id: self.bundle_id,
            directory_id: self.directory_id,
            capacity: self.capacity,
            tags: self.tags,
            application_settings: self.application_settings,
            timeout_settings: self.timeout_settings,
            running_mode: self.running_mode,
        })
    }
}
