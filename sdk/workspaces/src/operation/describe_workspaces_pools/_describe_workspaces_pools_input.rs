// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeWorkspacesPoolsInput {
    /// <p>The identifier of the WorkSpaces Pools.</p>
    pub pool_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The filter conditions for the WorkSpaces Pool to return.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::DescribeWorkspacesPoolsFilter>>,
    /// <p>The maximum number of items to return.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>If you received a <code>NextToken</code> from a previous call that was paginated, provide this token to receive the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl DescribeWorkspacesPoolsInput {
    /// <p>The identifier of the WorkSpaces Pools.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.pool_ids.is_none()`.
    pub fn pool_ids(&self) -> &[::std::string::String] {
        self.pool_ids.as_deref().unwrap_or_default()
    }
    /// <p>The filter conditions for the WorkSpaces Pool to return.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::DescribeWorkspacesPoolsFilter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>The maximum number of items to return.</p>
    pub fn limit(&self) -> ::std::option::Option<i32> {
        self.limit
    }
    /// <p>If you received a <code>NextToken</code> from a previous call that was paginated, provide this token to receive the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl DescribeWorkspacesPoolsInput {
    /// Creates a new builder-style object to manufacture [`DescribeWorkspacesPoolsInput`](crate::operation::describe_workspaces_pools::DescribeWorkspacesPoolsInput).
    pub fn builder() -> crate::operation::describe_workspaces_pools::builders::DescribeWorkspacesPoolsInputBuilder {
        crate::operation::describe_workspaces_pools::builders::DescribeWorkspacesPoolsInputBuilder::default()
    }
}

/// A builder for [`DescribeWorkspacesPoolsInput`](crate::operation::describe_workspaces_pools::DescribeWorkspacesPoolsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeWorkspacesPoolsInputBuilder {
    pub(crate) pool_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::DescribeWorkspacesPoolsFilter>>,
    pub(crate) limit: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl DescribeWorkspacesPoolsInputBuilder {
    /// Appends an item to `pool_ids`.
    ///
    /// To override the contents of this collection use [`set_pool_ids`](Self::set_pool_ids).
    ///
    /// <p>The identifier of the WorkSpaces Pools.</p>
    pub fn pool_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.pool_ids.unwrap_or_default();
        v.push(input.into());
        self.pool_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The identifier of the WorkSpaces Pools.</p>
    pub fn set_pool_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.pool_ids = input;
        self
    }
    /// <p>The identifier of the WorkSpaces Pools.</p>
    pub fn get_pool_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.pool_ids
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filter conditions for the WorkSpaces Pool to return.</p>
    pub fn filters(mut self, input: crate::types::DescribeWorkspacesPoolsFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The filter conditions for the WorkSpaces Pool to return.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DescribeWorkspacesPoolsFilter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>The filter conditions for the WorkSpaces Pool to return.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DescribeWorkspacesPoolsFilter>> {
        &self.filters
    }
    /// <p>The maximum number of items to return.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of items to return.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>The maximum number of items to return.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        &self.limit
    }
    /// <p>If you received a <code>NextToken</code> from a previous call that was paginated, provide this token to receive the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If you received a <code>NextToken</code> from a previous call that was paginated, provide this token to receive the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If you received a <code>NextToken</code> from a previous call that was paginated, provide this token to receive the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`DescribeWorkspacesPoolsInput`](crate::operation::describe_workspaces_pools::DescribeWorkspacesPoolsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_workspaces_pools::DescribeWorkspacesPoolsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_workspaces_pools::DescribeWorkspacesPoolsInput {
            pool_ids: self.pool_ids,
            filters: self.filters,
            limit: self.limit,
            next_token: self.next_token,
        })
    }
}
