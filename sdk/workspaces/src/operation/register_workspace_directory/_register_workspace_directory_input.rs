// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RegisterWorkspaceDirectoryInput {
    /// <p>The identifier of the directory. You cannot register a directory if it does not have a status of Active. If the directory does not have a status of Active, you will receive an InvalidResourceStateException error. If you have already registered the maximum number of directories that you can register with Amazon WorkSpaces, you will receive a ResourceLimitExceededException error. Deregister directories that you are not using for WorkSpaces, and try again.</p>
    pub directory_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifiers of the subnets for your virtual private cloud (VPC). Make sure that the subnets are in supported Availability Zones. The subnets must also be in separate Availability Zones. If these conditions are not met, you will receive an OperationNotSupportedException error.</p>
    pub subnet_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Indicates whether self-service capabilities are enabled or disabled.</p>
    pub enable_self_service: ::std::option::Option<bool>,
    /// <p>Indicates whether your WorkSpace directory is dedicated or shared. To use Bring Your Own License (BYOL) images, this value must be set to <code>DEDICATED</code> and your Amazon Web Services account must be enabled for BYOL. If your account has not been enabled for BYOL, you will receive an InvalidParameterValuesException error. For more information about BYOL images, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html">Bring Your Own Windows Desktop Images</a>.</p>
    pub tenancy: ::std::option::Option<crate::types::Tenancy>,
    /// <p>The tags associated with the directory.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The name of the directory to register.</p>
    pub workspace_directory_name: ::std::option::Option<::std::string::String>,
    /// <p>Description of the directory to register.</p>
    pub workspace_directory_description: ::std::option::Option<::std::string::String>,
    /// <p>The type of identity management the user is using.</p>
    pub user_identity_type: ::std::option::Option<crate::types::UserIdentityType>,
    /// <p>The Amazon Resource Name (ARN) of the identity center instance.</p>
    pub idc_instance_arn: ::std::option::Option<::std::string::String>,
    /// <p>The details about Microsoft Entra config.</p>
    pub microsoft_entra_config: ::std::option::Option<crate::types::MicrosoftEntraConfig>,
    /// <p>Indicates whether the directory's WorkSpace type is personal or pools.</p>
    pub workspace_type: ::std::option::Option<crate::types::WorkspaceType>,
    /// <p>The active directory config of the directory.</p>
    pub active_directory_config: ::std::option::Option<crate::types::ActiveDirectoryConfig>,
}
impl RegisterWorkspaceDirectoryInput {
    /// <p>The identifier of the directory. You cannot register a directory if it does not have a status of Active. If the directory does not have a status of Active, you will receive an InvalidResourceStateException error. If you have already registered the maximum number of directories that you can register with Amazon WorkSpaces, you will receive a ResourceLimitExceededException error. Deregister directories that you are not using for WorkSpaces, and try again.</p>
    pub fn directory_id(&self) -> ::std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>The identifiers of the subnets for your virtual private cloud (VPC). Make sure that the subnets are in supported Availability Zones. The subnets must also be in separate Availability Zones. If these conditions are not met, you will receive an OperationNotSupportedException error.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.subnet_ids.is_none()`.
    pub fn subnet_ids(&self) -> &[::std::string::String] {
        self.subnet_ids.as_deref().unwrap_or_default()
    }
    /// <p>Indicates whether self-service capabilities are enabled or disabled.</p>
    pub fn enable_self_service(&self) -> ::std::option::Option<bool> {
        self.enable_self_service
    }
    /// <p>Indicates whether your WorkSpace directory is dedicated or shared. To use Bring Your Own License (BYOL) images, this value must be set to <code>DEDICATED</code> and your Amazon Web Services account must be enabled for BYOL. If your account has not been enabled for BYOL, you will receive an InvalidParameterValuesException error. For more information about BYOL images, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html">Bring Your Own Windows Desktop Images</a>.</p>
    pub fn tenancy(&self) -> ::std::option::Option<&crate::types::Tenancy> {
        self.tenancy.as_ref()
    }
    /// <p>The tags associated with the directory.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The name of the directory to register.</p>
    pub fn workspace_directory_name(&self) -> ::std::option::Option<&str> {
        self.workspace_directory_name.as_deref()
    }
    /// <p>Description of the directory to register.</p>
    pub fn workspace_directory_description(&self) -> ::std::option::Option<&str> {
        self.workspace_directory_description.as_deref()
    }
    /// <p>The type of identity management the user is using.</p>
    pub fn user_identity_type(&self) -> ::std::option::Option<&crate::types::UserIdentityType> {
        self.user_identity_type.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the identity center instance.</p>
    pub fn idc_instance_arn(&self) -> ::std::option::Option<&str> {
        self.idc_instance_arn.as_deref()
    }
    /// <p>The details about Microsoft Entra config.</p>
    pub fn microsoft_entra_config(&self) -> ::std::option::Option<&crate::types::MicrosoftEntraConfig> {
        self.microsoft_entra_config.as_ref()
    }
    /// <p>Indicates whether the directory's WorkSpace type is personal or pools.</p>
    pub fn workspace_type(&self) -> ::std::option::Option<&crate::types::WorkspaceType> {
        self.workspace_type.as_ref()
    }
    /// <p>The active directory config of the directory.</p>
    pub fn active_directory_config(&self) -> ::std::option::Option<&crate::types::ActiveDirectoryConfig> {
        self.active_directory_config.as_ref()
    }
}
impl RegisterWorkspaceDirectoryInput {
    /// Creates a new builder-style object to manufacture [`RegisterWorkspaceDirectoryInput`](crate::operation::register_workspace_directory::RegisterWorkspaceDirectoryInput).
    pub fn builder() -> crate::operation::register_workspace_directory::builders::RegisterWorkspaceDirectoryInputBuilder {
        crate::operation::register_workspace_directory::builders::RegisterWorkspaceDirectoryInputBuilder::default()
    }
}

/// A builder for [`RegisterWorkspaceDirectoryInput`](crate::operation::register_workspace_directory::RegisterWorkspaceDirectoryInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RegisterWorkspaceDirectoryInputBuilder {
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) enable_self_service: ::std::option::Option<bool>,
    pub(crate) tenancy: ::std::option::Option<crate::types::Tenancy>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) workspace_directory_name: ::std::option::Option<::std::string::String>,
    pub(crate) workspace_directory_description: ::std::option::Option<::std::string::String>,
    pub(crate) user_identity_type: ::std::option::Option<crate::types::UserIdentityType>,
    pub(crate) idc_instance_arn: ::std::option::Option<::std::string::String>,
    pub(crate) microsoft_entra_config: ::std::option::Option<crate::types::MicrosoftEntraConfig>,
    pub(crate) workspace_type: ::std::option::Option<crate::types::WorkspaceType>,
    pub(crate) active_directory_config: ::std::option::Option<crate::types::ActiveDirectoryConfig>,
}
impl RegisterWorkspaceDirectoryInputBuilder {
    /// <p>The identifier of the directory. You cannot register a directory if it does not have a status of Active. If the directory does not have a status of Active, you will receive an InvalidResourceStateException error. If you have already registered the maximum number of directories that you can register with Amazon WorkSpaces, you will receive a ResourceLimitExceededException error. Deregister directories that you are not using for WorkSpaces, and try again.</p>
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the directory. You cannot register a directory if it does not have a status of Active. If the directory does not have a status of Active, you will receive an InvalidResourceStateException error. If you have already registered the maximum number of directories that you can register with Amazon WorkSpaces, you will receive a ResourceLimitExceededException error. Deregister directories that you are not using for WorkSpaces, and try again.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The identifier of the directory. You cannot register a directory if it does not have a status of Active. If the directory does not have a status of Active, you will receive an InvalidResourceStateException error. If you have already registered the maximum number of directories that you can register with Amazon WorkSpaces, you will receive a ResourceLimitExceededException error. Deregister directories that you are not using for WorkSpaces, and try again.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>The identifiers of the subnets for your virtual private cloud (VPC). Make sure that the subnets are in supported Availability Zones. The subnets must also be in separate Availability Zones. If these conditions are not met, you will receive an OperationNotSupportedException error.</p>
    pub fn subnet_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The identifiers of the subnets for your virtual private cloud (VPC). Make sure that the subnets are in supported Availability Zones. The subnets must also be in separate Availability Zones. If these conditions are not met, you will receive an OperationNotSupportedException error.</p>
    pub fn set_subnet_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.subnet_ids = input;
        self
    }
    /// <p>The identifiers of the subnets for your virtual private cloud (VPC). Make sure that the subnets are in supported Availability Zones. The subnets must also be in separate Availability Zones. If these conditions are not met, you will receive an OperationNotSupportedException error.</p>
    pub fn get_subnet_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.subnet_ids
    }
    /// <p>Indicates whether self-service capabilities are enabled or disabled.</p>
    pub fn enable_self_service(mut self, input: bool) -> Self {
        self.enable_self_service = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether self-service capabilities are enabled or disabled.</p>
    pub fn set_enable_self_service(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_self_service = input;
        self
    }
    /// <p>Indicates whether self-service capabilities are enabled or disabled.</p>
    pub fn get_enable_self_service(&self) -> &::std::option::Option<bool> {
        &self.enable_self_service
    }
    /// <p>Indicates whether your WorkSpace directory is dedicated or shared. To use Bring Your Own License (BYOL) images, this value must be set to <code>DEDICATED</code> and your Amazon Web Services account must be enabled for BYOL. If your account has not been enabled for BYOL, you will receive an InvalidParameterValuesException error. For more information about BYOL images, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html">Bring Your Own Windows Desktop Images</a>.</p>
    pub fn tenancy(mut self, input: crate::types::Tenancy) -> Self {
        self.tenancy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether your WorkSpace directory is dedicated or shared. To use Bring Your Own License (BYOL) images, this value must be set to <code>DEDICATED</code> and your Amazon Web Services account must be enabled for BYOL. If your account has not been enabled for BYOL, you will receive an InvalidParameterValuesException error. For more information about BYOL images, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html">Bring Your Own Windows Desktop Images</a>.</p>
    pub fn set_tenancy(mut self, input: ::std::option::Option<crate::types::Tenancy>) -> Self {
        self.tenancy = input;
        self
    }
    /// <p>Indicates whether your WorkSpace directory is dedicated or shared. To use Bring Your Own License (BYOL) images, this value must be set to <code>DEDICATED</code> and your Amazon Web Services account must be enabled for BYOL. If your account has not been enabled for BYOL, you will receive an InvalidParameterValuesException error. For more information about BYOL images, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html">Bring Your Own Windows Desktop Images</a>.</p>
    pub fn get_tenancy(&self) -> &::std::option::Option<crate::types::Tenancy> {
        &self.tenancy
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with the directory.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags associated with the directory.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags associated with the directory.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The name of the directory to register.</p>
    pub fn workspace_directory_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_directory_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the directory to register.</p>
    pub fn set_workspace_directory_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_directory_name = input;
        self
    }
    /// <p>The name of the directory to register.</p>
    pub fn get_workspace_directory_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_directory_name
    }
    /// <p>Description of the directory to register.</p>
    pub fn workspace_directory_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_directory_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Description of the directory to register.</p>
    pub fn set_workspace_directory_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_directory_description = input;
        self
    }
    /// <p>Description of the directory to register.</p>
    pub fn get_workspace_directory_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_directory_description
    }
    /// <p>The type of identity management the user is using.</p>
    pub fn user_identity_type(mut self, input: crate::types::UserIdentityType) -> Self {
        self.user_identity_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of identity management the user is using.</p>
    pub fn set_user_identity_type(mut self, input: ::std::option::Option<crate::types::UserIdentityType>) -> Self {
        self.user_identity_type = input;
        self
    }
    /// <p>The type of identity management the user is using.</p>
    pub fn get_user_identity_type(&self) -> &::std::option::Option<crate::types::UserIdentityType> {
        &self.user_identity_type
    }
    /// <p>The Amazon Resource Name (ARN) of the identity center instance.</p>
    pub fn idc_instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.idc_instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the identity center instance.</p>
    pub fn set_idc_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.idc_instance_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the identity center instance.</p>
    pub fn get_idc_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.idc_instance_arn
    }
    /// <p>The details about Microsoft Entra config.</p>
    pub fn microsoft_entra_config(mut self, input: crate::types::MicrosoftEntraConfig) -> Self {
        self.microsoft_entra_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details about Microsoft Entra config.</p>
    pub fn set_microsoft_entra_config(mut self, input: ::std::option::Option<crate::types::MicrosoftEntraConfig>) -> Self {
        self.microsoft_entra_config = input;
        self
    }
    /// <p>The details about Microsoft Entra config.</p>
    pub fn get_microsoft_entra_config(&self) -> &::std::option::Option<crate::types::MicrosoftEntraConfig> {
        &self.microsoft_entra_config
    }
    /// <p>Indicates whether the directory's WorkSpace type is personal or pools.</p>
    pub fn workspace_type(mut self, input: crate::types::WorkspaceType) -> Self {
        self.workspace_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the directory's WorkSpace type is personal or pools.</p>
    pub fn set_workspace_type(mut self, input: ::std::option::Option<crate::types::WorkspaceType>) -> Self {
        self.workspace_type = input;
        self
    }
    /// <p>Indicates whether the directory's WorkSpace type is personal or pools.</p>
    pub fn get_workspace_type(&self) -> &::std::option::Option<crate::types::WorkspaceType> {
        &self.workspace_type
    }
    /// <p>The active directory config of the directory.</p>
    pub fn active_directory_config(mut self, input: crate::types::ActiveDirectoryConfig) -> Self {
        self.active_directory_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The active directory config of the directory.</p>
    pub fn set_active_directory_config(mut self, input: ::std::option::Option<crate::types::ActiveDirectoryConfig>) -> Self {
        self.active_directory_config = input;
        self
    }
    /// <p>The active directory config of the directory.</p>
    pub fn get_active_directory_config(&self) -> &::std::option::Option<crate::types::ActiveDirectoryConfig> {
        &self.active_directory_config
    }
    /// Consumes the builder and constructs a [`RegisterWorkspaceDirectoryInput`](crate::operation::register_workspace_directory::RegisterWorkspaceDirectoryInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::register_workspace_directory::RegisterWorkspaceDirectoryInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::register_workspace_directory::RegisterWorkspaceDirectoryInput {
            directory_id: self.directory_id,
            subnet_ids: self.subnet_ids,
            enable_self_service: self.enable_self_service,
            tenancy: self.tenancy,
            tags: self.tags,
            workspace_directory_name: self.workspace_directory_name,
            workspace_directory_description: self.workspace_directory_description,
            user_identity_type: self.user_identity_type,
            idc_instance_arn: self.idc_instance_arn,
            microsoft_entra_config: self.microsoft_entra_config,
            workspace_type: self.workspace_type,
            active_directory_config: self.active_directory_config,
        })
    }
}
