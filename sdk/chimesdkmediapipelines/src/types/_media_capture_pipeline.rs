// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A media pipeline object consisting of an ID, source type, source ARN, a sink type, a sink ARN, and a configuration object.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct MediaCapturePipeline {
    /// <p>The ID of a media pipeline.</p>
    pub media_pipeline_id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the media capture pipeline</p>
    pub media_pipeline_arn: ::std::option::Option<::std::string::String>,
    /// <p>Source type from which media artifacts are saved. You must use <code>ChimeMeeting</code>.</p>
    pub source_type: ::std::option::Option<crate::types::MediaPipelineSourceType>,
    /// <p>ARN of the source from which the media artifacts are saved.</p>
    pub source_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the media pipeline.</p>
    pub status: ::std::option::Option<crate::types::MediaPipelineStatus>,
    /// <p>Destination type to which the media artifacts are saved. You must use an S3 Bucket.</p>
    pub sink_type: ::std::option::Option<crate::types::MediaPipelineSinkType>,
    /// <p>ARN of the destination to which the media artifacts are saved.</p>
    pub sink_arn: ::std::option::Option<::std::string::String>,
    /// <p>The time at which the pipeline was created, in ISO 8601 format.</p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time at which the pipeline was updated, in ISO 8601 format.</p>
    pub updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The configuration for a specified media pipeline. <code>SourceType</code> must be <code>ChimeSdkMeeting</code>.</p>
    pub chime_sdk_meeting_configuration: ::std::option::Option<crate::types::ChimeSdkMeetingConfiguration>,
    /// <p>An object that contains server side encryption parameters to be used by media capture pipeline. The parameters can also be used by media concatenation pipeline taking media capture pipeline as a media source.</p>
    pub sse_aws_key_management_params: ::std::option::Option<crate::types::SseAwsKeyManagementParams>,
    /// <p>The Amazon Resource Name (ARN) of the sink role to be used with <code>AwsKmsKeyId</code> in <code>SseAwsKeyManagementParams</code>.</p>
    pub sink_iam_role_arn: ::std::option::Option<::std::string::String>,
}
impl MediaCapturePipeline {
    /// <p>The ID of a media pipeline.</p>
    pub fn media_pipeline_id(&self) -> ::std::option::Option<&str> {
        self.media_pipeline_id.as_deref()
    }
    /// <p>The ARN of the media capture pipeline</p>
    pub fn media_pipeline_arn(&self) -> ::std::option::Option<&str> {
        self.media_pipeline_arn.as_deref()
    }
    /// <p>Source type from which media artifacts are saved. You must use <code>ChimeMeeting</code>.</p>
    pub fn source_type(&self) -> ::std::option::Option<&crate::types::MediaPipelineSourceType> {
        self.source_type.as_ref()
    }
    /// <p>ARN of the source from which the media artifacts are saved.</p>
    pub fn source_arn(&self) -> ::std::option::Option<&str> {
        self.source_arn.as_deref()
    }
    /// <p>The status of the media pipeline.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::MediaPipelineStatus> {
        self.status.as_ref()
    }
    /// <p>Destination type to which the media artifacts are saved. You must use an S3 Bucket.</p>
    pub fn sink_type(&self) -> ::std::option::Option<&crate::types::MediaPipelineSinkType> {
        self.sink_type.as_ref()
    }
    /// <p>ARN of the destination to which the media artifacts are saved.</p>
    pub fn sink_arn(&self) -> ::std::option::Option<&str> {
        self.sink_arn.as_deref()
    }
    /// <p>The time at which the pipeline was created, in ISO 8601 format.</p>
    pub fn created_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The time at which the pipeline was updated, in ISO 8601 format.</p>
    pub fn updated_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_timestamp.as_ref()
    }
    /// <p>The configuration for a specified media pipeline. <code>SourceType</code> must be <code>ChimeSdkMeeting</code>.</p>
    pub fn chime_sdk_meeting_configuration(&self) -> ::std::option::Option<&crate::types::ChimeSdkMeetingConfiguration> {
        self.chime_sdk_meeting_configuration.as_ref()
    }
    /// <p>An object that contains server side encryption parameters to be used by media capture pipeline. The parameters can also be used by media concatenation pipeline taking media capture pipeline as a media source.</p>
    pub fn sse_aws_key_management_params(&self) -> ::std::option::Option<&crate::types::SseAwsKeyManagementParams> {
        self.sse_aws_key_management_params.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the sink role to be used with <code>AwsKmsKeyId</code> in <code>SseAwsKeyManagementParams</code>.</p>
    pub fn sink_iam_role_arn(&self) -> ::std::option::Option<&str> {
        self.sink_iam_role_arn.as_deref()
    }
}
impl ::std::fmt::Debug for MediaCapturePipeline {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MediaCapturePipeline");
        formatter.field("media_pipeline_id", &self.media_pipeline_id);
        formatter.field("media_pipeline_arn", &self.media_pipeline_arn);
        formatter.field("source_type", &self.source_type);
        formatter.field("source_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("sink_type", &self.sink_type);
        formatter.field("sink_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("created_timestamp", &self.created_timestamp);
        formatter.field("updated_timestamp", &self.updated_timestamp);
        formatter.field("chime_sdk_meeting_configuration", &self.chime_sdk_meeting_configuration);
        formatter.field("sse_aws_key_management_params", &self.sse_aws_key_management_params);
        formatter.field("sink_iam_role_arn", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl MediaCapturePipeline {
    /// Creates a new builder-style object to manufacture [`MediaCapturePipeline`](crate::types::MediaCapturePipeline).
    pub fn builder() -> crate::types::builders::MediaCapturePipelineBuilder {
        crate::types::builders::MediaCapturePipelineBuilder::default()
    }
}

/// A builder for [`MediaCapturePipeline`](crate::types::MediaCapturePipeline).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct MediaCapturePipelineBuilder {
    pub(crate) media_pipeline_id: ::std::option::Option<::std::string::String>,
    pub(crate) media_pipeline_arn: ::std::option::Option<::std::string::String>,
    pub(crate) source_type: ::std::option::Option<crate::types::MediaPipelineSourceType>,
    pub(crate) source_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::MediaPipelineStatus>,
    pub(crate) sink_type: ::std::option::Option<crate::types::MediaPipelineSinkType>,
    pub(crate) sink_arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) chime_sdk_meeting_configuration: ::std::option::Option<crate::types::ChimeSdkMeetingConfiguration>,
    pub(crate) sse_aws_key_management_params: ::std::option::Option<crate::types::SseAwsKeyManagementParams>,
    pub(crate) sink_iam_role_arn: ::std::option::Option<::std::string::String>,
}
impl MediaCapturePipelineBuilder {
    /// <p>The ID of a media pipeline.</p>
    pub fn media_pipeline_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.media_pipeline_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of a media pipeline.</p>
    pub fn set_media_pipeline_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.media_pipeline_id = input;
        self
    }
    /// <p>The ID of a media pipeline.</p>
    pub fn get_media_pipeline_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.media_pipeline_id
    }
    /// <p>The ARN of the media capture pipeline</p>
    pub fn media_pipeline_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.media_pipeline_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the media capture pipeline</p>
    pub fn set_media_pipeline_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.media_pipeline_arn = input;
        self
    }
    /// <p>The ARN of the media capture pipeline</p>
    pub fn get_media_pipeline_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.media_pipeline_arn
    }
    /// <p>Source type from which media artifacts are saved. You must use <code>ChimeMeeting</code>.</p>
    pub fn source_type(mut self, input: crate::types::MediaPipelineSourceType) -> Self {
        self.source_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Source type from which media artifacts are saved. You must use <code>ChimeMeeting</code>.</p>
    pub fn set_source_type(mut self, input: ::std::option::Option<crate::types::MediaPipelineSourceType>) -> Self {
        self.source_type = input;
        self
    }
    /// <p>Source type from which media artifacts are saved. You must use <code>ChimeMeeting</code>.</p>
    pub fn get_source_type(&self) -> &::std::option::Option<crate::types::MediaPipelineSourceType> {
        &self.source_type
    }
    /// <p>ARN of the source from which the media artifacts are saved.</p>
    pub fn source_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the source from which the media artifacts are saved.</p>
    pub fn set_source_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_arn = input;
        self
    }
    /// <p>ARN of the source from which the media artifacts are saved.</p>
    pub fn get_source_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_arn
    }
    /// <p>The status of the media pipeline.</p>
    pub fn status(mut self, input: crate::types::MediaPipelineStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the media pipeline.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::MediaPipelineStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the media pipeline.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::MediaPipelineStatus> {
        &self.status
    }
    /// <p>Destination type to which the media artifacts are saved. You must use an S3 Bucket.</p>
    pub fn sink_type(mut self, input: crate::types::MediaPipelineSinkType) -> Self {
        self.sink_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Destination type to which the media artifacts are saved. You must use an S3 Bucket.</p>
    pub fn set_sink_type(mut self, input: ::std::option::Option<crate::types::MediaPipelineSinkType>) -> Self {
        self.sink_type = input;
        self
    }
    /// <p>Destination type to which the media artifacts are saved. You must use an S3 Bucket.</p>
    pub fn get_sink_type(&self) -> &::std::option::Option<crate::types::MediaPipelineSinkType> {
        &self.sink_type
    }
    /// <p>ARN of the destination to which the media artifacts are saved.</p>
    pub fn sink_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sink_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the destination to which the media artifacts are saved.</p>
    pub fn set_sink_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sink_arn = input;
        self
    }
    /// <p>ARN of the destination to which the media artifacts are saved.</p>
    pub fn get_sink_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.sink_arn
    }
    /// <p>The time at which the pipeline was created, in ISO 8601 format.</p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the pipeline was created, in ISO 8601 format.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The time at which the pipeline was created, in ISO 8601 format.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    /// <p>The time at which the pipeline was updated, in ISO 8601 format.</p>
    pub fn updated_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the pipeline was updated, in ISO 8601 format.</p>
    pub fn set_updated_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_timestamp = input;
        self
    }
    /// <p>The time at which the pipeline was updated, in ISO 8601 format.</p>
    pub fn get_updated_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_timestamp
    }
    /// <p>The configuration for a specified media pipeline. <code>SourceType</code> must be <code>ChimeSdkMeeting</code>.</p>
    pub fn chime_sdk_meeting_configuration(mut self, input: crate::types::ChimeSdkMeetingConfiguration) -> Self {
        self.chime_sdk_meeting_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for a specified media pipeline. <code>SourceType</code> must be <code>ChimeSdkMeeting</code>.</p>
    pub fn set_chime_sdk_meeting_configuration(mut self, input: ::std::option::Option<crate::types::ChimeSdkMeetingConfiguration>) -> Self {
        self.chime_sdk_meeting_configuration = input;
        self
    }
    /// <p>The configuration for a specified media pipeline. <code>SourceType</code> must be <code>ChimeSdkMeeting</code>.</p>
    pub fn get_chime_sdk_meeting_configuration(&self) -> &::std::option::Option<crate::types::ChimeSdkMeetingConfiguration> {
        &self.chime_sdk_meeting_configuration
    }
    /// <p>An object that contains server side encryption parameters to be used by media capture pipeline. The parameters can also be used by media concatenation pipeline taking media capture pipeline as a media source.</p>
    pub fn sse_aws_key_management_params(mut self, input: crate::types::SseAwsKeyManagementParams) -> Self {
        self.sse_aws_key_management_params = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains server side encryption parameters to be used by media capture pipeline. The parameters can also be used by media concatenation pipeline taking media capture pipeline as a media source.</p>
    pub fn set_sse_aws_key_management_params(mut self, input: ::std::option::Option<crate::types::SseAwsKeyManagementParams>) -> Self {
        self.sse_aws_key_management_params = input;
        self
    }
    /// <p>An object that contains server side encryption parameters to be used by media capture pipeline. The parameters can also be used by media concatenation pipeline taking media capture pipeline as a media source.</p>
    pub fn get_sse_aws_key_management_params(&self) -> &::std::option::Option<crate::types::SseAwsKeyManagementParams> {
        &self.sse_aws_key_management_params
    }
    /// <p>The Amazon Resource Name (ARN) of the sink role to be used with <code>AwsKmsKeyId</code> in <code>SseAwsKeyManagementParams</code>.</p>
    pub fn sink_iam_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sink_iam_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the sink role to be used with <code>AwsKmsKeyId</code> in <code>SseAwsKeyManagementParams</code>.</p>
    pub fn set_sink_iam_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sink_iam_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the sink role to be used with <code>AwsKmsKeyId</code> in <code>SseAwsKeyManagementParams</code>.</p>
    pub fn get_sink_iam_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.sink_iam_role_arn
    }
    /// Consumes the builder and constructs a [`MediaCapturePipeline`](crate::types::MediaCapturePipeline).
    pub fn build(self) -> crate::types::MediaCapturePipeline {
        crate::types::MediaCapturePipeline {
            media_pipeline_id: self.media_pipeline_id,
            media_pipeline_arn: self.media_pipeline_arn,
            source_type: self.source_type,
            source_arn: self.source_arn,
            status: self.status,
            sink_type: self.sink_type,
            sink_arn: self.sink_arn,
            created_timestamp: self.created_timestamp,
            updated_timestamp: self.updated_timestamp,
            chime_sdk_meeting_configuration: self.chime_sdk_meeting_configuration,
            sse_aws_key_management_params: self.sse_aws_key_management_params,
            sink_iam_role_arn: self.sink_iam_role_arn,
        }
    }
}
impl ::std::fmt::Debug for MediaCapturePipelineBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MediaCapturePipelineBuilder");
        formatter.field("media_pipeline_id", &self.media_pipeline_id);
        formatter.field("media_pipeline_arn", &self.media_pipeline_arn);
        formatter.field("source_type", &self.source_type);
        formatter.field("source_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("sink_type", &self.sink_type);
        formatter.field("sink_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("created_timestamp", &self.created_timestamp);
        formatter.field("updated_timestamp", &self.updated_timestamp);
        formatter.field("chime_sdk_meeting_configuration", &self.chime_sdk_meeting_configuration);
        formatter.field("sse_aws_key_management_params", &self.sse_aws_key_management_params);
        formatter.field("sink_iam_role_arn", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
