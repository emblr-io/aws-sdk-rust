// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This is a tagged union for all of the types of events an enhanced fan-out consumer can receive over HTTP/2 after a call to <code>SubscribeToShard</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum SubscribeToShardEventStream {
    /// <p>After you call <code>SubscribeToShard</code>, Kinesis Data Streams sends events of this type to your consumer. For an example of how to handle these events, see <a href="/streams/latest/dev/building-enhanced-consumers-api.html">Enhanced Fan-Out Using the Kinesis Data Streams API</a>.</p>
    SubscribeToShardEvent(crate::types::SubscribeToShardEvent),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl SubscribeToShardEventStream {
    #[allow(irrefutable_let_patterns)]
    /// Tries to convert the enum instance into [`SubscribeToShardEvent`](crate::types::SubscribeToShardEventStream::SubscribeToShardEvent), extracting the inner [`SubscribeToShardEvent`](crate::types::SubscribeToShardEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_subscribe_to_shard_event(&self) -> ::std::result::Result<&crate::types::SubscribeToShardEvent, &Self> {
        if let SubscribeToShardEventStream::SubscribeToShardEvent(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`SubscribeToShardEvent`](crate::types::SubscribeToShardEventStream::SubscribeToShardEvent).
    pub fn is_subscribe_to_shard_event(&self) -> bool {
        self.as_subscribe_to_shard_event().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
