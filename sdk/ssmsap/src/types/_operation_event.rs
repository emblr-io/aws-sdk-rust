// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An operation event returns details for an operation, including key milestones which can be used to monitor and track operations in progress.</p>
/// <p>Operation events contain:</p>
/// <ul>
/// <li>
/// <p>Description string</p></li>
/// <li>
/// <p>Resource, including its ARN and type</p></li>
/// <li>
/// <p>Status</p></li>
/// <li>
/// <p>StatusMessage string</p></li>
/// <li>
/// <p>TimeStamp</p></li>
/// </ul>
/// <p>Operation event examples include StartApplication or StopApplication.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OperationEvent {
    /// <p>A description of the operation event. For example, "Stop the EC2 instance i-abcdefgh987654321".</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The resource involved in the operations event.</p>
    /// <p>Contains <code>ResourceArn</code> ARN and <code>ResourceType</code>.</p>
    pub resource: ::std::option::Option<crate::types::Resource>,
    /// <p>The status of the operation event. The possible statuses are: <code>IN_PROGRESS</code>, <code>COMPLETED</code>, and <code>FAILED</code>.</p>
    pub status: ::std::option::Option<crate::types::OperationEventStatus>,
    /// <p>The status message relating to a specific operation event.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of the specified operation event.</p>
    pub timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl OperationEvent {
    /// <p>A description of the operation event. For example, "Stop the EC2 instance i-abcdefgh987654321".</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The resource involved in the operations event.</p>
    /// <p>Contains <code>ResourceArn</code> ARN and <code>ResourceType</code>.</p>
    pub fn resource(&self) -> ::std::option::Option<&crate::types::Resource> {
        self.resource.as_ref()
    }
    /// <p>The status of the operation event. The possible statuses are: <code>IN_PROGRESS</code>, <code>COMPLETED</code>, and <code>FAILED</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::OperationEventStatus> {
        self.status.as_ref()
    }
    /// <p>The status message relating to a specific operation event.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The timestamp of the specified operation event.</p>
    pub fn timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
}
impl OperationEvent {
    /// Creates a new builder-style object to manufacture [`OperationEvent`](crate::types::OperationEvent).
    pub fn builder() -> crate::types::builders::OperationEventBuilder {
        crate::types::builders::OperationEventBuilder::default()
    }
}

/// A builder for [`OperationEvent`](crate::types::OperationEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OperationEventBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) resource: ::std::option::Option<crate::types::Resource>,
    pub(crate) status: ::std::option::Option<crate::types::OperationEventStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl OperationEventBuilder {
    /// <p>A description of the operation event. For example, "Stop the EC2 instance i-abcdefgh987654321".</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the operation event. For example, "Stop the EC2 instance i-abcdefgh987654321".</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the operation event. For example, "Stop the EC2 instance i-abcdefgh987654321".</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The resource involved in the operations event.</p>
    /// <p>Contains <code>ResourceArn</code> ARN and <code>ResourceType</code>.</p>
    pub fn resource(mut self, input: crate::types::Resource) -> Self {
        self.resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>The resource involved in the operations event.</p>
    /// <p>Contains <code>ResourceArn</code> ARN and <code>ResourceType</code>.</p>
    pub fn set_resource(mut self, input: ::std::option::Option<crate::types::Resource>) -> Self {
        self.resource = input;
        self
    }
    /// <p>The resource involved in the operations event.</p>
    /// <p>Contains <code>ResourceArn</code> ARN and <code>ResourceType</code>.</p>
    pub fn get_resource(&self) -> &::std::option::Option<crate::types::Resource> {
        &self.resource
    }
    /// <p>The status of the operation event. The possible statuses are: <code>IN_PROGRESS</code>, <code>COMPLETED</code>, and <code>FAILED</code>.</p>
    pub fn status(mut self, input: crate::types::OperationEventStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the operation event. The possible statuses are: <code>IN_PROGRESS</code>, <code>COMPLETED</code>, and <code>FAILED</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::OperationEventStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the operation event. The possible statuses are: <code>IN_PROGRESS</code>, <code>COMPLETED</code>, and <code>FAILED</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::OperationEventStatus> {
        &self.status
    }
    /// <p>The status message relating to a specific operation event.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status message relating to a specific operation event.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The status message relating to a specific operation event.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>The timestamp of the specified operation event.</p>
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of the specified operation event.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The timestamp of the specified operation event.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// Consumes the builder and constructs a [`OperationEvent`](crate::types::OperationEvent).
    pub fn build(self) -> crate::types::OperationEvent {
        crate::types::OperationEvent {
            description: self.description,
            resource: self.resource,
            status: self.status,
            status_message: self.status_message,
            timestamp: self.timestamp,
        }
    }
}
