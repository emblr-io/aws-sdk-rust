// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This is information about the component of your SAP application, such as Web Dispatcher.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComponentInfo {
    /// <p>This string is the type of the component.</p>
    /// <p>Accepted value is <code>WD</code>.</p>
    pub component_type: crate::types::ComponentType,
    /// <p>This string is the SAP System ID of the component.</p>
    /// <p>Accepted values are alphanumeric.</p>
    pub sid: ::std::string::String,
    /// <p>This is the Amazon EC2 instance on which your SAP component is running.</p>
    /// <p>Accepted values are alphanumeric.</p>
    pub ec2_instance_id: ::std::string::String,
}
impl ComponentInfo {
    /// <p>This string is the type of the component.</p>
    /// <p>Accepted value is <code>WD</code>.</p>
    pub fn component_type(&self) -> &crate::types::ComponentType {
        &self.component_type
    }
    /// <p>This string is the SAP System ID of the component.</p>
    /// <p>Accepted values are alphanumeric.</p>
    pub fn sid(&self) -> &str {
        use std::ops::Deref;
        self.sid.deref()
    }
    /// <p>This is the Amazon EC2 instance on which your SAP component is running.</p>
    /// <p>Accepted values are alphanumeric.</p>
    pub fn ec2_instance_id(&self) -> &str {
        use std::ops::Deref;
        self.ec2_instance_id.deref()
    }
}
impl ComponentInfo {
    /// Creates a new builder-style object to manufacture [`ComponentInfo`](crate::types::ComponentInfo).
    pub fn builder() -> crate::types::builders::ComponentInfoBuilder {
        crate::types::builders::ComponentInfoBuilder::default()
    }
}

/// A builder for [`ComponentInfo`](crate::types::ComponentInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ComponentInfoBuilder {
    pub(crate) component_type: ::std::option::Option<crate::types::ComponentType>,
    pub(crate) sid: ::std::option::Option<::std::string::String>,
    pub(crate) ec2_instance_id: ::std::option::Option<::std::string::String>,
}
impl ComponentInfoBuilder {
    /// <p>This string is the type of the component.</p>
    /// <p>Accepted value is <code>WD</code>.</p>
    /// This field is required.
    pub fn component_type(mut self, input: crate::types::ComponentType) -> Self {
        self.component_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>This string is the type of the component.</p>
    /// <p>Accepted value is <code>WD</code>.</p>
    pub fn set_component_type(mut self, input: ::std::option::Option<crate::types::ComponentType>) -> Self {
        self.component_type = input;
        self
    }
    /// <p>This string is the type of the component.</p>
    /// <p>Accepted value is <code>WD</code>.</p>
    pub fn get_component_type(&self) -> &::std::option::Option<crate::types::ComponentType> {
        &self.component_type
    }
    /// <p>This string is the SAP System ID of the component.</p>
    /// <p>Accepted values are alphanumeric.</p>
    /// This field is required.
    pub fn sid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This string is the SAP System ID of the component.</p>
    /// <p>Accepted values are alphanumeric.</p>
    pub fn set_sid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sid = input;
        self
    }
    /// <p>This string is the SAP System ID of the component.</p>
    /// <p>Accepted values are alphanumeric.</p>
    pub fn get_sid(&self) -> &::std::option::Option<::std::string::String> {
        &self.sid
    }
    /// <p>This is the Amazon EC2 instance on which your SAP component is running.</p>
    /// <p>Accepted values are alphanumeric.</p>
    /// This field is required.
    pub fn ec2_instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ec2_instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This is the Amazon EC2 instance on which your SAP component is running.</p>
    /// <p>Accepted values are alphanumeric.</p>
    pub fn set_ec2_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ec2_instance_id = input;
        self
    }
    /// <p>This is the Amazon EC2 instance on which your SAP component is running.</p>
    /// <p>Accepted values are alphanumeric.</p>
    pub fn get_ec2_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ec2_instance_id
    }
    /// Consumes the builder and constructs a [`ComponentInfo`](crate::types::ComponentInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`component_type`](crate::types::builders::ComponentInfoBuilder::component_type)
    /// - [`sid`](crate::types::builders::ComponentInfoBuilder::sid)
    /// - [`ec2_instance_id`](crate::types::builders::ComponentInfoBuilder::ec2_instance_id)
    pub fn build(self) -> ::std::result::Result<crate::types::ComponentInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ComponentInfo {
            component_type: self.component_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "component_type",
                    "component_type was not specified but it is required when building ComponentInfo",
                )
            })?,
            sid: self.sid.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sid",
                    "sid was not specified but it is required when building ComponentInfo",
                )
            })?,
            ec2_instance_id: self.ec2_instance_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ec2_instance_id",
                    "ec2_instance_id was not specified but it is required when building ComponentInfo",
                )
            })?,
        })
    }
}
