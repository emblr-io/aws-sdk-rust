// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetAuthenticationUrlInput {
    /// <p>The sessionId provided in the authenticationInitiated event.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>The URL where the customer will be redirected after Amazon Cognito authorizes the user.</p>
    pub redirect_uri: ::std::option::Option<::std::string::String>,
    /// <p>The authentication token associated with the participant's connection.</p>
    pub connection_token: ::std::option::Option<::std::string::String>,
}
impl GetAuthenticationUrlInput {
    /// <p>The sessionId provided in the authenticationInitiated event.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>The URL where the customer will be redirected after Amazon Cognito authorizes the user.</p>
    pub fn redirect_uri(&self) -> ::std::option::Option<&str> {
        self.redirect_uri.as_deref()
    }
    /// <p>The authentication token associated with the participant's connection.</p>
    pub fn connection_token(&self) -> ::std::option::Option<&str> {
        self.connection_token.as_deref()
    }
}
impl GetAuthenticationUrlInput {
    /// Creates a new builder-style object to manufacture [`GetAuthenticationUrlInput`](crate::operation::get_authentication_url::GetAuthenticationUrlInput).
    pub fn builder() -> crate::operation::get_authentication_url::builders::GetAuthenticationUrlInputBuilder {
        crate::operation::get_authentication_url::builders::GetAuthenticationUrlInputBuilder::default()
    }
}

/// A builder for [`GetAuthenticationUrlInput`](crate::operation::get_authentication_url::GetAuthenticationUrlInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetAuthenticationUrlInputBuilder {
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) redirect_uri: ::std::option::Option<::std::string::String>,
    pub(crate) connection_token: ::std::option::Option<::std::string::String>,
}
impl GetAuthenticationUrlInputBuilder {
    /// <p>The sessionId provided in the authenticationInitiated event.</p>
    /// This field is required.
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The sessionId provided in the authenticationInitiated event.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The sessionId provided in the authenticationInitiated event.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>The URL where the customer will be redirected after Amazon Cognito authorizes the user.</p>
    /// This field is required.
    pub fn redirect_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.redirect_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL where the customer will be redirected after Amazon Cognito authorizes the user.</p>
    pub fn set_redirect_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.redirect_uri = input;
        self
    }
    /// <p>The URL where the customer will be redirected after Amazon Cognito authorizes the user.</p>
    pub fn get_redirect_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.redirect_uri
    }
    /// <p>The authentication token associated with the participant's connection.</p>
    /// This field is required.
    pub fn connection_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The authentication token associated with the participant's connection.</p>
    pub fn set_connection_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_token = input;
        self
    }
    /// <p>The authentication token associated with the participant's connection.</p>
    pub fn get_connection_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_token
    }
    /// Consumes the builder and constructs a [`GetAuthenticationUrlInput`](crate::operation::get_authentication_url::GetAuthenticationUrlInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_authentication_url::GetAuthenticationUrlInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_authentication_url::GetAuthenticationUrlInput {
            session_id: self.session_id,
            redirect_uri: self.redirect_uri,
            connection_token: self.connection_token,
        })
    }
}
