// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Retrieved collection of spans with matching trace IDs.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RetrievedTrace {
    /// <p>The unique identifier for the span.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The length of time in seconds between the start time of the root span and the end time of the last span that completed.</p>
    pub duration: ::std::option::Option<f64>,
    /// <p>Spans that comprise the trace.</p>
    pub spans: ::std::option::Option<::std::vec::Vec<crate::types::Span>>,
}
impl RetrievedTrace {
    /// <p>The unique identifier for the span.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The length of time in seconds between the start time of the root span and the end time of the last span that completed.</p>
    pub fn duration(&self) -> ::std::option::Option<f64> {
        self.duration
    }
    /// <p>Spans that comprise the trace.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.spans.is_none()`.
    pub fn spans(&self) -> &[crate::types::Span] {
        self.spans.as_deref().unwrap_or_default()
    }
}
impl RetrievedTrace {
    /// Creates a new builder-style object to manufacture [`RetrievedTrace`](crate::types::RetrievedTrace).
    pub fn builder() -> crate::types::builders::RetrievedTraceBuilder {
        crate::types::builders::RetrievedTraceBuilder::default()
    }
}

/// A builder for [`RetrievedTrace`](crate::types::RetrievedTrace).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RetrievedTraceBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) duration: ::std::option::Option<f64>,
    pub(crate) spans: ::std::option::Option<::std::vec::Vec<crate::types::Span>>,
}
impl RetrievedTraceBuilder {
    /// <p>The unique identifier for the span.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the span.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier for the span.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The length of time in seconds between the start time of the root span and the end time of the last span that completed.</p>
    pub fn duration(mut self, input: f64) -> Self {
        self.duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The length of time in seconds between the start time of the root span and the end time of the last span that completed.</p>
    pub fn set_duration(mut self, input: ::std::option::Option<f64>) -> Self {
        self.duration = input;
        self
    }
    /// <p>The length of time in seconds between the start time of the root span and the end time of the last span that completed.</p>
    pub fn get_duration(&self) -> &::std::option::Option<f64> {
        &self.duration
    }
    /// Appends an item to `spans`.
    ///
    /// To override the contents of this collection use [`set_spans`](Self::set_spans).
    ///
    /// <p>Spans that comprise the trace.</p>
    pub fn spans(mut self, input: crate::types::Span) -> Self {
        let mut v = self.spans.unwrap_or_default();
        v.push(input);
        self.spans = ::std::option::Option::Some(v);
        self
    }
    /// <p>Spans that comprise the trace.</p>
    pub fn set_spans(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Span>>) -> Self {
        self.spans = input;
        self
    }
    /// <p>Spans that comprise the trace.</p>
    pub fn get_spans(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Span>> {
        &self.spans
    }
    /// Consumes the builder and constructs a [`RetrievedTrace`](crate::types::RetrievedTrace).
    pub fn build(self) -> crate::types::RetrievedTrace {
        crate::types::RetrievedTrace {
            id: self.id,
            duration: self.duration,
            spans: self.spans,
        }
    }
}
