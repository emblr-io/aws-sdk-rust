// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Rule used to determine the server-side sampling rate for spans ingested through the CloudWatchLogs destination and indexed by X-Ray.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IndexingRule {
    /// <p>The name of the indexing rule.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Displays when the rule was last modified, in Unix time seconds.</p>
    pub modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The indexing rule.</p>
    pub rule: ::std::option::Option<crate::types::IndexingRuleValue>,
}
impl IndexingRule {
    /// <p>The name of the indexing rule.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Displays when the rule was last modified, in Unix time seconds.</p>
    pub fn modified_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.modified_at.as_ref()
    }
    /// <p>The indexing rule.</p>
    pub fn rule(&self) -> ::std::option::Option<&crate::types::IndexingRuleValue> {
        self.rule.as_ref()
    }
}
impl IndexingRule {
    /// Creates a new builder-style object to manufacture [`IndexingRule`](crate::types::IndexingRule).
    pub fn builder() -> crate::types::builders::IndexingRuleBuilder {
        crate::types::builders::IndexingRuleBuilder::default()
    }
}

/// A builder for [`IndexingRule`](crate::types::IndexingRule).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IndexingRuleBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) rule: ::std::option::Option<crate::types::IndexingRuleValue>,
}
impl IndexingRuleBuilder {
    /// <p>The name of the indexing rule.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the indexing rule.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the indexing rule.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Displays when the rule was last modified, in Unix time seconds.</p>
    pub fn modified_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modified_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>Displays when the rule was last modified, in Unix time seconds.</p>
    pub fn set_modified_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modified_at = input;
        self
    }
    /// <p>Displays when the rule was last modified, in Unix time seconds.</p>
    pub fn get_modified_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modified_at
    }
    /// <p>The indexing rule.</p>
    pub fn rule(mut self, input: crate::types::IndexingRuleValue) -> Self {
        self.rule = ::std::option::Option::Some(input);
        self
    }
    /// <p>The indexing rule.</p>
    pub fn set_rule(mut self, input: ::std::option::Option<crate::types::IndexingRuleValue>) -> Self {
        self.rule = input;
        self
    }
    /// <p>The indexing rule.</p>
    pub fn get_rule(&self) -> &::std::option::Option<crate::types::IndexingRuleValue> {
        &self.rule
    }
    /// Consumes the builder and constructs a [`IndexingRule`](crate::types::IndexingRule).
    pub fn build(self) -> crate::types::IndexingRule {
        crate::types::IndexingRule {
            name: self.name,
            modified_at: self.modified_at,
            rule: self.rule,
        }
    }
}
