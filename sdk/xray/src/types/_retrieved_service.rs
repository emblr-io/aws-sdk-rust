// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Retrieved information about an application that processed requests, users that made requests, or downstream services, resources, and applications that an application used.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RetrievedService {
    /// <p>Information about an application that processed requests, users that made requests, or downstream services, resources, and applications that an application used.</p>
    pub service: ::std::option::Option<crate::types::Service>,
    /// <p>Relation between two 2 services.</p>
    pub links: ::std::option::Option<::std::vec::Vec<crate::types::GraphLink>>,
}
impl RetrievedService {
    /// <p>Information about an application that processed requests, users that made requests, or downstream services, resources, and applications that an application used.</p>
    pub fn service(&self) -> ::std::option::Option<&crate::types::Service> {
        self.service.as_ref()
    }
    /// <p>Relation between two 2 services.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.links.is_none()`.
    pub fn links(&self) -> &[crate::types::GraphLink] {
        self.links.as_deref().unwrap_or_default()
    }
}
impl RetrievedService {
    /// Creates a new builder-style object to manufacture [`RetrievedService`](crate::types::RetrievedService).
    pub fn builder() -> crate::types::builders::RetrievedServiceBuilder {
        crate::types::builders::RetrievedServiceBuilder::default()
    }
}

/// A builder for [`RetrievedService`](crate::types::RetrievedService).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RetrievedServiceBuilder {
    pub(crate) service: ::std::option::Option<crate::types::Service>,
    pub(crate) links: ::std::option::Option<::std::vec::Vec<crate::types::GraphLink>>,
}
impl RetrievedServiceBuilder {
    /// <p>Information about an application that processed requests, users that made requests, or downstream services, resources, and applications that an application used.</p>
    pub fn service(mut self, input: crate::types::Service) -> Self {
        self.service = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about an application that processed requests, users that made requests, or downstream services, resources, and applications that an application used.</p>
    pub fn set_service(mut self, input: ::std::option::Option<crate::types::Service>) -> Self {
        self.service = input;
        self
    }
    /// <p>Information about an application that processed requests, users that made requests, or downstream services, resources, and applications that an application used.</p>
    pub fn get_service(&self) -> &::std::option::Option<crate::types::Service> {
        &self.service
    }
    /// Appends an item to `links`.
    ///
    /// To override the contents of this collection use [`set_links`](Self::set_links).
    ///
    /// <p>Relation between two 2 services.</p>
    pub fn links(mut self, input: crate::types::GraphLink) -> Self {
        let mut v = self.links.unwrap_or_default();
        v.push(input);
        self.links = ::std::option::Option::Some(v);
        self
    }
    /// <p>Relation between two 2 services.</p>
    pub fn set_links(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GraphLink>>) -> Self {
        self.links = input;
        self
    }
    /// <p>Relation between two 2 services.</p>
    pub fn get_links(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GraphLink>> {
        &self.links
    }
    /// Consumes the builder and constructs a [`RetrievedService`](crate::types::RetrievedService).
    pub fn build(self) -> crate::types::RetrievedService {
        crate::types::RetrievedService {
            service: self.service,
            links: self.links,
        }
    }
}
