// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Update to the indexing rule configuration for probabilistic sampling.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProbabilisticRuleValueUpdate {
    /// <p>Configured sampling percentage of traceIds. Note that sampling can be subject to limits to ensure completeness of data.</p>
    pub desired_sampling_percentage: f64,
}
impl ProbabilisticRuleValueUpdate {
    /// <p>Configured sampling percentage of traceIds. Note that sampling can be subject to limits to ensure completeness of data.</p>
    pub fn desired_sampling_percentage(&self) -> f64 {
        self.desired_sampling_percentage
    }
}
impl ProbabilisticRuleValueUpdate {
    /// Creates a new builder-style object to manufacture [`ProbabilisticRuleValueUpdate`](crate::types::ProbabilisticRuleValueUpdate).
    pub fn builder() -> crate::types::builders::ProbabilisticRuleValueUpdateBuilder {
        crate::types::builders::ProbabilisticRuleValueUpdateBuilder::default()
    }
}

/// A builder for [`ProbabilisticRuleValueUpdate`](crate::types::ProbabilisticRuleValueUpdate).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProbabilisticRuleValueUpdateBuilder {
    pub(crate) desired_sampling_percentage: ::std::option::Option<f64>,
}
impl ProbabilisticRuleValueUpdateBuilder {
    /// <p>Configured sampling percentage of traceIds. Note that sampling can be subject to limits to ensure completeness of data.</p>
    /// This field is required.
    pub fn desired_sampling_percentage(mut self, input: f64) -> Self {
        self.desired_sampling_percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configured sampling percentage of traceIds. Note that sampling can be subject to limits to ensure completeness of data.</p>
    pub fn set_desired_sampling_percentage(mut self, input: ::std::option::Option<f64>) -> Self {
        self.desired_sampling_percentage = input;
        self
    }
    /// <p>Configured sampling percentage of traceIds. Note that sampling can be subject to limits to ensure completeness of data.</p>
    pub fn get_desired_sampling_percentage(&self) -> &::std::option::Option<f64> {
        &self.desired_sampling_percentage
    }
    /// Consumes the builder and constructs a [`ProbabilisticRuleValueUpdate`](crate::types::ProbabilisticRuleValueUpdate).
    /// This method will fail if any of the following fields are not set:
    /// - [`desired_sampling_percentage`](crate::types::builders::ProbabilisticRuleValueUpdateBuilder::desired_sampling_percentage)
    pub fn build(self) -> ::std::result::Result<crate::types::ProbabilisticRuleValueUpdate, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ProbabilisticRuleValueUpdate {
            desired_sampling_percentage: self.desired_sampling_percentage.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "desired_sampling_percentage",
                    "desired_sampling_percentage was not specified but it is required when building ProbabilisticRuleValueUpdate",
                )
            })?,
        })
    }
}
