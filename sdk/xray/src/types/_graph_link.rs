// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The relation between two services.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GraphLink {
    /// <p>Relationship of a trace to the corresponding service.</p>
    pub reference_type: ::std::option::Option<::std::string::String>,
    /// <p>Source trace of a link relationship.</p>
    pub source_trace_id: ::std::option::Option<::std::string::String>,
    /// <p>Destination traces of a link relationship.</p>
    pub destination_trace_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl GraphLink {
    /// <p>Relationship of a trace to the corresponding service.</p>
    pub fn reference_type(&self) -> ::std::option::Option<&str> {
        self.reference_type.as_deref()
    }
    /// <p>Source trace of a link relationship.</p>
    pub fn source_trace_id(&self) -> ::std::option::Option<&str> {
        self.source_trace_id.as_deref()
    }
    /// <p>Destination traces of a link relationship.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destination_trace_ids.is_none()`.
    pub fn destination_trace_ids(&self) -> &[::std::string::String] {
        self.destination_trace_ids.as_deref().unwrap_or_default()
    }
}
impl GraphLink {
    /// Creates a new builder-style object to manufacture [`GraphLink`](crate::types::GraphLink).
    pub fn builder() -> crate::types::builders::GraphLinkBuilder {
        crate::types::builders::GraphLinkBuilder::default()
    }
}

/// A builder for [`GraphLink`](crate::types::GraphLink).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GraphLinkBuilder {
    pub(crate) reference_type: ::std::option::Option<::std::string::String>,
    pub(crate) source_trace_id: ::std::option::Option<::std::string::String>,
    pub(crate) destination_trace_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl GraphLinkBuilder {
    /// <p>Relationship of a trace to the corresponding service.</p>
    pub fn reference_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reference_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Relationship of a trace to the corresponding service.</p>
    pub fn set_reference_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reference_type = input;
        self
    }
    /// <p>Relationship of a trace to the corresponding service.</p>
    pub fn get_reference_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.reference_type
    }
    /// <p>Source trace of a link relationship.</p>
    pub fn source_trace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_trace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Source trace of a link relationship.</p>
    pub fn set_source_trace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_trace_id = input;
        self
    }
    /// <p>Source trace of a link relationship.</p>
    pub fn get_source_trace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_trace_id
    }
    /// Appends an item to `destination_trace_ids`.
    ///
    /// To override the contents of this collection use [`set_destination_trace_ids`](Self::set_destination_trace_ids).
    ///
    /// <p>Destination traces of a link relationship.</p>
    pub fn destination_trace_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.destination_trace_ids.unwrap_or_default();
        v.push(input.into());
        self.destination_trace_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>Destination traces of a link relationship.</p>
    pub fn set_destination_trace_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.destination_trace_ids = input;
        self
    }
    /// <p>Destination traces of a link relationship.</p>
    pub fn get_destination_trace_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.destination_trace_ids
    }
    /// Consumes the builder and constructs a [`GraphLink`](crate::types::GraphLink).
    pub fn build(self) -> crate::types::GraphLink {
        crate::types::GraphLink {
            reference_type: self.reference_type,
            source_trace_id: self.source_trace_id,
            destination_trace_ids: self.destination_trace_ids,
        }
    }
}
