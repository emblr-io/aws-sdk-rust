// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTraceSegmentDestinationOutput {
    /// <p>Retrieves the current destination.</p>
    pub destination: ::std::option::Option<crate::types::TraceSegmentDestination>,
    /// <p>Status of the retrieval.</p>
    pub status: ::std::option::Option<crate::types::TraceSegmentDestinationStatus>,
    _request_id: Option<String>,
}
impl GetTraceSegmentDestinationOutput {
    /// <p>Retrieves the current destination.</p>
    pub fn destination(&self) -> ::std::option::Option<&crate::types::TraceSegmentDestination> {
        self.destination.as_ref()
    }
    /// <p>Status of the retrieval.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::TraceSegmentDestinationStatus> {
        self.status.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetTraceSegmentDestinationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTraceSegmentDestinationOutput {
    /// Creates a new builder-style object to manufacture [`GetTraceSegmentDestinationOutput`](crate::operation::get_trace_segment_destination::GetTraceSegmentDestinationOutput).
    pub fn builder() -> crate::operation::get_trace_segment_destination::builders::GetTraceSegmentDestinationOutputBuilder {
        crate::operation::get_trace_segment_destination::builders::GetTraceSegmentDestinationOutputBuilder::default()
    }
}

/// A builder for [`GetTraceSegmentDestinationOutput`](crate::operation::get_trace_segment_destination::GetTraceSegmentDestinationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetTraceSegmentDestinationOutputBuilder {
    pub(crate) destination: ::std::option::Option<crate::types::TraceSegmentDestination>,
    pub(crate) status: ::std::option::Option<crate::types::TraceSegmentDestinationStatus>,
    _request_id: Option<String>,
}
impl GetTraceSegmentDestinationOutputBuilder {
    /// <p>Retrieves the current destination.</p>
    pub fn destination(mut self, input: crate::types::TraceSegmentDestination) -> Self {
        self.destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>Retrieves the current destination.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<crate::types::TraceSegmentDestination>) -> Self {
        self.destination = input;
        self
    }
    /// <p>Retrieves the current destination.</p>
    pub fn get_destination(&self) -> &::std::option::Option<crate::types::TraceSegmentDestination> {
        &self.destination
    }
    /// <p>Status of the retrieval.</p>
    pub fn status(mut self, input: crate::types::TraceSegmentDestinationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of the retrieval.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TraceSegmentDestinationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Status of the retrieval.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TraceSegmentDestinationStatus> {
        &self.status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetTraceSegmentDestinationOutput`](crate::operation::get_trace_segment_destination::GetTraceSegmentDestinationOutput).
    pub fn build(self) -> crate::operation::get_trace_segment_destination::GetTraceSegmentDestinationOutput {
        crate::operation::get_trace_segment_destination::GetTraceSegmentDestinationOutput {
            destination: self.destination,
            status: self.status,
            _request_id: self._request_id,
        }
    }
}
