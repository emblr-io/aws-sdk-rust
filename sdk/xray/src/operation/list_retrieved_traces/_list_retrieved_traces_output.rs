// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListRetrievedTracesOutput {
    /// <p>Status of the retrieval.</p>
    pub retrieval_status: ::std::option::Option<crate::types::RetrievalStatus>,
    /// <p>Format of the requested traces.</p>
    pub trace_format: ::std::option::Option<crate::types::TraceFormatType>,
    /// <p>Full traces for the specified requests.</p>
    pub traces: ::std::option::Option<::std::vec::Vec<crate::types::RetrievedTrace>>,
    /// <p>Specify the pagination token returned by a previous request to retrieve the next page of indexes.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListRetrievedTracesOutput {
    /// <p>Status of the retrieval.</p>
    pub fn retrieval_status(&self) -> ::std::option::Option<&crate::types::RetrievalStatus> {
        self.retrieval_status.as_ref()
    }
    /// <p>Format of the requested traces.</p>
    pub fn trace_format(&self) -> ::std::option::Option<&crate::types::TraceFormatType> {
        self.trace_format.as_ref()
    }
    /// <p>Full traces for the specified requests.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.traces.is_none()`.
    pub fn traces(&self) -> &[crate::types::RetrievedTrace] {
        self.traces.as_deref().unwrap_or_default()
    }
    /// <p>Specify the pagination token returned by a previous request to retrieve the next page of indexes.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListRetrievedTracesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListRetrievedTracesOutput {
    /// Creates a new builder-style object to manufacture [`ListRetrievedTracesOutput`](crate::operation::list_retrieved_traces::ListRetrievedTracesOutput).
    pub fn builder() -> crate::operation::list_retrieved_traces::builders::ListRetrievedTracesOutputBuilder {
        crate::operation::list_retrieved_traces::builders::ListRetrievedTracesOutputBuilder::default()
    }
}

/// A builder for [`ListRetrievedTracesOutput`](crate::operation::list_retrieved_traces::ListRetrievedTracesOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListRetrievedTracesOutputBuilder {
    pub(crate) retrieval_status: ::std::option::Option<crate::types::RetrievalStatus>,
    pub(crate) trace_format: ::std::option::Option<crate::types::TraceFormatType>,
    pub(crate) traces: ::std::option::Option<::std::vec::Vec<crate::types::RetrievedTrace>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListRetrievedTracesOutputBuilder {
    /// <p>Status of the retrieval.</p>
    pub fn retrieval_status(mut self, input: crate::types::RetrievalStatus) -> Self {
        self.retrieval_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of the retrieval.</p>
    pub fn set_retrieval_status(mut self, input: ::std::option::Option<crate::types::RetrievalStatus>) -> Self {
        self.retrieval_status = input;
        self
    }
    /// <p>Status of the retrieval.</p>
    pub fn get_retrieval_status(&self) -> &::std::option::Option<crate::types::RetrievalStatus> {
        &self.retrieval_status
    }
    /// <p>Format of the requested traces.</p>
    pub fn trace_format(mut self, input: crate::types::TraceFormatType) -> Self {
        self.trace_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>Format of the requested traces.</p>
    pub fn set_trace_format(mut self, input: ::std::option::Option<crate::types::TraceFormatType>) -> Self {
        self.trace_format = input;
        self
    }
    /// <p>Format of the requested traces.</p>
    pub fn get_trace_format(&self) -> &::std::option::Option<crate::types::TraceFormatType> {
        &self.trace_format
    }
    /// Appends an item to `traces`.
    ///
    /// To override the contents of this collection use [`set_traces`](Self::set_traces).
    ///
    /// <p>Full traces for the specified requests.</p>
    pub fn traces(mut self, input: crate::types::RetrievedTrace) -> Self {
        let mut v = self.traces.unwrap_or_default();
        v.push(input);
        self.traces = ::std::option::Option::Some(v);
        self
    }
    /// <p>Full traces for the specified requests.</p>
    pub fn set_traces(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RetrievedTrace>>) -> Self {
        self.traces = input;
        self
    }
    /// <p>Full traces for the specified requests.</p>
    pub fn get_traces(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RetrievedTrace>> {
        &self.traces
    }
    /// <p>Specify the pagination token returned by a previous request to retrieve the next page of indexes.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify the pagination token returned by a previous request to retrieve the next page of indexes.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Specify the pagination token returned by a previous request to retrieve the next page of indexes.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListRetrievedTracesOutput`](crate::operation::list_retrieved_traces::ListRetrievedTracesOutput).
    pub fn build(self) -> crate::operation::list_retrieved_traces::ListRetrievedTracesOutput {
        crate::operation::list_retrieved_traces::ListRetrievedTracesOutput {
            retrieval_status: self.retrieval_status,
            trace_format: self.trace_format,
            traces: self.traces,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
