// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An identifier for the <code>StartBatchJob</code> API to show that it is a restart operation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RestartBatchJobIdentifier {
    /// <p>The <code>executionId</code> from the <code>StartBatchJob</code> response when the job ran for the first time.</p>
    pub execution_id: ::std::string::String,
    /// <p>The step/procedure step information for a restart batch job operation.</p>
    pub job_step_restart_marker: ::std::option::Option<crate::types::JobStepRestartMarker>,
}
impl RestartBatchJobIdentifier {
    /// <p>The <code>executionId</code> from the <code>StartBatchJob</code> response when the job ran for the first time.</p>
    pub fn execution_id(&self) -> &str {
        use std::ops::Deref;
        self.execution_id.deref()
    }
    /// <p>The step/procedure step information for a restart batch job operation.</p>
    pub fn job_step_restart_marker(&self) -> ::std::option::Option<&crate::types::JobStepRestartMarker> {
        self.job_step_restart_marker.as_ref()
    }
}
impl RestartBatchJobIdentifier {
    /// Creates a new builder-style object to manufacture [`RestartBatchJobIdentifier`](crate::types::RestartBatchJobIdentifier).
    pub fn builder() -> crate::types::builders::RestartBatchJobIdentifierBuilder {
        crate::types::builders::RestartBatchJobIdentifierBuilder::default()
    }
}

/// A builder for [`RestartBatchJobIdentifier`](crate::types::RestartBatchJobIdentifier).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RestartBatchJobIdentifierBuilder {
    pub(crate) execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) job_step_restart_marker: ::std::option::Option<crate::types::JobStepRestartMarker>,
}
impl RestartBatchJobIdentifierBuilder {
    /// <p>The <code>executionId</code> from the <code>StartBatchJob</code> response when the job ran for the first time.</p>
    /// This field is required.
    pub fn execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>executionId</code> from the <code>StartBatchJob</code> response when the job ran for the first time.</p>
    pub fn set_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_id = input;
        self
    }
    /// <p>The <code>executionId</code> from the <code>StartBatchJob</code> response when the job ran for the first time.</p>
    pub fn get_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_id
    }
    /// <p>The step/procedure step information for a restart batch job operation.</p>
    /// This field is required.
    pub fn job_step_restart_marker(mut self, input: crate::types::JobStepRestartMarker) -> Self {
        self.job_step_restart_marker = ::std::option::Option::Some(input);
        self
    }
    /// <p>The step/procedure step information for a restart batch job operation.</p>
    pub fn set_job_step_restart_marker(mut self, input: ::std::option::Option<crate::types::JobStepRestartMarker>) -> Self {
        self.job_step_restart_marker = input;
        self
    }
    /// <p>The step/procedure step information for a restart batch job operation.</p>
    pub fn get_job_step_restart_marker(&self) -> &::std::option::Option<crate::types::JobStepRestartMarker> {
        &self.job_step_restart_marker
    }
    /// Consumes the builder and constructs a [`RestartBatchJobIdentifier`](crate::types::RestartBatchJobIdentifier).
    /// This method will fail if any of the following fields are not set:
    /// - [`execution_id`](crate::types::builders::RestartBatchJobIdentifierBuilder::execution_id)
    pub fn build(self) -> ::std::result::Result<crate::types::RestartBatchJobIdentifier, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RestartBatchJobIdentifier {
            execution_id: self.execution_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "execution_id",
                    "execution_id was not specified but it is required when building RestartBatchJobIdentifier",
                )
            })?,
            job_step_restart_marker: self.job_step_restart_marker,
        })
    }
}
