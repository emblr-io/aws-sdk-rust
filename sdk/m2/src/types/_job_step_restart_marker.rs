// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides step/procedure step information for a restart batch job operation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JobStepRestartMarker {
    /// <p>The step name that a batch job was restarted from.</p>
    pub from_step: ::std::string::String,
    /// <p>The procedure step name that a batch job was restarted from.</p>
    pub from_proc_step: ::std::option::Option<::std::string::String>,
    /// <p>The step name that a batch job was restarted to.</p>
    pub to_step: ::std::option::Option<::std::string::String>,
    /// <p>The procedure step name that a batch job was restarted to.</p>
    pub to_proc_step: ::std::option::Option<::std::string::String>,
    /// <p>Skip selected step and issue a restart from immediate successor step for an Amazon Web Services Blu Age application batch job.</p>
    pub step_checkpoint: ::std::option::Option<i32>,
    /// <p>The step-level checkpoint timestamp (creation or last modification) for an Amazon Web Services Blu Age application batch job.</p>
    pub skip: ::std::option::Option<bool>,
}
impl JobStepRestartMarker {
    /// <p>The step name that a batch job was restarted from.</p>
    pub fn from_step(&self) -> &str {
        use std::ops::Deref;
        self.from_step.deref()
    }
    /// <p>The procedure step name that a batch job was restarted from.</p>
    pub fn from_proc_step(&self) -> ::std::option::Option<&str> {
        self.from_proc_step.as_deref()
    }
    /// <p>The step name that a batch job was restarted to.</p>
    pub fn to_step(&self) -> ::std::option::Option<&str> {
        self.to_step.as_deref()
    }
    /// <p>The procedure step name that a batch job was restarted to.</p>
    pub fn to_proc_step(&self) -> ::std::option::Option<&str> {
        self.to_proc_step.as_deref()
    }
    /// <p>Skip selected step and issue a restart from immediate successor step for an Amazon Web Services Blu Age application batch job.</p>
    pub fn step_checkpoint(&self) -> ::std::option::Option<i32> {
        self.step_checkpoint
    }
    /// <p>The step-level checkpoint timestamp (creation or last modification) for an Amazon Web Services Blu Age application batch job.</p>
    pub fn skip(&self) -> ::std::option::Option<bool> {
        self.skip
    }
}
impl JobStepRestartMarker {
    /// Creates a new builder-style object to manufacture [`JobStepRestartMarker`](crate::types::JobStepRestartMarker).
    pub fn builder() -> crate::types::builders::JobStepRestartMarkerBuilder {
        crate::types::builders::JobStepRestartMarkerBuilder::default()
    }
}

/// A builder for [`JobStepRestartMarker`](crate::types::JobStepRestartMarker).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct JobStepRestartMarkerBuilder {
    pub(crate) from_step: ::std::option::Option<::std::string::String>,
    pub(crate) from_proc_step: ::std::option::Option<::std::string::String>,
    pub(crate) to_step: ::std::option::Option<::std::string::String>,
    pub(crate) to_proc_step: ::std::option::Option<::std::string::String>,
    pub(crate) step_checkpoint: ::std::option::Option<i32>,
    pub(crate) skip: ::std::option::Option<bool>,
}
impl JobStepRestartMarkerBuilder {
    /// <p>The step name that a batch job was restarted from.</p>
    /// This field is required.
    pub fn from_step(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.from_step = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The step name that a batch job was restarted from.</p>
    pub fn set_from_step(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.from_step = input;
        self
    }
    /// <p>The step name that a batch job was restarted from.</p>
    pub fn get_from_step(&self) -> &::std::option::Option<::std::string::String> {
        &self.from_step
    }
    /// <p>The procedure step name that a batch job was restarted from.</p>
    pub fn from_proc_step(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.from_proc_step = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The procedure step name that a batch job was restarted from.</p>
    pub fn set_from_proc_step(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.from_proc_step = input;
        self
    }
    /// <p>The procedure step name that a batch job was restarted from.</p>
    pub fn get_from_proc_step(&self) -> &::std::option::Option<::std::string::String> {
        &self.from_proc_step
    }
    /// <p>The step name that a batch job was restarted to.</p>
    pub fn to_step(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.to_step = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The step name that a batch job was restarted to.</p>
    pub fn set_to_step(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.to_step = input;
        self
    }
    /// <p>The step name that a batch job was restarted to.</p>
    pub fn get_to_step(&self) -> &::std::option::Option<::std::string::String> {
        &self.to_step
    }
    /// <p>The procedure step name that a batch job was restarted to.</p>
    pub fn to_proc_step(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.to_proc_step = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The procedure step name that a batch job was restarted to.</p>
    pub fn set_to_proc_step(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.to_proc_step = input;
        self
    }
    /// <p>The procedure step name that a batch job was restarted to.</p>
    pub fn get_to_proc_step(&self) -> &::std::option::Option<::std::string::String> {
        &self.to_proc_step
    }
    /// <p>Skip selected step and issue a restart from immediate successor step for an Amazon Web Services Blu Age application batch job.</p>
    pub fn step_checkpoint(mut self, input: i32) -> Self {
        self.step_checkpoint = ::std::option::Option::Some(input);
        self
    }
    /// <p>Skip selected step and issue a restart from immediate successor step for an Amazon Web Services Blu Age application batch job.</p>
    pub fn set_step_checkpoint(mut self, input: ::std::option::Option<i32>) -> Self {
        self.step_checkpoint = input;
        self
    }
    /// <p>Skip selected step and issue a restart from immediate successor step for an Amazon Web Services Blu Age application batch job.</p>
    pub fn get_step_checkpoint(&self) -> &::std::option::Option<i32> {
        &self.step_checkpoint
    }
    /// <p>The step-level checkpoint timestamp (creation or last modification) for an Amazon Web Services Blu Age application batch job.</p>
    pub fn skip(mut self, input: bool) -> Self {
        self.skip = ::std::option::Option::Some(input);
        self
    }
    /// <p>The step-level checkpoint timestamp (creation or last modification) for an Amazon Web Services Blu Age application batch job.</p>
    pub fn set_skip(mut self, input: ::std::option::Option<bool>) -> Self {
        self.skip = input;
        self
    }
    /// <p>The step-level checkpoint timestamp (creation or last modification) for an Amazon Web Services Blu Age application batch job.</p>
    pub fn get_skip(&self) -> &::std::option::Option<bool> {
        &self.skip
    }
    /// Consumes the builder and constructs a [`JobStepRestartMarker`](crate::types::JobStepRestartMarker).
    /// This method will fail if any of the following fields are not set:
    /// - [`from_step`](crate::types::builders::JobStepRestartMarkerBuilder::from_step)
    pub fn build(self) -> ::std::result::Result<crate::types::JobStepRestartMarker, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::JobStepRestartMarker {
            from_step: self.from_step.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "from_step",
                    "from_step was not specified but it is required when building JobStepRestartMarker",
                )
            })?,
            from_proc_step: self.from_proc_step,
            to_step: self.to_step,
            to_proc_step: self.to_proc_step,
            step_checkpoint: self.step_checkpoint,
            skip: self.skip,
        })
    }
}
