// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a summary of data set exports.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataSetExportSummary {
    /// <p>The total number of data set exports.</p>
    pub total: i32,
    /// <p>The number of data set exports that have succeeded.</p>
    pub succeeded: i32,
    /// <p>The number of data set exports that have failed.</p>
    pub failed: i32,
    /// <p>The number of data set exports that are pending.</p>
    pub pending: i32,
    /// <p>The number of data set exports that are in progress.</p>
    pub in_progress: i32,
}
impl DataSetExportSummary {
    /// <p>The total number of data set exports.</p>
    pub fn total(&self) -> i32 {
        self.total
    }
    /// <p>The number of data set exports that have succeeded.</p>
    pub fn succeeded(&self) -> i32 {
        self.succeeded
    }
    /// <p>The number of data set exports that have failed.</p>
    pub fn failed(&self) -> i32 {
        self.failed
    }
    /// <p>The number of data set exports that are pending.</p>
    pub fn pending(&self) -> i32 {
        self.pending
    }
    /// <p>The number of data set exports that are in progress.</p>
    pub fn in_progress(&self) -> i32 {
        self.in_progress
    }
}
impl DataSetExportSummary {
    /// Creates a new builder-style object to manufacture [`DataSetExportSummary`](crate::types::DataSetExportSummary).
    pub fn builder() -> crate::types::builders::DataSetExportSummaryBuilder {
        crate::types::builders::DataSetExportSummaryBuilder::default()
    }
}

/// A builder for [`DataSetExportSummary`](crate::types::DataSetExportSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataSetExportSummaryBuilder {
    pub(crate) total: ::std::option::Option<i32>,
    pub(crate) succeeded: ::std::option::Option<i32>,
    pub(crate) failed: ::std::option::Option<i32>,
    pub(crate) pending: ::std::option::Option<i32>,
    pub(crate) in_progress: ::std::option::Option<i32>,
}
impl DataSetExportSummaryBuilder {
    /// <p>The total number of data set exports.</p>
    /// This field is required.
    pub fn total(mut self, input: i32) -> Self {
        self.total = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of data set exports.</p>
    pub fn set_total(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total = input;
        self
    }
    /// <p>The total number of data set exports.</p>
    pub fn get_total(&self) -> &::std::option::Option<i32> {
        &self.total
    }
    /// <p>The number of data set exports that have succeeded.</p>
    /// This field is required.
    pub fn succeeded(mut self, input: i32) -> Self {
        self.succeeded = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of data set exports that have succeeded.</p>
    pub fn set_succeeded(mut self, input: ::std::option::Option<i32>) -> Self {
        self.succeeded = input;
        self
    }
    /// <p>The number of data set exports that have succeeded.</p>
    pub fn get_succeeded(&self) -> &::std::option::Option<i32> {
        &self.succeeded
    }
    /// <p>The number of data set exports that have failed.</p>
    /// This field is required.
    pub fn failed(mut self, input: i32) -> Self {
        self.failed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of data set exports that have failed.</p>
    pub fn set_failed(mut self, input: ::std::option::Option<i32>) -> Self {
        self.failed = input;
        self
    }
    /// <p>The number of data set exports that have failed.</p>
    pub fn get_failed(&self) -> &::std::option::Option<i32> {
        &self.failed
    }
    /// <p>The number of data set exports that are pending.</p>
    /// This field is required.
    pub fn pending(mut self, input: i32) -> Self {
        self.pending = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of data set exports that are pending.</p>
    pub fn set_pending(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pending = input;
        self
    }
    /// <p>The number of data set exports that are pending.</p>
    pub fn get_pending(&self) -> &::std::option::Option<i32> {
        &self.pending
    }
    /// <p>The number of data set exports that are in progress.</p>
    /// This field is required.
    pub fn in_progress(mut self, input: i32) -> Self {
        self.in_progress = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of data set exports that are in progress.</p>
    pub fn set_in_progress(mut self, input: ::std::option::Option<i32>) -> Self {
        self.in_progress = input;
        self
    }
    /// <p>The number of data set exports that are in progress.</p>
    pub fn get_in_progress(&self) -> &::std::option::Option<i32> {
        &self.in_progress
    }
    /// Consumes the builder and constructs a [`DataSetExportSummary`](crate::types::DataSetExportSummary).
    pub fn build(self) -> crate::types::DataSetExportSummary {
        crate::types::DataSetExportSummary {
            total: self.total.unwrap_or_default(),
            succeeded: self.succeeded.unwrap_or_default(),
            failed: self.failed.unwrap_or_default(),
            pending: self.pending.unwrap_or_default(),
            in_progress: self.in_progress.unwrap_or_default(),
        }
    }
}
