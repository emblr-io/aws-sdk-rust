// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateDataSetExportTaskInput {
    /// <p>The unique identifier of the application for which you want to export data sets.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The data set export task configuration.</p>
    pub export_config: ::std::option::Option<crate::types::DataSetExportConfig>,
    /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request to create a data set export. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of a customer managed key.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
}
impl CreateDataSetExportTaskInput {
    /// <p>The unique identifier of the application for which you want to export data sets.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The data set export task configuration.</p>
    pub fn export_config(&self) -> ::std::option::Option<&crate::types::DataSetExportConfig> {
        self.export_config.as_ref()
    }
    /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request to create a data set export. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The identifier of a customer managed key.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
}
impl CreateDataSetExportTaskInput {
    /// Creates a new builder-style object to manufacture [`CreateDataSetExportTaskInput`](crate::operation::create_data_set_export_task::CreateDataSetExportTaskInput).
    pub fn builder() -> crate::operation::create_data_set_export_task::builders::CreateDataSetExportTaskInputBuilder {
        crate::operation::create_data_set_export_task::builders::CreateDataSetExportTaskInputBuilder::default()
    }
}

/// A builder for [`CreateDataSetExportTaskInput`](crate::operation::create_data_set_export_task::CreateDataSetExportTaskInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateDataSetExportTaskInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) export_config: ::std::option::Option<crate::types::DataSetExportConfig>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
}
impl CreateDataSetExportTaskInputBuilder {
    /// <p>The unique identifier of the application for which you want to export data sets.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the application for which you want to export data sets.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier of the application for which you want to export data sets.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The data set export task configuration.</p>
    /// This field is required.
    pub fn export_config(mut self, input: crate::types::DataSetExportConfig) -> Self {
        self.export_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data set export task configuration.</p>
    pub fn set_export_config(mut self, input: ::std::option::Option<crate::types::DataSetExportConfig>) -> Self {
        self.export_config = input;
        self
    }
    /// <p>The data set export task configuration.</p>
    pub fn get_export_config(&self) -> &::std::option::Option<crate::types::DataSetExportConfig> {
        &self.export_config
    }
    /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request to create a data set export. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request to create a data set export. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request to create a data set export. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The identifier of a customer managed key.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of a customer managed key.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The identifier of a customer managed key.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// Consumes the builder and constructs a [`CreateDataSetExportTaskInput`](crate::operation::create_data_set_export_task::CreateDataSetExportTaskInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_data_set_export_task::CreateDataSetExportTaskInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_data_set_export_task::CreateDataSetExportTaskInput {
            application_id: self.application_id,
            export_config: self.export_config,
            client_token: self.client_token,
            kms_key_id: self.kms_key_id,
        })
    }
}
