// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Geometry {
    /// <p>An axis-aligned coarse representation of the location of the recognized item on the document page.</p>
    pub bounding_box: ::std::option::Option<crate::types::BoundingBox>,
    /// <p>Within the bounding box, a fine-grained polygon around the recognized item.</p>
    pub polygon: ::std::option::Option<::std::vec::Vec<crate::types::Point>>,
    /// <p>Provides a numerical value corresponding to the rotation of the text.</p>
    pub rotation_angle: ::std::option::Option<f32>,
}
impl Geometry {
    /// <p>An axis-aligned coarse representation of the location of the recognized item on the document page.</p>
    pub fn bounding_box(&self) -> ::std::option::Option<&crate::types::BoundingBox> {
        self.bounding_box.as_ref()
    }
    /// <p>Within the bounding box, a fine-grained polygon around the recognized item.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.polygon.is_none()`.
    pub fn polygon(&self) -> &[crate::types::Point] {
        self.polygon.as_deref().unwrap_or_default()
    }
    /// <p>Provides a numerical value corresponding to the rotation of the text.</p>
    pub fn rotation_angle(&self) -> ::std::option::Option<f32> {
        self.rotation_angle
    }
}
impl Geometry {
    /// Creates a new builder-style object to manufacture [`Geometry`](crate::types::Geometry).
    pub fn builder() -> crate::types::builders::GeometryBuilder {
        crate::types::builders::GeometryBuilder::default()
    }
}

/// A builder for [`Geometry`](crate::types::Geometry).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GeometryBuilder {
    pub(crate) bounding_box: ::std::option::Option<crate::types::BoundingBox>,
    pub(crate) polygon: ::std::option::Option<::std::vec::Vec<crate::types::Point>>,
    pub(crate) rotation_angle: ::std::option::Option<f32>,
}
impl GeometryBuilder {
    /// <p>An axis-aligned coarse representation of the location of the recognized item on the document page.</p>
    pub fn bounding_box(mut self, input: crate::types::BoundingBox) -> Self {
        self.bounding_box = ::std::option::Option::Some(input);
        self
    }
    /// <p>An axis-aligned coarse representation of the location of the recognized item on the document page.</p>
    pub fn set_bounding_box(mut self, input: ::std::option::Option<crate::types::BoundingBox>) -> Self {
        self.bounding_box = input;
        self
    }
    /// <p>An axis-aligned coarse representation of the location of the recognized item on the document page.</p>
    pub fn get_bounding_box(&self) -> &::std::option::Option<crate::types::BoundingBox> {
        &self.bounding_box
    }
    /// Appends an item to `polygon`.
    ///
    /// To override the contents of this collection use [`set_polygon`](Self::set_polygon).
    ///
    /// <p>Within the bounding box, a fine-grained polygon around the recognized item.</p>
    pub fn polygon(mut self, input: crate::types::Point) -> Self {
        let mut v = self.polygon.unwrap_or_default();
        v.push(input);
        self.polygon = ::std::option::Option::Some(v);
        self
    }
    /// <p>Within the bounding box, a fine-grained polygon around the recognized item.</p>
    pub fn set_polygon(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Point>>) -> Self {
        self.polygon = input;
        self
    }
    /// <p>Within the bounding box, a fine-grained polygon around the recognized item.</p>
    pub fn get_polygon(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Point>> {
        &self.polygon
    }
    /// <p>Provides a numerical value corresponding to the rotation of the text.</p>
    pub fn rotation_angle(mut self, input: f32) -> Self {
        self.rotation_angle = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides a numerical value corresponding to the rotation of the text.</p>
    pub fn set_rotation_angle(mut self, input: ::std::option::Option<f32>) -> Self {
        self.rotation_angle = input;
        self
    }
    /// <p>Provides a numerical value corresponding to the rotation of the text.</p>
    pub fn get_rotation_angle(&self) -> &::std::option::Option<f32> {
        &self.rotation_angle
    }
    /// Consumes the builder and constructs a [`Geometry`](crate::types::Geometry).
    pub fn build(self) -> crate::types::Geometry {
        crate::types::Geometry {
            bounding_box: self.bounding_box,
            polygon: self.polygon,
            rotation_angle: self.rotation_angle,
        }
    }
}
