// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The capacity reservation status for each Availability Zone.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ZonalCapacityReservationState {
    /// <p>The state of the capacity reservation.</p>
    pub state: ::std::option::Option<crate::types::CapacityReservationStatus>,
    /// <p>Information about the Availability Zone.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The number of effective capacity units.</p>
    pub effective_capacity_units: ::std::option::Option<f64>,
}
impl ZonalCapacityReservationState {
    /// <p>The state of the capacity reservation.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::CapacityReservationStatus> {
        self.state.as_ref()
    }
    /// <p>Information about the Availability Zone.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The number of effective capacity units.</p>
    pub fn effective_capacity_units(&self) -> ::std::option::Option<f64> {
        self.effective_capacity_units
    }
}
impl ZonalCapacityReservationState {
    /// Creates a new builder-style object to manufacture [`ZonalCapacityReservationState`](crate::types::ZonalCapacityReservationState).
    pub fn builder() -> crate::types::builders::ZonalCapacityReservationStateBuilder {
        crate::types::builders::ZonalCapacityReservationStateBuilder::default()
    }
}

/// A builder for [`ZonalCapacityReservationState`](crate::types::ZonalCapacityReservationState).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ZonalCapacityReservationStateBuilder {
    pub(crate) state: ::std::option::Option<crate::types::CapacityReservationStatus>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) effective_capacity_units: ::std::option::Option<f64>,
}
impl ZonalCapacityReservationStateBuilder {
    /// <p>The state of the capacity reservation.</p>
    pub fn state(mut self, input: crate::types::CapacityReservationStatus) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the capacity reservation.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::CapacityReservationStatus>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the capacity reservation.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::CapacityReservationStatus> {
        &self.state
    }
    /// <p>Information about the Availability Zone.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Information about the Availability Zone.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>Information about the Availability Zone.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The number of effective capacity units.</p>
    pub fn effective_capacity_units(mut self, input: f64) -> Self {
        self.effective_capacity_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of effective capacity units.</p>
    pub fn set_effective_capacity_units(mut self, input: ::std::option::Option<f64>) -> Self {
        self.effective_capacity_units = input;
        self
    }
    /// <p>The number of effective capacity units.</p>
    pub fn get_effective_capacity_units(&self) -> &::std::option::Option<f64> {
        &self.effective_capacity_units
    }
    /// Consumes the builder and constructs a [`ZonalCapacityReservationState`](crate::types::ZonalCapacityReservationState).
    pub fn build(self) -> crate::types::ZonalCapacityReservationState {
        crate::types::ZonalCapacityReservationState {
            state: self.state,
            availability_zone: self.availability_zone,
            effective_capacity_units: self.effective_capacity_units,
        }
    }
}
