// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the override status applied to a target.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AdministrativeOverride {
    /// <p>The state of the override.</p>
    pub state: ::std::option::Option<crate::types::TargetAdministrativeOverrideStateEnum>,
    /// <p>The reason code for the state.</p>
    pub reason: ::std::option::Option<crate::types::TargetAdministrativeOverrideReasonEnum>,
    /// <p>A description of the override state that provides additional details.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl AdministrativeOverride {
    /// <p>The state of the override.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::TargetAdministrativeOverrideStateEnum> {
        self.state.as_ref()
    }
    /// <p>The reason code for the state.</p>
    pub fn reason(&self) -> ::std::option::Option<&crate::types::TargetAdministrativeOverrideReasonEnum> {
        self.reason.as_ref()
    }
    /// <p>A description of the override state that provides additional details.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl AdministrativeOverride {
    /// Creates a new builder-style object to manufacture [`AdministrativeOverride`](crate::types::AdministrativeOverride).
    pub fn builder() -> crate::types::builders::AdministrativeOverrideBuilder {
        crate::types::builders::AdministrativeOverrideBuilder::default()
    }
}

/// A builder for [`AdministrativeOverride`](crate::types::AdministrativeOverride).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AdministrativeOverrideBuilder {
    pub(crate) state: ::std::option::Option<crate::types::TargetAdministrativeOverrideStateEnum>,
    pub(crate) reason: ::std::option::Option<crate::types::TargetAdministrativeOverrideReasonEnum>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl AdministrativeOverrideBuilder {
    /// <p>The state of the override.</p>
    pub fn state(mut self, input: crate::types::TargetAdministrativeOverrideStateEnum) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the override.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::TargetAdministrativeOverrideStateEnum>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the override.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::TargetAdministrativeOverrideStateEnum> {
        &self.state
    }
    /// <p>The reason code for the state.</p>
    pub fn reason(mut self, input: crate::types::TargetAdministrativeOverrideReasonEnum) -> Self {
        self.reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>The reason code for the state.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<crate::types::TargetAdministrativeOverrideReasonEnum>) -> Self {
        self.reason = input;
        self
    }
    /// <p>The reason code for the state.</p>
    pub fn get_reason(&self) -> &::std::option::Option<crate::types::TargetAdministrativeOverrideReasonEnum> {
        &self.reason
    }
    /// <p>A description of the override state that provides additional details.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the override state that provides additional details.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the override state that provides additional details.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`AdministrativeOverride`](crate::types::AdministrativeOverride).
    pub fn build(self) -> crate::types::AdministrativeOverride {
        crate::types::AdministrativeOverride {
            state: self.state,
            reason: self.reason,
            description: self.description,
        }
    }
}
