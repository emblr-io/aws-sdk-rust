// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The status of a capacity reservation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CapacityReservationStatus {
    /// <p>The status code.</p>
    pub code: ::std::option::Option<crate::types::CapacityReservationStateEnum>,
    /// <p>The reason code for the status.</p>
    pub reason: ::std::option::Option<::std::string::String>,
}
impl CapacityReservationStatus {
    /// <p>The status code.</p>
    pub fn code(&self) -> ::std::option::Option<&crate::types::CapacityReservationStateEnum> {
        self.code.as_ref()
    }
    /// <p>The reason code for the status.</p>
    pub fn reason(&self) -> ::std::option::Option<&str> {
        self.reason.as_deref()
    }
}
impl CapacityReservationStatus {
    /// Creates a new builder-style object to manufacture [`CapacityReservationStatus`](crate::types::CapacityReservationStatus).
    pub fn builder() -> crate::types::builders::CapacityReservationStatusBuilder {
        crate::types::builders::CapacityReservationStatusBuilder::default()
    }
}

/// A builder for [`CapacityReservationStatus`](crate::types::CapacityReservationStatus).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CapacityReservationStatusBuilder {
    pub(crate) code: ::std::option::Option<crate::types::CapacityReservationStateEnum>,
    pub(crate) reason: ::std::option::Option<::std::string::String>,
}
impl CapacityReservationStatusBuilder {
    /// <p>The status code.</p>
    pub fn code(mut self, input: crate::types::CapacityReservationStateEnum) -> Self {
        self.code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status code.</p>
    pub fn set_code(mut self, input: ::std::option::Option<crate::types::CapacityReservationStateEnum>) -> Self {
        self.code = input;
        self
    }
    /// <p>The status code.</p>
    pub fn get_code(&self) -> &::std::option::Option<crate::types::CapacityReservationStateEnum> {
        &self.code
    }
    /// <p>The reason code for the status.</p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason code for the status.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>The reason code for the status.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// Consumes the builder and constructs a [`CapacityReservationStatus`](crate::types::CapacityReservationStatus).
    pub fn build(self) -> crate::types::CapacityReservationStatus {
        crate::types::CapacityReservationStatus {
            code: self.code,
            reason: self.reason,
        }
    }
}
