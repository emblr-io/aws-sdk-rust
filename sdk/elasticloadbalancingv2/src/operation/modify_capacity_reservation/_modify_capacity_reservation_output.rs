// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModifyCapacityReservationOutput {
    /// <p>The last time the capacity reservation was modified.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The amount of daily capacity decreases remaining.</p>
    pub decrease_requests_remaining: ::std::option::Option<i32>,
    /// <p>The requested minimum capacity reservation for the load balancer</p>
    pub minimum_load_balancer_capacity: ::std::option::Option<crate::types::MinimumLoadBalancerCapacity>,
    /// <p>The state of the capacity reservation.</p>
    pub capacity_reservation_state: ::std::option::Option<::std::vec::Vec<crate::types::ZonalCapacityReservationState>>,
    _request_id: Option<String>,
}
impl ModifyCapacityReservationOutput {
    /// <p>The last time the capacity reservation was modified.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The amount of daily capacity decreases remaining.</p>
    pub fn decrease_requests_remaining(&self) -> ::std::option::Option<i32> {
        self.decrease_requests_remaining
    }
    /// <p>The requested minimum capacity reservation for the load balancer</p>
    pub fn minimum_load_balancer_capacity(&self) -> ::std::option::Option<&crate::types::MinimumLoadBalancerCapacity> {
        self.minimum_load_balancer_capacity.as_ref()
    }
    /// <p>The state of the capacity reservation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.capacity_reservation_state.is_none()`.
    pub fn capacity_reservation_state(&self) -> &[crate::types::ZonalCapacityReservationState] {
        self.capacity_reservation_state.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for ModifyCapacityReservationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ModifyCapacityReservationOutput {
    /// Creates a new builder-style object to manufacture [`ModifyCapacityReservationOutput`](crate::operation::modify_capacity_reservation::ModifyCapacityReservationOutput).
    pub fn builder() -> crate::operation::modify_capacity_reservation::builders::ModifyCapacityReservationOutputBuilder {
        crate::operation::modify_capacity_reservation::builders::ModifyCapacityReservationOutputBuilder::default()
    }
}

/// A builder for [`ModifyCapacityReservationOutput`](crate::operation::modify_capacity_reservation::ModifyCapacityReservationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ModifyCapacityReservationOutputBuilder {
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) decrease_requests_remaining: ::std::option::Option<i32>,
    pub(crate) minimum_load_balancer_capacity: ::std::option::Option<crate::types::MinimumLoadBalancerCapacity>,
    pub(crate) capacity_reservation_state: ::std::option::Option<::std::vec::Vec<crate::types::ZonalCapacityReservationState>>,
    _request_id: Option<String>,
}
impl ModifyCapacityReservationOutputBuilder {
    /// <p>The last time the capacity reservation was modified.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time the capacity reservation was modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The last time the capacity reservation was modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The amount of daily capacity decreases remaining.</p>
    pub fn decrease_requests_remaining(mut self, input: i32) -> Self {
        self.decrease_requests_remaining = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of daily capacity decreases remaining.</p>
    pub fn set_decrease_requests_remaining(mut self, input: ::std::option::Option<i32>) -> Self {
        self.decrease_requests_remaining = input;
        self
    }
    /// <p>The amount of daily capacity decreases remaining.</p>
    pub fn get_decrease_requests_remaining(&self) -> &::std::option::Option<i32> {
        &self.decrease_requests_remaining
    }
    /// <p>The requested minimum capacity reservation for the load balancer</p>
    pub fn minimum_load_balancer_capacity(mut self, input: crate::types::MinimumLoadBalancerCapacity) -> Self {
        self.minimum_load_balancer_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The requested minimum capacity reservation for the load balancer</p>
    pub fn set_minimum_load_balancer_capacity(mut self, input: ::std::option::Option<crate::types::MinimumLoadBalancerCapacity>) -> Self {
        self.minimum_load_balancer_capacity = input;
        self
    }
    /// <p>The requested minimum capacity reservation for the load balancer</p>
    pub fn get_minimum_load_balancer_capacity(&self) -> &::std::option::Option<crate::types::MinimumLoadBalancerCapacity> {
        &self.minimum_load_balancer_capacity
    }
    /// Appends an item to `capacity_reservation_state`.
    ///
    /// To override the contents of this collection use [`set_capacity_reservation_state`](Self::set_capacity_reservation_state).
    ///
    /// <p>The state of the capacity reservation.</p>
    pub fn capacity_reservation_state(mut self, input: crate::types::ZonalCapacityReservationState) -> Self {
        let mut v = self.capacity_reservation_state.unwrap_or_default();
        v.push(input);
        self.capacity_reservation_state = ::std::option::Option::Some(v);
        self
    }
    /// <p>The state of the capacity reservation.</p>
    pub fn set_capacity_reservation_state(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ZonalCapacityReservationState>>,
    ) -> Self {
        self.capacity_reservation_state = input;
        self
    }
    /// <p>The state of the capacity reservation.</p>
    pub fn get_capacity_reservation_state(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ZonalCapacityReservationState>> {
        &self.capacity_reservation_state
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ModifyCapacityReservationOutput`](crate::operation::modify_capacity_reservation::ModifyCapacityReservationOutput).
    pub fn build(self) -> crate::operation::modify_capacity_reservation::ModifyCapacityReservationOutput {
        crate::operation::modify_capacity_reservation::ModifyCapacityReservationOutput {
            last_modified_time: self.last_modified_time,
            decrease_requests_remaining: self.decrease_requests_remaining,
            minimum_load_balancer_capacity: self.minimum_load_balancer_capacity,
            capacity_reservation_state: self.capacity_reservation_state,
            _request_id: self._request_id,
        }
    }
}
