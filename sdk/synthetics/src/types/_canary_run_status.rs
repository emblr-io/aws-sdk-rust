// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains the status information about a canary run.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CanaryRunStatus {
    /// <p>The current state of the run.</p>
    pub state: ::std::option::Option<crate::types::CanaryRunState>,
    /// <p>If run of the canary failed, this field contains the reason for the error.</p>
    pub state_reason: ::std::option::Option<::std::string::String>,
    /// <p>If this value is <code>CANARY_FAILURE</code>, either the canary script failed or Synthetics ran into a fatal error when running the canary. For example, a canary timeout misconfiguration setting can cause the canary to timeout before Synthetics can evaluate its status.</p>
    /// <p>If this value is <code>EXECUTION_FAILURE</code>, a non-critical failure occurred such as failing to save generated debug artifacts (for example, screenshots or har files).</p>
    /// <p>If both types of failures occurred, the <code>CANARY_FAILURE</code> takes precedence. To understand the exact error, use the <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_CanaryRunStatus.html">StateReason</a> API.</p>
    pub state_reason_code: ::std::option::Option<crate::types::CanaryRunStateReasonCode>,
    /// <p>Specifies the status of canary script for this run. When Synthetics tries to determine the status but fails, the result is marked as <code>UNKNOWN</code>. For the overall status of canary run, see <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_CanaryRunStatus.html">State</a>.</p>
    pub test_result: ::std::option::Option<crate::types::CanaryRunTestResult>,
}
impl CanaryRunStatus {
    /// <p>The current state of the run.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::CanaryRunState> {
        self.state.as_ref()
    }
    /// <p>If run of the canary failed, this field contains the reason for the error.</p>
    pub fn state_reason(&self) -> ::std::option::Option<&str> {
        self.state_reason.as_deref()
    }
    /// <p>If this value is <code>CANARY_FAILURE</code>, either the canary script failed or Synthetics ran into a fatal error when running the canary. For example, a canary timeout misconfiguration setting can cause the canary to timeout before Synthetics can evaluate its status.</p>
    /// <p>If this value is <code>EXECUTION_FAILURE</code>, a non-critical failure occurred such as failing to save generated debug artifacts (for example, screenshots or har files).</p>
    /// <p>If both types of failures occurred, the <code>CANARY_FAILURE</code> takes precedence. To understand the exact error, use the <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_CanaryRunStatus.html">StateReason</a> API.</p>
    pub fn state_reason_code(&self) -> ::std::option::Option<&crate::types::CanaryRunStateReasonCode> {
        self.state_reason_code.as_ref()
    }
    /// <p>Specifies the status of canary script for this run. When Synthetics tries to determine the status but fails, the result is marked as <code>UNKNOWN</code>. For the overall status of canary run, see <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_CanaryRunStatus.html">State</a>.</p>
    pub fn test_result(&self) -> ::std::option::Option<&crate::types::CanaryRunTestResult> {
        self.test_result.as_ref()
    }
}
impl CanaryRunStatus {
    /// Creates a new builder-style object to manufacture [`CanaryRunStatus`](crate::types::CanaryRunStatus).
    pub fn builder() -> crate::types::builders::CanaryRunStatusBuilder {
        crate::types::builders::CanaryRunStatusBuilder::default()
    }
}

/// A builder for [`CanaryRunStatus`](crate::types::CanaryRunStatus).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CanaryRunStatusBuilder {
    pub(crate) state: ::std::option::Option<crate::types::CanaryRunState>,
    pub(crate) state_reason: ::std::option::Option<::std::string::String>,
    pub(crate) state_reason_code: ::std::option::Option<crate::types::CanaryRunStateReasonCode>,
    pub(crate) test_result: ::std::option::Option<crate::types::CanaryRunTestResult>,
}
impl CanaryRunStatusBuilder {
    /// <p>The current state of the run.</p>
    pub fn state(mut self, input: crate::types::CanaryRunState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the run.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::CanaryRunState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of the run.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::CanaryRunState> {
        &self.state
    }
    /// <p>If run of the canary failed, this field contains the reason for the error.</p>
    pub fn state_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If run of the canary failed, this field contains the reason for the error.</p>
    pub fn set_state_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_reason = input;
        self
    }
    /// <p>If run of the canary failed, this field contains the reason for the error.</p>
    pub fn get_state_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_reason
    }
    /// <p>If this value is <code>CANARY_FAILURE</code>, either the canary script failed or Synthetics ran into a fatal error when running the canary. For example, a canary timeout misconfiguration setting can cause the canary to timeout before Synthetics can evaluate its status.</p>
    /// <p>If this value is <code>EXECUTION_FAILURE</code>, a non-critical failure occurred such as failing to save generated debug artifacts (for example, screenshots or har files).</p>
    /// <p>If both types of failures occurred, the <code>CANARY_FAILURE</code> takes precedence. To understand the exact error, use the <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_CanaryRunStatus.html">StateReason</a> API.</p>
    pub fn state_reason_code(mut self, input: crate::types::CanaryRunStateReasonCode) -> Self {
        self.state_reason_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>If this value is <code>CANARY_FAILURE</code>, either the canary script failed or Synthetics ran into a fatal error when running the canary. For example, a canary timeout misconfiguration setting can cause the canary to timeout before Synthetics can evaluate its status.</p>
    /// <p>If this value is <code>EXECUTION_FAILURE</code>, a non-critical failure occurred such as failing to save generated debug artifacts (for example, screenshots or har files).</p>
    /// <p>If both types of failures occurred, the <code>CANARY_FAILURE</code> takes precedence. To understand the exact error, use the <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_CanaryRunStatus.html">StateReason</a> API.</p>
    pub fn set_state_reason_code(mut self, input: ::std::option::Option<crate::types::CanaryRunStateReasonCode>) -> Self {
        self.state_reason_code = input;
        self
    }
    /// <p>If this value is <code>CANARY_FAILURE</code>, either the canary script failed or Synthetics ran into a fatal error when running the canary. For example, a canary timeout misconfiguration setting can cause the canary to timeout before Synthetics can evaluate its status.</p>
    /// <p>If this value is <code>EXECUTION_FAILURE</code>, a non-critical failure occurred such as failing to save generated debug artifacts (for example, screenshots or har files).</p>
    /// <p>If both types of failures occurred, the <code>CANARY_FAILURE</code> takes precedence. To understand the exact error, use the <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_CanaryRunStatus.html">StateReason</a> API.</p>
    pub fn get_state_reason_code(&self) -> &::std::option::Option<crate::types::CanaryRunStateReasonCode> {
        &self.state_reason_code
    }
    /// <p>Specifies the status of canary script for this run. When Synthetics tries to determine the status but fails, the result is marked as <code>UNKNOWN</code>. For the overall status of canary run, see <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_CanaryRunStatus.html">State</a>.</p>
    pub fn test_result(mut self, input: crate::types::CanaryRunTestResult) -> Self {
        self.test_result = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the status of canary script for this run. When Synthetics tries to determine the status but fails, the result is marked as <code>UNKNOWN</code>. For the overall status of canary run, see <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_CanaryRunStatus.html">State</a>.</p>
    pub fn set_test_result(mut self, input: ::std::option::Option<crate::types::CanaryRunTestResult>) -> Self {
        self.test_result = input;
        self
    }
    /// <p>Specifies the status of canary script for this run. When Synthetics tries to determine the status but fails, the result is marked as <code>UNKNOWN</code>. For the overall status of canary run, see <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_CanaryRunStatus.html">State</a>.</p>
    pub fn get_test_result(&self) -> &::std::option::Option<crate::types::CanaryRunTestResult> {
        &self.test_result
    }
    /// Consumes the builder and constructs a [`CanaryRunStatus`](crate::types::CanaryRunStatus).
    pub fn build(self) -> crate::types::CanaryRunStatus {
        crate::types::CanaryRunStatus {
            state: self.state,
            state_reason: self.state_reason,
            state_reason_code: self.state_reason_code,
            test_result: self.test_result,
        }
    }
}
