// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains information about the canary's retry configuration.</p><note>
/// <p>The default account level concurrent execution limit from Lambda is 1000. When you have more than 1000 canaries, it's possible there are more than 1000 Lambda invocations due to retries and the console might hang. For more information on the Lambda execution limit, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-concurrency.html#:~:text=As%20your%20functions%20receive%20more,functions%20in%20an%20AWS%20Region">Understanding Lambda function scaling</a>.</p>
/// </note> <note>
/// <p>For canary with <code>MaxRetries = 2</code>, you need to set the <code>CanaryRunConfigInput.TimeoutInSeconds</code> to less than 600 seconds to avoid validation errors.</p>
/// </note>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RetryConfigInput {
    /// <p>The maximum number of retries. The value must be less than or equal to 2.</p>
    pub max_retries: i32,
}
impl RetryConfigInput {
    /// <p>The maximum number of retries. The value must be less than or equal to 2.</p>
    pub fn max_retries(&self) -> i32 {
        self.max_retries
    }
}
impl RetryConfigInput {
    /// Creates a new builder-style object to manufacture [`RetryConfigInput`](crate::types::RetryConfigInput).
    pub fn builder() -> crate::types::builders::RetryConfigInputBuilder {
        crate::types::builders::RetryConfigInputBuilder::default()
    }
}

/// A builder for [`RetryConfigInput`](crate::types::RetryConfigInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RetryConfigInputBuilder {
    pub(crate) max_retries: ::std::option::Option<i32>,
}
impl RetryConfigInputBuilder {
    /// <p>The maximum number of retries. The value must be less than or equal to 2.</p>
    /// This field is required.
    pub fn max_retries(mut self, input: i32) -> Self {
        self.max_retries = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of retries. The value must be less than or equal to 2.</p>
    pub fn set_max_retries(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_retries = input;
        self
    }
    /// <p>The maximum number of retries. The value must be less than or equal to 2.</p>
    pub fn get_max_retries(&self) -> &::std::option::Option<i32> {
        &self.max_retries
    }
    /// Consumes the builder and constructs a [`RetryConfigInput`](crate::types::RetryConfigInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`max_retries`](crate::types::builders::RetryConfigInputBuilder::max_retries)
    pub fn build(self) -> ::std::result::Result<crate::types::RetryConfigInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RetryConfigInput {
            max_retries: self.max_retries.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "max_retries",
                    "max_retries was not specified but it is required when building RetryConfigInput",
                )
            })?,
        })
    }
}
