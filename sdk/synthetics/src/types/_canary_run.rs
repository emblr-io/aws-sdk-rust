// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains the details about one run of one canary.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CanaryRun {
    /// <p>A unique ID that identifies this canary run.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the scheduled canary run.</p>
    pub scheduled_run_id: ::std::option::Option<::std::string::String>,
    /// <p>The count in number of the retry attempt.</p>
    pub retry_attempt: ::std::option::Option<i32>,
    /// <p>The name of the canary.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The status of this run.</p>
    pub status: ::std::option::Option<crate::types::CanaryRunStatus>,
    /// <p>A structure that contains the start and end times of this run.</p>
    pub timeline: ::std::option::Option<crate::types::CanaryRunTimeline>,
    /// <p>The location where the canary stored artifacts from the run. Artifacts include the log file, screenshots, and HAR files.</p>
    pub artifact_s3_location: ::std::option::Option<::std::string::String>,
    /// <p>Returns the dry run configurations for a canary.</p>
    pub dry_run_config: ::std::option::Option<crate::types::CanaryDryRunConfigOutput>,
}
impl CanaryRun {
    /// <p>A unique ID that identifies this canary run.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ID of the scheduled canary run.</p>
    pub fn scheduled_run_id(&self) -> ::std::option::Option<&str> {
        self.scheduled_run_id.as_deref()
    }
    /// <p>The count in number of the retry attempt.</p>
    pub fn retry_attempt(&self) -> ::std::option::Option<i32> {
        self.retry_attempt
    }
    /// <p>The name of the canary.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The status of this run.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::CanaryRunStatus> {
        self.status.as_ref()
    }
    /// <p>A structure that contains the start and end times of this run.</p>
    pub fn timeline(&self) -> ::std::option::Option<&crate::types::CanaryRunTimeline> {
        self.timeline.as_ref()
    }
    /// <p>The location where the canary stored artifacts from the run. Artifacts include the log file, screenshots, and HAR files.</p>
    pub fn artifact_s3_location(&self) -> ::std::option::Option<&str> {
        self.artifact_s3_location.as_deref()
    }
    /// <p>Returns the dry run configurations for a canary.</p>
    pub fn dry_run_config(&self) -> ::std::option::Option<&crate::types::CanaryDryRunConfigOutput> {
        self.dry_run_config.as_ref()
    }
}
impl CanaryRun {
    /// Creates a new builder-style object to manufacture [`CanaryRun`](crate::types::CanaryRun).
    pub fn builder() -> crate::types::builders::CanaryRunBuilder {
        crate::types::builders::CanaryRunBuilder::default()
    }
}

/// A builder for [`CanaryRun`](crate::types::CanaryRun).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CanaryRunBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) scheduled_run_id: ::std::option::Option<::std::string::String>,
    pub(crate) retry_attempt: ::std::option::Option<i32>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::CanaryRunStatus>,
    pub(crate) timeline: ::std::option::Option<crate::types::CanaryRunTimeline>,
    pub(crate) artifact_s3_location: ::std::option::Option<::std::string::String>,
    pub(crate) dry_run_config: ::std::option::Option<crate::types::CanaryDryRunConfigOutput>,
}
impl CanaryRunBuilder {
    /// <p>A unique ID that identifies this canary run.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique ID that identifies this canary run.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>A unique ID that identifies this canary run.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ID of the scheduled canary run.</p>
    pub fn scheduled_run_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scheduled_run_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the scheduled canary run.</p>
    pub fn set_scheduled_run_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scheduled_run_id = input;
        self
    }
    /// <p>The ID of the scheduled canary run.</p>
    pub fn get_scheduled_run_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.scheduled_run_id
    }
    /// <p>The count in number of the retry attempt.</p>
    pub fn retry_attempt(mut self, input: i32) -> Self {
        self.retry_attempt = ::std::option::Option::Some(input);
        self
    }
    /// <p>The count in number of the retry attempt.</p>
    pub fn set_retry_attempt(mut self, input: ::std::option::Option<i32>) -> Self {
        self.retry_attempt = input;
        self
    }
    /// <p>The count in number of the retry attempt.</p>
    pub fn get_retry_attempt(&self) -> &::std::option::Option<i32> {
        &self.retry_attempt
    }
    /// <p>The name of the canary.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the canary.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the canary.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The status of this run.</p>
    pub fn status(mut self, input: crate::types::CanaryRunStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of this run.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::CanaryRunStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of this run.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::CanaryRunStatus> {
        &self.status
    }
    /// <p>A structure that contains the start and end times of this run.</p>
    pub fn timeline(mut self, input: crate::types::CanaryRunTimeline) -> Self {
        self.timeline = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that contains the start and end times of this run.</p>
    pub fn set_timeline(mut self, input: ::std::option::Option<crate::types::CanaryRunTimeline>) -> Self {
        self.timeline = input;
        self
    }
    /// <p>A structure that contains the start and end times of this run.</p>
    pub fn get_timeline(&self) -> &::std::option::Option<crate::types::CanaryRunTimeline> {
        &self.timeline
    }
    /// <p>The location where the canary stored artifacts from the run. Artifacts include the log file, screenshots, and HAR files.</p>
    pub fn artifact_s3_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.artifact_s3_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The location where the canary stored artifacts from the run. Artifacts include the log file, screenshots, and HAR files.</p>
    pub fn set_artifact_s3_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.artifact_s3_location = input;
        self
    }
    /// <p>The location where the canary stored artifacts from the run. Artifacts include the log file, screenshots, and HAR files.</p>
    pub fn get_artifact_s3_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.artifact_s3_location
    }
    /// <p>Returns the dry run configurations for a canary.</p>
    pub fn dry_run_config(mut self, input: crate::types::CanaryDryRunConfigOutput) -> Self {
        self.dry_run_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns the dry run configurations for a canary.</p>
    pub fn set_dry_run_config(mut self, input: ::std::option::Option<crate::types::CanaryDryRunConfigOutput>) -> Self {
        self.dry_run_config = input;
        self
    }
    /// <p>Returns the dry run configurations for a canary.</p>
    pub fn get_dry_run_config(&self) -> &::std::option::Option<crate::types::CanaryDryRunConfigOutput> {
        &self.dry_run_config
    }
    /// Consumes the builder and constructs a [`CanaryRun`](crate::types::CanaryRun).
    pub fn build(self) -> crate::types::CanaryRun {
        crate::types::CanaryRun {
            id: self.id,
            scheduled_run_id: self.scheduled_run_id,
            retry_attempt: self.retry_attempt,
            name: self.name,
            status: self.status,
            timeline: self.timeline,
            artifact_s3_location: self.artifact_s3_location,
            dry_run_config: self.dry_run_config,
        }
    }
}
