// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetCanaryRunsInput {
    /// <p>The name of the canary that you want to see runs for.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>GetCanaryRuns</code> operation to retrieve the next set of results.</p><note>
    /// <p>When auto retry is enabled for the canary, the first subsequent retry is suffixed with *1 indicating its the first retry and the next subsequent try is suffixed with *2.</p>
    /// </note>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Specify this parameter to limit how many runs are returned each time you use the <code>GetCanaryRuns</code> operation. If you omit this parameter, the default of 100 is used.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The DryRunId associated with an existing canary’s dry run. You can use this DryRunId to retrieve information about the dry run.</p>
    pub dry_run_id: ::std::option::Option<::std::string::String>,
    /// <ul>
    /// <li>
    /// <p>When you provide <code>RunType=CANARY_RUN</code> and <code>dryRunId</code>, you will get an exception</p></li>
    /// <li>
    /// <p>When a value is not provided for <code>RunType</code>, the default value is <code>CANARY_RUN</code></p></li>
    /// <li>
    /// <p>When <code>CANARY_RUN</code> is provided, all canary runs excluding dry runs are returned</p></li>
    /// <li>
    /// <p>When <code>DRY_RUN</code> is provided, all dry runs excluding canary runs are returned</p></li>
    /// </ul>
    pub run_type: ::std::option::Option<crate::types::RunType>,
}
impl GetCanaryRunsInput {
    /// <p>The name of the canary that you want to see runs for.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>GetCanaryRuns</code> operation to retrieve the next set of results.</p><note>
    /// <p>When auto retry is enabled for the canary, the first subsequent retry is suffixed with *1 indicating its the first retry and the next subsequent try is suffixed with *2.</p>
    /// </note>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Specify this parameter to limit how many runs are returned each time you use the <code>GetCanaryRuns</code> operation. If you omit this parameter, the default of 100 is used.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The DryRunId associated with an existing canary’s dry run. You can use this DryRunId to retrieve information about the dry run.</p>
    pub fn dry_run_id(&self) -> ::std::option::Option<&str> {
        self.dry_run_id.as_deref()
    }
    /// <ul>
    /// <li>
    /// <p>When you provide <code>RunType=CANARY_RUN</code> and <code>dryRunId</code>, you will get an exception</p></li>
    /// <li>
    /// <p>When a value is not provided for <code>RunType</code>, the default value is <code>CANARY_RUN</code></p></li>
    /// <li>
    /// <p>When <code>CANARY_RUN</code> is provided, all canary runs excluding dry runs are returned</p></li>
    /// <li>
    /// <p>When <code>DRY_RUN</code> is provided, all dry runs excluding canary runs are returned</p></li>
    /// </ul>
    pub fn run_type(&self) -> ::std::option::Option<&crate::types::RunType> {
        self.run_type.as_ref()
    }
}
impl GetCanaryRunsInput {
    /// Creates a new builder-style object to manufacture [`GetCanaryRunsInput`](crate::operation::get_canary_runs::GetCanaryRunsInput).
    pub fn builder() -> crate::operation::get_canary_runs::builders::GetCanaryRunsInputBuilder {
        crate::operation::get_canary_runs::builders::GetCanaryRunsInputBuilder::default()
    }
}

/// A builder for [`GetCanaryRunsInput`](crate::operation::get_canary_runs::GetCanaryRunsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetCanaryRunsInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) dry_run_id: ::std::option::Option<::std::string::String>,
    pub(crate) run_type: ::std::option::Option<crate::types::RunType>,
}
impl GetCanaryRunsInputBuilder {
    /// <p>The name of the canary that you want to see runs for.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the canary that you want to see runs for.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the canary that you want to see runs for.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>GetCanaryRuns</code> operation to retrieve the next set of results.</p><note>
    /// <p>When auto retry is enabled for the canary, the first subsequent retry is suffixed with *1 indicating its the first retry and the next subsequent try is suffixed with *2.</p>
    /// </note>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>GetCanaryRuns</code> operation to retrieve the next set of results.</p><note>
    /// <p>When auto retry is enabled for the canary, the first subsequent retry is suffixed with *1 indicating its the first retry and the next subsequent try is suffixed with *2.</p>
    /// </note>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token that indicates that there is more data available. You can use this token in a subsequent <code>GetCanaryRuns</code> operation to retrieve the next set of results.</p><note>
    /// <p>When auto retry is enabled for the canary, the first subsequent retry is suffixed with *1 indicating its the first retry and the next subsequent try is suffixed with *2.</p>
    /// </note>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>Specify this parameter to limit how many runs are returned each time you use the <code>GetCanaryRuns</code> operation. If you omit this parameter, the default of 100 is used.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify this parameter to limit how many runs are returned each time you use the <code>GetCanaryRuns</code> operation. If you omit this parameter, the default of 100 is used.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Specify this parameter to limit how many runs are returned each time you use the <code>GetCanaryRuns</code> operation. If you omit this parameter, the default of 100 is used.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The DryRunId associated with an existing canary’s dry run. You can use this DryRunId to retrieve information about the dry run.</p>
    pub fn dry_run_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dry_run_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DryRunId associated with an existing canary’s dry run. You can use this DryRunId to retrieve information about the dry run.</p>
    pub fn set_dry_run_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dry_run_id = input;
        self
    }
    /// <p>The DryRunId associated with an existing canary’s dry run. You can use this DryRunId to retrieve information about the dry run.</p>
    pub fn get_dry_run_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.dry_run_id
    }
    /// <ul>
    /// <li>
    /// <p>When you provide <code>RunType=CANARY_RUN</code> and <code>dryRunId</code>, you will get an exception</p></li>
    /// <li>
    /// <p>When a value is not provided for <code>RunType</code>, the default value is <code>CANARY_RUN</code></p></li>
    /// <li>
    /// <p>When <code>CANARY_RUN</code> is provided, all canary runs excluding dry runs are returned</p></li>
    /// <li>
    /// <p>When <code>DRY_RUN</code> is provided, all dry runs excluding canary runs are returned</p></li>
    /// </ul>
    pub fn run_type(mut self, input: crate::types::RunType) -> Self {
        self.run_type = ::std::option::Option::Some(input);
        self
    }
    /// <ul>
    /// <li>
    /// <p>When you provide <code>RunType=CANARY_RUN</code> and <code>dryRunId</code>, you will get an exception</p></li>
    /// <li>
    /// <p>When a value is not provided for <code>RunType</code>, the default value is <code>CANARY_RUN</code></p></li>
    /// <li>
    /// <p>When <code>CANARY_RUN</code> is provided, all canary runs excluding dry runs are returned</p></li>
    /// <li>
    /// <p>When <code>DRY_RUN</code> is provided, all dry runs excluding canary runs are returned</p></li>
    /// </ul>
    pub fn set_run_type(mut self, input: ::std::option::Option<crate::types::RunType>) -> Self {
        self.run_type = input;
        self
    }
    /// <ul>
    /// <li>
    /// <p>When you provide <code>RunType=CANARY_RUN</code> and <code>dryRunId</code>, you will get an exception</p></li>
    /// <li>
    /// <p>When a value is not provided for <code>RunType</code>, the default value is <code>CANARY_RUN</code></p></li>
    /// <li>
    /// <p>When <code>CANARY_RUN</code> is provided, all canary runs excluding dry runs are returned</p></li>
    /// <li>
    /// <p>When <code>DRY_RUN</code> is provided, all dry runs excluding canary runs are returned</p></li>
    /// </ul>
    pub fn get_run_type(&self) -> &::std::option::Option<crate::types::RunType> {
        &self.run_type
    }
    /// Consumes the builder and constructs a [`GetCanaryRunsInput`](crate::operation::get_canary_runs::GetCanaryRunsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_canary_runs::GetCanaryRunsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_canary_runs::GetCanaryRunsInput {
            name: self.name,
            next_token: self.next_token,
            max_results: self.max_results,
            dry_run_id: self.dry_run_id,
            run_type: self.run_type,
        })
    }
}
