// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a specific managed node.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct InstanceInfo {
    /// <p>The type of agent installed on the node.</p>
    pub agent_type: ::std::option::Option<::std::string::String>,
    /// <p>The version number of the agent installed on the node.</p>
    pub agent_version: ::std::option::Option<::std::string::String>,
    /// <p>The fully qualified host name of the managed node.</p>
    pub computer_name: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the managed node.</p>
    pub instance_status: ::std::option::Option<::std::string::String>,
    /// <p>The IP address of the managed node.</p>
    pub ip_address: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the node is managed by Systems Manager.</p>
    pub managed_status: ::std::option::Option<crate::types::ManagedStatus>,
    /// <p>The operating system platform type of the managed node.</p>
    pub platform_type: ::std::option::Option<crate::types::PlatformType>,
    /// <p>The name of the operating system platform running on your managed node.</p>
    pub platform_name: ::std::option::Option<::std::string::String>,
    /// <p>The version of the OS platform running on your managed node.</p>
    pub platform_version: ::std::option::Option<::std::string::String>,
    /// <p>The type of instance, either an EC2 instance or another supported machine type in a hybrid fleet.</p>
    pub resource_type: ::std::option::Option<crate::types::ResourceType>,
}
impl InstanceInfo {
    /// <p>The type of agent installed on the node.</p>
    pub fn agent_type(&self) -> ::std::option::Option<&str> {
        self.agent_type.as_deref()
    }
    /// <p>The version number of the agent installed on the node.</p>
    pub fn agent_version(&self) -> ::std::option::Option<&str> {
        self.agent_version.as_deref()
    }
    /// <p>The fully qualified host name of the managed node.</p>
    pub fn computer_name(&self) -> ::std::option::Option<&str> {
        self.computer_name.as_deref()
    }
    /// <p>The current status of the managed node.</p>
    pub fn instance_status(&self) -> ::std::option::Option<&str> {
        self.instance_status.as_deref()
    }
    /// <p>The IP address of the managed node.</p>
    pub fn ip_address(&self) -> ::std::option::Option<&str> {
        self.ip_address.as_deref()
    }
    /// <p>Indicates whether the node is managed by Systems Manager.</p>
    pub fn managed_status(&self) -> ::std::option::Option<&crate::types::ManagedStatus> {
        self.managed_status.as_ref()
    }
    /// <p>The operating system platform type of the managed node.</p>
    pub fn platform_type(&self) -> ::std::option::Option<&crate::types::PlatformType> {
        self.platform_type.as_ref()
    }
    /// <p>The name of the operating system platform running on your managed node.</p>
    pub fn platform_name(&self) -> ::std::option::Option<&str> {
        self.platform_name.as_deref()
    }
    /// <p>The version of the OS platform running on your managed node.</p>
    pub fn platform_version(&self) -> ::std::option::Option<&str> {
        self.platform_version.as_deref()
    }
    /// <p>The type of instance, either an EC2 instance or another supported machine type in a hybrid fleet.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
}
impl ::std::fmt::Debug for InstanceInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InstanceInfo");
        formatter.field("agent_type", &self.agent_type);
        formatter.field("agent_version", &self.agent_version);
        formatter.field("computer_name", &self.computer_name);
        formatter.field("instance_status", &self.instance_status);
        formatter.field("ip_address", &"*** Sensitive Data Redacted ***");
        formatter.field("managed_status", &self.managed_status);
        formatter.field("platform_type", &self.platform_type);
        formatter.field("platform_name", &self.platform_name);
        formatter.field("platform_version", &self.platform_version);
        formatter.field("resource_type", &self.resource_type);
        formatter.finish()
    }
}
impl InstanceInfo {
    /// Creates a new builder-style object to manufacture [`InstanceInfo`](crate::types::InstanceInfo).
    pub fn builder() -> crate::types::builders::InstanceInfoBuilder {
        crate::types::builders::InstanceInfoBuilder::default()
    }
}

/// A builder for [`InstanceInfo`](crate::types::InstanceInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct InstanceInfoBuilder {
    pub(crate) agent_type: ::std::option::Option<::std::string::String>,
    pub(crate) agent_version: ::std::option::Option<::std::string::String>,
    pub(crate) computer_name: ::std::option::Option<::std::string::String>,
    pub(crate) instance_status: ::std::option::Option<::std::string::String>,
    pub(crate) ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) managed_status: ::std::option::Option<crate::types::ManagedStatus>,
    pub(crate) platform_type: ::std::option::Option<crate::types::PlatformType>,
    pub(crate) platform_name: ::std::option::Option<::std::string::String>,
    pub(crate) platform_version: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<crate::types::ResourceType>,
}
impl InstanceInfoBuilder {
    /// <p>The type of agent installed on the node.</p>
    pub fn agent_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of agent installed on the node.</p>
    pub fn set_agent_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_type = input;
        self
    }
    /// <p>The type of agent installed on the node.</p>
    pub fn get_agent_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_type
    }
    /// <p>The version number of the agent installed on the node.</p>
    pub fn agent_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version number of the agent installed on the node.</p>
    pub fn set_agent_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_version = input;
        self
    }
    /// <p>The version number of the agent installed on the node.</p>
    pub fn get_agent_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_version
    }
    /// <p>The fully qualified host name of the managed node.</p>
    pub fn computer_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.computer_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The fully qualified host name of the managed node.</p>
    pub fn set_computer_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.computer_name = input;
        self
    }
    /// <p>The fully qualified host name of the managed node.</p>
    pub fn get_computer_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.computer_name
    }
    /// <p>The current status of the managed node.</p>
    pub fn instance_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current status of the managed node.</p>
    pub fn set_instance_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_status = input;
        self
    }
    /// <p>The current status of the managed node.</p>
    pub fn get_instance_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_status
    }
    /// <p>The IP address of the managed node.</p>
    pub fn ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address of the managed node.</p>
    pub fn set_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ip_address = input;
        self
    }
    /// <p>The IP address of the managed node.</p>
    pub fn get_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.ip_address
    }
    /// <p>Indicates whether the node is managed by Systems Manager.</p>
    pub fn managed_status(mut self, input: crate::types::ManagedStatus) -> Self {
        self.managed_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the node is managed by Systems Manager.</p>
    pub fn set_managed_status(mut self, input: ::std::option::Option<crate::types::ManagedStatus>) -> Self {
        self.managed_status = input;
        self
    }
    /// <p>Indicates whether the node is managed by Systems Manager.</p>
    pub fn get_managed_status(&self) -> &::std::option::Option<crate::types::ManagedStatus> {
        &self.managed_status
    }
    /// <p>The operating system platform type of the managed node.</p>
    pub fn platform_type(mut self, input: crate::types::PlatformType) -> Self {
        self.platform_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operating system platform type of the managed node.</p>
    pub fn set_platform_type(mut self, input: ::std::option::Option<crate::types::PlatformType>) -> Self {
        self.platform_type = input;
        self
    }
    /// <p>The operating system platform type of the managed node.</p>
    pub fn get_platform_type(&self) -> &::std::option::Option<crate::types::PlatformType> {
        &self.platform_type
    }
    /// <p>The name of the operating system platform running on your managed node.</p>
    pub fn platform_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.platform_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the operating system platform running on your managed node.</p>
    pub fn set_platform_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.platform_name = input;
        self
    }
    /// <p>The name of the operating system platform running on your managed node.</p>
    pub fn get_platform_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.platform_name
    }
    /// <p>The version of the OS platform running on your managed node.</p>
    pub fn platform_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.platform_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the OS platform running on your managed node.</p>
    pub fn set_platform_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.platform_version = input;
        self
    }
    /// <p>The version of the OS platform running on your managed node.</p>
    pub fn get_platform_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.platform_version
    }
    /// <p>The type of instance, either an EC2 instance or another supported machine type in a hybrid fleet.</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of instance, either an EC2 instance or another supported machine type in a hybrid fleet.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::ResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of instance, either an EC2 instance or another supported machine type in a hybrid fleet.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::ResourceType> {
        &self.resource_type
    }
    /// Consumes the builder and constructs a [`InstanceInfo`](crate::types::InstanceInfo).
    pub fn build(self) -> crate::types::InstanceInfo {
        crate::types::InstanceInfo {
            agent_type: self.agent_type,
            agent_version: self.agent_version,
            computer_name: self.computer_name,
            instance_status: self.instance_status,
            ip_address: self.ip_address,
            managed_status: self.managed_status,
            platform_type: self.platform_type,
            platform_name: self.platform_name,
            platform_version: self.platform_version,
            resource_type: self.resource_type,
        }
    }
}
impl ::std::fmt::Debug for InstanceInfoBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InstanceInfoBuilder");
        formatter.field("agent_type", &self.agent_type);
        formatter.field("agent_version", &self.agent_version);
        formatter.field("computer_name", &self.computer_name);
        formatter.field("instance_status", &self.instance_status);
        formatter.field("ip_address", &"*** Sensitive Data Redacted ***");
        formatter.field("managed_status", &self.managed_status);
        formatter.field("platform_type", &self.platform_type);
        formatter.field("platform_name", &self.platform_name);
        formatter.field("platform_version", &self.platform_version);
        formatter.field("resource_type", &self.resource_type);
        formatter.finish()
    }
}
