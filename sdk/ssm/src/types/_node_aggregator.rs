// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>One or more aggregators for viewing counts of nodes using different dimensions.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NodeAggregator {
    /// <p>The aggregator type for limiting a node summary. Currently, only <code>Count</code> is supported.</p>
    pub aggregator_type: crate::types::NodeAggregatorType,
    /// <p>The data type name to use for viewing counts of nodes. Currently, only <code>Instance</code> is supported.</p>
    pub type_name: crate::types::NodeTypeName,
    /// <p>The name of a node attribute on which to limit the count of nodes.</p>
    pub attribute_name: crate::types::NodeAttributeName,
    /// <p>Information about aggregators used to refine a node summary.</p>
    pub aggregators: ::std::option::Option<::std::vec::Vec<crate::types::NodeAggregator>>,
}
impl NodeAggregator {
    /// <p>The aggregator type for limiting a node summary. Currently, only <code>Count</code> is supported.</p>
    pub fn aggregator_type(&self) -> &crate::types::NodeAggregatorType {
        &self.aggregator_type
    }
    /// <p>The data type name to use for viewing counts of nodes. Currently, only <code>Instance</code> is supported.</p>
    pub fn type_name(&self) -> &crate::types::NodeTypeName {
        &self.type_name
    }
    /// <p>The name of a node attribute on which to limit the count of nodes.</p>
    pub fn attribute_name(&self) -> &crate::types::NodeAttributeName {
        &self.attribute_name
    }
    /// <p>Information about aggregators used to refine a node summary.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.aggregators.is_none()`.
    pub fn aggregators(&self) -> &[crate::types::NodeAggregator] {
        self.aggregators.as_deref().unwrap_or_default()
    }
}
impl NodeAggregator {
    /// Creates a new builder-style object to manufacture [`NodeAggregator`](crate::types::NodeAggregator).
    pub fn builder() -> crate::types::builders::NodeAggregatorBuilder {
        crate::types::builders::NodeAggregatorBuilder::default()
    }
}

/// A builder for [`NodeAggregator`](crate::types::NodeAggregator).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NodeAggregatorBuilder {
    pub(crate) aggregator_type: ::std::option::Option<crate::types::NodeAggregatorType>,
    pub(crate) type_name: ::std::option::Option<crate::types::NodeTypeName>,
    pub(crate) attribute_name: ::std::option::Option<crate::types::NodeAttributeName>,
    pub(crate) aggregators: ::std::option::Option<::std::vec::Vec<crate::types::NodeAggregator>>,
}
impl NodeAggregatorBuilder {
    /// <p>The aggregator type for limiting a node summary. Currently, only <code>Count</code> is supported.</p>
    /// This field is required.
    pub fn aggregator_type(mut self, input: crate::types::NodeAggregatorType) -> Self {
        self.aggregator_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The aggregator type for limiting a node summary. Currently, only <code>Count</code> is supported.</p>
    pub fn set_aggregator_type(mut self, input: ::std::option::Option<crate::types::NodeAggregatorType>) -> Self {
        self.aggregator_type = input;
        self
    }
    /// <p>The aggregator type for limiting a node summary. Currently, only <code>Count</code> is supported.</p>
    pub fn get_aggregator_type(&self) -> &::std::option::Option<crate::types::NodeAggregatorType> {
        &self.aggregator_type
    }
    /// <p>The data type name to use for viewing counts of nodes. Currently, only <code>Instance</code> is supported.</p>
    /// This field is required.
    pub fn type_name(mut self, input: crate::types::NodeTypeName) -> Self {
        self.type_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data type name to use for viewing counts of nodes. Currently, only <code>Instance</code> is supported.</p>
    pub fn set_type_name(mut self, input: ::std::option::Option<crate::types::NodeTypeName>) -> Self {
        self.type_name = input;
        self
    }
    /// <p>The data type name to use for viewing counts of nodes. Currently, only <code>Instance</code> is supported.</p>
    pub fn get_type_name(&self) -> &::std::option::Option<crate::types::NodeTypeName> {
        &self.type_name
    }
    /// <p>The name of a node attribute on which to limit the count of nodes.</p>
    /// This field is required.
    pub fn attribute_name(mut self, input: crate::types::NodeAttributeName) -> Self {
        self.attribute_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of a node attribute on which to limit the count of nodes.</p>
    pub fn set_attribute_name(mut self, input: ::std::option::Option<crate::types::NodeAttributeName>) -> Self {
        self.attribute_name = input;
        self
    }
    /// <p>The name of a node attribute on which to limit the count of nodes.</p>
    pub fn get_attribute_name(&self) -> &::std::option::Option<crate::types::NodeAttributeName> {
        &self.attribute_name
    }
    /// Appends an item to `aggregators`.
    ///
    /// To override the contents of this collection use [`set_aggregators`](Self::set_aggregators).
    ///
    /// <p>Information about aggregators used to refine a node summary.</p>
    pub fn aggregators(mut self, input: crate::types::NodeAggregator) -> Self {
        let mut v = self.aggregators.unwrap_or_default();
        v.push(input);
        self.aggregators = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about aggregators used to refine a node summary.</p>
    pub fn set_aggregators(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NodeAggregator>>) -> Self {
        self.aggregators = input;
        self
    }
    /// <p>Information about aggregators used to refine a node summary.</p>
    pub fn get_aggregators(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NodeAggregator>> {
        &self.aggregators
    }
    /// Consumes the builder and constructs a [`NodeAggregator`](crate::types::NodeAggregator).
    /// This method will fail if any of the following fields are not set:
    /// - [`aggregator_type`](crate::types::builders::NodeAggregatorBuilder::aggregator_type)
    /// - [`type_name`](crate::types::builders::NodeAggregatorBuilder::type_name)
    /// - [`attribute_name`](crate::types::builders::NodeAggregatorBuilder::attribute_name)
    pub fn build(self) -> ::std::result::Result<crate::types::NodeAggregator, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NodeAggregator {
            aggregator_type: self.aggregator_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "aggregator_type",
                    "aggregator_type was not specified but it is required when building NodeAggregator",
                )
            })?,
            type_name: self.type_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "type_name",
                    "type_name was not specified but it is required when building NodeAggregator",
                )
            })?,
            attribute_name: self.attribute_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "attribute_name",
                    "attribute_name was not specified but it is required when building NodeAggregator",
                )
            })?,
            aggregators: self.aggregators,
        })
    }
}
