// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the resources that would be included in the actual runbook execution, if it were to be run.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TargetPreview {
    /// <p>The number of resources of a certain type included in an execution preview.</p>
    pub count: i32,
    /// <p>A type of resource that was included in the execution preview.</p>
    pub target_type: ::std::option::Option<::std::string::String>,
}
impl TargetPreview {
    /// <p>The number of resources of a certain type included in an execution preview.</p>
    pub fn count(&self) -> i32 {
        self.count
    }
    /// <p>A type of resource that was included in the execution preview.</p>
    pub fn target_type(&self) -> ::std::option::Option<&str> {
        self.target_type.as_deref()
    }
}
impl TargetPreview {
    /// Creates a new builder-style object to manufacture [`TargetPreview`](crate::types::TargetPreview).
    pub fn builder() -> crate::types::builders::TargetPreviewBuilder {
        crate::types::builders::TargetPreviewBuilder::default()
    }
}

/// A builder for [`TargetPreview`](crate::types::TargetPreview).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TargetPreviewBuilder {
    pub(crate) count: ::std::option::Option<i32>,
    pub(crate) target_type: ::std::option::Option<::std::string::String>,
}
impl TargetPreviewBuilder {
    /// <p>The number of resources of a certain type included in an execution preview.</p>
    pub fn count(mut self, input: i32) -> Self {
        self.count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of resources of a certain type included in an execution preview.</p>
    pub fn set_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.count = input;
        self
    }
    /// <p>The number of resources of a certain type included in an execution preview.</p>
    pub fn get_count(&self) -> &::std::option::Option<i32> {
        &self.count
    }
    /// <p>A type of resource that was included in the execution preview.</p>
    pub fn target_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A type of resource that was included in the execution preview.</p>
    pub fn set_target_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_type = input;
        self
    }
    /// <p>A type of resource that was included in the execution preview.</p>
    pub fn get_target_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_type
    }
    /// Consumes the builder and constructs a [`TargetPreview`](crate::types::TargetPreview).
    pub fn build(self) -> crate::types::TargetPreview {
        crate::types::TargetPreview {
            count: self.count.unwrap_or_default(),
            target_type: self.target_type,
        }
    }
}
