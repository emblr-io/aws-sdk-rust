// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about ownership of a managed node.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NodeOwnerInfo {
    /// <p>The ID of the Amazon Web Services account that owns the managed node.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the organization unit (OU) that the account is part of.</p>
    pub organizational_unit_id: ::std::option::Option<::std::string::String>,
    /// <p>The path for the organizational unit (OU) that owns the managed node. The path for the OU is built using the IDs of the organization, root, and all OUs in the path down to and including the OU. For example:</p>
    /// <p><code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-ghi0-awsccccc/ou-jkl0-awsddddd/</code></p>
    pub organizational_unit_path: ::std::option::Option<::std::string::String>,
}
impl NodeOwnerInfo {
    /// <p>The ID of the Amazon Web Services account that owns the managed node.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The ID of the organization unit (OU) that the account is part of.</p>
    pub fn organizational_unit_id(&self) -> ::std::option::Option<&str> {
        self.organizational_unit_id.as_deref()
    }
    /// <p>The path for the organizational unit (OU) that owns the managed node. The path for the OU is built using the IDs of the organization, root, and all OUs in the path down to and including the OU. For example:</p>
    /// <p><code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-ghi0-awsccccc/ou-jkl0-awsddddd/</code></p>
    pub fn organizational_unit_path(&self) -> ::std::option::Option<&str> {
        self.organizational_unit_path.as_deref()
    }
}
impl NodeOwnerInfo {
    /// Creates a new builder-style object to manufacture [`NodeOwnerInfo`](crate::types::NodeOwnerInfo).
    pub fn builder() -> crate::types::builders::NodeOwnerInfoBuilder {
        crate::types::builders::NodeOwnerInfoBuilder::default()
    }
}

/// A builder for [`NodeOwnerInfo`](crate::types::NodeOwnerInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NodeOwnerInfoBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) organizational_unit_id: ::std::option::Option<::std::string::String>,
    pub(crate) organizational_unit_path: ::std::option::Option<::std::string::String>,
}
impl NodeOwnerInfoBuilder {
    /// <p>The ID of the Amazon Web Services account that owns the managed node.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the managed node.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the managed node.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The ID of the organization unit (OU) that the account is part of.</p>
    pub fn organizational_unit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organizational_unit_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the organization unit (OU) that the account is part of.</p>
    pub fn set_organizational_unit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organizational_unit_id = input;
        self
    }
    /// <p>The ID of the organization unit (OU) that the account is part of.</p>
    pub fn get_organizational_unit_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.organizational_unit_id
    }
    /// <p>The path for the organizational unit (OU) that owns the managed node. The path for the OU is built using the IDs of the organization, root, and all OUs in the path down to and including the OU. For example:</p>
    /// <p><code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-ghi0-awsccccc/ou-jkl0-awsddddd/</code></p>
    pub fn organizational_unit_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organizational_unit_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path for the organizational unit (OU) that owns the managed node. The path for the OU is built using the IDs of the organization, root, and all OUs in the path down to and including the OU. For example:</p>
    /// <p><code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-ghi0-awsccccc/ou-jkl0-awsddddd/</code></p>
    pub fn set_organizational_unit_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organizational_unit_path = input;
        self
    }
    /// <p>The path for the organizational unit (OU) that owns the managed node. The path for the OU is built using the IDs of the organization, root, and all OUs in the path down to and including the OU. For example:</p>
    /// <p><code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-ghi0-awsccccc/ou-jkl0-awsddddd/</code></p>
    pub fn get_organizational_unit_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.organizational_unit_path
    }
    /// Consumes the builder and constructs a [`NodeOwnerInfo`](crate::types::NodeOwnerInfo).
    pub fn build(self) -> crate::types::NodeOwnerInfo {
        crate::types::NodeOwnerInfo {
            account_id: self.account_id,
            organizational_unit_id: self.organizational_unit_id,
            organizational_unit_path: self.organizational_unit_path,
        }
    }
}
