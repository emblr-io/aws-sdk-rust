// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetAccessTokenOutput {
    /// <p>The temporary security credentials which can be used to start just-in-time node access sessions.</p>
    pub credentials: ::std::option::Option<crate::types::Credentials>,
    /// <p>The status of the access request.</p>
    pub access_request_status: ::std::option::Option<crate::types::AccessRequestStatus>,
    _request_id: Option<String>,
}
impl GetAccessTokenOutput {
    /// <p>The temporary security credentials which can be used to start just-in-time node access sessions.</p>
    pub fn credentials(&self) -> ::std::option::Option<&crate::types::Credentials> {
        self.credentials.as_ref()
    }
    /// <p>The status of the access request.</p>
    pub fn access_request_status(&self) -> ::std::option::Option<&crate::types::AccessRequestStatus> {
        self.access_request_status.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetAccessTokenOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAccessTokenOutput {
    /// Creates a new builder-style object to manufacture [`GetAccessTokenOutput`](crate::operation::get_access_token::GetAccessTokenOutput).
    pub fn builder() -> crate::operation::get_access_token::builders::GetAccessTokenOutputBuilder {
        crate::operation::get_access_token::builders::GetAccessTokenOutputBuilder::default()
    }
}

/// A builder for [`GetAccessTokenOutput`](crate::operation::get_access_token::GetAccessTokenOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetAccessTokenOutputBuilder {
    pub(crate) credentials: ::std::option::Option<crate::types::Credentials>,
    pub(crate) access_request_status: ::std::option::Option<crate::types::AccessRequestStatus>,
    _request_id: Option<String>,
}
impl GetAccessTokenOutputBuilder {
    /// <p>The temporary security credentials which can be used to start just-in-time node access sessions.</p>
    pub fn credentials(mut self, input: crate::types::Credentials) -> Self {
        self.credentials = ::std::option::Option::Some(input);
        self
    }
    /// <p>The temporary security credentials which can be used to start just-in-time node access sessions.</p>
    pub fn set_credentials(mut self, input: ::std::option::Option<crate::types::Credentials>) -> Self {
        self.credentials = input;
        self
    }
    /// <p>The temporary security credentials which can be used to start just-in-time node access sessions.</p>
    pub fn get_credentials(&self) -> &::std::option::Option<crate::types::Credentials> {
        &self.credentials
    }
    /// <p>The status of the access request.</p>
    pub fn access_request_status(mut self, input: crate::types::AccessRequestStatus) -> Self {
        self.access_request_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the access request.</p>
    pub fn set_access_request_status(mut self, input: ::std::option::Option<crate::types::AccessRequestStatus>) -> Self {
        self.access_request_status = input;
        self
    }
    /// <p>The status of the access request.</p>
    pub fn get_access_request_status(&self) -> &::std::option::Option<crate::types::AccessRequestStatus> {
        &self.access_request_status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetAccessTokenOutput`](crate::operation::get_access_token::GetAccessTokenOutput).
    pub fn build(self) -> crate::operation::get_access_token::GetAccessTokenOutput {
        crate::operation::get_access_token::GetAccessTokenOutput {
            credentials: self.credentials,
            access_request_status: self.access_request_status,
            _request_id: self._request_id,
        }
    }
}
