// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetBuyerDashboardOutput {
    /// <p>The dashboard's embedding URL.</p>
    pub embed_url: ::std::string::String,
    /// <p>The ARN of the returned dashboard.</p>
    pub dashboard_identifier: ::std::string::String,
    /// <p>The fully qualified domains specified in the request. The domains enable access to the generated URL that is then embedded. You can list up to two domains or subdomains in each API call. To include all subdomains under a specific domain, use <code>*</code>. For example, <code>https://*.amazon.com</code> includes all subdomains under <code>https://aws.amazon.com</code>.</p>
    pub embedding_domains: ::std::vec::Vec<::std::string::String>,
    _request_id: Option<String>,
}
impl GetBuyerDashboardOutput {
    /// <p>The dashboard's embedding URL.</p>
    pub fn embed_url(&self) -> &str {
        use std::ops::Deref;
        self.embed_url.deref()
    }
    /// <p>The ARN of the returned dashboard.</p>
    pub fn dashboard_identifier(&self) -> &str {
        use std::ops::Deref;
        self.dashboard_identifier.deref()
    }
    /// <p>The fully qualified domains specified in the request. The domains enable access to the generated URL that is then embedded. You can list up to two domains or subdomains in each API call. To include all subdomains under a specific domain, use <code>*</code>. For example, <code>https://*.amazon.com</code> includes all subdomains under <code>https://aws.amazon.com</code>.</p>
    pub fn embedding_domains(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.embedding_domains.deref()
    }
}
impl ::aws_types::request_id::RequestId for GetBuyerDashboardOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetBuyerDashboardOutput {
    /// Creates a new builder-style object to manufacture [`GetBuyerDashboardOutput`](crate::operation::get_buyer_dashboard::GetBuyerDashboardOutput).
    pub fn builder() -> crate::operation::get_buyer_dashboard::builders::GetBuyerDashboardOutputBuilder {
        crate::operation::get_buyer_dashboard::builders::GetBuyerDashboardOutputBuilder::default()
    }
}

/// A builder for [`GetBuyerDashboardOutput`](crate::operation::get_buyer_dashboard::GetBuyerDashboardOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetBuyerDashboardOutputBuilder {
    pub(crate) embed_url: ::std::option::Option<::std::string::String>,
    pub(crate) dashboard_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) embedding_domains: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl GetBuyerDashboardOutputBuilder {
    /// <p>The dashboard's embedding URL.</p>
    /// This field is required.
    pub fn embed_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.embed_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The dashboard's embedding URL.</p>
    pub fn set_embed_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.embed_url = input;
        self
    }
    /// <p>The dashboard's embedding URL.</p>
    pub fn get_embed_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.embed_url
    }
    /// <p>The ARN of the returned dashboard.</p>
    /// This field is required.
    pub fn dashboard_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dashboard_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the returned dashboard.</p>
    pub fn set_dashboard_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dashboard_identifier = input;
        self
    }
    /// <p>The ARN of the returned dashboard.</p>
    pub fn get_dashboard_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.dashboard_identifier
    }
    /// Appends an item to `embedding_domains`.
    ///
    /// To override the contents of this collection use [`set_embedding_domains`](Self::set_embedding_domains).
    ///
    /// <p>The fully qualified domains specified in the request. The domains enable access to the generated URL that is then embedded. You can list up to two domains or subdomains in each API call. To include all subdomains under a specific domain, use <code>*</code>. For example, <code>https://*.amazon.com</code> includes all subdomains under <code>https://aws.amazon.com</code>.</p>
    pub fn embedding_domains(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.embedding_domains.unwrap_or_default();
        v.push(input.into());
        self.embedding_domains = ::std::option::Option::Some(v);
        self
    }
    /// <p>The fully qualified domains specified in the request. The domains enable access to the generated URL that is then embedded. You can list up to two domains or subdomains in each API call. To include all subdomains under a specific domain, use <code>*</code>. For example, <code>https://*.amazon.com</code> includes all subdomains under <code>https://aws.amazon.com</code>.</p>
    pub fn set_embedding_domains(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.embedding_domains = input;
        self
    }
    /// <p>The fully qualified domains specified in the request. The domains enable access to the generated URL that is then embedded. You can list up to two domains or subdomains in each API call. To include all subdomains under a specific domain, use <code>*</code>. For example, <code>https://*.amazon.com</code> includes all subdomains under <code>https://aws.amazon.com</code>.</p>
    pub fn get_embedding_domains(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.embedding_domains
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetBuyerDashboardOutput`](crate::operation::get_buyer_dashboard::GetBuyerDashboardOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`embed_url`](crate::operation::get_buyer_dashboard::builders::GetBuyerDashboardOutputBuilder::embed_url)
    /// - [`dashboard_identifier`](crate::operation::get_buyer_dashboard::builders::GetBuyerDashboardOutputBuilder::dashboard_identifier)
    /// - [`embedding_domains`](crate::operation::get_buyer_dashboard::builders::GetBuyerDashboardOutputBuilder::embedding_domains)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_buyer_dashboard::GetBuyerDashboardOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_buyer_dashboard::GetBuyerDashboardOutput {
            embed_url: self.embed_url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "embed_url",
                    "embed_url was not specified but it is required when building GetBuyerDashboardOutput",
                )
            })?,
            dashboard_identifier: self.dashboard_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dashboard_identifier",
                    "dashboard_identifier was not specified but it is required when building GetBuyerDashboardOutput",
                )
            })?,
            embedding_domains: self.embedding_domains.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "embedding_domains",
                    "embedding_domains was not specified but it is required when building GetBuyerDashboardOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
