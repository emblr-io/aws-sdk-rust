// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetBuyerDashboardInput {
    /// <p>The ARN of the requested dashboard.</p>
    pub dashboard_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Fully qualified domains that you add to the allow list for access to the generated URL that is then embedded. You can list up to two domains or subdomains in each API call. To include all subdomains under a specific domain, use <code>*</code>. For example, <code>https://*.amazon.com</code> includes all subdomains under <code>https://aws.amazon.com</code>.</p>
    pub embedding_domains: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl GetBuyerDashboardInput {
    /// <p>The ARN of the requested dashboard.</p>
    pub fn dashboard_identifier(&self) -> ::std::option::Option<&str> {
        self.dashboard_identifier.as_deref()
    }
    /// <p>Fully qualified domains that you add to the allow list for access to the generated URL that is then embedded. You can list up to two domains or subdomains in each API call. To include all subdomains under a specific domain, use <code>*</code>. For example, <code>https://*.amazon.com</code> includes all subdomains under <code>https://aws.amazon.com</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.embedding_domains.is_none()`.
    pub fn embedding_domains(&self) -> &[::std::string::String] {
        self.embedding_domains.as_deref().unwrap_or_default()
    }
}
impl GetBuyerDashboardInput {
    /// Creates a new builder-style object to manufacture [`GetBuyerDashboardInput`](crate::operation::get_buyer_dashboard::GetBuyerDashboardInput).
    pub fn builder() -> crate::operation::get_buyer_dashboard::builders::GetBuyerDashboardInputBuilder {
        crate::operation::get_buyer_dashboard::builders::GetBuyerDashboardInputBuilder::default()
    }
}

/// A builder for [`GetBuyerDashboardInput`](crate::operation::get_buyer_dashboard::GetBuyerDashboardInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetBuyerDashboardInputBuilder {
    pub(crate) dashboard_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) embedding_domains: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl GetBuyerDashboardInputBuilder {
    /// <p>The ARN of the requested dashboard.</p>
    /// This field is required.
    pub fn dashboard_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dashboard_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the requested dashboard.</p>
    pub fn set_dashboard_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dashboard_identifier = input;
        self
    }
    /// <p>The ARN of the requested dashboard.</p>
    pub fn get_dashboard_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.dashboard_identifier
    }
    /// Appends an item to `embedding_domains`.
    ///
    /// To override the contents of this collection use [`set_embedding_domains`](Self::set_embedding_domains).
    ///
    /// <p>Fully qualified domains that you add to the allow list for access to the generated URL that is then embedded. You can list up to two domains or subdomains in each API call. To include all subdomains under a specific domain, use <code>*</code>. For example, <code>https://*.amazon.com</code> includes all subdomains under <code>https://aws.amazon.com</code>.</p>
    pub fn embedding_domains(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.embedding_domains.unwrap_or_default();
        v.push(input.into());
        self.embedding_domains = ::std::option::Option::Some(v);
        self
    }
    /// <p>Fully qualified domains that you add to the allow list for access to the generated URL that is then embedded. You can list up to two domains or subdomains in each API call. To include all subdomains under a specific domain, use <code>*</code>. For example, <code>https://*.amazon.com</code> includes all subdomains under <code>https://aws.amazon.com</code>.</p>
    pub fn set_embedding_domains(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.embedding_domains = input;
        self
    }
    /// <p>Fully qualified domains that you add to the allow list for access to the generated URL that is then embedded. You can list up to two domains or subdomains in each API call. To include all subdomains under a specific domain, use <code>*</code>. For example, <code>https://*.amazon.com</code> includes all subdomains under <code>https://aws.amazon.com</code>.</p>
    pub fn get_embedding_domains(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.embedding_domains
    }
    /// Consumes the builder and constructs a [`GetBuyerDashboardInput`](crate::operation::get_buyer_dashboard::GetBuyerDashboardInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_buyer_dashboard::GetBuyerDashboardInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_buyer_dashboard::GetBuyerDashboardInput {
            dashboard_identifier: self.dashboard_identifier,
            embedding_domains: self.embedding_domains,
        })
    }
}
