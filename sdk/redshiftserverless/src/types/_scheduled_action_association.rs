// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains names of objects associated with a scheduled action.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScheduledActionAssociation {
    /// <p>Name of associated Amazon Redshift Serverless namespace.</p>
    pub namespace_name: ::std::option::Option<::std::string::String>,
    /// <p>Name of associated scheduled action.</p>
    pub scheduled_action_name: ::std::option::Option<::std::string::String>,
}
impl ScheduledActionAssociation {
    /// <p>Name of associated Amazon Redshift Serverless namespace.</p>
    pub fn namespace_name(&self) -> ::std::option::Option<&str> {
        self.namespace_name.as_deref()
    }
    /// <p>Name of associated scheduled action.</p>
    pub fn scheduled_action_name(&self) -> ::std::option::Option<&str> {
        self.scheduled_action_name.as_deref()
    }
}
impl ScheduledActionAssociation {
    /// Creates a new builder-style object to manufacture [`ScheduledActionAssociation`](crate::types::ScheduledActionAssociation).
    pub fn builder() -> crate::types::builders::ScheduledActionAssociationBuilder {
        crate::types::builders::ScheduledActionAssociationBuilder::default()
    }
}

/// A builder for [`ScheduledActionAssociation`](crate::types::ScheduledActionAssociation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ScheduledActionAssociationBuilder {
    pub(crate) namespace_name: ::std::option::Option<::std::string::String>,
    pub(crate) scheduled_action_name: ::std::option::Option<::std::string::String>,
}
impl ScheduledActionAssociationBuilder {
    /// <p>Name of associated Amazon Redshift Serverless namespace.</p>
    pub fn namespace_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.namespace_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of associated Amazon Redshift Serverless namespace.</p>
    pub fn set_namespace_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.namespace_name = input;
        self
    }
    /// <p>Name of associated Amazon Redshift Serverless namespace.</p>
    pub fn get_namespace_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.namespace_name
    }
    /// <p>Name of associated scheduled action.</p>
    pub fn scheduled_action_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scheduled_action_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of associated scheduled action.</p>
    pub fn set_scheduled_action_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scheduled_action_name = input;
        self
    }
    /// <p>Name of associated scheduled action.</p>
    pub fn get_scheduled_action_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.scheduled_action_name
    }
    /// Consumes the builder and constructs a [`ScheduledActionAssociation`](crate::types::ScheduledActionAssociation).
    pub fn build(self) -> crate::types::ScheduledActionAssociation {
        crate::types::ScheduledActionAssociation {
            namespace_name: self.namespace_name,
            scheduled_action_name: self.scheduled_action_name,
        }
    }
}
