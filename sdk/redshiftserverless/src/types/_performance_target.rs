// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the price performance target settings for the workgroup.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PerformanceTarget {
    /// <p>Whether the price performance target is enabled for the workgroup.</p>
    pub status: ::std::option::Option<crate::types::PerformanceTargetStatus>,
    /// <p>The target price performance level for the workgroup. Valid values include 1, 25, 50, 75, and 100. These correspond to the price performance levels LOW_COST, ECONOMICAL, BALANCED, RESOURCEFUL, and HIGH_PERFORMANCE.</p>
    pub level: ::std::option::Option<i32>,
}
impl PerformanceTarget {
    /// <p>Whether the price performance target is enabled for the workgroup.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::PerformanceTargetStatus> {
        self.status.as_ref()
    }
    /// <p>The target price performance level for the workgroup. Valid values include 1, 25, 50, 75, and 100. These correspond to the price performance levels LOW_COST, ECONOMICAL, BALANCED, RESOURCEFUL, and HIGH_PERFORMANCE.</p>
    pub fn level(&self) -> ::std::option::Option<i32> {
        self.level
    }
}
impl PerformanceTarget {
    /// Creates a new builder-style object to manufacture [`PerformanceTarget`](crate::types::PerformanceTarget).
    pub fn builder() -> crate::types::builders::PerformanceTargetBuilder {
        crate::types::builders::PerformanceTargetBuilder::default()
    }
}

/// A builder for [`PerformanceTarget`](crate::types::PerformanceTarget).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PerformanceTargetBuilder {
    pub(crate) status: ::std::option::Option<crate::types::PerformanceTargetStatus>,
    pub(crate) level: ::std::option::Option<i32>,
}
impl PerformanceTargetBuilder {
    /// <p>Whether the price performance target is enabled for the workgroup.</p>
    pub fn status(mut self, input: crate::types::PerformanceTargetStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the price performance target is enabled for the workgroup.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::PerformanceTargetStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Whether the price performance target is enabled for the workgroup.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::PerformanceTargetStatus> {
        &self.status
    }
    /// <p>The target price performance level for the workgroup. Valid values include 1, 25, 50, 75, and 100. These correspond to the price performance levels LOW_COST, ECONOMICAL, BALANCED, RESOURCEFUL, and HIGH_PERFORMANCE.</p>
    pub fn level(mut self, input: i32) -> Self {
        self.level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target price performance level for the workgroup. Valid values include 1, 25, 50, 75, and 100. These correspond to the price performance levels LOW_COST, ECONOMICAL, BALANCED, RESOURCEFUL, and HIGH_PERFORMANCE.</p>
    pub fn set_level(mut self, input: ::std::option::Option<i32>) -> Self {
        self.level = input;
        self
    }
    /// <p>The target price performance level for the workgroup. Valid values include 1, 25, 50, 75, and 100. These correspond to the price performance levels LOW_COST, ECONOMICAL, BALANCED, RESOURCEFUL, and HIGH_PERFORMANCE.</p>
    pub fn get_level(&self) -> &::std::option::Option<i32> {
        &self.level
    }
    /// Consumes the builder and constructs a [`PerformanceTarget`](crate::types::PerformanceTarget).
    pub fn build(self) -> crate::types::PerformanceTarget {
        crate::types::PerformanceTarget {
            status: self.status,
            level: self.level,
        }
    }
}
