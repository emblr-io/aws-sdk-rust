// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a track that determines which Amazon Redshift version to apply after a new version is released. If the value for <code>ServerlessTrack</code> is <code>current</code>, the workgroup is updated to the most recently certified release. If the value is <code>trailing</code>, the workgroup is updated to the previously certified release.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServerlessTrack {
    /// <p>The name of the track. Valid values are <code>current</code> and <code>trailing</code>.</p>
    pub track_name: ::std::option::Option<::std::string::String>,
    /// <p>The workgroup version number for the workgroup release.</p>
    pub workgroup_version: ::std::option::Option<::std::string::String>,
    /// <p>An array of <code>UpdateTarget</code> objects to update with the track.</p>
    pub update_targets: ::std::option::Option<::std::vec::Vec<crate::types::UpdateTarget>>,
}
impl ServerlessTrack {
    /// <p>The name of the track. Valid values are <code>current</code> and <code>trailing</code>.</p>
    pub fn track_name(&self) -> ::std::option::Option<&str> {
        self.track_name.as_deref()
    }
    /// <p>The workgroup version number for the workgroup release.</p>
    pub fn workgroup_version(&self) -> ::std::option::Option<&str> {
        self.workgroup_version.as_deref()
    }
    /// <p>An array of <code>UpdateTarget</code> objects to update with the track.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.update_targets.is_none()`.
    pub fn update_targets(&self) -> &[crate::types::UpdateTarget] {
        self.update_targets.as_deref().unwrap_or_default()
    }
}
impl ServerlessTrack {
    /// Creates a new builder-style object to manufacture [`ServerlessTrack`](crate::types::ServerlessTrack).
    pub fn builder() -> crate::types::builders::ServerlessTrackBuilder {
        crate::types::builders::ServerlessTrackBuilder::default()
    }
}

/// A builder for [`ServerlessTrack`](crate::types::ServerlessTrack).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServerlessTrackBuilder {
    pub(crate) track_name: ::std::option::Option<::std::string::String>,
    pub(crate) workgroup_version: ::std::option::Option<::std::string::String>,
    pub(crate) update_targets: ::std::option::Option<::std::vec::Vec<crate::types::UpdateTarget>>,
}
impl ServerlessTrackBuilder {
    /// <p>The name of the track. Valid values are <code>current</code> and <code>trailing</code>.</p>
    pub fn track_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.track_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the track. Valid values are <code>current</code> and <code>trailing</code>.</p>
    pub fn set_track_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.track_name = input;
        self
    }
    /// <p>The name of the track. Valid values are <code>current</code> and <code>trailing</code>.</p>
    pub fn get_track_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.track_name
    }
    /// <p>The workgroup version number for the workgroup release.</p>
    pub fn workgroup_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workgroup_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The workgroup version number for the workgroup release.</p>
    pub fn set_workgroup_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workgroup_version = input;
        self
    }
    /// <p>The workgroup version number for the workgroup release.</p>
    pub fn get_workgroup_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.workgroup_version
    }
    /// Appends an item to `update_targets`.
    ///
    /// To override the contents of this collection use [`set_update_targets`](Self::set_update_targets).
    ///
    /// <p>An array of <code>UpdateTarget</code> objects to update with the track.</p>
    pub fn update_targets(mut self, input: crate::types::UpdateTarget) -> Self {
        let mut v = self.update_targets.unwrap_or_default();
        v.push(input);
        self.update_targets = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>UpdateTarget</code> objects to update with the track.</p>
    pub fn set_update_targets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UpdateTarget>>) -> Self {
        self.update_targets = input;
        self
    }
    /// <p>An array of <code>UpdateTarget</code> objects to update with the track.</p>
    pub fn get_update_targets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UpdateTarget>> {
        &self.update_targets
    }
    /// Consumes the builder and constructs a [`ServerlessTrack`](crate::types::ServerlessTrack).
    pub fn build(self) -> crate::types::ServerlessTrack {
        crate::types::ServerlessTrack {
            track_name: self.track_name,
            workgroup_version: self.workgroup_version,
            update_targets: self.update_targets,
        }
    }
}
