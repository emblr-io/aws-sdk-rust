// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The class of offering for the reservation. The offering class determines the payment schedule for the reservation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReservationOffering {
    /// <p>The offering identifier.</p>
    pub offering_id: ::std::option::Option<::std::string::String>,
    /// <p>The duration, in seconds, for which the reservation reserves the RPUs.</p>
    pub duration: i32,
    /// <p>The up-front price you are charged for the reservation.</p>
    pub upfront_charge: f64,
    /// <p>The rate you are charged for each hour the reservation is active.</p>
    pub hourly_charge: f64,
    /// <p>The currency code for the offering.</p>
    pub currency_code: ::std::option::Option<::std::string::String>,
    /// <p>Determines the payment schedule for the reservation.</p>
    pub offering_type: ::std::option::Option<crate::types::OfferingType>,
}
impl ReservationOffering {
    /// <p>The offering identifier.</p>
    pub fn offering_id(&self) -> ::std::option::Option<&str> {
        self.offering_id.as_deref()
    }
    /// <p>The duration, in seconds, for which the reservation reserves the RPUs.</p>
    pub fn duration(&self) -> i32 {
        self.duration
    }
    /// <p>The up-front price you are charged for the reservation.</p>
    pub fn upfront_charge(&self) -> f64 {
        self.upfront_charge
    }
    /// <p>The rate you are charged for each hour the reservation is active.</p>
    pub fn hourly_charge(&self) -> f64 {
        self.hourly_charge
    }
    /// <p>The currency code for the offering.</p>
    pub fn currency_code(&self) -> ::std::option::Option<&str> {
        self.currency_code.as_deref()
    }
    /// <p>Determines the payment schedule for the reservation.</p>
    pub fn offering_type(&self) -> ::std::option::Option<&crate::types::OfferingType> {
        self.offering_type.as_ref()
    }
}
impl ReservationOffering {
    /// Creates a new builder-style object to manufacture [`ReservationOffering`](crate::types::ReservationOffering).
    pub fn builder() -> crate::types::builders::ReservationOfferingBuilder {
        crate::types::builders::ReservationOfferingBuilder::default()
    }
}

/// A builder for [`ReservationOffering`](crate::types::ReservationOffering).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ReservationOfferingBuilder {
    pub(crate) offering_id: ::std::option::Option<::std::string::String>,
    pub(crate) duration: ::std::option::Option<i32>,
    pub(crate) upfront_charge: ::std::option::Option<f64>,
    pub(crate) hourly_charge: ::std::option::Option<f64>,
    pub(crate) currency_code: ::std::option::Option<::std::string::String>,
    pub(crate) offering_type: ::std::option::Option<crate::types::OfferingType>,
}
impl ReservationOfferingBuilder {
    /// <p>The offering identifier.</p>
    pub fn offering_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.offering_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The offering identifier.</p>
    pub fn set_offering_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.offering_id = input;
        self
    }
    /// <p>The offering identifier.</p>
    pub fn get_offering_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.offering_id
    }
    /// <p>The duration, in seconds, for which the reservation reserves the RPUs.</p>
    pub fn duration(mut self, input: i32) -> Self {
        self.duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The duration, in seconds, for which the reservation reserves the RPUs.</p>
    pub fn set_duration(mut self, input: ::std::option::Option<i32>) -> Self {
        self.duration = input;
        self
    }
    /// <p>The duration, in seconds, for which the reservation reserves the RPUs.</p>
    pub fn get_duration(&self) -> &::std::option::Option<i32> {
        &self.duration
    }
    /// <p>The up-front price you are charged for the reservation.</p>
    pub fn upfront_charge(mut self, input: f64) -> Self {
        self.upfront_charge = ::std::option::Option::Some(input);
        self
    }
    /// <p>The up-front price you are charged for the reservation.</p>
    pub fn set_upfront_charge(mut self, input: ::std::option::Option<f64>) -> Self {
        self.upfront_charge = input;
        self
    }
    /// <p>The up-front price you are charged for the reservation.</p>
    pub fn get_upfront_charge(&self) -> &::std::option::Option<f64> {
        &self.upfront_charge
    }
    /// <p>The rate you are charged for each hour the reservation is active.</p>
    pub fn hourly_charge(mut self, input: f64) -> Self {
        self.hourly_charge = ::std::option::Option::Some(input);
        self
    }
    /// <p>The rate you are charged for each hour the reservation is active.</p>
    pub fn set_hourly_charge(mut self, input: ::std::option::Option<f64>) -> Self {
        self.hourly_charge = input;
        self
    }
    /// <p>The rate you are charged for each hour the reservation is active.</p>
    pub fn get_hourly_charge(&self) -> &::std::option::Option<f64> {
        &self.hourly_charge
    }
    /// <p>The currency code for the offering.</p>
    pub fn currency_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.currency_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The currency code for the offering.</p>
    pub fn set_currency_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.currency_code = input;
        self
    }
    /// <p>The currency code for the offering.</p>
    pub fn get_currency_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.currency_code
    }
    /// <p>Determines the payment schedule for the reservation.</p>
    pub fn offering_type(mut self, input: crate::types::OfferingType) -> Self {
        self.offering_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines the payment schedule for the reservation.</p>
    pub fn set_offering_type(mut self, input: ::std::option::Option<crate::types::OfferingType>) -> Self {
        self.offering_type = input;
        self
    }
    /// <p>Determines the payment schedule for the reservation.</p>
    pub fn get_offering_type(&self) -> &::std::option::Option<crate::types::OfferingType> {
        &self.offering_type
    }
    /// Consumes the builder and constructs a [`ReservationOffering`](crate::types::ReservationOffering).
    pub fn build(self) -> crate::types::ReservationOffering {
        crate::types::ReservationOffering {
            offering_id: self.offering_id,
            duration: self.duration.unwrap_or_default(),
            upfront_charge: self.upfront_charge.unwrap_or_default(),
            hourly_charge: self.hourly_charge.unwrap_or_default(),
            currency_code: self.currency_code,
            offering_type: self.offering_type,
        }
    }
}
