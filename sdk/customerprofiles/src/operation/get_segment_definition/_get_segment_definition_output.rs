// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetSegmentDefinitionOutput {
    /// <p>The name of the segment definition.</p>
    pub segment_definition_name: ::std::option::Option<::std::string::String>,
    /// <p>The display name of the segment definition.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the segment definition.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The segment criteria associated with this definition.</p>
    pub segment_groups: ::std::option::Option<crate::types::SegmentGroup>,
    /// <p>The arn of the segment definition.</p>
    pub segment_definition_arn: ::std::string::String,
    /// <p>The timestamp of when the segment definition was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetSegmentDefinitionOutput {
    /// <p>The name of the segment definition.</p>
    pub fn segment_definition_name(&self) -> ::std::option::Option<&str> {
        self.segment_definition_name.as_deref()
    }
    /// <p>The display name of the segment definition.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The description of the segment definition.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The segment criteria associated with this definition.</p>
    pub fn segment_groups(&self) -> ::std::option::Option<&crate::types::SegmentGroup> {
        self.segment_groups.as_ref()
    }
    /// <p>The arn of the segment definition.</p>
    pub fn segment_definition_arn(&self) -> &str {
        use std::ops::Deref;
        self.segment_definition_arn.deref()
    }
    /// <p>The timestamp of when the segment definition was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for GetSegmentDefinitionOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetSegmentDefinitionOutput");
        formatter.field("segment_definition_name", &self.segment_definition_name);
        formatter.field("display_name", &self.display_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("segment_groups", &"*** Sensitive Data Redacted ***");
        formatter.field("segment_definition_arn", &self.segment_definition_arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("tags", &self.tags);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetSegmentDefinitionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSegmentDefinitionOutput {
    /// Creates a new builder-style object to manufacture [`GetSegmentDefinitionOutput`](crate::operation::get_segment_definition::GetSegmentDefinitionOutput).
    pub fn builder() -> crate::operation::get_segment_definition::builders::GetSegmentDefinitionOutputBuilder {
        crate::operation::get_segment_definition::builders::GetSegmentDefinitionOutputBuilder::default()
    }
}

/// A builder for [`GetSegmentDefinitionOutput`](crate::operation::get_segment_definition::GetSegmentDefinitionOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetSegmentDefinitionOutputBuilder {
    pub(crate) segment_definition_name: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) segment_groups: ::std::option::Option<crate::types::SegmentGroup>,
    pub(crate) segment_definition_arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetSegmentDefinitionOutputBuilder {
    /// <p>The name of the segment definition.</p>
    pub fn segment_definition_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.segment_definition_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the segment definition.</p>
    pub fn set_segment_definition_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.segment_definition_name = input;
        self
    }
    /// <p>The name of the segment definition.</p>
    pub fn get_segment_definition_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.segment_definition_name
    }
    /// <p>The display name of the segment definition.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the segment definition.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name of the segment definition.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The description of the segment definition.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the segment definition.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the segment definition.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The segment criteria associated with this definition.</p>
    pub fn segment_groups(mut self, input: crate::types::SegmentGroup) -> Self {
        self.segment_groups = ::std::option::Option::Some(input);
        self
    }
    /// <p>The segment criteria associated with this definition.</p>
    pub fn set_segment_groups(mut self, input: ::std::option::Option<crate::types::SegmentGroup>) -> Self {
        self.segment_groups = input;
        self
    }
    /// <p>The segment criteria associated with this definition.</p>
    pub fn get_segment_groups(&self) -> &::std::option::Option<crate::types::SegmentGroup> {
        &self.segment_groups
    }
    /// <p>The arn of the segment definition.</p>
    /// This field is required.
    pub fn segment_definition_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.segment_definition_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The arn of the segment definition.</p>
    pub fn set_segment_definition_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.segment_definition_arn = input;
        self
    }
    /// <p>The arn of the segment definition.</p>
    pub fn get_segment_definition_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.segment_definition_arn
    }
    /// <p>The timestamp of when the segment definition was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the segment definition was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when the segment definition was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSegmentDefinitionOutput`](crate::operation::get_segment_definition::GetSegmentDefinitionOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`segment_definition_arn`](crate::operation::get_segment_definition::builders::GetSegmentDefinitionOutputBuilder::segment_definition_arn)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_segment_definition::GetSegmentDefinitionOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_segment_definition::GetSegmentDefinitionOutput {
            segment_definition_name: self.segment_definition_name,
            display_name: self.display_name,
            description: self.description,
            segment_groups: self.segment_groups,
            segment_definition_arn: self.segment_definition_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "segment_definition_arn",
                    "segment_definition_arn was not specified but it is required when building GetSegmentDefinitionOutput",
                )
            })?,
            created_at: self.created_at,
            tags: self.tags,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetSegmentDefinitionOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetSegmentDefinitionOutputBuilder");
        formatter.field("segment_definition_name", &self.segment_definition_name);
        formatter.field("display_name", &self.display_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("segment_groups", &"*** Sensitive Data Redacted ***");
        formatter.field("segment_definition_arn", &self.segment_definition_arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("tags", &self.tags);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
