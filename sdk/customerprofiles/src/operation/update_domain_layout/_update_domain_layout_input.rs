// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateDomainLayoutInput {
    /// <p>The unique name of the domain.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The unique name of the layout.</p>
    pub layout_definition_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the layout</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The display name of the layout</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>If set to true for a layout, this layout will be used by default to view data. If set to false, then the layout will not be used by default, but it can be used to view data by explicitly selecting it in the console.</p>
    pub is_default: ::std::option::Option<bool>,
    /// <p>The type of layout that can be used to view data under a Customer Profiles domain.</p>
    pub layout_type: ::std::option::Option<crate::types::LayoutType>,
    /// <p>A customizable layout that can be used to view data under a Customer Profiles domain.</p>
    pub layout: ::std::option::Option<::std::string::String>,
}
impl UpdateDomainLayoutInput {
    /// <p>The unique name of the domain.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The unique name of the layout.</p>
    pub fn layout_definition_name(&self) -> ::std::option::Option<&str> {
        self.layout_definition_name.as_deref()
    }
    /// <p>The description of the layout</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The display name of the layout</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>If set to true for a layout, this layout will be used by default to view data. If set to false, then the layout will not be used by default, but it can be used to view data by explicitly selecting it in the console.</p>
    pub fn is_default(&self) -> ::std::option::Option<bool> {
        self.is_default
    }
    /// <p>The type of layout that can be used to view data under a Customer Profiles domain.</p>
    pub fn layout_type(&self) -> ::std::option::Option<&crate::types::LayoutType> {
        self.layout_type.as_ref()
    }
    /// <p>A customizable layout that can be used to view data under a Customer Profiles domain.</p>
    pub fn layout(&self) -> ::std::option::Option<&str> {
        self.layout.as_deref()
    }
}
impl ::std::fmt::Debug for UpdateDomainLayoutInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateDomainLayoutInput");
        formatter.field("domain_name", &self.domain_name);
        formatter.field("layout_definition_name", &self.layout_definition_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("display_name", &self.display_name);
        formatter.field("is_default", &self.is_default);
        formatter.field("layout_type", &self.layout_type);
        formatter.field("layout", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl UpdateDomainLayoutInput {
    /// Creates a new builder-style object to manufacture [`UpdateDomainLayoutInput`](crate::operation::update_domain_layout::UpdateDomainLayoutInput).
    pub fn builder() -> crate::operation::update_domain_layout::builders::UpdateDomainLayoutInputBuilder {
        crate::operation::update_domain_layout::builders::UpdateDomainLayoutInputBuilder::default()
    }
}

/// A builder for [`UpdateDomainLayoutInput`](crate::operation::update_domain_layout::UpdateDomainLayoutInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateDomainLayoutInputBuilder {
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) layout_definition_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) is_default: ::std::option::Option<bool>,
    pub(crate) layout_type: ::std::option::Option<crate::types::LayoutType>,
    pub(crate) layout: ::std::option::Option<::std::string::String>,
}
impl UpdateDomainLayoutInputBuilder {
    /// <p>The unique name of the domain.</p>
    /// This field is required.
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>The unique name of the layout.</p>
    /// This field is required.
    pub fn layout_definition_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.layout_definition_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the layout.</p>
    pub fn set_layout_definition_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.layout_definition_name = input;
        self
    }
    /// <p>The unique name of the layout.</p>
    pub fn get_layout_definition_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.layout_definition_name
    }
    /// <p>The description of the layout</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the layout</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the layout</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The display name of the layout</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the layout</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name of the layout</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>If set to true for a layout, this layout will be used by default to view data. If set to false, then the layout will not be used by default, but it can be used to view data by explicitly selecting it in the console.</p>
    pub fn is_default(mut self, input: bool) -> Self {
        self.is_default = ::std::option::Option::Some(input);
        self
    }
    /// <p>If set to true for a layout, this layout will be used by default to view data. If set to false, then the layout will not be used by default, but it can be used to view data by explicitly selecting it in the console.</p>
    pub fn set_is_default(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_default = input;
        self
    }
    /// <p>If set to true for a layout, this layout will be used by default to view data. If set to false, then the layout will not be used by default, but it can be used to view data by explicitly selecting it in the console.</p>
    pub fn get_is_default(&self) -> &::std::option::Option<bool> {
        &self.is_default
    }
    /// <p>The type of layout that can be used to view data under a Customer Profiles domain.</p>
    pub fn layout_type(mut self, input: crate::types::LayoutType) -> Self {
        self.layout_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of layout that can be used to view data under a Customer Profiles domain.</p>
    pub fn set_layout_type(mut self, input: ::std::option::Option<crate::types::LayoutType>) -> Self {
        self.layout_type = input;
        self
    }
    /// <p>The type of layout that can be used to view data under a Customer Profiles domain.</p>
    pub fn get_layout_type(&self) -> &::std::option::Option<crate::types::LayoutType> {
        &self.layout_type
    }
    /// <p>A customizable layout that can be used to view data under a Customer Profiles domain.</p>
    pub fn layout(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.layout = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A customizable layout that can be used to view data under a Customer Profiles domain.</p>
    pub fn set_layout(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.layout = input;
        self
    }
    /// <p>A customizable layout that can be used to view data under a Customer Profiles domain.</p>
    pub fn get_layout(&self) -> &::std::option::Option<::std::string::String> {
        &self.layout
    }
    /// Consumes the builder and constructs a [`UpdateDomainLayoutInput`](crate::operation::update_domain_layout::UpdateDomainLayoutInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_domain_layout::UpdateDomainLayoutInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_domain_layout::UpdateDomainLayoutInput {
            domain_name: self.domain_name,
            layout_definition_name: self.layout_definition_name,
            description: self.description,
            display_name: self.display_name,
            is_default: self.is_default,
            layout_type: self.layout_type,
            layout: self.layout,
        })
    }
}
impl ::std::fmt::Debug for UpdateDomainLayoutInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateDomainLayoutInputBuilder");
        formatter.field("domain_name", &self.domain_name);
        formatter.field("layout_definition_name", &self.layout_definition_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("display_name", &self.display_name);
        formatter.field("is_default", &self.is_default);
        formatter.field("layout_type", &self.layout_type);
        formatter.field("layout", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
