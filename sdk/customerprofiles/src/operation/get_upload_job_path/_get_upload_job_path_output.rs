// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetUploadJobPathOutput {
    /// <p>The pre-signed S3 URL for uploading the CSV file associated with the upload job.</p>
    pub url: ::std::string::String,
    /// <p>The plaintext data key used to encrypt the upload file.</p>
    /// <p>To persist to the pre-signed url, use the client token and MD5 client token as header. The required headers are as follows:</p>
    /// <ul>
    /// <li>
    /// <p>x-amz-server-side-encryption-customer-key: Client Token</p></li>
    /// <li>
    /// <p>x-amz-server-side-encryption-customer-key-MD5: MD5 Client Token</p></li>
    /// <li>
    /// <p>x-amz-server-side-encryption-customer-algorithm: AES256</p></li>
    /// </ul>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The expiry timestamp for the pre-signed URL, after which the URL will no longer be valid.</p>
    pub valid_until: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetUploadJobPathOutput {
    /// <p>The pre-signed S3 URL for uploading the CSV file associated with the upload job.</p>
    pub fn url(&self) -> &str {
        use std::ops::Deref;
        self.url.deref()
    }
    /// <p>The plaintext data key used to encrypt the upload file.</p>
    /// <p>To persist to the pre-signed url, use the client token and MD5 client token as header. The required headers are as follows:</p>
    /// <ul>
    /// <li>
    /// <p>x-amz-server-side-encryption-customer-key: Client Token</p></li>
    /// <li>
    /// <p>x-amz-server-side-encryption-customer-key-MD5: MD5 Client Token</p></li>
    /// <li>
    /// <p>x-amz-server-side-encryption-customer-algorithm: AES256</p></li>
    /// </ul>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The expiry timestamp for the pre-signed URL, after which the URL will no longer be valid.</p>
    pub fn valid_until(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.valid_until.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetUploadJobPathOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetUploadJobPathOutput {
    /// Creates a new builder-style object to manufacture [`GetUploadJobPathOutput`](crate::operation::get_upload_job_path::GetUploadJobPathOutput).
    pub fn builder() -> crate::operation::get_upload_job_path::builders::GetUploadJobPathOutputBuilder {
        crate::operation::get_upload_job_path::builders::GetUploadJobPathOutputBuilder::default()
    }
}

/// A builder for [`GetUploadJobPathOutput`](crate::operation::get_upload_job_path::GetUploadJobPathOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetUploadJobPathOutputBuilder {
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) valid_until: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetUploadJobPathOutputBuilder {
    /// <p>The pre-signed S3 URL for uploading the CSV file associated with the upload job.</p>
    /// This field is required.
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pre-signed S3 URL for uploading the CSV file associated with the upload job.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The pre-signed S3 URL for uploading the CSV file associated with the upload job.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// <p>The plaintext data key used to encrypt the upload file.</p>
    /// <p>To persist to the pre-signed url, use the client token and MD5 client token as header. The required headers are as follows:</p>
    /// <ul>
    /// <li>
    /// <p>x-amz-server-side-encryption-customer-key: Client Token</p></li>
    /// <li>
    /// <p>x-amz-server-side-encryption-customer-key-MD5: MD5 Client Token</p></li>
    /// <li>
    /// <p>x-amz-server-side-encryption-customer-algorithm: AES256</p></li>
    /// </ul>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The plaintext data key used to encrypt the upload file.</p>
    /// <p>To persist to the pre-signed url, use the client token and MD5 client token as header. The required headers are as follows:</p>
    /// <ul>
    /// <li>
    /// <p>x-amz-server-side-encryption-customer-key: Client Token</p></li>
    /// <li>
    /// <p>x-amz-server-side-encryption-customer-key-MD5: MD5 Client Token</p></li>
    /// <li>
    /// <p>x-amz-server-side-encryption-customer-algorithm: AES256</p></li>
    /// </ul>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The plaintext data key used to encrypt the upload file.</p>
    /// <p>To persist to the pre-signed url, use the client token and MD5 client token as header. The required headers are as follows:</p>
    /// <ul>
    /// <li>
    /// <p>x-amz-server-side-encryption-customer-key: Client Token</p></li>
    /// <li>
    /// <p>x-amz-server-side-encryption-customer-key-MD5: MD5 Client Token</p></li>
    /// <li>
    /// <p>x-amz-server-side-encryption-customer-algorithm: AES256</p></li>
    /// </ul>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The expiry timestamp for the pre-signed URL, after which the URL will no longer be valid.</p>
    pub fn valid_until(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.valid_until = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expiry timestamp for the pre-signed URL, after which the URL will no longer be valid.</p>
    pub fn set_valid_until(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.valid_until = input;
        self
    }
    /// <p>The expiry timestamp for the pre-signed URL, after which the URL will no longer be valid.</p>
    pub fn get_valid_until(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.valid_until
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetUploadJobPathOutput`](crate::operation::get_upload_job_path::GetUploadJobPathOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`url`](crate::operation::get_upload_job_path::builders::GetUploadJobPathOutputBuilder::url)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_upload_job_path::GetUploadJobPathOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_upload_job_path::GetUploadJobPathOutput {
            url: self.url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "url",
                    "url was not specified but it is required when building GetUploadJobPathOutput",
                )
            })?,
            client_token: self.client_token,
            valid_until: self.valid_until,
            _request_id: self._request_id,
        })
    }
}
