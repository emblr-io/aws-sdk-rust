// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct BatchGetCalculatedAttributeForProfileOutput {
    /// <p>List of errors for calculated attribute values that could not be retrieved.</p>
    pub errors: ::std::option::Option<::std::vec::Vec<crate::types::BatchGetCalculatedAttributeForProfileError>>,
    /// <p>List of calculated attribute values retrieved.</p>
    pub calculated_attribute_values: ::std::option::Option<::std::vec::Vec<crate::types::CalculatedAttributeValue>>,
    /// <p>Overrides the condition block within the original calculated attribute definition.</p>
    pub condition_overrides: ::std::option::Option<crate::types::ConditionOverrides>,
    _request_id: Option<String>,
}
impl BatchGetCalculatedAttributeForProfileOutput {
    /// <p>List of errors for calculated attribute values that could not be retrieved.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.errors.is_none()`.
    pub fn errors(&self) -> &[crate::types::BatchGetCalculatedAttributeForProfileError] {
        self.errors.as_deref().unwrap_or_default()
    }
    /// <p>List of calculated attribute values retrieved.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.calculated_attribute_values.is_none()`.
    pub fn calculated_attribute_values(&self) -> &[crate::types::CalculatedAttributeValue] {
        self.calculated_attribute_values.as_deref().unwrap_or_default()
    }
    /// <p>Overrides the condition block within the original calculated attribute definition.</p>
    pub fn condition_overrides(&self) -> ::std::option::Option<&crate::types::ConditionOverrides> {
        self.condition_overrides.as_ref()
    }
}
impl ::std::fmt::Debug for BatchGetCalculatedAttributeForProfileOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BatchGetCalculatedAttributeForProfileOutput");
        formatter.field("errors", &self.errors);
        formatter.field("calculated_attribute_values", &self.calculated_attribute_values);
        formatter.field("condition_overrides", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for BatchGetCalculatedAttributeForProfileOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchGetCalculatedAttributeForProfileOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetCalculatedAttributeForProfileOutput`](crate::operation::batch_get_calculated_attribute_for_profile::BatchGetCalculatedAttributeForProfileOutput).
    pub fn builder() -> crate::operation::batch_get_calculated_attribute_for_profile::builders::BatchGetCalculatedAttributeForProfileOutputBuilder {
        crate::operation::batch_get_calculated_attribute_for_profile::builders::BatchGetCalculatedAttributeForProfileOutputBuilder::default()
    }
}

/// A builder for [`BatchGetCalculatedAttributeForProfileOutput`](crate::operation::batch_get_calculated_attribute_for_profile::BatchGetCalculatedAttributeForProfileOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct BatchGetCalculatedAttributeForProfileOutputBuilder {
    pub(crate) errors: ::std::option::Option<::std::vec::Vec<crate::types::BatchGetCalculatedAttributeForProfileError>>,
    pub(crate) calculated_attribute_values: ::std::option::Option<::std::vec::Vec<crate::types::CalculatedAttributeValue>>,
    pub(crate) condition_overrides: ::std::option::Option<crate::types::ConditionOverrides>,
    _request_id: Option<String>,
}
impl BatchGetCalculatedAttributeForProfileOutputBuilder {
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>List of errors for calculated attribute values that could not be retrieved.</p>
    pub fn errors(mut self, input: crate::types::BatchGetCalculatedAttributeForProfileError) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of errors for calculated attribute values that could not be retrieved.</p>
    pub fn set_errors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BatchGetCalculatedAttributeForProfileError>>) -> Self {
        self.errors = input;
        self
    }
    /// <p>List of errors for calculated attribute values that could not be retrieved.</p>
    pub fn get_errors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BatchGetCalculatedAttributeForProfileError>> {
        &self.errors
    }
    /// Appends an item to `calculated_attribute_values`.
    ///
    /// To override the contents of this collection use [`set_calculated_attribute_values`](Self::set_calculated_attribute_values).
    ///
    /// <p>List of calculated attribute values retrieved.</p>
    pub fn calculated_attribute_values(mut self, input: crate::types::CalculatedAttributeValue) -> Self {
        let mut v = self.calculated_attribute_values.unwrap_or_default();
        v.push(input);
        self.calculated_attribute_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of calculated attribute values retrieved.</p>
    pub fn set_calculated_attribute_values(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CalculatedAttributeValue>>) -> Self {
        self.calculated_attribute_values = input;
        self
    }
    /// <p>List of calculated attribute values retrieved.</p>
    pub fn get_calculated_attribute_values(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CalculatedAttributeValue>> {
        &self.calculated_attribute_values
    }
    /// <p>Overrides the condition block within the original calculated attribute definition.</p>
    pub fn condition_overrides(mut self, input: crate::types::ConditionOverrides) -> Self {
        self.condition_overrides = ::std::option::Option::Some(input);
        self
    }
    /// <p>Overrides the condition block within the original calculated attribute definition.</p>
    pub fn set_condition_overrides(mut self, input: ::std::option::Option<crate::types::ConditionOverrides>) -> Self {
        self.condition_overrides = input;
        self
    }
    /// <p>Overrides the condition block within the original calculated attribute definition.</p>
    pub fn get_condition_overrides(&self) -> &::std::option::Option<crate::types::ConditionOverrides> {
        &self.condition_overrides
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchGetCalculatedAttributeForProfileOutput`](crate::operation::batch_get_calculated_attribute_for_profile::BatchGetCalculatedAttributeForProfileOutput).
    pub fn build(self) -> crate::operation::batch_get_calculated_attribute_for_profile::BatchGetCalculatedAttributeForProfileOutput {
        crate::operation::batch_get_calculated_attribute_for_profile::BatchGetCalculatedAttributeForProfileOutput {
            errors: self.errors,
            calculated_attribute_values: self.calculated_attribute_values,
            condition_overrides: self.condition_overrides,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for BatchGetCalculatedAttributeForProfileOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BatchGetCalculatedAttributeForProfileOutputBuilder");
        formatter.field("errors", &self.errors);
        formatter.field("calculated_attribute_values", &self.calculated_attribute_values);
        formatter.field("condition_overrides", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
