// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct BatchGetCalculatedAttributeForProfileInput {
    /// <p>The unique name of the calculated attribute.</p>
    pub calculated_attribute_name: ::std::option::Option<::std::string::String>,
    /// <p>The unique name of the domain.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>List of unique identifiers for customer profiles to retrieve.</p>
    pub profile_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Overrides the condition block within the original calculated attribute definition.</p>
    pub condition_overrides: ::std::option::Option<crate::types::ConditionOverrides>,
}
impl BatchGetCalculatedAttributeForProfileInput {
    /// <p>The unique name of the calculated attribute.</p>
    pub fn calculated_attribute_name(&self) -> ::std::option::Option<&str> {
        self.calculated_attribute_name.as_deref()
    }
    /// <p>The unique name of the domain.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>List of unique identifiers for customer profiles to retrieve.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.profile_ids.is_none()`.
    pub fn profile_ids(&self) -> &[::std::string::String] {
        self.profile_ids.as_deref().unwrap_or_default()
    }
    /// <p>Overrides the condition block within the original calculated attribute definition.</p>
    pub fn condition_overrides(&self) -> ::std::option::Option<&crate::types::ConditionOverrides> {
        self.condition_overrides.as_ref()
    }
}
impl ::std::fmt::Debug for BatchGetCalculatedAttributeForProfileInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BatchGetCalculatedAttributeForProfileInput");
        formatter.field("calculated_attribute_name", &self.calculated_attribute_name);
        formatter.field("domain_name", &self.domain_name);
        formatter.field("profile_ids", &self.profile_ids);
        formatter.field("condition_overrides", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl BatchGetCalculatedAttributeForProfileInput {
    /// Creates a new builder-style object to manufacture [`BatchGetCalculatedAttributeForProfileInput`](crate::operation::batch_get_calculated_attribute_for_profile::BatchGetCalculatedAttributeForProfileInput).
    pub fn builder() -> crate::operation::batch_get_calculated_attribute_for_profile::builders::BatchGetCalculatedAttributeForProfileInputBuilder {
        crate::operation::batch_get_calculated_attribute_for_profile::builders::BatchGetCalculatedAttributeForProfileInputBuilder::default()
    }
}

/// A builder for [`BatchGetCalculatedAttributeForProfileInput`](crate::operation::batch_get_calculated_attribute_for_profile::BatchGetCalculatedAttributeForProfileInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct BatchGetCalculatedAttributeForProfileInputBuilder {
    pub(crate) calculated_attribute_name: ::std::option::Option<::std::string::String>,
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) profile_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) condition_overrides: ::std::option::Option<crate::types::ConditionOverrides>,
}
impl BatchGetCalculatedAttributeForProfileInputBuilder {
    /// <p>The unique name of the calculated attribute.</p>
    /// This field is required.
    pub fn calculated_attribute_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.calculated_attribute_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the calculated attribute.</p>
    pub fn set_calculated_attribute_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.calculated_attribute_name = input;
        self
    }
    /// <p>The unique name of the calculated attribute.</p>
    pub fn get_calculated_attribute_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.calculated_attribute_name
    }
    /// <p>The unique name of the domain.</p>
    /// This field is required.
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// Appends an item to `profile_ids`.
    ///
    /// To override the contents of this collection use [`set_profile_ids`](Self::set_profile_ids).
    ///
    /// <p>List of unique identifiers for customer profiles to retrieve.</p>
    pub fn profile_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.profile_ids.unwrap_or_default();
        v.push(input.into());
        self.profile_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of unique identifiers for customer profiles to retrieve.</p>
    pub fn set_profile_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.profile_ids = input;
        self
    }
    /// <p>List of unique identifiers for customer profiles to retrieve.</p>
    pub fn get_profile_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.profile_ids
    }
    /// <p>Overrides the condition block within the original calculated attribute definition.</p>
    pub fn condition_overrides(mut self, input: crate::types::ConditionOverrides) -> Self {
        self.condition_overrides = ::std::option::Option::Some(input);
        self
    }
    /// <p>Overrides the condition block within the original calculated attribute definition.</p>
    pub fn set_condition_overrides(mut self, input: ::std::option::Option<crate::types::ConditionOverrides>) -> Self {
        self.condition_overrides = input;
        self
    }
    /// <p>Overrides the condition block within the original calculated attribute definition.</p>
    pub fn get_condition_overrides(&self) -> &::std::option::Option<crate::types::ConditionOverrides> {
        &self.condition_overrides
    }
    /// Consumes the builder and constructs a [`BatchGetCalculatedAttributeForProfileInput`](crate::operation::batch_get_calculated_attribute_for_profile::BatchGetCalculatedAttributeForProfileInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_get_calculated_attribute_for_profile::BatchGetCalculatedAttributeForProfileInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::batch_get_calculated_attribute_for_profile::BatchGetCalculatedAttributeForProfileInput {
                calculated_attribute_name: self.calculated_attribute_name,
                domain_name: self.domain_name,
                profile_ids: self.profile_ids,
                condition_overrides: self.condition_overrides,
            },
        )
    }
}
impl ::std::fmt::Debug for BatchGetCalculatedAttributeForProfileInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BatchGetCalculatedAttributeForProfileInputBuilder");
        formatter.field("calculated_attribute_name", &self.calculated_attribute_name);
        formatter.field("domain_name", &self.domain_name);
        formatter.field("profile_ids", &self.profile_ids);
        formatter.field("condition_overrides", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
