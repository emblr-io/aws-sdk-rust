// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetUploadJobOutput {
    /// <p>The unique identifier of the upload job.</p>
    pub job_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique name of the upload job. Could be a file name to identify the upload job.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The status describing the status for the upload job. The following are Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><b>CREATED</b>: The upload job has been created, but has not started processing yet.</p></li>
    /// <li>
    /// <p><b>IN_PROGRESS</b>: The upload job is currently in progress, ingesting and processing the profile data.</p></li>
    /// <li>
    /// <p><b>PARTIALLY_SUCCEEDED</b>: The upload job has successfully completed the ingestion and processing of all profile data.</p></li>
    /// <li>
    /// <p><b>SUCCEEDED</b>: The upload job has successfully completed the ingestion and processing of all profile data.</p></li>
    /// <li>
    /// <p><b>FAILED</b>: The upload job has failed to complete.</p></li>
    /// <li>
    /// <p><b>STOPPED</b>: The upload job has been manually stopped or terminated before completion.</p></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::UploadJobStatus>,
    /// <p>The reason for the current status of the upload job. Possible reasons:</p>
    /// <ul>
    /// <li>
    /// <p><b>VALIDATION_FAILURE</b>: The upload job has encountered an error or issue and was unable to complete the profile data ingestion.</p></li>
    /// <li>
    /// <p><b>INTERNAL_FAILURE</b>: Failure caused from service side</p></li>
    /// </ul>
    pub status_reason: ::std::option::Option<crate::types::StatusReason>,
    /// <p>The timestamp when the upload job was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the upload job was completed.</p>
    pub completed_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The mapping between CSV Columns and Profile Object attributes for the upload job.</p>
    pub fields: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ObjectTypeField>>,
    /// <p>The unique key columns used for de-duping the keys in the upload job.</p>
    pub unique_key: ::std::option::Option<::std::string::String>,
    /// <p>The summary of results for the upload job, including the number of updated, created, and failed records.</p>
    pub results_summary: ::std::option::Option<crate::types::ResultsSummary>,
    /// <p>The expiry duration for the profiles ingested with the upload job.</p>
    pub data_expiry: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl GetUploadJobOutput {
    /// <p>The unique identifier of the upload job.</p>
    pub fn job_id(&self) -> ::std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The unique name of the upload job. Could be a file name to identify the upload job.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The status describing the status for the upload job. The following are Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><b>CREATED</b>: The upload job has been created, but has not started processing yet.</p></li>
    /// <li>
    /// <p><b>IN_PROGRESS</b>: The upload job is currently in progress, ingesting and processing the profile data.</p></li>
    /// <li>
    /// <p><b>PARTIALLY_SUCCEEDED</b>: The upload job has successfully completed the ingestion and processing of all profile data.</p></li>
    /// <li>
    /// <p><b>SUCCEEDED</b>: The upload job has successfully completed the ingestion and processing of all profile data.</p></li>
    /// <li>
    /// <p><b>FAILED</b>: The upload job has failed to complete.</p></li>
    /// <li>
    /// <p><b>STOPPED</b>: The upload job has been manually stopped or terminated before completion.</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::UploadJobStatus> {
        self.status.as_ref()
    }
    /// <p>The reason for the current status of the upload job. Possible reasons:</p>
    /// <ul>
    /// <li>
    /// <p><b>VALIDATION_FAILURE</b>: The upload job has encountered an error or issue and was unable to complete the profile data ingestion.</p></li>
    /// <li>
    /// <p><b>INTERNAL_FAILURE</b>: Failure caused from service side</p></li>
    /// </ul>
    pub fn status_reason(&self) -> ::std::option::Option<&crate::types::StatusReason> {
        self.status_reason.as_ref()
    }
    /// <p>The timestamp when the upload job was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp when the upload job was completed.</p>
    pub fn completed_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.completed_at.as_ref()
    }
    /// <p>The mapping between CSV Columns and Profile Object attributes for the upload job.</p>
    pub fn fields(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::ObjectTypeField>> {
        self.fields.as_ref()
    }
    /// <p>The unique key columns used for de-duping the keys in the upload job.</p>
    pub fn unique_key(&self) -> ::std::option::Option<&str> {
        self.unique_key.as_deref()
    }
    /// <p>The summary of results for the upload job, including the number of updated, created, and failed records.</p>
    pub fn results_summary(&self) -> ::std::option::Option<&crate::types::ResultsSummary> {
        self.results_summary.as_ref()
    }
    /// <p>The expiry duration for the profiles ingested with the upload job.</p>
    pub fn data_expiry(&self) -> ::std::option::Option<i32> {
        self.data_expiry
    }
}
impl ::std::fmt::Debug for GetUploadJobOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetUploadJobOutput");
        formatter.field("job_id", &self.job_id);
        formatter.field("display_name", &self.display_name);
        formatter.field("status", &self.status);
        formatter.field("status_reason", &self.status_reason);
        formatter.field("created_at", &self.created_at);
        formatter.field("completed_at", &self.completed_at);
        formatter.field("fields", &"*** Sensitive Data Redacted ***");
        formatter.field("unique_key", &self.unique_key);
        formatter.field("results_summary", &self.results_summary);
        formatter.field("data_expiry", &self.data_expiry);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetUploadJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetUploadJobOutput {
    /// Creates a new builder-style object to manufacture [`GetUploadJobOutput`](crate::operation::get_upload_job::GetUploadJobOutput).
    pub fn builder() -> crate::operation::get_upload_job::builders::GetUploadJobOutputBuilder {
        crate::operation::get_upload_job::builders::GetUploadJobOutputBuilder::default()
    }
}

/// A builder for [`GetUploadJobOutput`](crate::operation::get_upload_job::GetUploadJobOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetUploadJobOutputBuilder {
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::UploadJobStatus>,
    pub(crate) status_reason: ::std::option::Option<crate::types::StatusReason>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) completed_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) fields: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ObjectTypeField>>,
    pub(crate) unique_key: ::std::option::Option<::std::string::String>,
    pub(crate) results_summary: ::std::option::Option<crate::types::ResultsSummary>,
    pub(crate) data_expiry: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl GetUploadJobOutputBuilder {
    /// <p>The unique identifier of the upload job.</p>
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the upload job.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The unique identifier of the upload job.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>The unique name of the upload job. Could be a file name to identify the upload job.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the upload job. Could be a file name to identify the upload job.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The unique name of the upload job. Could be a file name to identify the upload job.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The status describing the status for the upload job. The following are Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><b>CREATED</b>: The upload job has been created, but has not started processing yet.</p></li>
    /// <li>
    /// <p><b>IN_PROGRESS</b>: The upload job is currently in progress, ingesting and processing the profile data.</p></li>
    /// <li>
    /// <p><b>PARTIALLY_SUCCEEDED</b>: The upload job has successfully completed the ingestion and processing of all profile data.</p></li>
    /// <li>
    /// <p><b>SUCCEEDED</b>: The upload job has successfully completed the ingestion and processing of all profile data.</p></li>
    /// <li>
    /// <p><b>FAILED</b>: The upload job has failed to complete.</p></li>
    /// <li>
    /// <p><b>STOPPED</b>: The upload job has been manually stopped or terminated before completion.</p></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::UploadJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status describing the status for the upload job. The following are Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><b>CREATED</b>: The upload job has been created, but has not started processing yet.</p></li>
    /// <li>
    /// <p><b>IN_PROGRESS</b>: The upload job is currently in progress, ingesting and processing the profile data.</p></li>
    /// <li>
    /// <p><b>PARTIALLY_SUCCEEDED</b>: The upload job has successfully completed the ingestion and processing of all profile data.</p></li>
    /// <li>
    /// <p><b>SUCCEEDED</b>: The upload job has successfully completed the ingestion and processing of all profile data.</p></li>
    /// <li>
    /// <p><b>FAILED</b>: The upload job has failed to complete.</p></li>
    /// <li>
    /// <p><b>STOPPED</b>: The upload job has been manually stopped or terminated before completion.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::UploadJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status describing the status for the upload job. The following are Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><b>CREATED</b>: The upload job has been created, but has not started processing yet.</p></li>
    /// <li>
    /// <p><b>IN_PROGRESS</b>: The upload job is currently in progress, ingesting and processing the profile data.</p></li>
    /// <li>
    /// <p><b>PARTIALLY_SUCCEEDED</b>: The upload job has successfully completed the ingestion and processing of all profile data.</p></li>
    /// <li>
    /// <p><b>SUCCEEDED</b>: The upload job has successfully completed the ingestion and processing of all profile data.</p></li>
    /// <li>
    /// <p><b>FAILED</b>: The upload job has failed to complete.</p></li>
    /// <li>
    /// <p><b>STOPPED</b>: The upload job has been manually stopped or terminated before completion.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::UploadJobStatus> {
        &self.status
    }
    /// <p>The reason for the current status of the upload job. Possible reasons:</p>
    /// <ul>
    /// <li>
    /// <p><b>VALIDATION_FAILURE</b>: The upload job has encountered an error or issue and was unable to complete the profile data ingestion.</p></li>
    /// <li>
    /// <p><b>INTERNAL_FAILURE</b>: Failure caused from service side</p></li>
    /// </ul>
    pub fn status_reason(mut self, input: crate::types::StatusReason) -> Self {
        self.status_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>The reason for the current status of the upload job. Possible reasons:</p>
    /// <ul>
    /// <li>
    /// <p><b>VALIDATION_FAILURE</b>: The upload job has encountered an error or issue and was unable to complete the profile data ingestion.</p></li>
    /// <li>
    /// <p><b>INTERNAL_FAILURE</b>: Failure caused from service side</p></li>
    /// </ul>
    pub fn set_status_reason(mut self, input: ::std::option::Option<crate::types::StatusReason>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The reason for the current status of the upload job. Possible reasons:</p>
    /// <ul>
    /// <li>
    /// <p><b>VALIDATION_FAILURE</b>: The upload job has encountered an error or issue and was unable to complete the profile data ingestion.</p></li>
    /// <li>
    /// <p><b>INTERNAL_FAILURE</b>: Failure caused from service side</p></li>
    /// </ul>
    pub fn get_status_reason(&self) -> &::std::option::Option<crate::types::StatusReason> {
        &self.status_reason
    }
    /// <p>The timestamp when the upload job was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the upload job was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the upload job was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when the upload job was completed.</p>
    pub fn completed_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.completed_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the upload job was completed.</p>
    pub fn set_completed_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.completed_at = input;
        self
    }
    /// <p>The timestamp when the upload job was completed.</p>
    pub fn get_completed_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.completed_at
    }
    /// Adds a key-value pair to `fields`.
    ///
    /// To override the contents of this collection use [`set_fields`](Self::set_fields).
    ///
    /// <p>The mapping between CSV Columns and Profile Object attributes for the upload job.</p>
    pub fn fields(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::ObjectTypeField) -> Self {
        let mut hash_map = self.fields.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.fields = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The mapping between CSV Columns and Profile Object attributes for the upload job.</p>
    pub fn set_fields(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ObjectTypeField>>,
    ) -> Self {
        self.fields = input;
        self
    }
    /// <p>The mapping between CSV Columns and Profile Object attributes for the upload job.</p>
    pub fn get_fields(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ObjectTypeField>> {
        &self.fields
    }
    /// <p>The unique key columns used for de-duping the keys in the upload job.</p>
    pub fn unique_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.unique_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique key columns used for de-duping the keys in the upload job.</p>
    pub fn set_unique_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.unique_key = input;
        self
    }
    /// <p>The unique key columns used for de-duping the keys in the upload job.</p>
    pub fn get_unique_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.unique_key
    }
    /// <p>The summary of results for the upload job, including the number of updated, created, and failed records.</p>
    pub fn results_summary(mut self, input: crate::types::ResultsSummary) -> Self {
        self.results_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>The summary of results for the upload job, including the number of updated, created, and failed records.</p>
    pub fn set_results_summary(mut self, input: ::std::option::Option<crate::types::ResultsSummary>) -> Self {
        self.results_summary = input;
        self
    }
    /// <p>The summary of results for the upload job, including the number of updated, created, and failed records.</p>
    pub fn get_results_summary(&self) -> &::std::option::Option<crate::types::ResultsSummary> {
        &self.results_summary
    }
    /// <p>The expiry duration for the profiles ingested with the upload job.</p>
    pub fn data_expiry(mut self, input: i32) -> Self {
        self.data_expiry = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expiry duration for the profiles ingested with the upload job.</p>
    pub fn set_data_expiry(mut self, input: ::std::option::Option<i32>) -> Self {
        self.data_expiry = input;
        self
    }
    /// <p>The expiry duration for the profiles ingested with the upload job.</p>
    pub fn get_data_expiry(&self) -> &::std::option::Option<i32> {
        &self.data_expiry
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetUploadJobOutput`](crate::operation::get_upload_job::GetUploadJobOutput).
    pub fn build(self) -> crate::operation::get_upload_job::GetUploadJobOutput {
        crate::operation::get_upload_job::GetUploadJobOutput {
            job_id: self.job_id,
            display_name: self.display_name,
            status: self.status,
            status_reason: self.status_reason,
            created_at: self.created_at,
            completed_at: self.completed_at,
            fields: self.fields,
            unique_key: self.unique_key,
            results_summary: self.results_summary,
            data_expiry: self.data_expiry,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for GetUploadJobOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetUploadJobOutputBuilder");
        formatter.field("job_id", &self.job_id);
        formatter.field("display_name", &self.display_name);
        formatter.field("status", &self.status);
        formatter.field("status_reason", &self.status_reason);
        formatter.field("created_at", &self.created_at);
        formatter.field("completed_at", &self.completed_at);
        formatter.field("fields", &"*** Sensitive Data Redacted ***");
        formatter.field("unique_key", &self.unique_key);
        formatter.field("results_summary", &self.results_summary);
        formatter.field("data_expiry", &self.data_expiry);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
