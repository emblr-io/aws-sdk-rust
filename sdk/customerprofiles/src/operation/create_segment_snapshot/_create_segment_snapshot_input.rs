// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateSegmentSnapshotInput {
    /// <p>The unique name of the domain.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the segment definition used in this snapshot request.</p>
    pub segment_definition_name: ::std::option::Option<::std::string::String>,
    /// <p>The format in which the segment will be exported.</p>
    pub data_format: ::std::option::Option<crate::types::DataFormat>,
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the exported segment.</p>
    pub encryption_key: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role that allows Customer Profiles service principal to assume the role for conducting KMS and S3 operations.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The destination to which the segment will be exported. This field must be provided if the request is not submitted from the Amazon Connect Admin Website.</p>
    pub destination_uri: ::std::option::Option<::std::string::String>,
}
impl CreateSegmentSnapshotInput {
    /// <p>The unique name of the domain.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The name of the segment definition used in this snapshot request.</p>
    pub fn segment_definition_name(&self) -> ::std::option::Option<&str> {
        self.segment_definition_name.as_deref()
    }
    /// <p>The format in which the segment will be exported.</p>
    pub fn data_format(&self) -> ::std::option::Option<&crate::types::DataFormat> {
        self.data_format.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the exported segment.</p>
    pub fn encryption_key(&self) -> ::std::option::Option<&str> {
        self.encryption_key.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that allows Customer Profiles service principal to assume the role for conducting KMS and S3 operations.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The destination to which the segment will be exported. This field must be provided if the request is not submitted from the Amazon Connect Admin Website.</p>
    pub fn destination_uri(&self) -> ::std::option::Option<&str> {
        self.destination_uri.as_deref()
    }
}
impl CreateSegmentSnapshotInput {
    /// Creates a new builder-style object to manufacture [`CreateSegmentSnapshotInput`](crate::operation::create_segment_snapshot::CreateSegmentSnapshotInput).
    pub fn builder() -> crate::operation::create_segment_snapshot::builders::CreateSegmentSnapshotInputBuilder {
        crate::operation::create_segment_snapshot::builders::CreateSegmentSnapshotInputBuilder::default()
    }
}

/// A builder for [`CreateSegmentSnapshotInput`](crate::operation::create_segment_snapshot::CreateSegmentSnapshotInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateSegmentSnapshotInputBuilder {
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) segment_definition_name: ::std::option::Option<::std::string::String>,
    pub(crate) data_format: ::std::option::Option<crate::types::DataFormat>,
    pub(crate) encryption_key: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) destination_uri: ::std::option::Option<::std::string::String>,
}
impl CreateSegmentSnapshotInputBuilder {
    /// <p>The unique name of the domain.</p>
    /// This field is required.
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>The name of the segment definition used in this snapshot request.</p>
    /// This field is required.
    pub fn segment_definition_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.segment_definition_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the segment definition used in this snapshot request.</p>
    pub fn set_segment_definition_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.segment_definition_name = input;
        self
    }
    /// <p>The name of the segment definition used in this snapshot request.</p>
    pub fn get_segment_definition_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.segment_definition_name
    }
    /// <p>The format in which the segment will be exported.</p>
    /// This field is required.
    pub fn data_format(mut self, input: crate::types::DataFormat) -> Self {
        self.data_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format in which the segment will be exported.</p>
    pub fn set_data_format(mut self, input: ::std::option::Option<crate::types::DataFormat>) -> Self {
        self.data_format = input;
        self
    }
    /// <p>The format in which the segment will be exported.</p>
    pub fn get_data_format(&self) -> &::std::option::Option<crate::types::DataFormat> {
        &self.data_format
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the exported segment.</p>
    pub fn encryption_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encryption_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the exported segment.</p>
    pub fn set_encryption_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encryption_key = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the exported segment.</p>
    pub fn get_encryption_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.encryption_key
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that allows Customer Profiles service principal to assume the role for conducting KMS and S3 operations.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that allows Customer Profiles service principal to assume the role for conducting KMS and S3 operations.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that allows Customer Profiles service principal to assume the role for conducting KMS and S3 operations.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The destination to which the segment will be exported. This field must be provided if the request is not submitted from the Amazon Connect Admin Website.</p>
    pub fn destination_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The destination to which the segment will be exported. This field must be provided if the request is not submitted from the Amazon Connect Admin Website.</p>
    pub fn set_destination_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_uri = input;
        self
    }
    /// <p>The destination to which the segment will be exported. This field must be provided if the request is not submitted from the Amazon Connect Admin Website.</p>
    pub fn get_destination_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_uri
    }
    /// Consumes the builder and constructs a [`CreateSegmentSnapshotInput`](crate::operation::create_segment_snapshot::CreateSegmentSnapshotInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_segment_snapshot::CreateSegmentSnapshotInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_segment_snapshot::CreateSegmentSnapshotInput {
            domain_name: self.domain_name,
            segment_definition_name: self.segment_definition_name,
            data_format: self.data_format,
            encryption_key: self.encryption_key,
            role_arn: self.role_arn,
            destination_uri: self.destination_uri,
        })
    }
}
