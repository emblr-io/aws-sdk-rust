// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteEventTriggerInput {
    /// <p>The unique name of the domain.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The unique name of the event trigger.</p>
    pub event_trigger_name: ::std::option::Option<::std::string::String>,
}
impl DeleteEventTriggerInput {
    /// <p>The unique name of the domain.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The unique name of the event trigger.</p>
    pub fn event_trigger_name(&self) -> ::std::option::Option<&str> {
        self.event_trigger_name.as_deref()
    }
}
impl DeleteEventTriggerInput {
    /// Creates a new builder-style object to manufacture [`DeleteEventTriggerInput`](crate::operation::delete_event_trigger::DeleteEventTriggerInput).
    pub fn builder() -> crate::operation::delete_event_trigger::builders::DeleteEventTriggerInputBuilder {
        crate::operation::delete_event_trigger::builders::DeleteEventTriggerInputBuilder::default()
    }
}

/// A builder for [`DeleteEventTriggerInput`](crate::operation::delete_event_trigger::DeleteEventTriggerInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeleteEventTriggerInputBuilder {
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) event_trigger_name: ::std::option::Option<::std::string::String>,
}
impl DeleteEventTriggerInputBuilder {
    /// <p>The unique name of the domain.</p>
    /// This field is required.
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>The unique name of the event trigger.</p>
    /// This field is required.
    pub fn event_trigger_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_trigger_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the event trigger.</p>
    pub fn set_event_trigger_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_trigger_name = input;
        self
    }
    /// <p>The unique name of the event trigger.</p>
    pub fn get_event_trigger_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_trigger_name
    }
    /// Consumes the builder and constructs a [`DeleteEventTriggerInput`](crate::operation::delete_event_trigger::DeleteEventTriggerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::delete_event_trigger::DeleteEventTriggerInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::delete_event_trigger::DeleteEventTriggerInput {
            domain_name: self.domain_name,
            event_trigger_name: self.event_trigger_name,
        })
    }
}
