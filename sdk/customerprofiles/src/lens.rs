// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_similar_profiles_output_output_next_token(
    input: &crate::operation::get_similar_profiles::GetSimilarProfilesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_domain_layouts_output_output_next_token(
    input: &crate::operation::list_domain_layouts::ListDomainLayoutsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_event_streams_output_output_next_token(
    input: &crate::operation::list_event_streams::ListEventStreamsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_event_triggers_output_output_next_token(
    input: &crate::operation::list_event_triggers::ListEventTriggersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_object_type_attributes_output_output_next_token(
    input: &crate::operation::list_object_type_attributes::ListObjectTypeAttributesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_rule_based_matches_output_output_next_token(
    input: &crate::operation::list_rule_based_matches::ListRuleBasedMatchesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_segment_definitions_output_output_next_token(
    input: &crate::operation::list_segment_definitions::ListSegmentDefinitionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_upload_jobs_output_output_next_token(
    input: &crate::operation::list_upload_jobs::ListUploadJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_similar_profiles_output_output_profile_ids(
    input: crate::operation::get_similar_profiles::GetSimilarProfilesOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.profile_ids?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_domain_layouts_output_output_items(
    input: crate::operation::list_domain_layouts::ListDomainLayoutsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::LayoutItem>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_event_streams_output_output_items(
    input: crate::operation::list_event_streams::ListEventStreamsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EventStreamSummary>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_event_triggers_output_output_items(
    input: crate::operation::list_event_triggers::ListEventTriggersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EventTriggerSummaryItem>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_object_type_attributes_output_output_items(
    input: crate::operation::list_object_type_attributes::ListObjectTypeAttributesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListObjectTypeAttributeItem>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_rule_based_matches_output_output_match_ids(
    input: crate::operation::list_rule_based_matches::ListRuleBasedMatchesOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.match_ids?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_segment_definitions_output_output_items(
    input: crate::operation::list_segment_definitions::ListSegmentDefinitionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SegmentDefinitionItem>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_upload_jobs_output_output_items(
    input: crate::operation::list_upload_jobs::ListUploadJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::UploadJobItem>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}
