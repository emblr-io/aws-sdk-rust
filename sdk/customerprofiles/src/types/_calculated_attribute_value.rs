// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The object containing the values of a single calculated attribute value.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CalculatedAttributeValue {
    /// <p>The unique name of the calculated attribute.</p>
    pub calculated_attribute_name: ::std::option::Option<::std::string::String>,
    /// <p>The display name of the calculated attribute.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the calculated attribute's value is based on partial data. If the data is partial, it is set to true.</p>
    pub is_data_partial: ::std::option::Option<::std::string::String>,
    /// <p>The profile id belonging to this calculated attribute value.</p>
    pub profile_id: ::std::option::Option<::std::string::String>,
    /// <p>The value of the calculated attribute.</p>
    pub value: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of the newest object included in the calculated attribute calculation.</p>
    pub last_object_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl CalculatedAttributeValue {
    /// <p>The unique name of the calculated attribute.</p>
    pub fn calculated_attribute_name(&self) -> ::std::option::Option<&str> {
        self.calculated_attribute_name.as_deref()
    }
    /// <p>The display name of the calculated attribute.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>Indicates whether the calculated attribute's value is based on partial data. If the data is partial, it is set to true.</p>
    pub fn is_data_partial(&self) -> ::std::option::Option<&str> {
        self.is_data_partial.as_deref()
    }
    /// <p>The profile id belonging to this calculated attribute value.</p>
    pub fn profile_id(&self) -> ::std::option::Option<&str> {
        self.profile_id.as_deref()
    }
    /// <p>The value of the calculated attribute.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The timestamp of the newest object included in the calculated attribute calculation.</p>
    pub fn last_object_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_object_timestamp.as_ref()
    }
}
impl CalculatedAttributeValue {
    /// Creates a new builder-style object to manufacture [`CalculatedAttributeValue`](crate::types::CalculatedAttributeValue).
    pub fn builder() -> crate::types::builders::CalculatedAttributeValueBuilder {
        crate::types::builders::CalculatedAttributeValueBuilder::default()
    }
}

/// A builder for [`CalculatedAttributeValue`](crate::types::CalculatedAttributeValue).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CalculatedAttributeValueBuilder {
    pub(crate) calculated_attribute_name: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) is_data_partial: ::std::option::Option<::std::string::String>,
    pub(crate) profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) last_object_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl CalculatedAttributeValueBuilder {
    /// <p>The unique name of the calculated attribute.</p>
    pub fn calculated_attribute_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.calculated_attribute_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the calculated attribute.</p>
    pub fn set_calculated_attribute_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.calculated_attribute_name = input;
        self
    }
    /// <p>The unique name of the calculated attribute.</p>
    pub fn get_calculated_attribute_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.calculated_attribute_name
    }
    /// <p>The display name of the calculated attribute.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the calculated attribute.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name of the calculated attribute.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>Indicates whether the calculated attribute's value is based on partial data. If the data is partial, it is set to true.</p>
    pub fn is_data_partial(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.is_data_partial = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates whether the calculated attribute's value is based on partial data. If the data is partial, it is set to true.</p>
    pub fn set_is_data_partial(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.is_data_partial = input;
        self
    }
    /// <p>Indicates whether the calculated attribute's value is based on partial data. If the data is partial, it is set to true.</p>
    pub fn get_is_data_partial(&self) -> &::std::option::Option<::std::string::String> {
        &self.is_data_partial
    }
    /// <p>The profile id belonging to this calculated attribute value.</p>
    pub fn profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The profile id belonging to this calculated attribute value.</p>
    pub fn set_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_id = input;
        self
    }
    /// <p>The profile id belonging to this calculated attribute value.</p>
    pub fn get_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_id
    }
    /// <p>The value of the calculated attribute.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the calculated attribute.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of the calculated attribute.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// <p>The timestamp of the newest object included in the calculated attribute calculation.</p>
    pub fn last_object_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_object_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of the newest object included in the calculated attribute calculation.</p>
    pub fn set_last_object_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_object_timestamp = input;
        self
    }
    /// <p>The timestamp of the newest object included in the calculated attribute calculation.</p>
    pub fn get_last_object_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_object_timestamp
    }
    /// Consumes the builder and constructs a [`CalculatedAttributeValue`](crate::types::CalculatedAttributeValue).
    pub fn build(self) -> crate::types::CalculatedAttributeValue {
        crate::types::CalculatedAttributeValue {
            calculated_attribute_name: self.calculated_attribute_name,
            display_name: self.display_name,
            is_data_partial: self.is_data_partial,
            profile_id: self.profile_id,
            value: self.value,
            last_object_timestamp: self.last_object_timestamp,
        }
    }
}
