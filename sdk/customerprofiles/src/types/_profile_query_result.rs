// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object that holds the results for membership.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProfileQueryResult {
    /// <p>The profile id the result belongs to.</p>
    pub profile_id: ::std::string::String,
    /// <p>Describes whether the profile was absent or present in the segment.</p>
    pub query_result: crate::types::QueryResult,
    /// <p>The standard profile of a customer.</p>
    pub profile: ::std::option::Option<crate::types::Profile>,
}
impl ProfileQueryResult {
    /// <p>The profile id the result belongs to.</p>
    pub fn profile_id(&self) -> &str {
        use std::ops::Deref;
        self.profile_id.deref()
    }
    /// <p>Describes whether the profile was absent or present in the segment.</p>
    pub fn query_result(&self) -> &crate::types::QueryResult {
        &self.query_result
    }
    /// <p>The standard profile of a customer.</p>
    pub fn profile(&self) -> ::std::option::Option<&crate::types::Profile> {
        self.profile.as_ref()
    }
}
impl ProfileQueryResult {
    /// Creates a new builder-style object to manufacture [`ProfileQueryResult`](crate::types::ProfileQueryResult).
    pub fn builder() -> crate::types::builders::ProfileQueryResultBuilder {
        crate::types::builders::ProfileQueryResultBuilder::default()
    }
}

/// A builder for [`ProfileQueryResult`](crate::types::ProfileQueryResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProfileQueryResultBuilder {
    pub(crate) profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) query_result: ::std::option::Option<crate::types::QueryResult>,
    pub(crate) profile: ::std::option::Option<crate::types::Profile>,
}
impl ProfileQueryResultBuilder {
    /// <p>The profile id the result belongs to.</p>
    /// This field is required.
    pub fn profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The profile id the result belongs to.</p>
    pub fn set_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_id = input;
        self
    }
    /// <p>The profile id the result belongs to.</p>
    pub fn get_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_id
    }
    /// <p>Describes whether the profile was absent or present in the segment.</p>
    /// This field is required.
    pub fn query_result(mut self, input: crate::types::QueryResult) -> Self {
        self.query_result = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes whether the profile was absent or present in the segment.</p>
    pub fn set_query_result(mut self, input: ::std::option::Option<crate::types::QueryResult>) -> Self {
        self.query_result = input;
        self
    }
    /// <p>Describes whether the profile was absent or present in the segment.</p>
    pub fn get_query_result(&self) -> &::std::option::Option<crate::types::QueryResult> {
        &self.query_result
    }
    /// <p>The standard profile of a customer.</p>
    pub fn profile(mut self, input: crate::types::Profile) -> Self {
        self.profile = ::std::option::Option::Some(input);
        self
    }
    /// <p>The standard profile of a customer.</p>
    pub fn set_profile(mut self, input: ::std::option::Option<crate::types::Profile>) -> Self {
        self.profile = input;
        self
    }
    /// <p>The standard profile of a customer.</p>
    pub fn get_profile(&self) -> &::std::option::Option<crate::types::Profile> {
        &self.profile
    }
    /// Consumes the builder and constructs a [`ProfileQueryResult`](crate::types::ProfileQueryResult).
    /// This method will fail if any of the following fields are not set:
    /// - [`profile_id`](crate::types::builders::ProfileQueryResultBuilder::profile_id)
    /// - [`query_result`](crate::types::builders::ProfileQueryResultBuilder::query_result)
    pub fn build(self) -> ::std::result::Result<crate::types::ProfileQueryResult, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ProfileQueryResult {
            profile_id: self.profile_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "profile_id",
                    "profile_id was not specified but it is required when building ProfileQueryResult",
                )
            })?,
            query_result: self.query_result.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "query_result",
                    "query_result was not specified but it is required when building ProfileQueryResult",
                )
            })?,
            profile: self.profile,
        })
    }
}
