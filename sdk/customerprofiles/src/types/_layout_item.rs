// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The layout object that contains LayoutDefinitionName, Description, DisplayName, IsDefault, LayoutType, Tags, CreatedAt, LastUpdatedAt</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct LayoutItem {
    /// <p>The unique name of the layout.</p>
    pub layout_definition_name: ::std::string::String,
    /// <p>The description of the layout</p>
    pub description: ::std::string::String,
    /// <p>The display name of the layout</p>
    pub display_name: ::std::string::String,
    /// <p>If set to true for a layout, this layout will be used by default to view data. If set to false, then layout will not be used by default but it can be used to view data by explicit selection on UI.</p>
    pub is_default: bool,
    /// <p>The type of layout that can be used to view data under customer profiles domain.</p>
    pub layout_type: crate::types::LayoutType,
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The timestamp of when the layout was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The timestamp of when the layout was most recently updated.</p>
    pub last_updated_at: ::aws_smithy_types::DateTime,
}
impl LayoutItem {
    /// <p>The unique name of the layout.</p>
    pub fn layout_definition_name(&self) -> &str {
        use std::ops::Deref;
        self.layout_definition_name.deref()
    }
    /// <p>The description of the layout</p>
    pub fn description(&self) -> &str {
        use std::ops::Deref;
        self.description.deref()
    }
    /// <p>The display name of the layout</p>
    pub fn display_name(&self) -> &str {
        use std::ops::Deref;
        self.display_name.deref()
    }
    /// <p>If set to true for a layout, this layout will be used by default to view data. If set to false, then layout will not be used by default but it can be used to view data by explicit selection on UI.</p>
    pub fn is_default(&self) -> bool {
        self.is_default
    }
    /// <p>The type of layout that can be used to view data under customer profiles domain.</p>
    pub fn layout_type(&self) -> &crate::types::LayoutType {
        &self.layout_type
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The timestamp of when the layout was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The timestamp of when the layout was most recently updated.</p>
    pub fn last_updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.last_updated_at
    }
}
impl ::std::fmt::Debug for LayoutItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("LayoutItem");
        formatter.field("layout_definition_name", &self.layout_definition_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("display_name", &self.display_name);
        formatter.field("is_default", &self.is_default);
        formatter.field("layout_type", &self.layout_type);
        formatter.field("tags", &self.tags);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.finish()
    }
}
impl LayoutItem {
    /// Creates a new builder-style object to manufacture [`LayoutItem`](crate::types::LayoutItem).
    pub fn builder() -> crate::types::builders::LayoutItemBuilder {
        crate::types::builders::LayoutItemBuilder::default()
    }
}

/// A builder for [`LayoutItem`](crate::types::LayoutItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct LayoutItemBuilder {
    pub(crate) layout_definition_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) is_default: ::std::option::Option<bool>,
    pub(crate) layout_type: ::std::option::Option<crate::types::LayoutType>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl LayoutItemBuilder {
    /// <p>The unique name of the layout.</p>
    /// This field is required.
    pub fn layout_definition_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.layout_definition_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the layout.</p>
    pub fn set_layout_definition_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.layout_definition_name = input;
        self
    }
    /// <p>The unique name of the layout.</p>
    pub fn get_layout_definition_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.layout_definition_name
    }
    /// <p>The description of the layout</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the layout</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the layout</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The display name of the layout</p>
    /// This field is required.
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the layout</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name of the layout</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>If set to true for a layout, this layout will be used by default to view data. If set to false, then layout will not be used by default but it can be used to view data by explicit selection on UI.</p>
    pub fn is_default(mut self, input: bool) -> Self {
        self.is_default = ::std::option::Option::Some(input);
        self
    }
    /// <p>If set to true for a layout, this layout will be used by default to view data. If set to false, then layout will not be used by default but it can be used to view data by explicit selection on UI.</p>
    pub fn set_is_default(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_default = input;
        self
    }
    /// <p>If set to true for a layout, this layout will be used by default to view data. If set to false, then layout will not be used by default but it can be used to view data by explicit selection on UI.</p>
    pub fn get_is_default(&self) -> &::std::option::Option<bool> {
        &self.is_default
    }
    /// <p>The type of layout that can be used to view data under customer profiles domain.</p>
    /// This field is required.
    pub fn layout_type(mut self, input: crate::types::LayoutType) -> Self {
        self.layout_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of layout that can be used to view data under customer profiles domain.</p>
    pub fn set_layout_type(mut self, input: ::std::option::Option<crate::types::LayoutType>) -> Self {
        self.layout_type = input;
        self
    }
    /// <p>The type of layout that can be used to view data under customer profiles domain.</p>
    pub fn get_layout_type(&self) -> &::std::option::Option<crate::types::LayoutType> {
        &self.layout_type
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The timestamp of when the layout was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the layout was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when the layout was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp of when the layout was most recently updated.</p>
    /// This field is required.
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the layout was most recently updated.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>The timestamp of when the layout was most recently updated.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// Consumes the builder and constructs a [`LayoutItem`](crate::types::LayoutItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`layout_definition_name`](crate::types::builders::LayoutItemBuilder::layout_definition_name)
    /// - [`description`](crate::types::builders::LayoutItemBuilder::description)
    /// - [`display_name`](crate::types::builders::LayoutItemBuilder::display_name)
    /// - [`layout_type`](crate::types::builders::LayoutItemBuilder::layout_type)
    /// - [`created_at`](crate::types::builders::LayoutItemBuilder::created_at)
    /// - [`last_updated_at`](crate::types::builders::LayoutItemBuilder::last_updated_at)
    pub fn build(self) -> ::std::result::Result<crate::types::LayoutItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LayoutItem {
            layout_definition_name: self.layout_definition_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "layout_definition_name",
                    "layout_definition_name was not specified but it is required when building LayoutItem",
                )
            })?,
            description: self.description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "description",
                    "description was not specified but it is required when building LayoutItem",
                )
            })?,
            display_name: self.display_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "display_name",
                    "display_name was not specified but it is required when building LayoutItem",
                )
            })?,
            is_default: self.is_default.unwrap_or_default(),
            layout_type: self.layout_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "layout_type",
                    "layout_type was not specified but it is required when building LayoutItem",
                )
            })?,
            tags: self.tags,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building LayoutItem",
                )
            })?,
            last_updated_at: self.last_updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_updated_at",
                    "last_updated_at was not specified but it is required when building LayoutItem",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for LayoutItemBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("LayoutItemBuilder");
        formatter.field("layout_definition_name", &self.layout_definition_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("display_name", &self.display_name);
        formatter.field("is_default", &self.is_default);
        formatter.field("layout_type", &self.layout_type);
        formatter.field("tags", &self.tags);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.finish()
    }
}
