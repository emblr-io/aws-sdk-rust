// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object that holds failures for membership.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProfileQueryFailures {
    /// <p>The profile id the failure belongs to.</p>
    pub profile_id: ::std::string::String,
    /// <p>A message describing the failure.</p>
    pub message: ::std::string::String,
    /// <p>The status describing the failure.</p>
    pub status: ::std::option::Option<i32>,
}
impl ProfileQueryFailures {
    /// <p>The profile id the failure belongs to.</p>
    pub fn profile_id(&self) -> &str {
        use std::ops::Deref;
        self.profile_id.deref()
    }
    /// <p>A message describing the failure.</p>
    pub fn message(&self) -> &str {
        use std::ops::Deref;
        self.message.deref()
    }
    /// <p>The status describing the failure.</p>
    pub fn status(&self) -> ::std::option::Option<i32> {
        self.status
    }
}
impl ProfileQueryFailures {
    /// Creates a new builder-style object to manufacture [`ProfileQueryFailures`](crate::types::ProfileQueryFailures).
    pub fn builder() -> crate::types::builders::ProfileQueryFailuresBuilder {
        crate::types::builders::ProfileQueryFailuresBuilder::default()
    }
}

/// A builder for [`ProfileQueryFailures`](crate::types::ProfileQueryFailures).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProfileQueryFailuresBuilder {
    pub(crate) profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<i32>,
}
impl ProfileQueryFailuresBuilder {
    /// <p>The profile id the failure belongs to.</p>
    /// This field is required.
    pub fn profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The profile id the failure belongs to.</p>
    pub fn set_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_id = input;
        self
    }
    /// <p>The profile id the failure belongs to.</p>
    pub fn get_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_id
    }
    /// <p>A message describing the failure.</p>
    /// This field is required.
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message describing the failure.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>A message describing the failure.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>The status describing the failure.</p>
    pub fn status(mut self, input: i32) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status describing the failure.</p>
    pub fn set_status(mut self, input: ::std::option::Option<i32>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status describing the failure.</p>
    pub fn get_status(&self) -> &::std::option::Option<i32> {
        &self.status
    }
    /// Consumes the builder and constructs a [`ProfileQueryFailures`](crate::types::ProfileQueryFailures).
    /// This method will fail if any of the following fields are not set:
    /// - [`profile_id`](crate::types::builders::ProfileQueryFailuresBuilder::profile_id)
    /// - [`message`](crate::types::builders::ProfileQueryFailuresBuilder::message)
    pub fn build(self) -> ::std::result::Result<crate::types::ProfileQueryFailures, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ProfileQueryFailures {
            profile_id: self.profile_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "profile_id",
                    "profile_id was not specified but it is required when building ProfileQueryFailures",
                )
            })?,
            message: self.message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message",
                    "message was not specified but it is required when building ProfileQueryFailures",
                )
            })?,
            status: self.status,
        })
    }
}
