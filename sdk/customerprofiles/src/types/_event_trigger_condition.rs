// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the circumstances under which the event should trigger the destination.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EventTriggerCondition {
    /// <p>A list of dimensions to be evaluated for the event.</p>
    pub event_trigger_dimensions: ::std::vec::Vec<crate::types::EventTriggerDimension>,
    /// <p>The operator used to combine multiple dimensions.</p>
    pub logical_operator: crate::types::EventTriggerLogicalOperator,
}
impl EventTriggerCondition {
    /// <p>A list of dimensions to be evaluated for the event.</p>
    pub fn event_trigger_dimensions(&self) -> &[crate::types::EventTriggerDimension] {
        use std::ops::Deref;
        self.event_trigger_dimensions.deref()
    }
    /// <p>The operator used to combine multiple dimensions.</p>
    pub fn logical_operator(&self) -> &crate::types::EventTriggerLogicalOperator {
        &self.logical_operator
    }
}
impl EventTriggerCondition {
    /// Creates a new builder-style object to manufacture [`EventTriggerCondition`](crate::types::EventTriggerCondition).
    pub fn builder() -> crate::types::builders::EventTriggerConditionBuilder {
        crate::types::builders::EventTriggerConditionBuilder::default()
    }
}

/// A builder for [`EventTriggerCondition`](crate::types::EventTriggerCondition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EventTriggerConditionBuilder {
    pub(crate) event_trigger_dimensions: ::std::option::Option<::std::vec::Vec<crate::types::EventTriggerDimension>>,
    pub(crate) logical_operator: ::std::option::Option<crate::types::EventTriggerLogicalOperator>,
}
impl EventTriggerConditionBuilder {
    /// Appends an item to `event_trigger_dimensions`.
    ///
    /// To override the contents of this collection use [`set_event_trigger_dimensions`](Self::set_event_trigger_dimensions).
    ///
    /// <p>A list of dimensions to be evaluated for the event.</p>
    pub fn event_trigger_dimensions(mut self, input: crate::types::EventTriggerDimension) -> Self {
        let mut v = self.event_trigger_dimensions.unwrap_or_default();
        v.push(input);
        self.event_trigger_dimensions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of dimensions to be evaluated for the event.</p>
    pub fn set_event_trigger_dimensions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EventTriggerDimension>>) -> Self {
        self.event_trigger_dimensions = input;
        self
    }
    /// <p>A list of dimensions to be evaluated for the event.</p>
    pub fn get_event_trigger_dimensions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EventTriggerDimension>> {
        &self.event_trigger_dimensions
    }
    /// <p>The operator used to combine multiple dimensions.</p>
    /// This field is required.
    pub fn logical_operator(mut self, input: crate::types::EventTriggerLogicalOperator) -> Self {
        self.logical_operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operator used to combine multiple dimensions.</p>
    pub fn set_logical_operator(mut self, input: ::std::option::Option<crate::types::EventTriggerLogicalOperator>) -> Self {
        self.logical_operator = input;
        self
    }
    /// <p>The operator used to combine multiple dimensions.</p>
    pub fn get_logical_operator(&self) -> &::std::option::Option<crate::types::EventTriggerLogicalOperator> {
        &self.logical_operator
    }
    /// Consumes the builder and constructs a [`EventTriggerCondition`](crate::types::EventTriggerCondition).
    /// This method will fail if any of the following fields are not set:
    /// - [`event_trigger_dimensions`](crate::types::builders::EventTriggerConditionBuilder::event_trigger_dimensions)
    /// - [`logical_operator`](crate::types::builders::EventTriggerConditionBuilder::logical_operator)
    pub fn build(self) -> ::std::result::Result<crate::types::EventTriggerCondition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EventTriggerCondition {
            event_trigger_dimensions: self.event_trigger_dimensions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_trigger_dimensions",
                    "event_trigger_dimensions was not specified but it is required when building EventTriggerCondition",
                )
            })?,
            logical_operator: self.logical_operator.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "logical_operator",
                    "logical_operator was not specified but it is required when building EventTriggerCondition",
                )
            })?,
        })
    }
}
