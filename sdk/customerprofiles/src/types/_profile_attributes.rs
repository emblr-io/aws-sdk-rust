// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The object used to segment on attributes within the customer profile.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ProfileAttributes {
    /// <p>A field to describe values to segment on within account number.</p>
    pub account_number: ::std::option::Option<crate::types::ProfileDimension>,
    /// <p>A field to describe values to segment on within additional information.</p>
    pub additional_information: ::std::option::Option<crate::types::ExtraLengthValueProfileDimension>,
    /// <p>A field to describe values to segment on within first name.</p>
    pub first_name: ::std::option::Option<crate::types::ProfileDimension>,
    /// <p>A field to describe values to segment on within last name.</p>
    pub last_name: ::std::option::Option<crate::types::ProfileDimension>,
    /// <p>A field to describe values to segment on within middle name.</p>
    pub middle_name: ::std::option::Option<crate::types::ProfileDimension>,
    /// <p>A field to describe values to segment on within genderString.</p>
    pub gender_string: ::std::option::Option<crate::types::ProfileDimension>,
    /// <p>A field to describe values to segment on within partyTypeString.</p>
    pub party_type_string: ::std::option::Option<crate::types::ProfileDimension>,
    /// <p>A field to describe values to segment on within birthDate.</p>
    pub birth_date: ::std::option::Option<crate::types::DateDimension>,
    /// <p>A field to describe values to segment on within phone number.</p>
    pub phone_number: ::std::option::Option<crate::types::ProfileDimension>,
    /// <p>A field to describe values to segment on within business name.</p>
    pub business_name: ::std::option::Option<crate::types::ProfileDimension>,
    /// <p>A field to describe values to segment on within business phone number.</p>
    pub business_phone_number: ::std::option::Option<crate::types::ProfileDimension>,
    /// <p>A field to describe values to segment on within home phone number.</p>
    pub home_phone_number: ::std::option::Option<crate::types::ProfileDimension>,
    /// <p>A field to describe values to segment on within mobile phone number.</p>
    pub mobile_phone_number: ::std::option::Option<crate::types::ProfileDimension>,
    /// <p>A field to describe values to segment on within email address.</p>
    pub email_address: ::std::option::Option<crate::types::ProfileDimension>,
    /// <p>A field to describe values to segment on within personal email address.</p>
    pub personal_email_address: ::std::option::Option<crate::types::ProfileDimension>,
    /// <p>A field to describe values to segment on within business email address.</p>
    pub business_email_address: ::std::option::Option<crate::types::ProfileDimension>,
    /// <p>A field to describe values to segment on within address.</p>
    pub address: ::std::option::Option<crate::types::AddressDimension>,
    /// <p>A field to describe values to segment on within shipping address.</p>
    pub shipping_address: ::std::option::Option<crate::types::AddressDimension>,
    /// <p>A field to describe values to segment on within mailing address.</p>
    pub mailing_address: ::std::option::Option<crate::types::AddressDimension>,
    /// <p>A field to describe values to segment on within billing address.</p>
    pub billing_address: ::std::option::Option<crate::types::AddressDimension>,
    /// <p>A field to describe values to segment on within attributes.</p>
    pub attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeDimension>>,
}
impl ProfileAttributes {
    /// <p>A field to describe values to segment on within account number.</p>
    pub fn account_number(&self) -> ::std::option::Option<&crate::types::ProfileDimension> {
        self.account_number.as_ref()
    }
    /// <p>A field to describe values to segment on within additional information.</p>
    pub fn additional_information(&self) -> ::std::option::Option<&crate::types::ExtraLengthValueProfileDimension> {
        self.additional_information.as_ref()
    }
    /// <p>A field to describe values to segment on within first name.</p>
    pub fn first_name(&self) -> ::std::option::Option<&crate::types::ProfileDimension> {
        self.first_name.as_ref()
    }
    /// <p>A field to describe values to segment on within last name.</p>
    pub fn last_name(&self) -> ::std::option::Option<&crate::types::ProfileDimension> {
        self.last_name.as_ref()
    }
    /// <p>A field to describe values to segment on within middle name.</p>
    pub fn middle_name(&self) -> ::std::option::Option<&crate::types::ProfileDimension> {
        self.middle_name.as_ref()
    }
    /// <p>A field to describe values to segment on within genderString.</p>
    pub fn gender_string(&self) -> ::std::option::Option<&crate::types::ProfileDimension> {
        self.gender_string.as_ref()
    }
    /// <p>A field to describe values to segment on within partyTypeString.</p>
    pub fn party_type_string(&self) -> ::std::option::Option<&crate::types::ProfileDimension> {
        self.party_type_string.as_ref()
    }
    /// <p>A field to describe values to segment on within birthDate.</p>
    pub fn birth_date(&self) -> ::std::option::Option<&crate::types::DateDimension> {
        self.birth_date.as_ref()
    }
    /// <p>A field to describe values to segment on within phone number.</p>
    pub fn phone_number(&self) -> ::std::option::Option<&crate::types::ProfileDimension> {
        self.phone_number.as_ref()
    }
    /// <p>A field to describe values to segment on within business name.</p>
    pub fn business_name(&self) -> ::std::option::Option<&crate::types::ProfileDimension> {
        self.business_name.as_ref()
    }
    /// <p>A field to describe values to segment on within business phone number.</p>
    pub fn business_phone_number(&self) -> ::std::option::Option<&crate::types::ProfileDimension> {
        self.business_phone_number.as_ref()
    }
    /// <p>A field to describe values to segment on within home phone number.</p>
    pub fn home_phone_number(&self) -> ::std::option::Option<&crate::types::ProfileDimension> {
        self.home_phone_number.as_ref()
    }
    /// <p>A field to describe values to segment on within mobile phone number.</p>
    pub fn mobile_phone_number(&self) -> ::std::option::Option<&crate::types::ProfileDimension> {
        self.mobile_phone_number.as_ref()
    }
    /// <p>A field to describe values to segment on within email address.</p>
    pub fn email_address(&self) -> ::std::option::Option<&crate::types::ProfileDimension> {
        self.email_address.as_ref()
    }
    /// <p>A field to describe values to segment on within personal email address.</p>
    pub fn personal_email_address(&self) -> ::std::option::Option<&crate::types::ProfileDimension> {
        self.personal_email_address.as_ref()
    }
    /// <p>A field to describe values to segment on within business email address.</p>
    pub fn business_email_address(&self) -> ::std::option::Option<&crate::types::ProfileDimension> {
        self.business_email_address.as_ref()
    }
    /// <p>A field to describe values to segment on within address.</p>
    pub fn address(&self) -> ::std::option::Option<&crate::types::AddressDimension> {
        self.address.as_ref()
    }
    /// <p>A field to describe values to segment on within shipping address.</p>
    pub fn shipping_address(&self) -> ::std::option::Option<&crate::types::AddressDimension> {
        self.shipping_address.as_ref()
    }
    /// <p>A field to describe values to segment on within mailing address.</p>
    pub fn mailing_address(&self) -> ::std::option::Option<&crate::types::AddressDimension> {
        self.mailing_address.as_ref()
    }
    /// <p>A field to describe values to segment on within billing address.</p>
    pub fn billing_address(&self) -> ::std::option::Option<&crate::types::AddressDimension> {
        self.billing_address.as_ref()
    }
    /// <p>A field to describe values to segment on within attributes.</p>
    pub fn attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::AttributeDimension>> {
        self.attributes.as_ref()
    }
}
impl ::std::fmt::Debug for ProfileAttributes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ProfileAttributes");
        formatter.field("account_number", &"*** Sensitive Data Redacted ***");
        formatter.field("additional_information", &"*** Sensitive Data Redacted ***");
        formatter.field("first_name", &"*** Sensitive Data Redacted ***");
        formatter.field("last_name", &"*** Sensitive Data Redacted ***");
        formatter.field("middle_name", &"*** Sensitive Data Redacted ***");
        formatter.field("gender_string", &"*** Sensitive Data Redacted ***");
        formatter.field("party_type_string", &"*** Sensitive Data Redacted ***");
        formatter.field("birth_date", &"*** Sensitive Data Redacted ***");
        formatter.field("phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("business_name", &"*** Sensitive Data Redacted ***");
        formatter.field("business_phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("home_phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("mobile_phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("personal_email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("business_email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("address", &"*** Sensitive Data Redacted ***");
        formatter.field("shipping_address", &"*** Sensitive Data Redacted ***");
        formatter.field("mailing_address", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_address", &"*** Sensitive Data Redacted ***");
        formatter.field("attributes", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ProfileAttributes {
    /// Creates a new builder-style object to manufacture [`ProfileAttributes`](crate::types::ProfileAttributes).
    pub fn builder() -> crate::types::builders::ProfileAttributesBuilder {
        crate::types::builders::ProfileAttributesBuilder::default()
    }
}

/// A builder for [`ProfileAttributes`](crate::types::ProfileAttributes).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ProfileAttributesBuilder {
    pub(crate) account_number: ::std::option::Option<crate::types::ProfileDimension>,
    pub(crate) additional_information: ::std::option::Option<crate::types::ExtraLengthValueProfileDimension>,
    pub(crate) first_name: ::std::option::Option<crate::types::ProfileDimension>,
    pub(crate) last_name: ::std::option::Option<crate::types::ProfileDimension>,
    pub(crate) middle_name: ::std::option::Option<crate::types::ProfileDimension>,
    pub(crate) gender_string: ::std::option::Option<crate::types::ProfileDimension>,
    pub(crate) party_type_string: ::std::option::Option<crate::types::ProfileDimension>,
    pub(crate) birth_date: ::std::option::Option<crate::types::DateDimension>,
    pub(crate) phone_number: ::std::option::Option<crate::types::ProfileDimension>,
    pub(crate) business_name: ::std::option::Option<crate::types::ProfileDimension>,
    pub(crate) business_phone_number: ::std::option::Option<crate::types::ProfileDimension>,
    pub(crate) home_phone_number: ::std::option::Option<crate::types::ProfileDimension>,
    pub(crate) mobile_phone_number: ::std::option::Option<crate::types::ProfileDimension>,
    pub(crate) email_address: ::std::option::Option<crate::types::ProfileDimension>,
    pub(crate) personal_email_address: ::std::option::Option<crate::types::ProfileDimension>,
    pub(crate) business_email_address: ::std::option::Option<crate::types::ProfileDimension>,
    pub(crate) address: ::std::option::Option<crate::types::AddressDimension>,
    pub(crate) shipping_address: ::std::option::Option<crate::types::AddressDimension>,
    pub(crate) mailing_address: ::std::option::Option<crate::types::AddressDimension>,
    pub(crate) billing_address: ::std::option::Option<crate::types::AddressDimension>,
    pub(crate) attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeDimension>>,
}
impl ProfileAttributesBuilder {
    /// <p>A field to describe values to segment on within account number.</p>
    pub fn account_number(mut self, input: crate::types::ProfileDimension) -> Self {
        self.account_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>A field to describe values to segment on within account number.</p>
    pub fn set_account_number(mut self, input: ::std::option::Option<crate::types::ProfileDimension>) -> Self {
        self.account_number = input;
        self
    }
    /// <p>A field to describe values to segment on within account number.</p>
    pub fn get_account_number(&self) -> &::std::option::Option<crate::types::ProfileDimension> {
        &self.account_number
    }
    /// <p>A field to describe values to segment on within additional information.</p>
    pub fn additional_information(mut self, input: crate::types::ExtraLengthValueProfileDimension) -> Self {
        self.additional_information = ::std::option::Option::Some(input);
        self
    }
    /// <p>A field to describe values to segment on within additional information.</p>
    pub fn set_additional_information(mut self, input: ::std::option::Option<crate::types::ExtraLengthValueProfileDimension>) -> Self {
        self.additional_information = input;
        self
    }
    /// <p>A field to describe values to segment on within additional information.</p>
    pub fn get_additional_information(&self) -> &::std::option::Option<crate::types::ExtraLengthValueProfileDimension> {
        &self.additional_information
    }
    /// <p>A field to describe values to segment on within first name.</p>
    pub fn first_name(mut self, input: crate::types::ProfileDimension) -> Self {
        self.first_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>A field to describe values to segment on within first name.</p>
    pub fn set_first_name(mut self, input: ::std::option::Option<crate::types::ProfileDimension>) -> Self {
        self.first_name = input;
        self
    }
    /// <p>A field to describe values to segment on within first name.</p>
    pub fn get_first_name(&self) -> &::std::option::Option<crate::types::ProfileDimension> {
        &self.first_name
    }
    /// <p>A field to describe values to segment on within last name.</p>
    pub fn last_name(mut self, input: crate::types::ProfileDimension) -> Self {
        self.last_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>A field to describe values to segment on within last name.</p>
    pub fn set_last_name(mut self, input: ::std::option::Option<crate::types::ProfileDimension>) -> Self {
        self.last_name = input;
        self
    }
    /// <p>A field to describe values to segment on within last name.</p>
    pub fn get_last_name(&self) -> &::std::option::Option<crate::types::ProfileDimension> {
        &self.last_name
    }
    /// <p>A field to describe values to segment on within middle name.</p>
    pub fn middle_name(mut self, input: crate::types::ProfileDimension) -> Self {
        self.middle_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>A field to describe values to segment on within middle name.</p>
    pub fn set_middle_name(mut self, input: ::std::option::Option<crate::types::ProfileDimension>) -> Self {
        self.middle_name = input;
        self
    }
    /// <p>A field to describe values to segment on within middle name.</p>
    pub fn get_middle_name(&self) -> &::std::option::Option<crate::types::ProfileDimension> {
        &self.middle_name
    }
    /// <p>A field to describe values to segment on within genderString.</p>
    pub fn gender_string(mut self, input: crate::types::ProfileDimension) -> Self {
        self.gender_string = ::std::option::Option::Some(input);
        self
    }
    /// <p>A field to describe values to segment on within genderString.</p>
    pub fn set_gender_string(mut self, input: ::std::option::Option<crate::types::ProfileDimension>) -> Self {
        self.gender_string = input;
        self
    }
    /// <p>A field to describe values to segment on within genderString.</p>
    pub fn get_gender_string(&self) -> &::std::option::Option<crate::types::ProfileDimension> {
        &self.gender_string
    }
    /// <p>A field to describe values to segment on within partyTypeString.</p>
    pub fn party_type_string(mut self, input: crate::types::ProfileDimension) -> Self {
        self.party_type_string = ::std::option::Option::Some(input);
        self
    }
    /// <p>A field to describe values to segment on within partyTypeString.</p>
    pub fn set_party_type_string(mut self, input: ::std::option::Option<crate::types::ProfileDimension>) -> Self {
        self.party_type_string = input;
        self
    }
    /// <p>A field to describe values to segment on within partyTypeString.</p>
    pub fn get_party_type_string(&self) -> &::std::option::Option<crate::types::ProfileDimension> {
        &self.party_type_string
    }
    /// <p>A field to describe values to segment on within birthDate.</p>
    pub fn birth_date(mut self, input: crate::types::DateDimension) -> Self {
        self.birth_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>A field to describe values to segment on within birthDate.</p>
    pub fn set_birth_date(mut self, input: ::std::option::Option<crate::types::DateDimension>) -> Self {
        self.birth_date = input;
        self
    }
    /// <p>A field to describe values to segment on within birthDate.</p>
    pub fn get_birth_date(&self) -> &::std::option::Option<crate::types::DateDimension> {
        &self.birth_date
    }
    /// <p>A field to describe values to segment on within phone number.</p>
    pub fn phone_number(mut self, input: crate::types::ProfileDimension) -> Self {
        self.phone_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>A field to describe values to segment on within phone number.</p>
    pub fn set_phone_number(mut self, input: ::std::option::Option<crate::types::ProfileDimension>) -> Self {
        self.phone_number = input;
        self
    }
    /// <p>A field to describe values to segment on within phone number.</p>
    pub fn get_phone_number(&self) -> &::std::option::Option<crate::types::ProfileDimension> {
        &self.phone_number
    }
    /// <p>A field to describe values to segment on within business name.</p>
    pub fn business_name(mut self, input: crate::types::ProfileDimension) -> Self {
        self.business_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>A field to describe values to segment on within business name.</p>
    pub fn set_business_name(mut self, input: ::std::option::Option<crate::types::ProfileDimension>) -> Self {
        self.business_name = input;
        self
    }
    /// <p>A field to describe values to segment on within business name.</p>
    pub fn get_business_name(&self) -> &::std::option::Option<crate::types::ProfileDimension> {
        &self.business_name
    }
    /// <p>A field to describe values to segment on within business phone number.</p>
    pub fn business_phone_number(mut self, input: crate::types::ProfileDimension) -> Self {
        self.business_phone_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>A field to describe values to segment on within business phone number.</p>
    pub fn set_business_phone_number(mut self, input: ::std::option::Option<crate::types::ProfileDimension>) -> Self {
        self.business_phone_number = input;
        self
    }
    /// <p>A field to describe values to segment on within business phone number.</p>
    pub fn get_business_phone_number(&self) -> &::std::option::Option<crate::types::ProfileDimension> {
        &self.business_phone_number
    }
    /// <p>A field to describe values to segment on within home phone number.</p>
    pub fn home_phone_number(mut self, input: crate::types::ProfileDimension) -> Self {
        self.home_phone_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>A field to describe values to segment on within home phone number.</p>
    pub fn set_home_phone_number(mut self, input: ::std::option::Option<crate::types::ProfileDimension>) -> Self {
        self.home_phone_number = input;
        self
    }
    /// <p>A field to describe values to segment on within home phone number.</p>
    pub fn get_home_phone_number(&self) -> &::std::option::Option<crate::types::ProfileDimension> {
        &self.home_phone_number
    }
    /// <p>A field to describe values to segment on within mobile phone number.</p>
    pub fn mobile_phone_number(mut self, input: crate::types::ProfileDimension) -> Self {
        self.mobile_phone_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>A field to describe values to segment on within mobile phone number.</p>
    pub fn set_mobile_phone_number(mut self, input: ::std::option::Option<crate::types::ProfileDimension>) -> Self {
        self.mobile_phone_number = input;
        self
    }
    /// <p>A field to describe values to segment on within mobile phone number.</p>
    pub fn get_mobile_phone_number(&self) -> &::std::option::Option<crate::types::ProfileDimension> {
        &self.mobile_phone_number
    }
    /// <p>A field to describe values to segment on within email address.</p>
    pub fn email_address(mut self, input: crate::types::ProfileDimension) -> Self {
        self.email_address = ::std::option::Option::Some(input);
        self
    }
    /// <p>A field to describe values to segment on within email address.</p>
    pub fn set_email_address(mut self, input: ::std::option::Option<crate::types::ProfileDimension>) -> Self {
        self.email_address = input;
        self
    }
    /// <p>A field to describe values to segment on within email address.</p>
    pub fn get_email_address(&self) -> &::std::option::Option<crate::types::ProfileDimension> {
        &self.email_address
    }
    /// <p>A field to describe values to segment on within personal email address.</p>
    pub fn personal_email_address(mut self, input: crate::types::ProfileDimension) -> Self {
        self.personal_email_address = ::std::option::Option::Some(input);
        self
    }
    /// <p>A field to describe values to segment on within personal email address.</p>
    pub fn set_personal_email_address(mut self, input: ::std::option::Option<crate::types::ProfileDimension>) -> Self {
        self.personal_email_address = input;
        self
    }
    /// <p>A field to describe values to segment on within personal email address.</p>
    pub fn get_personal_email_address(&self) -> &::std::option::Option<crate::types::ProfileDimension> {
        &self.personal_email_address
    }
    /// <p>A field to describe values to segment on within business email address.</p>
    pub fn business_email_address(mut self, input: crate::types::ProfileDimension) -> Self {
        self.business_email_address = ::std::option::Option::Some(input);
        self
    }
    /// <p>A field to describe values to segment on within business email address.</p>
    pub fn set_business_email_address(mut self, input: ::std::option::Option<crate::types::ProfileDimension>) -> Self {
        self.business_email_address = input;
        self
    }
    /// <p>A field to describe values to segment on within business email address.</p>
    pub fn get_business_email_address(&self) -> &::std::option::Option<crate::types::ProfileDimension> {
        &self.business_email_address
    }
    /// <p>A field to describe values to segment on within address.</p>
    pub fn address(mut self, input: crate::types::AddressDimension) -> Self {
        self.address = ::std::option::Option::Some(input);
        self
    }
    /// <p>A field to describe values to segment on within address.</p>
    pub fn set_address(mut self, input: ::std::option::Option<crate::types::AddressDimension>) -> Self {
        self.address = input;
        self
    }
    /// <p>A field to describe values to segment on within address.</p>
    pub fn get_address(&self) -> &::std::option::Option<crate::types::AddressDimension> {
        &self.address
    }
    /// <p>A field to describe values to segment on within shipping address.</p>
    pub fn shipping_address(mut self, input: crate::types::AddressDimension) -> Self {
        self.shipping_address = ::std::option::Option::Some(input);
        self
    }
    /// <p>A field to describe values to segment on within shipping address.</p>
    pub fn set_shipping_address(mut self, input: ::std::option::Option<crate::types::AddressDimension>) -> Self {
        self.shipping_address = input;
        self
    }
    /// <p>A field to describe values to segment on within shipping address.</p>
    pub fn get_shipping_address(&self) -> &::std::option::Option<crate::types::AddressDimension> {
        &self.shipping_address
    }
    /// <p>A field to describe values to segment on within mailing address.</p>
    pub fn mailing_address(mut self, input: crate::types::AddressDimension) -> Self {
        self.mailing_address = ::std::option::Option::Some(input);
        self
    }
    /// <p>A field to describe values to segment on within mailing address.</p>
    pub fn set_mailing_address(mut self, input: ::std::option::Option<crate::types::AddressDimension>) -> Self {
        self.mailing_address = input;
        self
    }
    /// <p>A field to describe values to segment on within mailing address.</p>
    pub fn get_mailing_address(&self) -> &::std::option::Option<crate::types::AddressDimension> {
        &self.mailing_address
    }
    /// <p>A field to describe values to segment on within billing address.</p>
    pub fn billing_address(mut self, input: crate::types::AddressDimension) -> Self {
        self.billing_address = ::std::option::Option::Some(input);
        self
    }
    /// <p>A field to describe values to segment on within billing address.</p>
    pub fn set_billing_address(mut self, input: ::std::option::Option<crate::types::AddressDimension>) -> Self {
        self.billing_address = input;
        self
    }
    /// <p>A field to describe values to segment on within billing address.</p>
    pub fn get_billing_address(&self) -> &::std::option::Option<crate::types::AddressDimension> {
        &self.billing_address
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>A field to describe values to segment on within attributes.</p>
    pub fn attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::AttributeDimension) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A field to describe values to segment on within attributes.</p>
    pub fn set_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeDimension>>,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// <p>A field to describe values to segment on within attributes.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeDimension>> {
        &self.attributes
    }
    /// Consumes the builder and constructs a [`ProfileAttributes`](crate::types::ProfileAttributes).
    pub fn build(self) -> crate::types::ProfileAttributes {
        crate::types::ProfileAttributes {
            account_number: self.account_number,
            additional_information: self.additional_information,
            first_name: self.first_name,
            last_name: self.last_name,
            middle_name: self.middle_name,
            gender_string: self.gender_string,
            party_type_string: self.party_type_string,
            birth_date: self.birth_date,
            phone_number: self.phone_number,
            business_name: self.business_name,
            business_phone_number: self.business_phone_number,
            home_phone_number: self.home_phone_number,
            mobile_phone_number: self.mobile_phone_number,
            email_address: self.email_address,
            personal_email_address: self.personal_email_address,
            business_email_address: self.business_email_address,
            address: self.address,
            shipping_address: self.shipping_address,
            mailing_address: self.mailing_address,
            billing_address: self.billing_address,
            attributes: self.attributes,
        }
    }
}
impl ::std::fmt::Debug for ProfileAttributesBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ProfileAttributesBuilder");
        formatter.field("account_number", &"*** Sensitive Data Redacted ***");
        formatter.field("additional_information", &"*** Sensitive Data Redacted ***");
        formatter.field("first_name", &"*** Sensitive Data Redacted ***");
        formatter.field("last_name", &"*** Sensitive Data Redacted ***");
        formatter.field("middle_name", &"*** Sensitive Data Redacted ***");
        formatter.field("gender_string", &"*** Sensitive Data Redacted ***");
        formatter.field("party_type_string", &"*** Sensitive Data Redacted ***");
        formatter.field("birth_date", &"*** Sensitive Data Redacted ***");
        formatter.field("phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("business_name", &"*** Sensitive Data Redacted ***");
        formatter.field("business_phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("home_phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("mobile_phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("personal_email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("business_email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("address", &"*** Sensitive Data Redacted ***");
        formatter.field("shipping_address", &"*** Sensitive Data Redacted ***");
        formatter.field("mailing_address", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_address", &"*** Sensitive Data Redacted ***");
        formatter.field("attributes", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
