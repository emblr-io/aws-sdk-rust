// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains all groups of the segment definition.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SegmentGroup {
    /// <p>Holds the list of groups within the segment definition.</p>
    pub groups: ::std::option::Option<::std::vec::Vec<crate::types::Group>>,
    /// <p>Defines whether to include or exclude the profiles that fit the segment criteria.</p>
    pub include: crate::types::IncludeOptions,
}
impl SegmentGroup {
    /// <p>Holds the list of groups within the segment definition.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.groups.is_none()`.
    pub fn groups(&self) -> &[crate::types::Group] {
        self.groups.as_deref().unwrap_or_default()
    }
    /// <p>Defines whether to include or exclude the profiles that fit the segment criteria.</p>
    pub fn include(&self) -> &crate::types::IncludeOptions {
        &self.include
    }
}
impl ::std::fmt::Debug for SegmentGroup {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SegmentGroup");
        formatter.field("groups", &"*** Sensitive Data Redacted ***");
        formatter.field("include", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl SegmentGroup {
    /// Creates a new builder-style object to manufacture [`SegmentGroup`](crate::types::SegmentGroup).
    pub fn builder() -> crate::types::builders::SegmentGroupBuilder {
        crate::types::builders::SegmentGroupBuilder::default()
    }
}

/// A builder for [`SegmentGroup`](crate::types::SegmentGroup).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct SegmentGroupBuilder {
    pub(crate) groups: ::std::option::Option<::std::vec::Vec<crate::types::Group>>,
    pub(crate) include: ::std::option::Option<crate::types::IncludeOptions>,
}
impl SegmentGroupBuilder {
    /// Appends an item to `groups`.
    ///
    /// To override the contents of this collection use [`set_groups`](Self::set_groups).
    ///
    /// <p>Holds the list of groups within the segment definition.</p>
    pub fn groups(mut self, input: crate::types::Group) -> Self {
        let mut v = self.groups.unwrap_or_default();
        v.push(input);
        self.groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>Holds the list of groups within the segment definition.</p>
    pub fn set_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Group>>) -> Self {
        self.groups = input;
        self
    }
    /// <p>Holds the list of groups within the segment definition.</p>
    pub fn get_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Group>> {
        &self.groups
    }
    /// <p>Defines whether to include or exclude the profiles that fit the segment criteria.</p>
    pub fn include(mut self, input: crate::types::IncludeOptions) -> Self {
        self.include = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines whether to include or exclude the profiles that fit the segment criteria.</p>
    pub fn set_include(mut self, input: ::std::option::Option<crate::types::IncludeOptions>) -> Self {
        self.include = input;
        self
    }
    /// <p>Defines whether to include or exclude the profiles that fit the segment criteria.</p>
    pub fn get_include(&self) -> &::std::option::Option<crate::types::IncludeOptions> {
        &self.include
    }
    /// Consumes the builder and constructs a [`SegmentGroup`](crate::types::SegmentGroup).
    pub fn build(self) -> crate::types::SegmentGroup {
        crate::types::SegmentGroup {
            groups: self.groups,
            include: self
                .include
                .unwrap_or("ALL".parse::<crate::types::IncludeOptions>().expect("static value validated to member")),
        }
    }
}
impl ::std::fmt::Debug for SegmentGroupBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SegmentGroupBuilder");
        formatter.field("groups", &"*** Sensitive Data Redacted ***");
        formatter.field("include", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
