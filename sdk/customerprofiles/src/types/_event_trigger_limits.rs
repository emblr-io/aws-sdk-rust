// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines limits controlling whether an event triggers the destination, based on ingestion latency and the number of invocations per profile over specific time periods.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EventTriggerLimits {
    /// <p>In milliseconds. Specifies that an event will only trigger the destination if it is processed within a certain latency period.</p>
    pub event_expiration: ::std::option::Option<i64>,
    /// <p>A list of time periods during which the limits apply.</p>
    pub periods: ::std::option::Option<::std::vec::Vec<crate::types::Period>>,
}
impl EventTriggerLimits {
    /// <p>In milliseconds. Specifies that an event will only trigger the destination if it is processed within a certain latency period.</p>
    pub fn event_expiration(&self) -> ::std::option::Option<i64> {
        self.event_expiration
    }
    /// <p>A list of time periods during which the limits apply.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.periods.is_none()`.
    pub fn periods(&self) -> &[crate::types::Period] {
        self.periods.as_deref().unwrap_or_default()
    }
}
impl EventTriggerLimits {
    /// Creates a new builder-style object to manufacture [`EventTriggerLimits`](crate::types::EventTriggerLimits).
    pub fn builder() -> crate::types::builders::EventTriggerLimitsBuilder {
        crate::types::builders::EventTriggerLimitsBuilder::default()
    }
}

/// A builder for [`EventTriggerLimits`](crate::types::EventTriggerLimits).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EventTriggerLimitsBuilder {
    pub(crate) event_expiration: ::std::option::Option<i64>,
    pub(crate) periods: ::std::option::Option<::std::vec::Vec<crate::types::Period>>,
}
impl EventTriggerLimitsBuilder {
    /// <p>In milliseconds. Specifies that an event will only trigger the destination if it is processed within a certain latency period.</p>
    pub fn event_expiration(mut self, input: i64) -> Self {
        self.event_expiration = ::std::option::Option::Some(input);
        self
    }
    /// <p>In milliseconds. Specifies that an event will only trigger the destination if it is processed within a certain latency period.</p>
    pub fn set_event_expiration(mut self, input: ::std::option::Option<i64>) -> Self {
        self.event_expiration = input;
        self
    }
    /// <p>In milliseconds. Specifies that an event will only trigger the destination if it is processed within a certain latency period.</p>
    pub fn get_event_expiration(&self) -> &::std::option::Option<i64> {
        &self.event_expiration
    }
    /// Appends an item to `periods`.
    ///
    /// To override the contents of this collection use [`set_periods`](Self::set_periods).
    ///
    /// <p>A list of time periods during which the limits apply.</p>
    pub fn periods(mut self, input: crate::types::Period) -> Self {
        let mut v = self.periods.unwrap_or_default();
        v.push(input);
        self.periods = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of time periods during which the limits apply.</p>
    pub fn set_periods(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Period>>) -> Self {
        self.periods = input;
        self
    }
    /// <p>A list of time periods during which the limits apply.</p>
    pub fn get_periods(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Period>> {
        &self.periods
    }
    /// Consumes the builder and constructs a [`EventTriggerLimits`](crate::types::EventTriggerLimits).
    pub fn build(self) -> crate::types::EventTriggerLimits {
        crate::types::EventTriggerLimits {
            event_expiration: self.event_expiration,
            periods: self.periods,
        }
    }
}
