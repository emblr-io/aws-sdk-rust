// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object that segments on Customer Profile's address object.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AddressDimension {
    /// <p>The city belonging to the address.</p>
    pub city: ::std::option::Option<crate::types::ProfileDimension>,
    /// <p>The country belonging to the address.</p>
    pub country: ::std::option::Option<crate::types::ProfileDimension>,
    /// <p>The county belonging to the address.</p>
    pub county: ::std::option::Option<crate::types::ProfileDimension>,
    /// <p>The postal code belonging to the address.</p>
    pub postal_code: ::std::option::Option<crate::types::ProfileDimension>,
    /// <p>The province belonging to the address.</p>
    pub province: ::std::option::Option<crate::types::ProfileDimension>,
    /// <p>The state belonging to the address.</p>
    pub state: ::std::option::Option<crate::types::ProfileDimension>,
}
impl AddressDimension {
    /// <p>The city belonging to the address.</p>
    pub fn city(&self) -> ::std::option::Option<&crate::types::ProfileDimension> {
        self.city.as_ref()
    }
    /// <p>The country belonging to the address.</p>
    pub fn country(&self) -> ::std::option::Option<&crate::types::ProfileDimension> {
        self.country.as_ref()
    }
    /// <p>The county belonging to the address.</p>
    pub fn county(&self) -> ::std::option::Option<&crate::types::ProfileDimension> {
        self.county.as_ref()
    }
    /// <p>The postal code belonging to the address.</p>
    pub fn postal_code(&self) -> ::std::option::Option<&crate::types::ProfileDimension> {
        self.postal_code.as_ref()
    }
    /// <p>The province belonging to the address.</p>
    pub fn province(&self) -> ::std::option::Option<&crate::types::ProfileDimension> {
        self.province.as_ref()
    }
    /// <p>The state belonging to the address.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::ProfileDimension> {
        self.state.as_ref()
    }
}
impl AddressDimension {
    /// Creates a new builder-style object to manufacture [`AddressDimension`](crate::types::AddressDimension).
    pub fn builder() -> crate::types::builders::AddressDimensionBuilder {
        crate::types::builders::AddressDimensionBuilder::default()
    }
}

/// A builder for [`AddressDimension`](crate::types::AddressDimension).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AddressDimensionBuilder {
    pub(crate) city: ::std::option::Option<crate::types::ProfileDimension>,
    pub(crate) country: ::std::option::Option<crate::types::ProfileDimension>,
    pub(crate) county: ::std::option::Option<crate::types::ProfileDimension>,
    pub(crate) postal_code: ::std::option::Option<crate::types::ProfileDimension>,
    pub(crate) province: ::std::option::Option<crate::types::ProfileDimension>,
    pub(crate) state: ::std::option::Option<crate::types::ProfileDimension>,
}
impl AddressDimensionBuilder {
    /// <p>The city belonging to the address.</p>
    pub fn city(mut self, input: crate::types::ProfileDimension) -> Self {
        self.city = ::std::option::Option::Some(input);
        self
    }
    /// <p>The city belonging to the address.</p>
    pub fn set_city(mut self, input: ::std::option::Option<crate::types::ProfileDimension>) -> Self {
        self.city = input;
        self
    }
    /// <p>The city belonging to the address.</p>
    pub fn get_city(&self) -> &::std::option::Option<crate::types::ProfileDimension> {
        &self.city
    }
    /// <p>The country belonging to the address.</p>
    pub fn country(mut self, input: crate::types::ProfileDimension) -> Self {
        self.country = ::std::option::Option::Some(input);
        self
    }
    /// <p>The country belonging to the address.</p>
    pub fn set_country(mut self, input: ::std::option::Option<crate::types::ProfileDimension>) -> Self {
        self.country = input;
        self
    }
    /// <p>The country belonging to the address.</p>
    pub fn get_country(&self) -> &::std::option::Option<crate::types::ProfileDimension> {
        &self.country
    }
    /// <p>The county belonging to the address.</p>
    pub fn county(mut self, input: crate::types::ProfileDimension) -> Self {
        self.county = ::std::option::Option::Some(input);
        self
    }
    /// <p>The county belonging to the address.</p>
    pub fn set_county(mut self, input: ::std::option::Option<crate::types::ProfileDimension>) -> Self {
        self.county = input;
        self
    }
    /// <p>The county belonging to the address.</p>
    pub fn get_county(&self) -> &::std::option::Option<crate::types::ProfileDimension> {
        &self.county
    }
    /// <p>The postal code belonging to the address.</p>
    pub fn postal_code(mut self, input: crate::types::ProfileDimension) -> Self {
        self.postal_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The postal code belonging to the address.</p>
    pub fn set_postal_code(mut self, input: ::std::option::Option<crate::types::ProfileDimension>) -> Self {
        self.postal_code = input;
        self
    }
    /// <p>The postal code belonging to the address.</p>
    pub fn get_postal_code(&self) -> &::std::option::Option<crate::types::ProfileDimension> {
        &self.postal_code
    }
    /// <p>The province belonging to the address.</p>
    pub fn province(mut self, input: crate::types::ProfileDimension) -> Self {
        self.province = ::std::option::Option::Some(input);
        self
    }
    /// <p>The province belonging to the address.</p>
    pub fn set_province(mut self, input: ::std::option::Option<crate::types::ProfileDimension>) -> Self {
        self.province = input;
        self
    }
    /// <p>The province belonging to the address.</p>
    pub fn get_province(&self) -> &::std::option::Option<crate::types::ProfileDimension> {
        &self.province
    }
    /// <p>The state belonging to the address.</p>
    pub fn state(mut self, input: crate::types::ProfileDimension) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state belonging to the address.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::ProfileDimension>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state belonging to the address.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::ProfileDimension> {
        &self.state
    }
    /// Consumes the builder and constructs a [`AddressDimension`](crate::types::AddressDimension).
    pub fn build(self) -> crate::types::AddressDimension {
        crate::types::AddressDimension {
            city: self.city,
            country: self.country,
            county: self.county,
            postal_code: self.postal_code,
            province: self.province,
            state: self.state,
        }
    }
}
