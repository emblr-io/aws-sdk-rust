// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Overrides the original range on a calculated attribute definition.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RangeOverride {
    /// <p>The start time of when to include objects.</p>
    pub start: i32,
    /// <p>The end time of when to include objects.</p>
    pub end: i32,
    /// <p>The unit for start and end.</p>
    pub unit: crate::types::RangeUnit,
}
impl RangeOverride {
    /// <p>The start time of when to include objects.</p>
    pub fn start(&self) -> i32 {
        self.start
    }
    /// <p>The end time of when to include objects.</p>
    pub fn end(&self) -> i32 {
        self.end
    }
    /// <p>The unit for start and end.</p>
    pub fn unit(&self) -> &crate::types::RangeUnit {
        &self.unit
    }
}
impl RangeOverride {
    /// Creates a new builder-style object to manufacture [`RangeOverride`](crate::types::RangeOverride).
    pub fn builder() -> crate::types::builders::RangeOverrideBuilder {
        crate::types::builders::RangeOverrideBuilder::default()
    }
}

/// A builder for [`RangeOverride`](crate::types::RangeOverride).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RangeOverrideBuilder {
    pub(crate) start: ::std::option::Option<i32>,
    pub(crate) end: ::std::option::Option<i32>,
    pub(crate) unit: ::std::option::Option<crate::types::RangeUnit>,
}
impl RangeOverrideBuilder {
    /// <p>The start time of when to include objects.</p>
    /// This field is required.
    pub fn start(mut self, input: i32) -> Self {
        self.start = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start time of when to include objects.</p>
    pub fn set_start(mut self, input: ::std::option::Option<i32>) -> Self {
        self.start = input;
        self
    }
    /// <p>The start time of when to include objects.</p>
    pub fn get_start(&self) -> &::std::option::Option<i32> {
        &self.start
    }
    /// <p>The end time of when to include objects.</p>
    pub fn end(mut self, input: i32) -> Self {
        self.end = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end time of when to include objects.</p>
    pub fn set_end(mut self, input: ::std::option::Option<i32>) -> Self {
        self.end = input;
        self
    }
    /// <p>The end time of when to include objects.</p>
    pub fn get_end(&self) -> &::std::option::Option<i32> {
        &self.end
    }
    /// <p>The unit for start and end.</p>
    /// This field is required.
    pub fn unit(mut self, input: crate::types::RangeUnit) -> Self {
        self.unit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The unit for start and end.</p>
    pub fn set_unit(mut self, input: ::std::option::Option<crate::types::RangeUnit>) -> Self {
        self.unit = input;
        self
    }
    /// <p>The unit for start and end.</p>
    pub fn get_unit(&self) -> &::std::option::Option<crate::types::RangeUnit> {
        &self.unit
    }
    /// Consumes the builder and constructs a [`RangeOverride`](crate::types::RangeOverride).
    /// This method will fail if any of the following fields are not set:
    /// - [`unit`](crate::types::builders::RangeOverrideBuilder::unit)
    pub fn build(self) -> ::std::result::Result<crate::types::RangeOverride, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RangeOverride {
            start: self.start.unwrap_or(366),
            end: self.end.unwrap_or_default(),
            unit: self.unit.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "unit",
                    "unit was not specified but it is required when building RangeOverride",
                )
            })?,
        })
    }
}
