// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure letting customers specify a relative time window over which over which data is included in the Calculated Attribute. Use positive numbers to indicate that the endpoint is in the past, and negative numbers to indicate it is in the future. ValueRange overrides Value.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ValueRange {
    /// <p>The start time of when to include objects. Use positive numbers to indicate that the starting point is in the past, and negative numbers to indicate it is in the future.</p>
    pub start: i32,
    /// <p>The end time of when to include objects. Use positive numbers to indicate that the starting point is in the past, and negative numbers to indicate it is in the future.</p>
    pub end: i32,
}
impl ValueRange {
    /// <p>The start time of when to include objects. Use positive numbers to indicate that the starting point is in the past, and negative numbers to indicate it is in the future.</p>
    pub fn start(&self) -> i32 {
        self.start
    }
    /// <p>The end time of when to include objects. Use positive numbers to indicate that the starting point is in the past, and negative numbers to indicate it is in the future.</p>
    pub fn end(&self) -> i32 {
        self.end
    }
}
impl ValueRange {
    /// Creates a new builder-style object to manufacture [`ValueRange`](crate::types::ValueRange).
    pub fn builder() -> crate::types::builders::ValueRangeBuilder {
        crate::types::builders::ValueRangeBuilder::default()
    }
}

/// A builder for [`ValueRange`](crate::types::ValueRange).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ValueRangeBuilder {
    pub(crate) start: ::std::option::Option<i32>,
    pub(crate) end: ::std::option::Option<i32>,
}
impl ValueRangeBuilder {
    /// <p>The start time of when to include objects. Use positive numbers to indicate that the starting point is in the past, and negative numbers to indicate it is in the future.</p>
    /// This field is required.
    pub fn start(mut self, input: i32) -> Self {
        self.start = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start time of when to include objects. Use positive numbers to indicate that the starting point is in the past, and negative numbers to indicate it is in the future.</p>
    pub fn set_start(mut self, input: ::std::option::Option<i32>) -> Self {
        self.start = input;
        self
    }
    /// <p>The start time of when to include objects. Use positive numbers to indicate that the starting point is in the past, and negative numbers to indicate it is in the future.</p>
    pub fn get_start(&self) -> &::std::option::Option<i32> {
        &self.start
    }
    /// <p>The end time of when to include objects. Use positive numbers to indicate that the starting point is in the past, and negative numbers to indicate it is in the future.</p>
    /// This field is required.
    pub fn end(mut self, input: i32) -> Self {
        self.end = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end time of when to include objects. Use positive numbers to indicate that the starting point is in the past, and negative numbers to indicate it is in the future.</p>
    pub fn set_end(mut self, input: ::std::option::Option<i32>) -> Self {
        self.end = input;
        self
    }
    /// <p>The end time of when to include objects. Use positive numbers to indicate that the starting point is in the past, and negative numbers to indicate it is in the future.</p>
    pub fn get_end(&self) -> &::std::option::Option<i32> {
        &self.end
    }
    /// Consumes the builder and constructs a [`ValueRange`](crate::types::ValueRange).
    /// This method will fail if any of the following fields are not set:
    /// - [`start`](crate::types::builders::ValueRangeBuilder::start)
    /// - [`end`](crate::types::builders::ValueRangeBuilder::end)
    pub fn build(self) -> ::std::result::Result<crate::types::ValueRange, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ValueRange {
            start: self.start.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start",
                    "start was not specified but it is required when building ValueRange",
                )
            })?,
            end: self.end.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "end",
                    "end was not specified but it is required when building ValueRange",
                )
            })?,
        })
    }
}
