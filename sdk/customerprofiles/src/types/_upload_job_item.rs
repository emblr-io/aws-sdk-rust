// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary information for an individual upload job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UploadJobItem {
    /// <p>The unique identifier of the upload job.</p>
    pub job_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the upload job.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the upload job.</p>
    pub status: ::std::option::Option<crate::types::UploadJobStatus>,
    /// <p>The reason for the current status of the upload job.</p>
    pub status_reason: ::std::option::Option<crate::types::StatusReason>,
    /// <p>The timestamp when the upload job was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the upload job was completed.</p>
    pub completed_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The expiry duration for the profiles ingested with the upload job.</p>
    pub data_expiry: ::std::option::Option<i32>,
}
impl UploadJobItem {
    /// <p>The unique identifier of the upload job.</p>
    pub fn job_id(&self) -> ::std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The name of the upload job.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The current status of the upload job.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::UploadJobStatus> {
        self.status.as_ref()
    }
    /// <p>The reason for the current status of the upload job.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&crate::types::StatusReason> {
        self.status_reason.as_ref()
    }
    /// <p>The timestamp when the upload job was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp when the upload job was completed.</p>
    pub fn completed_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.completed_at.as_ref()
    }
    /// <p>The expiry duration for the profiles ingested with the upload job.</p>
    pub fn data_expiry(&self) -> ::std::option::Option<i32> {
        self.data_expiry
    }
}
impl UploadJobItem {
    /// Creates a new builder-style object to manufacture [`UploadJobItem`](crate::types::UploadJobItem).
    pub fn builder() -> crate::types::builders::UploadJobItemBuilder {
        crate::types::builders::UploadJobItemBuilder::default()
    }
}

/// A builder for [`UploadJobItem`](crate::types::UploadJobItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UploadJobItemBuilder {
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::UploadJobStatus>,
    pub(crate) status_reason: ::std::option::Option<crate::types::StatusReason>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) completed_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) data_expiry: ::std::option::Option<i32>,
}
impl UploadJobItemBuilder {
    /// <p>The unique identifier of the upload job.</p>
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the upload job.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The unique identifier of the upload job.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>The name of the upload job.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the upload job.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The name of the upload job.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The current status of the upload job.</p>
    pub fn status(mut self, input: crate::types::UploadJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the upload job.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::UploadJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the upload job.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::UploadJobStatus> {
        &self.status
    }
    /// <p>The reason for the current status of the upload job.</p>
    pub fn status_reason(mut self, input: crate::types::StatusReason) -> Self {
        self.status_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>The reason for the current status of the upload job.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<crate::types::StatusReason>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The reason for the current status of the upload job.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<crate::types::StatusReason> {
        &self.status_reason
    }
    /// <p>The timestamp when the upload job was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the upload job was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the upload job was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when the upload job was completed.</p>
    pub fn completed_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.completed_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the upload job was completed.</p>
    pub fn set_completed_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.completed_at = input;
        self
    }
    /// <p>The timestamp when the upload job was completed.</p>
    pub fn get_completed_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.completed_at
    }
    /// <p>The expiry duration for the profiles ingested with the upload job.</p>
    pub fn data_expiry(mut self, input: i32) -> Self {
        self.data_expiry = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expiry duration for the profiles ingested with the upload job.</p>
    pub fn set_data_expiry(mut self, input: ::std::option::Option<i32>) -> Self {
        self.data_expiry = input;
        self
    }
    /// <p>The expiry duration for the profiles ingested with the upload job.</p>
    pub fn get_data_expiry(&self) -> &::std::option::Option<i32> {
        &self.data_expiry
    }
    /// Consumes the builder and constructs a [`UploadJobItem`](crate::types::UploadJobItem).
    pub fn build(self) -> crate::types::UploadJobItem {
        crate::types::UploadJobItem {
            job_id: self.job_id,
            display_name: self.display_name,
            status: self.status,
            status_reason: self.status_reason,
            created_at: self.created_at,
            completed_at: self.completed_at,
            data_expiry: self.data_expiry,
        }
    }
}
