// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the map of attribute names to attribute dimensions.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FilterDimension {
    /// <p>Is the attribute within the FilterDimension map</p>
    pub attributes: ::std::collections::HashMap<::std::string::String, crate::types::FilterAttributeDimension>,
}
impl FilterDimension {
    /// <p>Is the attribute within the FilterDimension map</p>
    pub fn attributes(&self) -> &::std::collections::HashMap<::std::string::String, crate::types::FilterAttributeDimension> {
        &self.attributes
    }
}
impl FilterDimension {
    /// Creates a new builder-style object to manufacture [`FilterDimension`](crate::types::FilterDimension).
    pub fn builder() -> crate::types::builders::FilterDimensionBuilder {
        crate::types::builders::FilterDimensionBuilder::default()
    }
}

/// A builder for [`FilterDimension`](crate::types::FilterDimension).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FilterDimensionBuilder {
    pub(crate) attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::FilterAttributeDimension>>,
}
impl FilterDimensionBuilder {
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>Is the attribute within the FilterDimension map</p>
    pub fn attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::FilterAttributeDimension) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Is the attribute within the FilterDimension map</p>
    pub fn set_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::FilterAttributeDimension>>,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// <p>Is the attribute within the FilterDimension map</p>
    pub fn get_attributes(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::FilterAttributeDimension>> {
        &self.attributes
    }
    /// Consumes the builder and constructs a [`FilterDimension`](crate::types::FilterDimension).
    /// This method will fail if any of the following fields are not set:
    /// - [`attributes`](crate::types::builders::FilterDimensionBuilder::attributes)
    pub fn build(self) -> ::std::result::Result<crate::types::FilterDimension, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FilterDimension {
            attributes: self.attributes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "attributes",
                    "attributes was not specified but it is required when building FilterDimension",
                )
            })?,
        })
    }
}
