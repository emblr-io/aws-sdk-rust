// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A specific event dimension to be assessed.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EventTriggerDimension {
    /// <p>A list of object attributes to be evaluated.</p>
    pub object_attributes: ::std::vec::Vec<crate::types::ObjectAttribute>,
}
impl EventTriggerDimension {
    /// <p>A list of object attributes to be evaluated.</p>
    pub fn object_attributes(&self) -> &[crate::types::ObjectAttribute] {
        use std::ops::Deref;
        self.object_attributes.deref()
    }
}
impl EventTriggerDimension {
    /// Creates a new builder-style object to manufacture [`EventTriggerDimension`](crate::types::EventTriggerDimension).
    pub fn builder() -> crate::types::builders::EventTriggerDimensionBuilder {
        crate::types::builders::EventTriggerDimensionBuilder::default()
    }
}

/// A builder for [`EventTriggerDimension`](crate::types::EventTriggerDimension).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EventTriggerDimensionBuilder {
    pub(crate) object_attributes: ::std::option::Option<::std::vec::Vec<crate::types::ObjectAttribute>>,
}
impl EventTriggerDimensionBuilder {
    /// Appends an item to `object_attributes`.
    ///
    /// To override the contents of this collection use [`set_object_attributes`](Self::set_object_attributes).
    ///
    /// <p>A list of object attributes to be evaluated.</p>
    pub fn object_attributes(mut self, input: crate::types::ObjectAttribute) -> Self {
        let mut v = self.object_attributes.unwrap_or_default();
        v.push(input);
        self.object_attributes = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of object attributes to be evaluated.</p>
    pub fn set_object_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ObjectAttribute>>) -> Self {
        self.object_attributes = input;
        self
    }
    /// <p>A list of object attributes to be evaluated.</p>
    pub fn get_object_attributes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ObjectAttribute>> {
        &self.object_attributes
    }
    /// Consumes the builder and constructs a [`EventTriggerDimension`](crate::types::EventTriggerDimension).
    /// This method will fail if any of the following fields are not set:
    /// - [`object_attributes`](crate::types::builders::EventTriggerDimensionBuilder::object_attributes)
    pub fn build(self) -> ::std::result::Result<crate::types::EventTriggerDimension, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EventTriggerDimension {
            object_attributes: self.object_attributes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "object_attributes",
                    "object_attributes was not specified but it is required when building EventTriggerDimension",
                )
            })?,
        })
    }
}
