// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object holding the segment definition fields.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SegmentDefinitionItem {
    /// <p>Name of the segment definition.</p>
    pub segment_definition_name: ::std::option::Option<::std::string::String>,
    /// <p>Display name of the segment definition.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the segment definition.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The arn of the segment definition.</p>
    pub segment_definition_arn: ::std::option::Option<::std::string::String>,
    /// <p>When the segment definition was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The tags belonging to the segment definition.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl SegmentDefinitionItem {
    /// <p>Name of the segment definition.</p>
    pub fn segment_definition_name(&self) -> ::std::option::Option<&str> {
        self.segment_definition_name.as_deref()
    }
    /// <p>Display name of the segment definition.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The description of the segment definition.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The arn of the segment definition.</p>
    pub fn segment_definition_arn(&self) -> ::std::option::Option<&str> {
        self.segment_definition_arn.as_deref()
    }
    /// <p>When the segment definition was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The tags belonging to the segment definition.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for SegmentDefinitionItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SegmentDefinitionItem");
        formatter.field("segment_definition_name", &self.segment_definition_name);
        formatter.field("display_name", &self.display_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("segment_definition_arn", &self.segment_definition_arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl SegmentDefinitionItem {
    /// Creates a new builder-style object to manufacture [`SegmentDefinitionItem`](crate::types::SegmentDefinitionItem).
    pub fn builder() -> crate::types::builders::SegmentDefinitionItemBuilder {
        crate::types::builders::SegmentDefinitionItemBuilder::default()
    }
}

/// A builder for [`SegmentDefinitionItem`](crate::types::SegmentDefinitionItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct SegmentDefinitionItemBuilder {
    pub(crate) segment_definition_name: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) segment_definition_arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl SegmentDefinitionItemBuilder {
    /// <p>Name of the segment definition.</p>
    pub fn segment_definition_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.segment_definition_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the segment definition.</p>
    pub fn set_segment_definition_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.segment_definition_name = input;
        self
    }
    /// <p>Name of the segment definition.</p>
    pub fn get_segment_definition_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.segment_definition_name
    }
    /// <p>Display name of the segment definition.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Display name of the segment definition.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>Display name of the segment definition.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The description of the segment definition.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the segment definition.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the segment definition.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The arn of the segment definition.</p>
    pub fn segment_definition_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.segment_definition_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The arn of the segment definition.</p>
    pub fn set_segment_definition_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.segment_definition_arn = input;
        self
    }
    /// <p>The arn of the segment definition.</p>
    pub fn get_segment_definition_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.segment_definition_arn
    }
    /// <p>When the segment definition was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the segment definition was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>When the segment definition was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags belonging to the segment definition.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags belonging to the segment definition.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags belonging to the segment definition.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`SegmentDefinitionItem`](crate::types::SegmentDefinitionItem).
    pub fn build(self) -> crate::types::SegmentDefinitionItem {
        crate::types::SegmentDefinitionItem {
            segment_definition_name: self.segment_definition_name,
            display_name: self.display_name,
            description: self.description,
            segment_definition_arn: self.segment_definition_arn,
            created_at: self.created_at,
            tags: self.tags,
        }
    }
}
impl ::std::fmt::Debug for SegmentDefinitionItemBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SegmentDefinitionItemBuilder");
        formatter.field("segment_definition_name", &self.segment_definition_name);
        formatter.field("display_name", &self.display_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("segment_definition_arn", &self.segment_definition_arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
