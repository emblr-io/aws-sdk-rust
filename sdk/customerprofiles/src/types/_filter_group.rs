// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object that holds the dimensions to filter on.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FilterGroup {
    /// <p>The type of logical relationship between the dimensions of the Filter group.</p>
    pub r#type: crate::types::Type,
    /// <p>Object that holds the attributes to filter on.</p>
    pub dimensions: ::std::vec::Vec<crate::types::FilterDimension>,
}
impl FilterGroup {
    /// <p>The type of logical relationship between the dimensions of the Filter group.</p>
    pub fn r#type(&self) -> &crate::types::Type {
        &self.r#type
    }
    /// <p>Object that holds the attributes to filter on.</p>
    pub fn dimensions(&self) -> &[crate::types::FilterDimension] {
        use std::ops::Deref;
        self.dimensions.deref()
    }
}
impl FilterGroup {
    /// Creates a new builder-style object to manufacture [`FilterGroup`](crate::types::FilterGroup).
    pub fn builder() -> crate::types::builders::FilterGroupBuilder {
        crate::types::builders::FilterGroupBuilder::default()
    }
}

/// A builder for [`FilterGroup`](crate::types::FilterGroup).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FilterGroupBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::Type>,
    pub(crate) dimensions: ::std::option::Option<::std::vec::Vec<crate::types::FilterDimension>>,
}
impl FilterGroupBuilder {
    /// <p>The type of logical relationship between the dimensions of the Filter group.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::Type) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of logical relationship between the dimensions of the Filter group.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::Type>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of logical relationship between the dimensions of the Filter group.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::Type> {
        &self.r#type
    }
    /// Appends an item to `dimensions`.
    ///
    /// To override the contents of this collection use [`set_dimensions`](Self::set_dimensions).
    ///
    /// <p>Object that holds the attributes to filter on.</p>
    pub fn dimensions(mut self, input: crate::types::FilterDimension) -> Self {
        let mut v = self.dimensions.unwrap_or_default();
        v.push(input);
        self.dimensions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Object that holds the attributes to filter on.</p>
    pub fn set_dimensions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FilterDimension>>) -> Self {
        self.dimensions = input;
        self
    }
    /// <p>Object that holds the attributes to filter on.</p>
    pub fn get_dimensions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FilterDimension>> {
        &self.dimensions
    }
    /// Consumes the builder and constructs a [`FilterGroup`](crate::types::FilterGroup).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::FilterGroupBuilder::type)
    /// - [`dimensions`](crate::types::builders::FilterGroupBuilder::dimensions)
    pub fn build(self) -> ::std::result::Result<crate::types::FilterGroup, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FilterGroup {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building FilterGroup",
                )
            })?,
            dimensions: self.dimensions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dimensions",
                    "dimensions was not specified but it is required when building FilterGroup",
                )
            })?,
        })
    }
}
