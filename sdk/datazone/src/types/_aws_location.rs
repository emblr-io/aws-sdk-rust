// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The location of a project.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsLocation {
    /// <p>The access role of a connection.</p>
    pub access_role: ::std::option::Option<::std::string::String>,
    /// <p>The account ID of a connection.</p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The Region of a connection.</p>
    pub aws_region: ::std::option::Option<::std::string::String>,
    /// <p>The IAM connection ID of a connection.</p>
    pub iam_connection_id: ::std::option::Option<::std::string::String>,
}
impl AwsLocation {
    /// <p>The access role of a connection.</p>
    pub fn access_role(&self) -> ::std::option::Option<&str> {
        self.access_role.as_deref()
    }
    /// <p>The account ID of a connection.</p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>The Region of a connection.</p>
    pub fn aws_region(&self) -> ::std::option::Option<&str> {
        self.aws_region.as_deref()
    }
    /// <p>The IAM connection ID of a connection.</p>
    pub fn iam_connection_id(&self) -> ::std::option::Option<&str> {
        self.iam_connection_id.as_deref()
    }
}
impl AwsLocation {
    /// Creates a new builder-style object to manufacture [`AwsLocation`](crate::types::AwsLocation).
    pub fn builder() -> crate::types::builders::AwsLocationBuilder {
        crate::types::builders::AwsLocationBuilder::default()
    }
}

/// A builder for [`AwsLocation`](crate::types::AwsLocation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AwsLocationBuilder {
    pub(crate) access_role: ::std::option::Option<::std::string::String>,
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) aws_region: ::std::option::Option<::std::string::String>,
    pub(crate) iam_connection_id: ::std::option::Option<::std::string::String>,
}
impl AwsLocationBuilder {
    /// <p>The access role of a connection.</p>
    pub fn access_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The access role of a connection.</p>
    pub fn set_access_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_role = input;
        self
    }
    /// <p>The access role of a connection.</p>
    pub fn get_access_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_role
    }
    /// <p>The account ID of a connection.</p>
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account ID of a connection.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The account ID of a connection.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// <p>The Region of a connection.</p>
    pub fn aws_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Region of a connection.</p>
    pub fn set_aws_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_region = input;
        self
    }
    /// <p>The Region of a connection.</p>
    pub fn get_aws_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_region
    }
    /// <p>The IAM connection ID of a connection.</p>
    pub fn iam_connection_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_connection_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM connection ID of a connection.</p>
    pub fn set_iam_connection_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_connection_id = input;
        self
    }
    /// <p>The IAM connection ID of a connection.</p>
    pub fn get_iam_connection_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_connection_id
    }
    /// Consumes the builder and constructs a [`AwsLocation`](crate::types::AwsLocation).
    pub fn build(self) -> crate::types::AwsLocation {
        crate::types::AwsLocation {
            access_role: self.access_role,
            aws_account_id: self.aws_account_id,
            aws_region: self.aws_region,
            iam_connection_id: self.iam_connection_id,
        }
    }
}
