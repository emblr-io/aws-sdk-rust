// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of the rule.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RuleSummary {
    /// <p>The ID of the rule.</p>
    pub identifier: ::std::option::Option<::std::string::String>,
    /// <p>The revision of the rule.</p>
    pub revision: ::std::option::Option<::std::string::String>,
    /// <p>The type of the rule.</p>
    pub rule_type: ::std::option::Option<crate::types::RuleType>,
    /// <p>The name of the rule.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The target type of the rule.</p>
    pub target_type: ::std::option::Option<crate::types::RuleTargetType>,
    /// <p>The target of the rule.</p>
    pub target: ::std::option::Option<crate::types::RuleTarget>,
    /// <p>The action of the rule.</p>
    pub action: ::std::option::Option<crate::types::RuleAction>,
    /// <p>The scope of the rule.</p>
    pub scope: ::std::option::Option<crate::types::RuleScope>,
    /// <p>The timestamp at which the rule was last updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp at which the rule was last updated.</p>
    pub last_updated_by: ::std::option::Option<::std::string::String>,
}
impl RuleSummary {
    /// <p>The ID of the rule.</p>
    pub fn identifier(&self) -> ::std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>The revision of the rule.</p>
    pub fn revision(&self) -> ::std::option::Option<&str> {
        self.revision.as_deref()
    }
    /// <p>The type of the rule.</p>
    pub fn rule_type(&self) -> ::std::option::Option<&crate::types::RuleType> {
        self.rule_type.as_ref()
    }
    /// <p>The name of the rule.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The target type of the rule.</p>
    pub fn target_type(&self) -> ::std::option::Option<&crate::types::RuleTargetType> {
        self.target_type.as_ref()
    }
    /// <p>The target of the rule.</p>
    pub fn target(&self) -> ::std::option::Option<&crate::types::RuleTarget> {
        self.target.as_ref()
    }
    /// <p>The action of the rule.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::RuleAction> {
        self.action.as_ref()
    }
    /// <p>The scope of the rule.</p>
    pub fn scope(&self) -> ::std::option::Option<&crate::types::RuleScope> {
        self.scope.as_ref()
    }
    /// <p>The timestamp at which the rule was last updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The timestamp at which the rule was last updated.</p>
    pub fn last_updated_by(&self) -> ::std::option::Option<&str> {
        self.last_updated_by.as_deref()
    }
}
impl ::std::fmt::Debug for RuleSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RuleSummary");
        formatter.field("identifier", &self.identifier);
        formatter.field("revision", &self.revision);
        formatter.field("rule_type", &self.rule_type);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("target_type", &self.target_type);
        formatter.field("target", &self.target);
        formatter.field("action", &self.action);
        formatter.field("scope", &self.scope);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("last_updated_by", &self.last_updated_by);
        formatter.finish()
    }
}
impl RuleSummary {
    /// Creates a new builder-style object to manufacture [`RuleSummary`](crate::types::RuleSummary).
    pub fn builder() -> crate::types::builders::RuleSummaryBuilder {
        crate::types::builders::RuleSummaryBuilder::default()
    }
}

/// A builder for [`RuleSummary`](crate::types::RuleSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RuleSummaryBuilder {
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) revision: ::std::option::Option<::std::string::String>,
    pub(crate) rule_type: ::std::option::Option<crate::types::RuleType>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) target_type: ::std::option::Option<crate::types::RuleTargetType>,
    pub(crate) target: ::std::option::Option<crate::types::RuleTarget>,
    pub(crate) action: ::std::option::Option<crate::types::RuleAction>,
    pub(crate) scope: ::std::option::Option<crate::types::RuleScope>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_by: ::std::option::Option<::std::string::String>,
}
impl RuleSummaryBuilder {
    /// <p>The ID of the rule.</p>
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the rule.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The ID of the rule.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>The revision of the rule.</p>
    pub fn revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.revision = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The revision of the rule.</p>
    pub fn set_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.revision = input;
        self
    }
    /// <p>The revision of the rule.</p>
    pub fn get_revision(&self) -> &::std::option::Option<::std::string::String> {
        &self.revision
    }
    /// <p>The type of the rule.</p>
    pub fn rule_type(mut self, input: crate::types::RuleType) -> Self {
        self.rule_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the rule.</p>
    pub fn set_rule_type(mut self, input: ::std::option::Option<crate::types::RuleType>) -> Self {
        self.rule_type = input;
        self
    }
    /// <p>The type of the rule.</p>
    pub fn get_rule_type(&self) -> &::std::option::Option<crate::types::RuleType> {
        &self.rule_type
    }
    /// <p>The name of the rule.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the rule.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the rule.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The target type of the rule.</p>
    pub fn target_type(mut self, input: crate::types::RuleTargetType) -> Self {
        self.target_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target type of the rule.</p>
    pub fn set_target_type(mut self, input: ::std::option::Option<crate::types::RuleTargetType>) -> Self {
        self.target_type = input;
        self
    }
    /// <p>The target type of the rule.</p>
    pub fn get_target_type(&self) -> &::std::option::Option<crate::types::RuleTargetType> {
        &self.target_type
    }
    /// <p>The target of the rule.</p>
    pub fn target(mut self, input: crate::types::RuleTarget) -> Self {
        self.target = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target of the rule.</p>
    pub fn set_target(mut self, input: ::std::option::Option<crate::types::RuleTarget>) -> Self {
        self.target = input;
        self
    }
    /// <p>The target of the rule.</p>
    pub fn get_target(&self) -> &::std::option::Option<crate::types::RuleTarget> {
        &self.target
    }
    /// <p>The action of the rule.</p>
    pub fn action(mut self, input: crate::types::RuleAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action of the rule.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::RuleAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action of the rule.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::RuleAction> {
        &self.action
    }
    /// <p>The scope of the rule.</p>
    pub fn scope(mut self, input: crate::types::RuleScope) -> Self {
        self.scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scope of the rule.</p>
    pub fn set_scope(mut self, input: ::std::option::Option<crate::types::RuleScope>) -> Self {
        self.scope = input;
        self
    }
    /// <p>The scope of the rule.</p>
    pub fn get_scope(&self) -> &::std::option::Option<crate::types::RuleScope> {
        &self.scope
    }
    /// <p>The timestamp at which the rule was last updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which the rule was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp at which the rule was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The timestamp at which the rule was last updated.</p>
    pub fn last_updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The timestamp at which the rule was last updated.</p>
    pub fn set_last_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_updated_by = input;
        self
    }
    /// <p>The timestamp at which the rule was last updated.</p>
    pub fn get_last_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_updated_by
    }
    /// Consumes the builder and constructs a [`RuleSummary`](crate::types::RuleSummary).
    pub fn build(self) -> crate::types::RuleSummary {
        crate::types::RuleSummary {
            identifier: self.identifier,
            revision: self.revision,
            rule_type: self.rule_type,
            name: self.name,
            target_type: self.target_type,
            target: self.target,
            action: self.action,
            scope: self.scope,
            updated_at: self.updated_at,
            last_updated_by: self.last_updated_by,
        }
    }
}
impl ::std::fmt::Debug for RuleSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RuleSummaryBuilder");
        formatter.field("identifier", &self.identifier);
        formatter.field("revision", &self.revision);
        formatter.field("rule_type", &self.rule_type);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("target_type", &self.target_type);
        formatter.field("target", &self.target);
        formatter.field("action", &self.action);
        formatter.field("scope", &self.scope);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("last_updated_by", &self.last_updated_by);
        formatter.finish()
    }
}
