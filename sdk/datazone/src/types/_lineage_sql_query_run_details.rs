// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The SQL query run details of a data lineage run.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LineageSqlQueryRunDetails {
    /// <p>The query start time in the SQL query run details of a data lineage run.</p>
    pub query_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The query end time in the SQL query run details of a data lineage run.</p>
    pub query_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The total queries processed in the SQL query run details of a data lineage run.</p>
    pub total_queries_processed: ::std::option::Option<i32>,
    /// <p>The number of queries that failed in the SQL query run details of a data lineage run.</p>
    pub num_queries_failed: ::std::option::Option<i32>,
    /// <p>The error message of the SQL query run details of a data lineage run.</p>
    pub error_messages: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl LineageSqlQueryRunDetails {
    /// <p>The query start time in the SQL query run details of a data lineage run.</p>
    pub fn query_start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.query_start_time.as_ref()
    }
    /// <p>The query end time in the SQL query run details of a data lineage run.</p>
    pub fn query_end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.query_end_time.as_ref()
    }
    /// <p>The total queries processed in the SQL query run details of a data lineage run.</p>
    pub fn total_queries_processed(&self) -> ::std::option::Option<i32> {
        self.total_queries_processed
    }
    /// <p>The number of queries that failed in the SQL query run details of a data lineage run.</p>
    pub fn num_queries_failed(&self) -> ::std::option::Option<i32> {
        self.num_queries_failed
    }
    /// <p>The error message of the SQL query run details of a data lineage run.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.error_messages.is_none()`.
    pub fn error_messages(&self) -> &[::std::string::String] {
        self.error_messages.as_deref().unwrap_or_default()
    }
}
impl LineageSqlQueryRunDetails {
    /// Creates a new builder-style object to manufacture [`LineageSqlQueryRunDetails`](crate::types::LineageSqlQueryRunDetails).
    pub fn builder() -> crate::types::builders::LineageSqlQueryRunDetailsBuilder {
        crate::types::builders::LineageSqlQueryRunDetailsBuilder::default()
    }
}

/// A builder for [`LineageSqlQueryRunDetails`](crate::types::LineageSqlQueryRunDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LineageSqlQueryRunDetailsBuilder {
    pub(crate) query_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) query_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) total_queries_processed: ::std::option::Option<i32>,
    pub(crate) num_queries_failed: ::std::option::Option<i32>,
    pub(crate) error_messages: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl LineageSqlQueryRunDetailsBuilder {
    /// <p>The query start time in the SQL query run details of a data lineage run.</p>
    pub fn query_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.query_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The query start time in the SQL query run details of a data lineage run.</p>
    pub fn set_query_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.query_start_time = input;
        self
    }
    /// <p>The query start time in the SQL query run details of a data lineage run.</p>
    pub fn get_query_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.query_start_time
    }
    /// <p>The query end time in the SQL query run details of a data lineage run.</p>
    pub fn query_end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.query_end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The query end time in the SQL query run details of a data lineage run.</p>
    pub fn set_query_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.query_end_time = input;
        self
    }
    /// <p>The query end time in the SQL query run details of a data lineage run.</p>
    pub fn get_query_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.query_end_time
    }
    /// <p>The total queries processed in the SQL query run details of a data lineage run.</p>
    pub fn total_queries_processed(mut self, input: i32) -> Self {
        self.total_queries_processed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total queries processed in the SQL query run details of a data lineage run.</p>
    pub fn set_total_queries_processed(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_queries_processed = input;
        self
    }
    /// <p>The total queries processed in the SQL query run details of a data lineage run.</p>
    pub fn get_total_queries_processed(&self) -> &::std::option::Option<i32> {
        &self.total_queries_processed
    }
    /// <p>The number of queries that failed in the SQL query run details of a data lineage run.</p>
    pub fn num_queries_failed(mut self, input: i32) -> Self {
        self.num_queries_failed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of queries that failed in the SQL query run details of a data lineage run.</p>
    pub fn set_num_queries_failed(mut self, input: ::std::option::Option<i32>) -> Self {
        self.num_queries_failed = input;
        self
    }
    /// <p>The number of queries that failed in the SQL query run details of a data lineage run.</p>
    pub fn get_num_queries_failed(&self) -> &::std::option::Option<i32> {
        &self.num_queries_failed
    }
    /// Appends an item to `error_messages`.
    ///
    /// To override the contents of this collection use [`set_error_messages`](Self::set_error_messages).
    ///
    /// <p>The error message of the SQL query run details of a data lineage run.</p>
    pub fn error_messages(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.error_messages.unwrap_or_default();
        v.push(input.into());
        self.error_messages = ::std::option::Option::Some(v);
        self
    }
    /// <p>The error message of the SQL query run details of a data lineage run.</p>
    pub fn set_error_messages(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.error_messages = input;
        self
    }
    /// <p>The error message of the SQL query run details of a data lineage run.</p>
    pub fn get_error_messages(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.error_messages
    }
    /// Consumes the builder and constructs a [`LineageSqlQueryRunDetails`](crate::types::LineageSqlQueryRunDetails).
    pub fn build(self) -> crate::types::LineageSqlQueryRunDetails {
        crate::types::LineageSqlQueryRunDetails {
            query_start_time: self.query_start_time,
            query_end_time: self.query_end_time,
            total_queries_processed: self.total_queries_processed,
            num_queries_failed: self.num_queries_failed,
            error_messages: self.error_messages,
        }
    }
}
