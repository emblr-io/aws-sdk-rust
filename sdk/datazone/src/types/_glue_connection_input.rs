// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon Web Services Glue connecton input.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GlueConnectionInput {
    /// <p>The connection properties of the Amazon Web Services Glue connection.</p>
    pub connection_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The physical connection requirements for the Amazon Web Services Glue connection.</p>
    pub physical_connection_requirements: ::std::option::Option<crate::types::PhysicalConnectionRequirements>,
    /// <p>The name of the Amazon Web Services Glue connection.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the Amazon Web Services Glue connection.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The connection type of the Amazon Web Services Glue connection.</p>
    pub connection_type: ::std::option::Option<crate::types::GlueConnectionType>,
    /// <p>The match criteria of the Amazon Web Services Glue connection.</p>
    pub match_criteria: ::std::option::Option<::std::string::String>,
    /// <p>Speciefies whether to validate credentials of the Amazon Web Services Glue connection.</p>
    pub validate_credentials: ::std::option::Option<bool>,
    /// <p>Speciefies whether to validate for compute environments of the Amazon Web Services Glue connection.</p>
    pub validate_for_compute_environments: ::std::option::Option<::std::vec::Vec<crate::types::ComputeEnvironments>>,
    /// <p>The Spark properties of the Amazon Web Services Glue connection.</p>
    pub spark_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The Amazon Athena properties of the Amazon Web Services Glue connection.</p>
    pub athena_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The Python properties of the Amazon Web Services Glue connection.</p>
    pub python_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The authentication configuration of the Amazon Web Services Glue connection.</p>
    pub authentication_configuration: ::std::option::Option<crate::types::AuthenticationConfigurationInput>,
}
impl GlueConnectionInput {
    /// <p>The connection properties of the Amazon Web Services Glue connection.</p>
    pub fn connection_properties(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.connection_properties.as_ref()
    }
    /// <p>The physical connection requirements for the Amazon Web Services Glue connection.</p>
    pub fn physical_connection_requirements(&self) -> ::std::option::Option<&crate::types::PhysicalConnectionRequirements> {
        self.physical_connection_requirements.as_ref()
    }
    /// <p>The name of the Amazon Web Services Glue connection.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the Amazon Web Services Glue connection.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The connection type of the Amazon Web Services Glue connection.</p>
    pub fn connection_type(&self) -> ::std::option::Option<&crate::types::GlueConnectionType> {
        self.connection_type.as_ref()
    }
    /// <p>The match criteria of the Amazon Web Services Glue connection.</p>
    pub fn match_criteria(&self) -> ::std::option::Option<&str> {
        self.match_criteria.as_deref()
    }
    /// <p>Speciefies whether to validate credentials of the Amazon Web Services Glue connection.</p>
    pub fn validate_credentials(&self) -> ::std::option::Option<bool> {
        self.validate_credentials
    }
    /// <p>Speciefies whether to validate for compute environments of the Amazon Web Services Glue connection.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.validate_for_compute_environments.is_none()`.
    pub fn validate_for_compute_environments(&self) -> &[crate::types::ComputeEnvironments] {
        self.validate_for_compute_environments.as_deref().unwrap_or_default()
    }
    /// <p>The Spark properties of the Amazon Web Services Glue connection.</p>
    pub fn spark_properties(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.spark_properties.as_ref()
    }
    /// <p>The Amazon Athena properties of the Amazon Web Services Glue connection.</p>
    pub fn athena_properties(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.athena_properties.as_ref()
    }
    /// <p>The Python properties of the Amazon Web Services Glue connection.</p>
    pub fn python_properties(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.python_properties.as_ref()
    }
    /// <p>The authentication configuration of the Amazon Web Services Glue connection.</p>
    pub fn authentication_configuration(&self) -> ::std::option::Option<&crate::types::AuthenticationConfigurationInput> {
        self.authentication_configuration.as_ref()
    }
}
impl GlueConnectionInput {
    /// Creates a new builder-style object to manufacture [`GlueConnectionInput`](crate::types::GlueConnectionInput).
    pub fn builder() -> crate::types::builders::GlueConnectionInputBuilder {
        crate::types::builders::GlueConnectionInputBuilder::default()
    }
}

/// A builder for [`GlueConnectionInput`](crate::types::GlueConnectionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GlueConnectionInputBuilder {
    pub(crate) connection_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) physical_connection_requirements: ::std::option::Option<crate::types::PhysicalConnectionRequirements>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) connection_type: ::std::option::Option<crate::types::GlueConnectionType>,
    pub(crate) match_criteria: ::std::option::Option<::std::string::String>,
    pub(crate) validate_credentials: ::std::option::Option<bool>,
    pub(crate) validate_for_compute_environments: ::std::option::Option<::std::vec::Vec<crate::types::ComputeEnvironments>>,
    pub(crate) spark_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) athena_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) python_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) authentication_configuration: ::std::option::Option<crate::types::AuthenticationConfigurationInput>,
}
impl GlueConnectionInputBuilder {
    /// Adds a key-value pair to `connection_properties`.
    ///
    /// To override the contents of this collection use [`set_connection_properties`](Self::set_connection_properties).
    ///
    /// <p>The connection properties of the Amazon Web Services Glue connection.</p>
    pub fn connection_properties(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.connection_properties.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.connection_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The connection properties of the Amazon Web Services Glue connection.</p>
    pub fn set_connection_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.connection_properties = input;
        self
    }
    /// <p>The connection properties of the Amazon Web Services Glue connection.</p>
    pub fn get_connection_properties(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.connection_properties
    }
    /// <p>The physical connection requirements for the Amazon Web Services Glue connection.</p>
    pub fn physical_connection_requirements(mut self, input: crate::types::PhysicalConnectionRequirements) -> Self {
        self.physical_connection_requirements = ::std::option::Option::Some(input);
        self
    }
    /// <p>The physical connection requirements for the Amazon Web Services Glue connection.</p>
    pub fn set_physical_connection_requirements(mut self, input: ::std::option::Option<crate::types::PhysicalConnectionRequirements>) -> Self {
        self.physical_connection_requirements = input;
        self
    }
    /// <p>The physical connection requirements for the Amazon Web Services Glue connection.</p>
    pub fn get_physical_connection_requirements(&self) -> &::std::option::Option<crate::types::PhysicalConnectionRequirements> {
        &self.physical_connection_requirements
    }
    /// <p>The name of the Amazon Web Services Glue connection.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon Web Services Glue connection.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Amazon Web Services Glue connection.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the Amazon Web Services Glue connection.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the Amazon Web Services Glue connection.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the Amazon Web Services Glue connection.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The connection type of the Amazon Web Services Glue connection.</p>
    pub fn connection_type(mut self, input: crate::types::GlueConnectionType) -> Self {
        self.connection_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The connection type of the Amazon Web Services Glue connection.</p>
    pub fn set_connection_type(mut self, input: ::std::option::Option<crate::types::GlueConnectionType>) -> Self {
        self.connection_type = input;
        self
    }
    /// <p>The connection type of the Amazon Web Services Glue connection.</p>
    pub fn get_connection_type(&self) -> &::std::option::Option<crate::types::GlueConnectionType> {
        &self.connection_type
    }
    /// <p>The match criteria of the Amazon Web Services Glue connection.</p>
    pub fn match_criteria(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.match_criteria = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The match criteria of the Amazon Web Services Glue connection.</p>
    pub fn set_match_criteria(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.match_criteria = input;
        self
    }
    /// <p>The match criteria of the Amazon Web Services Glue connection.</p>
    pub fn get_match_criteria(&self) -> &::std::option::Option<::std::string::String> {
        &self.match_criteria
    }
    /// <p>Speciefies whether to validate credentials of the Amazon Web Services Glue connection.</p>
    pub fn validate_credentials(mut self, input: bool) -> Self {
        self.validate_credentials = ::std::option::Option::Some(input);
        self
    }
    /// <p>Speciefies whether to validate credentials of the Amazon Web Services Glue connection.</p>
    pub fn set_validate_credentials(mut self, input: ::std::option::Option<bool>) -> Self {
        self.validate_credentials = input;
        self
    }
    /// <p>Speciefies whether to validate credentials of the Amazon Web Services Glue connection.</p>
    pub fn get_validate_credentials(&self) -> &::std::option::Option<bool> {
        &self.validate_credentials
    }
    /// Appends an item to `validate_for_compute_environments`.
    ///
    /// To override the contents of this collection use [`set_validate_for_compute_environments`](Self::set_validate_for_compute_environments).
    ///
    /// <p>Speciefies whether to validate for compute environments of the Amazon Web Services Glue connection.</p>
    pub fn validate_for_compute_environments(mut self, input: crate::types::ComputeEnvironments) -> Self {
        let mut v = self.validate_for_compute_environments.unwrap_or_default();
        v.push(input);
        self.validate_for_compute_environments = ::std::option::Option::Some(v);
        self
    }
    /// <p>Speciefies whether to validate for compute environments of the Amazon Web Services Glue connection.</p>
    pub fn set_validate_for_compute_environments(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ComputeEnvironments>>) -> Self {
        self.validate_for_compute_environments = input;
        self
    }
    /// <p>Speciefies whether to validate for compute environments of the Amazon Web Services Glue connection.</p>
    pub fn get_validate_for_compute_environments(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ComputeEnvironments>> {
        &self.validate_for_compute_environments
    }
    /// Adds a key-value pair to `spark_properties`.
    ///
    /// To override the contents of this collection use [`set_spark_properties`](Self::set_spark_properties).
    ///
    /// <p>The Spark properties of the Amazon Web Services Glue connection.</p>
    pub fn spark_properties(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.spark_properties.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.spark_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The Spark properties of the Amazon Web Services Glue connection.</p>
    pub fn set_spark_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.spark_properties = input;
        self
    }
    /// <p>The Spark properties of the Amazon Web Services Glue connection.</p>
    pub fn get_spark_properties(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.spark_properties
    }
    /// Adds a key-value pair to `athena_properties`.
    ///
    /// To override the contents of this collection use [`set_athena_properties`](Self::set_athena_properties).
    ///
    /// <p>The Amazon Athena properties of the Amazon Web Services Glue connection.</p>
    pub fn athena_properties(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.athena_properties.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.athena_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The Amazon Athena properties of the Amazon Web Services Glue connection.</p>
    pub fn set_athena_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.athena_properties = input;
        self
    }
    /// <p>The Amazon Athena properties of the Amazon Web Services Glue connection.</p>
    pub fn get_athena_properties(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.athena_properties
    }
    /// Adds a key-value pair to `python_properties`.
    ///
    /// To override the contents of this collection use [`set_python_properties`](Self::set_python_properties).
    ///
    /// <p>The Python properties of the Amazon Web Services Glue connection.</p>
    pub fn python_properties(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.python_properties.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.python_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The Python properties of the Amazon Web Services Glue connection.</p>
    pub fn set_python_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.python_properties = input;
        self
    }
    /// <p>The Python properties of the Amazon Web Services Glue connection.</p>
    pub fn get_python_properties(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.python_properties
    }
    /// <p>The authentication configuration of the Amazon Web Services Glue connection.</p>
    pub fn authentication_configuration(mut self, input: crate::types::AuthenticationConfigurationInput) -> Self {
        self.authentication_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication configuration of the Amazon Web Services Glue connection.</p>
    pub fn set_authentication_configuration(mut self, input: ::std::option::Option<crate::types::AuthenticationConfigurationInput>) -> Self {
        self.authentication_configuration = input;
        self
    }
    /// <p>The authentication configuration of the Amazon Web Services Glue connection.</p>
    pub fn get_authentication_configuration(&self) -> &::std::option::Option<crate::types::AuthenticationConfigurationInput> {
        &self.authentication_configuration
    }
    /// Consumes the builder and constructs a [`GlueConnectionInput`](crate::types::GlueConnectionInput).
    pub fn build(self) -> crate::types::GlueConnectionInput {
        crate::types::GlueConnectionInput {
            connection_properties: self.connection_properties,
            physical_connection_requirements: self.physical_connection_requirements,
            name: self.name,
            description: self.description,
            connection_type: self.connection_type,
            match_criteria: self.match_criteria,
            validate_credentials: self.validate_credentials,
            validate_for_compute_environments: self.validate_for_compute_environments,
            spark_properties: self.spark_properties,
            athena_properties: self.athena_properties,
            python_properties: self.python_properties,
            authentication_configuration: self.authentication_configuration,
        }
    }
}
