// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of an environment.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EnvironmentConfiguration {
    /// <p>The environment name.</p>
    pub name: ::std::string::String,
    /// <p>The environment ID.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The environment blueprint ID.</p>
    pub environment_blueprint_id: ::std::string::String,
    /// <p>The environment description.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The deployment mode of the environment.</p>
    pub deployment_mode: ::std::option::Option<crate::types::DeploymentMode>,
    /// <p>The configuration parameters of the environment.</p>
    pub configuration_parameters: ::std::option::Option<crate::types::EnvironmentConfigurationParametersDetails>,
    /// <p>The Amazon Web Services account of the environment.</p>
    pub aws_account: ::std::option::Option<crate::types::AwsAccount>,
    /// <p>The Amazon Web Services Region of the environment.</p>
    pub aws_region: ::std::option::Option<crate::types::Region>,
    /// <p>The deployment order of the environment.</p>
    pub deployment_order: ::std::option::Option<i32>,
}
impl EnvironmentConfiguration {
    /// <p>The environment name.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The environment ID.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The environment blueprint ID.</p>
    pub fn environment_blueprint_id(&self) -> &str {
        use std::ops::Deref;
        self.environment_blueprint_id.deref()
    }
    /// <p>The environment description.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The deployment mode of the environment.</p>
    pub fn deployment_mode(&self) -> ::std::option::Option<&crate::types::DeploymentMode> {
        self.deployment_mode.as_ref()
    }
    /// <p>The configuration parameters of the environment.</p>
    pub fn configuration_parameters(&self) -> ::std::option::Option<&crate::types::EnvironmentConfigurationParametersDetails> {
        self.configuration_parameters.as_ref()
    }
    /// <p>The Amazon Web Services account of the environment.</p>
    pub fn aws_account(&self) -> ::std::option::Option<&crate::types::AwsAccount> {
        self.aws_account.as_ref()
    }
    /// <p>The Amazon Web Services Region of the environment.</p>
    pub fn aws_region(&self) -> ::std::option::Option<&crate::types::Region> {
        self.aws_region.as_ref()
    }
    /// <p>The deployment order of the environment.</p>
    pub fn deployment_order(&self) -> ::std::option::Option<i32> {
        self.deployment_order
    }
}
impl ::std::fmt::Debug for EnvironmentConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EnvironmentConfiguration");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("id", &"*** Sensitive Data Redacted ***");
        formatter.field("environment_blueprint_id", &self.environment_blueprint_id);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("deployment_mode", &self.deployment_mode);
        formatter.field("configuration_parameters", &self.configuration_parameters);
        formatter.field("aws_account", &self.aws_account);
        formatter.field("aws_region", &self.aws_region);
        formatter.field("deployment_order", &self.deployment_order);
        formatter.finish()
    }
}
impl EnvironmentConfiguration {
    /// Creates a new builder-style object to manufacture [`EnvironmentConfiguration`](crate::types::EnvironmentConfiguration).
    pub fn builder() -> crate::types::builders::EnvironmentConfigurationBuilder {
        crate::types::builders::EnvironmentConfigurationBuilder::default()
    }
}

/// A builder for [`EnvironmentConfiguration`](crate::types::EnvironmentConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct EnvironmentConfigurationBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) environment_blueprint_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) deployment_mode: ::std::option::Option<crate::types::DeploymentMode>,
    pub(crate) configuration_parameters: ::std::option::Option<crate::types::EnvironmentConfigurationParametersDetails>,
    pub(crate) aws_account: ::std::option::Option<crate::types::AwsAccount>,
    pub(crate) aws_region: ::std::option::Option<crate::types::Region>,
    pub(crate) deployment_order: ::std::option::Option<i32>,
}
impl EnvironmentConfigurationBuilder {
    /// <p>The environment name.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The environment name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The environment name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The environment ID.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The environment ID.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The environment ID.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The environment blueprint ID.</p>
    /// This field is required.
    pub fn environment_blueprint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_blueprint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The environment blueprint ID.</p>
    pub fn set_environment_blueprint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_blueprint_id = input;
        self
    }
    /// <p>The environment blueprint ID.</p>
    pub fn get_environment_blueprint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_blueprint_id
    }
    /// <p>The environment description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The environment description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The environment description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The deployment mode of the environment.</p>
    pub fn deployment_mode(mut self, input: crate::types::DeploymentMode) -> Self {
        self.deployment_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The deployment mode of the environment.</p>
    pub fn set_deployment_mode(mut self, input: ::std::option::Option<crate::types::DeploymentMode>) -> Self {
        self.deployment_mode = input;
        self
    }
    /// <p>The deployment mode of the environment.</p>
    pub fn get_deployment_mode(&self) -> &::std::option::Option<crate::types::DeploymentMode> {
        &self.deployment_mode
    }
    /// <p>The configuration parameters of the environment.</p>
    pub fn configuration_parameters(mut self, input: crate::types::EnvironmentConfigurationParametersDetails) -> Self {
        self.configuration_parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration parameters of the environment.</p>
    pub fn set_configuration_parameters(mut self, input: ::std::option::Option<crate::types::EnvironmentConfigurationParametersDetails>) -> Self {
        self.configuration_parameters = input;
        self
    }
    /// <p>The configuration parameters of the environment.</p>
    pub fn get_configuration_parameters(&self) -> &::std::option::Option<crate::types::EnvironmentConfigurationParametersDetails> {
        &self.configuration_parameters
    }
    /// <p>The Amazon Web Services account of the environment.</p>
    /// This field is required.
    pub fn aws_account(mut self, input: crate::types::AwsAccount) -> Self {
        self.aws_account = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon Web Services account of the environment.</p>
    pub fn set_aws_account(mut self, input: ::std::option::Option<crate::types::AwsAccount>) -> Self {
        self.aws_account = input;
        self
    }
    /// <p>The Amazon Web Services account of the environment.</p>
    pub fn get_aws_account(&self) -> &::std::option::Option<crate::types::AwsAccount> {
        &self.aws_account
    }
    /// <p>The Amazon Web Services Region of the environment.</p>
    /// This field is required.
    pub fn aws_region(mut self, input: crate::types::Region) -> Self {
        self.aws_region = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon Web Services Region of the environment.</p>
    pub fn set_aws_region(mut self, input: ::std::option::Option<crate::types::Region>) -> Self {
        self.aws_region = input;
        self
    }
    /// <p>The Amazon Web Services Region of the environment.</p>
    pub fn get_aws_region(&self) -> &::std::option::Option<crate::types::Region> {
        &self.aws_region
    }
    /// <p>The deployment order of the environment.</p>
    pub fn deployment_order(mut self, input: i32) -> Self {
        self.deployment_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>The deployment order of the environment.</p>
    pub fn set_deployment_order(mut self, input: ::std::option::Option<i32>) -> Self {
        self.deployment_order = input;
        self
    }
    /// <p>The deployment order of the environment.</p>
    pub fn get_deployment_order(&self) -> &::std::option::Option<i32> {
        &self.deployment_order
    }
    /// Consumes the builder and constructs a [`EnvironmentConfiguration`](crate::types::EnvironmentConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::EnvironmentConfigurationBuilder::name)
    /// - [`environment_blueprint_id`](crate::types::builders::EnvironmentConfigurationBuilder::environment_blueprint_id)
    pub fn build(self) -> ::std::result::Result<crate::types::EnvironmentConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EnvironmentConfiguration {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building EnvironmentConfiguration",
                )
            })?,
            id: self.id,
            environment_blueprint_id: self.environment_blueprint_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "environment_blueprint_id",
                    "environment_blueprint_id was not specified but it is required when building EnvironmentConfiguration",
                )
            })?,
            description: self.description,
            deployment_mode: self.deployment_mode,
            configuration_parameters: self.configuration_parameters,
            aws_account: self.aws_account,
            aws_region: self.aws_region,
            deployment_order: self.deployment_order,
        })
    }
}
impl ::std::fmt::Debug for EnvironmentConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EnvironmentConfigurationBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("id", &"*** Sensitive Data Redacted ***");
        formatter.field("environment_blueprint_id", &self.environment_blueprint_id);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("deployment_mode", &self.deployment_mode);
        formatter.field("configuration_parameters", &self.configuration_parameters);
        formatter.field("aws_account", &self.aws_account);
        formatter.field("aws_region", &self.aws_region);
        formatter.field("deployment_order", &self.deployment_order);
        formatter.finish()
    }
}
