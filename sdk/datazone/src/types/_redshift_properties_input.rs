// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon Redshift properties.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RedshiftPropertiesInput {
    /// <p>The Amazon Redshift storage.</p>
    pub storage: ::std::option::Option<crate::types::RedshiftStorageProperties>,
    /// <p>The Amazon Redshift database name.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Redshift host.</p>
    pub host: ::std::option::Option<::std::string::String>,
    /// <p>The Amaon Redshift port.</p>
    pub port: ::std::option::Option<i32>,
    /// <p>The Amaon Redshift credentials.</p>
    pub credentials: ::std::option::Option<crate::types::RedshiftCredentials>,
    /// <p>The lineage sync of the Amazon Redshift.</p>
    pub lineage_sync: ::std::option::Option<crate::types::RedshiftLineageSyncConfigurationInput>,
}
impl RedshiftPropertiesInput {
    /// <p>The Amazon Redshift storage.</p>
    pub fn storage(&self) -> ::std::option::Option<&crate::types::RedshiftStorageProperties> {
        self.storage.as_ref()
    }
    /// <p>The Amazon Redshift database name.</p>
    pub fn database_name(&self) -> ::std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The Amazon Redshift host.</p>
    pub fn host(&self) -> ::std::option::Option<&str> {
        self.host.as_deref()
    }
    /// <p>The Amaon Redshift port.</p>
    pub fn port(&self) -> ::std::option::Option<i32> {
        self.port
    }
    /// <p>The Amaon Redshift credentials.</p>
    pub fn credentials(&self) -> ::std::option::Option<&crate::types::RedshiftCredentials> {
        self.credentials.as_ref()
    }
    /// <p>The lineage sync of the Amazon Redshift.</p>
    pub fn lineage_sync(&self) -> ::std::option::Option<&crate::types::RedshiftLineageSyncConfigurationInput> {
        self.lineage_sync.as_ref()
    }
}
impl ::std::fmt::Debug for RedshiftPropertiesInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RedshiftPropertiesInput");
        formatter.field("storage", &self.storage);
        formatter.field("database_name", &self.database_name);
        formatter.field("host", &self.host);
        formatter.field("port", &self.port);
        formatter.field("credentials", &"*** Sensitive Data Redacted ***");
        formatter.field("lineage_sync", &self.lineage_sync);
        formatter.finish()
    }
}
impl RedshiftPropertiesInput {
    /// Creates a new builder-style object to manufacture [`RedshiftPropertiesInput`](crate::types::RedshiftPropertiesInput).
    pub fn builder() -> crate::types::builders::RedshiftPropertiesInputBuilder {
        crate::types::builders::RedshiftPropertiesInputBuilder::default()
    }
}

/// A builder for [`RedshiftPropertiesInput`](crate::types::RedshiftPropertiesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RedshiftPropertiesInputBuilder {
    pub(crate) storage: ::std::option::Option<crate::types::RedshiftStorageProperties>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) host: ::std::option::Option<::std::string::String>,
    pub(crate) port: ::std::option::Option<i32>,
    pub(crate) credentials: ::std::option::Option<crate::types::RedshiftCredentials>,
    pub(crate) lineage_sync: ::std::option::Option<crate::types::RedshiftLineageSyncConfigurationInput>,
}
impl RedshiftPropertiesInputBuilder {
    /// <p>The Amazon Redshift storage.</p>
    pub fn storage(mut self, input: crate::types::RedshiftStorageProperties) -> Self {
        self.storage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon Redshift storage.</p>
    pub fn set_storage(mut self, input: ::std::option::Option<crate::types::RedshiftStorageProperties>) -> Self {
        self.storage = input;
        self
    }
    /// <p>The Amazon Redshift storage.</p>
    pub fn get_storage(&self) -> &::std::option::Option<crate::types::RedshiftStorageProperties> {
        &self.storage
    }
    /// <p>The Amazon Redshift database name.</p>
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Redshift database name.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The Amazon Redshift database name.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The Amazon Redshift host.</p>
    pub fn host(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.host = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Redshift host.</p>
    pub fn set_host(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.host = input;
        self
    }
    /// <p>The Amazon Redshift host.</p>
    pub fn get_host(&self) -> &::std::option::Option<::std::string::String> {
        &self.host
    }
    /// <p>The Amaon Redshift port.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amaon Redshift port.</p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The Amaon Redshift port.</p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// <p>The Amaon Redshift credentials.</p>
    pub fn credentials(mut self, input: crate::types::RedshiftCredentials) -> Self {
        self.credentials = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amaon Redshift credentials.</p>
    pub fn set_credentials(mut self, input: ::std::option::Option<crate::types::RedshiftCredentials>) -> Self {
        self.credentials = input;
        self
    }
    /// <p>The Amaon Redshift credentials.</p>
    pub fn get_credentials(&self) -> &::std::option::Option<crate::types::RedshiftCredentials> {
        &self.credentials
    }
    /// <p>The lineage sync of the Amazon Redshift.</p>
    pub fn lineage_sync(mut self, input: crate::types::RedshiftLineageSyncConfigurationInput) -> Self {
        self.lineage_sync = ::std::option::Option::Some(input);
        self
    }
    /// <p>The lineage sync of the Amazon Redshift.</p>
    pub fn set_lineage_sync(mut self, input: ::std::option::Option<crate::types::RedshiftLineageSyncConfigurationInput>) -> Self {
        self.lineage_sync = input;
        self
    }
    /// <p>The lineage sync of the Amazon Redshift.</p>
    pub fn get_lineage_sync(&self) -> &::std::option::Option<crate::types::RedshiftLineageSyncConfigurationInput> {
        &self.lineage_sync
    }
    /// Consumes the builder and constructs a [`RedshiftPropertiesInput`](crate::types::RedshiftPropertiesInput).
    pub fn build(self) -> crate::types::RedshiftPropertiesInput {
        crate::types::RedshiftPropertiesInput {
            storage: self.storage,
            database_name: self.database_name,
            host: self.host,
            port: self.port,
            credentials: self.credentials,
            lineage_sync: self.lineage_sync,
        }
    }
}
impl ::std::fmt::Debug for RedshiftPropertiesInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RedshiftPropertiesInputBuilder");
        formatter.field("storage", &self.storage);
        formatter.field("database_name", &self.database_name);
        formatter.field("host", &self.host);
        formatter.field("port", &self.port);
        formatter.field("credentials", &"*** Sensitive Data Redacted ***");
        formatter.field("lineage_sync", &self.lineage_sync);
        formatter.finish()
    }
}
