// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The column configuration of the asset filter.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ColumnFilterConfiguration {
    /// <p>Specifies whether to include column names.</p>
    pub included_column_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ColumnFilterConfiguration {
    /// <p>Specifies whether to include column names.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.included_column_names.is_none()`.
    pub fn included_column_names(&self) -> &[::std::string::String] {
        self.included_column_names.as_deref().unwrap_or_default()
    }
}
impl ColumnFilterConfiguration {
    /// Creates a new builder-style object to manufacture [`ColumnFilterConfiguration`](crate::types::ColumnFilterConfiguration).
    pub fn builder() -> crate::types::builders::ColumnFilterConfigurationBuilder {
        crate::types::builders::ColumnFilterConfigurationBuilder::default()
    }
}

/// A builder for [`ColumnFilterConfiguration`](crate::types::ColumnFilterConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ColumnFilterConfigurationBuilder {
    pub(crate) included_column_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ColumnFilterConfigurationBuilder {
    /// Appends an item to `included_column_names`.
    ///
    /// To override the contents of this collection use [`set_included_column_names`](Self::set_included_column_names).
    ///
    /// <p>Specifies whether to include column names.</p>
    pub fn included_column_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.included_column_names.unwrap_or_default();
        v.push(input.into());
        self.included_column_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies whether to include column names.</p>
    pub fn set_included_column_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.included_column_names = input;
        self
    }
    /// <p>Specifies whether to include column names.</p>
    pub fn get_included_column_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.included_column_names
    }
    /// Consumes the builder and constructs a [`ColumnFilterConfiguration`](crate::types::ColumnFilterConfiguration).
    pub fn build(self) -> crate::types::ColumnFilterConfiguration {
        crate::types::ColumnFilterConfiguration {
            included_column_names: self.included_column_names,
        }
    }
}
