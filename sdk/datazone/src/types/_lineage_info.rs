// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The data lineage information.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LineageInfo {
    /// <p>The data lineage event ID.</p>
    pub event_id: ::std::option::Option<::std::string::String>,
    /// <p>The data lineage event status.</p>
    pub event_status: ::std::option::Option<crate::types::LineageEventProcessingStatus>,
    /// <p>The data lineage error message.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
}
impl LineageInfo {
    /// <p>The data lineage event ID.</p>
    pub fn event_id(&self) -> ::std::option::Option<&str> {
        self.event_id.as_deref()
    }
    /// <p>The data lineage event status.</p>
    pub fn event_status(&self) -> ::std::option::Option<&crate::types::LineageEventProcessingStatus> {
        self.event_status.as_ref()
    }
    /// <p>The data lineage error message.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl LineageInfo {
    /// Creates a new builder-style object to manufacture [`LineageInfo`](crate::types::LineageInfo).
    pub fn builder() -> crate::types::builders::LineageInfoBuilder {
        crate::types::builders::LineageInfoBuilder::default()
    }
}

/// A builder for [`LineageInfo`](crate::types::LineageInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LineageInfoBuilder {
    pub(crate) event_id: ::std::option::Option<::std::string::String>,
    pub(crate) event_status: ::std::option::Option<crate::types::LineageEventProcessingStatus>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
}
impl LineageInfoBuilder {
    /// <p>The data lineage event ID.</p>
    pub fn event_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data lineage event ID.</p>
    pub fn set_event_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>The data lineage event ID.</p>
    pub fn get_event_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_id
    }
    /// <p>The data lineage event status.</p>
    pub fn event_status(mut self, input: crate::types::LineageEventProcessingStatus) -> Self {
        self.event_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data lineage event status.</p>
    pub fn set_event_status(mut self, input: ::std::option::Option<crate::types::LineageEventProcessingStatus>) -> Self {
        self.event_status = input;
        self
    }
    /// <p>The data lineage event status.</p>
    pub fn get_event_status(&self) -> &::std::option::Option<crate::types::LineageEventProcessingStatus> {
        &self.event_status
    }
    /// <p>The data lineage error message.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data lineage error message.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The data lineage error message.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// Consumes the builder and constructs a [`LineageInfo`](crate::types::LineageInfo).
    pub fn build(self) -> crate::types::LineageInfo {
        crate::types::LineageInfo {
            event_id: self.event_id,
            event_status: self.event_status,
            error_message: self.error_message,
        }
    }
}
