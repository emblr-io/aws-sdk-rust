// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The listing of the asset in a data product.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssetInDataProductListingItem {
    /// <p>The entity ID of the listing of the asset in a data product.</p>
    pub entity_id: ::std::option::Option<::std::string::String>,
    /// <p>The entity revision of the listing of the asset in a data product.</p>
    pub entity_revision: ::std::option::Option<::std::string::String>,
    /// <p>The entity type of the listing of the asset in a data product.</p>
    pub entity_type: ::std::option::Option<::std::string::String>,
}
impl AssetInDataProductListingItem {
    /// <p>The entity ID of the listing of the asset in a data product.</p>
    pub fn entity_id(&self) -> ::std::option::Option<&str> {
        self.entity_id.as_deref()
    }
    /// <p>The entity revision of the listing of the asset in a data product.</p>
    pub fn entity_revision(&self) -> ::std::option::Option<&str> {
        self.entity_revision.as_deref()
    }
    /// <p>The entity type of the listing of the asset in a data product.</p>
    pub fn entity_type(&self) -> ::std::option::Option<&str> {
        self.entity_type.as_deref()
    }
}
impl AssetInDataProductListingItem {
    /// Creates a new builder-style object to manufacture [`AssetInDataProductListingItem`](crate::types::AssetInDataProductListingItem).
    pub fn builder() -> crate::types::builders::AssetInDataProductListingItemBuilder {
        crate::types::builders::AssetInDataProductListingItemBuilder::default()
    }
}

/// A builder for [`AssetInDataProductListingItem`](crate::types::AssetInDataProductListingItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssetInDataProductListingItemBuilder {
    pub(crate) entity_id: ::std::option::Option<::std::string::String>,
    pub(crate) entity_revision: ::std::option::Option<::std::string::String>,
    pub(crate) entity_type: ::std::option::Option<::std::string::String>,
}
impl AssetInDataProductListingItemBuilder {
    /// <p>The entity ID of the listing of the asset in a data product.</p>
    pub fn entity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The entity ID of the listing of the asset in a data product.</p>
    pub fn set_entity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>The entity ID of the listing of the asset in a data product.</p>
    pub fn get_entity_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_id
    }
    /// <p>The entity revision of the listing of the asset in a data product.</p>
    pub fn entity_revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_revision = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The entity revision of the listing of the asset in a data product.</p>
    pub fn set_entity_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_revision = input;
        self
    }
    /// <p>The entity revision of the listing of the asset in a data product.</p>
    pub fn get_entity_revision(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_revision
    }
    /// <p>The entity type of the listing of the asset in a data product.</p>
    pub fn entity_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The entity type of the listing of the asset in a data product.</p>
    pub fn set_entity_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_type = input;
        self
    }
    /// <p>The entity type of the listing of the asset in a data product.</p>
    pub fn get_entity_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_type
    }
    /// Consumes the builder and constructs a [`AssetInDataProductListingItem`](crate::types::AssetInDataProductListingItem).
    pub fn build(self) -> crate::types::AssetInDataProductListingItem {
        crate::types::AssetInDataProductListingItem {
            entity_id: self.entity_id,
            entity_revision: self.entity_revision,
            entity_type: self.entity_type,
        }
    }
}
