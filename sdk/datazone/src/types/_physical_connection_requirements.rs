// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Physical connection requirements of a connection.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PhysicalConnectionRequirements {
    /// <p>The subnet ID of the physical connection requirements of a connection.</p>
    pub subnet_id: ::std::option::Option<::std::string::String>,
    /// <p>The subnet ID list of the physical connection requirements of a connection.</p>
    pub subnet_id_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The group ID list of the physical connection requirements of a connection.</p>
    pub security_group_id_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The availability zone of the physical connection requirements of a connection.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
}
impl PhysicalConnectionRequirements {
    /// <p>The subnet ID of the physical connection requirements of a connection.</p>
    pub fn subnet_id(&self) -> ::std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>The subnet ID list of the physical connection requirements of a connection.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.subnet_id_list.is_none()`.
    pub fn subnet_id_list(&self) -> &[::std::string::String] {
        self.subnet_id_list.as_deref().unwrap_or_default()
    }
    /// <p>The group ID list of the physical connection requirements of a connection.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_group_id_list.is_none()`.
    pub fn security_group_id_list(&self) -> &[::std::string::String] {
        self.security_group_id_list.as_deref().unwrap_or_default()
    }
    /// <p>The availability zone of the physical connection requirements of a connection.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
}
impl PhysicalConnectionRequirements {
    /// Creates a new builder-style object to manufacture [`PhysicalConnectionRequirements`](crate::types::PhysicalConnectionRequirements).
    pub fn builder() -> crate::types::builders::PhysicalConnectionRequirementsBuilder {
        crate::types::builders::PhysicalConnectionRequirementsBuilder::default()
    }
}

/// A builder for [`PhysicalConnectionRequirements`](crate::types::PhysicalConnectionRequirements).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PhysicalConnectionRequirementsBuilder {
    pub(crate) subnet_id: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_id_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) security_group_id_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
}
impl PhysicalConnectionRequirementsBuilder {
    /// <p>The subnet ID of the physical connection requirements of a connection.</p>
    pub fn subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subnet ID of the physical connection requirements of a connection.</p>
    pub fn set_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>The subnet ID of the physical connection requirements of a connection.</p>
    pub fn get_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_id
    }
    /// Appends an item to `subnet_id_list`.
    ///
    /// To override the contents of this collection use [`set_subnet_id_list`](Self::set_subnet_id_list).
    ///
    /// <p>The subnet ID list of the physical connection requirements of a connection.</p>
    pub fn subnet_id_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.subnet_id_list.unwrap_or_default();
        v.push(input.into());
        self.subnet_id_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The subnet ID list of the physical connection requirements of a connection.</p>
    pub fn set_subnet_id_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.subnet_id_list = input;
        self
    }
    /// <p>The subnet ID list of the physical connection requirements of a connection.</p>
    pub fn get_subnet_id_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.subnet_id_list
    }
    /// Appends an item to `security_group_id_list`.
    ///
    /// To override the contents of this collection use [`set_security_group_id_list`](Self::set_security_group_id_list).
    ///
    /// <p>The group ID list of the physical connection requirements of a connection.</p>
    pub fn security_group_id_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_group_id_list.unwrap_or_default();
        v.push(input.into());
        self.security_group_id_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The group ID list of the physical connection requirements of a connection.</p>
    pub fn set_security_group_id_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_group_id_list = input;
        self
    }
    /// <p>The group ID list of the physical connection requirements of a connection.</p>
    pub fn get_security_group_id_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_group_id_list
    }
    /// <p>The availability zone of the physical connection requirements of a connection.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The availability zone of the physical connection requirements of a connection.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The availability zone of the physical connection requirements of a connection.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// Consumes the builder and constructs a [`PhysicalConnectionRequirements`](crate::types::PhysicalConnectionRequirements).
    pub fn build(self) -> crate::types::PhysicalConnectionRequirements {
        crate::types::PhysicalConnectionRequirements {
            subnet_id: self.subnet_id,
            subnet_id_list: self.subnet_id_list,
            security_group_id_list: self.security_group_id_list,
            availability_zone: self.availability_zone,
        }
    }
}
