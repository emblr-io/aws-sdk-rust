// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The row filter configuration details.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RowFilterConfiguration {
    /// <p>The row filter.</p>
    pub row_filter: ::std::option::Option<crate::types::RowFilter>,
    /// <p>Specifies whether the row filter is sensitive.</p>
    pub sensitive: bool,
}
impl RowFilterConfiguration {
    /// <p>The row filter.</p>
    pub fn row_filter(&self) -> ::std::option::Option<&crate::types::RowFilter> {
        self.row_filter.as_ref()
    }
    /// <p>Specifies whether the row filter is sensitive.</p>
    pub fn sensitive(&self) -> bool {
        self.sensitive
    }
}
impl RowFilterConfiguration {
    /// Creates a new builder-style object to manufacture [`RowFilterConfiguration`](crate::types::RowFilterConfiguration).
    pub fn builder() -> crate::types::builders::RowFilterConfigurationBuilder {
        crate::types::builders::RowFilterConfigurationBuilder::default()
    }
}

/// A builder for [`RowFilterConfiguration`](crate::types::RowFilterConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RowFilterConfigurationBuilder {
    pub(crate) row_filter: ::std::option::Option<crate::types::RowFilter>,
    pub(crate) sensitive: ::std::option::Option<bool>,
}
impl RowFilterConfigurationBuilder {
    /// <p>The row filter.</p>
    /// This field is required.
    pub fn row_filter(mut self, input: crate::types::RowFilter) -> Self {
        self.row_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>The row filter.</p>
    pub fn set_row_filter(mut self, input: ::std::option::Option<crate::types::RowFilter>) -> Self {
        self.row_filter = input;
        self
    }
    /// <p>The row filter.</p>
    pub fn get_row_filter(&self) -> &::std::option::Option<crate::types::RowFilter> {
        &self.row_filter
    }
    /// <p>Specifies whether the row filter is sensitive.</p>
    pub fn sensitive(mut self, input: bool) -> Self {
        self.sensitive = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the row filter is sensitive.</p>
    pub fn set_sensitive(mut self, input: ::std::option::Option<bool>) -> Self {
        self.sensitive = input;
        self
    }
    /// <p>Specifies whether the row filter is sensitive.</p>
    pub fn get_sensitive(&self) -> &::std::option::Option<bool> {
        &self.sensitive
    }
    /// Consumes the builder and constructs a [`RowFilterConfiguration`](crate::types::RowFilterConfiguration).
    pub fn build(self) -> crate::types::RowFilterConfiguration {
        crate::types::RowFilterConfiguration {
            row_filter: self.row_filter,
            sensitive: self.sensitive.unwrap_or(true),
        }
    }
}
