// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The single sign-on details in Amazon DataZone.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SingleSignOn {
    /// <p>The type of single sign-on in Amazon DataZone.</p>
    pub r#type: ::std::option::Option<crate::types::AuthType>,
    /// <p>The single sign-on user assignment in Amazon DataZone.</p>
    pub user_assignment: ::std::option::Option<crate::types::UserAssignment>,
    /// <p>The ARN of the IDC instance.</p>
    pub idc_instance_arn: ::std::option::Option<::std::string::String>,
}
impl SingleSignOn {
    /// <p>The type of single sign-on in Amazon DataZone.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::AuthType> {
        self.r#type.as_ref()
    }
    /// <p>The single sign-on user assignment in Amazon DataZone.</p>
    pub fn user_assignment(&self) -> ::std::option::Option<&crate::types::UserAssignment> {
        self.user_assignment.as_ref()
    }
    /// <p>The ARN of the IDC instance.</p>
    pub fn idc_instance_arn(&self) -> ::std::option::Option<&str> {
        self.idc_instance_arn.as_deref()
    }
}
impl SingleSignOn {
    /// Creates a new builder-style object to manufacture [`SingleSignOn`](crate::types::SingleSignOn).
    pub fn builder() -> crate::types::builders::SingleSignOnBuilder {
        crate::types::builders::SingleSignOnBuilder::default()
    }
}

/// A builder for [`SingleSignOn`](crate::types::SingleSignOn).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SingleSignOnBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::AuthType>,
    pub(crate) user_assignment: ::std::option::Option<crate::types::UserAssignment>,
    pub(crate) idc_instance_arn: ::std::option::Option<::std::string::String>,
}
impl SingleSignOnBuilder {
    /// <p>The type of single sign-on in Amazon DataZone.</p>
    pub fn r#type(mut self, input: crate::types::AuthType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of single sign-on in Amazon DataZone.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::AuthType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of single sign-on in Amazon DataZone.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::AuthType> {
        &self.r#type
    }
    /// <p>The single sign-on user assignment in Amazon DataZone.</p>
    pub fn user_assignment(mut self, input: crate::types::UserAssignment) -> Self {
        self.user_assignment = ::std::option::Option::Some(input);
        self
    }
    /// <p>The single sign-on user assignment in Amazon DataZone.</p>
    pub fn set_user_assignment(mut self, input: ::std::option::Option<crate::types::UserAssignment>) -> Self {
        self.user_assignment = input;
        self
    }
    /// <p>The single sign-on user assignment in Amazon DataZone.</p>
    pub fn get_user_assignment(&self) -> &::std::option::Option<crate::types::UserAssignment> {
        &self.user_assignment
    }
    /// <p>The ARN of the IDC instance.</p>
    pub fn idc_instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.idc_instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IDC instance.</p>
    pub fn set_idc_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.idc_instance_arn = input;
        self
    }
    /// <p>The ARN of the IDC instance.</p>
    pub fn get_idc_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.idc_instance_arn
    }
    /// Consumes the builder and constructs a [`SingleSignOn`](crate::types::SingleSignOn).
    pub fn build(self) -> crate::types::SingleSignOn {
        crate::types::SingleSignOn {
            r#type: self.r#type,
            user_assignment: self.user_assignment,
            idc_instance_arn: self.idc_instance_arn,
        }
    }
}
