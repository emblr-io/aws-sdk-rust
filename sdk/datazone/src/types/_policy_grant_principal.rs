// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The policy grant principal.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum PolicyGrantPrincipal {
    /// <p>The domain unit of the policy grant principal.</p>
    DomainUnit(crate::types::DomainUnitPolicyGrantPrincipal),
    /// <p>The group of the policy grant principal.</p>
    Group(crate::types::GroupPolicyGrantPrincipal),
    /// <p>The project of the policy grant principal.</p>
    Project(crate::types::ProjectPolicyGrantPrincipal),
    /// <p>The user of the policy grant principal.</p>
    User(crate::types::UserPolicyGrantPrincipal),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl PolicyGrantPrincipal {
    /// Tries to convert the enum instance into [`DomainUnit`](crate::types::PolicyGrantPrincipal::DomainUnit), extracting the inner [`DomainUnitPolicyGrantPrincipal`](crate::types::DomainUnitPolicyGrantPrincipal).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_domain_unit(&self) -> ::std::result::Result<&crate::types::DomainUnitPolicyGrantPrincipal, &Self> {
        if let PolicyGrantPrincipal::DomainUnit(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`DomainUnit`](crate::types::PolicyGrantPrincipal::DomainUnit).
    pub fn is_domain_unit(&self) -> bool {
        self.as_domain_unit().is_ok()
    }
    /// Tries to convert the enum instance into [`Group`](crate::types::PolicyGrantPrincipal::Group), extracting the inner [`GroupPolicyGrantPrincipal`](crate::types::GroupPolicyGrantPrincipal).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_group(&self) -> ::std::result::Result<&crate::types::GroupPolicyGrantPrincipal, &Self> {
        if let PolicyGrantPrincipal::Group(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Group`](crate::types::PolicyGrantPrincipal::Group).
    pub fn is_group(&self) -> bool {
        self.as_group().is_ok()
    }
    /// Tries to convert the enum instance into [`Project`](crate::types::PolicyGrantPrincipal::Project), extracting the inner [`ProjectPolicyGrantPrincipal`](crate::types::ProjectPolicyGrantPrincipal).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_project(&self) -> ::std::result::Result<&crate::types::ProjectPolicyGrantPrincipal, &Self> {
        if let PolicyGrantPrincipal::Project(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Project`](crate::types::PolicyGrantPrincipal::Project).
    pub fn is_project(&self) -> bool {
        self.as_project().is_ok()
    }
    /// Tries to convert the enum instance into [`User`](crate::types::PolicyGrantPrincipal::User), extracting the inner [`UserPolicyGrantPrincipal`](crate::types::UserPolicyGrantPrincipal).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_user(&self) -> ::std::result::Result<&crate::types::UserPolicyGrantPrincipal, &Self> {
        if let PolicyGrantPrincipal::User(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`User`](crate::types::PolicyGrantPrincipal::User).
    pub fn is_user(&self) -> bool {
        self.as_user().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
