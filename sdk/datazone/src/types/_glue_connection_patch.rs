// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon Web Services Glue connection patch.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GlueConnectionPatch {
    /// <p>The description of the Amazon Web Services Glue connection patch.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The properties of the Amazon Web Services Glue connection patch.</p>
    pub connection_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The authentication configuration of the Amazon Web Services Glue connection patch.</p>
    pub authentication_configuration: ::std::option::Option<crate::types::AuthenticationConfigurationPatch>,
}
impl GlueConnectionPatch {
    /// <p>The description of the Amazon Web Services Glue connection patch.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The properties of the Amazon Web Services Glue connection patch.</p>
    pub fn connection_properties(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.connection_properties.as_ref()
    }
    /// <p>The authentication configuration of the Amazon Web Services Glue connection patch.</p>
    pub fn authentication_configuration(&self) -> ::std::option::Option<&crate::types::AuthenticationConfigurationPatch> {
        self.authentication_configuration.as_ref()
    }
}
impl GlueConnectionPatch {
    /// Creates a new builder-style object to manufacture [`GlueConnectionPatch`](crate::types::GlueConnectionPatch).
    pub fn builder() -> crate::types::builders::GlueConnectionPatchBuilder {
        crate::types::builders::GlueConnectionPatchBuilder::default()
    }
}

/// A builder for [`GlueConnectionPatch`](crate::types::GlueConnectionPatch).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GlueConnectionPatchBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) connection_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) authentication_configuration: ::std::option::Option<crate::types::AuthenticationConfigurationPatch>,
}
impl GlueConnectionPatchBuilder {
    /// <p>The description of the Amazon Web Services Glue connection patch.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the Amazon Web Services Glue connection patch.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the Amazon Web Services Glue connection patch.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Adds a key-value pair to `connection_properties`.
    ///
    /// To override the contents of this collection use [`set_connection_properties`](Self::set_connection_properties).
    ///
    /// <p>The properties of the Amazon Web Services Glue connection patch.</p>
    pub fn connection_properties(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.connection_properties.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.connection_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The properties of the Amazon Web Services Glue connection patch.</p>
    pub fn set_connection_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.connection_properties = input;
        self
    }
    /// <p>The properties of the Amazon Web Services Glue connection patch.</p>
    pub fn get_connection_properties(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.connection_properties
    }
    /// <p>The authentication configuration of the Amazon Web Services Glue connection patch.</p>
    pub fn authentication_configuration(mut self, input: crate::types::AuthenticationConfigurationPatch) -> Self {
        self.authentication_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication configuration of the Amazon Web Services Glue connection patch.</p>
    pub fn set_authentication_configuration(mut self, input: ::std::option::Option<crate::types::AuthenticationConfigurationPatch>) -> Self {
        self.authentication_configuration = input;
        self
    }
    /// <p>The authentication configuration of the Amazon Web Services Glue connection patch.</p>
    pub fn get_authentication_configuration(&self) -> &::std::option::Option<crate::types::AuthenticationConfigurationPatch> {
        &self.authentication_configuration
    }
    /// Consumes the builder and constructs a [`GlueConnectionPatch`](crate::types::GlueConnectionPatch).
    pub fn build(self) -> crate::types::GlueConnectionPatch {
        crate::types::GlueConnectionPatch {
            description: self.description,
            connection_properties: self.connection_properties,
            authentication_configuration: self.authentication_configuration,
        }
    }
}
