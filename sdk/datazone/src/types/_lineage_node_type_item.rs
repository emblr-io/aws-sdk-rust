// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a data lineage node type.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LineageNodeTypeItem {
    /// <p>The ID of the domain where the data lineage node type lives.</p>
    pub domain_id: ::std::string::String,
    /// <p>The name of the data lineage node type.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the data lineage node type.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp at which the data lineage node type was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The user who created the data lineage node type.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp at which the data lineage node type was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The user who updated the data lineage node type.</p>
    pub updated_by: ::std::option::Option<::std::string::String>,
    /// <p>The revision of the data lineage node type.</p>
    pub revision: ::std::string::String,
    /// <p>The forms output of the data lineage node type.</p>
    pub forms_output: ::std::collections::HashMap<::std::string::String, crate::types::FormEntryOutput>,
}
impl LineageNodeTypeItem {
    /// <p>The ID of the domain where the data lineage node type lives.</p>
    pub fn domain_id(&self) -> &str {
        use std::ops::Deref;
        self.domain_id.deref()
    }
    /// <p>The name of the data lineage node type.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the data lineage node type.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The timestamp at which the data lineage node type was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The user who created the data lineage node type.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The timestamp at which the data lineage node type was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The user who updated the data lineage node type.</p>
    pub fn updated_by(&self) -> ::std::option::Option<&str> {
        self.updated_by.as_deref()
    }
    /// <p>The revision of the data lineage node type.</p>
    pub fn revision(&self) -> &str {
        use std::ops::Deref;
        self.revision.deref()
    }
    /// <p>The forms output of the data lineage node type.</p>
    pub fn forms_output(&self) -> &::std::collections::HashMap<::std::string::String, crate::types::FormEntryOutput> {
        &self.forms_output
    }
}
impl LineageNodeTypeItem {
    /// Creates a new builder-style object to manufacture [`LineageNodeTypeItem`](crate::types::LineageNodeTypeItem).
    pub fn builder() -> crate::types::builders::LineageNodeTypeItemBuilder {
        crate::types::builders::LineageNodeTypeItemBuilder::default()
    }
}

/// A builder for [`LineageNodeTypeItem`](crate::types::LineageNodeTypeItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LineageNodeTypeItemBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_by: ::std::option::Option<::std::string::String>,
    pub(crate) revision: ::std::option::Option<::std::string::String>,
    pub(crate) forms_output: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::FormEntryOutput>>,
}
impl LineageNodeTypeItemBuilder {
    /// <p>The ID of the domain where the data lineage node type lives.</p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain where the data lineage node type lives.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The ID of the domain where the data lineage node type lives.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The name of the data lineage node type.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the data lineage node type.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the data lineage node type.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the data lineage node type.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the data lineage node type.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the data lineage node type.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The timestamp at which the data lineage node type was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which the data lineage node type was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp at which the data lineage node type was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The user who created the data lineage node type.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user who created the data lineage node type.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The user who created the data lineage node type.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The timestamp at which the data lineage node type was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which the data lineage node type was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp at which the data lineage node type was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The user who updated the data lineage node type.</p>
    pub fn updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user who updated the data lineage node type.</p>
    pub fn set_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_by = input;
        self
    }
    /// <p>The user who updated the data lineage node type.</p>
    pub fn get_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_by
    }
    /// <p>The revision of the data lineage node type.</p>
    /// This field is required.
    pub fn revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.revision = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The revision of the data lineage node type.</p>
    pub fn set_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.revision = input;
        self
    }
    /// <p>The revision of the data lineage node type.</p>
    pub fn get_revision(&self) -> &::std::option::Option<::std::string::String> {
        &self.revision
    }
    /// Adds a key-value pair to `forms_output`.
    ///
    /// To override the contents of this collection use [`set_forms_output`](Self::set_forms_output).
    ///
    /// <p>The forms output of the data lineage node type.</p>
    pub fn forms_output(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::FormEntryOutput) -> Self {
        let mut hash_map = self.forms_output.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.forms_output = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The forms output of the data lineage node type.</p>
    pub fn set_forms_output(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::FormEntryOutput>>,
    ) -> Self {
        self.forms_output = input;
        self
    }
    /// <p>The forms output of the data lineage node type.</p>
    pub fn get_forms_output(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::FormEntryOutput>> {
        &self.forms_output
    }
    /// Consumes the builder and constructs a [`LineageNodeTypeItem`](crate::types::LineageNodeTypeItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`domain_id`](crate::types::builders::LineageNodeTypeItemBuilder::domain_id)
    /// - [`revision`](crate::types::builders::LineageNodeTypeItemBuilder::revision)
    /// - [`forms_output`](crate::types::builders::LineageNodeTypeItemBuilder::forms_output)
    pub fn build(self) -> ::std::result::Result<crate::types::LineageNodeTypeItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LineageNodeTypeItem {
            domain_id: self.domain_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain_id",
                    "domain_id was not specified but it is required when building LineageNodeTypeItem",
                )
            })?,
            name: self.name,
            description: self.description,
            created_at: self.created_at,
            created_by: self.created_by,
            updated_at: self.updated_at,
            updated_by: self.updated_by,
            revision: self.revision.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "revision",
                    "revision was not specified but it is required when building LineageNodeTypeItem",
                )
            })?,
            forms_output: self.forms_output.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "forms_output",
                    "forms_output was not specified but it is required when building LineageNodeTypeItem",
                )
            })?,
        })
    }
}
