// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The environment configuration parameter.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EnvironmentConfigurationParameter {
    /// <p>The name of the environment configuration parameter.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The value of the environment configuration parameter.</p>
    pub value: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the environment parameter is editable.</p>
    pub is_editable: ::std::option::Option<bool>,
}
impl EnvironmentConfigurationParameter {
    /// <p>The name of the environment configuration parameter.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The value of the environment configuration parameter.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>Specifies whether the environment parameter is editable.</p>
    pub fn is_editable(&self) -> ::std::option::Option<bool> {
        self.is_editable
    }
}
impl EnvironmentConfigurationParameter {
    /// Creates a new builder-style object to manufacture [`EnvironmentConfigurationParameter`](crate::types::EnvironmentConfigurationParameter).
    pub fn builder() -> crate::types::builders::EnvironmentConfigurationParameterBuilder {
        crate::types::builders::EnvironmentConfigurationParameterBuilder::default()
    }
}

/// A builder for [`EnvironmentConfigurationParameter`](crate::types::EnvironmentConfigurationParameter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EnvironmentConfigurationParameterBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) is_editable: ::std::option::Option<bool>,
}
impl EnvironmentConfigurationParameterBuilder {
    /// <p>The name of the environment configuration parameter.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the environment configuration parameter.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the environment configuration parameter.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The value of the environment configuration parameter.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the environment configuration parameter.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of the environment configuration parameter.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// <p>Specifies whether the environment parameter is editable.</p>
    pub fn is_editable(mut self, input: bool) -> Self {
        self.is_editable = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the environment parameter is editable.</p>
    pub fn set_is_editable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_editable = input;
        self
    }
    /// <p>Specifies whether the environment parameter is editable.</p>
    pub fn get_is_editable(&self) -> &::std::option::Option<bool> {
        &self.is_editable
    }
    /// Consumes the builder and constructs a [`EnvironmentConfigurationParameter`](crate::types::EnvironmentConfigurationParameter).
    pub fn build(self) -> crate::types::EnvironmentConfigurationParameter {
        crate::types::EnvironmentConfigurationParameter {
            name: self.name,
            value: self.value,
            is_editable: self.is_editable,
        }
    }
}
