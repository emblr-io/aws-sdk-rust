// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The data lineage event summary.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LineageEventSummary {
    /// <p>The ID of the data lineage event.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The domain ID of the lineage event.</p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The processing status of the data lineage event.</p>
    pub processing_status: ::std::option::Option<crate::types::LineageEventProcessingStatus>,
    /// <p>The time of the data lineage event.</p>
    pub event_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The summary of the data lineate event.</p>
    pub event_summary: ::std::option::Option<crate::types::EventSummary>,
    /// <p>The user who created the data lineage event.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp at which data lineage event was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl LineageEventSummary {
    /// <p>The ID of the data lineage event.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The domain ID of the lineage event.</p>
    pub fn domain_id(&self) -> ::std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The processing status of the data lineage event.</p>
    pub fn processing_status(&self) -> ::std::option::Option<&crate::types::LineageEventProcessingStatus> {
        self.processing_status.as_ref()
    }
    /// <p>The time of the data lineage event.</p>
    pub fn event_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.event_time.as_ref()
    }
    /// <p>The summary of the data lineate event.</p>
    pub fn event_summary(&self) -> ::std::option::Option<&crate::types::EventSummary> {
        self.event_summary.as_ref()
    }
    /// <p>The user who created the data lineage event.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The timestamp at which data lineage event was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
}
impl LineageEventSummary {
    /// Creates a new builder-style object to manufacture [`LineageEventSummary`](crate::types::LineageEventSummary).
    pub fn builder() -> crate::types::builders::LineageEventSummaryBuilder {
        crate::types::builders::LineageEventSummaryBuilder::default()
    }
}

/// A builder for [`LineageEventSummary`](crate::types::LineageEventSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LineageEventSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) processing_status: ::std::option::Option<crate::types::LineageEventProcessingStatus>,
    pub(crate) event_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) event_summary: ::std::option::Option<crate::types::EventSummary>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl LineageEventSummaryBuilder {
    /// <p>The ID of the data lineage event.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the data lineage event.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the data lineage event.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The domain ID of the lineage event.</p>
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain ID of the lineage event.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The domain ID of the lineage event.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The processing status of the data lineage event.</p>
    pub fn processing_status(mut self, input: crate::types::LineageEventProcessingStatus) -> Self {
        self.processing_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The processing status of the data lineage event.</p>
    pub fn set_processing_status(mut self, input: ::std::option::Option<crate::types::LineageEventProcessingStatus>) -> Self {
        self.processing_status = input;
        self
    }
    /// <p>The processing status of the data lineage event.</p>
    pub fn get_processing_status(&self) -> &::std::option::Option<crate::types::LineageEventProcessingStatus> {
        &self.processing_status
    }
    /// <p>The time of the data lineage event.</p>
    pub fn event_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.event_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time of the data lineage event.</p>
    pub fn set_event_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.event_time = input;
        self
    }
    /// <p>The time of the data lineage event.</p>
    pub fn get_event_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.event_time
    }
    /// <p>The summary of the data lineate event.</p>
    pub fn event_summary(mut self, input: crate::types::EventSummary) -> Self {
        self.event_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>The summary of the data lineate event.</p>
    pub fn set_event_summary(mut self, input: ::std::option::Option<crate::types::EventSummary>) -> Self {
        self.event_summary = input;
        self
    }
    /// <p>The summary of the data lineate event.</p>
    pub fn get_event_summary(&self) -> &::std::option::Option<crate::types::EventSummary> {
        &self.event_summary
    }
    /// <p>The user who created the data lineage event.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user who created the data lineage event.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The user who created the data lineage event.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The timestamp at which data lineage event was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which data lineage event was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp at which data lineage event was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// Consumes the builder and constructs a [`LineageEventSummary`](crate::types::LineageEventSummary).
    pub fn build(self) -> crate::types::LineageEventSummary {
        crate::types::LineageEventSummary {
            id: self.id,
            domain_id: self.domain_id,
            processing_status: self.processing_status,
            event_time: self.event_time,
            event_summary: self.event_summary,
            created_by: self.created_by,
            created_at: self.created_at,
        }
    }
}
