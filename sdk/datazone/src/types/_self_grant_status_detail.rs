// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details for the self granting status.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SelfGrantStatusDetail {
    /// <p>The name of the database used for the data source.</p>
    pub database_name: ::std::string::String,
    /// <p>The name of the schema used in the data source.</p>
    pub schema_name: ::std::option::Option<::std::string::String>,
    /// <p>The self granting status of the data source.</p>
    pub status: crate::types::SelfGrantStatus,
    /// <p>The reason for why the operation failed.</p>
    pub failure_cause: ::std::option::Option<::std::string::String>,
}
impl SelfGrantStatusDetail {
    /// <p>The name of the database used for the data source.</p>
    pub fn database_name(&self) -> &str {
        use std::ops::Deref;
        self.database_name.deref()
    }
    /// <p>The name of the schema used in the data source.</p>
    pub fn schema_name(&self) -> ::std::option::Option<&str> {
        self.schema_name.as_deref()
    }
    /// <p>The self granting status of the data source.</p>
    pub fn status(&self) -> &crate::types::SelfGrantStatus {
        &self.status
    }
    /// <p>The reason for why the operation failed.</p>
    pub fn failure_cause(&self) -> ::std::option::Option<&str> {
        self.failure_cause.as_deref()
    }
}
impl SelfGrantStatusDetail {
    /// Creates a new builder-style object to manufacture [`SelfGrantStatusDetail`](crate::types::SelfGrantStatusDetail).
    pub fn builder() -> crate::types::builders::SelfGrantStatusDetailBuilder {
        crate::types::builders::SelfGrantStatusDetailBuilder::default()
    }
}

/// A builder for [`SelfGrantStatusDetail`](crate::types::SelfGrantStatusDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SelfGrantStatusDetailBuilder {
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) schema_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::SelfGrantStatus>,
    pub(crate) failure_cause: ::std::option::Option<::std::string::String>,
}
impl SelfGrantStatusDetailBuilder {
    /// <p>The name of the database used for the data source.</p>
    /// This field is required.
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database used for the data source.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The name of the database used for the data source.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The name of the schema used in the data source.</p>
    pub fn schema_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schema_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the schema used in the data source.</p>
    pub fn set_schema_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schema_name = input;
        self
    }
    /// <p>The name of the schema used in the data source.</p>
    pub fn get_schema_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.schema_name
    }
    /// <p>The self granting status of the data source.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::SelfGrantStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The self granting status of the data source.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SelfGrantStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The self granting status of the data source.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SelfGrantStatus> {
        &self.status
    }
    /// <p>The reason for why the operation failed.</p>
    pub fn failure_cause(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_cause = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for why the operation failed.</p>
    pub fn set_failure_cause(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_cause = input;
        self
    }
    /// <p>The reason for why the operation failed.</p>
    pub fn get_failure_cause(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_cause
    }
    /// Consumes the builder and constructs a [`SelfGrantStatusDetail`](crate::types::SelfGrantStatusDetail).
    /// This method will fail if any of the following fields are not set:
    /// - [`database_name`](crate::types::builders::SelfGrantStatusDetailBuilder::database_name)
    /// - [`status`](crate::types::builders::SelfGrantStatusDetailBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::SelfGrantStatusDetail, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SelfGrantStatusDetail {
            database_name: self.database_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "database_name",
                    "database_name was not specified but it is required when building SelfGrantStatusDetail",
                )
            })?,
            schema_name: self.schema_name,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building SelfGrantStatusDetail",
                )
            })?,
            failure_cause: self.failure_cause,
        })
    }
}
