// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The results of the data product summary.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListingSummaryItem {
    /// <p>The ID of the data product listing.</p>
    pub listing_id: ::std::option::Option<::std::string::String>,
    /// <p>The revision of the data product listing.</p>
    pub listing_revision: ::std::option::Option<::std::string::String>,
    /// <p>The glossary terms of the data product listing.</p>
    pub glossary_terms: ::std::option::Option<::std::vec::Vec<crate::types::DetailedGlossaryTerm>>,
}
impl ListingSummaryItem {
    /// <p>The ID of the data product listing.</p>
    pub fn listing_id(&self) -> ::std::option::Option<&str> {
        self.listing_id.as_deref()
    }
    /// <p>The revision of the data product listing.</p>
    pub fn listing_revision(&self) -> ::std::option::Option<&str> {
        self.listing_revision.as_deref()
    }
    /// <p>The glossary terms of the data product listing.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.glossary_terms.is_none()`.
    pub fn glossary_terms(&self) -> &[crate::types::DetailedGlossaryTerm] {
        self.glossary_terms.as_deref().unwrap_or_default()
    }
}
impl ListingSummaryItem {
    /// Creates a new builder-style object to manufacture [`ListingSummaryItem`](crate::types::ListingSummaryItem).
    pub fn builder() -> crate::types::builders::ListingSummaryItemBuilder {
        crate::types::builders::ListingSummaryItemBuilder::default()
    }
}

/// A builder for [`ListingSummaryItem`](crate::types::ListingSummaryItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListingSummaryItemBuilder {
    pub(crate) listing_id: ::std::option::Option<::std::string::String>,
    pub(crate) listing_revision: ::std::option::Option<::std::string::String>,
    pub(crate) glossary_terms: ::std::option::Option<::std::vec::Vec<crate::types::DetailedGlossaryTerm>>,
}
impl ListingSummaryItemBuilder {
    /// <p>The ID of the data product listing.</p>
    pub fn listing_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.listing_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the data product listing.</p>
    pub fn set_listing_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.listing_id = input;
        self
    }
    /// <p>The ID of the data product listing.</p>
    pub fn get_listing_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.listing_id
    }
    /// <p>The revision of the data product listing.</p>
    pub fn listing_revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.listing_revision = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The revision of the data product listing.</p>
    pub fn set_listing_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.listing_revision = input;
        self
    }
    /// <p>The revision of the data product listing.</p>
    pub fn get_listing_revision(&self) -> &::std::option::Option<::std::string::String> {
        &self.listing_revision
    }
    /// Appends an item to `glossary_terms`.
    ///
    /// To override the contents of this collection use [`set_glossary_terms`](Self::set_glossary_terms).
    ///
    /// <p>The glossary terms of the data product listing.</p>
    pub fn glossary_terms(mut self, input: crate::types::DetailedGlossaryTerm) -> Self {
        let mut v = self.glossary_terms.unwrap_or_default();
        v.push(input);
        self.glossary_terms = ::std::option::Option::Some(v);
        self
    }
    /// <p>The glossary terms of the data product listing.</p>
    pub fn set_glossary_terms(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DetailedGlossaryTerm>>) -> Self {
        self.glossary_terms = input;
        self
    }
    /// <p>The glossary terms of the data product listing.</p>
    pub fn get_glossary_terms(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DetailedGlossaryTerm>> {
        &self.glossary_terms
    }
    /// Consumes the builder and constructs a [`ListingSummaryItem`](crate::types::ListingSummaryItem).
    pub fn build(self) -> crate::types::ListingSummaryItem {
        crate::types::ListingSummaryItem {
            listing_id: self.listing_id,
            listing_revision: self.listing_revision,
            glossary_terms: self.glossary_terms,
        }
    }
}
