// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The scope of a rule.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleScope {
    /// <p>The asset type included in the rule scope.</p>
    pub asset_type: ::std::option::Option<crate::types::AssetTypesForRule>,
    /// <p>The data product included in the rule scope.</p>
    pub data_product: ::std::option::Option<bool>,
    /// <p>The project included in the rule scope.</p>
    pub project: ::std::option::Option<crate::types::ProjectsForRule>,
}
impl RuleScope {
    /// <p>The asset type included in the rule scope.</p>
    pub fn asset_type(&self) -> ::std::option::Option<&crate::types::AssetTypesForRule> {
        self.asset_type.as_ref()
    }
    /// <p>The data product included in the rule scope.</p>
    pub fn data_product(&self) -> ::std::option::Option<bool> {
        self.data_product
    }
    /// <p>The project included in the rule scope.</p>
    pub fn project(&self) -> ::std::option::Option<&crate::types::ProjectsForRule> {
        self.project.as_ref()
    }
}
impl RuleScope {
    /// Creates a new builder-style object to manufacture [`RuleScope`](crate::types::RuleScope).
    pub fn builder() -> crate::types::builders::RuleScopeBuilder {
        crate::types::builders::RuleScopeBuilder::default()
    }
}

/// A builder for [`RuleScope`](crate::types::RuleScope).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuleScopeBuilder {
    pub(crate) asset_type: ::std::option::Option<crate::types::AssetTypesForRule>,
    pub(crate) data_product: ::std::option::Option<bool>,
    pub(crate) project: ::std::option::Option<crate::types::ProjectsForRule>,
}
impl RuleScopeBuilder {
    /// <p>The asset type included in the rule scope.</p>
    pub fn asset_type(mut self, input: crate::types::AssetTypesForRule) -> Self {
        self.asset_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The asset type included in the rule scope.</p>
    pub fn set_asset_type(mut self, input: ::std::option::Option<crate::types::AssetTypesForRule>) -> Self {
        self.asset_type = input;
        self
    }
    /// <p>The asset type included in the rule scope.</p>
    pub fn get_asset_type(&self) -> &::std::option::Option<crate::types::AssetTypesForRule> {
        &self.asset_type
    }
    /// <p>The data product included in the rule scope.</p>
    pub fn data_product(mut self, input: bool) -> Self {
        self.data_product = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data product included in the rule scope.</p>
    pub fn set_data_product(mut self, input: ::std::option::Option<bool>) -> Self {
        self.data_product = input;
        self
    }
    /// <p>The data product included in the rule scope.</p>
    pub fn get_data_product(&self) -> &::std::option::Option<bool> {
        &self.data_product
    }
    /// <p>The project included in the rule scope.</p>
    pub fn project(mut self, input: crate::types::ProjectsForRule) -> Self {
        self.project = ::std::option::Option::Some(input);
        self
    }
    /// <p>The project included in the rule scope.</p>
    pub fn set_project(mut self, input: ::std::option::Option<crate::types::ProjectsForRule>) -> Self {
        self.project = input;
        self
    }
    /// <p>The project included in the rule scope.</p>
    pub fn get_project(&self) -> &::std::option::Option<crate::types::ProjectsForRule> {
        &self.project
    }
    /// Consumes the builder and constructs a [`RuleScope`](crate::types::RuleScope).
    pub fn build(self) -> crate::types::RuleScope {
        crate::types::RuleScope {
            asset_type: self.asset_type,
            data_product: self.data_product,
            project: self.project,
        }
    }
}
