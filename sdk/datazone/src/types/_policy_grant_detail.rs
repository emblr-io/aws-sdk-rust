// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the policy grant.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum PolicyGrantDetail {
    /// <p>Specifies that the policy grant is to be added to the members of the project.</p>
    AddToProjectMemberPool(crate::types::AddToProjectMemberPoolPolicyGrantDetail),
    /// <p>Specifies that this is a create asset type policy.</p>
    CreateAssetType(crate::types::CreateAssetTypePolicyGrantDetail),
    /// <p>Specifies that this is a create domain unit policy.</p>
    CreateDomainUnit(crate::types::CreateDomainUnitPolicyGrantDetail),
    /// <p>Specifies that this is a create environment policy.</p>
    CreateEnvironment(crate::types::Unit),
    /// <p>The details of the policy of creating an environment.</p>
    CreateEnvironmentFromBlueprint(crate::types::Unit),
    /// <p>Specifies that this is a create environment profile policy.</p>
    CreateEnvironmentProfile(crate::types::CreateEnvironmentProfilePolicyGrantDetail),
    /// <p>Specifies that this is a create form type policy.</p>
    CreateFormType(crate::types::CreateFormTypePolicyGrantDetail),
    /// <p>Specifies that this is a create glossary policy.</p>
    CreateGlossary(crate::types::CreateGlossaryPolicyGrantDetail),
    /// <p>Specifies that this is a create project policy.</p>
    CreateProject(crate::types::CreateProjectPolicyGrantDetail),
    /// <p>Specifies whether to create a project from project profile.</p>
    CreateProjectFromProjectProfile(crate::types::CreateProjectFromProjectProfilePolicyGrantDetail),
    /// <p>Specifies that this is the delegation of the create environment profile policy.</p>
    DelegateCreateEnvironmentProfile(crate::types::Unit),
    /// <p>Specifies whether to override domain unit owners.</p>
    OverrideDomainUnitOwners(crate::types::OverrideDomainUnitOwnersPolicyGrantDetail),
    /// <p>Specifies whether to override project owners.</p>
    OverrideProjectOwners(crate::types::OverrideProjectOwnersPolicyGrantDetail),
    /// <p>Specifies the domain unit(s) whose projects can use this asset type while creating asset or asset revisions.</p>
    UseAssetType(crate::types::UseAssetTypePolicyGrantDetail),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl PolicyGrantDetail {
    /// Tries to convert the enum instance into [`AddToProjectMemberPool`](crate::types::PolicyGrantDetail::AddToProjectMemberPool), extracting the inner [`AddToProjectMemberPoolPolicyGrantDetail`](crate::types::AddToProjectMemberPoolPolicyGrantDetail).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_add_to_project_member_pool(&self) -> ::std::result::Result<&crate::types::AddToProjectMemberPoolPolicyGrantDetail, &Self> {
        if let PolicyGrantDetail::AddToProjectMemberPool(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AddToProjectMemberPool`](crate::types::PolicyGrantDetail::AddToProjectMemberPool).
    pub fn is_add_to_project_member_pool(&self) -> bool {
        self.as_add_to_project_member_pool().is_ok()
    }
    /// Tries to convert the enum instance into [`CreateAssetType`](crate::types::PolicyGrantDetail::CreateAssetType), extracting the inner [`CreateAssetTypePolicyGrantDetail`](crate::types::CreateAssetTypePolicyGrantDetail).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_create_asset_type(&self) -> ::std::result::Result<&crate::types::CreateAssetTypePolicyGrantDetail, &Self> {
        if let PolicyGrantDetail::CreateAssetType(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`CreateAssetType`](crate::types::PolicyGrantDetail::CreateAssetType).
    pub fn is_create_asset_type(&self) -> bool {
        self.as_create_asset_type().is_ok()
    }
    /// Tries to convert the enum instance into [`CreateDomainUnit`](crate::types::PolicyGrantDetail::CreateDomainUnit), extracting the inner [`CreateDomainUnitPolicyGrantDetail`](crate::types::CreateDomainUnitPolicyGrantDetail).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_create_domain_unit(&self) -> ::std::result::Result<&crate::types::CreateDomainUnitPolicyGrantDetail, &Self> {
        if let PolicyGrantDetail::CreateDomainUnit(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`CreateDomainUnit`](crate::types::PolicyGrantDetail::CreateDomainUnit).
    pub fn is_create_domain_unit(&self) -> bool {
        self.as_create_domain_unit().is_ok()
    }
    /// Tries to convert the enum instance into [`CreateEnvironment`](crate::types::PolicyGrantDetail::CreateEnvironment), extracting the inner [`Unit`](crate::types::Unit).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_create_environment(&self) -> ::std::result::Result<&crate::types::Unit, &Self> {
        if let PolicyGrantDetail::CreateEnvironment(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`CreateEnvironment`](crate::types::PolicyGrantDetail::CreateEnvironment).
    pub fn is_create_environment(&self) -> bool {
        self.as_create_environment().is_ok()
    }
    /// Tries to convert the enum instance into [`CreateEnvironmentFromBlueprint`](crate::types::PolicyGrantDetail::CreateEnvironmentFromBlueprint), extracting the inner [`Unit`](crate::types::Unit).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_create_environment_from_blueprint(&self) -> ::std::result::Result<&crate::types::Unit, &Self> {
        if let PolicyGrantDetail::CreateEnvironmentFromBlueprint(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`CreateEnvironmentFromBlueprint`](crate::types::PolicyGrantDetail::CreateEnvironmentFromBlueprint).
    pub fn is_create_environment_from_blueprint(&self) -> bool {
        self.as_create_environment_from_blueprint().is_ok()
    }
    /// Tries to convert the enum instance into [`CreateEnvironmentProfile`](crate::types::PolicyGrantDetail::CreateEnvironmentProfile), extracting the inner [`CreateEnvironmentProfilePolicyGrantDetail`](crate::types::CreateEnvironmentProfilePolicyGrantDetail).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_create_environment_profile(&self) -> ::std::result::Result<&crate::types::CreateEnvironmentProfilePolicyGrantDetail, &Self> {
        if let PolicyGrantDetail::CreateEnvironmentProfile(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`CreateEnvironmentProfile`](crate::types::PolicyGrantDetail::CreateEnvironmentProfile).
    pub fn is_create_environment_profile(&self) -> bool {
        self.as_create_environment_profile().is_ok()
    }
    /// Tries to convert the enum instance into [`CreateFormType`](crate::types::PolicyGrantDetail::CreateFormType), extracting the inner [`CreateFormTypePolicyGrantDetail`](crate::types::CreateFormTypePolicyGrantDetail).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_create_form_type(&self) -> ::std::result::Result<&crate::types::CreateFormTypePolicyGrantDetail, &Self> {
        if let PolicyGrantDetail::CreateFormType(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`CreateFormType`](crate::types::PolicyGrantDetail::CreateFormType).
    pub fn is_create_form_type(&self) -> bool {
        self.as_create_form_type().is_ok()
    }
    /// Tries to convert the enum instance into [`CreateGlossary`](crate::types::PolicyGrantDetail::CreateGlossary), extracting the inner [`CreateGlossaryPolicyGrantDetail`](crate::types::CreateGlossaryPolicyGrantDetail).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_create_glossary(&self) -> ::std::result::Result<&crate::types::CreateGlossaryPolicyGrantDetail, &Self> {
        if let PolicyGrantDetail::CreateGlossary(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`CreateGlossary`](crate::types::PolicyGrantDetail::CreateGlossary).
    pub fn is_create_glossary(&self) -> bool {
        self.as_create_glossary().is_ok()
    }
    /// Tries to convert the enum instance into [`CreateProject`](crate::types::PolicyGrantDetail::CreateProject), extracting the inner [`CreateProjectPolicyGrantDetail`](crate::types::CreateProjectPolicyGrantDetail).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_create_project(&self) -> ::std::result::Result<&crate::types::CreateProjectPolicyGrantDetail, &Self> {
        if let PolicyGrantDetail::CreateProject(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`CreateProject`](crate::types::PolicyGrantDetail::CreateProject).
    pub fn is_create_project(&self) -> bool {
        self.as_create_project().is_ok()
    }
    /// Tries to convert the enum instance into [`CreateProjectFromProjectProfile`](crate::types::PolicyGrantDetail::CreateProjectFromProjectProfile), extracting the inner [`CreateProjectFromProjectProfilePolicyGrantDetail`](crate::types::CreateProjectFromProjectProfilePolicyGrantDetail).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_create_project_from_project_profile(
        &self,
    ) -> ::std::result::Result<&crate::types::CreateProjectFromProjectProfilePolicyGrantDetail, &Self> {
        if let PolicyGrantDetail::CreateProjectFromProjectProfile(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`CreateProjectFromProjectProfile`](crate::types::PolicyGrantDetail::CreateProjectFromProjectProfile).
    pub fn is_create_project_from_project_profile(&self) -> bool {
        self.as_create_project_from_project_profile().is_ok()
    }
    /// Tries to convert the enum instance into [`DelegateCreateEnvironmentProfile`](crate::types::PolicyGrantDetail::DelegateCreateEnvironmentProfile), extracting the inner [`Unit`](crate::types::Unit).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_delegate_create_environment_profile(&self) -> ::std::result::Result<&crate::types::Unit, &Self> {
        if let PolicyGrantDetail::DelegateCreateEnvironmentProfile(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`DelegateCreateEnvironmentProfile`](crate::types::PolicyGrantDetail::DelegateCreateEnvironmentProfile).
    pub fn is_delegate_create_environment_profile(&self) -> bool {
        self.as_delegate_create_environment_profile().is_ok()
    }
    /// Tries to convert the enum instance into [`OverrideDomainUnitOwners`](crate::types::PolicyGrantDetail::OverrideDomainUnitOwners), extracting the inner [`OverrideDomainUnitOwnersPolicyGrantDetail`](crate::types::OverrideDomainUnitOwnersPolicyGrantDetail).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_override_domain_unit_owners(&self) -> ::std::result::Result<&crate::types::OverrideDomainUnitOwnersPolicyGrantDetail, &Self> {
        if let PolicyGrantDetail::OverrideDomainUnitOwners(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`OverrideDomainUnitOwners`](crate::types::PolicyGrantDetail::OverrideDomainUnitOwners).
    pub fn is_override_domain_unit_owners(&self) -> bool {
        self.as_override_domain_unit_owners().is_ok()
    }
    /// Tries to convert the enum instance into [`OverrideProjectOwners`](crate::types::PolicyGrantDetail::OverrideProjectOwners), extracting the inner [`OverrideProjectOwnersPolicyGrantDetail`](crate::types::OverrideProjectOwnersPolicyGrantDetail).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_override_project_owners(&self) -> ::std::result::Result<&crate::types::OverrideProjectOwnersPolicyGrantDetail, &Self> {
        if let PolicyGrantDetail::OverrideProjectOwners(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`OverrideProjectOwners`](crate::types::PolicyGrantDetail::OverrideProjectOwners).
    pub fn is_override_project_owners(&self) -> bool {
        self.as_override_project_owners().is_ok()
    }
    /// Tries to convert the enum instance into [`UseAssetType`](crate::types::PolicyGrantDetail::UseAssetType), extracting the inner [`UseAssetTypePolicyGrantDetail`](crate::types::UseAssetTypePolicyGrantDetail).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_use_asset_type(&self) -> ::std::result::Result<&crate::types::UseAssetTypePolicyGrantDetail, &Self> {
        if let PolicyGrantDetail::UseAssetType(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`UseAssetType`](crate::types::PolicyGrantDetail::UseAssetType).
    pub fn is_use_asset_type(&self) -> bool {
        self.as_use_asset_type().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
