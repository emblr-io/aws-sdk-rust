// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon Web Services Glue connection.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GlueConnection {
    /// <p>The name of the Amazon Web Services Glue connection.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the Amazon Web Services Glue connection.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The type of the Amazon Web Services Glue connection.</p>
    pub connection_type: ::std::option::Option<crate::types::ConnectionType>,
    /// <p>The match criteria of the Amazon Web Services Glue connection.</p>
    pub match_criteria: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The properties of the Amazon Web Services Glue connection.</p>
    pub connection_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The Spark properties of the Amazon Web Services Glue connection.</p>
    pub spark_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The Amazon Athena properties of the Amazon Web Services Glue connection.</p>
    pub athena_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The Python properties of the Amazon Web Services Glue connection.</p>
    pub python_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The physical connection requirements of the Amazon Web Services Glue connection.</p>
    pub physical_connection_requirements: ::std::option::Option<crate::types::PhysicalConnectionRequirements>,
    /// <p>The creation time of the Amazon Web Services Glue connection.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp at which the Amazon Web Services Glue connection was last updated.</p>
    pub last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The user who last updated the Amazon Web Services Glue connection.</p>
    pub last_updated_by: ::std::option::Option<::std::string::String>,
    /// <p>The status of the Amazon Web Services Glue connection.</p>
    pub status: ::std::option::Option<crate::types::ConnectionStatus>,
    /// <p>The status reason of the Amazon Web Services Glue connection.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The last validation time of the Amazon Web Services Glue connection.</p>
    pub last_connection_validation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The authentication configuration of the Amazon Web Services Glue connection.</p>
    pub authentication_configuration: ::std::option::Option<crate::types::AuthenticationConfiguration>,
    /// <p>The connection schema version of the Amazon Web Services Glue connection.</p>
    pub connection_schema_version: ::std::option::Option<i32>,
    /// <p>The compatible compute environments of the Amazon Web Services Glue connection.</p>
    pub compatible_compute_environments: ::std::option::Option<::std::vec::Vec<crate::types::ComputeEnvironments>>,
}
impl GlueConnection {
    /// <p>The name of the Amazon Web Services Glue connection.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the Amazon Web Services Glue connection.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The type of the Amazon Web Services Glue connection.</p>
    pub fn connection_type(&self) -> ::std::option::Option<&crate::types::ConnectionType> {
        self.connection_type.as_ref()
    }
    /// <p>The match criteria of the Amazon Web Services Glue connection.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.match_criteria.is_none()`.
    pub fn match_criteria(&self) -> &[::std::string::String] {
        self.match_criteria.as_deref().unwrap_or_default()
    }
    /// <p>The properties of the Amazon Web Services Glue connection.</p>
    pub fn connection_properties(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.connection_properties.as_ref()
    }
    /// <p>The Spark properties of the Amazon Web Services Glue connection.</p>
    pub fn spark_properties(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.spark_properties.as_ref()
    }
    /// <p>The Amazon Athena properties of the Amazon Web Services Glue connection.</p>
    pub fn athena_properties(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.athena_properties.as_ref()
    }
    /// <p>The Python properties of the Amazon Web Services Glue connection.</p>
    pub fn python_properties(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.python_properties.as_ref()
    }
    /// <p>The physical connection requirements of the Amazon Web Services Glue connection.</p>
    pub fn physical_connection_requirements(&self) -> ::std::option::Option<&crate::types::PhysicalConnectionRequirements> {
        self.physical_connection_requirements.as_ref()
    }
    /// <p>The creation time of the Amazon Web Services Glue connection.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The timestamp at which the Amazon Web Services Glue connection was last updated.</p>
    pub fn last_updated_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>The user who last updated the Amazon Web Services Glue connection.</p>
    pub fn last_updated_by(&self) -> ::std::option::Option<&str> {
        self.last_updated_by.as_deref()
    }
    /// <p>The status of the Amazon Web Services Glue connection.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ConnectionStatus> {
        self.status.as_ref()
    }
    /// <p>The status reason of the Amazon Web Services Glue connection.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The last validation time of the Amazon Web Services Glue connection.</p>
    pub fn last_connection_validation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_connection_validation_time.as_ref()
    }
    /// <p>The authentication configuration of the Amazon Web Services Glue connection.</p>
    pub fn authentication_configuration(&self) -> ::std::option::Option<&crate::types::AuthenticationConfiguration> {
        self.authentication_configuration.as_ref()
    }
    /// <p>The connection schema version of the Amazon Web Services Glue connection.</p>
    pub fn connection_schema_version(&self) -> ::std::option::Option<i32> {
        self.connection_schema_version
    }
    /// <p>The compatible compute environments of the Amazon Web Services Glue connection.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.compatible_compute_environments.is_none()`.
    pub fn compatible_compute_environments(&self) -> &[crate::types::ComputeEnvironments] {
        self.compatible_compute_environments.as_deref().unwrap_or_default()
    }
}
impl GlueConnection {
    /// Creates a new builder-style object to manufacture [`GlueConnection`](crate::types::GlueConnection).
    pub fn builder() -> crate::types::builders::GlueConnectionBuilder {
        crate::types::builders::GlueConnectionBuilder::default()
    }
}

/// A builder for [`GlueConnection`](crate::types::GlueConnection).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GlueConnectionBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) connection_type: ::std::option::Option<crate::types::ConnectionType>,
    pub(crate) match_criteria: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) connection_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) spark_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) athena_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) python_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) physical_connection_requirements: ::std::option::Option<crate::types::PhysicalConnectionRequirements>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_by: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ConnectionStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) last_connection_validation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) authentication_configuration: ::std::option::Option<crate::types::AuthenticationConfiguration>,
    pub(crate) connection_schema_version: ::std::option::Option<i32>,
    pub(crate) compatible_compute_environments: ::std::option::Option<::std::vec::Vec<crate::types::ComputeEnvironments>>,
}
impl GlueConnectionBuilder {
    /// <p>The name of the Amazon Web Services Glue connection.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon Web Services Glue connection.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Amazon Web Services Glue connection.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the Amazon Web Services Glue connection.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the Amazon Web Services Glue connection.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the Amazon Web Services Glue connection.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The type of the Amazon Web Services Glue connection.</p>
    pub fn connection_type(mut self, input: crate::types::ConnectionType) -> Self {
        self.connection_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the Amazon Web Services Glue connection.</p>
    pub fn set_connection_type(mut self, input: ::std::option::Option<crate::types::ConnectionType>) -> Self {
        self.connection_type = input;
        self
    }
    /// <p>The type of the Amazon Web Services Glue connection.</p>
    pub fn get_connection_type(&self) -> &::std::option::Option<crate::types::ConnectionType> {
        &self.connection_type
    }
    /// Appends an item to `match_criteria`.
    ///
    /// To override the contents of this collection use [`set_match_criteria`](Self::set_match_criteria).
    ///
    /// <p>The match criteria of the Amazon Web Services Glue connection.</p>
    pub fn match_criteria(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.match_criteria.unwrap_or_default();
        v.push(input.into());
        self.match_criteria = ::std::option::Option::Some(v);
        self
    }
    /// <p>The match criteria of the Amazon Web Services Glue connection.</p>
    pub fn set_match_criteria(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.match_criteria = input;
        self
    }
    /// <p>The match criteria of the Amazon Web Services Glue connection.</p>
    pub fn get_match_criteria(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.match_criteria
    }
    /// Adds a key-value pair to `connection_properties`.
    ///
    /// To override the contents of this collection use [`set_connection_properties`](Self::set_connection_properties).
    ///
    /// <p>The properties of the Amazon Web Services Glue connection.</p>
    pub fn connection_properties(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.connection_properties.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.connection_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The properties of the Amazon Web Services Glue connection.</p>
    pub fn set_connection_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.connection_properties = input;
        self
    }
    /// <p>The properties of the Amazon Web Services Glue connection.</p>
    pub fn get_connection_properties(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.connection_properties
    }
    /// Adds a key-value pair to `spark_properties`.
    ///
    /// To override the contents of this collection use [`set_spark_properties`](Self::set_spark_properties).
    ///
    /// <p>The Spark properties of the Amazon Web Services Glue connection.</p>
    pub fn spark_properties(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.spark_properties.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.spark_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The Spark properties of the Amazon Web Services Glue connection.</p>
    pub fn set_spark_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.spark_properties = input;
        self
    }
    /// <p>The Spark properties of the Amazon Web Services Glue connection.</p>
    pub fn get_spark_properties(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.spark_properties
    }
    /// Adds a key-value pair to `athena_properties`.
    ///
    /// To override the contents of this collection use [`set_athena_properties`](Self::set_athena_properties).
    ///
    /// <p>The Amazon Athena properties of the Amazon Web Services Glue connection.</p>
    pub fn athena_properties(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.athena_properties.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.athena_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The Amazon Athena properties of the Amazon Web Services Glue connection.</p>
    pub fn set_athena_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.athena_properties = input;
        self
    }
    /// <p>The Amazon Athena properties of the Amazon Web Services Glue connection.</p>
    pub fn get_athena_properties(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.athena_properties
    }
    /// Adds a key-value pair to `python_properties`.
    ///
    /// To override the contents of this collection use [`set_python_properties`](Self::set_python_properties).
    ///
    /// <p>The Python properties of the Amazon Web Services Glue connection.</p>
    pub fn python_properties(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.python_properties.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.python_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The Python properties of the Amazon Web Services Glue connection.</p>
    pub fn set_python_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.python_properties = input;
        self
    }
    /// <p>The Python properties of the Amazon Web Services Glue connection.</p>
    pub fn get_python_properties(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.python_properties
    }
    /// <p>The physical connection requirements of the Amazon Web Services Glue connection.</p>
    pub fn physical_connection_requirements(mut self, input: crate::types::PhysicalConnectionRequirements) -> Self {
        self.physical_connection_requirements = ::std::option::Option::Some(input);
        self
    }
    /// <p>The physical connection requirements of the Amazon Web Services Glue connection.</p>
    pub fn set_physical_connection_requirements(mut self, input: ::std::option::Option<crate::types::PhysicalConnectionRequirements>) -> Self {
        self.physical_connection_requirements = input;
        self
    }
    /// <p>The physical connection requirements of the Amazon Web Services Glue connection.</p>
    pub fn get_physical_connection_requirements(&self) -> &::std::option::Option<crate::types::PhysicalConnectionRequirements> {
        &self.physical_connection_requirements
    }
    /// <p>The creation time of the Amazon Web Services Glue connection.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation time of the Amazon Web Services Glue connection.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The creation time of the Amazon Web Services Glue connection.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The timestamp at which the Amazon Web Services Glue connection was last updated.</p>
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which the Amazon Web Services Glue connection was last updated.</p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The timestamp at which the Amazon Web Services Glue connection was last updated.</p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// <p>The user who last updated the Amazon Web Services Glue connection.</p>
    pub fn last_updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user who last updated the Amazon Web Services Glue connection.</p>
    pub fn set_last_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_updated_by = input;
        self
    }
    /// <p>The user who last updated the Amazon Web Services Glue connection.</p>
    pub fn get_last_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_updated_by
    }
    /// <p>The status of the Amazon Web Services Glue connection.</p>
    pub fn status(mut self, input: crate::types::ConnectionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the Amazon Web Services Glue connection.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ConnectionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the Amazon Web Services Glue connection.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ConnectionStatus> {
        &self.status
    }
    /// <p>The status reason of the Amazon Web Services Glue connection.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status reason of the Amazon Web Services Glue connection.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The status reason of the Amazon Web Services Glue connection.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The last validation time of the Amazon Web Services Glue connection.</p>
    pub fn last_connection_validation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_connection_validation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last validation time of the Amazon Web Services Glue connection.</p>
    pub fn set_last_connection_validation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_connection_validation_time = input;
        self
    }
    /// <p>The last validation time of the Amazon Web Services Glue connection.</p>
    pub fn get_last_connection_validation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_connection_validation_time
    }
    /// <p>The authentication configuration of the Amazon Web Services Glue connection.</p>
    pub fn authentication_configuration(mut self, input: crate::types::AuthenticationConfiguration) -> Self {
        self.authentication_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication configuration of the Amazon Web Services Glue connection.</p>
    pub fn set_authentication_configuration(mut self, input: ::std::option::Option<crate::types::AuthenticationConfiguration>) -> Self {
        self.authentication_configuration = input;
        self
    }
    /// <p>The authentication configuration of the Amazon Web Services Glue connection.</p>
    pub fn get_authentication_configuration(&self) -> &::std::option::Option<crate::types::AuthenticationConfiguration> {
        &self.authentication_configuration
    }
    /// <p>The connection schema version of the Amazon Web Services Glue connection.</p>
    pub fn connection_schema_version(mut self, input: i32) -> Self {
        self.connection_schema_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The connection schema version of the Amazon Web Services Glue connection.</p>
    pub fn set_connection_schema_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.connection_schema_version = input;
        self
    }
    /// <p>The connection schema version of the Amazon Web Services Glue connection.</p>
    pub fn get_connection_schema_version(&self) -> &::std::option::Option<i32> {
        &self.connection_schema_version
    }
    /// Appends an item to `compatible_compute_environments`.
    ///
    /// To override the contents of this collection use [`set_compatible_compute_environments`](Self::set_compatible_compute_environments).
    ///
    /// <p>The compatible compute environments of the Amazon Web Services Glue connection.</p>
    pub fn compatible_compute_environments(mut self, input: crate::types::ComputeEnvironments) -> Self {
        let mut v = self.compatible_compute_environments.unwrap_or_default();
        v.push(input);
        self.compatible_compute_environments = ::std::option::Option::Some(v);
        self
    }
    /// <p>The compatible compute environments of the Amazon Web Services Glue connection.</p>
    pub fn set_compatible_compute_environments(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ComputeEnvironments>>) -> Self {
        self.compatible_compute_environments = input;
        self
    }
    /// <p>The compatible compute environments of the Amazon Web Services Glue connection.</p>
    pub fn get_compatible_compute_environments(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ComputeEnvironments>> {
        &self.compatible_compute_environments
    }
    /// Consumes the builder and constructs a [`GlueConnection`](crate::types::GlueConnection).
    pub fn build(self) -> crate::types::GlueConnection {
        crate::types::GlueConnection {
            name: self.name,
            description: self.description,
            connection_type: self.connection_type,
            match_criteria: self.match_criteria,
            connection_properties: self.connection_properties,
            spark_properties: self.spark_properties,
            athena_properties: self.athena_properties,
            python_properties: self.python_properties,
            physical_connection_requirements: self.physical_connection_requirements,
            creation_time: self.creation_time,
            last_updated_time: self.last_updated_time,
            last_updated_by: self.last_updated_by,
            status: self.status,
            status_reason: self.status_reason,
            last_connection_validation_time: self.last_connection_validation_time,
            authentication_configuration: self.authentication_configuration,
            connection_schema_version: self.connection_schema_version,
            compatible_compute_environments: self.compatible_compute_environments,
        }
    }
}
