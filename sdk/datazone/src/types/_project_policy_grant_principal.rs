// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The project policy grant principal.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProjectPolicyGrantPrincipal {
    /// <p>The project designation of the project policy grant principal.</p>
    pub project_designation: crate::types::ProjectDesignation,
    /// <p>The project ID of the project policy grant principal.</p>
    pub project_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The project grant filter of the project policy grant principal.</p>
    pub project_grant_filter: ::std::option::Option<crate::types::ProjectGrantFilter>,
}
impl ProjectPolicyGrantPrincipal {
    /// <p>The project designation of the project policy grant principal.</p>
    pub fn project_designation(&self) -> &crate::types::ProjectDesignation {
        &self.project_designation
    }
    /// <p>The project ID of the project policy grant principal.</p>
    pub fn project_identifier(&self) -> ::std::option::Option<&str> {
        self.project_identifier.as_deref()
    }
    /// <p>The project grant filter of the project policy grant principal.</p>
    pub fn project_grant_filter(&self) -> ::std::option::Option<&crate::types::ProjectGrantFilter> {
        self.project_grant_filter.as_ref()
    }
}
impl ProjectPolicyGrantPrincipal {
    /// Creates a new builder-style object to manufacture [`ProjectPolicyGrantPrincipal`](crate::types::ProjectPolicyGrantPrincipal).
    pub fn builder() -> crate::types::builders::ProjectPolicyGrantPrincipalBuilder {
        crate::types::builders::ProjectPolicyGrantPrincipalBuilder::default()
    }
}

/// A builder for [`ProjectPolicyGrantPrincipal`](crate::types::ProjectPolicyGrantPrincipal).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProjectPolicyGrantPrincipalBuilder {
    pub(crate) project_designation: ::std::option::Option<crate::types::ProjectDesignation>,
    pub(crate) project_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) project_grant_filter: ::std::option::Option<crate::types::ProjectGrantFilter>,
}
impl ProjectPolicyGrantPrincipalBuilder {
    /// <p>The project designation of the project policy grant principal.</p>
    /// This field is required.
    pub fn project_designation(mut self, input: crate::types::ProjectDesignation) -> Self {
        self.project_designation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The project designation of the project policy grant principal.</p>
    pub fn set_project_designation(mut self, input: ::std::option::Option<crate::types::ProjectDesignation>) -> Self {
        self.project_designation = input;
        self
    }
    /// <p>The project designation of the project policy grant principal.</p>
    pub fn get_project_designation(&self) -> &::std::option::Option<crate::types::ProjectDesignation> {
        &self.project_designation
    }
    /// <p>The project ID of the project policy grant principal.</p>
    pub fn project_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The project ID of the project policy grant principal.</p>
    pub fn set_project_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_identifier = input;
        self
    }
    /// <p>The project ID of the project policy grant principal.</p>
    pub fn get_project_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_identifier
    }
    /// <p>The project grant filter of the project policy grant principal.</p>
    pub fn project_grant_filter(mut self, input: crate::types::ProjectGrantFilter) -> Self {
        self.project_grant_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>The project grant filter of the project policy grant principal.</p>
    pub fn set_project_grant_filter(mut self, input: ::std::option::Option<crate::types::ProjectGrantFilter>) -> Self {
        self.project_grant_filter = input;
        self
    }
    /// <p>The project grant filter of the project policy grant principal.</p>
    pub fn get_project_grant_filter(&self) -> &::std::option::Option<crate::types::ProjectGrantFilter> {
        &self.project_grant_filter
    }
    /// Consumes the builder and constructs a [`ProjectPolicyGrantPrincipal`](crate::types::ProjectPolicyGrantPrincipal).
    /// This method will fail if any of the following fields are not set:
    /// - [`project_designation`](crate::types::builders::ProjectPolicyGrantPrincipalBuilder::project_designation)
    pub fn build(self) -> ::std::result::Result<crate::types::ProjectPolicyGrantPrincipal, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ProjectPolicyGrantPrincipal {
            project_designation: self.project_designation.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "project_designation",
                    "project_designation was not specified but it is required when building ProjectPolicyGrantPrincipal",
                )
            })?,
            project_identifier: self.project_identifier,
            project_grant_filter: self.project_grant_filter,
        })
    }
}
