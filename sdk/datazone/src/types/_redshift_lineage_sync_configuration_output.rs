// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amaon Redshift lineage sync configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RedshiftLineageSyncConfigurationOutput {
    /// <p>The lineage job ID of the Amaon Redshift lineage sync configuration.</p>
    pub lineage_job_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the Amaon Redshift lineage sync configuration is enabled.</p>
    pub enabled: ::std::option::Option<bool>,
    /// <p>The schedule of teh Amaon Redshift lineage sync configuration.</p>
    pub schedule: ::std::option::Option<crate::types::LineageSyncSchedule>,
}
impl RedshiftLineageSyncConfigurationOutput {
    /// <p>The lineage job ID of the Amaon Redshift lineage sync configuration.</p>
    pub fn lineage_job_id(&self) -> ::std::option::Option<&str> {
        self.lineage_job_id.as_deref()
    }
    /// <p>Specifies whether the Amaon Redshift lineage sync configuration is enabled.</p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
    /// <p>The schedule of teh Amaon Redshift lineage sync configuration.</p>
    pub fn schedule(&self) -> ::std::option::Option<&crate::types::LineageSyncSchedule> {
        self.schedule.as_ref()
    }
}
impl RedshiftLineageSyncConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`RedshiftLineageSyncConfigurationOutput`](crate::types::RedshiftLineageSyncConfigurationOutput).
    pub fn builder() -> crate::types::builders::RedshiftLineageSyncConfigurationOutputBuilder {
        crate::types::builders::RedshiftLineageSyncConfigurationOutputBuilder::default()
    }
}

/// A builder for [`RedshiftLineageSyncConfigurationOutput`](crate::types::RedshiftLineageSyncConfigurationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RedshiftLineageSyncConfigurationOutputBuilder {
    pub(crate) lineage_job_id: ::std::option::Option<::std::string::String>,
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) schedule: ::std::option::Option<crate::types::LineageSyncSchedule>,
}
impl RedshiftLineageSyncConfigurationOutputBuilder {
    /// <p>The lineage job ID of the Amaon Redshift lineage sync configuration.</p>
    pub fn lineage_job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lineage_job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The lineage job ID of the Amaon Redshift lineage sync configuration.</p>
    pub fn set_lineage_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lineage_job_id = input;
        self
    }
    /// <p>The lineage job ID of the Amaon Redshift lineage sync configuration.</p>
    pub fn get_lineage_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.lineage_job_id
    }
    /// <p>Specifies whether the Amaon Redshift lineage sync configuration is enabled.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the Amaon Redshift lineage sync configuration is enabled.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Specifies whether the Amaon Redshift lineage sync configuration is enabled.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>The schedule of teh Amaon Redshift lineage sync configuration.</p>
    pub fn schedule(mut self, input: crate::types::LineageSyncSchedule) -> Self {
        self.schedule = ::std::option::Option::Some(input);
        self
    }
    /// <p>The schedule of teh Amaon Redshift lineage sync configuration.</p>
    pub fn set_schedule(mut self, input: ::std::option::Option<crate::types::LineageSyncSchedule>) -> Self {
        self.schedule = input;
        self
    }
    /// <p>The schedule of teh Amaon Redshift lineage sync configuration.</p>
    pub fn get_schedule(&self) -> &::std::option::Option<crate::types::LineageSyncSchedule> {
        &self.schedule
    }
    /// Consumes the builder and constructs a [`RedshiftLineageSyncConfigurationOutput`](crate::types::RedshiftLineageSyncConfigurationOutput).
    pub fn build(self) -> crate::types::RedshiftLineageSyncConfigurationOutput {
        crate::types::RedshiftLineageSyncConfigurationOutput {
            lineage_job_id: self.lineage_job_id,
            enabled: self.enabled,
            schedule: self.schedule,
        }
    }
}
