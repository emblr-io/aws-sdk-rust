// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The domain unit principal to whom the policy is granted.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DomainUnitPolicyGrantPrincipal {
    /// <p>Specifes the designation of the domain unit users.</p>
    pub domain_unit_designation: crate::types::DomainUnitDesignation,
    /// <p>The ID of the domain unit.</p>
    pub domain_unit_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The grant filter for the domain unit.</p>
    pub domain_unit_grant_filter: ::std::option::Option<crate::types::DomainUnitGrantFilter>,
}
impl DomainUnitPolicyGrantPrincipal {
    /// <p>Specifes the designation of the domain unit users.</p>
    pub fn domain_unit_designation(&self) -> &crate::types::DomainUnitDesignation {
        &self.domain_unit_designation
    }
    /// <p>The ID of the domain unit.</p>
    pub fn domain_unit_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_unit_identifier.as_deref()
    }
    /// <p>The grant filter for the domain unit.</p>
    pub fn domain_unit_grant_filter(&self) -> ::std::option::Option<&crate::types::DomainUnitGrantFilter> {
        self.domain_unit_grant_filter.as_ref()
    }
}
impl DomainUnitPolicyGrantPrincipal {
    /// Creates a new builder-style object to manufacture [`DomainUnitPolicyGrantPrincipal`](crate::types::DomainUnitPolicyGrantPrincipal).
    pub fn builder() -> crate::types::builders::DomainUnitPolicyGrantPrincipalBuilder {
        crate::types::builders::DomainUnitPolicyGrantPrincipalBuilder::default()
    }
}

/// A builder for [`DomainUnitPolicyGrantPrincipal`](crate::types::DomainUnitPolicyGrantPrincipal).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DomainUnitPolicyGrantPrincipalBuilder {
    pub(crate) domain_unit_designation: ::std::option::Option<crate::types::DomainUnitDesignation>,
    pub(crate) domain_unit_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) domain_unit_grant_filter: ::std::option::Option<crate::types::DomainUnitGrantFilter>,
}
impl DomainUnitPolicyGrantPrincipalBuilder {
    /// <p>Specifes the designation of the domain unit users.</p>
    /// This field is required.
    pub fn domain_unit_designation(mut self, input: crate::types::DomainUnitDesignation) -> Self {
        self.domain_unit_designation = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifes the designation of the domain unit users.</p>
    pub fn set_domain_unit_designation(mut self, input: ::std::option::Option<crate::types::DomainUnitDesignation>) -> Self {
        self.domain_unit_designation = input;
        self
    }
    /// <p>Specifes the designation of the domain unit users.</p>
    pub fn get_domain_unit_designation(&self) -> &::std::option::Option<crate::types::DomainUnitDesignation> {
        &self.domain_unit_designation
    }
    /// <p>The ID of the domain unit.</p>
    pub fn domain_unit_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_unit_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain unit.</p>
    pub fn set_domain_unit_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_unit_identifier = input;
        self
    }
    /// <p>The ID of the domain unit.</p>
    pub fn get_domain_unit_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_unit_identifier
    }
    /// <p>The grant filter for the domain unit.</p>
    pub fn domain_unit_grant_filter(mut self, input: crate::types::DomainUnitGrantFilter) -> Self {
        self.domain_unit_grant_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>The grant filter for the domain unit.</p>
    pub fn set_domain_unit_grant_filter(mut self, input: ::std::option::Option<crate::types::DomainUnitGrantFilter>) -> Self {
        self.domain_unit_grant_filter = input;
        self
    }
    /// <p>The grant filter for the domain unit.</p>
    pub fn get_domain_unit_grant_filter(&self) -> &::std::option::Option<crate::types::DomainUnitGrantFilter> {
        &self.domain_unit_grant_filter
    }
    /// Consumes the builder and constructs a [`DomainUnitPolicyGrantPrincipal`](crate::types::DomainUnitPolicyGrantPrincipal).
    /// This method will fail if any of the following fields are not set:
    /// - [`domain_unit_designation`](crate::types::builders::DomainUnitPolicyGrantPrincipalBuilder::domain_unit_designation)
    pub fn build(self) -> ::std::result::Result<crate::types::DomainUnitPolicyGrantPrincipal, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DomainUnitPolicyGrantPrincipal {
            domain_unit_designation: self.domain_unit_designation.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain_unit_designation",
                    "domain_unit_designation was not specified but it is required when building DomainUnitPolicyGrantPrincipal",
                )
            })?,
            domain_unit_identifier: self.domain_unit_identifier,
            domain_unit_grant_filter: self.domain_unit_grant_filter,
        })
    }
}
