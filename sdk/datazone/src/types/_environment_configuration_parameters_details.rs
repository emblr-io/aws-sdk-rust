// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the environment configuration parameter.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EnvironmentConfigurationParametersDetails {
    /// <p>Ssm path environment configuration parameters.</p>
    pub ssm_path: ::std::option::Option<::std::string::String>,
    /// <p>The parameter overrides.</p>
    pub parameter_overrides: ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentConfigurationParameter>>,
    /// <p>The resolved environment configuration parameters.</p>
    pub resolved_parameters: ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentConfigurationParameter>>,
}
impl EnvironmentConfigurationParametersDetails {
    /// <p>Ssm path environment configuration parameters.</p>
    pub fn ssm_path(&self) -> ::std::option::Option<&str> {
        self.ssm_path.as_deref()
    }
    /// <p>The parameter overrides.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.parameter_overrides.is_none()`.
    pub fn parameter_overrides(&self) -> &[crate::types::EnvironmentConfigurationParameter] {
        self.parameter_overrides.as_deref().unwrap_or_default()
    }
    /// <p>The resolved environment configuration parameters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resolved_parameters.is_none()`.
    pub fn resolved_parameters(&self) -> &[crate::types::EnvironmentConfigurationParameter] {
        self.resolved_parameters.as_deref().unwrap_or_default()
    }
}
impl EnvironmentConfigurationParametersDetails {
    /// Creates a new builder-style object to manufacture [`EnvironmentConfigurationParametersDetails`](crate::types::EnvironmentConfigurationParametersDetails).
    pub fn builder() -> crate::types::builders::EnvironmentConfigurationParametersDetailsBuilder {
        crate::types::builders::EnvironmentConfigurationParametersDetailsBuilder::default()
    }
}

/// A builder for [`EnvironmentConfigurationParametersDetails`](crate::types::EnvironmentConfigurationParametersDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EnvironmentConfigurationParametersDetailsBuilder {
    pub(crate) ssm_path: ::std::option::Option<::std::string::String>,
    pub(crate) parameter_overrides: ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentConfigurationParameter>>,
    pub(crate) resolved_parameters: ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentConfigurationParameter>>,
}
impl EnvironmentConfigurationParametersDetailsBuilder {
    /// <p>Ssm path environment configuration parameters.</p>
    pub fn ssm_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ssm_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Ssm path environment configuration parameters.</p>
    pub fn set_ssm_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ssm_path = input;
        self
    }
    /// <p>Ssm path environment configuration parameters.</p>
    pub fn get_ssm_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.ssm_path
    }
    /// Appends an item to `parameter_overrides`.
    ///
    /// To override the contents of this collection use [`set_parameter_overrides`](Self::set_parameter_overrides).
    ///
    /// <p>The parameter overrides.</p>
    pub fn parameter_overrides(mut self, input: crate::types::EnvironmentConfigurationParameter) -> Self {
        let mut v = self.parameter_overrides.unwrap_or_default();
        v.push(input);
        self.parameter_overrides = ::std::option::Option::Some(v);
        self
    }
    /// <p>The parameter overrides.</p>
    pub fn set_parameter_overrides(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentConfigurationParameter>>) -> Self {
        self.parameter_overrides = input;
        self
    }
    /// <p>The parameter overrides.</p>
    pub fn get_parameter_overrides(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EnvironmentConfigurationParameter>> {
        &self.parameter_overrides
    }
    /// Appends an item to `resolved_parameters`.
    ///
    /// To override the contents of this collection use [`set_resolved_parameters`](Self::set_resolved_parameters).
    ///
    /// <p>The resolved environment configuration parameters.</p>
    pub fn resolved_parameters(mut self, input: crate::types::EnvironmentConfigurationParameter) -> Self {
        let mut v = self.resolved_parameters.unwrap_or_default();
        v.push(input);
        self.resolved_parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The resolved environment configuration parameters.</p>
    pub fn set_resolved_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentConfigurationParameter>>) -> Self {
        self.resolved_parameters = input;
        self
    }
    /// <p>The resolved environment configuration parameters.</p>
    pub fn get_resolved_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EnvironmentConfigurationParameter>> {
        &self.resolved_parameters
    }
    /// Consumes the builder and constructs a [`EnvironmentConfigurationParametersDetails`](crate::types::EnvironmentConfigurationParametersDetails).
    pub fn build(self) -> crate::types::EnvironmentConfigurationParametersDetails {
        crate::types::EnvironmentConfigurationParametersDetails {
            ssm_path: self.ssm_path,
            parameter_overrides: self.parameter_overrides,
            resolved_parameters: self.resolved_parameters,
        }
    }
}
