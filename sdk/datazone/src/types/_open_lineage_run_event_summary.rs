// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The open lineage run event summary.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OpenLineageRunEventSummary {
    /// <p>The event type of the open lineage run event summary.</p>
    pub event_type: ::std::option::Option<crate::types::OpenLineageRunState>,
    /// <p>The runID of the open lineage run event summary.</p>
    pub run_id: ::std::option::Option<::std::string::String>,
    /// <p>The job of the open lineage run event summary.</p>
    pub job: ::std::option::Option<crate::types::NameIdentifier>,
    /// <p>The inputs of the open lineage run event summary.</p>
    pub inputs: ::std::option::Option<::std::vec::Vec<crate::types::NameIdentifier>>,
    /// <p>The outputs of the open lineage run event summary.</p>
    pub outputs: ::std::option::Option<::std::vec::Vec<crate::types::NameIdentifier>>,
}
impl OpenLineageRunEventSummary {
    /// <p>The event type of the open lineage run event summary.</p>
    pub fn event_type(&self) -> ::std::option::Option<&crate::types::OpenLineageRunState> {
        self.event_type.as_ref()
    }
    /// <p>The runID of the open lineage run event summary.</p>
    pub fn run_id(&self) -> ::std::option::Option<&str> {
        self.run_id.as_deref()
    }
    /// <p>The job of the open lineage run event summary.</p>
    pub fn job(&self) -> ::std::option::Option<&crate::types::NameIdentifier> {
        self.job.as_ref()
    }
    /// <p>The inputs of the open lineage run event summary.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.inputs.is_none()`.
    pub fn inputs(&self) -> &[crate::types::NameIdentifier] {
        self.inputs.as_deref().unwrap_or_default()
    }
    /// <p>The outputs of the open lineage run event summary.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.outputs.is_none()`.
    pub fn outputs(&self) -> &[crate::types::NameIdentifier] {
        self.outputs.as_deref().unwrap_or_default()
    }
}
impl OpenLineageRunEventSummary {
    /// Creates a new builder-style object to manufacture [`OpenLineageRunEventSummary`](crate::types::OpenLineageRunEventSummary).
    pub fn builder() -> crate::types::builders::OpenLineageRunEventSummaryBuilder {
        crate::types::builders::OpenLineageRunEventSummaryBuilder::default()
    }
}

/// A builder for [`OpenLineageRunEventSummary`](crate::types::OpenLineageRunEventSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OpenLineageRunEventSummaryBuilder {
    pub(crate) event_type: ::std::option::Option<crate::types::OpenLineageRunState>,
    pub(crate) run_id: ::std::option::Option<::std::string::String>,
    pub(crate) job: ::std::option::Option<crate::types::NameIdentifier>,
    pub(crate) inputs: ::std::option::Option<::std::vec::Vec<crate::types::NameIdentifier>>,
    pub(crate) outputs: ::std::option::Option<::std::vec::Vec<crate::types::NameIdentifier>>,
}
impl OpenLineageRunEventSummaryBuilder {
    /// <p>The event type of the open lineage run event summary.</p>
    pub fn event_type(mut self, input: crate::types::OpenLineageRunState) -> Self {
        self.event_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The event type of the open lineage run event summary.</p>
    pub fn set_event_type(mut self, input: ::std::option::Option<crate::types::OpenLineageRunState>) -> Self {
        self.event_type = input;
        self
    }
    /// <p>The event type of the open lineage run event summary.</p>
    pub fn get_event_type(&self) -> &::std::option::Option<crate::types::OpenLineageRunState> {
        &self.event_type
    }
    /// <p>The runID of the open lineage run event summary.</p>
    pub fn run_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.run_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The runID of the open lineage run event summary.</p>
    pub fn set_run_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.run_id = input;
        self
    }
    /// <p>The runID of the open lineage run event summary.</p>
    pub fn get_run_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.run_id
    }
    /// <p>The job of the open lineage run event summary.</p>
    pub fn job(mut self, input: crate::types::NameIdentifier) -> Self {
        self.job = ::std::option::Option::Some(input);
        self
    }
    /// <p>The job of the open lineage run event summary.</p>
    pub fn set_job(mut self, input: ::std::option::Option<crate::types::NameIdentifier>) -> Self {
        self.job = input;
        self
    }
    /// <p>The job of the open lineage run event summary.</p>
    pub fn get_job(&self) -> &::std::option::Option<crate::types::NameIdentifier> {
        &self.job
    }
    /// Appends an item to `inputs`.
    ///
    /// To override the contents of this collection use [`set_inputs`](Self::set_inputs).
    ///
    /// <p>The inputs of the open lineage run event summary.</p>
    pub fn inputs(mut self, input: crate::types::NameIdentifier) -> Self {
        let mut v = self.inputs.unwrap_or_default();
        v.push(input);
        self.inputs = ::std::option::Option::Some(v);
        self
    }
    /// <p>The inputs of the open lineage run event summary.</p>
    pub fn set_inputs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NameIdentifier>>) -> Self {
        self.inputs = input;
        self
    }
    /// <p>The inputs of the open lineage run event summary.</p>
    pub fn get_inputs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NameIdentifier>> {
        &self.inputs
    }
    /// Appends an item to `outputs`.
    ///
    /// To override the contents of this collection use [`set_outputs`](Self::set_outputs).
    ///
    /// <p>The outputs of the open lineage run event summary.</p>
    pub fn outputs(mut self, input: crate::types::NameIdentifier) -> Self {
        let mut v = self.outputs.unwrap_or_default();
        v.push(input);
        self.outputs = ::std::option::Option::Some(v);
        self
    }
    /// <p>The outputs of the open lineage run event summary.</p>
    pub fn set_outputs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NameIdentifier>>) -> Self {
        self.outputs = input;
        self
    }
    /// <p>The outputs of the open lineage run event summary.</p>
    pub fn get_outputs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NameIdentifier>> {
        &self.outputs
    }
    /// Consumes the builder and constructs a [`OpenLineageRunEventSummary`](crate::types::OpenLineageRunEventSummary).
    pub fn build(self) -> crate::types::OpenLineageRunEventSummary {
        crate::types::OpenLineageRunEventSummary {
            event_type: self.event_type,
            run_id: self.run_id,
            job: self.job,
            inputs: self.inputs,
            outputs: self.outputs,
        }
    }
}
