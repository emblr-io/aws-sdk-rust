// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of the asset filter.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AssetFilterSummary {
    /// <p>The ID of the asset filter.</p>
    pub id: ::std::string::String,
    /// <p>The ID of the domain where the asset filter lives.</p>
    pub domain_id: ::std::string::String,
    /// <p>The ID of the data asset.</p>
    pub asset_id: ::std::string::String,
    /// <p>The name of the asset filter.</p>
    pub name: ::std::string::String,
    /// <p>The description of the asset filter.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The status of the asset filter.</p>
    pub status: ::std::option::Option<crate::types::FilterStatus>,
    /// <p>The effective column names of the asset filter.</p>
    pub effective_column_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The effective row filter of the asset filter.</p>
    pub effective_row_filter: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp at which the asset filter was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The error message that is displayed if the action does not succeed.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
}
impl AssetFilterSummary {
    /// <p>The ID of the asset filter.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The ID of the domain where the asset filter lives.</p>
    pub fn domain_id(&self) -> &str {
        use std::ops::Deref;
        self.domain_id.deref()
    }
    /// <p>The ID of the data asset.</p>
    pub fn asset_id(&self) -> &str {
        use std::ops::Deref;
        self.asset_id.deref()
    }
    /// <p>The name of the asset filter.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of the asset filter.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The status of the asset filter.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::FilterStatus> {
        self.status.as_ref()
    }
    /// <p>The effective column names of the asset filter.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.effective_column_names.is_none()`.
    pub fn effective_column_names(&self) -> &[::std::string::String] {
        self.effective_column_names.as_deref().unwrap_or_default()
    }
    /// <p>The effective row filter of the asset filter.</p>
    pub fn effective_row_filter(&self) -> ::std::option::Option<&str> {
        self.effective_row_filter.as_deref()
    }
    /// <p>The timestamp at which the asset filter was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The error message that is displayed if the action does not succeed.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl ::std::fmt::Debug for AssetFilterSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AssetFilterSummary");
        formatter.field("id", &self.id);
        formatter.field("domain_id", &self.domain_id);
        formatter.field("asset_id", &self.asset_id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("effective_column_names", &self.effective_column_names);
        formatter.field("effective_row_filter", &self.effective_row_filter);
        formatter.field("created_at", &self.created_at);
        formatter.field("error_message", &self.error_message);
        formatter.finish()
    }
}
impl AssetFilterSummary {
    /// Creates a new builder-style object to manufacture [`AssetFilterSummary`](crate::types::AssetFilterSummary).
    pub fn builder() -> crate::types::builders::AssetFilterSummaryBuilder {
        crate::types::builders::AssetFilterSummaryBuilder::default()
    }
}

/// A builder for [`AssetFilterSummary`](crate::types::AssetFilterSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AssetFilterSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) asset_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::FilterStatus>,
    pub(crate) effective_column_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) effective_row_filter: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
}
impl AssetFilterSummaryBuilder {
    /// <p>The ID of the asset filter.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the asset filter.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the asset filter.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ID of the domain where the asset filter lives.</p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain where the asset filter lives.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The ID of the domain where the asset filter lives.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The ID of the data asset.</p>
    /// This field is required.
    pub fn asset_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the data asset.</p>
    pub fn set_asset_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_id = input;
        self
    }
    /// <p>The ID of the data asset.</p>
    pub fn get_asset_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_id
    }
    /// <p>The name of the asset filter.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the asset filter.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the asset filter.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the asset filter.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the asset filter.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the asset filter.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The status of the asset filter.</p>
    pub fn status(mut self, input: crate::types::FilterStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the asset filter.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::FilterStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the asset filter.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::FilterStatus> {
        &self.status
    }
    /// Appends an item to `effective_column_names`.
    ///
    /// To override the contents of this collection use [`set_effective_column_names`](Self::set_effective_column_names).
    ///
    /// <p>The effective column names of the asset filter.</p>
    pub fn effective_column_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.effective_column_names.unwrap_or_default();
        v.push(input.into());
        self.effective_column_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>The effective column names of the asset filter.</p>
    pub fn set_effective_column_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.effective_column_names = input;
        self
    }
    /// <p>The effective column names of the asset filter.</p>
    pub fn get_effective_column_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.effective_column_names
    }
    /// <p>The effective row filter of the asset filter.</p>
    pub fn effective_row_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.effective_row_filter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The effective row filter of the asset filter.</p>
    pub fn set_effective_row_filter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.effective_row_filter = input;
        self
    }
    /// <p>The effective row filter of the asset filter.</p>
    pub fn get_effective_row_filter(&self) -> &::std::option::Option<::std::string::String> {
        &self.effective_row_filter
    }
    /// <p>The timestamp at which the asset filter was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which the asset filter was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp at which the asset filter was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The error message that is displayed if the action does not succeed.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error message that is displayed if the action does not succeed.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The error message that is displayed if the action does not succeed.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// Consumes the builder and constructs a [`AssetFilterSummary`](crate::types::AssetFilterSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::AssetFilterSummaryBuilder::id)
    /// - [`domain_id`](crate::types::builders::AssetFilterSummaryBuilder::domain_id)
    /// - [`asset_id`](crate::types::builders::AssetFilterSummaryBuilder::asset_id)
    /// - [`name`](crate::types::builders::AssetFilterSummaryBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::AssetFilterSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AssetFilterSummary {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building AssetFilterSummary",
                )
            })?,
            domain_id: self.domain_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain_id",
                    "domain_id was not specified but it is required when building AssetFilterSummary",
                )
            })?,
            asset_id: self.asset_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "asset_id",
                    "asset_id was not specified but it is required when building AssetFilterSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AssetFilterSummary",
                )
            })?,
            description: self.description,
            status: self.status,
            effective_column_names: self.effective_column_names,
            effective_row_filter: self.effective_row_filter,
            created_at: self.created_at,
            error_message: self.error_message,
        })
    }
}
impl ::std::fmt::Debug for AssetFilterSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AssetFilterSummaryBuilder");
        formatter.field("id", &self.id);
        formatter.field("domain_id", &self.domain_id);
        formatter.field("asset_id", &self.asset_id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("effective_column_names", &self.effective_column_names);
        formatter.field("effective_row_filter", &self.effective_row_filter);
        formatter.field("created_at", &self.created_at);
        formatter.field("error_message", &self.error_message);
        formatter.finish()
    }
}
