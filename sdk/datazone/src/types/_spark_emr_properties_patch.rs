// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Spark EMR properties patch.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SparkEmrPropertiesPatch {
    /// <p>The compute ARN in the Spark EMR properties patch.</p>
    pub compute_arn: ::std::option::Option<::std::string::String>,
    /// <p>The instance profile ARN in the Spark EMR properties patch.</p>
    pub instance_profile_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Java virtual evn in the Spark EMR properties patch.</p>
    pub java_virtual_env: ::std::option::Option<::std::string::String>,
    /// <p>The log URI in the Spark EMR properties patch.</p>
    pub log_uri: ::std::option::Option<::std::string::String>,
    /// <p>The Python virtual env in the Spark EMR properties patch.</p>
    pub python_virtual_env: ::std::option::Option<::std::string::String>,
    /// <p>The runtime role in the Spark EMR properties patch.</p>
    pub runtime_role: ::std::option::Option<::std::string::String>,
    /// <p>The trusted certificates S3 URI in the Spark EMR properties patch.</p>
    pub trusted_certificates_s3_uri: ::std::option::Option<::std::string::String>,
}
impl SparkEmrPropertiesPatch {
    /// <p>The compute ARN in the Spark EMR properties patch.</p>
    pub fn compute_arn(&self) -> ::std::option::Option<&str> {
        self.compute_arn.as_deref()
    }
    /// <p>The instance profile ARN in the Spark EMR properties patch.</p>
    pub fn instance_profile_arn(&self) -> ::std::option::Option<&str> {
        self.instance_profile_arn.as_deref()
    }
    /// <p>The Java virtual evn in the Spark EMR properties patch.</p>
    pub fn java_virtual_env(&self) -> ::std::option::Option<&str> {
        self.java_virtual_env.as_deref()
    }
    /// <p>The log URI in the Spark EMR properties patch.</p>
    pub fn log_uri(&self) -> ::std::option::Option<&str> {
        self.log_uri.as_deref()
    }
    /// <p>The Python virtual env in the Spark EMR properties patch.</p>
    pub fn python_virtual_env(&self) -> ::std::option::Option<&str> {
        self.python_virtual_env.as_deref()
    }
    /// <p>The runtime role in the Spark EMR properties patch.</p>
    pub fn runtime_role(&self) -> ::std::option::Option<&str> {
        self.runtime_role.as_deref()
    }
    /// <p>The trusted certificates S3 URI in the Spark EMR properties patch.</p>
    pub fn trusted_certificates_s3_uri(&self) -> ::std::option::Option<&str> {
        self.trusted_certificates_s3_uri.as_deref()
    }
}
impl SparkEmrPropertiesPatch {
    /// Creates a new builder-style object to manufacture [`SparkEmrPropertiesPatch`](crate::types::SparkEmrPropertiesPatch).
    pub fn builder() -> crate::types::builders::SparkEmrPropertiesPatchBuilder {
        crate::types::builders::SparkEmrPropertiesPatchBuilder::default()
    }
}

/// A builder for [`SparkEmrPropertiesPatch`](crate::types::SparkEmrPropertiesPatch).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SparkEmrPropertiesPatchBuilder {
    pub(crate) compute_arn: ::std::option::Option<::std::string::String>,
    pub(crate) instance_profile_arn: ::std::option::Option<::std::string::String>,
    pub(crate) java_virtual_env: ::std::option::Option<::std::string::String>,
    pub(crate) log_uri: ::std::option::Option<::std::string::String>,
    pub(crate) python_virtual_env: ::std::option::Option<::std::string::String>,
    pub(crate) runtime_role: ::std::option::Option<::std::string::String>,
    pub(crate) trusted_certificates_s3_uri: ::std::option::Option<::std::string::String>,
}
impl SparkEmrPropertiesPatchBuilder {
    /// <p>The compute ARN in the Spark EMR properties patch.</p>
    pub fn compute_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.compute_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The compute ARN in the Spark EMR properties patch.</p>
    pub fn set_compute_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.compute_arn = input;
        self
    }
    /// <p>The compute ARN in the Spark EMR properties patch.</p>
    pub fn get_compute_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.compute_arn
    }
    /// <p>The instance profile ARN in the Spark EMR properties patch.</p>
    pub fn instance_profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_profile_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance profile ARN in the Spark EMR properties patch.</p>
    pub fn set_instance_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_profile_arn = input;
        self
    }
    /// <p>The instance profile ARN in the Spark EMR properties patch.</p>
    pub fn get_instance_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_profile_arn
    }
    /// <p>The Java virtual evn in the Spark EMR properties patch.</p>
    pub fn java_virtual_env(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.java_virtual_env = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Java virtual evn in the Spark EMR properties patch.</p>
    pub fn set_java_virtual_env(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.java_virtual_env = input;
        self
    }
    /// <p>The Java virtual evn in the Spark EMR properties patch.</p>
    pub fn get_java_virtual_env(&self) -> &::std::option::Option<::std::string::String> {
        &self.java_virtual_env
    }
    /// <p>The log URI in the Spark EMR properties patch.</p>
    pub fn log_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The log URI in the Spark EMR properties patch.</p>
    pub fn set_log_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_uri = input;
        self
    }
    /// <p>The log URI in the Spark EMR properties patch.</p>
    pub fn get_log_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_uri
    }
    /// <p>The Python virtual env in the Spark EMR properties patch.</p>
    pub fn python_virtual_env(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.python_virtual_env = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Python virtual env in the Spark EMR properties patch.</p>
    pub fn set_python_virtual_env(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.python_virtual_env = input;
        self
    }
    /// <p>The Python virtual env in the Spark EMR properties patch.</p>
    pub fn get_python_virtual_env(&self) -> &::std::option::Option<::std::string::String> {
        &self.python_virtual_env
    }
    /// <p>The runtime role in the Spark EMR properties patch.</p>
    pub fn runtime_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.runtime_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The runtime role in the Spark EMR properties patch.</p>
    pub fn set_runtime_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.runtime_role = input;
        self
    }
    /// <p>The runtime role in the Spark EMR properties patch.</p>
    pub fn get_runtime_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.runtime_role
    }
    /// <p>The trusted certificates S3 URI in the Spark EMR properties patch.</p>
    pub fn trusted_certificates_s3_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trusted_certificates_s3_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The trusted certificates S3 URI in the Spark EMR properties patch.</p>
    pub fn set_trusted_certificates_s3_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trusted_certificates_s3_uri = input;
        self
    }
    /// <p>The trusted certificates S3 URI in the Spark EMR properties patch.</p>
    pub fn get_trusted_certificates_s3_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.trusted_certificates_s3_uri
    }
    /// Consumes the builder and constructs a [`SparkEmrPropertiesPatch`](crate::types::SparkEmrPropertiesPatch).
    pub fn build(self) -> crate::types::SparkEmrPropertiesPatch {
        crate::types::SparkEmrPropertiesPatch {
            compute_arn: self.compute_arn,
            instance_profile_arn: self.instance_profile_arn,
            java_virtual_env: self.java_virtual_env,
            log_uri: self.log_uri,
            python_virtual_env: self.python_virtual_env,
            runtime_role: self.runtime_role,
            trusted_certificates_s3_uri: self.trusted_certificates_s3_uri,
        }
    }
}
