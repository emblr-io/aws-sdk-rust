// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Spark EMR properties.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SparkEmrPropertiesOutput {
    /// <p>The compute ARN of the Spark EMR.</p>
    pub compute_arn: ::std::option::Option<::std::string::String>,
    /// <p>The credentials of the Spark EMR.</p>
    pub credentials: ::std::option::Option<crate::types::UsernamePassword>,
    /// <p>The credential expiration of the Spark EMR.</p>
    pub credentials_expiration: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The governance type of the Spark EMR.</p>
    pub governance_type: ::std::option::Option<crate::types::GovernanceType>,
    /// <p>The instance profile ARN of the Spark EMR.</p>
    pub instance_profile_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Java virtual env of the Spark EMR.</p>
    pub java_virtual_env: ::std::option::Option<::std::string::String>,
    /// <p>The livy endpoint of the Spark EMR.</p>
    pub livy_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The log URI of the Spark EMR.</p>
    pub log_uri: ::std::option::Option<::std::string::String>,
    /// <p>The Python virtual env of the Spark EMR.</p>
    pub python_virtual_env: ::std::option::Option<::std::string::String>,
    /// <p>The runtime role of the Spark EMR.</p>
    pub runtime_role: ::std::option::Option<::std::string::String>,
    /// <p>The trusted certificate S3 URL of the Spark EMR.</p>
    pub trusted_certificates_s3_uri: ::std::option::Option<::std::string::String>,
}
impl SparkEmrPropertiesOutput {
    /// <p>The compute ARN of the Spark EMR.</p>
    pub fn compute_arn(&self) -> ::std::option::Option<&str> {
        self.compute_arn.as_deref()
    }
    /// <p>The credentials of the Spark EMR.</p>
    pub fn credentials(&self) -> ::std::option::Option<&crate::types::UsernamePassword> {
        self.credentials.as_ref()
    }
    /// <p>The credential expiration of the Spark EMR.</p>
    pub fn credentials_expiration(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.credentials_expiration.as_ref()
    }
    /// <p>The governance type of the Spark EMR.</p>
    pub fn governance_type(&self) -> ::std::option::Option<&crate::types::GovernanceType> {
        self.governance_type.as_ref()
    }
    /// <p>The instance profile ARN of the Spark EMR.</p>
    pub fn instance_profile_arn(&self) -> ::std::option::Option<&str> {
        self.instance_profile_arn.as_deref()
    }
    /// <p>The Java virtual env of the Spark EMR.</p>
    pub fn java_virtual_env(&self) -> ::std::option::Option<&str> {
        self.java_virtual_env.as_deref()
    }
    /// <p>The livy endpoint of the Spark EMR.</p>
    pub fn livy_endpoint(&self) -> ::std::option::Option<&str> {
        self.livy_endpoint.as_deref()
    }
    /// <p>The log URI of the Spark EMR.</p>
    pub fn log_uri(&self) -> ::std::option::Option<&str> {
        self.log_uri.as_deref()
    }
    /// <p>The Python virtual env of the Spark EMR.</p>
    pub fn python_virtual_env(&self) -> ::std::option::Option<&str> {
        self.python_virtual_env.as_deref()
    }
    /// <p>The runtime role of the Spark EMR.</p>
    pub fn runtime_role(&self) -> ::std::option::Option<&str> {
        self.runtime_role.as_deref()
    }
    /// <p>The trusted certificate S3 URL of the Spark EMR.</p>
    pub fn trusted_certificates_s3_uri(&self) -> ::std::option::Option<&str> {
        self.trusted_certificates_s3_uri.as_deref()
    }
}
impl ::std::fmt::Debug for SparkEmrPropertiesOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SparkEmrPropertiesOutput");
        formatter.field("compute_arn", &self.compute_arn);
        formatter.field("credentials", &"*** Sensitive Data Redacted ***");
        formatter.field("credentials_expiration", &self.credentials_expiration);
        formatter.field("governance_type", &self.governance_type);
        formatter.field("instance_profile_arn", &self.instance_profile_arn);
        formatter.field("java_virtual_env", &self.java_virtual_env);
        formatter.field("livy_endpoint", &self.livy_endpoint);
        formatter.field("log_uri", &self.log_uri);
        formatter.field("python_virtual_env", &self.python_virtual_env);
        formatter.field("runtime_role", &self.runtime_role);
        formatter.field("trusted_certificates_s3_uri", &self.trusted_certificates_s3_uri);
        formatter.finish()
    }
}
impl SparkEmrPropertiesOutput {
    /// Creates a new builder-style object to manufacture [`SparkEmrPropertiesOutput`](crate::types::SparkEmrPropertiesOutput).
    pub fn builder() -> crate::types::builders::SparkEmrPropertiesOutputBuilder {
        crate::types::builders::SparkEmrPropertiesOutputBuilder::default()
    }
}

/// A builder for [`SparkEmrPropertiesOutput`](crate::types::SparkEmrPropertiesOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct SparkEmrPropertiesOutputBuilder {
    pub(crate) compute_arn: ::std::option::Option<::std::string::String>,
    pub(crate) credentials: ::std::option::Option<crate::types::UsernamePassword>,
    pub(crate) credentials_expiration: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) governance_type: ::std::option::Option<crate::types::GovernanceType>,
    pub(crate) instance_profile_arn: ::std::option::Option<::std::string::String>,
    pub(crate) java_virtual_env: ::std::option::Option<::std::string::String>,
    pub(crate) livy_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) log_uri: ::std::option::Option<::std::string::String>,
    pub(crate) python_virtual_env: ::std::option::Option<::std::string::String>,
    pub(crate) runtime_role: ::std::option::Option<::std::string::String>,
    pub(crate) trusted_certificates_s3_uri: ::std::option::Option<::std::string::String>,
}
impl SparkEmrPropertiesOutputBuilder {
    /// <p>The compute ARN of the Spark EMR.</p>
    pub fn compute_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.compute_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The compute ARN of the Spark EMR.</p>
    pub fn set_compute_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.compute_arn = input;
        self
    }
    /// <p>The compute ARN of the Spark EMR.</p>
    pub fn get_compute_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.compute_arn
    }
    /// <p>The credentials of the Spark EMR.</p>
    pub fn credentials(mut self, input: crate::types::UsernamePassword) -> Self {
        self.credentials = ::std::option::Option::Some(input);
        self
    }
    /// <p>The credentials of the Spark EMR.</p>
    pub fn set_credentials(mut self, input: ::std::option::Option<crate::types::UsernamePassword>) -> Self {
        self.credentials = input;
        self
    }
    /// <p>The credentials of the Spark EMR.</p>
    pub fn get_credentials(&self) -> &::std::option::Option<crate::types::UsernamePassword> {
        &self.credentials
    }
    /// <p>The credential expiration of the Spark EMR.</p>
    pub fn credentials_expiration(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.credentials_expiration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The credential expiration of the Spark EMR.</p>
    pub fn set_credentials_expiration(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.credentials_expiration = input;
        self
    }
    /// <p>The credential expiration of the Spark EMR.</p>
    pub fn get_credentials_expiration(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.credentials_expiration
    }
    /// <p>The governance type of the Spark EMR.</p>
    pub fn governance_type(mut self, input: crate::types::GovernanceType) -> Self {
        self.governance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The governance type of the Spark EMR.</p>
    pub fn set_governance_type(mut self, input: ::std::option::Option<crate::types::GovernanceType>) -> Self {
        self.governance_type = input;
        self
    }
    /// <p>The governance type of the Spark EMR.</p>
    pub fn get_governance_type(&self) -> &::std::option::Option<crate::types::GovernanceType> {
        &self.governance_type
    }
    /// <p>The instance profile ARN of the Spark EMR.</p>
    pub fn instance_profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_profile_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance profile ARN of the Spark EMR.</p>
    pub fn set_instance_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_profile_arn = input;
        self
    }
    /// <p>The instance profile ARN of the Spark EMR.</p>
    pub fn get_instance_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_profile_arn
    }
    /// <p>The Java virtual env of the Spark EMR.</p>
    pub fn java_virtual_env(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.java_virtual_env = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Java virtual env of the Spark EMR.</p>
    pub fn set_java_virtual_env(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.java_virtual_env = input;
        self
    }
    /// <p>The Java virtual env of the Spark EMR.</p>
    pub fn get_java_virtual_env(&self) -> &::std::option::Option<::std::string::String> {
        &self.java_virtual_env
    }
    /// <p>The livy endpoint of the Spark EMR.</p>
    pub fn livy_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.livy_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The livy endpoint of the Spark EMR.</p>
    pub fn set_livy_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.livy_endpoint = input;
        self
    }
    /// <p>The livy endpoint of the Spark EMR.</p>
    pub fn get_livy_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.livy_endpoint
    }
    /// <p>The log URI of the Spark EMR.</p>
    pub fn log_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The log URI of the Spark EMR.</p>
    pub fn set_log_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_uri = input;
        self
    }
    /// <p>The log URI of the Spark EMR.</p>
    pub fn get_log_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_uri
    }
    /// <p>The Python virtual env of the Spark EMR.</p>
    pub fn python_virtual_env(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.python_virtual_env = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Python virtual env of the Spark EMR.</p>
    pub fn set_python_virtual_env(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.python_virtual_env = input;
        self
    }
    /// <p>The Python virtual env of the Spark EMR.</p>
    pub fn get_python_virtual_env(&self) -> &::std::option::Option<::std::string::String> {
        &self.python_virtual_env
    }
    /// <p>The runtime role of the Spark EMR.</p>
    pub fn runtime_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.runtime_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The runtime role of the Spark EMR.</p>
    pub fn set_runtime_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.runtime_role = input;
        self
    }
    /// <p>The runtime role of the Spark EMR.</p>
    pub fn get_runtime_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.runtime_role
    }
    /// <p>The trusted certificate S3 URL of the Spark EMR.</p>
    pub fn trusted_certificates_s3_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trusted_certificates_s3_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The trusted certificate S3 URL of the Spark EMR.</p>
    pub fn set_trusted_certificates_s3_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trusted_certificates_s3_uri = input;
        self
    }
    /// <p>The trusted certificate S3 URL of the Spark EMR.</p>
    pub fn get_trusted_certificates_s3_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.trusted_certificates_s3_uri
    }
    /// Consumes the builder and constructs a [`SparkEmrPropertiesOutput`](crate::types::SparkEmrPropertiesOutput).
    pub fn build(self) -> crate::types::SparkEmrPropertiesOutput {
        crate::types::SparkEmrPropertiesOutput {
            compute_arn: self.compute_arn,
            credentials: self.credentials,
            credentials_expiration: self.credentials_expiration,
            governance_type: self.governance_type,
            instance_profile_arn: self.instance_profile_arn,
            java_virtual_env: self.java_virtual_env,
            livy_endpoint: self.livy_endpoint,
            log_uri: self.log_uri,
            python_virtual_env: self.python_virtual_env,
            runtime_role: self.runtime_role,
            trusted_certificates_s3_uri: self.trusted_certificates_s3_uri,
        }
    }
}
impl ::std::fmt::Debug for SparkEmrPropertiesOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SparkEmrPropertiesOutputBuilder");
        formatter.field("compute_arn", &self.compute_arn);
        formatter.field("credentials", &"*** Sensitive Data Redacted ***");
        formatter.field("credentials_expiration", &self.credentials_expiration);
        formatter.field("governance_type", &self.governance_type);
        formatter.field("instance_profile_arn", &self.instance_profile_arn);
        formatter.field("java_virtual_env", &self.java_virtual_env);
        formatter.field("livy_endpoint", &self.livy_endpoint);
        formatter.field("log_uri", &self.log_uri);
        formatter.field("python_virtual_env", &self.python_virtual_env);
        formatter.field("runtime_role", &self.runtime_role);
        formatter.field("trusted_certificates_s3_uri", &self.trusted_certificates_s3_uri);
        formatter.finish()
    }
}
