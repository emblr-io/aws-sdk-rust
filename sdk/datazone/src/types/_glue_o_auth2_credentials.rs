// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The GlueOAuth2 credentials of a connection.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GlueOAuth2Credentials {
    /// <p>The user managed client application client secret of the connection.</p>
    pub user_managed_client_application_client_secret: ::std::option::Option<::std::string::String>,
    /// <p>The access token of a connection.</p>
    pub access_token: ::std::option::Option<::std::string::String>,
    /// <p>The refresh token of the connection.</p>
    pub refresh_token: ::std::option::Option<::std::string::String>,
    /// <p>The jwt token of the connection.</p>
    pub jwt_token: ::std::option::Option<::std::string::String>,
}
impl GlueOAuth2Credentials {
    /// <p>The user managed client application client secret of the connection.</p>
    pub fn user_managed_client_application_client_secret(&self) -> ::std::option::Option<&str> {
        self.user_managed_client_application_client_secret.as_deref()
    }
    /// <p>The access token of a connection.</p>
    pub fn access_token(&self) -> ::std::option::Option<&str> {
        self.access_token.as_deref()
    }
    /// <p>The refresh token of the connection.</p>
    pub fn refresh_token(&self) -> ::std::option::Option<&str> {
        self.refresh_token.as_deref()
    }
    /// <p>The jwt token of the connection.</p>
    pub fn jwt_token(&self) -> ::std::option::Option<&str> {
        self.jwt_token.as_deref()
    }
}
impl ::std::fmt::Debug for GlueOAuth2Credentials {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GlueOAuth2Credentials");
        formatter.field("user_managed_client_application_client_secret", &"*** Sensitive Data Redacted ***");
        formatter.field("access_token", &"*** Sensitive Data Redacted ***");
        formatter.field("refresh_token", &"*** Sensitive Data Redacted ***");
        formatter.field("jwt_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GlueOAuth2Credentials {
    /// Creates a new builder-style object to manufacture [`GlueOAuth2Credentials`](crate::types::GlueOAuth2Credentials).
    pub fn builder() -> crate::types::builders::GlueOAuth2CredentialsBuilder {
        crate::types::builders::GlueOAuth2CredentialsBuilder::default()
    }
}

/// A builder for [`GlueOAuth2Credentials`](crate::types::GlueOAuth2Credentials).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GlueOAuth2CredentialsBuilder {
    pub(crate) user_managed_client_application_client_secret: ::std::option::Option<::std::string::String>,
    pub(crate) access_token: ::std::option::Option<::std::string::String>,
    pub(crate) refresh_token: ::std::option::Option<::std::string::String>,
    pub(crate) jwt_token: ::std::option::Option<::std::string::String>,
}
impl GlueOAuth2CredentialsBuilder {
    /// <p>The user managed client application client secret of the connection.</p>
    pub fn user_managed_client_application_client_secret(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_managed_client_application_client_secret = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user managed client application client secret of the connection.</p>
    pub fn set_user_managed_client_application_client_secret(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_managed_client_application_client_secret = input;
        self
    }
    /// <p>The user managed client application client secret of the connection.</p>
    pub fn get_user_managed_client_application_client_secret(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_managed_client_application_client_secret
    }
    /// <p>The access token of a connection.</p>
    pub fn access_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The access token of a connection.</p>
    pub fn set_access_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_token = input;
        self
    }
    /// <p>The access token of a connection.</p>
    pub fn get_access_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_token
    }
    /// <p>The refresh token of the connection.</p>
    pub fn refresh_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.refresh_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The refresh token of the connection.</p>
    pub fn set_refresh_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.refresh_token = input;
        self
    }
    /// <p>The refresh token of the connection.</p>
    pub fn get_refresh_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.refresh_token
    }
    /// <p>The jwt token of the connection.</p>
    pub fn jwt_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.jwt_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The jwt token of the connection.</p>
    pub fn set_jwt_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.jwt_token = input;
        self
    }
    /// <p>The jwt token of the connection.</p>
    pub fn get_jwt_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.jwt_token
    }
    /// Consumes the builder and constructs a [`GlueOAuth2Credentials`](crate::types::GlueOAuth2Credentials).
    pub fn build(self) -> crate::types::GlueOAuth2Credentials {
        crate::types::GlueOAuth2Credentials {
            user_managed_client_application_client_secret: self.user_managed_client_application_client_secret,
            access_token: self.access_token,
            refresh_token: self.refresh_token,
            jwt_token: self.jwt_token,
        }
    }
}
impl ::std::fmt::Debug for GlueOAuth2CredentialsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GlueOAuth2CredentialsBuilder");
        formatter.field("user_managed_client_application_client_secret", &"*** Sensitive Data Redacted ***");
        formatter.field("access_token", &"*** Sensitive Data Redacted ***");
        formatter.field("refresh_token", &"*** Sensitive Data Redacted ***");
        formatter.field("jwt_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
