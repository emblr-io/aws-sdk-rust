// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The authentication configuration patch of a connection.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AuthenticationConfigurationPatch {
    /// <p>The secret ARN of a connection.</p>
    pub secret_arn: ::std::option::Option<::std::string::String>,
    /// <p>The basic authentication credentials of a connection.</p>
    pub basic_authentication_credentials: ::std::option::Option<crate::types::BasicAuthenticationCredentials>,
}
impl AuthenticationConfigurationPatch {
    /// <p>The secret ARN of a connection.</p>
    pub fn secret_arn(&self) -> ::std::option::Option<&str> {
        self.secret_arn.as_deref()
    }
    /// <p>The basic authentication credentials of a connection.</p>
    pub fn basic_authentication_credentials(&self) -> ::std::option::Option<&crate::types::BasicAuthenticationCredentials> {
        self.basic_authentication_credentials.as_ref()
    }
}
impl ::std::fmt::Debug for AuthenticationConfigurationPatch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AuthenticationConfigurationPatch");
        formatter.field("secret_arn", &self.secret_arn);
        formatter.field("basic_authentication_credentials", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AuthenticationConfigurationPatch {
    /// Creates a new builder-style object to manufacture [`AuthenticationConfigurationPatch`](crate::types::AuthenticationConfigurationPatch).
    pub fn builder() -> crate::types::builders::AuthenticationConfigurationPatchBuilder {
        crate::types::builders::AuthenticationConfigurationPatchBuilder::default()
    }
}

/// A builder for [`AuthenticationConfigurationPatch`](crate::types::AuthenticationConfigurationPatch).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AuthenticationConfigurationPatchBuilder {
    pub(crate) secret_arn: ::std::option::Option<::std::string::String>,
    pub(crate) basic_authentication_credentials: ::std::option::Option<crate::types::BasicAuthenticationCredentials>,
}
impl AuthenticationConfigurationPatchBuilder {
    /// <p>The secret ARN of a connection.</p>
    pub fn secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The secret ARN of a connection.</p>
    pub fn set_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_arn = input;
        self
    }
    /// <p>The secret ARN of a connection.</p>
    pub fn get_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_arn
    }
    /// <p>The basic authentication credentials of a connection.</p>
    pub fn basic_authentication_credentials(mut self, input: crate::types::BasicAuthenticationCredentials) -> Self {
        self.basic_authentication_credentials = ::std::option::Option::Some(input);
        self
    }
    /// <p>The basic authentication credentials of a connection.</p>
    pub fn set_basic_authentication_credentials(mut self, input: ::std::option::Option<crate::types::BasicAuthenticationCredentials>) -> Self {
        self.basic_authentication_credentials = input;
        self
    }
    /// <p>The basic authentication credentials of a connection.</p>
    pub fn get_basic_authentication_credentials(&self) -> &::std::option::Option<crate::types::BasicAuthenticationCredentials> {
        &self.basic_authentication_credentials
    }
    /// Consumes the builder and constructs a [`AuthenticationConfigurationPatch`](crate::types::AuthenticationConfigurationPatch).
    pub fn build(self) -> crate::types::AuthenticationConfigurationPatch {
        crate::types::AuthenticationConfigurationPatch {
            secret_arn: self.secret_arn,
            basic_authentication_credentials: self.basic_authentication_credentials,
        }
    }
}
impl ::std::fmt::Debug for AuthenticationConfigurationPatchBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AuthenticationConfigurationPatchBuilder");
        formatter.field("secret_arn", &self.secret_arn);
        formatter.field("basic_authentication_credentials", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
