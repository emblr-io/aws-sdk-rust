// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An asset published in an Amazon DataZone catalog.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssetListing {
    /// <p>The identifier of an asset published in an Amazon DataZone catalog.</p>
    pub asset_id: ::std::option::Option<::std::string::String>,
    /// <p>The revision of an asset published in an Amazon DataZone catalog.</p>
    pub asset_revision: ::std::option::Option<::std::string::String>,
    /// <p>The type of an asset published in an Amazon DataZone catalog.</p>
    pub asset_type: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of when an asset published in an Amazon DataZone catalog was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The metadata forms attached to an asset published in an Amazon DataZone catalog.</p>
    pub forms: ::std::option::Option<::std::string::String>,
    /// <p>The latest time series data points forms included in the additional attributes of an asset.</p>
    pub latest_time_series_data_point_forms: ::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesDataPointSummaryFormOutput>>,
    /// <p>The glossary terms attached to an asset published in an Amazon DataZone catalog.</p>
    pub glossary_terms: ::std::option::Option<::std::vec::Vec<crate::types::DetailedGlossaryTerm>>,
    /// <p>The identifier of the project where an asset published in an Amazon DataZone catalog exists.</p>
    pub owning_project_id: ::std::option::Option<::std::string::String>,
}
impl AssetListing {
    /// <p>The identifier of an asset published in an Amazon DataZone catalog.</p>
    pub fn asset_id(&self) -> ::std::option::Option<&str> {
        self.asset_id.as_deref()
    }
    /// <p>The revision of an asset published in an Amazon DataZone catalog.</p>
    pub fn asset_revision(&self) -> ::std::option::Option<&str> {
        self.asset_revision.as_deref()
    }
    /// <p>The type of an asset published in an Amazon DataZone catalog.</p>
    pub fn asset_type(&self) -> ::std::option::Option<&str> {
        self.asset_type.as_deref()
    }
    /// <p>The timestamp of when an asset published in an Amazon DataZone catalog was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The metadata forms attached to an asset published in an Amazon DataZone catalog.</p>
    pub fn forms(&self) -> ::std::option::Option<&str> {
        self.forms.as_deref()
    }
    /// <p>The latest time series data points forms included in the additional attributes of an asset.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.latest_time_series_data_point_forms.is_none()`.
    pub fn latest_time_series_data_point_forms(&self) -> &[crate::types::TimeSeriesDataPointSummaryFormOutput] {
        self.latest_time_series_data_point_forms.as_deref().unwrap_or_default()
    }
    /// <p>The glossary terms attached to an asset published in an Amazon DataZone catalog.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.glossary_terms.is_none()`.
    pub fn glossary_terms(&self) -> &[crate::types::DetailedGlossaryTerm] {
        self.glossary_terms.as_deref().unwrap_or_default()
    }
    /// <p>The identifier of the project where an asset published in an Amazon DataZone catalog exists.</p>
    pub fn owning_project_id(&self) -> ::std::option::Option<&str> {
        self.owning_project_id.as_deref()
    }
}
impl AssetListing {
    /// Creates a new builder-style object to manufacture [`AssetListing`](crate::types::AssetListing).
    pub fn builder() -> crate::types::builders::AssetListingBuilder {
        crate::types::builders::AssetListingBuilder::default()
    }
}

/// A builder for [`AssetListing`](crate::types::AssetListing).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssetListingBuilder {
    pub(crate) asset_id: ::std::option::Option<::std::string::String>,
    pub(crate) asset_revision: ::std::option::Option<::std::string::String>,
    pub(crate) asset_type: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) forms: ::std::option::Option<::std::string::String>,
    pub(crate) latest_time_series_data_point_forms: ::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesDataPointSummaryFormOutput>>,
    pub(crate) glossary_terms: ::std::option::Option<::std::vec::Vec<crate::types::DetailedGlossaryTerm>>,
    pub(crate) owning_project_id: ::std::option::Option<::std::string::String>,
}
impl AssetListingBuilder {
    /// <p>The identifier of an asset published in an Amazon DataZone catalog.</p>
    pub fn asset_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of an asset published in an Amazon DataZone catalog.</p>
    pub fn set_asset_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_id = input;
        self
    }
    /// <p>The identifier of an asset published in an Amazon DataZone catalog.</p>
    pub fn get_asset_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_id
    }
    /// <p>The revision of an asset published in an Amazon DataZone catalog.</p>
    pub fn asset_revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_revision = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The revision of an asset published in an Amazon DataZone catalog.</p>
    pub fn set_asset_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_revision = input;
        self
    }
    /// <p>The revision of an asset published in an Amazon DataZone catalog.</p>
    pub fn get_asset_revision(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_revision
    }
    /// <p>The type of an asset published in an Amazon DataZone catalog.</p>
    pub fn asset_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of an asset published in an Amazon DataZone catalog.</p>
    pub fn set_asset_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_type = input;
        self
    }
    /// <p>The type of an asset published in an Amazon DataZone catalog.</p>
    pub fn get_asset_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_type
    }
    /// <p>The timestamp of when an asset published in an Amazon DataZone catalog was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when an asset published in an Amazon DataZone catalog was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when an asset published in an Amazon DataZone catalog was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The metadata forms attached to an asset published in an Amazon DataZone catalog.</p>
    pub fn forms(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.forms = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The metadata forms attached to an asset published in an Amazon DataZone catalog.</p>
    pub fn set_forms(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.forms = input;
        self
    }
    /// <p>The metadata forms attached to an asset published in an Amazon DataZone catalog.</p>
    pub fn get_forms(&self) -> &::std::option::Option<::std::string::String> {
        &self.forms
    }
    /// Appends an item to `latest_time_series_data_point_forms`.
    ///
    /// To override the contents of this collection use [`set_latest_time_series_data_point_forms`](Self::set_latest_time_series_data_point_forms).
    ///
    /// <p>The latest time series data points forms included in the additional attributes of an asset.</p>
    pub fn latest_time_series_data_point_forms(mut self, input: crate::types::TimeSeriesDataPointSummaryFormOutput) -> Self {
        let mut v = self.latest_time_series_data_point_forms.unwrap_or_default();
        v.push(input);
        self.latest_time_series_data_point_forms = ::std::option::Option::Some(v);
        self
    }
    /// <p>The latest time series data points forms included in the additional attributes of an asset.</p>
    pub fn set_latest_time_series_data_point_forms(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesDataPointSummaryFormOutput>>,
    ) -> Self {
        self.latest_time_series_data_point_forms = input;
        self
    }
    /// <p>The latest time series data points forms included in the additional attributes of an asset.</p>
    pub fn get_latest_time_series_data_point_forms(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesDataPointSummaryFormOutput>> {
        &self.latest_time_series_data_point_forms
    }
    /// Appends an item to `glossary_terms`.
    ///
    /// To override the contents of this collection use [`set_glossary_terms`](Self::set_glossary_terms).
    ///
    /// <p>The glossary terms attached to an asset published in an Amazon DataZone catalog.</p>
    pub fn glossary_terms(mut self, input: crate::types::DetailedGlossaryTerm) -> Self {
        let mut v = self.glossary_terms.unwrap_or_default();
        v.push(input);
        self.glossary_terms = ::std::option::Option::Some(v);
        self
    }
    /// <p>The glossary terms attached to an asset published in an Amazon DataZone catalog.</p>
    pub fn set_glossary_terms(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DetailedGlossaryTerm>>) -> Self {
        self.glossary_terms = input;
        self
    }
    /// <p>The glossary terms attached to an asset published in an Amazon DataZone catalog.</p>
    pub fn get_glossary_terms(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DetailedGlossaryTerm>> {
        &self.glossary_terms
    }
    /// <p>The identifier of the project where an asset published in an Amazon DataZone catalog exists.</p>
    pub fn owning_project_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owning_project_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the project where an asset published in an Amazon DataZone catalog exists.</p>
    pub fn set_owning_project_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owning_project_id = input;
        self
    }
    /// <p>The identifier of the project where an asset published in an Amazon DataZone catalog exists.</p>
    pub fn get_owning_project_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owning_project_id
    }
    /// Consumes the builder and constructs a [`AssetListing`](crate::types::AssetListing).
    pub fn build(self) -> crate::types::AssetListing {
        crate::types::AssetListing {
            asset_id: self.asset_id,
            asset_revision: self.asset_revision,
            asset_type: self.asset_type,
            created_at: self.created_at,
            forms: self.forms,
            latest_time_series_data_point_forms: self.latest_time_series_data_point_forms,
            glossary_terms: self.glossary_terms,
            owning_project_id: self.owning_project_id,
        }
    }
}
