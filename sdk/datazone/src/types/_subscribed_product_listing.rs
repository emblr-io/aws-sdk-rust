// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The data product listing.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SubscribedProductListing {
    /// <p>The ID of the data product listing.</p>
    pub entity_id: ::std::option::Option<::std::string::String>,
    /// <p>The revision of the data product listing.</p>
    pub entity_revision: ::std::option::Option<::std::string::String>,
    /// <p>The glossary terms of the data product listing.</p>
    pub glossary_terms: ::std::option::Option<::std::vec::Vec<crate::types::DetailedGlossaryTerm>>,
    /// <p>The name of the data product listing.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the data product listing.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The data assets of the data product listing.</p>
    pub asset_listings: ::std::option::Option<::std::vec::Vec<crate::types::AssetInDataProductListingItem>>,
}
impl SubscribedProductListing {
    /// <p>The ID of the data product listing.</p>
    pub fn entity_id(&self) -> ::std::option::Option<&str> {
        self.entity_id.as_deref()
    }
    /// <p>The revision of the data product listing.</p>
    pub fn entity_revision(&self) -> ::std::option::Option<&str> {
        self.entity_revision.as_deref()
    }
    /// <p>The glossary terms of the data product listing.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.glossary_terms.is_none()`.
    pub fn glossary_terms(&self) -> &[crate::types::DetailedGlossaryTerm] {
        self.glossary_terms.as_deref().unwrap_or_default()
    }
    /// <p>The name of the data product listing.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the data product listing.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The data assets of the data product listing.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.asset_listings.is_none()`.
    pub fn asset_listings(&self) -> &[crate::types::AssetInDataProductListingItem] {
        self.asset_listings.as_deref().unwrap_or_default()
    }
}
impl SubscribedProductListing {
    /// Creates a new builder-style object to manufacture [`SubscribedProductListing`](crate::types::SubscribedProductListing).
    pub fn builder() -> crate::types::builders::SubscribedProductListingBuilder {
        crate::types::builders::SubscribedProductListingBuilder::default()
    }
}

/// A builder for [`SubscribedProductListing`](crate::types::SubscribedProductListing).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SubscribedProductListingBuilder {
    pub(crate) entity_id: ::std::option::Option<::std::string::String>,
    pub(crate) entity_revision: ::std::option::Option<::std::string::String>,
    pub(crate) glossary_terms: ::std::option::Option<::std::vec::Vec<crate::types::DetailedGlossaryTerm>>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) asset_listings: ::std::option::Option<::std::vec::Vec<crate::types::AssetInDataProductListingItem>>,
}
impl SubscribedProductListingBuilder {
    /// <p>The ID of the data product listing.</p>
    pub fn entity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the data product listing.</p>
    pub fn set_entity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>The ID of the data product listing.</p>
    pub fn get_entity_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_id
    }
    /// <p>The revision of the data product listing.</p>
    pub fn entity_revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_revision = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The revision of the data product listing.</p>
    pub fn set_entity_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_revision = input;
        self
    }
    /// <p>The revision of the data product listing.</p>
    pub fn get_entity_revision(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_revision
    }
    /// Appends an item to `glossary_terms`.
    ///
    /// To override the contents of this collection use [`set_glossary_terms`](Self::set_glossary_terms).
    ///
    /// <p>The glossary terms of the data product listing.</p>
    pub fn glossary_terms(mut self, input: crate::types::DetailedGlossaryTerm) -> Self {
        let mut v = self.glossary_terms.unwrap_or_default();
        v.push(input);
        self.glossary_terms = ::std::option::Option::Some(v);
        self
    }
    /// <p>The glossary terms of the data product listing.</p>
    pub fn set_glossary_terms(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DetailedGlossaryTerm>>) -> Self {
        self.glossary_terms = input;
        self
    }
    /// <p>The glossary terms of the data product listing.</p>
    pub fn get_glossary_terms(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DetailedGlossaryTerm>> {
        &self.glossary_terms
    }
    /// <p>The name of the data product listing.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the data product listing.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the data product listing.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the data product listing.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the data product listing.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the data product listing.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `asset_listings`.
    ///
    /// To override the contents of this collection use [`set_asset_listings`](Self::set_asset_listings).
    ///
    /// <p>The data assets of the data product listing.</p>
    pub fn asset_listings(mut self, input: crate::types::AssetInDataProductListingItem) -> Self {
        let mut v = self.asset_listings.unwrap_or_default();
        v.push(input);
        self.asset_listings = ::std::option::Option::Some(v);
        self
    }
    /// <p>The data assets of the data product listing.</p>
    pub fn set_asset_listings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AssetInDataProductListingItem>>) -> Self {
        self.asset_listings = input;
        self
    }
    /// <p>The data assets of the data product listing.</p>
    pub fn get_asset_listings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AssetInDataProductListingItem>> {
        &self.asset_listings
    }
    /// Consumes the builder and constructs a [`SubscribedProductListing`](crate::types::SubscribedProductListing).
    pub fn build(self) -> crate::types::SubscribedProductListing {
        crate::types::SubscribedProductListing {
            entity_id: self.entity_id,
            entity_revision: self.entity_revision,
            glossary_terms: self.glossary_terms,
            name: self.name,
            description: self.description,
            asset_listings: self.asset_listings,
        }
    }
}
