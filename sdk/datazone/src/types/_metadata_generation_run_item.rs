// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metadata generation run.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetadataGenerationRunItem {
    /// <p>The ID of the Amazon DataZone domain in which the metadata generation run was created.</p>
    pub domain_id: ::std::string::String,
    /// <p>The ID of the metadata generation run.</p>
    pub id: ::std::string::String,
    /// <p>The asset for which metadata was generated.</p>
    pub target: ::std::option::Option<crate::types::MetadataGenerationRunTarget>,
    /// <p>The status of the metadata generation run.</p>
    pub status: ::std::option::Option<crate::types::MetadataGenerationRunStatus>,
    /// <p>The type of the metadata generation run.</p>
    pub r#type: ::std::option::Option<crate::types::MetadataGenerationRunType>,
    /// <p>The timestamp at which the metadata generation run was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The user who created the metadata generation run.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the project that owns the asset for which the metadata generation was ran.</p>
    pub owning_project_id: ::std::string::String,
}
impl MetadataGenerationRunItem {
    /// <p>The ID of the Amazon DataZone domain in which the metadata generation run was created.</p>
    pub fn domain_id(&self) -> &str {
        use std::ops::Deref;
        self.domain_id.deref()
    }
    /// <p>The ID of the metadata generation run.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The asset for which metadata was generated.</p>
    pub fn target(&self) -> ::std::option::Option<&crate::types::MetadataGenerationRunTarget> {
        self.target.as_ref()
    }
    /// <p>The status of the metadata generation run.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::MetadataGenerationRunStatus> {
        self.status.as_ref()
    }
    /// <p>The type of the metadata generation run.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::MetadataGenerationRunType> {
        self.r#type.as_ref()
    }
    /// <p>The timestamp at which the metadata generation run was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The user who created the metadata generation run.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The ID of the project that owns the asset for which the metadata generation was ran.</p>
    pub fn owning_project_id(&self) -> &str {
        use std::ops::Deref;
        self.owning_project_id.deref()
    }
}
impl MetadataGenerationRunItem {
    /// Creates a new builder-style object to manufacture [`MetadataGenerationRunItem`](crate::types::MetadataGenerationRunItem).
    pub fn builder() -> crate::types::builders::MetadataGenerationRunItemBuilder {
        crate::types::builders::MetadataGenerationRunItemBuilder::default()
    }
}

/// A builder for [`MetadataGenerationRunItem`](crate::types::MetadataGenerationRunItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MetadataGenerationRunItemBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) target: ::std::option::Option<crate::types::MetadataGenerationRunTarget>,
    pub(crate) status: ::std::option::Option<crate::types::MetadataGenerationRunStatus>,
    pub(crate) r#type: ::std::option::Option<crate::types::MetadataGenerationRunType>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) owning_project_id: ::std::option::Option<::std::string::String>,
}
impl MetadataGenerationRunItemBuilder {
    /// <p>The ID of the Amazon DataZone domain in which the metadata generation run was created.</p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which the metadata generation run was created.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which the metadata generation run was created.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The ID of the metadata generation run.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the metadata generation run.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the metadata generation run.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The asset for which metadata was generated.</p>
    pub fn target(mut self, input: crate::types::MetadataGenerationRunTarget) -> Self {
        self.target = ::std::option::Option::Some(input);
        self
    }
    /// <p>The asset for which metadata was generated.</p>
    pub fn set_target(mut self, input: ::std::option::Option<crate::types::MetadataGenerationRunTarget>) -> Self {
        self.target = input;
        self
    }
    /// <p>The asset for which metadata was generated.</p>
    pub fn get_target(&self) -> &::std::option::Option<crate::types::MetadataGenerationRunTarget> {
        &self.target
    }
    /// <p>The status of the metadata generation run.</p>
    pub fn status(mut self, input: crate::types::MetadataGenerationRunStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the metadata generation run.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::MetadataGenerationRunStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the metadata generation run.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::MetadataGenerationRunStatus> {
        &self.status
    }
    /// <p>The type of the metadata generation run.</p>
    pub fn r#type(mut self, input: crate::types::MetadataGenerationRunType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the metadata generation run.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::MetadataGenerationRunType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the metadata generation run.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::MetadataGenerationRunType> {
        &self.r#type
    }
    /// <p>The timestamp at which the metadata generation run was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which the metadata generation run was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp at which the metadata generation run was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The user who created the metadata generation run.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user who created the metadata generation run.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The user who created the metadata generation run.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The ID of the project that owns the asset for which the metadata generation was ran.</p>
    /// This field is required.
    pub fn owning_project_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owning_project_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the project that owns the asset for which the metadata generation was ran.</p>
    pub fn set_owning_project_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owning_project_id = input;
        self
    }
    /// <p>The ID of the project that owns the asset for which the metadata generation was ran.</p>
    pub fn get_owning_project_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owning_project_id
    }
    /// Consumes the builder and constructs a [`MetadataGenerationRunItem`](crate::types::MetadataGenerationRunItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`domain_id`](crate::types::builders::MetadataGenerationRunItemBuilder::domain_id)
    /// - [`id`](crate::types::builders::MetadataGenerationRunItemBuilder::id)
    /// - [`owning_project_id`](crate::types::builders::MetadataGenerationRunItemBuilder::owning_project_id)
    pub fn build(self) -> ::std::result::Result<crate::types::MetadataGenerationRunItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MetadataGenerationRunItem {
            domain_id: self.domain_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain_id",
                    "domain_id was not specified but it is required when building MetadataGenerationRunItem",
                )
            })?,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building MetadataGenerationRunItem",
                )
            })?,
            target: self.target,
            status: self.status,
            r#type: self.r#type,
            created_at: self.created_at,
            created_by: self.created_by,
            owning_project_id: self.owning_project_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "owning_project_id",
                    "owning_project_id was not specified but it is required when building MetadataGenerationRunItem",
                )
            })?,
        })
    }
}
