// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies projects in which the rule is created.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProjectsForRule {
    /// <p>The selection mode of the rule.</p>
    pub selection_mode: crate::types::RuleScopeSelectionMode,
    /// <p>The specific projects in which the rule is created.</p>
    pub specific_projects: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ProjectsForRule {
    /// <p>The selection mode of the rule.</p>
    pub fn selection_mode(&self) -> &crate::types::RuleScopeSelectionMode {
        &self.selection_mode
    }
    /// <p>The specific projects in which the rule is created.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.specific_projects.is_none()`.
    pub fn specific_projects(&self) -> &[::std::string::String] {
        self.specific_projects.as_deref().unwrap_or_default()
    }
}
impl ProjectsForRule {
    /// Creates a new builder-style object to manufacture [`ProjectsForRule`](crate::types::ProjectsForRule).
    pub fn builder() -> crate::types::builders::ProjectsForRuleBuilder {
        crate::types::builders::ProjectsForRuleBuilder::default()
    }
}

/// A builder for [`ProjectsForRule`](crate::types::ProjectsForRule).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProjectsForRuleBuilder {
    pub(crate) selection_mode: ::std::option::Option<crate::types::RuleScopeSelectionMode>,
    pub(crate) specific_projects: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ProjectsForRuleBuilder {
    /// <p>The selection mode of the rule.</p>
    /// This field is required.
    pub fn selection_mode(mut self, input: crate::types::RuleScopeSelectionMode) -> Self {
        self.selection_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The selection mode of the rule.</p>
    pub fn set_selection_mode(mut self, input: ::std::option::Option<crate::types::RuleScopeSelectionMode>) -> Self {
        self.selection_mode = input;
        self
    }
    /// <p>The selection mode of the rule.</p>
    pub fn get_selection_mode(&self) -> &::std::option::Option<crate::types::RuleScopeSelectionMode> {
        &self.selection_mode
    }
    /// Appends an item to `specific_projects`.
    ///
    /// To override the contents of this collection use [`set_specific_projects`](Self::set_specific_projects).
    ///
    /// <p>The specific projects in which the rule is created.</p>
    pub fn specific_projects(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.specific_projects.unwrap_or_default();
        v.push(input.into());
        self.specific_projects = ::std::option::Option::Some(v);
        self
    }
    /// <p>The specific projects in which the rule is created.</p>
    pub fn set_specific_projects(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.specific_projects = input;
        self
    }
    /// <p>The specific projects in which the rule is created.</p>
    pub fn get_specific_projects(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.specific_projects
    }
    /// Consumes the builder and constructs a [`ProjectsForRule`](crate::types::ProjectsForRule).
    /// This method will fail if any of the following fields are not set:
    /// - [`selection_mode`](crate::types::builders::ProjectsForRuleBuilder::selection_mode)
    pub fn build(self) -> ::std::result::Result<crate::types::ProjectsForRule, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ProjectsForRule {
            selection_mode: self.selection_mode.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "selection_mode",
                    "selection_mode was not specified but it is required when building ProjectsForRule",
                )
            })?,
            specific_projects: self.specific_projects,
        })
    }
}
