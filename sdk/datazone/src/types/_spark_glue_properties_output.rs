// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Spark Amazon Web Services Glue properties.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SparkGluePropertiesOutput {
    /// <p>The additional args in the Spark Amazon Web Services Glue properties.</p>
    pub additional_args: ::std::option::Option<crate::types::SparkGlueArgs>,
    /// <p>The Amazon Web Services Glue connection name in the Spark Amazon Web Services Glue properties.</p>
    pub glue_connection_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Glue version in the Spark Amazon Web Services Glue properties.</p>
    pub glue_version: ::std::option::Option<::std::string::String>,
    /// <p>The idle timeout in the Spark Amazon Web Services Glue properties.</p>
    pub idle_timeout: ::std::option::Option<i32>,
    /// <p>The Java virtual env in the Spark Amazon Web Services Glue properties.</p>
    pub java_virtual_env: ::std::option::Option<::std::string::String>,
    /// <p>The number of workers in the Spark Amazon Web Services Glue properties.</p>
    pub number_of_workers: ::std::option::Option<i32>,
    /// <p>The Python virtual env in the Spark Amazon Web Services Glue properties.</p>
    pub python_virtual_env: ::std::option::Option<::std::string::String>,
    /// <p>The worker type in the Spark Amazon Web Services Glue properties.</p>
    pub worker_type: ::std::option::Option<::std::string::String>,
}
impl SparkGluePropertiesOutput {
    /// <p>The additional args in the Spark Amazon Web Services Glue properties.</p>
    pub fn additional_args(&self) -> ::std::option::Option<&crate::types::SparkGlueArgs> {
        self.additional_args.as_ref()
    }
    /// <p>The Amazon Web Services Glue connection name in the Spark Amazon Web Services Glue properties.</p>
    pub fn glue_connection_name(&self) -> ::std::option::Option<&str> {
        self.glue_connection_name.as_deref()
    }
    /// <p>The Amazon Web Services Glue version in the Spark Amazon Web Services Glue properties.</p>
    pub fn glue_version(&self) -> ::std::option::Option<&str> {
        self.glue_version.as_deref()
    }
    /// <p>The idle timeout in the Spark Amazon Web Services Glue properties.</p>
    pub fn idle_timeout(&self) -> ::std::option::Option<i32> {
        self.idle_timeout
    }
    /// <p>The Java virtual env in the Spark Amazon Web Services Glue properties.</p>
    pub fn java_virtual_env(&self) -> ::std::option::Option<&str> {
        self.java_virtual_env.as_deref()
    }
    /// <p>The number of workers in the Spark Amazon Web Services Glue properties.</p>
    pub fn number_of_workers(&self) -> ::std::option::Option<i32> {
        self.number_of_workers
    }
    /// <p>The Python virtual env in the Spark Amazon Web Services Glue properties.</p>
    pub fn python_virtual_env(&self) -> ::std::option::Option<&str> {
        self.python_virtual_env.as_deref()
    }
    /// <p>The worker type in the Spark Amazon Web Services Glue properties.</p>
    pub fn worker_type(&self) -> ::std::option::Option<&str> {
        self.worker_type.as_deref()
    }
}
impl SparkGluePropertiesOutput {
    /// Creates a new builder-style object to manufacture [`SparkGluePropertiesOutput`](crate::types::SparkGluePropertiesOutput).
    pub fn builder() -> crate::types::builders::SparkGluePropertiesOutputBuilder {
        crate::types::builders::SparkGluePropertiesOutputBuilder::default()
    }
}

/// A builder for [`SparkGluePropertiesOutput`](crate::types::SparkGluePropertiesOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SparkGluePropertiesOutputBuilder {
    pub(crate) additional_args: ::std::option::Option<crate::types::SparkGlueArgs>,
    pub(crate) glue_connection_name: ::std::option::Option<::std::string::String>,
    pub(crate) glue_version: ::std::option::Option<::std::string::String>,
    pub(crate) idle_timeout: ::std::option::Option<i32>,
    pub(crate) java_virtual_env: ::std::option::Option<::std::string::String>,
    pub(crate) number_of_workers: ::std::option::Option<i32>,
    pub(crate) python_virtual_env: ::std::option::Option<::std::string::String>,
    pub(crate) worker_type: ::std::option::Option<::std::string::String>,
}
impl SparkGluePropertiesOutputBuilder {
    /// <p>The additional args in the Spark Amazon Web Services Glue properties.</p>
    pub fn additional_args(mut self, input: crate::types::SparkGlueArgs) -> Self {
        self.additional_args = ::std::option::Option::Some(input);
        self
    }
    /// <p>The additional args in the Spark Amazon Web Services Glue properties.</p>
    pub fn set_additional_args(mut self, input: ::std::option::Option<crate::types::SparkGlueArgs>) -> Self {
        self.additional_args = input;
        self
    }
    /// <p>The additional args in the Spark Amazon Web Services Glue properties.</p>
    pub fn get_additional_args(&self) -> &::std::option::Option<crate::types::SparkGlueArgs> {
        &self.additional_args
    }
    /// <p>The Amazon Web Services Glue connection name in the Spark Amazon Web Services Glue properties.</p>
    pub fn glue_connection_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.glue_connection_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Glue connection name in the Spark Amazon Web Services Glue properties.</p>
    pub fn set_glue_connection_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.glue_connection_name = input;
        self
    }
    /// <p>The Amazon Web Services Glue connection name in the Spark Amazon Web Services Glue properties.</p>
    pub fn get_glue_connection_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.glue_connection_name
    }
    /// <p>The Amazon Web Services Glue version in the Spark Amazon Web Services Glue properties.</p>
    pub fn glue_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.glue_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Glue version in the Spark Amazon Web Services Glue properties.</p>
    pub fn set_glue_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.glue_version = input;
        self
    }
    /// <p>The Amazon Web Services Glue version in the Spark Amazon Web Services Glue properties.</p>
    pub fn get_glue_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.glue_version
    }
    /// <p>The idle timeout in the Spark Amazon Web Services Glue properties.</p>
    pub fn idle_timeout(mut self, input: i32) -> Self {
        self.idle_timeout = ::std::option::Option::Some(input);
        self
    }
    /// <p>The idle timeout in the Spark Amazon Web Services Glue properties.</p>
    pub fn set_idle_timeout(mut self, input: ::std::option::Option<i32>) -> Self {
        self.idle_timeout = input;
        self
    }
    /// <p>The idle timeout in the Spark Amazon Web Services Glue properties.</p>
    pub fn get_idle_timeout(&self) -> &::std::option::Option<i32> {
        &self.idle_timeout
    }
    /// <p>The Java virtual env in the Spark Amazon Web Services Glue properties.</p>
    pub fn java_virtual_env(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.java_virtual_env = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Java virtual env in the Spark Amazon Web Services Glue properties.</p>
    pub fn set_java_virtual_env(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.java_virtual_env = input;
        self
    }
    /// <p>The Java virtual env in the Spark Amazon Web Services Glue properties.</p>
    pub fn get_java_virtual_env(&self) -> &::std::option::Option<::std::string::String> {
        &self.java_virtual_env
    }
    /// <p>The number of workers in the Spark Amazon Web Services Glue properties.</p>
    pub fn number_of_workers(mut self, input: i32) -> Self {
        self.number_of_workers = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of workers in the Spark Amazon Web Services Glue properties.</p>
    pub fn set_number_of_workers(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_workers = input;
        self
    }
    /// <p>The number of workers in the Spark Amazon Web Services Glue properties.</p>
    pub fn get_number_of_workers(&self) -> &::std::option::Option<i32> {
        &self.number_of_workers
    }
    /// <p>The Python virtual env in the Spark Amazon Web Services Glue properties.</p>
    pub fn python_virtual_env(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.python_virtual_env = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Python virtual env in the Spark Amazon Web Services Glue properties.</p>
    pub fn set_python_virtual_env(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.python_virtual_env = input;
        self
    }
    /// <p>The Python virtual env in the Spark Amazon Web Services Glue properties.</p>
    pub fn get_python_virtual_env(&self) -> &::std::option::Option<::std::string::String> {
        &self.python_virtual_env
    }
    /// <p>The worker type in the Spark Amazon Web Services Glue properties.</p>
    pub fn worker_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.worker_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The worker type in the Spark Amazon Web Services Glue properties.</p>
    pub fn set_worker_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.worker_type = input;
        self
    }
    /// <p>The worker type in the Spark Amazon Web Services Glue properties.</p>
    pub fn get_worker_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.worker_type
    }
    /// Consumes the builder and constructs a [`SparkGluePropertiesOutput`](crate::types::SparkGluePropertiesOutput).
    pub fn build(self) -> crate::types::SparkGluePropertiesOutput {
        crate::types::SparkGluePropertiesOutput {
            additional_args: self.additional_args,
            glue_connection_name: self.glue_connection_name,
            glue_version: self.glue_version,
            idle_timeout: self.idle_timeout,
            java_virtual_env: self.java_virtual_env,
            number_of_workers: self.number_of_workers,
            python_virtual_env: self.python_virtual_env,
            worker_type: self.worker_type,
        }
    }
}
