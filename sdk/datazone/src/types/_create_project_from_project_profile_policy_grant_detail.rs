// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies whether to create a project from project profile policy grant details.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateProjectFromProjectProfilePolicyGrantDetail {
    /// <p>Specifies whether to include child domain units when creating a project from project profile policy grant details</p>
    pub include_child_domain_units: ::std::option::Option<bool>,
    /// <p>Specifies project profiles when creating a project from project profile policy grant details</p>
    pub project_profiles: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CreateProjectFromProjectProfilePolicyGrantDetail {
    /// <p>Specifies whether to include child domain units when creating a project from project profile policy grant details</p>
    pub fn include_child_domain_units(&self) -> ::std::option::Option<bool> {
        self.include_child_domain_units
    }
    /// <p>Specifies project profiles when creating a project from project profile policy grant details</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.project_profiles.is_none()`.
    pub fn project_profiles(&self) -> &[::std::string::String] {
        self.project_profiles.as_deref().unwrap_or_default()
    }
}
impl CreateProjectFromProjectProfilePolicyGrantDetail {
    /// Creates a new builder-style object to manufacture [`CreateProjectFromProjectProfilePolicyGrantDetail`](crate::types::CreateProjectFromProjectProfilePolicyGrantDetail).
    pub fn builder() -> crate::types::builders::CreateProjectFromProjectProfilePolicyGrantDetailBuilder {
        crate::types::builders::CreateProjectFromProjectProfilePolicyGrantDetailBuilder::default()
    }
}

/// A builder for [`CreateProjectFromProjectProfilePolicyGrantDetail`](crate::types::CreateProjectFromProjectProfilePolicyGrantDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateProjectFromProjectProfilePolicyGrantDetailBuilder {
    pub(crate) include_child_domain_units: ::std::option::Option<bool>,
    pub(crate) project_profiles: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CreateProjectFromProjectProfilePolicyGrantDetailBuilder {
    /// <p>Specifies whether to include child domain units when creating a project from project profile policy grant details</p>
    pub fn include_child_domain_units(mut self, input: bool) -> Self {
        self.include_child_domain_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to include child domain units when creating a project from project profile policy grant details</p>
    pub fn set_include_child_domain_units(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_child_domain_units = input;
        self
    }
    /// <p>Specifies whether to include child domain units when creating a project from project profile policy grant details</p>
    pub fn get_include_child_domain_units(&self) -> &::std::option::Option<bool> {
        &self.include_child_domain_units
    }
    /// Appends an item to `project_profiles`.
    ///
    /// To override the contents of this collection use [`set_project_profiles`](Self::set_project_profiles).
    ///
    /// <p>Specifies project profiles when creating a project from project profile policy grant details</p>
    pub fn project_profiles(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.project_profiles.unwrap_or_default();
        v.push(input.into());
        self.project_profiles = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies project profiles when creating a project from project profile policy grant details</p>
    pub fn set_project_profiles(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.project_profiles = input;
        self
    }
    /// <p>Specifies project profiles when creating a project from project profile policy grant details</p>
    pub fn get_project_profiles(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.project_profiles
    }
    /// Consumes the builder and constructs a [`CreateProjectFromProjectProfilePolicyGrantDetail`](crate::types::CreateProjectFromProjectProfilePolicyGrantDetail).
    pub fn build(self) -> crate::types::CreateProjectFromProjectProfilePolicyGrantDetail {
        crate::types::CreateProjectFromProjectProfilePolicyGrantDetail {
            include_child_domain_units: self.include_child_domain_units,
            project_profiles: self.project_profiles,
        }
    }
}
