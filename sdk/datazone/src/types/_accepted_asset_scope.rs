// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The accepted asset scope.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AcceptedAssetScope {
    /// <p>The asset ID of the accepted asset scope.</p>
    pub asset_id: ::std::string::String,
    /// <p>The filter IDs of the accepted asset scope.</p>
    pub filter_ids: ::std::vec::Vec<::std::string::String>,
}
impl AcceptedAssetScope {
    /// <p>The asset ID of the accepted asset scope.</p>
    pub fn asset_id(&self) -> &str {
        use std::ops::Deref;
        self.asset_id.deref()
    }
    /// <p>The filter IDs of the accepted asset scope.</p>
    pub fn filter_ids(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.filter_ids.deref()
    }
}
impl AcceptedAssetScope {
    /// Creates a new builder-style object to manufacture [`AcceptedAssetScope`](crate::types::AcceptedAssetScope).
    pub fn builder() -> crate::types::builders::AcceptedAssetScopeBuilder {
        crate::types::builders::AcceptedAssetScopeBuilder::default()
    }
}

/// A builder for [`AcceptedAssetScope`](crate::types::AcceptedAssetScope).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AcceptedAssetScopeBuilder {
    pub(crate) asset_id: ::std::option::Option<::std::string::String>,
    pub(crate) filter_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AcceptedAssetScopeBuilder {
    /// <p>The asset ID of the accepted asset scope.</p>
    /// This field is required.
    pub fn asset_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The asset ID of the accepted asset scope.</p>
    pub fn set_asset_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_id = input;
        self
    }
    /// <p>The asset ID of the accepted asset scope.</p>
    pub fn get_asset_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_id
    }
    /// Appends an item to `filter_ids`.
    ///
    /// To override the contents of this collection use [`set_filter_ids`](Self::set_filter_ids).
    ///
    /// <p>The filter IDs of the accepted asset scope.</p>
    pub fn filter_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.filter_ids.unwrap_or_default();
        v.push(input.into());
        self.filter_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The filter IDs of the accepted asset scope.</p>
    pub fn set_filter_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.filter_ids = input;
        self
    }
    /// <p>The filter IDs of the accepted asset scope.</p>
    pub fn get_filter_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.filter_ids
    }
    /// Consumes the builder and constructs a [`AcceptedAssetScope`](crate::types::AcceptedAssetScope).
    /// This method will fail if any of the following fields are not set:
    /// - [`asset_id`](crate::types::builders::AcceptedAssetScopeBuilder::asset_id)
    /// - [`filter_ids`](crate::types::builders::AcceptedAssetScopeBuilder::filter_ids)
    pub fn build(self) -> ::std::result::Result<crate::types::AcceptedAssetScope, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AcceptedAssetScope {
            asset_id: self.asset_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "asset_id",
                    "asset_id was not specified but it is required when building AcceptedAssetScope",
                )
            })?,
            filter_ids: self.filter_ids.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "filter_ids",
                    "filter_ids was not specified but it is required when building AcceptedAssetScope",
                )
            })?,
        })
    }
}
