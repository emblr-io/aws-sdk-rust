// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The data product.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataProductItem {
    /// <p>The type of the data product.</p>
    pub item_type: crate::types::DataProductItemType,
    /// <p>The ID of the data product.</p>
    pub identifier: ::std::string::String,
    /// <p>The revision of the data product.</p>
    pub revision: ::std::option::Option<::std::string::String>,
    /// <p>The glossary terms of the data product.</p>
    pub glossary_terms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DataProductItem {
    /// <p>The type of the data product.</p>
    pub fn item_type(&self) -> &crate::types::DataProductItemType {
        &self.item_type
    }
    /// <p>The ID of the data product.</p>
    pub fn identifier(&self) -> &str {
        use std::ops::Deref;
        self.identifier.deref()
    }
    /// <p>The revision of the data product.</p>
    pub fn revision(&self) -> ::std::option::Option<&str> {
        self.revision.as_deref()
    }
    /// <p>The glossary terms of the data product.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.glossary_terms.is_none()`.
    pub fn glossary_terms(&self) -> &[::std::string::String] {
        self.glossary_terms.as_deref().unwrap_or_default()
    }
}
impl DataProductItem {
    /// Creates a new builder-style object to manufacture [`DataProductItem`](crate::types::DataProductItem).
    pub fn builder() -> crate::types::builders::DataProductItemBuilder {
        crate::types::builders::DataProductItemBuilder::default()
    }
}

/// A builder for [`DataProductItem`](crate::types::DataProductItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataProductItemBuilder {
    pub(crate) item_type: ::std::option::Option<crate::types::DataProductItemType>,
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) revision: ::std::option::Option<::std::string::String>,
    pub(crate) glossary_terms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DataProductItemBuilder {
    /// <p>The type of the data product.</p>
    /// This field is required.
    pub fn item_type(mut self, input: crate::types::DataProductItemType) -> Self {
        self.item_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the data product.</p>
    pub fn set_item_type(mut self, input: ::std::option::Option<crate::types::DataProductItemType>) -> Self {
        self.item_type = input;
        self
    }
    /// <p>The type of the data product.</p>
    pub fn get_item_type(&self) -> &::std::option::Option<crate::types::DataProductItemType> {
        &self.item_type
    }
    /// <p>The ID of the data product.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the data product.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The ID of the data product.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>The revision of the data product.</p>
    pub fn revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.revision = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The revision of the data product.</p>
    pub fn set_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.revision = input;
        self
    }
    /// <p>The revision of the data product.</p>
    pub fn get_revision(&self) -> &::std::option::Option<::std::string::String> {
        &self.revision
    }
    /// Appends an item to `glossary_terms`.
    ///
    /// To override the contents of this collection use [`set_glossary_terms`](Self::set_glossary_terms).
    ///
    /// <p>The glossary terms of the data product.</p>
    pub fn glossary_terms(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.glossary_terms.unwrap_or_default();
        v.push(input.into());
        self.glossary_terms = ::std::option::Option::Some(v);
        self
    }
    /// <p>The glossary terms of the data product.</p>
    pub fn set_glossary_terms(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.glossary_terms = input;
        self
    }
    /// <p>The glossary terms of the data product.</p>
    pub fn get_glossary_terms(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.glossary_terms
    }
    /// Consumes the builder and constructs a [`DataProductItem`](crate::types::DataProductItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`item_type`](crate::types::builders::DataProductItemBuilder::item_type)
    /// - [`identifier`](crate::types::builders::DataProductItemBuilder::identifier)
    pub fn build(self) -> ::std::result::Result<crate::types::DataProductItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataProductItem {
            item_type: self.item_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "item_type",
                    "item_type was not specified but it is required when building DataProductItem",
                )
            })?,
            identifier: self.identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "identifier",
                    "identifier was not specified but it is required when building DataProductItem",
                )
            })?,
            revision: self.revision,
            glossary_terms: self.glossary_terms,
        })
    }
}
