// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The domain unit filter of the project grant filter.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DomainUnitFilterForProject {
    /// <p>The domain unit ID to use in the filter.</p>
    pub domain_unit: ::std::string::String,
    /// <p>Specifies whether to include child domain units.</p>
    pub include_child_domain_units: bool,
}
impl DomainUnitFilterForProject {
    /// <p>The domain unit ID to use in the filter.</p>
    pub fn domain_unit(&self) -> &str {
        use std::ops::Deref;
        self.domain_unit.deref()
    }
    /// <p>Specifies whether to include child domain units.</p>
    pub fn include_child_domain_units(&self) -> bool {
        self.include_child_domain_units
    }
}
impl DomainUnitFilterForProject {
    /// Creates a new builder-style object to manufacture [`DomainUnitFilterForProject`](crate::types::DomainUnitFilterForProject).
    pub fn builder() -> crate::types::builders::DomainUnitFilterForProjectBuilder {
        crate::types::builders::DomainUnitFilterForProjectBuilder::default()
    }
}

/// A builder for [`DomainUnitFilterForProject`](crate::types::DomainUnitFilterForProject).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DomainUnitFilterForProjectBuilder {
    pub(crate) domain_unit: ::std::option::Option<::std::string::String>,
    pub(crate) include_child_domain_units: ::std::option::Option<bool>,
}
impl DomainUnitFilterForProjectBuilder {
    /// <p>The domain unit ID to use in the filter.</p>
    /// This field is required.
    pub fn domain_unit(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_unit = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain unit ID to use in the filter.</p>
    pub fn set_domain_unit(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_unit = input;
        self
    }
    /// <p>The domain unit ID to use in the filter.</p>
    pub fn get_domain_unit(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_unit
    }
    /// <p>Specifies whether to include child domain units.</p>
    pub fn include_child_domain_units(mut self, input: bool) -> Self {
        self.include_child_domain_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to include child domain units.</p>
    pub fn set_include_child_domain_units(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_child_domain_units = input;
        self
    }
    /// <p>Specifies whether to include child domain units.</p>
    pub fn get_include_child_domain_units(&self) -> &::std::option::Option<bool> {
        &self.include_child_domain_units
    }
    /// Consumes the builder and constructs a [`DomainUnitFilterForProject`](crate::types::DomainUnitFilterForProject).
    /// This method will fail if any of the following fields are not set:
    /// - [`domain_unit`](crate::types::builders::DomainUnitFilterForProjectBuilder::domain_unit)
    pub fn build(self) -> ::std::result::Result<crate::types::DomainUnitFilterForProject, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DomainUnitFilterForProject {
            domain_unit: self.domain_unit.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain_unit",
                    "domain_unit was not specified but it is required when building DomainUnitFilterForProject",
                )
            })?,
            include_child_domain_units: self.include_child_domain_units.unwrap_or_default(),
        })
    }
}
