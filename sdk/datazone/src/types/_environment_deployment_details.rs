// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The environment deployment details.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EnvironmentDeploymentDetails {
    /// <p>The overall deployment status of the environment.</p>
    pub overall_deployment_status: ::std::option::Option<crate::types::OverallDeploymentStatus>,
    /// <p>Environment failure reasons.</p>
    pub environment_failure_reasons:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::EnvironmentError>>>,
}
impl EnvironmentDeploymentDetails {
    /// <p>The overall deployment status of the environment.</p>
    pub fn overall_deployment_status(&self) -> ::std::option::Option<&crate::types::OverallDeploymentStatus> {
        self.overall_deployment_status.as_ref()
    }
    /// <p>Environment failure reasons.</p>
    pub fn environment_failure_reasons(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::EnvironmentError>>> {
        self.environment_failure_reasons.as_ref()
    }
}
impl EnvironmentDeploymentDetails {
    /// Creates a new builder-style object to manufacture [`EnvironmentDeploymentDetails`](crate::types::EnvironmentDeploymentDetails).
    pub fn builder() -> crate::types::builders::EnvironmentDeploymentDetailsBuilder {
        crate::types::builders::EnvironmentDeploymentDetailsBuilder::default()
    }
}

/// A builder for [`EnvironmentDeploymentDetails`](crate::types::EnvironmentDeploymentDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EnvironmentDeploymentDetailsBuilder {
    pub(crate) overall_deployment_status: ::std::option::Option<crate::types::OverallDeploymentStatus>,
    pub(crate) environment_failure_reasons:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::EnvironmentError>>>,
}
impl EnvironmentDeploymentDetailsBuilder {
    /// <p>The overall deployment status of the environment.</p>
    pub fn overall_deployment_status(mut self, input: crate::types::OverallDeploymentStatus) -> Self {
        self.overall_deployment_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The overall deployment status of the environment.</p>
    pub fn set_overall_deployment_status(mut self, input: ::std::option::Option<crate::types::OverallDeploymentStatus>) -> Self {
        self.overall_deployment_status = input;
        self
    }
    /// <p>The overall deployment status of the environment.</p>
    pub fn get_overall_deployment_status(&self) -> &::std::option::Option<crate::types::OverallDeploymentStatus> {
        &self.overall_deployment_status
    }
    /// Adds a key-value pair to `environment_failure_reasons`.
    ///
    /// To override the contents of this collection use [`set_environment_failure_reasons`](Self::set_environment_failure_reasons).
    ///
    /// <p>Environment failure reasons.</p>
    pub fn environment_failure_reasons(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: ::std::vec::Vec<crate::types::EnvironmentError>,
    ) -> Self {
        let mut hash_map = self.environment_failure_reasons.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.environment_failure_reasons = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Environment failure reasons.</p>
    pub fn set_environment_failure_reasons(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::EnvironmentError>>>,
    ) -> Self {
        self.environment_failure_reasons = input;
        self
    }
    /// <p>Environment failure reasons.</p>
    pub fn get_environment_failure_reasons(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::EnvironmentError>>> {
        &self.environment_failure_reasons
    }
    /// Consumes the builder and constructs a [`EnvironmentDeploymentDetails`](crate::types::EnvironmentDeploymentDetails).
    pub fn build(self) -> crate::types::EnvironmentDeploymentDetails {
        crate::types::EnvironmentDeploymentDetails {
            overall_deployment_status: self.overall_deployment_status,
            environment_failure_reasons: self.environment_failure_reasons,
        }
    }
}
