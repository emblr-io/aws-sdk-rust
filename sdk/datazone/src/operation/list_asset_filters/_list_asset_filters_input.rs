// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListAssetFiltersInput {
    /// <p>The ID of the domain where you want to list asset filters.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the data asset.</p>
    pub asset_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The status of the asset filter.</p>
    pub status: ::std::option::Option<crate::types::FilterStatus>,
    /// <p>When the number of asset filters is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of asset filters, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListAssetFilters</code> to list the next set of asset filters.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of asset filters to return in a single call to <code>ListAssetFilters</code>. When the number of asset filters to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListAssetFilters</code> to list the next set of asset filters.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListAssetFiltersInput {
    /// <p>The ID of the domain where you want to list asset filters.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The ID of the data asset.</p>
    pub fn asset_identifier(&self) -> ::std::option::Option<&str> {
        self.asset_identifier.as_deref()
    }
    /// <p>The status of the asset filter.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::FilterStatus> {
        self.status.as_ref()
    }
    /// <p>When the number of asset filters is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of asset filters, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListAssetFilters</code> to list the next set of asset filters.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of asset filters to return in a single call to <code>ListAssetFilters</code>. When the number of asset filters to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListAssetFilters</code> to list the next set of asset filters.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListAssetFiltersInput {
    /// Creates a new builder-style object to manufacture [`ListAssetFiltersInput`](crate::operation::list_asset_filters::ListAssetFiltersInput).
    pub fn builder() -> crate::operation::list_asset_filters::builders::ListAssetFiltersInputBuilder {
        crate::operation::list_asset_filters::builders::ListAssetFiltersInputBuilder::default()
    }
}

/// A builder for [`ListAssetFiltersInput`](crate::operation::list_asset_filters::ListAssetFiltersInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListAssetFiltersInputBuilder {
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) asset_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::FilterStatus>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListAssetFiltersInputBuilder {
    /// <p>The ID of the domain where you want to list asset filters.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain where you want to list asset filters.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The ID of the domain where you want to list asset filters.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The ID of the data asset.</p>
    /// This field is required.
    pub fn asset_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the data asset.</p>
    pub fn set_asset_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_identifier = input;
        self
    }
    /// <p>The ID of the data asset.</p>
    pub fn get_asset_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_identifier
    }
    /// <p>The status of the asset filter.</p>
    pub fn status(mut self, input: crate::types::FilterStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the asset filter.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::FilterStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the asset filter.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::FilterStatus> {
        &self.status
    }
    /// <p>When the number of asset filters is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of asset filters, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListAssetFilters</code> to list the next set of asset filters.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>When the number of asset filters is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of asset filters, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListAssetFilters</code> to list the next set of asset filters.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>When the number of asset filters is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of asset filters, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListAssetFilters</code> to list the next set of asset filters.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of asset filters to return in a single call to <code>ListAssetFilters</code>. When the number of asset filters to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListAssetFilters</code> to list the next set of asset filters.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of asset filters to return in a single call to <code>ListAssetFilters</code>. When the number of asset filters to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListAssetFilters</code> to list the next set of asset filters.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of asset filters to return in a single call to <code>ListAssetFilters</code>. When the number of asset filters to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListAssetFilters</code> to list the next set of asset filters.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListAssetFiltersInput`](crate::operation::list_asset_filters::ListAssetFiltersInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_asset_filters::ListAssetFiltersInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_asset_filters::ListAssetFiltersInput {
            domain_identifier: self.domain_identifier,
            asset_identifier: self.asset_identifier,
            status: self.status,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
