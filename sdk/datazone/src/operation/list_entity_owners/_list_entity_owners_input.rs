// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListEntityOwnersInput {
    /// <p>The ID of the domain where you want to list entity owners.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The type of the entity that you want to list.</p>
    pub entity_type: ::std::option::Option<crate::types::DataZoneEntityType>,
    /// <p>The ID of the entity that you want to list.</p>
    pub entity_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of entities to return in a single call to <code>ListEntityOwners</code>. When the number of entities to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListEntityOwners</code> to list the next set of entities.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>When the number of entities is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of entities, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListEntityOwners</code> to list the next set of entities.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListEntityOwnersInput {
    /// <p>The ID of the domain where you want to list entity owners.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The type of the entity that you want to list.</p>
    pub fn entity_type(&self) -> ::std::option::Option<&crate::types::DataZoneEntityType> {
        self.entity_type.as_ref()
    }
    /// <p>The ID of the entity that you want to list.</p>
    pub fn entity_identifier(&self) -> ::std::option::Option<&str> {
        self.entity_identifier.as_deref()
    }
    /// <p>The maximum number of entities to return in a single call to <code>ListEntityOwners</code>. When the number of entities to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListEntityOwners</code> to list the next set of entities.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>When the number of entities is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of entities, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListEntityOwners</code> to list the next set of entities.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListEntityOwnersInput {
    /// Creates a new builder-style object to manufacture [`ListEntityOwnersInput`](crate::operation::list_entity_owners::ListEntityOwnersInput).
    pub fn builder() -> crate::operation::list_entity_owners::builders::ListEntityOwnersInputBuilder {
        crate::operation::list_entity_owners::builders::ListEntityOwnersInputBuilder::default()
    }
}

/// A builder for [`ListEntityOwnersInput`](crate::operation::list_entity_owners::ListEntityOwnersInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListEntityOwnersInputBuilder {
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) entity_type: ::std::option::Option<crate::types::DataZoneEntityType>,
    pub(crate) entity_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListEntityOwnersInputBuilder {
    /// <p>The ID of the domain where you want to list entity owners.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain where you want to list entity owners.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The ID of the domain where you want to list entity owners.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The type of the entity that you want to list.</p>
    /// This field is required.
    pub fn entity_type(mut self, input: crate::types::DataZoneEntityType) -> Self {
        self.entity_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the entity that you want to list.</p>
    pub fn set_entity_type(mut self, input: ::std::option::Option<crate::types::DataZoneEntityType>) -> Self {
        self.entity_type = input;
        self
    }
    /// <p>The type of the entity that you want to list.</p>
    pub fn get_entity_type(&self) -> &::std::option::Option<crate::types::DataZoneEntityType> {
        &self.entity_type
    }
    /// <p>The ID of the entity that you want to list.</p>
    /// This field is required.
    pub fn entity_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the entity that you want to list.</p>
    pub fn set_entity_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_identifier = input;
        self
    }
    /// <p>The ID of the entity that you want to list.</p>
    pub fn get_entity_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_identifier
    }
    /// <p>The maximum number of entities to return in a single call to <code>ListEntityOwners</code>. When the number of entities to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListEntityOwners</code> to list the next set of entities.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of entities to return in a single call to <code>ListEntityOwners</code>. When the number of entities to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListEntityOwners</code> to list the next set of entities.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of entities to return in a single call to <code>ListEntityOwners</code>. When the number of entities to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListEntityOwners</code> to list the next set of entities.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>When the number of entities is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of entities, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListEntityOwners</code> to list the next set of entities.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>When the number of entities is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of entities, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListEntityOwners</code> to list the next set of entities.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>When the number of entities is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of entities, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListEntityOwners</code> to list the next set of entities.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListEntityOwnersInput`](crate::operation::list_entity_owners::ListEntityOwnersInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_entity_owners::ListEntityOwnersInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_entity_owners::ListEntityOwnersInput {
            domain_identifier: self.domain_identifier,
            entity_type: self.entity_type,
            entity_identifier: self.entity_identifier,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
