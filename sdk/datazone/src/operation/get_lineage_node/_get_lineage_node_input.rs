// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetLineageNodeInput {
    /// <p>The ID of the domain in which you want to get the data lineage node.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the data lineage node that you want to get.</p>
    /// <p>Both, a lineage node identifier generated by Amazon DataZone and a <code>sourceIdentifier</code> of the lineage node are supported. If <code>sourceIdentifier</code> is greater than 1800 characters, you can use lineage node identifier generated by Amazon DataZone to get the node details.</p>
    pub identifier: ::std::option::Option<::std::string::String>,
    /// <p>The event time stamp for which you want to get the data lineage node.</p>
    pub event_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl GetLineageNodeInput {
    /// <p>The ID of the domain in which you want to get the data lineage node.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The ID of the data lineage node that you want to get.</p>
    /// <p>Both, a lineage node identifier generated by Amazon DataZone and a <code>sourceIdentifier</code> of the lineage node are supported. If <code>sourceIdentifier</code> is greater than 1800 characters, you can use lineage node identifier generated by Amazon DataZone to get the node details.</p>
    pub fn identifier(&self) -> ::std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>The event time stamp for which you want to get the data lineage node.</p>
    pub fn event_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.event_timestamp.as_ref()
    }
}
impl GetLineageNodeInput {
    /// Creates a new builder-style object to manufacture [`GetLineageNodeInput`](crate::operation::get_lineage_node::GetLineageNodeInput).
    pub fn builder() -> crate::operation::get_lineage_node::builders::GetLineageNodeInputBuilder {
        crate::operation::get_lineage_node::builders::GetLineageNodeInputBuilder::default()
    }
}

/// A builder for [`GetLineageNodeInput`](crate::operation::get_lineage_node::GetLineageNodeInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetLineageNodeInputBuilder {
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) event_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl GetLineageNodeInputBuilder {
    /// <p>The ID of the domain in which you want to get the data lineage node.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain in which you want to get the data lineage node.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The ID of the domain in which you want to get the data lineage node.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The ID of the data lineage node that you want to get.</p>
    /// <p>Both, a lineage node identifier generated by Amazon DataZone and a <code>sourceIdentifier</code> of the lineage node are supported. If <code>sourceIdentifier</code> is greater than 1800 characters, you can use lineage node identifier generated by Amazon DataZone to get the node details.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the data lineage node that you want to get.</p>
    /// <p>Both, a lineage node identifier generated by Amazon DataZone and a <code>sourceIdentifier</code> of the lineage node are supported. If <code>sourceIdentifier</code> is greater than 1800 characters, you can use lineage node identifier generated by Amazon DataZone to get the node details.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The ID of the data lineage node that you want to get.</p>
    /// <p>Both, a lineage node identifier generated by Amazon DataZone and a <code>sourceIdentifier</code> of the lineage node are supported. If <code>sourceIdentifier</code> is greater than 1800 characters, you can use lineage node identifier generated by Amazon DataZone to get the node details.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>The event time stamp for which you want to get the data lineage node.</p>
    pub fn event_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.event_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The event time stamp for which you want to get the data lineage node.</p>
    pub fn set_event_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.event_timestamp = input;
        self
    }
    /// <p>The event time stamp for which you want to get the data lineage node.</p>
    pub fn get_event_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.event_timestamp
    }
    /// Consumes the builder and constructs a [`GetLineageNodeInput`](crate::operation::get_lineage_node::GetLineageNodeInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_lineage_node::GetLineageNodeInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_lineage_node::GetLineageNodeInput {
            domain_identifier: self.domain_identifier,
            identifier: self.identifier,
            event_timestamp: self.event_timestamp,
        })
    }
}
