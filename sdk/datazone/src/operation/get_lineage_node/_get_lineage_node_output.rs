// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetLineageNodeOutput {
    /// <p>The ID of the domain where you're getting the data lineage node.</p>
    pub domain_id: ::std::string::String,
    /// <p>The name of the data lineage node.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the data lineage node.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp at which the data lineage node was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The user who created the data lineage node.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp at which the data lineage node was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The user who updated the data lineage node.</p>
    pub updated_by: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the data lineage node.</p>
    pub id: ::std::string::String,
    /// <p>The name of the type of the specified data lineage node.</p>
    pub type_name: ::std::string::String,
    /// <p>The revision type of the specified data lineage node.</p>
    pub type_revision: ::std::option::Option<::std::string::String>,
    /// <p>The source identifier of the data lineage node.</p>
    pub source_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of the event described in the data lineage node.</p>
    pub event_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The metadata of the specified data lineage node.</p>
    pub forms_output: ::std::option::Option<::std::vec::Vec<crate::types::FormOutput>>,
    /// <p>The upstream nodes of the specified data lineage node.</p>
    pub upstream_nodes: ::std::option::Option<::std::vec::Vec<crate::types::LineageNodeReference>>,
    /// <p>The downsteam nodes of the specified data lineage node.</p>
    pub downstream_nodes: ::std::option::Option<::std::vec::Vec<crate::types::LineageNodeReference>>,
    _request_id: Option<String>,
}
impl GetLineageNodeOutput {
    /// <p>The ID of the domain where you're getting the data lineage node.</p>
    pub fn domain_id(&self) -> &str {
        use std::ops::Deref;
        self.domain_id.deref()
    }
    /// <p>The name of the data lineage node.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the data lineage node.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The timestamp at which the data lineage node was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The user who created the data lineage node.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The timestamp at which the data lineage node was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The user who updated the data lineage node.</p>
    pub fn updated_by(&self) -> ::std::option::Option<&str> {
        self.updated_by.as_deref()
    }
    /// <p>The ID of the data lineage node.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The name of the type of the specified data lineage node.</p>
    pub fn type_name(&self) -> &str {
        use std::ops::Deref;
        self.type_name.deref()
    }
    /// <p>The revision type of the specified data lineage node.</p>
    pub fn type_revision(&self) -> ::std::option::Option<&str> {
        self.type_revision.as_deref()
    }
    /// <p>The source identifier of the data lineage node.</p>
    pub fn source_identifier(&self) -> ::std::option::Option<&str> {
        self.source_identifier.as_deref()
    }
    /// <p>The timestamp of the event described in the data lineage node.</p>
    pub fn event_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.event_timestamp.as_ref()
    }
    /// <p>The metadata of the specified data lineage node.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.forms_output.is_none()`.
    pub fn forms_output(&self) -> &[crate::types::FormOutput] {
        self.forms_output.as_deref().unwrap_or_default()
    }
    /// <p>The upstream nodes of the specified data lineage node.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.upstream_nodes.is_none()`.
    pub fn upstream_nodes(&self) -> &[crate::types::LineageNodeReference] {
        self.upstream_nodes.as_deref().unwrap_or_default()
    }
    /// <p>The downsteam nodes of the specified data lineage node.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.downstream_nodes.is_none()`.
    pub fn downstream_nodes(&self) -> &[crate::types::LineageNodeReference] {
        self.downstream_nodes.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for GetLineageNodeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetLineageNodeOutput {
    /// Creates a new builder-style object to manufacture [`GetLineageNodeOutput`](crate::operation::get_lineage_node::GetLineageNodeOutput).
    pub fn builder() -> crate::operation::get_lineage_node::builders::GetLineageNodeOutputBuilder {
        crate::operation::get_lineage_node::builders::GetLineageNodeOutputBuilder::default()
    }
}

/// A builder for [`GetLineageNodeOutput`](crate::operation::get_lineage_node::GetLineageNodeOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetLineageNodeOutputBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_by: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) type_name: ::std::option::Option<::std::string::String>,
    pub(crate) type_revision: ::std::option::Option<::std::string::String>,
    pub(crate) source_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) event_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) forms_output: ::std::option::Option<::std::vec::Vec<crate::types::FormOutput>>,
    pub(crate) upstream_nodes: ::std::option::Option<::std::vec::Vec<crate::types::LineageNodeReference>>,
    pub(crate) downstream_nodes: ::std::option::Option<::std::vec::Vec<crate::types::LineageNodeReference>>,
    _request_id: Option<String>,
}
impl GetLineageNodeOutputBuilder {
    /// <p>The ID of the domain where you're getting the data lineage node.</p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain where you're getting the data lineage node.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The ID of the domain where you're getting the data lineage node.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The name of the data lineage node.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the data lineage node.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the data lineage node.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the data lineage node.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the data lineage node.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the data lineage node.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The timestamp at which the data lineage node was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which the data lineage node was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp at which the data lineage node was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The user who created the data lineage node.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user who created the data lineage node.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The user who created the data lineage node.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The timestamp at which the data lineage node was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which the data lineage node was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp at which the data lineage node was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The user who updated the data lineage node.</p>
    pub fn updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user who updated the data lineage node.</p>
    pub fn set_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_by = input;
        self
    }
    /// <p>The user who updated the data lineage node.</p>
    pub fn get_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_by
    }
    /// <p>The ID of the data lineage node.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the data lineage node.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the data lineage node.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the type of the specified data lineage node.</p>
    /// This field is required.
    pub fn type_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the type of the specified data lineage node.</p>
    pub fn set_type_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_name = input;
        self
    }
    /// <p>The name of the type of the specified data lineage node.</p>
    pub fn get_type_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_name
    }
    /// <p>The revision type of the specified data lineage node.</p>
    pub fn type_revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_revision = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The revision type of the specified data lineage node.</p>
    pub fn set_type_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_revision = input;
        self
    }
    /// <p>The revision type of the specified data lineage node.</p>
    pub fn get_type_revision(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_revision
    }
    /// <p>The source identifier of the data lineage node.</p>
    pub fn source_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source identifier of the data lineage node.</p>
    pub fn set_source_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_identifier = input;
        self
    }
    /// <p>The source identifier of the data lineage node.</p>
    pub fn get_source_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_identifier
    }
    /// <p>The timestamp of the event described in the data lineage node.</p>
    pub fn event_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.event_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of the event described in the data lineage node.</p>
    pub fn set_event_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.event_timestamp = input;
        self
    }
    /// <p>The timestamp of the event described in the data lineage node.</p>
    pub fn get_event_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.event_timestamp
    }
    /// Appends an item to `forms_output`.
    ///
    /// To override the contents of this collection use [`set_forms_output`](Self::set_forms_output).
    ///
    /// <p>The metadata of the specified data lineage node.</p>
    pub fn forms_output(mut self, input: crate::types::FormOutput) -> Self {
        let mut v = self.forms_output.unwrap_or_default();
        v.push(input);
        self.forms_output = ::std::option::Option::Some(v);
        self
    }
    /// <p>The metadata of the specified data lineage node.</p>
    pub fn set_forms_output(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FormOutput>>) -> Self {
        self.forms_output = input;
        self
    }
    /// <p>The metadata of the specified data lineage node.</p>
    pub fn get_forms_output(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FormOutput>> {
        &self.forms_output
    }
    /// Appends an item to `upstream_nodes`.
    ///
    /// To override the contents of this collection use [`set_upstream_nodes`](Self::set_upstream_nodes).
    ///
    /// <p>The upstream nodes of the specified data lineage node.</p>
    pub fn upstream_nodes(mut self, input: crate::types::LineageNodeReference) -> Self {
        let mut v = self.upstream_nodes.unwrap_or_default();
        v.push(input);
        self.upstream_nodes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The upstream nodes of the specified data lineage node.</p>
    pub fn set_upstream_nodes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LineageNodeReference>>) -> Self {
        self.upstream_nodes = input;
        self
    }
    /// <p>The upstream nodes of the specified data lineage node.</p>
    pub fn get_upstream_nodes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LineageNodeReference>> {
        &self.upstream_nodes
    }
    /// Appends an item to `downstream_nodes`.
    ///
    /// To override the contents of this collection use [`set_downstream_nodes`](Self::set_downstream_nodes).
    ///
    /// <p>The downsteam nodes of the specified data lineage node.</p>
    pub fn downstream_nodes(mut self, input: crate::types::LineageNodeReference) -> Self {
        let mut v = self.downstream_nodes.unwrap_or_default();
        v.push(input);
        self.downstream_nodes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The downsteam nodes of the specified data lineage node.</p>
    pub fn set_downstream_nodes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LineageNodeReference>>) -> Self {
        self.downstream_nodes = input;
        self
    }
    /// <p>The downsteam nodes of the specified data lineage node.</p>
    pub fn get_downstream_nodes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LineageNodeReference>> {
        &self.downstream_nodes
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetLineageNodeOutput`](crate::operation::get_lineage_node::GetLineageNodeOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`domain_id`](crate::operation::get_lineage_node::builders::GetLineageNodeOutputBuilder::domain_id)
    /// - [`id`](crate::operation::get_lineage_node::builders::GetLineageNodeOutputBuilder::id)
    /// - [`type_name`](crate::operation::get_lineage_node::builders::GetLineageNodeOutputBuilder::type_name)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_lineage_node::GetLineageNodeOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_lineage_node::GetLineageNodeOutput {
            domain_id: self.domain_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain_id",
                    "domain_id was not specified but it is required when building GetLineageNodeOutput",
                )
            })?,
            name: self.name,
            description: self.description,
            created_at: self.created_at,
            created_by: self.created_by,
            updated_at: self.updated_at,
            updated_by: self.updated_by,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building GetLineageNodeOutput",
                )
            })?,
            type_name: self.type_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "type_name",
                    "type_name was not specified but it is required when building GetLineageNodeOutput",
                )
            })?,
            type_revision: self.type_revision,
            source_identifier: self.source_identifier,
            event_timestamp: self.event_timestamp,
            forms_output: self.forms_output,
            upstream_nodes: self.upstream_nodes,
            downstream_nodes: self.downstream_nodes,
            _request_id: self._request_id,
        })
    }
}
