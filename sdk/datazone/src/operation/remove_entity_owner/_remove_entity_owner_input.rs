// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RemoveEntityOwnerInput {
    /// <p>The ID of the domain where you want to remove an owner from an entity.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The type of the entity from which you want to remove an owner.</p>
    pub entity_type: ::std::option::Option<crate::types::DataZoneEntityType>,
    /// <p>The ID of the entity from which you want to remove an owner.</p>
    pub entity_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The owner that you want to remove from an entity.</p>
    pub owner: ::std::option::Option<crate::types::OwnerProperties>,
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl RemoveEntityOwnerInput {
    /// <p>The ID of the domain where you want to remove an owner from an entity.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The type of the entity from which you want to remove an owner.</p>
    pub fn entity_type(&self) -> ::std::option::Option<&crate::types::DataZoneEntityType> {
        self.entity_type.as_ref()
    }
    /// <p>The ID of the entity from which you want to remove an owner.</p>
    pub fn entity_identifier(&self) -> ::std::option::Option<&str> {
        self.entity_identifier.as_deref()
    }
    /// <p>The owner that you want to remove from an entity.</p>
    pub fn owner(&self) -> ::std::option::Option<&crate::types::OwnerProperties> {
        self.owner.as_ref()
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl RemoveEntityOwnerInput {
    /// Creates a new builder-style object to manufacture [`RemoveEntityOwnerInput`](crate::operation::remove_entity_owner::RemoveEntityOwnerInput).
    pub fn builder() -> crate::operation::remove_entity_owner::builders::RemoveEntityOwnerInputBuilder {
        crate::operation::remove_entity_owner::builders::RemoveEntityOwnerInputBuilder::default()
    }
}

/// A builder for [`RemoveEntityOwnerInput`](crate::operation::remove_entity_owner::RemoveEntityOwnerInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RemoveEntityOwnerInputBuilder {
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) entity_type: ::std::option::Option<crate::types::DataZoneEntityType>,
    pub(crate) entity_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) owner: ::std::option::Option<crate::types::OwnerProperties>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl RemoveEntityOwnerInputBuilder {
    /// <p>The ID of the domain where you want to remove an owner from an entity.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain where you want to remove an owner from an entity.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The ID of the domain where you want to remove an owner from an entity.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The type of the entity from which you want to remove an owner.</p>
    /// This field is required.
    pub fn entity_type(mut self, input: crate::types::DataZoneEntityType) -> Self {
        self.entity_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the entity from which you want to remove an owner.</p>
    pub fn set_entity_type(mut self, input: ::std::option::Option<crate::types::DataZoneEntityType>) -> Self {
        self.entity_type = input;
        self
    }
    /// <p>The type of the entity from which you want to remove an owner.</p>
    pub fn get_entity_type(&self) -> &::std::option::Option<crate::types::DataZoneEntityType> {
        &self.entity_type
    }
    /// <p>The ID of the entity from which you want to remove an owner.</p>
    /// This field is required.
    pub fn entity_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the entity from which you want to remove an owner.</p>
    pub fn set_entity_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_identifier = input;
        self
    }
    /// <p>The ID of the entity from which you want to remove an owner.</p>
    pub fn get_entity_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_identifier
    }
    /// <p>The owner that you want to remove from an entity.</p>
    /// This field is required.
    pub fn owner(mut self, input: crate::types::OwnerProperties) -> Self {
        self.owner = ::std::option::Option::Some(input);
        self
    }
    /// <p>The owner that you want to remove from an entity.</p>
    pub fn set_owner(mut self, input: ::std::option::Option<crate::types::OwnerProperties>) -> Self {
        self.owner = input;
        self
    }
    /// <p>The owner that you want to remove from an entity.</p>
    pub fn get_owner(&self) -> &::std::option::Option<crate::types::OwnerProperties> {
        &self.owner
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`RemoveEntityOwnerInput`](crate::operation::remove_entity_owner::RemoveEntityOwnerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::remove_entity_owner::RemoveEntityOwnerInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::remove_entity_owner::RemoveEntityOwnerInput {
            domain_identifier: self.domain_identifier,
            entity_type: self.entity_type,
            entity_identifier: self.entity_identifier,
            owner: self.owner,
            client_token: self.client_token,
        })
    }
}
