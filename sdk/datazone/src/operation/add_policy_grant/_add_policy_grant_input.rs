// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AddPolicyGrantInput {
    /// <p>The ID of the domain where you want to add a policy grant.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The type of entity (resource) to which the grant is added.</p>
    pub entity_type: ::std::option::Option<crate::types::TargetEntityType>,
    /// <p>The ID of the entity (resource) to which you want to add a policy grant.</p>
    pub entity_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The type of policy that you want to grant.</p>
    pub policy_type: ::std::option::Option<crate::types::ManagedPolicyType>,
    /// <p>The principal to whom the permissions are granted.</p>
    pub principal: ::std::option::Option<crate::types::PolicyGrantPrincipal>,
    /// <p>The details of the policy grant.</p>
    pub detail: ::std::option::Option<crate::types::PolicyGrantDetail>,
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl AddPolicyGrantInput {
    /// <p>The ID of the domain where you want to add a policy grant.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The type of entity (resource) to which the grant is added.</p>
    pub fn entity_type(&self) -> ::std::option::Option<&crate::types::TargetEntityType> {
        self.entity_type.as_ref()
    }
    /// <p>The ID of the entity (resource) to which you want to add a policy grant.</p>
    pub fn entity_identifier(&self) -> ::std::option::Option<&str> {
        self.entity_identifier.as_deref()
    }
    /// <p>The type of policy that you want to grant.</p>
    pub fn policy_type(&self) -> ::std::option::Option<&crate::types::ManagedPolicyType> {
        self.policy_type.as_ref()
    }
    /// <p>The principal to whom the permissions are granted.</p>
    pub fn principal(&self) -> ::std::option::Option<&crate::types::PolicyGrantPrincipal> {
        self.principal.as_ref()
    }
    /// <p>The details of the policy grant.</p>
    pub fn detail(&self) -> ::std::option::Option<&crate::types::PolicyGrantDetail> {
        self.detail.as_ref()
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl AddPolicyGrantInput {
    /// Creates a new builder-style object to manufacture [`AddPolicyGrantInput`](crate::operation::add_policy_grant::AddPolicyGrantInput).
    pub fn builder() -> crate::operation::add_policy_grant::builders::AddPolicyGrantInputBuilder {
        crate::operation::add_policy_grant::builders::AddPolicyGrantInputBuilder::default()
    }
}

/// A builder for [`AddPolicyGrantInput`](crate::operation::add_policy_grant::AddPolicyGrantInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AddPolicyGrantInputBuilder {
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) entity_type: ::std::option::Option<crate::types::TargetEntityType>,
    pub(crate) entity_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) policy_type: ::std::option::Option<crate::types::ManagedPolicyType>,
    pub(crate) principal: ::std::option::Option<crate::types::PolicyGrantPrincipal>,
    pub(crate) detail: ::std::option::Option<crate::types::PolicyGrantDetail>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl AddPolicyGrantInputBuilder {
    /// <p>The ID of the domain where you want to add a policy grant.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain where you want to add a policy grant.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The ID of the domain where you want to add a policy grant.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The type of entity (resource) to which the grant is added.</p>
    /// This field is required.
    pub fn entity_type(mut self, input: crate::types::TargetEntityType) -> Self {
        self.entity_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of entity (resource) to which the grant is added.</p>
    pub fn set_entity_type(mut self, input: ::std::option::Option<crate::types::TargetEntityType>) -> Self {
        self.entity_type = input;
        self
    }
    /// <p>The type of entity (resource) to which the grant is added.</p>
    pub fn get_entity_type(&self) -> &::std::option::Option<crate::types::TargetEntityType> {
        &self.entity_type
    }
    /// <p>The ID of the entity (resource) to which you want to add a policy grant.</p>
    /// This field is required.
    pub fn entity_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the entity (resource) to which you want to add a policy grant.</p>
    pub fn set_entity_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_identifier = input;
        self
    }
    /// <p>The ID of the entity (resource) to which you want to add a policy grant.</p>
    pub fn get_entity_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_identifier
    }
    /// <p>The type of policy that you want to grant.</p>
    /// This field is required.
    pub fn policy_type(mut self, input: crate::types::ManagedPolicyType) -> Self {
        self.policy_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of policy that you want to grant.</p>
    pub fn set_policy_type(mut self, input: ::std::option::Option<crate::types::ManagedPolicyType>) -> Self {
        self.policy_type = input;
        self
    }
    /// <p>The type of policy that you want to grant.</p>
    pub fn get_policy_type(&self) -> &::std::option::Option<crate::types::ManagedPolicyType> {
        &self.policy_type
    }
    /// <p>The principal to whom the permissions are granted.</p>
    /// This field is required.
    pub fn principal(mut self, input: crate::types::PolicyGrantPrincipal) -> Self {
        self.principal = ::std::option::Option::Some(input);
        self
    }
    /// <p>The principal to whom the permissions are granted.</p>
    pub fn set_principal(mut self, input: ::std::option::Option<crate::types::PolicyGrantPrincipal>) -> Self {
        self.principal = input;
        self
    }
    /// <p>The principal to whom the permissions are granted.</p>
    pub fn get_principal(&self) -> &::std::option::Option<crate::types::PolicyGrantPrincipal> {
        &self.principal
    }
    /// <p>The details of the policy grant.</p>
    /// This field is required.
    pub fn detail(mut self, input: crate::types::PolicyGrantDetail) -> Self {
        self.detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the policy grant.</p>
    pub fn set_detail(mut self, input: ::std::option::Option<crate::types::PolicyGrantDetail>) -> Self {
        self.detail = input;
        self
    }
    /// <p>The details of the policy grant.</p>
    pub fn get_detail(&self) -> &::std::option::Option<crate::types::PolicyGrantDetail> {
        &self.detail
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`AddPolicyGrantInput`](crate::operation::add_policy_grant::AddPolicyGrantInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::add_policy_grant::AddPolicyGrantInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::add_policy_grant::AddPolicyGrantInput {
            domain_identifier: self.domain_identifier,
            entity_type: self.entity_type,
            entity_identifier: self.entity_identifier,
            policy_type: self.policy_type,
            principal: self.principal,
            detail: self.detail,
            client_token: self.client_token,
        })
    }
}
