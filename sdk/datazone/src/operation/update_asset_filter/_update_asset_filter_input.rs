// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateAssetFilterInput {
    /// <p>The ID of the domain where you want to update an asset filter.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the data asset.</p>
    pub asset_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the asset filter.</p>
    pub identifier: ::std::option::Option<::std::string::String>,
    /// <p>The name of the asset filter.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the asset filter.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The configuration of the asset filter.</p>
    pub configuration: ::std::option::Option<crate::types::AssetFilterConfiguration>,
}
impl UpdateAssetFilterInput {
    /// <p>The ID of the domain where you want to update an asset filter.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The ID of the data asset.</p>
    pub fn asset_identifier(&self) -> ::std::option::Option<&str> {
        self.asset_identifier.as_deref()
    }
    /// <p>The ID of the asset filter.</p>
    pub fn identifier(&self) -> ::std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>The name of the asset filter.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the asset filter.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The configuration of the asset filter.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::AssetFilterConfiguration> {
        self.configuration.as_ref()
    }
}
impl ::std::fmt::Debug for UpdateAssetFilterInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAssetFilterInput");
        formatter.field("domain_identifier", &self.domain_identifier);
        formatter.field("asset_identifier", &self.asset_identifier);
        formatter.field("identifier", &self.identifier);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("configuration", &self.configuration);
        formatter.finish()
    }
}
impl UpdateAssetFilterInput {
    /// Creates a new builder-style object to manufacture [`UpdateAssetFilterInput`](crate::operation::update_asset_filter::UpdateAssetFilterInput).
    pub fn builder() -> crate::operation::update_asset_filter::builders::UpdateAssetFilterInputBuilder {
        crate::operation::update_asset_filter::builders::UpdateAssetFilterInputBuilder::default()
    }
}

/// A builder for [`UpdateAssetFilterInput`](crate::operation::update_asset_filter::UpdateAssetFilterInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateAssetFilterInputBuilder {
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) asset_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) configuration: ::std::option::Option<crate::types::AssetFilterConfiguration>,
}
impl UpdateAssetFilterInputBuilder {
    /// <p>The ID of the domain where you want to update an asset filter.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain where you want to update an asset filter.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The ID of the domain where you want to update an asset filter.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The ID of the data asset.</p>
    /// This field is required.
    pub fn asset_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the data asset.</p>
    pub fn set_asset_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_identifier = input;
        self
    }
    /// <p>The ID of the data asset.</p>
    pub fn get_asset_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_identifier
    }
    /// <p>The ID of the asset filter.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the asset filter.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The ID of the asset filter.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>The name of the asset filter.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the asset filter.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the asset filter.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the asset filter.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the asset filter.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the asset filter.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The configuration of the asset filter.</p>
    pub fn configuration(mut self, input: crate::types::AssetFilterConfiguration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the asset filter.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::AssetFilterConfiguration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>The configuration of the asset filter.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::AssetFilterConfiguration> {
        &self.configuration
    }
    /// Consumes the builder and constructs a [`UpdateAssetFilterInput`](crate::operation::update_asset_filter::UpdateAssetFilterInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_asset_filter::UpdateAssetFilterInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_asset_filter::UpdateAssetFilterInput {
            domain_identifier: self.domain_identifier,
            asset_identifier: self.asset_identifier,
            identifier: self.identifier,
            name: self.name,
            description: self.description,
            configuration: self.configuration,
        })
    }
}
impl ::std::fmt::Debug for UpdateAssetFilterInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAssetFilterInputBuilder");
        formatter.field("domain_identifier", &self.domain_identifier);
        formatter.field("asset_identifier", &self.asset_identifier);
        formatter.field("identifier", &self.identifier);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("configuration", &self.configuration);
        formatter.finish()
    }
}
