// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateProjectProfileInput {
    /// <p>A domain ID of the project profile.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Project profile name.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description of a project profile.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Project profile status.</p>
    pub status: ::std::option::Option<crate::types::Status>,
    /// <p>Environment configurations of the project profile.</p>
    pub environment_configurations: ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentConfiguration>>,
    /// <p>A domain unit ID of the project profile.</p>
    pub domain_unit_identifier: ::std::option::Option<::std::string::String>,
}
impl CreateProjectProfileInput {
    /// <p>A domain ID of the project profile.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>Project profile name.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of a project profile.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Project profile status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
    /// <p>Environment configurations of the project profile.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.environment_configurations.is_none()`.
    pub fn environment_configurations(&self) -> &[crate::types::EnvironmentConfiguration] {
        self.environment_configurations.as_deref().unwrap_or_default()
    }
    /// <p>A domain unit ID of the project profile.</p>
    pub fn domain_unit_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_unit_identifier.as_deref()
    }
}
impl ::std::fmt::Debug for CreateProjectProfileInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateProjectProfileInput");
        formatter.field("domain_identifier", &self.domain_identifier);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("environment_configurations", &self.environment_configurations);
        formatter.field("domain_unit_identifier", &self.domain_unit_identifier);
        formatter.finish()
    }
}
impl CreateProjectProfileInput {
    /// Creates a new builder-style object to manufacture [`CreateProjectProfileInput`](crate::operation::create_project_profile::CreateProjectProfileInput).
    pub fn builder() -> crate::operation::create_project_profile::builders::CreateProjectProfileInputBuilder {
        crate::operation::create_project_profile::builders::CreateProjectProfileInputBuilder::default()
    }
}

/// A builder for [`CreateProjectProfileInput`](crate::operation::create_project_profile::CreateProjectProfileInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateProjectProfileInputBuilder {
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::Status>,
    pub(crate) environment_configurations: ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentConfiguration>>,
    pub(crate) domain_unit_identifier: ::std::option::Option<::std::string::String>,
}
impl CreateProjectProfileInputBuilder {
    /// <p>A domain ID of the project profile.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A domain ID of the project profile.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>A domain ID of the project profile.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>Project profile name.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Project profile name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Project profile name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of a project profile.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of a project profile.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of a project profile.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Project profile status.</p>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Project profile status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>Project profile status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::Status> {
        &self.status
    }
    /// Appends an item to `environment_configurations`.
    ///
    /// To override the contents of this collection use [`set_environment_configurations`](Self::set_environment_configurations).
    ///
    /// <p>Environment configurations of the project profile.</p>
    pub fn environment_configurations(mut self, input: crate::types::EnvironmentConfiguration) -> Self {
        let mut v = self.environment_configurations.unwrap_or_default();
        v.push(input);
        self.environment_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Environment configurations of the project profile.</p>
    pub fn set_environment_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentConfiguration>>) -> Self {
        self.environment_configurations = input;
        self
    }
    /// <p>Environment configurations of the project profile.</p>
    pub fn get_environment_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EnvironmentConfiguration>> {
        &self.environment_configurations
    }
    /// <p>A domain unit ID of the project profile.</p>
    pub fn domain_unit_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_unit_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A domain unit ID of the project profile.</p>
    pub fn set_domain_unit_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_unit_identifier = input;
        self
    }
    /// <p>A domain unit ID of the project profile.</p>
    pub fn get_domain_unit_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_unit_identifier
    }
    /// Consumes the builder and constructs a [`CreateProjectProfileInput`](crate::operation::create_project_profile::CreateProjectProfileInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_project_profile::CreateProjectProfileInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_project_profile::CreateProjectProfileInput {
            domain_identifier: self.domain_identifier,
            name: self.name,
            description: self.description,
            status: self.status,
            environment_configurations: self.environment_configurations,
            domain_unit_identifier: self.domain_unit_identifier,
        })
    }
}
impl ::std::fmt::Debug for CreateProjectProfileInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateProjectProfileInputBuilder");
        formatter.field("domain_identifier", &self.domain_identifier);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("environment_configurations", &self.environment_configurations);
        formatter.field("domain_unit_identifier", &self.domain_unit_identifier);
        formatter.finish()
    }
}
