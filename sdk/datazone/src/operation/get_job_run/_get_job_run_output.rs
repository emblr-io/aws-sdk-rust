// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetJobRunOutput {
    /// <p>The ID of the domain.</p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the job run.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the job run.</p>
    pub job_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of the job run.</p>
    pub job_type: ::std::option::Option<crate::types::JobType>,
    /// <p>The mode of the job run.</p>
    pub run_mode: ::std::option::Option<crate::types::JobRunMode>,
    /// <p>The details of the job run.</p>
    pub details: ::std::option::Option<crate::types::JobRunDetails>,
    /// <p>The status of the job run.</p>
    pub status: ::std::option::Option<crate::types::JobRunStatus>,
    /// <p>The error generated if the action is not completed successfully.</p>
    pub error: ::std::option::Option<crate::types::JobRunError>,
    /// <p>The user who created the job run.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of when the job run was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of when the job run started.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of when the job run ended.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetJobRunOutput {
    /// <p>The ID of the domain.</p>
    pub fn domain_id(&self) -> ::std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The ID of the job run.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ID of the job run.</p>
    pub fn job_id(&self) -> ::std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The type of the job run.</p>
    pub fn job_type(&self) -> ::std::option::Option<&crate::types::JobType> {
        self.job_type.as_ref()
    }
    /// <p>The mode of the job run.</p>
    pub fn run_mode(&self) -> ::std::option::Option<&crate::types::JobRunMode> {
        self.run_mode.as_ref()
    }
    /// <p>The details of the job run.</p>
    pub fn details(&self) -> ::std::option::Option<&crate::types::JobRunDetails> {
        self.details.as_ref()
    }
    /// <p>The status of the job run.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::JobRunStatus> {
        self.status.as_ref()
    }
    /// <p>The error generated if the action is not completed successfully.</p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::JobRunError> {
        self.error.as_ref()
    }
    /// <p>The user who created the job run.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The timestamp of when the job run was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp of when the job run started.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The timestamp of when the job run ended.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetJobRunOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetJobRunOutput {
    /// Creates a new builder-style object to manufacture [`GetJobRunOutput`](crate::operation::get_job_run::GetJobRunOutput).
    pub fn builder() -> crate::operation::get_job_run::builders::GetJobRunOutputBuilder {
        crate::operation::get_job_run::builders::GetJobRunOutputBuilder::default()
    }
}

/// A builder for [`GetJobRunOutput`](crate::operation::get_job_run::GetJobRunOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetJobRunOutputBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) job_type: ::std::option::Option<crate::types::JobType>,
    pub(crate) run_mode: ::std::option::Option<crate::types::JobRunMode>,
    pub(crate) details: ::std::option::Option<crate::types::JobRunDetails>,
    pub(crate) status: ::std::option::Option<crate::types::JobRunStatus>,
    pub(crate) error: ::std::option::Option<crate::types::JobRunError>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetJobRunOutputBuilder {
    /// <p>The ID of the domain.</p>
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The ID of the domain.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The ID of the job run.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the job run.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the job run.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ID of the job run.</p>
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the job run.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The ID of the job run.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>The type of the job run.</p>
    pub fn job_type(mut self, input: crate::types::JobType) -> Self {
        self.job_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the job run.</p>
    pub fn set_job_type(mut self, input: ::std::option::Option<crate::types::JobType>) -> Self {
        self.job_type = input;
        self
    }
    /// <p>The type of the job run.</p>
    pub fn get_job_type(&self) -> &::std::option::Option<crate::types::JobType> {
        &self.job_type
    }
    /// <p>The mode of the job run.</p>
    pub fn run_mode(mut self, input: crate::types::JobRunMode) -> Self {
        self.run_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The mode of the job run.</p>
    pub fn set_run_mode(mut self, input: ::std::option::Option<crate::types::JobRunMode>) -> Self {
        self.run_mode = input;
        self
    }
    /// <p>The mode of the job run.</p>
    pub fn get_run_mode(&self) -> &::std::option::Option<crate::types::JobRunMode> {
        &self.run_mode
    }
    /// <p>The details of the job run.</p>
    pub fn details(mut self, input: crate::types::JobRunDetails) -> Self {
        self.details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the job run.</p>
    pub fn set_details(mut self, input: ::std::option::Option<crate::types::JobRunDetails>) -> Self {
        self.details = input;
        self
    }
    /// <p>The details of the job run.</p>
    pub fn get_details(&self) -> &::std::option::Option<crate::types::JobRunDetails> {
        &self.details
    }
    /// <p>The status of the job run.</p>
    pub fn status(mut self, input: crate::types::JobRunStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the job run.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::JobRunStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the job run.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::JobRunStatus> {
        &self.status
    }
    /// <p>The error generated if the action is not completed successfully.</p>
    pub fn error(mut self, input: crate::types::JobRunError) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>The error generated if the action is not completed successfully.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::JobRunError>) -> Self {
        self.error = input;
        self
    }
    /// <p>The error generated if the action is not completed successfully.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::JobRunError> {
        &self.error
    }
    /// <p>The user who created the job run.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user who created the job run.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The user who created the job run.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The timestamp of when the job run was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the job run was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when the job run was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp of when the job run started.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the job run started.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The timestamp of when the job run started.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The timestamp of when the job run ended.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the job run ended.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The timestamp of when the job run ended.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetJobRunOutput`](crate::operation::get_job_run::GetJobRunOutput).
    pub fn build(self) -> crate::operation::get_job_run::GetJobRunOutput {
        crate::operation::get_job_run::GetJobRunOutput {
            domain_id: self.domain_id,
            id: self.id,
            job_id: self.job_id,
            job_type: self.job_type,
            run_mode: self.run_mode,
            details: self.details,
            status: self.status,
            error: self.error,
            created_by: self.created_by,
            created_at: self.created_at,
            start_time: self.start_time,
            end_time: self.end_time,
            _request_id: self._request_id,
        }
    }
}
