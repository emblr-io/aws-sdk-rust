// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListLineageEventsInput {
    /// <p>The ID of the domain where you want to list lineage events.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of lineage events to return in a single call to ListLineageEvents. When the number of lineage events to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListLineageEvents to list the next set of lineage events.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The after timestamp of a lineage event.</p>
    pub timestamp_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The before timestamp of a lineage event.</p>
    pub timestamp_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The processing status of a lineage event.</p>
    pub processing_status: ::std::option::Option<crate::types::LineageEventProcessingStatus>,
    /// <p>The sort order of the lineage events.</p>
    pub sort_order: ::std::option::Option<crate::types::SortOrder>,
    /// <p>When the number of lineage events is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of lineage events, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListLineageEvents to list the next set of lineage events.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListLineageEventsInput {
    /// <p>The ID of the domain where you want to list lineage events.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The maximum number of lineage events to return in a single call to ListLineageEvents. When the number of lineage events to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListLineageEvents to list the next set of lineage events.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The after timestamp of a lineage event.</p>
    pub fn timestamp_after(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.timestamp_after.as_ref()
    }
    /// <p>The before timestamp of a lineage event.</p>
    pub fn timestamp_before(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.timestamp_before.as_ref()
    }
    /// <p>The processing status of a lineage event.</p>
    pub fn processing_status(&self) -> ::std::option::Option<&crate::types::LineageEventProcessingStatus> {
        self.processing_status.as_ref()
    }
    /// <p>The sort order of the lineage events.</p>
    pub fn sort_order(&self) -> ::std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
    /// <p>When the number of lineage events is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of lineage events, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListLineageEvents to list the next set of lineage events.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListLineageEventsInput {
    /// Creates a new builder-style object to manufacture [`ListLineageEventsInput`](crate::operation::list_lineage_events::ListLineageEventsInput).
    pub fn builder() -> crate::operation::list_lineage_events::builders::ListLineageEventsInputBuilder {
        crate::operation::list_lineage_events::builders::ListLineageEventsInputBuilder::default()
    }
}

/// A builder for [`ListLineageEventsInput`](crate::operation::list_lineage_events::ListLineageEventsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListLineageEventsInputBuilder {
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) timestamp_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) timestamp_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) processing_status: ::std::option::Option<crate::types::LineageEventProcessingStatus>,
    pub(crate) sort_order: ::std::option::Option<crate::types::SortOrder>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListLineageEventsInputBuilder {
    /// <p>The ID of the domain where you want to list lineage events.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain where you want to list lineage events.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The ID of the domain where you want to list lineage events.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The maximum number of lineage events to return in a single call to ListLineageEvents. When the number of lineage events to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListLineageEvents to list the next set of lineage events.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of lineage events to return in a single call to ListLineageEvents. When the number of lineage events to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListLineageEvents to list the next set of lineage events.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of lineage events to return in a single call to ListLineageEvents. When the number of lineage events to be listed is greater than the value of MaxResults, the response contains a NextToken value that you can use in a subsequent call to ListLineageEvents to list the next set of lineage events.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The after timestamp of a lineage event.</p>
    pub fn timestamp_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp_after = ::std::option::Option::Some(input);
        self
    }
    /// <p>The after timestamp of a lineage event.</p>
    pub fn set_timestamp_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp_after = input;
        self
    }
    /// <p>The after timestamp of a lineage event.</p>
    pub fn get_timestamp_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp_after
    }
    /// <p>The before timestamp of a lineage event.</p>
    pub fn timestamp_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp_before = ::std::option::Option::Some(input);
        self
    }
    /// <p>The before timestamp of a lineage event.</p>
    pub fn set_timestamp_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp_before = input;
        self
    }
    /// <p>The before timestamp of a lineage event.</p>
    pub fn get_timestamp_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp_before
    }
    /// <p>The processing status of a lineage event.</p>
    pub fn processing_status(mut self, input: crate::types::LineageEventProcessingStatus) -> Self {
        self.processing_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The processing status of a lineage event.</p>
    pub fn set_processing_status(mut self, input: ::std::option::Option<crate::types::LineageEventProcessingStatus>) -> Self {
        self.processing_status = input;
        self
    }
    /// <p>The processing status of a lineage event.</p>
    pub fn get_processing_status(&self) -> &::std::option::Option<crate::types::LineageEventProcessingStatus> {
        &self.processing_status
    }
    /// <p>The sort order of the lineage events.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sort order of the lineage events.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The sort order of the lineage events.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortOrder> {
        &self.sort_order
    }
    /// <p>When the number of lineage events is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of lineage events, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListLineageEvents to list the next set of lineage events.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>When the number of lineage events is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of lineage events, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListLineageEvents to list the next set of lineage events.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>When the number of lineage events is greater than the default value for the MaxResults parameter, or if you explicitly specify a value for MaxResults that is less than the number of lineage events, the response includes a pagination token named NextToken. You can specify this NextToken value in a subsequent call to ListLineageEvents to list the next set of lineage events.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListLineageEventsInput`](crate::operation::list_lineage_events::ListLineageEventsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_lineage_events::ListLineageEventsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_lineage_events::ListLineageEventsInput {
            domain_identifier: self.domain_identifier,
            max_results: self.max_results,
            timestamp_after: self.timestamp_after,
            timestamp_before: self.timestamp_before,
            processing_status: self.processing_status,
            sort_order: self.sort_order,
            next_token: self.next_token,
        })
    }
}
