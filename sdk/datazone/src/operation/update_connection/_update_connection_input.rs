// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateConnectionInput {
    /// <p>The ID of the domain where a connection is to be updated.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the connection to be updated.</p>
    pub identifier: ::std::option::Option<::std::string::String>,
    /// <p>The description of a connection.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The location where a connection is to be updated.</p>
    pub aws_location: ::std::option::Option<crate::types::AwsLocation>,
    /// <p>The connection props.</p>
    pub props: ::std::option::Option<crate::types::ConnectionPropertiesPatch>,
}
impl UpdateConnectionInput {
    /// <p>The ID of the domain where a connection is to be updated.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The ID of the connection to be updated.</p>
    pub fn identifier(&self) -> ::std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>The description of a connection.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The location where a connection is to be updated.</p>
    pub fn aws_location(&self) -> ::std::option::Option<&crate::types::AwsLocation> {
        self.aws_location.as_ref()
    }
    /// <p>The connection props.</p>
    pub fn props(&self) -> ::std::option::Option<&crate::types::ConnectionPropertiesPatch> {
        self.props.as_ref()
    }
}
impl ::std::fmt::Debug for UpdateConnectionInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateConnectionInput");
        formatter.field("domain_identifier", &self.domain_identifier);
        formatter.field("identifier", &self.identifier);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("aws_location", &self.aws_location);
        formatter.field("props", &self.props);
        formatter.finish()
    }
}
impl UpdateConnectionInput {
    /// Creates a new builder-style object to manufacture [`UpdateConnectionInput`](crate::operation::update_connection::UpdateConnectionInput).
    pub fn builder() -> crate::operation::update_connection::builders::UpdateConnectionInputBuilder {
        crate::operation::update_connection::builders::UpdateConnectionInputBuilder::default()
    }
}

/// A builder for [`UpdateConnectionInput`](crate::operation::update_connection::UpdateConnectionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateConnectionInputBuilder {
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) aws_location: ::std::option::Option<crate::types::AwsLocation>,
    pub(crate) props: ::std::option::Option<crate::types::ConnectionPropertiesPatch>,
}
impl UpdateConnectionInputBuilder {
    /// <p>The ID of the domain where a connection is to be updated.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain where a connection is to be updated.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The ID of the domain where a connection is to be updated.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The ID of the connection to be updated.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the connection to be updated.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The ID of the connection to be updated.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>The description of a connection.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of a connection.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of a connection.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The location where a connection is to be updated.</p>
    pub fn aws_location(mut self, input: crate::types::AwsLocation) -> Self {
        self.aws_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The location where a connection is to be updated.</p>
    pub fn set_aws_location(mut self, input: ::std::option::Option<crate::types::AwsLocation>) -> Self {
        self.aws_location = input;
        self
    }
    /// <p>The location where a connection is to be updated.</p>
    pub fn get_aws_location(&self) -> &::std::option::Option<crate::types::AwsLocation> {
        &self.aws_location
    }
    /// <p>The connection props.</p>
    pub fn props(mut self, input: crate::types::ConnectionPropertiesPatch) -> Self {
        self.props = ::std::option::Option::Some(input);
        self
    }
    /// <p>The connection props.</p>
    pub fn set_props(mut self, input: ::std::option::Option<crate::types::ConnectionPropertiesPatch>) -> Self {
        self.props = input;
        self
    }
    /// <p>The connection props.</p>
    pub fn get_props(&self) -> &::std::option::Option<crate::types::ConnectionPropertiesPatch> {
        &self.props
    }
    /// Consumes the builder and constructs a [`UpdateConnectionInput`](crate::operation::update_connection::UpdateConnectionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_connection::UpdateConnectionInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_connection::UpdateConnectionInput {
            domain_identifier: self.domain_identifier,
            identifier: self.identifier,
            description: self.description,
            aws_location: self.aws_location,
            props: self.props,
        })
    }
}
impl ::std::fmt::Debug for UpdateConnectionInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateConnectionInputBuilder");
        formatter.field("domain_identifier", &self.domain_identifier);
        formatter.field("identifier", &self.identifier);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("aws_location", &self.aws_location);
        formatter.field("props", &self.props);
        formatter.finish()
    }
}
