// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetLineageEventOutput {
    /// <p>The ID of the domain.</p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the lineage event.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The lineage event details.</p>
    pub event: ::std::option::Option<::aws_smithy_types::Blob>,
    /// <p>The user who created the lineage event.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>The progressing status of the lineage event.</p>
    pub processing_status: ::std::option::Option<crate::types::LineageEventProcessingStatus>,
    /// <p>The time of the lineage event.</p>
    pub event_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of when the lineage event was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetLineageEventOutput {
    /// <p>The ID of the domain.</p>
    pub fn domain_id(&self) -> ::std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The ID of the lineage event.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The lineage event details.</p>
    pub fn event(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.event.as_ref()
    }
    /// <p>The user who created the lineage event.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The progressing status of the lineage event.</p>
    pub fn processing_status(&self) -> ::std::option::Option<&crate::types::LineageEventProcessingStatus> {
        self.processing_status.as_ref()
    }
    /// <p>The time of the lineage event.</p>
    pub fn event_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.event_time.as_ref()
    }
    /// <p>The timestamp of when the lineage event was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
}
impl ::std::fmt::Debug for GetLineageEventOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetLineageEventOutput");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("id", &self.id);
        formatter.field("event", &"*** Sensitive Data Redacted ***");
        formatter.field("created_by", &self.created_by);
        formatter.field("processing_status", &self.processing_status);
        formatter.field("event_time", &self.event_time);
        formatter.field("created_at", &self.created_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetLineageEventOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetLineageEventOutput {
    /// Creates a new builder-style object to manufacture [`GetLineageEventOutput`](crate::operation::get_lineage_event::GetLineageEventOutput).
    pub fn builder() -> crate::operation::get_lineage_event::builders::GetLineageEventOutputBuilder {
        crate::operation::get_lineage_event::builders::GetLineageEventOutputBuilder::default()
    }
}

/// A builder for [`GetLineageEventOutput`](crate::operation::get_lineage_event::GetLineageEventOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetLineageEventOutputBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) event: ::std::option::Option<::aws_smithy_types::Blob>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) processing_status: ::std::option::Option<crate::types::LineageEventProcessingStatus>,
    pub(crate) event_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetLineageEventOutputBuilder {
    /// <p>The ID of the domain.</p>
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The ID of the domain.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The ID of the lineage event.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the lineage event.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the lineage event.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The lineage event details.</p>
    pub fn event(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.event = ::std::option::Option::Some(input);
        self
    }
    /// <p>The lineage event details.</p>
    pub fn set_event(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.event = input;
        self
    }
    /// <p>The lineage event details.</p>
    pub fn get_event(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.event
    }
    /// <p>The user who created the lineage event.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user who created the lineage event.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The user who created the lineage event.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The progressing status of the lineage event.</p>
    pub fn processing_status(mut self, input: crate::types::LineageEventProcessingStatus) -> Self {
        self.processing_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The progressing status of the lineage event.</p>
    pub fn set_processing_status(mut self, input: ::std::option::Option<crate::types::LineageEventProcessingStatus>) -> Self {
        self.processing_status = input;
        self
    }
    /// <p>The progressing status of the lineage event.</p>
    pub fn get_processing_status(&self) -> &::std::option::Option<crate::types::LineageEventProcessingStatus> {
        &self.processing_status
    }
    /// <p>The time of the lineage event.</p>
    pub fn event_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.event_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time of the lineage event.</p>
    pub fn set_event_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.event_time = input;
        self
    }
    /// <p>The time of the lineage event.</p>
    pub fn get_event_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.event_time
    }
    /// <p>The timestamp of when the lineage event was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the lineage event was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when the lineage event was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetLineageEventOutput`](crate::operation::get_lineage_event::GetLineageEventOutput).
    pub fn build(self) -> crate::operation::get_lineage_event::GetLineageEventOutput {
        crate::operation::get_lineage_event::GetLineageEventOutput {
            domain_id: self.domain_id,
            id: self.id,
            event: self.event,
            created_by: self.created_by,
            processing_status: self.processing_status,
            event_time: self.event_time,
            created_at: self.created_at,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for GetLineageEventOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetLineageEventOutputBuilder");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("id", &self.id);
        formatter.field("event", &"*** Sensitive Data Redacted ***");
        formatter.field("created_by", &self.created_by);
        formatter.field("processing_status", &self.processing_status);
        formatter.field("event_time", &self.event_time);
        formatter.field("created_at", &self.created_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
