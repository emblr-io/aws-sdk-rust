// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PostTimeSeriesDataPointsOutput {
    /// <p>The ID of the Amazon DataZone domain in which you want to post time series data points.</p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the asset for which you want to post time series data points.</p>
    pub entity_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of the asset for which you want to post data points.</p>
    pub entity_type: ::std::option::Option<crate::types::TimeSeriesEntityType>,
    /// <p>The forms that contain the data points that you have posted.</p>
    pub forms: ::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesDataPointFormOutput>>,
    _request_id: Option<String>,
}
impl PostTimeSeriesDataPointsOutput {
    /// <p>The ID of the Amazon DataZone domain in which you want to post time series data points.</p>
    pub fn domain_id(&self) -> ::std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The ID of the asset for which you want to post time series data points.</p>
    pub fn entity_id(&self) -> ::std::option::Option<&str> {
        self.entity_id.as_deref()
    }
    /// <p>The type of the asset for which you want to post data points.</p>
    pub fn entity_type(&self) -> ::std::option::Option<&crate::types::TimeSeriesEntityType> {
        self.entity_type.as_ref()
    }
    /// <p>The forms that contain the data points that you have posted.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.forms.is_none()`.
    pub fn forms(&self) -> &[crate::types::TimeSeriesDataPointFormOutput] {
        self.forms.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for PostTimeSeriesDataPointsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PostTimeSeriesDataPointsOutput {
    /// Creates a new builder-style object to manufacture [`PostTimeSeriesDataPointsOutput`](crate::operation::post_time_series_data_points::PostTimeSeriesDataPointsOutput).
    pub fn builder() -> crate::operation::post_time_series_data_points::builders::PostTimeSeriesDataPointsOutputBuilder {
        crate::operation::post_time_series_data_points::builders::PostTimeSeriesDataPointsOutputBuilder::default()
    }
}

/// A builder for [`PostTimeSeriesDataPointsOutput`](crate::operation::post_time_series_data_points::PostTimeSeriesDataPointsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PostTimeSeriesDataPointsOutputBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) entity_id: ::std::option::Option<::std::string::String>,
    pub(crate) entity_type: ::std::option::Option<crate::types::TimeSeriesEntityType>,
    pub(crate) forms: ::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesDataPointFormOutput>>,
    _request_id: Option<String>,
}
impl PostTimeSeriesDataPointsOutputBuilder {
    /// <p>The ID of the Amazon DataZone domain in which you want to post time series data points.</p>
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which you want to post time series data points.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which you want to post time series data points.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The ID of the asset for which you want to post time series data points.</p>
    pub fn entity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the asset for which you want to post time series data points.</p>
    pub fn set_entity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>The ID of the asset for which you want to post time series data points.</p>
    pub fn get_entity_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_id
    }
    /// <p>The type of the asset for which you want to post data points.</p>
    pub fn entity_type(mut self, input: crate::types::TimeSeriesEntityType) -> Self {
        self.entity_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the asset for which you want to post data points.</p>
    pub fn set_entity_type(mut self, input: ::std::option::Option<crate::types::TimeSeriesEntityType>) -> Self {
        self.entity_type = input;
        self
    }
    /// <p>The type of the asset for which you want to post data points.</p>
    pub fn get_entity_type(&self) -> &::std::option::Option<crate::types::TimeSeriesEntityType> {
        &self.entity_type
    }
    /// Appends an item to `forms`.
    ///
    /// To override the contents of this collection use [`set_forms`](Self::set_forms).
    ///
    /// <p>The forms that contain the data points that you have posted.</p>
    pub fn forms(mut self, input: crate::types::TimeSeriesDataPointFormOutput) -> Self {
        let mut v = self.forms.unwrap_or_default();
        v.push(input);
        self.forms = ::std::option::Option::Some(v);
        self
    }
    /// <p>The forms that contain the data points that you have posted.</p>
    pub fn set_forms(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesDataPointFormOutput>>) -> Self {
        self.forms = input;
        self
    }
    /// <p>The forms that contain the data points that you have posted.</p>
    pub fn get_forms(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesDataPointFormOutput>> {
        &self.forms
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`PostTimeSeriesDataPointsOutput`](crate::operation::post_time_series_data_points::PostTimeSeriesDataPointsOutput).
    pub fn build(self) -> crate::operation::post_time_series_data_points::PostTimeSeriesDataPointsOutput {
        crate::operation::post_time_series_data_points::PostTimeSeriesDataPointsOutput {
            domain_id: self.domain_id,
            entity_id: self.entity_id,
            entity_type: self.entity_type,
            forms: self.forms,
            _request_id: self._request_id,
        }
    }
}
