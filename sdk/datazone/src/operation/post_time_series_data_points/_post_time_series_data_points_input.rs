// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PostTimeSeriesDataPointsInput {
    /// <p>The ID of the Amazon DataZone domain in which you want to post time series data points.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the asset for which you want to post time series data points.</p>
    pub entity_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The type of the asset for which you want to post data points.</p>
    pub entity_type: ::std::option::Option<crate::types::TimeSeriesEntityType>,
    /// <p>The forms that contain the data points that you want to post.</p>
    pub forms: ::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesDataPointFormInput>>,
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl PostTimeSeriesDataPointsInput {
    /// <p>The ID of the Amazon DataZone domain in which you want to post time series data points.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The ID of the asset for which you want to post time series data points.</p>
    pub fn entity_identifier(&self) -> ::std::option::Option<&str> {
        self.entity_identifier.as_deref()
    }
    /// <p>The type of the asset for which you want to post data points.</p>
    pub fn entity_type(&self) -> ::std::option::Option<&crate::types::TimeSeriesEntityType> {
        self.entity_type.as_ref()
    }
    /// <p>The forms that contain the data points that you want to post.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.forms.is_none()`.
    pub fn forms(&self) -> &[crate::types::TimeSeriesDataPointFormInput] {
        self.forms.as_deref().unwrap_or_default()
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl PostTimeSeriesDataPointsInput {
    /// Creates a new builder-style object to manufacture [`PostTimeSeriesDataPointsInput`](crate::operation::post_time_series_data_points::PostTimeSeriesDataPointsInput).
    pub fn builder() -> crate::operation::post_time_series_data_points::builders::PostTimeSeriesDataPointsInputBuilder {
        crate::operation::post_time_series_data_points::builders::PostTimeSeriesDataPointsInputBuilder::default()
    }
}

/// A builder for [`PostTimeSeriesDataPointsInput`](crate::operation::post_time_series_data_points::PostTimeSeriesDataPointsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PostTimeSeriesDataPointsInputBuilder {
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) entity_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) entity_type: ::std::option::Option<crate::types::TimeSeriesEntityType>,
    pub(crate) forms: ::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesDataPointFormInput>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl PostTimeSeriesDataPointsInputBuilder {
    /// <p>The ID of the Amazon DataZone domain in which you want to post time series data points.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which you want to post time series data points.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which you want to post time series data points.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The ID of the asset for which you want to post time series data points.</p>
    /// This field is required.
    pub fn entity_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the asset for which you want to post time series data points.</p>
    pub fn set_entity_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_identifier = input;
        self
    }
    /// <p>The ID of the asset for which you want to post time series data points.</p>
    pub fn get_entity_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_identifier
    }
    /// <p>The type of the asset for which you want to post data points.</p>
    /// This field is required.
    pub fn entity_type(mut self, input: crate::types::TimeSeriesEntityType) -> Self {
        self.entity_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the asset for which you want to post data points.</p>
    pub fn set_entity_type(mut self, input: ::std::option::Option<crate::types::TimeSeriesEntityType>) -> Self {
        self.entity_type = input;
        self
    }
    /// <p>The type of the asset for which you want to post data points.</p>
    pub fn get_entity_type(&self) -> &::std::option::Option<crate::types::TimeSeriesEntityType> {
        &self.entity_type
    }
    /// Appends an item to `forms`.
    ///
    /// To override the contents of this collection use [`set_forms`](Self::set_forms).
    ///
    /// <p>The forms that contain the data points that you want to post.</p>
    pub fn forms(mut self, input: crate::types::TimeSeriesDataPointFormInput) -> Self {
        let mut v = self.forms.unwrap_or_default();
        v.push(input);
        self.forms = ::std::option::Option::Some(v);
        self
    }
    /// <p>The forms that contain the data points that you want to post.</p>
    pub fn set_forms(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesDataPointFormInput>>) -> Self {
        self.forms = input;
        self
    }
    /// <p>The forms that contain the data points that you want to post.</p>
    pub fn get_forms(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesDataPointFormInput>> {
        &self.forms
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that is provided to ensure the idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`PostTimeSeriesDataPointsInput`](crate::operation::post_time_series_data_points::PostTimeSeriesDataPointsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::post_time_series_data_points::PostTimeSeriesDataPointsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::post_time_series_data_points::PostTimeSeriesDataPointsInput {
            domain_identifier: self.domain_identifier,
            entity_identifier: self.entity_identifier,
            entity_type: self.entity_type,
            forms: self.forms,
            client_token: self.client_token,
        })
    }
}
