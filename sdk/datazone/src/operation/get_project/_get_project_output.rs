// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetProjectOutput {
    /// <p>The ID of the Amazon DataZone domain in which the project exists.</p>
    pub domain_id: ::std::string::String,
    /// <p>&gt;The ID of the project.</p>
    pub id: ::std::string::String,
    /// <p>The name of the project.</p>
    pub name: ::std::string::String,
    /// <p>The description of the project.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The status of the project.</p>
    pub project_status: ::std::option::Option<crate::types::ProjectStatus>,
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub failure_reasons: ::std::option::Option<::std::vec::Vec<crate::types::ProjectDeletionError>>,
    /// <p>The Amazon DataZone user who created the project.</p>
    pub created_by: ::std::string::String,
    /// <p>The timestamp of when the project was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of when the project was last updated.</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The business glossary terms that can be used in the project.</p>
    pub glossary_terms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The ID of the domain unit.</p>
    pub domain_unit_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the project profile of a project.</p>
    pub project_profile_id: ::std::option::Option<::std::string::String>,
    /// <p>The user parameters of a project.</p>
    pub user_parameters: ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentConfigurationUserParameter>>,
    /// <p>The environment deployment status of a project.</p>
    pub environment_deployment_details: ::std::option::Option<crate::types::EnvironmentDeploymentDetails>,
    _request_id: Option<String>,
}
impl GetProjectOutput {
    /// <p>The ID of the Amazon DataZone domain in which the project exists.</p>
    pub fn domain_id(&self) -> &str {
        use std::ops::Deref;
        self.domain_id.deref()
    }
    /// <p>&gt;The ID of the project.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The name of the project.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of the project.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The status of the project.</p>
    pub fn project_status(&self) -> ::std::option::Option<&crate::types::ProjectStatus> {
        self.project_status.as_ref()
    }
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.failure_reasons.is_none()`.
    pub fn failure_reasons(&self) -> &[crate::types::ProjectDeletionError] {
        self.failure_reasons.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon DataZone user who created the project.</p>
    pub fn created_by(&self) -> &str {
        use std::ops::Deref;
        self.created_by.deref()
    }
    /// <p>The timestamp of when the project was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp of when the project was last updated.</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p>The business glossary terms that can be used in the project.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.glossary_terms.is_none()`.
    pub fn glossary_terms(&self) -> &[::std::string::String] {
        self.glossary_terms.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the domain unit.</p>
    pub fn domain_unit_id(&self) -> ::std::option::Option<&str> {
        self.domain_unit_id.as_deref()
    }
    /// <p>The ID of the project profile of a project.</p>
    pub fn project_profile_id(&self) -> ::std::option::Option<&str> {
        self.project_profile_id.as_deref()
    }
    /// <p>The user parameters of a project.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_parameters.is_none()`.
    pub fn user_parameters(&self) -> &[crate::types::EnvironmentConfigurationUserParameter] {
        self.user_parameters.as_deref().unwrap_or_default()
    }
    /// <p>The environment deployment status of a project.</p>
    pub fn environment_deployment_details(&self) -> ::std::option::Option<&crate::types::EnvironmentDeploymentDetails> {
        self.environment_deployment_details.as_ref()
    }
}
impl ::std::fmt::Debug for GetProjectOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetProjectOutput");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("id", &self.id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("project_status", &self.project_status);
        formatter.field("failure_reasons", &self.failure_reasons);
        formatter.field("created_by", &self.created_by);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.field("glossary_terms", &self.glossary_terms);
        formatter.field("domain_unit_id", &self.domain_unit_id);
        formatter.field("project_profile_id", &self.project_profile_id);
        formatter.field("user_parameters", &self.user_parameters);
        formatter.field("environment_deployment_details", &self.environment_deployment_details);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetProjectOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetProjectOutput {
    /// Creates a new builder-style object to manufacture [`GetProjectOutput`](crate::operation::get_project::GetProjectOutput).
    pub fn builder() -> crate::operation::get_project::builders::GetProjectOutputBuilder {
        crate::operation::get_project::builders::GetProjectOutputBuilder::default()
    }
}

/// A builder for [`GetProjectOutput`](crate::operation::get_project::GetProjectOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetProjectOutputBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) project_status: ::std::option::Option<crate::types::ProjectStatus>,
    pub(crate) failure_reasons: ::std::option::Option<::std::vec::Vec<crate::types::ProjectDeletionError>>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) glossary_terms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) domain_unit_id: ::std::option::Option<::std::string::String>,
    pub(crate) project_profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_parameters: ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentConfigurationUserParameter>>,
    pub(crate) environment_deployment_details: ::std::option::Option<crate::types::EnvironmentDeploymentDetails>,
    _request_id: Option<String>,
}
impl GetProjectOutputBuilder {
    /// <p>The ID of the Amazon DataZone domain in which the project exists.</p>
    /// This field is required.
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which the project exists.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which the project exists.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>&gt;The ID of the project.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>&gt;The ID of the project.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>&gt;The ID of the project.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the project.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the project.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the project.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the project.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the project.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the project.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The status of the project.</p>
    pub fn project_status(mut self, input: crate::types::ProjectStatus) -> Self {
        self.project_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the project.</p>
    pub fn set_project_status(mut self, input: ::std::option::Option<crate::types::ProjectStatus>) -> Self {
        self.project_status = input;
        self
    }
    /// <p>The status of the project.</p>
    pub fn get_project_status(&self) -> &::std::option::Option<crate::types::ProjectStatus> {
        &self.project_status
    }
    /// Appends an item to `failure_reasons`.
    ///
    /// To override the contents of this collection use [`set_failure_reasons`](Self::set_failure_reasons).
    ///
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub fn failure_reasons(mut self, input: crate::types::ProjectDeletionError) -> Self {
        let mut v = self.failure_reasons.unwrap_or_default();
        v.push(input);
        self.failure_reasons = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub fn set_failure_reasons(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ProjectDeletionError>>) -> Self {
        self.failure_reasons = input;
        self
    }
    /// <p>Specifies the error message that is returned if the operation cannot be successfully completed.</p>
    pub fn get_failure_reasons(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProjectDeletionError>> {
        &self.failure_reasons
    }
    /// <p>The Amazon DataZone user who created the project.</p>
    /// This field is required.
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon DataZone user who created the project.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The Amazon DataZone user who created the project.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The timestamp of when the project was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the project was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when the project was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp of when the project was last updated.</p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the project was last updated.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>The timestamp of when the project was last updated.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// Appends an item to `glossary_terms`.
    ///
    /// To override the contents of this collection use [`set_glossary_terms`](Self::set_glossary_terms).
    ///
    /// <p>The business glossary terms that can be used in the project.</p>
    pub fn glossary_terms(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.glossary_terms.unwrap_or_default();
        v.push(input.into());
        self.glossary_terms = ::std::option::Option::Some(v);
        self
    }
    /// <p>The business glossary terms that can be used in the project.</p>
    pub fn set_glossary_terms(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.glossary_terms = input;
        self
    }
    /// <p>The business glossary terms that can be used in the project.</p>
    pub fn get_glossary_terms(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.glossary_terms
    }
    /// <p>The ID of the domain unit.</p>
    pub fn domain_unit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_unit_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain unit.</p>
    pub fn set_domain_unit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_unit_id = input;
        self
    }
    /// <p>The ID of the domain unit.</p>
    pub fn get_domain_unit_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_unit_id
    }
    /// <p>The ID of the project profile of a project.</p>
    pub fn project_profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the project profile of a project.</p>
    pub fn set_project_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_profile_id = input;
        self
    }
    /// <p>The ID of the project profile of a project.</p>
    pub fn get_project_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_profile_id
    }
    /// Appends an item to `user_parameters`.
    ///
    /// To override the contents of this collection use [`set_user_parameters`](Self::set_user_parameters).
    ///
    /// <p>The user parameters of a project.</p>
    pub fn user_parameters(mut self, input: crate::types::EnvironmentConfigurationUserParameter) -> Self {
        let mut v = self.user_parameters.unwrap_or_default();
        v.push(input);
        self.user_parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The user parameters of a project.</p>
    pub fn set_user_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentConfigurationUserParameter>>) -> Self {
        self.user_parameters = input;
        self
    }
    /// <p>The user parameters of a project.</p>
    pub fn get_user_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EnvironmentConfigurationUserParameter>> {
        &self.user_parameters
    }
    /// <p>The environment deployment status of a project.</p>
    pub fn environment_deployment_details(mut self, input: crate::types::EnvironmentDeploymentDetails) -> Self {
        self.environment_deployment_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The environment deployment status of a project.</p>
    pub fn set_environment_deployment_details(mut self, input: ::std::option::Option<crate::types::EnvironmentDeploymentDetails>) -> Self {
        self.environment_deployment_details = input;
        self
    }
    /// <p>The environment deployment status of a project.</p>
    pub fn get_environment_deployment_details(&self) -> &::std::option::Option<crate::types::EnvironmentDeploymentDetails> {
        &self.environment_deployment_details
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetProjectOutput`](crate::operation::get_project::GetProjectOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`domain_id`](crate::operation::get_project::builders::GetProjectOutputBuilder::domain_id)
    /// - [`id`](crate::operation::get_project::builders::GetProjectOutputBuilder::id)
    /// - [`name`](crate::operation::get_project::builders::GetProjectOutputBuilder::name)
    /// - [`created_by`](crate::operation::get_project::builders::GetProjectOutputBuilder::created_by)
    pub fn build(self) -> ::std::result::Result<crate::operation::get_project::GetProjectOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_project::GetProjectOutput {
            domain_id: self.domain_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain_id",
                    "domain_id was not specified but it is required when building GetProjectOutput",
                )
            })?,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building GetProjectOutput",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GetProjectOutput",
                )
            })?,
            description: self.description,
            project_status: self.project_status,
            failure_reasons: self.failure_reasons,
            created_by: self.created_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_by",
                    "created_by was not specified but it is required when building GetProjectOutput",
                )
            })?,
            created_at: self.created_at,
            last_updated_at: self.last_updated_at,
            glossary_terms: self.glossary_terms,
            domain_unit_id: self.domain_unit_id,
            project_profile_id: self.project_profile_id,
            user_parameters: self.user_parameters,
            environment_deployment_details: self.environment_deployment_details,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetProjectOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetProjectOutputBuilder");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("id", &self.id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("project_status", &self.project_status);
        formatter.field("failure_reasons", &self.failure_reasons);
        formatter.field("created_by", &self.created_by);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.field("glossary_terms", &self.glossary_terms);
        formatter.field("domain_unit_id", &self.domain_unit_id);
        formatter.field("project_profile_id", &self.project_profile_id);
        formatter.field("user_parameters", &self.user_parameters);
        formatter.field("environment_deployment_details", &self.environment_deployment_details);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
