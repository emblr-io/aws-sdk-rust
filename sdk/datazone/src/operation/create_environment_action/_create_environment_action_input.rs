// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateEnvironmentActionInput {
    /// <p>The ID of the Amazon DataZone domain in which the environment action is created.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the environment in which the environment action is created.</p>
    pub environment_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The name of the environment action.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The parameters of the environment action.</p>
    pub parameters: ::std::option::Option<crate::types::ActionParameters>,
    /// <p>The description of the environment action that is being created in the environment.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl CreateEnvironmentActionInput {
    /// <p>The ID of the Amazon DataZone domain in which the environment action is created.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The ID of the environment in which the environment action is created.</p>
    pub fn environment_identifier(&self) -> ::std::option::Option<&str> {
        self.environment_identifier.as_deref()
    }
    /// <p>The name of the environment action.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The parameters of the environment action.</p>
    pub fn parameters(&self) -> ::std::option::Option<&crate::types::ActionParameters> {
        self.parameters.as_ref()
    }
    /// <p>The description of the environment action that is being created in the environment.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl CreateEnvironmentActionInput {
    /// Creates a new builder-style object to manufacture [`CreateEnvironmentActionInput`](crate::operation::create_environment_action::CreateEnvironmentActionInput).
    pub fn builder() -> crate::operation::create_environment_action::builders::CreateEnvironmentActionInputBuilder {
        crate::operation::create_environment_action::builders::CreateEnvironmentActionInputBuilder::default()
    }
}

/// A builder for [`CreateEnvironmentActionInput`](crate::operation::create_environment_action::CreateEnvironmentActionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateEnvironmentActionInputBuilder {
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) environment_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) parameters: ::std::option::Option<crate::types::ActionParameters>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl CreateEnvironmentActionInputBuilder {
    /// <p>The ID of the Amazon DataZone domain in which the environment action is created.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which the environment action is created.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which the environment action is created.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The ID of the environment in which the environment action is created.</p>
    /// This field is required.
    pub fn environment_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the environment in which the environment action is created.</p>
    pub fn set_environment_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_identifier = input;
        self
    }
    /// <p>The ID of the environment in which the environment action is created.</p>
    pub fn get_environment_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_identifier
    }
    /// <p>The name of the environment action.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the environment action.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the environment action.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The parameters of the environment action.</p>
    /// This field is required.
    pub fn parameters(mut self, input: crate::types::ActionParameters) -> Self {
        self.parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>The parameters of the environment action.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<crate::types::ActionParameters>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>The parameters of the environment action.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<crate::types::ActionParameters> {
        &self.parameters
    }
    /// <p>The description of the environment action that is being created in the environment.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the environment action that is being created in the environment.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the environment action that is being created in the environment.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`CreateEnvironmentActionInput`](crate::operation::create_environment_action::CreateEnvironmentActionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_environment_action::CreateEnvironmentActionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_environment_action::CreateEnvironmentActionInput {
            domain_identifier: self.domain_identifier,
            environment_identifier: self.environment_identifier,
            name: self.name,
            parameters: self.parameters,
            description: self.description,
        })
    }
}
