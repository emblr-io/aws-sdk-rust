// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateRuleOutput {
    /// <p>The ID of the rule.</p>
    pub identifier: ::std::string::String,
    /// <p>The revision of the rule.</p>
    pub revision: ::std::string::String,
    /// <p>The name of the rule.</p>
    pub name: ::std::string::String,
    /// <p>The type of the rule.</p>
    pub rule_type: crate::types::RuleType,
    /// <p>The target of the rule.</p>
    pub target: ::std::option::Option<crate::types::RuleTarget>,
    /// <p>The action of the rule.</p>
    pub action: crate::types::RuleAction,
    /// <p>The scope of the rule.</p>
    pub scope: ::std::option::Option<crate::types::RuleScope>,
    /// <p>The detail of the rule.</p>
    pub detail: ::std::option::Option<crate::types::RuleDetail>,
    /// <p>The description of the rule.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp at which the rule was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The timestamp at which the rule was last updated.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
    /// <p>The user who created the rule.</p>
    pub created_by: ::std::string::String,
    /// <p>The timestamp at which the rule was last updated.</p>
    pub last_updated_by: ::std::string::String,
    _request_id: Option<String>,
}
impl UpdateRuleOutput {
    /// <p>The ID of the rule.</p>
    pub fn identifier(&self) -> &str {
        use std::ops::Deref;
        self.identifier.deref()
    }
    /// <p>The revision of the rule.</p>
    pub fn revision(&self) -> &str {
        use std::ops::Deref;
        self.revision.deref()
    }
    /// <p>The name of the rule.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The type of the rule.</p>
    pub fn rule_type(&self) -> &crate::types::RuleType {
        &self.rule_type
    }
    /// <p>The target of the rule.</p>
    pub fn target(&self) -> ::std::option::Option<&crate::types::RuleTarget> {
        self.target.as_ref()
    }
    /// <p>The action of the rule.</p>
    pub fn action(&self) -> &crate::types::RuleAction {
        &self.action
    }
    /// <p>The scope of the rule.</p>
    pub fn scope(&self) -> ::std::option::Option<&crate::types::RuleScope> {
        self.scope.as_ref()
    }
    /// <p>The detail of the rule.</p>
    pub fn detail(&self) -> ::std::option::Option<&crate::types::RuleDetail> {
        self.detail.as_ref()
    }
    /// <p>The description of the rule.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The timestamp at which the rule was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The timestamp at which the rule was last updated.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
    /// <p>The user who created the rule.</p>
    pub fn created_by(&self) -> &str {
        use std::ops::Deref;
        self.created_by.deref()
    }
    /// <p>The timestamp at which the rule was last updated.</p>
    pub fn last_updated_by(&self) -> &str {
        use std::ops::Deref;
        self.last_updated_by.deref()
    }
}
impl ::std::fmt::Debug for UpdateRuleOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateRuleOutput");
        formatter.field("identifier", &self.identifier);
        formatter.field("revision", &self.revision);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("rule_type", &self.rule_type);
        formatter.field("target", &self.target);
        formatter.field("action", &self.action);
        formatter.field("scope", &self.scope);
        formatter.field("detail", &self.detail);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("created_by", &self.created_by);
        formatter.field("last_updated_by", &self.last_updated_by);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for UpdateRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateRuleOutput {
    /// Creates a new builder-style object to manufacture [`UpdateRuleOutput`](crate::operation::update_rule::UpdateRuleOutput).
    pub fn builder() -> crate::operation::update_rule::builders::UpdateRuleOutputBuilder {
        crate::operation::update_rule::builders::UpdateRuleOutputBuilder::default()
    }
}

/// A builder for [`UpdateRuleOutput`](crate::operation::update_rule::UpdateRuleOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateRuleOutputBuilder {
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) revision: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) rule_type: ::std::option::Option<crate::types::RuleType>,
    pub(crate) target: ::std::option::Option<crate::types::RuleTarget>,
    pub(crate) action: ::std::option::Option<crate::types::RuleAction>,
    pub(crate) scope: ::std::option::Option<crate::types::RuleScope>,
    pub(crate) detail: ::std::option::Option<crate::types::RuleDetail>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_by: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl UpdateRuleOutputBuilder {
    /// <p>The ID of the rule.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the rule.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The ID of the rule.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>The revision of the rule.</p>
    /// This field is required.
    pub fn revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.revision = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The revision of the rule.</p>
    pub fn set_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.revision = input;
        self
    }
    /// <p>The revision of the rule.</p>
    pub fn get_revision(&self) -> &::std::option::Option<::std::string::String> {
        &self.revision
    }
    /// <p>The name of the rule.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the rule.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the rule.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of the rule.</p>
    /// This field is required.
    pub fn rule_type(mut self, input: crate::types::RuleType) -> Self {
        self.rule_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the rule.</p>
    pub fn set_rule_type(mut self, input: ::std::option::Option<crate::types::RuleType>) -> Self {
        self.rule_type = input;
        self
    }
    /// <p>The type of the rule.</p>
    pub fn get_rule_type(&self) -> &::std::option::Option<crate::types::RuleType> {
        &self.rule_type
    }
    /// <p>The target of the rule.</p>
    /// This field is required.
    pub fn target(mut self, input: crate::types::RuleTarget) -> Self {
        self.target = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target of the rule.</p>
    pub fn set_target(mut self, input: ::std::option::Option<crate::types::RuleTarget>) -> Self {
        self.target = input;
        self
    }
    /// <p>The target of the rule.</p>
    pub fn get_target(&self) -> &::std::option::Option<crate::types::RuleTarget> {
        &self.target
    }
    /// <p>The action of the rule.</p>
    /// This field is required.
    pub fn action(mut self, input: crate::types::RuleAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action of the rule.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::RuleAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action of the rule.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::RuleAction> {
        &self.action
    }
    /// <p>The scope of the rule.</p>
    /// This field is required.
    pub fn scope(mut self, input: crate::types::RuleScope) -> Self {
        self.scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scope of the rule.</p>
    pub fn set_scope(mut self, input: ::std::option::Option<crate::types::RuleScope>) -> Self {
        self.scope = input;
        self
    }
    /// <p>The scope of the rule.</p>
    pub fn get_scope(&self) -> &::std::option::Option<crate::types::RuleScope> {
        &self.scope
    }
    /// <p>The detail of the rule.</p>
    /// This field is required.
    pub fn detail(mut self, input: crate::types::RuleDetail) -> Self {
        self.detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>The detail of the rule.</p>
    pub fn set_detail(mut self, input: ::std::option::Option<crate::types::RuleDetail>) -> Self {
        self.detail = input;
        self
    }
    /// <p>The detail of the rule.</p>
    pub fn get_detail(&self) -> &::std::option::Option<crate::types::RuleDetail> {
        &self.detail
    }
    /// <p>The description of the rule.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the rule.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the rule.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The timestamp at which the rule was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which the rule was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp at which the rule was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp at which the rule was last updated.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which the rule was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp at which the rule was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The user who created the rule.</p>
    /// This field is required.
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user who created the rule.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The user who created the rule.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The timestamp at which the rule was last updated.</p>
    /// This field is required.
    pub fn last_updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The timestamp at which the rule was last updated.</p>
    pub fn set_last_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_updated_by = input;
        self
    }
    /// <p>The timestamp at which the rule was last updated.</p>
    pub fn get_last_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_updated_by
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateRuleOutput`](crate::operation::update_rule::UpdateRuleOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`identifier`](crate::operation::update_rule::builders::UpdateRuleOutputBuilder::identifier)
    /// - [`revision`](crate::operation::update_rule::builders::UpdateRuleOutputBuilder::revision)
    /// - [`name`](crate::operation::update_rule::builders::UpdateRuleOutputBuilder::name)
    /// - [`rule_type`](crate::operation::update_rule::builders::UpdateRuleOutputBuilder::rule_type)
    /// - [`action`](crate::operation::update_rule::builders::UpdateRuleOutputBuilder::action)
    /// - [`created_at`](crate::operation::update_rule::builders::UpdateRuleOutputBuilder::created_at)
    /// - [`updated_at`](crate::operation::update_rule::builders::UpdateRuleOutputBuilder::updated_at)
    /// - [`created_by`](crate::operation::update_rule::builders::UpdateRuleOutputBuilder::created_by)
    /// - [`last_updated_by`](crate::operation::update_rule::builders::UpdateRuleOutputBuilder::last_updated_by)
    pub fn build(self) -> ::std::result::Result<crate::operation::update_rule::UpdateRuleOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_rule::UpdateRuleOutput {
            identifier: self.identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "identifier",
                    "identifier was not specified but it is required when building UpdateRuleOutput",
                )
            })?,
            revision: self.revision.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "revision",
                    "revision was not specified but it is required when building UpdateRuleOutput",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building UpdateRuleOutput",
                )
            })?,
            rule_type: self.rule_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rule_type",
                    "rule_type was not specified but it is required when building UpdateRuleOutput",
                )
            })?,
            target: self.target,
            action: self.action.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action",
                    "action was not specified but it is required when building UpdateRuleOutput",
                )
            })?,
            scope: self.scope,
            detail: self.detail,
            description: self.description,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building UpdateRuleOutput",
                )
            })?,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building UpdateRuleOutput",
                )
            })?,
            created_by: self.created_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_by",
                    "created_by was not specified but it is required when building UpdateRuleOutput",
                )
            })?,
            last_updated_by: self.last_updated_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_updated_by",
                    "last_updated_by was not specified but it is required when building UpdateRuleOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for UpdateRuleOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateRuleOutputBuilder");
        formatter.field("identifier", &self.identifier);
        formatter.field("revision", &self.revision);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("rule_type", &self.rule_type);
        formatter.field("target", &self.target);
        formatter.field("action", &self.action);
        formatter.field("scope", &self.scope);
        formatter.field("detail", &self.detail);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("created_by", &self.created_by);
        formatter.field("last_updated_by", &self.last_updated_by);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
