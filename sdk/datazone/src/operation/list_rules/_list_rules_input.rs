// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListRulesInput {
    /// <p>The ID of the domain in which the rules are to be listed.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The target type of the rule.</p>
    pub target_type: ::std::option::Option<crate::types::RuleTargetType>,
    /// <p>The target ID of the rule.</p>
    pub target_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The type of the rule.</p>
    pub rule_type: ::std::option::Option<crate::types::RuleType>,
    /// <p>The action of the rule.</p>
    pub action: ::std::option::Option<crate::types::RuleAction>,
    /// <p>The IDs of projects in which rules are to be listed.</p>
    pub project_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The asset types of the rule.</p>
    pub asset_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The data product of the rule.</p>
    pub data_product: ::std::option::Option<bool>,
    /// <p>Specifies whether to include cascading rules in the results.</p>
    pub include_cascaded: ::std::option::Option<bool>,
    /// <p>The maximum number of rules to return in a single call to <code>ListRules</code>. When the number of rules to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListRules</code> to list the next set of rules.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>When the number of rules is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of rules, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListRules</code> to list the next set of rules.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListRulesInput {
    /// <p>The ID of the domain in which the rules are to be listed.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The target type of the rule.</p>
    pub fn target_type(&self) -> ::std::option::Option<&crate::types::RuleTargetType> {
        self.target_type.as_ref()
    }
    /// <p>The target ID of the rule.</p>
    pub fn target_identifier(&self) -> ::std::option::Option<&str> {
        self.target_identifier.as_deref()
    }
    /// <p>The type of the rule.</p>
    pub fn rule_type(&self) -> ::std::option::Option<&crate::types::RuleType> {
        self.rule_type.as_ref()
    }
    /// <p>The action of the rule.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::RuleAction> {
        self.action.as_ref()
    }
    /// <p>The IDs of projects in which rules are to be listed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.project_ids.is_none()`.
    pub fn project_ids(&self) -> &[::std::string::String] {
        self.project_ids.as_deref().unwrap_or_default()
    }
    /// <p>The asset types of the rule.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.asset_types.is_none()`.
    pub fn asset_types(&self) -> &[::std::string::String] {
        self.asset_types.as_deref().unwrap_or_default()
    }
    /// <p>The data product of the rule.</p>
    pub fn data_product(&self) -> ::std::option::Option<bool> {
        self.data_product
    }
    /// <p>Specifies whether to include cascading rules in the results.</p>
    pub fn include_cascaded(&self) -> ::std::option::Option<bool> {
        self.include_cascaded
    }
    /// <p>The maximum number of rules to return in a single call to <code>ListRules</code>. When the number of rules to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListRules</code> to list the next set of rules.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>When the number of rules is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of rules, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListRules</code> to list the next set of rules.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListRulesInput {
    /// Creates a new builder-style object to manufacture [`ListRulesInput`](crate::operation::list_rules::ListRulesInput).
    pub fn builder() -> crate::operation::list_rules::builders::ListRulesInputBuilder {
        crate::operation::list_rules::builders::ListRulesInputBuilder::default()
    }
}

/// A builder for [`ListRulesInput`](crate::operation::list_rules::ListRulesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListRulesInputBuilder {
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) target_type: ::std::option::Option<crate::types::RuleTargetType>,
    pub(crate) target_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) rule_type: ::std::option::Option<crate::types::RuleType>,
    pub(crate) action: ::std::option::Option<crate::types::RuleAction>,
    pub(crate) project_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) asset_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) data_product: ::std::option::Option<bool>,
    pub(crate) include_cascaded: ::std::option::Option<bool>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListRulesInputBuilder {
    /// <p>The ID of the domain in which the rules are to be listed.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain in which the rules are to be listed.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The ID of the domain in which the rules are to be listed.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The target type of the rule.</p>
    /// This field is required.
    pub fn target_type(mut self, input: crate::types::RuleTargetType) -> Self {
        self.target_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target type of the rule.</p>
    pub fn set_target_type(mut self, input: ::std::option::Option<crate::types::RuleTargetType>) -> Self {
        self.target_type = input;
        self
    }
    /// <p>The target type of the rule.</p>
    pub fn get_target_type(&self) -> &::std::option::Option<crate::types::RuleTargetType> {
        &self.target_type
    }
    /// <p>The target ID of the rule.</p>
    /// This field is required.
    pub fn target_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The target ID of the rule.</p>
    pub fn set_target_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_identifier = input;
        self
    }
    /// <p>The target ID of the rule.</p>
    pub fn get_target_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_identifier
    }
    /// <p>The type of the rule.</p>
    pub fn rule_type(mut self, input: crate::types::RuleType) -> Self {
        self.rule_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the rule.</p>
    pub fn set_rule_type(mut self, input: ::std::option::Option<crate::types::RuleType>) -> Self {
        self.rule_type = input;
        self
    }
    /// <p>The type of the rule.</p>
    pub fn get_rule_type(&self) -> &::std::option::Option<crate::types::RuleType> {
        &self.rule_type
    }
    /// <p>The action of the rule.</p>
    pub fn action(mut self, input: crate::types::RuleAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action of the rule.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::RuleAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action of the rule.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::RuleAction> {
        &self.action
    }
    /// Appends an item to `project_ids`.
    ///
    /// To override the contents of this collection use [`set_project_ids`](Self::set_project_ids).
    ///
    /// <p>The IDs of projects in which rules are to be listed.</p>
    pub fn project_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.project_ids.unwrap_or_default();
        v.push(input.into());
        self.project_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IDs of projects in which rules are to be listed.</p>
    pub fn set_project_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.project_ids = input;
        self
    }
    /// <p>The IDs of projects in which rules are to be listed.</p>
    pub fn get_project_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.project_ids
    }
    /// Appends an item to `asset_types`.
    ///
    /// To override the contents of this collection use [`set_asset_types`](Self::set_asset_types).
    ///
    /// <p>The asset types of the rule.</p>
    pub fn asset_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.asset_types.unwrap_or_default();
        v.push(input.into());
        self.asset_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The asset types of the rule.</p>
    pub fn set_asset_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.asset_types = input;
        self
    }
    /// <p>The asset types of the rule.</p>
    pub fn get_asset_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.asset_types
    }
    /// <p>The data product of the rule.</p>
    pub fn data_product(mut self, input: bool) -> Self {
        self.data_product = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data product of the rule.</p>
    pub fn set_data_product(mut self, input: ::std::option::Option<bool>) -> Self {
        self.data_product = input;
        self
    }
    /// <p>The data product of the rule.</p>
    pub fn get_data_product(&self) -> &::std::option::Option<bool> {
        &self.data_product
    }
    /// <p>Specifies whether to include cascading rules in the results.</p>
    pub fn include_cascaded(mut self, input: bool) -> Self {
        self.include_cascaded = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to include cascading rules in the results.</p>
    pub fn set_include_cascaded(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_cascaded = input;
        self
    }
    /// <p>Specifies whether to include cascading rules in the results.</p>
    pub fn get_include_cascaded(&self) -> &::std::option::Option<bool> {
        &self.include_cascaded
    }
    /// <p>The maximum number of rules to return in a single call to <code>ListRules</code>. When the number of rules to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListRules</code> to list the next set of rules.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of rules to return in a single call to <code>ListRules</code>. When the number of rules to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListRules</code> to list the next set of rules.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of rules to return in a single call to <code>ListRules</code>. When the number of rules to be listed is greater than the value of <code>MaxResults</code>, the response contains a <code>NextToken</code> value that you can use in a subsequent call to <code>ListRules</code> to list the next set of rules.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>When the number of rules is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of rules, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListRules</code> to list the next set of rules.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>When the number of rules is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of rules, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListRules</code> to list the next set of rules.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>When the number of rules is greater than the default value for the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code> that is less than the number of rules, the response includes a pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code> value in a subsequent call to <code>ListRules</code> to list the next set of rules.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListRulesInput`](crate::operation::list_rules::ListRulesInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::list_rules::ListRulesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_rules::ListRulesInput {
            domain_identifier: self.domain_identifier,
            target_type: self.target_type,
            target_identifier: self.target_identifier,
            rule_type: self.rule_type,
            action: self.action,
            project_ids: self.project_ids,
            asset_types: self.asset_types,
            data_product: self.data_product,
            include_cascaded: self.include_cascaded,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
