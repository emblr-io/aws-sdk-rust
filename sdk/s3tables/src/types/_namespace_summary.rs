// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about a namespace.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NamespaceSummary {
    /// <p>The name of the namespace.</p>
    pub namespace: ::std::vec::Vec<::std::string::String>,
    /// <p>The date and time the namespace was created at.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The ID of the account that created the namespace.</p>
    pub created_by: ::std::string::String,
    /// <p>The ID of the account that owns the namespace.</p>
    pub owner_account_id: ::std::string::String,
    /// <p>The system-assigned unique identifier for the namespace.</p>
    pub namespace_id: ::std::option::Option<::std::string::String>,
    /// <p>The system-assigned unique identifier for the table bucket that contains this namespace.</p>
    pub table_bucket_id: ::std::option::Option<::std::string::String>,
}
impl NamespaceSummary {
    /// <p>The name of the namespace.</p>
    pub fn namespace(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.namespace.deref()
    }
    /// <p>The date and time the namespace was created at.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The ID of the account that created the namespace.</p>
    pub fn created_by(&self) -> &str {
        use std::ops::Deref;
        self.created_by.deref()
    }
    /// <p>The ID of the account that owns the namespace.</p>
    pub fn owner_account_id(&self) -> &str {
        use std::ops::Deref;
        self.owner_account_id.deref()
    }
    /// <p>The system-assigned unique identifier for the namespace.</p>
    pub fn namespace_id(&self) -> ::std::option::Option<&str> {
        self.namespace_id.as_deref()
    }
    /// <p>The system-assigned unique identifier for the table bucket that contains this namespace.</p>
    pub fn table_bucket_id(&self) -> ::std::option::Option<&str> {
        self.table_bucket_id.as_deref()
    }
}
impl NamespaceSummary {
    /// Creates a new builder-style object to manufacture [`NamespaceSummary`](crate::types::NamespaceSummary).
    pub fn builder() -> crate::types::builders::NamespaceSummaryBuilder {
        crate::types::builders::NamespaceSummaryBuilder::default()
    }
}

/// A builder for [`NamespaceSummary`](crate::types::NamespaceSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NamespaceSummaryBuilder {
    pub(crate) namespace: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) owner_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) namespace_id: ::std::option::Option<::std::string::String>,
    pub(crate) table_bucket_id: ::std::option::Option<::std::string::String>,
}
impl NamespaceSummaryBuilder {
    /// Appends an item to `namespace`.
    ///
    /// To override the contents of this collection use [`set_namespace`](Self::set_namespace).
    ///
    /// <p>The name of the namespace.</p>
    pub fn namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.namespace.unwrap_or_default();
        v.push(input.into());
        self.namespace = ::std::option::Option::Some(v);
        self
    }
    /// <p>The name of the namespace.</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The name of the namespace.</p>
    pub fn get_namespace(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.namespace
    }
    /// <p>The date and time the namespace was created at.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the namespace was created at.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time the namespace was created at.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The ID of the account that created the namespace.</p>
    /// This field is required.
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the account that created the namespace.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The ID of the account that created the namespace.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The ID of the account that owns the namespace.</p>
    /// This field is required.
    pub fn owner_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the account that owns the namespace.</p>
    pub fn set_owner_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_account_id = input;
        self
    }
    /// <p>The ID of the account that owns the namespace.</p>
    pub fn get_owner_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_account_id
    }
    /// <p>The system-assigned unique identifier for the namespace.</p>
    pub fn namespace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.namespace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The system-assigned unique identifier for the namespace.</p>
    pub fn set_namespace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.namespace_id = input;
        self
    }
    /// <p>The system-assigned unique identifier for the namespace.</p>
    pub fn get_namespace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.namespace_id
    }
    /// <p>The system-assigned unique identifier for the table bucket that contains this namespace.</p>
    pub fn table_bucket_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_bucket_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The system-assigned unique identifier for the table bucket that contains this namespace.</p>
    pub fn set_table_bucket_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_bucket_id = input;
        self
    }
    /// <p>The system-assigned unique identifier for the table bucket that contains this namespace.</p>
    pub fn get_table_bucket_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_bucket_id
    }
    /// Consumes the builder and constructs a [`NamespaceSummary`](crate::types::NamespaceSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`namespace`](crate::types::builders::NamespaceSummaryBuilder::namespace)
    /// - [`created_at`](crate::types::builders::NamespaceSummaryBuilder::created_at)
    /// - [`created_by`](crate::types::builders::NamespaceSummaryBuilder::created_by)
    /// - [`owner_account_id`](crate::types::builders::NamespaceSummaryBuilder::owner_account_id)
    pub fn build(self) -> ::std::result::Result<crate::types::NamespaceSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NamespaceSummary {
            namespace: self.namespace.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "namespace",
                    "namespace was not specified but it is required when building NamespaceSummary",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building NamespaceSummary",
                )
            })?,
            created_by: self.created_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_by",
                    "created_by was not specified but it is required when building NamespaceSummary",
                )
            })?,
            owner_account_id: self.owner_account_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "owner_account_id",
                    "owner_account_id was not specified but it is required when building NamespaceSummary",
                )
            })?,
            namespace_id: self.namespace_id,
            table_bucket_id: self.table_bucket_id,
        })
    }
}
