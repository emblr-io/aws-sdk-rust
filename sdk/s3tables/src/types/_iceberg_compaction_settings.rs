// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the compaction settings for an Iceberg table.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IcebergCompactionSettings {
    /// <p>The target file size for the table in MB.</p>
    pub target_file_size_mb: ::std::option::Option<i32>,
    /// <p>The compaction strategy to use for the table. This determines how files are selected and combined during compaction operations.</p>
    pub strategy: ::std::option::Option<crate::types::IcebergCompactionStrategy>,
}
impl IcebergCompactionSettings {
    /// <p>The target file size for the table in MB.</p>
    pub fn target_file_size_mb(&self) -> ::std::option::Option<i32> {
        self.target_file_size_mb
    }
    /// <p>The compaction strategy to use for the table. This determines how files are selected and combined during compaction operations.</p>
    pub fn strategy(&self) -> ::std::option::Option<&crate::types::IcebergCompactionStrategy> {
        self.strategy.as_ref()
    }
}
impl IcebergCompactionSettings {
    /// Creates a new builder-style object to manufacture [`IcebergCompactionSettings`](crate::types::IcebergCompactionSettings).
    pub fn builder() -> crate::types::builders::IcebergCompactionSettingsBuilder {
        crate::types::builders::IcebergCompactionSettingsBuilder::default()
    }
}

/// A builder for [`IcebergCompactionSettings`](crate::types::IcebergCompactionSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IcebergCompactionSettingsBuilder {
    pub(crate) target_file_size_mb: ::std::option::Option<i32>,
    pub(crate) strategy: ::std::option::Option<crate::types::IcebergCompactionStrategy>,
}
impl IcebergCompactionSettingsBuilder {
    /// <p>The target file size for the table in MB.</p>
    pub fn target_file_size_mb(mut self, input: i32) -> Self {
        self.target_file_size_mb = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target file size for the table in MB.</p>
    pub fn set_target_file_size_mb(mut self, input: ::std::option::Option<i32>) -> Self {
        self.target_file_size_mb = input;
        self
    }
    /// <p>The target file size for the table in MB.</p>
    pub fn get_target_file_size_mb(&self) -> &::std::option::Option<i32> {
        &self.target_file_size_mb
    }
    /// <p>The compaction strategy to use for the table. This determines how files are selected and combined during compaction operations.</p>
    pub fn strategy(mut self, input: crate::types::IcebergCompactionStrategy) -> Self {
        self.strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The compaction strategy to use for the table. This determines how files are selected and combined during compaction operations.</p>
    pub fn set_strategy(mut self, input: ::std::option::Option<crate::types::IcebergCompactionStrategy>) -> Self {
        self.strategy = input;
        self
    }
    /// <p>The compaction strategy to use for the table. This determines how files are selected and combined during compaction operations.</p>
    pub fn get_strategy(&self) -> &::std::option::Option<crate::types::IcebergCompactionStrategy> {
        &self.strategy
    }
    /// Consumes the builder and constructs a [`IcebergCompactionSettings`](crate::types::IcebergCompactionSettings).
    pub fn build(self) -> crate::types::IcebergCompactionSettings {
        crate::types::IcebergCompactionSettings {
            target_file_size_mb: self.target_file_size_mb,
            strategy: self.strategy,
        }
    }
}
