// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the snapshot management settings for an Iceberg table. The oldest snapshot expires when its age exceeds the <code>maxSnapshotAgeHours</code> and the total number of snapshots exceeds the value for the minimum number of snapshots to keep <code>minSnapshotsToKeep</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IcebergSnapshotManagementSettings {
    /// <p>The minimum number of snapshots to keep.</p>
    pub min_snapshots_to_keep: ::std::option::Option<i32>,
    /// <p>The maximum age of a snapshot before it can be expired.</p>
    pub max_snapshot_age_hours: ::std::option::Option<i32>,
}
impl IcebergSnapshotManagementSettings {
    /// <p>The minimum number of snapshots to keep.</p>
    pub fn min_snapshots_to_keep(&self) -> ::std::option::Option<i32> {
        self.min_snapshots_to_keep
    }
    /// <p>The maximum age of a snapshot before it can be expired.</p>
    pub fn max_snapshot_age_hours(&self) -> ::std::option::Option<i32> {
        self.max_snapshot_age_hours
    }
}
impl IcebergSnapshotManagementSettings {
    /// Creates a new builder-style object to manufacture [`IcebergSnapshotManagementSettings`](crate::types::IcebergSnapshotManagementSettings).
    pub fn builder() -> crate::types::builders::IcebergSnapshotManagementSettingsBuilder {
        crate::types::builders::IcebergSnapshotManagementSettingsBuilder::default()
    }
}

/// A builder for [`IcebergSnapshotManagementSettings`](crate::types::IcebergSnapshotManagementSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IcebergSnapshotManagementSettingsBuilder {
    pub(crate) min_snapshots_to_keep: ::std::option::Option<i32>,
    pub(crate) max_snapshot_age_hours: ::std::option::Option<i32>,
}
impl IcebergSnapshotManagementSettingsBuilder {
    /// <p>The minimum number of snapshots to keep.</p>
    pub fn min_snapshots_to_keep(mut self, input: i32) -> Self {
        self.min_snapshots_to_keep = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum number of snapshots to keep.</p>
    pub fn set_min_snapshots_to_keep(mut self, input: ::std::option::Option<i32>) -> Self {
        self.min_snapshots_to_keep = input;
        self
    }
    /// <p>The minimum number of snapshots to keep.</p>
    pub fn get_min_snapshots_to_keep(&self) -> &::std::option::Option<i32> {
        &self.min_snapshots_to_keep
    }
    /// <p>The maximum age of a snapshot before it can be expired.</p>
    pub fn max_snapshot_age_hours(mut self, input: i32) -> Self {
        self.max_snapshot_age_hours = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum age of a snapshot before it can be expired.</p>
    pub fn set_max_snapshot_age_hours(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_snapshot_age_hours = input;
        self
    }
    /// <p>The maximum age of a snapshot before it can be expired.</p>
    pub fn get_max_snapshot_age_hours(&self) -> &::std::option::Option<i32> {
        &self.max_snapshot_age_hours
    }
    /// Consumes the builder and constructs a [`IcebergSnapshotManagementSettings`](crate::types::IcebergSnapshotManagementSettings).
    pub fn build(self) -> crate::types::IcebergSnapshotManagementSettings {
        crate::types::IcebergSnapshotManagementSettings {
            min_snapshots_to_keep: self.min_snapshots_to_keep,
            max_snapshot_age_hours: self.max_snapshot_age_hours,
        }
    }
}
