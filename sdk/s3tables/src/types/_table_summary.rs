// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about a table.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TableSummary {
    /// <p>The name of the namespace.</p>
    pub namespace: ::std::vec::Vec<::std::string::String>,
    /// <p>The name of the table.</p>
    pub name: ::std::string::String,
    /// <p>The type of the table.</p>
    pub r#type: crate::types::TableType,
    /// <p>The Amazon Resource Name (ARN) of the table.</p>
    pub table_arn: ::std::string::String,
    /// <p>The date and time the table was created at.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The date and time the table was last modified at.</p>
    pub modified_at: ::aws_smithy_types::DateTime,
    /// <p>The unique identifier for the namespace that contains this table.</p>
    pub namespace_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the table bucket that contains this table.</p>
    pub table_bucket_id: ::std::option::Option<::std::string::String>,
}
impl TableSummary {
    /// <p>The name of the namespace.</p>
    pub fn namespace(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.namespace.deref()
    }
    /// <p>The name of the table.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The type of the table.</p>
    pub fn r#type(&self) -> &crate::types::TableType {
        &self.r#type
    }
    /// <p>The Amazon Resource Name (ARN) of the table.</p>
    pub fn table_arn(&self) -> &str {
        use std::ops::Deref;
        self.table_arn.deref()
    }
    /// <p>The date and time the table was created at.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The date and time the table was last modified at.</p>
    pub fn modified_at(&self) -> &::aws_smithy_types::DateTime {
        &self.modified_at
    }
    /// <p>The unique identifier for the namespace that contains this table.</p>
    pub fn namespace_id(&self) -> ::std::option::Option<&str> {
        self.namespace_id.as_deref()
    }
    /// <p>The unique identifier for the table bucket that contains this table.</p>
    pub fn table_bucket_id(&self) -> ::std::option::Option<&str> {
        self.table_bucket_id.as_deref()
    }
}
impl TableSummary {
    /// Creates a new builder-style object to manufacture [`TableSummary`](crate::types::TableSummary).
    pub fn builder() -> crate::types::builders::TableSummaryBuilder {
        crate::types::builders::TableSummaryBuilder::default()
    }
}

/// A builder for [`TableSummary`](crate::types::TableSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TableSummaryBuilder {
    pub(crate) namespace: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::TableType>,
    pub(crate) table_arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) namespace_id: ::std::option::Option<::std::string::String>,
    pub(crate) table_bucket_id: ::std::option::Option<::std::string::String>,
}
impl TableSummaryBuilder {
    /// Appends an item to `namespace`.
    ///
    /// To override the contents of this collection use [`set_namespace`](Self::set_namespace).
    ///
    /// <p>The name of the namespace.</p>
    pub fn namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.namespace.unwrap_or_default();
        v.push(input.into());
        self.namespace = ::std::option::Option::Some(v);
        self
    }
    /// <p>The name of the namespace.</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The name of the namespace.</p>
    pub fn get_namespace(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.namespace
    }
    /// <p>The name of the table.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the table.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the table.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of the table.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::TableType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the table.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::TableType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the table.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::TableType> {
        &self.r#type
    }
    /// <p>The Amazon Resource Name (ARN) of the table.</p>
    /// This field is required.
    pub fn table_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the table.</p>
    pub fn set_table_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the table.</p>
    pub fn get_table_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_arn
    }
    /// <p>The date and time the table was created at.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the table was created at.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time the table was created at.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The date and time the table was last modified at.</p>
    /// This field is required.
    pub fn modified_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modified_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the table was last modified at.</p>
    pub fn set_modified_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modified_at = input;
        self
    }
    /// <p>The date and time the table was last modified at.</p>
    pub fn get_modified_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modified_at
    }
    /// <p>The unique identifier for the namespace that contains this table.</p>
    pub fn namespace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.namespace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the namespace that contains this table.</p>
    pub fn set_namespace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.namespace_id = input;
        self
    }
    /// <p>The unique identifier for the namespace that contains this table.</p>
    pub fn get_namespace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.namespace_id
    }
    /// <p>The unique identifier for the table bucket that contains this table.</p>
    pub fn table_bucket_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_bucket_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the table bucket that contains this table.</p>
    pub fn set_table_bucket_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_bucket_id = input;
        self
    }
    /// <p>The unique identifier for the table bucket that contains this table.</p>
    pub fn get_table_bucket_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_bucket_id
    }
    /// Consumes the builder and constructs a [`TableSummary`](crate::types::TableSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`namespace`](crate::types::builders::TableSummaryBuilder::namespace)
    /// - [`name`](crate::types::builders::TableSummaryBuilder::name)
    /// - [`r#type`](crate::types::builders::TableSummaryBuilder::type)
    /// - [`table_arn`](crate::types::builders::TableSummaryBuilder::table_arn)
    /// - [`created_at`](crate::types::builders::TableSummaryBuilder::created_at)
    /// - [`modified_at`](crate::types::builders::TableSummaryBuilder::modified_at)
    pub fn build(self) -> ::std::result::Result<crate::types::TableSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TableSummary {
            namespace: self.namespace.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "namespace",
                    "namespace was not specified but it is required when building TableSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building TableSummary",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building TableSummary",
                )
            })?,
            table_arn: self.table_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "table_arn",
                    "table_arn was not specified but it is required when building TableSummary",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building TableSummary",
                )
            })?,
            modified_at: self.modified_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "modified_at",
                    "modified_at was not specified but it is required when building TableSummary",
                )
            })?,
            namespace_id: self.namespace_id,
            table_bucket_id: self.table_bucket_id,
        })
    }
}
