// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RenameTableInput {
    /// <p>The Amazon Resource Name (ARN) of the table bucket.</p>
    pub table_bucket_arn: ::std::option::Option<::std::string::String>,
    /// <p>The namespace associated with the table.</p>
    pub namespace: ::std::option::Option<::std::string::String>,
    /// <p>The current name of the table.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The new name for the namespace.</p>
    pub new_namespace_name: ::std::option::Option<::std::string::String>,
    /// <p>The new name for the table.</p>
    pub new_name: ::std::option::Option<::std::string::String>,
    /// <p>The version token of the table.</p>
    pub version_token: ::std::option::Option<::std::string::String>,
}
impl RenameTableInput {
    /// <p>The Amazon Resource Name (ARN) of the table bucket.</p>
    pub fn table_bucket_arn(&self) -> ::std::option::Option<&str> {
        self.table_bucket_arn.as_deref()
    }
    /// <p>The namespace associated with the table.</p>
    pub fn namespace(&self) -> ::std::option::Option<&str> {
        self.namespace.as_deref()
    }
    /// <p>The current name of the table.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The new name for the namespace.</p>
    pub fn new_namespace_name(&self) -> ::std::option::Option<&str> {
        self.new_namespace_name.as_deref()
    }
    /// <p>The new name for the table.</p>
    pub fn new_name(&self) -> ::std::option::Option<&str> {
        self.new_name.as_deref()
    }
    /// <p>The version token of the table.</p>
    pub fn version_token(&self) -> ::std::option::Option<&str> {
        self.version_token.as_deref()
    }
}
impl RenameTableInput {
    /// Creates a new builder-style object to manufacture [`RenameTableInput`](crate::operation::rename_table::RenameTableInput).
    pub fn builder() -> crate::operation::rename_table::builders::RenameTableInputBuilder {
        crate::operation::rename_table::builders::RenameTableInputBuilder::default()
    }
}

/// A builder for [`RenameTableInput`](crate::operation::rename_table::RenameTableInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RenameTableInputBuilder {
    pub(crate) table_bucket_arn: ::std::option::Option<::std::string::String>,
    pub(crate) namespace: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) new_namespace_name: ::std::option::Option<::std::string::String>,
    pub(crate) new_name: ::std::option::Option<::std::string::String>,
    pub(crate) version_token: ::std::option::Option<::std::string::String>,
}
impl RenameTableInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the table bucket.</p>
    /// This field is required.
    pub fn table_bucket_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_bucket_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the table bucket.</p>
    pub fn set_table_bucket_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_bucket_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the table bucket.</p>
    pub fn get_table_bucket_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_bucket_arn
    }
    /// <p>The namespace associated with the table.</p>
    /// This field is required.
    pub fn namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.namespace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The namespace associated with the table.</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The namespace associated with the table.</p>
    pub fn get_namespace(&self) -> &::std::option::Option<::std::string::String> {
        &self.namespace
    }
    /// <p>The current name of the table.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current name of the table.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The current name of the table.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The new name for the namespace.</p>
    pub fn new_namespace_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.new_namespace_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new name for the namespace.</p>
    pub fn set_new_namespace_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.new_namespace_name = input;
        self
    }
    /// <p>The new name for the namespace.</p>
    pub fn get_new_namespace_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.new_namespace_name
    }
    /// <p>The new name for the table.</p>
    pub fn new_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.new_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new name for the table.</p>
    pub fn set_new_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.new_name = input;
        self
    }
    /// <p>The new name for the table.</p>
    pub fn get_new_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.new_name
    }
    /// <p>The version token of the table.</p>
    pub fn version_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version token of the table.</p>
    pub fn set_version_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_token = input;
        self
    }
    /// <p>The version token of the table.</p>
    pub fn get_version_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_token
    }
    /// Consumes the builder and constructs a [`RenameTableInput`](crate::operation::rename_table::RenameTableInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::rename_table::RenameTableInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::rename_table::RenameTableInput {
            table_bucket_arn: self.table_bucket_arn,
            namespace: self.namespace,
            name: self.name,
            new_namespace_name: self.new_namespace_name,
            new_name: self.new_name,
            version_token: self.version_token,
        })
    }
}
