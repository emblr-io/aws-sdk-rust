// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateTableMetadataLocationOutput {
    /// <p>The name of the table.</p>
    pub name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the table.</p>
    pub table_arn: ::std::string::String,
    /// <p>The namespace the table is associated with.</p>
    pub namespace: ::std::vec::Vec<::std::string::String>,
    /// <p>The version token of the table.</p>
    pub version_token: ::std::string::String,
    /// <p>The metadata location of the table.</p>
    pub metadata_location: ::std::string::String,
    _request_id: Option<String>,
}
impl UpdateTableMetadataLocationOutput {
    /// <p>The name of the table.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the table.</p>
    pub fn table_arn(&self) -> &str {
        use std::ops::Deref;
        self.table_arn.deref()
    }
    /// <p>The namespace the table is associated with.</p>
    pub fn namespace(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.namespace.deref()
    }
    /// <p>The version token of the table.</p>
    pub fn version_token(&self) -> &str {
        use std::ops::Deref;
        self.version_token.deref()
    }
    /// <p>The metadata location of the table.</p>
    pub fn metadata_location(&self) -> &str {
        use std::ops::Deref;
        self.metadata_location.deref()
    }
}
impl ::aws_types::request_id::RequestId for UpdateTableMetadataLocationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateTableMetadataLocationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateTableMetadataLocationOutput`](crate::operation::update_table_metadata_location::UpdateTableMetadataLocationOutput).
    pub fn builder() -> crate::operation::update_table_metadata_location::builders::UpdateTableMetadataLocationOutputBuilder {
        crate::operation::update_table_metadata_location::builders::UpdateTableMetadataLocationOutputBuilder::default()
    }
}

/// A builder for [`UpdateTableMetadataLocationOutput`](crate::operation::update_table_metadata_location::UpdateTableMetadataLocationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateTableMetadataLocationOutputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) table_arn: ::std::option::Option<::std::string::String>,
    pub(crate) namespace: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) version_token: ::std::option::Option<::std::string::String>,
    pub(crate) metadata_location: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl UpdateTableMetadataLocationOutputBuilder {
    /// <p>The name of the table.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the table.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the table.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the table.</p>
    /// This field is required.
    pub fn table_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the table.</p>
    pub fn set_table_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the table.</p>
    pub fn get_table_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_arn
    }
    /// Appends an item to `namespace`.
    ///
    /// To override the contents of this collection use [`set_namespace`](Self::set_namespace).
    ///
    /// <p>The namespace the table is associated with.</p>
    pub fn namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.namespace.unwrap_or_default();
        v.push(input.into());
        self.namespace = ::std::option::Option::Some(v);
        self
    }
    /// <p>The namespace the table is associated with.</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The namespace the table is associated with.</p>
    pub fn get_namespace(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.namespace
    }
    /// <p>The version token of the table.</p>
    /// This field is required.
    pub fn version_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version token of the table.</p>
    pub fn set_version_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_token = input;
        self
    }
    /// <p>The version token of the table.</p>
    pub fn get_version_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_token
    }
    /// <p>The metadata location of the table.</p>
    /// This field is required.
    pub fn metadata_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metadata_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The metadata location of the table.</p>
    pub fn set_metadata_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metadata_location = input;
        self
    }
    /// <p>The metadata location of the table.</p>
    pub fn get_metadata_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.metadata_location
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateTableMetadataLocationOutput`](crate::operation::update_table_metadata_location::UpdateTableMetadataLocationOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::operation::update_table_metadata_location::builders::UpdateTableMetadataLocationOutputBuilder::name)
    /// - [`table_arn`](crate::operation::update_table_metadata_location::builders::UpdateTableMetadataLocationOutputBuilder::table_arn)
    /// - [`namespace`](crate::operation::update_table_metadata_location::builders::UpdateTableMetadataLocationOutputBuilder::namespace)
    /// - [`version_token`](crate::operation::update_table_metadata_location::builders::UpdateTableMetadataLocationOutputBuilder::version_token)
    /// - [`metadata_location`](crate::operation::update_table_metadata_location::builders::UpdateTableMetadataLocationOutputBuilder::metadata_location)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_table_metadata_location::UpdateTableMetadataLocationOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_table_metadata_location::UpdateTableMetadataLocationOutput {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building UpdateTableMetadataLocationOutput",
                )
            })?,
            table_arn: self.table_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "table_arn",
                    "table_arn was not specified but it is required when building UpdateTableMetadataLocationOutput",
                )
            })?,
            namespace: self.namespace.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "namespace",
                    "namespace was not specified but it is required when building UpdateTableMetadataLocationOutput",
                )
            })?,
            version_token: self.version_token.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "version_token",
                    "version_token was not specified but it is required when building UpdateTableMetadataLocationOutput",
                )
            })?,
            metadata_location: self.metadata_location.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metadata_location",
                    "metadata_location was not specified but it is required when building UpdateTableMetadataLocationOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
