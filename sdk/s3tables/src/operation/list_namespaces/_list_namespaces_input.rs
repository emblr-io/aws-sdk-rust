// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListNamespacesInput {
    /// <p>The Amazon Resource Name (ARN) of the table bucket.</p>
    pub table_bucket_arn: ::std::option::Option<::std::string::String>,
    /// <p>The prefix of the namespaces.</p>
    pub prefix: ::std::option::Option<::std::string::String>,
    /// <p><code>ContinuationToken</code> indicates to Amazon S3 that the list is being continued on this bucket with a token. <code>ContinuationToken</code> is obfuscated and is not a real key. You can use this <code>ContinuationToken</code> for pagination of the list results.</p>
    pub continuation_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of namespaces to return in the list.</p>
    pub max_namespaces: ::std::option::Option<i32>,
}
impl ListNamespacesInput {
    /// <p>The Amazon Resource Name (ARN) of the table bucket.</p>
    pub fn table_bucket_arn(&self) -> ::std::option::Option<&str> {
        self.table_bucket_arn.as_deref()
    }
    /// <p>The prefix of the namespaces.</p>
    pub fn prefix(&self) -> ::std::option::Option<&str> {
        self.prefix.as_deref()
    }
    /// <p><code>ContinuationToken</code> indicates to Amazon S3 that the list is being continued on this bucket with a token. <code>ContinuationToken</code> is obfuscated and is not a real key. You can use this <code>ContinuationToken</code> for pagination of the list results.</p>
    pub fn continuation_token(&self) -> ::std::option::Option<&str> {
        self.continuation_token.as_deref()
    }
    /// <p>The maximum number of namespaces to return in the list.</p>
    pub fn max_namespaces(&self) -> ::std::option::Option<i32> {
        self.max_namespaces
    }
}
impl ListNamespacesInput {
    /// Creates a new builder-style object to manufacture [`ListNamespacesInput`](crate::operation::list_namespaces::ListNamespacesInput).
    pub fn builder() -> crate::operation::list_namespaces::builders::ListNamespacesInputBuilder {
        crate::operation::list_namespaces::builders::ListNamespacesInputBuilder::default()
    }
}

/// A builder for [`ListNamespacesInput`](crate::operation::list_namespaces::ListNamespacesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListNamespacesInputBuilder {
    pub(crate) table_bucket_arn: ::std::option::Option<::std::string::String>,
    pub(crate) prefix: ::std::option::Option<::std::string::String>,
    pub(crate) continuation_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_namespaces: ::std::option::Option<i32>,
}
impl ListNamespacesInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the table bucket.</p>
    /// This field is required.
    pub fn table_bucket_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_bucket_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the table bucket.</p>
    pub fn set_table_bucket_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_bucket_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the table bucket.</p>
    pub fn get_table_bucket_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_bucket_arn
    }
    /// <p>The prefix of the namespaces.</p>
    pub fn prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The prefix of the namespaces.</p>
    pub fn set_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prefix = input;
        self
    }
    /// <p>The prefix of the namespaces.</p>
    pub fn get_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.prefix
    }
    /// <p><code>ContinuationToken</code> indicates to Amazon S3 that the list is being continued on this bucket with a token. <code>ContinuationToken</code> is obfuscated and is not a real key. You can use this <code>ContinuationToken</code> for pagination of the list results.</p>
    pub fn continuation_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.continuation_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p><code>ContinuationToken</code> indicates to Amazon S3 that the list is being continued on this bucket with a token. <code>ContinuationToken</code> is obfuscated and is not a real key. You can use this <code>ContinuationToken</code> for pagination of the list results.</p>
    pub fn set_continuation_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.continuation_token = input;
        self
    }
    /// <p><code>ContinuationToken</code> indicates to Amazon S3 that the list is being continued on this bucket with a token. <code>ContinuationToken</code> is obfuscated and is not a real key. You can use this <code>ContinuationToken</code> for pagination of the list results.</p>
    pub fn get_continuation_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.continuation_token
    }
    /// <p>The maximum number of namespaces to return in the list.</p>
    pub fn max_namespaces(mut self, input: i32) -> Self {
        self.max_namespaces = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of namespaces to return in the list.</p>
    pub fn set_max_namespaces(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_namespaces = input;
        self
    }
    /// <p>The maximum number of namespaces to return in the list.</p>
    pub fn get_max_namespaces(&self) -> &::std::option::Option<i32> {
        &self.max_namespaces
    }
    /// Consumes the builder and constructs a [`ListNamespacesInput`](crate::operation::list_namespaces::ListNamespacesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_namespaces::ListNamespacesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_namespaces::ListNamespacesInput {
            table_bucket_arn: self.table_bucket_arn,
            prefix: self.prefix,
            continuation_token: self.continuation_token,
            max_namespaces: self.max_namespaces,
        })
    }
}
