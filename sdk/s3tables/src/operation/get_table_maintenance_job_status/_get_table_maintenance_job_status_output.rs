// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTableMaintenanceJobStatusOutput {
    /// <p>The Amazon Resource Name (ARN) of the table.</p>
    pub table_arn: ::std::string::String,
    /// <p>The status of the maintenance job.</p>
    pub status: ::std::collections::HashMap<crate::types::TableMaintenanceJobType, crate::types::TableMaintenanceJobStatusValue>,
    _request_id: Option<String>,
}
impl GetTableMaintenanceJobStatusOutput {
    /// <p>The Amazon Resource Name (ARN) of the table.</p>
    pub fn table_arn(&self) -> &str {
        use std::ops::Deref;
        self.table_arn.deref()
    }
    /// <p>The status of the maintenance job.</p>
    pub fn status(&self) -> &::std::collections::HashMap<crate::types::TableMaintenanceJobType, crate::types::TableMaintenanceJobStatusValue> {
        &self.status
    }
}
impl ::aws_types::request_id::RequestId for GetTableMaintenanceJobStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTableMaintenanceJobStatusOutput {
    /// Creates a new builder-style object to manufacture [`GetTableMaintenanceJobStatusOutput`](crate::operation::get_table_maintenance_job_status::GetTableMaintenanceJobStatusOutput).
    pub fn builder() -> crate::operation::get_table_maintenance_job_status::builders::GetTableMaintenanceJobStatusOutputBuilder {
        crate::operation::get_table_maintenance_job_status::builders::GetTableMaintenanceJobStatusOutputBuilder::default()
    }
}

/// A builder for [`GetTableMaintenanceJobStatusOutput`](crate::operation::get_table_maintenance_job_status::GetTableMaintenanceJobStatusOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetTableMaintenanceJobStatusOutputBuilder {
    pub(crate) table_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status:
        ::std::option::Option<::std::collections::HashMap<crate::types::TableMaintenanceJobType, crate::types::TableMaintenanceJobStatusValue>>,
    _request_id: Option<String>,
}
impl GetTableMaintenanceJobStatusOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the table.</p>
    /// This field is required.
    pub fn table_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the table.</p>
    pub fn set_table_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the table.</p>
    pub fn get_table_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_arn
    }
    /// Adds a key-value pair to `status`.
    ///
    /// To override the contents of this collection use [`set_status`](Self::set_status).
    ///
    /// <p>The status of the maintenance job.</p>
    pub fn status(mut self, k: crate::types::TableMaintenanceJobType, v: crate::types::TableMaintenanceJobStatusValue) -> Self {
        let mut hash_map = self.status.unwrap_or_default();
        hash_map.insert(k, v);
        self.status = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The status of the maintenance job.</p>
    pub fn set_status(
        mut self,
        input: ::std::option::Option<
            ::std::collections::HashMap<crate::types::TableMaintenanceJobType, crate::types::TableMaintenanceJobStatusValue>,
        >,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the maintenance job.</p>
    pub fn get_status(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<crate::types::TableMaintenanceJobType, crate::types::TableMaintenanceJobStatusValue>>
    {
        &self.status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetTableMaintenanceJobStatusOutput`](crate::operation::get_table_maintenance_job_status::GetTableMaintenanceJobStatusOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`table_arn`](crate::operation::get_table_maintenance_job_status::builders::GetTableMaintenanceJobStatusOutputBuilder::table_arn)
    /// - [`status`](crate::operation::get_table_maintenance_job_status::builders::GetTableMaintenanceJobStatusOutputBuilder::status)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_table_maintenance_job_status::GetTableMaintenanceJobStatusOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_table_maintenance_job_status::GetTableMaintenanceJobStatusOutput {
            table_arn: self.table_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "table_arn",
                    "table_arn was not specified but it is required when building GetTableMaintenanceJobStatusOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetTableMaintenanceJobStatusOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
