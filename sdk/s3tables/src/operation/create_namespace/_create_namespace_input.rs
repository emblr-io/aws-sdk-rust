// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateNamespaceInput {
    /// <p>The Amazon Resource Name (ARN) of the table bucket to create the namespace in.</p>
    pub table_bucket_arn: ::std::option::Option<::std::string::String>,
    /// <p>A name for the namespace.</p>
    pub namespace: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CreateNamespaceInput {
    /// <p>The Amazon Resource Name (ARN) of the table bucket to create the namespace in.</p>
    pub fn table_bucket_arn(&self) -> ::std::option::Option<&str> {
        self.table_bucket_arn.as_deref()
    }
    /// <p>A name for the namespace.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.namespace.is_none()`.
    pub fn namespace(&self) -> &[::std::string::String] {
        self.namespace.as_deref().unwrap_or_default()
    }
}
impl CreateNamespaceInput {
    /// Creates a new builder-style object to manufacture [`CreateNamespaceInput`](crate::operation::create_namespace::CreateNamespaceInput).
    pub fn builder() -> crate::operation::create_namespace::builders::CreateNamespaceInputBuilder {
        crate::operation::create_namespace::builders::CreateNamespaceInputBuilder::default()
    }
}

/// A builder for [`CreateNamespaceInput`](crate::operation::create_namespace::CreateNamespaceInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateNamespaceInputBuilder {
    pub(crate) table_bucket_arn: ::std::option::Option<::std::string::String>,
    pub(crate) namespace: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CreateNamespaceInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the table bucket to create the namespace in.</p>
    /// This field is required.
    pub fn table_bucket_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_bucket_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the table bucket to create the namespace in.</p>
    pub fn set_table_bucket_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_bucket_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the table bucket to create the namespace in.</p>
    pub fn get_table_bucket_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_bucket_arn
    }
    /// Appends an item to `namespace`.
    ///
    /// To override the contents of this collection use [`set_namespace`](Self::set_namespace).
    ///
    /// <p>A name for the namespace.</p>
    pub fn namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.namespace.unwrap_or_default();
        v.push(input.into());
        self.namespace = ::std::option::Option::Some(v);
        self
    }
    /// <p>A name for the namespace.</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>A name for the namespace.</p>
    pub fn get_namespace(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.namespace
    }
    /// Consumes the builder and constructs a [`CreateNamespaceInput`](crate::operation::create_namespace::CreateNamespaceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_namespace::CreateNamespaceInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_namespace::CreateNamespaceInput {
            table_bucket_arn: self.table_bucket_arn,
            namespace: self.namespace,
        })
    }
}
