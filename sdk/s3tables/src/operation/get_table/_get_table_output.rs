// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTableOutput {
    /// <p>The name of the table.</p>
    pub name: ::std::string::String,
    /// <p>The type of the table.</p>
    pub r#type: crate::types::TableType,
    /// <p>The Amazon Resource Name (ARN) of the table.</p>
    pub table_arn: ::std::string::String,
    /// <p>The namespace associated with the table.</p>
    pub namespace: ::std::vec::Vec<::std::string::String>,
    /// <p>The unique identifier of the namespace containing this table.</p>
    pub namespace_id: ::std::option::Option<::std::string::String>,
    /// <p>The version token of the table.</p>
    pub version_token: ::std::string::String,
    /// <p>The metadata location of the table.</p>
    pub metadata_location: ::std::option::Option<::std::string::String>,
    /// <p>The warehouse location of the table.</p>
    pub warehouse_location: ::std::string::String,
    /// <p>The date and time the table bucket was created at.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The ID of the account that created the table.</p>
    pub created_by: ::std::string::String,
    /// <p>The service that manages the table.</p>
    pub managed_by_service: ::std::option::Option<::std::string::String>,
    /// <p>The date and time the table was last modified on.</p>
    pub modified_at: ::aws_smithy_types::DateTime,
    /// <p>The ID of the account that last modified the table.</p>
    pub modified_by: ::std::string::String,
    /// <p>The ID of the account that owns the table.</p>
    pub owner_account_id: ::std::string::String,
    /// <p>The format of the table.</p>
    pub format: crate::types::OpenTableFormat,
    /// <p>The unique identifier of the table bucket containing this table.</p>
    pub table_bucket_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetTableOutput {
    /// <p>The name of the table.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The type of the table.</p>
    pub fn r#type(&self) -> &crate::types::TableType {
        &self.r#type
    }
    /// <p>The Amazon Resource Name (ARN) of the table.</p>
    pub fn table_arn(&self) -> &str {
        use std::ops::Deref;
        self.table_arn.deref()
    }
    /// <p>The namespace associated with the table.</p>
    pub fn namespace(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.namespace.deref()
    }
    /// <p>The unique identifier of the namespace containing this table.</p>
    pub fn namespace_id(&self) -> ::std::option::Option<&str> {
        self.namespace_id.as_deref()
    }
    /// <p>The version token of the table.</p>
    pub fn version_token(&self) -> &str {
        use std::ops::Deref;
        self.version_token.deref()
    }
    /// <p>The metadata location of the table.</p>
    pub fn metadata_location(&self) -> ::std::option::Option<&str> {
        self.metadata_location.as_deref()
    }
    /// <p>The warehouse location of the table.</p>
    pub fn warehouse_location(&self) -> &str {
        use std::ops::Deref;
        self.warehouse_location.deref()
    }
    /// <p>The date and time the table bucket was created at.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The ID of the account that created the table.</p>
    pub fn created_by(&self) -> &str {
        use std::ops::Deref;
        self.created_by.deref()
    }
    /// <p>The service that manages the table.</p>
    pub fn managed_by_service(&self) -> ::std::option::Option<&str> {
        self.managed_by_service.as_deref()
    }
    /// <p>The date and time the table was last modified on.</p>
    pub fn modified_at(&self) -> &::aws_smithy_types::DateTime {
        &self.modified_at
    }
    /// <p>The ID of the account that last modified the table.</p>
    pub fn modified_by(&self) -> &str {
        use std::ops::Deref;
        self.modified_by.deref()
    }
    /// <p>The ID of the account that owns the table.</p>
    pub fn owner_account_id(&self) -> &str {
        use std::ops::Deref;
        self.owner_account_id.deref()
    }
    /// <p>The format of the table.</p>
    pub fn format(&self) -> &crate::types::OpenTableFormat {
        &self.format
    }
    /// <p>The unique identifier of the table bucket containing this table.</p>
    pub fn table_bucket_id(&self) -> ::std::option::Option<&str> {
        self.table_bucket_id.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTableOutput {
    /// Creates a new builder-style object to manufacture [`GetTableOutput`](crate::operation::get_table::GetTableOutput).
    pub fn builder() -> crate::operation::get_table::builders::GetTableOutputBuilder {
        crate::operation::get_table::builders::GetTableOutputBuilder::default()
    }
}

/// A builder for [`GetTableOutput`](crate::operation::get_table::GetTableOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetTableOutputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::TableType>,
    pub(crate) table_arn: ::std::option::Option<::std::string::String>,
    pub(crate) namespace: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) namespace_id: ::std::option::Option<::std::string::String>,
    pub(crate) version_token: ::std::option::Option<::std::string::String>,
    pub(crate) metadata_location: ::std::option::Option<::std::string::String>,
    pub(crate) warehouse_location: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) managed_by_service: ::std::option::Option<::std::string::String>,
    pub(crate) modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) modified_by: ::std::option::Option<::std::string::String>,
    pub(crate) owner_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) format: ::std::option::Option<crate::types::OpenTableFormat>,
    pub(crate) table_bucket_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetTableOutputBuilder {
    /// <p>The name of the table.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the table.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the table.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of the table.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::TableType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the table.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::TableType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the table.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::TableType> {
        &self.r#type
    }
    /// <p>The Amazon Resource Name (ARN) of the table.</p>
    /// This field is required.
    pub fn table_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the table.</p>
    pub fn set_table_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the table.</p>
    pub fn get_table_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_arn
    }
    /// Appends an item to `namespace`.
    ///
    /// To override the contents of this collection use [`set_namespace`](Self::set_namespace).
    ///
    /// <p>The namespace associated with the table.</p>
    pub fn namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.namespace.unwrap_or_default();
        v.push(input.into());
        self.namespace = ::std::option::Option::Some(v);
        self
    }
    /// <p>The namespace associated with the table.</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The namespace associated with the table.</p>
    pub fn get_namespace(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.namespace
    }
    /// <p>The unique identifier of the namespace containing this table.</p>
    pub fn namespace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.namespace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the namespace containing this table.</p>
    pub fn set_namespace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.namespace_id = input;
        self
    }
    /// <p>The unique identifier of the namespace containing this table.</p>
    pub fn get_namespace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.namespace_id
    }
    /// <p>The version token of the table.</p>
    /// This field is required.
    pub fn version_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version token of the table.</p>
    pub fn set_version_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_token = input;
        self
    }
    /// <p>The version token of the table.</p>
    pub fn get_version_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_token
    }
    /// <p>The metadata location of the table.</p>
    pub fn metadata_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metadata_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The metadata location of the table.</p>
    pub fn set_metadata_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metadata_location = input;
        self
    }
    /// <p>The metadata location of the table.</p>
    pub fn get_metadata_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.metadata_location
    }
    /// <p>The warehouse location of the table.</p>
    /// This field is required.
    pub fn warehouse_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.warehouse_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The warehouse location of the table.</p>
    pub fn set_warehouse_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.warehouse_location = input;
        self
    }
    /// <p>The warehouse location of the table.</p>
    pub fn get_warehouse_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.warehouse_location
    }
    /// <p>The date and time the table bucket was created at.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the table bucket was created at.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time the table bucket was created at.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The ID of the account that created the table.</p>
    /// This field is required.
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the account that created the table.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The ID of the account that created the table.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The service that manages the table.</p>
    pub fn managed_by_service(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.managed_by_service = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The service that manages the table.</p>
    pub fn set_managed_by_service(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.managed_by_service = input;
        self
    }
    /// <p>The service that manages the table.</p>
    pub fn get_managed_by_service(&self) -> &::std::option::Option<::std::string::String> {
        &self.managed_by_service
    }
    /// <p>The date and time the table was last modified on.</p>
    /// This field is required.
    pub fn modified_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modified_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the table was last modified on.</p>
    pub fn set_modified_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modified_at = input;
        self
    }
    /// <p>The date and time the table was last modified on.</p>
    pub fn get_modified_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modified_at
    }
    /// <p>The ID of the account that last modified the table.</p>
    /// This field is required.
    pub fn modified_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.modified_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the account that last modified the table.</p>
    pub fn set_modified_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.modified_by = input;
        self
    }
    /// <p>The ID of the account that last modified the table.</p>
    pub fn get_modified_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.modified_by
    }
    /// <p>The ID of the account that owns the table.</p>
    /// This field is required.
    pub fn owner_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the account that owns the table.</p>
    pub fn set_owner_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_account_id = input;
        self
    }
    /// <p>The ID of the account that owns the table.</p>
    pub fn get_owner_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_account_id
    }
    /// <p>The format of the table.</p>
    /// This field is required.
    pub fn format(mut self, input: crate::types::OpenTableFormat) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format of the table.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::OpenTableFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>The format of the table.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::OpenTableFormat> {
        &self.format
    }
    /// <p>The unique identifier of the table bucket containing this table.</p>
    pub fn table_bucket_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_bucket_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the table bucket containing this table.</p>
    pub fn set_table_bucket_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_bucket_id = input;
        self
    }
    /// <p>The unique identifier of the table bucket containing this table.</p>
    pub fn get_table_bucket_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_bucket_id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetTableOutput`](crate::operation::get_table::GetTableOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::operation::get_table::builders::GetTableOutputBuilder::name)
    /// - [`r#type`](crate::operation::get_table::builders::GetTableOutputBuilder::type)
    /// - [`table_arn`](crate::operation::get_table::builders::GetTableOutputBuilder::table_arn)
    /// - [`namespace`](crate::operation::get_table::builders::GetTableOutputBuilder::namespace)
    /// - [`version_token`](crate::operation::get_table::builders::GetTableOutputBuilder::version_token)
    /// - [`warehouse_location`](crate::operation::get_table::builders::GetTableOutputBuilder::warehouse_location)
    /// - [`created_at`](crate::operation::get_table::builders::GetTableOutputBuilder::created_at)
    /// - [`created_by`](crate::operation::get_table::builders::GetTableOutputBuilder::created_by)
    /// - [`modified_at`](crate::operation::get_table::builders::GetTableOutputBuilder::modified_at)
    /// - [`modified_by`](crate::operation::get_table::builders::GetTableOutputBuilder::modified_by)
    /// - [`owner_account_id`](crate::operation::get_table::builders::GetTableOutputBuilder::owner_account_id)
    /// - [`format`](crate::operation::get_table::builders::GetTableOutputBuilder::format)
    pub fn build(self) -> ::std::result::Result<crate::operation::get_table::GetTableOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_table::GetTableOutput {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GetTableOutput",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building GetTableOutput",
                )
            })?,
            table_arn: self.table_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "table_arn",
                    "table_arn was not specified but it is required when building GetTableOutput",
                )
            })?,
            namespace: self.namespace.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "namespace",
                    "namespace was not specified but it is required when building GetTableOutput",
                )
            })?,
            namespace_id: self.namespace_id,
            version_token: self.version_token.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "version_token",
                    "version_token was not specified but it is required when building GetTableOutput",
                )
            })?,
            metadata_location: self.metadata_location,
            warehouse_location: self.warehouse_location.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "warehouse_location",
                    "warehouse_location was not specified but it is required when building GetTableOutput",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building GetTableOutput",
                )
            })?,
            created_by: self.created_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_by",
                    "created_by was not specified but it is required when building GetTableOutput",
                )
            })?,
            managed_by_service: self.managed_by_service,
            modified_at: self.modified_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "modified_at",
                    "modified_at was not specified but it is required when building GetTableOutput",
                )
            })?,
            modified_by: self.modified_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "modified_by",
                    "modified_by was not specified but it is required when building GetTableOutput",
                )
            })?,
            owner_account_id: self.owner_account_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "owner_account_id",
                    "owner_account_id was not specified but it is required when building GetTableOutput",
                )
            })?,
            format: self.format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "format",
                    "format was not specified but it is required when building GetTableOutput",
                )
            })?,
            table_bucket_id: self.table_bucket_id,
            _request_id: self._request_id,
        })
    }
}
