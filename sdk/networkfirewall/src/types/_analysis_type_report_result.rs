// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The results of a <code>COMPLETED</code> analysis report generated with <code>StartAnalysisReport</code>.</p>
/// <p>For an example of traffic analysis report results, see the response syntax of <code>GetAnalysisReportResults</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalysisTypeReportResult {
    /// <p>The type of traffic captured by the analysis report.</p>
    pub protocol: ::std::option::Option<::std::string::String>,
    /// <p>The date and time any domain was first accessed (within the last 30 day period).</p>
    pub first_accessed: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time any domain was last accessed (within the last 30 day period).</p>
    pub last_accessed: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The most frequently accessed domains.</p>
    pub domain: ::std::option::Option<::std::string::String>,
    /// <p>The number of attempts made to access a observed domain.</p>
    pub hits: ::std::option::Option<crate::types::Hits>,
    /// <p>The number of unique source IP addresses that connected to a domain.</p>
    pub unique_sources: ::std::option::Option<crate::types::UniqueSources>,
}
impl AnalysisTypeReportResult {
    /// <p>The type of traffic captured by the analysis report.</p>
    pub fn protocol(&self) -> ::std::option::Option<&str> {
        self.protocol.as_deref()
    }
    /// <p>The date and time any domain was first accessed (within the last 30 day period).</p>
    pub fn first_accessed(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.first_accessed.as_ref()
    }
    /// <p>The date and time any domain was last accessed (within the last 30 day period).</p>
    pub fn last_accessed(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_accessed.as_ref()
    }
    /// <p>The most frequently accessed domains.</p>
    pub fn domain(&self) -> ::std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The number of attempts made to access a observed domain.</p>
    pub fn hits(&self) -> ::std::option::Option<&crate::types::Hits> {
        self.hits.as_ref()
    }
    /// <p>The number of unique source IP addresses that connected to a domain.</p>
    pub fn unique_sources(&self) -> ::std::option::Option<&crate::types::UniqueSources> {
        self.unique_sources.as_ref()
    }
}
impl AnalysisTypeReportResult {
    /// Creates a new builder-style object to manufacture [`AnalysisTypeReportResult`](crate::types::AnalysisTypeReportResult).
    pub fn builder() -> crate::types::builders::AnalysisTypeReportResultBuilder {
        crate::types::builders::AnalysisTypeReportResultBuilder::default()
    }
}

/// A builder for [`AnalysisTypeReportResult`](crate::types::AnalysisTypeReportResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AnalysisTypeReportResultBuilder {
    pub(crate) protocol: ::std::option::Option<::std::string::String>,
    pub(crate) first_accessed: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_accessed: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) hits: ::std::option::Option<crate::types::Hits>,
    pub(crate) unique_sources: ::std::option::Option<crate::types::UniqueSources>,
}
impl AnalysisTypeReportResultBuilder {
    /// <p>The type of traffic captured by the analysis report.</p>
    pub fn protocol(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.protocol = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of traffic captured by the analysis report.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The type of traffic captured by the analysis report.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<::std::string::String> {
        &self.protocol
    }
    /// <p>The date and time any domain was first accessed (within the last 30 day period).</p>
    pub fn first_accessed(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.first_accessed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time any domain was first accessed (within the last 30 day period).</p>
    pub fn set_first_accessed(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.first_accessed = input;
        self
    }
    /// <p>The date and time any domain was first accessed (within the last 30 day period).</p>
    pub fn get_first_accessed(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.first_accessed
    }
    /// <p>The date and time any domain was last accessed (within the last 30 day period).</p>
    pub fn last_accessed(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_accessed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time any domain was last accessed (within the last 30 day period).</p>
    pub fn set_last_accessed(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_accessed = input;
        self
    }
    /// <p>The date and time any domain was last accessed (within the last 30 day period).</p>
    pub fn get_last_accessed(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_accessed
    }
    /// <p>The most frequently accessed domains.</p>
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The most frequently accessed domains.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The most frequently accessed domains.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>The number of attempts made to access a observed domain.</p>
    pub fn hits(mut self, input: crate::types::Hits) -> Self {
        self.hits = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of attempts made to access a observed domain.</p>
    pub fn set_hits(mut self, input: ::std::option::Option<crate::types::Hits>) -> Self {
        self.hits = input;
        self
    }
    /// <p>The number of attempts made to access a observed domain.</p>
    pub fn get_hits(&self) -> &::std::option::Option<crate::types::Hits> {
        &self.hits
    }
    /// <p>The number of unique source IP addresses that connected to a domain.</p>
    pub fn unique_sources(mut self, input: crate::types::UniqueSources) -> Self {
        self.unique_sources = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of unique source IP addresses that connected to a domain.</p>
    pub fn set_unique_sources(mut self, input: ::std::option::Option<crate::types::UniqueSources>) -> Self {
        self.unique_sources = input;
        self
    }
    /// <p>The number of unique source IP addresses that connected to a domain.</p>
    pub fn get_unique_sources(&self) -> &::std::option::Option<crate::types::UniqueSources> {
        &self.unique_sources
    }
    /// Consumes the builder and constructs a [`AnalysisTypeReportResult`](crate::types::AnalysisTypeReportResult).
    pub fn build(self) -> crate::types::AnalysisTypeReportResult {
        crate::types::AnalysisTypeReportResult {
            protocol: self.protocol,
            first_accessed: self.first_accessed,
            last_accessed: self.last_accessed,
            domain: self.domain,
            hits: self.hits,
            unique_sources: self.unique_sources,
        }
    }
}
