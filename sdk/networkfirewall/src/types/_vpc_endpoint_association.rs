// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A VPC endpoint association defines a single subnet to use for a firewall endpoint for a <code>Firewall</code>. You can define VPC endpoint associations only in the Availability Zones that already have a subnet mapping defined in the <code>Firewall</code> resource.</p><note>
/// <p>You can retrieve the list of Availability Zones that are available for use by calling <code>DescribeFirewallMetadata</code>.</p>
/// </note>
/// <p>To manage firewall endpoints, first, in the <code>Firewall</code> specification, you specify a single VPC and one subnet for each of the Availability Zones where you want to use the firewall. Then you can define additional endpoints as VPC endpoint associations.</p>
/// <p>You can use VPC endpoint associations to expand the protections of the firewall as follows:</p>
/// <ul>
/// <li>
/// <p><b>Protect multiple VPCs with a single firewall</b> - You can use the firewall to protect other VPCs, either in your account or in accounts where the firewall is shared. You can only specify Availability Zones that already have a firewall endpoint defined in the <code>Firewall</code> subnet mappings.</p></li>
/// <li>
/// <p><b>Define multiple firewall endpoints for a VPC in an Availability Zone</b> - You can create additional firewall endpoints for the VPC that you have defined in the firewall, in any Availability Zone that already has an endpoint defined in the <code>Firewall</code> subnet mappings. You can create multiple VPC endpoint associations for any other VPC where you use the firewall.</p></li>
/// </ul>
/// <p>You can use Resource Access Manager to share a <code>Firewall</code> that you own with other accounts, which gives them the ability to use the firewall to create VPC endpoint associations. For information about sharing a firewall, see <code>PutResourcePolicy</code> in this guide and see <a href="https://docs.aws.amazon.com/network-firewall/latest/developerguide/sharing.html">Sharing Network Firewall resources</a> in the <i>Network Firewall Developer Guide</i>.</p>
/// <p>The status of the VPC endpoint association, which indicates whether it's ready to filter network traffic, is provided in the corresponding <code>VpcEndpointAssociationStatus</code>. You can retrieve both the association and its status by calling <code>DescribeVpcEndpointAssociation</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VpcEndpointAssociation {
    /// <p>The unique identifier of the VPC endpoint association.</p>
    pub vpc_endpoint_association_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of a VPC endpoint association.</p>
    pub vpc_endpoint_association_arn: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    pub firewall_arn: ::std::string::String,
    /// <p>The unique identifier of the VPC for the endpoint association.</p>
    pub vpc_id: ::std::string::String,
    /// <p>The ID for a subnet that's used in an association with a firewall. This is used in <code>CreateFirewall</code>, <code>AssociateSubnets</code>, and <code>CreateVpcEndpointAssociation</code>. Network Firewall creates an instance of the associated firewall in each subnet that you specify, to filter traffic in the subnet's Availability Zone.</p>
    pub subnet_mapping: ::std::option::Option<crate::types::SubnetMapping>,
    /// <p>A description of the VPC endpoint association.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The key:value pairs to associate with the resource.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl VpcEndpointAssociation {
    /// <p>The unique identifier of the VPC endpoint association.</p>
    pub fn vpc_endpoint_association_id(&self) -> ::std::option::Option<&str> {
        self.vpc_endpoint_association_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of a VPC endpoint association.</p>
    pub fn vpc_endpoint_association_arn(&self) -> &str {
        use std::ops::Deref;
        self.vpc_endpoint_association_arn.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    pub fn firewall_arn(&self) -> &str {
        use std::ops::Deref;
        self.firewall_arn.deref()
    }
    /// <p>The unique identifier of the VPC for the endpoint association.</p>
    pub fn vpc_id(&self) -> &str {
        use std::ops::Deref;
        self.vpc_id.deref()
    }
    /// <p>The ID for a subnet that's used in an association with a firewall. This is used in <code>CreateFirewall</code>, <code>AssociateSubnets</code>, and <code>CreateVpcEndpointAssociation</code>. Network Firewall creates an instance of the associated firewall in each subnet that you specify, to filter traffic in the subnet's Availability Zone.</p>
    pub fn subnet_mapping(&self) -> ::std::option::Option<&crate::types::SubnetMapping> {
        self.subnet_mapping.as_ref()
    }
    /// <p>A description of the VPC endpoint association.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The key:value pairs to associate with the resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl VpcEndpointAssociation {
    /// Creates a new builder-style object to manufacture [`VpcEndpointAssociation`](crate::types::VpcEndpointAssociation).
    pub fn builder() -> crate::types::builders::VpcEndpointAssociationBuilder {
        crate::types::builders::VpcEndpointAssociationBuilder::default()
    }
}

/// A builder for [`VpcEndpointAssociation`](crate::types::VpcEndpointAssociation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VpcEndpointAssociationBuilder {
    pub(crate) vpc_endpoint_association_id: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_endpoint_association_arn: ::std::option::Option<::std::string::String>,
    pub(crate) firewall_arn: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_mapping: ::std::option::Option<crate::types::SubnetMapping>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl VpcEndpointAssociationBuilder {
    /// <p>The unique identifier of the VPC endpoint association.</p>
    pub fn vpc_endpoint_association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_endpoint_association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the VPC endpoint association.</p>
    pub fn set_vpc_endpoint_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_endpoint_association_id = input;
        self
    }
    /// <p>The unique identifier of the VPC endpoint association.</p>
    pub fn get_vpc_endpoint_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_endpoint_association_id
    }
    /// <p>The Amazon Resource Name (ARN) of a VPC endpoint association.</p>
    /// This field is required.
    pub fn vpc_endpoint_association_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_endpoint_association_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a VPC endpoint association.</p>
    pub fn set_vpc_endpoint_association_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_endpoint_association_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a VPC endpoint association.</p>
    pub fn get_vpc_endpoint_association_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_endpoint_association_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    /// This field is required.
    pub fn firewall_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.firewall_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    pub fn set_firewall_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.firewall_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    pub fn get_firewall_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.firewall_arn
    }
    /// <p>The unique identifier of the VPC for the endpoint association.</p>
    /// This field is required.
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the VPC for the endpoint association.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The unique identifier of the VPC for the endpoint association.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// <p>The ID for a subnet that's used in an association with a firewall. This is used in <code>CreateFirewall</code>, <code>AssociateSubnets</code>, and <code>CreateVpcEndpointAssociation</code>. Network Firewall creates an instance of the associated firewall in each subnet that you specify, to filter traffic in the subnet's Availability Zone.</p>
    /// This field is required.
    pub fn subnet_mapping(mut self, input: crate::types::SubnetMapping) -> Self {
        self.subnet_mapping = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ID for a subnet that's used in an association with a firewall. This is used in <code>CreateFirewall</code>, <code>AssociateSubnets</code>, and <code>CreateVpcEndpointAssociation</code>. Network Firewall creates an instance of the associated firewall in each subnet that you specify, to filter traffic in the subnet's Availability Zone.</p>
    pub fn set_subnet_mapping(mut self, input: ::std::option::Option<crate::types::SubnetMapping>) -> Self {
        self.subnet_mapping = input;
        self
    }
    /// <p>The ID for a subnet that's used in an association with a firewall. This is used in <code>CreateFirewall</code>, <code>AssociateSubnets</code>, and <code>CreateVpcEndpointAssociation</code>. Network Firewall creates an instance of the associated firewall in each subnet that you specify, to filter traffic in the subnet's Availability Zone.</p>
    pub fn get_subnet_mapping(&self) -> &::std::option::Option<crate::types::SubnetMapping> {
        &self.subnet_mapping
    }
    /// <p>A description of the VPC endpoint association.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the VPC endpoint association.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the VPC endpoint association.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The key:value pairs to associate with the resource.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The key:value pairs to associate with the resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The key:value pairs to associate with the resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`VpcEndpointAssociation`](crate::types::VpcEndpointAssociation).
    /// This method will fail if any of the following fields are not set:
    /// - [`vpc_endpoint_association_arn`](crate::types::builders::VpcEndpointAssociationBuilder::vpc_endpoint_association_arn)
    /// - [`firewall_arn`](crate::types::builders::VpcEndpointAssociationBuilder::firewall_arn)
    /// - [`vpc_id`](crate::types::builders::VpcEndpointAssociationBuilder::vpc_id)
    pub fn build(self) -> ::std::result::Result<crate::types::VpcEndpointAssociation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::VpcEndpointAssociation {
            vpc_endpoint_association_id: self.vpc_endpoint_association_id,
            vpc_endpoint_association_arn: self.vpc_endpoint_association_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "vpc_endpoint_association_arn",
                    "vpc_endpoint_association_arn was not specified but it is required when building VpcEndpointAssociation",
                )
            })?,
            firewall_arn: self.firewall_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "firewall_arn",
                    "firewall_arn was not specified but it is required when building VpcEndpointAssociation",
                )
            })?,
            vpc_id: self.vpc_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "vpc_id",
                    "vpc_id was not specified but it is required when building VpcEndpointAssociation",
                )
            })?,
            subnet_mapping: self.subnet_mapping,
            description: self.description,
            tags: self.tags,
        })
    }
}
