// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type containing summaries of security protections provided by a rule group.</p>
/// <p>Network Firewall extracts this information from selected fields in the rule group's Suricata rules, based on your <code>SummaryConfiguration</code> settings.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Summary {
    /// <p>An array of <code>RuleSummary</code> objects containing individual rule details that had been configured by the rulegroup's SummaryConfiguration.</p>
    pub rule_summaries: ::std::option::Option<::std::vec::Vec<crate::types::RuleSummary>>,
}
impl Summary {
    /// <p>An array of <code>RuleSummary</code> objects containing individual rule details that had been configured by the rulegroup's SummaryConfiguration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rule_summaries.is_none()`.
    pub fn rule_summaries(&self) -> &[crate::types::RuleSummary] {
        self.rule_summaries.as_deref().unwrap_or_default()
    }
}
impl Summary {
    /// Creates a new builder-style object to manufacture [`Summary`](crate::types::Summary).
    pub fn builder() -> crate::types::builders::SummaryBuilder {
        crate::types::builders::SummaryBuilder::default()
    }
}

/// A builder for [`Summary`](crate::types::Summary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SummaryBuilder {
    pub(crate) rule_summaries: ::std::option::Option<::std::vec::Vec<crate::types::RuleSummary>>,
}
impl SummaryBuilder {
    /// Appends an item to `rule_summaries`.
    ///
    /// To override the contents of this collection use [`set_rule_summaries`](Self::set_rule_summaries).
    ///
    /// <p>An array of <code>RuleSummary</code> objects containing individual rule details that had been configured by the rulegroup's SummaryConfiguration.</p>
    pub fn rule_summaries(mut self, input: crate::types::RuleSummary) -> Self {
        let mut v = self.rule_summaries.unwrap_or_default();
        v.push(input);
        self.rule_summaries = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>RuleSummary</code> objects containing individual rule details that had been configured by the rulegroup's SummaryConfiguration.</p>
    pub fn set_rule_summaries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RuleSummary>>) -> Self {
        self.rule_summaries = input;
        self
    }
    /// <p>An array of <code>RuleSummary</code> objects containing individual rule details that had been configured by the rulegroup's SummaryConfiguration.</p>
    pub fn get_rule_summaries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RuleSummary>> {
        &self.rule_summaries
    }
    /// Consumes the builder and constructs a [`Summary`](crate::types::Summary).
    pub fn build(self) -> crate::types::Summary {
        crate::types::Summary {
            rule_summaries: self.rule_summaries,
        }
    }
}
