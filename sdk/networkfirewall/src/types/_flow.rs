// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Any number of arrays, where each array is a single flow identified in the scope of the operation. If multiple flows were in the scope of the operation, multiple <code>Flows</code> arrays are returned.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Flow {
    /// <p>A single IP address specification. This is used in the <code>MatchAttributes</code> source and destination specifications.</p>
    pub source_address: ::std::option::Option<crate::types::Address>,
    /// <p>A single IP address specification. This is used in the <code>MatchAttributes</code> source and destination specifications.</p>
    pub destination_address: ::std::option::Option<crate::types::Address>,
    /// <p>The source port to inspect for. You can specify an individual port, for example <code>1994</code> and you can specify a port range, for example <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub source_port: ::std::option::Option<::std::string::String>,
    /// <p>The destination port to inspect for. You can specify an individual port, for example <code>1994</code> and you can specify a port range, for example <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub destination_port: ::std::option::Option<::std::string::String>,
    /// <p>The protocols to inspect for, specified using the assigned internet protocol number (IANA) for each protocol. If not specified, this matches with any protocol.</p>
    pub protocol: ::std::option::Option<::std::string::String>,
    /// <p>Returned as info about age of the flows identified by the flow operation.</p>
    pub age: ::std::option::Option<i32>,
    /// <p>Returns the total number of data packets received or transmitted in a flow.</p>
    pub packet_count: ::std::option::Option<i32>,
    /// <p>Returns the number of bytes received or transmitted in a specific flow.</p>
    pub byte_count: i64,
}
impl Flow {
    /// <p>A single IP address specification. This is used in the <code>MatchAttributes</code> source and destination specifications.</p>
    pub fn source_address(&self) -> ::std::option::Option<&crate::types::Address> {
        self.source_address.as_ref()
    }
    /// <p>A single IP address specification. This is used in the <code>MatchAttributes</code> source and destination specifications.</p>
    pub fn destination_address(&self) -> ::std::option::Option<&crate::types::Address> {
        self.destination_address.as_ref()
    }
    /// <p>The source port to inspect for. You can specify an individual port, for example <code>1994</code> and you can specify a port range, for example <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub fn source_port(&self) -> ::std::option::Option<&str> {
        self.source_port.as_deref()
    }
    /// <p>The destination port to inspect for. You can specify an individual port, for example <code>1994</code> and you can specify a port range, for example <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub fn destination_port(&self) -> ::std::option::Option<&str> {
        self.destination_port.as_deref()
    }
    /// <p>The protocols to inspect for, specified using the assigned internet protocol number (IANA) for each protocol. If not specified, this matches with any protocol.</p>
    pub fn protocol(&self) -> ::std::option::Option<&str> {
        self.protocol.as_deref()
    }
    /// <p>Returned as info about age of the flows identified by the flow operation.</p>
    pub fn age(&self) -> ::std::option::Option<i32> {
        self.age
    }
    /// <p>Returns the total number of data packets received or transmitted in a flow.</p>
    pub fn packet_count(&self) -> ::std::option::Option<i32> {
        self.packet_count
    }
    /// <p>Returns the number of bytes received or transmitted in a specific flow.</p>
    pub fn byte_count(&self) -> i64 {
        self.byte_count
    }
}
impl Flow {
    /// Creates a new builder-style object to manufacture [`Flow`](crate::types::Flow).
    pub fn builder() -> crate::types::builders::FlowBuilder {
        crate::types::builders::FlowBuilder::default()
    }
}

/// A builder for [`Flow`](crate::types::Flow).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FlowBuilder {
    pub(crate) source_address: ::std::option::Option<crate::types::Address>,
    pub(crate) destination_address: ::std::option::Option<crate::types::Address>,
    pub(crate) source_port: ::std::option::Option<::std::string::String>,
    pub(crate) destination_port: ::std::option::Option<::std::string::String>,
    pub(crate) protocol: ::std::option::Option<::std::string::String>,
    pub(crate) age: ::std::option::Option<i32>,
    pub(crate) packet_count: ::std::option::Option<i32>,
    pub(crate) byte_count: ::std::option::Option<i64>,
}
impl FlowBuilder {
    /// <p>A single IP address specification. This is used in the <code>MatchAttributes</code> source and destination specifications.</p>
    pub fn source_address(mut self, input: crate::types::Address) -> Self {
        self.source_address = ::std::option::Option::Some(input);
        self
    }
    /// <p>A single IP address specification. This is used in the <code>MatchAttributes</code> source and destination specifications.</p>
    pub fn set_source_address(mut self, input: ::std::option::Option<crate::types::Address>) -> Self {
        self.source_address = input;
        self
    }
    /// <p>A single IP address specification. This is used in the <code>MatchAttributes</code> source and destination specifications.</p>
    pub fn get_source_address(&self) -> &::std::option::Option<crate::types::Address> {
        &self.source_address
    }
    /// <p>A single IP address specification. This is used in the <code>MatchAttributes</code> source and destination specifications.</p>
    pub fn destination_address(mut self, input: crate::types::Address) -> Self {
        self.destination_address = ::std::option::Option::Some(input);
        self
    }
    /// <p>A single IP address specification. This is used in the <code>MatchAttributes</code> source and destination specifications.</p>
    pub fn set_destination_address(mut self, input: ::std::option::Option<crate::types::Address>) -> Self {
        self.destination_address = input;
        self
    }
    /// <p>A single IP address specification. This is used in the <code>MatchAttributes</code> source and destination specifications.</p>
    pub fn get_destination_address(&self) -> &::std::option::Option<crate::types::Address> {
        &self.destination_address
    }
    /// <p>The source port to inspect for. You can specify an individual port, for example <code>1994</code> and you can specify a port range, for example <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub fn source_port(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_port = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source port to inspect for. You can specify an individual port, for example <code>1994</code> and you can specify a port range, for example <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub fn set_source_port(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_port = input;
        self
    }
    /// <p>The source port to inspect for. You can specify an individual port, for example <code>1994</code> and you can specify a port range, for example <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub fn get_source_port(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_port
    }
    /// <p>The destination port to inspect for. You can specify an individual port, for example <code>1994</code> and you can specify a port range, for example <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub fn destination_port(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_port = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The destination port to inspect for. You can specify an individual port, for example <code>1994</code> and you can specify a port range, for example <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub fn set_destination_port(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_port = input;
        self
    }
    /// <p>The destination port to inspect for. You can specify an individual port, for example <code>1994</code> and you can specify a port range, for example <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub fn get_destination_port(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_port
    }
    /// <p>The protocols to inspect for, specified using the assigned internet protocol number (IANA) for each protocol. If not specified, this matches with any protocol.</p>
    pub fn protocol(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.protocol = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The protocols to inspect for, specified using the assigned internet protocol number (IANA) for each protocol. If not specified, this matches with any protocol.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The protocols to inspect for, specified using the assigned internet protocol number (IANA) for each protocol. If not specified, this matches with any protocol.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<::std::string::String> {
        &self.protocol
    }
    /// <p>Returned as info about age of the flows identified by the flow operation.</p>
    pub fn age(mut self, input: i32) -> Self {
        self.age = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returned as info about age of the flows identified by the flow operation.</p>
    pub fn set_age(mut self, input: ::std::option::Option<i32>) -> Self {
        self.age = input;
        self
    }
    /// <p>Returned as info about age of the flows identified by the flow operation.</p>
    pub fn get_age(&self) -> &::std::option::Option<i32> {
        &self.age
    }
    /// <p>Returns the total number of data packets received or transmitted in a flow.</p>
    pub fn packet_count(mut self, input: i32) -> Self {
        self.packet_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns the total number of data packets received or transmitted in a flow.</p>
    pub fn set_packet_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.packet_count = input;
        self
    }
    /// <p>Returns the total number of data packets received or transmitted in a flow.</p>
    pub fn get_packet_count(&self) -> &::std::option::Option<i32> {
        &self.packet_count
    }
    /// <p>Returns the number of bytes received or transmitted in a specific flow.</p>
    pub fn byte_count(mut self, input: i64) -> Self {
        self.byte_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns the number of bytes received or transmitted in a specific flow.</p>
    pub fn set_byte_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.byte_count = input;
        self
    }
    /// <p>Returns the number of bytes received or transmitted in a specific flow.</p>
    pub fn get_byte_count(&self) -> &::std::option::Option<i64> {
        &self.byte_count
    }
    /// Consumes the builder and constructs a [`Flow`](crate::types::Flow).
    pub fn build(self) -> crate::types::Flow {
        crate::types::Flow {
            source_address: self.source_address,
            destination_address: self.destination_address,
            source_port: self.source_port,
            destination_port: self.destination_port,
            protocol: self.protocol,
            age: self.age,
            packet_count: self.packet_count,
            byte_count: self.byte_count.unwrap_or_default(),
        }
    }
}
