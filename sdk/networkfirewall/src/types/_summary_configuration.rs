// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that specifies which Suricata rule metadata fields to use when displaying threat information. Contains:</p>
/// <ul>
/// <li>
/// <p><code>RuleOptions</code> - The Suricata rule options fields to extract and display</p></li>
/// </ul>
/// <p>These settings affect how threat information appears in both the console and API responses. Summaries are available for rule groups you manage and for active threat defense Amazon Web Services managed rule groups.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SummaryConfiguration {
    /// <p>Specifies the selected rule options returned by <code>DescribeRuleGroupSummary</code>.</p>
    pub rule_options: ::std::option::Option<::std::vec::Vec<crate::types::SummaryRuleOption>>,
}
impl SummaryConfiguration {
    /// <p>Specifies the selected rule options returned by <code>DescribeRuleGroupSummary</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rule_options.is_none()`.
    pub fn rule_options(&self) -> &[crate::types::SummaryRuleOption] {
        self.rule_options.as_deref().unwrap_or_default()
    }
}
impl SummaryConfiguration {
    /// Creates a new builder-style object to manufacture [`SummaryConfiguration`](crate::types::SummaryConfiguration).
    pub fn builder() -> crate::types::builders::SummaryConfigurationBuilder {
        crate::types::builders::SummaryConfigurationBuilder::default()
    }
}

/// A builder for [`SummaryConfiguration`](crate::types::SummaryConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SummaryConfigurationBuilder {
    pub(crate) rule_options: ::std::option::Option<::std::vec::Vec<crate::types::SummaryRuleOption>>,
}
impl SummaryConfigurationBuilder {
    /// Appends an item to `rule_options`.
    ///
    /// To override the contents of this collection use [`set_rule_options`](Self::set_rule_options).
    ///
    /// <p>Specifies the selected rule options returned by <code>DescribeRuleGroupSummary</code>.</p>
    pub fn rule_options(mut self, input: crate::types::SummaryRuleOption) -> Self {
        let mut v = self.rule_options.unwrap_or_default();
        v.push(input);
        self.rule_options = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the selected rule options returned by <code>DescribeRuleGroupSummary</code>.</p>
    pub fn set_rule_options(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SummaryRuleOption>>) -> Self {
        self.rule_options = input;
        self
    }
    /// <p>Specifies the selected rule options returned by <code>DescribeRuleGroupSummary</code>.</p>
    pub fn get_rule_options(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SummaryRuleOption>> {
        &self.rule_options
    }
    /// Consumes the builder and constructs a [`SummaryConfiguration`](crate::types::SummaryConfiguration).
    pub fn build(self) -> crate::types::SummaryConfiguration {
        crate::types::SummaryConfiguration {
            rule_options: self.rule_options,
        }
    }
}
