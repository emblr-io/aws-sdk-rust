// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A report that captures key activity from the last 30 days of network traffic monitored by your firewall.</p>
/// <p>You can generate up to one report per traffic type, per 30 day period. For example, when you successfully create an HTTP traffic report, you cannot create another HTTP traffic report until 30 days pass. Alternatively, if you generate a report that combines metrics on both HTTP and HTTPS traffic, you cannot create another report for either traffic type until 30 days pass.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalysisReport {
    /// <p>The unique ID of the query that ran when you requested an analysis report.</p>
    pub analysis_report_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of traffic that will be used to generate a report.</p>
    pub analysis_type: ::std::option::Option<crate::types::EnabledAnalysisType>,
    /// <p>The date and time the analysis report was ran.</p>
    pub report_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The status of the analysis report you specify. Statuses include <code>RUNNING</code>, <code>COMPLETED</code>, or <code>FAILED</code>.</p>
    pub status: ::std::option::Option<::std::string::String>,
}
impl AnalysisReport {
    /// <p>The unique ID of the query that ran when you requested an analysis report.</p>
    pub fn analysis_report_id(&self) -> ::std::option::Option<&str> {
        self.analysis_report_id.as_deref()
    }
    /// <p>The type of traffic that will be used to generate a report.</p>
    pub fn analysis_type(&self) -> ::std::option::Option<&crate::types::EnabledAnalysisType> {
        self.analysis_type.as_ref()
    }
    /// <p>The date and time the analysis report was ran.</p>
    pub fn report_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.report_time.as_ref()
    }
    /// <p>The status of the analysis report you specify. Statuses include <code>RUNNING</code>, <code>COMPLETED</code>, or <code>FAILED</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
}
impl AnalysisReport {
    /// Creates a new builder-style object to manufacture [`AnalysisReport`](crate::types::AnalysisReport).
    pub fn builder() -> crate::types::builders::AnalysisReportBuilder {
        crate::types::builders::AnalysisReportBuilder::default()
    }
}

/// A builder for [`AnalysisReport`](crate::types::AnalysisReport).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AnalysisReportBuilder {
    pub(crate) analysis_report_id: ::std::option::Option<::std::string::String>,
    pub(crate) analysis_type: ::std::option::Option<crate::types::EnabledAnalysisType>,
    pub(crate) report_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
}
impl AnalysisReportBuilder {
    /// <p>The unique ID of the query that ran when you requested an analysis report.</p>
    pub fn analysis_report_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.analysis_report_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the query that ran when you requested an analysis report.</p>
    pub fn set_analysis_report_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.analysis_report_id = input;
        self
    }
    /// <p>The unique ID of the query that ran when you requested an analysis report.</p>
    pub fn get_analysis_report_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.analysis_report_id
    }
    /// <p>The type of traffic that will be used to generate a report.</p>
    pub fn analysis_type(mut self, input: crate::types::EnabledAnalysisType) -> Self {
        self.analysis_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of traffic that will be used to generate a report.</p>
    pub fn set_analysis_type(mut self, input: ::std::option::Option<crate::types::EnabledAnalysisType>) -> Self {
        self.analysis_type = input;
        self
    }
    /// <p>The type of traffic that will be used to generate a report.</p>
    pub fn get_analysis_type(&self) -> &::std::option::Option<crate::types::EnabledAnalysisType> {
        &self.analysis_type
    }
    /// <p>The date and time the analysis report was ran.</p>
    pub fn report_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.report_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the analysis report was ran.</p>
    pub fn set_report_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.report_time = input;
        self
    }
    /// <p>The date and time the analysis report was ran.</p>
    pub fn get_report_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.report_time
    }
    /// <p>The status of the analysis report you specify. Statuses include <code>RUNNING</code>, <code>COMPLETED</code>, or <code>FAILED</code>.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the analysis report you specify. Statuses include <code>RUNNING</code>, <code>COMPLETED</code>, or <code>FAILED</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the analysis report you specify. Statuses include <code>RUNNING</code>, <code>COMPLETED</code>, or <code>FAILED</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// Consumes the builder and constructs a [`AnalysisReport`](crate::types::AnalysisReport).
    pub fn build(self) -> crate::types::AnalysisReport {
        crate::types::AnalysisReport {
            analysis_report_id: self.analysis_report_id,
            analysis_type: self.analysis_type,
            report_time: self.report_time,
            status: self.status,
        }
    }
}
