// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type containing details about a Suricata rule. Contains:</p>
/// <ul>
/// <li>
/// <p><code>SID</code></p></li>
/// <li>
/// <p><code>Msg</code></p></li>
/// <li>
/// <p><code>Metadata</code></p></li>
/// </ul>
/// <p>Summaries are available for rule groups you manage and for active threat defense Amazon Web Services managed rule groups.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleSummary {
    /// <p>The unique identifier (Signature ID) of the Suricata rule.</p>
    pub sid: ::std::option::Option<::std::string::String>,
    /// <p>The contents taken from the rule's msg field.</p>
    pub msg: ::std::option::Option<::std::string::String>,
    /// <p>The contents of the rule's metadata.</p>
    pub metadata: ::std::option::Option<::std::string::String>,
}
impl RuleSummary {
    /// <p>The unique identifier (Signature ID) of the Suricata rule.</p>
    pub fn sid(&self) -> ::std::option::Option<&str> {
        self.sid.as_deref()
    }
    /// <p>The contents taken from the rule's msg field.</p>
    pub fn msg(&self) -> ::std::option::Option<&str> {
        self.msg.as_deref()
    }
    /// <p>The contents of the rule's metadata.</p>
    pub fn metadata(&self) -> ::std::option::Option<&str> {
        self.metadata.as_deref()
    }
}
impl RuleSummary {
    /// Creates a new builder-style object to manufacture [`RuleSummary`](crate::types::RuleSummary).
    pub fn builder() -> crate::types::builders::RuleSummaryBuilder {
        crate::types::builders::RuleSummaryBuilder::default()
    }
}

/// A builder for [`RuleSummary`](crate::types::RuleSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuleSummaryBuilder {
    pub(crate) sid: ::std::option::Option<::std::string::String>,
    pub(crate) msg: ::std::option::Option<::std::string::String>,
    pub(crate) metadata: ::std::option::Option<::std::string::String>,
}
impl RuleSummaryBuilder {
    /// <p>The unique identifier (Signature ID) of the Suricata rule.</p>
    pub fn sid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier (Signature ID) of the Suricata rule.</p>
    pub fn set_sid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sid = input;
        self
    }
    /// <p>The unique identifier (Signature ID) of the Suricata rule.</p>
    pub fn get_sid(&self) -> &::std::option::Option<::std::string::String> {
        &self.sid
    }
    /// <p>The contents taken from the rule's msg field.</p>
    pub fn msg(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.msg = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The contents taken from the rule's msg field.</p>
    pub fn set_msg(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.msg = input;
        self
    }
    /// <p>The contents taken from the rule's msg field.</p>
    pub fn get_msg(&self) -> &::std::option::Option<::std::string::String> {
        &self.msg
    }
    /// <p>The contents of the rule's metadata.</p>
    pub fn metadata(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metadata = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The contents of the rule's metadata.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>The contents of the rule's metadata.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<::std::string::String> {
        &self.metadata
    }
    /// Consumes the builder and constructs a [`RuleSummary`](crate::types::RuleSummary).
    pub fn build(self) -> crate::types::RuleSummary {
        crate::types::RuleSummary {
            sid: self.sid,
            msg: self.msg,
            metadata: self.metadata,
        }
    }
}
