// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A unique source IP address that connected to a domain.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UniqueSources {
    /// <p>The number of unique source IP addresses that connected to a domain.</p>
    pub count: i32,
}
impl UniqueSources {
    /// <p>The number of unique source IP addresses that connected to a domain.</p>
    pub fn count(&self) -> i32 {
        self.count
    }
}
impl UniqueSources {
    /// Creates a new builder-style object to manufacture [`UniqueSources`](crate::types::UniqueSources).
    pub fn builder() -> crate::types::builders::UniqueSourcesBuilder {
        crate::types::builders::UniqueSourcesBuilder::default()
    }
}

/// A builder for [`UniqueSources`](crate::types::UniqueSources).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UniqueSourcesBuilder {
    pub(crate) count: ::std::option::Option<i32>,
}
impl UniqueSourcesBuilder {
    /// <p>The number of unique source IP addresses that connected to a domain.</p>
    pub fn count(mut self, input: i32) -> Self {
        self.count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of unique source IP addresses that connected to a domain.</p>
    pub fn set_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.count = input;
        self
    }
    /// <p>The number of unique source IP addresses that connected to a domain.</p>
    pub fn get_count(&self) -> &::std::option::Option<i32> {
        &self.count
    }
    /// Consumes the builder and constructs a [`UniqueSources`](crate::types::UniqueSources).
    pub fn build(self) -> crate::types::UniqueSources {
        crate::types::UniqueSources {
            count: self.count.unwrap_or_default(),
        }
    }
}
