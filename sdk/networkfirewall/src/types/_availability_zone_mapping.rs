// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the mapping between an Availability Zone and a firewall endpoint for a transit gateway-attached firewall. Each mapping represents where the firewall can process traffic. You use these mappings when calling <code>CreateFirewall</code>, <code>AssociateAvailabilityZones</code>, and <code>DisassociateAvailabilityZones</code>.</p>
/// <p>To retrieve the current Availability Zone mappings for a firewall, use <code>DescribeFirewall</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AvailabilityZoneMapping {
    /// <p>The ID of the Availability Zone where the firewall endpoint is located. For example, <code>us-east-2a</code>. The Availability Zone must be in the same Region as the transit gateway.</p>
    pub availability_zone: ::std::string::String,
}
impl AvailabilityZoneMapping {
    /// <p>The ID of the Availability Zone where the firewall endpoint is located. For example, <code>us-east-2a</code>. The Availability Zone must be in the same Region as the transit gateway.</p>
    pub fn availability_zone(&self) -> &str {
        use std::ops::Deref;
        self.availability_zone.deref()
    }
}
impl AvailabilityZoneMapping {
    /// Creates a new builder-style object to manufacture [`AvailabilityZoneMapping`](crate::types::AvailabilityZoneMapping).
    pub fn builder() -> crate::types::builders::AvailabilityZoneMappingBuilder {
        crate::types::builders::AvailabilityZoneMappingBuilder::default()
    }
}

/// A builder for [`AvailabilityZoneMapping`](crate::types::AvailabilityZoneMapping).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AvailabilityZoneMappingBuilder {
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
}
impl AvailabilityZoneMappingBuilder {
    /// <p>The ID of the Availability Zone where the firewall endpoint is located. For example, <code>us-east-2a</code>. The Availability Zone must be in the same Region as the transit gateway.</p>
    /// This field is required.
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Availability Zone where the firewall endpoint is located. For example, <code>us-east-2a</code>. The Availability Zone must be in the same Region as the transit gateway.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The ID of the Availability Zone where the firewall endpoint is located. For example, <code>us-east-2a</code>. The Availability Zone must be in the same Region as the transit gateway.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// Consumes the builder and constructs a [`AvailabilityZoneMapping`](crate::types::AvailabilityZoneMapping).
    /// This method will fail if any of the following fields are not set:
    /// - [`availability_zone`](crate::types::builders::AvailabilityZoneMappingBuilder::availability_zone)
    pub fn build(self) -> ::std::result::Result<crate::types::AvailabilityZoneMapping, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AvailabilityZoneMapping {
            availability_zone: self.availability_zone.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "availability_zone",
                    "availability_zone was not specified but it is required when building AvailabilityZoneMapping",
                )
            })?,
        })
    }
}
