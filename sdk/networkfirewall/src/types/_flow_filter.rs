// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the scope a flow operation. You can use up to 20 filters to configure a single flow operation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FlowFilter {
    /// <p>A single IP address specification. This is used in the <code>MatchAttributes</code> source and destination specifications.</p>
    pub source_address: ::std::option::Option<crate::types::Address>,
    /// <p>A single IP address specification. This is used in the <code>MatchAttributes</code> source and destination specifications.</p>
    pub destination_address: ::std::option::Option<crate::types::Address>,
    /// <p>The source port to inspect for. You can specify an individual port, for example <code>1994</code> and you can specify a port range, for example <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub source_port: ::std::option::Option<::std::string::String>,
    /// <p>The destination port to inspect for. You can specify an individual port, for example <code>1994</code> and you can specify a port range, for example <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub destination_port: ::std::option::Option<::std::string::String>,
    /// <p>The protocols to inspect for, specified using the assigned internet protocol number (IANA) for each protocol. If not specified, this matches with any protocol.</p>
    pub protocols: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl FlowFilter {
    /// <p>A single IP address specification. This is used in the <code>MatchAttributes</code> source and destination specifications.</p>
    pub fn source_address(&self) -> ::std::option::Option<&crate::types::Address> {
        self.source_address.as_ref()
    }
    /// <p>A single IP address specification. This is used in the <code>MatchAttributes</code> source and destination specifications.</p>
    pub fn destination_address(&self) -> ::std::option::Option<&crate::types::Address> {
        self.destination_address.as_ref()
    }
    /// <p>The source port to inspect for. You can specify an individual port, for example <code>1994</code> and you can specify a port range, for example <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub fn source_port(&self) -> ::std::option::Option<&str> {
        self.source_port.as_deref()
    }
    /// <p>The destination port to inspect for. You can specify an individual port, for example <code>1994</code> and you can specify a port range, for example <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub fn destination_port(&self) -> ::std::option::Option<&str> {
        self.destination_port.as_deref()
    }
    /// <p>The protocols to inspect for, specified using the assigned internet protocol number (IANA) for each protocol. If not specified, this matches with any protocol.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.protocols.is_none()`.
    pub fn protocols(&self) -> &[::std::string::String] {
        self.protocols.as_deref().unwrap_or_default()
    }
}
impl FlowFilter {
    /// Creates a new builder-style object to manufacture [`FlowFilter`](crate::types::FlowFilter).
    pub fn builder() -> crate::types::builders::FlowFilterBuilder {
        crate::types::builders::FlowFilterBuilder::default()
    }
}

/// A builder for [`FlowFilter`](crate::types::FlowFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FlowFilterBuilder {
    pub(crate) source_address: ::std::option::Option<crate::types::Address>,
    pub(crate) destination_address: ::std::option::Option<crate::types::Address>,
    pub(crate) source_port: ::std::option::Option<::std::string::String>,
    pub(crate) destination_port: ::std::option::Option<::std::string::String>,
    pub(crate) protocols: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl FlowFilterBuilder {
    /// <p>A single IP address specification. This is used in the <code>MatchAttributes</code> source and destination specifications.</p>
    pub fn source_address(mut self, input: crate::types::Address) -> Self {
        self.source_address = ::std::option::Option::Some(input);
        self
    }
    /// <p>A single IP address specification. This is used in the <code>MatchAttributes</code> source and destination specifications.</p>
    pub fn set_source_address(mut self, input: ::std::option::Option<crate::types::Address>) -> Self {
        self.source_address = input;
        self
    }
    /// <p>A single IP address specification. This is used in the <code>MatchAttributes</code> source and destination specifications.</p>
    pub fn get_source_address(&self) -> &::std::option::Option<crate::types::Address> {
        &self.source_address
    }
    /// <p>A single IP address specification. This is used in the <code>MatchAttributes</code> source and destination specifications.</p>
    pub fn destination_address(mut self, input: crate::types::Address) -> Self {
        self.destination_address = ::std::option::Option::Some(input);
        self
    }
    /// <p>A single IP address specification. This is used in the <code>MatchAttributes</code> source and destination specifications.</p>
    pub fn set_destination_address(mut self, input: ::std::option::Option<crate::types::Address>) -> Self {
        self.destination_address = input;
        self
    }
    /// <p>A single IP address specification. This is used in the <code>MatchAttributes</code> source and destination specifications.</p>
    pub fn get_destination_address(&self) -> &::std::option::Option<crate::types::Address> {
        &self.destination_address
    }
    /// <p>The source port to inspect for. You can specify an individual port, for example <code>1994</code> and you can specify a port range, for example <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub fn source_port(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_port = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source port to inspect for. You can specify an individual port, for example <code>1994</code> and you can specify a port range, for example <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub fn set_source_port(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_port = input;
        self
    }
    /// <p>The source port to inspect for. You can specify an individual port, for example <code>1994</code> and you can specify a port range, for example <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub fn get_source_port(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_port
    }
    /// <p>The destination port to inspect for. You can specify an individual port, for example <code>1994</code> and you can specify a port range, for example <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub fn destination_port(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_port = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The destination port to inspect for. You can specify an individual port, for example <code>1994</code> and you can specify a port range, for example <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub fn set_destination_port(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_port = input;
        self
    }
    /// <p>The destination port to inspect for. You can specify an individual port, for example <code>1994</code> and you can specify a port range, for example <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
    pub fn get_destination_port(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_port
    }
    /// Appends an item to `protocols`.
    ///
    /// To override the contents of this collection use [`set_protocols`](Self::set_protocols).
    ///
    /// <p>The protocols to inspect for, specified using the assigned internet protocol number (IANA) for each protocol. If not specified, this matches with any protocol.</p>
    pub fn protocols(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.protocols.unwrap_or_default();
        v.push(input.into());
        self.protocols = ::std::option::Option::Some(v);
        self
    }
    /// <p>The protocols to inspect for, specified using the assigned internet protocol number (IANA) for each protocol. If not specified, this matches with any protocol.</p>
    pub fn set_protocols(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.protocols = input;
        self
    }
    /// <p>The protocols to inspect for, specified using the assigned internet protocol number (IANA) for each protocol. If not specified, this matches with any protocol.</p>
    pub fn get_protocols(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.protocols
    }
    /// Consumes the builder and constructs a [`FlowFilter`](crate::types::FlowFilter).
    pub fn build(self) -> crate::types::FlowFilter {
        crate::types::FlowFilter {
            source_address: self.source_address,
            destination_address: self.destination_address,
            source_port: self.source_port,
            destination_port: self.destination_port,
            protocols: self.protocols,
        }
    }
}
