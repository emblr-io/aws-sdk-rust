// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetAnalysisReportResultsOutput {
    /// <p>The status of the analysis report you specify. Statuses include <code>RUNNING</code>, <code>COMPLETED</code>, or <code>FAILED</code>.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>The date and time within the last 30 days from which to start retrieving analysis data, in UTC format (for example, <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time, up to the current date, from which to stop retrieving analysis data, in UTC format (for example, <code>YYYY-MM-DDTHH:MM:SSZ</code>).</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time the analysis report was ran.</p>
    pub report_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The type of traffic that will be used to generate a report.</p>
    pub analysis_type: ::std::option::Option<crate::types::EnabledAnalysisType>,
    /// <p>When you request a list of objects with a <code>MaxResults</code> setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Network Firewall returns a <code>NextToken</code> value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Retrieves the results of a traffic analysis report.</p>
    pub analysis_report_results: ::std::option::Option<::std::vec::Vec<crate::types::AnalysisTypeReportResult>>,
    _request_id: Option<String>,
}
impl GetAnalysisReportResultsOutput {
    /// <p>The status of the analysis report you specify. Statuses include <code>RUNNING</code>, <code>COMPLETED</code>, or <code>FAILED</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The date and time within the last 30 days from which to start retrieving analysis data, in UTC format (for example, <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The date and time, up to the current date, from which to stop retrieving analysis data, in UTC format (for example, <code>YYYY-MM-DDTHH:MM:SSZ</code>).</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The date and time the analysis report was ran.</p>
    pub fn report_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.report_time.as_ref()
    }
    /// <p>The type of traffic that will be used to generate a report.</p>
    pub fn analysis_type(&self) -> ::std::option::Option<&crate::types::EnabledAnalysisType> {
        self.analysis_type.as_ref()
    }
    /// <p>When you request a list of objects with a <code>MaxResults</code> setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Network Firewall returns a <code>NextToken</code> value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Retrieves the results of a traffic analysis report.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.analysis_report_results.is_none()`.
    pub fn analysis_report_results(&self) -> &[crate::types::AnalysisTypeReportResult] {
        self.analysis_report_results.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for GetAnalysisReportResultsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAnalysisReportResultsOutput {
    /// Creates a new builder-style object to manufacture [`GetAnalysisReportResultsOutput`](crate::operation::get_analysis_report_results::GetAnalysisReportResultsOutput).
    pub fn builder() -> crate::operation::get_analysis_report_results::builders::GetAnalysisReportResultsOutputBuilder {
        crate::operation::get_analysis_report_results::builders::GetAnalysisReportResultsOutputBuilder::default()
    }
}

/// A builder for [`GetAnalysisReportResultsOutput`](crate::operation::get_analysis_report_results::GetAnalysisReportResultsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetAnalysisReportResultsOutputBuilder {
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) report_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) analysis_type: ::std::option::Option<crate::types::EnabledAnalysisType>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) analysis_report_results: ::std::option::Option<::std::vec::Vec<crate::types::AnalysisTypeReportResult>>,
    _request_id: Option<String>,
}
impl GetAnalysisReportResultsOutputBuilder {
    /// <p>The status of the analysis report you specify. Statuses include <code>RUNNING</code>, <code>COMPLETED</code>, or <code>FAILED</code>.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the analysis report you specify. Statuses include <code>RUNNING</code>, <code>COMPLETED</code>, or <code>FAILED</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the analysis report you specify. Statuses include <code>RUNNING</code>, <code>COMPLETED</code>, or <code>FAILED</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The date and time within the last 30 days from which to start retrieving analysis data, in UTC format (for example, <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time within the last 30 days from which to start retrieving analysis data, in UTC format (for example, <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The date and time within the last 30 days from which to start retrieving analysis data, in UTC format (for example, <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The date and time, up to the current date, from which to stop retrieving analysis data, in UTC format (for example, <code>YYYY-MM-DDTHH:MM:SSZ</code>).</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time, up to the current date, from which to stop retrieving analysis data, in UTC format (for example, <code>YYYY-MM-DDTHH:MM:SSZ</code>).</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The date and time, up to the current date, from which to stop retrieving analysis data, in UTC format (for example, <code>YYYY-MM-DDTHH:MM:SSZ</code>).</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The date and time the analysis report was ran.</p>
    pub fn report_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.report_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the analysis report was ran.</p>
    pub fn set_report_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.report_time = input;
        self
    }
    /// <p>The date and time the analysis report was ran.</p>
    pub fn get_report_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.report_time
    }
    /// <p>The type of traffic that will be used to generate a report.</p>
    pub fn analysis_type(mut self, input: crate::types::EnabledAnalysisType) -> Self {
        self.analysis_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of traffic that will be used to generate a report.</p>
    pub fn set_analysis_type(mut self, input: ::std::option::Option<crate::types::EnabledAnalysisType>) -> Self {
        self.analysis_type = input;
        self
    }
    /// <p>The type of traffic that will be used to generate a report.</p>
    pub fn get_analysis_type(&self) -> &::std::option::Option<crate::types::EnabledAnalysisType> {
        &self.analysis_type
    }
    /// <p>When you request a list of objects with a <code>MaxResults</code> setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Network Firewall returns a <code>NextToken</code> value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>When you request a list of objects with a <code>MaxResults</code> setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Network Firewall returns a <code>NextToken</code> value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>When you request a list of objects with a <code>MaxResults</code> setting, if the number of objects that are still available for retrieval exceeds the maximum you requested, Network Firewall returns a <code>NextToken</code> value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `analysis_report_results`.
    ///
    /// To override the contents of this collection use [`set_analysis_report_results`](Self::set_analysis_report_results).
    ///
    /// <p>Retrieves the results of a traffic analysis report.</p>
    pub fn analysis_report_results(mut self, input: crate::types::AnalysisTypeReportResult) -> Self {
        let mut v = self.analysis_report_results.unwrap_or_default();
        v.push(input);
        self.analysis_report_results = ::std::option::Option::Some(v);
        self
    }
    /// <p>Retrieves the results of a traffic analysis report.</p>
    pub fn set_analysis_report_results(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AnalysisTypeReportResult>>) -> Self {
        self.analysis_report_results = input;
        self
    }
    /// <p>Retrieves the results of a traffic analysis report.</p>
    pub fn get_analysis_report_results(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AnalysisTypeReportResult>> {
        &self.analysis_report_results
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetAnalysisReportResultsOutput`](crate::operation::get_analysis_report_results::GetAnalysisReportResultsOutput).
    pub fn build(self) -> crate::operation::get_analysis_report_results::GetAnalysisReportResultsOutput {
        crate::operation::get_analysis_report_results::GetAnalysisReportResultsOutput {
            status: self.status,
            start_time: self.start_time,
            end_time: self.end_time,
            report_time: self.report_time,
            analysis_type: self.analysis_type,
            next_token: self.next_token,
            analysis_report_results: self.analysis_report_results,
            _request_id: self._request_id,
        }
    }
}
