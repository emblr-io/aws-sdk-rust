// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateVpcEndpointAssociationInput {
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    pub firewall_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the VPC where you want to create a firewall endpoint.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID for a subnet that's used in an association with a firewall. This is used in <code>CreateFirewall</code>, <code>AssociateSubnets</code>, and <code>CreateVpcEndpointAssociation</code>. Network Firewall creates an instance of the associated firewall in each subnet that you specify, to filter traffic in the subnet's Availability Zone.</p>
    pub subnet_mapping: ::std::option::Option<crate::types::SubnetMapping>,
    /// <p>A description of the VPC endpoint association.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The key:value pairs to associate with the resource.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateVpcEndpointAssociationInput {
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    pub fn firewall_arn(&self) -> ::std::option::Option<&str> {
        self.firewall_arn.as_deref()
    }
    /// <p>The unique identifier of the VPC where you want to create a firewall endpoint.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The ID for a subnet that's used in an association with a firewall. This is used in <code>CreateFirewall</code>, <code>AssociateSubnets</code>, and <code>CreateVpcEndpointAssociation</code>. Network Firewall creates an instance of the associated firewall in each subnet that you specify, to filter traffic in the subnet's Availability Zone.</p>
    pub fn subnet_mapping(&self) -> ::std::option::Option<&crate::types::SubnetMapping> {
        self.subnet_mapping.as_ref()
    }
    /// <p>A description of the VPC endpoint association.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The key:value pairs to associate with the resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateVpcEndpointAssociationInput {
    /// Creates a new builder-style object to manufacture [`CreateVpcEndpointAssociationInput`](crate::operation::create_vpc_endpoint_association::CreateVpcEndpointAssociationInput).
    pub fn builder() -> crate::operation::create_vpc_endpoint_association::builders::CreateVpcEndpointAssociationInputBuilder {
        crate::operation::create_vpc_endpoint_association::builders::CreateVpcEndpointAssociationInputBuilder::default()
    }
}

/// A builder for [`CreateVpcEndpointAssociationInput`](crate::operation::create_vpc_endpoint_association::CreateVpcEndpointAssociationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateVpcEndpointAssociationInputBuilder {
    pub(crate) firewall_arn: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_mapping: ::std::option::Option<crate::types::SubnetMapping>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateVpcEndpointAssociationInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    /// This field is required.
    pub fn firewall_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.firewall_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    pub fn set_firewall_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.firewall_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    pub fn get_firewall_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.firewall_arn
    }
    /// <p>The unique identifier of the VPC where you want to create a firewall endpoint.</p>
    /// This field is required.
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the VPC where you want to create a firewall endpoint.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The unique identifier of the VPC where you want to create a firewall endpoint.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// <p>The ID for a subnet that's used in an association with a firewall. This is used in <code>CreateFirewall</code>, <code>AssociateSubnets</code>, and <code>CreateVpcEndpointAssociation</code>. Network Firewall creates an instance of the associated firewall in each subnet that you specify, to filter traffic in the subnet's Availability Zone.</p>
    /// This field is required.
    pub fn subnet_mapping(mut self, input: crate::types::SubnetMapping) -> Self {
        self.subnet_mapping = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ID for a subnet that's used in an association with a firewall. This is used in <code>CreateFirewall</code>, <code>AssociateSubnets</code>, and <code>CreateVpcEndpointAssociation</code>. Network Firewall creates an instance of the associated firewall in each subnet that you specify, to filter traffic in the subnet's Availability Zone.</p>
    pub fn set_subnet_mapping(mut self, input: ::std::option::Option<crate::types::SubnetMapping>) -> Self {
        self.subnet_mapping = input;
        self
    }
    /// <p>The ID for a subnet that's used in an association with a firewall. This is used in <code>CreateFirewall</code>, <code>AssociateSubnets</code>, and <code>CreateVpcEndpointAssociation</code>. Network Firewall creates an instance of the associated firewall in each subnet that you specify, to filter traffic in the subnet's Availability Zone.</p>
    pub fn get_subnet_mapping(&self) -> &::std::option::Option<crate::types::SubnetMapping> {
        &self.subnet_mapping
    }
    /// <p>A description of the VPC endpoint association.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the VPC endpoint association.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the VPC endpoint association.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The key:value pairs to associate with the resource.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The key:value pairs to associate with the resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The key:value pairs to associate with the resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateVpcEndpointAssociationInput`](crate::operation::create_vpc_endpoint_association::CreateVpcEndpointAssociationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_vpc_endpoint_association::CreateVpcEndpointAssociationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_vpc_endpoint_association::CreateVpcEndpointAssociationInput {
            firewall_arn: self.firewall_arn,
            vpc_id: self.vpc_id,
            subnet_mapping: self.subnet_mapping,
            description: self.description,
            tags: self.tags,
        })
    }
}
