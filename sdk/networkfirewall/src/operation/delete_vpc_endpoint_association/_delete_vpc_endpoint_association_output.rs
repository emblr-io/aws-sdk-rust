// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteVpcEndpointAssociationOutput {
    /// <p>The configuration settings for the VPC endpoint association. These settings include the firewall and the VPC and subnet to use for the firewall endpoint.</p>
    pub vpc_endpoint_association: ::std::option::Option<crate::types::VpcEndpointAssociation>,
    /// <p>Detailed information about the current status of a <code>VpcEndpointAssociation</code>. You can retrieve this by calling <code>DescribeVpcEndpointAssociation</code> and providing the VPC endpoint association ARN.</p>
    pub vpc_endpoint_association_status: ::std::option::Option<crate::types::VpcEndpointAssociationStatus>,
    _request_id: Option<String>,
}
impl DeleteVpcEndpointAssociationOutput {
    /// <p>The configuration settings for the VPC endpoint association. These settings include the firewall and the VPC and subnet to use for the firewall endpoint.</p>
    pub fn vpc_endpoint_association(&self) -> ::std::option::Option<&crate::types::VpcEndpointAssociation> {
        self.vpc_endpoint_association.as_ref()
    }
    /// <p>Detailed information about the current status of a <code>VpcEndpointAssociation</code>. You can retrieve this by calling <code>DescribeVpcEndpointAssociation</code> and providing the VPC endpoint association ARN.</p>
    pub fn vpc_endpoint_association_status(&self) -> ::std::option::Option<&crate::types::VpcEndpointAssociationStatus> {
        self.vpc_endpoint_association_status.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DeleteVpcEndpointAssociationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteVpcEndpointAssociationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVpcEndpointAssociationOutput`](crate::operation::delete_vpc_endpoint_association::DeleteVpcEndpointAssociationOutput).
    pub fn builder() -> crate::operation::delete_vpc_endpoint_association::builders::DeleteVpcEndpointAssociationOutputBuilder {
        crate::operation::delete_vpc_endpoint_association::builders::DeleteVpcEndpointAssociationOutputBuilder::default()
    }
}

/// A builder for [`DeleteVpcEndpointAssociationOutput`](crate::operation::delete_vpc_endpoint_association::DeleteVpcEndpointAssociationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeleteVpcEndpointAssociationOutputBuilder {
    pub(crate) vpc_endpoint_association: ::std::option::Option<crate::types::VpcEndpointAssociation>,
    pub(crate) vpc_endpoint_association_status: ::std::option::Option<crate::types::VpcEndpointAssociationStatus>,
    _request_id: Option<String>,
}
impl DeleteVpcEndpointAssociationOutputBuilder {
    /// <p>The configuration settings for the VPC endpoint association. These settings include the firewall and the VPC and subnet to use for the firewall endpoint.</p>
    pub fn vpc_endpoint_association(mut self, input: crate::types::VpcEndpointAssociation) -> Self {
        self.vpc_endpoint_association = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration settings for the VPC endpoint association. These settings include the firewall and the VPC and subnet to use for the firewall endpoint.</p>
    pub fn set_vpc_endpoint_association(mut self, input: ::std::option::Option<crate::types::VpcEndpointAssociation>) -> Self {
        self.vpc_endpoint_association = input;
        self
    }
    /// <p>The configuration settings for the VPC endpoint association. These settings include the firewall and the VPC and subnet to use for the firewall endpoint.</p>
    pub fn get_vpc_endpoint_association(&self) -> &::std::option::Option<crate::types::VpcEndpointAssociation> {
        &self.vpc_endpoint_association
    }
    /// <p>Detailed information about the current status of a <code>VpcEndpointAssociation</code>. You can retrieve this by calling <code>DescribeVpcEndpointAssociation</code> and providing the VPC endpoint association ARN.</p>
    pub fn vpc_endpoint_association_status(mut self, input: crate::types::VpcEndpointAssociationStatus) -> Self {
        self.vpc_endpoint_association_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Detailed information about the current status of a <code>VpcEndpointAssociation</code>. You can retrieve this by calling <code>DescribeVpcEndpointAssociation</code> and providing the VPC endpoint association ARN.</p>
    pub fn set_vpc_endpoint_association_status(mut self, input: ::std::option::Option<crate::types::VpcEndpointAssociationStatus>) -> Self {
        self.vpc_endpoint_association_status = input;
        self
    }
    /// <p>Detailed information about the current status of a <code>VpcEndpointAssociation</code>. You can retrieve this by calling <code>DescribeVpcEndpointAssociation</code> and providing the VPC endpoint association ARN.</p>
    pub fn get_vpc_endpoint_association_status(&self) -> &::std::option::Option<crate::types::VpcEndpointAssociationStatus> {
        &self.vpc_endpoint_association_status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DeleteVpcEndpointAssociationOutput`](crate::operation::delete_vpc_endpoint_association::DeleteVpcEndpointAssociationOutput).
    pub fn build(self) -> crate::operation::delete_vpc_endpoint_association::DeleteVpcEndpointAssociationOutput {
        crate::operation::delete_vpc_endpoint_association::DeleteVpcEndpointAssociationOutput {
            vpc_endpoint_association: self.vpc_endpoint_association,
            vpc_endpoint_association_status: self.vpc_endpoint_association_status,
            _request_id: self._request_id,
        }
    }
}
