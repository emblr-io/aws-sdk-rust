// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeFlowOperationOutput {
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    pub firewall_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Availability Zone where the firewall is located. For example, <code>us-east-2a</code>.</p>
    /// <p>Defines the scope a flow operation. You can use up to 20 filters to configure a single flow operation.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of a VPC endpoint association.</p>
    pub vpc_endpoint_association_arn: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for the primary endpoint associated with a firewall.</p>
    pub vpc_endpoint_id: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for the flow operation. This ID is returned in the responses to start and list commands. You provide to describe commands.</p>
    pub flow_operation_id: ::std::option::Option<::std::string::String>,
    /// <p>Defines the type of <code>FlowOperation</code>.</p>
    pub flow_operation_type: ::std::option::Option<crate::types::FlowOperationType>,
    /// <p>Returns the status of the flow operation. This string is returned in the responses to start, list, and describe commands.</p>
    /// <p>If the status is <code>COMPLETED_WITH_ERRORS</code>, results may be returned with any number of <code>Flows</code> missing from the response. If the status is <code>FAILED</code>, <code>Flows</code> returned will be empty.</p>
    pub flow_operation_status: ::std::option::Option<crate::types::FlowOperationStatus>,
    /// <p>If the asynchronous operation fails, Network Firewall populates this with the reason for the error or failure. Options include <code>Flow operation error</code> and <code>Flow timeout</code>.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>A timestamp indicating when the Suricata engine identified flows impacted by an operation.</p>
    pub flow_request_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Returns key information about a flow operation, such as related statuses, unique identifiers, and all filters defined in the operation.</p>
    pub flow_operation: ::std::option::Option<crate::types::FlowOperation>,
    _request_id: Option<String>,
}
impl DescribeFlowOperationOutput {
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    pub fn firewall_arn(&self) -> ::std::option::Option<&str> {
        self.firewall_arn.as_deref()
    }
    /// <p>The ID of the Availability Zone where the firewall is located. For example, <code>us-east-2a</code>.</p>
    /// <p>Defines the scope a flow operation. You can use up to 20 filters to configure a single flow operation.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of a VPC endpoint association.</p>
    pub fn vpc_endpoint_association_arn(&self) -> ::std::option::Option<&str> {
        self.vpc_endpoint_association_arn.as_deref()
    }
    /// <p>A unique identifier for the primary endpoint associated with a firewall.</p>
    pub fn vpc_endpoint_id(&self) -> ::std::option::Option<&str> {
        self.vpc_endpoint_id.as_deref()
    }
    /// <p>A unique identifier for the flow operation. This ID is returned in the responses to start and list commands. You provide to describe commands.</p>
    pub fn flow_operation_id(&self) -> ::std::option::Option<&str> {
        self.flow_operation_id.as_deref()
    }
    /// <p>Defines the type of <code>FlowOperation</code>.</p>
    pub fn flow_operation_type(&self) -> ::std::option::Option<&crate::types::FlowOperationType> {
        self.flow_operation_type.as_ref()
    }
    /// <p>Returns the status of the flow operation. This string is returned in the responses to start, list, and describe commands.</p>
    /// <p>If the status is <code>COMPLETED_WITH_ERRORS</code>, results may be returned with any number of <code>Flows</code> missing from the response. If the status is <code>FAILED</code>, <code>Flows</code> returned will be empty.</p>
    pub fn flow_operation_status(&self) -> ::std::option::Option<&crate::types::FlowOperationStatus> {
        self.flow_operation_status.as_ref()
    }
    /// <p>If the asynchronous operation fails, Network Firewall populates this with the reason for the error or failure. Options include <code>Flow operation error</code> and <code>Flow timeout</code>.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>A timestamp indicating when the Suricata engine identified flows impacted by an operation.</p>
    pub fn flow_request_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.flow_request_timestamp.as_ref()
    }
    /// <p>Returns key information about a flow operation, such as related statuses, unique identifiers, and all filters defined in the operation.</p>
    pub fn flow_operation(&self) -> ::std::option::Option<&crate::types::FlowOperation> {
        self.flow_operation.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeFlowOperationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeFlowOperationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeFlowOperationOutput`](crate::operation::describe_flow_operation::DescribeFlowOperationOutput).
    pub fn builder() -> crate::operation::describe_flow_operation::builders::DescribeFlowOperationOutputBuilder {
        crate::operation::describe_flow_operation::builders::DescribeFlowOperationOutputBuilder::default()
    }
}

/// A builder for [`DescribeFlowOperationOutput`](crate::operation::describe_flow_operation::DescribeFlowOperationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeFlowOperationOutputBuilder {
    pub(crate) firewall_arn: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_endpoint_association_arn: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_endpoint_id: ::std::option::Option<::std::string::String>,
    pub(crate) flow_operation_id: ::std::option::Option<::std::string::String>,
    pub(crate) flow_operation_type: ::std::option::Option<crate::types::FlowOperationType>,
    pub(crate) flow_operation_status: ::std::option::Option<crate::types::FlowOperationStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) flow_request_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) flow_operation: ::std::option::Option<crate::types::FlowOperation>,
    _request_id: Option<String>,
}
impl DescribeFlowOperationOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    pub fn firewall_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.firewall_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    pub fn set_firewall_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.firewall_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    pub fn get_firewall_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.firewall_arn
    }
    /// <p>The ID of the Availability Zone where the firewall is located. For example, <code>us-east-2a</code>.</p>
    /// <p>Defines the scope a flow operation. You can use up to 20 filters to configure a single flow operation.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Availability Zone where the firewall is located. For example, <code>us-east-2a</code>.</p>
    /// <p>Defines the scope a flow operation. You can use up to 20 filters to configure a single flow operation.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The ID of the Availability Zone where the firewall is located. For example, <code>us-east-2a</code>.</p>
    /// <p>Defines the scope a flow operation. You can use up to 20 filters to configure a single flow operation.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The Amazon Resource Name (ARN) of a VPC endpoint association.</p>
    pub fn vpc_endpoint_association_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_endpoint_association_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a VPC endpoint association.</p>
    pub fn set_vpc_endpoint_association_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_endpoint_association_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a VPC endpoint association.</p>
    pub fn get_vpc_endpoint_association_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_endpoint_association_arn
    }
    /// <p>A unique identifier for the primary endpoint associated with a firewall.</p>
    pub fn vpc_endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the primary endpoint associated with a firewall.</p>
    pub fn set_vpc_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_endpoint_id = input;
        self
    }
    /// <p>A unique identifier for the primary endpoint associated with a firewall.</p>
    pub fn get_vpc_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_endpoint_id
    }
    /// <p>A unique identifier for the flow operation. This ID is returned in the responses to start and list commands. You provide to describe commands.</p>
    pub fn flow_operation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.flow_operation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the flow operation. This ID is returned in the responses to start and list commands. You provide to describe commands.</p>
    pub fn set_flow_operation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.flow_operation_id = input;
        self
    }
    /// <p>A unique identifier for the flow operation. This ID is returned in the responses to start and list commands. You provide to describe commands.</p>
    pub fn get_flow_operation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.flow_operation_id
    }
    /// <p>Defines the type of <code>FlowOperation</code>.</p>
    pub fn flow_operation_type(mut self, input: crate::types::FlowOperationType) -> Self {
        self.flow_operation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the type of <code>FlowOperation</code>.</p>
    pub fn set_flow_operation_type(mut self, input: ::std::option::Option<crate::types::FlowOperationType>) -> Self {
        self.flow_operation_type = input;
        self
    }
    /// <p>Defines the type of <code>FlowOperation</code>.</p>
    pub fn get_flow_operation_type(&self) -> &::std::option::Option<crate::types::FlowOperationType> {
        &self.flow_operation_type
    }
    /// <p>Returns the status of the flow operation. This string is returned in the responses to start, list, and describe commands.</p>
    /// <p>If the status is <code>COMPLETED_WITH_ERRORS</code>, results may be returned with any number of <code>Flows</code> missing from the response. If the status is <code>FAILED</code>, <code>Flows</code> returned will be empty.</p>
    pub fn flow_operation_status(mut self, input: crate::types::FlowOperationStatus) -> Self {
        self.flow_operation_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns the status of the flow operation. This string is returned in the responses to start, list, and describe commands.</p>
    /// <p>If the status is <code>COMPLETED_WITH_ERRORS</code>, results may be returned with any number of <code>Flows</code> missing from the response. If the status is <code>FAILED</code>, <code>Flows</code> returned will be empty.</p>
    pub fn set_flow_operation_status(mut self, input: ::std::option::Option<crate::types::FlowOperationStatus>) -> Self {
        self.flow_operation_status = input;
        self
    }
    /// <p>Returns the status of the flow operation. This string is returned in the responses to start, list, and describe commands.</p>
    /// <p>If the status is <code>COMPLETED_WITH_ERRORS</code>, results may be returned with any number of <code>Flows</code> missing from the response. If the status is <code>FAILED</code>, <code>Flows</code> returned will be empty.</p>
    pub fn get_flow_operation_status(&self) -> &::std::option::Option<crate::types::FlowOperationStatus> {
        &self.flow_operation_status
    }
    /// <p>If the asynchronous operation fails, Network Firewall populates this with the reason for the error or failure. Options include <code>Flow operation error</code> and <code>Flow timeout</code>.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the asynchronous operation fails, Network Firewall populates this with the reason for the error or failure. Options include <code>Flow operation error</code> and <code>Flow timeout</code>.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>If the asynchronous operation fails, Network Firewall populates this with the reason for the error or failure. Options include <code>Flow operation error</code> and <code>Flow timeout</code>.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>A timestamp indicating when the Suricata engine identified flows impacted by an operation.</p>
    pub fn flow_request_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.flow_request_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp indicating when the Suricata engine identified flows impacted by an operation.</p>
    pub fn set_flow_request_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.flow_request_timestamp = input;
        self
    }
    /// <p>A timestamp indicating when the Suricata engine identified flows impacted by an operation.</p>
    pub fn get_flow_request_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.flow_request_timestamp
    }
    /// <p>Returns key information about a flow operation, such as related statuses, unique identifiers, and all filters defined in the operation.</p>
    pub fn flow_operation(mut self, input: crate::types::FlowOperation) -> Self {
        self.flow_operation = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns key information about a flow operation, such as related statuses, unique identifiers, and all filters defined in the operation.</p>
    pub fn set_flow_operation(mut self, input: ::std::option::Option<crate::types::FlowOperation>) -> Self {
        self.flow_operation = input;
        self
    }
    /// <p>Returns key information about a flow operation, such as related statuses, unique identifiers, and all filters defined in the operation.</p>
    pub fn get_flow_operation(&self) -> &::std::option::Option<crate::types::FlowOperation> {
        &self.flow_operation
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeFlowOperationOutput`](crate::operation::describe_flow_operation::DescribeFlowOperationOutput).
    pub fn build(self) -> crate::operation::describe_flow_operation::DescribeFlowOperationOutput {
        crate::operation::describe_flow_operation::DescribeFlowOperationOutput {
            firewall_arn: self.firewall_arn,
            availability_zone: self.availability_zone,
            vpc_endpoint_association_arn: self.vpc_endpoint_association_arn,
            vpc_endpoint_id: self.vpc_endpoint_id,
            flow_operation_id: self.flow_operation_id,
            flow_operation_type: self.flow_operation_type,
            flow_operation_status: self.flow_operation_status,
            status_message: self.status_message,
            flow_request_timestamp: self.flow_request_timestamp,
            flow_operation: self.flow_operation,
            _request_id: self._request_id,
        }
    }
}
