// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that contains information about attributes associated with a specific service.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceAttributes {
    /// <p>The ARN of the service that the attributes are associated with.</p>
    pub service_arn: ::std::option::Option<::std::string::String>,
    /// <p>A string map that contains the following information for the service that you specify in <code>ServiceArn</code>:</p>
    /// <ul>
    /// <li>
    /// <p>The attributes that apply to the service.</p></li>
    /// <li>
    /// <p>For each attribute, the applicable value.</p></li>
    /// </ul>
    /// <p>You can specify a total of 30 attributes.</p>
    pub attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ServiceAttributes {
    /// <p>The ARN of the service that the attributes are associated with.</p>
    pub fn service_arn(&self) -> ::std::option::Option<&str> {
        self.service_arn.as_deref()
    }
    /// <p>A string map that contains the following information for the service that you specify in <code>ServiceArn</code>:</p>
    /// <ul>
    /// <li>
    /// <p>The attributes that apply to the service.</p></li>
    /// <li>
    /// <p>For each attribute, the applicable value.</p></li>
    /// </ul>
    /// <p>You can specify a total of 30 attributes.</p>
    pub fn attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.attributes.as_ref()
    }
}
impl ServiceAttributes {
    /// Creates a new builder-style object to manufacture [`ServiceAttributes`](crate::types::ServiceAttributes).
    pub fn builder() -> crate::types::builders::ServiceAttributesBuilder {
        crate::types::builders::ServiceAttributesBuilder::default()
    }
}

/// A builder for [`ServiceAttributes`](crate::types::ServiceAttributes).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceAttributesBuilder {
    pub(crate) service_arn: ::std::option::Option<::std::string::String>,
    pub(crate) attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ServiceAttributesBuilder {
    /// <p>The ARN of the service that the attributes are associated with.</p>
    pub fn service_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the service that the attributes are associated with.</p>
    pub fn set_service_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_arn = input;
        self
    }
    /// <p>The ARN of the service that the attributes are associated with.</p>
    pub fn get_service_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_arn
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>A string map that contains the following information for the service that you specify in <code>ServiceArn</code>:</p>
    /// <ul>
    /// <li>
    /// <p>The attributes that apply to the service.</p></li>
    /// <li>
    /// <p>For each attribute, the applicable value.</p></li>
    /// </ul>
    /// <p>You can specify a total of 30 attributes.</p>
    pub fn attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A string map that contains the following information for the service that you specify in <code>ServiceArn</code>:</p>
    /// <ul>
    /// <li>
    /// <p>The attributes that apply to the service.</p></li>
    /// <li>
    /// <p>For each attribute, the applicable value.</p></li>
    /// </ul>
    /// <p>You can specify a total of 30 attributes.</p>
    pub fn set_attributes(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.attributes = input;
        self
    }
    /// <p>A string map that contains the following information for the service that you specify in <code>ServiceArn</code>:</p>
    /// <ul>
    /// <li>
    /// <p>The attributes that apply to the service.</p></li>
    /// <li>
    /// <p>For each attribute, the applicable value.</p></li>
    /// </ul>
    /// <p>You can specify a total of 30 attributes.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.attributes
    }
    /// Consumes the builder and constructs a [`ServiceAttributes`](crate::types::ServiceAttributes).
    pub fn build(self) -> crate::types::ServiceAttributes {
        crate::types::ServiceAttributes {
            service_arn: self.service_arn,
            attributes: self.attributes,
        }
    }
}
