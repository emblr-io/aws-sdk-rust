// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A time range with a start and end time.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ActiveTimeRange {
    /// <p>The inclusive time range start date.</p>
    pub active_after_inclusive: ::aws_smithy_types::DateTime,
    /// <p>The inclusive time range end date.</p>
    pub active_before_inclusive: ::aws_smithy_types::DateTime,
}
impl ActiveTimeRange {
    /// <p>The inclusive time range start date.</p>
    pub fn active_after_inclusive(&self) -> &::aws_smithy_types::DateTime {
        &self.active_after_inclusive
    }
    /// <p>The inclusive time range end date.</p>
    pub fn active_before_inclusive(&self) -> &::aws_smithy_types::DateTime {
        &self.active_before_inclusive
    }
}
impl ActiveTimeRange {
    /// Creates a new builder-style object to manufacture [`ActiveTimeRange`](crate::types::ActiveTimeRange).
    pub fn builder() -> crate::types::builders::ActiveTimeRangeBuilder {
        crate::types::builders::ActiveTimeRangeBuilder::default()
    }
}

/// A builder for [`ActiveTimeRange`](crate::types::ActiveTimeRange).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ActiveTimeRangeBuilder {
    pub(crate) active_after_inclusive: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) active_before_inclusive: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ActiveTimeRangeBuilder {
    /// <p>The inclusive time range start date.</p>
    /// This field is required.
    pub fn active_after_inclusive(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.active_after_inclusive = ::std::option::Option::Some(input);
        self
    }
    /// <p>The inclusive time range start date.</p>
    pub fn set_active_after_inclusive(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.active_after_inclusive = input;
        self
    }
    /// <p>The inclusive time range start date.</p>
    pub fn get_active_after_inclusive(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.active_after_inclusive
    }
    /// <p>The inclusive time range end date.</p>
    /// This field is required.
    pub fn active_before_inclusive(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.active_before_inclusive = ::std::option::Option::Some(input);
        self
    }
    /// <p>The inclusive time range end date.</p>
    pub fn set_active_before_inclusive(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.active_before_inclusive = input;
        self
    }
    /// <p>The inclusive time range end date.</p>
    pub fn get_active_before_inclusive(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.active_before_inclusive
    }
    /// Consumes the builder and constructs a [`ActiveTimeRange`](crate::types::ActiveTimeRange).
    /// This method will fail if any of the following fields are not set:
    /// - [`active_after_inclusive`](crate::types::builders::ActiveTimeRangeBuilder::active_after_inclusive)
    /// - [`active_before_inclusive`](crate::types::builders::ActiveTimeRangeBuilder::active_before_inclusive)
    pub fn build(self) -> ::std::result::Result<crate::types::ActiveTimeRange, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ActiveTimeRange {
            active_after_inclusive: self.active_after_inclusive.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "active_after_inclusive",
                    "active_after_inclusive was not specified but it is required when building ActiveTimeRange",
                )
            })?,
            active_before_inclusive: self.active_before_inclusive.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "active_before_inclusive",
                    "active_before_inclusive was not specified but it is required when building ActiveTimeRange",
                )
            })?,
        })
    }
}
