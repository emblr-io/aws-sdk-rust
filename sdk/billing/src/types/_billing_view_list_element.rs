// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A representation of a billing view.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct BillingViewListElement {
    /// <p>The Amazon Resource Name (ARN) that can be used to uniquely identify the billing view.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>A list of names of the Billing view.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the billing view.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The list of owners of the Billing view.</p>
    pub owner_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of billing view.</p>
    pub billing_view_type: ::std::option::Option<crate::types::BillingViewType>,
}
impl BillingViewListElement {
    /// <p>The Amazon Resource Name (ARN) that can be used to uniquely identify the billing view.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A list of names of the Billing view.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the billing view.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The list of owners of the Billing view.</p>
    pub fn owner_account_id(&self) -> ::std::option::Option<&str> {
        self.owner_account_id.as_deref()
    }
    /// <p>The type of billing view.</p>
    pub fn billing_view_type(&self) -> ::std::option::Option<&crate::types::BillingViewType> {
        self.billing_view_type.as_ref()
    }
}
impl ::std::fmt::Debug for BillingViewListElement {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BillingViewListElement");
        formatter.field("arn", &self.arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("owner_account_id", &self.owner_account_id);
        formatter.field("billing_view_type", &self.billing_view_type);
        formatter.finish()
    }
}
impl BillingViewListElement {
    /// Creates a new builder-style object to manufacture [`BillingViewListElement`](crate::types::BillingViewListElement).
    pub fn builder() -> crate::types::builders::BillingViewListElementBuilder {
        crate::types::builders::BillingViewListElementBuilder::default()
    }
}

/// A builder for [`BillingViewListElement`](crate::types::BillingViewListElement).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct BillingViewListElementBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) owner_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) billing_view_type: ::std::option::Option<crate::types::BillingViewType>,
}
impl BillingViewListElementBuilder {
    /// <p>The Amazon Resource Name (ARN) that can be used to uniquely identify the billing view.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that can be used to uniquely identify the billing view.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that can be used to uniquely identify the billing view.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>A list of names of the Billing view.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A list of names of the Billing view.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A list of names of the Billing view.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the billing view.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the billing view.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the billing view.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The list of owners of the Billing view.</p>
    pub fn owner_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The list of owners of the Billing view.</p>
    pub fn set_owner_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_account_id = input;
        self
    }
    /// <p>The list of owners of the Billing view.</p>
    pub fn get_owner_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_account_id
    }
    /// <p>The type of billing view.</p>
    pub fn billing_view_type(mut self, input: crate::types::BillingViewType) -> Self {
        self.billing_view_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of billing view.</p>
    pub fn set_billing_view_type(mut self, input: ::std::option::Option<crate::types::BillingViewType>) -> Self {
        self.billing_view_type = input;
        self
    }
    /// <p>The type of billing view.</p>
    pub fn get_billing_view_type(&self) -> &::std::option::Option<crate::types::BillingViewType> {
        &self.billing_view_type
    }
    /// Consumes the builder and constructs a [`BillingViewListElement`](crate::types::BillingViewListElement).
    pub fn build(self) -> crate::types::BillingViewListElement {
        crate::types::BillingViewListElement {
            arn: self.arn,
            name: self.name,
            description: self.description,
            owner_account_id: self.owner_account_id,
            billing_view_type: self.billing_view_type,
        }
    }
}
impl ::std::fmt::Debug for BillingViewListElementBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BillingViewListElementBuilder");
        formatter.field("arn", &self.arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("owner_account_id", &self.owner_account_id);
        formatter.field("billing_view_type", &self.billing_view_type);
        formatter.finish()
    }
}
