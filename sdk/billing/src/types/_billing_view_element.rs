// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metadata associated to the billing view.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct BillingViewElement {
    /// <p>The Amazon Resource Name (ARN) that can be used to uniquely identify the billing view.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>A list of names of the billing view.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the billing view.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The type of billing group.</p>
    pub billing_view_type: ::std::option::Option<crate::types::BillingViewType>,
    /// <p>The list of owners of the billing view.</p>
    pub owner_account_id: ::std::option::Option<::std::string::String>,
    /// <p>See <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a>. Billing view only supports <code>LINKED_ACCOUNT</code> and <code>Tags</code>.</p>
    pub data_filter_expression: ::std::option::Option<crate::types::Expression>,
    /// <p>The time when the billing view was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time when the billing view was last updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl BillingViewElement {
    /// <p>The Amazon Resource Name (ARN) that can be used to uniquely identify the billing view.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A list of names of the billing view.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the billing view.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The type of billing group.</p>
    pub fn billing_view_type(&self) -> ::std::option::Option<&crate::types::BillingViewType> {
        self.billing_view_type.as_ref()
    }
    /// <p>The list of owners of the billing view.</p>
    pub fn owner_account_id(&self) -> ::std::option::Option<&str> {
        self.owner_account_id.as_deref()
    }
    /// <p>See <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a>. Billing view only supports <code>LINKED_ACCOUNT</code> and <code>Tags</code>.</p>
    pub fn data_filter_expression(&self) -> ::std::option::Option<&crate::types::Expression> {
        self.data_filter_expression.as_ref()
    }
    /// <p>The time when the billing view was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The time when the billing view was last updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl ::std::fmt::Debug for BillingViewElement {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BillingViewElement");
        formatter.field("arn", &self.arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_view_type", &self.billing_view_type);
        formatter.field("owner_account_id", &self.owner_account_id);
        formatter.field("data_filter_expression", &self.data_filter_expression);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.finish()
    }
}
impl BillingViewElement {
    /// Creates a new builder-style object to manufacture [`BillingViewElement`](crate::types::BillingViewElement).
    pub fn builder() -> crate::types::builders::BillingViewElementBuilder {
        crate::types::builders::BillingViewElementBuilder::default()
    }
}

/// A builder for [`BillingViewElement`](crate::types::BillingViewElement).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct BillingViewElementBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) billing_view_type: ::std::option::Option<crate::types::BillingViewType>,
    pub(crate) owner_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) data_filter_expression: ::std::option::Option<crate::types::Expression>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl BillingViewElementBuilder {
    /// <p>The Amazon Resource Name (ARN) that can be used to uniquely identify the billing view.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that can be used to uniquely identify the billing view.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that can be used to uniquely identify the billing view.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>A list of names of the billing view.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A list of names of the billing view.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A list of names of the billing view.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the billing view.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the billing view.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the billing view.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The type of billing group.</p>
    pub fn billing_view_type(mut self, input: crate::types::BillingViewType) -> Self {
        self.billing_view_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of billing group.</p>
    pub fn set_billing_view_type(mut self, input: ::std::option::Option<crate::types::BillingViewType>) -> Self {
        self.billing_view_type = input;
        self
    }
    /// <p>The type of billing group.</p>
    pub fn get_billing_view_type(&self) -> &::std::option::Option<crate::types::BillingViewType> {
        &self.billing_view_type
    }
    /// <p>The list of owners of the billing view.</p>
    pub fn owner_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The list of owners of the billing view.</p>
    pub fn set_owner_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_account_id = input;
        self
    }
    /// <p>The list of owners of the billing view.</p>
    pub fn get_owner_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_account_id
    }
    /// <p>See <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a>. Billing view only supports <code>LINKED_ACCOUNT</code> and <code>Tags</code>.</p>
    pub fn data_filter_expression(mut self, input: crate::types::Expression) -> Self {
        self.data_filter_expression = ::std::option::Option::Some(input);
        self
    }
    /// <p>See <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a>. Billing view only supports <code>LINKED_ACCOUNT</code> and <code>Tags</code>.</p>
    pub fn set_data_filter_expression(mut self, input: ::std::option::Option<crate::types::Expression>) -> Self {
        self.data_filter_expression = input;
        self
    }
    /// <p>See <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html">Expression</a>. Billing view only supports <code>LINKED_ACCOUNT</code> and <code>Tags</code>.</p>
    pub fn get_data_filter_expression(&self) -> &::std::option::Option<crate::types::Expression> {
        &self.data_filter_expression
    }
    /// <p>The time when the billing view was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the billing view was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time when the billing view was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The time when the billing view was last updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the billing view was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The time when the billing view was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Consumes the builder and constructs a [`BillingViewElement`](crate::types::BillingViewElement).
    pub fn build(self) -> crate::types::BillingViewElement {
        crate::types::BillingViewElement {
            arn: self.arn,
            name: self.name,
            description: self.description,
            billing_view_type: self.billing_view_type,
            owner_account_id: self.owner_account_id,
            data_filter_expression: self.data_filter_expression,
            created_at: self.created_at,
            updated_at: self.updated_at,
        }
    }
}
impl ::std::fmt::Debug for BillingViewElementBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BillingViewElementBuilder");
        formatter.field("arn", &self.arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("billing_view_type", &self.billing_view_type);
        formatter.field("owner_account_id", &self.owner_account_id);
        formatter.field("data_filter_expression", &self.data_filter_expression);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.finish()
    }
}
