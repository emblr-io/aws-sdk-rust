// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Parameter information of a WrappedKeyBlock for encryption key exchange.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WrappedKey {
    /// <p>Parameter information of a WrappedKeyBlock for encryption key exchange.</p>
    pub wrapped_key_material: ::std::option::Option<crate::types::WrappedKeyMaterial>,
    /// <p>The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV). It is used to validate the key integrity.</p>
    /// <p>For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero, with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES keys, the KCV is computed using a CMAC algorithm where the input data is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.</p>
    pub key_check_value_algorithm: ::std::option::Option<crate::types::KeyCheckValueAlgorithm>,
}
impl WrappedKey {
    /// <p>Parameter information of a WrappedKeyBlock for encryption key exchange.</p>
    pub fn wrapped_key_material(&self) -> ::std::option::Option<&crate::types::WrappedKeyMaterial> {
        self.wrapped_key_material.as_ref()
    }
    /// <p>The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV). It is used to validate the key integrity.</p>
    /// <p>For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero, with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES keys, the KCV is computed using a CMAC algorithm where the input data is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.</p>
    pub fn key_check_value_algorithm(&self) -> ::std::option::Option<&crate::types::KeyCheckValueAlgorithm> {
        self.key_check_value_algorithm.as_ref()
    }
}
impl WrappedKey {
    /// Creates a new builder-style object to manufacture [`WrappedKey`](crate::types::WrappedKey).
    pub fn builder() -> crate::types::builders::WrappedKeyBuilder {
        crate::types::builders::WrappedKeyBuilder::default()
    }
}

/// A builder for [`WrappedKey`](crate::types::WrappedKey).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WrappedKeyBuilder {
    pub(crate) wrapped_key_material: ::std::option::Option<crate::types::WrappedKeyMaterial>,
    pub(crate) key_check_value_algorithm: ::std::option::Option<crate::types::KeyCheckValueAlgorithm>,
}
impl WrappedKeyBuilder {
    /// <p>Parameter information of a WrappedKeyBlock for encryption key exchange.</p>
    /// This field is required.
    pub fn wrapped_key_material(mut self, input: crate::types::WrappedKeyMaterial) -> Self {
        self.wrapped_key_material = ::std::option::Option::Some(input);
        self
    }
    /// <p>Parameter information of a WrappedKeyBlock for encryption key exchange.</p>
    pub fn set_wrapped_key_material(mut self, input: ::std::option::Option<crate::types::WrappedKeyMaterial>) -> Self {
        self.wrapped_key_material = input;
        self
    }
    /// <p>Parameter information of a WrappedKeyBlock for encryption key exchange.</p>
    pub fn get_wrapped_key_material(&self) -> &::std::option::Option<crate::types::WrappedKeyMaterial> {
        &self.wrapped_key_material
    }
    /// <p>The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV). It is used to validate the key integrity.</p>
    /// <p>For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero, with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES keys, the KCV is computed using a CMAC algorithm where the input data is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.</p>
    pub fn key_check_value_algorithm(mut self, input: crate::types::KeyCheckValueAlgorithm) -> Self {
        self.key_check_value_algorithm = ::std::option::Option::Some(input);
        self
    }
    /// <p>The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV). It is used to validate the key integrity.</p>
    /// <p>For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero, with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES keys, the KCV is computed using a CMAC algorithm where the input data is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.</p>
    pub fn set_key_check_value_algorithm(mut self, input: ::std::option::Option<crate::types::KeyCheckValueAlgorithm>) -> Self {
        self.key_check_value_algorithm = input;
        self
    }
    /// <p>The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV). It is used to validate the key integrity.</p>
    /// <p>For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero, with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES keys, the KCV is computed using a CMAC algorithm where the input data is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.</p>
    pub fn get_key_check_value_algorithm(&self) -> &::std::option::Option<crate::types::KeyCheckValueAlgorithm> {
        &self.key_check_value_algorithm
    }
    /// Consumes the builder and constructs a [`WrappedKey`](crate::types::WrappedKey).
    pub fn build(self) -> crate::types::WrappedKey {
        crate::types::WrappedKey {
            wrapped_key_material: self.wrapped_key_material,
            key_check_value_algorithm: self.key_check_value_algorithm,
        }
    }
}
