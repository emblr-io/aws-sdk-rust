// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The attributes values used for Amex and Visa derivation methods.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VisaAmexDerivationOutputs {
    /// <p>The <code>keyArn</code> of the issuer master key for cryptogram (IMK-AC) used by the operation.</p>
    pub authorization_request_key_arn: ::std::string::String,
    /// <p>The key check value (KCV) of the issuer master key for cryptogram (IMK-AC) used by the operation.</p>
    pub authorization_request_key_check_value: ::std::string::String,
    /// <p>The <code>keyArn</code> of the current PIN PEK.</p>
    pub current_pin_pek_arn: ::std::option::Option<::std::string::String>,
    /// <p>The key check value (KCV) of the current PIN PEK.</p>
    pub current_pin_pek_key_check_value: ::std::option::Option<::std::string::String>,
}
impl VisaAmexDerivationOutputs {
    /// <p>The <code>keyArn</code> of the issuer master key for cryptogram (IMK-AC) used by the operation.</p>
    pub fn authorization_request_key_arn(&self) -> &str {
        use std::ops::Deref;
        self.authorization_request_key_arn.deref()
    }
    /// <p>The key check value (KCV) of the issuer master key for cryptogram (IMK-AC) used by the operation.</p>
    pub fn authorization_request_key_check_value(&self) -> &str {
        use std::ops::Deref;
        self.authorization_request_key_check_value.deref()
    }
    /// <p>The <code>keyArn</code> of the current PIN PEK.</p>
    pub fn current_pin_pek_arn(&self) -> ::std::option::Option<&str> {
        self.current_pin_pek_arn.as_deref()
    }
    /// <p>The key check value (KCV) of the current PIN PEK.</p>
    pub fn current_pin_pek_key_check_value(&self) -> ::std::option::Option<&str> {
        self.current_pin_pek_key_check_value.as_deref()
    }
}
impl VisaAmexDerivationOutputs {
    /// Creates a new builder-style object to manufacture [`VisaAmexDerivationOutputs`](crate::types::VisaAmexDerivationOutputs).
    pub fn builder() -> crate::types::builders::VisaAmexDerivationOutputsBuilder {
        crate::types::builders::VisaAmexDerivationOutputsBuilder::default()
    }
}

/// A builder for [`VisaAmexDerivationOutputs`](crate::types::VisaAmexDerivationOutputs).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VisaAmexDerivationOutputsBuilder {
    pub(crate) authorization_request_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) authorization_request_key_check_value: ::std::option::Option<::std::string::String>,
    pub(crate) current_pin_pek_arn: ::std::option::Option<::std::string::String>,
    pub(crate) current_pin_pek_key_check_value: ::std::option::Option<::std::string::String>,
}
impl VisaAmexDerivationOutputsBuilder {
    /// <p>The <code>keyArn</code> of the issuer master key for cryptogram (IMK-AC) used by the operation.</p>
    /// This field is required.
    pub fn authorization_request_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authorization_request_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>keyArn</code> of the issuer master key for cryptogram (IMK-AC) used by the operation.</p>
    pub fn set_authorization_request_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authorization_request_key_arn = input;
        self
    }
    /// <p>The <code>keyArn</code> of the issuer master key for cryptogram (IMK-AC) used by the operation.</p>
    pub fn get_authorization_request_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.authorization_request_key_arn
    }
    /// <p>The key check value (KCV) of the issuer master key for cryptogram (IMK-AC) used by the operation.</p>
    /// This field is required.
    pub fn authorization_request_key_check_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authorization_request_key_check_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key check value (KCV) of the issuer master key for cryptogram (IMK-AC) used by the operation.</p>
    pub fn set_authorization_request_key_check_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authorization_request_key_check_value = input;
        self
    }
    /// <p>The key check value (KCV) of the issuer master key for cryptogram (IMK-AC) used by the operation.</p>
    pub fn get_authorization_request_key_check_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.authorization_request_key_check_value
    }
    /// <p>The <code>keyArn</code> of the current PIN PEK.</p>
    pub fn current_pin_pek_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_pin_pek_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>keyArn</code> of the current PIN PEK.</p>
    pub fn set_current_pin_pek_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_pin_pek_arn = input;
        self
    }
    /// <p>The <code>keyArn</code> of the current PIN PEK.</p>
    pub fn get_current_pin_pek_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_pin_pek_arn
    }
    /// <p>The key check value (KCV) of the current PIN PEK.</p>
    pub fn current_pin_pek_key_check_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_pin_pek_key_check_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key check value (KCV) of the current PIN PEK.</p>
    pub fn set_current_pin_pek_key_check_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_pin_pek_key_check_value = input;
        self
    }
    /// <p>The key check value (KCV) of the current PIN PEK.</p>
    pub fn get_current_pin_pek_key_check_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_pin_pek_key_check_value
    }
    /// Consumes the builder and constructs a [`VisaAmexDerivationOutputs`](crate::types::VisaAmexDerivationOutputs).
    /// This method will fail if any of the following fields are not set:
    /// - [`authorization_request_key_arn`](crate::types::builders::VisaAmexDerivationOutputsBuilder::authorization_request_key_arn)
    /// - [`authorization_request_key_check_value`](crate::types::builders::VisaAmexDerivationOutputsBuilder::authorization_request_key_check_value)
    pub fn build(self) -> ::std::result::Result<crate::types::VisaAmexDerivationOutputs, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::VisaAmexDerivationOutputs {
            authorization_request_key_arn: self.authorization_request_key_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "authorization_request_key_arn",
                    "authorization_request_key_arn was not specified but it is required when building VisaAmexDerivationOutputs",
                )
            })?,
            authorization_request_key_check_value: self.authorization_request_key_check_value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "authorization_request_key_check_value",
                    "authorization_request_key_check_value was not specified but it is required when building VisaAmexDerivationOutputs",
                )
            })?,
            current_pin_pek_arn: self.current_pin_pek_arn,
            current_pin_pek_key_check_value: self.current_pin_pek_key_check_value,
        })
    }
}
