// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameter values of the current PIN to be changed on the EMV chip card.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CurrentPinAttributes {
    /// <p>The <code>keyArn</code> of the current PIN PEK.</p>
    pub current_pin_pek_identifier: ::std::string::String,
    /// <p>The encrypted pinblock of the current pin stored on the chip card.</p>
    pub current_encrypted_pin_block: ::std::string::String,
}
impl CurrentPinAttributes {
    /// <p>The <code>keyArn</code> of the current PIN PEK.</p>
    pub fn current_pin_pek_identifier(&self) -> &str {
        use std::ops::Deref;
        self.current_pin_pek_identifier.deref()
    }
    /// <p>The encrypted pinblock of the current pin stored on the chip card.</p>
    pub fn current_encrypted_pin_block(&self) -> &str {
        use std::ops::Deref;
        self.current_encrypted_pin_block.deref()
    }
}
impl ::std::fmt::Debug for CurrentPinAttributes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CurrentPinAttributes");
        formatter.field("current_pin_pek_identifier", &self.current_pin_pek_identifier);
        formatter.field("current_encrypted_pin_block", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CurrentPinAttributes {
    /// Creates a new builder-style object to manufacture [`CurrentPinAttributes`](crate::types::CurrentPinAttributes).
    pub fn builder() -> crate::types::builders::CurrentPinAttributesBuilder {
        crate::types::builders::CurrentPinAttributesBuilder::default()
    }
}

/// A builder for [`CurrentPinAttributes`](crate::types::CurrentPinAttributes).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CurrentPinAttributesBuilder {
    pub(crate) current_pin_pek_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) current_encrypted_pin_block: ::std::option::Option<::std::string::String>,
}
impl CurrentPinAttributesBuilder {
    /// <p>The <code>keyArn</code> of the current PIN PEK.</p>
    /// This field is required.
    pub fn current_pin_pek_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_pin_pek_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>keyArn</code> of the current PIN PEK.</p>
    pub fn set_current_pin_pek_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_pin_pek_identifier = input;
        self
    }
    /// <p>The <code>keyArn</code> of the current PIN PEK.</p>
    pub fn get_current_pin_pek_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_pin_pek_identifier
    }
    /// <p>The encrypted pinblock of the current pin stored on the chip card.</p>
    /// This field is required.
    pub fn current_encrypted_pin_block(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_encrypted_pin_block = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The encrypted pinblock of the current pin stored on the chip card.</p>
    pub fn set_current_encrypted_pin_block(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_encrypted_pin_block = input;
        self
    }
    /// <p>The encrypted pinblock of the current pin stored on the chip card.</p>
    pub fn get_current_encrypted_pin_block(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_encrypted_pin_block
    }
    /// Consumes the builder and constructs a [`CurrentPinAttributes`](crate::types::CurrentPinAttributes).
    /// This method will fail if any of the following fields are not set:
    /// - [`current_pin_pek_identifier`](crate::types::builders::CurrentPinAttributesBuilder::current_pin_pek_identifier)
    /// - [`current_encrypted_pin_block`](crate::types::builders::CurrentPinAttributesBuilder::current_encrypted_pin_block)
    pub fn build(self) -> ::std::result::Result<crate::types::CurrentPinAttributes, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CurrentPinAttributes {
            current_pin_pek_identifier: self.current_pin_pek_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "current_pin_pek_identifier",
                    "current_pin_pek_identifier was not specified but it is required when building CurrentPinAttributes",
                )
            })?,
            current_encrypted_pin_block: self.current_encrypted_pin_block.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "current_encrypted_pin_block",
                    "current_encrypted_pin_block was not specified but it is required when building CurrentPinAttributes",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for CurrentPinAttributesBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CurrentPinAttributesBuilder");
        formatter.field("current_pin_pek_identifier", &self.current_pin_pek_identifier);
        formatter.field("current_encrypted_pin_block", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
