// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Parameters to derive the payment card specific confidentiality and integrity keys.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum DerivationMethodAttributes {
    /// <p>Parameters to derive the confidentiality and integrity keys for a payment card using Amex derivation method.</p>
    Amex(crate::types::AmexAttributes),
    /// <p>Parameters to derive the confidentiality and integrity keys for a payment card using Emv2000 derivation method.</p>
    Emv2000(crate::types::Emv2000Attributes),
    /// <p>Parameters to derive the confidentiality and integrity keys for a payment card using Emv common derivation method.</p>
    EmvCommon(crate::types::EmvCommonAttributes),
    /// <p>Parameters to derive the confidentiality and integrity keys for a payment card using Mastercard derivation method.</p>
    Mastercard(crate::types::MasterCardAttributes),
    /// <p>Parameters to derive the confidentiality and integrity keys for a a payment card using Visa derivation method.</p>
    Visa(crate::types::VisaAttributes),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl DerivationMethodAttributes {
    /// Tries to convert the enum instance into [`Amex`](crate::types::DerivationMethodAttributes::Amex), extracting the inner [`AmexAttributes`](crate::types::AmexAttributes).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_amex(&self) -> ::std::result::Result<&crate::types::AmexAttributes, &Self> {
        if let DerivationMethodAttributes::Amex(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Amex`](crate::types::DerivationMethodAttributes::Amex).
    pub fn is_amex(&self) -> bool {
        self.as_amex().is_ok()
    }
    /// Tries to convert the enum instance into [`Emv2000`](crate::types::DerivationMethodAttributes::Emv2000), extracting the inner [`Emv2000Attributes`](crate::types::Emv2000Attributes).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_emv2000(&self) -> ::std::result::Result<&crate::types::Emv2000Attributes, &Self> {
        if let DerivationMethodAttributes::Emv2000(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Emv2000`](crate::types::DerivationMethodAttributes::Emv2000).
    pub fn is_emv2000(&self) -> bool {
        self.as_emv2000().is_ok()
    }
    /// Tries to convert the enum instance into [`EmvCommon`](crate::types::DerivationMethodAttributes::EmvCommon), extracting the inner [`EmvCommonAttributes`](crate::types::EmvCommonAttributes).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_emv_common(&self) -> ::std::result::Result<&crate::types::EmvCommonAttributes, &Self> {
        if let DerivationMethodAttributes::EmvCommon(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`EmvCommon`](crate::types::DerivationMethodAttributes::EmvCommon).
    pub fn is_emv_common(&self) -> bool {
        self.as_emv_common().is_ok()
    }
    /// Tries to convert the enum instance into [`Mastercard`](crate::types::DerivationMethodAttributes::Mastercard), extracting the inner [`MasterCardAttributes`](crate::types::MasterCardAttributes).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_mastercard(&self) -> ::std::result::Result<&crate::types::MasterCardAttributes, &Self> {
        if let DerivationMethodAttributes::Mastercard(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Mastercard`](crate::types::DerivationMethodAttributes::Mastercard).
    pub fn is_mastercard(&self) -> bool {
        self.as_mastercard().is_ok()
    }
    /// Tries to convert the enum instance into [`Visa`](crate::types::DerivationMethodAttributes::Visa), extracting the inner [`VisaAttributes`](crate::types::VisaAttributes).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_visa(&self) -> ::std::result::Result<&crate::types::VisaAttributes, &Self> {
        if let DerivationMethodAttributes::Visa(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Visa`](crate::types::DerivationMethodAttributes::Visa).
    pub fn is_visa(&self) -> bool {
        self.as_visa().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
