// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GenerateMacEmvPinChangeOutput {
    /// <p>Returns the <code>keyArn</code> of the PEK protecting the incoming new encrypted PIN block.</p>
    pub new_pin_pek_arn: ::std::string::String,
    /// <p>Returns the <code>keyArn</code> of the IMK-SMI used by the operation.</p>
    pub secure_messaging_integrity_key_arn: ::std::string::String,
    /// <p>Returns the <code>keyArn</code> of the IMK-SMC used by the operation.</p>
    pub secure_messaging_confidentiality_key_arn: ::std::string::String,
    /// <p>Returns the mac of the issuer script containing message data and appended target encrypted pin block in ISO2 format.</p>
    pub mac: ::std::string::String,
    /// <p>Returns the incoming new encrpted PIN block.</p>
    pub encrypted_pin_block: ::std::string::String,
    /// <p>The key check value (KCV) of the PEK uprotecting the incoming new encrypted PIN block.</p>
    pub new_pin_pek_key_check_value: ::std::string::String,
    /// <p>The key check value (KCV) of the SMI issuer master key used by the operation.</p>
    pub secure_messaging_integrity_key_check_value: ::std::string::String,
    /// <p>The key check value (KCV) of the SMC issuer master key used by the operation.</p>
    pub secure_messaging_confidentiality_key_check_value: ::std::string::String,
    /// <p>The attribute values used for Amex and Visa derivation methods.</p>
    pub visa_amex_derivation_outputs: ::std::option::Option<crate::types::VisaAmexDerivationOutputs>,
    _request_id: Option<String>,
}
impl GenerateMacEmvPinChangeOutput {
    /// <p>Returns the <code>keyArn</code> of the PEK protecting the incoming new encrypted PIN block.</p>
    pub fn new_pin_pek_arn(&self) -> &str {
        use std::ops::Deref;
        self.new_pin_pek_arn.deref()
    }
    /// <p>Returns the <code>keyArn</code> of the IMK-SMI used by the operation.</p>
    pub fn secure_messaging_integrity_key_arn(&self) -> &str {
        use std::ops::Deref;
        self.secure_messaging_integrity_key_arn.deref()
    }
    /// <p>Returns the <code>keyArn</code> of the IMK-SMC used by the operation.</p>
    pub fn secure_messaging_confidentiality_key_arn(&self) -> &str {
        use std::ops::Deref;
        self.secure_messaging_confidentiality_key_arn.deref()
    }
    /// <p>Returns the mac of the issuer script containing message data and appended target encrypted pin block in ISO2 format.</p>
    pub fn mac(&self) -> &str {
        use std::ops::Deref;
        self.mac.deref()
    }
    /// <p>Returns the incoming new encrpted PIN block.</p>
    pub fn encrypted_pin_block(&self) -> &str {
        use std::ops::Deref;
        self.encrypted_pin_block.deref()
    }
    /// <p>The key check value (KCV) of the PEK uprotecting the incoming new encrypted PIN block.</p>
    pub fn new_pin_pek_key_check_value(&self) -> &str {
        use std::ops::Deref;
        self.new_pin_pek_key_check_value.deref()
    }
    /// <p>The key check value (KCV) of the SMI issuer master key used by the operation.</p>
    pub fn secure_messaging_integrity_key_check_value(&self) -> &str {
        use std::ops::Deref;
        self.secure_messaging_integrity_key_check_value.deref()
    }
    /// <p>The key check value (KCV) of the SMC issuer master key used by the operation.</p>
    pub fn secure_messaging_confidentiality_key_check_value(&self) -> &str {
        use std::ops::Deref;
        self.secure_messaging_confidentiality_key_check_value.deref()
    }
    /// <p>The attribute values used for Amex and Visa derivation methods.</p>
    pub fn visa_amex_derivation_outputs(&self) -> ::std::option::Option<&crate::types::VisaAmexDerivationOutputs> {
        self.visa_amex_derivation_outputs.as_ref()
    }
}
impl ::std::fmt::Debug for GenerateMacEmvPinChangeOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GenerateMacEmvPinChangeOutput");
        formatter.field("new_pin_pek_arn", &self.new_pin_pek_arn);
        formatter.field("secure_messaging_integrity_key_arn", &self.secure_messaging_integrity_key_arn);
        formatter.field("secure_messaging_confidentiality_key_arn", &self.secure_messaging_confidentiality_key_arn);
        formatter.field("mac", &"*** Sensitive Data Redacted ***");
        formatter.field("encrypted_pin_block", &"*** Sensitive Data Redacted ***");
        formatter.field("new_pin_pek_key_check_value", &self.new_pin_pek_key_check_value);
        formatter.field(
            "secure_messaging_integrity_key_check_value",
            &self.secure_messaging_integrity_key_check_value,
        );
        formatter.field(
            "secure_messaging_confidentiality_key_check_value",
            &self.secure_messaging_confidentiality_key_check_value,
        );
        formatter.field("visa_amex_derivation_outputs", &self.visa_amex_derivation_outputs);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GenerateMacEmvPinChangeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GenerateMacEmvPinChangeOutput {
    /// Creates a new builder-style object to manufacture [`GenerateMacEmvPinChangeOutput`](crate::operation::generate_mac_emv_pin_change::GenerateMacEmvPinChangeOutput).
    pub fn builder() -> crate::operation::generate_mac_emv_pin_change::builders::GenerateMacEmvPinChangeOutputBuilder {
        crate::operation::generate_mac_emv_pin_change::builders::GenerateMacEmvPinChangeOutputBuilder::default()
    }
}

/// A builder for [`GenerateMacEmvPinChangeOutput`](crate::operation::generate_mac_emv_pin_change::GenerateMacEmvPinChangeOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GenerateMacEmvPinChangeOutputBuilder {
    pub(crate) new_pin_pek_arn: ::std::option::Option<::std::string::String>,
    pub(crate) secure_messaging_integrity_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) secure_messaging_confidentiality_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) mac: ::std::option::Option<::std::string::String>,
    pub(crate) encrypted_pin_block: ::std::option::Option<::std::string::String>,
    pub(crate) new_pin_pek_key_check_value: ::std::option::Option<::std::string::String>,
    pub(crate) secure_messaging_integrity_key_check_value: ::std::option::Option<::std::string::String>,
    pub(crate) secure_messaging_confidentiality_key_check_value: ::std::option::Option<::std::string::String>,
    pub(crate) visa_amex_derivation_outputs: ::std::option::Option<crate::types::VisaAmexDerivationOutputs>,
    _request_id: Option<String>,
}
impl GenerateMacEmvPinChangeOutputBuilder {
    /// <p>Returns the <code>keyArn</code> of the PEK protecting the incoming new encrypted PIN block.</p>
    /// This field is required.
    pub fn new_pin_pek_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.new_pin_pek_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Returns the <code>keyArn</code> of the PEK protecting the incoming new encrypted PIN block.</p>
    pub fn set_new_pin_pek_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.new_pin_pek_arn = input;
        self
    }
    /// <p>Returns the <code>keyArn</code> of the PEK protecting the incoming new encrypted PIN block.</p>
    pub fn get_new_pin_pek_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.new_pin_pek_arn
    }
    /// <p>Returns the <code>keyArn</code> of the IMK-SMI used by the operation.</p>
    /// This field is required.
    pub fn secure_messaging_integrity_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secure_messaging_integrity_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Returns the <code>keyArn</code> of the IMK-SMI used by the operation.</p>
    pub fn set_secure_messaging_integrity_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secure_messaging_integrity_key_arn = input;
        self
    }
    /// <p>Returns the <code>keyArn</code> of the IMK-SMI used by the operation.</p>
    pub fn get_secure_messaging_integrity_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.secure_messaging_integrity_key_arn
    }
    /// <p>Returns the <code>keyArn</code> of the IMK-SMC used by the operation.</p>
    /// This field is required.
    pub fn secure_messaging_confidentiality_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secure_messaging_confidentiality_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Returns the <code>keyArn</code> of the IMK-SMC used by the operation.</p>
    pub fn set_secure_messaging_confidentiality_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secure_messaging_confidentiality_key_arn = input;
        self
    }
    /// <p>Returns the <code>keyArn</code> of the IMK-SMC used by the operation.</p>
    pub fn get_secure_messaging_confidentiality_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.secure_messaging_confidentiality_key_arn
    }
    /// <p>Returns the mac of the issuer script containing message data and appended target encrypted pin block in ISO2 format.</p>
    /// This field is required.
    pub fn mac(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mac = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Returns the mac of the issuer script containing message data and appended target encrypted pin block in ISO2 format.</p>
    pub fn set_mac(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mac = input;
        self
    }
    /// <p>Returns the mac of the issuer script containing message data and appended target encrypted pin block in ISO2 format.</p>
    pub fn get_mac(&self) -> &::std::option::Option<::std::string::String> {
        &self.mac
    }
    /// <p>Returns the incoming new encrpted PIN block.</p>
    /// This field is required.
    pub fn encrypted_pin_block(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encrypted_pin_block = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Returns the incoming new encrpted PIN block.</p>
    pub fn set_encrypted_pin_block(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encrypted_pin_block = input;
        self
    }
    /// <p>Returns the incoming new encrpted PIN block.</p>
    pub fn get_encrypted_pin_block(&self) -> &::std::option::Option<::std::string::String> {
        &self.encrypted_pin_block
    }
    /// <p>The key check value (KCV) of the PEK uprotecting the incoming new encrypted PIN block.</p>
    /// This field is required.
    pub fn new_pin_pek_key_check_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.new_pin_pek_key_check_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key check value (KCV) of the PEK uprotecting the incoming new encrypted PIN block.</p>
    pub fn set_new_pin_pek_key_check_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.new_pin_pek_key_check_value = input;
        self
    }
    /// <p>The key check value (KCV) of the PEK uprotecting the incoming new encrypted PIN block.</p>
    pub fn get_new_pin_pek_key_check_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.new_pin_pek_key_check_value
    }
    /// <p>The key check value (KCV) of the SMI issuer master key used by the operation.</p>
    /// This field is required.
    pub fn secure_messaging_integrity_key_check_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secure_messaging_integrity_key_check_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key check value (KCV) of the SMI issuer master key used by the operation.</p>
    pub fn set_secure_messaging_integrity_key_check_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secure_messaging_integrity_key_check_value = input;
        self
    }
    /// <p>The key check value (KCV) of the SMI issuer master key used by the operation.</p>
    pub fn get_secure_messaging_integrity_key_check_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.secure_messaging_integrity_key_check_value
    }
    /// <p>The key check value (KCV) of the SMC issuer master key used by the operation.</p>
    /// This field is required.
    pub fn secure_messaging_confidentiality_key_check_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secure_messaging_confidentiality_key_check_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key check value (KCV) of the SMC issuer master key used by the operation.</p>
    pub fn set_secure_messaging_confidentiality_key_check_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secure_messaging_confidentiality_key_check_value = input;
        self
    }
    /// <p>The key check value (KCV) of the SMC issuer master key used by the operation.</p>
    pub fn get_secure_messaging_confidentiality_key_check_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.secure_messaging_confidentiality_key_check_value
    }
    /// <p>The attribute values used for Amex and Visa derivation methods.</p>
    pub fn visa_amex_derivation_outputs(mut self, input: crate::types::VisaAmexDerivationOutputs) -> Self {
        self.visa_amex_derivation_outputs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The attribute values used for Amex and Visa derivation methods.</p>
    pub fn set_visa_amex_derivation_outputs(mut self, input: ::std::option::Option<crate::types::VisaAmexDerivationOutputs>) -> Self {
        self.visa_amex_derivation_outputs = input;
        self
    }
    /// <p>The attribute values used for Amex and Visa derivation methods.</p>
    pub fn get_visa_amex_derivation_outputs(&self) -> &::std::option::Option<crate::types::VisaAmexDerivationOutputs> {
        &self.visa_amex_derivation_outputs
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GenerateMacEmvPinChangeOutput`](crate::operation::generate_mac_emv_pin_change::GenerateMacEmvPinChangeOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`new_pin_pek_arn`](crate::operation::generate_mac_emv_pin_change::builders::GenerateMacEmvPinChangeOutputBuilder::new_pin_pek_arn)
    /// - [`secure_messaging_integrity_key_arn`](crate::operation::generate_mac_emv_pin_change::builders::GenerateMacEmvPinChangeOutputBuilder::secure_messaging_integrity_key_arn)
    /// - [`secure_messaging_confidentiality_key_arn`](crate::operation::generate_mac_emv_pin_change::builders::GenerateMacEmvPinChangeOutputBuilder::secure_messaging_confidentiality_key_arn)
    /// - [`mac`](crate::operation::generate_mac_emv_pin_change::builders::GenerateMacEmvPinChangeOutputBuilder::mac)
    /// - [`encrypted_pin_block`](crate::operation::generate_mac_emv_pin_change::builders::GenerateMacEmvPinChangeOutputBuilder::encrypted_pin_block)
    /// - [`new_pin_pek_key_check_value`](crate::operation::generate_mac_emv_pin_change::builders::GenerateMacEmvPinChangeOutputBuilder::new_pin_pek_key_check_value)
    /// - [`secure_messaging_integrity_key_check_value`](crate::operation::generate_mac_emv_pin_change::builders::GenerateMacEmvPinChangeOutputBuilder::secure_messaging_integrity_key_check_value)
    /// - [`secure_messaging_confidentiality_key_check_value`](crate::operation::generate_mac_emv_pin_change::builders::GenerateMacEmvPinChangeOutputBuilder::secure_messaging_confidentiality_key_check_value)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::generate_mac_emv_pin_change::GenerateMacEmvPinChangeOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::generate_mac_emv_pin_change::GenerateMacEmvPinChangeOutput {
                new_pin_pek_arn: self.new_pin_pek_arn
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("new_pin_pek_arn", "new_pin_pek_arn was not specified but it is required when building GenerateMacEmvPinChangeOutput")
                    )?
                ,
                secure_messaging_integrity_key_arn: self.secure_messaging_integrity_key_arn
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("secure_messaging_integrity_key_arn", "secure_messaging_integrity_key_arn was not specified but it is required when building GenerateMacEmvPinChangeOutput")
                    )?
                ,
                secure_messaging_confidentiality_key_arn: self.secure_messaging_confidentiality_key_arn
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("secure_messaging_confidentiality_key_arn", "secure_messaging_confidentiality_key_arn was not specified but it is required when building GenerateMacEmvPinChangeOutput")
                    )?
                ,
                mac: self.mac
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("mac", "mac was not specified but it is required when building GenerateMacEmvPinChangeOutput")
                    )?
                ,
                encrypted_pin_block: self.encrypted_pin_block
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("encrypted_pin_block", "encrypted_pin_block was not specified but it is required when building GenerateMacEmvPinChangeOutput")
                    )?
                ,
                new_pin_pek_key_check_value: self.new_pin_pek_key_check_value
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("new_pin_pek_key_check_value", "new_pin_pek_key_check_value was not specified but it is required when building GenerateMacEmvPinChangeOutput")
                    )?
                ,
                secure_messaging_integrity_key_check_value: self.secure_messaging_integrity_key_check_value
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("secure_messaging_integrity_key_check_value", "secure_messaging_integrity_key_check_value was not specified but it is required when building GenerateMacEmvPinChangeOutput")
                    )?
                ,
                secure_messaging_confidentiality_key_check_value: self.secure_messaging_confidentiality_key_check_value
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("secure_messaging_confidentiality_key_check_value", "secure_messaging_confidentiality_key_check_value was not specified but it is required when building GenerateMacEmvPinChangeOutput")
                    )?
                ,
                visa_amex_derivation_outputs: self.visa_amex_derivation_outputs
                ,
                _request_id: self._request_id,
            }
        )
    }
}
impl ::std::fmt::Debug for GenerateMacEmvPinChangeOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GenerateMacEmvPinChangeOutputBuilder");
        formatter.field("new_pin_pek_arn", &self.new_pin_pek_arn);
        formatter.field("secure_messaging_integrity_key_arn", &self.secure_messaging_integrity_key_arn);
        formatter.field("secure_messaging_confidentiality_key_arn", &self.secure_messaging_confidentiality_key_arn);
        formatter.field("mac", &"*** Sensitive Data Redacted ***");
        formatter.field("encrypted_pin_block", &"*** Sensitive Data Redacted ***");
        formatter.field("new_pin_pek_key_check_value", &self.new_pin_pek_key_check_value);
        formatter.field(
            "secure_messaging_integrity_key_check_value",
            &self.secure_messaging_integrity_key_check_value,
        );
        formatter.field(
            "secure_messaging_confidentiality_key_check_value",
            &self.secure_messaging_confidentiality_key_check_value,
        );
        formatter.field("visa_amex_derivation_outputs", &self.visa_amex_derivation_outputs);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
