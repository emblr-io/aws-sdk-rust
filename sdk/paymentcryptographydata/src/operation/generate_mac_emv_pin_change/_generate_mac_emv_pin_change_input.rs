// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GenerateMacEmvPinChangeInput {
    /// <p>The <code>keyARN</code> of the PEK protecting the incoming new encrypted PIN block.</p>
    pub new_pin_pek_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The incoming new encrypted PIN block data for offline pin change on an EMV card.</p>
    pub new_encrypted_pin_block: ::std::option::Option<::std::string::String>,
    /// <p>The PIN encoding format of the incoming new encrypted PIN block as specified in ISO 9564.</p>
    pub pin_block_format: ::std::option::Option<crate::types::PinBlockFormatForEmvPinChange>,
    /// <p>The <code>keyARN</code> of the issuer master key (IMK-SMI) used to authenticate the issuer script response.</p>
    pub secure_messaging_integrity_key_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The <code>keyARN</code> of the issuer master key (IMK-SMC) used to protect the PIN block data in the issuer script response.</p>
    pub secure_messaging_confidentiality_key_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The message data is the APDU command from the card reader or terminal. The target encrypted PIN block, after translation to ISO2 format, is appended to this message data to generate an issuer script response.</p>
    pub message_data: ::std::option::Option<::std::string::String>,
    /// <p>The attributes and data values to derive payment card specific confidentiality and integrity keys.</p>
    pub derivation_method_attributes: ::std::option::Option<crate::types::DerivationMethodAttributes>,
}
impl GenerateMacEmvPinChangeInput {
    /// <p>The <code>keyARN</code> of the PEK protecting the incoming new encrypted PIN block.</p>
    pub fn new_pin_pek_identifier(&self) -> ::std::option::Option<&str> {
        self.new_pin_pek_identifier.as_deref()
    }
    /// <p>The incoming new encrypted PIN block data for offline pin change on an EMV card.</p>
    pub fn new_encrypted_pin_block(&self) -> ::std::option::Option<&str> {
        self.new_encrypted_pin_block.as_deref()
    }
    /// <p>The PIN encoding format of the incoming new encrypted PIN block as specified in ISO 9564.</p>
    pub fn pin_block_format(&self) -> ::std::option::Option<&crate::types::PinBlockFormatForEmvPinChange> {
        self.pin_block_format.as_ref()
    }
    /// <p>The <code>keyARN</code> of the issuer master key (IMK-SMI) used to authenticate the issuer script response.</p>
    pub fn secure_messaging_integrity_key_identifier(&self) -> ::std::option::Option<&str> {
        self.secure_messaging_integrity_key_identifier.as_deref()
    }
    /// <p>The <code>keyARN</code> of the issuer master key (IMK-SMC) used to protect the PIN block data in the issuer script response.</p>
    pub fn secure_messaging_confidentiality_key_identifier(&self) -> ::std::option::Option<&str> {
        self.secure_messaging_confidentiality_key_identifier.as_deref()
    }
    /// <p>The message data is the APDU command from the card reader or terminal. The target encrypted PIN block, after translation to ISO2 format, is appended to this message data to generate an issuer script response.</p>
    pub fn message_data(&self) -> ::std::option::Option<&str> {
        self.message_data.as_deref()
    }
    /// <p>The attributes and data values to derive payment card specific confidentiality and integrity keys.</p>
    pub fn derivation_method_attributes(&self) -> ::std::option::Option<&crate::types::DerivationMethodAttributes> {
        self.derivation_method_attributes.as_ref()
    }
}
impl ::std::fmt::Debug for GenerateMacEmvPinChangeInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GenerateMacEmvPinChangeInput");
        formatter.field("new_pin_pek_identifier", &self.new_pin_pek_identifier);
        formatter.field("new_encrypted_pin_block", &"*** Sensitive Data Redacted ***");
        formatter.field("pin_block_format", &self.pin_block_format);
        formatter.field(
            "secure_messaging_integrity_key_identifier",
            &self.secure_messaging_integrity_key_identifier,
        );
        formatter.field(
            "secure_messaging_confidentiality_key_identifier",
            &self.secure_messaging_confidentiality_key_identifier,
        );
        formatter.field("message_data", &"*** Sensitive Data Redacted ***");
        formatter.field("derivation_method_attributes", &self.derivation_method_attributes);
        formatter.finish()
    }
}
impl GenerateMacEmvPinChangeInput {
    /// Creates a new builder-style object to manufacture [`GenerateMacEmvPinChangeInput`](crate::operation::generate_mac_emv_pin_change::GenerateMacEmvPinChangeInput).
    pub fn builder() -> crate::operation::generate_mac_emv_pin_change::builders::GenerateMacEmvPinChangeInputBuilder {
        crate::operation::generate_mac_emv_pin_change::builders::GenerateMacEmvPinChangeInputBuilder::default()
    }
}

/// A builder for [`GenerateMacEmvPinChangeInput`](crate::operation::generate_mac_emv_pin_change::GenerateMacEmvPinChangeInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GenerateMacEmvPinChangeInputBuilder {
    pub(crate) new_pin_pek_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) new_encrypted_pin_block: ::std::option::Option<::std::string::String>,
    pub(crate) pin_block_format: ::std::option::Option<crate::types::PinBlockFormatForEmvPinChange>,
    pub(crate) secure_messaging_integrity_key_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) secure_messaging_confidentiality_key_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) message_data: ::std::option::Option<::std::string::String>,
    pub(crate) derivation_method_attributes: ::std::option::Option<crate::types::DerivationMethodAttributes>,
}
impl GenerateMacEmvPinChangeInputBuilder {
    /// <p>The <code>keyARN</code> of the PEK protecting the incoming new encrypted PIN block.</p>
    /// This field is required.
    pub fn new_pin_pek_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.new_pin_pek_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>keyARN</code> of the PEK protecting the incoming new encrypted PIN block.</p>
    pub fn set_new_pin_pek_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.new_pin_pek_identifier = input;
        self
    }
    /// <p>The <code>keyARN</code> of the PEK protecting the incoming new encrypted PIN block.</p>
    pub fn get_new_pin_pek_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.new_pin_pek_identifier
    }
    /// <p>The incoming new encrypted PIN block data for offline pin change on an EMV card.</p>
    /// This field is required.
    pub fn new_encrypted_pin_block(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.new_encrypted_pin_block = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The incoming new encrypted PIN block data for offline pin change on an EMV card.</p>
    pub fn set_new_encrypted_pin_block(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.new_encrypted_pin_block = input;
        self
    }
    /// <p>The incoming new encrypted PIN block data for offline pin change on an EMV card.</p>
    pub fn get_new_encrypted_pin_block(&self) -> &::std::option::Option<::std::string::String> {
        &self.new_encrypted_pin_block
    }
    /// <p>The PIN encoding format of the incoming new encrypted PIN block as specified in ISO 9564.</p>
    /// This field is required.
    pub fn pin_block_format(mut self, input: crate::types::PinBlockFormatForEmvPinChange) -> Self {
        self.pin_block_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The PIN encoding format of the incoming new encrypted PIN block as specified in ISO 9564.</p>
    pub fn set_pin_block_format(mut self, input: ::std::option::Option<crate::types::PinBlockFormatForEmvPinChange>) -> Self {
        self.pin_block_format = input;
        self
    }
    /// <p>The PIN encoding format of the incoming new encrypted PIN block as specified in ISO 9564.</p>
    pub fn get_pin_block_format(&self) -> &::std::option::Option<crate::types::PinBlockFormatForEmvPinChange> {
        &self.pin_block_format
    }
    /// <p>The <code>keyARN</code> of the issuer master key (IMK-SMI) used to authenticate the issuer script response.</p>
    /// This field is required.
    pub fn secure_messaging_integrity_key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secure_messaging_integrity_key_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>keyARN</code> of the issuer master key (IMK-SMI) used to authenticate the issuer script response.</p>
    pub fn set_secure_messaging_integrity_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secure_messaging_integrity_key_identifier = input;
        self
    }
    /// <p>The <code>keyARN</code> of the issuer master key (IMK-SMI) used to authenticate the issuer script response.</p>
    pub fn get_secure_messaging_integrity_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.secure_messaging_integrity_key_identifier
    }
    /// <p>The <code>keyARN</code> of the issuer master key (IMK-SMC) used to protect the PIN block data in the issuer script response.</p>
    /// This field is required.
    pub fn secure_messaging_confidentiality_key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secure_messaging_confidentiality_key_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>keyARN</code> of the issuer master key (IMK-SMC) used to protect the PIN block data in the issuer script response.</p>
    pub fn set_secure_messaging_confidentiality_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secure_messaging_confidentiality_key_identifier = input;
        self
    }
    /// <p>The <code>keyARN</code> of the issuer master key (IMK-SMC) used to protect the PIN block data in the issuer script response.</p>
    pub fn get_secure_messaging_confidentiality_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.secure_messaging_confidentiality_key_identifier
    }
    /// <p>The message data is the APDU command from the card reader or terminal. The target encrypted PIN block, after translation to ISO2 format, is appended to this message data to generate an issuer script response.</p>
    /// This field is required.
    pub fn message_data(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_data = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message data is the APDU command from the card reader or terminal. The target encrypted PIN block, after translation to ISO2 format, is appended to this message data to generate an issuer script response.</p>
    pub fn set_message_data(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_data = input;
        self
    }
    /// <p>The message data is the APDU command from the card reader or terminal. The target encrypted PIN block, after translation to ISO2 format, is appended to this message data to generate an issuer script response.</p>
    pub fn get_message_data(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_data
    }
    /// <p>The attributes and data values to derive payment card specific confidentiality and integrity keys.</p>
    /// This field is required.
    pub fn derivation_method_attributes(mut self, input: crate::types::DerivationMethodAttributes) -> Self {
        self.derivation_method_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The attributes and data values to derive payment card specific confidentiality and integrity keys.</p>
    pub fn set_derivation_method_attributes(mut self, input: ::std::option::Option<crate::types::DerivationMethodAttributes>) -> Self {
        self.derivation_method_attributes = input;
        self
    }
    /// <p>The attributes and data values to derive payment card specific confidentiality and integrity keys.</p>
    pub fn get_derivation_method_attributes(&self) -> &::std::option::Option<crate::types::DerivationMethodAttributes> {
        &self.derivation_method_attributes
    }
    /// Consumes the builder and constructs a [`GenerateMacEmvPinChangeInput`](crate::operation::generate_mac_emv_pin_change::GenerateMacEmvPinChangeInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::generate_mac_emv_pin_change::GenerateMacEmvPinChangeInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::generate_mac_emv_pin_change::GenerateMacEmvPinChangeInput {
            new_pin_pek_identifier: self.new_pin_pek_identifier,
            new_encrypted_pin_block: self.new_encrypted_pin_block,
            pin_block_format: self.pin_block_format,
            secure_messaging_integrity_key_identifier: self.secure_messaging_integrity_key_identifier,
            secure_messaging_confidentiality_key_identifier: self.secure_messaging_confidentiality_key_identifier,
            message_data: self.message_data,
            derivation_method_attributes: self.derivation_method_attributes,
        })
    }
}
impl ::std::fmt::Debug for GenerateMacEmvPinChangeInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GenerateMacEmvPinChangeInputBuilder");
        formatter.field("new_pin_pek_identifier", &self.new_pin_pek_identifier);
        formatter.field("new_encrypted_pin_block", &"*** Sensitive Data Redacted ***");
        formatter.field("pin_block_format", &self.pin_block_format);
        formatter.field(
            "secure_messaging_integrity_key_identifier",
            &self.secure_messaging_integrity_key_identifier,
        );
        formatter.field(
            "secure_messaging_confidentiality_key_identifier",
            &self.secure_messaging_confidentiality_key_identifier,
        );
        formatter.field("message_data", &"*** Sensitive Data Redacted ***");
        formatter.field("derivation_method_attributes", &self.derivation_method_attributes);
        formatter.finish()
    }
}
