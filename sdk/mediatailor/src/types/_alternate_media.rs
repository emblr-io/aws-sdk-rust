// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A playlist of media (VOD and/or live) to be played instead of the default media on a particular program.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AlternateMedia {
    /// <p>The name of the source location for alternateMedia.</p>
    pub source_location_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the live source for alternateMedia.</p>
    pub live_source_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the VOD source for alternateMedia.</p>
    pub vod_source_name: ::std::option::Option<::std::string::String>,
    /// <p>Clip range configuration for the VOD source associated with the program.</p>
    pub clip_range: ::std::option::Option<crate::types::ClipRange>,
    /// <p>The date and time that the alternateMedia is scheduled to start, in epoch milliseconds.</p>
    pub scheduled_start_time_millis: ::std::option::Option<i64>,
    /// <p>Ad break configuration parameters defined in AlternateMedia.</p>
    pub ad_breaks: ::std::option::Option<::std::vec::Vec<crate::types::AdBreak>>,
    /// <p>The duration of the alternateMedia in milliseconds.</p>
    pub duration_millis: ::std::option::Option<i64>,
}
impl AlternateMedia {
    /// <p>The name of the source location for alternateMedia.</p>
    pub fn source_location_name(&self) -> ::std::option::Option<&str> {
        self.source_location_name.as_deref()
    }
    /// <p>The name of the live source for alternateMedia.</p>
    pub fn live_source_name(&self) -> ::std::option::Option<&str> {
        self.live_source_name.as_deref()
    }
    /// <p>The name of the VOD source for alternateMedia.</p>
    pub fn vod_source_name(&self) -> ::std::option::Option<&str> {
        self.vod_source_name.as_deref()
    }
    /// <p>Clip range configuration for the VOD source associated with the program.</p>
    pub fn clip_range(&self) -> ::std::option::Option<&crate::types::ClipRange> {
        self.clip_range.as_ref()
    }
    /// <p>The date and time that the alternateMedia is scheduled to start, in epoch milliseconds.</p>
    pub fn scheduled_start_time_millis(&self) -> ::std::option::Option<i64> {
        self.scheduled_start_time_millis
    }
    /// <p>Ad break configuration parameters defined in AlternateMedia.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ad_breaks.is_none()`.
    pub fn ad_breaks(&self) -> &[crate::types::AdBreak] {
        self.ad_breaks.as_deref().unwrap_or_default()
    }
    /// <p>The duration of the alternateMedia in milliseconds.</p>
    pub fn duration_millis(&self) -> ::std::option::Option<i64> {
        self.duration_millis
    }
}
impl AlternateMedia {
    /// Creates a new builder-style object to manufacture [`AlternateMedia`](crate::types::AlternateMedia).
    pub fn builder() -> crate::types::builders::AlternateMediaBuilder {
        crate::types::builders::AlternateMediaBuilder::default()
    }
}

/// A builder for [`AlternateMedia`](crate::types::AlternateMedia).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AlternateMediaBuilder {
    pub(crate) source_location_name: ::std::option::Option<::std::string::String>,
    pub(crate) live_source_name: ::std::option::Option<::std::string::String>,
    pub(crate) vod_source_name: ::std::option::Option<::std::string::String>,
    pub(crate) clip_range: ::std::option::Option<crate::types::ClipRange>,
    pub(crate) scheduled_start_time_millis: ::std::option::Option<i64>,
    pub(crate) ad_breaks: ::std::option::Option<::std::vec::Vec<crate::types::AdBreak>>,
    pub(crate) duration_millis: ::std::option::Option<i64>,
}
impl AlternateMediaBuilder {
    /// <p>The name of the source location for alternateMedia.</p>
    pub fn source_location_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_location_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the source location for alternateMedia.</p>
    pub fn set_source_location_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_location_name = input;
        self
    }
    /// <p>The name of the source location for alternateMedia.</p>
    pub fn get_source_location_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_location_name
    }
    /// <p>The name of the live source for alternateMedia.</p>
    pub fn live_source_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.live_source_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the live source for alternateMedia.</p>
    pub fn set_live_source_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.live_source_name = input;
        self
    }
    /// <p>The name of the live source for alternateMedia.</p>
    pub fn get_live_source_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.live_source_name
    }
    /// <p>The name of the VOD source for alternateMedia.</p>
    pub fn vod_source_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vod_source_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the VOD source for alternateMedia.</p>
    pub fn set_vod_source_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vod_source_name = input;
        self
    }
    /// <p>The name of the VOD source for alternateMedia.</p>
    pub fn get_vod_source_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vod_source_name
    }
    /// <p>Clip range configuration for the VOD source associated with the program.</p>
    pub fn clip_range(mut self, input: crate::types::ClipRange) -> Self {
        self.clip_range = ::std::option::Option::Some(input);
        self
    }
    /// <p>Clip range configuration for the VOD source associated with the program.</p>
    pub fn set_clip_range(mut self, input: ::std::option::Option<crate::types::ClipRange>) -> Self {
        self.clip_range = input;
        self
    }
    /// <p>Clip range configuration for the VOD source associated with the program.</p>
    pub fn get_clip_range(&self) -> &::std::option::Option<crate::types::ClipRange> {
        &self.clip_range
    }
    /// <p>The date and time that the alternateMedia is scheduled to start, in epoch milliseconds.</p>
    pub fn scheduled_start_time_millis(mut self, input: i64) -> Self {
        self.scheduled_start_time_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the alternateMedia is scheduled to start, in epoch milliseconds.</p>
    pub fn set_scheduled_start_time_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.scheduled_start_time_millis = input;
        self
    }
    /// <p>The date and time that the alternateMedia is scheduled to start, in epoch milliseconds.</p>
    pub fn get_scheduled_start_time_millis(&self) -> &::std::option::Option<i64> {
        &self.scheduled_start_time_millis
    }
    /// Appends an item to `ad_breaks`.
    ///
    /// To override the contents of this collection use [`set_ad_breaks`](Self::set_ad_breaks).
    ///
    /// <p>Ad break configuration parameters defined in AlternateMedia.</p>
    pub fn ad_breaks(mut self, input: crate::types::AdBreak) -> Self {
        let mut v = self.ad_breaks.unwrap_or_default();
        v.push(input);
        self.ad_breaks = ::std::option::Option::Some(v);
        self
    }
    /// <p>Ad break configuration parameters defined in AlternateMedia.</p>
    pub fn set_ad_breaks(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AdBreak>>) -> Self {
        self.ad_breaks = input;
        self
    }
    /// <p>Ad break configuration parameters defined in AlternateMedia.</p>
    pub fn get_ad_breaks(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AdBreak>> {
        &self.ad_breaks
    }
    /// <p>The duration of the alternateMedia in milliseconds.</p>
    pub fn duration_millis(mut self, input: i64) -> Self {
        self.duration_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>The duration of the alternateMedia in milliseconds.</p>
    pub fn set_duration_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.duration_millis = input;
        self
    }
    /// <p>The duration of the alternateMedia in milliseconds.</p>
    pub fn get_duration_millis(&self) -> &::std::option::Option<i64> {
        &self.duration_millis
    }
    /// Consumes the builder and constructs a [`AlternateMedia`](crate::types::AlternateMedia).
    pub fn build(self) -> crate::types::AlternateMedia {
        crate::types::AlternateMedia {
            source_location_name: self.source_location_name,
            live_source_name: self.live_source_name,
            vod_source_name: self.vod_source_name,
            clip_range: self.clip_range,
            scheduled_start_time_millis: self.scheduled_start_time_millis,
            ad_breaks: self.ad_breaks,
            duration_millis: self.duration_millis,
        }
    }
}
