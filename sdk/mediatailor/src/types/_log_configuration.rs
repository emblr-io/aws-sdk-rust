// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines where AWS Elemental MediaTailor sends logs for the playback configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LogConfiguration {
    /// <p>The percentage of session logs that MediaTailor sends to your configured log destination. For example, if your playback configuration has 1000 sessions and <code>percentEnabled</code> is set to <code>60</code>, MediaTailor sends logs for 600 of the sessions to CloudWatch Logs. MediaTailor decides at random which of the playback configuration sessions to send logs for. If you want to view logs for a specific session, you can use the <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/debug-log-mode.html">debug log mode</a>.</p>
    /// <p>Valid values: <code>0</code> - <code>100</code></p>
    pub percent_enabled: i32,
    /// <p>The method used for collecting logs from AWS Elemental MediaTailor. <code>LEGACY_CLOUDWATCH</code> indicates that MediaTailor is sending logs directly to Amazon CloudWatch Logs. <code>VENDED_LOGS</code> indicates that MediaTailor is sending logs to CloudWatch, which then vends the logs to your destination of choice. Supported destinations are CloudWatch Logs log group, Amazon S3 bucket, and Amazon Data Firehose stream.</p>
    pub enabled_logging_strategies: ::std::option::Option<::std::vec::Vec<crate::types::LoggingStrategy>>,
    /// <p>Settings for customizing what events are included in logs for interactions with the ad decision server (ADS).</p>
    pub ads_interaction_log: ::std::option::Option<crate::types::AdsInteractionLog>,
    /// <p>Settings for customizing what events are included in logs for interactions with the origin server.</p>
    pub manifest_service_interaction_log: ::std::option::Option<crate::types::ManifestServiceInteractionLog>,
}
impl LogConfiguration {
    /// <p>The percentage of session logs that MediaTailor sends to your configured log destination. For example, if your playback configuration has 1000 sessions and <code>percentEnabled</code> is set to <code>60</code>, MediaTailor sends logs for 600 of the sessions to CloudWatch Logs. MediaTailor decides at random which of the playback configuration sessions to send logs for. If you want to view logs for a specific session, you can use the <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/debug-log-mode.html">debug log mode</a>.</p>
    /// <p>Valid values: <code>0</code> - <code>100</code></p>
    pub fn percent_enabled(&self) -> i32 {
        self.percent_enabled
    }
    /// <p>The method used for collecting logs from AWS Elemental MediaTailor. <code>LEGACY_CLOUDWATCH</code> indicates that MediaTailor is sending logs directly to Amazon CloudWatch Logs. <code>VENDED_LOGS</code> indicates that MediaTailor is sending logs to CloudWatch, which then vends the logs to your destination of choice. Supported destinations are CloudWatch Logs log group, Amazon S3 bucket, and Amazon Data Firehose stream.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.enabled_logging_strategies.is_none()`.
    pub fn enabled_logging_strategies(&self) -> &[crate::types::LoggingStrategy] {
        self.enabled_logging_strategies.as_deref().unwrap_or_default()
    }
    /// <p>Settings for customizing what events are included in logs for interactions with the ad decision server (ADS).</p>
    pub fn ads_interaction_log(&self) -> ::std::option::Option<&crate::types::AdsInteractionLog> {
        self.ads_interaction_log.as_ref()
    }
    /// <p>Settings for customizing what events are included in logs for interactions with the origin server.</p>
    pub fn manifest_service_interaction_log(&self) -> ::std::option::Option<&crate::types::ManifestServiceInteractionLog> {
        self.manifest_service_interaction_log.as_ref()
    }
}
impl LogConfiguration {
    /// Creates a new builder-style object to manufacture [`LogConfiguration`](crate::types::LogConfiguration).
    pub fn builder() -> crate::types::builders::LogConfigurationBuilder {
        crate::types::builders::LogConfigurationBuilder::default()
    }
}

/// A builder for [`LogConfiguration`](crate::types::LogConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LogConfigurationBuilder {
    pub(crate) percent_enabled: ::std::option::Option<i32>,
    pub(crate) enabled_logging_strategies: ::std::option::Option<::std::vec::Vec<crate::types::LoggingStrategy>>,
    pub(crate) ads_interaction_log: ::std::option::Option<crate::types::AdsInteractionLog>,
    pub(crate) manifest_service_interaction_log: ::std::option::Option<crate::types::ManifestServiceInteractionLog>,
}
impl LogConfigurationBuilder {
    /// <p>The percentage of session logs that MediaTailor sends to your configured log destination. For example, if your playback configuration has 1000 sessions and <code>percentEnabled</code> is set to <code>60</code>, MediaTailor sends logs for 600 of the sessions to CloudWatch Logs. MediaTailor decides at random which of the playback configuration sessions to send logs for. If you want to view logs for a specific session, you can use the <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/debug-log-mode.html">debug log mode</a>.</p>
    /// <p>Valid values: <code>0</code> - <code>100</code></p>
    /// This field is required.
    pub fn percent_enabled(mut self, input: i32) -> Self {
        self.percent_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage of session logs that MediaTailor sends to your configured log destination. For example, if your playback configuration has 1000 sessions and <code>percentEnabled</code> is set to <code>60</code>, MediaTailor sends logs for 600 of the sessions to CloudWatch Logs. MediaTailor decides at random which of the playback configuration sessions to send logs for. If you want to view logs for a specific session, you can use the <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/debug-log-mode.html">debug log mode</a>.</p>
    /// <p>Valid values: <code>0</code> - <code>100</code></p>
    pub fn set_percent_enabled(mut self, input: ::std::option::Option<i32>) -> Self {
        self.percent_enabled = input;
        self
    }
    /// <p>The percentage of session logs that MediaTailor sends to your configured log destination. For example, if your playback configuration has 1000 sessions and <code>percentEnabled</code> is set to <code>60</code>, MediaTailor sends logs for 600 of the sessions to CloudWatch Logs. MediaTailor decides at random which of the playback configuration sessions to send logs for. If you want to view logs for a specific session, you can use the <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/debug-log-mode.html">debug log mode</a>.</p>
    /// <p>Valid values: <code>0</code> - <code>100</code></p>
    pub fn get_percent_enabled(&self) -> &::std::option::Option<i32> {
        &self.percent_enabled
    }
    /// Appends an item to `enabled_logging_strategies`.
    ///
    /// To override the contents of this collection use [`set_enabled_logging_strategies`](Self::set_enabled_logging_strategies).
    ///
    /// <p>The method used for collecting logs from AWS Elemental MediaTailor. <code>LEGACY_CLOUDWATCH</code> indicates that MediaTailor is sending logs directly to Amazon CloudWatch Logs. <code>VENDED_LOGS</code> indicates that MediaTailor is sending logs to CloudWatch, which then vends the logs to your destination of choice. Supported destinations are CloudWatch Logs log group, Amazon S3 bucket, and Amazon Data Firehose stream.</p>
    pub fn enabled_logging_strategies(mut self, input: crate::types::LoggingStrategy) -> Self {
        let mut v = self.enabled_logging_strategies.unwrap_or_default();
        v.push(input);
        self.enabled_logging_strategies = ::std::option::Option::Some(v);
        self
    }
    /// <p>The method used for collecting logs from AWS Elemental MediaTailor. <code>LEGACY_CLOUDWATCH</code> indicates that MediaTailor is sending logs directly to Amazon CloudWatch Logs. <code>VENDED_LOGS</code> indicates that MediaTailor is sending logs to CloudWatch, which then vends the logs to your destination of choice. Supported destinations are CloudWatch Logs log group, Amazon S3 bucket, and Amazon Data Firehose stream.</p>
    pub fn set_enabled_logging_strategies(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LoggingStrategy>>) -> Self {
        self.enabled_logging_strategies = input;
        self
    }
    /// <p>The method used for collecting logs from AWS Elemental MediaTailor. <code>LEGACY_CLOUDWATCH</code> indicates that MediaTailor is sending logs directly to Amazon CloudWatch Logs. <code>VENDED_LOGS</code> indicates that MediaTailor is sending logs to CloudWatch, which then vends the logs to your destination of choice. Supported destinations are CloudWatch Logs log group, Amazon S3 bucket, and Amazon Data Firehose stream.</p>
    pub fn get_enabled_logging_strategies(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LoggingStrategy>> {
        &self.enabled_logging_strategies
    }
    /// <p>Settings for customizing what events are included in logs for interactions with the ad decision server (ADS).</p>
    pub fn ads_interaction_log(mut self, input: crate::types::AdsInteractionLog) -> Self {
        self.ads_interaction_log = ::std::option::Option::Some(input);
        self
    }
    /// <p>Settings for customizing what events are included in logs for interactions with the ad decision server (ADS).</p>
    pub fn set_ads_interaction_log(mut self, input: ::std::option::Option<crate::types::AdsInteractionLog>) -> Self {
        self.ads_interaction_log = input;
        self
    }
    /// <p>Settings for customizing what events are included in logs for interactions with the ad decision server (ADS).</p>
    pub fn get_ads_interaction_log(&self) -> &::std::option::Option<crate::types::AdsInteractionLog> {
        &self.ads_interaction_log
    }
    /// <p>Settings for customizing what events are included in logs for interactions with the origin server.</p>
    pub fn manifest_service_interaction_log(mut self, input: crate::types::ManifestServiceInteractionLog) -> Self {
        self.manifest_service_interaction_log = ::std::option::Option::Some(input);
        self
    }
    /// <p>Settings for customizing what events are included in logs for interactions with the origin server.</p>
    pub fn set_manifest_service_interaction_log(mut self, input: ::std::option::Option<crate::types::ManifestServiceInteractionLog>) -> Self {
        self.manifest_service_interaction_log = input;
        self
    }
    /// <p>Settings for customizing what events are included in logs for interactions with the origin server.</p>
    pub fn get_manifest_service_interaction_log(&self) -> &::std::option::Option<crate::types::ManifestServiceInteractionLog> {
        &self.manifest_service_interaction_log
    }
    /// Consumes the builder and constructs a [`LogConfiguration`](crate::types::LogConfiguration).
    pub fn build(self) -> crate::types::LogConfiguration {
        crate::types::LogConfiguration {
            percent_enabled: self.percent_enabled.unwrap_or_default(),
            enabled_logging_strategies: self.enabled_logging_strategies,
            ads_interaction_log: self.ads_interaction_log,
            manifest_service_interaction_log: self.manifest_service_interaction_log,
        }
    }
}
