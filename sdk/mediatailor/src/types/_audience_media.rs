// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An AudienceMedia object contains an Audience and a list of AlternateMedia.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AudienceMedia {
    /// <p>The Audience defined in AudienceMedia.</p>
    pub audience: ::std::option::Option<::std::string::String>,
    /// <p>The list of AlternateMedia defined in AudienceMedia.</p>
    pub alternate_media: ::std::option::Option<::std::vec::Vec<crate::types::AlternateMedia>>,
}
impl AudienceMedia {
    /// <p>The Audience defined in AudienceMedia.</p>
    pub fn audience(&self) -> ::std::option::Option<&str> {
        self.audience.as_deref()
    }
    /// <p>The list of AlternateMedia defined in AudienceMedia.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.alternate_media.is_none()`.
    pub fn alternate_media(&self) -> &[crate::types::AlternateMedia] {
        self.alternate_media.as_deref().unwrap_or_default()
    }
}
impl AudienceMedia {
    /// Creates a new builder-style object to manufacture [`AudienceMedia`](crate::types::AudienceMedia).
    pub fn builder() -> crate::types::builders::AudienceMediaBuilder {
        crate::types::builders::AudienceMediaBuilder::default()
    }
}

/// A builder for [`AudienceMedia`](crate::types::AudienceMedia).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AudienceMediaBuilder {
    pub(crate) audience: ::std::option::Option<::std::string::String>,
    pub(crate) alternate_media: ::std::option::Option<::std::vec::Vec<crate::types::AlternateMedia>>,
}
impl AudienceMediaBuilder {
    /// <p>The Audience defined in AudienceMedia.</p>
    pub fn audience(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.audience = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Audience defined in AudienceMedia.</p>
    pub fn set_audience(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.audience = input;
        self
    }
    /// <p>The Audience defined in AudienceMedia.</p>
    pub fn get_audience(&self) -> &::std::option::Option<::std::string::String> {
        &self.audience
    }
    /// Appends an item to `alternate_media`.
    ///
    /// To override the contents of this collection use [`set_alternate_media`](Self::set_alternate_media).
    ///
    /// <p>The list of AlternateMedia defined in AudienceMedia.</p>
    pub fn alternate_media(mut self, input: crate::types::AlternateMedia) -> Self {
        let mut v = self.alternate_media.unwrap_or_default();
        v.push(input);
        self.alternate_media = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of AlternateMedia defined in AudienceMedia.</p>
    pub fn set_alternate_media(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AlternateMedia>>) -> Self {
        self.alternate_media = input;
        self
    }
    /// <p>The list of AlternateMedia defined in AudienceMedia.</p>
    pub fn get_alternate_media(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AlternateMedia>> {
        &self.alternate_media
    }
    /// Consumes the builder and constructs a [`AudienceMedia`](crate::types::AudienceMedia).
    pub fn build(self) -> crate::types::AudienceMedia {
        crate::types::AudienceMedia {
            audience: self.audience,
            alternate_media: self.alternate_media,
        }
    }
}
