// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings for customizing what events are included in logs for interactions with the ad decision server (ADS).</p>
/// <p>For more information about ADS logs, inlcuding descriptions of the event types, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/ads-log-format.html">MediaTailor ADS logs description and event types</a> in Elemental MediaTailor User Guide.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AdsInteractionLog {
    /// <p>Indicates that MediaTailor emits <code>RAW_ADS_RESPONSE</code> logs for playback sessions that are initialized with this configuration.</p>
    pub publish_opt_in_event_types: ::std::option::Option<::std::vec::Vec<crate::types::AdsInteractionPublishOptInEventType>>,
    /// <p>Indicates that MediaTailor won't emit the selected events in the logs for playback sessions that are initialized with this configuration.</p>
    pub exclude_event_types: ::std::option::Option<::std::vec::Vec<crate::types::AdsInteractionExcludeEventType>>,
}
impl AdsInteractionLog {
    /// <p>Indicates that MediaTailor emits <code>RAW_ADS_RESPONSE</code> logs for playback sessions that are initialized with this configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.publish_opt_in_event_types.is_none()`.
    pub fn publish_opt_in_event_types(&self) -> &[crate::types::AdsInteractionPublishOptInEventType] {
        self.publish_opt_in_event_types.as_deref().unwrap_or_default()
    }
    /// <p>Indicates that MediaTailor won't emit the selected events in the logs for playback sessions that are initialized with this configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.exclude_event_types.is_none()`.
    pub fn exclude_event_types(&self) -> &[crate::types::AdsInteractionExcludeEventType] {
        self.exclude_event_types.as_deref().unwrap_or_default()
    }
}
impl AdsInteractionLog {
    /// Creates a new builder-style object to manufacture [`AdsInteractionLog`](crate::types::AdsInteractionLog).
    pub fn builder() -> crate::types::builders::AdsInteractionLogBuilder {
        crate::types::builders::AdsInteractionLogBuilder::default()
    }
}

/// A builder for [`AdsInteractionLog`](crate::types::AdsInteractionLog).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AdsInteractionLogBuilder {
    pub(crate) publish_opt_in_event_types: ::std::option::Option<::std::vec::Vec<crate::types::AdsInteractionPublishOptInEventType>>,
    pub(crate) exclude_event_types: ::std::option::Option<::std::vec::Vec<crate::types::AdsInteractionExcludeEventType>>,
}
impl AdsInteractionLogBuilder {
    /// Appends an item to `publish_opt_in_event_types`.
    ///
    /// To override the contents of this collection use [`set_publish_opt_in_event_types`](Self::set_publish_opt_in_event_types).
    ///
    /// <p>Indicates that MediaTailor emits <code>RAW_ADS_RESPONSE</code> logs for playback sessions that are initialized with this configuration.</p>
    pub fn publish_opt_in_event_types(mut self, input: crate::types::AdsInteractionPublishOptInEventType) -> Self {
        let mut v = self.publish_opt_in_event_types.unwrap_or_default();
        v.push(input);
        self.publish_opt_in_event_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates that MediaTailor emits <code>RAW_ADS_RESPONSE</code> logs for playback sessions that are initialized with this configuration.</p>
    pub fn set_publish_opt_in_event_types(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AdsInteractionPublishOptInEventType>>,
    ) -> Self {
        self.publish_opt_in_event_types = input;
        self
    }
    /// <p>Indicates that MediaTailor emits <code>RAW_ADS_RESPONSE</code> logs for playback sessions that are initialized with this configuration.</p>
    pub fn get_publish_opt_in_event_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AdsInteractionPublishOptInEventType>> {
        &self.publish_opt_in_event_types
    }
    /// Appends an item to `exclude_event_types`.
    ///
    /// To override the contents of this collection use [`set_exclude_event_types`](Self::set_exclude_event_types).
    ///
    /// <p>Indicates that MediaTailor won't emit the selected events in the logs for playback sessions that are initialized with this configuration.</p>
    pub fn exclude_event_types(mut self, input: crate::types::AdsInteractionExcludeEventType) -> Self {
        let mut v = self.exclude_event_types.unwrap_or_default();
        v.push(input);
        self.exclude_event_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates that MediaTailor won't emit the selected events in the logs for playback sessions that are initialized with this configuration.</p>
    pub fn set_exclude_event_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AdsInteractionExcludeEventType>>) -> Self {
        self.exclude_event_types = input;
        self
    }
    /// <p>Indicates that MediaTailor won't emit the selected events in the logs for playback sessions that are initialized with this configuration.</p>
    pub fn get_exclude_event_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AdsInteractionExcludeEventType>> {
        &self.exclude_event_types
    }
    /// Consumes the builder and constructs a [`AdsInteractionLog`](crate::types::AdsInteractionLog).
    pub fn build(self) -> crate::types::AdsInteractionLog {
        crate::types::AdsInteractionLog {
            publish_opt_in_event_types: self.publish_opt_in_event_types,
            exclude_event_types: self.exclude_event_types,
        }
    }
}
