// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The setting that indicates what conditioning MediaTailor will perform on ads that the ad decision server (ADS) returns.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AdConditioningConfiguration {
    /// <p>For ads that have media files with streaming delivery and supported file extensions, indicates what transcoding action MediaTailor takes when it first receives these ads from the ADS. <code>TRANSCODE</code> indicates that MediaTailor must transcode the ads. <code>NONE</code> indicates that you have already transcoded the ads outside of MediaTailor and don't need them transcoded as part of the ad insertion workflow. For more information about ad conditioning see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/precondition-ads.html">Using preconditioned ads</a> in the Elemental MediaTailor user guide.</p>
    pub streaming_media_file_conditioning: crate::types::StreamingMediaFileConditioning,
}
impl AdConditioningConfiguration {
    /// <p>For ads that have media files with streaming delivery and supported file extensions, indicates what transcoding action MediaTailor takes when it first receives these ads from the ADS. <code>TRANSCODE</code> indicates that MediaTailor must transcode the ads. <code>NONE</code> indicates that you have already transcoded the ads outside of MediaTailor and don't need them transcoded as part of the ad insertion workflow. For more information about ad conditioning see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/precondition-ads.html">Using preconditioned ads</a> in the Elemental MediaTailor user guide.</p>
    pub fn streaming_media_file_conditioning(&self) -> &crate::types::StreamingMediaFileConditioning {
        &self.streaming_media_file_conditioning
    }
}
impl AdConditioningConfiguration {
    /// Creates a new builder-style object to manufacture [`AdConditioningConfiguration`](crate::types::AdConditioningConfiguration).
    pub fn builder() -> crate::types::builders::AdConditioningConfigurationBuilder {
        crate::types::builders::AdConditioningConfigurationBuilder::default()
    }
}

/// A builder for [`AdConditioningConfiguration`](crate::types::AdConditioningConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AdConditioningConfigurationBuilder {
    pub(crate) streaming_media_file_conditioning: ::std::option::Option<crate::types::StreamingMediaFileConditioning>,
}
impl AdConditioningConfigurationBuilder {
    /// <p>For ads that have media files with streaming delivery and supported file extensions, indicates what transcoding action MediaTailor takes when it first receives these ads from the ADS. <code>TRANSCODE</code> indicates that MediaTailor must transcode the ads. <code>NONE</code> indicates that you have already transcoded the ads outside of MediaTailor and don't need them transcoded as part of the ad insertion workflow. For more information about ad conditioning see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/precondition-ads.html">Using preconditioned ads</a> in the Elemental MediaTailor user guide.</p>
    /// This field is required.
    pub fn streaming_media_file_conditioning(mut self, input: crate::types::StreamingMediaFileConditioning) -> Self {
        self.streaming_media_file_conditioning = ::std::option::Option::Some(input);
        self
    }
    /// <p>For ads that have media files with streaming delivery and supported file extensions, indicates what transcoding action MediaTailor takes when it first receives these ads from the ADS. <code>TRANSCODE</code> indicates that MediaTailor must transcode the ads. <code>NONE</code> indicates that you have already transcoded the ads outside of MediaTailor and don't need them transcoded as part of the ad insertion workflow. For more information about ad conditioning see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/precondition-ads.html">Using preconditioned ads</a> in the Elemental MediaTailor user guide.</p>
    pub fn set_streaming_media_file_conditioning(mut self, input: ::std::option::Option<crate::types::StreamingMediaFileConditioning>) -> Self {
        self.streaming_media_file_conditioning = input;
        self
    }
    /// <p>For ads that have media files with streaming delivery and supported file extensions, indicates what transcoding action MediaTailor takes when it first receives these ads from the ADS. <code>TRANSCODE</code> indicates that MediaTailor must transcode the ads. <code>NONE</code> indicates that you have already transcoded the ads outside of MediaTailor and don't need them transcoded as part of the ad insertion workflow. For more information about ad conditioning see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/precondition-ads.html">Using preconditioned ads</a> in the Elemental MediaTailor user guide.</p>
    pub fn get_streaming_media_file_conditioning(&self) -> &::std::option::Option<crate::types::StreamingMediaFileConditioning> {
        &self.streaming_media_file_conditioning
    }
    /// Consumes the builder and constructs a [`AdConditioningConfiguration`](crate::types::AdConditioningConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`streaming_media_file_conditioning`](crate::types::builders::AdConditioningConfigurationBuilder::streaming_media_file_conditioning)
    pub fn build(self) -> ::std::result::Result<crate::types::AdConditioningConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AdConditioningConfiguration {
            streaming_media_file_conditioning: self.streaming_media_file_conditioning.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "streaming_media_file_conditioning",
                    "streaming_media_file_conditioning was not specified but it is required when building AdConditioningConfiguration",
                )
            })?,
        })
    }
}
