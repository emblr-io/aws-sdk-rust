// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configures Amazon CloudWatch log settings for a playback configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfigureLogsForPlaybackConfigurationInput {
    /// <p>The percentage of session logs that MediaTailor sends to your CloudWatch Logs account. For example, if your playback configuration has 1000 sessions and percentEnabled is set to <code>60</code>, MediaTailor sends logs for 600 of the sessions to CloudWatch Logs. MediaTailor decides at random which of the playback configuration sessions to send logs for. If you want to view logs for a specific session, you can use the <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/debug-log-mode.html">debug log mode</a>.</p>
    /// <p>Valid values: <code>0</code> - <code>100</code></p>
    pub percent_enabled: ::std::option::Option<i32>,
    /// <p>The name of the playback configuration.</p>
    pub playback_configuration_name: ::std::option::Option<::std::string::String>,
    /// <p>The method used for collecting logs from AWS Elemental MediaTailor. To configure MediaTailor to send logs directly to Amazon CloudWatch Logs, choose <code>LEGACY_CLOUDWATCH</code>. To configure MediaTailor to send logs to CloudWatch, which then vends the logs to your destination of choice, choose <code>VENDED_LOGS</code>. Supported destinations are CloudWatch Logs log group, Amazon S3 bucket, and Amazon Data Firehose stream.</p>
    /// <p>To use vended logs, you must configure the delivery destination in Amazon CloudWatch, as described in <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AWS-logs-and-resource-policy.html#AWS-vended-logs-permissions-V2">Enable logging from AWS services, Logging that requires additional permissions \[V2\]</a>.</p>
    pub enabled_logging_strategies: ::std::option::Option<::std::vec::Vec<crate::types::LoggingStrategy>>,
    /// <p>The event types that MediaTailor emits in logs for interactions with the ADS.</p>
    pub ads_interaction_log: ::std::option::Option<crate::types::AdsInteractionLog>,
    /// <p>The event types that MediaTailor emits in logs for interactions with the origin server.</p>
    pub manifest_service_interaction_log: ::std::option::Option<crate::types::ManifestServiceInteractionLog>,
}
impl ConfigureLogsForPlaybackConfigurationInput {
    /// <p>The percentage of session logs that MediaTailor sends to your CloudWatch Logs account. For example, if your playback configuration has 1000 sessions and percentEnabled is set to <code>60</code>, MediaTailor sends logs for 600 of the sessions to CloudWatch Logs. MediaTailor decides at random which of the playback configuration sessions to send logs for. If you want to view logs for a specific session, you can use the <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/debug-log-mode.html">debug log mode</a>.</p>
    /// <p>Valid values: <code>0</code> - <code>100</code></p>
    pub fn percent_enabled(&self) -> ::std::option::Option<i32> {
        self.percent_enabled
    }
    /// <p>The name of the playback configuration.</p>
    pub fn playback_configuration_name(&self) -> ::std::option::Option<&str> {
        self.playback_configuration_name.as_deref()
    }
    /// <p>The method used for collecting logs from AWS Elemental MediaTailor. To configure MediaTailor to send logs directly to Amazon CloudWatch Logs, choose <code>LEGACY_CLOUDWATCH</code>. To configure MediaTailor to send logs to CloudWatch, which then vends the logs to your destination of choice, choose <code>VENDED_LOGS</code>. Supported destinations are CloudWatch Logs log group, Amazon S3 bucket, and Amazon Data Firehose stream.</p>
    /// <p>To use vended logs, you must configure the delivery destination in Amazon CloudWatch, as described in <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AWS-logs-and-resource-policy.html#AWS-vended-logs-permissions-V2">Enable logging from AWS services, Logging that requires additional permissions \[V2\]</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.enabled_logging_strategies.is_none()`.
    pub fn enabled_logging_strategies(&self) -> &[crate::types::LoggingStrategy] {
        self.enabled_logging_strategies.as_deref().unwrap_or_default()
    }
    /// <p>The event types that MediaTailor emits in logs for interactions with the ADS.</p>
    pub fn ads_interaction_log(&self) -> ::std::option::Option<&crate::types::AdsInteractionLog> {
        self.ads_interaction_log.as_ref()
    }
    /// <p>The event types that MediaTailor emits in logs for interactions with the origin server.</p>
    pub fn manifest_service_interaction_log(&self) -> ::std::option::Option<&crate::types::ManifestServiceInteractionLog> {
        self.manifest_service_interaction_log.as_ref()
    }
}
impl ConfigureLogsForPlaybackConfigurationInput {
    /// Creates a new builder-style object to manufacture [`ConfigureLogsForPlaybackConfigurationInput`](crate::operation::configure_logs_for_playback_configuration::ConfigureLogsForPlaybackConfigurationInput).
    pub fn builder() -> crate::operation::configure_logs_for_playback_configuration::builders::ConfigureLogsForPlaybackConfigurationInputBuilder {
        crate::operation::configure_logs_for_playback_configuration::builders::ConfigureLogsForPlaybackConfigurationInputBuilder::default()
    }
}

/// A builder for [`ConfigureLogsForPlaybackConfigurationInput`](crate::operation::configure_logs_for_playback_configuration::ConfigureLogsForPlaybackConfigurationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConfigureLogsForPlaybackConfigurationInputBuilder {
    pub(crate) percent_enabled: ::std::option::Option<i32>,
    pub(crate) playback_configuration_name: ::std::option::Option<::std::string::String>,
    pub(crate) enabled_logging_strategies: ::std::option::Option<::std::vec::Vec<crate::types::LoggingStrategy>>,
    pub(crate) ads_interaction_log: ::std::option::Option<crate::types::AdsInteractionLog>,
    pub(crate) manifest_service_interaction_log: ::std::option::Option<crate::types::ManifestServiceInteractionLog>,
}
impl ConfigureLogsForPlaybackConfigurationInputBuilder {
    /// <p>The percentage of session logs that MediaTailor sends to your CloudWatch Logs account. For example, if your playback configuration has 1000 sessions and percentEnabled is set to <code>60</code>, MediaTailor sends logs for 600 of the sessions to CloudWatch Logs. MediaTailor decides at random which of the playback configuration sessions to send logs for. If you want to view logs for a specific session, you can use the <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/debug-log-mode.html">debug log mode</a>.</p>
    /// <p>Valid values: <code>0</code> - <code>100</code></p>
    /// This field is required.
    pub fn percent_enabled(mut self, input: i32) -> Self {
        self.percent_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage of session logs that MediaTailor sends to your CloudWatch Logs account. For example, if your playback configuration has 1000 sessions and percentEnabled is set to <code>60</code>, MediaTailor sends logs for 600 of the sessions to CloudWatch Logs. MediaTailor decides at random which of the playback configuration sessions to send logs for. If you want to view logs for a specific session, you can use the <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/debug-log-mode.html">debug log mode</a>.</p>
    /// <p>Valid values: <code>0</code> - <code>100</code></p>
    pub fn set_percent_enabled(mut self, input: ::std::option::Option<i32>) -> Self {
        self.percent_enabled = input;
        self
    }
    /// <p>The percentage of session logs that MediaTailor sends to your CloudWatch Logs account. For example, if your playback configuration has 1000 sessions and percentEnabled is set to <code>60</code>, MediaTailor sends logs for 600 of the sessions to CloudWatch Logs. MediaTailor decides at random which of the playback configuration sessions to send logs for. If you want to view logs for a specific session, you can use the <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/debug-log-mode.html">debug log mode</a>.</p>
    /// <p>Valid values: <code>0</code> - <code>100</code></p>
    pub fn get_percent_enabled(&self) -> &::std::option::Option<i32> {
        &self.percent_enabled
    }
    /// <p>The name of the playback configuration.</p>
    /// This field is required.
    pub fn playback_configuration_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.playback_configuration_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the playback configuration.</p>
    pub fn set_playback_configuration_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.playback_configuration_name = input;
        self
    }
    /// <p>The name of the playback configuration.</p>
    pub fn get_playback_configuration_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.playback_configuration_name
    }
    /// Appends an item to `enabled_logging_strategies`.
    ///
    /// To override the contents of this collection use [`set_enabled_logging_strategies`](Self::set_enabled_logging_strategies).
    ///
    /// <p>The method used for collecting logs from AWS Elemental MediaTailor. To configure MediaTailor to send logs directly to Amazon CloudWatch Logs, choose <code>LEGACY_CLOUDWATCH</code>. To configure MediaTailor to send logs to CloudWatch, which then vends the logs to your destination of choice, choose <code>VENDED_LOGS</code>. Supported destinations are CloudWatch Logs log group, Amazon S3 bucket, and Amazon Data Firehose stream.</p>
    /// <p>To use vended logs, you must configure the delivery destination in Amazon CloudWatch, as described in <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AWS-logs-and-resource-policy.html#AWS-vended-logs-permissions-V2">Enable logging from AWS services, Logging that requires additional permissions \[V2\]</a>.</p>
    pub fn enabled_logging_strategies(mut self, input: crate::types::LoggingStrategy) -> Self {
        let mut v = self.enabled_logging_strategies.unwrap_or_default();
        v.push(input);
        self.enabled_logging_strategies = ::std::option::Option::Some(v);
        self
    }
    /// <p>The method used for collecting logs from AWS Elemental MediaTailor. To configure MediaTailor to send logs directly to Amazon CloudWatch Logs, choose <code>LEGACY_CLOUDWATCH</code>. To configure MediaTailor to send logs to CloudWatch, which then vends the logs to your destination of choice, choose <code>VENDED_LOGS</code>. Supported destinations are CloudWatch Logs log group, Amazon S3 bucket, and Amazon Data Firehose stream.</p>
    /// <p>To use vended logs, you must configure the delivery destination in Amazon CloudWatch, as described in <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AWS-logs-and-resource-policy.html#AWS-vended-logs-permissions-V2">Enable logging from AWS services, Logging that requires additional permissions \[V2\]</a>.</p>
    pub fn set_enabled_logging_strategies(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LoggingStrategy>>) -> Self {
        self.enabled_logging_strategies = input;
        self
    }
    /// <p>The method used for collecting logs from AWS Elemental MediaTailor. To configure MediaTailor to send logs directly to Amazon CloudWatch Logs, choose <code>LEGACY_CLOUDWATCH</code>. To configure MediaTailor to send logs to CloudWatch, which then vends the logs to your destination of choice, choose <code>VENDED_LOGS</code>. Supported destinations are CloudWatch Logs log group, Amazon S3 bucket, and Amazon Data Firehose stream.</p>
    /// <p>To use vended logs, you must configure the delivery destination in Amazon CloudWatch, as described in <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AWS-logs-and-resource-policy.html#AWS-vended-logs-permissions-V2">Enable logging from AWS services, Logging that requires additional permissions \[V2\]</a>.</p>
    pub fn get_enabled_logging_strategies(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LoggingStrategy>> {
        &self.enabled_logging_strategies
    }
    /// <p>The event types that MediaTailor emits in logs for interactions with the ADS.</p>
    pub fn ads_interaction_log(mut self, input: crate::types::AdsInteractionLog) -> Self {
        self.ads_interaction_log = ::std::option::Option::Some(input);
        self
    }
    /// <p>The event types that MediaTailor emits in logs for interactions with the ADS.</p>
    pub fn set_ads_interaction_log(mut self, input: ::std::option::Option<crate::types::AdsInteractionLog>) -> Self {
        self.ads_interaction_log = input;
        self
    }
    /// <p>The event types that MediaTailor emits in logs for interactions with the ADS.</p>
    pub fn get_ads_interaction_log(&self) -> &::std::option::Option<crate::types::AdsInteractionLog> {
        &self.ads_interaction_log
    }
    /// <p>The event types that MediaTailor emits in logs for interactions with the origin server.</p>
    pub fn manifest_service_interaction_log(mut self, input: crate::types::ManifestServiceInteractionLog) -> Self {
        self.manifest_service_interaction_log = ::std::option::Option::Some(input);
        self
    }
    /// <p>The event types that MediaTailor emits in logs for interactions with the origin server.</p>
    pub fn set_manifest_service_interaction_log(mut self, input: ::std::option::Option<crate::types::ManifestServiceInteractionLog>) -> Self {
        self.manifest_service_interaction_log = input;
        self
    }
    /// <p>The event types that MediaTailor emits in logs for interactions with the origin server.</p>
    pub fn get_manifest_service_interaction_log(&self) -> &::std::option::Option<crate::types::ManifestServiceInteractionLog> {
        &self.manifest_service_interaction_log
    }
    /// Consumes the builder and constructs a [`ConfigureLogsForPlaybackConfigurationInput`](crate::operation::configure_logs_for_playback_configuration::ConfigureLogsForPlaybackConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::configure_logs_for_playback_configuration::ConfigureLogsForPlaybackConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::configure_logs_for_playback_configuration::ConfigureLogsForPlaybackConfigurationInput {
                percent_enabled: self.percent_enabled,
                playback_configuration_name: self.playback_configuration_name,
                enabled_logging_strategies: self.enabled_logging_strategies,
                ads_interaction_log: self.ads_interaction_log,
                manifest_service_interaction_log: self.manifest_service_interaction_log,
            },
        )
    }
}
