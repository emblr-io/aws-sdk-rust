// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetPrefetchScheduleOutput {
    /// <p>The Amazon Resource Name (ARN) of the prefetch schedule.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The configuration settings for how and when MediaTailor consumes prefetched ads from the ad decision server for single prefetch schedules. Each consumption configuration contains an end time and an optional start time that define the <i>consumption window</i>. Prefetch schedules automatically expire no earlier than seven days after the end time.</p>
    pub consumption: ::std::option::Option<crate::types::PrefetchConsumption>,
    /// <p>The name of the prefetch schedule. The name must be unique among all prefetch schedules that are associated with the specified playback configuration.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the playback configuration to create the prefetch schedule for.</p>
    pub playback_configuration_name: ::std::option::Option<::std::string::String>,
    /// <p>A complex type that contains settings for prefetch retrieval from the ad decision server (ADS).</p>
    pub retrieval: ::std::option::Option<crate::types::PrefetchRetrieval>,
    /// <p>The frequency that MediaTailor creates prefetch schedules. <code>SINGLE</code> indicates that this schedule applies to one ad break. <code>RECURRING</code> indicates that MediaTailor automatically creates a schedule for each ad avail in a live event.</p>
    pub schedule_type: ::std::option::Option<crate::types::PrefetchScheduleType>,
    /// <p>The configuration that defines how and when MediaTailor performs ad prefetching in a live event.</p>
    pub recurring_prefetch_configuration: ::std::option::Option<crate::types::RecurringPrefetchConfiguration>,
    /// <p>An optional stream identifier that you can specify in order to prefetch for multiple streams that use the same playback configuration.</p>
    pub stream_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetPrefetchScheduleOutput {
    /// <p>The Amazon Resource Name (ARN) of the prefetch schedule.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The configuration settings for how and when MediaTailor consumes prefetched ads from the ad decision server for single prefetch schedules. Each consumption configuration contains an end time and an optional start time that define the <i>consumption window</i>. Prefetch schedules automatically expire no earlier than seven days after the end time.</p>
    pub fn consumption(&self) -> ::std::option::Option<&crate::types::PrefetchConsumption> {
        self.consumption.as_ref()
    }
    /// <p>The name of the prefetch schedule. The name must be unique among all prefetch schedules that are associated with the specified playback configuration.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The name of the playback configuration to create the prefetch schedule for.</p>
    pub fn playback_configuration_name(&self) -> ::std::option::Option<&str> {
        self.playback_configuration_name.as_deref()
    }
    /// <p>A complex type that contains settings for prefetch retrieval from the ad decision server (ADS).</p>
    pub fn retrieval(&self) -> ::std::option::Option<&crate::types::PrefetchRetrieval> {
        self.retrieval.as_ref()
    }
    /// <p>The frequency that MediaTailor creates prefetch schedules. <code>SINGLE</code> indicates that this schedule applies to one ad break. <code>RECURRING</code> indicates that MediaTailor automatically creates a schedule for each ad avail in a live event.</p>
    pub fn schedule_type(&self) -> ::std::option::Option<&crate::types::PrefetchScheduleType> {
        self.schedule_type.as_ref()
    }
    /// <p>The configuration that defines how and when MediaTailor performs ad prefetching in a live event.</p>
    pub fn recurring_prefetch_configuration(&self) -> ::std::option::Option<&crate::types::RecurringPrefetchConfiguration> {
        self.recurring_prefetch_configuration.as_ref()
    }
    /// <p>An optional stream identifier that you can specify in order to prefetch for multiple streams that use the same playback configuration.</p>
    pub fn stream_id(&self) -> ::std::option::Option<&str> {
        self.stream_id.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetPrefetchScheduleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPrefetchScheduleOutput {
    /// Creates a new builder-style object to manufacture [`GetPrefetchScheduleOutput`](crate::operation::get_prefetch_schedule::GetPrefetchScheduleOutput).
    pub fn builder() -> crate::operation::get_prefetch_schedule::builders::GetPrefetchScheduleOutputBuilder {
        crate::operation::get_prefetch_schedule::builders::GetPrefetchScheduleOutputBuilder::default()
    }
}

/// A builder for [`GetPrefetchScheduleOutput`](crate::operation::get_prefetch_schedule::GetPrefetchScheduleOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetPrefetchScheduleOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) consumption: ::std::option::Option<crate::types::PrefetchConsumption>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) playback_configuration_name: ::std::option::Option<::std::string::String>,
    pub(crate) retrieval: ::std::option::Option<crate::types::PrefetchRetrieval>,
    pub(crate) schedule_type: ::std::option::Option<crate::types::PrefetchScheduleType>,
    pub(crate) recurring_prefetch_configuration: ::std::option::Option<crate::types::RecurringPrefetchConfiguration>,
    pub(crate) stream_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetPrefetchScheduleOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the prefetch schedule.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the prefetch schedule.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the prefetch schedule.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The configuration settings for how and when MediaTailor consumes prefetched ads from the ad decision server for single prefetch schedules. Each consumption configuration contains an end time and an optional start time that define the <i>consumption window</i>. Prefetch schedules automatically expire no earlier than seven days after the end time.</p>
    pub fn consumption(mut self, input: crate::types::PrefetchConsumption) -> Self {
        self.consumption = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration settings for how and when MediaTailor consumes prefetched ads from the ad decision server for single prefetch schedules. Each consumption configuration contains an end time and an optional start time that define the <i>consumption window</i>. Prefetch schedules automatically expire no earlier than seven days after the end time.</p>
    pub fn set_consumption(mut self, input: ::std::option::Option<crate::types::PrefetchConsumption>) -> Self {
        self.consumption = input;
        self
    }
    /// <p>The configuration settings for how and when MediaTailor consumes prefetched ads from the ad decision server for single prefetch schedules. Each consumption configuration contains an end time and an optional start time that define the <i>consumption window</i>. Prefetch schedules automatically expire no earlier than seven days after the end time.</p>
    pub fn get_consumption(&self) -> &::std::option::Option<crate::types::PrefetchConsumption> {
        &self.consumption
    }
    /// <p>The name of the prefetch schedule. The name must be unique among all prefetch schedules that are associated with the specified playback configuration.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the prefetch schedule. The name must be unique among all prefetch schedules that are associated with the specified playback configuration.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the prefetch schedule. The name must be unique among all prefetch schedules that are associated with the specified playback configuration.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The name of the playback configuration to create the prefetch schedule for.</p>
    pub fn playback_configuration_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.playback_configuration_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the playback configuration to create the prefetch schedule for.</p>
    pub fn set_playback_configuration_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.playback_configuration_name = input;
        self
    }
    /// <p>The name of the playback configuration to create the prefetch schedule for.</p>
    pub fn get_playback_configuration_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.playback_configuration_name
    }
    /// <p>A complex type that contains settings for prefetch retrieval from the ad decision server (ADS).</p>
    pub fn retrieval(mut self, input: crate::types::PrefetchRetrieval) -> Self {
        self.retrieval = ::std::option::Option::Some(input);
        self
    }
    /// <p>A complex type that contains settings for prefetch retrieval from the ad decision server (ADS).</p>
    pub fn set_retrieval(mut self, input: ::std::option::Option<crate::types::PrefetchRetrieval>) -> Self {
        self.retrieval = input;
        self
    }
    /// <p>A complex type that contains settings for prefetch retrieval from the ad decision server (ADS).</p>
    pub fn get_retrieval(&self) -> &::std::option::Option<crate::types::PrefetchRetrieval> {
        &self.retrieval
    }
    /// <p>The frequency that MediaTailor creates prefetch schedules. <code>SINGLE</code> indicates that this schedule applies to one ad break. <code>RECURRING</code> indicates that MediaTailor automatically creates a schedule for each ad avail in a live event.</p>
    pub fn schedule_type(mut self, input: crate::types::PrefetchScheduleType) -> Self {
        self.schedule_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The frequency that MediaTailor creates prefetch schedules. <code>SINGLE</code> indicates that this schedule applies to one ad break. <code>RECURRING</code> indicates that MediaTailor automatically creates a schedule for each ad avail in a live event.</p>
    pub fn set_schedule_type(mut self, input: ::std::option::Option<crate::types::PrefetchScheduleType>) -> Self {
        self.schedule_type = input;
        self
    }
    /// <p>The frequency that MediaTailor creates prefetch schedules. <code>SINGLE</code> indicates that this schedule applies to one ad break. <code>RECURRING</code> indicates that MediaTailor automatically creates a schedule for each ad avail in a live event.</p>
    pub fn get_schedule_type(&self) -> &::std::option::Option<crate::types::PrefetchScheduleType> {
        &self.schedule_type
    }
    /// <p>The configuration that defines how and when MediaTailor performs ad prefetching in a live event.</p>
    pub fn recurring_prefetch_configuration(mut self, input: crate::types::RecurringPrefetchConfiguration) -> Self {
        self.recurring_prefetch_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration that defines how and when MediaTailor performs ad prefetching in a live event.</p>
    pub fn set_recurring_prefetch_configuration(mut self, input: ::std::option::Option<crate::types::RecurringPrefetchConfiguration>) -> Self {
        self.recurring_prefetch_configuration = input;
        self
    }
    /// <p>The configuration that defines how and when MediaTailor performs ad prefetching in a live event.</p>
    pub fn get_recurring_prefetch_configuration(&self) -> &::std::option::Option<crate::types::RecurringPrefetchConfiguration> {
        &self.recurring_prefetch_configuration
    }
    /// <p>An optional stream identifier that you can specify in order to prefetch for multiple streams that use the same playback configuration.</p>
    pub fn stream_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stream_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional stream identifier that you can specify in order to prefetch for multiple streams that use the same playback configuration.</p>
    pub fn set_stream_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stream_id = input;
        self
    }
    /// <p>An optional stream identifier that you can specify in order to prefetch for multiple streams that use the same playback configuration.</p>
    pub fn get_stream_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.stream_id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetPrefetchScheduleOutput`](crate::operation::get_prefetch_schedule::GetPrefetchScheduleOutput).
    pub fn build(self) -> crate::operation::get_prefetch_schedule::GetPrefetchScheduleOutput {
        crate::operation::get_prefetch_schedule::GetPrefetchScheduleOutput {
            arn: self.arn,
            consumption: self.consumption,
            name: self.name,
            playback_configuration_name: self.playback_configuration_name,
            retrieval: self.retrieval,
            schedule_type: self.schedule_type,
            recurring_prefetch_configuration: self.recurring_prefetch_configuration,
            stream_id: self.stream_id,
            _request_id: self._request_id,
        }
    }
}
