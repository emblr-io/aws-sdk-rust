// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListCallerAccessGrantsInput {
    /// <p>The Amazon Web Services account ID of the S3 Access Grants instance.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The S3 path of the data that you would like to access. Must start with <code>s3://</code>. You can optionally pass only the beginning characters of a path, and S3 Access Grants will search for all applicable grants for the path fragment.</p>
    pub grant_scope: ::std::option::Option<::std::string::String>,
    /// <p>A pagination token to request the next page of results. Pass this value into a subsequent <code>List Caller Access Grants</code> request in order to retrieve the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of access grants that you would like returned in the <code>List Caller Access Grants</code> response. If the results include the pagination token <code>NextToken</code>, make another call using the <code>NextToken</code> to determine if there are more results.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>If this optional parameter is passed in the request, a filter is applied to the results. The results will include only the access grants for the caller's Identity Center application or for any other applications (<code>ALL</code>).</p>
    pub allowed_by_application: ::std::option::Option<bool>,
}
impl ListCallerAccessGrantsInput {
    /// <p>The Amazon Web Services account ID of the S3 Access Grants instance.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The S3 path of the data that you would like to access. Must start with <code>s3://</code>. You can optionally pass only the beginning characters of a path, and S3 Access Grants will search for all applicable grants for the path fragment.</p>
    pub fn grant_scope(&self) -> ::std::option::Option<&str> {
        self.grant_scope.as_deref()
    }
    /// <p>A pagination token to request the next page of results. Pass this value into a subsequent <code>List Caller Access Grants</code> request in order to retrieve the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of access grants that you would like returned in the <code>List Caller Access Grants</code> response. If the results include the pagination token <code>NextToken</code>, make another call using the <code>NextToken</code> to determine if there are more results.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>If this optional parameter is passed in the request, a filter is applied to the results. The results will include only the access grants for the caller's Identity Center application or for any other applications (<code>ALL</code>).</p>
    pub fn allowed_by_application(&self) -> ::std::option::Option<bool> {
        self.allowed_by_application
    }
}
impl ListCallerAccessGrantsInput {
    /// Creates a new builder-style object to manufacture [`ListCallerAccessGrantsInput`](crate::operation::list_caller_access_grants::ListCallerAccessGrantsInput).
    pub fn builder() -> crate::operation::list_caller_access_grants::builders::ListCallerAccessGrantsInputBuilder {
        crate::operation::list_caller_access_grants::builders::ListCallerAccessGrantsInputBuilder::default()
    }
}

/// A builder for [`ListCallerAccessGrantsInput`](crate::operation::list_caller_access_grants::ListCallerAccessGrantsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListCallerAccessGrantsInputBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) grant_scope: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) allowed_by_application: ::std::option::Option<bool>,
}
impl ListCallerAccessGrantsInputBuilder {
    /// <p>The Amazon Web Services account ID of the S3 Access Grants instance.</p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the S3 Access Grants instance.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the S3 Access Grants instance.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The S3 path of the data that you would like to access. Must start with <code>s3://</code>. You can optionally pass only the beginning characters of a path, and S3 Access Grants will search for all applicable grants for the path fragment.</p>
    pub fn grant_scope(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.grant_scope = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 path of the data that you would like to access. Must start with <code>s3://</code>. You can optionally pass only the beginning characters of a path, and S3 Access Grants will search for all applicable grants for the path fragment.</p>
    pub fn set_grant_scope(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.grant_scope = input;
        self
    }
    /// <p>The S3 path of the data that you would like to access. Must start with <code>s3://</code>. You can optionally pass only the beginning characters of a path, and S3 Access Grants will search for all applicable grants for the path fragment.</p>
    pub fn get_grant_scope(&self) -> &::std::option::Option<::std::string::String> {
        &self.grant_scope
    }
    /// <p>A pagination token to request the next page of results. Pass this value into a subsequent <code>List Caller Access Grants</code> request in order to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A pagination token to request the next page of results. Pass this value into a subsequent <code>List Caller Access Grants</code> request in order to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A pagination token to request the next page of results. Pass this value into a subsequent <code>List Caller Access Grants</code> request in order to retrieve the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of access grants that you would like returned in the <code>List Caller Access Grants</code> response. If the results include the pagination token <code>NextToken</code>, make another call using the <code>NextToken</code> to determine if there are more results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of access grants that you would like returned in the <code>List Caller Access Grants</code> response. If the results include the pagination token <code>NextToken</code>, make another call using the <code>NextToken</code> to determine if there are more results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of access grants that you would like returned in the <code>List Caller Access Grants</code> response. If the results include the pagination token <code>NextToken</code>, make another call using the <code>NextToken</code> to determine if there are more results.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>If this optional parameter is passed in the request, a filter is applied to the results. The results will include only the access grants for the caller's Identity Center application or for any other applications (<code>ALL</code>).</p>
    pub fn allowed_by_application(mut self, input: bool) -> Self {
        self.allowed_by_application = ::std::option::Option::Some(input);
        self
    }
    /// <p>If this optional parameter is passed in the request, a filter is applied to the results. The results will include only the access grants for the caller's Identity Center application or for any other applications (<code>ALL</code>).</p>
    pub fn set_allowed_by_application(mut self, input: ::std::option::Option<bool>) -> Self {
        self.allowed_by_application = input;
        self
    }
    /// <p>If this optional parameter is passed in the request, a filter is applied to the results. The results will include only the access grants for the caller's Identity Center application or for any other applications (<code>ALL</code>).</p>
    pub fn get_allowed_by_application(&self) -> &::std::option::Option<bool> {
        &self.allowed_by_application
    }
    /// Consumes the builder and constructs a [`ListCallerAccessGrantsInput`](crate::operation::list_caller_access_grants::ListCallerAccessGrantsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_caller_access_grants::ListCallerAccessGrantsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_caller_access_grants::ListCallerAccessGrantsInput {
            account_id: self.account_id,
            grant_scope: self.grant_scope,
            next_token: self.next_token,
            max_results: self.max_results,
            allowed_by_application: self.allowed_by_application,
        })
    }
}
