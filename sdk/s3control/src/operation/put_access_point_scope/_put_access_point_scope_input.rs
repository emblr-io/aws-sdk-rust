// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutAccessPointScopeInput {
    /// <p>The Amazon Web Services account ID that owns the access point with scope that you want to create or replace.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the access point with the scope that you want to create or replace.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Object prefixes, API operations, or a combination of both.</p>
    pub scope: ::std::option::Option<crate::types::Scope>,
}
impl PutAccessPointScopeInput {
    /// <p>The Amazon Web Services account ID that owns the access point with scope that you want to create or replace.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The name of the access point with the scope that you want to create or replace.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Object prefixes, API operations, or a combination of both.</p>
    pub fn scope(&self) -> ::std::option::Option<&crate::types::Scope> {
        self.scope.as_ref()
    }
}
impl PutAccessPointScopeInput {
    /// Creates a new builder-style object to manufacture [`PutAccessPointScopeInput`](crate::operation::put_access_point_scope::PutAccessPointScopeInput).
    pub fn builder() -> crate::operation::put_access_point_scope::builders::PutAccessPointScopeInputBuilder {
        crate::operation::put_access_point_scope::builders::PutAccessPointScopeInputBuilder::default()
    }
}

/// A builder for [`PutAccessPointScopeInput`](crate::operation::put_access_point_scope::PutAccessPointScopeInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PutAccessPointScopeInputBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) scope: ::std::option::Option<crate::types::Scope>,
}
impl PutAccessPointScopeInputBuilder {
    /// <p>The Amazon Web Services account ID that owns the access point with scope that you want to create or replace.</p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID that owns the access point with scope that you want to create or replace.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID that owns the access point with scope that you want to create or replace.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The name of the access point with the scope that you want to create or replace.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the access point with the scope that you want to create or replace.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the access point with the scope that you want to create or replace.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Object prefixes, API operations, or a combination of both.</p>
    /// This field is required.
    pub fn scope(mut self, input: crate::types::Scope) -> Self {
        self.scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>Object prefixes, API operations, or a combination of both.</p>
    pub fn set_scope(mut self, input: ::std::option::Option<crate::types::Scope>) -> Self {
        self.scope = input;
        self
    }
    /// <p>Object prefixes, API operations, or a combination of both.</p>
    pub fn get_scope(&self) -> &::std::option::Option<crate::types::Scope> {
        &self.scope
    }
    /// Consumes the builder and constructs a [`PutAccessPointScopeInput`](crate::operation::put_access_point_scope::PutAccessPointScopeInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::put_access_point_scope::PutAccessPointScopeInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::put_access_point_scope::PutAccessPointScopeInput {
            account_id: self.account_id,
            name: self.name,
            scope: self.scope,
        })
    }
}
