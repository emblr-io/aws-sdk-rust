// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A container for the prefix-level configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PrefixLevel {
    /// <p>A container for the prefix-level storage metrics for S3 Storage Lens.</p>
    pub storage_metrics: ::std::option::Option<crate::types::PrefixLevelStorageMetrics>,
}
impl PrefixLevel {
    /// <p>A container for the prefix-level storage metrics for S3 Storage Lens.</p>
    pub fn storage_metrics(&self) -> ::std::option::Option<&crate::types::PrefixLevelStorageMetrics> {
        self.storage_metrics.as_ref()
    }
}
impl PrefixLevel {
    /// Creates a new builder-style object to manufacture [`PrefixLevel`](crate::types::PrefixLevel).
    pub fn builder() -> crate::types::builders::PrefixLevelBuilder {
        crate::types::builders::PrefixLevelBuilder::default()
    }
}

/// A builder for [`PrefixLevel`](crate::types::PrefixLevel).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PrefixLevelBuilder {
    pub(crate) storage_metrics: ::std::option::Option<crate::types::PrefixLevelStorageMetrics>,
}
impl PrefixLevelBuilder {
    /// <p>A container for the prefix-level storage metrics for S3 Storage Lens.</p>
    /// This field is required.
    pub fn storage_metrics(mut self, input: crate::types::PrefixLevelStorageMetrics) -> Self {
        self.storage_metrics = ::std::option::Option::Some(input);
        self
    }
    /// <p>A container for the prefix-level storage metrics for S3 Storage Lens.</p>
    pub fn set_storage_metrics(mut self, input: ::std::option::Option<crate::types::PrefixLevelStorageMetrics>) -> Self {
        self.storage_metrics = input;
        self
    }
    /// <p>A container for the prefix-level storage metrics for S3 Storage Lens.</p>
    pub fn get_storage_metrics(&self) -> &::std::option::Option<crate::types::PrefixLevelStorageMetrics> {
        &self.storage_metrics
    }
    /// Consumes the builder and constructs a [`PrefixLevel`](crate::types::PrefixLevel).
    pub fn build(self) -> crate::types::PrefixLevel {
        crate::types::PrefixLevel {
            storage_metrics: self.storage_metrics,
        }
    }
}
