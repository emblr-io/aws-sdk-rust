// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Part of <code>ListCallerAccessGrantsResult</code>. Each entry includes the permission level (READ, WRITE, or READWRITE) and the grant scope of the access grant. If the grant also includes an application ARN, the grantee can only access the S3 data through this application.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListCallerAccessGrantsEntry {
    /// <p>The type of permission granted, which can be one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>READ</code> - Grants read-only access to the S3 data.</p></li>
    /// <li>
    /// <p><code>WRITE</code> - Grants write-only access to the S3 data.</p></li>
    /// <li>
    /// <p><code>READWRITE</code> - Grants both read and write access to the S3 data.</p></li>
    /// </ul>
    pub permission: ::std::option::Option<crate::types::Permission>,
    /// <p>The S3 path of the data to which you have been granted access.</p>
    pub grant_scope: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of an Amazon Web Services IAM Identity Center application associated with your Identity Center instance. If the grant includes an application ARN, the grantee can only access the S3 data through this application.</p>
    pub application_arn: ::std::option::Option<::std::string::String>,
}
impl ListCallerAccessGrantsEntry {
    /// <p>The type of permission granted, which can be one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>READ</code> - Grants read-only access to the S3 data.</p></li>
    /// <li>
    /// <p><code>WRITE</code> - Grants write-only access to the S3 data.</p></li>
    /// <li>
    /// <p><code>READWRITE</code> - Grants both read and write access to the S3 data.</p></li>
    /// </ul>
    pub fn permission(&self) -> ::std::option::Option<&crate::types::Permission> {
        self.permission.as_ref()
    }
    /// <p>The S3 path of the data to which you have been granted access.</p>
    pub fn grant_scope(&self) -> ::std::option::Option<&str> {
        self.grant_scope.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of an Amazon Web Services IAM Identity Center application associated with your Identity Center instance. If the grant includes an application ARN, the grantee can only access the S3 data through this application.</p>
    pub fn application_arn(&self) -> ::std::option::Option<&str> {
        self.application_arn.as_deref()
    }
}
impl ListCallerAccessGrantsEntry {
    /// Creates a new builder-style object to manufacture [`ListCallerAccessGrantsEntry`](crate::types::ListCallerAccessGrantsEntry).
    pub fn builder() -> crate::types::builders::ListCallerAccessGrantsEntryBuilder {
        crate::types::builders::ListCallerAccessGrantsEntryBuilder::default()
    }
}

/// A builder for [`ListCallerAccessGrantsEntry`](crate::types::ListCallerAccessGrantsEntry).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListCallerAccessGrantsEntryBuilder {
    pub(crate) permission: ::std::option::Option<crate::types::Permission>,
    pub(crate) grant_scope: ::std::option::Option<::std::string::String>,
    pub(crate) application_arn: ::std::option::Option<::std::string::String>,
}
impl ListCallerAccessGrantsEntryBuilder {
    /// <p>The type of permission granted, which can be one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>READ</code> - Grants read-only access to the S3 data.</p></li>
    /// <li>
    /// <p><code>WRITE</code> - Grants write-only access to the S3 data.</p></li>
    /// <li>
    /// <p><code>READWRITE</code> - Grants both read and write access to the S3 data.</p></li>
    /// </ul>
    pub fn permission(mut self, input: crate::types::Permission) -> Self {
        self.permission = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of permission granted, which can be one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>READ</code> - Grants read-only access to the S3 data.</p></li>
    /// <li>
    /// <p><code>WRITE</code> - Grants write-only access to the S3 data.</p></li>
    /// <li>
    /// <p><code>READWRITE</code> - Grants both read and write access to the S3 data.</p></li>
    /// </ul>
    pub fn set_permission(mut self, input: ::std::option::Option<crate::types::Permission>) -> Self {
        self.permission = input;
        self
    }
    /// <p>The type of permission granted, which can be one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>READ</code> - Grants read-only access to the S3 data.</p></li>
    /// <li>
    /// <p><code>WRITE</code> - Grants write-only access to the S3 data.</p></li>
    /// <li>
    /// <p><code>READWRITE</code> - Grants both read and write access to the S3 data.</p></li>
    /// </ul>
    pub fn get_permission(&self) -> &::std::option::Option<crate::types::Permission> {
        &self.permission
    }
    /// <p>The S3 path of the data to which you have been granted access.</p>
    pub fn grant_scope(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.grant_scope = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 path of the data to which you have been granted access.</p>
    pub fn set_grant_scope(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.grant_scope = input;
        self
    }
    /// <p>The S3 path of the data to which you have been granted access.</p>
    pub fn get_grant_scope(&self) -> &::std::option::Option<::std::string::String> {
        &self.grant_scope
    }
    /// <p>The Amazon Resource Name (ARN) of an Amazon Web Services IAM Identity Center application associated with your Identity Center instance. If the grant includes an application ARN, the grantee can only access the S3 data through this application.</p>
    pub fn application_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an Amazon Web Services IAM Identity Center application associated with your Identity Center instance. If the grant includes an application ARN, the grantee can only access the S3 data through this application.</p>
    pub fn set_application_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an Amazon Web Services IAM Identity Center application associated with your Identity Center instance. If the grant includes an application ARN, the grantee can only access the S3 data through this application.</p>
    pub fn get_application_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_arn
    }
    /// Consumes the builder and constructs a [`ListCallerAccessGrantsEntry`](crate::types::ListCallerAccessGrantsEntry).
    pub fn build(self) -> crate::types::ListCallerAccessGrantsEntry {
        crate::types::ListCallerAccessGrantsEntry {
            permission: self.permission,
            grant_scope: self.grant_scope,
            application_arn: self.application_arn,
        }
    }
}
