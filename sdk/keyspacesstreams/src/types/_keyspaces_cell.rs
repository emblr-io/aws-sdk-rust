// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a cell in an Amazon Keyspaces table, containing both the value and metadata about the cell.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KeyspacesCell {
    /// <p>The value stored in this cell, which can be of various data types supported by Amazon Keyspaces.</p>
    pub value: ::std::option::Option<crate::types::KeyspacesCellValue>,
    /// <p>Metadata associated with this cell, such as time-to-live (TTL) expiration time and write timestamp.</p>
    pub metadata: ::std::option::Option<crate::types::KeyspacesMetadata>,
}
impl KeyspacesCell {
    /// <p>The value stored in this cell, which can be of various data types supported by Amazon Keyspaces.</p>
    pub fn value(&self) -> ::std::option::Option<&crate::types::KeyspacesCellValue> {
        self.value.as_ref()
    }
    /// <p>Metadata associated with this cell, such as time-to-live (TTL) expiration time and write timestamp.</p>
    pub fn metadata(&self) -> ::std::option::Option<&crate::types::KeyspacesMetadata> {
        self.metadata.as_ref()
    }
}
impl KeyspacesCell {
    /// Creates a new builder-style object to manufacture [`KeyspacesCell`](crate::types::KeyspacesCell).
    pub fn builder() -> crate::types::builders::KeyspacesCellBuilder {
        crate::types::builders::KeyspacesCellBuilder::default()
    }
}

/// A builder for [`KeyspacesCell`](crate::types::KeyspacesCell).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct KeyspacesCellBuilder {
    pub(crate) value: ::std::option::Option<crate::types::KeyspacesCellValue>,
    pub(crate) metadata: ::std::option::Option<crate::types::KeyspacesMetadata>,
}
impl KeyspacesCellBuilder {
    /// <p>The value stored in this cell, which can be of various data types supported by Amazon Keyspaces.</p>
    pub fn value(mut self, input: crate::types::KeyspacesCellValue) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value stored in this cell, which can be of various data types supported by Amazon Keyspaces.</p>
    pub fn set_value(mut self, input: ::std::option::Option<crate::types::KeyspacesCellValue>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value stored in this cell, which can be of various data types supported by Amazon Keyspaces.</p>
    pub fn get_value(&self) -> &::std::option::Option<crate::types::KeyspacesCellValue> {
        &self.value
    }
    /// <p>Metadata associated with this cell, such as time-to-live (TTL) expiration time and write timestamp.</p>
    pub fn metadata(mut self, input: crate::types::KeyspacesMetadata) -> Self {
        self.metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>Metadata associated with this cell, such as time-to-live (TTL) expiration time and write timestamp.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<crate::types::KeyspacesMetadata>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>Metadata associated with this cell, such as time-to-live (TTL) expiration time and write timestamp.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<crate::types::KeyspacesMetadata> {
        &self.metadata
    }
    /// Consumes the builder and constructs a [`KeyspacesCell`](crate::types::KeyspacesCell).
    pub fn build(self) -> crate::types::KeyspacesCell {
        crate::types::KeyspacesCell {
            value: self.value,
            metadata: self.metadata,
        }
    }
}
