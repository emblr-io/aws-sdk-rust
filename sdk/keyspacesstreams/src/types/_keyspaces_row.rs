// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a row in an Amazon Keyspaces table, containing regular column values, static column values, and row-level metadata.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KeyspacesRow {
    /// <p>A map of regular (non-static) column cells in the row, where keys are column names and values are the corresponding cells.</p>
    pub value_cells: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::KeyspacesCell>>,
    /// <p>A map of static column cells shared by all rows with the same partition key, where keys are column names and values are the corresponding cells.</p>
    pub static_cells: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::KeyspacesCell>>,
    /// <p>Metadata that applies to the entire row, such as timestamps and TTL information.</p>
    pub row_metadata: ::std::option::Option<crate::types::KeyspacesMetadata>,
}
impl KeyspacesRow {
    /// <p>A map of regular (non-static) column cells in the row, where keys are column names and values are the corresponding cells.</p>
    pub fn value_cells(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::KeyspacesCell>> {
        self.value_cells.as_ref()
    }
    /// <p>A map of static column cells shared by all rows with the same partition key, where keys are column names and values are the corresponding cells.</p>
    pub fn static_cells(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::KeyspacesCell>> {
        self.static_cells.as_ref()
    }
    /// <p>Metadata that applies to the entire row, such as timestamps and TTL information.</p>
    pub fn row_metadata(&self) -> ::std::option::Option<&crate::types::KeyspacesMetadata> {
        self.row_metadata.as_ref()
    }
}
impl KeyspacesRow {
    /// Creates a new builder-style object to manufacture [`KeyspacesRow`](crate::types::KeyspacesRow).
    pub fn builder() -> crate::types::builders::KeyspacesRowBuilder {
        crate::types::builders::KeyspacesRowBuilder::default()
    }
}

/// A builder for [`KeyspacesRow`](crate::types::KeyspacesRow).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct KeyspacesRowBuilder {
    pub(crate) value_cells: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::KeyspacesCell>>,
    pub(crate) static_cells: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::KeyspacesCell>>,
    pub(crate) row_metadata: ::std::option::Option<crate::types::KeyspacesMetadata>,
}
impl KeyspacesRowBuilder {
    /// Adds a key-value pair to `value_cells`.
    ///
    /// To override the contents of this collection use [`set_value_cells`](Self::set_value_cells).
    ///
    /// <p>A map of regular (non-static) column cells in the row, where keys are column names and values are the corresponding cells.</p>
    pub fn value_cells(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::KeyspacesCell) -> Self {
        let mut hash_map = self.value_cells.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.value_cells = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of regular (non-static) column cells in the row, where keys are column names and values are the corresponding cells.</p>
    pub fn set_value_cells(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::KeyspacesCell>>,
    ) -> Self {
        self.value_cells = input;
        self
    }
    /// <p>A map of regular (non-static) column cells in the row, where keys are column names and values are the corresponding cells.</p>
    pub fn get_value_cells(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::KeyspacesCell>> {
        &self.value_cells
    }
    /// Adds a key-value pair to `static_cells`.
    ///
    /// To override the contents of this collection use [`set_static_cells`](Self::set_static_cells).
    ///
    /// <p>A map of static column cells shared by all rows with the same partition key, where keys are column names and values are the corresponding cells.</p>
    pub fn static_cells(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::KeyspacesCell) -> Self {
        let mut hash_map = self.static_cells.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.static_cells = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of static column cells shared by all rows with the same partition key, where keys are column names and values are the corresponding cells.</p>
    pub fn set_static_cells(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::KeyspacesCell>>,
    ) -> Self {
        self.static_cells = input;
        self
    }
    /// <p>A map of static column cells shared by all rows with the same partition key, where keys are column names and values are the corresponding cells.</p>
    pub fn get_static_cells(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::KeyspacesCell>> {
        &self.static_cells
    }
    /// <p>Metadata that applies to the entire row, such as timestamps and TTL information.</p>
    pub fn row_metadata(mut self, input: crate::types::KeyspacesMetadata) -> Self {
        self.row_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>Metadata that applies to the entire row, such as timestamps and TTL information.</p>
    pub fn set_row_metadata(mut self, input: ::std::option::Option<crate::types::KeyspacesMetadata>) -> Self {
        self.row_metadata = input;
        self
    }
    /// <p>Metadata that applies to the entire row, such as timestamps and TTL information.</p>
    pub fn get_row_metadata(&self) -> &::std::option::Option<crate::types::KeyspacesMetadata> {
        &self.row_metadata
    }
    /// Consumes the builder and constructs a [`KeyspacesRow`](crate::types::KeyspacesRow).
    pub fn build(self) -> crate::types::KeyspacesRow {
        crate::types::KeyspacesRow {
            value_cells: self.value_cells,
            static_cells: self.static_cells,
            row_metadata: self.row_metadata,
        }
    }
}
