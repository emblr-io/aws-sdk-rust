// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a change data capture record for a row in an Amazon Keyspaces table, containing both the new and old states of the row.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Record {
    /// <p>The version of the record format, used to track the evolution of the record structure over time.</p>
    pub event_version: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp indicating when this change data capture record was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The origin or source of this change data capture record.</p>
    pub origin: ::std::option::Option<crate::types::OriginType>,
    /// <p>The partition key columns and their values for the affected row.</p>
    pub partition_keys: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::KeyspacesCellValue>>,
    /// <p>The clustering key columns and their values for the affected row, which determine the order of rows within a partition.</p>
    pub clustering_keys: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::KeyspacesCellValue>>,
    /// <p>The state of the row after the change operation that generated this record.</p>
    pub new_image: ::std::option::Option<crate::types::KeyspacesRow>,
    /// <p>The state of the row before the change operation that generated this record.</p>
    pub old_image: ::std::option::Option<crate::types::KeyspacesRow>,
    /// <p>A unique identifier assigned to this record within the shard, used for ordering and tracking purposes.</p>
    pub sequence_number: ::std::option::Option<::std::string::String>,
}
impl Record {
    /// <p>The version of the record format, used to track the evolution of the record structure over time.</p>
    pub fn event_version(&self) -> ::std::option::Option<&str> {
        self.event_version.as_deref()
    }
    /// <p>The timestamp indicating when this change data capture record was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The origin or source of this change data capture record.</p>
    pub fn origin(&self) -> ::std::option::Option<&crate::types::OriginType> {
        self.origin.as_ref()
    }
    /// <p>The partition key columns and their values for the affected row.</p>
    pub fn partition_keys(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::KeyspacesCellValue>> {
        self.partition_keys.as_ref()
    }
    /// <p>The clustering key columns and their values for the affected row, which determine the order of rows within a partition.</p>
    pub fn clustering_keys(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::KeyspacesCellValue>> {
        self.clustering_keys.as_ref()
    }
    /// <p>The state of the row after the change operation that generated this record.</p>
    pub fn new_image(&self) -> ::std::option::Option<&crate::types::KeyspacesRow> {
        self.new_image.as_ref()
    }
    /// <p>The state of the row before the change operation that generated this record.</p>
    pub fn old_image(&self) -> ::std::option::Option<&crate::types::KeyspacesRow> {
        self.old_image.as_ref()
    }
    /// <p>A unique identifier assigned to this record within the shard, used for ordering and tracking purposes.</p>
    pub fn sequence_number(&self) -> ::std::option::Option<&str> {
        self.sequence_number.as_deref()
    }
}
impl Record {
    /// Creates a new builder-style object to manufacture [`Record`](crate::types::Record).
    pub fn builder() -> crate::types::builders::RecordBuilder {
        crate::types::builders::RecordBuilder::default()
    }
}

/// A builder for [`Record`](crate::types::Record).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RecordBuilder {
    pub(crate) event_version: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) origin: ::std::option::Option<crate::types::OriginType>,
    pub(crate) partition_keys: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::KeyspacesCellValue>>,
    pub(crate) clustering_keys: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::KeyspacesCellValue>>,
    pub(crate) new_image: ::std::option::Option<crate::types::KeyspacesRow>,
    pub(crate) old_image: ::std::option::Option<crate::types::KeyspacesRow>,
    pub(crate) sequence_number: ::std::option::Option<::std::string::String>,
}
impl RecordBuilder {
    /// <p>The version of the record format, used to track the evolution of the record structure over time.</p>
    pub fn event_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the record format, used to track the evolution of the record structure over time.</p>
    pub fn set_event_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_version = input;
        self
    }
    /// <p>The version of the record format, used to track the evolution of the record structure over time.</p>
    pub fn get_event_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_version
    }
    /// <p>The timestamp indicating when this change data capture record was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp indicating when this change data capture record was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp indicating when this change data capture record was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The origin or source of this change data capture record.</p>
    pub fn origin(mut self, input: crate::types::OriginType) -> Self {
        self.origin = ::std::option::Option::Some(input);
        self
    }
    /// <p>The origin or source of this change data capture record.</p>
    pub fn set_origin(mut self, input: ::std::option::Option<crate::types::OriginType>) -> Self {
        self.origin = input;
        self
    }
    /// <p>The origin or source of this change data capture record.</p>
    pub fn get_origin(&self) -> &::std::option::Option<crate::types::OriginType> {
        &self.origin
    }
    /// Adds a key-value pair to `partition_keys`.
    ///
    /// To override the contents of this collection use [`set_partition_keys`](Self::set_partition_keys).
    ///
    /// <p>The partition key columns and their values for the affected row.</p>
    pub fn partition_keys(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::KeyspacesCellValue) -> Self {
        let mut hash_map = self.partition_keys.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.partition_keys = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The partition key columns and their values for the affected row.</p>
    pub fn set_partition_keys(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::KeyspacesCellValue>>,
    ) -> Self {
        self.partition_keys = input;
        self
    }
    /// <p>The partition key columns and their values for the affected row.</p>
    pub fn get_partition_keys(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::KeyspacesCellValue>> {
        &self.partition_keys
    }
    /// Adds a key-value pair to `clustering_keys`.
    ///
    /// To override the contents of this collection use [`set_clustering_keys`](Self::set_clustering_keys).
    ///
    /// <p>The clustering key columns and their values for the affected row, which determine the order of rows within a partition.</p>
    pub fn clustering_keys(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::KeyspacesCellValue) -> Self {
        let mut hash_map = self.clustering_keys.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.clustering_keys = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The clustering key columns and their values for the affected row, which determine the order of rows within a partition.</p>
    pub fn set_clustering_keys(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::KeyspacesCellValue>>,
    ) -> Self {
        self.clustering_keys = input;
        self
    }
    /// <p>The clustering key columns and their values for the affected row, which determine the order of rows within a partition.</p>
    pub fn get_clustering_keys(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::KeyspacesCellValue>> {
        &self.clustering_keys
    }
    /// <p>The state of the row after the change operation that generated this record.</p>
    pub fn new_image(mut self, input: crate::types::KeyspacesRow) -> Self {
        self.new_image = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the row after the change operation that generated this record.</p>
    pub fn set_new_image(mut self, input: ::std::option::Option<crate::types::KeyspacesRow>) -> Self {
        self.new_image = input;
        self
    }
    /// <p>The state of the row after the change operation that generated this record.</p>
    pub fn get_new_image(&self) -> &::std::option::Option<crate::types::KeyspacesRow> {
        &self.new_image
    }
    /// <p>The state of the row before the change operation that generated this record.</p>
    pub fn old_image(mut self, input: crate::types::KeyspacesRow) -> Self {
        self.old_image = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the row before the change operation that generated this record.</p>
    pub fn set_old_image(mut self, input: ::std::option::Option<crate::types::KeyspacesRow>) -> Self {
        self.old_image = input;
        self
    }
    /// <p>The state of the row before the change operation that generated this record.</p>
    pub fn get_old_image(&self) -> &::std::option::Option<crate::types::KeyspacesRow> {
        &self.old_image
    }
    /// <p>A unique identifier assigned to this record within the shard, used for ordering and tracking purposes.</p>
    pub fn sequence_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sequence_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier assigned to this record within the shard, used for ordering and tracking purposes.</p>
    pub fn set_sequence_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sequence_number = input;
        self
    }
    /// <p>A unique identifier assigned to this record within the shard, used for ordering and tracking purposes.</p>
    pub fn get_sequence_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.sequence_number
    }
    /// Consumes the builder and constructs a [`Record`](crate::types::Record).
    pub fn build(self) -> crate::types::Record {
        crate::types::Record {
            event_version: self.event_version,
            created_at: self.created_at,
            origin: self.origin,
            partition_keys: self.partition_keys,
            clustering_keys: self.clustering_keys,
            new_image: self.new_image,
            old_image: self.old_image,
            sequence_number: self.sequence_number,
        }
    }
}
