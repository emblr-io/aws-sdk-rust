// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a key-value pair within a map data type in Amazon Keyspaces, including the associated metadata.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KeyspacesCellMapDefinition {
    /// <p>The key of this map entry in the Amazon Keyspaces cell.</p>
    pub key: ::std::option::Option<crate::types::KeyspacesCellValue>,
    /// <p>The value associated with the key in this map entry.</p>
    pub value: ::std::option::Option<crate::types::KeyspacesCellValue>,
    /// <p>Metadata for this specific key-value pair within the map, such as timestamps and TTL information.</p>
    pub metadata: ::std::option::Option<crate::types::KeyspacesMetadata>,
}
impl KeyspacesCellMapDefinition {
    /// <p>The key of this map entry in the Amazon Keyspaces cell.</p>
    pub fn key(&self) -> ::std::option::Option<&crate::types::KeyspacesCellValue> {
        self.key.as_ref()
    }
    /// <p>The value associated with the key in this map entry.</p>
    pub fn value(&self) -> ::std::option::Option<&crate::types::KeyspacesCellValue> {
        self.value.as_ref()
    }
    /// <p>Metadata for this specific key-value pair within the map, such as timestamps and TTL information.</p>
    pub fn metadata(&self) -> ::std::option::Option<&crate::types::KeyspacesMetadata> {
        self.metadata.as_ref()
    }
}
impl KeyspacesCellMapDefinition {
    /// Creates a new builder-style object to manufacture [`KeyspacesCellMapDefinition`](crate::types::KeyspacesCellMapDefinition).
    pub fn builder() -> crate::types::builders::KeyspacesCellMapDefinitionBuilder {
        crate::types::builders::KeyspacesCellMapDefinitionBuilder::default()
    }
}

/// A builder for [`KeyspacesCellMapDefinition`](crate::types::KeyspacesCellMapDefinition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct KeyspacesCellMapDefinitionBuilder {
    pub(crate) key: ::std::option::Option<crate::types::KeyspacesCellValue>,
    pub(crate) value: ::std::option::Option<crate::types::KeyspacesCellValue>,
    pub(crate) metadata: ::std::option::Option<crate::types::KeyspacesMetadata>,
}
impl KeyspacesCellMapDefinitionBuilder {
    /// <p>The key of this map entry in the Amazon Keyspaces cell.</p>
    pub fn key(mut self, input: crate::types::KeyspacesCellValue) -> Self {
        self.key = ::std::option::Option::Some(input);
        self
    }
    /// <p>The key of this map entry in the Amazon Keyspaces cell.</p>
    pub fn set_key(mut self, input: ::std::option::Option<crate::types::KeyspacesCellValue>) -> Self {
        self.key = input;
        self
    }
    /// <p>The key of this map entry in the Amazon Keyspaces cell.</p>
    pub fn get_key(&self) -> &::std::option::Option<crate::types::KeyspacesCellValue> {
        &self.key
    }
    /// <p>The value associated with the key in this map entry.</p>
    pub fn value(mut self, input: crate::types::KeyspacesCellValue) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value associated with the key in this map entry.</p>
    pub fn set_value(mut self, input: ::std::option::Option<crate::types::KeyspacesCellValue>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value associated with the key in this map entry.</p>
    pub fn get_value(&self) -> &::std::option::Option<crate::types::KeyspacesCellValue> {
        &self.value
    }
    /// <p>Metadata for this specific key-value pair within the map, such as timestamps and TTL information.</p>
    pub fn metadata(mut self, input: crate::types::KeyspacesMetadata) -> Self {
        self.metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>Metadata for this specific key-value pair within the map, such as timestamps and TTL information.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<crate::types::KeyspacesMetadata>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>Metadata for this specific key-value pair within the map, such as timestamps and TTL information.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<crate::types::KeyspacesMetadata> {
        &self.metadata
    }
    /// Consumes the builder and constructs a [`KeyspacesCellMapDefinition`](crate::types::KeyspacesCellMapDefinition).
    pub fn build(self) -> crate::types::KeyspacesCellMapDefinition {
        crate::types::KeyspacesCellMapDefinition {
            key: self.key,
            value: self.value,
            metadata: self.metadata,
        }
    }
}
