// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filter used to limit the shards returned by a <code>GetStream</code> operation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ShardFilter {
    /// <p>The type of shard filter to use, which determines how the shardId parameter is interpreted.</p>
    pub r#type: ::std::option::Option<crate::types::ShardFilterType>,
    /// <p>The identifier of a specific shard used to filter results based on the specified filter type.</p>
    pub shard_id: ::std::option::Option<::std::string::String>,
}
impl ShardFilter {
    /// <p>The type of shard filter to use, which determines how the shardId parameter is interpreted.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::ShardFilterType> {
        self.r#type.as_ref()
    }
    /// <p>The identifier of a specific shard used to filter results based on the specified filter type.</p>
    pub fn shard_id(&self) -> ::std::option::Option<&str> {
        self.shard_id.as_deref()
    }
}
impl ShardFilter {
    /// Creates a new builder-style object to manufacture [`ShardFilter`](crate::types::ShardFilter).
    pub fn builder() -> crate::types::builders::ShardFilterBuilder {
        crate::types::builders::ShardFilterBuilder::default()
    }
}

/// A builder for [`ShardFilter`](crate::types::ShardFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ShardFilterBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::ShardFilterType>,
    pub(crate) shard_id: ::std::option::Option<::std::string::String>,
}
impl ShardFilterBuilder {
    /// <p>The type of shard filter to use, which determines how the shardId parameter is interpreted.</p>
    pub fn r#type(mut self, input: crate::types::ShardFilterType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of shard filter to use, which determines how the shardId parameter is interpreted.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ShardFilterType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of shard filter to use, which determines how the shardId parameter is interpreted.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ShardFilterType> {
        &self.r#type
    }
    /// <p>The identifier of a specific shard used to filter results based on the specified filter type.</p>
    pub fn shard_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.shard_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of a specific shard used to filter results based on the specified filter type.</p>
    pub fn set_shard_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.shard_id = input;
        self
    }
    /// <p>The identifier of a specific shard used to filter results based on the specified filter type.</p>
    pub fn get_shard_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.shard_id
    }
    /// Consumes the builder and constructs a [`ShardFilter`](crate::types::ShardFilter).
    pub fn build(self) -> crate::types::ShardFilter {
        crate::types::ShardFilter {
            r#type: self.r#type,
            shard_id: self.shard_id,
        }
    }
}
