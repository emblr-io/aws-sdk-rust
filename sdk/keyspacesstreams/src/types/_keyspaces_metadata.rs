// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains metadata information associated with Amazon Keyspaces cells and rows.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KeyspacesMetadata {
    /// <p>The time at which the associated data will expire, based on the time-to-live (TTL) setting.</p>
    pub expiration_time: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp at which the associated data was written to the database.</p>
    pub write_time: ::std::option::Option<::std::string::String>,
}
impl KeyspacesMetadata {
    /// <p>The time at which the associated data will expire, based on the time-to-live (TTL) setting.</p>
    pub fn expiration_time(&self) -> ::std::option::Option<&str> {
        self.expiration_time.as_deref()
    }
    /// <p>The timestamp at which the associated data was written to the database.</p>
    pub fn write_time(&self) -> ::std::option::Option<&str> {
        self.write_time.as_deref()
    }
}
impl KeyspacesMetadata {
    /// Creates a new builder-style object to manufacture [`KeyspacesMetadata`](crate::types::KeyspacesMetadata).
    pub fn builder() -> crate::types::builders::KeyspacesMetadataBuilder {
        crate::types::builders::KeyspacesMetadataBuilder::default()
    }
}

/// A builder for [`KeyspacesMetadata`](crate::types::KeyspacesMetadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct KeyspacesMetadataBuilder {
    pub(crate) expiration_time: ::std::option::Option<::std::string::String>,
    pub(crate) write_time: ::std::option::Option<::std::string::String>,
}
impl KeyspacesMetadataBuilder {
    /// <p>The time at which the associated data will expire, based on the time-to-live (TTL) setting.</p>
    pub fn expiration_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expiration_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time at which the associated data will expire, based on the time-to-live (TTL) setting.</p>
    pub fn set_expiration_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expiration_time = input;
        self
    }
    /// <p>The time at which the associated data will expire, based on the time-to-live (TTL) setting.</p>
    pub fn get_expiration_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.expiration_time
    }
    /// <p>The timestamp at which the associated data was written to the database.</p>
    pub fn write_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.write_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The timestamp at which the associated data was written to the database.</p>
    pub fn set_write_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.write_time = input;
        self
    }
    /// <p>The timestamp at which the associated data was written to the database.</p>
    pub fn get_write_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.write_time
    }
    /// Consumes the builder and constructs a [`KeyspacesMetadata`](crate::types::KeyspacesMetadata).
    pub fn build(self) -> crate::types::KeyspacesMetadata {
        crate::types::KeyspacesMetadata {
            expiration_time: self.expiration_time,
            write_time: self.write_time,
        }
    }
}
