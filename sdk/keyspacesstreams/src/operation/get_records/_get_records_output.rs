// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetRecordsOutput {
    /// <p>An array of change data records retrieved from the specified shard. Each record represents a single data modification (insert, update, or delete) to a row in the Amazon Keyspaces table. Records include the primary key columns and information about what data was modified.</p>
    pub change_records: ::std::option::Option<::std::vec::Vec<crate::types::Record>>,
    /// <p>The next position in the shard from which to start sequentially reading data records. If null, the shard has been closed and the requested iterator doesn't return any more data.</p>
    pub next_shard_iterator: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetRecordsOutput {
    /// <p>An array of change data records retrieved from the specified shard. Each record represents a single data modification (insert, update, or delete) to a row in the Amazon Keyspaces table. Records include the primary key columns and information about what data was modified.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.change_records.is_none()`.
    pub fn change_records(&self) -> &[crate::types::Record] {
        self.change_records.as_deref().unwrap_or_default()
    }
    /// <p>The next position in the shard from which to start sequentially reading data records. If null, the shard has been closed and the requested iterator doesn't return any more data.</p>
    pub fn next_shard_iterator(&self) -> ::std::option::Option<&str> {
        self.next_shard_iterator.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetRecordsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetRecordsOutput {
    /// Creates a new builder-style object to manufacture [`GetRecordsOutput`](crate::operation::get_records::GetRecordsOutput).
    pub fn builder() -> crate::operation::get_records::builders::GetRecordsOutputBuilder {
        crate::operation::get_records::builders::GetRecordsOutputBuilder::default()
    }
}

/// A builder for [`GetRecordsOutput`](crate::operation::get_records::GetRecordsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetRecordsOutputBuilder {
    pub(crate) change_records: ::std::option::Option<::std::vec::Vec<crate::types::Record>>,
    pub(crate) next_shard_iterator: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetRecordsOutputBuilder {
    /// Appends an item to `change_records`.
    ///
    /// To override the contents of this collection use [`set_change_records`](Self::set_change_records).
    ///
    /// <p>An array of change data records retrieved from the specified shard. Each record represents a single data modification (insert, update, or delete) to a row in the Amazon Keyspaces table. Records include the primary key columns and information about what data was modified.</p>
    pub fn change_records(mut self, input: crate::types::Record) -> Self {
        let mut v = self.change_records.unwrap_or_default();
        v.push(input);
        self.change_records = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of change data records retrieved from the specified shard. Each record represents a single data modification (insert, update, or delete) to a row in the Amazon Keyspaces table. Records include the primary key columns and information about what data was modified.</p>
    pub fn set_change_records(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Record>>) -> Self {
        self.change_records = input;
        self
    }
    /// <p>An array of change data records retrieved from the specified shard. Each record represents a single data modification (insert, update, or delete) to a row in the Amazon Keyspaces table. Records include the primary key columns and information about what data was modified.</p>
    pub fn get_change_records(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Record>> {
        &self.change_records
    }
    /// <p>The next position in the shard from which to start sequentially reading data records. If null, the shard has been closed and the requested iterator doesn't return any more data.</p>
    pub fn next_shard_iterator(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_shard_iterator = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The next position in the shard from which to start sequentially reading data records. If null, the shard has been closed and the requested iterator doesn't return any more data.</p>
    pub fn set_next_shard_iterator(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_shard_iterator = input;
        self
    }
    /// <p>The next position in the shard from which to start sequentially reading data records. If null, the shard has been closed and the requested iterator doesn't return any more data.</p>
    pub fn get_next_shard_iterator(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_shard_iterator
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetRecordsOutput`](crate::operation::get_records::GetRecordsOutput).
    pub fn build(self) -> crate::operation::get_records::GetRecordsOutput {
        crate::operation::get_records::GetRecordsOutput {
            change_records: self.change_records,
            next_shard_iterator: self.next_shard_iterator,
            _request_id: self._request_id,
        }
    }
}
