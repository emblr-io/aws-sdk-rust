// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetShardIteratorInput {
    /// <p>The Amazon Resource Name (ARN) of the stream for which to get the shard iterator. The ARN uniquely identifies the stream within Amazon Keyspaces.</p>
    pub stream_arn: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the shard within the stream. The shard ID uniquely identifies a subset of the stream's data records that you want to access.</p>
    pub shard_id: ::std::option::Option<::std::string::String>,
    /// <p>Determines how the shard iterator is positioned. Must be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>TRIM_HORIZON</code> - Start reading at the last untrimmed record in the shard, which is the oldest data record in the shard.</p></li>
    /// <li>
    /// <p><code>AT_SEQUENCE_NUMBER</code> - Start reading exactly from the specified sequence number.</p></li>
    /// <li>
    /// <p><code>AFTER_SEQUENCE_NUMBER</code> - Start reading right after the specified sequence number.</p></li>
    /// <li>
    /// <p><code>LATEST</code> - Start reading just after the most recent record in the shard, so that you always read the most recent data.</p></li>
    /// </ul>
    pub shard_iterator_type: ::std::option::Option<crate::types::ShardIteratorType>,
    /// <p>The sequence number of the data record in the shard from which to start reading. Required if <code>ShardIteratorType</code> is <code>AT_SEQUENCE_NUMBER</code> or <code>AFTER_SEQUENCE_NUMBER</code>. This parameter is ignored for other iterator types.</p>
    pub sequence_number: ::std::option::Option<::std::string::String>,
}
impl GetShardIteratorInput {
    /// <p>The Amazon Resource Name (ARN) of the stream for which to get the shard iterator. The ARN uniquely identifies the stream within Amazon Keyspaces.</p>
    pub fn stream_arn(&self) -> ::std::option::Option<&str> {
        self.stream_arn.as_deref()
    }
    /// <p>The identifier of the shard within the stream. The shard ID uniquely identifies a subset of the stream's data records that you want to access.</p>
    pub fn shard_id(&self) -> ::std::option::Option<&str> {
        self.shard_id.as_deref()
    }
    /// <p>Determines how the shard iterator is positioned. Must be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>TRIM_HORIZON</code> - Start reading at the last untrimmed record in the shard, which is the oldest data record in the shard.</p></li>
    /// <li>
    /// <p><code>AT_SEQUENCE_NUMBER</code> - Start reading exactly from the specified sequence number.</p></li>
    /// <li>
    /// <p><code>AFTER_SEQUENCE_NUMBER</code> - Start reading right after the specified sequence number.</p></li>
    /// <li>
    /// <p><code>LATEST</code> - Start reading just after the most recent record in the shard, so that you always read the most recent data.</p></li>
    /// </ul>
    pub fn shard_iterator_type(&self) -> ::std::option::Option<&crate::types::ShardIteratorType> {
        self.shard_iterator_type.as_ref()
    }
    /// <p>The sequence number of the data record in the shard from which to start reading. Required if <code>ShardIteratorType</code> is <code>AT_SEQUENCE_NUMBER</code> or <code>AFTER_SEQUENCE_NUMBER</code>. This parameter is ignored for other iterator types.</p>
    pub fn sequence_number(&self) -> ::std::option::Option<&str> {
        self.sequence_number.as_deref()
    }
}
impl GetShardIteratorInput {
    /// Creates a new builder-style object to manufacture [`GetShardIteratorInput`](crate::operation::get_shard_iterator::GetShardIteratorInput).
    pub fn builder() -> crate::operation::get_shard_iterator::builders::GetShardIteratorInputBuilder {
        crate::operation::get_shard_iterator::builders::GetShardIteratorInputBuilder::default()
    }
}

/// A builder for [`GetShardIteratorInput`](crate::operation::get_shard_iterator::GetShardIteratorInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetShardIteratorInputBuilder {
    pub(crate) stream_arn: ::std::option::Option<::std::string::String>,
    pub(crate) shard_id: ::std::option::Option<::std::string::String>,
    pub(crate) shard_iterator_type: ::std::option::Option<crate::types::ShardIteratorType>,
    pub(crate) sequence_number: ::std::option::Option<::std::string::String>,
}
impl GetShardIteratorInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the stream for which to get the shard iterator. The ARN uniquely identifies the stream within Amazon Keyspaces.</p>
    /// This field is required.
    pub fn stream_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stream_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the stream for which to get the shard iterator. The ARN uniquely identifies the stream within Amazon Keyspaces.</p>
    pub fn set_stream_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stream_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the stream for which to get the shard iterator. The ARN uniquely identifies the stream within Amazon Keyspaces.</p>
    pub fn get_stream_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.stream_arn
    }
    /// <p>The identifier of the shard within the stream. The shard ID uniquely identifies a subset of the stream's data records that you want to access.</p>
    /// This field is required.
    pub fn shard_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.shard_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the shard within the stream. The shard ID uniquely identifies a subset of the stream's data records that you want to access.</p>
    pub fn set_shard_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.shard_id = input;
        self
    }
    /// <p>The identifier of the shard within the stream. The shard ID uniquely identifies a subset of the stream's data records that you want to access.</p>
    pub fn get_shard_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.shard_id
    }
    /// <p>Determines how the shard iterator is positioned. Must be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>TRIM_HORIZON</code> - Start reading at the last untrimmed record in the shard, which is the oldest data record in the shard.</p></li>
    /// <li>
    /// <p><code>AT_SEQUENCE_NUMBER</code> - Start reading exactly from the specified sequence number.</p></li>
    /// <li>
    /// <p><code>AFTER_SEQUENCE_NUMBER</code> - Start reading right after the specified sequence number.</p></li>
    /// <li>
    /// <p><code>LATEST</code> - Start reading just after the most recent record in the shard, so that you always read the most recent data.</p></li>
    /// </ul>
    /// This field is required.
    pub fn shard_iterator_type(mut self, input: crate::types::ShardIteratorType) -> Self {
        self.shard_iterator_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines how the shard iterator is positioned. Must be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>TRIM_HORIZON</code> - Start reading at the last untrimmed record in the shard, which is the oldest data record in the shard.</p></li>
    /// <li>
    /// <p><code>AT_SEQUENCE_NUMBER</code> - Start reading exactly from the specified sequence number.</p></li>
    /// <li>
    /// <p><code>AFTER_SEQUENCE_NUMBER</code> - Start reading right after the specified sequence number.</p></li>
    /// <li>
    /// <p><code>LATEST</code> - Start reading just after the most recent record in the shard, so that you always read the most recent data.</p></li>
    /// </ul>
    pub fn set_shard_iterator_type(mut self, input: ::std::option::Option<crate::types::ShardIteratorType>) -> Self {
        self.shard_iterator_type = input;
        self
    }
    /// <p>Determines how the shard iterator is positioned. Must be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>TRIM_HORIZON</code> - Start reading at the last untrimmed record in the shard, which is the oldest data record in the shard.</p></li>
    /// <li>
    /// <p><code>AT_SEQUENCE_NUMBER</code> - Start reading exactly from the specified sequence number.</p></li>
    /// <li>
    /// <p><code>AFTER_SEQUENCE_NUMBER</code> - Start reading right after the specified sequence number.</p></li>
    /// <li>
    /// <p><code>LATEST</code> - Start reading just after the most recent record in the shard, so that you always read the most recent data.</p></li>
    /// </ul>
    pub fn get_shard_iterator_type(&self) -> &::std::option::Option<crate::types::ShardIteratorType> {
        &self.shard_iterator_type
    }
    /// <p>The sequence number of the data record in the shard from which to start reading. Required if <code>ShardIteratorType</code> is <code>AT_SEQUENCE_NUMBER</code> or <code>AFTER_SEQUENCE_NUMBER</code>. This parameter is ignored for other iterator types.</p>
    pub fn sequence_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sequence_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The sequence number of the data record in the shard from which to start reading. Required if <code>ShardIteratorType</code> is <code>AT_SEQUENCE_NUMBER</code> or <code>AFTER_SEQUENCE_NUMBER</code>. This parameter is ignored for other iterator types.</p>
    pub fn set_sequence_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sequence_number = input;
        self
    }
    /// <p>The sequence number of the data record in the shard from which to start reading. Required if <code>ShardIteratorType</code> is <code>AT_SEQUENCE_NUMBER</code> or <code>AFTER_SEQUENCE_NUMBER</code>. This parameter is ignored for other iterator types.</p>
    pub fn get_sequence_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.sequence_number
    }
    /// Consumes the builder and constructs a [`GetShardIteratorInput`](crate::operation::get_shard_iterator::GetShardIteratorInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_shard_iterator::GetShardIteratorInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_shard_iterator::GetShardIteratorInput {
            stream_arn: self.stream_arn,
            shard_id: self.shard_id,
            shard_iterator_type: self.shard_iterator_type,
            sequence_number: self.sequence_number,
        })
    }
}
