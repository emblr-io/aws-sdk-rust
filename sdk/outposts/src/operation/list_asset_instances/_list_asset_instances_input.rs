// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListAssetInstancesInput {
    /// <p>The ID of the Outpost.</p>
    pub outpost_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Filters the results by asset ID.</p>
    pub asset_id_filter: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Filters the results by instance ID.</p>
    pub instance_type_filter: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Filters the results by account ID.</p>
    pub account_id_filter: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Filters the results by Amazon Web Services service.</p>
    pub aws_service_filter: ::std::option::Option<::std::vec::Vec<crate::types::AwsServiceName>>,
    /// <p>The maximum page size.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The pagination token.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListAssetInstancesInput {
    /// <p>The ID of the Outpost.</p>
    pub fn outpost_identifier(&self) -> ::std::option::Option<&str> {
        self.outpost_identifier.as_deref()
    }
    /// <p>Filters the results by asset ID.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.asset_id_filter.is_none()`.
    pub fn asset_id_filter(&self) -> &[::std::string::String] {
        self.asset_id_filter.as_deref().unwrap_or_default()
    }
    /// <p>Filters the results by instance ID.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instance_type_filter.is_none()`.
    pub fn instance_type_filter(&self) -> &[::std::string::String] {
        self.instance_type_filter.as_deref().unwrap_or_default()
    }
    /// <p>Filters the results by account ID.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.account_id_filter.is_none()`.
    pub fn account_id_filter(&self) -> &[::std::string::String] {
        self.account_id_filter.as_deref().unwrap_or_default()
    }
    /// <p>Filters the results by Amazon Web Services service.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.aws_service_filter.is_none()`.
    pub fn aws_service_filter(&self) -> &[crate::types::AwsServiceName] {
        self.aws_service_filter.as_deref().unwrap_or_default()
    }
    /// <p>The maximum page size.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The pagination token.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListAssetInstancesInput {
    /// Creates a new builder-style object to manufacture [`ListAssetInstancesInput`](crate::operation::list_asset_instances::ListAssetInstancesInput).
    pub fn builder() -> crate::operation::list_asset_instances::builders::ListAssetInstancesInputBuilder {
        crate::operation::list_asset_instances::builders::ListAssetInstancesInputBuilder::default()
    }
}

/// A builder for [`ListAssetInstancesInput`](crate::operation::list_asset_instances::ListAssetInstancesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListAssetInstancesInputBuilder {
    pub(crate) outpost_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) asset_id_filter: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) instance_type_filter: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) account_id_filter: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) aws_service_filter: ::std::option::Option<::std::vec::Vec<crate::types::AwsServiceName>>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListAssetInstancesInputBuilder {
    /// <p>The ID of the Outpost.</p>
    /// This field is required.
    pub fn outpost_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.outpost_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Outpost.</p>
    pub fn set_outpost_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.outpost_identifier = input;
        self
    }
    /// <p>The ID of the Outpost.</p>
    pub fn get_outpost_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.outpost_identifier
    }
    /// Appends an item to `asset_id_filter`.
    ///
    /// To override the contents of this collection use [`set_asset_id_filter`](Self::set_asset_id_filter).
    ///
    /// <p>Filters the results by asset ID.</p>
    pub fn asset_id_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.asset_id_filter.unwrap_or_default();
        v.push(input.into());
        self.asset_id_filter = ::std::option::Option::Some(v);
        self
    }
    /// <p>Filters the results by asset ID.</p>
    pub fn set_asset_id_filter(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.asset_id_filter = input;
        self
    }
    /// <p>Filters the results by asset ID.</p>
    pub fn get_asset_id_filter(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.asset_id_filter
    }
    /// Appends an item to `instance_type_filter`.
    ///
    /// To override the contents of this collection use [`set_instance_type_filter`](Self::set_instance_type_filter).
    ///
    /// <p>Filters the results by instance ID.</p>
    pub fn instance_type_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.instance_type_filter.unwrap_or_default();
        v.push(input.into());
        self.instance_type_filter = ::std::option::Option::Some(v);
        self
    }
    /// <p>Filters the results by instance ID.</p>
    pub fn set_instance_type_filter(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.instance_type_filter = input;
        self
    }
    /// <p>Filters the results by instance ID.</p>
    pub fn get_instance_type_filter(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.instance_type_filter
    }
    /// Appends an item to `account_id_filter`.
    ///
    /// To override the contents of this collection use [`set_account_id_filter`](Self::set_account_id_filter).
    ///
    /// <p>Filters the results by account ID.</p>
    pub fn account_id_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.account_id_filter.unwrap_or_default();
        v.push(input.into());
        self.account_id_filter = ::std::option::Option::Some(v);
        self
    }
    /// <p>Filters the results by account ID.</p>
    pub fn set_account_id_filter(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.account_id_filter = input;
        self
    }
    /// <p>Filters the results by account ID.</p>
    pub fn get_account_id_filter(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.account_id_filter
    }
    /// Appends an item to `aws_service_filter`.
    ///
    /// To override the contents of this collection use [`set_aws_service_filter`](Self::set_aws_service_filter).
    ///
    /// <p>Filters the results by Amazon Web Services service.</p>
    pub fn aws_service_filter(mut self, input: crate::types::AwsServiceName) -> Self {
        let mut v = self.aws_service_filter.unwrap_or_default();
        v.push(input);
        self.aws_service_filter = ::std::option::Option::Some(v);
        self
    }
    /// <p>Filters the results by Amazon Web Services service.</p>
    pub fn set_aws_service_filter(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AwsServiceName>>) -> Self {
        self.aws_service_filter = input;
        self
    }
    /// <p>Filters the results by Amazon Web Services service.</p>
    pub fn get_aws_service_filter(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsServiceName>> {
        &self.aws_service_filter
    }
    /// <p>The maximum page size.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum page size.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum page size.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The pagination token.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListAssetInstancesInput`](crate::operation::list_asset_instances::ListAssetInstancesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_asset_instances::ListAssetInstancesInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_asset_instances::ListAssetInstancesInput {
            outpost_identifier: self.outpost_identifier,
            asset_id_filter: self.asset_id_filter,
            instance_type_filter: self.instance_type_filter,
            account_id_filter: self.account_id_filter,
            aws_service_filter: self.aws_service_filter,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
