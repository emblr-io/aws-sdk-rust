// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about compute hardware assets.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComputeAttributes {
    /// <p>The host ID of the Dedicated Host on the asset.</p>
    pub host_id: ::std::option::Option<::std::string::String>,
    /// <p>The state.</p>
    /// <ul>
    /// <li>
    /// <p>ACTIVE - The asset is available and can provide capacity for new compute resources.</p></li>
    /// <li>
    /// <p>ISOLATED - The asset is undergoing maintenance and can't provide capacity for new compute resources. Existing compute resources on the asset are not affected.</p></li>
    /// <li>
    /// <p>RETIRING - The underlying hardware for the asset is degraded. Capacity for new compute resources is reduced. Amazon Web Services sends notifications for resources that must be stopped before the asset can be replaced.</p></li>
    /// </ul>
    pub state: ::std::option::Option<crate::types::ComputeAssetState>,
    /// <p>A list of the names of instance families that are currently associated with a given asset.</p>
    pub instance_families: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The instance type capacities configured for this asset. This can be changed through a capacity task.</p>
    pub instance_type_capacities: ::std::option::Option<::std::vec::Vec<crate::types::AssetInstanceTypeCapacity>>,
    /// <p>The maximum number of vCPUs possible for the specified asset.</p>
    pub max_vcpus: ::std::option::Option<i32>,
}
impl ComputeAttributes {
    /// <p>The host ID of the Dedicated Host on the asset.</p>
    pub fn host_id(&self) -> ::std::option::Option<&str> {
        self.host_id.as_deref()
    }
    /// <p>The state.</p>
    /// <ul>
    /// <li>
    /// <p>ACTIVE - The asset is available and can provide capacity for new compute resources.</p></li>
    /// <li>
    /// <p>ISOLATED - The asset is undergoing maintenance and can't provide capacity for new compute resources. Existing compute resources on the asset are not affected.</p></li>
    /// <li>
    /// <p>RETIRING - The underlying hardware for the asset is degraded. Capacity for new compute resources is reduced. Amazon Web Services sends notifications for resources that must be stopped before the asset can be replaced.</p></li>
    /// </ul>
    pub fn state(&self) -> ::std::option::Option<&crate::types::ComputeAssetState> {
        self.state.as_ref()
    }
    /// <p>A list of the names of instance families that are currently associated with a given asset.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instance_families.is_none()`.
    pub fn instance_families(&self) -> &[::std::string::String] {
        self.instance_families.as_deref().unwrap_or_default()
    }
    /// <p>The instance type capacities configured for this asset. This can be changed through a capacity task.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instance_type_capacities.is_none()`.
    pub fn instance_type_capacities(&self) -> &[crate::types::AssetInstanceTypeCapacity] {
        self.instance_type_capacities.as_deref().unwrap_or_default()
    }
    /// <p>The maximum number of vCPUs possible for the specified asset.</p>
    pub fn max_vcpus(&self) -> ::std::option::Option<i32> {
        self.max_vcpus
    }
}
impl ComputeAttributes {
    /// Creates a new builder-style object to manufacture [`ComputeAttributes`](crate::types::ComputeAttributes).
    pub fn builder() -> crate::types::builders::ComputeAttributesBuilder {
        crate::types::builders::ComputeAttributesBuilder::default()
    }
}

/// A builder for [`ComputeAttributes`](crate::types::ComputeAttributes).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ComputeAttributesBuilder {
    pub(crate) host_id: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::ComputeAssetState>,
    pub(crate) instance_families: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) instance_type_capacities: ::std::option::Option<::std::vec::Vec<crate::types::AssetInstanceTypeCapacity>>,
    pub(crate) max_vcpus: ::std::option::Option<i32>,
}
impl ComputeAttributesBuilder {
    /// <p>The host ID of the Dedicated Host on the asset.</p>
    pub fn host_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.host_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The host ID of the Dedicated Host on the asset.</p>
    pub fn set_host_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.host_id = input;
        self
    }
    /// <p>The host ID of the Dedicated Host on the asset.</p>
    pub fn get_host_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.host_id
    }
    /// <p>The state.</p>
    /// <ul>
    /// <li>
    /// <p>ACTIVE - The asset is available and can provide capacity for new compute resources.</p></li>
    /// <li>
    /// <p>ISOLATED - The asset is undergoing maintenance and can't provide capacity for new compute resources. Existing compute resources on the asset are not affected.</p></li>
    /// <li>
    /// <p>RETIRING - The underlying hardware for the asset is degraded. Capacity for new compute resources is reduced. Amazon Web Services sends notifications for resources that must be stopped before the asset can be replaced.</p></li>
    /// </ul>
    pub fn state(mut self, input: crate::types::ComputeAssetState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state.</p>
    /// <ul>
    /// <li>
    /// <p>ACTIVE - The asset is available and can provide capacity for new compute resources.</p></li>
    /// <li>
    /// <p>ISOLATED - The asset is undergoing maintenance and can't provide capacity for new compute resources. Existing compute resources on the asset are not affected.</p></li>
    /// <li>
    /// <p>RETIRING - The underlying hardware for the asset is degraded. Capacity for new compute resources is reduced. Amazon Web Services sends notifications for resources that must be stopped before the asset can be replaced.</p></li>
    /// </ul>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::ComputeAssetState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state.</p>
    /// <ul>
    /// <li>
    /// <p>ACTIVE - The asset is available and can provide capacity for new compute resources.</p></li>
    /// <li>
    /// <p>ISOLATED - The asset is undergoing maintenance and can't provide capacity for new compute resources. Existing compute resources on the asset are not affected.</p></li>
    /// <li>
    /// <p>RETIRING - The underlying hardware for the asset is degraded. Capacity for new compute resources is reduced. Amazon Web Services sends notifications for resources that must be stopped before the asset can be replaced.</p></li>
    /// </ul>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::ComputeAssetState> {
        &self.state
    }
    /// Appends an item to `instance_families`.
    ///
    /// To override the contents of this collection use [`set_instance_families`](Self::set_instance_families).
    ///
    /// <p>A list of the names of instance families that are currently associated with a given asset.</p>
    pub fn instance_families(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.instance_families.unwrap_or_default();
        v.push(input.into());
        self.instance_families = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of the names of instance families that are currently associated with a given asset.</p>
    pub fn set_instance_families(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.instance_families = input;
        self
    }
    /// <p>A list of the names of instance families that are currently associated with a given asset.</p>
    pub fn get_instance_families(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.instance_families
    }
    /// Appends an item to `instance_type_capacities`.
    ///
    /// To override the contents of this collection use [`set_instance_type_capacities`](Self::set_instance_type_capacities).
    ///
    /// <p>The instance type capacities configured for this asset. This can be changed through a capacity task.</p>
    pub fn instance_type_capacities(mut self, input: crate::types::AssetInstanceTypeCapacity) -> Self {
        let mut v = self.instance_type_capacities.unwrap_or_default();
        v.push(input);
        self.instance_type_capacities = ::std::option::Option::Some(v);
        self
    }
    /// <p>The instance type capacities configured for this asset. This can be changed through a capacity task.</p>
    pub fn set_instance_type_capacities(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AssetInstanceTypeCapacity>>) -> Self {
        self.instance_type_capacities = input;
        self
    }
    /// <p>The instance type capacities configured for this asset. This can be changed through a capacity task.</p>
    pub fn get_instance_type_capacities(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AssetInstanceTypeCapacity>> {
        &self.instance_type_capacities
    }
    /// <p>The maximum number of vCPUs possible for the specified asset.</p>
    pub fn max_vcpus(mut self, input: i32) -> Self {
        self.max_vcpus = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of vCPUs possible for the specified asset.</p>
    pub fn set_max_vcpus(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_vcpus = input;
        self
    }
    /// <p>The maximum number of vCPUs possible for the specified asset.</p>
    pub fn get_max_vcpus(&self) -> &::std::option::Option<i32> {
        &self.max_vcpus
    }
    /// Consumes the builder and constructs a [`ComputeAttributes`](crate::types::ComputeAttributes).
    pub fn build(self) -> crate::types::ComputeAttributes {
        crate::types::ComputeAttributes {
            host_id: self.host_id,
            state: self.state,
            instance_families: self.instance_families,
            instance_type_capacities: self.instance_type_capacities,
            max_vcpus: self.max_vcpus,
        }
    }
}
