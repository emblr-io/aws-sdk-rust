// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>User-specified instances that must not be stopped. These instances will not appear in the list of instances that Amazon Web Services recommends to stop in order to free up capacity.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InstancesToExclude {
    /// <p>List of user-specified instances that must not be stopped.</p>
    pub instances: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>IDs of the accounts that own each instance that must not be stopped.</p>
    pub account_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Names of the services that own each instance that must not be stopped in order to free up the capacity needed to run the capacity task.</p>
    pub services: ::std::option::Option<::std::vec::Vec<crate::types::AwsServiceName>>,
}
impl InstancesToExclude {
    /// <p>List of user-specified instances that must not be stopped.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instances.is_none()`.
    pub fn instances(&self) -> &[::std::string::String] {
        self.instances.as_deref().unwrap_or_default()
    }
    /// <p>IDs of the accounts that own each instance that must not be stopped.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.account_ids.is_none()`.
    pub fn account_ids(&self) -> &[::std::string::String] {
        self.account_ids.as_deref().unwrap_or_default()
    }
    /// <p>Names of the services that own each instance that must not be stopped in order to free up the capacity needed to run the capacity task.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.services.is_none()`.
    pub fn services(&self) -> &[crate::types::AwsServiceName] {
        self.services.as_deref().unwrap_or_default()
    }
}
impl InstancesToExclude {
    /// Creates a new builder-style object to manufacture [`InstancesToExclude`](crate::types::InstancesToExclude).
    pub fn builder() -> crate::types::builders::InstancesToExcludeBuilder {
        crate::types::builders::InstancesToExcludeBuilder::default()
    }
}

/// A builder for [`InstancesToExclude`](crate::types::InstancesToExclude).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InstancesToExcludeBuilder {
    pub(crate) instances: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) account_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) services: ::std::option::Option<::std::vec::Vec<crate::types::AwsServiceName>>,
}
impl InstancesToExcludeBuilder {
    /// Appends an item to `instances`.
    ///
    /// To override the contents of this collection use [`set_instances`](Self::set_instances).
    ///
    /// <p>List of user-specified instances that must not be stopped.</p>
    pub fn instances(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.instances.unwrap_or_default();
        v.push(input.into());
        self.instances = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of user-specified instances that must not be stopped.</p>
    pub fn set_instances(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.instances = input;
        self
    }
    /// <p>List of user-specified instances that must not be stopped.</p>
    pub fn get_instances(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.instances
    }
    /// Appends an item to `account_ids`.
    ///
    /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
    ///
    /// <p>IDs of the accounts that own each instance that must not be stopped.</p>
    pub fn account_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.account_ids.unwrap_or_default();
        v.push(input.into());
        self.account_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>IDs of the accounts that own each instance that must not be stopped.</p>
    pub fn set_account_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.account_ids = input;
        self
    }
    /// <p>IDs of the accounts that own each instance that must not be stopped.</p>
    pub fn get_account_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.account_ids
    }
    /// Appends an item to `services`.
    ///
    /// To override the contents of this collection use [`set_services`](Self::set_services).
    ///
    /// <p>Names of the services that own each instance that must not be stopped in order to free up the capacity needed to run the capacity task.</p>
    pub fn services(mut self, input: crate::types::AwsServiceName) -> Self {
        let mut v = self.services.unwrap_or_default();
        v.push(input);
        self.services = ::std::option::Option::Some(v);
        self
    }
    /// <p>Names of the services that own each instance that must not be stopped in order to free up the capacity needed to run the capacity task.</p>
    pub fn set_services(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AwsServiceName>>) -> Self {
        self.services = input;
        self
    }
    /// <p>Names of the services that own each instance that must not be stopped in order to free up the capacity needed to run the capacity task.</p>
    pub fn get_services(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsServiceName>> {
        &self.services
    }
    /// Consumes the builder and constructs a [`InstancesToExclude`](crate::types::InstancesToExclude).
    pub fn build(self) -> crate::types::InstancesToExclude {
        crate::types::InstancesToExclude {
            instances: self.instances,
            account_ids: self.account_ids,
            services: self.services,
        }
    }
}
