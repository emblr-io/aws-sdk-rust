// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains specifications about the Amazon Lex runtime generative AI capabilities from Amazon Bedrock that you can turn on for your bot.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuntimeSettings {
    /// <p>An object containing specifications for the assisted slot resolution feature.</p>
    pub slot_resolution_improvement: ::std::option::Option<crate::types::SlotResolutionImprovementSpecification>,
    /// <p>An object containing specifications for the assisted nlu feature.</p>
    pub nlu_improvement: ::std::option::Option<crate::types::NluImprovementSpecification>,
}
impl RuntimeSettings {
    /// <p>An object containing specifications for the assisted slot resolution feature.</p>
    pub fn slot_resolution_improvement(&self) -> ::std::option::Option<&crate::types::SlotResolutionImprovementSpecification> {
        self.slot_resolution_improvement.as_ref()
    }
    /// <p>An object containing specifications for the assisted nlu feature.</p>
    pub fn nlu_improvement(&self) -> ::std::option::Option<&crate::types::NluImprovementSpecification> {
        self.nlu_improvement.as_ref()
    }
}
impl RuntimeSettings {
    /// Creates a new builder-style object to manufacture [`RuntimeSettings`](crate::types::RuntimeSettings).
    pub fn builder() -> crate::types::builders::RuntimeSettingsBuilder {
        crate::types::builders::RuntimeSettingsBuilder::default()
    }
}

/// A builder for [`RuntimeSettings`](crate::types::RuntimeSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuntimeSettingsBuilder {
    pub(crate) slot_resolution_improvement: ::std::option::Option<crate::types::SlotResolutionImprovementSpecification>,
    pub(crate) nlu_improvement: ::std::option::Option<crate::types::NluImprovementSpecification>,
}
impl RuntimeSettingsBuilder {
    /// <p>An object containing specifications for the assisted slot resolution feature.</p>
    pub fn slot_resolution_improvement(mut self, input: crate::types::SlotResolutionImprovementSpecification) -> Self {
        self.slot_resolution_improvement = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object containing specifications for the assisted slot resolution feature.</p>
    pub fn set_slot_resolution_improvement(mut self, input: ::std::option::Option<crate::types::SlotResolutionImprovementSpecification>) -> Self {
        self.slot_resolution_improvement = input;
        self
    }
    /// <p>An object containing specifications for the assisted slot resolution feature.</p>
    pub fn get_slot_resolution_improvement(&self) -> &::std::option::Option<crate::types::SlotResolutionImprovementSpecification> {
        &self.slot_resolution_improvement
    }
    /// <p>An object containing specifications for the assisted nlu feature.</p>
    pub fn nlu_improvement(mut self, input: crate::types::NluImprovementSpecification) -> Self {
        self.nlu_improvement = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object containing specifications for the assisted nlu feature.</p>
    pub fn set_nlu_improvement(mut self, input: ::std::option::Option<crate::types::NluImprovementSpecification>) -> Self {
        self.nlu_improvement = input;
        self
    }
    /// <p>An object containing specifications for the assisted nlu feature.</p>
    pub fn get_nlu_improvement(&self) -> &::std::option::Option<crate::types::NluImprovementSpecification> {
        &self.nlu_improvement
    }
    /// Consumes the builder and constructs a [`RuntimeSettings`](crate::types::RuntimeSettings).
    pub fn build(self) -> crate::types::RuntimeSettings {
        crate::types::RuntimeSettings {
            slot_resolution_improvement: self.slot_resolution_improvement,
            nlu_improvement: self.nlu_improvement,
        }
    }
}
