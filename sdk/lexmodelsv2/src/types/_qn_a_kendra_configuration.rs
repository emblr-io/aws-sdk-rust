// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the configuration of the Amazon Kendra index used for the <code>AMAZON.QnAIntent</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QnAKendraConfiguration {
    /// <p>The ARN of the Amazon Kendra index to use.</p>
    pub kendra_index: ::std::string::String,
    /// <p>Specifies whether to enable an Amazon Kendra filter string or not.</p>
    pub query_filter_string_enabled: bool,
    /// <p>Contains the Amazon Kendra filter string to use if enabled. For more information on the Amazon Kendra search filter JSON format, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/filtering.html#search-filtering">Using document attributes to filter search results</a>.</p>
    pub query_filter_string: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether to return an exact response from the Amazon Kendra index or to let the Amazon Bedrock model you select generate a response based on the results. To use this feature, you must first add FAQ questions to your index by following the steps at <a href="https://docs.aws.amazon.com/kendra/latest/dg/in-creating-faq.html">Adding frequently asked questions (FAQs) to an index</a>.</p>
    pub exact_response: bool,
}
impl QnAKendraConfiguration {
    /// <p>The ARN of the Amazon Kendra index to use.</p>
    pub fn kendra_index(&self) -> &str {
        use std::ops::Deref;
        self.kendra_index.deref()
    }
    /// <p>Specifies whether to enable an Amazon Kendra filter string or not.</p>
    pub fn query_filter_string_enabled(&self) -> bool {
        self.query_filter_string_enabled
    }
    /// <p>Contains the Amazon Kendra filter string to use if enabled. For more information on the Amazon Kendra search filter JSON format, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/filtering.html#search-filtering">Using document attributes to filter search results</a>.</p>
    pub fn query_filter_string(&self) -> ::std::option::Option<&str> {
        self.query_filter_string.as_deref()
    }
    /// <p>Specifies whether to return an exact response from the Amazon Kendra index or to let the Amazon Bedrock model you select generate a response based on the results. To use this feature, you must first add FAQ questions to your index by following the steps at <a href="https://docs.aws.amazon.com/kendra/latest/dg/in-creating-faq.html">Adding frequently asked questions (FAQs) to an index</a>.</p>
    pub fn exact_response(&self) -> bool {
        self.exact_response
    }
}
impl QnAKendraConfiguration {
    /// Creates a new builder-style object to manufacture [`QnAKendraConfiguration`](crate::types::QnAKendraConfiguration).
    pub fn builder() -> crate::types::builders::QnAKendraConfigurationBuilder {
        crate::types::builders::QnAKendraConfigurationBuilder::default()
    }
}

/// A builder for [`QnAKendraConfiguration`](crate::types::QnAKendraConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QnAKendraConfigurationBuilder {
    pub(crate) kendra_index: ::std::option::Option<::std::string::String>,
    pub(crate) query_filter_string_enabled: ::std::option::Option<bool>,
    pub(crate) query_filter_string: ::std::option::Option<::std::string::String>,
    pub(crate) exact_response: ::std::option::Option<bool>,
}
impl QnAKendraConfigurationBuilder {
    /// <p>The ARN of the Amazon Kendra index to use.</p>
    /// This field is required.
    pub fn kendra_index(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kendra_index = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Amazon Kendra index to use.</p>
    pub fn set_kendra_index(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kendra_index = input;
        self
    }
    /// <p>The ARN of the Amazon Kendra index to use.</p>
    pub fn get_kendra_index(&self) -> &::std::option::Option<::std::string::String> {
        &self.kendra_index
    }
    /// <p>Specifies whether to enable an Amazon Kendra filter string or not.</p>
    pub fn query_filter_string_enabled(mut self, input: bool) -> Self {
        self.query_filter_string_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to enable an Amazon Kendra filter string or not.</p>
    pub fn set_query_filter_string_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.query_filter_string_enabled = input;
        self
    }
    /// <p>Specifies whether to enable an Amazon Kendra filter string or not.</p>
    pub fn get_query_filter_string_enabled(&self) -> &::std::option::Option<bool> {
        &self.query_filter_string_enabled
    }
    /// <p>Contains the Amazon Kendra filter string to use if enabled. For more information on the Amazon Kendra search filter JSON format, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/filtering.html#search-filtering">Using document attributes to filter search results</a>.</p>
    pub fn query_filter_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query_filter_string = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Contains the Amazon Kendra filter string to use if enabled. For more information on the Amazon Kendra search filter JSON format, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/filtering.html#search-filtering">Using document attributes to filter search results</a>.</p>
    pub fn set_query_filter_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query_filter_string = input;
        self
    }
    /// <p>Contains the Amazon Kendra filter string to use if enabled. For more information on the Amazon Kendra search filter JSON format, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/filtering.html#search-filtering">Using document attributes to filter search results</a>.</p>
    pub fn get_query_filter_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.query_filter_string
    }
    /// <p>Specifies whether to return an exact response from the Amazon Kendra index or to let the Amazon Bedrock model you select generate a response based on the results. To use this feature, you must first add FAQ questions to your index by following the steps at <a href="https://docs.aws.amazon.com/kendra/latest/dg/in-creating-faq.html">Adding frequently asked questions (FAQs) to an index</a>.</p>
    pub fn exact_response(mut self, input: bool) -> Self {
        self.exact_response = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to return an exact response from the Amazon Kendra index or to let the Amazon Bedrock model you select generate a response based on the results. To use this feature, you must first add FAQ questions to your index by following the steps at <a href="https://docs.aws.amazon.com/kendra/latest/dg/in-creating-faq.html">Adding frequently asked questions (FAQs) to an index</a>.</p>
    pub fn set_exact_response(mut self, input: ::std::option::Option<bool>) -> Self {
        self.exact_response = input;
        self
    }
    /// <p>Specifies whether to return an exact response from the Amazon Kendra index or to let the Amazon Bedrock model you select generate a response based on the results. To use this feature, you must first add FAQ questions to your index by following the steps at <a href="https://docs.aws.amazon.com/kendra/latest/dg/in-creating-faq.html">Adding frequently asked questions (FAQs) to an index</a>.</p>
    pub fn get_exact_response(&self) -> &::std::option::Option<bool> {
        &self.exact_response
    }
    /// Consumes the builder and constructs a [`QnAKendraConfiguration`](crate::types::QnAKendraConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`kendra_index`](crate::types::builders::QnAKendraConfigurationBuilder::kendra_index)
    pub fn build(self) -> ::std::result::Result<crate::types::QnAKendraConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::QnAKendraConfiguration {
            kendra_index: self.kendra_index.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "kendra_index",
                    "kendra_index was not specified but it is required when building QnAKendraConfiguration",
                )
            })?,
            query_filter_string_enabled: self.query_filter_string_enabled.unwrap_or_default(),
            query_filter_string: self.query_filter_string,
            exact_response: self.exact_response.unwrap_or_default(),
        })
    }
}
