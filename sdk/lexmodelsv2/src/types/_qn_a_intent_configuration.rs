// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the the configuration of the built-in <code>Amazon.QnAIntent</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QnAIntentConfiguration {
    /// <p>Contains details about the configuration of the data source used for the <code>AMAZON.QnAIntent</code>.</p>
    pub data_source_configuration: ::std::option::Option<crate::types::DataSourceConfiguration>,
    /// <p>Contains information about the Amazon Bedrock model used to interpret the prompt used in descriptive bot building.</p>
    pub bedrock_model_configuration: ::std::option::Option<crate::types::BedrockModelSpecification>,
}
impl QnAIntentConfiguration {
    /// <p>Contains details about the configuration of the data source used for the <code>AMAZON.QnAIntent</code>.</p>
    pub fn data_source_configuration(&self) -> ::std::option::Option<&crate::types::DataSourceConfiguration> {
        self.data_source_configuration.as_ref()
    }
    /// <p>Contains information about the Amazon Bedrock model used to interpret the prompt used in descriptive bot building.</p>
    pub fn bedrock_model_configuration(&self) -> ::std::option::Option<&crate::types::BedrockModelSpecification> {
        self.bedrock_model_configuration.as_ref()
    }
}
impl QnAIntentConfiguration {
    /// Creates a new builder-style object to manufacture [`QnAIntentConfiguration`](crate::types::QnAIntentConfiguration).
    pub fn builder() -> crate::types::builders::QnAIntentConfigurationBuilder {
        crate::types::builders::QnAIntentConfigurationBuilder::default()
    }
}

/// A builder for [`QnAIntentConfiguration`](crate::types::QnAIntentConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QnAIntentConfigurationBuilder {
    pub(crate) data_source_configuration: ::std::option::Option<crate::types::DataSourceConfiguration>,
    pub(crate) bedrock_model_configuration: ::std::option::Option<crate::types::BedrockModelSpecification>,
}
impl QnAIntentConfigurationBuilder {
    /// <p>Contains details about the configuration of the data source used for the <code>AMAZON.QnAIntent</code>.</p>
    pub fn data_source_configuration(mut self, input: crate::types::DataSourceConfiguration) -> Self {
        self.data_source_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the configuration of the data source used for the <code>AMAZON.QnAIntent</code>.</p>
    pub fn set_data_source_configuration(mut self, input: ::std::option::Option<crate::types::DataSourceConfiguration>) -> Self {
        self.data_source_configuration = input;
        self
    }
    /// <p>Contains details about the configuration of the data source used for the <code>AMAZON.QnAIntent</code>.</p>
    pub fn get_data_source_configuration(&self) -> &::std::option::Option<crate::types::DataSourceConfiguration> {
        &self.data_source_configuration
    }
    /// <p>Contains information about the Amazon Bedrock model used to interpret the prompt used in descriptive bot building.</p>
    pub fn bedrock_model_configuration(mut self, input: crate::types::BedrockModelSpecification) -> Self {
        self.bedrock_model_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the Amazon Bedrock model used to interpret the prompt used in descriptive bot building.</p>
    pub fn set_bedrock_model_configuration(mut self, input: ::std::option::Option<crate::types::BedrockModelSpecification>) -> Self {
        self.bedrock_model_configuration = input;
        self
    }
    /// <p>Contains information about the Amazon Bedrock model used to interpret the prompt used in descriptive bot building.</p>
    pub fn get_bedrock_model_configuration(&self) -> &::std::option::Option<crate::types::BedrockModelSpecification> {
        &self.bedrock_model_configuration
    }
    /// Consumes the builder and constructs a [`QnAIntentConfiguration`](crate::types::QnAIntentConfiguration).
    pub fn build(self) -> crate::types::QnAIntentConfiguration {
        crate::types::QnAIntentConfiguration {
            data_source_configuration: self.data_source_configuration,
            bedrock_model_configuration: self.bedrock_model_configuration,
        }
    }
}
