// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the configuration of a Amazon Bedrock knowledge base.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BedrockKnowledgeStoreConfiguration {
    /// <p>The base ARN of the knowledge base used.</p>
    pub bedrock_knowledge_base_arn: ::std::string::String,
    /// <p>Specifies whether to return an exact response, or to return an answer generated by the model, using the fields you specify from the database.</p>
    pub exact_response: bool,
    /// <p>Contains the names of the fields used for an exact response to the user.</p>
    pub exact_response_fields: ::std::option::Option<crate::types::BedrockKnowledgeStoreExactResponseFields>,
}
impl BedrockKnowledgeStoreConfiguration {
    /// <p>The base ARN of the knowledge base used.</p>
    pub fn bedrock_knowledge_base_arn(&self) -> &str {
        use std::ops::Deref;
        self.bedrock_knowledge_base_arn.deref()
    }
    /// <p>Specifies whether to return an exact response, or to return an answer generated by the model, using the fields you specify from the database.</p>
    pub fn exact_response(&self) -> bool {
        self.exact_response
    }
    /// <p>Contains the names of the fields used for an exact response to the user.</p>
    pub fn exact_response_fields(&self) -> ::std::option::Option<&crate::types::BedrockKnowledgeStoreExactResponseFields> {
        self.exact_response_fields.as_ref()
    }
}
impl BedrockKnowledgeStoreConfiguration {
    /// Creates a new builder-style object to manufacture [`BedrockKnowledgeStoreConfiguration`](crate::types::BedrockKnowledgeStoreConfiguration).
    pub fn builder() -> crate::types::builders::BedrockKnowledgeStoreConfigurationBuilder {
        crate::types::builders::BedrockKnowledgeStoreConfigurationBuilder::default()
    }
}

/// A builder for [`BedrockKnowledgeStoreConfiguration`](crate::types::BedrockKnowledgeStoreConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BedrockKnowledgeStoreConfigurationBuilder {
    pub(crate) bedrock_knowledge_base_arn: ::std::option::Option<::std::string::String>,
    pub(crate) exact_response: ::std::option::Option<bool>,
    pub(crate) exact_response_fields: ::std::option::Option<crate::types::BedrockKnowledgeStoreExactResponseFields>,
}
impl BedrockKnowledgeStoreConfigurationBuilder {
    /// <p>The base ARN of the knowledge base used.</p>
    /// This field is required.
    pub fn bedrock_knowledge_base_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bedrock_knowledge_base_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The base ARN of the knowledge base used.</p>
    pub fn set_bedrock_knowledge_base_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bedrock_knowledge_base_arn = input;
        self
    }
    /// <p>The base ARN of the knowledge base used.</p>
    pub fn get_bedrock_knowledge_base_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.bedrock_knowledge_base_arn
    }
    /// <p>Specifies whether to return an exact response, or to return an answer generated by the model, using the fields you specify from the database.</p>
    pub fn exact_response(mut self, input: bool) -> Self {
        self.exact_response = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to return an exact response, or to return an answer generated by the model, using the fields you specify from the database.</p>
    pub fn set_exact_response(mut self, input: ::std::option::Option<bool>) -> Self {
        self.exact_response = input;
        self
    }
    /// <p>Specifies whether to return an exact response, or to return an answer generated by the model, using the fields you specify from the database.</p>
    pub fn get_exact_response(&self) -> &::std::option::Option<bool> {
        &self.exact_response
    }
    /// <p>Contains the names of the fields used for an exact response to the user.</p>
    pub fn exact_response_fields(mut self, input: crate::types::BedrockKnowledgeStoreExactResponseFields) -> Self {
        self.exact_response_fields = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the names of the fields used for an exact response to the user.</p>
    pub fn set_exact_response_fields(mut self, input: ::std::option::Option<crate::types::BedrockKnowledgeStoreExactResponseFields>) -> Self {
        self.exact_response_fields = input;
        self
    }
    /// <p>Contains the names of the fields used for an exact response to the user.</p>
    pub fn get_exact_response_fields(&self) -> &::std::option::Option<crate::types::BedrockKnowledgeStoreExactResponseFields> {
        &self.exact_response_fields
    }
    /// Consumes the builder and constructs a [`BedrockKnowledgeStoreConfiguration`](crate::types::BedrockKnowledgeStoreConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`bedrock_knowledge_base_arn`](crate::types::builders::BedrockKnowledgeStoreConfigurationBuilder::bedrock_knowledge_base_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::BedrockKnowledgeStoreConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BedrockKnowledgeStoreConfiguration {
            bedrock_knowledge_base_arn: self.bedrock_knowledge_base_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bedrock_knowledge_base_arn",
                    "bedrock_knowledge_base_arn was not specified but it is required when building BedrockKnowledgeStoreConfiguration",
                )
            })?,
            exact_response: self.exact_response.unwrap_or_default(),
            exact_response_fields: self.exact_response_fields,
        })
    }
}
