// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the configuration of the Amazon OpenSearch Service database used for the <code>AMAZON.QnAIntent</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OpensearchConfiguration {
    /// <p>The endpoint of the Amazon OpenSearch Service domain.</p>
    pub domain_endpoint: ::std::string::String,
    /// <p>The name of the Amazon OpenSearch Service index.</p>
    pub index_name: ::std::string::String,
    /// <p>Specifies whether to return an exact response or to return an answer generated by the model using the fields you specify from the database.</p>
    pub exact_response: bool,
    /// <p>Contains the names of the fields used for an exact response to the user.</p>
    pub exact_response_fields: ::std::option::Option<crate::types::ExactResponseFields>,
    /// <p>Contains a list of fields from the Amazon OpenSearch Service that the model can use to generate the answer to the query.</p>
    pub include_fields: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl OpensearchConfiguration {
    /// <p>The endpoint of the Amazon OpenSearch Service domain.</p>
    pub fn domain_endpoint(&self) -> &str {
        use std::ops::Deref;
        self.domain_endpoint.deref()
    }
    /// <p>The name of the Amazon OpenSearch Service index.</p>
    pub fn index_name(&self) -> &str {
        use std::ops::Deref;
        self.index_name.deref()
    }
    /// <p>Specifies whether to return an exact response or to return an answer generated by the model using the fields you specify from the database.</p>
    pub fn exact_response(&self) -> bool {
        self.exact_response
    }
    /// <p>Contains the names of the fields used for an exact response to the user.</p>
    pub fn exact_response_fields(&self) -> ::std::option::Option<&crate::types::ExactResponseFields> {
        self.exact_response_fields.as_ref()
    }
    /// <p>Contains a list of fields from the Amazon OpenSearch Service that the model can use to generate the answer to the query.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.include_fields.is_none()`.
    pub fn include_fields(&self) -> &[::std::string::String] {
        self.include_fields.as_deref().unwrap_or_default()
    }
}
impl OpensearchConfiguration {
    /// Creates a new builder-style object to manufacture [`OpensearchConfiguration`](crate::types::OpensearchConfiguration).
    pub fn builder() -> crate::types::builders::OpensearchConfigurationBuilder {
        crate::types::builders::OpensearchConfigurationBuilder::default()
    }
}

/// A builder for [`OpensearchConfiguration`](crate::types::OpensearchConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OpensearchConfigurationBuilder {
    pub(crate) domain_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) index_name: ::std::option::Option<::std::string::String>,
    pub(crate) exact_response: ::std::option::Option<bool>,
    pub(crate) exact_response_fields: ::std::option::Option<crate::types::ExactResponseFields>,
    pub(crate) include_fields: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl OpensearchConfigurationBuilder {
    /// <p>The endpoint of the Amazon OpenSearch Service domain.</p>
    /// This field is required.
    pub fn domain_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The endpoint of the Amazon OpenSearch Service domain.</p>
    pub fn set_domain_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_endpoint = input;
        self
    }
    /// <p>The endpoint of the Amazon OpenSearch Service domain.</p>
    pub fn get_domain_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_endpoint
    }
    /// <p>The name of the Amazon OpenSearch Service index.</p>
    /// This field is required.
    pub fn index_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.index_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon OpenSearch Service index.</p>
    pub fn set_index_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.index_name = input;
        self
    }
    /// <p>The name of the Amazon OpenSearch Service index.</p>
    pub fn get_index_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.index_name
    }
    /// <p>Specifies whether to return an exact response or to return an answer generated by the model using the fields you specify from the database.</p>
    pub fn exact_response(mut self, input: bool) -> Self {
        self.exact_response = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to return an exact response or to return an answer generated by the model using the fields you specify from the database.</p>
    pub fn set_exact_response(mut self, input: ::std::option::Option<bool>) -> Self {
        self.exact_response = input;
        self
    }
    /// <p>Specifies whether to return an exact response or to return an answer generated by the model using the fields you specify from the database.</p>
    pub fn get_exact_response(&self) -> &::std::option::Option<bool> {
        &self.exact_response
    }
    /// <p>Contains the names of the fields used for an exact response to the user.</p>
    pub fn exact_response_fields(mut self, input: crate::types::ExactResponseFields) -> Self {
        self.exact_response_fields = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the names of the fields used for an exact response to the user.</p>
    pub fn set_exact_response_fields(mut self, input: ::std::option::Option<crate::types::ExactResponseFields>) -> Self {
        self.exact_response_fields = input;
        self
    }
    /// <p>Contains the names of the fields used for an exact response to the user.</p>
    pub fn get_exact_response_fields(&self) -> &::std::option::Option<crate::types::ExactResponseFields> {
        &self.exact_response_fields
    }
    /// Appends an item to `include_fields`.
    ///
    /// To override the contents of this collection use [`set_include_fields`](Self::set_include_fields).
    ///
    /// <p>Contains a list of fields from the Amazon OpenSearch Service that the model can use to generate the answer to the query.</p>
    pub fn include_fields(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.include_fields.unwrap_or_default();
        v.push(input.into());
        self.include_fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains a list of fields from the Amazon OpenSearch Service that the model can use to generate the answer to the query.</p>
    pub fn set_include_fields(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.include_fields = input;
        self
    }
    /// <p>Contains a list of fields from the Amazon OpenSearch Service that the model can use to generate the answer to the query.</p>
    pub fn get_include_fields(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.include_fields
    }
    /// Consumes the builder and constructs a [`OpensearchConfiguration`](crate::types::OpensearchConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`domain_endpoint`](crate::types::builders::OpensearchConfigurationBuilder::domain_endpoint)
    /// - [`index_name`](crate::types::builders::OpensearchConfigurationBuilder::index_name)
    pub fn build(self) -> ::std::result::Result<crate::types::OpensearchConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OpensearchConfiguration {
            domain_endpoint: self.domain_endpoint.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain_endpoint",
                    "domain_endpoint was not specified but it is required when building OpensearchConfiguration",
                )
            })?,
            index_name: self.index_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "index_name",
                    "index_name was not specified but it is required when building OpensearchConfiguration",
                )
            })?,
            exact_response: self.exact_response.unwrap_or_default(),
            exact_response_fields: self.exact_response_fields,
            include_fields: self.include_fields,
        })
    }
}
