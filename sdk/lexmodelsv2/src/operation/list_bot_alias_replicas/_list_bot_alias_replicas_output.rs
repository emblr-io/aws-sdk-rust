// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListBotAliasReplicasOutput {
    /// <p>The unique bot ID of the replicated bot created from the source bot alias.</p>
    pub bot_id: ::std::option::Option<::std::string::String>,
    /// <p>The source region of the replicated bot created from the source bot alias.</p>
    pub source_region: ::std::option::Option<::std::string::String>,
    /// <p>The secondary region of the replicated bot created from the source bot alias.</p>
    pub replica_region: ::std::option::Option<::std::string::String>,
    /// <p>The summary information of the replicated bot created from the source bot alias.</p>
    pub bot_alias_replica_summaries: ::std::option::Option<::std::vec::Vec<crate::types::BotAliasReplicaSummary>>,
    /// <p>The next token for the replicated bots created from the source bot alias.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListBotAliasReplicasOutput {
    /// <p>The unique bot ID of the replicated bot created from the source bot alias.</p>
    pub fn bot_id(&self) -> ::std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The source region of the replicated bot created from the source bot alias.</p>
    pub fn source_region(&self) -> ::std::option::Option<&str> {
        self.source_region.as_deref()
    }
    /// <p>The secondary region of the replicated bot created from the source bot alias.</p>
    pub fn replica_region(&self) -> ::std::option::Option<&str> {
        self.replica_region.as_deref()
    }
    /// <p>The summary information of the replicated bot created from the source bot alias.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.bot_alias_replica_summaries.is_none()`.
    pub fn bot_alias_replica_summaries(&self) -> &[crate::types::BotAliasReplicaSummary] {
        self.bot_alias_replica_summaries.as_deref().unwrap_or_default()
    }
    /// <p>The next token for the replicated bots created from the source bot alias.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListBotAliasReplicasOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListBotAliasReplicasOutput {
    /// Creates a new builder-style object to manufacture [`ListBotAliasReplicasOutput`](crate::operation::list_bot_alias_replicas::ListBotAliasReplicasOutput).
    pub fn builder() -> crate::operation::list_bot_alias_replicas::builders::ListBotAliasReplicasOutputBuilder {
        crate::operation::list_bot_alias_replicas::builders::ListBotAliasReplicasOutputBuilder::default()
    }
}

/// A builder for [`ListBotAliasReplicasOutput`](crate::operation::list_bot_alias_replicas::ListBotAliasReplicasOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListBotAliasReplicasOutputBuilder {
    pub(crate) bot_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_region: ::std::option::Option<::std::string::String>,
    pub(crate) replica_region: ::std::option::Option<::std::string::String>,
    pub(crate) bot_alias_replica_summaries: ::std::option::Option<::std::vec::Vec<crate::types::BotAliasReplicaSummary>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListBotAliasReplicasOutputBuilder {
    /// <p>The unique bot ID of the replicated bot created from the source bot alias.</p>
    pub fn bot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique bot ID of the replicated bot created from the source bot alias.</p>
    pub fn set_bot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The unique bot ID of the replicated bot created from the source bot alias.</p>
    pub fn get_bot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_id
    }
    /// <p>The source region of the replicated bot created from the source bot alias.</p>
    pub fn source_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source region of the replicated bot created from the source bot alias.</p>
    pub fn set_source_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_region = input;
        self
    }
    /// <p>The source region of the replicated bot created from the source bot alias.</p>
    pub fn get_source_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_region
    }
    /// <p>The secondary region of the replicated bot created from the source bot alias.</p>
    pub fn replica_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replica_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The secondary region of the replicated bot created from the source bot alias.</p>
    pub fn set_replica_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replica_region = input;
        self
    }
    /// <p>The secondary region of the replicated bot created from the source bot alias.</p>
    pub fn get_replica_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.replica_region
    }
    /// Appends an item to `bot_alias_replica_summaries`.
    ///
    /// To override the contents of this collection use [`set_bot_alias_replica_summaries`](Self::set_bot_alias_replica_summaries).
    ///
    /// <p>The summary information of the replicated bot created from the source bot alias.</p>
    pub fn bot_alias_replica_summaries(mut self, input: crate::types::BotAliasReplicaSummary) -> Self {
        let mut v = self.bot_alias_replica_summaries.unwrap_or_default();
        v.push(input);
        self.bot_alias_replica_summaries = ::std::option::Option::Some(v);
        self
    }
    /// <p>The summary information of the replicated bot created from the source bot alias.</p>
    pub fn set_bot_alias_replica_summaries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BotAliasReplicaSummary>>) -> Self {
        self.bot_alias_replica_summaries = input;
        self
    }
    /// <p>The summary information of the replicated bot created from the source bot alias.</p>
    pub fn get_bot_alias_replica_summaries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BotAliasReplicaSummary>> {
        &self.bot_alias_replica_summaries
    }
    /// <p>The next token for the replicated bots created from the source bot alias.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The next token for the replicated bots created from the source bot alias.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The next token for the replicated bots created from the source bot alias.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListBotAliasReplicasOutput`](crate::operation::list_bot_alias_replicas::ListBotAliasReplicasOutput).
    pub fn build(self) -> crate::operation::list_bot_alias_replicas::ListBotAliasReplicasOutput {
        crate::operation::list_bot_alias_replicas::ListBotAliasReplicasOutput {
            bot_id: self.bot_id,
            source_region: self.source_region,
            replica_region: self.replica_region,
            bot_alias_replica_summaries: self.bot_alias_replica_summaries,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
