// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateBotReplicaInput {
    /// <p>The request for the unique bot ID of the source bot to be replicated in the secondary region.</p>
    pub bot_id: ::std::option::Option<::std::string::String>,
    /// <p>The request for the secondary region that will be used in the replication of the source bot.</p>
    pub replica_region: ::std::option::Option<::std::string::String>,
}
impl CreateBotReplicaInput {
    /// <p>The request for the unique bot ID of the source bot to be replicated in the secondary region.</p>
    pub fn bot_id(&self) -> ::std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The request for the secondary region that will be used in the replication of the source bot.</p>
    pub fn replica_region(&self) -> ::std::option::Option<&str> {
        self.replica_region.as_deref()
    }
}
impl CreateBotReplicaInput {
    /// Creates a new builder-style object to manufacture [`CreateBotReplicaInput`](crate::operation::create_bot_replica::CreateBotReplicaInput).
    pub fn builder() -> crate::operation::create_bot_replica::builders::CreateBotReplicaInputBuilder {
        crate::operation::create_bot_replica::builders::CreateBotReplicaInputBuilder::default()
    }
}

/// A builder for [`CreateBotReplicaInput`](crate::operation::create_bot_replica::CreateBotReplicaInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateBotReplicaInputBuilder {
    pub(crate) bot_id: ::std::option::Option<::std::string::String>,
    pub(crate) replica_region: ::std::option::Option<::std::string::String>,
}
impl CreateBotReplicaInputBuilder {
    /// <p>The request for the unique bot ID of the source bot to be replicated in the secondary region.</p>
    /// This field is required.
    pub fn bot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The request for the unique bot ID of the source bot to be replicated in the secondary region.</p>
    pub fn set_bot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The request for the unique bot ID of the source bot to be replicated in the secondary region.</p>
    pub fn get_bot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_id
    }
    /// <p>The request for the secondary region that will be used in the replication of the source bot.</p>
    /// This field is required.
    pub fn replica_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replica_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The request for the secondary region that will be used in the replication of the source bot.</p>
    pub fn set_replica_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replica_region = input;
        self
    }
    /// <p>The request for the secondary region that will be used in the replication of the source bot.</p>
    pub fn get_replica_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.replica_region
    }
    /// Consumes the builder and constructs a [`CreateBotReplicaInput`](crate::operation::create_bot_replica::CreateBotReplicaInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_bot_replica::CreateBotReplicaInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_bot_replica::CreateBotReplicaInput {
            bot_id: self.bot_id,
            replica_region: self.replica_region,
        })
    }
}
