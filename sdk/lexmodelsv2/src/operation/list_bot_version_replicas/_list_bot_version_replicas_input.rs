// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListBotVersionReplicasInput {
    /// <p>The request for the unique ID in the list of replicated bots.</p>
    pub bot_id: ::std::option::Option<::std::string::String>,
    /// <p>The request for the region used in the list of replicated bots.</p>
    pub replica_region: ::std::option::Option<::std::string::String>,
    /// <p>The maximum results given in the list of replicated bots.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The next token given in the list of replicated bots.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The requested sort category for the list of replicated bots.</p>
    pub sort_by: ::std::option::Option<crate::types::BotVersionReplicaSortBy>,
}
impl ListBotVersionReplicasInput {
    /// <p>The request for the unique ID in the list of replicated bots.</p>
    pub fn bot_id(&self) -> ::std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The request for the region used in the list of replicated bots.</p>
    pub fn replica_region(&self) -> ::std::option::Option<&str> {
        self.replica_region.as_deref()
    }
    /// <p>The maximum results given in the list of replicated bots.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The next token given in the list of replicated bots.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The requested sort category for the list of replicated bots.</p>
    pub fn sort_by(&self) -> ::std::option::Option<&crate::types::BotVersionReplicaSortBy> {
        self.sort_by.as_ref()
    }
}
impl ListBotVersionReplicasInput {
    /// Creates a new builder-style object to manufacture [`ListBotVersionReplicasInput`](crate::operation::list_bot_version_replicas::ListBotVersionReplicasInput).
    pub fn builder() -> crate::operation::list_bot_version_replicas::builders::ListBotVersionReplicasInputBuilder {
        crate::operation::list_bot_version_replicas::builders::ListBotVersionReplicasInputBuilder::default()
    }
}

/// A builder for [`ListBotVersionReplicasInput`](crate::operation::list_bot_version_replicas::ListBotVersionReplicasInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListBotVersionReplicasInputBuilder {
    pub(crate) bot_id: ::std::option::Option<::std::string::String>,
    pub(crate) replica_region: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) sort_by: ::std::option::Option<crate::types::BotVersionReplicaSortBy>,
}
impl ListBotVersionReplicasInputBuilder {
    /// <p>The request for the unique ID in the list of replicated bots.</p>
    /// This field is required.
    pub fn bot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The request for the unique ID in the list of replicated bots.</p>
    pub fn set_bot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The request for the unique ID in the list of replicated bots.</p>
    pub fn get_bot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_id
    }
    /// <p>The request for the region used in the list of replicated bots.</p>
    /// This field is required.
    pub fn replica_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replica_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The request for the region used in the list of replicated bots.</p>
    pub fn set_replica_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replica_region = input;
        self
    }
    /// <p>The request for the region used in the list of replicated bots.</p>
    pub fn get_replica_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.replica_region
    }
    /// <p>The maximum results given in the list of replicated bots.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum results given in the list of replicated bots.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum results given in the list of replicated bots.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The next token given in the list of replicated bots.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The next token given in the list of replicated bots.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The next token given in the list of replicated bots.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The requested sort category for the list of replicated bots.</p>
    pub fn sort_by(mut self, input: crate::types::BotVersionReplicaSortBy) -> Self {
        self.sort_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>The requested sort category for the list of replicated bots.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::BotVersionReplicaSortBy>) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>The requested sort category for the list of replicated bots.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::BotVersionReplicaSortBy> {
        &self.sort_by
    }
    /// Consumes the builder and constructs a [`ListBotVersionReplicasInput`](crate::operation::list_bot_version_replicas::ListBotVersionReplicasInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_bot_version_replicas::ListBotVersionReplicasInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_bot_version_replicas::ListBotVersionReplicasInput {
            bot_id: self.bot_id,
            replica_region: self.replica_region,
            max_results: self.max_results,
            next_token: self.next_token,
            sort_by: self.sort_by,
        })
    }
}
