// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration details about encryption for the cluster including the KMS key ARN, encryption type, and encryption status.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EncryptionDetails {
    /// <p>The type of encryption that protects the data on your cluster.</p>
    pub encryption_type: crate::types::EncryptionType,
    /// <p>The ARN of the KMS key that encrypts data in the cluster.</p>
    pub kms_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of encryption for the cluster.</p>
    pub encryption_status: crate::types::EncryptionStatus,
}
impl EncryptionDetails {
    /// <p>The type of encryption that protects the data on your cluster.</p>
    pub fn encryption_type(&self) -> &crate::types::EncryptionType {
        &self.encryption_type
    }
    /// <p>The ARN of the KMS key that encrypts data in the cluster.</p>
    pub fn kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
    /// <p>The status of encryption for the cluster.</p>
    pub fn encryption_status(&self) -> &crate::types::EncryptionStatus {
        &self.encryption_status
    }
}
impl EncryptionDetails {
    /// Creates a new builder-style object to manufacture [`EncryptionDetails`](crate::types::EncryptionDetails).
    pub fn builder() -> crate::types::builders::EncryptionDetailsBuilder {
        crate::types::builders::EncryptionDetailsBuilder::default()
    }
}

/// A builder for [`EncryptionDetails`](crate::types::EncryptionDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EncryptionDetailsBuilder {
    pub(crate) encryption_type: ::std::option::Option<crate::types::EncryptionType>,
    pub(crate) kms_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_status: ::std::option::Option<crate::types::EncryptionStatus>,
}
impl EncryptionDetailsBuilder {
    /// <p>The type of encryption that protects the data on your cluster.</p>
    /// This field is required.
    pub fn encryption_type(mut self, input: crate::types::EncryptionType) -> Self {
        self.encryption_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of encryption that protects the data on your cluster.</p>
    pub fn set_encryption_type(mut self, input: ::std::option::Option<crate::types::EncryptionType>) -> Self {
        self.encryption_type = input;
        self
    }
    /// <p>The type of encryption that protects the data on your cluster.</p>
    pub fn get_encryption_type(&self) -> &::std::option::Option<crate::types::EncryptionType> {
        &self.encryption_type
    }
    /// <p>The ARN of the KMS key that encrypts data in the cluster.</p>
    pub fn kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the KMS key that encrypts data in the cluster.</p>
    pub fn set_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>The ARN of the KMS key that encrypts data in the cluster.</p>
    pub fn get_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_arn
    }
    /// <p>The status of encryption for the cluster.</p>
    /// This field is required.
    pub fn encryption_status(mut self, input: crate::types::EncryptionStatus) -> Self {
        self.encryption_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of encryption for the cluster.</p>
    pub fn set_encryption_status(mut self, input: ::std::option::Option<crate::types::EncryptionStatus>) -> Self {
        self.encryption_status = input;
        self
    }
    /// <p>The status of encryption for the cluster.</p>
    pub fn get_encryption_status(&self) -> &::std::option::Option<crate::types::EncryptionStatus> {
        &self.encryption_status
    }
    /// Consumes the builder and constructs a [`EncryptionDetails`](crate::types::EncryptionDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`encryption_type`](crate::types::builders::EncryptionDetailsBuilder::encryption_type)
    /// - [`encryption_status`](crate::types::builders::EncryptionDetailsBuilder::encryption_status)
    pub fn build(self) -> ::std::result::Result<crate::types::EncryptionDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EncryptionDetails {
            encryption_type: self.encryption_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "encryption_type",
                    "encryption_type was not specified but it is required when building EncryptionDetails",
                )
            })?,
            kms_key_arn: self.kms_key_arn,
            encryption_status: self.encryption_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "encryption_status",
                    "encryption_status was not specified but it is required when building EncryptionDetails",
                )
            })?,
        })
    }
}
