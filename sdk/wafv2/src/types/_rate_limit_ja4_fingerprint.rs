// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Use the request's JA4 fingerprint derived from the TLS Client Hello of an incoming request as an aggregate key. If you use a single JA4 fingerprint as your custom key, then each value fully defines an aggregation instance.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RateLimitJa4Fingerprint {
    /// <p>The match status to assign to the web request if there is insufficient TSL Client Hello information to compute the JA4 fingerprint.</p>
    /// <p>You can specify the following fallback behaviors:</p>
    /// <ul>
    /// <li>
    /// <p><code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p></li>
    /// <li>
    /// <p><code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p></li>
    /// </ul>
    pub fallback_behavior: crate::types::FallbackBehavior,
}
impl RateLimitJa4Fingerprint {
    /// <p>The match status to assign to the web request if there is insufficient TSL Client Hello information to compute the JA4 fingerprint.</p>
    /// <p>You can specify the following fallback behaviors:</p>
    /// <ul>
    /// <li>
    /// <p><code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p></li>
    /// <li>
    /// <p><code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p></li>
    /// </ul>
    pub fn fallback_behavior(&self) -> &crate::types::FallbackBehavior {
        &self.fallback_behavior
    }
}
impl RateLimitJa4Fingerprint {
    /// Creates a new builder-style object to manufacture [`RateLimitJa4Fingerprint`](crate::types::RateLimitJa4Fingerprint).
    pub fn builder() -> crate::types::builders::RateLimitJa4FingerprintBuilder {
        crate::types::builders::RateLimitJa4FingerprintBuilder::default()
    }
}

/// A builder for [`RateLimitJa4Fingerprint`](crate::types::RateLimitJa4Fingerprint).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RateLimitJa4FingerprintBuilder {
    pub(crate) fallback_behavior: ::std::option::Option<crate::types::FallbackBehavior>,
}
impl RateLimitJa4FingerprintBuilder {
    /// <p>The match status to assign to the web request if there is insufficient TSL Client Hello information to compute the JA4 fingerprint.</p>
    /// <p>You can specify the following fallback behaviors:</p>
    /// <ul>
    /// <li>
    /// <p><code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p></li>
    /// <li>
    /// <p><code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p></li>
    /// </ul>
    /// This field is required.
    pub fn fallback_behavior(mut self, input: crate::types::FallbackBehavior) -> Self {
        self.fallback_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>The match status to assign to the web request if there is insufficient TSL Client Hello information to compute the JA4 fingerprint.</p>
    /// <p>You can specify the following fallback behaviors:</p>
    /// <ul>
    /// <li>
    /// <p><code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p></li>
    /// <li>
    /// <p><code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p></li>
    /// </ul>
    pub fn set_fallback_behavior(mut self, input: ::std::option::Option<crate::types::FallbackBehavior>) -> Self {
        self.fallback_behavior = input;
        self
    }
    /// <p>The match status to assign to the web request if there is insufficient TSL Client Hello information to compute the JA4 fingerprint.</p>
    /// <p>You can specify the following fallback behaviors:</p>
    /// <ul>
    /// <li>
    /// <p><code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p></li>
    /// <li>
    /// <p><code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p></li>
    /// </ul>
    pub fn get_fallback_behavior(&self) -> &::std::option::Option<crate::types::FallbackBehavior> {
        &self.fallback_behavior
    }
    /// Consumes the builder and constructs a [`RateLimitJa4Fingerprint`](crate::types::RateLimitJa4Fingerprint).
    /// This method will fail if any of the following fields are not set:
    /// - [`fallback_behavior`](crate::types::builders::RateLimitJa4FingerprintBuilder::fallback_behavior)
    pub fn build(self) -> ::std::result::Result<crate::types::RateLimitJa4Fingerprint, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RateLimitJa4Fingerprint {
            fallback_behavior: self.fallback_behavior.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "fallback_behavior",
                    "fallback_behavior was not specified but it is required when building RateLimitJa4Fingerprint",
                )
            })?,
        })
    }
}
