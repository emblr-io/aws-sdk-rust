// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies data protection to apply to the web request data for the web ACL. This is a web ACL level data protection option.</p>
/// <p>The data protection that you configure for the web ACL alters the data that's available for any other data collection activity, including your WAF logging destinations, web ACL request sampling, and Amazon Security Lake data collection and management. Your other option for data protection is in the logging configuration, which only affects logging.</p>
/// <p>This is part of the data protection configuration for a web ACL.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataProtectionConfig {
    /// <p>An array of data protection configurations for specific web request field types. This is defined for each web ACL. WAF applies the specified protection to all web requests that the web ACL inspects.</p>
    pub data_protections: ::std::vec::Vec<crate::types::DataProtection>,
}
impl DataProtectionConfig {
    /// <p>An array of data protection configurations for specific web request field types. This is defined for each web ACL. WAF applies the specified protection to all web requests that the web ACL inspects.</p>
    pub fn data_protections(&self) -> &[crate::types::DataProtection] {
        use std::ops::Deref;
        self.data_protections.deref()
    }
}
impl DataProtectionConfig {
    /// Creates a new builder-style object to manufacture [`DataProtectionConfig`](crate::types::DataProtectionConfig).
    pub fn builder() -> crate::types::builders::DataProtectionConfigBuilder {
        crate::types::builders::DataProtectionConfigBuilder::default()
    }
}

/// A builder for [`DataProtectionConfig`](crate::types::DataProtectionConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataProtectionConfigBuilder {
    pub(crate) data_protections: ::std::option::Option<::std::vec::Vec<crate::types::DataProtection>>,
}
impl DataProtectionConfigBuilder {
    /// Appends an item to `data_protections`.
    ///
    /// To override the contents of this collection use [`set_data_protections`](Self::set_data_protections).
    ///
    /// <p>An array of data protection configurations for specific web request field types. This is defined for each web ACL. WAF applies the specified protection to all web requests that the web ACL inspects.</p>
    pub fn data_protections(mut self, input: crate::types::DataProtection) -> Self {
        let mut v = self.data_protections.unwrap_or_default();
        v.push(input);
        self.data_protections = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of data protection configurations for specific web request field types. This is defined for each web ACL. WAF applies the specified protection to all web requests that the web ACL inspects.</p>
    pub fn set_data_protections(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DataProtection>>) -> Self {
        self.data_protections = input;
        self
    }
    /// <p>An array of data protection configurations for specific web request field types. This is defined for each web ACL. WAF applies the specified protection to all web requests that the web ACL inspects.</p>
    pub fn get_data_protections(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DataProtection>> {
        &self.data_protections
    }
    /// Consumes the builder and constructs a [`DataProtectionConfig`](crate::types::DataProtectionConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`data_protections`](crate::types::builders::DataProtectionConfigBuilder::data_protections)
    pub fn build(self) -> ::std::result::Result<crate::types::DataProtectionConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataProtectionConfig {
            data_protections: self.data_protections.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "data_protections",
                    "data_protections was not specified but it is required when building DataProtectionConfig",
                )
            })?,
        })
    }
}
