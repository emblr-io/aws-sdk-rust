// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configures the use of the anti-DDoS managed rule group, <code>AWSManagedRulesAntiDDoSRuleSet</code>. This configuration is used in <code>ManagedRuleGroupConfig</code>.</p>
/// <p>The configuration that you provide here determines whether and how the rules in the rule group are used.</p>
/// <p>For additional information about this and the other intelligent threat mitigation rule groups, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-managed-protections">Intelligent threat mitigation in WAF</a> and <a href="https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-list">Amazon Web Services Managed Rules rule groups list</a> in the <i>WAF Developer Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsManagedRulesAntiDDoSRuleSet {
    /// <p>Configures the request handling that's applied by the managed rule group rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code> during a distributed denial of service (DDoS) attack.</p>
    pub client_side_action_config: ::std::option::Option<crate::types::ClientSideActionConfig>,
    /// <p>The sensitivity that the rule group rule <code>DDoSRequests</code> uses when matching against the DDoS suspicion labeling on a request. The managed rule group adds the labeling during DDoS events, before the <code>DDoSRequests</code> rule runs.</p>
    /// <p>The higher the sensitivity, the more levels of labeling that the rule matches:</p>
    /// <ul>
    /// <li>
    /// <p>Low sensitivity is less sensitive, causing the rule to match only on the most likely participants in an attack, which are the requests with the high suspicion label <code>awswaf:managed:aws:anti-ddos:high-suspicion-ddos-request</code>.</p></li>
    /// <li>
    /// <p>Medium sensitivity causes the rule to match on the medium and high suspicion labels.</p></li>
    /// <li>
    /// <p>High sensitivity causes the rule to match on all of the suspicion labels: low, medium, and high.</p></li>
    /// </ul>
    /// <p>Default: <code>LOW</code></p>
    pub sensitivity_to_block: ::std::option::Option<crate::types::SensitivityToAct>,
}
impl AwsManagedRulesAntiDDoSRuleSet {
    /// <p>Configures the request handling that's applied by the managed rule group rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code> during a distributed denial of service (DDoS) attack.</p>
    pub fn client_side_action_config(&self) -> ::std::option::Option<&crate::types::ClientSideActionConfig> {
        self.client_side_action_config.as_ref()
    }
    /// <p>The sensitivity that the rule group rule <code>DDoSRequests</code> uses when matching against the DDoS suspicion labeling on a request. The managed rule group adds the labeling during DDoS events, before the <code>DDoSRequests</code> rule runs.</p>
    /// <p>The higher the sensitivity, the more levels of labeling that the rule matches:</p>
    /// <ul>
    /// <li>
    /// <p>Low sensitivity is less sensitive, causing the rule to match only on the most likely participants in an attack, which are the requests with the high suspicion label <code>awswaf:managed:aws:anti-ddos:high-suspicion-ddos-request</code>.</p></li>
    /// <li>
    /// <p>Medium sensitivity causes the rule to match on the medium and high suspicion labels.</p></li>
    /// <li>
    /// <p>High sensitivity causes the rule to match on all of the suspicion labels: low, medium, and high.</p></li>
    /// </ul>
    /// <p>Default: <code>LOW</code></p>
    pub fn sensitivity_to_block(&self) -> ::std::option::Option<&crate::types::SensitivityToAct> {
        self.sensitivity_to_block.as_ref()
    }
}
impl AwsManagedRulesAntiDDoSRuleSet {
    /// Creates a new builder-style object to manufacture [`AwsManagedRulesAntiDDoSRuleSet`](crate::types::AwsManagedRulesAntiDDoSRuleSet).
    pub fn builder() -> crate::types::builders::AwsManagedRulesAntiDDoSRuleSetBuilder {
        crate::types::builders::AwsManagedRulesAntiDDoSRuleSetBuilder::default()
    }
}

/// A builder for [`AwsManagedRulesAntiDDoSRuleSet`](crate::types::AwsManagedRulesAntiDDoSRuleSet).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AwsManagedRulesAntiDDoSRuleSetBuilder {
    pub(crate) client_side_action_config: ::std::option::Option<crate::types::ClientSideActionConfig>,
    pub(crate) sensitivity_to_block: ::std::option::Option<crate::types::SensitivityToAct>,
}
impl AwsManagedRulesAntiDDoSRuleSetBuilder {
    /// <p>Configures the request handling that's applied by the managed rule group rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code> during a distributed denial of service (DDoS) attack.</p>
    /// This field is required.
    pub fn client_side_action_config(mut self, input: crate::types::ClientSideActionConfig) -> Self {
        self.client_side_action_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configures the request handling that's applied by the managed rule group rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code> during a distributed denial of service (DDoS) attack.</p>
    pub fn set_client_side_action_config(mut self, input: ::std::option::Option<crate::types::ClientSideActionConfig>) -> Self {
        self.client_side_action_config = input;
        self
    }
    /// <p>Configures the request handling that's applied by the managed rule group rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code> during a distributed denial of service (DDoS) attack.</p>
    pub fn get_client_side_action_config(&self) -> &::std::option::Option<crate::types::ClientSideActionConfig> {
        &self.client_side_action_config
    }
    /// <p>The sensitivity that the rule group rule <code>DDoSRequests</code> uses when matching against the DDoS suspicion labeling on a request. The managed rule group adds the labeling during DDoS events, before the <code>DDoSRequests</code> rule runs.</p>
    /// <p>The higher the sensitivity, the more levels of labeling that the rule matches:</p>
    /// <ul>
    /// <li>
    /// <p>Low sensitivity is less sensitive, causing the rule to match only on the most likely participants in an attack, which are the requests with the high suspicion label <code>awswaf:managed:aws:anti-ddos:high-suspicion-ddos-request</code>.</p></li>
    /// <li>
    /// <p>Medium sensitivity causes the rule to match on the medium and high suspicion labels.</p></li>
    /// <li>
    /// <p>High sensitivity causes the rule to match on all of the suspicion labels: low, medium, and high.</p></li>
    /// </ul>
    /// <p>Default: <code>LOW</code></p>
    pub fn sensitivity_to_block(mut self, input: crate::types::SensitivityToAct) -> Self {
        self.sensitivity_to_block = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sensitivity that the rule group rule <code>DDoSRequests</code> uses when matching against the DDoS suspicion labeling on a request. The managed rule group adds the labeling during DDoS events, before the <code>DDoSRequests</code> rule runs.</p>
    /// <p>The higher the sensitivity, the more levels of labeling that the rule matches:</p>
    /// <ul>
    /// <li>
    /// <p>Low sensitivity is less sensitive, causing the rule to match only on the most likely participants in an attack, which are the requests with the high suspicion label <code>awswaf:managed:aws:anti-ddos:high-suspicion-ddos-request</code>.</p></li>
    /// <li>
    /// <p>Medium sensitivity causes the rule to match on the medium and high suspicion labels.</p></li>
    /// <li>
    /// <p>High sensitivity causes the rule to match on all of the suspicion labels: low, medium, and high.</p></li>
    /// </ul>
    /// <p>Default: <code>LOW</code></p>
    pub fn set_sensitivity_to_block(mut self, input: ::std::option::Option<crate::types::SensitivityToAct>) -> Self {
        self.sensitivity_to_block = input;
        self
    }
    /// <p>The sensitivity that the rule group rule <code>DDoSRequests</code> uses when matching against the DDoS suspicion labeling on a request. The managed rule group adds the labeling during DDoS events, before the <code>DDoSRequests</code> rule runs.</p>
    /// <p>The higher the sensitivity, the more levels of labeling that the rule matches:</p>
    /// <ul>
    /// <li>
    /// <p>Low sensitivity is less sensitive, causing the rule to match only on the most likely participants in an attack, which are the requests with the high suspicion label <code>awswaf:managed:aws:anti-ddos:high-suspicion-ddos-request</code>.</p></li>
    /// <li>
    /// <p>Medium sensitivity causes the rule to match on the medium and high suspicion labels.</p></li>
    /// <li>
    /// <p>High sensitivity causes the rule to match on all of the suspicion labels: low, medium, and high.</p></li>
    /// </ul>
    /// <p>Default: <code>LOW</code></p>
    pub fn get_sensitivity_to_block(&self) -> &::std::option::Option<crate::types::SensitivityToAct> {
        &self.sensitivity_to_block
    }
    /// Consumes the builder and constructs a [`AwsManagedRulesAntiDDoSRuleSet`](crate::types::AwsManagedRulesAntiDDoSRuleSet).
    pub fn build(self) -> crate::types::AwsManagedRulesAntiDDoSRuleSet {
        crate::types::AwsManagedRulesAntiDDoSRuleSet {
            client_side_action_config: self.client_side_action_config,
            sensitivity_to_block: self.sensitivity_to_block,
        }
    }
}
