// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configures the level of DDoS protection that applies to web ACLs associated with Application Load Balancers.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OnSourceDDoSProtectionConfig {
    /// <p>The level of DDoS protection that applies to web ACLs associated with Application Load Balancers. <code>ACTIVE_UNDER_DDOS</code> protection is enabled by default whenever a web ACL is associated with an Application Load Balancer. In the event that an Application Load Balancer experiences high-load conditions or suspected DDoS attacks, the <code>ACTIVE_UNDER_DDOS</code> protection automatically rate limits traffic from known low reputation sources without disrupting Application Load Balancer availability. <code>ALWAYS_ON</code> protection provides constant, always-on monitoring of known low reputation sources for suspected DDoS attacks. While this provides a higher level of protection, there may be potential impacts on legitimate traffic.</p>
    pub alb_low_reputation_mode: crate::types::LowReputationMode,
}
impl OnSourceDDoSProtectionConfig {
    /// <p>The level of DDoS protection that applies to web ACLs associated with Application Load Balancers. <code>ACTIVE_UNDER_DDOS</code> protection is enabled by default whenever a web ACL is associated with an Application Load Balancer. In the event that an Application Load Balancer experiences high-load conditions or suspected DDoS attacks, the <code>ACTIVE_UNDER_DDOS</code> protection automatically rate limits traffic from known low reputation sources without disrupting Application Load Balancer availability. <code>ALWAYS_ON</code> protection provides constant, always-on monitoring of known low reputation sources for suspected DDoS attacks. While this provides a higher level of protection, there may be potential impacts on legitimate traffic.</p>
    pub fn alb_low_reputation_mode(&self) -> &crate::types::LowReputationMode {
        &self.alb_low_reputation_mode
    }
}
impl OnSourceDDoSProtectionConfig {
    /// Creates a new builder-style object to manufacture [`OnSourceDDoSProtectionConfig`](crate::types::OnSourceDDoSProtectionConfig).
    pub fn builder() -> crate::types::builders::OnSourceDDoSProtectionConfigBuilder {
        crate::types::builders::OnSourceDDoSProtectionConfigBuilder::default()
    }
}

/// A builder for [`OnSourceDDoSProtectionConfig`](crate::types::OnSourceDDoSProtectionConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OnSourceDDoSProtectionConfigBuilder {
    pub(crate) alb_low_reputation_mode: ::std::option::Option<crate::types::LowReputationMode>,
}
impl OnSourceDDoSProtectionConfigBuilder {
    /// <p>The level of DDoS protection that applies to web ACLs associated with Application Load Balancers. <code>ACTIVE_UNDER_DDOS</code> protection is enabled by default whenever a web ACL is associated with an Application Load Balancer. In the event that an Application Load Balancer experiences high-load conditions or suspected DDoS attacks, the <code>ACTIVE_UNDER_DDOS</code> protection automatically rate limits traffic from known low reputation sources without disrupting Application Load Balancer availability. <code>ALWAYS_ON</code> protection provides constant, always-on monitoring of known low reputation sources for suspected DDoS attacks. While this provides a higher level of protection, there may be potential impacts on legitimate traffic.</p>
    /// This field is required.
    pub fn alb_low_reputation_mode(mut self, input: crate::types::LowReputationMode) -> Self {
        self.alb_low_reputation_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The level of DDoS protection that applies to web ACLs associated with Application Load Balancers. <code>ACTIVE_UNDER_DDOS</code> protection is enabled by default whenever a web ACL is associated with an Application Load Balancer. In the event that an Application Load Balancer experiences high-load conditions or suspected DDoS attacks, the <code>ACTIVE_UNDER_DDOS</code> protection automatically rate limits traffic from known low reputation sources without disrupting Application Load Balancer availability. <code>ALWAYS_ON</code> protection provides constant, always-on monitoring of known low reputation sources for suspected DDoS attacks. While this provides a higher level of protection, there may be potential impacts on legitimate traffic.</p>
    pub fn set_alb_low_reputation_mode(mut self, input: ::std::option::Option<crate::types::LowReputationMode>) -> Self {
        self.alb_low_reputation_mode = input;
        self
    }
    /// <p>The level of DDoS protection that applies to web ACLs associated with Application Load Balancers. <code>ACTIVE_UNDER_DDOS</code> protection is enabled by default whenever a web ACL is associated with an Application Load Balancer. In the event that an Application Load Balancer experiences high-load conditions or suspected DDoS attacks, the <code>ACTIVE_UNDER_DDOS</code> protection automatically rate limits traffic from known low reputation sources without disrupting Application Load Balancer availability. <code>ALWAYS_ON</code> protection provides constant, always-on monitoring of known low reputation sources for suspected DDoS attacks. While this provides a higher level of protection, there may be potential impacts on legitimate traffic.</p>
    pub fn get_alb_low_reputation_mode(&self) -> &::std::option::Option<crate::types::LowReputationMode> {
        &self.alb_low_reputation_mode
    }
    /// Consumes the builder and constructs a [`OnSourceDDoSProtectionConfig`](crate::types::OnSourceDDoSProtectionConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`alb_low_reputation_mode`](crate::types::builders::OnSourceDDoSProtectionConfigBuilder::alb_low_reputation_mode)
    pub fn build(self) -> ::std::result::Result<crate::types::OnSourceDDoSProtectionConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OnSourceDDoSProtectionConfig {
            alb_low_reputation_mode: self.alb_low_reputation_mode.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "alb_low_reputation_mode",
                    "alb_low_reputation_mode was not specified but it is required when building OnSourceDDoSProtectionConfig",
                )
            })?,
        })
    }
}
