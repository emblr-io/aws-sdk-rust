// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This is part of the <code>AWSManagedRulesAntiDDoSRuleSet</code> <code>ClientSideActionConfig</code> configuration in <code>ManagedRuleGroupConfig</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClientSideAction {
    /// <p>Determines whether to use the <code>AWSManagedRulesAntiDDoSRuleSet</code> rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code> in the rule group evaluation and the related label <code>awswaf:managed:aws:anti-ddos:challengeable-request</code>.</p>
    /// <ul>
    /// <li>
    /// <p>If usage is enabled:</p>
    /// <ul>
    /// <li>
    /// <p>The managed rule group adds the label <code>awswaf:managed:aws:anti-ddos:challengeable-request</code> to any web request whose URL does <i>NOT</i> match the regular expressions provided in the <code>ClientSideAction</code> setting <code>ExemptUriRegularExpressions</code>.</p></li>
    /// <li>
    /// <p>The two rules are evaluated against web requests for protected resources that are experiencing a DDoS attack. The two rules only apply their action to matching requests that have the label <code>awswaf:managed:aws:anti-ddos:challengeable-request</code>.</p></li>
    /// </ul></li>
    /// <li>
    /// <p>If usage is disabled:</p>
    /// <ul>
    /// <li>
    /// <p>The managed rule group doesn't add the label <code>awswaf:managed:aws:anti-ddos:challengeable-request</code> to any web requests.</p></li>
    /// <li>
    /// <p>The two rules are not evaluated.</p></li>
    /// <li>
    /// <p>None of the other <code>ClientSideAction</code> settings have any effect.</p></li>
    /// </ul></li>
    /// </ul><note>
    /// <p>This setting only enables or disables the use of the two anti-DDOS rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code> in the anti-DDoS managed rule group.</p>
    /// <p>This setting doesn't alter the action setting in the two rules. To override the actions used by the rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code>, enable this setting, and then override the rule actions in the usual way, in your managed rule group configuration.</p>
    /// </note>
    pub usage_of_action: crate::types::UsageOfAction,
    /// <p>The sensitivity that the rule group rule <code>ChallengeDDoSRequests</code> uses when matching against the DDoS suspicion labeling on a request. The managed rule group adds the labeling during DDoS events, before the <code>ChallengeDDoSRequests</code> rule runs.</p>
    /// <p>The higher the sensitivity, the more levels of labeling that the rule matches:</p>
    /// <ul>
    /// <li>
    /// <p>Low sensitivity is less sensitive, causing the rule to match only on the most likely participants in an attack, which are the requests with the high suspicion label <code>awswaf:managed:aws:anti-ddos:high-suspicion-ddos-request</code>.</p></li>
    /// <li>
    /// <p>Medium sensitivity causes the rule to match on the medium and high suspicion labels.</p></li>
    /// <li>
    /// <p>High sensitivity causes the rule to match on all of the suspicion labels: low, medium, and high.</p></li>
    /// </ul>
    /// <p>Default: <code>HIGH</code></p>
    pub sensitivity: ::std::option::Option<crate::types::SensitivityToAct>,
    /// <p>The regular expression to match against the web request URI, used to identify requests that can't handle a silent browser challenge. When the <code>ClientSideAction</code> setting <code>UsageOfAction</code> is enabled, the managed rule group uses this setting to determine which requests to label with <code>awswaf:managed:aws:anti-ddos:challengeable-request</code>. If <code>UsageOfAction</code> is disabled, this setting has no effect and the managed rule group doesn't add the label to any requests.</p>
    /// <p>The anti-DDoS managed rule group doesn't evaluate the rules <code>ChallengeDDoSRequests</code> or <code>ChallengeAllDuringEvent</code> for web requests whose URIs match this regex. This is true regardless of whether you override the rule action for either of the rules in your web ACL configuration.</p>
    /// <p>Amazon Web Services recommends using a regular expression.</p>
    /// <p>This setting is required if <code>UsageOfAction</code> is set to <code>ENABLED</code>. If required, you can provide between 1 and 5 regex objects in the array of settings.</p>
    /// <p>Amazon Web Services recommends starting with the following setting. Review and update it for your application's needs:</p>
    /// <p><code>\/api\/|\.(acc|avi|css|gif|jpe?g|js|mp\[34\]|ogg|otf|pdf|png|tiff?|ttf|webm|webp|woff2?)$</code></p>
    pub exempt_uri_regular_expressions: ::std::option::Option<::std::vec::Vec<crate::types::Regex>>,
}
impl ClientSideAction {
    /// <p>Determines whether to use the <code>AWSManagedRulesAntiDDoSRuleSet</code> rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code> in the rule group evaluation and the related label <code>awswaf:managed:aws:anti-ddos:challengeable-request</code>.</p>
    /// <ul>
    /// <li>
    /// <p>If usage is enabled:</p>
    /// <ul>
    /// <li>
    /// <p>The managed rule group adds the label <code>awswaf:managed:aws:anti-ddos:challengeable-request</code> to any web request whose URL does <i>NOT</i> match the regular expressions provided in the <code>ClientSideAction</code> setting <code>ExemptUriRegularExpressions</code>.</p></li>
    /// <li>
    /// <p>The two rules are evaluated against web requests for protected resources that are experiencing a DDoS attack. The two rules only apply their action to matching requests that have the label <code>awswaf:managed:aws:anti-ddos:challengeable-request</code>.</p></li>
    /// </ul></li>
    /// <li>
    /// <p>If usage is disabled:</p>
    /// <ul>
    /// <li>
    /// <p>The managed rule group doesn't add the label <code>awswaf:managed:aws:anti-ddos:challengeable-request</code> to any web requests.</p></li>
    /// <li>
    /// <p>The two rules are not evaluated.</p></li>
    /// <li>
    /// <p>None of the other <code>ClientSideAction</code> settings have any effect.</p></li>
    /// </ul></li>
    /// </ul><note>
    /// <p>This setting only enables or disables the use of the two anti-DDOS rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code> in the anti-DDoS managed rule group.</p>
    /// <p>This setting doesn't alter the action setting in the two rules. To override the actions used by the rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code>, enable this setting, and then override the rule actions in the usual way, in your managed rule group configuration.</p>
    /// </note>
    pub fn usage_of_action(&self) -> &crate::types::UsageOfAction {
        &self.usage_of_action
    }
    /// <p>The sensitivity that the rule group rule <code>ChallengeDDoSRequests</code> uses when matching against the DDoS suspicion labeling on a request. The managed rule group adds the labeling during DDoS events, before the <code>ChallengeDDoSRequests</code> rule runs.</p>
    /// <p>The higher the sensitivity, the more levels of labeling that the rule matches:</p>
    /// <ul>
    /// <li>
    /// <p>Low sensitivity is less sensitive, causing the rule to match only on the most likely participants in an attack, which are the requests with the high suspicion label <code>awswaf:managed:aws:anti-ddos:high-suspicion-ddos-request</code>.</p></li>
    /// <li>
    /// <p>Medium sensitivity causes the rule to match on the medium and high suspicion labels.</p></li>
    /// <li>
    /// <p>High sensitivity causes the rule to match on all of the suspicion labels: low, medium, and high.</p></li>
    /// </ul>
    /// <p>Default: <code>HIGH</code></p>
    pub fn sensitivity(&self) -> ::std::option::Option<&crate::types::SensitivityToAct> {
        self.sensitivity.as_ref()
    }
    /// <p>The regular expression to match against the web request URI, used to identify requests that can't handle a silent browser challenge. When the <code>ClientSideAction</code> setting <code>UsageOfAction</code> is enabled, the managed rule group uses this setting to determine which requests to label with <code>awswaf:managed:aws:anti-ddos:challengeable-request</code>. If <code>UsageOfAction</code> is disabled, this setting has no effect and the managed rule group doesn't add the label to any requests.</p>
    /// <p>The anti-DDoS managed rule group doesn't evaluate the rules <code>ChallengeDDoSRequests</code> or <code>ChallengeAllDuringEvent</code> for web requests whose URIs match this regex. This is true regardless of whether you override the rule action for either of the rules in your web ACL configuration.</p>
    /// <p>Amazon Web Services recommends using a regular expression.</p>
    /// <p>This setting is required if <code>UsageOfAction</code> is set to <code>ENABLED</code>. If required, you can provide between 1 and 5 regex objects in the array of settings.</p>
    /// <p>Amazon Web Services recommends starting with the following setting. Review and update it for your application's needs:</p>
    /// <p><code>\/api\/|\.(acc|avi|css|gif|jpe?g|js|mp\[34\]|ogg|otf|pdf|png|tiff?|ttf|webm|webp|woff2?)$</code></p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.exempt_uri_regular_expressions.is_none()`.
    pub fn exempt_uri_regular_expressions(&self) -> &[crate::types::Regex] {
        self.exempt_uri_regular_expressions.as_deref().unwrap_or_default()
    }
}
impl ClientSideAction {
    /// Creates a new builder-style object to manufacture [`ClientSideAction`](crate::types::ClientSideAction).
    pub fn builder() -> crate::types::builders::ClientSideActionBuilder {
        crate::types::builders::ClientSideActionBuilder::default()
    }
}

/// A builder for [`ClientSideAction`](crate::types::ClientSideAction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ClientSideActionBuilder {
    pub(crate) usage_of_action: ::std::option::Option<crate::types::UsageOfAction>,
    pub(crate) sensitivity: ::std::option::Option<crate::types::SensitivityToAct>,
    pub(crate) exempt_uri_regular_expressions: ::std::option::Option<::std::vec::Vec<crate::types::Regex>>,
}
impl ClientSideActionBuilder {
    /// <p>Determines whether to use the <code>AWSManagedRulesAntiDDoSRuleSet</code> rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code> in the rule group evaluation and the related label <code>awswaf:managed:aws:anti-ddos:challengeable-request</code>.</p>
    /// <ul>
    /// <li>
    /// <p>If usage is enabled:</p>
    /// <ul>
    /// <li>
    /// <p>The managed rule group adds the label <code>awswaf:managed:aws:anti-ddos:challengeable-request</code> to any web request whose URL does <i>NOT</i> match the regular expressions provided in the <code>ClientSideAction</code> setting <code>ExemptUriRegularExpressions</code>.</p></li>
    /// <li>
    /// <p>The two rules are evaluated against web requests for protected resources that are experiencing a DDoS attack. The two rules only apply their action to matching requests that have the label <code>awswaf:managed:aws:anti-ddos:challengeable-request</code>.</p></li>
    /// </ul></li>
    /// <li>
    /// <p>If usage is disabled:</p>
    /// <ul>
    /// <li>
    /// <p>The managed rule group doesn't add the label <code>awswaf:managed:aws:anti-ddos:challengeable-request</code> to any web requests.</p></li>
    /// <li>
    /// <p>The two rules are not evaluated.</p></li>
    /// <li>
    /// <p>None of the other <code>ClientSideAction</code> settings have any effect.</p></li>
    /// </ul></li>
    /// </ul><note>
    /// <p>This setting only enables or disables the use of the two anti-DDOS rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code> in the anti-DDoS managed rule group.</p>
    /// <p>This setting doesn't alter the action setting in the two rules. To override the actions used by the rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code>, enable this setting, and then override the rule actions in the usual way, in your managed rule group configuration.</p>
    /// </note>
    /// This field is required.
    pub fn usage_of_action(mut self, input: crate::types::UsageOfAction) -> Self {
        self.usage_of_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether to use the <code>AWSManagedRulesAntiDDoSRuleSet</code> rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code> in the rule group evaluation and the related label <code>awswaf:managed:aws:anti-ddos:challengeable-request</code>.</p>
    /// <ul>
    /// <li>
    /// <p>If usage is enabled:</p>
    /// <ul>
    /// <li>
    /// <p>The managed rule group adds the label <code>awswaf:managed:aws:anti-ddos:challengeable-request</code> to any web request whose URL does <i>NOT</i> match the regular expressions provided in the <code>ClientSideAction</code> setting <code>ExemptUriRegularExpressions</code>.</p></li>
    /// <li>
    /// <p>The two rules are evaluated against web requests for protected resources that are experiencing a DDoS attack. The two rules only apply their action to matching requests that have the label <code>awswaf:managed:aws:anti-ddos:challengeable-request</code>.</p></li>
    /// </ul></li>
    /// <li>
    /// <p>If usage is disabled:</p>
    /// <ul>
    /// <li>
    /// <p>The managed rule group doesn't add the label <code>awswaf:managed:aws:anti-ddos:challengeable-request</code> to any web requests.</p></li>
    /// <li>
    /// <p>The two rules are not evaluated.</p></li>
    /// <li>
    /// <p>None of the other <code>ClientSideAction</code> settings have any effect.</p></li>
    /// </ul></li>
    /// </ul><note>
    /// <p>This setting only enables or disables the use of the two anti-DDOS rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code> in the anti-DDoS managed rule group.</p>
    /// <p>This setting doesn't alter the action setting in the two rules. To override the actions used by the rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code>, enable this setting, and then override the rule actions in the usual way, in your managed rule group configuration.</p>
    /// </note>
    pub fn set_usage_of_action(mut self, input: ::std::option::Option<crate::types::UsageOfAction>) -> Self {
        self.usage_of_action = input;
        self
    }
    /// <p>Determines whether to use the <code>AWSManagedRulesAntiDDoSRuleSet</code> rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code> in the rule group evaluation and the related label <code>awswaf:managed:aws:anti-ddos:challengeable-request</code>.</p>
    /// <ul>
    /// <li>
    /// <p>If usage is enabled:</p>
    /// <ul>
    /// <li>
    /// <p>The managed rule group adds the label <code>awswaf:managed:aws:anti-ddos:challengeable-request</code> to any web request whose URL does <i>NOT</i> match the regular expressions provided in the <code>ClientSideAction</code> setting <code>ExemptUriRegularExpressions</code>.</p></li>
    /// <li>
    /// <p>The two rules are evaluated against web requests for protected resources that are experiencing a DDoS attack. The two rules only apply their action to matching requests that have the label <code>awswaf:managed:aws:anti-ddos:challengeable-request</code>.</p></li>
    /// </ul></li>
    /// <li>
    /// <p>If usage is disabled:</p>
    /// <ul>
    /// <li>
    /// <p>The managed rule group doesn't add the label <code>awswaf:managed:aws:anti-ddos:challengeable-request</code> to any web requests.</p></li>
    /// <li>
    /// <p>The two rules are not evaluated.</p></li>
    /// <li>
    /// <p>None of the other <code>ClientSideAction</code> settings have any effect.</p></li>
    /// </ul></li>
    /// </ul><note>
    /// <p>This setting only enables or disables the use of the two anti-DDOS rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code> in the anti-DDoS managed rule group.</p>
    /// <p>This setting doesn't alter the action setting in the two rules. To override the actions used by the rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code>, enable this setting, and then override the rule actions in the usual way, in your managed rule group configuration.</p>
    /// </note>
    pub fn get_usage_of_action(&self) -> &::std::option::Option<crate::types::UsageOfAction> {
        &self.usage_of_action
    }
    /// <p>The sensitivity that the rule group rule <code>ChallengeDDoSRequests</code> uses when matching against the DDoS suspicion labeling on a request. The managed rule group adds the labeling during DDoS events, before the <code>ChallengeDDoSRequests</code> rule runs.</p>
    /// <p>The higher the sensitivity, the more levels of labeling that the rule matches:</p>
    /// <ul>
    /// <li>
    /// <p>Low sensitivity is less sensitive, causing the rule to match only on the most likely participants in an attack, which are the requests with the high suspicion label <code>awswaf:managed:aws:anti-ddos:high-suspicion-ddos-request</code>.</p></li>
    /// <li>
    /// <p>Medium sensitivity causes the rule to match on the medium and high suspicion labels.</p></li>
    /// <li>
    /// <p>High sensitivity causes the rule to match on all of the suspicion labels: low, medium, and high.</p></li>
    /// </ul>
    /// <p>Default: <code>HIGH</code></p>
    pub fn sensitivity(mut self, input: crate::types::SensitivityToAct) -> Self {
        self.sensitivity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sensitivity that the rule group rule <code>ChallengeDDoSRequests</code> uses when matching against the DDoS suspicion labeling on a request. The managed rule group adds the labeling during DDoS events, before the <code>ChallengeDDoSRequests</code> rule runs.</p>
    /// <p>The higher the sensitivity, the more levels of labeling that the rule matches:</p>
    /// <ul>
    /// <li>
    /// <p>Low sensitivity is less sensitive, causing the rule to match only on the most likely participants in an attack, which are the requests with the high suspicion label <code>awswaf:managed:aws:anti-ddos:high-suspicion-ddos-request</code>.</p></li>
    /// <li>
    /// <p>Medium sensitivity causes the rule to match on the medium and high suspicion labels.</p></li>
    /// <li>
    /// <p>High sensitivity causes the rule to match on all of the suspicion labels: low, medium, and high.</p></li>
    /// </ul>
    /// <p>Default: <code>HIGH</code></p>
    pub fn set_sensitivity(mut self, input: ::std::option::Option<crate::types::SensitivityToAct>) -> Self {
        self.sensitivity = input;
        self
    }
    /// <p>The sensitivity that the rule group rule <code>ChallengeDDoSRequests</code> uses when matching against the DDoS suspicion labeling on a request. The managed rule group adds the labeling during DDoS events, before the <code>ChallengeDDoSRequests</code> rule runs.</p>
    /// <p>The higher the sensitivity, the more levels of labeling that the rule matches:</p>
    /// <ul>
    /// <li>
    /// <p>Low sensitivity is less sensitive, causing the rule to match only on the most likely participants in an attack, which are the requests with the high suspicion label <code>awswaf:managed:aws:anti-ddos:high-suspicion-ddos-request</code>.</p></li>
    /// <li>
    /// <p>Medium sensitivity causes the rule to match on the medium and high suspicion labels.</p></li>
    /// <li>
    /// <p>High sensitivity causes the rule to match on all of the suspicion labels: low, medium, and high.</p></li>
    /// </ul>
    /// <p>Default: <code>HIGH</code></p>
    pub fn get_sensitivity(&self) -> &::std::option::Option<crate::types::SensitivityToAct> {
        &self.sensitivity
    }
    /// Appends an item to `exempt_uri_regular_expressions`.
    ///
    /// To override the contents of this collection use [`set_exempt_uri_regular_expressions`](Self::set_exempt_uri_regular_expressions).
    ///
    /// <p>The regular expression to match against the web request URI, used to identify requests that can't handle a silent browser challenge. When the <code>ClientSideAction</code> setting <code>UsageOfAction</code> is enabled, the managed rule group uses this setting to determine which requests to label with <code>awswaf:managed:aws:anti-ddos:challengeable-request</code>. If <code>UsageOfAction</code> is disabled, this setting has no effect and the managed rule group doesn't add the label to any requests.</p>
    /// <p>The anti-DDoS managed rule group doesn't evaluate the rules <code>ChallengeDDoSRequests</code> or <code>ChallengeAllDuringEvent</code> for web requests whose URIs match this regex. This is true regardless of whether you override the rule action for either of the rules in your web ACL configuration.</p>
    /// <p>Amazon Web Services recommends using a regular expression.</p>
    /// <p>This setting is required if <code>UsageOfAction</code> is set to <code>ENABLED</code>. If required, you can provide between 1 and 5 regex objects in the array of settings.</p>
    /// <p>Amazon Web Services recommends starting with the following setting. Review and update it for your application's needs:</p>
    /// <p><code>\/api\/|\.(acc|avi|css|gif|jpe?g|js|mp\[34\]|ogg|otf|pdf|png|tiff?|ttf|webm|webp|woff2?)$</code></p>
    pub fn exempt_uri_regular_expressions(mut self, input: crate::types::Regex) -> Self {
        let mut v = self.exempt_uri_regular_expressions.unwrap_or_default();
        v.push(input);
        self.exempt_uri_regular_expressions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The regular expression to match against the web request URI, used to identify requests that can't handle a silent browser challenge. When the <code>ClientSideAction</code> setting <code>UsageOfAction</code> is enabled, the managed rule group uses this setting to determine which requests to label with <code>awswaf:managed:aws:anti-ddos:challengeable-request</code>. If <code>UsageOfAction</code> is disabled, this setting has no effect and the managed rule group doesn't add the label to any requests.</p>
    /// <p>The anti-DDoS managed rule group doesn't evaluate the rules <code>ChallengeDDoSRequests</code> or <code>ChallengeAllDuringEvent</code> for web requests whose URIs match this regex. This is true regardless of whether you override the rule action for either of the rules in your web ACL configuration.</p>
    /// <p>Amazon Web Services recommends using a regular expression.</p>
    /// <p>This setting is required if <code>UsageOfAction</code> is set to <code>ENABLED</code>. If required, you can provide between 1 and 5 regex objects in the array of settings.</p>
    /// <p>Amazon Web Services recommends starting with the following setting. Review and update it for your application's needs:</p>
    /// <p><code>\/api\/|\.(acc|avi|css|gif|jpe?g|js|mp\[34\]|ogg|otf|pdf|png|tiff?|ttf|webm|webp|woff2?)$</code></p>
    pub fn set_exempt_uri_regular_expressions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Regex>>) -> Self {
        self.exempt_uri_regular_expressions = input;
        self
    }
    /// <p>The regular expression to match against the web request URI, used to identify requests that can't handle a silent browser challenge. When the <code>ClientSideAction</code> setting <code>UsageOfAction</code> is enabled, the managed rule group uses this setting to determine which requests to label with <code>awswaf:managed:aws:anti-ddos:challengeable-request</code>. If <code>UsageOfAction</code> is disabled, this setting has no effect and the managed rule group doesn't add the label to any requests.</p>
    /// <p>The anti-DDoS managed rule group doesn't evaluate the rules <code>ChallengeDDoSRequests</code> or <code>ChallengeAllDuringEvent</code> for web requests whose URIs match this regex. This is true regardless of whether you override the rule action for either of the rules in your web ACL configuration.</p>
    /// <p>Amazon Web Services recommends using a regular expression.</p>
    /// <p>This setting is required if <code>UsageOfAction</code> is set to <code>ENABLED</code>. If required, you can provide between 1 and 5 regex objects in the array of settings.</p>
    /// <p>Amazon Web Services recommends starting with the following setting. Review and update it for your application's needs:</p>
    /// <p><code>\/api\/|\.(acc|avi|css|gif|jpe?g|js|mp\[34\]|ogg|otf|pdf|png|tiff?|ttf|webm|webp|woff2?)$</code></p>
    pub fn get_exempt_uri_regular_expressions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Regex>> {
        &self.exempt_uri_regular_expressions
    }
    /// Consumes the builder and constructs a [`ClientSideAction`](crate::types::ClientSideAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`usage_of_action`](crate::types::builders::ClientSideActionBuilder::usage_of_action)
    pub fn build(self) -> ::std::result::Result<crate::types::ClientSideAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ClientSideAction {
            usage_of_action: self.usage_of_action.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "usage_of_action",
                    "usage_of_action was not specified but it is required when building ClientSideAction",
                )
            })?,
            sensitivity: self.sensitivity,
            exempt_uri_regular_expressions: self.exempt_uri_regular_expressions,
        })
    }
}
