// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This is part of the configuration for the managed rules <code>AWSManagedRulesAntiDDoSRuleSet</code> in <code>ManagedRuleGroupConfig</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClientSideActionConfig {
    /// <p>Configuration for the use of the <code>AWSManagedRulesAntiDDoSRuleSet</code> rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code>.</p><note>
    /// <p>This setting isn't related to the configuration of the <code>Challenge</code> action itself. It only configures the use of the two anti-DDoS rules named here.</p>
    /// </note>
    /// <p>You can enable or disable the use of these rules, and you can configure how to use them when they are enabled.</p>
    pub challenge: ::std::option::Option<crate::types::ClientSideAction>,
}
impl ClientSideActionConfig {
    /// <p>Configuration for the use of the <code>AWSManagedRulesAntiDDoSRuleSet</code> rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code>.</p><note>
    /// <p>This setting isn't related to the configuration of the <code>Challenge</code> action itself. It only configures the use of the two anti-DDoS rules named here.</p>
    /// </note>
    /// <p>You can enable or disable the use of these rules, and you can configure how to use them when they are enabled.</p>
    pub fn challenge(&self) -> ::std::option::Option<&crate::types::ClientSideAction> {
        self.challenge.as_ref()
    }
}
impl ClientSideActionConfig {
    /// Creates a new builder-style object to manufacture [`ClientSideActionConfig`](crate::types::ClientSideActionConfig).
    pub fn builder() -> crate::types::builders::ClientSideActionConfigBuilder {
        crate::types::builders::ClientSideActionConfigBuilder::default()
    }
}

/// A builder for [`ClientSideActionConfig`](crate::types::ClientSideActionConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ClientSideActionConfigBuilder {
    pub(crate) challenge: ::std::option::Option<crate::types::ClientSideAction>,
}
impl ClientSideActionConfigBuilder {
    /// <p>Configuration for the use of the <code>AWSManagedRulesAntiDDoSRuleSet</code> rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code>.</p><note>
    /// <p>This setting isn't related to the configuration of the <code>Challenge</code> action itself. It only configures the use of the two anti-DDoS rules named here.</p>
    /// </note>
    /// <p>You can enable or disable the use of these rules, and you can configure how to use them when they are enabled.</p>
    /// This field is required.
    pub fn challenge(mut self, input: crate::types::ClientSideAction) -> Self {
        self.challenge = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration for the use of the <code>AWSManagedRulesAntiDDoSRuleSet</code> rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code>.</p><note>
    /// <p>This setting isn't related to the configuration of the <code>Challenge</code> action itself. It only configures the use of the two anti-DDoS rules named here.</p>
    /// </note>
    /// <p>You can enable or disable the use of these rules, and you can configure how to use them when they are enabled.</p>
    pub fn set_challenge(mut self, input: ::std::option::Option<crate::types::ClientSideAction>) -> Self {
        self.challenge = input;
        self
    }
    /// <p>Configuration for the use of the <code>AWSManagedRulesAntiDDoSRuleSet</code> rules <code>ChallengeAllDuringEvent</code> and <code>ChallengeDDoSRequests</code>.</p><note>
    /// <p>This setting isn't related to the configuration of the <code>Challenge</code> action itself. It only configures the use of the two anti-DDoS rules named here.</p>
    /// </note>
    /// <p>You can enable or disable the use of these rules, and you can configure how to use them when they are enabled.</p>
    pub fn get_challenge(&self) -> &::std::option::Option<crate::types::ClientSideAction> {
        &self.challenge
    }
    /// Consumes the builder and constructs a [`ClientSideActionConfig`](crate::types::ClientSideActionConfig).
    pub fn build(self) -> crate::types::ClientSideActionConfig {
        crate::types::ClientSideActionConfig { challenge: self.challenge }
    }
}
