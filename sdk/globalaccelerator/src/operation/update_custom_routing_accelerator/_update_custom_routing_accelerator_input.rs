// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateCustomRoutingAcceleratorInput {
    /// <p>The Amazon Resource Name (ARN) of the accelerator to update.</p>
    pub accelerator_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the accelerator. The name can have a maximum of 64 characters, must contain only alphanumeric characters, periods (.), or hyphens (-), and must not begin or end with a hyphen or period.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The IP address type that an accelerator supports. For a custom routing accelerator, the value must be IPV4.</p>
    pub ip_address_type: ::std::option::Option<crate::types::IpAddressType>,
    /// <p>The IP addresses for an accelerator.</p>
    pub ip_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Indicates whether an accelerator is enabled. The value is true or false. The default value is true.</p>
    /// <p>If the value is set to true, the accelerator cannot be deleted. If set to false, the accelerator can be deleted.</p>
    pub enabled: ::std::option::Option<bool>,
}
impl UpdateCustomRoutingAcceleratorInput {
    /// <p>The Amazon Resource Name (ARN) of the accelerator to update.</p>
    pub fn accelerator_arn(&self) -> ::std::option::Option<&str> {
        self.accelerator_arn.as_deref()
    }
    /// <p>The name of the accelerator. The name can have a maximum of 64 characters, must contain only alphanumeric characters, periods (.), or hyphens (-), and must not begin or end with a hyphen or period.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The IP address type that an accelerator supports. For a custom routing accelerator, the value must be IPV4.</p>
    pub fn ip_address_type(&self) -> ::std::option::Option<&crate::types::IpAddressType> {
        self.ip_address_type.as_ref()
    }
    /// <p>The IP addresses for an accelerator.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ip_addresses.is_none()`.
    pub fn ip_addresses(&self) -> &[::std::string::String] {
        self.ip_addresses.as_deref().unwrap_or_default()
    }
    /// <p>Indicates whether an accelerator is enabled. The value is true or false. The default value is true.</p>
    /// <p>If the value is set to true, the accelerator cannot be deleted. If set to false, the accelerator can be deleted.</p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
}
impl UpdateCustomRoutingAcceleratorInput {
    /// Creates a new builder-style object to manufacture [`UpdateCustomRoutingAcceleratorInput`](crate::operation::update_custom_routing_accelerator::UpdateCustomRoutingAcceleratorInput).
    pub fn builder() -> crate::operation::update_custom_routing_accelerator::builders::UpdateCustomRoutingAcceleratorInputBuilder {
        crate::operation::update_custom_routing_accelerator::builders::UpdateCustomRoutingAcceleratorInputBuilder::default()
    }
}

/// A builder for [`UpdateCustomRoutingAcceleratorInput`](crate::operation::update_custom_routing_accelerator::UpdateCustomRoutingAcceleratorInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateCustomRoutingAcceleratorInputBuilder {
    pub(crate) accelerator_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) ip_address_type: ::std::option::Option<crate::types::IpAddressType>,
    pub(crate) ip_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) enabled: ::std::option::Option<bool>,
}
impl UpdateCustomRoutingAcceleratorInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the accelerator to update.</p>
    /// This field is required.
    pub fn accelerator_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.accelerator_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the accelerator to update.</p>
    pub fn set_accelerator_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.accelerator_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the accelerator to update.</p>
    pub fn get_accelerator_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.accelerator_arn
    }
    /// <p>The name of the accelerator. The name can have a maximum of 64 characters, must contain only alphanumeric characters, periods (.), or hyphens (-), and must not begin or end with a hyphen or period.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the accelerator. The name can have a maximum of 64 characters, must contain only alphanumeric characters, periods (.), or hyphens (-), and must not begin or end with a hyphen or period.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the accelerator. The name can have a maximum of 64 characters, must contain only alphanumeric characters, periods (.), or hyphens (-), and must not begin or end with a hyphen or period.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The IP address type that an accelerator supports. For a custom routing accelerator, the value must be IPV4.</p>
    pub fn ip_address_type(mut self, input: crate::types::IpAddressType) -> Self {
        self.ip_address_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The IP address type that an accelerator supports. For a custom routing accelerator, the value must be IPV4.</p>
    pub fn set_ip_address_type(mut self, input: ::std::option::Option<crate::types::IpAddressType>) -> Self {
        self.ip_address_type = input;
        self
    }
    /// <p>The IP address type that an accelerator supports. For a custom routing accelerator, the value must be IPV4.</p>
    pub fn get_ip_address_type(&self) -> &::std::option::Option<crate::types::IpAddressType> {
        &self.ip_address_type
    }
    /// Appends an item to `ip_addresses`.
    ///
    /// To override the contents of this collection use [`set_ip_addresses`](Self::set_ip_addresses).
    ///
    /// <p>The IP addresses for an accelerator.</p>
    pub fn ip_addresses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.ip_addresses.unwrap_or_default();
        v.push(input.into());
        self.ip_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IP addresses for an accelerator.</p>
    pub fn set_ip_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.ip_addresses = input;
        self
    }
    /// <p>The IP addresses for an accelerator.</p>
    pub fn get_ip_addresses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.ip_addresses
    }
    /// <p>Indicates whether an accelerator is enabled. The value is true or false. The default value is true.</p>
    /// <p>If the value is set to true, the accelerator cannot be deleted. If set to false, the accelerator can be deleted.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether an accelerator is enabled. The value is true or false. The default value is true.</p>
    /// <p>If the value is set to true, the accelerator cannot be deleted. If set to false, the accelerator can be deleted.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Indicates whether an accelerator is enabled. The value is true or false. The default value is true.</p>
    /// <p>If the value is set to true, the accelerator cannot be deleted. If set to false, the accelerator can be deleted.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// Consumes the builder and constructs a [`UpdateCustomRoutingAcceleratorInput`](crate::operation::update_custom_routing_accelerator::UpdateCustomRoutingAcceleratorInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_custom_routing_accelerator::UpdateCustomRoutingAcceleratorInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_custom_routing_accelerator::UpdateCustomRoutingAcceleratorInput {
            accelerator_arn: self.accelerator_arn,
            name: self.name,
            ip_address_type: self.ip_address_type,
            ip_addresses: self.ip_addresses,
            enabled: self.enabled,
        })
    }
}
