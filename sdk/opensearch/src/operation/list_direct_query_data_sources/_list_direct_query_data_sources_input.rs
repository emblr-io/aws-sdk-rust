// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListDirectQueryDataSourcesInput {
    /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Send the request again using the returned token to retrieve the next page.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListDirectQueryDataSourcesInput {
    /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Send the request again using the returned token to retrieve the next page.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListDirectQueryDataSourcesInput {
    /// Creates a new builder-style object to manufacture [`ListDirectQueryDataSourcesInput`](crate::operation::list_direct_query_data_sources::ListDirectQueryDataSourcesInput).
    pub fn builder() -> crate::operation::list_direct_query_data_sources::builders::ListDirectQueryDataSourcesInputBuilder {
        crate::operation::list_direct_query_data_sources::builders::ListDirectQueryDataSourcesInputBuilder::default()
    }
}

/// A builder for [`ListDirectQueryDataSourcesInput`](crate::operation::list_direct_query_data_sources::ListDirectQueryDataSourcesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListDirectQueryDataSourcesInputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListDirectQueryDataSourcesInputBuilder {
    /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Send the request again using the returned token to retrieve the next page.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Send the request again using the returned token to retrieve the next page.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Send the request again using the returned token to retrieve the next page.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListDirectQueryDataSourcesInput`](crate::operation::list_direct_query_data_sources::ListDirectQueryDataSourcesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_direct_query_data_sources::ListDirectQueryDataSourcesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_direct_query_data_sources::ListDirectQueryDataSourcesInput { next_token: self.next_token })
    }
}
