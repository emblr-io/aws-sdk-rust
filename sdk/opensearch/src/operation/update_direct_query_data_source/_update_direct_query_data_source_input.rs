// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateDirectQueryDataSourceInput {
    /// <p>A unique, user-defined label to identify the data source within your OpenSearch Service environment.</p>
    pub data_source_name: ::std::option::Option<::std::string::String>,
    /// <p>The supported Amazon Web Services service that you want to use as the source for direct queries in OpenSearch Service.</p>
    pub data_source_type: ::std::option::Option<crate::types::DirectQueryDataSourceType>,
    /// <p>An optional text field for providing additional context and details about the data source.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A list of Amazon Resource Names (ARNs) for the OpenSearch collections that are associated with the direct query data source.</p>
    pub open_search_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateDirectQueryDataSourceInput {
    /// <p>A unique, user-defined label to identify the data source within your OpenSearch Service environment.</p>
    pub fn data_source_name(&self) -> ::std::option::Option<&str> {
        self.data_source_name.as_deref()
    }
    /// <p>The supported Amazon Web Services service that you want to use as the source for direct queries in OpenSearch Service.</p>
    pub fn data_source_type(&self) -> ::std::option::Option<&crate::types::DirectQueryDataSourceType> {
        self.data_source_type.as_ref()
    }
    /// <p>An optional text field for providing additional context and details about the data source.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A list of Amazon Resource Names (ARNs) for the OpenSearch collections that are associated with the direct query data source.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.open_search_arns.is_none()`.
    pub fn open_search_arns(&self) -> &[::std::string::String] {
        self.open_search_arns.as_deref().unwrap_or_default()
    }
}
impl UpdateDirectQueryDataSourceInput {
    /// Creates a new builder-style object to manufacture [`UpdateDirectQueryDataSourceInput`](crate::operation::update_direct_query_data_source::UpdateDirectQueryDataSourceInput).
    pub fn builder() -> crate::operation::update_direct_query_data_source::builders::UpdateDirectQueryDataSourceInputBuilder {
        crate::operation::update_direct_query_data_source::builders::UpdateDirectQueryDataSourceInputBuilder::default()
    }
}

/// A builder for [`UpdateDirectQueryDataSourceInput`](crate::operation::update_direct_query_data_source::UpdateDirectQueryDataSourceInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateDirectQueryDataSourceInputBuilder {
    pub(crate) data_source_name: ::std::option::Option<::std::string::String>,
    pub(crate) data_source_type: ::std::option::Option<crate::types::DirectQueryDataSourceType>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) open_search_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateDirectQueryDataSourceInputBuilder {
    /// <p>A unique, user-defined label to identify the data source within your OpenSearch Service environment.</p>
    /// This field is required.
    pub fn data_source_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_source_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, user-defined label to identify the data source within your OpenSearch Service environment.</p>
    pub fn set_data_source_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_source_name = input;
        self
    }
    /// <p>A unique, user-defined label to identify the data source within your OpenSearch Service environment.</p>
    pub fn get_data_source_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_source_name
    }
    /// <p>The supported Amazon Web Services service that you want to use as the source for direct queries in OpenSearch Service.</p>
    /// This field is required.
    pub fn data_source_type(mut self, input: crate::types::DirectQueryDataSourceType) -> Self {
        self.data_source_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The supported Amazon Web Services service that you want to use as the source for direct queries in OpenSearch Service.</p>
    pub fn set_data_source_type(mut self, input: ::std::option::Option<crate::types::DirectQueryDataSourceType>) -> Self {
        self.data_source_type = input;
        self
    }
    /// <p>The supported Amazon Web Services service that you want to use as the source for direct queries in OpenSearch Service.</p>
    pub fn get_data_source_type(&self) -> &::std::option::Option<crate::types::DirectQueryDataSourceType> {
        &self.data_source_type
    }
    /// <p>An optional text field for providing additional context and details about the data source.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional text field for providing additional context and details about the data source.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>An optional text field for providing additional context and details about the data source.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `open_search_arns`.
    ///
    /// To override the contents of this collection use [`set_open_search_arns`](Self::set_open_search_arns).
    ///
    /// <p>A list of Amazon Resource Names (ARNs) for the OpenSearch collections that are associated with the direct query data source.</p>
    pub fn open_search_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.open_search_arns.unwrap_or_default();
        v.push(input.into());
        self.open_search_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Amazon Resource Names (ARNs) for the OpenSearch collections that are associated with the direct query data source.</p>
    pub fn set_open_search_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.open_search_arns = input;
        self
    }
    /// <p>A list of Amazon Resource Names (ARNs) for the OpenSearch collections that are associated with the direct query data source.</p>
    pub fn get_open_search_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.open_search_arns
    }
    /// Consumes the builder and constructs a [`UpdateDirectQueryDataSourceInput`](crate::operation::update_direct_query_data_source::UpdateDirectQueryDataSourceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_direct_query_data_source::UpdateDirectQueryDataSourceInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_direct_query_data_source::UpdateDirectQueryDataSourceInput {
            data_source_name: self.data_source_name,
            data_source_type: self.data_source_type,
            description: self.description,
            open_search_arns: self.open_search_arns,
        })
    }
}
