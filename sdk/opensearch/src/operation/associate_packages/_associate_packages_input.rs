// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociatePackagesInput {
    /// <p>A list of packages and their prerequisites to be associated with a domain.</p>
    pub package_list: ::std::option::Option<::std::vec::Vec<crate::types::PackageDetailsForAssociation>>,
    /// <p>The name of an OpenSearch Service domain. Domain names are unique across the domains owned by an account within an Amazon Web Services Region.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
}
impl AssociatePackagesInput {
    /// <p>A list of packages and their prerequisites to be associated with a domain.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.package_list.is_none()`.
    pub fn package_list(&self) -> &[crate::types::PackageDetailsForAssociation] {
        self.package_list.as_deref().unwrap_or_default()
    }
    /// <p>The name of an OpenSearch Service domain. Domain names are unique across the domains owned by an account within an Amazon Web Services Region.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
}
impl AssociatePackagesInput {
    /// Creates a new builder-style object to manufacture [`AssociatePackagesInput`](crate::operation::associate_packages::AssociatePackagesInput).
    pub fn builder() -> crate::operation::associate_packages::builders::AssociatePackagesInputBuilder {
        crate::operation::associate_packages::builders::AssociatePackagesInputBuilder::default()
    }
}

/// A builder for [`AssociatePackagesInput`](crate::operation::associate_packages::AssociatePackagesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssociatePackagesInputBuilder {
    pub(crate) package_list: ::std::option::Option<::std::vec::Vec<crate::types::PackageDetailsForAssociation>>,
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
}
impl AssociatePackagesInputBuilder {
    /// Appends an item to `package_list`.
    ///
    /// To override the contents of this collection use [`set_package_list`](Self::set_package_list).
    ///
    /// <p>A list of packages and their prerequisites to be associated with a domain.</p>
    pub fn package_list(mut self, input: crate::types::PackageDetailsForAssociation) -> Self {
        let mut v = self.package_list.unwrap_or_default();
        v.push(input);
        self.package_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of packages and their prerequisites to be associated with a domain.</p>
    pub fn set_package_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PackageDetailsForAssociation>>) -> Self {
        self.package_list = input;
        self
    }
    /// <p>A list of packages and their prerequisites to be associated with a domain.</p>
    pub fn get_package_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PackageDetailsForAssociation>> {
        &self.package_list
    }
    /// <p>The name of an OpenSearch Service domain. Domain names are unique across the domains owned by an account within an Amazon Web Services Region.</p>
    /// This field is required.
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of an OpenSearch Service domain. Domain names are unique across the domains owned by an account within an Amazon Web Services Region.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The name of an OpenSearch Service domain. Domain names are unique across the domains owned by an account within an Amazon Web Services Region.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// Consumes the builder and constructs a [`AssociatePackagesInput`](crate::operation::associate_packages::AssociatePackagesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::associate_packages::AssociatePackagesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::associate_packages::AssociatePackagesInput {
            package_list: self.package_list,
            domain_name: self.domain_name,
        })
    }
}
