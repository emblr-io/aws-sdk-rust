// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration options for defining the setup of any node type within the cluster.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NodeConfig {
    /// <p>A boolean value indicating whether a specific node type is active or inactive.</p>
    pub enabled: ::std::option::Option<bool>,
    /// <p>The instance type of a particular node within the cluster.</p>
    pub r#type: ::std::option::Option<crate::types::OpenSearchPartitionInstanceType>,
    /// <p>The number of nodes of a specific type within the cluster.</p>
    pub count: ::std::option::Option<i32>,
}
impl NodeConfig {
    /// <p>A boolean value indicating whether a specific node type is active or inactive.</p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
    /// <p>The instance type of a particular node within the cluster.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::OpenSearchPartitionInstanceType> {
        self.r#type.as_ref()
    }
    /// <p>The number of nodes of a specific type within the cluster.</p>
    pub fn count(&self) -> ::std::option::Option<i32> {
        self.count
    }
}
impl NodeConfig {
    /// Creates a new builder-style object to manufacture [`NodeConfig`](crate::types::NodeConfig).
    pub fn builder() -> crate::types::builders::NodeConfigBuilder {
        crate::types::builders::NodeConfigBuilder::default()
    }
}

/// A builder for [`NodeConfig`](crate::types::NodeConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NodeConfigBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) r#type: ::std::option::Option<crate::types::OpenSearchPartitionInstanceType>,
    pub(crate) count: ::std::option::Option<i32>,
}
impl NodeConfigBuilder {
    /// <p>A boolean value indicating whether a specific node type is active or inactive.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>A boolean value indicating whether a specific node type is active or inactive.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>A boolean value indicating whether a specific node type is active or inactive.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>The instance type of a particular node within the cluster.</p>
    pub fn r#type(mut self, input: crate::types::OpenSearchPartitionInstanceType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The instance type of a particular node within the cluster.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::OpenSearchPartitionInstanceType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The instance type of a particular node within the cluster.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::OpenSearchPartitionInstanceType> {
        &self.r#type
    }
    /// <p>The number of nodes of a specific type within the cluster.</p>
    pub fn count(mut self, input: i32) -> Self {
        self.count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of nodes of a specific type within the cluster.</p>
    pub fn set_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.count = input;
        self
    }
    /// <p>The number of nodes of a specific type within the cluster.</p>
    pub fn get_count(&self) -> &::std::option::Option<i32> {
        &self.count
    }
    /// Consumes the builder and constructs a [`NodeConfig`](crate::types::NodeConfig).
    pub fn build(self) -> crate::types::NodeConfig {
        crate::types::NodeConfig {
            enabled: self.enabled,
            r#type: self.r#type,
            count: self.count,
        }
    }
}
