// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A property change that was cancelled for an Amazon OpenSearch Service domain.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CancelledChangeProperty {
    /// <p>The name of the property whose change was cancelled.</p>
    pub property_name: ::std::option::Option<::std::string::String>,
    /// <p>The pending value of the property that was cancelled. This would have been the eventual value of the property if the chance had not been cancelled.</p>
    pub cancelled_value: ::std::option::Option<::std::string::String>,
    /// <p>The current value of the property, after the change was cancelled.</p>
    pub active_value: ::std::option::Option<::std::string::String>,
}
impl CancelledChangeProperty {
    /// <p>The name of the property whose change was cancelled.</p>
    pub fn property_name(&self) -> ::std::option::Option<&str> {
        self.property_name.as_deref()
    }
    /// <p>The pending value of the property that was cancelled. This would have been the eventual value of the property if the chance had not been cancelled.</p>
    pub fn cancelled_value(&self) -> ::std::option::Option<&str> {
        self.cancelled_value.as_deref()
    }
    /// <p>The current value of the property, after the change was cancelled.</p>
    pub fn active_value(&self) -> ::std::option::Option<&str> {
        self.active_value.as_deref()
    }
}
impl CancelledChangeProperty {
    /// Creates a new builder-style object to manufacture [`CancelledChangeProperty`](crate::types::CancelledChangeProperty).
    pub fn builder() -> crate::types::builders::CancelledChangePropertyBuilder {
        crate::types::builders::CancelledChangePropertyBuilder::default()
    }
}

/// A builder for [`CancelledChangeProperty`](crate::types::CancelledChangeProperty).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CancelledChangePropertyBuilder {
    pub(crate) property_name: ::std::option::Option<::std::string::String>,
    pub(crate) cancelled_value: ::std::option::Option<::std::string::String>,
    pub(crate) active_value: ::std::option::Option<::std::string::String>,
}
impl CancelledChangePropertyBuilder {
    /// <p>The name of the property whose change was cancelled.</p>
    pub fn property_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.property_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the property whose change was cancelled.</p>
    pub fn set_property_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.property_name = input;
        self
    }
    /// <p>The name of the property whose change was cancelled.</p>
    pub fn get_property_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.property_name
    }
    /// <p>The pending value of the property that was cancelled. This would have been the eventual value of the property if the chance had not been cancelled.</p>
    pub fn cancelled_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cancelled_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pending value of the property that was cancelled. This would have been the eventual value of the property if the chance had not been cancelled.</p>
    pub fn set_cancelled_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cancelled_value = input;
        self
    }
    /// <p>The pending value of the property that was cancelled. This would have been the eventual value of the property if the chance had not been cancelled.</p>
    pub fn get_cancelled_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.cancelled_value
    }
    /// <p>The current value of the property, after the change was cancelled.</p>
    pub fn active_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.active_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current value of the property, after the change was cancelled.</p>
    pub fn set_active_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.active_value = input;
        self
    }
    /// <p>The current value of the property, after the change was cancelled.</p>
    pub fn get_active_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.active_value
    }
    /// Consumes the builder and constructs a [`CancelledChangeProperty`](crate::types::CancelledChangeProperty).
    pub fn build(self) -> crate::types::CancelledChangeProperty {
        crate::types::CancelledChangeProperty {
            property_name: self.property_name,
            cancelled_value: self.cancelled_value,
            active_value: self.active_value,
        }
    }
}
