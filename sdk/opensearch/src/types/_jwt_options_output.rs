// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the JWT options configured for the domain.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JwtOptionsOutput {
    /// <p>True if JWT use is enabled.</p>
    pub enabled: ::std::option::Option<bool>,
    /// <p>The key used for matching the JWT subject attribute.</p>
    pub subject_key: ::std::option::Option<::std::string::String>,
    /// <p>The key used for matching the JWT roles attribute.</p>
    pub roles_key: ::std::option::Option<::std::string::String>,
    /// <p>The key used to verify the signature of incoming JWT requests.</p>
    pub public_key: ::std::option::Option<::std::string::String>,
}
impl JwtOptionsOutput {
    /// <p>True if JWT use is enabled.</p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
    /// <p>The key used for matching the JWT subject attribute.</p>
    pub fn subject_key(&self) -> ::std::option::Option<&str> {
        self.subject_key.as_deref()
    }
    /// <p>The key used for matching the JWT roles attribute.</p>
    pub fn roles_key(&self) -> ::std::option::Option<&str> {
        self.roles_key.as_deref()
    }
    /// <p>The key used to verify the signature of incoming JWT requests.</p>
    pub fn public_key(&self) -> ::std::option::Option<&str> {
        self.public_key.as_deref()
    }
}
impl JwtOptionsOutput {
    /// Creates a new builder-style object to manufacture [`JwtOptionsOutput`](crate::types::JwtOptionsOutput).
    pub fn builder() -> crate::types::builders::JwtOptionsOutputBuilder {
        crate::types::builders::JwtOptionsOutputBuilder::default()
    }
}

/// A builder for [`JwtOptionsOutput`](crate::types::JwtOptionsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct JwtOptionsOutputBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) subject_key: ::std::option::Option<::std::string::String>,
    pub(crate) roles_key: ::std::option::Option<::std::string::String>,
    pub(crate) public_key: ::std::option::Option<::std::string::String>,
}
impl JwtOptionsOutputBuilder {
    /// <p>True if JWT use is enabled.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>True if JWT use is enabled.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>True if JWT use is enabled.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>The key used for matching the JWT subject attribute.</p>
    pub fn subject_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subject_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key used for matching the JWT subject attribute.</p>
    pub fn set_subject_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subject_key = input;
        self
    }
    /// <p>The key used for matching the JWT subject attribute.</p>
    pub fn get_subject_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.subject_key
    }
    /// <p>The key used for matching the JWT roles attribute.</p>
    pub fn roles_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.roles_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key used for matching the JWT roles attribute.</p>
    pub fn set_roles_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.roles_key = input;
        self
    }
    /// <p>The key used for matching the JWT roles attribute.</p>
    pub fn get_roles_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.roles_key
    }
    /// <p>The key used to verify the signature of incoming JWT requests.</p>
    pub fn public_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key used to verify the signature of incoming JWT requests.</p>
    pub fn set_public_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_key = input;
        self
    }
    /// <p>The key used to verify the signature of incoming JWT requests.</p>
    pub fn get_public_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_key
    }
    /// Consumes the builder and constructs a [`JwtOptionsOutput`](crate::types::JwtOptionsOutput).
    pub fn build(self) -> crate::types::JwtOptionsOutput {
        crate::types::JwtOptionsOutput {
            enabled: self.enabled,
            subject_key: self.subject_key,
            roles_key: self.roles_key,
            public_key: self.public_key,
        }
    }
}
