// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Data sources that are associated with an OpenSearch Application.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataSource {
    /// <p>The Amazon Resource Name (ARN) of the domain. See <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/index.html">Identifiers for IAM Entities </a> in <i>Using Amazon Web Services Identity and Access Management</i> for more information.</p>
    pub data_source_arn: ::std::option::Option<::std::string::String>,
    /// <p>Detailed description of a data source.</p>
    pub data_source_description: ::std::option::Option<::std::string::String>,
}
impl DataSource {
    /// <p>The Amazon Resource Name (ARN) of the domain. See <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/index.html">Identifiers for IAM Entities </a> in <i>Using Amazon Web Services Identity and Access Management</i> for more information.</p>
    pub fn data_source_arn(&self) -> ::std::option::Option<&str> {
        self.data_source_arn.as_deref()
    }
    /// <p>Detailed description of a data source.</p>
    pub fn data_source_description(&self) -> ::std::option::Option<&str> {
        self.data_source_description.as_deref()
    }
}
impl DataSource {
    /// Creates a new builder-style object to manufacture [`DataSource`](crate::types::DataSource).
    pub fn builder() -> crate::types::builders::DataSourceBuilder {
        crate::types::builders::DataSourceBuilder::default()
    }
}

/// A builder for [`DataSource`](crate::types::DataSource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataSourceBuilder {
    pub(crate) data_source_arn: ::std::option::Option<::std::string::String>,
    pub(crate) data_source_description: ::std::option::Option<::std::string::String>,
}
impl DataSourceBuilder {
    /// <p>The Amazon Resource Name (ARN) of the domain. See <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/index.html">Identifiers for IAM Entities </a> in <i>Using Amazon Web Services Identity and Access Management</i> for more information.</p>
    pub fn data_source_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_source_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the domain. See <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/index.html">Identifiers for IAM Entities </a> in <i>Using Amazon Web Services Identity and Access Management</i> for more information.</p>
    pub fn set_data_source_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_source_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the domain. See <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/index.html">Identifiers for IAM Entities </a> in <i>Using Amazon Web Services Identity and Access Management</i> for more information.</p>
    pub fn get_data_source_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_source_arn
    }
    /// <p>Detailed description of a data source.</p>
    pub fn data_source_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_source_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Detailed description of a data source.</p>
    pub fn set_data_source_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_source_description = input;
        self
    }
    /// <p>Detailed description of a data source.</p>
    pub fn get_data_source_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_source_description
    }
    /// Consumes the builder and constructs a [`DataSource`](crate::types::DataSource).
    pub fn build(self) -> crate::types::DataSource {
        crate::types::DataSource {
            data_source_arn: self.data_source_arn,
            data_source_description: self.data_source_description,
        }
    }
}
