// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Basic information about a package.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PackageDetails {
    /// <p>The unique identifier of the package.</p>
    pub package_id: ::std::option::Option<::std::string::String>,
    /// <p>The user-specified name of the package.</p>
    pub package_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of package.</p>
    pub package_type: ::std::option::Option<crate::types::PackageType>,
    /// <p>User-specified description of the package.</p>
    pub package_description: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the package. The available options are <code>AVAILABLE</code>, <code>COPYING</code>, <code>COPY_FAILED</code>, <code>VALIDATNG</code>, <code>VALIDATION_FAILED</code>, <code>DELETING</code>, and <code>DELETE_FAILED</code>.</p>
    pub package_status: ::std::option::Option<crate::types::PackageStatus>,
    /// <p>The timestamp when the package was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Date and time when the package was last updated.</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The package version.</p>
    pub available_package_version: ::std::option::Option<::std::string::String>,
    /// <p>Additional information if the package is in an error state. Null otherwise.</p>
    pub error_details: ::std::option::Option<crate::types::ErrorDetails>,
    /// <p>Version of OpenSearch or Elasticsearch, in the format Elasticsearch_X.Y or OpenSearch_X.Y. Defaults to the latest version of OpenSearch.</p>
    pub engine_version: ::std::option::Option<::std::string::String>,
    /// <p>If the package is a <code>ZIP-PLUGIN</code> package, additional information about plugin properties.</p>
    pub available_plugin_properties: ::std::option::Option<crate::types::PluginProperties>,
    /// <p>This represents the available configuration parameters for the package.</p>
    pub available_package_configuration: ::std::option::Option<crate::types::PackageConfiguration>,
    /// <p>A list of users who are allowed to view and associate the package. This field is only visible to the owner of a package.</p>
    pub allow_listed_user_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The owner of the package who is allowed to create and update a package and add users to the package scope.</p>
    pub package_owner: ::std::option::Option<::std::string::String>,
    /// <p>Package Vending Options for a package.</p>
    pub package_vending_options: ::std::option::Option<crate::types::PackageVendingOptions>,
    /// <p>Encryption options for a package.</p>
    pub package_encryption_options: ::std::option::Option<crate::types::PackageEncryptionOptions>,
}
impl PackageDetails {
    /// <p>The unique identifier of the package.</p>
    pub fn package_id(&self) -> ::std::option::Option<&str> {
        self.package_id.as_deref()
    }
    /// <p>The user-specified name of the package.</p>
    pub fn package_name(&self) -> ::std::option::Option<&str> {
        self.package_name.as_deref()
    }
    /// <p>The type of package.</p>
    pub fn package_type(&self) -> ::std::option::Option<&crate::types::PackageType> {
        self.package_type.as_ref()
    }
    /// <p>User-specified description of the package.</p>
    pub fn package_description(&self) -> ::std::option::Option<&str> {
        self.package_description.as_deref()
    }
    /// <p>The current status of the package. The available options are <code>AVAILABLE</code>, <code>COPYING</code>, <code>COPY_FAILED</code>, <code>VALIDATNG</code>, <code>VALIDATION_FAILED</code>, <code>DELETING</code>, and <code>DELETE_FAILED</code>.</p>
    pub fn package_status(&self) -> ::std::option::Option<&crate::types::PackageStatus> {
        self.package_status.as_ref()
    }
    /// <p>The timestamp when the package was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>Date and time when the package was last updated.</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p>The package version.</p>
    pub fn available_package_version(&self) -> ::std::option::Option<&str> {
        self.available_package_version.as_deref()
    }
    /// <p>Additional information if the package is in an error state. Null otherwise.</p>
    pub fn error_details(&self) -> ::std::option::Option<&crate::types::ErrorDetails> {
        self.error_details.as_ref()
    }
    /// <p>Version of OpenSearch or Elasticsearch, in the format Elasticsearch_X.Y or OpenSearch_X.Y. Defaults to the latest version of OpenSearch.</p>
    pub fn engine_version(&self) -> ::std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>If the package is a <code>ZIP-PLUGIN</code> package, additional information about plugin properties.</p>
    pub fn available_plugin_properties(&self) -> ::std::option::Option<&crate::types::PluginProperties> {
        self.available_plugin_properties.as_ref()
    }
    /// <p>This represents the available configuration parameters for the package.</p>
    pub fn available_package_configuration(&self) -> ::std::option::Option<&crate::types::PackageConfiguration> {
        self.available_package_configuration.as_ref()
    }
    /// <p>A list of users who are allowed to view and associate the package. This field is only visible to the owner of a package.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allow_listed_user_list.is_none()`.
    pub fn allow_listed_user_list(&self) -> &[::std::string::String] {
        self.allow_listed_user_list.as_deref().unwrap_or_default()
    }
    /// <p>The owner of the package who is allowed to create and update a package and add users to the package scope.</p>
    pub fn package_owner(&self) -> ::std::option::Option<&str> {
        self.package_owner.as_deref()
    }
    /// <p>Package Vending Options for a package.</p>
    pub fn package_vending_options(&self) -> ::std::option::Option<&crate::types::PackageVendingOptions> {
        self.package_vending_options.as_ref()
    }
    /// <p>Encryption options for a package.</p>
    pub fn package_encryption_options(&self) -> ::std::option::Option<&crate::types::PackageEncryptionOptions> {
        self.package_encryption_options.as_ref()
    }
}
impl PackageDetails {
    /// Creates a new builder-style object to manufacture [`PackageDetails`](crate::types::PackageDetails).
    pub fn builder() -> crate::types::builders::PackageDetailsBuilder {
        crate::types::builders::PackageDetailsBuilder::default()
    }
}

/// A builder for [`PackageDetails`](crate::types::PackageDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PackageDetailsBuilder {
    pub(crate) package_id: ::std::option::Option<::std::string::String>,
    pub(crate) package_name: ::std::option::Option<::std::string::String>,
    pub(crate) package_type: ::std::option::Option<crate::types::PackageType>,
    pub(crate) package_description: ::std::option::Option<::std::string::String>,
    pub(crate) package_status: ::std::option::Option<crate::types::PackageStatus>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) available_package_version: ::std::option::Option<::std::string::String>,
    pub(crate) error_details: ::std::option::Option<crate::types::ErrorDetails>,
    pub(crate) engine_version: ::std::option::Option<::std::string::String>,
    pub(crate) available_plugin_properties: ::std::option::Option<crate::types::PluginProperties>,
    pub(crate) available_package_configuration: ::std::option::Option<crate::types::PackageConfiguration>,
    pub(crate) allow_listed_user_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) package_owner: ::std::option::Option<::std::string::String>,
    pub(crate) package_vending_options: ::std::option::Option<crate::types::PackageVendingOptions>,
    pub(crate) package_encryption_options: ::std::option::Option<crate::types::PackageEncryptionOptions>,
}
impl PackageDetailsBuilder {
    /// <p>The unique identifier of the package.</p>
    pub fn package_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the package.</p>
    pub fn set_package_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_id = input;
        self
    }
    /// <p>The unique identifier of the package.</p>
    pub fn get_package_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_id
    }
    /// <p>The user-specified name of the package.</p>
    pub fn package_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user-specified name of the package.</p>
    pub fn set_package_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_name = input;
        self
    }
    /// <p>The user-specified name of the package.</p>
    pub fn get_package_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_name
    }
    /// <p>The type of package.</p>
    pub fn package_type(mut self, input: crate::types::PackageType) -> Self {
        self.package_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of package.</p>
    pub fn set_package_type(mut self, input: ::std::option::Option<crate::types::PackageType>) -> Self {
        self.package_type = input;
        self
    }
    /// <p>The type of package.</p>
    pub fn get_package_type(&self) -> &::std::option::Option<crate::types::PackageType> {
        &self.package_type
    }
    /// <p>User-specified description of the package.</p>
    pub fn package_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>User-specified description of the package.</p>
    pub fn set_package_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_description = input;
        self
    }
    /// <p>User-specified description of the package.</p>
    pub fn get_package_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_description
    }
    /// <p>The current status of the package. The available options are <code>AVAILABLE</code>, <code>COPYING</code>, <code>COPY_FAILED</code>, <code>VALIDATNG</code>, <code>VALIDATION_FAILED</code>, <code>DELETING</code>, and <code>DELETE_FAILED</code>.</p>
    pub fn package_status(mut self, input: crate::types::PackageStatus) -> Self {
        self.package_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the package. The available options are <code>AVAILABLE</code>, <code>COPYING</code>, <code>COPY_FAILED</code>, <code>VALIDATNG</code>, <code>VALIDATION_FAILED</code>, <code>DELETING</code>, and <code>DELETE_FAILED</code>.</p>
    pub fn set_package_status(mut self, input: ::std::option::Option<crate::types::PackageStatus>) -> Self {
        self.package_status = input;
        self
    }
    /// <p>The current status of the package. The available options are <code>AVAILABLE</code>, <code>COPYING</code>, <code>COPY_FAILED</code>, <code>VALIDATNG</code>, <code>VALIDATION_FAILED</code>, <code>DELETING</code>, and <code>DELETE_FAILED</code>.</p>
    pub fn get_package_status(&self) -> &::std::option::Option<crate::types::PackageStatus> {
        &self.package_status
    }
    /// <p>The timestamp when the package was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the package was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the package was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>Date and time when the package was last updated.</p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>Date and time when the package was last updated.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>Date and time when the package was last updated.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// <p>The package version.</p>
    pub fn available_package_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.available_package_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The package version.</p>
    pub fn set_available_package_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.available_package_version = input;
        self
    }
    /// <p>The package version.</p>
    pub fn get_available_package_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.available_package_version
    }
    /// <p>Additional information if the package is in an error state. Null otherwise.</p>
    pub fn error_details(mut self, input: crate::types::ErrorDetails) -> Self {
        self.error_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Additional information if the package is in an error state. Null otherwise.</p>
    pub fn set_error_details(mut self, input: ::std::option::Option<crate::types::ErrorDetails>) -> Self {
        self.error_details = input;
        self
    }
    /// <p>Additional information if the package is in an error state. Null otherwise.</p>
    pub fn get_error_details(&self) -> &::std::option::Option<crate::types::ErrorDetails> {
        &self.error_details
    }
    /// <p>Version of OpenSearch or Elasticsearch, in the format Elasticsearch_X.Y or OpenSearch_X.Y. Defaults to the latest version of OpenSearch.</p>
    pub fn engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Version of OpenSearch or Elasticsearch, in the format Elasticsearch_X.Y or OpenSearch_X.Y. Defaults to the latest version of OpenSearch.</p>
    pub fn set_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>Version of OpenSearch or Elasticsearch, in the format Elasticsearch_X.Y or OpenSearch_X.Y. Defaults to the latest version of OpenSearch.</p>
    pub fn get_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_version
    }
    /// <p>If the package is a <code>ZIP-PLUGIN</code> package, additional information about plugin properties.</p>
    pub fn available_plugin_properties(mut self, input: crate::types::PluginProperties) -> Self {
        self.available_plugin_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the package is a <code>ZIP-PLUGIN</code> package, additional information about plugin properties.</p>
    pub fn set_available_plugin_properties(mut self, input: ::std::option::Option<crate::types::PluginProperties>) -> Self {
        self.available_plugin_properties = input;
        self
    }
    /// <p>If the package is a <code>ZIP-PLUGIN</code> package, additional information about plugin properties.</p>
    pub fn get_available_plugin_properties(&self) -> &::std::option::Option<crate::types::PluginProperties> {
        &self.available_plugin_properties
    }
    /// <p>This represents the available configuration parameters for the package.</p>
    pub fn available_package_configuration(mut self, input: crate::types::PackageConfiguration) -> Self {
        self.available_package_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>This represents the available configuration parameters for the package.</p>
    pub fn set_available_package_configuration(mut self, input: ::std::option::Option<crate::types::PackageConfiguration>) -> Self {
        self.available_package_configuration = input;
        self
    }
    /// <p>This represents the available configuration parameters for the package.</p>
    pub fn get_available_package_configuration(&self) -> &::std::option::Option<crate::types::PackageConfiguration> {
        &self.available_package_configuration
    }
    /// Appends an item to `allow_listed_user_list`.
    ///
    /// To override the contents of this collection use [`set_allow_listed_user_list`](Self::set_allow_listed_user_list).
    ///
    /// <p>A list of users who are allowed to view and associate the package. This field is only visible to the owner of a package.</p>
    pub fn allow_listed_user_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allow_listed_user_list.unwrap_or_default();
        v.push(input.into());
        self.allow_listed_user_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of users who are allowed to view and associate the package. This field is only visible to the owner of a package.</p>
    pub fn set_allow_listed_user_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allow_listed_user_list = input;
        self
    }
    /// <p>A list of users who are allowed to view and associate the package. This field is only visible to the owner of a package.</p>
    pub fn get_allow_listed_user_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allow_listed_user_list
    }
    /// <p>The owner of the package who is allowed to create and update a package and add users to the package scope.</p>
    pub fn package_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The owner of the package who is allowed to create and update a package and add users to the package scope.</p>
    pub fn set_package_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_owner = input;
        self
    }
    /// <p>The owner of the package who is allowed to create and update a package and add users to the package scope.</p>
    pub fn get_package_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_owner
    }
    /// <p>Package Vending Options for a package.</p>
    pub fn package_vending_options(mut self, input: crate::types::PackageVendingOptions) -> Self {
        self.package_vending_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Package Vending Options for a package.</p>
    pub fn set_package_vending_options(mut self, input: ::std::option::Option<crate::types::PackageVendingOptions>) -> Self {
        self.package_vending_options = input;
        self
    }
    /// <p>Package Vending Options for a package.</p>
    pub fn get_package_vending_options(&self) -> &::std::option::Option<crate::types::PackageVendingOptions> {
        &self.package_vending_options
    }
    /// <p>Encryption options for a package.</p>
    pub fn package_encryption_options(mut self, input: crate::types::PackageEncryptionOptions) -> Self {
        self.package_encryption_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Encryption options for a package.</p>
    pub fn set_package_encryption_options(mut self, input: ::std::option::Option<crate::types::PackageEncryptionOptions>) -> Self {
        self.package_encryption_options = input;
        self
    }
    /// <p>Encryption options for a package.</p>
    pub fn get_package_encryption_options(&self) -> &::std::option::Option<crate::types::PackageEncryptionOptions> {
        &self.package_encryption_options
    }
    /// Consumes the builder and constructs a [`PackageDetails`](crate::types::PackageDetails).
    pub fn build(self) -> crate::types::PackageDetails {
        crate::types::PackageDetails {
            package_id: self.package_id,
            package_name: self.package_name,
            package_type: self.package_type,
            package_description: self.package_description,
            package_status: self.package_status,
            created_at: self.created_at,
            last_updated_at: self.last_updated_at,
            available_package_version: self.available_package_version,
            error_details: self.error_details,
            engine_version: self.engine_version,
            available_plugin_properties: self.available_plugin_properties,
            available_package_configuration: self.available_package_configuration,
            allow_listed_user_list: self.allow_listed_user_list,
            package_owner: self.package_owner,
            package_vending_options: self.package_vending_options,
            package_encryption_options: self.package_encryption_options,
        }
    }
}
