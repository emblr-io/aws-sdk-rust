// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration settings for an OpenSearch application. For more information, see see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/application.html">Using the OpenSearch user interface in Amazon OpenSearch Service</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AppConfig {
    /// <p>The configuration item to set, such as the admin role for the OpenSearch application.</p>
    pub key: ::std::option::Option<crate::types::AppConfigType>,
    /// <p>The value assigned to the configuration key, such as an IAM user ARN.</p>
    pub value: ::std::option::Option<::std::string::String>,
}
impl AppConfig {
    /// <p>The configuration item to set, such as the admin role for the OpenSearch application.</p>
    pub fn key(&self) -> ::std::option::Option<&crate::types::AppConfigType> {
        self.key.as_ref()
    }
    /// <p>The value assigned to the configuration key, such as an IAM user ARN.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl AppConfig {
    /// Creates a new builder-style object to manufacture [`AppConfig`](crate::types::AppConfig).
    pub fn builder() -> crate::types::builders::AppConfigBuilder {
        crate::types::builders::AppConfigBuilder::default()
    }
}

/// A builder for [`AppConfig`](crate::types::AppConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AppConfigBuilder {
    pub(crate) key: ::std::option::Option<crate::types::AppConfigType>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl AppConfigBuilder {
    /// <p>The configuration item to set, such as the admin role for the OpenSearch application.</p>
    pub fn key(mut self, input: crate::types::AppConfigType) -> Self {
        self.key = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration item to set, such as the admin role for the OpenSearch application.</p>
    pub fn set_key(mut self, input: ::std::option::Option<crate::types::AppConfigType>) -> Self {
        self.key = input;
        self
    }
    /// <p>The configuration item to set, such as the admin role for the OpenSearch application.</p>
    pub fn get_key(&self) -> &::std::option::Option<crate::types::AppConfigType> {
        &self.key
    }
    /// <p>The value assigned to the configuration key, such as an IAM user ARN.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value assigned to the configuration key, such as an IAM user ARN.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value assigned to the configuration key, such as an IAM user ARN.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`AppConfig`](crate::types::AppConfig).
    pub fn build(self) -> crate::types::AppConfig {
        crate::types::AppConfig {
            key: self.key,
            value: self.value,
        }
    }
}
