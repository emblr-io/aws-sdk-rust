// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration parameters to enable access to the key store required by the package.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KeyStoreAccessOption {
    /// <p>Role ARN to access the KeyStore Key</p>
    pub key_access_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>This indicates whether Key Store access is enabled</p>
    pub key_store_access_enabled: bool,
}
impl KeyStoreAccessOption {
    /// <p>Role ARN to access the KeyStore Key</p>
    pub fn key_access_role_arn(&self) -> ::std::option::Option<&str> {
        self.key_access_role_arn.as_deref()
    }
    /// <p>This indicates whether Key Store access is enabled</p>
    pub fn key_store_access_enabled(&self) -> bool {
        self.key_store_access_enabled
    }
}
impl KeyStoreAccessOption {
    /// Creates a new builder-style object to manufacture [`KeyStoreAccessOption`](crate::types::KeyStoreAccessOption).
    pub fn builder() -> crate::types::builders::KeyStoreAccessOptionBuilder {
        crate::types::builders::KeyStoreAccessOptionBuilder::default()
    }
}

/// A builder for [`KeyStoreAccessOption`](crate::types::KeyStoreAccessOption).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct KeyStoreAccessOptionBuilder {
    pub(crate) key_access_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) key_store_access_enabled: ::std::option::Option<bool>,
}
impl KeyStoreAccessOptionBuilder {
    /// <p>Role ARN to access the KeyStore Key</p>
    pub fn key_access_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_access_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Role ARN to access the KeyStore Key</p>
    pub fn set_key_access_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_access_role_arn = input;
        self
    }
    /// <p>Role ARN to access the KeyStore Key</p>
    pub fn get_key_access_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_access_role_arn
    }
    /// <p>This indicates whether Key Store access is enabled</p>
    /// This field is required.
    pub fn key_store_access_enabled(mut self, input: bool) -> Self {
        self.key_store_access_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>This indicates whether Key Store access is enabled</p>
    pub fn set_key_store_access_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.key_store_access_enabled = input;
        self
    }
    /// <p>This indicates whether Key Store access is enabled</p>
    pub fn get_key_store_access_enabled(&self) -> &::std::option::Option<bool> {
        &self.key_store_access_enabled
    }
    /// Consumes the builder and constructs a [`KeyStoreAccessOption`](crate::types::KeyStoreAccessOption).
    /// This method will fail if any of the following fields are not set:
    /// - [`key_store_access_enabled`](crate::types::builders::KeyStoreAccessOptionBuilder::key_store_access_enabled)
    pub fn build(self) -> ::std::result::Result<crate::types::KeyStoreAccessOption, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::KeyStoreAccessOption {
            key_access_role_arn: self.key_access_role_arn,
            key_store_access_enabled: self.key_store_access_enabled.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key_store_access_enabled",
                    "key_store_access_enabled was not specified but it is required when building KeyStoreAccessOption",
                )
            })?,
        })
    }
}
