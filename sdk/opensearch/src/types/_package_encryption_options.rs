// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Encryption options for a package.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PackageEncryptionOptions {
    /// <p>KMS key ID for encrypting the package.</p>
    pub kms_key_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Whether encryption is enabled for the package.</p>
    pub encryption_enabled: bool,
}
impl PackageEncryptionOptions {
    /// <p>KMS key ID for encrypting the package.</p>
    pub fn kms_key_identifier(&self) -> ::std::option::Option<&str> {
        self.kms_key_identifier.as_deref()
    }
    /// <p>Whether encryption is enabled for the package.</p>
    pub fn encryption_enabled(&self) -> bool {
        self.encryption_enabled
    }
}
impl PackageEncryptionOptions {
    /// Creates a new builder-style object to manufacture [`PackageEncryptionOptions`](crate::types::PackageEncryptionOptions).
    pub fn builder() -> crate::types::builders::PackageEncryptionOptionsBuilder {
        crate::types::builders::PackageEncryptionOptionsBuilder::default()
    }
}

/// A builder for [`PackageEncryptionOptions`](crate::types::PackageEncryptionOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PackageEncryptionOptionsBuilder {
    pub(crate) kms_key_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_enabled: ::std::option::Option<bool>,
}
impl PackageEncryptionOptionsBuilder {
    /// <p>KMS key ID for encrypting the package.</p>
    pub fn kms_key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>KMS key ID for encrypting the package.</p>
    pub fn set_kms_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_identifier = input;
        self
    }
    /// <p>KMS key ID for encrypting the package.</p>
    pub fn get_kms_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_identifier
    }
    /// <p>Whether encryption is enabled for the package.</p>
    /// This field is required.
    pub fn encryption_enabled(mut self, input: bool) -> Self {
        self.encryption_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether encryption is enabled for the package.</p>
    pub fn set_encryption_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.encryption_enabled = input;
        self
    }
    /// <p>Whether encryption is enabled for the package.</p>
    pub fn get_encryption_enabled(&self) -> &::std::option::Option<bool> {
        &self.encryption_enabled
    }
    /// Consumes the builder and constructs a [`PackageEncryptionOptions`](crate::types::PackageEncryptionOptions).
    /// This method will fail if any of the following fields are not set:
    /// - [`encryption_enabled`](crate::types::builders::PackageEncryptionOptionsBuilder::encryption_enabled)
    pub fn build(self) -> ::std::result::Result<crate::types::PackageEncryptionOptions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PackageEncryptionOptions {
            kms_key_identifier: self.kms_key_identifier,
            encryption_enabled: self.encryption_enabled.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "encryption_enabled",
                    "encryption_enabled was not specified but it is required when building PackageEncryptionOptions",
                )
            })?,
        })
    }
}
