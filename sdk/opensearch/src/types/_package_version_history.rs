// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a package version.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PackageVersionHistory {
    /// <p>The package version.</p>
    pub package_version: ::std::option::Option<::std::string::String>,
    /// <p>A message associated with the package version when it was uploaded.</p>
    pub commit_message: ::std::option::Option<::std::string::String>,
    /// <p>The date and time when the package was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Additional information about plugin properties if the package is a <code>ZIP-PLUGIN</code> package.</p>
    pub plugin_properties: ::std::option::Option<crate::types::PluginProperties>,
    /// <p>The configuration details for a specific version of a package.</p>
    pub package_configuration: ::std::option::Option<crate::types::PackageConfiguration>,
}
impl PackageVersionHistory {
    /// <p>The package version.</p>
    pub fn package_version(&self) -> ::std::option::Option<&str> {
        self.package_version.as_deref()
    }
    /// <p>A message associated with the package version when it was uploaded.</p>
    pub fn commit_message(&self) -> ::std::option::Option<&str> {
        self.commit_message.as_deref()
    }
    /// <p>The date and time when the package was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>Additional information about plugin properties if the package is a <code>ZIP-PLUGIN</code> package.</p>
    pub fn plugin_properties(&self) -> ::std::option::Option<&crate::types::PluginProperties> {
        self.plugin_properties.as_ref()
    }
    /// <p>The configuration details for a specific version of a package.</p>
    pub fn package_configuration(&self) -> ::std::option::Option<&crate::types::PackageConfiguration> {
        self.package_configuration.as_ref()
    }
}
impl PackageVersionHistory {
    /// Creates a new builder-style object to manufacture [`PackageVersionHistory`](crate::types::PackageVersionHistory).
    pub fn builder() -> crate::types::builders::PackageVersionHistoryBuilder {
        crate::types::builders::PackageVersionHistoryBuilder::default()
    }
}

/// A builder for [`PackageVersionHistory`](crate::types::PackageVersionHistory).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PackageVersionHistoryBuilder {
    pub(crate) package_version: ::std::option::Option<::std::string::String>,
    pub(crate) commit_message: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) plugin_properties: ::std::option::Option<crate::types::PluginProperties>,
    pub(crate) package_configuration: ::std::option::Option<crate::types::PackageConfiguration>,
}
impl PackageVersionHistoryBuilder {
    /// <p>The package version.</p>
    pub fn package_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The package version.</p>
    pub fn set_package_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_version = input;
        self
    }
    /// <p>The package version.</p>
    pub fn get_package_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_version
    }
    /// <p>A message associated with the package version when it was uploaded.</p>
    pub fn commit_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.commit_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message associated with the package version when it was uploaded.</p>
    pub fn set_commit_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.commit_message = input;
        self
    }
    /// <p>A message associated with the package version when it was uploaded.</p>
    pub fn get_commit_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.commit_message
    }
    /// <p>The date and time when the package was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the package was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time when the package was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>Additional information about plugin properties if the package is a <code>ZIP-PLUGIN</code> package.</p>
    pub fn plugin_properties(mut self, input: crate::types::PluginProperties) -> Self {
        self.plugin_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>Additional information about plugin properties if the package is a <code>ZIP-PLUGIN</code> package.</p>
    pub fn set_plugin_properties(mut self, input: ::std::option::Option<crate::types::PluginProperties>) -> Self {
        self.plugin_properties = input;
        self
    }
    /// <p>Additional information about plugin properties if the package is a <code>ZIP-PLUGIN</code> package.</p>
    pub fn get_plugin_properties(&self) -> &::std::option::Option<crate::types::PluginProperties> {
        &self.plugin_properties
    }
    /// <p>The configuration details for a specific version of a package.</p>
    pub fn package_configuration(mut self, input: crate::types::PackageConfiguration) -> Self {
        self.package_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration details for a specific version of a package.</p>
    pub fn set_package_configuration(mut self, input: ::std::option::Option<crate::types::PackageConfiguration>) -> Self {
        self.package_configuration = input;
        self
    }
    /// <p>The configuration details for a specific version of a package.</p>
    pub fn get_package_configuration(&self) -> &::std::option::Option<crate::types::PackageConfiguration> {
        &self.package_configuration
    }
    /// Consumes the builder and constructs a [`PackageVersionHistory`](crate::types::PackageVersionHistory).
    pub fn build(self) -> crate::types::PackageVersionHistory {
        crate::types::PackageVersionHistory {
            package_version: self.package_version,
            commit_message: self.commit_message,
            created_at: self.created_at,
            plugin_properties: self.plugin_properties,
            package_configuration: self.package_configuration,
        }
    }
}
