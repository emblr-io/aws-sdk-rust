// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration settings for defining the node type within a cluster.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NodeOption {
    /// <p>Defines the type of node, such as coordinating nodes.</p>
    pub node_type: ::std::option::Option<crate::types::NodeOptionsNodeType>,
    /// <p>Configuration options for defining the setup of any node type.</p>
    pub node_config: ::std::option::Option<crate::types::NodeConfig>,
}
impl NodeOption {
    /// <p>Defines the type of node, such as coordinating nodes.</p>
    pub fn node_type(&self) -> ::std::option::Option<&crate::types::NodeOptionsNodeType> {
        self.node_type.as_ref()
    }
    /// <p>Configuration options for defining the setup of any node type.</p>
    pub fn node_config(&self) -> ::std::option::Option<&crate::types::NodeConfig> {
        self.node_config.as_ref()
    }
}
impl NodeOption {
    /// Creates a new builder-style object to manufacture [`NodeOption`](crate::types::NodeOption).
    pub fn builder() -> crate::types::builders::NodeOptionBuilder {
        crate::types::builders::NodeOptionBuilder::default()
    }
}

/// A builder for [`NodeOption`](crate::types::NodeOption).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NodeOptionBuilder {
    pub(crate) node_type: ::std::option::Option<crate::types::NodeOptionsNodeType>,
    pub(crate) node_config: ::std::option::Option<crate::types::NodeConfig>,
}
impl NodeOptionBuilder {
    /// <p>Defines the type of node, such as coordinating nodes.</p>
    pub fn node_type(mut self, input: crate::types::NodeOptionsNodeType) -> Self {
        self.node_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the type of node, such as coordinating nodes.</p>
    pub fn set_node_type(mut self, input: ::std::option::Option<crate::types::NodeOptionsNodeType>) -> Self {
        self.node_type = input;
        self
    }
    /// <p>Defines the type of node, such as coordinating nodes.</p>
    pub fn get_node_type(&self) -> &::std::option::Option<crate::types::NodeOptionsNodeType> {
        &self.node_type
    }
    /// <p>Configuration options for defining the setup of any node type.</p>
    pub fn node_config(mut self, input: crate::types::NodeConfig) -> Self {
        self.node_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration options for defining the setup of any node type.</p>
    pub fn set_node_config(mut self, input: ::std::option::Option<crate::types::NodeConfig>) -> Self {
        self.node_config = input;
        self
    }
    /// <p>Configuration options for defining the setup of any node type.</p>
    pub fn get_node_config(&self) -> &::std::option::Option<crate::types::NodeConfig> {
        &self.node_config
    }
    /// Consumes the builder and constructs a [`NodeOption`](crate::types::NodeOption).
    pub fn build(self) -> crate::types::NodeOption {
        crate::types::NodeOption {
            node_type: self.node_type,
            node_config: self.node_config,
        }
    }
}
