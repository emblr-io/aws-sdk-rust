// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for parameters representing the state of the natural language query generation feature on the specified domain.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NaturalLanguageQueryGenerationOptionsOutput {
    /// <p>The desired state of the natural language query generation feature. Valid values are ENABLED and DISABLED.</p>
    pub desired_state: ::std::option::Option<crate::types::NaturalLanguageQueryGenerationDesiredState>,
    /// <p>The current state of the natural language query generation feature, indicating completion, in progress, or failure.</p>
    pub current_state: ::std::option::Option<crate::types::NaturalLanguageQueryGenerationCurrentState>,
}
impl NaturalLanguageQueryGenerationOptionsOutput {
    /// <p>The desired state of the natural language query generation feature. Valid values are ENABLED and DISABLED.</p>
    pub fn desired_state(&self) -> ::std::option::Option<&crate::types::NaturalLanguageQueryGenerationDesiredState> {
        self.desired_state.as_ref()
    }
    /// <p>The current state of the natural language query generation feature, indicating completion, in progress, or failure.</p>
    pub fn current_state(&self) -> ::std::option::Option<&crate::types::NaturalLanguageQueryGenerationCurrentState> {
        self.current_state.as_ref()
    }
}
impl NaturalLanguageQueryGenerationOptionsOutput {
    /// Creates a new builder-style object to manufacture [`NaturalLanguageQueryGenerationOptionsOutput`](crate::types::NaturalLanguageQueryGenerationOptionsOutput).
    pub fn builder() -> crate::types::builders::NaturalLanguageQueryGenerationOptionsOutputBuilder {
        crate::types::builders::NaturalLanguageQueryGenerationOptionsOutputBuilder::default()
    }
}

/// A builder for [`NaturalLanguageQueryGenerationOptionsOutput`](crate::types::NaturalLanguageQueryGenerationOptionsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NaturalLanguageQueryGenerationOptionsOutputBuilder {
    pub(crate) desired_state: ::std::option::Option<crate::types::NaturalLanguageQueryGenerationDesiredState>,
    pub(crate) current_state: ::std::option::Option<crate::types::NaturalLanguageQueryGenerationCurrentState>,
}
impl NaturalLanguageQueryGenerationOptionsOutputBuilder {
    /// <p>The desired state of the natural language query generation feature. Valid values are ENABLED and DISABLED.</p>
    pub fn desired_state(mut self, input: crate::types::NaturalLanguageQueryGenerationDesiredState) -> Self {
        self.desired_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The desired state of the natural language query generation feature. Valid values are ENABLED and DISABLED.</p>
    pub fn set_desired_state(mut self, input: ::std::option::Option<crate::types::NaturalLanguageQueryGenerationDesiredState>) -> Self {
        self.desired_state = input;
        self
    }
    /// <p>The desired state of the natural language query generation feature. Valid values are ENABLED and DISABLED.</p>
    pub fn get_desired_state(&self) -> &::std::option::Option<crate::types::NaturalLanguageQueryGenerationDesiredState> {
        &self.desired_state
    }
    /// <p>The current state of the natural language query generation feature, indicating completion, in progress, or failure.</p>
    pub fn current_state(mut self, input: crate::types::NaturalLanguageQueryGenerationCurrentState) -> Self {
        self.current_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the natural language query generation feature, indicating completion, in progress, or failure.</p>
    pub fn set_current_state(mut self, input: ::std::option::Option<crate::types::NaturalLanguageQueryGenerationCurrentState>) -> Self {
        self.current_state = input;
        self
    }
    /// <p>The current state of the natural language query generation feature, indicating completion, in progress, or failure.</p>
    pub fn get_current_state(&self) -> &::std::option::Option<crate::types::NaturalLanguageQueryGenerationCurrentState> {
        &self.current_state
    }
    /// Consumes the builder and constructs a [`NaturalLanguageQueryGenerationOptionsOutput`](crate::types::NaturalLanguageQueryGenerationOptionsOutput).
    pub fn build(self) -> crate::types::NaturalLanguageQueryGenerationOptionsOutput {
        crate::types::NaturalLanguageQueryGenerationOptionsOutput {
            desired_state: self.desired_state,
            current_state: self.current_state,
        }
    }
}
