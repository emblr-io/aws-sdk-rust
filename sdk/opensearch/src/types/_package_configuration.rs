// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration parameters for a package.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PackageConfiguration {
    /// <p>The license requirements for the package.</p>
    pub license_requirement: crate::types::RequirementLevel,
    /// <p>The relative file path for the license associated with the package.</p>
    pub license_filepath: ::std::option::Option<::std::string::String>,
    /// <p>The configuration requirements for the package.</p>
    pub configuration_requirement: crate::types::RequirementLevel,
    /// <p>This indicates whether a B/G deployment is required for updating the configuration that the plugin is prerequisite for.</p>
    pub requires_restart_for_configuration_update: ::std::option::Option<bool>,
}
impl PackageConfiguration {
    /// <p>The license requirements for the package.</p>
    pub fn license_requirement(&self) -> &crate::types::RequirementLevel {
        &self.license_requirement
    }
    /// <p>The relative file path for the license associated with the package.</p>
    pub fn license_filepath(&self) -> ::std::option::Option<&str> {
        self.license_filepath.as_deref()
    }
    /// <p>The configuration requirements for the package.</p>
    pub fn configuration_requirement(&self) -> &crate::types::RequirementLevel {
        &self.configuration_requirement
    }
    /// <p>This indicates whether a B/G deployment is required for updating the configuration that the plugin is prerequisite for.</p>
    pub fn requires_restart_for_configuration_update(&self) -> ::std::option::Option<bool> {
        self.requires_restart_for_configuration_update
    }
}
impl PackageConfiguration {
    /// Creates a new builder-style object to manufacture [`PackageConfiguration`](crate::types::PackageConfiguration).
    pub fn builder() -> crate::types::builders::PackageConfigurationBuilder {
        crate::types::builders::PackageConfigurationBuilder::default()
    }
}

/// A builder for [`PackageConfiguration`](crate::types::PackageConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PackageConfigurationBuilder {
    pub(crate) license_requirement: ::std::option::Option<crate::types::RequirementLevel>,
    pub(crate) license_filepath: ::std::option::Option<::std::string::String>,
    pub(crate) configuration_requirement: ::std::option::Option<crate::types::RequirementLevel>,
    pub(crate) requires_restart_for_configuration_update: ::std::option::Option<bool>,
}
impl PackageConfigurationBuilder {
    /// <p>The license requirements for the package.</p>
    /// This field is required.
    pub fn license_requirement(mut self, input: crate::types::RequirementLevel) -> Self {
        self.license_requirement = ::std::option::Option::Some(input);
        self
    }
    /// <p>The license requirements for the package.</p>
    pub fn set_license_requirement(mut self, input: ::std::option::Option<crate::types::RequirementLevel>) -> Self {
        self.license_requirement = input;
        self
    }
    /// <p>The license requirements for the package.</p>
    pub fn get_license_requirement(&self) -> &::std::option::Option<crate::types::RequirementLevel> {
        &self.license_requirement
    }
    /// <p>The relative file path for the license associated with the package.</p>
    pub fn license_filepath(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.license_filepath = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The relative file path for the license associated with the package.</p>
    pub fn set_license_filepath(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.license_filepath = input;
        self
    }
    /// <p>The relative file path for the license associated with the package.</p>
    pub fn get_license_filepath(&self) -> &::std::option::Option<::std::string::String> {
        &self.license_filepath
    }
    /// <p>The configuration requirements for the package.</p>
    /// This field is required.
    pub fn configuration_requirement(mut self, input: crate::types::RequirementLevel) -> Self {
        self.configuration_requirement = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration requirements for the package.</p>
    pub fn set_configuration_requirement(mut self, input: ::std::option::Option<crate::types::RequirementLevel>) -> Self {
        self.configuration_requirement = input;
        self
    }
    /// <p>The configuration requirements for the package.</p>
    pub fn get_configuration_requirement(&self) -> &::std::option::Option<crate::types::RequirementLevel> {
        &self.configuration_requirement
    }
    /// <p>This indicates whether a B/G deployment is required for updating the configuration that the plugin is prerequisite for.</p>
    pub fn requires_restart_for_configuration_update(mut self, input: bool) -> Self {
        self.requires_restart_for_configuration_update = ::std::option::Option::Some(input);
        self
    }
    /// <p>This indicates whether a B/G deployment is required for updating the configuration that the plugin is prerequisite for.</p>
    pub fn set_requires_restart_for_configuration_update(mut self, input: ::std::option::Option<bool>) -> Self {
        self.requires_restart_for_configuration_update = input;
        self
    }
    /// <p>This indicates whether a B/G deployment is required for updating the configuration that the plugin is prerequisite for.</p>
    pub fn get_requires_restart_for_configuration_update(&self) -> &::std::option::Option<bool> {
        &self.requires_restart_for_configuration_update
    }
    /// Consumes the builder and constructs a [`PackageConfiguration`](crate::types::PackageConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`license_requirement`](crate::types::builders::PackageConfigurationBuilder::license_requirement)
    /// - [`configuration_requirement`](crate::types::builders::PackageConfigurationBuilder::configuration_requirement)
    pub fn build(self) -> ::std::result::Result<crate::types::PackageConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PackageConfiguration {
            license_requirement: self.license_requirement.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "license_requirement",
                    "license_requirement was not specified but it is required when building PackageConfiguration",
                )
            })?,
            license_filepath: self.license_filepath,
            configuration_requirement: self.configuration_requirement.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "configuration_requirement",
                    "configuration_requirement was not specified but it is required when building PackageConfiguration",
                )
            })?,
            requires_restart_for_configuration_update: self.requires_restart_for_configuration_update,
        })
    }
}
