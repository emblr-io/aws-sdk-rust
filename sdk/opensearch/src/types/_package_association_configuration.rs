// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for associating a package with a domain.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PackageAssociationConfiguration {
    /// <p>The configuration parameters to enable accessing the key store required by the package.</p>
    pub key_store_access_option: ::std::option::Option<crate::types::KeyStoreAccessOption>,
}
impl PackageAssociationConfiguration {
    /// <p>The configuration parameters to enable accessing the key store required by the package.</p>
    pub fn key_store_access_option(&self) -> ::std::option::Option<&crate::types::KeyStoreAccessOption> {
        self.key_store_access_option.as_ref()
    }
}
impl PackageAssociationConfiguration {
    /// Creates a new builder-style object to manufacture [`PackageAssociationConfiguration`](crate::types::PackageAssociationConfiguration).
    pub fn builder() -> crate::types::builders::PackageAssociationConfigurationBuilder {
        crate::types::builders::PackageAssociationConfigurationBuilder::default()
    }
}

/// A builder for [`PackageAssociationConfiguration`](crate::types::PackageAssociationConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PackageAssociationConfigurationBuilder {
    pub(crate) key_store_access_option: ::std::option::Option<crate::types::KeyStoreAccessOption>,
}
impl PackageAssociationConfigurationBuilder {
    /// <p>The configuration parameters to enable accessing the key store required by the package.</p>
    pub fn key_store_access_option(mut self, input: crate::types::KeyStoreAccessOption) -> Self {
        self.key_store_access_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration parameters to enable accessing the key store required by the package.</p>
    pub fn set_key_store_access_option(mut self, input: ::std::option::Option<crate::types::KeyStoreAccessOption>) -> Self {
        self.key_store_access_option = input;
        self
    }
    /// <p>The configuration parameters to enable accessing the key store required by the package.</p>
    pub fn get_key_store_access_option(&self) -> &::std::option::Option<crate::types::KeyStoreAccessOption> {
        &self.key_store_access_option
    }
    /// Consumes the builder and constructs a [`PackageAssociationConfiguration`](crate::types::PackageAssociationConfiguration).
    pub fn build(self) -> crate::types::PackageAssociationConfiguration {
        crate::types::PackageAssociationConfiguration {
            key_store_access_option: self.key_store_access_option,
        }
    }
}
