// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for information about a configuration change happening on a domain.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ChangeProgressDetails {
    /// <p>The ID of the configuration change.</p>
    pub change_id: ::std::option::Option<::std::string::String>,
    /// <p>A message corresponding to the status of the configuration change.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the configuration change.</p>
    pub config_change_status: ::std::option::Option<crate::types::ConfigChangeStatus>,
    /// <p>The IAM principal who initiated the configuration change.</p>
    pub initiated_by: ::std::option::Option<crate::types::InitiatedBy>,
    /// <p>The time that the configuration change was initiated, in Universal Coordinated Time (UTC).</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The last time that the configuration change was updated.</p>
    pub last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ChangeProgressDetails {
    /// <p>The ID of the configuration change.</p>
    pub fn change_id(&self) -> ::std::option::Option<&str> {
        self.change_id.as_deref()
    }
    /// <p>A message corresponding to the status of the configuration change.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The current status of the configuration change.</p>
    pub fn config_change_status(&self) -> ::std::option::Option<&crate::types::ConfigChangeStatus> {
        self.config_change_status.as_ref()
    }
    /// <p>The IAM principal who initiated the configuration change.</p>
    pub fn initiated_by(&self) -> ::std::option::Option<&crate::types::InitiatedBy> {
        self.initiated_by.as_ref()
    }
    /// <p>The time that the configuration change was initiated, in Universal Coordinated Time (UTC).</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The last time that the configuration change was updated.</p>
    pub fn last_updated_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
}
impl ChangeProgressDetails {
    /// Creates a new builder-style object to manufacture [`ChangeProgressDetails`](crate::types::ChangeProgressDetails).
    pub fn builder() -> crate::types::builders::ChangeProgressDetailsBuilder {
        crate::types::builders::ChangeProgressDetailsBuilder::default()
    }
}

/// A builder for [`ChangeProgressDetails`](crate::types::ChangeProgressDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ChangeProgressDetailsBuilder {
    pub(crate) change_id: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) config_change_status: ::std::option::Option<crate::types::ConfigChangeStatus>,
    pub(crate) initiated_by: ::std::option::Option<crate::types::InitiatedBy>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ChangeProgressDetailsBuilder {
    /// <p>The ID of the configuration change.</p>
    pub fn change_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.change_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the configuration change.</p>
    pub fn set_change_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.change_id = input;
        self
    }
    /// <p>The ID of the configuration change.</p>
    pub fn get_change_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.change_id
    }
    /// <p>A message corresponding to the status of the configuration change.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message corresponding to the status of the configuration change.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>A message corresponding to the status of the configuration change.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>The current status of the configuration change.</p>
    pub fn config_change_status(mut self, input: crate::types::ConfigChangeStatus) -> Self {
        self.config_change_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the configuration change.</p>
    pub fn set_config_change_status(mut self, input: ::std::option::Option<crate::types::ConfigChangeStatus>) -> Self {
        self.config_change_status = input;
        self
    }
    /// <p>The current status of the configuration change.</p>
    pub fn get_config_change_status(&self) -> &::std::option::Option<crate::types::ConfigChangeStatus> {
        &self.config_change_status
    }
    /// <p>The IAM principal who initiated the configuration change.</p>
    pub fn initiated_by(mut self, input: crate::types::InitiatedBy) -> Self {
        self.initiated_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>The IAM principal who initiated the configuration change.</p>
    pub fn set_initiated_by(mut self, input: ::std::option::Option<crate::types::InitiatedBy>) -> Self {
        self.initiated_by = input;
        self
    }
    /// <p>The IAM principal who initiated the configuration change.</p>
    pub fn get_initiated_by(&self) -> &::std::option::Option<crate::types::InitiatedBy> {
        &self.initiated_by
    }
    /// <p>The time that the configuration change was initiated, in Universal Coordinated Time (UTC).</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the configuration change was initiated, in Universal Coordinated Time (UTC).</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time that the configuration change was initiated, in Universal Coordinated Time (UTC).</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The last time that the configuration change was updated.</p>
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time that the configuration change was updated.</p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The last time that the configuration change was updated.</p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// Consumes the builder and constructs a [`ChangeProgressDetails`](crate::types::ChangeProgressDetails).
    pub fn build(self) -> crate::types::ChangeProgressDetails {
        crate::types::ChangeProgressDetails {
            change_id: self.change_id,
            message: self.message,
            config_change_status: self.config_change_status,
            initiated_by: self.initiated_by,
            start_time: self.start_time,
            last_updated_time: self.last_updated_time,
        }
    }
}
