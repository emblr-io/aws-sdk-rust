// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration options for determining whether a package can be made available for use by other users.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PackageVendingOptions {
    /// <p>Indicates whether the package vending feature is enabled, allowing the package to be used by other users.</p>
    pub vending_enabled: bool,
}
impl PackageVendingOptions {
    /// <p>Indicates whether the package vending feature is enabled, allowing the package to be used by other users.</p>
    pub fn vending_enabled(&self) -> bool {
        self.vending_enabled
    }
}
impl PackageVendingOptions {
    /// Creates a new builder-style object to manufacture [`PackageVendingOptions`](crate::types::PackageVendingOptions).
    pub fn builder() -> crate::types::builders::PackageVendingOptionsBuilder {
        crate::types::builders::PackageVendingOptionsBuilder::default()
    }
}

/// A builder for [`PackageVendingOptions`](crate::types::PackageVendingOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PackageVendingOptionsBuilder {
    pub(crate) vending_enabled: ::std::option::Option<bool>,
}
impl PackageVendingOptionsBuilder {
    /// <p>Indicates whether the package vending feature is enabled, allowing the package to be used by other users.</p>
    /// This field is required.
    pub fn vending_enabled(mut self, input: bool) -> Self {
        self.vending_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the package vending feature is enabled, allowing the package to be used by other users.</p>
    pub fn set_vending_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.vending_enabled = input;
        self
    }
    /// <p>Indicates whether the package vending feature is enabled, allowing the package to be used by other users.</p>
    pub fn get_vending_enabled(&self) -> &::std::option::Option<bool> {
        &self.vending_enabled
    }
    /// Consumes the builder and constructs a [`PackageVendingOptions`](crate::types::PackageVendingOptions).
    /// This method will fail if any of the following fields are not set:
    /// - [`vending_enabled`](crate::types::builders::PackageVendingOptionsBuilder::vending_enabled)
    pub fn build(self) -> ::std::result::Result<crate::types::PackageVendingOptions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PackageVendingOptions {
            vending_enabled: self.vending_enabled.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "vending_enabled",
                    "vending_enabled was not specified but it is required when building PackageVendingOptions",
                )
            })?,
        })
    }
}
