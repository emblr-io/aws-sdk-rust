// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListGroupingStatusesOutput {
    /// <p>The application group identifier, expressed as an Amazon resource name (ARN) or the application group name.</p>
    pub group: ::std::option::Option<::std::string::String>,
    /// <p>Returns details about the grouping or ungrouping status of the resources in the specified application group.</p>
    pub grouping_statuses: ::std::option::Option<::std::vec::Vec<crate::types::GroupingStatusesItem>>,
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListGroupingStatusesOutput {
    /// <p>The application group identifier, expressed as an Amazon resource name (ARN) or the application group name.</p>
    pub fn group(&self) -> ::std::option::Option<&str> {
        self.group.as_deref()
    }
    /// <p>Returns details about the grouping or ungrouping status of the resources in the specified application group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.grouping_statuses.is_none()`.
    pub fn grouping_statuses(&self) -> &[crate::types::GroupingStatusesItem] {
        self.grouping_statuses.as_deref().unwrap_or_default()
    }
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListGroupingStatusesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListGroupingStatusesOutput {
    /// Creates a new builder-style object to manufacture [`ListGroupingStatusesOutput`](crate::operation::list_grouping_statuses::ListGroupingStatusesOutput).
    pub fn builder() -> crate::operation::list_grouping_statuses::builders::ListGroupingStatusesOutputBuilder {
        crate::operation::list_grouping_statuses::builders::ListGroupingStatusesOutputBuilder::default()
    }
}

/// A builder for [`ListGroupingStatusesOutput`](crate::operation::list_grouping_statuses::ListGroupingStatusesOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListGroupingStatusesOutputBuilder {
    pub(crate) group: ::std::option::Option<::std::string::String>,
    pub(crate) grouping_statuses: ::std::option::Option<::std::vec::Vec<crate::types::GroupingStatusesItem>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListGroupingStatusesOutputBuilder {
    /// <p>The application group identifier, expressed as an Amazon resource name (ARN) or the application group name.</p>
    pub fn group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The application group identifier, expressed as an Amazon resource name (ARN) or the application group name.</p>
    pub fn set_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group = input;
        self
    }
    /// <p>The application group identifier, expressed as an Amazon resource name (ARN) or the application group name.</p>
    pub fn get_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.group
    }
    /// Appends an item to `grouping_statuses`.
    ///
    /// To override the contents of this collection use [`set_grouping_statuses`](Self::set_grouping_statuses).
    ///
    /// <p>Returns details about the grouping or ungrouping status of the resources in the specified application group.</p>
    pub fn grouping_statuses(mut self, input: crate::types::GroupingStatusesItem) -> Self {
        let mut v = self.grouping_statuses.unwrap_or_default();
        v.push(input);
        self.grouping_statuses = ::std::option::Option::Some(v);
        self
    }
    /// <p>Returns details about the grouping or ungrouping status of the resources in the specified application group.</p>
    pub fn set_grouping_statuses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GroupingStatusesItem>>) -> Self {
        self.grouping_statuses = input;
        self
    }
    /// <p>Returns details about the grouping or ungrouping status of the resources in the specified application group.</p>
    pub fn get_grouping_statuses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GroupingStatusesItem>> {
        &self.grouping_statuses
    }
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListGroupingStatusesOutput`](crate::operation::list_grouping_statuses::ListGroupingStatusesOutput).
    pub fn build(self) -> crate::operation::list_grouping_statuses::ListGroupingStatusesOutput {
        crate::operation::list_grouping_statuses::ListGroupingStatusesOutput {
            group: self.group,
            grouping_statuses: self.grouping_statuses,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
