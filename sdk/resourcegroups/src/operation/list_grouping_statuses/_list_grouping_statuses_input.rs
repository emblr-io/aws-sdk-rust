// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListGroupingStatusesInput {
    /// <p>The application group identifier, expressed as an Amazon resource name (ARN) or the application group name.</p>
    pub group: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of resources and their statuses returned in the response.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The filter name and value pair that is used to return more specific results from a list of resources.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::ListGroupingStatusesFilter>>,
    /// <p>The parameter for receiving additional results if you receive a <code>NextToken</code> response in a previous request. A <code>NextToken</code> response indicates that more output is available. Set this parameter to the value provided by a previous call's <code>NextToken</code> response to indicate where the output should continue from.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListGroupingStatusesInput {
    /// <p>The application group identifier, expressed as an Amazon resource name (ARN) or the application group name.</p>
    pub fn group(&self) -> ::std::option::Option<&str> {
        self.group.as_deref()
    }
    /// <p>The maximum number of resources and their statuses returned in the response.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The filter name and value pair that is used to return more specific results from a list of resources.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::ListGroupingStatusesFilter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>The parameter for receiving additional results if you receive a <code>NextToken</code> response in a previous request. A <code>NextToken</code> response indicates that more output is available. Set this parameter to the value provided by a previous call's <code>NextToken</code> response to indicate where the output should continue from.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListGroupingStatusesInput {
    /// Creates a new builder-style object to manufacture [`ListGroupingStatusesInput`](crate::operation::list_grouping_statuses::ListGroupingStatusesInput).
    pub fn builder() -> crate::operation::list_grouping_statuses::builders::ListGroupingStatusesInputBuilder {
        crate::operation::list_grouping_statuses::builders::ListGroupingStatusesInputBuilder::default()
    }
}

/// A builder for [`ListGroupingStatusesInput`](crate::operation::list_grouping_statuses::ListGroupingStatusesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListGroupingStatusesInputBuilder {
    pub(crate) group: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::ListGroupingStatusesFilter>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListGroupingStatusesInputBuilder {
    /// <p>The application group identifier, expressed as an Amazon resource name (ARN) or the application group name.</p>
    /// This field is required.
    pub fn group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The application group identifier, expressed as an Amazon resource name (ARN) or the application group name.</p>
    pub fn set_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group = input;
        self
    }
    /// <p>The application group identifier, expressed as an Amazon resource name (ARN) or the application group name.</p>
    pub fn get_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.group
    }
    /// <p>The maximum number of resources and their statuses returned in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of resources and their statuses returned in the response.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of resources and their statuses returned in the response.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filter name and value pair that is used to return more specific results from a list of resources.</p>
    pub fn filters(mut self, input: crate::types::ListGroupingStatusesFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The filter name and value pair that is used to return more specific results from a list of resources.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ListGroupingStatusesFilter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>The filter name and value pair that is used to return more specific results from a list of resources.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ListGroupingStatusesFilter>> {
        &self.filters
    }
    /// <p>The parameter for receiving additional results if you receive a <code>NextToken</code> response in a previous request. A <code>NextToken</code> response indicates that more output is available. Set this parameter to the value provided by a previous call's <code>NextToken</code> response to indicate where the output should continue from.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The parameter for receiving additional results if you receive a <code>NextToken</code> response in a previous request. A <code>NextToken</code> response indicates that more output is available. Set this parameter to the value provided by a previous call's <code>NextToken</code> response to indicate where the output should continue from.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The parameter for receiving additional results if you receive a <code>NextToken</code> response in a previous request. A <code>NextToken</code> response indicates that more output is available. Set this parameter to the value provided by a previous call's <code>NextToken</code> response to indicate where the output should continue from.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListGroupingStatusesInput`](crate::operation::list_grouping_statuses::ListGroupingStatusesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_grouping_statuses::ListGroupingStatusesInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_grouping_statuses::ListGroupingStatusesInput {
            group: self.group,
            max_results: self.max_results,
            filters: self.filters,
            next_token: self.next_token,
        })
    }
}
