// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetSearchJobOutput {
    /// <p>Returned name of the specified search job.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Returned summary of the specified search job scope, including:</p>
    /// <ul>
    /// <li>
    /// <p>TotalBackupsToScanCount, the number of recovery points returned by the search.</p></li>
    /// <li>
    /// <p>TotalItemsToScanCount, the number of items returned by the search.</p></li>
    /// </ul>
    pub search_scope_summary: ::std::option::Option<crate::types::SearchScopeSummary>,
    /// <p>Returns numbers representing BackupsScannedCount, ItemsScanned, and ItemsMatched.</p>
    pub current_search_progress: ::std::option::Option<crate::types::CurrentSearchProgress>,
    /// <p>A status message will be returned for either a earch job with a status of <code>ERRORED</code> or a status of <code>COMPLETED</code> jobs with issues.</p>
    /// <p>For example, a message may say that a search contained recovery points unable to be scanned because of a permissions issue.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>The encryption key for the specified search job.</p>
    /// <p>Example: <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
    pub encryption_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that a search job completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionTime</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub completion_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The current status of the specified search job.</p>
    /// <p>A search job may have one of the following statuses: <code>RUNNING</code>; <code>COMPLETED</code>; <code>STOPPED</code>; <code>FAILED</code>; <code>TIMED_OUT</code>; or <code>EXPIRED</code> .</p>
    pub status: crate::types::SearchJobState,
    /// <p>The search scope is all backup properties input into a search.</p>
    pub search_scope: ::std::option::Option<crate::types::SearchScope>,
    /// <p>Item Filters represent all input item properties specified when the search was created.</p>
    pub item_filters: ::std::option::Option<crate::types::ItemFilters>,
    /// <p>The date and time that a search job was created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionTime</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>The unique string that identifies the specified search job.</p>
    pub search_job_identifier: ::std::string::String,
    /// <p>The unique string that identifies the Amazon Resource Name (ARN) of the specified search job.</p>
    pub search_job_arn: ::std::string::String,
    _request_id: Option<String>,
}
impl GetSearchJobOutput {
    /// <p>Returned name of the specified search job.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Returned summary of the specified search job scope, including:</p>
    /// <ul>
    /// <li>
    /// <p>TotalBackupsToScanCount, the number of recovery points returned by the search.</p></li>
    /// <li>
    /// <p>TotalItemsToScanCount, the number of items returned by the search.</p></li>
    /// </ul>
    pub fn search_scope_summary(&self) -> ::std::option::Option<&crate::types::SearchScopeSummary> {
        self.search_scope_summary.as_ref()
    }
    /// <p>Returns numbers representing BackupsScannedCount, ItemsScanned, and ItemsMatched.</p>
    pub fn current_search_progress(&self) -> ::std::option::Option<&crate::types::CurrentSearchProgress> {
        self.current_search_progress.as_ref()
    }
    /// <p>A status message will be returned for either a earch job with a status of <code>ERRORED</code> or a status of <code>COMPLETED</code> jobs with issues.</p>
    /// <p>For example, a message may say that a search contained recovery points unable to be scanned because of a permissions issue.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The encryption key for the specified search job.</p>
    /// <p>Example: <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
    pub fn encryption_key_arn(&self) -> ::std::option::Option<&str> {
        self.encryption_key_arn.as_deref()
    }
    /// <p>The date and time that a search job completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionTime</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn completion_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.completion_time.as_ref()
    }
    /// <p>The current status of the specified search job.</p>
    /// <p>A search job may have one of the following statuses: <code>RUNNING</code>; <code>COMPLETED</code>; <code>STOPPED</code>; <code>FAILED</code>; <code>TIMED_OUT</code>; or <code>EXPIRED</code> .</p>
    pub fn status(&self) -> &crate::types::SearchJobState {
        &self.status
    }
    /// <p>The search scope is all backup properties input into a search.</p>
    pub fn search_scope(&self) -> ::std::option::Option<&crate::types::SearchScope> {
        self.search_scope.as_ref()
    }
    /// <p>Item Filters represent all input item properties specified when the search was created.</p>
    pub fn item_filters(&self) -> ::std::option::Option<&crate::types::ItemFilters> {
        self.item_filters.as_ref()
    }
    /// <p>The date and time that a search job was created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionTime</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>The unique string that identifies the specified search job.</p>
    pub fn search_job_identifier(&self) -> &str {
        use std::ops::Deref;
        self.search_job_identifier.deref()
    }
    /// <p>The unique string that identifies the Amazon Resource Name (ARN) of the specified search job.</p>
    pub fn search_job_arn(&self) -> &str {
        use std::ops::Deref;
        self.search_job_arn.deref()
    }
}
impl ::aws_types::request_id::RequestId for GetSearchJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSearchJobOutput {
    /// Creates a new builder-style object to manufacture [`GetSearchJobOutput`](crate::operation::get_search_job::GetSearchJobOutput).
    pub fn builder() -> crate::operation::get_search_job::builders::GetSearchJobOutputBuilder {
        crate::operation::get_search_job::builders::GetSearchJobOutputBuilder::default()
    }
}

/// A builder for [`GetSearchJobOutput`](crate::operation::get_search_job::GetSearchJobOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetSearchJobOutputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) search_scope_summary: ::std::option::Option<crate::types::SearchScopeSummary>,
    pub(crate) current_search_progress: ::std::option::Option<crate::types::CurrentSearchProgress>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) completion_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::SearchJobState>,
    pub(crate) search_scope: ::std::option::Option<crate::types::SearchScope>,
    pub(crate) item_filters: ::std::option::Option<crate::types::ItemFilters>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) search_job_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) search_job_arn: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetSearchJobOutputBuilder {
    /// <p>Returned name of the specified search job.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Returned name of the specified search job.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Returned name of the specified search job.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Returned summary of the specified search job scope, including:</p>
    /// <ul>
    /// <li>
    /// <p>TotalBackupsToScanCount, the number of recovery points returned by the search.</p></li>
    /// <li>
    /// <p>TotalItemsToScanCount, the number of items returned by the search.</p></li>
    /// </ul>
    pub fn search_scope_summary(mut self, input: crate::types::SearchScopeSummary) -> Self {
        self.search_scope_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returned summary of the specified search job scope, including:</p>
    /// <ul>
    /// <li>
    /// <p>TotalBackupsToScanCount, the number of recovery points returned by the search.</p></li>
    /// <li>
    /// <p>TotalItemsToScanCount, the number of items returned by the search.</p></li>
    /// </ul>
    pub fn set_search_scope_summary(mut self, input: ::std::option::Option<crate::types::SearchScopeSummary>) -> Self {
        self.search_scope_summary = input;
        self
    }
    /// <p>Returned summary of the specified search job scope, including:</p>
    /// <ul>
    /// <li>
    /// <p>TotalBackupsToScanCount, the number of recovery points returned by the search.</p></li>
    /// <li>
    /// <p>TotalItemsToScanCount, the number of items returned by the search.</p></li>
    /// </ul>
    pub fn get_search_scope_summary(&self) -> &::std::option::Option<crate::types::SearchScopeSummary> {
        &self.search_scope_summary
    }
    /// <p>Returns numbers representing BackupsScannedCount, ItemsScanned, and ItemsMatched.</p>
    pub fn current_search_progress(mut self, input: crate::types::CurrentSearchProgress) -> Self {
        self.current_search_progress = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns numbers representing BackupsScannedCount, ItemsScanned, and ItemsMatched.</p>
    pub fn set_current_search_progress(mut self, input: ::std::option::Option<crate::types::CurrentSearchProgress>) -> Self {
        self.current_search_progress = input;
        self
    }
    /// <p>Returns numbers representing BackupsScannedCount, ItemsScanned, and ItemsMatched.</p>
    pub fn get_current_search_progress(&self) -> &::std::option::Option<crate::types::CurrentSearchProgress> {
        &self.current_search_progress
    }
    /// <p>A status message will be returned for either a earch job with a status of <code>ERRORED</code> or a status of <code>COMPLETED</code> jobs with issues.</p>
    /// <p>For example, a message may say that a search contained recovery points unable to be scanned because of a permissions issue.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A status message will be returned for either a earch job with a status of <code>ERRORED</code> or a status of <code>COMPLETED</code> jobs with issues.</p>
    /// <p>For example, a message may say that a search contained recovery points unable to be scanned because of a permissions issue.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>A status message will be returned for either a earch job with a status of <code>ERRORED</code> or a status of <code>COMPLETED</code> jobs with issues.</p>
    /// <p>For example, a message may say that a search contained recovery points unable to be scanned because of a permissions issue.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>The encryption key for the specified search job.</p>
    /// <p>Example: <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
    pub fn encryption_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encryption_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The encryption key for the specified search job.</p>
    /// <p>Example: <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
    pub fn set_encryption_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encryption_key_arn = input;
        self
    }
    /// <p>The encryption key for the specified search job.</p>
    /// <p>Example: <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p>
    pub fn get_encryption_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.encryption_key_arn
    }
    /// <p>The date and time that a search job completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionTime</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn completion_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.completion_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that a search job completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionTime</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn set_completion_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.completion_time = input;
        self
    }
    /// <p>The date and time that a search job completed, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionTime</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn get_completion_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.completion_time
    }
    /// <p>The current status of the specified search job.</p>
    /// <p>A search job may have one of the following statuses: <code>RUNNING</code>; <code>COMPLETED</code>; <code>STOPPED</code>; <code>FAILED</code>; <code>TIMED_OUT</code>; or <code>EXPIRED</code> .</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::SearchJobState) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the specified search job.</p>
    /// <p>A search job may have one of the following statuses: <code>RUNNING</code>; <code>COMPLETED</code>; <code>STOPPED</code>; <code>FAILED</code>; <code>TIMED_OUT</code>; or <code>EXPIRED</code> .</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SearchJobState>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the specified search job.</p>
    /// <p>A search job may have one of the following statuses: <code>RUNNING</code>; <code>COMPLETED</code>; <code>STOPPED</code>; <code>FAILED</code>; <code>TIMED_OUT</code>; or <code>EXPIRED</code> .</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SearchJobState> {
        &self.status
    }
    /// <p>The search scope is all backup properties input into a search.</p>
    /// This field is required.
    pub fn search_scope(mut self, input: crate::types::SearchScope) -> Self {
        self.search_scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>The search scope is all backup properties input into a search.</p>
    pub fn set_search_scope(mut self, input: ::std::option::Option<crate::types::SearchScope>) -> Self {
        self.search_scope = input;
        self
    }
    /// <p>The search scope is all backup properties input into a search.</p>
    pub fn get_search_scope(&self) -> &::std::option::Option<crate::types::SearchScope> {
        &self.search_scope
    }
    /// <p>Item Filters represent all input item properties specified when the search was created.</p>
    /// This field is required.
    pub fn item_filters(mut self, input: crate::types::ItemFilters) -> Self {
        self.item_filters = ::std::option::Option::Some(input);
        self
    }
    /// <p>Item Filters represent all input item properties specified when the search was created.</p>
    pub fn set_item_filters(mut self, input: ::std::option::Option<crate::types::ItemFilters>) -> Self {
        self.item_filters = input;
        self
    }
    /// <p>Item Filters represent all input item properties specified when the search was created.</p>
    pub fn get_item_filters(&self) -> &::std::option::Option<crate::types::ItemFilters> {
        &self.item_filters
    }
    /// <p>The date and time that a search job was created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionTime</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that a search job was created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionTime</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The date and time that a search job was created, in Unix format and Coordinated Universal Time (UTC). The value of <code>CompletionTime</code> is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The unique string that identifies the specified search job.</p>
    /// This field is required.
    pub fn search_job_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.search_job_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique string that identifies the specified search job.</p>
    pub fn set_search_job_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.search_job_identifier = input;
        self
    }
    /// <p>The unique string that identifies the specified search job.</p>
    pub fn get_search_job_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.search_job_identifier
    }
    /// <p>The unique string that identifies the Amazon Resource Name (ARN) of the specified search job.</p>
    /// This field is required.
    pub fn search_job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.search_job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique string that identifies the Amazon Resource Name (ARN) of the specified search job.</p>
    pub fn set_search_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.search_job_arn = input;
        self
    }
    /// <p>The unique string that identifies the Amazon Resource Name (ARN) of the specified search job.</p>
    pub fn get_search_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.search_job_arn
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSearchJobOutput`](crate::operation::get_search_job::GetSearchJobOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::operation::get_search_job::builders::GetSearchJobOutputBuilder::status)
    /// - [`creation_time`](crate::operation::get_search_job::builders::GetSearchJobOutputBuilder::creation_time)
    /// - [`search_job_identifier`](crate::operation::get_search_job::builders::GetSearchJobOutputBuilder::search_job_identifier)
    /// - [`search_job_arn`](crate::operation::get_search_job::builders::GetSearchJobOutputBuilder::search_job_arn)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_search_job::GetSearchJobOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_search_job::GetSearchJobOutput {
            name: self.name,
            search_scope_summary: self.search_scope_summary,
            current_search_progress: self.current_search_progress,
            status_message: self.status_message,
            encryption_key_arn: self.encryption_key_arn,
            completion_time: self.completion_time,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetSearchJobOutput",
                )
            })?,
            search_scope: self.search_scope,
            item_filters: self.item_filters,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building GetSearchJobOutput",
                )
            })?,
            search_job_identifier: self.search_job_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "search_job_identifier",
                    "search_job_identifier was not specified but it is required when building GetSearchJobOutput",
                )
            })?,
            search_job_arn: self.search_job_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "search_job_arn",
                    "search_job_arn was not specified but it is required when building GetSearchJobOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
