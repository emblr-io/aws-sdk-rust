// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartSearchResultExportJobInput {
    /// <p>The unique string that specifies the search job.</p>
    pub search_job_identifier: ::std::option::Option<::std::string::String>,
    /// <p>This specification contains a required string of the destination bucket; optionally, you can include the destination prefix.</p>
    pub export_specification: ::std::option::Option<crate::types::ExportSpecification>,
    /// <p>Include this parameter to allow multiple identical calls for idempotency.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it is completed. After this time, any request with the same token is treated as a new request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>Optional tags to include. A tag is a key-value pair you can use to manage, filter, and search for your resources. Allowed characters include UTF-8 letters, numbers, spaces, and the following characters: + - = . _ : /.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::option::Option<::std::string::String>>>,
    /// <p>This parameter specifies the role ARN used to start the search results export jobs.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
}
impl StartSearchResultExportJobInput {
    /// <p>The unique string that specifies the search job.</p>
    pub fn search_job_identifier(&self) -> ::std::option::Option<&str> {
        self.search_job_identifier.as_deref()
    }
    /// <p>This specification contains a required string of the destination bucket; optionally, you can include the destination prefix.</p>
    pub fn export_specification(&self) -> ::std::option::Option<&crate::types::ExportSpecification> {
        self.export_specification.as_ref()
    }
    /// <p>Include this parameter to allow multiple identical calls for idempotency.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it is completed. After this time, any request with the same token is treated as a new request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Optional tags to include. A tag is a key-value pair you can use to manage, filter, and search for your resources. Allowed characters include UTF-8 letters, numbers, spaces, and the following characters: + - = . _ : /.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::option::Option<::std::string::String>>> {
        self.tags.as_ref()
    }
    /// <p>This parameter specifies the role ARN used to start the search results export jobs.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
}
impl StartSearchResultExportJobInput {
    /// Creates a new builder-style object to manufacture [`StartSearchResultExportJobInput`](crate::operation::start_search_result_export_job::StartSearchResultExportJobInput).
    pub fn builder() -> crate::operation::start_search_result_export_job::builders::StartSearchResultExportJobInputBuilder {
        crate::operation::start_search_result_export_job::builders::StartSearchResultExportJobInputBuilder::default()
    }
}

/// A builder for [`StartSearchResultExportJobInput`](crate::operation::start_search_result_export_job::StartSearchResultExportJobInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartSearchResultExportJobInputBuilder {
    pub(crate) search_job_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) export_specification: ::std::option::Option<crate::types::ExportSpecification>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::option::Option<::std::string::String>>>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
}
impl StartSearchResultExportJobInputBuilder {
    /// <p>The unique string that specifies the search job.</p>
    /// This field is required.
    pub fn search_job_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.search_job_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique string that specifies the search job.</p>
    pub fn set_search_job_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.search_job_identifier = input;
        self
    }
    /// <p>The unique string that specifies the search job.</p>
    pub fn get_search_job_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.search_job_identifier
    }
    /// <p>This specification contains a required string of the destination bucket; optionally, you can include the destination prefix.</p>
    /// This field is required.
    pub fn export_specification(mut self, input: crate::types::ExportSpecification) -> Self {
        self.export_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>This specification contains a required string of the destination bucket; optionally, you can include the destination prefix.</p>
    pub fn set_export_specification(mut self, input: ::std::option::Option<crate::types::ExportSpecification>) -> Self {
        self.export_specification = input;
        self
    }
    /// <p>This specification contains a required string of the destination bucket; optionally, you can include the destination prefix.</p>
    pub fn get_export_specification(&self) -> &::std::option::Option<crate::types::ExportSpecification> {
        &self.export_specification
    }
    /// <p>Include this parameter to allow multiple identical calls for idempotency.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it is completed. After this time, any request with the same token is treated as a new request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Include this parameter to allow multiple identical calls for idempotency.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it is completed. After this time, any request with the same token is treated as a new request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Include this parameter to allow multiple identical calls for idempotency.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it is completed. After this time, any request with the same token is treated as a new request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Optional tags to include. A tag is a key-value pair you can use to manage, filter, and search for your resources. Allowed characters include UTF-8 letters, numbers, spaces, and the following characters: + - = . _ : /.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: ::std::option::Option<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Optional tags to include. A tag is a key-value pair you can use to manage, filter, and search for your resources. Allowed characters include UTF-8 letters, numbers, spaces, and the following characters: + - = . _ : /.</p>
    pub fn set_tags(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::option::Option<::std::string::String>>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>Optional tags to include. A tag is a key-value pair you can use to manage, filter, and search for your resources. Allowed characters include UTF-8 letters, numbers, spaces, and the following characters: + - = . _ : /.</p>
    pub fn get_tags(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::option::Option<::std::string::String>>> {
        &self.tags
    }
    /// <p>This parameter specifies the role ARN used to start the search results export jobs.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This parameter specifies the role ARN used to start the search results export jobs.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>This parameter specifies the role ARN used to start the search results export jobs.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Consumes the builder and constructs a [`StartSearchResultExportJobInput`](crate::operation::start_search_result_export_job::StartSearchResultExportJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_search_result_export_job::StartSearchResultExportJobInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::start_search_result_export_job::StartSearchResultExportJobInput {
            search_job_identifier: self.search_job_identifier,
            export_specification: self.export_specification,
            client_token: self.client_token,
            tags: self.tags,
            role_arn: self.role_arn,
        })
    }
}
