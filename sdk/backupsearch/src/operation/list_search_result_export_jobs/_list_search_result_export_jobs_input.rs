// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListSearchResultExportJobsInput {
    /// <p>The search jobs to be included in the export job can be filtered by including this parameter.</p>
    pub status: ::std::option::Option<crate::types::ExportJobStatus>,
    /// <p>The unique string that specifies the search job.</p>
    pub search_job_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The next item following a partial list of returned backups included in a search job.</p>
    /// <p>For example, if a request is made to return <code>MaxResults</code> number of backups, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of resource list items to be returned.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListSearchResultExportJobsInput {
    /// <p>The search jobs to be included in the export job can be filtered by including this parameter.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ExportJobStatus> {
        self.status.as_ref()
    }
    /// <p>The unique string that specifies the search job.</p>
    pub fn search_job_identifier(&self) -> ::std::option::Option<&str> {
        self.search_job_identifier.as_deref()
    }
    /// <p>The next item following a partial list of returned backups included in a search job.</p>
    /// <p>For example, if a request is made to return <code>MaxResults</code> number of backups, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of resource list items to be returned.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListSearchResultExportJobsInput {
    /// Creates a new builder-style object to manufacture [`ListSearchResultExportJobsInput`](crate::operation::list_search_result_export_jobs::ListSearchResultExportJobsInput).
    pub fn builder() -> crate::operation::list_search_result_export_jobs::builders::ListSearchResultExportJobsInputBuilder {
        crate::operation::list_search_result_export_jobs::builders::ListSearchResultExportJobsInputBuilder::default()
    }
}

/// A builder for [`ListSearchResultExportJobsInput`](crate::operation::list_search_result_export_jobs::ListSearchResultExportJobsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListSearchResultExportJobsInputBuilder {
    pub(crate) status: ::std::option::Option<crate::types::ExportJobStatus>,
    pub(crate) search_job_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListSearchResultExportJobsInputBuilder {
    /// <p>The search jobs to be included in the export job can be filtered by including this parameter.</p>
    pub fn status(mut self, input: crate::types::ExportJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The search jobs to be included in the export job can be filtered by including this parameter.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ExportJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The search jobs to be included in the export job can be filtered by including this parameter.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ExportJobStatus> {
        &self.status
    }
    /// <p>The unique string that specifies the search job.</p>
    pub fn search_job_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.search_job_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique string that specifies the search job.</p>
    pub fn set_search_job_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.search_job_identifier = input;
        self
    }
    /// <p>The unique string that specifies the search job.</p>
    pub fn get_search_job_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.search_job_identifier
    }
    /// <p>The next item following a partial list of returned backups included in a search job.</p>
    /// <p>For example, if a request is made to return <code>MaxResults</code> number of backups, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The next item following a partial list of returned backups included in a search job.</p>
    /// <p>For example, if a request is made to return <code>MaxResults</code> number of backups, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The next item following a partial list of returned backups included in a search job.</p>
    /// <p>For example, if a request is made to return <code>MaxResults</code> number of backups, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of resource list items to be returned.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of resource list items to be returned.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of resource list items to be returned.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListSearchResultExportJobsInput`](crate::operation::list_search_result_export_jobs::ListSearchResultExportJobsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_search_result_export_jobs::ListSearchResultExportJobsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_search_result_export_jobs::ListSearchResultExportJobsInput {
            status: self.status,
            search_job_identifier: self.search_job_identifier,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
