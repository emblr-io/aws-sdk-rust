// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartSearchJobInput {
    /// <p>List of tags returned by the operation.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::option::Option<::std::string::String>>>,
    /// <p>Include alphanumeric characters to create a name for this search job.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The encryption key for the specified search job.</p>
    pub encryption_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>Include this parameter to allow multiple identical calls for idempotency.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it is completed. After this time, any request with the same token is treated as a new request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>This object can contain BackupResourceTypes, BackupResourceArns, BackupResourceCreationTime, BackupResourceTags, and SourceResourceArns to filter the recovery points returned by the search job.</p>
    pub search_scope: ::std::option::Option<crate::types::SearchScope>,
    /// <p>Item Filters represent all input item properties specified when the search was created.</p>
    /// <p>Contains either EBSItemFilters or S3ItemFilters</p>
    pub item_filters: ::std::option::Option<crate::types::ItemFilters>,
}
impl StartSearchJobInput {
    /// <p>List of tags returned by the operation.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::option::Option<::std::string::String>>> {
        self.tags.as_ref()
    }
    /// <p>Include alphanumeric characters to create a name for this search job.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The encryption key for the specified search job.</p>
    pub fn encryption_key_arn(&self) -> ::std::option::Option<&str> {
        self.encryption_key_arn.as_deref()
    }
    /// <p>Include this parameter to allow multiple identical calls for idempotency.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it is completed. After this time, any request with the same token is treated as a new request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>This object can contain BackupResourceTypes, BackupResourceArns, BackupResourceCreationTime, BackupResourceTags, and SourceResourceArns to filter the recovery points returned by the search job.</p>
    pub fn search_scope(&self) -> ::std::option::Option<&crate::types::SearchScope> {
        self.search_scope.as_ref()
    }
    /// <p>Item Filters represent all input item properties specified when the search was created.</p>
    /// <p>Contains either EBSItemFilters or S3ItemFilters</p>
    pub fn item_filters(&self) -> ::std::option::Option<&crate::types::ItemFilters> {
        self.item_filters.as_ref()
    }
}
impl StartSearchJobInput {
    /// Creates a new builder-style object to manufacture [`StartSearchJobInput`](crate::operation::start_search_job::StartSearchJobInput).
    pub fn builder() -> crate::operation::start_search_job::builders::StartSearchJobInputBuilder {
        crate::operation::start_search_job::builders::StartSearchJobInputBuilder::default()
    }
}

/// A builder for [`StartSearchJobInput`](crate::operation::start_search_job::StartSearchJobInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartSearchJobInputBuilder {
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::option::Option<::std::string::String>>>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) search_scope: ::std::option::Option<crate::types::SearchScope>,
    pub(crate) item_filters: ::std::option::Option<crate::types::ItemFilters>,
}
impl StartSearchJobInputBuilder {
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>List of tags returned by the operation.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: ::std::option::Option<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>List of tags returned by the operation.</p>
    pub fn set_tags(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::option::Option<::std::string::String>>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>List of tags returned by the operation.</p>
    pub fn get_tags(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::option::Option<::std::string::String>>> {
        &self.tags
    }
    /// <p>Include alphanumeric characters to create a name for this search job.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Include alphanumeric characters to create a name for this search job.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Include alphanumeric characters to create a name for this search job.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The encryption key for the specified search job.</p>
    pub fn encryption_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encryption_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The encryption key for the specified search job.</p>
    pub fn set_encryption_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encryption_key_arn = input;
        self
    }
    /// <p>The encryption key for the specified search job.</p>
    pub fn get_encryption_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.encryption_key_arn
    }
    /// <p>Include this parameter to allow multiple identical calls for idempotency.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it is completed. After this time, any request with the same token is treated as a new request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Include this parameter to allow multiple identical calls for idempotency.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it is completed. After this time, any request with the same token is treated as a new request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Include this parameter to allow multiple identical calls for idempotency.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it is completed. After this time, any request with the same token is treated as a new request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>This object can contain BackupResourceTypes, BackupResourceArns, BackupResourceCreationTime, BackupResourceTags, and SourceResourceArns to filter the recovery points returned by the search job.</p>
    /// This field is required.
    pub fn search_scope(mut self, input: crate::types::SearchScope) -> Self {
        self.search_scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>This object can contain BackupResourceTypes, BackupResourceArns, BackupResourceCreationTime, BackupResourceTags, and SourceResourceArns to filter the recovery points returned by the search job.</p>
    pub fn set_search_scope(mut self, input: ::std::option::Option<crate::types::SearchScope>) -> Self {
        self.search_scope = input;
        self
    }
    /// <p>This object can contain BackupResourceTypes, BackupResourceArns, BackupResourceCreationTime, BackupResourceTags, and SourceResourceArns to filter the recovery points returned by the search job.</p>
    pub fn get_search_scope(&self) -> &::std::option::Option<crate::types::SearchScope> {
        &self.search_scope
    }
    /// <p>Item Filters represent all input item properties specified when the search was created.</p>
    /// <p>Contains either EBSItemFilters or S3ItemFilters</p>
    pub fn item_filters(mut self, input: crate::types::ItemFilters) -> Self {
        self.item_filters = ::std::option::Option::Some(input);
        self
    }
    /// <p>Item Filters represent all input item properties specified when the search was created.</p>
    /// <p>Contains either EBSItemFilters or S3ItemFilters</p>
    pub fn set_item_filters(mut self, input: ::std::option::Option<crate::types::ItemFilters>) -> Self {
        self.item_filters = input;
        self
    }
    /// <p>Item Filters represent all input item properties specified when the search was created.</p>
    /// <p>Contains either EBSItemFilters or S3ItemFilters</p>
    pub fn get_item_filters(&self) -> &::std::option::Option<crate::types::ItemFilters> {
        &self.item_filters
    }
    /// Consumes the builder and constructs a [`StartSearchJobInput`](crate::operation::start_search_job::StartSearchJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_search_job::StartSearchJobInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_search_job::StartSearchJobInput {
            tags: self.tags,
            name: self.name,
            encryption_key_arn: self.encryption_key_arn,
            client_token: self.client_token,
            search_scope: self.search_scope,
            item_filters: self.item_filters,
        })
    }
}
