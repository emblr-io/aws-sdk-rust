// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of the specified search job scope, including:</p>
/// <ul>
/// <li>
/// <p>TotalBackupsToScanCount, the number of recovery points returned by the search.</p></li>
/// <li>
/// <p>TotalItemsToScanCount, the number of items returned by the search.</p></li>
/// </ul>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchScopeSummary {
    /// <p>This is the count of the total number of backups that will be scanned in a search.</p>
    pub total_recovery_points_to_scan_count: ::std::option::Option<i32>,
    /// <p>This is the count of the total number of items that will be scanned in a search.</p>
    pub total_items_to_scan_count: ::std::option::Option<i64>,
}
impl SearchScopeSummary {
    /// <p>This is the count of the total number of backups that will be scanned in a search.</p>
    pub fn total_recovery_points_to_scan_count(&self) -> ::std::option::Option<i32> {
        self.total_recovery_points_to_scan_count
    }
    /// <p>This is the count of the total number of items that will be scanned in a search.</p>
    pub fn total_items_to_scan_count(&self) -> ::std::option::Option<i64> {
        self.total_items_to_scan_count
    }
}
impl SearchScopeSummary {
    /// Creates a new builder-style object to manufacture [`SearchScopeSummary`](crate::types::SearchScopeSummary).
    pub fn builder() -> crate::types::builders::SearchScopeSummaryBuilder {
        crate::types::builders::SearchScopeSummaryBuilder::default()
    }
}

/// A builder for [`SearchScopeSummary`](crate::types::SearchScopeSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SearchScopeSummaryBuilder {
    pub(crate) total_recovery_points_to_scan_count: ::std::option::Option<i32>,
    pub(crate) total_items_to_scan_count: ::std::option::Option<i64>,
}
impl SearchScopeSummaryBuilder {
    /// <p>This is the count of the total number of backups that will be scanned in a search.</p>
    pub fn total_recovery_points_to_scan_count(mut self, input: i32) -> Self {
        self.total_recovery_points_to_scan_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>This is the count of the total number of backups that will be scanned in a search.</p>
    pub fn set_total_recovery_points_to_scan_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_recovery_points_to_scan_count = input;
        self
    }
    /// <p>This is the count of the total number of backups that will be scanned in a search.</p>
    pub fn get_total_recovery_points_to_scan_count(&self) -> &::std::option::Option<i32> {
        &self.total_recovery_points_to_scan_count
    }
    /// <p>This is the count of the total number of items that will be scanned in a search.</p>
    pub fn total_items_to_scan_count(mut self, input: i64) -> Self {
        self.total_items_to_scan_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>This is the count of the total number of items that will be scanned in a search.</p>
    pub fn set_total_items_to_scan_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.total_items_to_scan_count = input;
        self
    }
    /// <p>This is the count of the total number of items that will be scanned in a search.</p>
    pub fn get_total_items_to_scan_count(&self) -> &::std::option::Option<i64> {
        &self.total_items_to_scan_count
    }
    /// Consumes the builder and constructs a [`SearchScopeSummary`](crate::types::SearchScopeSummary).
    pub fn build(self) -> crate::types::SearchScopeSummary {
        crate::types::SearchScopeSummary {
            total_recovery_points_to_scan_count: self.total_recovery_points_to_scan_count,
            total_items_to_scan_count: self.total_items_to_scan_count,
        }
    }
}
