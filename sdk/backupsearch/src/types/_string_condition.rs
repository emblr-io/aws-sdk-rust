// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This contains the value of the string and can contain one or more operators.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StringCondition {
    /// <p>The value of the string.</p>
    pub value: ::std::string::String,
    /// <p>A string that defines what values will be returned.</p>
    /// <p>If this is included, avoid combinations of operators that will return all possible values. For example, including both <code>EQUALS_TO</code> and <code>NOT_EQUALS_TO</code> with a value of <code>4</code> will return all values.</p>
    pub operator: crate::types::StringConditionOperator,
}
impl StringCondition {
    /// <p>The value of the string.</p>
    pub fn value(&self) -> &str {
        use std::ops::Deref;
        self.value.deref()
    }
    /// <p>A string that defines what values will be returned.</p>
    /// <p>If this is included, avoid combinations of operators that will return all possible values. For example, including both <code>EQUALS_TO</code> and <code>NOT_EQUALS_TO</code> with a value of <code>4</code> will return all values.</p>
    pub fn operator(&self) -> &crate::types::StringConditionOperator {
        &self.operator
    }
}
impl StringCondition {
    /// Creates a new builder-style object to manufacture [`StringCondition`](crate::types::StringCondition).
    pub fn builder() -> crate::types::builders::StringConditionBuilder {
        crate::types::builders::StringConditionBuilder::default()
    }
}

/// A builder for [`StringCondition`](crate::types::StringCondition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StringConditionBuilder {
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) operator: ::std::option::Option<crate::types::StringConditionOperator>,
}
impl StringConditionBuilder {
    /// <p>The value of the string.</p>
    /// This field is required.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the string.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of the string.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// <p>A string that defines what values will be returned.</p>
    /// <p>If this is included, avoid combinations of operators that will return all possible values. For example, including both <code>EQUALS_TO</code> and <code>NOT_EQUALS_TO</code> with a value of <code>4</code> will return all values.</p>
    pub fn operator(mut self, input: crate::types::StringConditionOperator) -> Self {
        self.operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>A string that defines what values will be returned.</p>
    /// <p>If this is included, avoid combinations of operators that will return all possible values. For example, including both <code>EQUALS_TO</code> and <code>NOT_EQUALS_TO</code> with a value of <code>4</code> will return all values.</p>
    pub fn set_operator(mut self, input: ::std::option::Option<crate::types::StringConditionOperator>) -> Self {
        self.operator = input;
        self
    }
    /// <p>A string that defines what values will be returned.</p>
    /// <p>If this is included, avoid combinations of operators that will return all possible values. For example, including both <code>EQUALS_TO</code> and <code>NOT_EQUALS_TO</code> with a value of <code>4</code> will return all values.</p>
    pub fn get_operator(&self) -> &::std::option::Option<crate::types::StringConditionOperator> {
        &self.operator
    }
    /// Consumes the builder and constructs a [`StringCondition`](crate::types::StringCondition).
    /// This method will fail if any of the following fields are not set:
    /// - [`value`](crate::types::builders::StringConditionBuilder::value)
    pub fn build(self) -> ::std::result::Result<crate::types::StringCondition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::StringCondition {
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building StringCondition",
                )
            })?,
            operator: self.operator.unwrap_or(
                "EQUALS_TO"
                    .parse::<crate::types::StringConditionOperator>()
                    .expect("static value validated to member"),
            ),
        })
    }
}
