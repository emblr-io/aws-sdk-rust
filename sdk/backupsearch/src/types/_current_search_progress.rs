// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This contains information results retrieved from a search job that may not have completed.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CurrentSearchProgress {
    /// <p>This number is the sum of all backups that have been scanned so far during a search job.</p>
    pub recovery_points_scanned_count: ::std::option::Option<i32>,
    /// <p>This number is the sum of all items that have been scanned so far during a search job.</p>
    pub items_scanned_count: ::std::option::Option<i64>,
    /// <p>This number is the sum of all items that match the item filters in a search job in progress.</p>
    pub items_matched_count: ::std::option::Option<i64>,
}
impl CurrentSearchProgress {
    /// <p>This number is the sum of all backups that have been scanned so far during a search job.</p>
    pub fn recovery_points_scanned_count(&self) -> ::std::option::Option<i32> {
        self.recovery_points_scanned_count
    }
    /// <p>This number is the sum of all items that have been scanned so far during a search job.</p>
    pub fn items_scanned_count(&self) -> ::std::option::Option<i64> {
        self.items_scanned_count
    }
    /// <p>This number is the sum of all items that match the item filters in a search job in progress.</p>
    pub fn items_matched_count(&self) -> ::std::option::Option<i64> {
        self.items_matched_count
    }
}
impl CurrentSearchProgress {
    /// Creates a new builder-style object to manufacture [`CurrentSearchProgress`](crate::types::CurrentSearchProgress).
    pub fn builder() -> crate::types::builders::CurrentSearchProgressBuilder {
        crate::types::builders::CurrentSearchProgressBuilder::default()
    }
}

/// A builder for [`CurrentSearchProgress`](crate::types::CurrentSearchProgress).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CurrentSearchProgressBuilder {
    pub(crate) recovery_points_scanned_count: ::std::option::Option<i32>,
    pub(crate) items_scanned_count: ::std::option::Option<i64>,
    pub(crate) items_matched_count: ::std::option::Option<i64>,
}
impl CurrentSearchProgressBuilder {
    /// <p>This number is the sum of all backups that have been scanned so far during a search job.</p>
    pub fn recovery_points_scanned_count(mut self, input: i32) -> Self {
        self.recovery_points_scanned_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>This number is the sum of all backups that have been scanned so far during a search job.</p>
    pub fn set_recovery_points_scanned_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.recovery_points_scanned_count = input;
        self
    }
    /// <p>This number is the sum of all backups that have been scanned so far during a search job.</p>
    pub fn get_recovery_points_scanned_count(&self) -> &::std::option::Option<i32> {
        &self.recovery_points_scanned_count
    }
    /// <p>This number is the sum of all items that have been scanned so far during a search job.</p>
    pub fn items_scanned_count(mut self, input: i64) -> Self {
        self.items_scanned_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>This number is the sum of all items that have been scanned so far during a search job.</p>
    pub fn set_items_scanned_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.items_scanned_count = input;
        self
    }
    /// <p>This number is the sum of all items that have been scanned so far during a search job.</p>
    pub fn get_items_scanned_count(&self) -> &::std::option::Option<i64> {
        &self.items_scanned_count
    }
    /// <p>This number is the sum of all items that match the item filters in a search job in progress.</p>
    pub fn items_matched_count(mut self, input: i64) -> Self {
        self.items_matched_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>This number is the sum of all items that match the item filters in a search job in progress.</p>
    pub fn set_items_matched_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.items_matched_count = input;
        self
    }
    /// <p>This number is the sum of all items that match the item filters in a search job in progress.</p>
    pub fn get_items_matched_count(&self) -> &::std::option::Option<i64> {
        &self.items_matched_count
    }
    /// Consumes the builder and constructs a [`CurrentSearchProgress`](crate::types::CurrentSearchProgress).
    pub fn build(self) -> crate::types::CurrentSearchProgress {
        crate::types::CurrentSearchProgress {
            recovery_points_scanned_count: self.recovery_points_scanned_count,
            items_scanned_count: self.items_scanned_count,
            items_matched_count: self.items_matched_count,
        }
    }
}
