// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Item Filters represent all input item properties specified when the search was created.</p>
/// <p>Contains either EBSItemFilters or S3ItemFilters</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ItemFilters {
    /// <p>This array can contain CreationTimes, ETags, ObjectKeys, Sizes, or VersionIds objects.</p>
    pub s3_item_filters: ::std::option::Option<::std::vec::Vec<crate::types::S3ItemFilter>>,
    /// <p>This array can contain CreationTimes, FilePaths, LastModificationTimes, or Sizes objects.</p>
    pub ebs_item_filters: ::std::option::Option<::std::vec::Vec<crate::types::EbsItemFilter>>,
}
impl ItemFilters {
    /// <p>This array can contain CreationTimes, ETags, ObjectKeys, Sizes, or VersionIds objects.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.s3_item_filters.is_none()`.
    pub fn s3_item_filters(&self) -> &[crate::types::S3ItemFilter] {
        self.s3_item_filters.as_deref().unwrap_or_default()
    }
    /// <p>This array can contain CreationTimes, FilePaths, LastModificationTimes, or Sizes objects.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ebs_item_filters.is_none()`.
    pub fn ebs_item_filters(&self) -> &[crate::types::EbsItemFilter] {
        self.ebs_item_filters.as_deref().unwrap_or_default()
    }
}
impl ItemFilters {
    /// Creates a new builder-style object to manufacture [`ItemFilters`](crate::types::ItemFilters).
    pub fn builder() -> crate::types::builders::ItemFiltersBuilder {
        crate::types::builders::ItemFiltersBuilder::default()
    }
}

/// A builder for [`ItemFilters`](crate::types::ItemFilters).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ItemFiltersBuilder {
    pub(crate) s3_item_filters: ::std::option::Option<::std::vec::Vec<crate::types::S3ItemFilter>>,
    pub(crate) ebs_item_filters: ::std::option::Option<::std::vec::Vec<crate::types::EbsItemFilter>>,
}
impl ItemFiltersBuilder {
    /// Appends an item to `s3_item_filters`.
    ///
    /// To override the contents of this collection use [`set_s3_item_filters`](Self::set_s3_item_filters).
    ///
    /// <p>This array can contain CreationTimes, ETags, ObjectKeys, Sizes, or VersionIds objects.</p>
    pub fn s3_item_filters(mut self, input: crate::types::S3ItemFilter) -> Self {
        let mut v = self.s3_item_filters.unwrap_or_default();
        v.push(input);
        self.s3_item_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>This array can contain CreationTimes, ETags, ObjectKeys, Sizes, or VersionIds objects.</p>
    pub fn set_s3_item_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::S3ItemFilter>>) -> Self {
        self.s3_item_filters = input;
        self
    }
    /// <p>This array can contain CreationTimes, ETags, ObjectKeys, Sizes, or VersionIds objects.</p>
    pub fn get_s3_item_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::S3ItemFilter>> {
        &self.s3_item_filters
    }
    /// Appends an item to `ebs_item_filters`.
    ///
    /// To override the contents of this collection use [`set_ebs_item_filters`](Self::set_ebs_item_filters).
    ///
    /// <p>This array can contain CreationTimes, FilePaths, LastModificationTimes, or Sizes objects.</p>
    pub fn ebs_item_filters(mut self, input: crate::types::EbsItemFilter) -> Self {
        let mut v = self.ebs_item_filters.unwrap_or_default();
        v.push(input);
        self.ebs_item_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>This array can contain CreationTimes, FilePaths, LastModificationTimes, or Sizes objects.</p>
    pub fn set_ebs_item_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EbsItemFilter>>) -> Self {
        self.ebs_item_filters = input;
        self
    }
    /// <p>This array can contain CreationTimes, FilePaths, LastModificationTimes, or Sizes objects.</p>
    pub fn get_ebs_item_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EbsItemFilter>> {
        &self.ebs_item_filters
    }
    /// Consumes the builder and constructs a [`ItemFilters`](crate::types::ItemFilters).
    pub fn build(self) -> crate::types::ItemFilters {
        crate::types::ItemFilters {
            s3_item_filters: self.s3_item_filters,
            ebs_item_filters: self.ebs_item_filters,
        }
    }
}
