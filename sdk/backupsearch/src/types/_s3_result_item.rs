// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>These are the items returned in the results of a search of Amazon S3 backup metadata.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct S3ResultItem {
    /// <p>These are items in the returned results that match recovery point Amazon Resource Names (ARN) input during a search of Amazon S3 backup metadata.</p>
    pub backup_resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>These are items in the returned results that match source Amazon Resource Names (ARN) input during a search of Amazon S3 backup metadata.</p>
    pub source_resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the backup vault.</p>
    pub backup_vault_name: ::std::option::Option<::std::string::String>,
    /// <p>This is one or more items returned in the results of a search of Amazon S3 backup metadata that match the values input for object key.</p>
    pub object_key: ::std::option::Option<::std::string::String>,
    /// <p>These are items in the returned results that match values for object size(s) input during a search of Amazon S3 backup metadata.</p>
    pub object_size: ::std::option::Option<i64>,
    /// <p>These are one or more items in the returned results that match values for item creation time input during a search of Amazon S3 backup metadata.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>These are one or more items in the returned results that match values for ETags input during a search of Amazon S3 backup metadata.</p>
    pub e_tag: ::std::option::Option<::std::string::String>,
    /// <p>These are one or more items in the returned results that match values for version IDs input during a search of Amazon S3 backup metadata.</p>
    pub version_id: ::std::option::Option<::std::string::String>,
}
impl S3ResultItem {
    /// <p>These are items in the returned results that match recovery point Amazon Resource Names (ARN) input during a search of Amazon S3 backup metadata.</p>
    pub fn backup_resource_arn(&self) -> ::std::option::Option<&str> {
        self.backup_resource_arn.as_deref()
    }
    /// <p>These are items in the returned results that match source Amazon Resource Names (ARN) input during a search of Amazon S3 backup metadata.</p>
    pub fn source_resource_arn(&self) -> ::std::option::Option<&str> {
        self.source_resource_arn.as_deref()
    }
    /// <p>The name of the backup vault.</p>
    pub fn backup_vault_name(&self) -> ::std::option::Option<&str> {
        self.backup_vault_name.as_deref()
    }
    /// <p>This is one or more items returned in the results of a search of Amazon S3 backup metadata that match the values input for object key.</p>
    pub fn object_key(&self) -> ::std::option::Option<&str> {
        self.object_key.as_deref()
    }
    /// <p>These are items in the returned results that match values for object size(s) input during a search of Amazon S3 backup metadata.</p>
    pub fn object_size(&self) -> ::std::option::Option<i64> {
        self.object_size
    }
    /// <p>These are one or more items in the returned results that match values for item creation time input during a search of Amazon S3 backup metadata.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>These are one or more items in the returned results that match values for ETags input during a search of Amazon S3 backup metadata.</p>
    pub fn e_tag(&self) -> ::std::option::Option<&str> {
        self.e_tag.as_deref()
    }
    /// <p>These are one or more items in the returned results that match values for version IDs input during a search of Amazon S3 backup metadata.</p>
    pub fn version_id(&self) -> ::std::option::Option<&str> {
        self.version_id.as_deref()
    }
}
impl ::std::fmt::Debug for S3ResultItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("S3ResultItem");
        formatter.field("backup_resource_arn", &self.backup_resource_arn);
        formatter.field("source_resource_arn", &self.source_resource_arn);
        formatter.field("backup_vault_name", &self.backup_vault_name);
        formatter.field("object_key", &"*** Sensitive Data Redacted ***");
        formatter.field("object_size", &self.object_size);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("e_tag", &self.e_tag);
        formatter.field("version_id", &self.version_id);
        formatter.finish()
    }
}
impl S3ResultItem {
    /// Creates a new builder-style object to manufacture [`S3ResultItem`](crate::types::S3ResultItem).
    pub fn builder() -> crate::types::builders::S3ResultItemBuilder {
        crate::types::builders::S3ResultItemBuilder::default()
    }
}

/// A builder for [`S3ResultItem`](crate::types::S3ResultItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct S3ResultItemBuilder {
    pub(crate) backup_resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) source_resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) backup_vault_name: ::std::option::Option<::std::string::String>,
    pub(crate) object_key: ::std::option::Option<::std::string::String>,
    pub(crate) object_size: ::std::option::Option<i64>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) e_tag: ::std::option::Option<::std::string::String>,
    pub(crate) version_id: ::std::option::Option<::std::string::String>,
}
impl S3ResultItemBuilder {
    /// <p>These are items in the returned results that match recovery point Amazon Resource Names (ARN) input during a search of Amazon S3 backup metadata.</p>
    pub fn backup_resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>These are items in the returned results that match recovery point Amazon Resource Names (ARN) input during a search of Amazon S3 backup metadata.</p>
    pub fn set_backup_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_resource_arn = input;
        self
    }
    /// <p>These are items in the returned results that match recovery point Amazon Resource Names (ARN) input during a search of Amazon S3 backup metadata.</p>
    pub fn get_backup_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_resource_arn
    }
    /// <p>These are items in the returned results that match source Amazon Resource Names (ARN) input during a search of Amazon S3 backup metadata.</p>
    pub fn source_resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>These are items in the returned results that match source Amazon Resource Names (ARN) input during a search of Amazon S3 backup metadata.</p>
    pub fn set_source_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_resource_arn = input;
        self
    }
    /// <p>These are items in the returned results that match source Amazon Resource Names (ARN) input during a search of Amazon S3 backup metadata.</p>
    pub fn get_source_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_resource_arn
    }
    /// <p>The name of the backup vault.</p>
    pub fn backup_vault_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_vault_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the backup vault.</p>
    pub fn set_backup_vault_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_vault_name = input;
        self
    }
    /// <p>The name of the backup vault.</p>
    pub fn get_backup_vault_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_vault_name
    }
    /// <p>This is one or more items returned in the results of a search of Amazon S3 backup metadata that match the values input for object key.</p>
    pub fn object_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.object_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This is one or more items returned in the results of a search of Amazon S3 backup metadata that match the values input for object key.</p>
    pub fn set_object_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.object_key = input;
        self
    }
    /// <p>This is one or more items returned in the results of a search of Amazon S3 backup metadata that match the values input for object key.</p>
    pub fn get_object_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.object_key
    }
    /// <p>These are items in the returned results that match values for object size(s) input during a search of Amazon S3 backup metadata.</p>
    pub fn object_size(mut self, input: i64) -> Self {
        self.object_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>These are items in the returned results that match values for object size(s) input during a search of Amazon S3 backup metadata.</p>
    pub fn set_object_size(mut self, input: ::std::option::Option<i64>) -> Self {
        self.object_size = input;
        self
    }
    /// <p>These are items in the returned results that match values for object size(s) input during a search of Amazon S3 backup metadata.</p>
    pub fn get_object_size(&self) -> &::std::option::Option<i64> {
        &self.object_size
    }
    /// <p>These are one or more items in the returned results that match values for item creation time input during a search of Amazon S3 backup metadata.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>These are one or more items in the returned results that match values for item creation time input during a search of Amazon S3 backup metadata.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>These are one or more items in the returned results that match values for item creation time input during a search of Amazon S3 backup metadata.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>These are one or more items in the returned results that match values for ETags input during a search of Amazon S3 backup metadata.</p>
    pub fn e_tag(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.e_tag = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>These are one or more items in the returned results that match values for ETags input during a search of Amazon S3 backup metadata.</p>
    pub fn set_e_tag(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.e_tag = input;
        self
    }
    /// <p>These are one or more items in the returned results that match values for ETags input during a search of Amazon S3 backup metadata.</p>
    pub fn get_e_tag(&self) -> &::std::option::Option<::std::string::String> {
        &self.e_tag
    }
    /// <p>These are one or more items in the returned results that match values for version IDs input during a search of Amazon S3 backup metadata.</p>
    pub fn version_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>These are one or more items in the returned results that match values for version IDs input during a search of Amazon S3 backup metadata.</p>
    pub fn set_version_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_id = input;
        self
    }
    /// <p>These are one or more items in the returned results that match values for version IDs input during a search of Amazon S3 backup metadata.</p>
    pub fn get_version_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_id
    }
    /// Consumes the builder and constructs a [`S3ResultItem`](crate::types::S3ResultItem).
    pub fn build(self) -> crate::types::S3ResultItem {
        crate::types::S3ResultItem {
            backup_resource_arn: self.backup_resource_arn,
            source_resource_arn: self.source_resource_arn,
            backup_vault_name: self.backup_vault_name,
            object_key: self.object_key,
            object_size: self.object_size,
            creation_time: self.creation_time,
            e_tag: self.e_tag,
            version_id: self.version_id,
        }
    }
}
impl ::std::fmt::Debug for S3ResultItemBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("S3ResultItemBuilder");
        formatter.field("backup_resource_arn", &self.backup_resource_arn);
        formatter.field("source_resource_arn", &self.source_resource_arn);
        formatter.field("backup_vault_name", &self.backup_vault_name);
        formatter.field("object_key", &"*** Sensitive Data Redacted ***");
        formatter.field("object_size", &self.object_size);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("e_tag", &self.e_tag);
        formatter.field("version_id", &self.version_id);
        formatter.finish()
    }
}
