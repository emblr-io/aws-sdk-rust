// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The search scope is all backup properties input into a search.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchScope {
    /// <p>The resource types included in a search.</p>
    /// <p>Eligible resource types include S3 and EBS.</p>
    pub backup_resource_types: ::std::vec::Vec<crate::types::ResourceType>,
    /// <p>This is the time a backup resource was created.</p>
    pub backup_resource_creation_time: ::std::option::Option<crate::types::BackupCreationTimeFilter>,
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the source resources.</p>
    pub source_resource_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the backup resources.</p>
    pub backup_resource_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>These are one or more tags on the backup (recovery point).</p>
    pub backup_resource_tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::option::Option<::std::string::String>>>,
}
impl SearchScope {
    /// <p>The resource types included in a search.</p>
    /// <p>Eligible resource types include S3 and EBS.</p>
    pub fn backup_resource_types(&self) -> &[crate::types::ResourceType] {
        use std::ops::Deref;
        self.backup_resource_types.deref()
    }
    /// <p>This is the time a backup resource was created.</p>
    pub fn backup_resource_creation_time(&self) -> ::std::option::Option<&crate::types::BackupCreationTimeFilter> {
        self.backup_resource_creation_time.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the source resources.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.source_resource_arns.is_none()`.
    pub fn source_resource_arns(&self) -> &[::std::string::String] {
        self.source_resource_arns.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the backup resources.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.backup_resource_arns.is_none()`.
    pub fn backup_resource_arns(&self) -> &[::std::string::String] {
        self.backup_resource_arns.as_deref().unwrap_or_default()
    }
    /// <p>These are one or more tags on the backup (recovery point).</p>
    pub fn backup_resource_tags(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::option::Option<::std::string::String>>> {
        self.backup_resource_tags.as_ref()
    }
}
impl SearchScope {
    /// Creates a new builder-style object to manufacture [`SearchScope`](crate::types::SearchScope).
    pub fn builder() -> crate::types::builders::SearchScopeBuilder {
        crate::types::builders::SearchScopeBuilder::default()
    }
}

/// A builder for [`SearchScope`](crate::types::SearchScope).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SearchScopeBuilder {
    pub(crate) backup_resource_types: ::std::option::Option<::std::vec::Vec<crate::types::ResourceType>>,
    pub(crate) backup_resource_creation_time: ::std::option::Option<crate::types::BackupCreationTimeFilter>,
    pub(crate) source_resource_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) backup_resource_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) backup_resource_tags:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::option::Option<::std::string::String>>>,
}
impl SearchScopeBuilder {
    /// Appends an item to `backup_resource_types`.
    ///
    /// To override the contents of this collection use [`set_backup_resource_types`](Self::set_backup_resource_types).
    ///
    /// <p>The resource types included in a search.</p>
    /// <p>Eligible resource types include S3 and EBS.</p>
    pub fn backup_resource_types(mut self, input: crate::types::ResourceType) -> Self {
        let mut v = self.backup_resource_types.unwrap_or_default();
        v.push(input);
        self.backup_resource_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The resource types included in a search.</p>
    /// <p>Eligible resource types include S3 and EBS.</p>
    pub fn set_backup_resource_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourceType>>) -> Self {
        self.backup_resource_types = input;
        self
    }
    /// <p>The resource types included in a search.</p>
    /// <p>Eligible resource types include S3 and EBS.</p>
    pub fn get_backup_resource_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourceType>> {
        &self.backup_resource_types
    }
    /// <p>This is the time a backup resource was created.</p>
    pub fn backup_resource_creation_time(mut self, input: crate::types::BackupCreationTimeFilter) -> Self {
        self.backup_resource_creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>This is the time a backup resource was created.</p>
    pub fn set_backup_resource_creation_time(mut self, input: ::std::option::Option<crate::types::BackupCreationTimeFilter>) -> Self {
        self.backup_resource_creation_time = input;
        self
    }
    /// <p>This is the time a backup resource was created.</p>
    pub fn get_backup_resource_creation_time(&self) -> &::std::option::Option<crate::types::BackupCreationTimeFilter> {
        &self.backup_resource_creation_time
    }
    /// Appends an item to `source_resource_arns`.
    ///
    /// To override the contents of this collection use [`set_source_resource_arns`](Self::set_source_resource_arns).
    ///
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the source resources.</p>
    pub fn source_resource_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.source_resource_arns.unwrap_or_default();
        v.push(input.into());
        self.source_resource_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the source resources.</p>
    pub fn set_source_resource_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.source_resource_arns = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the source resources.</p>
    pub fn get_source_resource_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.source_resource_arns
    }
    /// Appends an item to `backup_resource_arns`.
    ///
    /// To override the contents of this collection use [`set_backup_resource_arns`](Self::set_backup_resource_arns).
    ///
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the backup resources.</p>
    pub fn backup_resource_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.backup_resource_arns.unwrap_or_default();
        v.push(input.into());
        self.backup_resource_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the backup resources.</p>
    pub fn set_backup_resource_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.backup_resource_arns = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the backup resources.</p>
    pub fn get_backup_resource_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.backup_resource_arns
    }
    /// Adds a key-value pair to `backup_resource_tags`.
    ///
    /// To override the contents of this collection use [`set_backup_resource_tags`](Self::set_backup_resource_tags).
    ///
    /// <p>These are one or more tags on the backup (recovery point).</p>
    pub fn backup_resource_tags(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: ::std::option::Option<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.backup_resource_tags.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.backup_resource_tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>These are one or more tags on the backup (recovery point).</p>
    pub fn set_backup_resource_tags(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::option::Option<::std::string::String>>>,
    ) -> Self {
        self.backup_resource_tags = input;
        self
    }
    /// <p>These are one or more tags on the backup (recovery point).</p>
    pub fn get_backup_resource_tags(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::option::Option<::std::string::String>>> {
        &self.backup_resource_tags
    }
    /// Consumes the builder and constructs a [`SearchScope`](crate::types::SearchScope).
    /// This method will fail if any of the following fields are not set:
    /// - [`backup_resource_types`](crate::types::builders::SearchScopeBuilder::backup_resource_types)
    pub fn build(self) -> ::std::result::Result<crate::types::SearchScope, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SearchScope {
            backup_resource_types: self.backup_resource_types.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "backup_resource_types",
                    "backup_resource_types was not specified but it is required when building SearchScope",
                )
            })?,
            backup_resource_creation_time: self.backup_resource_creation_time,
            source_resource_arns: self.source_resource_arns,
            backup_resource_arns: self.backup_resource_arns,
            backup_resource_tags: self.backup_resource_tags,
        })
    }
}
