// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>These are the items returned in the results of a search of Amazon EBS backup metadata.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EbsResultItem {
    /// <p>These are one or more items in the results that match values for the Amazon Resource Name (ARN) of recovery points returned in a search of Amazon EBS backup metadata.</p>
    pub backup_resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>These are one or more items in the results that match values for the Amazon Resource Name (ARN) of source resources returned in a search of Amazon EBS backup metadata.</p>
    pub source_resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the backup vault.</p>
    pub backup_vault_name: ::std::option::Option<::std::string::String>,
    /// <p>These are one or more items in the results that match values for file systems returned in a search of Amazon EBS backup metadata.</p>
    pub file_system_identifier: ::std::option::Option<::std::string::String>,
    /// <p>These are one or more items in the results that match values for file paths returned in a search of Amazon EBS backup metadata.</p>
    pub file_path: ::std::option::Option<::std::string::String>,
    /// <p>These are one or more items in the results that match values for file sizes returned in a search of Amazon EBS backup metadata.</p>
    pub file_size: ::std::option::Option<i64>,
    /// <p>These are one or more items in the results that match values for creation times returned in a search of Amazon EBS backup metadata.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>These are one or more items in the results that match values for Last Modified Time returned in a search of Amazon EBS backup metadata.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl EbsResultItem {
    /// <p>These are one or more items in the results that match values for the Amazon Resource Name (ARN) of recovery points returned in a search of Amazon EBS backup metadata.</p>
    pub fn backup_resource_arn(&self) -> ::std::option::Option<&str> {
        self.backup_resource_arn.as_deref()
    }
    /// <p>These are one or more items in the results that match values for the Amazon Resource Name (ARN) of source resources returned in a search of Amazon EBS backup metadata.</p>
    pub fn source_resource_arn(&self) -> ::std::option::Option<&str> {
        self.source_resource_arn.as_deref()
    }
    /// <p>The name of the backup vault.</p>
    pub fn backup_vault_name(&self) -> ::std::option::Option<&str> {
        self.backup_vault_name.as_deref()
    }
    /// <p>These are one or more items in the results that match values for file systems returned in a search of Amazon EBS backup metadata.</p>
    pub fn file_system_identifier(&self) -> ::std::option::Option<&str> {
        self.file_system_identifier.as_deref()
    }
    /// <p>These are one or more items in the results that match values for file paths returned in a search of Amazon EBS backup metadata.</p>
    pub fn file_path(&self) -> ::std::option::Option<&str> {
        self.file_path.as_deref()
    }
    /// <p>These are one or more items in the results that match values for file sizes returned in a search of Amazon EBS backup metadata.</p>
    pub fn file_size(&self) -> ::std::option::Option<i64> {
        self.file_size
    }
    /// <p>These are one or more items in the results that match values for creation times returned in a search of Amazon EBS backup metadata.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>These are one or more items in the results that match values for Last Modified Time returned in a search of Amazon EBS backup metadata.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
}
impl ::std::fmt::Debug for EbsResultItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EbsResultItem");
        formatter.field("backup_resource_arn", &self.backup_resource_arn);
        formatter.field("source_resource_arn", &self.source_resource_arn);
        formatter.field("backup_vault_name", &self.backup_vault_name);
        formatter.field("file_system_identifier", &self.file_system_identifier);
        formatter.field("file_path", &"*** Sensitive Data Redacted ***");
        formatter.field("file_size", &self.file_size);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("last_modified_time", &self.last_modified_time);
        formatter.finish()
    }
}
impl EbsResultItem {
    /// Creates a new builder-style object to manufacture [`EbsResultItem`](crate::types::EbsResultItem).
    pub fn builder() -> crate::types::builders::EbsResultItemBuilder {
        crate::types::builders::EbsResultItemBuilder::default()
    }
}

/// A builder for [`EbsResultItem`](crate::types::EbsResultItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct EbsResultItemBuilder {
    pub(crate) backup_resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) source_resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) backup_vault_name: ::std::option::Option<::std::string::String>,
    pub(crate) file_system_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) file_path: ::std::option::Option<::std::string::String>,
    pub(crate) file_size: ::std::option::Option<i64>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl EbsResultItemBuilder {
    /// <p>These are one or more items in the results that match values for the Amazon Resource Name (ARN) of recovery points returned in a search of Amazon EBS backup metadata.</p>
    pub fn backup_resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>These are one or more items in the results that match values for the Amazon Resource Name (ARN) of recovery points returned in a search of Amazon EBS backup metadata.</p>
    pub fn set_backup_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_resource_arn = input;
        self
    }
    /// <p>These are one or more items in the results that match values for the Amazon Resource Name (ARN) of recovery points returned in a search of Amazon EBS backup metadata.</p>
    pub fn get_backup_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_resource_arn
    }
    /// <p>These are one or more items in the results that match values for the Amazon Resource Name (ARN) of source resources returned in a search of Amazon EBS backup metadata.</p>
    pub fn source_resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>These are one or more items in the results that match values for the Amazon Resource Name (ARN) of source resources returned in a search of Amazon EBS backup metadata.</p>
    pub fn set_source_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_resource_arn = input;
        self
    }
    /// <p>These are one or more items in the results that match values for the Amazon Resource Name (ARN) of source resources returned in a search of Amazon EBS backup metadata.</p>
    pub fn get_source_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_resource_arn
    }
    /// <p>The name of the backup vault.</p>
    pub fn backup_vault_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_vault_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the backup vault.</p>
    pub fn set_backup_vault_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_vault_name = input;
        self
    }
    /// <p>The name of the backup vault.</p>
    pub fn get_backup_vault_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_vault_name
    }
    /// <p>These are one or more items in the results that match values for file systems returned in a search of Amazon EBS backup metadata.</p>
    pub fn file_system_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_system_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>These are one or more items in the results that match values for file systems returned in a search of Amazon EBS backup metadata.</p>
    pub fn set_file_system_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_system_identifier = input;
        self
    }
    /// <p>These are one or more items in the results that match values for file systems returned in a search of Amazon EBS backup metadata.</p>
    pub fn get_file_system_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_system_identifier
    }
    /// <p>These are one or more items in the results that match values for file paths returned in a search of Amazon EBS backup metadata.</p>
    pub fn file_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>These are one or more items in the results that match values for file paths returned in a search of Amazon EBS backup metadata.</p>
    pub fn set_file_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_path = input;
        self
    }
    /// <p>These are one or more items in the results that match values for file paths returned in a search of Amazon EBS backup metadata.</p>
    pub fn get_file_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_path
    }
    /// <p>These are one or more items in the results that match values for file sizes returned in a search of Amazon EBS backup metadata.</p>
    pub fn file_size(mut self, input: i64) -> Self {
        self.file_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>These are one or more items in the results that match values for file sizes returned in a search of Amazon EBS backup metadata.</p>
    pub fn set_file_size(mut self, input: ::std::option::Option<i64>) -> Self {
        self.file_size = input;
        self
    }
    /// <p>These are one or more items in the results that match values for file sizes returned in a search of Amazon EBS backup metadata.</p>
    pub fn get_file_size(&self) -> &::std::option::Option<i64> {
        &self.file_size
    }
    /// <p>These are one or more items in the results that match values for creation times returned in a search of Amazon EBS backup metadata.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>These are one or more items in the results that match values for creation times returned in a search of Amazon EBS backup metadata.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>These are one or more items in the results that match values for creation times returned in a search of Amazon EBS backup metadata.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>These are one or more items in the results that match values for Last Modified Time returned in a search of Amazon EBS backup metadata.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>These are one or more items in the results that match values for Last Modified Time returned in a search of Amazon EBS backup metadata.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>These are one or more items in the results that match values for Last Modified Time returned in a search of Amazon EBS backup metadata.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// Consumes the builder and constructs a [`EbsResultItem`](crate::types::EbsResultItem).
    pub fn build(self) -> crate::types::EbsResultItem {
        crate::types::EbsResultItem {
            backup_resource_arn: self.backup_resource_arn,
            source_resource_arn: self.source_resource_arn,
            backup_vault_name: self.backup_vault_name,
            file_system_identifier: self.file_system_identifier,
            file_path: self.file_path,
            file_size: self.file_size,
            creation_time: self.creation_time,
            last_modified_time: self.last_modified_time,
        }
    }
}
impl ::std::fmt::Debug for EbsResultItemBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EbsResultItemBuilder");
        formatter.field("backup_resource_arn", &self.backup_resource_arn);
        formatter.field("source_resource_arn", &self.source_resource_arn);
        formatter.field("backup_vault_name", &self.backup_vault_name);
        formatter.field("file_system_identifier", &self.file_system_identifier);
        formatter.field("file_path", &"*** Sensitive Data Redacted ***");
        formatter.field("file_size", &self.file_size);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("last_modified_time", &self.last_modified_time);
        formatter.finish()
    }
}
