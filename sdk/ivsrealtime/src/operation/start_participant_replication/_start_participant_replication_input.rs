// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartParticipantReplicationInput {
    /// <p>ARN of the stage where the participant is publishing.</p>
    pub source_stage_arn: ::std::option::Option<::std::string::String>,
    /// <p>ARN of the stage to which the participant will be replicated.</p>
    pub destination_stage_arn: ::std::option::Option<::std::string::String>,
    /// <p>Participant ID of the publisher that will be replicated. This is assigned by IVS and returned by <code>CreateParticipantToken</code> or the <code>jti</code> (JWT ID) used to <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/getting-started-distribute-tokens.html#getting-started-distribute-tokens-self-signed">create a self signed token</a>.</p>
    pub participant_id: ::std::option::Option<::std::string::String>,
    /// <p>If the participant disconnects and then reconnects within the specified interval, replication will continue to be <code>ACTIVE</code>. Default: 0.</p>
    pub reconnect_window_seconds: ::std::option::Option<i32>,
    /// <p>Application-provided attributes to set on the replicated participant in the destination stage. Map keys and values can contain UTF-8 encoded text. The maximum length of this field is 1 KB total. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i></p>
    /// <p>These attributes are merged with any attributes set for this participant when creating the token. If there is overlap in keys, the values in these attributes are replaced.</p>
    pub attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl StartParticipantReplicationInput {
    /// <p>ARN of the stage where the participant is publishing.</p>
    pub fn source_stage_arn(&self) -> ::std::option::Option<&str> {
        self.source_stage_arn.as_deref()
    }
    /// <p>ARN of the stage to which the participant will be replicated.</p>
    pub fn destination_stage_arn(&self) -> ::std::option::Option<&str> {
        self.destination_stage_arn.as_deref()
    }
    /// <p>Participant ID of the publisher that will be replicated. This is assigned by IVS and returned by <code>CreateParticipantToken</code> or the <code>jti</code> (JWT ID) used to <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/getting-started-distribute-tokens.html#getting-started-distribute-tokens-self-signed">create a self signed token</a>.</p>
    pub fn participant_id(&self) -> ::std::option::Option<&str> {
        self.participant_id.as_deref()
    }
    /// <p>If the participant disconnects and then reconnects within the specified interval, replication will continue to be <code>ACTIVE</code>. Default: 0.</p>
    pub fn reconnect_window_seconds(&self) -> ::std::option::Option<i32> {
        self.reconnect_window_seconds
    }
    /// <p>Application-provided attributes to set on the replicated participant in the destination stage. Map keys and values can contain UTF-8 encoded text. The maximum length of this field is 1 KB total. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i></p>
    /// <p>These attributes are merged with any attributes set for this participant when creating the token. If there is overlap in keys, the values in these attributes are replaced.</p>
    pub fn attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.attributes.as_ref()
    }
}
impl StartParticipantReplicationInput {
    /// Creates a new builder-style object to manufacture [`StartParticipantReplicationInput`](crate::operation::start_participant_replication::StartParticipantReplicationInput).
    pub fn builder() -> crate::operation::start_participant_replication::builders::StartParticipantReplicationInputBuilder {
        crate::operation::start_participant_replication::builders::StartParticipantReplicationInputBuilder::default()
    }
}

/// A builder for [`StartParticipantReplicationInput`](crate::operation::start_participant_replication::StartParticipantReplicationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartParticipantReplicationInputBuilder {
    pub(crate) source_stage_arn: ::std::option::Option<::std::string::String>,
    pub(crate) destination_stage_arn: ::std::option::Option<::std::string::String>,
    pub(crate) participant_id: ::std::option::Option<::std::string::String>,
    pub(crate) reconnect_window_seconds: ::std::option::Option<i32>,
    pub(crate) attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl StartParticipantReplicationInputBuilder {
    /// <p>ARN of the stage where the participant is publishing.</p>
    /// This field is required.
    pub fn source_stage_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_stage_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the stage where the participant is publishing.</p>
    pub fn set_source_stage_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_stage_arn = input;
        self
    }
    /// <p>ARN of the stage where the participant is publishing.</p>
    pub fn get_source_stage_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_stage_arn
    }
    /// <p>ARN of the stage to which the participant will be replicated.</p>
    /// This field is required.
    pub fn destination_stage_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_stage_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the stage to which the participant will be replicated.</p>
    pub fn set_destination_stage_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_stage_arn = input;
        self
    }
    /// <p>ARN of the stage to which the participant will be replicated.</p>
    pub fn get_destination_stage_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_stage_arn
    }
    /// <p>Participant ID of the publisher that will be replicated. This is assigned by IVS and returned by <code>CreateParticipantToken</code> or the <code>jti</code> (JWT ID) used to <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/getting-started-distribute-tokens.html#getting-started-distribute-tokens-self-signed">create a self signed token</a>.</p>
    /// This field is required.
    pub fn participant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.participant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Participant ID of the publisher that will be replicated. This is assigned by IVS and returned by <code>CreateParticipantToken</code> or the <code>jti</code> (JWT ID) used to <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/getting-started-distribute-tokens.html#getting-started-distribute-tokens-self-signed">create a self signed token</a>.</p>
    pub fn set_participant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.participant_id = input;
        self
    }
    /// <p>Participant ID of the publisher that will be replicated. This is assigned by IVS and returned by <code>CreateParticipantToken</code> or the <code>jti</code> (JWT ID) used to <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/getting-started-distribute-tokens.html#getting-started-distribute-tokens-self-signed">create a self signed token</a>.</p>
    pub fn get_participant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.participant_id
    }
    /// <p>If the participant disconnects and then reconnects within the specified interval, replication will continue to be <code>ACTIVE</code>. Default: 0.</p>
    pub fn reconnect_window_seconds(mut self, input: i32) -> Self {
        self.reconnect_window_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the participant disconnects and then reconnects within the specified interval, replication will continue to be <code>ACTIVE</code>. Default: 0.</p>
    pub fn set_reconnect_window_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.reconnect_window_seconds = input;
        self
    }
    /// <p>If the participant disconnects and then reconnects within the specified interval, replication will continue to be <code>ACTIVE</code>. Default: 0.</p>
    pub fn get_reconnect_window_seconds(&self) -> &::std::option::Option<i32> {
        &self.reconnect_window_seconds
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>Application-provided attributes to set on the replicated participant in the destination stage. Map keys and values can contain UTF-8 encoded text. The maximum length of this field is 1 KB total. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i></p>
    /// <p>These attributes are merged with any attributes set for this participant when creating the token. If there is overlap in keys, the values in these attributes are replaced.</p>
    pub fn attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Application-provided attributes to set on the replicated participant in the destination stage. Map keys and values can contain UTF-8 encoded text. The maximum length of this field is 1 KB total. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i></p>
    /// <p>These attributes are merged with any attributes set for this participant when creating the token. If there is overlap in keys, the values in these attributes are replaced.</p>
    pub fn set_attributes(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.attributes = input;
        self
    }
    /// <p>Application-provided attributes to set on the replicated participant in the destination stage. Map keys and values can contain UTF-8 encoded text. The maximum length of this field is 1 KB total. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i></p>
    /// <p>These attributes are merged with any attributes set for this participant when creating the token. If there is overlap in keys, the values in these attributes are replaced.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.attributes
    }
    /// Consumes the builder and constructs a [`StartParticipantReplicationInput`](crate::operation::start_participant_replication::StartParticipantReplicationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_participant_replication::StartParticipantReplicationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::start_participant_replication::StartParticipantReplicationInput {
            source_stage_arn: self.source_stage_arn,
            destination_stage_arn: self.destination_stage_arn,
            participant_id: self.participant_id,
            reconnect_window_seconds: self.reconnect_window_seconds,
            attributes: self.attributes,
        })
    }
}
