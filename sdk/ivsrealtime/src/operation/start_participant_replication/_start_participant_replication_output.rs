// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartParticipantReplicationOutput {
    /// <p></p>
    pub access_control_allow_origin: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub access_control_expose_headers: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub cache_control: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub content_security_policy: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub strict_transport_security: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub x_content_type_options: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub x_frame_options: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl StartParticipantReplicationOutput {
    /// <p></p>
    pub fn access_control_allow_origin(&self) -> ::std::option::Option<&str> {
        self.access_control_allow_origin.as_deref()
    }
    /// <p></p>
    pub fn access_control_expose_headers(&self) -> ::std::option::Option<&str> {
        self.access_control_expose_headers.as_deref()
    }
    /// <p></p>
    pub fn cache_control(&self) -> ::std::option::Option<&str> {
        self.cache_control.as_deref()
    }
    /// <p></p>
    pub fn content_security_policy(&self) -> ::std::option::Option<&str> {
        self.content_security_policy.as_deref()
    }
    /// <p></p>
    pub fn strict_transport_security(&self) -> ::std::option::Option<&str> {
        self.strict_transport_security.as_deref()
    }
    /// <p></p>
    pub fn x_content_type_options(&self) -> ::std::option::Option<&str> {
        self.x_content_type_options.as_deref()
    }
    /// <p></p>
    pub fn x_frame_options(&self) -> ::std::option::Option<&str> {
        self.x_frame_options.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for StartParticipantReplicationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartParticipantReplicationOutput {
    /// Creates a new builder-style object to manufacture [`StartParticipantReplicationOutput`](crate::operation::start_participant_replication::StartParticipantReplicationOutput).
    pub fn builder() -> crate::operation::start_participant_replication::builders::StartParticipantReplicationOutputBuilder {
        crate::operation::start_participant_replication::builders::StartParticipantReplicationOutputBuilder::default()
    }
}

/// A builder for [`StartParticipantReplicationOutput`](crate::operation::start_participant_replication::StartParticipantReplicationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartParticipantReplicationOutputBuilder {
    pub(crate) access_control_allow_origin: ::std::option::Option<::std::string::String>,
    pub(crate) access_control_expose_headers: ::std::option::Option<::std::string::String>,
    pub(crate) cache_control: ::std::option::Option<::std::string::String>,
    pub(crate) content_security_policy: ::std::option::Option<::std::string::String>,
    pub(crate) strict_transport_security: ::std::option::Option<::std::string::String>,
    pub(crate) x_content_type_options: ::std::option::Option<::std::string::String>,
    pub(crate) x_frame_options: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl StartParticipantReplicationOutputBuilder {
    /// <p></p>
    pub fn access_control_allow_origin(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_control_allow_origin = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_access_control_allow_origin(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_control_allow_origin = input;
        self
    }
    /// <p></p>
    pub fn get_access_control_allow_origin(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_control_allow_origin
    }
    /// <p></p>
    pub fn access_control_expose_headers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_control_expose_headers = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_access_control_expose_headers(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_control_expose_headers = input;
        self
    }
    /// <p></p>
    pub fn get_access_control_expose_headers(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_control_expose_headers
    }
    /// <p></p>
    pub fn cache_control(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cache_control = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_cache_control(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cache_control = input;
        self
    }
    /// <p></p>
    pub fn get_cache_control(&self) -> &::std::option::Option<::std::string::String> {
        &self.cache_control
    }
    /// <p></p>
    pub fn content_security_policy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_security_policy = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_content_security_policy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_security_policy = input;
        self
    }
    /// <p></p>
    pub fn get_content_security_policy(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_security_policy
    }
    /// <p></p>
    pub fn strict_transport_security(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.strict_transport_security = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_strict_transport_security(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.strict_transport_security = input;
        self
    }
    /// <p></p>
    pub fn get_strict_transport_security(&self) -> &::std::option::Option<::std::string::String> {
        &self.strict_transport_security
    }
    /// <p></p>
    pub fn x_content_type_options(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.x_content_type_options = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_x_content_type_options(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.x_content_type_options = input;
        self
    }
    /// <p></p>
    pub fn get_x_content_type_options(&self) -> &::std::option::Option<::std::string::String> {
        &self.x_content_type_options
    }
    /// <p></p>
    pub fn x_frame_options(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.x_frame_options = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_x_frame_options(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.x_frame_options = input;
        self
    }
    /// <p></p>
    pub fn get_x_frame_options(&self) -> &::std::option::Option<::std::string::String> {
        &self.x_frame_options
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartParticipantReplicationOutput`](crate::operation::start_participant_replication::StartParticipantReplicationOutput).
    pub fn build(self) -> crate::operation::start_participant_replication::StartParticipantReplicationOutput {
        crate::operation::start_participant_replication::StartParticipantReplicationOutput {
            access_control_allow_origin: self.access_control_allow_origin,
            access_control_expose_headers: self.access_control_expose_headers,
            cache_control: self.cache_control,
            content_security_policy: self.content_security_policy,
            strict_transport_security: self.strict_transport_security,
            x_content_type_options: self.x_content_type_options,
            x_frame_options: self.x_frame_options,
            _request_id: self._request_id,
        }
    }
}
