// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListParticipantReplicasInput {
    /// <p>ARN of the stage where the participant is publishing.</p>
    pub source_stage_arn: ::std::option::Option<::std::string::String>,
    /// <p>Participant ID of the publisher that has been replicated. This is assigned by IVS and returned by <code>CreateParticipantToken</code> or the <code>jti</code> (JWT ID) used to <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/getting-started-distribute-tokens.html#getting-started-distribute-tokens-self-signed">create a self signed token</a>.</p>
    pub participant_id: ::std::option::Option<::std::string::String>,
    /// <p>The first participant to retrieve. This is used for pagination; see the <code>nextToken</code> response field.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Maximum number of results to return. Default: 50.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListParticipantReplicasInput {
    /// <p>ARN of the stage where the participant is publishing.</p>
    pub fn source_stage_arn(&self) -> ::std::option::Option<&str> {
        self.source_stage_arn.as_deref()
    }
    /// <p>Participant ID of the publisher that has been replicated. This is assigned by IVS and returned by <code>CreateParticipantToken</code> or the <code>jti</code> (JWT ID) used to <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/getting-started-distribute-tokens.html#getting-started-distribute-tokens-self-signed">create a self signed token</a>.</p>
    pub fn participant_id(&self) -> ::std::option::Option<&str> {
        self.participant_id.as_deref()
    }
    /// <p>The first participant to retrieve. This is used for pagination; see the <code>nextToken</code> response field.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Maximum number of results to return. Default: 50.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListParticipantReplicasInput {
    /// Creates a new builder-style object to manufacture [`ListParticipantReplicasInput`](crate::operation::list_participant_replicas::ListParticipantReplicasInput).
    pub fn builder() -> crate::operation::list_participant_replicas::builders::ListParticipantReplicasInputBuilder {
        crate::operation::list_participant_replicas::builders::ListParticipantReplicasInputBuilder::default()
    }
}

/// A builder for [`ListParticipantReplicasInput`](crate::operation::list_participant_replicas::ListParticipantReplicasInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListParticipantReplicasInputBuilder {
    pub(crate) source_stage_arn: ::std::option::Option<::std::string::String>,
    pub(crate) participant_id: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListParticipantReplicasInputBuilder {
    /// <p>ARN of the stage where the participant is publishing.</p>
    /// This field is required.
    pub fn source_stage_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_stage_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the stage where the participant is publishing.</p>
    pub fn set_source_stage_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_stage_arn = input;
        self
    }
    /// <p>ARN of the stage where the participant is publishing.</p>
    pub fn get_source_stage_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_stage_arn
    }
    /// <p>Participant ID of the publisher that has been replicated. This is assigned by IVS and returned by <code>CreateParticipantToken</code> or the <code>jti</code> (JWT ID) used to <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/getting-started-distribute-tokens.html#getting-started-distribute-tokens-self-signed">create a self signed token</a>.</p>
    /// This field is required.
    pub fn participant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.participant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Participant ID of the publisher that has been replicated. This is assigned by IVS and returned by <code>CreateParticipantToken</code> or the <code>jti</code> (JWT ID) used to <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/getting-started-distribute-tokens.html#getting-started-distribute-tokens-self-signed">create a self signed token</a>.</p>
    pub fn set_participant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.participant_id = input;
        self
    }
    /// <p>Participant ID of the publisher that has been replicated. This is assigned by IVS and returned by <code>CreateParticipantToken</code> or the <code>jti</code> (JWT ID) used to <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/getting-started-distribute-tokens.html#getting-started-distribute-tokens-self-signed">create a self signed token</a>.</p>
    pub fn get_participant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.participant_id
    }
    /// <p>The first participant to retrieve. This is used for pagination; see the <code>nextToken</code> response field.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The first participant to retrieve. This is used for pagination; see the <code>nextToken</code> response field.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The first participant to retrieve. This is used for pagination; see the <code>nextToken</code> response field.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>Maximum number of results to return. Default: 50.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maximum number of results to return. Default: 50.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Maximum number of results to return. Default: 50.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListParticipantReplicasInput`](crate::operation::list_participant_replicas::ListParticipantReplicasInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_participant_replicas::ListParticipantReplicasInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_participant_replicas::ListParticipantReplicasInput {
            source_stage_arn: self.source_stage_arn,
            participant_id: self.participant_id,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
