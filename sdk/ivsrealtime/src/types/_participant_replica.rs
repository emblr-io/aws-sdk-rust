// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the replicated destination stage for a participant.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParticipantReplica {
    /// <p>ARN of the stage from which this participant is replicated.</p>
    pub source_stage_arn: ::std::string::String,
    /// <p>Participant ID of the publisher that will be replicated. This is assigned by IVS and returned by <code>CreateParticipantToken</code> or the <code>jti</code> (JWT ID) used to <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/getting-started-distribute-tokens.html#getting-started-distribute-tokens-self-signed"> create a self signed token</a>.</p>
    pub participant_id: ::std::string::String,
    /// <p>ID of the session within the source stage.</p>
    pub source_session_id: ::std::string::String,
    /// <p>ARN of the stage where the participant is replicated.</p>
    pub destination_stage_arn: ::std::string::String,
    /// <p>ID of the session within the destination stage.</p>
    pub destination_session_id: ::std::string::String,
    /// <p>Replica’s current replication state.</p>
    pub replication_state: crate::types::ReplicationState,
}
impl ParticipantReplica {
    /// <p>ARN of the stage from which this participant is replicated.</p>
    pub fn source_stage_arn(&self) -> &str {
        use std::ops::Deref;
        self.source_stage_arn.deref()
    }
    /// <p>Participant ID of the publisher that will be replicated. This is assigned by IVS and returned by <code>CreateParticipantToken</code> or the <code>jti</code> (JWT ID) used to <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/getting-started-distribute-tokens.html#getting-started-distribute-tokens-self-signed"> create a self signed token</a>.</p>
    pub fn participant_id(&self) -> &str {
        use std::ops::Deref;
        self.participant_id.deref()
    }
    /// <p>ID of the session within the source stage.</p>
    pub fn source_session_id(&self) -> &str {
        use std::ops::Deref;
        self.source_session_id.deref()
    }
    /// <p>ARN of the stage where the participant is replicated.</p>
    pub fn destination_stage_arn(&self) -> &str {
        use std::ops::Deref;
        self.destination_stage_arn.deref()
    }
    /// <p>ID of the session within the destination stage.</p>
    pub fn destination_session_id(&self) -> &str {
        use std::ops::Deref;
        self.destination_session_id.deref()
    }
    /// <p>Replica’s current replication state.</p>
    pub fn replication_state(&self) -> &crate::types::ReplicationState {
        &self.replication_state
    }
}
impl ParticipantReplica {
    /// Creates a new builder-style object to manufacture [`ParticipantReplica`](crate::types::ParticipantReplica).
    pub fn builder() -> crate::types::builders::ParticipantReplicaBuilder {
        crate::types::builders::ParticipantReplicaBuilder::default()
    }
}

/// A builder for [`ParticipantReplica`](crate::types::ParticipantReplica).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ParticipantReplicaBuilder {
    pub(crate) source_stage_arn: ::std::option::Option<::std::string::String>,
    pub(crate) participant_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_session_id: ::std::option::Option<::std::string::String>,
    pub(crate) destination_stage_arn: ::std::option::Option<::std::string::String>,
    pub(crate) destination_session_id: ::std::option::Option<::std::string::String>,
    pub(crate) replication_state: ::std::option::Option<crate::types::ReplicationState>,
}
impl ParticipantReplicaBuilder {
    /// <p>ARN of the stage from which this participant is replicated.</p>
    /// This field is required.
    pub fn source_stage_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_stage_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the stage from which this participant is replicated.</p>
    pub fn set_source_stage_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_stage_arn = input;
        self
    }
    /// <p>ARN of the stage from which this participant is replicated.</p>
    pub fn get_source_stage_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_stage_arn
    }
    /// <p>Participant ID of the publisher that will be replicated. This is assigned by IVS and returned by <code>CreateParticipantToken</code> or the <code>jti</code> (JWT ID) used to <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/getting-started-distribute-tokens.html#getting-started-distribute-tokens-self-signed"> create a self signed token</a>.</p>
    /// This field is required.
    pub fn participant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.participant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Participant ID of the publisher that will be replicated. This is assigned by IVS and returned by <code>CreateParticipantToken</code> or the <code>jti</code> (JWT ID) used to <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/getting-started-distribute-tokens.html#getting-started-distribute-tokens-self-signed"> create a self signed token</a>.</p>
    pub fn set_participant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.participant_id = input;
        self
    }
    /// <p>Participant ID of the publisher that will be replicated. This is assigned by IVS and returned by <code>CreateParticipantToken</code> or the <code>jti</code> (JWT ID) used to <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/getting-started-distribute-tokens.html#getting-started-distribute-tokens-self-signed"> create a self signed token</a>.</p>
    pub fn get_participant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.participant_id
    }
    /// <p>ID of the session within the source stage.</p>
    /// This field is required.
    pub fn source_session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the session within the source stage.</p>
    pub fn set_source_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_session_id = input;
        self
    }
    /// <p>ID of the session within the source stage.</p>
    pub fn get_source_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_session_id
    }
    /// <p>ARN of the stage where the participant is replicated.</p>
    /// This field is required.
    pub fn destination_stage_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_stage_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the stage where the participant is replicated.</p>
    pub fn set_destination_stage_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_stage_arn = input;
        self
    }
    /// <p>ARN of the stage where the participant is replicated.</p>
    pub fn get_destination_stage_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_stage_arn
    }
    /// <p>ID of the session within the destination stage.</p>
    /// This field is required.
    pub fn destination_session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the session within the destination stage.</p>
    pub fn set_destination_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_session_id = input;
        self
    }
    /// <p>ID of the session within the destination stage.</p>
    pub fn get_destination_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_session_id
    }
    /// <p>Replica’s current replication state.</p>
    /// This field is required.
    pub fn replication_state(mut self, input: crate::types::ReplicationState) -> Self {
        self.replication_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Replica’s current replication state.</p>
    pub fn set_replication_state(mut self, input: ::std::option::Option<crate::types::ReplicationState>) -> Self {
        self.replication_state = input;
        self
    }
    /// <p>Replica’s current replication state.</p>
    pub fn get_replication_state(&self) -> &::std::option::Option<crate::types::ReplicationState> {
        &self.replication_state
    }
    /// Consumes the builder and constructs a [`ParticipantReplica`](crate::types::ParticipantReplica).
    /// This method will fail if any of the following fields are not set:
    /// - [`source_stage_arn`](crate::types::builders::ParticipantReplicaBuilder::source_stage_arn)
    /// - [`participant_id`](crate::types::builders::ParticipantReplicaBuilder::participant_id)
    /// - [`source_session_id`](crate::types::builders::ParticipantReplicaBuilder::source_session_id)
    /// - [`destination_stage_arn`](crate::types::builders::ParticipantReplicaBuilder::destination_stage_arn)
    /// - [`destination_session_id`](crate::types::builders::ParticipantReplicaBuilder::destination_session_id)
    /// - [`replication_state`](crate::types::builders::ParticipantReplicaBuilder::replication_state)
    pub fn build(self) -> ::std::result::Result<crate::types::ParticipantReplica, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ParticipantReplica {
            source_stage_arn: self.source_stage_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_stage_arn",
                    "source_stage_arn was not specified but it is required when building ParticipantReplica",
                )
            })?,
            participant_id: self.participant_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "participant_id",
                    "participant_id was not specified but it is required when building ParticipantReplica",
                )
            })?,
            source_session_id: self.source_session_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_session_id",
                    "source_session_id was not specified but it is required when building ParticipantReplica",
                )
            })?,
            destination_stage_arn: self.destination_stage_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "destination_stage_arn",
                    "destination_stage_arn was not specified but it is required when building ParticipantReplica",
                )
            })?,
            destination_session_id: self.destination_session_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "destination_session_id",
                    "destination_session_id was not specified but it is required when building ParticipantReplica",
                )
            })?,
            replication_state: self.replication_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "replication_state",
                    "replication_state was not specified but it is required when building ParticipantReplica",
                )
            })?,
        })
    }
}
