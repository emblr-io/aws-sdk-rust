// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary object describing a participant that has joined a stage.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParticipantSummary {
    /// <p>Unique identifier for this participant, assigned by IVS.</p>
    pub participant_id: ::std::option::Option<::std::string::String>,
    /// <p>Customer-assigned name to help identify the token; this can be used to link a participant to a user in the customer’s own systems. This can be any UTF-8 encoded text. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information</i>.</p>
    pub user_id: ::std::option::Option<::std::string::String>,
    /// <p>Whether the participant is connected to or disconnected from the stage.</p>
    pub state: ::std::option::Option<crate::types::ParticipantState>,
    /// <p>ISO 8601 timestamp (returned as a string) when the participant first joined the stage session.</p>
    pub first_join_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Whether the participant ever published to the stage session.</p>
    pub published: bool,
    /// <p>The participant’s recording state.</p>
    pub recording_state: ::std::option::Option<crate::types::ParticipantRecordingState>,
    /// <p>Indicates if the participant has been replicated to another stage or is a replica from another stage. Default: <code>NONE</code>.</p>
    pub replication_type: ::std::option::Option<crate::types::ReplicationType>,
    /// <p>The participant's replication state.</p>
    pub replication_state: ::std::option::Option<crate::types::ReplicationState>,
    /// <p>ARN of the stage from which this participant is replicated.</p>
    pub source_stage_arn: ::std::option::Option<::std::string::String>,
    /// <p>ID of the session within the source stage, if <code>replicationType</code> is <code>REPLICA</code>.</p>
    pub source_session_id: ::std::option::Option<::std::string::String>,
}
impl ParticipantSummary {
    /// <p>Unique identifier for this participant, assigned by IVS.</p>
    pub fn participant_id(&self) -> ::std::option::Option<&str> {
        self.participant_id.as_deref()
    }
    /// <p>Customer-assigned name to help identify the token; this can be used to link a participant to a user in the customer’s own systems. This can be any UTF-8 encoded text. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information</i>.</p>
    pub fn user_id(&self) -> ::std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>Whether the participant is connected to or disconnected from the stage.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::ParticipantState> {
        self.state.as_ref()
    }
    /// <p>ISO 8601 timestamp (returned as a string) when the participant first joined the stage session.</p>
    pub fn first_join_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.first_join_time.as_ref()
    }
    /// <p>Whether the participant ever published to the stage session.</p>
    pub fn published(&self) -> bool {
        self.published
    }
    /// <p>The participant’s recording state.</p>
    pub fn recording_state(&self) -> ::std::option::Option<&crate::types::ParticipantRecordingState> {
        self.recording_state.as_ref()
    }
    /// <p>Indicates if the participant has been replicated to another stage or is a replica from another stage. Default: <code>NONE</code>.</p>
    pub fn replication_type(&self) -> ::std::option::Option<&crate::types::ReplicationType> {
        self.replication_type.as_ref()
    }
    /// <p>The participant's replication state.</p>
    pub fn replication_state(&self) -> ::std::option::Option<&crate::types::ReplicationState> {
        self.replication_state.as_ref()
    }
    /// <p>ARN of the stage from which this participant is replicated.</p>
    pub fn source_stage_arn(&self) -> ::std::option::Option<&str> {
        self.source_stage_arn.as_deref()
    }
    /// <p>ID of the session within the source stage, if <code>replicationType</code> is <code>REPLICA</code>.</p>
    pub fn source_session_id(&self) -> ::std::option::Option<&str> {
        self.source_session_id.as_deref()
    }
}
impl ParticipantSummary {
    /// Creates a new builder-style object to manufacture [`ParticipantSummary`](crate::types::ParticipantSummary).
    pub fn builder() -> crate::types::builders::ParticipantSummaryBuilder {
        crate::types::builders::ParticipantSummaryBuilder::default()
    }
}

/// A builder for [`ParticipantSummary`](crate::types::ParticipantSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ParticipantSummaryBuilder {
    pub(crate) participant_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::ParticipantState>,
    pub(crate) first_join_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) published: ::std::option::Option<bool>,
    pub(crate) recording_state: ::std::option::Option<crate::types::ParticipantRecordingState>,
    pub(crate) replication_type: ::std::option::Option<crate::types::ReplicationType>,
    pub(crate) replication_state: ::std::option::Option<crate::types::ReplicationState>,
    pub(crate) source_stage_arn: ::std::option::Option<::std::string::String>,
    pub(crate) source_session_id: ::std::option::Option<::std::string::String>,
}
impl ParticipantSummaryBuilder {
    /// <p>Unique identifier for this participant, assigned by IVS.</p>
    pub fn participant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.participant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier for this participant, assigned by IVS.</p>
    pub fn set_participant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.participant_id = input;
        self
    }
    /// <p>Unique identifier for this participant, assigned by IVS.</p>
    pub fn get_participant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.participant_id
    }
    /// <p>Customer-assigned name to help identify the token; this can be used to link a participant to a user in the customer’s own systems. This can be any UTF-8 encoded text. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information</i>.</p>
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Customer-assigned name to help identify the token; this can be used to link a participant to a user in the customer’s own systems. This can be any UTF-8 encoded text. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information</i>.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>Customer-assigned name to help identify the token; this can be used to link a participant to a user in the customer’s own systems. This can be any UTF-8 encoded text. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information</i>.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// <p>Whether the participant is connected to or disconnected from the stage.</p>
    pub fn state(mut self, input: crate::types::ParticipantState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the participant is connected to or disconnected from the stage.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::ParticipantState>) -> Self {
        self.state = input;
        self
    }
    /// <p>Whether the participant is connected to or disconnected from the stage.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::ParticipantState> {
        &self.state
    }
    /// <p>ISO 8601 timestamp (returned as a string) when the participant first joined the stage session.</p>
    pub fn first_join_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.first_join_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>ISO 8601 timestamp (returned as a string) when the participant first joined the stage session.</p>
    pub fn set_first_join_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.first_join_time = input;
        self
    }
    /// <p>ISO 8601 timestamp (returned as a string) when the participant first joined the stage session.</p>
    pub fn get_first_join_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.first_join_time
    }
    /// <p>Whether the participant ever published to the stage session.</p>
    pub fn published(mut self, input: bool) -> Self {
        self.published = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the participant ever published to the stage session.</p>
    pub fn set_published(mut self, input: ::std::option::Option<bool>) -> Self {
        self.published = input;
        self
    }
    /// <p>Whether the participant ever published to the stage session.</p>
    pub fn get_published(&self) -> &::std::option::Option<bool> {
        &self.published
    }
    /// <p>The participant’s recording state.</p>
    pub fn recording_state(mut self, input: crate::types::ParticipantRecordingState) -> Self {
        self.recording_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The participant’s recording state.</p>
    pub fn set_recording_state(mut self, input: ::std::option::Option<crate::types::ParticipantRecordingState>) -> Self {
        self.recording_state = input;
        self
    }
    /// <p>The participant’s recording state.</p>
    pub fn get_recording_state(&self) -> &::std::option::Option<crate::types::ParticipantRecordingState> {
        &self.recording_state
    }
    /// <p>Indicates if the participant has been replicated to another stage or is a replica from another stage. Default: <code>NONE</code>.</p>
    pub fn replication_type(mut self, input: crate::types::ReplicationType) -> Self {
        self.replication_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates if the participant has been replicated to another stage or is a replica from another stage. Default: <code>NONE</code>.</p>
    pub fn set_replication_type(mut self, input: ::std::option::Option<crate::types::ReplicationType>) -> Self {
        self.replication_type = input;
        self
    }
    /// <p>Indicates if the participant has been replicated to another stage or is a replica from another stage. Default: <code>NONE</code>.</p>
    pub fn get_replication_type(&self) -> &::std::option::Option<crate::types::ReplicationType> {
        &self.replication_type
    }
    /// <p>The participant's replication state.</p>
    pub fn replication_state(mut self, input: crate::types::ReplicationState) -> Self {
        self.replication_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The participant's replication state.</p>
    pub fn set_replication_state(mut self, input: ::std::option::Option<crate::types::ReplicationState>) -> Self {
        self.replication_state = input;
        self
    }
    /// <p>The participant's replication state.</p>
    pub fn get_replication_state(&self) -> &::std::option::Option<crate::types::ReplicationState> {
        &self.replication_state
    }
    /// <p>ARN of the stage from which this participant is replicated.</p>
    pub fn source_stage_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_stage_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the stage from which this participant is replicated.</p>
    pub fn set_source_stage_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_stage_arn = input;
        self
    }
    /// <p>ARN of the stage from which this participant is replicated.</p>
    pub fn get_source_stage_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_stage_arn
    }
    /// <p>ID of the session within the source stage, if <code>replicationType</code> is <code>REPLICA</code>.</p>
    pub fn source_session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the session within the source stage, if <code>replicationType</code> is <code>REPLICA</code>.</p>
    pub fn set_source_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_session_id = input;
        self
    }
    /// <p>ID of the session within the source stage, if <code>replicationType</code> is <code>REPLICA</code>.</p>
    pub fn get_source_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_session_id
    }
    /// Consumes the builder and constructs a [`ParticipantSummary`](crate::types::ParticipantSummary).
    pub fn build(self) -> crate::types::ParticipantSummary {
        crate::types::ParticipantSummary {
            participant_id: self.participant_id,
            user_id: self.user_id,
            state: self.state,
            first_join_time: self.first_join_time,
            published: self.published.unwrap_or_default(),
            recording_state: self.recording_state,
            replication_type: self.replication_type,
            replication_state: self.replication_state,
            source_stage_arn: self.source_stage_arn,
            source_session_id: self.source_session_id,
        }
    }
}
