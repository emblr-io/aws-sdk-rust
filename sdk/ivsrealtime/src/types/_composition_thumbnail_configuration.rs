// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing a configuration of thumbnails for recorded video for a <code>Composition</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CompositionThumbnailConfiguration {
    /// <p>The targeted thumbnail-generation interval in seconds. Default: 60.</p>
    pub target_interval_seconds: ::std::option::Option<i32>,
    /// <p>Indicates the format in which thumbnails are recorded. <code>SEQUENTIAL</code> records all generated thumbnails in a serial manner, to the media/thumbnails/(width)x(height) directory, where (width) and (height) are the width and height of the thumbnail. <code>LATEST</code> saves the latest thumbnail in media/latest_thumbnail/(width)x(height)/thumb.jpg and overwrites it at the interval specified by <code>targetIntervalSeconds</code>. You can enable both <code>SEQUENTIAL</code> and <code>LATEST</code>. Default: <code>SEQUENTIAL</code>.</p>
    pub storage: ::std::option::Option<::std::vec::Vec<crate::types::ThumbnailStorageType>>,
}
impl CompositionThumbnailConfiguration {
    /// <p>The targeted thumbnail-generation interval in seconds. Default: 60.</p>
    pub fn target_interval_seconds(&self) -> ::std::option::Option<i32> {
        self.target_interval_seconds
    }
    /// <p>Indicates the format in which thumbnails are recorded. <code>SEQUENTIAL</code> records all generated thumbnails in a serial manner, to the media/thumbnails/(width)x(height) directory, where (width) and (height) are the width and height of the thumbnail. <code>LATEST</code> saves the latest thumbnail in media/latest_thumbnail/(width)x(height)/thumb.jpg and overwrites it at the interval specified by <code>targetIntervalSeconds</code>. You can enable both <code>SEQUENTIAL</code> and <code>LATEST</code>. Default: <code>SEQUENTIAL</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.storage.is_none()`.
    pub fn storage(&self) -> &[crate::types::ThumbnailStorageType] {
        self.storage.as_deref().unwrap_or_default()
    }
}
impl CompositionThumbnailConfiguration {
    /// Creates a new builder-style object to manufacture [`CompositionThumbnailConfiguration`](crate::types::CompositionThumbnailConfiguration).
    pub fn builder() -> crate::types::builders::CompositionThumbnailConfigurationBuilder {
        crate::types::builders::CompositionThumbnailConfigurationBuilder::default()
    }
}

/// A builder for [`CompositionThumbnailConfiguration`](crate::types::CompositionThumbnailConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CompositionThumbnailConfigurationBuilder {
    pub(crate) target_interval_seconds: ::std::option::Option<i32>,
    pub(crate) storage: ::std::option::Option<::std::vec::Vec<crate::types::ThumbnailStorageType>>,
}
impl CompositionThumbnailConfigurationBuilder {
    /// <p>The targeted thumbnail-generation interval in seconds. Default: 60.</p>
    pub fn target_interval_seconds(mut self, input: i32) -> Self {
        self.target_interval_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The targeted thumbnail-generation interval in seconds. Default: 60.</p>
    pub fn set_target_interval_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.target_interval_seconds = input;
        self
    }
    /// <p>The targeted thumbnail-generation interval in seconds. Default: 60.</p>
    pub fn get_target_interval_seconds(&self) -> &::std::option::Option<i32> {
        &self.target_interval_seconds
    }
    /// Appends an item to `storage`.
    ///
    /// To override the contents of this collection use [`set_storage`](Self::set_storage).
    ///
    /// <p>Indicates the format in which thumbnails are recorded. <code>SEQUENTIAL</code> records all generated thumbnails in a serial manner, to the media/thumbnails/(width)x(height) directory, where (width) and (height) are the width and height of the thumbnail. <code>LATEST</code> saves the latest thumbnail in media/latest_thumbnail/(width)x(height)/thumb.jpg and overwrites it at the interval specified by <code>targetIntervalSeconds</code>. You can enable both <code>SEQUENTIAL</code> and <code>LATEST</code>. Default: <code>SEQUENTIAL</code>.</p>
    pub fn storage(mut self, input: crate::types::ThumbnailStorageType) -> Self {
        let mut v = self.storage.unwrap_or_default();
        v.push(input);
        self.storage = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates the format in which thumbnails are recorded. <code>SEQUENTIAL</code> records all generated thumbnails in a serial manner, to the media/thumbnails/(width)x(height) directory, where (width) and (height) are the width and height of the thumbnail. <code>LATEST</code> saves the latest thumbnail in media/latest_thumbnail/(width)x(height)/thumb.jpg and overwrites it at the interval specified by <code>targetIntervalSeconds</code>. You can enable both <code>SEQUENTIAL</code> and <code>LATEST</code>. Default: <code>SEQUENTIAL</code>.</p>
    pub fn set_storage(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ThumbnailStorageType>>) -> Self {
        self.storage = input;
        self
    }
    /// <p>Indicates the format in which thumbnails are recorded. <code>SEQUENTIAL</code> records all generated thumbnails in a serial manner, to the media/thumbnails/(width)x(height) directory, where (width) and (height) are the width and height of the thumbnail. <code>LATEST</code> saves the latest thumbnail in media/latest_thumbnail/(width)x(height)/thumb.jpg and overwrites it at the interval specified by <code>targetIntervalSeconds</code>. You can enable both <code>SEQUENTIAL</code> and <code>LATEST</code>. Default: <code>SEQUENTIAL</code>.</p>
    pub fn get_storage(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ThumbnailStorageType>> {
        &self.storage
    }
    /// Consumes the builder and constructs a [`CompositionThumbnailConfiguration`](crate::types::CompositionThumbnailConfiguration).
    pub fn build(self) -> crate::types::CompositionThumbnailConfiguration {
        crate::types::CompositionThumbnailConfiguration {
            target_interval_seconds: self.target_interval_seconds,
            storage: self.storage,
        }
    }
}
