// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration information specific to Picture-in-Picture (PiP) layout, for <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/server-side-composition.html">server-side composition</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PipConfiguration {
    /// <p>This attribute name identifies the featured slot. A participant with this attribute set to <code>"true"</code> (as a string value) in <code>ParticipantTokenConfiguration</code> is placed in the featured slot. Default: <code>""</code> (no featured participant).</p>
    pub featured_participant_attribute: ::std::option::Option<::std::string::String>,
    /// <p>Determines whether to omit participants with stopped video in the composition. Default: <code>false</code>.</p>
    pub omit_stopped_video: bool,
    /// <p>Defines how video content fits within the participant tile: <code>FILL</code> (stretched), <code>COVER</code> (cropped), or <code>CONTAIN</code> (letterboxed). Default: <code>COVER</code>.</p>
    pub video_fill_mode: ::std::option::Option<crate::types::VideoFillMode>,
    /// <p>Specifies the spacing between participant tiles in pixels. Default: <code>0</code>.</p>
    pub grid_gap: i32,
    /// <p>Specifies the participant for the PiP window. A participant with this attribute set to <code>"true"</code> (as a string value) in <code>ParticipantTokenConfiguration</code> is placed in the PiP slot. Default: <code>""</code> (no PiP participant).</p>
    pub pip_participant_attribute: ::std::option::Option<::std::string::String>,
    /// <p>Defines PiP behavior when all participants have left: <code>STATIC</code> (maintains original position/size) or <code>DYNAMIC</code> (expands to full composition). Default: <code>STATIC</code>.</p>
    pub pip_behavior: ::std::option::Option<crate::types::PipBehavior>,
    /// <p>Sets the PiP window’s offset position in pixels from the closest edges determined by <code>PipPosition</code>. Default: <code>0</code>.</p>
    pub pip_offset: i32,
    /// <p>Determines the corner position of the PiP window. Default: <code>BOTTOM_RIGHT</code>.</p>
    pub pip_position: ::std::option::Option<crate::types::PipPosition>,
    /// <p>Specifies the width of the PiP window in pixels. When this is not set explicitly, <code>pipWidth</code>’s value will be based on the size of the composition and the aspect ratio of the participant’s video.</p>
    pub pip_width: ::std::option::Option<i32>,
    /// <p>Specifies the height of the PiP window in pixels. When this is not set explicitly, <code>pipHeight</code>’s value will be based on the size of the composition and the aspect ratio of the participant’s video.</p>
    pub pip_height: ::std::option::Option<i32>,
}
impl PipConfiguration {
    /// <p>This attribute name identifies the featured slot. A participant with this attribute set to <code>"true"</code> (as a string value) in <code>ParticipantTokenConfiguration</code> is placed in the featured slot. Default: <code>""</code> (no featured participant).</p>
    pub fn featured_participant_attribute(&self) -> ::std::option::Option<&str> {
        self.featured_participant_attribute.as_deref()
    }
    /// <p>Determines whether to omit participants with stopped video in the composition. Default: <code>false</code>.</p>
    pub fn omit_stopped_video(&self) -> bool {
        self.omit_stopped_video
    }
    /// <p>Defines how video content fits within the participant tile: <code>FILL</code> (stretched), <code>COVER</code> (cropped), or <code>CONTAIN</code> (letterboxed). Default: <code>COVER</code>.</p>
    pub fn video_fill_mode(&self) -> ::std::option::Option<&crate::types::VideoFillMode> {
        self.video_fill_mode.as_ref()
    }
    /// <p>Specifies the spacing between participant tiles in pixels. Default: <code>0</code>.</p>
    pub fn grid_gap(&self) -> i32 {
        self.grid_gap
    }
    /// <p>Specifies the participant for the PiP window. A participant with this attribute set to <code>"true"</code> (as a string value) in <code>ParticipantTokenConfiguration</code> is placed in the PiP slot. Default: <code>""</code> (no PiP participant).</p>
    pub fn pip_participant_attribute(&self) -> ::std::option::Option<&str> {
        self.pip_participant_attribute.as_deref()
    }
    /// <p>Defines PiP behavior when all participants have left: <code>STATIC</code> (maintains original position/size) or <code>DYNAMIC</code> (expands to full composition). Default: <code>STATIC</code>.</p>
    pub fn pip_behavior(&self) -> ::std::option::Option<&crate::types::PipBehavior> {
        self.pip_behavior.as_ref()
    }
    /// <p>Sets the PiP window’s offset position in pixels from the closest edges determined by <code>PipPosition</code>. Default: <code>0</code>.</p>
    pub fn pip_offset(&self) -> i32 {
        self.pip_offset
    }
    /// <p>Determines the corner position of the PiP window. Default: <code>BOTTOM_RIGHT</code>.</p>
    pub fn pip_position(&self) -> ::std::option::Option<&crate::types::PipPosition> {
        self.pip_position.as_ref()
    }
    /// <p>Specifies the width of the PiP window in pixels. When this is not set explicitly, <code>pipWidth</code>’s value will be based on the size of the composition and the aspect ratio of the participant’s video.</p>
    pub fn pip_width(&self) -> ::std::option::Option<i32> {
        self.pip_width
    }
    /// <p>Specifies the height of the PiP window in pixels. When this is not set explicitly, <code>pipHeight</code>’s value will be based on the size of the composition and the aspect ratio of the participant’s video.</p>
    pub fn pip_height(&self) -> ::std::option::Option<i32> {
        self.pip_height
    }
}
impl PipConfiguration {
    /// Creates a new builder-style object to manufacture [`PipConfiguration`](crate::types::PipConfiguration).
    pub fn builder() -> crate::types::builders::PipConfigurationBuilder {
        crate::types::builders::PipConfigurationBuilder::default()
    }
}

/// A builder for [`PipConfiguration`](crate::types::PipConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PipConfigurationBuilder {
    pub(crate) featured_participant_attribute: ::std::option::Option<::std::string::String>,
    pub(crate) omit_stopped_video: ::std::option::Option<bool>,
    pub(crate) video_fill_mode: ::std::option::Option<crate::types::VideoFillMode>,
    pub(crate) grid_gap: ::std::option::Option<i32>,
    pub(crate) pip_participant_attribute: ::std::option::Option<::std::string::String>,
    pub(crate) pip_behavior: ::std::option::Option<crate::types::PipBehavior>,
    pub(crate) pip_offset: ::std::option::Option<i32>,
    pub(crate) pip_position: ::std::option::Option<crate::types::PipPosition>,
    pub(crate) pip_width: ::std::option::Option<i32>,
    pub(crate) pip_height: ::std::option::Option<i32>,
}
impl PipConfigurationBuilder {
    /// <p>This attribute name identifies the featured slot. A participant with this attribute set to <code>"true"</code> (as a string value) in <code>ParticipantTokenConfiguration</code> is placed in the featured slot. Default: <code>""</code> (no featured participant).</p>
    pub fn featured_participant_attribute(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.featured_participant_attribute = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This attribute name identifies the featured slot. A participant with this attribute set to <code>"true"</code> (as a string value) in <code>ParticipantTokenConfiguration</code> is placed in the featured slot. Default: <code>""</code> (no featured participant).</p>
    pub fn set_featured_participant_attribute(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.featured_participant_attribute = input;
        self
    }
    /// <p>This attribute name identifies the featured slot. A participant with this attribute set to <code>"true"</code> (as a string value) in <code>ParticipantTokenConfiguration</code> is placed in the featured slot. Default: <code>""</code> (no featured participant).</p>
    pub fn get_featured_participant_attribute(&self) -> &::std::option::Option<::std::string::String> {
        &self.featured_participant_attribute
    }
    /// <p>Determines whether to omit participants with stopped video in the composition. Default: <code>false</code>.</p>
    pub fn omit_stopped_video(mut self, input: bool) -> Self {
        self.omit_stopped_video = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether to omit participants with stopped video in the composition. Default: <code>false</code>.</p>
    pub fn set_omit_stopped_video(mut self, input: ::std::option::Option<bool>) -> Self {
        self.omit_stopped_video = input;
        self
    }
    /// <p>Determines whether to omit participants with stopped video in the composition. Default: <code>false</code>.</p>
    pub fn get_omit_stopped_video(&self) -> &::std::option::Option<bool> {
        &self.omit_stopped_video
    }
    /// <p>Defines how video content fits within the participant tile: <code>FILL</code> (stretched), <code>COVER</code> (cropped), or <code>CONTAIN</code> (letterboxed). Default: <code>COVER</code>.</p>
    pub fn video_fill_mode(mut self, input: crate::types::VideoFillMode) -> Self {
        self.video_fill_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines how video content fits within the participant tile: <code>FILL</code> (stretched), <code>COVER</code> (cropped), or <code>CONTAIN</code> (letterboxed). Default: <code>COVER</code>.</p>
    pub fn set_video_fill_mode(mut self, input: ::std::option::Option<crate::types::VideoFillMode>) -> Self {
        self.video_fill_mode = input;
        self
    }
    /// <p>Defines how video content fits within the participant tile: <code>FILL</code> (stretched), <code>COVER</code> (cropped), or <code>CONTAIN</code> (letterboxed). Default: <code>COVER</code>.</p>
    pub fn get_video_fill_mode(&self) -> &::std::option::Option<crate::types::VideoFillMode> {
        &self.video_fill_mode
    }
    /// <p>Specifies the spacing between participant tiles in pixels. Default: <code>0</code>.</p>
    pub fn grid_gap(mut self, input: i32) -> Self {
        self.grid_gap = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the spacing between participant tiles in pixels. Default: <code>0</code>.</p>
    pub fn set_grid_gap(mut self, input: ::std::option::Option<i32>) -> Self {
        self.grid_gap = input;
        self
    }
    /// <p>Specifies the spacing between participant tiles in pixels. Default: <code>0</code>.</p>
    pub fn get_grid_gap(&self) -> &::std::option::Option<i32> {
        &self.grid_gap
    }
    /// <p>Specifies the participant for the PiP window. A participant with this attribute set to <code>"true"</code> (as a string value) in <code>ParticipantTokenConfiguration</code> is placed in the PiP slot. Default: <code>""</code> (no PiP participant).</p>
    pub fn pip_participant_attribute(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pip_participant_attribute = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the participant for the PiP window. A participant with this attribute set to <code>"true"</code> (as a string value) in <code>ParticipantTokenConfiguration</code> is placed in the PiP slot. Default: <code>""</code> (no PiP participant).</p>
    pub fn set_pip_participant_attribute(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pip_participant_attribute = input;
        self
    }
    /// <p>Specifies the participant for the PiP window. A participant with this attribute set to <code>"true"</code> (as a string value) in <code>ParticipantTokenConfiguration</code> is placed in the PiP slot. Default: <code>""</code> (no PiP participant).</p>
    pub fn get_pip_participant_attribute(&self) -> &::std::option::Option<::std::string::String> {
        &self.pip_participant_attribute
    }
    /// <p>Defines PiP behavior when all participants have left: <code>STATIC</code> (maintains original position/size) or <code>DYNAMIC</code> (expands to full composition). Default: <code>STATIC</code>.</p>
    pub fn pip_behavior(mut self, input: crate::types::PipBehavior) -> Self {
        self.pip_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines PiP behavior when all participants have left: <code>STATIC</code> (maintains original position/size) or <code>DYNAMIC</code> (expands to full composition). Default: <code>STATIC</code>.</p>
    pub fn set_pip_behavior(mut self, input: ::std::option::Option<crate::types::PipBehavior>) -> Self {
        self.pip_behavior = input;
        self
    }
    /// <p>Defines PiP behavior when all participants have left: <code>STATIC</code> (maintains original position/size) or <code>DYNAMIC</code> (expands to full composition). Default: <code>STATIC</code>.</p>
    pub fn get_pip_behavior(&self) -> &::std::option::Option<crate::types::PipBehavior> {
        &self.pip_behavior
    }
    /// <p>Sets the PiP window’s offset position in pixels from the closest edges determined by <code>PipPosition</code>. Default: <code>0</code>.</p>
    pub fn pip_offset(mut self, input: i32) -> Self {
        self.pip_offset = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sets the PiP window’s offset position in pixels from the closest edges determined by <code>PipPosition</code>. Default: <code>0</code>.</p>
    pub fn set_pip_offset(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pip_offset = input;
        self
    }
    /// <p>Sets the PiP window’s offset position in pixels from the closest edges determined by <code>PipPosition</code>. Default: <code>0</code>.</p>
    pub fn get_pip_offset(&self) -> &::std::option::Option<i32> {
        &self.pip_offset
    }
    /// <p>Determines the corner position of the PiP window. Default: <code>BOTTOM_RIGHT</code>.</p>
    pub fn pip_position(mut self, input: crate::types::PipPosition) -> Self {
        self.pip_position = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines the corner position of the PiP window. Default: <code>BOTTOM_RIGHT</code>.</p>
    pub fn set_pip_position(mut self, input: ::std::option::Option<crate::types::PipPosition>) -> Self {
        self.pip_position = input;
        self
    }
    /// <p>Determines the corner position of the PiP window. Default: <code>BOTTOM_RIGHT</code>.</p>
    pub fn get_pip_position(&self) -> &::std::option::Option<crate::types::PipPosition> {
        &self.pip_position
    }
    /// <p>Specifies the width of the PiP window in pixels. When this is not set explicitly, <code>pipWidth</code>’s value will be based on the size of the composition and the aspect ratio of the participant’s video.</p>
    pub fn pip_width(mut self, input: i32) -> Self {
        self.pip_width = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the width of the PiP window in pixels. When this is not set explicitly, <code>pipWidth</code>’s value will be based on the size of the composition and the aspect ratio of the participant’s video.</p>
    pub fn set_pip_width(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pip_width = input;
        self
    }
    /// <p>Specifies the width of the PiP window in pixels. When this is not set explicitly, <code>pipWidth</code>’s value will be based on the size of the composition and the aspect ratio of the participant’s video.</p>
    pub fn get_pip_width(&self) -> &::std::option::Option<i32> {
        &self.pip_width
    }
    /// <p>Specifies the height of the PiP window in pixels. When this is not set explicitly, <code>pipHeight</code>’s value will be based on the size of the composition and the aspect ratio of the participant’s video.</p>
    pub fn pip_height(mut self, input: i32) -> Self {
        self.pip_height = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the height of the PiP window in pixels. When this is not set explicitly, <code>pipHeight</code>’s value will be based on the size of the composition and the aspect ratio of the participant’s video.</p>
    pub fn set_pip_height(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pip_height = input;
        self
    }
    /// <p>Specifies the height of the PiP window in pixels. When this is not set explicitly, <code>pipHeight</code>’s value will be based on the size of the composition and the aspect ratio of the participant’s video.</p>
    pub fn get_pip_height(&self) -> &::std::option::Option<i32> {
        &self.pip_height
    }
    /// Consumes the builder and constructs a [`PipConfiguration`](crate::types::PipConfiguration).
    pub fn build(self) -> crate::types::PipConfiguration {
        crate::types::PipConfiguration {
            featured_participant_attribute: self.featured_participant_attribute,
            omit_stopped_video: self.omit_stopped_video.unwrap_or_default(),
            video_fill_mode: self.video_fill_mode,
            grid_gap: self.grid_gap.unwrap_or_default(),
            pip_participant_attribute: self.pip_participant_attribute,
            pip_behavior: self.pip_behavior,
            pip_offset: self.pip_offset.unwrap_or_default(),
            pip_position: self.pip_position,
            pip_width: self.pip_width,
            pip_height: self.pip_height,
        }
    }
}
