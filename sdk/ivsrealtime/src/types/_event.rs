// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An occurrence during a stage session.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Event {
    /// <p>The name of the event.</p>
    pub name: ::std::option::Option<crate::types::EventName>,
    /// <p>Unique identifier for the participant who triggered the event. This is assigned by IVS.</p>
    pub participant_id: ::std::option::Option<::std::string::String>,
    /// <p>ISO 8601 timestamp (returned as a string) for when the event occurred.</p>
    pub event_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Unique identifier for the remote participant. For a subscribe event, this is the publisher. For a publish or join event, this is null. This is assigned by IVS.</p>
    pub remote_participant_id: ::std::option::Option<::std::string::String>,
    /// <p>If the event is an error event, the error code is provided to give insight into the specific error that occurred. If the event is not an error event, this field is null.</p>
    /// <ul>
    /// <li>
    /// <p><code>B_FRAME_PRESENT</code> — The participant's stream includes B-frames. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-rtmp-publishing.html"> IVS RTMP Publishing</a>.</p></li>
    /// <li>
    /// <p><code>BITRATE_EXCEEDED</code> — The participant exceeded the maximum supported bitrate. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html"> Service Quotas</a>.</p></li>
    /// <li>
    /// <p><code>INSUFFICIENT_CAPABILITIES</code> — The participant tried to take an action that the participant’s token is not allowed to do. For details on participant capabilities, see the <code>capabilities</code> field in <code>CreateParticipantToken</code>.</p></li>
    /// <li>
    /// <p><code>INTERNAL_SERVER_EXCEPTION</code> — The participant failed to publish to the stage due to an internal server error.</p></li>
    /// <li>
    /// <p><code>INVALID_AUDIO_CODEC</code> — The participant is using an invalid audio codec. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-stream-ingest.html"> Stream Ingest</a>.</p></li>
    /// <li>
    /// <p><code>INVALID_INPUT</code> — The participant is using an invalid input stream.</p></li>
    /// <li>
    /// <p><code>INVALID_PROTOCOL</code> — The participant's IngestConfiguration resource is configured for RTMPS but they tried streaming with RTMP. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-rtmp-publishing.html"> IVS RTMP Publishing</a>.</p></li>
    /// <li>
    /// <p><code>INVALID_STREAM_KEY</code> — The participant is using an invalid stream key. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-rtmp-publishing.html"> IVS RTMP Publishing</a>.</p></li>
    /// <li>
    /// <p><code>INVALID_VIDEO_CODEC</code> — The participant is using an invalid video codec. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-stream-ingest.html"> Stream Ingest</a>.</p></li>
    /// <li>
    /// <p><code>PUBLISHER_NOT_FOUND</code> — The participant tried to subscribe to a publisher that doesn’t exist.</p></li>
    /// <li>
    /// <p><code>QUOTA_EXCEEDED</code> — The number of participants who want to publish/subscribe to a stage exceeds the quota. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html"> Service Quotas</a>.</p></li>
    /// <li>
    /// <p><code>RESOLUTION_EXCEEDED</code> — The participant exceeded the maximum supported resolution. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html"> Service Quotas</a>.</p></li>
    /// <li>
    /// <p><code>REUSE_OF_STREAM_KEY</code> — The participant tried to use a stream key that is associated with another active stage session.</p></li>
    /// <li>
    /// <p><code>STREAM_DURATION_EXCEEDED</code> — The participant exceeded the maximum allowed stream duration. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html"> Service Quotas</a>.</p></li>
    /// </ul>
    pub error_code: ::std::option::Option<crate::types::EventErrorCode>,
    /// <p>ARN of the stage where the participant is replicated. Applicable only if the event name is <code>REPLICATION_STARTED</code> or <code>REPLICATION_STOPPED</code>.</p>
    pub destination_stage_arn: ::std::option::Option<::std::string::String>,
    /// <p>ID of the session within the destination stage. Applicable only if the event name is <code>REPLICATION_STARTED</code> or <code>REPLICATION_STOPPED</code>.</p>
    pub destination_session_id: ::std::option::Option<::std::string::String>,
    /// <p>If true, this indicates the <code>participantId</code> is a replicated participant. If this is a subscribe event, then this flag refers to <code>remoteParticipantId</code>.</p>
    pub replica: bool,
}
impl Event {
    /// <p>The name of the event.</p>
    pub fn name(&self) -> ::std::option::Option<&crate::types::EventName> {
        self.name.as_ref()
    }
    /// <p>Unique identifier for the participant who triggered the event. This is assigned by IVS.</p>
    pub fn participant_id(&self) -> ::std::option::Option<&str> {
        self.participant_id.as_deref()
    }
    /// <p>ISO 8601 timestamp (returned as a string) for when the event occurred.</p>
    pub fn event_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.event_time.as_ref()
    }
    /// <p>Unique identifier for the remote participant. For a subscribe event, this is the publisher. For a publish or join event, this is null. This is assigned by IVS.</p>
    pub fn remote_participant_id(&self) -> ::std::option::Option<&str> {
        self.remote_participant_id.as_deref()
    }
    /// <p>If the event is an error event, the error code is provided to give insight into the specific error that occurred. If the event is not an error event, this field is null.</p>
    /// <ul>
    /// <li>
    /// <p><code>B_FRAME_PRESENT</code> — The participant's stream includes B-frames. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-rtmp-publishing.html"> IVS RTMP Publishing</a>.</p></li>
    /// <li>
    /// <p><code>BITRATE_EXCEEDED</code> — The participant exceeded the maximum supported bitrate. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html"> Service Quotas</a>.</p></li>
    /// <li>
    /// <p><code>INSUFFICIENT_CAPABILITIES</code> — The participant tried to take an action that the participant’s token is not allowed to do. For details on participant capabilities, see the <code>capabilities</code> field in <code>CreateParticipantToken</code>.</p></li>
    /// <li>
    /// <p><code>INTERNAL_SERVER_EXCEPTION</code> — The participant failed to publish to the stage due to an internal server error.</p></li>
    /// <li>
    /// <p><code>INVALID_AUDIO_CODEC</code> — The participant is using an invalid audio codec. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-stream-ingest.html"> Stream Ingest</a>.</p></li>
    /// <li>
    /// <p><code>INVALID_INPUT</code> — The participant is using an invalid input stream.</p></li>
    /// <li>
    /// <p><code>INVALID_PROTOCOL</code> — The participant's IngestConfiguration resource is configured for RTMPS but they tried streaming with RTMP. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-rtmp-publishing.html"> IVS RTMP Publishing</a>.</p></li>
    /// <li>
    /// <p><code>INVALID_STREAM_KEY</code> — The participant is using an invalid stream key. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-rtmp-publishing.html"> IVS RTMP Publishing</a>.</p></li>
    /// <li>
    /// <p><code>INVALID_VIDEO_CODEC</code> — The participant is using an invalid video codec. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-stream-ingest.html"> Stream Ingest</a>.</p></li>
    /// <li>
    /// <p><code>PUBLISHER_NOT_FOUND</code> — The participant tried to subscribe to a publisher that doesn’t exist.</p></li>
    /// <li>
    /// <p><code>QUOTA_EXCEEDED</code> — The number of participants who want to publish/subscribe to a stage exceeds the quota. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html"> Service Quotas</a>.</p></li>
    /// <li>
    /// <p><code>RESOLUTION_EXCEEDED</code> — The participant exceeded the maximum supported resolution. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html"> Service Quotas</a>.</p></li>
    /// <li>
    /// <p><code>REUSE_OF_STREAM_KEY</code> — The participant tried to use a stream key that is associated with another active stage session.</p></li>
    /// <li>
    /// <p><code>STREAM_DURATION_EXCEEDED</code> — The participant exceeded the maximum allowed stream duration. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html"> Service Quotas</a>.</p></li>
    /// </ul>
    pub fn error_code(&self) -> ::std::option::Option<&crate::types::EventErrorCode> {
        self.error_code.as_ref()
    }
    /// <p>ARN of the stage where the participant is replicated. Applicable only if the event name is <code>REPLICATION_STARTED</code> or <code>REPLICATION_STOPPED</code>.</p>
    pub fn destination_stage_arn(&self) -> ::std::option::Option<&str> {
        self.destination_stage_arn.as_deref()
    }
    /// <p>ID of the session within the destination stage. Applicable only if the event name is <code>REPLICATION_STARTED</code> or <code>REPLICATION_STOPPED</code>.</p>
    pub fn destination_session_id(&self) -> ::std::option::Option<&str> {
        self.destination_session_id.as_deref()
    }
    /// <p>If true, this indicates the <code>participantId</code> is a replicated participant. If this is a subscribe event, then this flag refers to <code>remoteParticipantId</code>.</p>
    pub fn replica(&self) -> bool {
        self.replica
    }
}
impl Event {
    /// Creates a new builder-style object to manufacture [`Event`](crate::types::Event).
    pub fn builder() -> crate::types::builders::EventBuilder {
        crate::types::builders::EventBuilder::default()
    }
}

/// A builder for [`Event`](crate::types::Event).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EventBuilder {
    pub(crate) name: ::std::option::Option<crate::types::EventName>,
    pub(crate) participant_id: ::std::option::Option<::std::string::String>,
    pub(crate) event_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) remote_participant_id: ::std::option::Option<::std::string::String>,
    pub(crate) error_code: ::std::option::Option<crate::types::EventErrorCode>,
    pub(crate) destination_stage_arn: ::std::option::Option<::std::string::String>,
    pub(crate) destination_session_id: ::std::option::Option<::std::string::String>,
    pub(crate) replica: ::std::option::Option<bool>,
}
impl EventBuilder {
    /// <p>The name of the event.</p>
    pub fn name(mut self, input: crate::types::EventName) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the event.</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::EventName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the event.</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::EventName> {
        &self.name
    }
    /// <p>Unique identifier for the participant who triggered the event. This is assigned by IVS.</p>
    pub fn participant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.participant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier for the participant who triggered the event. This is assigned by IVS.</p>
    pub fn set_participant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.participant_id = input;
        self
    }
    /// <p>Unique identifier for the participant who triggered the event. This is assigned by IVS.</p>
    pub fn get_participant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.participant_id
    }
    /// <p>ISO 8601 timestamp (returned as a string) for when the event occurred.</p>
    pub fn event_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.event_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>ISO 8601 timestamp (returned as a string) for when the event occurred.</p>
    pub fn set_event_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.event_time = input;
        self
    }
    /// <p>ISO 8601 timestamp (returned as a string) for when the event occurred.</p>
    pub fn get_event_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.event_time
    }
    /// <p>Unique identifier for the remote participant. For a subscribe event, this is the publisher. For a publish or join event, this is null. This is assigned by IVS.</p>
    pub fn remote_participant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.remote_participant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier for the remote participant. For a subscribe event, this is the publisher. For a publish or join event, this is null. This is assigned by IVS.</p>
    pub fn set_remote_participant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.remote_participant_id = input;
        self
    }
    /// <p>Unique identifier for the remote participant. For a subscribe event, this is the publisher. For a publish or join event, this is null. This is assigned by IVS.</p>
    pub fn get_remote_participant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.remote_participant_id
    }
    /// <p>If the event is an error event, the error code is provided to give insight into the specific error that occurred. If the event is not an error event, this field is null.</p>
    /// <ul>
    /// <li>
    /// <p><code>B_FRAME_PRESENT</code> — The participant's stream includes B-frames. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-rtmp-publishing.html"> IVS RTMP Publishing</a>.</p></li>
    /// <li>
    /// <p><code>BITRATE_EXCEEDED</code> — The participant exceeded the maximum supported bitrate. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html"> Service Quotas</a>.</p></li>
    /// <li>
    /// <p><code>INSUFFICIENT_CAPABILITIES</code> — The participant tried to take an action that the participant’s token is not allowed to do. For details on participant capabilities, see the <code>capabilities</code> field in <code>CreateParticipantToken</code>.</p></li>
    /// <li>
    /// <p><code>INTERNAL_SERVER_EXCEPTION</code> — The participant failed to publish to the stage due to an internal server error.</p></li>
    /// <li>
    /// <p><code>INVALID_AUDIO_CODEC</code> — The participant is using an invalid audio codec. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-stream-ingest.html"> Stream Ingest</a>.</p></li>
    /// <li>
    /// <p><code>INVALID_INPUT</code> — The participant is using an invalid input stream.</p></li>
    /// <li>
    /// <p><code>INVALID_PROTOCOL</code> — The participant's IngestConfiguration resource is configured for RTMPS but they tried streaming with RTMP. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-rtmp-publishing.html"> IVS RTMP Publishing</a>.</p></li>
    /// <li>
    /// <p><code>INVALID_STREAM_KEY</code> — The participant is using an invalid stream key. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-rtmp-publishing.html"> IVS RTMP Publishing</a>.</p></li>
    /// <li>
    /// <p><code>INVALID_VIDEO_CODEC</code> — The participant is using an invalid video codec. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-stream-ingest.html"> Stream Ingest</a>.</p></li>
    /// <li>
    /// <p><code>PUBLISHER_NOT_FOUND</code> — The participant tried to subscribe to a publisher that doesn’t exist.</p></li>
    /// <li>
    /// <p><code>QUOTA_EXCEEDED</code> — The number of participants who want to publish/subscribe to a stage exceeds the quota. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html"> Service Quotas</a>.</p></li>
    /// <li>
    /// <p><code>RESOLUTION_EXCEEDED</code> — The participant exceeded the maximum supported resolution. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html"> Service Quotas</a>.</p></li>
    /// <li>
    /// <p><code>REUSE_OF_STREAM_KEY</code> — The participant tried to use a stream key that is associated with another active stage session.</p></li>
    /// <li>
    /// <p><code>STREAM_DURATION_EXCEEDED</code> — The participant exceeded the maximum allowed stream duration. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html"> Service Quotas</a>.</p></li>
    /// </ul>
    pub fn error_code(mut self, input: crate::types::EventErrorCode) -> Self {
        self.error_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is an error event, the error code is provided to give insight into the specific error that occurred. If the event is not an error event, this field is null.</p>
    /// <ul>
    /// <li>
    /// <p><code>B_FRAME_PRESENT</code> — The participant's stream includes B-frames. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-rtmp-publishing.html"> IVS RTMP Publishing</a>.</p></li>
    /// <li>
    /// <p><code>BITRATE_EXCEEDED</code> — The participant exceeded the maximum supported bitrate. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html"> Service Quotas</a>.</p></li>
    /// <li>
    /// <p><code>INSUFFICIENT_CAPABILITIES</code> — The participant tried to take an action that the participant’s token is not allowed to do. For details on participant capabilities, see the <code>capabilities</code> field in <code>CreateParticipantToken</code>.</p></li>
    /// <li>
    /// <p><code>INTERNAL_SERVER_EXCEPTION</code> — The participant failed to publish to the stage due to an internal server error.</p></li>
    /// <li>
    /// <p><code>INVALID_AUDIO_CODEC</code> — The participant is using an invalid audio codec. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-stream-ingest.html"> Stream Ingest</a>.</p></li>
    /// <li>
    /// <p><code>INVALID_INPUT</code> — The participant is using an invalid input stream.</p></li>
    /// <li>
    /// <p><code>INVALID_PROTOCOL</code> — The participant's IngestConfiguration resource is configured for RTMPS but they tried streaming with RTMP. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-rtmp-publishing.html"> IVS RTMP Publishing</a>.</p></li>
    /// <li>
    /// <p><code>INVALID_STREAM_KEY</code> — The participant is using an invalid stream key. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-rtmp-publishing.html"> IVS RTMP Publishing</a>.</p></li>
    /// <li>
    /// <p><code>INVALID_VIDEO_CODEC</code> — The participant is using an invalid video codec. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-stream-ingest.html"> Stream Ingest</a>.</p></li>
    /// <li>
    /// <p><code>PUBLISHER_NOT_FOUND</code> — The participant tried to subscribe to a publisher that doesn’t exist.</p></li>
    /// <li>
    /// <p><code>QUOTA_EXCEEDED</code> — The number of participants who want to publish/subscribe to a stage exceeds the quota. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html"> Service Quotas</a>.</p></li>
    /// <li>
    /// <p><code>RESOLUTION_EXCEEDED</code> — The participant exceeded the maximum supported resolution. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html"> Service Quotas</a>.</p></li>
    /// <li>
    /// <p><code>REUSE_OF_STREAM_KEY</code> — The participant tried to use a stream key that is associated with another active stage session.</p></li>
    /// <li>
    /// <p><code>STREAM_DURATION_EXCEEDED</code> — The participant exceeded the maximum allowed stream duration. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html"> Service Quotas</a>.</p></li>
    /// </ul>
    pub fn set_error_code(mut self, input: ::std::option::Option<crate::types::EventErrorCode>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>If the event is an error event, the error code is provided to give insight into the specific error that occurred. If the event is not an error event, this field is null.</p>
    /// <ul>
    /// <li>
    /// <p><code>B_FRAME_PRESENT</code> — The participant's stream includes B-frames. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-rtmp-publishing.html"> IVS RTMP Publishing</a>.</p></li>
    /// <li>
    /// <p><code>BITRATE_EXCEEDED</code> — The participant exceeded the maximum supported bitrate. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html"> Service Quotas</a>.</p></li>
    /// <li>
    /// <p><code>INSUFFICIENT_CAPABILITIES</code> — The participant tried to take an action that the participant’s token is not allowed to do. For details on participant capabilities, see the <code>capabilities</code> field in <code>CreateParticipantToken</code>.</p></li>
    /// <li>
    /// <p><code>INTERNAL_SERVER_EXCEPTION</code> — The participant failed to publish to the stage due to an internal server error.</p></li>
    /// <li>
    /// <p><code>INVALID_AUDIO_CODEC</code> — The participant is using an invalid audio codec. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-stream-ingest.html"> Stream Ingest</a>.</p></li>
    /// <li>
    /// <p><code>INVALID_INPUT</code> — The participant is using an invalid input stream.</p></li>
    /// <li>
    /// <p><code>INVALID_PROTOCOL</code> — The participant's IngestConfiguration resource is configured for RTMPS but they tried streaming with RTMP. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-rtmp-publishing.html"> IVS RTMP Publishing</a>.</p></li>
    /// <li>
    /// <p><code>INVALID_STREAM_KEY</code> — The participant is using an invalid stream key. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-rtmp-publishing.html"> IVS RTMP Publishing</a>.</p></li>
    /// <li>
    /// <p><code>INVALID_VIDEO_CODEC</code> — The participant is using an invalid video codec. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-stream-ingest.html"> Stream Ingest</a>.</p></li>
    /// <li>
    /// <p><code>PUBLISHER_NOT_FOUND</code> — The participant tried to subscribe to a publisher that doesn’t exist.</p></li>
    /// <li>
    /// <p><code>QUOTA_EXCEEDED</code> — The number of participants who want to publish/subscribe to a stage exceeds the quota. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html"> Service Quotas</a>.</p></li>
    /// <li>
    /// <p><code>RESOLUTION_EXCEEDED</code> — The participant exceeded the maximum supported resolution. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html"> Service Quotas</a>.</p></li>
    /// <li>
    /// <p><code>REUSE_OF_STREAM_KEY</code> — The participant tried to use a stream key that is associated with another active stage session.</p></li>
    /// <li>
    /// <p><code>STREAM_DURATION_EXCEEDED</code> — The participant exceeded the maximum allowed stream duration. For details, see <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html"> Service Quotas</a>.</p></li>
    /// </ul>
    pub fn get_error_code(&self) -> &::std::option::Option<crate::types::EventErrorCode> {
        &self.error_code
    }
    /// <p>ARN of the stage where the participant is replicated. Applicable only if the event name is <code>REPLICATION_STARTED</code> or <code>REPLICATION_STOPPED</code>.</p>
    pub fn destination_stage_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_stage_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the stage where the participant is replicated. Applicable only if the event name is <code>REPLICATION_STARTED</code> or <code>REPLICATION_STOPPED</code>.</p>
    pub fn set_destination_stage_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_stage_arn = input;
        self
    }
    /// <p>ARN of the stage where the participant is replicated. Applicable only if the event name is <code>REPLICATION_STARTED</code> or <code>REPLICATION_STOPPED</code>.</p>
    pub fn get_destination_stage_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_stage_arn
    }
    /// <p>ID of the session within the destination stage. Applicable only if the event name is <code>REPLICATION_STARTED</code> or <code>REPLICATION_STOPPED</code>.</p>
    pub fn destination_session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the session within the destination stage. Applicable only if the event name is <code>REPLICATION_STARTED</code> or <code>REPLICATION_STOPPED</code>.</p>
    pub fn set_destination_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_session_id = input;
        self
    }
    /// <p>ID of the session within the destination stage. Applicable only if the event name is <code>REPLICATION_STARTED</code> or <code>REPLICATION_STOPPED</code>.</p>
    pub fn get_destination_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_session_id
    }
    /// <p>If true, this indicates the <code>participantId</code> is a replicated participant. If this is a subscribe event, then this flag refers to <code>remoteParticipantId</code>.</p>
    pub fn replica(mut self, input: bool) -> Self {
        self.replica = ::std::option::Option::Some(input);
        self
    }
    /// <p>If true, this indicates the <code>participantId</code> is a replicated participant. If this is a subscribe event, then this flag refers to <code>remoteParticipantId</code>.</p>
    pub fn set_replica(mut self, input: ::std::option::Option<bool>) -> Self {
        self.replica = input;
        self
    }
    /// <p>If true, this indicates the <code>participantId</code> is a replicated participant. If this is a subscribe event, then this flag refers to <code>remoteParticipantId</code>.</p>
    pub fn get_replica(&self) -> &::std::option::Option<bool> {
        &self.replica
    }
    /// Consumes the builder and constructs a [`Event`](crate::types::Event).
    pub fn build(self) -> crate::types::Event {
        crate::types::Event {
            name: self.name,
            participant_id: self.participant_id,
            event_time: self.event_time,
            remote_participant_id: self.remote_participant_id,
            error_code: self.error_code,
            destination_stage_arn: self.destination_stage_arn,
            destination_session_id: self.destination_session_id,
            replica: self.replica.unwrap_or_default(),
        }
    }
}
