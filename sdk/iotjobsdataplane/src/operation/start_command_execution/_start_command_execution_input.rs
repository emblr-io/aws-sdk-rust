// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartCommandExecutionInput {
    /// <p>The Amazon Resource Number (ARN) of the device where the command execution is occurring.</p>
    pub target_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Number (ARN) of the command. For example, <code>arn:aws:iot:<region>
    /// :
    /// <accountid>
    /// :command/
    /// <commandname></commandname>
    /// </accountid>
    /// </region></code></p>
    pub command_arn: ::std::option::Option<::std::string::String>,
    /// <p>A list of parameters that are required by the <code>StartCommandExecution</code> API when performing the command on a device.</p>
    pub parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CommandParameterValue>>,
    /// <p>Specifies the amount of time in second the device has to finish the command execution. A timer is started as soon as the command execution is created. If the command execution status is not set to another terminal state before the timer expires, it will automatically update to <code>TIMED_OUT</code>.</p>
    pub execution_timeout_seconds: ::std::option::Option<i64>,
    /// <p>The client token is used to implement idempotency. It ensures that the request completes no more than one time. If you retry a request with the same token and the same parameters, the request will complete successfully. However, if you retry the request using the same token but different parameters, an HTTP 409 conflict occurs. If you omit this value, Amazon Web Services SDKs will automatically generate a unique client request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl StartCommandExecutionInput {
    /// <p>The Amazon Resource Number (ARN) of the device where the command execution is occurring.</p>
    pub fn target_arn(&self) -> ::std::option::Option<&str> {
        self.target_arn.as_deref()
    }
    /// <p>The Amazon Resource Number (ARN) of the command. For example, <code>arn:aws:iot:<region>
    /// :
    /// <accountid>
    /// :command/
    /// <commandname></commandname>
    /// </accountid>
    /// </region></code></p>
    pub fn command_arn(&self) -> ::std::option::Option<&str> {
        self.command_arn.as_deref()
    }
    /// <p>A list of parameters that are required by the <code>StartCommandExecution</code> API when performing the command on a device.</p>
    pub fn parameters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::CommandParameterValue>> {
        self.parameters.as_ref()
    }
    /// <p>Specifies the amount of time in second the device has to finish the command execution. A timer is started as soon as the command execution is created. If the command execution status is not set to another terminal state before the timer expires, it will automatically update to <code>TIMED_OUT</code>.</p>
    pub fn execution_timeout_seconds(&self) -> ::std::option::Option<i64> {
        self.execution_timeout_seconds
    }
    /// <p>The client token is used to implement idempotency. It ensures that the request completes no more than one time. If you retry a request with the same token and the same parameters, the request will complete successfully. However, if you retry the request using the same token but different parameters, an HTTP 409 conflict occurs. If you omit this value, Amazon Web Services SDKs will automatically generate a unique client request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl StartCommandExecutionInput {
    /// Creates a new builder-style object to manufacture [`StartCommandExecutionInput`](crate::operation::start_command_execution::StartCommandExecutionInput).
    pub fn builder() -> crate::operation::start_command_execution::builders::StartCommandExecutionInputBuilder {
        crate::operation::start_command_execution::builders::StartCommandExecutionInputBuilder::default()
    }
}

/// A builder for [`StartCommandExecutionInput`](crate::operation::start_command_execution::StartCommandExecutionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartCommandExecutionInputBuilder {
    pub(crate) target_arn: ::std::option::Option<::std::string::String>,
    pub(crate) command_arn: ::std::option::Option<::std::string::String>,
    pub(crate) parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CommandParameterValue>>,
    pub(crate) execution_timeout_seconds: ::std::option::Option<i64>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl StartCommandExecutionInputBuilder {
    /// <p>The Amazon Resource Number (ARN) of the device where the command execution is occurring.</p>
    /// This field is required.
    pub fn target_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the device where the command execution is occurring.</p>
    pub fn set_target_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_arn = input;
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the device where the command execution is occurring.</p>
    pub fn get_target_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_arn
    }
    /// <p>The Amazon Resource Number (ARN) of the command. For example, <code>arn:aws:iot:<region>
    /// :
    /// <accountid>
    /// :command/
    /// <commandname></commandname>
    /// </accountid>
    /// </region></code></p>
    /// This field is required.
    pub fn command_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.command_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the command. For example, <code>arn:aws:iot:<region>
    /// :
    /// <accountid>
    /// :command/
    /// <commandname></commandname>
    /// </accountid>
    /// </region></code></p>
    pub fn set_command_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.command_arn = input;
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the command. For example, <code>arn:aws:iot:<region>
    /// :
    /// <accountid>
    /// :command/
    /// <commandname></commandname>
    /// </accountid>
    /// </region></code></p>
    pub fn get_command_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.command_arn
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>A list of parameters that are required by the <code>StartCommandExecution</code> API when performing the command on a device.</p>
    pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::CommandParameterValue) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A list of parameters that are required by the <code>StartCommandExecution</code> API when performing the command on a device.</p>
    pub fn set_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CommandParameterValue>>,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// <p>A list of parameters that are required by the <code>StartCommandExecution</code> API when performing the command on a device.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CommandParameterValue>> {
        &self.parameters
    }
    /// <p>Specifies the amount of time in second the device has to finish the command execution. A timer is started as soon as the command execution is created. If the command execution status is not set to another terminal state before the timer expires, it will automatically update to <code>TIMED_OUT</code>.</p>
    pub fn execution_timeout_seconds(mut self, input: i64) -> Self {
        self.execution_timeout_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the amount of time in second the device has to finish the command execution. A timer is started as soon as the command execution is created. If the command execution status is not set to another terminal state before the timer expires, it will automatically update to <code>TIMED_OUT</code>.</p>
    pub fn set_execution_timeout_seconds(mut self, input: ::std::option::Option<i64>) -> Self {
        self.execution_timeout_seconds = input;
        self
    }
    /// <p>Specifies the amount of time in second the device has to finish the command execution. A timer is started as soon as the command execution is created. If the command execution status is not set to another terminal state before the timer expires, it will automatically update to <code>TIMED_OUT</code>.</p>
    pub fn get_execution_timeout_seconds(&self) -> &::std::option::Option<i64> {
        &self.execution_timeout_seconds
    }
    /// <p>The client token is used to implement idempotency. It ensures that the request completes no more than one time. If you retry a request with the same token and the same parameters, the request will complete successfully. However, if you retry the request using the same token but different parameters, an HTTP 409 conflict occurs. If you omit this value, Amazon Web Services SDKs will automatically generate a unique client request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The client token is used to implement idempotency. It ensures that the request completes no more than one time. If you retry a request with the same token and the same parameters, the request will complete successfully. However, if you retry the request using the same token but different parameters, an HTTP 409 conflict occurs. If you omit this value, Amazon Web Services SDKs will automatically generate a unique client request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The client token is used to implement idempotency. It ensures that the request completes no more than one time. If you retry a request with the same token and the same parameters, the request will complete successfully. However, if you retry the request using the same token but different parameters, an HTTP 409 conflict occurs. If you omit this value, Amazon Web Services SDKs will automatically generate a unique client request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`StartCommandExecutionInput`](crate::operation::start_command_execution::StartCommandExecutionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_command_execution::StartCommandExecutionInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::start_command_execution::StartCommandExecutionInput {
            target_arn: self.target_arn,
            command_arn: self.command_arn,
            parameters: self.parameters,
            execution_timeout_seconds: self.execution_timeout_seconds,
            client_token: self.client_token,
        })
    }
}
