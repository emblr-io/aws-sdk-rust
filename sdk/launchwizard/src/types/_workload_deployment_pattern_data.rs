// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The data that details a workload deployment pattern.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkloadDeploymentPatternData {
    /// <p>The workload name of the deployment pattern.</p>
    pub workload_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the deployment pattern.</p>
    pub deployment_pattern_name: ::std::option::Option<::std::string::String>,
    /// <p>The workload version name of the deployment pattern.</p>
    pub workload_version_name: ::std::option::Option<::std::string::String>,
    /// <p>The display name of the deployment pattern.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the deployment pattern.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The status of the deployment pattern.</p>
    pub status: ::std::option::Option<crate::types::WorkloadDeploymentPatternStatus>,
    /// <p>The status message of the deployment pattern.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>The settings specified for the deployment. These settings define how to deploy and configure your resources created by the deployment. For more information about the specifications required for creating a deployment for a SAP workload, see <a href="https://docs.aws.amazon.com/launchwizard/latest/APIReference/launch-wizard-specifications-sap.html">SAP deployment specifications</a>. To retrieve the specifications required to create a deployment for other workloads, use the <a href="https://docs.aws.amazon.com/launchwizard/latest/APIReference/API_GetWorkloadDeploymentPattern.html"> <code>GetWorkloadDeploymentPattern</code> </a> operation.</p>
    pub specifications: ::std::option::Option<::std::vec::Vec<crate::types::DeploymentSpecificationsField>>,
}
impl WorkloadDeploymentPatternData {
    /// <p>The workload name of the deployment pattern.</p>
    pub fn workload_name(&self) -> ::std::option::Option<&str> {
        self.workload_name.as_deref()
    }
    /// <p>The name of the deployment pattern.</p>
    pub fn deployment_pattern_name(&self) -> ::std::option::Option<&str> {
        self.deployment_pattern_name.as_deref()
    }
    /// <p>The workload version name of the deployment pattern.</p>
    pub fn workload_version_name(&self) -> ::std::option::Option<&str> {
        self.workload_version_name.as_deref()
    }
    /// <p>The display name of the deployment pattern.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The description of the deployment pattern.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The status of the deployment pattern.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::WorkloadDeploymentPatternStatus> {
        self.status.as_ref()
    }
    /// <p>The status message of the deployment pattern.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The settings specified for the deployment. These settings define how to deploy and configure your resources created by the deployment. For more information about the specifications required for creating a deployment for a SAP workload, see <a href="https://docs.aws.amazon.com/launchwizard/latest/APIReference/launch-wizard-specifications-sap.html">SAP deployment specifications</a>. To retrieve the specifications required to create a deployment for other workloads, use the <a href="https://docs.aws.amazon.com/launchwizard/latest/APIReference/API_GetWorkloadDeploymentPattern.html"> <code>GetWorkloadDeploymentPattern</code> </a> operation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.specifications.is_none()`.
    pub fn specifications(&self) -> &[crate::types::DeploymentSpecificationsField] {
        self.specifications.as_deref().unwrap_or_default()
    }
}
impl WorkloadDeploymentPatternData {
    /// Creates a new builder-style object to manufacture [`WorkloadDeploymentPatternData`](crate::types::WorkloadDeploymentPatternData).
    pub fn builder() -> crate::types::builders::WorkloadDeploymentPatternDataBuilder {
        crate::types::builders::WorkloadDeploymentPatternDataBuilder::default()
    }
}

/// A builder for [`WorkloadDeploymentPatternData`](crate::types::WorkloadDeploymentPatternData).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WorkloadDeploymentPatternDataBuilder {
    pub(crate) workload_name: ::std::option::Option<::std::string::String>,
    pub(crate) deployment_pattern_name: ::std::option::Option<::std::string::String>,
    pub(crate) workload_version_name: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::WorkloadDeploymentPatternStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) specifications: ::std::option::Option<::std::vec::Vec<crate::types::DeploymentSpecificationsField>>,
}
impl WorkloadDeploymentPatternDataBuilder {
    /// <p>The workload name of the deployment pattern.</p>
    pub fn workload_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workload_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The workload name of the deployment pattern.</p>
    pub fn set_workload_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workload_name = input;
        self
    }
    /// <p>The workload name of the deployment pattern.</p>
    pub fn get_workload_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.workload_name
    }
    /// <p>The name of the deployment pattern.</p>
    pub fn deployment_pattern_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.deployment_pattern_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the deployment pattern.</p>
    pub fn set_deployment_pattern_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.deployment_pattern_name = input;
        self
    }
    /// <p>The name of the deployment pattern.</p>
    pub fn get_deployment_pattern_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.deployment_pattern_name
    }
    /// <p>The workload version name of the deployment pattern.</p>
    pub fn workload_version_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workload_version_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The workload version name of the deployment pattern.</p>
    pub fn set_workload_version_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workload_version_name = input;
        self
    }
    /// <p>The workload version name of the deployment pattern.</p>
    pub fn get_workload_version_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.workload_version_name
    }
    /// <p>The display name of the deployment pattern.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the deployment pattern.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name of the deployment pattern.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The description of the deployment pattern.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the deployment pattern.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the deployment pattern.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The status of the deployment pattern.</p>
    pub fn status(mut self, input: crate::types::WorkloadDeploymentPatternStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the deployment pattern.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::WorkloadDeploymentPatternStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the deployment pattern.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::WorkloadDeploymentPatternStatus> {
        &self.status
    }
    /// <p>The status message of the deployment pattern.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status message of the deployment pattern.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The status message of the deployment pattern.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// Appends an item to `specifications`.
    ///
    /// To override the contents of this collection use [`set_specifications`](Self::set_specifications).
    ///
    /// <p>The settings specified for the deployment. These settings define how to deploy and configure your resources created by the deployment. For more information about the specifications required for creating a deployment for a SAP workload, see <a href="https://docs.aws.amazon.com/launchwizard/latest/APIReference/launch-wizard-specifications-sap.html">SAP deployment specifications</a>. To retrieve the specifications required to create a deployment for other workloads, use the <a href="https://docs.aws.amazon.com/launchwizard/latest/APIReference/API_GetWorkloadDeploymentPattern.html"> <code>GetWorkloadDeploymentPattern</code> </a> operation.</p>
    pub fn specifications(mut self, input: crate::types::DeploymentSpecificationsField) -> Self {
        let mut v = self.specifications.unwrap_or_default();
        v.push(input);
        self.specifications = ::std::option::Option::Some(v);
        self
    }
    /// <p>The settings specified for the deployment. These settings define how to deploy and configure your resources created by the deployment. For more information about the specifications required for creating a deployment for a SAP workload, see <a href="https://docs.aws.amazon.com/launchwizard/latest/APIReference/launch-wizard-specifications-sap.html">SAP deployment specifications</a>. To retrieve the specifications required to create a deployment for other workloads, use the <a href="https://docs.aws.amazon.com/launchwizard/latest/APIReference/API_GetWorkloadDeploymentPattern.html"> <code>GetWorkloadDeploymentPattern</code> </a> operation.</p>
    pub fn set_specifications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DeploymentSpecificationsField>>) -> Self {
        self.specifications = input;
        self
    }
    /// <p>The settings specified for the deployment. These settings define how to deploy and configure your resources created by the deployment. For more information about the specifications required for creating a deployment for a SAP workload, see <a href="https://docs.aws.amazon.com/launchwizard/latest/APIReference/launch-wizard-specifications-sap.html">SAP deployment specifications</a>. To retrieve the specifications required to create a deployment for other workloads, use the <a href="https://docs.aws.amazon.com/launchwizard/latest/APIReference/API_GetWorkloadDeploymentPattern.html"> <code>GetWorkloadDeploymentPattern</code> </a> operation.</p>
    pub fn get_specifications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DeploymentSpecificationsField>> {
        &self.specifications
    }
    /// Consumes the builder and constructs a [`WorkloadDeploymentPatternData`](crate::types::WorkloadDeploymentPatternData).
    pub fn build(self) -> crate::types::WorkloadDeploymentPatternData {
        crate::types::WorkloadDeploymentPatternData {
            workload_name: self.workload_name,
            deployment_pattern_name: self.deployment_pattern_name,
            workload_version_name: self.workload_version_name,
            display_name: self.display_name,
            description: self.description,
            status: self.status,
            status_message: self.status_message,
            specifications: self.specifications,
        }
    }
}
