// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of the <code>EnabledBaseline</code> resource.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EnabledBaselineDetails {
    /// <p>The ARN of the <code>EnabledBaseline</code> resource.</p>
    pub arn: ::std::string::String,
    /// <p>The specific <code>Baseline</code> enabled as part of the <code>EnabledBaseline</code> resource.</p>
    pub baseline_identifier: ::std::string::String,
    /// <p>The enabled version of the <code>Baseline</code>.</p>
    pub baseline_version: ::std::option::Option<::std::string::String>,
    /// <p>The drift status of the enabled baseline.</p>
    pub drift_status_summary: ::std::option::Option<crate::types::EnabledBaselineDriftStatusSummary>,
    /// <p>The target on which to enable the <code>Baseline</code>.</p>
    pub target_identifier: ::std::string::String,
    /// <p>An ARN that represents the parent <code>EnabledBaseline</code> at the Organizational Unit (OU) level, from which the child <code>EnabledBaseline</code> inherits its configuration. The value is returned by <code>GetEnabledBaseline</code>.</p>
    pub parent_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The deployment summary of an <code>EnabledControl</code> or <code>EnabledBaseline</code> resource.</p>
    pub status_summary: ::std::option::Option<crate::types::EnablementStatusSummary>,
    /// <p>Shows the parameters that are applied when enabling this <code>Baseline</code>.</p>
    pub parameters: ::std::option::Option<::std::vec::Vec<crate::types::EnabledBaselineParameterSummary>>,
}
impl EnabledBaselineDetails {
    /// <p>The ARN of the <code>EnabledBaseline</code> resource.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The specific <code>Baseline</code> enabled as part of the <code>EnabledBaseline</code> resource.</p>
    pub fn baseline_identifier(&self) -> &str {
        use std::ops::Deref;
        self.baseline_identifier.deref()
    }
    /// <p>The enabled version of the <code>Baseline</code>.</p>
    pub fn baseline_version(&self) -> ::std::option::Option<&str> {
        self.baseline_version.as_deref()
    }
    /// <p>The drift status of the enabled baseline.</p>
    pub fn drift_status_summary(&self) -> ::std::option::Option<&crate::types::EnabledBaselineDriftStatusSummary> {
        self.drift_status_summary.as_ref()
    }
    /// <p>The target on which to enable the <code>Baseline</code>.</p>
    pub fn target_identifier(&self) -> &str {
        use std::ops::Deref;
        self.target_identifier.deref()
    }
    /// <p>An ARN that represents the parent <code>EnabledBaseline</code> at the Organizational Unit (OU) level, from which the child <code>EnabledBaseline</code> inherits its configuration. The value is returned by <code>GetEnabledBaseline</code>.</p>
    pub fn parent_identifier(&self) -> ::std::option::Option<&str> {
        self.parent_identifier.as_deref()
    }
    /// <p>The deployment summary of an <code>EnabledControl</code> or <code>EnabledBaseline</code> resource.</p>
    pub fn status_summary(&self) -> ::std::option::Option<&crate::types::EnablementStatusSummary> {
        self.status_summary.as_ref()
    }
    /// <p>Shows the parameters that are applied when enabling this <code>Baseline</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.parameters.is_none()`.
    pub fn parameters(&self) -> &[crate::types::EnabledBaselineParameterSummary] {
        self.parameters.as_deref().unwrap_or_default()
    }
}
impl EnabledBaselineDetails {
    /// Creates a new builder-style object to manufacture [`EnabledBaselineDetails`](crate::types::EnabledBaselineDetails).
    pub fn builder() -> crate::types::builders::EnabledBaselineDetailsBuilder {
        crate::types::builders::EnabledBaselineDetailsBuilder::default()
    }
}

/// A builder for [`EnabledBaselineDetails`](crate::types::EnabledBaselineDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EnabledBaselineDetailsBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) baseline_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) baseline_version: ::std::option::Option<::std::string::String>,
    pub(crate) drift_status_summary: ::std::option::Option<crate::types::EnabledBaselineDriftStatusSummary>,
    pub(crate) target_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) parent_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) status_summary: ::std::option::Option<crate::types::EnablementStatusSummary>,
    pub(crate) parameters: ::std::option::Option<::std::vec::Vec<crate::types::EnabledBaselineParameterSummary>>,
}
impl EnabledBaselineDetailsBuilder {
    /// <p>The ARN of the <code>EnabledBaseline</code> resource.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the <code>EnabledBaseline</code> resource.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the <code>EnabledBaseline</code> resource.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The specific <code>Baseline</code> enabled as part of the <code>EnabledBaseline</code> resource.</p>
    /// This field is required.
    pub fn baseline_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.baseline_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The specific <code>Baseline</code> enabled as part of the <code>EnabledBaseline</code> resource.</p>
    pub fn set_baseline_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.baseline_identifier = input;
        self
    }
    /// <p>The specific <code>Baseline</code> enabled as part of the <code>EnabledBaseline</code> resource.</p>
    pub fn get_baseline_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.baseline_identifier
    }
    /// <p>The enabled version of the <code>Baseline</code>.</p>
    pub fn baseline_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.baseline_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The enabled version of the <code>Baseline</code>.</p>
    pub fn set_baseline_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.baseline_version = input;
        self
    }
    /// <p>The enabled version of the <code>Baseline</code>.</p>
    pub fn get_baseline_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.baseline_version
    }
    /// <p>The drift status of the enabled baseline.</p>
    pub fn drift_status_summary(mut self, input: crate::types::EnabledBaselineDriftStatusSummary) -> Self {
        self.drift_status_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>The drift status of the enabled baseline.</p>
    pub fn set_drift_status_summary(mut self, input: ::std::option::Option<crate::types::EnabledBaselineDriftStatusSummary>) -> Self {
        self.drift_status_summary = input;
        self
    }
    /// <p>The drift status of the enabled baseline.</p>
    pub fn get_drift_status_summary(&self) -> &::std::option::Option<crate::types::EnabledBaselineDriftStatusSummary> {
        &self.drift_status_summary
    }
    /// <p>The target on which to enable the <code>Baseline</code>.</p>
    /// This field is required.
    pub fn target_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The target on which to enable the <code>Baseline</code>.</p>
    pub fn set_target_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_identifier = input;
        self
    }
    /// <p>The target on which to enable the <code>Baseline</code>.</p>
    pub fn get_target_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_identifier
    }
    /// <p>An ARN that represents the parent <code>EnabledBaseline</code> at the Organizational Unit (OU) level, from which the child <code>EnabledBaseline</code> inherits its configuration. The value is returned by <code>GetEnabledBaseline</code>.</p>
    pub fn parent_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parent_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An ARN that represents the parent <code>EnabledBaseline</code> at the Organizational Unit (OU) level, from which the child <code>EnabledBaseline</code> inherits its configuration. The value is returned by <code>GetEnabledBaseline</code>.</p>
    pub fn set_parent_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parent_identifier = input;
        self
    }
    /// <p>An ARN that represents the parent <code>EnabledBaseline</code> at the Organizational Unit (OU) level, from which the child <code>EnabledBaseline</code> inherits its configuration. The value is returned by <code>GetEnabledBaseline</code>.</p>
    pub fn get_parent_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.parent_identifier
    }
    /// <p>The deployment summary of an <code>EnabledControl</code> or <code>EnabledBaseline</code> resource.</p>
    /// This field is required.
    pub fn status_summary(mut self, input: crate::types::EnablementStatusSummary) -> Self {
        self.status_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>The deployment summary of an <code>EnabledControl</code> or <code>EnabledBaseline</code> resource.</p>
    pub fn set_status_summary(mut self, input: ::std::option::Option<crate::types::EnablementStatusSummary>) -> Self {
        self.status_summary = input;
        self
    }
    /// <p>The deployment summary of an <code>EnabledControl</code> or <code>EnabledBaseline</code> resource.</p>
    pub fn get_status_summary(&self) -> &::std::option::Option<crate::types::EnablementStatusSummary> {
        &self.status_summary
    }
    /// Appends an item to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>Shows the parameters that are applied when enabling this <code>Baseline</code>.</p>
    pub fn parameters(mut self, input: crate::types::EnabledBaselineParameterSummary) -> Self {
        let mut v = self.parameters.unwrap_or_default();
        v.push(input);
        self.parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Shows the parameters that are applied when enabling this <code>Baseline</code>.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EnabledBaselineParameterSummary>>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>Shows the parameters that are applied when enabling this <code>Baseline</code>.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EnabledBaselineParameterSummary>> {
        &self.parameters
    }
    /// Consumes the builder and constructs a [`EnabledBaselineDetails`](crate::types::EnabledBaselineDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::EnabledBaselineDetailsBuilder::arn)
    /// - [`baseline_identifier`](crate::types::builders::EnabledBaselineDetailsBuilder::baseline_identifier)
    /// - [`target_identifier`](crate::types::builders::EnabledBaselineDetailsBuilder::target_identifier)
    pub fn build(self) -> ::std::result::Result<crate::types::EnabledBaselineDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EnabledBaselineDetails {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building EnabledBaselineDetails",
                )
            })?,
            baseline_identifier: self.baseline_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "baseline_identifier",
                    "baseline_identifier was not specified but it is required when building EnabledBaselineDetails",
                )
            })?,
            baseline_version: self.baseline_version,
            drift_status_summary: self.drift_status_summary,
            target_identifier: self.target_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target_identifier",
                    "target_identifier was not specified but it is required when building EnabledBaselineDetails",
                )
            })?,
            parent_identifier: self.parent_identifier,
            status_summary: self.status_summary,
            parameters: self.parameters,
        })
    }
}
