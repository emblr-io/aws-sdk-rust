// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns a summary of information about a landing zone operation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LandingZoneOperationSummary {
    /// <p>The type of the landing zone operation.</p>
    pub operation_type: ::std::option::Option<crate::types::LandingZoneOperationType>,
    /// <p>The <code>operationIdentifier</code> of the landing zone operation.</p>
    pub operation_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The status of the landing zone operation.</p>
    pub status: ::std::option::Option<crate::types::LandingZoneOperationStatus>,
}
impl LandingZoneOperationSummary {
    /// <p>The type of the landing zone operation.</p>
    pub fn operation_type(&self) -> ::std::option::Option<&crate::types::LandingZoneOperationType> {
        self.operation_type.as_ref()
    }
    /// <p>The <code>operationIdentifier</code> of the landing zone operation.</p>
    pub fn operation_identifier(&self) -> ::std::option::Option<&str> {
        self.operation_identifier.as_deref()
    }
    /// <p>The status of the landing zone operation.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::LandingZoneOperationStatus> {
        self.status.as_ref()
    }
}
impl LandingZoneOperationSummary {
    /// Creates a new builder-style object to manufacture [`LandingZoneOperationSummary`](crate::types::LandingZoneOperationSummary).
    pub fn builder() -> crate::types::builders::LandingZoneOperationSummaryBuilder {
        crate::types::builders::LandingZoneOperationSummaryBuilder::default()
    }
}

/// A builder for [`LandingZoneOperationSummary`](crate::types::LandingZoneOperationSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LandingZoneOperationSummaryBuilder {
    pub(crate) operation_type: ::std::option::Option<crate::types::LandingZoneOperationType>,
    pub(crate) operation_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::LandingZoneOperationStatus>,
}
impl LandingZoneOperationSummaryBuilder {
    /// <p>The type of the landing zone operation.</p>
    pub fn operation_type(mut self, input: crate::types::LandingZoneOperationType) -> Self {
        self.operation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the landing zone operation.</p>
    pub fn set_operation_type(mut self, input: ::std::option::Option<crate::types::LandingZoneOperationType>) -> Self {
        self.operation_type = input;
        self
    }
    /// <p>The type of the landing zone operation.</p>
    pub fn get_operation_type(&self) -> &::std::option::Option<crate::types::LandingZoneOperationType> {
        &self.operation_type
    }
    /// <p>The <code>operationIdentifier</code> of the landing zone operation.</p>
    pub fn operation_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>operationIdentifier</code> of the landing zone operation.</p>
    pub fn set_operation_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation_identifier = input;
        self
    }
    /// <p>The <code>operationIdentifier</code> of the landing zone operation.</p>
    pub fn get_operation_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation_identifier
    }
    /// <p>The status of the landing zone operation.</p>
    pub fn status(mut self, input: crate::types::LandingZoneOperationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the landing zone operation.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::LandingZoneOperationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the landing zone operation.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::LandingZoneOperationStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`LandingZoneOperationSummary`](crate::types::LandingZoneOperationSummary).
    pub fn build(self) -> crate::types::LandingZoneOperationSummary {
        crate::types::LandingZoneOperationSummary {
            operation_type: self.operation_type,
            operation_identifier: self.operation_identifier,
            status: self.status,
        }
    }
}
