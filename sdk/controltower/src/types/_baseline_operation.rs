// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object of shape <code>BaselineOperation</code>, returning details about the specified <code>Baseline</code> operation ID.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BaselineOperation {
    /// <p>The identifier of the specified operation.</p>
    pub operation_identifier: ::std::option::Option<::std::string::String>,
    /// <p>An enumerated type (<code>enum</code>) with possible values of <code>ENABLE_BASELINE</code>, <code>DISABLE_BASELINE</code>, <code>UPDATE_ENABLED_BASELINE</code>, or <code>RESET_ENABLED_BASELINE</code>.</p>
    pub operation_type: ::std::option::Option<crate::types::BaselineOperationType>,
    /// <p>An enumerated type (<code>enum</code>) with possible values of <code>SUCCEEDED</code>, <code>FAILED</code>, or <code>IN_PROGRESS</code>.</p>
    pub status: ::std::option::Option<crate::types::BaselineOperationStatus>,
    /// <p>The start time of the operation, in ISO 8601 format.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The end time of the operation (if applicable), in ISO 8601 format.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A status message that gives more information about the operation's status, if applicable.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
}
impl BaselineOperation {
    /// <p>The identifier of the specified operation.</p>
    pub fn operation_identifier(&self) -> ::std::option::Option<&str> {
        self.operation_identifier.as_deref()
    }
    /// <p>An enumerated type (<code>enum</code>) with possible values of <code>ENABLE_BASELINE</code>, <code>DISABLE_BASELINE</code>, <code>UPDATE_ENABLED_BASELINE</code>, or <code>RESET_ENABLED_BASELINE</code>.</p>
    pub fn operation_type(&self) -> ::std::option::Option<&crate::types::BaselineOperationType> {
        self.operation_type.as_ref()
    }
    /// <p>An enumerated type (<code>enum</code>) with possible values of <code>SUCCEEDED</code>, <code>FAILED</code>, or <code>IN_PROGRESS</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::BaselineOperationStatus> {
        self.status.as_ref()
    }
    /// <p>The start time of the operation, in ISO 8601 format.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The end time of the operation (if applicable), in ISO 8601 format.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>A status message that gives more information about the operation's status, if applicable.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
}
impl BaselineOperation {
    /// Creates a new builder-style object to manufacture [`BaselineOperation`](crate::types::BaselineOperation).
    pub fn builder() -> crate::types::builders::BaselineOperationBuilder {
        crate::types::builders::BaselineOperationBuilder::default()
    }
}

/// A builder for [`BaselineOperation`](crate::types::BaselineOperation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BaselineOperationBuilder {
    pub(crate) operation_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) operation_type: ::std::option::Option<crate::types::BaselineOperationType>,
    pub(crate) status: ::std::option::Option<crate::types::BaselineOperationStatus>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
}
impl BaselineOperationBuilder {
    /// <p>The identifier of the specified operation.</p>
    pub fn operation_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the specified operation.</p>
    pub fn set_operation_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation_identifier = input;
        self
    }
    /// <p>The identifier of the specified operation.</p>
    pub fn get_operation_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation_identifier
    }
    /// <p>An enumerated type (<code>enum</code>) with possible values of <code>ENABLE_BASELINE</code>, <code>DISABLE_BASELINE</code>, <code>UPDATE_ENABLED_BASELINE</code>, or <code>RESET_ENABLED_BASELINE</code>.</p>
    pub fn operation_type(mut self, input: crate::types::BaselineOperationType) -> Self {
        self.operation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>An enumerated type (<code>enum</code>) with possible values of <code>ENABLE_BASELINE</code>, <code>DISABLE_BASELINE</code>, <code>UPDATE_ENABLED_BASELINE</code>, or <code>RESET_ENABLED_BASELINE</code>.</p>
    pub fn set_operation_type(mut self, input: ::std::option::Option<crate::types::BaselineOperationType>) -> Self {
        self.operation_type = input;
        self
    }
    /// <p>An enumerated type (<code>enum</code>) with possible values of <code>ENABLE_BASELINE</code>, <code>DISABLE_BASELINE</code>, <code>UPDATE_ENABLED_BASELINE</code>, or <code>RESET_ENABLED_BASELINE</code>.</p>
    pub fn get_operation_type(&self) -> &::std::option::Option<crate::types::BaselineOperationType> {
        &self.operation_type
    }
    /// <p>An enumerated type (<code>enum</code>) with possible values of <code>SUCCEEDED</code>, <code>FAILED</code>, or <code>IN_PROGRESS</code>.</p>
    pub fn status(mut self, input: crate::types::BaselineOperationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>An enumerated type (<code>enum</code>) with possible values of <code>SUCCEEDED</code>, <code>FAILED</code>, or <code>IN_PROGRESS</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::BaselineOperationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>An enumerated type (<code>enum</code>) with possible values of <code>SUCCEEDED</code>, <code>FAILED</code>, or <code>IN_PROGRESS</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::BaselineOperationStatus> {
        &self.status
    }
    /// <p>The start time of the operation, in ISO 8601 format.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start time of the operation, in ISO 8601 format.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The start time of the operation, in ISO 8601 format.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The end time of the operation (if applicable), in ISO 8601 format.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end time of the operation (if applicable), in ISO 8601 format.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The end time of the operation (if applicable), in ISO 8601 format.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>A status message that gives more information about the operation's status, if applicable.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A status message that gives more information about the operation's status, if applicable.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>A status message that gives more information about the operation's status, if applicable.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// Consumes the builder and constructs a [`BaselineOperation`](crate::types::BaselineOperation).
    pub fn build(self) -> crate::types::BaselineOperation {
        crate::types::BaselineOperation {
            operation_identifier: self.operation_identifier,
            operation_type: self.operation_type,
            status: self.status,
            start_time: self.start_time,
            end_time: self.end_time,
            status_message: self.status_message,
        }
    }
}
