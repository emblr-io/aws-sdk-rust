// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The types of drift that can be detected for an enabled baseline.</p>
/// <ul>
/// <li>
/// <p>Amazon Web Services Control Tower detects inheritance drift on the enabled baselines that target OUs: <code>AWSControlTowerBaseline</code> and <code>BackupBaseline</code>.</p></li>
/// <li>
/// <p>Amazon Web Services Control Tower does not detect drift on the baselines that apply to your landing zone: <code>IdentityCenterBaseline</code>, <code>AuditBaseline</code>, <code>LogArchiveBaseline</code>, <code>BackupCentralVaultBaseline</code>, or <code>BackupAdminBaseline</code>. For more information, see <a href="https://docs.aws.amazon.com/controltower/latest/userguide/types-of-baselines.html">Types of baselines</a>.</p></li>
/// </ul>
/// <p>Baselines enabled on an OU are inherited by its member accounts as child <code>EnabledBaseline</code> resources. The baseline on the OU serves as the parent <code>EnabledBaseline</code>, which governs the configuration of each child <code>EnabledBaseline</code>.</p>
/// <p>If the baseline configuration of a member account in an OU does not match the configuration of the parent OU, the parent and child baseline is in a state of inheritance drift. This drift could occur in the <code>AWSControlTowerBaseline</code> or the <code>BackupBaseline</code> related to that account.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EnabledBaselineDriftTypes {
    /// <p>At least one account within the target OU does not match the baseline configuration defined on that OU. An account is in inheritance drift when it does not match the configuration of a parent OU, possibly a new parent OU, if the account is moved.</p>
    pub inheritance: ::std::option::Option<crate::types::EnabledBaselineInheritanceDrift>,
}
impl EnabledBaselineDriftTypes {
    /// <p>At least one account within the target OU does not match the baseline configuration defined on that OU. An account is in inheritance drift when it does not match the configuration of a parent OU, possibly a new parent OU, if the account is moved.</p>
    pub fn inheritance(&self) -> ::std::option::Option<&crate::types::EnabledBaselineInheritanceDrift> {
        self.inheritance.as_ref()
    }
}
impl EnabledBaselineDriftTypes {
    /// Creates a new builder-style object to manufacture [`EnabledBaselineDriftTypes`](crate::types::EnabledBaselineDriftTypes).
    pub fn builder() -> crate::types::builders::EnabledBaselineDriftTypesBuilder {
        crate::types::builders::EnabledBaselineDriftTypesBuilder::default()
    }
}

/// A builder for [`EnabledBaselineDriftTypes`](crate::types::EnabledBaselineDriftTypes).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EnabledBaselineDriftTypesBuilder {
    pub(crate) inheritance: ::std::option::Option<crate::types::EnabledBaselineInheritanceDrift>,
}
impl EnabledBaselineDriftTypesBuilder {
    /// <p>At least one account within the target OU does not match the baseline configuration defined on that OU. An account is in inheritance drift when it does not match the configuration of a parent OU, possibly a new parent OU, if the account is moved.</p>
    pub fn inheritance(mut self, input: crate::types::EnabledBaselineInheritanceDrift) -> Self {
        self.inheritance = ::std::option::Option::Some(input);
        self
    }
    /// <p>At least one account within the target OU does not match the baseline configuration defined on that OU. An account is in inheritance drift when it does not match the configuration of a parent OU, possibly a new parent OU, if the account is moved.</p>
    pub fn set_inheritance(mut self, input: ::std::option::Option<crate::types::EnabledBaselineInheritanceDrift>) -> Self {
        self.inheritance = input;
        self
    }
    /// <p>At least one account within the target OU does not match the baseline configuration defined on that OU. An account is in inheritance drift when it does not match the configuration of a parent OU, possibly a new parent OU, if the account is moved.</p>
    pub fn get_inheritance(&self) -> &::std::option::Option<crate::types::EnabledBaselineInheritanceDrift> {
        &self.inheritance
    }
    /// Consumes the builder and constructs a [`EnabledBaselineDriftTypes`](crate::types::EnabledBaselineDriftTypes).
    pub fn build(self) -> crate::types::EnabledBaselineDriftTypes {
        crate::types::EnabledBaselineDriftTypes {
            inheritance: self.inheritance,
        }
    }
}
