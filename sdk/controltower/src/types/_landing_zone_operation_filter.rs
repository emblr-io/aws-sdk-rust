// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filter object that lets you call <code>ListLandingZoneOperations</code> with a specific filter.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LandingZoneOperationFilter {
    /// <p>The set of landing zone operation types selected by the filter.</p>
    pub types: ::std::option::Option<::std::vec::Vec<crate::types::LandingZoneOperationType>>,
    /// <p>The statuses of the set of landing zone operations selected by the filter.</p>
    pub statuses: ::std::option::Option<::std::vec::Vec<crate::types::LandingZoneOperationStatus>>,
}
impl LandingZoneOperationFilter {
    /// <p>The set of landing zone operation types selected by the filter.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.types.is_none()`.
    pub fn types(&self) -> &[crate::types::LandingZoneOperationType] {
        self.types.as_deref().unwrap_or_default()
    }
    /// <p>The statuses of the set of landing zone operations selected by the filter.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.statuses.is_none()`.
    pub fn statuses(&self) -> &[crate::types::LandingZoneOperationStatus] {
        self.statuses.as_deref().unwrap_or_default()
    }
}
impl LandingZoneOperationFilter {
    /// Creates a new builder-style object to manufacture [`LandingZoneOperationFilter`](crate::types::LandingZoneOperationFilter).
    pub fn builder() -> crate::types::builders::LandingZoneOperationFilterBuilder {
        crate::types::builders::LandingZoneOperationFilterBuilder::default()
    }
}

/// A builder for [`LandingZoneOperationFilter`](crate::types::LandingZoneOperationFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LandingZoneOperationFilterBuilder {
    pub(crate) types: ::std::option::Option<::std::vec::Vec<crate::types::LandingZoneOperationType>>,
    pub(crate) statuses: ::std::option::Option<::std::vec::Vec<crate::types::LandingZoneOperationStatus>>,
}
impl LandingZoneOperationFilterBuilder {
    /// Appends an item to `types`.
    ///
    /// To override the contents of this collection use [`set_types`](Self::set_types).
    ///
    /// <p>The set of landing zone operation types selected by the filter.</p>
    pub fn types(mut self, input: crate::types::LandingZoneOperationType) -> Self {
        let mut v = self.types.unwrap_or_default();
        v.push(input);
        self.types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The set of landing zone operation types selected by the filter.</p>
    pub fn set_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LandingZoneOperationType>>) -> Self {
        self.types = input;
        self
    }
    /// <p>The set of landing zone operation types selected by the filter.</p>
    pub fn get_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LandingZoneOperationType>> {
        &self.types
    }
    /// Appends an item to `statuses`.
    ///
    /// To override the contents of this collection use [`set_statuses`](Self::set_statuses).
    ///
    /// <p>The statuses of the set of landing zone operations selected by the filter.</p>
    pub fn statuses(mut self, input: crate::types::LandingZoneOperationStatus) -> Self {
        let mut v = self.statuses.unwrap_or_default();
        v.push(input);
        self.statuses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The statuses of the set of landing zone operations selected by the filter.</p>
    pub fn set_statuses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LandingZoneOperationStatus>>) -> Self {
        self.statuses = input;
        self
    }
    /// <p>The statuses of the set of landing zone operations selected by the filter.</p>
    pub fn get_statuses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LandingZoneOperationStatus>> {
        &self.statuses
    }
    /// Consumes the builder and constructs a [`LandingZoneOperationFilter`](crate::types::LandingZoneOperationFilter).
    pub fn build(self) -> crate::types::LandingZoneOperationFilter {
        crate::types::LandingZoneOperationFilter {
            types: self.types,
            statuses: self.statuses,
        }
    }
}
