// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The inheritance drift summary for the enabled baseline. Inheritance drift occurs when any accounts in the target OU do not match the baseline configuration defined on that OU.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EnabledBaselineInheritanceDrift {
    /// <p>The inheritance drift status for enabled baselines.</p>
    pub status: ::std::option::Option<crate::types::EnabledBaselineDriftStatus>,
}
impl EnabledBaselineInheritanceDrift {
    /// <p>The inheritance drift status for enabled baselines.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::EnabledBaselineDriftStatus> {
        self.status.as_ref()
    }
}
impl EnabledBaselineInheritanceDrift {
    /// Creates a new builder-style object to manufacture [`EnabledBaselineInheritanceDrift`](crate::types::EnabledBaselineInheritanceDrift).
    pub fn builder() -> crate::types::builders::EnabledBaselineInheritanceDriftBuilder {
        crate::types::builders::EnabledBaselineInheritanceDriftBuilder::default()
    }
}

/// A builder for [`EnabledBaselineInheritanceDrift`](crate::types::EnabledBaselineInheritanceDrift).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EnabledBaselineInheritanceDriftBuilder {
    pub(crate) status: ::std::option::Option<crate::types::EnabledBaselineDriftStatus>,
}
impl EnabledBaselineInheritanceDriftBuilder {
    /// <p>The inheritance drift status for enabled baselines.</p>
    pub fn status(mut self, input: crate::types::EnabledBaselineDriftStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The inheritance drift status for enabled baselines.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::EnabledBaselineDriftStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The inheritance drift status for enabled baselines.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::EnabledBaselineDriftStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`EnabledBaselineInheritanceDrift`](crate::types::EnabledBaselineInheritanceDrift).
    pub fn build(self) -> crate::types::EnabledBaselineInheritanceDrift {
        crate::types::EnabledBaselineInheritanceDrift { status: self.status }
    }
}
