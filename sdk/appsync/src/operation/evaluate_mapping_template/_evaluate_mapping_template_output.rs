// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EvaluateMappingTemplateOutput {
    /// <p>The mapping template; this can be a request or response template.</p>
    pub evaluation_result: ::std::option::Option<::std::string::String>,
    /// <p>The <code>ErrorDetail</code> object.</p>
    pub error: ::std::option::Option<crate::types::ErrorDetail>,
    /// <p>A list of logs that were generated by calls to <code>util.log.info</code> and <code>util.log.error</code> in the evaluated code.</p>
    pub logs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>An object available inside each resolver and function handler. A single <code>stash</code> object lives through a single resolver run. Therefore, you can use the stash to pass arbitrary data across request and response handlers and across functions in a pipeline resolver.</p>
    pub stash: ::std::option::Option<::std::string::String>,
    /// <p>The list of runtime errors that are added to the GraphQL operation response.</p>
    pub out_errors: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl EvaluateMappingTemplateOutput {
    /// <p>The mapping template; this can be a request or response template.</p>
    pub fn evaluation_result(&self) -> ::std::option::Option<&str> {
        self.evaluation_result.as_deref()
    }
    /// <p>The <code>ErrorDetail</code> object.</p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::ErrorDetail> {
        self.error.as_ref()
    }
    /// <p>A list of logs that were generated by calls to <code>util.log.info</code> and <code>util.log.error</code> in the evaluated code.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.logs.is_none()`.
    pub fn logs(&self) -> &[::std::string::String] {
        self.logs.as_deref().unwrap_or_default()
    }
    /// <p>An object available inside each resolver and function handler. A single <code>stash</code> object lives through a single resolver run. Therefore, you can use the stash to pass arbitrary data across request and response handlers and across functions in a pipeline resolver.</p>
    pub fn stash(&self) -> ::std::option::Option<&str> {
        self.stash.as_deref()
    }
    /// <p>The list of runtime errors that are added to the GraphQL operation response.</p>
    pub fn out_errors(&self) -> ::std::option::Option<&str> {
        self.out_errors.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for EvaluateMappingTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl EvaluateMappingTemplateOutput {
    /// Creates a new builder-style object to manufacture [`EvaluateMappingTemplateOutput`](crate::operation::evaluate_mapping_template::EvaluateMappingTemplateOutput).
    pub fn builder() -> crate::operation::evaluate_mapping_template::builders::EvaluateMappingTemplateOutputBuilder {
        crate::operation::evaluate_mapping_template::builders::EvaluateMappingTemplateOutputBuilder::default()
    }
}

/// A builder for [`EvaluateMappingTemplateOutput`](crate::operation::evaluate_mapping_template::EvaluateMappingTemplateOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EvaluateMappingTemplateOutputBuilder {
    pub(crate) evaluation_result: ::std::option::Option<::std::string::String>,
    pub(crate) error: ::std::option::Option<crate::types::ErrorDetail>,
    pub(crate) logs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) stash: ::std::option::Option<::std::string::String>,
    pub(crate) out_errors: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl EvaluateMappingTemplateOutputBuilder {
    /// <p>The mapping template; this can be a request or response template.</p>
    pub fn evaluation_result(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.evaluation_result = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The mapping template; this can be a request or response template.</p>
    pub fn set_evaluation_result(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.evaluation_result = input;
        self
    }
    /// <p>The mapping template; this can be a request or response template.</p>
    pub fn get_evaluation_result(&self) -> &::std::option::Option<::std::string::String> {
        &self.evaluation_result
    }
    /// <p>The <code>ErrorDetail</code> object.</p>
    pub fn error(mut self, input: crate::types::ErrorDetail) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>ErrorDetail</code> object.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::ErrorDetail>) -> Self {
        self.error = input;
        self
    }
    /// <p>The <code>ErrorDetail</code> object.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::ErrorDetail> {
        &self.error
    }
    /// Appends an item to `logs`.
    ///
    /// To override the contents of this collection use [`set_logs`](Self::set_logs).
    ///
    /// <p>A list of logs that were generated by calls to <code>util.log.info</code> and <code>util.log.error</code> in the evaluated code.</p>
    pub fn logs(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.logs.unwrap_or_default();
        v.push(input.into());
        self.logs = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of logs that were generated by calls to <code>util.log.info</code> and <code>util.log.error</code> in the evaluated code.</p>
    pub fn set_logs(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.logs = input;
        self
    }
    /// <p>A list of logs that were generated by calls to <code>util.log.info</code> and <code>util.log.error</code> in the evaluated code.</p>
    pub fn get_logs(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.logs
    }
    /// <p>An object available inside each resolver and function handler. A single <code>stash</code> object lives through a single resolver run. Therefore, you can use the stash to pass arbitrary data across request and response handlers and across functions in a pipeline resolver.</p>
    pub fn stash(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stash = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An object available inside each resolver and function handler. A single <code>stash</code> object lives through a single resolver run. Therefore, you can use the stash to pass arbitrary data across request and response handlers and across functions in a pipeline resolver.</p>
    pub fn set_stash(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stash = input;
        self
    }
    /// <p>An object available inside each resolver and function handler. A single <code>stash</code> object lives through a single resolver run. Therefore, you can use the stash to pass arbitrary data across request and response handlers and across functions in a pipeline resolver.</p>
    pub fn get_stash(&self) -> &::std::option::Option<::std::string::String> {
        &self.stash
    }
    /// <p>The list of runtime errors that are added to the GraphQL operation response.</p>
    pub fn out_errors(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.out_errors = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The list of runtime errors that are added to the GraphQL operation response.</p>
    pub fn set_out_errors(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.out_errors = input;
        self
    }
    /// <p>The list of runtime errors that are added to the GraphQL operation response.</p>
    pub fn get_out_errors(&self) -> &::std::option::Option<::std::string::String> {
        &self.out_errors
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`EvaluateMappingTemplateOutput`](crate::operation::evaluate_mapping_template::EvaluateMappingTemplateOutput).
    pub fn build(self) -> crate::operation::evaluate_mapping_template::EvaluateMappingTemplateOutput {
        crate::operation::evaluate_mapping_template::EvaluateMappingTemplateOutput {
            evaluation_result: self.evaluation_result,
            error: self.error,
            logs: self.logs,
            stash: self.stash,
            out_errors: self.out_errors,
            _request_id: self._request_id,
        }
    }
}
