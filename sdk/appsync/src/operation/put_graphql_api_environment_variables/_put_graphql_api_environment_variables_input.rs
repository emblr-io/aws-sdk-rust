// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutGraphqlApiEnvironmentVariablesInput {
    /// <p>The ID of the API to which the environmental variable list will be written.</p>
    pub api_id: ::std::option::Option<::std::string::String>,
    /// <p>The list of environmental variables to add to the API.</p>
    /// <p>When creating an environmental variable key-value pair, it must follow the additional constraints below:</p>
    /// <ul>
    /// <li>
    /// <p>Keys must begin with a letter.</p></li>
    /// <li>
    /// <p>Keys must be at least two characters long.</p></li>
    /// <li>
    /// <p>Keys can only contain letters, numbers, and the underscore character (_).</p></li>
    /// <li>
    /// <p>Values can be up to 512 characters long.</p></li>
    /// <li>
    /// <p>You can configure up to 50 key-value pairs in a GraphQL API.</p></li>
    /// </ul>
    /// <p>You can create a list of environmental variables by adding it to the <code>environmentVariables</code> payload as a list in the format <code>{"key1":"value1","key2":"value2", …}</code>. Note that each call of the <code>PutGraphqlApiEnvironmentVariables</code> action will result in the overwriting of the existing environmental variable list of that API. This means the existing environmental variables will be lost. To avoid this, you must include all existing and new environmental variables in the list each time you call this action.</p>
    pub environment_variables: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl PutGraphqlApiEnvironmentVariablesInput {
    /// <p>The ID of the API to which the environmental variable list will be written.</p>
    pub fn api_id(&self) -> ::std::option::Option<&str> {
        self.api_id.as_deref()
    }
    /// <p>The list of environmental variables to add to the API.</p>
    /// <p>When creating an environmental variable key-value pair, it must follow the additional constraints below:</p>
    /// <ul>
    /// <li>
    /// <p>Keys must begin with a letter.</p></li>
    /// <li>
    /// <p>Keys must be at least two characters long.</p></li>
    /// <li>
    /// <p>Keys can only contain letters, numbers, and the underscore character (_).</p></li>
    /// <li>
    /// <p>Values can be up to 512 characters long.</p></li>
    /// <li>
    /// <p>You can configure up to 50 key-value pairs in a GraphQL API.</p></li>
    /// </ul>
    /// <p>You can create a list of environmental variables by adding it to the <code>environmentVariables</code> payload as a list in the format <code>{"key1":"value1","key2":"value2", …}</code>. Note that each call of the <code>PutGraphqlApiEnvironmentVariables</code> action will result in the overwriting of the existing environmental variable list of that API. This means the existing environmental variables will be lost. To avoid this, you must include all existing and new environmental variables in the list each time you call this action.</p>
    pub fn environment_variables(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.environment_variables.as_ref()
    }
}
impl PutGraphqlApiEnvironmentVariablesInput {
    /// Creates a new builder-style object to manufacture [`PutGraphqlApiEnvironmentVariablesInput`](crate::operation::put_graphql_api_environment_variables::PutGraphqlApiEnvironmentVariablesInput).
    pub fn builder() -> crate::operation::put_graphql_api_environment_variables::builders::PutGraphqlApiEnvironmentVariablesInputBuilder {
        crate::operation::put_graphql_api_environment_variables::builders::PutGraphqlApiEnvironmentVariablesInputBuilder::default()
    }
}

/// A builder for [`PutGraphqlApiEnvironmentVariablesInput`](crate::operation::put_graphql_api_environment_variables::PutGraphqlApiEnvironmentVariablesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PutGraphqlApiEnvironmentVariablesInputBuilder {
    pub(crate) api_id: ::std::option::Option<::std::string::String>,
    pub(crate) environment_variables: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl PutGraphqlApiEnvironmentVariablesInputBuilder {
    /// <p>The ID of the API to which the environmental variable list will be written.</p>
    /// This field is required.
    pub fn api_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.api_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the API to which the environmental variable list will be written.</p>
    pub fn set_api_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.api_id = input;
        self
    }
    /// <p>The ID of the API to which the environmental variable list will be written.</p>
    pub fn get_api_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.api_id
    }
    /// Adds a key-value pair to `environment_variables`.
    ///
    /// To override the contents of this collection use [`set_environment_variables`](Self::set_environment_variables).
    ///
    /// <p>The list of environmental variables to add to the API.</p>
    /// <p>When creating an environmental variable key-value pair, it must follow the additional constraints below:</p>
    /// <ul>
    /// <li>
    /// <p>Keys must begin with a letter.</p></li>
    /// <li>
    /// <p>Keys must be at least two characters long.</p></li>
    /// <li>
    /// <p>Keys can only contain letters, numbers, and the underscore character (_).</p></li>
    /// <li>
    /// <p>Values can be up to 512 characters long.</p></li>
    /// <li>
    /// <p>You can configure up to 50 key-value pairs in a GraphQL API.</p></li>
    /// </ul>
    /// <p>You can create a list of environmental variables by adding it to the <code>environmentVariables</code> payload as a list in the format <code>{"key1":"value1","key2":"value2", …}</code>. Note that each call of the <code>PutGraphqlApiEnvironmentVariables</code> action will result in the overwriting of the existing environmental variable list of that API. This means the existing environmental variables will be lost. To avoid this, you must include all existing and new environmental variables in the list each time you call this action.</p>
    pub fn environment_variables(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.environment_variables.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.environment_variables = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The list of environmental variables to add to the API.</p>
    /// <p>When creating an environmental variable key-value pair, it must follow the additional constraints below:</p>
    /// <ul>
    /// <li>
    /// <p>Keys must begin with a letter.</p></li>
    /// <li>
    /// <p>Keys must be at least two characters long.</p></li>
    /// <li>
    /// <p>Keys can only contain letters, numbers, and the underscore character (_).</p></li>
    /// <li>
    /// <p>Values can be up to 512 characters long.</p></li>
    /// <li>
    /// <p>You can configure up to 50 key-value pairs in a GraphQL API.</p></li>
    /// </ul>
    /// <p>You can create a list of environmental variables by adding it to the <code>environmentVariables</code> payload as a list in the format <code>{"key1":"value1","key2":"value2", …}</code>. Note that each call of the <code>PutGraphqlApiEnvironmentVariables</code> action will result in the overwriting of the existing environmental variable list of that API. This means the existing environmental variables will be lost. To avoid this, you must include all existing and new environmental variables in the list each time you call this action.</p>
    pub fn set_environment_variables(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.environment_variables = input;
        self
    }
    /// <p>The list of environmental variables to add to the API.</p>
    /// <p>When creating an environmental variable key-value pair, it must follow the additional constraints below:</p>
    /// <ul>
    /// <li>
    /// <p>Keys must begin with a letter.</p></li>
    /// <li>
    /// <p>Keys must be at least two characters long.</p></li>
    /// <li>
    /// <p>Keys can only contain letters, numbers, and the underscore character (_).</p></li>
    /// <li>
    /// <p>Values can be up to 512 characters long.</p></li>
    /// <li>
    /// <p>You can configure up to 50 key-value pairs in a GraphQL API.</p></li>
    /// </ul>
    /// <p>You can create a list of environmental variables by adding it to the <code>environmentVariables</code> payload as a list in the format <code>{"key1":"value1","key2":"value2", …}</code>. Note that each call of the <code>PutGraphqlApiEnvironmentVariables</code> action will result in the overwriting of the existing environmental variable list of that API. This means the existing environmental variables will be lost. To avoid this, you must include all existing and new environmental variables in the list each time you call this action.</p>
    pub fn get_environment_variables(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.environment_variables
    }
    /// Consumes the builder and constructs a [`PutGraphqlApiEnvironmentVariablesInput`](crate::operation::put_graphql_api_environment_variables::PutGraphqlApiEnvironmentVariablesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_graphql_api_environment_variables::PutGraphqlApiEnvironmentVariablesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::put_graphql_api_environment_variables::PutGraphqlApiEnvironmentVariablesInput {
                api_id: self.api_id,
                environment_variables: self.environment_variables,
            },
        )
    }
}
