// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateApiInput {
    /// <p>The <code>Api</code> ID.</p>
    pub api_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Api.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The owner contact information for the <code>Api</code>.</p>
    pub owner_contact: ::std::option::Option<::std::string::String>,
    /// <p>The new event configuration. This includes the default authorization configuration for connecting, publishing, and subscribing to an Event API.</p>
    pub event_config: ::std::option::Option<crate::types::EventConfig>,
}
impl UpdateApiInput {
    /// <p>The <code>Api</code> ID.</p>
    pub fn api_id(&self) -> ::std::option::Option<&str> {
        self.api_id.as_deref()
    }
    /// <p>The name of the Api.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The owner contact information for the <code>Api</code>.</p>
    pub fn owner_contact(&self) -> ::std::option::Option<&str> {
        self.owner_contact.as_deref()
    }
    /// <p>The new event configuration. This includes the default authorization configuration for connecting, publishing, and subscribing to an Event API.</p>
    pub fn event_config(&self) -> ::std::option::Option<&crate::types::EventConfig> {
        self.event_config.as_ref()
    }
}
impl UpdateApiInput {
    /// Creates a new builder-style object to manufacture [`UpdateApiInput`](crate::operation::update_api::UpdateApiInput).
    pub fn builder() -> crate::operation::update_api::builders::UpdateApiInputBuilder {
        crate::operation::update_api::builders::UpdateApiInputBuilder::default()
    }
}

/// A builder for [`UpdateApiInput`](crate::operation::update_api::UpdateApiInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateApiInputBuilder {
    pub(crate) api_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) owner_contact: ::std::option::Option<::std::string::String>,
    pub(crate) event_config: ::std::option::Option<crate::types::EventConfig>,
}
impl UpdateApiInputBuilder {
    /// <p>The <code>Api</code> ID.</p>
    /// This field is required.
    pub fn api_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.api_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>Api</code> ID.</p>
    pub fn set_api_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.api_id = input;
        self
    }
    /// <p>The <code>Api</code> ID.</p>
    pub fn get_api_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.api_id
    }
    /// <p>The name of the Api.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Api.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Api.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The owner contact information for the <code>Api</code>.</p>
    pub fn owner_contact(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_contact = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The owner contact information for the <code>Api</code>.</p>
    pub fn set_owner_contact(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_contact = input;
        self
    }
    /// <p>The owner contact information for the <code>Api</code>.</p>
    pub fn get_owner_contact(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_contact
    }
    /// <p>The new event configuration. This includes the default authorization configuration for connecting, publishing, and subscribing to an Event API.</p>
    pub fn event_config(mut self, input: crate::types::EventConfig) -> Self {
        self.event_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The new event configuration. This includes the default authorization configuration for connecting, publishing, and subscribing to an Event API.</p>
    pub fn set_event_config(mut self, input: ::std::option::Option<crate::types::EventConfig>) -> Self {
        self.event_config = input;
        self
    }
    /// <p>The new event configuration. This includes the default authorization configuration for connecting, publishing, and subscribing to an Event API.</p>
    pub fn get_event_config(&self) -> &::std::option::Option<crate::types::EventConfig> {
        &self.event_config
    }
    /// Consumes the builder and constructs a [`UpdateApiInput`](crate::operation::update_api::UpdateApiInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_api::UpdateApiInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_api::UpdateApiInput {
            api_id: self.api_id,
            name: self.name,
            owner_contact: self.owner_contact,
            event_config: self.event_config,
        })
    }
}
