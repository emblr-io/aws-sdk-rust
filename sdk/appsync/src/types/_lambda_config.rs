// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for a Lambda data source.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LambdaConfig {
    /// <p>The invocation type for a Lambda data source.</p>
    pub invoke_type: ::std::option::Option<crate::types::InvokeType>,
}
impl LambdaConfig {
    /// <p>The invocation type for a Lambda data source.</p>
    pub fn invoke_type(&self) -> ::std::option::Option<&crate::types::InvokeType> {
        self.invoke_type.as_ref()
    }
}
impl LambdaConfig {
    /// Creates a new builder-style object to manufacture [`LambdaConfig`](crate::types::LambdaConfig).
    pub fn builder() -> crate::types::builders::LambdaConfigBuilder {
        crate::types::builders::LambdaConfigBuilder::default()
    }
}

/// A builder for [`LambdaConfig`](crate::types::LambdaConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LambdaConfigBuilder {
    pub(crate) invoke_type: ::std::option::Option<crate::types::InvokeType>,
}
impl LambdaConfigBuilder {
    /// <p>The invocation type for a Lambda data source.</p>
    pub fn invoke_type(mut self, input: crate::types::InvokeType) -> Self {
        self.invoke_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The invocation type for a Lambda data source.</p>
    pub fn set_invoke_type(mut self, input: ::std::option::Option<crate::types::InvokeType>) -> Self {
        self.invoke_type = input;
        self
    }
    /// <p>The invocation type for a Lambda data source.</p>
    pub fn get_invoke_type(&self) -> &::std::option::Option<crate::types::InvokeType> {
        &self.invoke_type
    }
    /// Consumes the builder and constructs a [`LambdaConfig`](crate::types::LambdaConfig).
    pub fn build(self) -> crate::types::LambdaConfig {
        crate::types::LambdaConfig {
            invoke_type: self.invoke_type,
        }
    }
}
