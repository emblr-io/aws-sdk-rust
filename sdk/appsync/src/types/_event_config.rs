// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the authorization configuration for connections, message publishing, message subscriptions, and logging for an Event API.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EventConfig {
    /// <p>A list of authorization providers.</p>
    pub auth_providers: ::std::vec::Vec<crate::types::AuthProvider>,
    /// <p>A list of valid authorization modes for the Event API connections.</p>
    pub connection_auth_modes: ::std::vec::Vec<crate::types::AuthMode>,
    /// <p>A list of valid authorization modes for the Event API publishing.</p>
    pub default_publish_auth_modes: ::std::vec::Vec<crate::types::AuthMode>,
    /// <p>A list of valid authorization modes for the Event API subscriptions.</p>
    pub default_subscribe_auth_modes: ::std::vec::Vec<crate::types::AuthMode>,
    /// <p>The CloudWatch Logs configuration for the Event API.</p>
    pub log_config: ::std::option::Option<crate::types::EventLogConfig>,
}
impl EventConfig {
    /// <p>A list of authorization providers.</p>
    pub fn auth_providers(&self) -> &[crate::types::AuthProvider] {
        use std::ops::Deref;
        self.auth_providers.deref()
    }
    /// <p>A list of valid authorization modes for the Event API connections.</p>
    pub fn connection_auth_modes(&self) -> &[crate::types::AuthMode] {
        use std::ops::Deref;
        self.connection_auth_modes.deref()
    }
    /// <p>A list of valid authorization modes for the Event API publishing.</p>
    pub fn default_publish_auth_modes(&self) -> &[crate::types::AuthMode] {
        use std::ops::Deref;
        self.default_publish_auth_modes.deref()
    }
    /// <p>A list of valid authorization modes for the Event API subscriptions.</p>
    pub fn default_subscribe_auth_modes(&self) -> &[crate::types::AuthMode] {
        use std::ops::Deref;
        self.default_subscribe_auth_modes.deref()
    }
    /// <p>The CloudWatch Logs configuration for the Event API.</p>
    pub fn log_config(&self) -> ::std::option::Option<&crate::types::EventLogConfig> {
        self.log_config.as_ref()
    }
}
impl EventConfig {
    /// Creates a new builder-style object to manufacture [`EventConfig`](crate::types::EventConfig).
    pub fn builder() -> crate::types::builders::EventConfigBuilder {
        crate::types::builders::EventConfigBuilder::default()
    }
}

/// A builder for [`EventConfig`](crate::types::EventConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EventConfigBuilder {
    pub(crate) auth_providers: ::std::option::Option<::std::vec::Vec<crate::types::AuthProvider>>,
    pub(crate) connection_auth_modes: ::std::option::Option<::std::vec::Vec<crate::types::AuthMode>>,
    pub(crate) default_publish_auth_modes: ::std::option::Option<::std::vec::Vec<crate::types::AuthMode>>,
    pub(crate) default_subscribe_auth_modes: ::std::option::Option<::std::vec::Vec<crate::types::AuthMode>>,
    pub(crate) log_config: ::std::option::Option<crate::types::EventLogConfig>,
}
impl EventConfigBuilder {
    /// Appends an item to `auth_providers`.
    ///
    /// To override the contents of this collection use [`set_auth_providers`](Self::set_auth_providers).
    ///
    /// <p>A list of authorization providers.</p>
    pub fn auth_providers(mut self, input: crate::types::AuthProvider) -> Self {
        let mut v = self.auth_providers.unwrap_or_default();
        v.push(input);
        self.auth_providers = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of authorization providers.</p>
    pub fn set_auth_providers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AuthProvider>>) -> Self {
        self.auth_providers = input;
        self
    }
    /// <p>A list of authorization providers.</p>
    pub fn get_auth_providers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AuthProvider>> {
        &self.auth_providers
    }
    /// Appends an item to `connection_auth_modes`.
    ///
    /// To override the contents of this collection use [`set_connection_auth_modes`](Self::set_connection_auth_modes).
    ///
    /// <p>A list of valid authorization modes for the Event API connections.</p>
    pub fn connection_auth_modes(mut self, input: crate::types::AuthMode) -> Self {
        let mut v = self.connection_auth_modes.unwrap_or_default();
        v.push(input);
        self.connection_auth_modes = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of valid authorization modes for the Event API connections.</p>
    pub fn set_connection_auth_modes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AuthMode>>) -> Self {
        self.connection_auth_modes = input;
        self
    }
    /// <p>A list of valid authorization modes for the Event API connections.</p>
    pub fn get_connection_auth_modes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AuthMode>> {
        &self.connection_auth_modes
    }
    /// Appends an item to `default_publish_auth_modes`.
    ///
    /// To override the contents of this collection use [`set_default_publish_auth_modes`](Self::set_default_publish_auth_modes).
    ///
    /// <p>A list of valid authorization modes for the Event API publishing.</p>
    pub fn default_publish_auth_modes(mut self, input: crate::types::AuthMode) -> Self {
        let mut v = self.default_publish_auth_modes.unwrap_or_default();
        v.push(input);
        self.default_publish_auth_modes = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of valid authorization modes for the Event API publishing.</p>
    pub fn set_default_publish_auth_modes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AuthMode>>) -> Self {
        self.default_publish_auth_modes = input;
        self
    }
    /// <p>A list of valid authorization modes for the Event API publishing.</p>
    pub fn get_default_publish_auth_modes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AuthMode>> {
        &self.default_publish_auth_modes
    }
    /// Appends an item to `default_subscribe_auth_modes`.
    ///
    /// To override the contents of this collection use [`set_default_subscribe_auth_modes`](Self::set_default_subscribe_auth_modes).
    ///
    /// <p>A list of valid authorization modes for the Event API subscriptions.</p>
    pub fn default_subscribe_auth_modes(mut self, input: crate::types::AuthMode) -> Self {
        let mut v = self.default_subscribe_auth_modes.unwrap_or_default();
        v.push(input);
        self.default_subscribe_auth_modes = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of valid authorization modes for the Event API subscriptions.</p>
    pub fn set_default_subscribe_auth_modes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AuthMode>>) -> Self {
        self.default_subscribe_auth_modes = input;
        self
    }
    /// <p>A list of valid authorization modes for the Event API subscriptions.</p>
    pub fn get_default_subscribe_auth_modes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AuthMode>> {
        &self.default_subscribe_auth_modes
    }
    /// <p>The CloudWatch Logs configuration for the Event API.</p>
    pub fn log_config(mut self, input: crate::types::EventLogConfig) -> Self {
        self.log_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CloudWatch Logs configuration for the Event API.</p>
    pub fn set_log_config(mut self, input: ::std::option::Option<crate::types::EventLogConfig>) -> Self {
        self.log_config = input;
        self
    }
    /// <p>The CloudWatch Logs configuration for the Event API.</p>
    pub fn get_log_config(&self) -> &::std::option::Option<crate::types::EventLogConfig> {
        &self.log_config
    }
    /// Consumes the builder and constructs a [`EventConfig`](crate::types::EventConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`auth_providers`](crate::types::builders::EventConfigBuilder::auth_providers)
    /// - [`connection_auth_modes`](crate::types::builders::EventConfigBuilder::connection_auth_modes)
    /// - [`default_publish_auth_modes`](crate::types::builders::EventConfigBuilder::default_publish_auth_modes)
    /// - [`default_subscribe_auth_modes`](crate::types::builders::EventConfigBuilder::default_subscribe_auth_modes)
    pub fn build(self) -> ::std::result::Result<crate::types::EventConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EventConfig {
            auth_providers: self.auth_providers.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "auth_providers",
                    "auth_providers was not specified but it is required when building EventConfig",
                )
            })?,
            connection_auth_modes: self.connection_auth_modes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "connection_auth_modes",
                    "connection_auth_modes was not specified but it is required when building EventConfig",
                )
            })?,
            default_publish_auth_modes: self.default_publish_auth_modes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "default_publish_auth_modes",
                    "default_publish_auth_modes was not specified but it is required when building EventConfig",
                )
            })?,
            default_subscribe_auth_modes: self.default_subscribe_auth_modes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "default_subscribe_auth_modes",
                    "default_subscribe_auth_modes was not specified but it is required when building EventConfig",
                )
            })?,
            log_config: self.log_config,
        })
    }
}
