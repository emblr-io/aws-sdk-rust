// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for the <code>OnPublish</code> and <code>OnSubscribe</code> handlers.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HandlerConfigs {
    /// <p>The configuration for the <code>OnPublish</code> handler.</p>
    pub on_publish: ::std::option::Option<crate::types::HandlerConfig>,
    /// <p>The configuration for the <code>OnSubscribe</code> handler.</p>
    pub on_subscribe: ::std::option::Option<crate::types::HandlerConfig>,
}
impl HandlerConfigs {
    /// <p>The configuration for the <code>OnPublish</code> handler.</p>
    pub fn on_publish(&self) -> ::std::option::Option<&crate::types::HandlerConfig> {
        self.on_publish.as_ref()
    }
    /// <p>The configuration for the <code>OnSubscribe</code> handler.</p>
    pub fn on_subscribe(&self) -> ::std::option::Option<&crate::types::HandlerConfig> {
        self.on_subscribe.as_ref()
    }
}
impl HandlerConfigs {
    /// Creates a new builder-style object to manufacture [`HandlerConfigs`](crate::types::HandlerConfigs).
    pub fn builder() -> crate::types::builders::HandlerConfigsBuilder {
        crate::types::builders::HandlerConfigsBuilder::default()
    }
}

/// A builder for [`HandlerConfigs`](crate::types::HandlerConfigs).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct HandlerConfigsBuilder {
    pub(crate) on_publish: ::std::option::Option<crate::types::HandlerConfig>,
    pub(crate) on_subscribe: ::std::option::Option<crate::types::HandlerConfig>,
}
impl HandlerConfigsBuilder {
    /// <p>The configuration for the <code>OnPublish</code> handler.</p>
    pub fn on_publish(mut self, input: crate::types::HandlerConfig) -> Self {
        self.on_publish = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for the <code>OnPublish</code> handler.</p>
    pub fn set_on_publish(mut self, input: ::std::option::Option<crate::types::HandlerConfig>) -> Self {
        self.on_publish = input;
        self
    }
    /// <p>The configuration for the <code>OnPublish</code> handler.</p>
    pub fn get_on_publish(&self) -> &::std::option::Option<crate::types::HandlerConfig> {
        &self.on_publish
    }
    /// <p>The configuration for the <code>OnSubscribe</code> handler.</p>
    pub fn on_subscribe(mut self, input: crate::types::HandlerConfig) -> Self {
        self.on_subscribe = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for the <code>OnSubscribe</code> handler.</p>
    pub fn set_on_subscribe(mut self, input: ::std::option::Option<crate::types::HandlerConfig>) -> Self {
        self.on_subscribe = input;
        self
    }
    /// <p>The configuration for the <code>OnSubscribe</code> handler.</p>
    pub fn get_on_subscribe(&self) -> &::std::option::Option<crate::types::HandlerConfig> {
        &self.on_subscribe
    }
    /// Consumes the builder and constructs a [`HandlerConfigs`](crate::types::HandlerConfigs).
    pub fn build(self) -> crate::types::HandlerConfigs {
        crate::types::HandlerConfigs {
            on_publish: self.on_publish,
            on_subscribe: self.on_subscribe,
        }
    }
}
