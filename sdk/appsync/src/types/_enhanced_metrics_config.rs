// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Enables and controls the enhanced metrics feature. Enhanced metrics emit granular data on API usage and performance such as AppSync request and error counts, latency, and cache hits/misses. All enhanced metric data is sent to your CloudWatch account, and you can configure the types of data that will be sent.</p>
/// <p>Enhanced metrics can be configured at the resolver, data source, and operation levels. <code>EnhancedMetricsConfig</code> contains three required parameters, each controlling one of these categories:</p>
/// <ol>
/// <li>
/// <p><code>resolverLevelMetricsBehavior</code>: Controls how resolver metrics will be emitted to CloudWatch. Resolver metrics include:</p>
/// <ul>
/// <li>
/// <p>GraphQL errors: The number of GraphQL errors that occurred.</p></li>
/// <li>
/// <p>Requests: The number of invocations that occurred during a request.</p></li>
/// <li>
/// <p>Latency: The time to complete a resolver invocation.</p></li>
/// <li>
/// <p>Cache hits: The number of cache hits during a request.</p></li>
/// <li>
/// <p>Cache misses: The number of cache misses during a request.</p></li>
/// </ul>
/// <p>These metrics can be emitted to CloudWatch per resolver or for all resolvers in the request. Metrics will be recorded by API ID and resolver name. <code>resolverLevelMetricsBehavior</code> accepts one of these values at a time:</p>
/// <ul>
/// <li>
/// <p><code>FULL_REQUEST_RESOLVER_METRICS</code>: Records and emits metric data for all resolvers in the request.</p></li>
/// <li>
/// <p><code>PER_RESOLVER_METRICS</code>: Records and emits metric data for resolvers that have the <code>metricsConfig</code> value set to <code>ENABLED</code>.</p></li>
/// </ul></li>
/// <li>
/// <p><code>dataSourceLevelMetricsBehavior</code>: Controls how data source metrics will be emitted to CloudWatch. Data source metrics include:</p>
/// <ul>
/// <li>
/// <p>Requests: The number of invocations that occured during a request.</p></li>
/// <li>
/// <p>Latency: The time to complete a data source invocation.</p></li>
/// <li>
/// <p>Errors: The number of errors that occurred during a data source invocation.</p></li>
/// </ul>
/// <p>These metrics can be emitted to CloudWatch per data source or for all data sources in the request. Metrics will be recorded by API ID and data source name. <code>dataSourceLevelMetricsBehavior</code> accepts one of these values at a time:</p>
/// <ul>
/// <li>
/// <p><code>FULL_REQUEST_DATA_SOURCE_METRICS</code>: Records and emits metric data for all data sources in the request.</p></li>
/// <li>
/// <p><code>PER_DATA_SOURCE_METRICS</code>: Records and emits metric data for data sources that have the <code>metricsConfig</code> value set to <code>ENABLED</code>.</p></li>
/// </ul></li>
/// <li>
/// <p><code>operationLevelMetricsConfig</code>: Controls how operation metrics will be emitted to CloudWatch. Operation metrics include:</p>
/// <ul>
/// <li>
/// <p>Requests: The number of times a specified GraphQL operation was called.</p></li>
/// <li>
/// <p>GraphQL errors: The number of GraphQL errors that occurred during a specified GraphQL operation.</p></li>
/// </ul>
/// <p>Metrics will be recorded by API ID and operation name. You can set the value to <code>ENABLED</code> or <code>DISABLED</code>.</p></li>
/// </ol>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EnhancedMetricsConfig {
    /// <p>Controls how resolver metrics will be emitted to CloudWatch. Resolver metrics include:</p>
    /// <ul>
    /// <li>
    /// <p>GraphQL errors: The number of GraphQL errors that occurred.</p></li>
    /// <li>
    /// <p>Requests: The number of invocations that occurred during a request.</p></li>
    /// <li>
    /// <p>Latency: The time to complete a resolver invocation.</p></li>
    /// <li>
    /// <p>Cache hits: The number of cache hits during a request.</p></li>
    /// <li>
    /// <p>Cache misses: The number of cache misses during a request.</p></li>
    /// </ul>
    /// <p>These metrics can be emitted to CloudWatch per resolver or for all resolvers in the request. Metrics will be recorded by API ID and resolver name. <code>resolverLevelMetricsBehavior</code> accepts one of these values at a time:</p>
    /// <ul>
    /// <li>
    /// <p><code>FULL_REQUEST_RESOLVER_METRICS</code>: Records and emits metric data for all resolvers in the request.</p></li>
    /// <li>
    /// <p><code>PER_RESOLVER_METRICS</code>: Records and emits metric data for resolvers that have the <code>metricsConfig</code> value set to <code>ENABLED</code>.</p></li>
    /// </ul>
    pub resolver_level_metrics_behavior: crate::types::ResolverLevelMetricsBehavior,
    /// <p>Controls how data source metrics will be emitted to CloudWatch. Data source metrics include:</p>
    /// <ul>
    /// <li>
    /// <p>Requests: The number of invocations that occured during a request.</p></li>
    /// <li>
    /// <p>Latency: The time to complete a data source invocation.</p></li>
    /// <li>
    /// <p>Errors: The number of errors that occurred during a data source invocation.</p></li>
    /// </ul>
    /// <p>These metrics can be emitted to CloudWatch per data source or for all data sources in the request. Metrics will be recorded by API ID and data source name. <code>dataSourceLevelMetricsBehavior</code> accepts one of these values at a time:</p>
    /// <ul>
    /// <li>
    /// <p><code>FULL_REQUEST_DATA_SOURCE_METRICS</code>: Records and emits metric data for all data sources in the request.</p></li>
    /// <li>
    /// <p><code>PER_DATA_SOURCE_METRICS</code>: Records and emits metric data for data sources that have the <code>metricsConfig</code> value set to <code>ENABLED</code>.</p></li>
    /// </ul>
    pub data_source_level_metrics_behavior: crate::types::DataSourceLevelMetricsBehavior,
    /// <p>Controls how operation metrics will be emitted to CloudWatch. Operation metrics include:</p>
    /// <ul>
    /// <li>
    /// <p>Requests: The number of times a specified GraphQL operation was called.</p></li>
    /// <li>
    /// <p>GraphQL errors: The number of GraphQL errors that occurred during a specified GraphQL operation.</p></li>
    /// </ul>
    /// <p>Metrics will be recorded by API ID and operation name. You can set the value to <code>ENABLED</code> or <code>DISABLED</code>.</p>
    pub operation_level_metrics_config: crate::types::OperationLevelMetricsConfig,
}
impl EnhancedMetricsConfig {
    /// <p>Controls how resolver metrics will be emitted to CloudWatch. Resolver metrics include:</p>
    /// <ul>
    /// <li>
    /// <p>GraphQL errors: The number of GraphQL errors that occurred.</p></li>
    /// <li>
    /// <p>Requests: The number of invocations that occurred during a request.</p></li>
    /// <li>
    /// <p>Latency: The time to complete a resolver invocation.</p></li>
    /// <li>
    /// <p>Cache hits: The number of cache hits during a request.</p></li>
    /// <li>
    /// <p>Cache misses: The number of cache misses during a request.</p></li>
    /// </ul>
    /// <p>These metrics can be emitted to CloudWatch per resolver or for all resolvers in the request. Metrics will be recorded by API ID and resolver name. <code>resolverLevelMetricsBehavior</code> accepts one of these values at a time:</p>
    /// <ul>
    /// <li>
    /// <p><code>FULL_REQUEST_RESOLVER_METRICS</code>: Records and emits metric data for all resolvers in the request.</p></li>
    /// <li>
    /// <p><code>PER_RESOLVER_METRICS</code>: Records and emits metric data for resolvers that have the <code>metricsConfig</code> value set to <code>ENABLED</code>.</p></li>
    /// </ul>
    pub fn resolver_level_metrics_behavior(&self) -> &crate::types::ResolverLevelMetricsBehavior {
        &self.resolver_level_metrics_behavior
    }
    /// <p>Controls how data source metrics will be emitted to CloudWatch. Data source metrics include:</p>
    /// <ul>
    /// <li>
    /// <p>Requests: The number of invocations that occured during a request.</p></li>
    /// <li>
    /// <p>Latency: The time to complete a data source invocation.</p></li>
    /// <li>
    /// <p>Errors: The number of errors that occurred during a data source invocation.</p></li>
    /// </ul>
    /// <p>These metrics can be emitted to CloudWatch per data source or for all data sources in the request. Metrics will be recorded by API ID and data source name. <code>dataSourceLevelMetricsBehavior</code> accepts one of these values at a time:</p>
    /// <ul>
    /// <li>
    /// <p><code>FULL_REQUEST_DATA_SOURCE_METRICS</code>: Records and emits metric data for all data sources in the request.</p></li>
    /// <li>
    /// <p><code>PER_DATA_SOURCE_METRICS</code>: Records and emits metric data for data sources that have the <code>metricsConfig</code> value set to <code>ENABLED</code>.</p></li>
    /// </ul>
    pub fn data_source_level_metrics_behavior(&self) -> &crate::types::DataSourceLevelMetricsBehavior {
        &self.data_source_level_metrics_behavior
    }
    /// <p>Controls how operation metrics will be emitted to CloudWatch. Operation metrics include:</p>
    /// <ul>
    /// <li>
    /// <p>Requests: The number of times a specified GraphQL operation was called.</p></li>
    /// <li>
    /// <p>GraphQL errors: The number of GraphQL errors that occurred during a specified GraphQL operation.</p></li>
    /// </ul>
    /// <p>Metrics will be recorded by API ID and operation name. You can set the value to <code>ENABLED</code> or <code>DISABLED</code>.</p>
    pub fn operation_level_metrics_config(&self) -> &crate::types::OperationLevelMetricsConfig {
        &self.operation_level_metrics_config
    }
}
impl EnhancedMetricsConfig {
    /// Creates a new builder-style object to manufacture [`EnhancedMetricsConfig`](crate::types::EnhancedMetricsConfig).
    pub fn builder() -> crate::types::builders::EnhancedMetricsConfigBuilder {
        crate::types::builders::EnhancedMetricsConfigBuilder::default()
    }
}

/// A builder for [`EnhancedMetricsConfig`](crate::types::EnhancedMetricsConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EnhancedMetricsConfigBuilder {
    pub(crate) resolver_level_metrics_behavior: ::std::option::Option<crate::types::ResolverLevelMetricsBehavior>,
    pub(crate) data_source_level_metrics_behavior: ::std::option::Option<crate::types::DataSourceLevelMetricsBehavior>,
    pub(crate) operation_level_metrics_config: ::std::option::Option<crate::types::OperationLevelMetricsConfig>,
}
impl EnhancedMetricsConfigBuilder {
    /// <p>Controls how resolver metrics will be emitted to CloudWatch. Resolver metrics include:</p>
    /// <ul>
    /// <li>
    /// <p>GraphQL errors: The number of GraphQL errors that occurred.</p></li>
    /// <li>
    /// <p>Requests: The number of invocations that occurred during a request.</p></li>
    /// <li>
    /// <p>Latency: The time to complete a resolver invocation.</p></li>
    /// <li>
    /// <p>Cache hits: The number of cache hits during a request.</p></li>
    /// <li>
    /// <p>Cache misses: The number of cache misses during a request.</p></li>
    /// </ul>
    /// <p>These metrics can be emitted to CloudWatch per resolver or for all resolvers in the request. Metrics will be recorded by API ID and resolver name. <code>resolverLevelMetricsBehavior</code> accepts one of these values at a time:</p>
    /// <ul>
    /// <li>
    /// <p><code>FULL_REQUEST_RESOLVER_METRICS</code>: Records and emits metric data for all resolvers in the request.</p></li>
    /// <li>
    /// <p><code>PER_RESOLVER_METRICS</code>: Records and emits metric data for resolvers that have the <code>metricsConfig</code> value set to <code>ENABLED</code>.</p></li>
    /// </ul>
    /// This field is required.
    pub fn resolver_level_metrics_behavior(mut self, input: crate::types::ResolverLevelMetricsBehavior) -> Self {
        self.resolver_level_metrics_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>Controls how resolver metrics will be emitted to CloudWatch. Resolver metrics include:</p>
    /// <ul>
    /// <li>
    /// <p>GraphQL errors: The number of GraphQL errors that occurred.</p></li>
    /// <li>
    /// <p>Requests: The number of invocations that occurred during a request.</p></li>
    /// <li>
    /// <p>Latency: The time to complete a resolver invocation.</p></li>
    /// <li>
    /// <p>Cache hits: The number of cache hits during a request.</p></li>
    /// <li>
    /// <p>Cache misses: The number of cache misses during a request.</p></li>
    /// </ul>
    /// <p>These metrics can be emitted to CloudWatch per resolver or for all resolvers in the request. Metrics will be recorded by API ID and resolver name. <code>resolverLevelMetricsBehavior</code> accepts one of these values at a time:</p>
    /// <ul>
    /// <li>
    /// <p><code>FULL_REQUEST_RESOLVER_METRICS</code>: Records and emits metric data for all resolvers in the request.</p></li>
    /// <li>
    /// <p><code>PER_RESOLVER_METRICS</code>: Records and emits metric data for resolvers that have the <code>metricsConfig</code> value set to <code>ENABLED</code>.</p></li>
    /// </ul>
    pub fn set_resolver_level_metrics_behavior(mut self, input: ::std::option::Option<crate::types::ResolverLevelMetricsBehavior>) -> Self {
        self.resolver_level_metrics_behavior = input;
        self
    }
    /// <p>Controls how resolver metrics will be emitted to CloudWatch. Resolver metrics include:</p>
    /// <ul>
    /// <li>
    /// <p>GraphQL errors: The number of GraphQL errors that occurred.</p></li>
    /// <li>
    /// <p>Requests: The number of invocations that occurred during a request.</p></li>
    /// <li>
    /// <p>Latency: The time to complete a resolver invocation.</p></li>
    /// <li>
    /// <p>Cache hits: The number of cache hits during a request.</p></li>
    /// <li>
    /// <p>Cache misses: The number of cache misses during a request.</p></li>
    /// </ul>
    /// <p>These metrics can be emitted to CloudWatch per resolver or for all resolvers in the request. Metrics will be recorded by API ID and resolver name. <code>resolverLevelMetricsBehavior</code> accepts one of these values at a time:</p>
    /// <ul>
    /// <li>
    /// <p><code>FULL_REQUEST_RESOLVER_METRICS</code>: Records and emits metric data for all resolvers in the request.</p></li>
    /// <li>
    /// <p><code>PER_RESOLVER_METRICS</code>: Records and emits metric data for resolvers that have the <code>metricsConfig</code> value set to <code>ENABLED</code>.</p></li>
    /// </ul>
    pub fn get_resolver_level_metrics_behavior(&self) -> &::std::option::Option<crate::types::ResolverLevelMetricsBehavior> {
        &self.resolver_level_metrics_behavior
    }
    /// <p>Controls how data source metrics will be emitted to CloudWatch. Data source metrics include:</p>
    /// <ul>
    /// <li>
    /// <p>Requests: The number of invocations that occured during a request.</p></li>
    /// <li>
    /// <p>Latency: The time to complete a data source invocation.</p></li>
    /// <li>
    /// <p>Errors: The number of errors that occurred during a data source invocation.</p></li>
    /// </ul>
    /// <p>These metrics can be emitted to CloudWatch per data source or for all data sources in the request. Metrics will be recorded by API ID and data source name. <code>dataSourceLevelMetricsBehavior</code> accepts one of these values at a time:</p>
    /// <ul>
    /// <li>
    /// <p><code>FULL_REQUEST_DATA_SOURCE_METRICS</code>: Records and emits metric data for all data sources in the request.</p></li>
    /// <li>
    /// <p><code>PER_DATA_SOURCE_METRICS</code>: Records and emits metric data for data sources that have the <code>metricsConfig</code> value set to <code>ENABLED</code>.</p></li>
    /// </ul>
    /// This field is required.
    pub fn data_source_level_metrics_behavior(mut self, input: crate::types::DataSourceLevelMetricsBehavior) -> Self {
        self.data_source_level_metrics_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>Controls how data source metrics will be emitted to CloudWatch. Data source metrics include:</p>
    /// <ul>
    /// <li>
    /// <p>Requests: The number of invocations that occured during a request.</p></li>
    /// <li>
    /// <p>Latency: The time to complete a data source invocation.</p></li>
    /// <li>
    /// <p>Errors: The number of errors that occurred during a data source invocation.</p></li>
    /// </ul>
    /// <p>These metrics can be emitted to CloudWatch per data source or for all data sources in the request. Metrics will be recorded by API ID and data source name. <code>dataSourceLevelMetricsBehavior</code> accepts one of these values at a time:</p>
    /// <ul>
    /// <li>
    /// <p><code>FULL_REQUEST_DATA_SOURCE_METRICS</code>: Records and emits metric data for all data sources in the request.</p></li>
    /// <li>
    /// <p><code>PER_DATA_SOURCE_METRICS</code>: Records and emits metric data for data sources that have the <code>metricsConfig</code> value set to <code>ENABLED</code>.</p></li>
    /// </ul>
    pub fn set_data_source_level_metrics_behavior(mut self, input: ::std::option::Option<crate::types::DataSourceLevelMetricsBehavior>) -> Self {
        self.data_source_level_metrics_behavior = input;
        self
    }
    /// <p>Controls how data source metrics will be emitted to CloudWatch. Data source metrics include:</p>
    /// <ul>
    /// <li>
    /// <p>Requests: The number of invocations that occured during a request.</p></li>
    /// <li>
    /// <p>Latency: The time to complete a data source invocation.</p></li>
    /// <li>
    /// <p>Errors: The number of errors that occurred during a data source invocation.</p></li>
    /// </ul>
    /// <p>These metrics can be emitted to CloudWatch per data source or for all data sources in the request. Metrics will be recorded by API ID and data source name. <code>dataSourceLevelMetricsBehavior</code> accepts one of these values at a time:</p>
    /// <ul>
    /// <li>
    /// <p><code>FULL_REQUEST_DATA_SOURCE_METRICS</code>: Records and emits metric data for all data sources in the request.</p></li>
    /// <li>
    /// <p><code>PER_DATA_SOURCE_METRICS</code>: Records and emits metric data for data sources that have the <code>metricsConfig</code> value set to <code>ENABLED</code>.</p></li>
    /// </ul>
    pub fn get_data_source_level_metrics_behavior(&self) -> &::std::option::Option<crate::types::DataSourceLevelMetricsBehavior> {
        &self.data_source_level_metrics_behavior
    }
    /// <p>Controls how operation metrics will be emitted to CloudWatch. Operation metrics include:</p>
    /// <ul>
    /// <li>
    /// <p>Requests: The number of times a specified GraphQL operation was called.</p></li>
    /// <li>
    /// <p>GraphQL errors: The number of GraphQL errors that occurred during a specified GraphQL operation.</p></li>
    /// </ul>
    /// <p>Metrics will be recorded by API ID and operation name. You can set the value to <code>ENABLED</code> or <code>DISABLED</code>.</p>
    /// This field is required.
    pub fn operation_level_metrics_config(mut self, input: crate::types::OperationLevelMetricsConfig) -> Self {
        self.operation_level_metrics_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Controls how operation metrics will be emitted to CloudWatch. Operation metrics include:</p>
    /// <ul>
    /// <li>
    /// <p>Requests: The number of times a specified GraphQL operation was called.</p></li>
    /// <li>
    /// <p>GraphQL errors: The number of GraphQL errors that occurred during a specified GraphQL operation.</p></li>
    /// </ul>
    /// <p>Metrics will be recorded by API ID and operation name. You can set the value to <code>ENABLED</code> or <code>DISABLED</code>.</p>
    pub fn set_operation_level_metrics_config(mut self, input: ::std::option::Option<crate::types::OperationLevelMetricsConfig>) -> Self {
        self.operation_level_metrics_config = input;
        self
    }
    /// <p>Controls how operation metrics will be emitted to CloudWatch. Operation metrics include:</p>
    /// <ul>
    /// <li>
    /// <p>Requests: The number of times a specified GraphQL operation was called.</p></li>
    /// <li>
    /// <p>GraphQL errors: The number of GraphQL errors that occurred during a specified GraphQL operation.</p></li>
    /// </ul>
    /// <p>Metrics will be recorded by API ID and operation name. You can set the value to <code>ENABLED</code> or <code>DISABLED</code>.</p>
    pub fn get_operation_level_metrics_config(&self) -> &::std::option::Option<crate::types::OperationLevelMetricsConfig> {
        &self.operation_level_metrics_config
    }
    /// Consumes the builder and constructs a [`EnhancedMetricsConfig`](crate::types::EnhancedMetricsConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`resolver_level_metrics_behavior`](crate::types::builders::EnhancedMetricsConfigBuilder::resolver_level_metrics_behavior)
    /// - [`data_source_level_metrics_behavior`](crate::types::builders::EnhancedMetricsConfigBuilder::data_source_level_metrics_behavior)
    /// - [`operation_level_metrics_config`](crate::types::builders::EnhancedMetricsConfigBuilder::operation_level_metrics_config)
    pub fn build(self) -> ::std::result::Result<crate::types::EnhancedMetricsConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EnhancedMetricsConfig {
            resolver_level_metrics_behavior: self.resolver_level_metrics_behavior.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "resolver_level_metrics_behavior",
                    "resolver_level_metrics_behavior was not specified but it is required when building EnhancedMetricsConfig",
                )
            })?,
            data_source_level_metrics_behavior: self.data_source_level_metrics_behavior.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "data_source_level_metrics_behavior",
                    "data_source_level_metrics_behavior was not specified but it is required when building EnhancedMetricsConfig",
                )
            })?,
            operation_level_metrics_config: self.operation_level_metrics_config.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operation_level_metrics_config",
                    "operation_level_metrics_config was not specified but it is required when building EnhancedMetricsConfig",
                )
            })?,
        })
    }
}
