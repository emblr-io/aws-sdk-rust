// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for a handler.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HandlerConfig {
    /// <p>The behavior for the handler.</p>
    pub behavior: crate::types::HandlerBehavior,
    /// <p>The integration data source configuration for the handler.</p>
    pub integration: ::std::option::Option<crate::types::Integration>,
}
impl HandlerConfig {
    /// <p>The behavior for the handler.</p>
    pub fn behavior(&self) -> &crate::types::HandlerBehavior {
        &self.behavior
    }
    /// <p>The integration data source configuration for the handler.</p>
    pub fn integration(&self) -> ::std::option::Option<&crate::types::Integration> {
        self.integration.as_ref()
    }
}
impl HandlerConfig {
    /// Creates a new builder-style object to manufacture [`HandlerConfig`](crate::types::HandlerConfig).
    pub fn builder() -> crate::types::builders::HandlerConfigBuilder {
        crate::types::builders::HandlerConfigBuilder::default()
    }
}

/// A builder for [`HandlerConfig`](crate::types::HandlerConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct HandlerConfigBuilder {
    pub(crate) behavior: ::std::option::Option<crate::types::HandlerBehavior>,
    pub(crate) integration: ::std::option::Option<crate::types::Integration>,
}
impl HandlerConfigBuilder {
    /// <p>The behavior for the handler.</p>
    /// This field is required.
    pub fn behavior(mut self, input: crate::types::HandlerBehavior) -> Self {
        self.behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>The behavior for the handler.</p>
    pub fn set_behavior(mut self, input: ::std::option::Option<crate::types::HandlerBehavior>) -> Self {
        self.behavior = input;
        self
    }
    /// <p>The behavior for the handler.</p>
    pub fn get_behavior(&self) -> &::std::option::Option<crate::types::HandlerBehavior> {
        &self.behavior
    }
    /// <p>The integration data source configuration for the handler.</p>
    /// This field is required.
    pub fn integration(mut self, input: crate::types::Integration) -> Self {
        self.integration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The integration data source configuration for the handler.</p>
    pub fn set_integration(mut self, input: ::std::option::Option<crate::types::Integration>) -> Self {
        self.integration = input;
        self
    }
    /// <p>The integration data source configuration for the handler.</p>
    pub fn get_integration(&self) -> &::std::option::Option<crate::types::Integration> {
        &self.integration
    }
    /// Consumes the builder and constructs a [`HandlerConfig`](crate::types::HandlerConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`behavior`](crate::types::builders::HandlerConfigBuilder::behavior)
    pub fn build(self) -> ::std::result::Result<crate::types::HandlerConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::HandlerConfig {
            behavior: self.behavior.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "behavior",
                    "behavior was not specified but it is required when building HandlerConfig",
                )
            })?,
            integration: self.integration,
        })
    }
}
