// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a configuration for a custom domain.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DomainNameConfig {
    /// <p>The domain name.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the <code>DomainName</code> configuration.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate.</p>
    pub certificate_arn: ::std::option::Option<::std::string::String>,
    /// <p>The domain name that AppSync provides.</p>
    pub appsync_domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of your Amazon Route&nbsp;53 hosted zone.</p>
    pub hosted_zone_id: ::std::option::Option<::std::string::String>,
    /// <p>A map with keys of <code>TagKey</code> objects and values of <code>TagValue</code> objects.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The Amazon Resource Name (ARN) of the domain name.</p>
    pub domain_name_arn: ::std::option::Option<::std::string::String>,
}
impl DomainNameConfig {
    /// <p>The domain name.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>A description of the <code>DomainName</code> configuration.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate.</p>
    pub fn certificate_arn(&self) -> ::std::option::Option<&str> {
        self.certificate_arn.as_deref()
    }
    /// <p>The domain name that AppSync provides.</p>
    pub fn appsync_domain_name(&self) -> ::std::option::Option<&str> {
        self.appsync_domain_name.as_deref()
    }
    /// <p>The ID of your Amazon Route&nbsp;53 hosted zone.</p>
    pub fn hosted_zone_id(&self) -> ::std::option::Option<&str> {
        self.hosted_zone_id.as_deref()
    }
    /// <p>A map with keys of <code>TagKey</code> objects and values of <code>TagValue</code> objects.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the domain name.</p>
    pub fn domain_name_arn(&self) -> ::std::option::Option<&str> {
        self.domain_name_arn.as_deref()
    }
}
impl DomainNameConfig {
    /// Creates a new builder-style object to manufacture [`DomainNameConfig`](crate::types::DomainNameConfig).
    pub fn builder() -> crate::types::builders::DomainNameConfigBuilder {
        crate::types::builders::DomainNameConfigBuilder::default()
    }
}

/// A builder for [`DomainNameConfig`](crate::types::DomainNameConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DomainNameConfigBuilder {
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) certificate_arn: ::std::option::Option<::std::string::String>,
    pub(crate) appsync_domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) hosted_zone_id: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) domain_name_arn: ::std::option::Option<::std::string::String>,
}
impl DomainNameConfigBuilder {
    /// <p>The domain name.</p>
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The domain name.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>A description of the <code>DomainName</code> configuration.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the <code>DomainName</code> configuration.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the <code>DomainName</code> configuration.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The Amazon Resource Name (ARN) of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate.</p>
    pub fn certificate_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certificate_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate.</p>
    pub fn set_certificate_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certificate_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the certificate. This can be an Certificate Manager (ACM) certificate or an Identity and Access Management (IAM) server certificate.</p>
    pub fn get_certificate_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.certificate_arn
    }
    /// <p>The domain name that AppSync provides.</p>
    pub fn appsync_domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.appsync_domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name that AppSync provides.</p>
    pub fn set_appsync_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.appsync_domain_name = input;
        self
    }
    /// <p>The domain name that AppSync provides.</p>
    pub fn get_appsync_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.appsync_domain_name
    }
    /// <p>The ID of your Amazon Route&nbsp;53 hosted zone.</p>
    pub fn hosted_zone_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hosted_zone_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of your Amazon Route&nbsp;53 hosted zone.</p>
    pub fn set_hosted_zone_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hosted_zone_id = input;
        self
    }
    /// <p>The ID of your Amazon Route&nbsp;53 hosted zone.</p>
    pub fn get_hosted_zone_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.hosted_zone_id
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map with keys of <code>TagKey</code> objects and values of <code>TagValue</code> objects.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map with keys of <code>TagKey</code> objects and values of <code>TagValue</code> objects.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A map with keys of <code>TagKey</code> objects and values of <code>TagValue</code> objects.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The Amazon Resource Name (ARN) of the domain name.</p>
    pub fn domain_name_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the domain name.</p>
    pub fn set_domain_name_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the domain name.</p>
    pub fn get_domain_name_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name_arn
    }
    /// Consumes the builder and constructs a [`DomainNameConfig`](crate::types::DomainNameConfig).
    pub fn build(self) -> crate::types::DomainNameConfig {
        crate::types::DomainNameConfig {
            domain_name: self.domain_name,
            description: self.description,
            certificate_arn: self.certificate_arn,
            appsync_domain_name: self.appsync_domain_name,
            hosted_zone_id: self.hosted_zone_id,
            tags: self.tags,
            domain_name_arn: self.domain_name_arn,
        }
    }
}
