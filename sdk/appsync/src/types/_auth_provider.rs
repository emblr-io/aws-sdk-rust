// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an authorization provider.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuthProvider {
    /// <p>The authorization type.</p>
    pub auth_type: crate::types::AuthenticationType,
    /// <p>Describes an Amazon Cognito user pool configuration.</p>
    pub cognito_config: ::std::option::Option<crate::types::CognitoConfig>,
    /// <p>Describes an OpenID Connect (OIDC) configuration.</p>
    pub open_id_connect_config: ::std::option::Option<crate::types::OpenIdConnectConfig>,
    /// <p>A <code>LambdaAuthorizerConfig</code> specifies how to authorize AppSync API access when using the <code>AWS_LAMBDA</code> authorizer mode. Be aware that an AppSync API can have only one Lambda authorizer configured at a time.</p>
    pub lambda_authorizer_config: ::std::option::Option<crate::types::LambdaAuthorizerConfig>,
}
impl AuthProvider {
    /// <p>The authorization type.</p>
    pub fn auth_type(&self) -> &crate::types::AuthenticationType {
        &self.auth_type
    }
    /// <p>Describes an Amazon Cognito user pool configuration.</p>
    pub fn cognito_config(&self) -> ::std::option::Option<&crate::types::CognitoConfig> {
        self.cognito_config.as_ref()
    }
    /// <p>Describes an OpenID Connect (OIDC) configuration.</p>
    pub fn open_id_connect_config(&self) -> ::std::option::Option<&crate::types::OpenIdConnectConfig> {
        self.open_id_connect_config.as_ref()
    }
    /// <p>A <code>LambdaAuthorizerConfig</code> specifies how to authorize AppSync API access when using the <code>AWS_LAMBDA</code> authorizer mode. Be aware that an AppSync API can have only one Lambda authorizer configured at a time.</p>
    pub fn lambda_authorizer_config(&self) -> ::std::option::Option<&crate::types::LambdaAuthorizerConfig> {
        self.lambda_authorizer_config.as_ref()
    }
}
impl AuthProvider {
    /// Creates a new builder-style object to manufacture [`AuthProvider`](crate::types::AuthProvider).
    pub fn builder() -> crate::types::builders::AuthProviderBuilder {
        crate::types::builders::AuthProviderBuilder::default()
    }
}

/// A builder for [`AuthProvider`](crate::types::AuthProvider).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AuthProviderBuilder {
    pub(crate) auth_type: ::std::option::Option<crate::types::AuthenticationType>,
    pub(crate) cognito_config: ::std::option::Option<crate::types::CognitoConfig>,
    pub(crate) open_id_connect_config: ::std::option::Option<crate::types::OpenIdConnectConfig>,
    pub(crate) lambda_authorizer_config: ::std::option::Option<crate::types::LambdaAuthorizerConfig>,
}
impl AuthProviderBuilder {
    /// <p>The authorization type.</p>
    /// This field is required.
    pub fn auth_type(mut self, input: crate::types::AuthenticationType) -> Self {
        self.auth_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authorization type.</p>
    pub fn set_auth_type(mut self, input: ::std::option::Option<crate::types::AuthenticationType>) -> Self {
        self.auth_type = input;
        self
    }
    /// <p>The authorization type.</p>
    pub fn get_auth_type(&self) -> &::std::option::Option<crate::types::AuthenticationType> {
        &self.auth_type
    }
    /// <p>Describes an Amazon Cognito user pool configuration.</p>
    pub fn cognito_config(mut self, input: crate::types::CognitoConfig) -> Self {
        self.cognito_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes an Amazon Cognito user pool configuration.</p>
    pub fn set_cognito_config(mut self, input: ::std::option::Option<crate::types::CognitoConfig>) -> Self {
        self.cognito_config = input;
        self
    }
    /// <p>Describes an Amazon Cognito user pool configuration.</p>
    pub fn get_cognito_config(&self) -> &::std::option::Option<crate::types::CognitoConfig> {
        &self.cognito_config
    }
    /// <p>Describes an OpenID Connect (OIDC) configuration.</p>
    pub fn open_id_connect_config(mut self, input: crate::types::OpenIdConnectConfig) -> Self {
        self.open_id_connect_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes an OpenID Connect (OIDC) configuration.</p>
    pub fn set_open_id_connect_config(mut self, input: ::std::option::Option<crate::types::OpenIdConnectConfig>) -> Self {
        self.open_id_connect_config = input;
        self
    }
    /// <p>Describes an OpenID Connect (OIDC) configuration.</p>
    pub fn get_open_id_connect_config(&self) -> &::std::option::Option<crate::types::OpenIdConnectConfig> {
        &self.open_id_connect_config
    }
    /// <p>A <code>LambdaAuthorizerConfig</code> specifies how to authorize AppSync API access when using the <code>AWS_LAMBDA</code> authorizer mode. Be aware that an AppSync API can have only one Lambda authorizer configured at a time.</p>
    pub fn lambda_authorizer_config(mut self, input: crate::types::LambdaAuthorizerConfig) -> Self {
        self.lambda_authorizer_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>LambdaAuthorizerConfig</code> specifies how to authorize AppSync API access when using the <code>AWS_LAMBDA</code> authorizer mode. Be aware that an AppSync API can have only one Lambda authorizer configured at a time.</p>
    pub fn set_lambda_authorizer_config(mut self, input: ::std::option::Option<crate::types::LambdaAuthorizerConfig>) -> Self {
        self.lambda_authorizer_config = input;
        self
    }
    /// <p>A <code>LambdaAuthorizerConfig</code> specifies how to authorize AppSync API access when using the <code>AWS_LAMBDA</code> authorizer mode. Be aware that an AppSync API can have only one Lambda authorizer configured at a time.</p>
    pub fn get_lambda_authorizer_config(&self) -> &::std::option::Option<crate::types::LambdaAuthorizerConfig> {
        &self.lambda_authorizer_config
    }
    /// Consumes the builder and constructs a [`AuthProvider`](crate::types::AuthProvider).
    /// This method will fail if any of the following fields are not set:
    /// - [`auth_type`](crate::types::builders::AuthProviderBuilder::auth_type)
    pub fn build(self) -> ::std::result::Result<crate::types::AuthProvider, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AuthProvider {
            auth_type: self.auth_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "auth_type",
                    "auth_type was not specified but it is required when building AuthProvider",
                )
            })?,
            cognito_config: self.cognito_config,
            open_id_connect_config: self.open_id_connect_config,
            lambda_authorizer_config: self.lambda_authorizer_config,
        })
    }
}
