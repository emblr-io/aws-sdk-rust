// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents an InvokeApi action.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RoutingRuleActionInvokeApi {
    /// <p>The identifier.</p>
    pub api_id: ::std::option::Option<::std::string::String>,
    /// <p>A string with a length between \[1-128\].</p>
    pub stage: ::std::option::Option<::std::string::String>,
    /// <p>The strip base path setting.</p>
    pub strip_base_path: ::std::option::Option<bool>,
}
impl RoutingRuleActionInvokeApi {
    /// <p>The identifier.</p>
    pub fn api_id(&self) -> ::std::option::Option<&str> {
        self.api_id.as_deref()
    }
    /// <p>A string with a length between \[1-128\].</p>
    pub fn stage(&self) -> ::std::option::Option<&str> {
        self.stage.as_deref()
    }
    /// <p>The strip base path setting.</p>
    pub fn strip_base_path(&self) -> ::std::option::Option<bool> {
        self.strip_base_path
    }
}
impl RoutingRuleActionInvokeApi {
    /// Creates a new builder-style object to manufacture [`RoutingRuleActionInvokeApi`](crate::types::RoutingRuleActionInvokeApi).
    pub fn builder() -> crate::types::builders::RoutingRuleActionInvokeApiBuilder {
        crate::types::builders::RoutingRuleActionInvokeApiBuilder::default()
    }
}

/// A builder for [`RoutingRuleActionInvokeApi`](crate::types::RoutingRuleActionInvokeApi).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RoutingRuleActionInvokeApiBuilder {
    pub(crate) api_id: ::std::option::Option<::std::string::String>,
    pub(crate) stage: ::std::option::Option<::std::string::String>,
    pub(crate) strip_base_path: ::std::option::Option<bool>,
}
impl RoutingRuleActionInvokeApiBuilder {
    /// <p>The identifier.</p>
    /// This field is required.
    pub fn api_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.api_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier.</p>
    pub fn set_api_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.api_id = input;
        self
    }
    /// <p>The identifier.</p>
    pub fn get_api_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.api_id
    }
    /// <p>A string with a length between \[1-128\].</p>
    /// This field is required.
    pub fn stage(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stage = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string with a length between \[1-128\].</p>
    pub fn set_stage(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stage = input;
        self
    }
    /// <p>A string with a length between \[1-128\].</p>
    pub fn get_stage(&self) -> &::std::option::Option<::std::string::String> {
        &self.stage
    }
    /// <p>The strip base path setting.</p>
    pub fn strip_base_path(mut self, input: bool) -> Self {
        self.strip_base_path = ::std::option::Option::Some(input);
        self
    }
    /// <p>The strip base path setting.</p>
    pub fn set_strip_base_path(mut self, input: ::std::option::Option<bool>) -> Self {
        self.strip_base_path = input;
        self
    }
    /// <p>The strip base path setting.</p>
    pub fn get_strip_base_path(&self) -> &::std::option::Option<bool> {
        &self.strip_base_path
    }
    /// Consumes the builder and constructs a [`RoutingRuleActionInvokeApi`](crate::types::RoutingRuleActionInvokeApi).
    pub fn build(self) -> crate::types::RoutingRuleActionInvokeApi {
        crate::types::RoutingRuleActionInvokeApi {
            api_id: self.api_id,
            stage: self.stage,
            strip_base_path: self.strip_base_path,
        }
    }
}
