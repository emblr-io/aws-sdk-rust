// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a MatchHeaders condition.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RoutingRuleMatchHeaders {
    /// <p>The header name and header value glob to be matched. The matchHeaders condition is matched if any of the header name and header value globs are matched.</p>
    pub any_of: ::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleMatchHeaderValue>>,
}
impl RoutingRuleMatchHeaders {
    /// <p>The header name and header value glob to be matched. The matchHeaders condition is matched if any of the header name and header value globs are matched.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.any_of.is_none()`.
    pub fn any_of(&self) -> &[crate::types::RoutingRuleMatchHeaderValue] {
        self.any_of.as_deref().unwrap_or_default()
    }
}
impl RoutingRuleMatchHeaders {
    /// Creates a new builder-style object to manufacture [`RoutingRuleMatchHeaders`](crate::types::RoutingRuleMatchHeaders).
    pub fn builder() -> crate::types::builders::RoutingRuleMatchHeadersBuilder {
        crate::types::builders::RoutingRuleMatchHeadersBuilder::default()
    }
}

/// A builder for [`RoutingRuleMatchHeaders`](crate::types::RoutingRuleMatchHeaders).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RoutingRuleMatchHeadersBuilder {
    pub(crate) any_of: ::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleMatchHeaderValue>>,
}
impl RoutingRuleMatchHeadersBuilder {
    /// Appends an item to `any_of`.
    ///
    /// To override the contents of this collection use [`set_any_of`](Self::set_any_of).
    ///
    /// <p>The header name and header value glob to be matched. The matchHeaders condition is matched if any of the header name and header value globs are matched.</p>
    pub fn any_of(mut self, input: crate::types::RoutingRuleMatchHeaderValue) -> Self {
        let mut v = self.any_of.unwrap_or_default();
        v.push(input);
        self.any_of = ::std::option::Option::Some(v);
        self
    }
    /// <p>The header name and header value glob to be matched. The matchHeaders condition is matched if any of the header name and header value globs are matched.</p>
    pub fn set_any_of(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleMatchHeaderValue>>) -> Self {
        self.any_of = input;
        self
    }
    /// <p>The header name and header value glob to be matched. The matchHeaders condition is matched if any of the header name and header value globs are matched.</p>
    pub fn get_any_of(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleMatchHeaderValue>> {
        &self.any_of
    }
    /// Consumes the builder and constructs a [`RoutingRuleMatchHeaders`](crate::types::RoutingRuleMatchHeaders).
    pub fn build(self) -> crate::types::RoutingRuleMatchHeaders {
        crate::types::RoutingRuleMatchHeaders { any_of: self.any_of }
    }
}
