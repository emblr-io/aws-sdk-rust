// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a routing rule condition.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RoutingRuleCondition {
    /// <p>The base path to be matched.</p>
    pub match_base_paths: ::std::option::Option<crate::types::RoutingRuleMatchBasePaths>,
    /// <p>The headers to be matched.</p>
    pub match_headers: ::std::option::Option<crate::types::RoutingRuleMatchHeaders>,
}
impl RoutingRuleCondition {
    /// <p>The base path to be matched.</p>
    pub fn match_base_paths(&self) -> ::std::option::Option<&crate::types::RoutingRuleMatchBasePaths> {
        self.match_base_paths.as_ref()
    }
    /// <p>The headers to be matched.</p>
    pub fn match_headers(&self) -> ::std::option::Option<&crate::types::RoutingRuleMatchHeaders> {
        self.match_headers.as_ref()
    }
}
impl RoutingRuleCondition {
    /// Creates a new builder-style object to manufacture [`RoutingRuleCondition`](crate::types::RoutingRuleCondition).
    pub fn builder() -> crate::types::builders::RoutingRuleConditionBuilder {
        crate::types::builders::RoutingRuleConditionBuilder::default()
    }
}

/// A builder for [`RoutingRuleCondition`](crate::types::RoutingRuleCondition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RoutingRuleConditionBuilder {
    pub(crate) match_base_paths: ::std::option::Option<crate::types::RoutingRuleMatchBasePaths>,
    pub(crate) match_headers: ::std::option::Option<crate::types::RoutingRuleMatchHeaders>,
}
impl RoutingRuleConditionBuilder {
    /// <p>The base path to be matched.</p>
    pub fn match_base_paths(mut self, input: crate::types::RoutingRuleMatchBasePaths) -> Self {
        self.match_base_paths = ::std::option::Option::Some(input);
        self
    }
    /// <p>The base path to be matched.</p>
    pub fn set_match_base_paths(mut self, input: ::std::option::Option<crate::types::RoutingRuleMatchBasePaths>) -> Self {
        self.match_base_paths = input;
        self
    }
    /// <p>The base path to be matched.</p>
    pub fn get_match_base_paths(&self) -> &::std::option::Option<crate::types::RoutingRuleMatchBasePaths> {
        &self.match_base_paths
    }
    /// <p>The headers to be matched.</p>
    pub fn match_headers(mut self, input: crate::types::RoutingRuleMatchHeaders) -> Self {
        self.match_headers = ::std::option::Option::Some(input);
        self
    }
    /// <p>The headers to be matched.</p>
    pub fn set_match_headers(mut self, input: ::std::option::Option<crate::types::RoutingRuleMatchHeaders>) -> Self {
        self.match_headers = input;
        self
    }
    /// <p>The headers to be matched.</p>
    pub fn get_match_headers(&self) -> &::std::option::Option<crate::types::RoutingRuleMatchHeaders> {
        &self.match_headers
    }
    /// Consumes the builder and constructs a [`RoutingRuleCondition`](crate::types::RoutingRuleCondition).
    pub fn build(self) -> crate::types::RoutingRuleCondition {
        crate::types::RoutingRuleCondition {
            match_base_paths: self.match_base_paths,
            match_headers: self.match_headers,
        }
    }
}
