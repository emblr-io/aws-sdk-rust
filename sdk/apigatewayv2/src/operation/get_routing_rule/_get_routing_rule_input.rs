// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetRoutingRuleInput {
    /// <p>The domain name.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The domain name ID.</p>
    pub domain_name_id: ::std::option::Option<::std::string::String>,
    /// <p>The routing rule ID.</p>
    pub routing_rule_id: ::std::option::Option<::std::string::String>,
}
impl GetRoutingRuleInput {
    /// <p>The domain name.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The domain name ID.</p>
    pub fn domain_name_id(&self) -> ::std::option::Option<&str> {
        self.domain_name_id.as_deref()
    }
    /// <p>The routing rule ID.</p>
    pub fn routing_rule_id(&self) -> ::std::option::Option<&str> {
        self.routing_rule_id.as_deref()
    }
}
impl GetRoutingRuleInput {
    /// Creates a new builder-style object to manufacture [`GetRoutingRuleInput`](crate::operation::get_routing_rule::GetRoutingRuleInput).
    pub fn builder() -> crate::operation::get_routing_rule::builders::GetRoutingRuleInputBuilder {
        crate::operation::get_routing_rule::builders::GetRoutingRuleInputBuilder::default()
    }
}

/// A builder for [`GetRoutingRuleInput`](crate::operation::get_routing_rule::GetRoutingRuleInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetRoutingRuleInputBuilder {
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) domain_name_id: ::std::option::Option<::std::string::String>,
    pub(crate) routing_rule_id: ::std::option::Option<::std::string::String>,
}
impl GetRoutingRuleInputBuilder {
    /// <p>The domain name.</p>
    /// This field is required.
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The domain name.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>The domain name ID.</p>
    pub fn domain_name_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name ID.</p>
    pub fn set_domain_name_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name_id = input;
        self
    }
    /// <p>The domain name ID.</p>
    pub fn get_domain_name_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name_id
    }
    /// <p>The routing rule ID.</p>
    /// This field is required.
    pub fn routing_rule_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.routing_rule_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The routing rule ID.</p>
    pub fn set_routing_rule_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.routing_rule_id = input;
        self
    }
    /// <p>The routing rule ID.</p>
    pub fn get_routing_rule_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.routing_rule_id
    }
    /// Consumes the builder and constructs a [`GetRoutingRuleInput`](crate::operation::get_routing_rule::GetRoutingRuleInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_routing_rule::GetRoutingRuleInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_routing_rule::GetRoutingRuleInput {
            domain_name: self.domain_name,
            domain_name_id: self.domain_name_id,
            routing_rule_id: self.routing_rule_id,
        })
    }
}
