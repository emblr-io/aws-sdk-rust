// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetRoutingRuleOutput {
    /// <p>The resulting action based on matching a routing rules condition. Only InvokeApi is supported.</p>
    pub actions: ::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleAction>>,
    /// <p>The conditions of the routing rule.</p>
    pub conditions: ::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleCondition>>,
    /// <p>The order in which API Gateway evaluates a rule. Priority is evaluated from the lowest value to the highest value.</p>
    pub priority: ::std::option::Option<i32>,
    /// <p>The routing rule ARN.</p>
    pub routing_rule_arn: ::std::option::Option<::std::string::String>,
    /// <p>The routing rule ID.</p>
    pub routing_rule_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetRoutingRuleOutput {
    /// <p>The resulting action based on matching a routing rules condition. Only InvokeApi is supported.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.actions.is_none()`.
    pub fn actions(&self) -> &[crate::types::RoutingRuleAction] {
        self.actions.as_deref().unwrap_or_default()
    }
    /// <p>The conditions of the routing rule.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.conditions.is_none()`.
    pub fn conditions(&self) -> &[crate::types::RoutingRuleCondition] {
        self.conditions.as_deref().unwrap_or_default()
    }
    /// <p>The order in which API Gateway evaluates a rule. Priority is evaluated from the lowest value to the highest value.</p>
    pub fn priority(&self) -> ::std::option::Option<i32> {
        self.priority
    }
    /// <p>The routing rule ARN.</p>
    pub fn routing_rule_arn(&self) -> ::std::option::Option<&str> {
        self.routing_rule_arn.as_deref()
    }
    /// <p>The routing rule ID.</p>
    pub fn routing_rule_id(&self) -> ::std::option::Option<&str> {
        self.routing_rule_id.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetRoutingRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetRoutingRuleOutput {
    /// Creates a new builder-style object to manufacture [`GetRoutingRuleOutput`](crate::operation::get_routing_rule::GetRoutingRuleOutput).
    pub fn builder() -> crate::operation::get_routing_rule::builders::GetRoutingRuleOutputBuilder {
        crate::operation::get_routing_rule::builders::GetRoutingRuleOutputBuilder::default()
    }
}

/// A builder for [`GetRoutingRuleOutput`](crate::operation::get_routing_rule::GetRoutingRuleOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetRoutingRuleOutputBuilder {
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleAction>>,
    pub(crate) conditions: ::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleCondition>>,
    pub(crate) priority: ::std::option::Option<i32>,
    pub(crate) routing_rule_arn: ::std::option::Option<::std::string::String>,
    pub(crate) routing_rule_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetRoutingRuleOutputBuilder {
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The resulting action based on matching a routing rules condition. Only InvokeApi is supported.</p>
    pub fn actions(mut self, input: crate::types::RoutingRuleAction) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The resulting action based on matching a routing rules condition. Only InvokeApi is supported.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleAction>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>The resulting action based on matching a routing rules condition. Only InvokeApi is supported.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleAction>> {
        &self.actions
    }
    /// Appends an item to `conditions`.
    ///
    /// To override the contents of this collection use [`set_conditions`](Self::set_conditions).
    ///
    /// <p>The conditions of the routing rule.</p>
    pub fn conditions(mut self, input: crate::types::RoutingRuleCondition) -> Self {
        let mut v = self.conditions.unwrap_or_default();
        v.push(input);
        self.conditions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The conditions of the routing rule.</p>
    pub fn set_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleCondition>>) -> Self {
        self.conditions = input;
        self
    }
    /// <p>The conditions of the routing rule.</p>
    pub fn get_conditions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleCondition>> {
        &self.conditions
    }
    /// <p>The order in which API Gateway evaluates a rule. Priority is evaluated from the lowest value to the highest value.</p>
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = ::std::option::Option::Some(input);
        self
    }
    /// <p>The order in which API Gateway evaluates a rule. Priority is evaluated from the lowest value to the highest value.</p>
    pub fn set_priority(mut self, input: ::std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// <p>The order in which API Gateway evaluates a rule. Priority is evaluated from the lowest value to the highest value.</p>
    pub fn get_priority(&self) -> &::std::option::Option<i32> {
        &self.priority
    }
    /// <p>The routing rule ARN.</p>
    pub fn routing_rule_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.routing_rule_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The routing rule ARN.</p>
    pub fn set_routing_rule_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.routing_rule_arn = input;
        self
    }
    /// <p>The routing rule ARN.</p>
    pub fn get_routing_rule_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.routing_rule_arn
    }
    /// <p>The routing rule ID.</p>
    pub fn routing_rule_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.routing_rule_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The routing rule ID.</p>
    pub fn set_routing_rule_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.routing_rule_id = input;
        self
    }
    /// <p>The routing rule ID.</p>
    pub fn get_routing_rule_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.routing_rule_id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetRoutingRuleOutput`](crate::operation::get_routing_rule::GetRoutingRuleOutput).
    pub fn build(self) -> crate::operation::get_routing_rule::GetRoutingRuleOutput {
        crate::operation::get_routing_rule::GetRoutingRuleOutput {
            actions: self.actions,
            conditions: self.conditions,
            priority: self.priority,
            routing_rule_arn: self.routing_rule_arn,
            routing_rule_id: self.routing_rule_id,
            _request_id: self._request_id,
        }
    }
}
