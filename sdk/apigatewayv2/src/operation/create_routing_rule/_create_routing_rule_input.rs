// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateRoutingRuleInput {
    /// <p>Represents a routing rule action. The only supported action is invokeApi.</p>
    pub actions: ::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleAction>>,
    /// <p>Represents a condition. Conditions can contain up to two matchHeaders conditions and one matchBasePaths conditions. API Gateway evaluates header conditions and base path conditions together. You can only use AND between header and base path conditions.</p>
    pub conditions: ::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleCondition>>,
    /// <p>The domain name.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The domain name ID.</p>
    pub domain_name_id: ::std::option::Option<::std::string::String>,
    /// Represents the priority of the routing rule.
    pub priority: ::std::option::Option<i32>,
}
impl CreateRoutingRuleInput {
    /// <p>Represents a routing rule action. The only supported action is invokeApi.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.actions.is_none()`.
    pub fn actions(&self) -> &[crate::types::RoutingRuleAction] {
        self.actions.as_deref().unwrap_or_default()
    }
    /// <p>Represents a condition. Conditions can contain up to two matchHeaders conditions and one matchBasePaths conditions. API Gateway evaluates header conditions and base path conditions together. You can only use AND between header and base path conditions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.conditions.is_none()`.
    pub fn conditions(&self) -> &[crate::types::RoutingRuleCondition] {
        self.conditions.as_deref().unwrap_or_default()
    }
    /// <p>The domain name.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The domain name ID.</p>
    pub fn domain_name_id(&self) -> ::std::option::Option<&str> {
        self.domain_name_id.as_deref()
    }
    /// Represents the priority of the routing rule.
    pub fn priority(&self) -> ::std::option::Option<i32> {
        self.priority
    }
}
impl CreateRoutingRuleInput {
    /// Creates a new builder-style object to manufacture [`CreateRoutingRuleInput`](crate::operation::create_routing_rule::CreateRoutingRuleInput).
    pub fn builder() -> crate::operation::create_routing_rule::builders::CreateRoutingRuleInputBuilder {
        crate::operation::create_routing_rule::builders::CreateRoutingRuleInputBuilder::default()
    }
}

/// A builder for [`CreateRoutingRuleInput`](crate::operation::create_routing_rule::CreateRoutingRuleInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateRoutingRuleInputBuilder {
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleAction>>,
    pub(crate) conditions: ::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleCondition>>,
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) domain_name_id: ::std::option::Option<::std::string::String>,
    pub(crate) priority: ::std::option::Option<i32>,
}
impl CreateRoutingRuleInputBuilder {
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>Represents a routing rule action. The only supported action is invokeApi.</p>
    pub fn actions(mut self, input: crate::types::RoutingRuleAction) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Represents a routing rule action. The only supported action is invokeApi.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleAction>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>Represents a routing rule action. The only supported action is invokeApi.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleAction>> {
        &self.actions
    }
    /// Appends an item to `conditions`.
    ///
    /// To override the contents of this collection use [`set_conditions`](Self::set_conditions).
    ///
    /// <p>Represents a condition. Conditions can contain up to two matchHeaders conditions and one matchBasePaths conditions. API Gateway evaluates header conditions and base path conditions together. You can only use AND between header and base path conditions.</p>
    pub fn conditions(mut self, input: crate::types::RoutingRuleCondition) -> Self {
        let mut v = self.conditions.unwrap_or_default();
        v.push(input);
        self.conditions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Represents a condition. Conditions can contain up to two matchHeaders conditions and one matchBasePaths conditions. API Gateway evaluates header conditions and base path conditions together. You can only use AND between header and base path conditions.</p>
    pub fn set_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleCondition>>) -> Self {
        self.conditions = input;
        self
    }
    /// <p>Represents a condition. Conditions can contain up to two matchHeaders conditions and one matchBasePaths conditions. API Gateway evaluates header conditions and base path conditions together. You can only use AND between header and base path conditions.</p>
    pub fn get_conditions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleCondition>> {
        &self.conditions
    }
    /// <p>The domain name.</p>
    /// This field is required.
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The domain name.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>The domain name ID.</p>
    pub fn domain_name_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name ID.</p>
    pub fn set_domain_name_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name_id = input;
        self
    }
    /// <p>The domain name ID.</p>
    pub fn get_domain_name_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name_id
    }
    /// Represents the priority of the routing rule.
    /// This field is required.
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = ::std::option::Option::Some(input);
        self
    }
    /// Represents the priority of the routing rule.
    pub fn set_priority(mut self, input: ::std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// Represents the priority of the routing rule.
    pub fn get_priority(&self) -> &::std::option::Option<i32> {
        &self.priority
    }
    /// Consumes the builder and constructs a [`CreateRoutingRuleInput`](crate::operation::create_routing_rule::CreateRoutingRuleInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_routing_rule::CreateRoutingRuleInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_routing_rule::CreateRoutingRuleInput {
            actions: self.actions,
            conditions: self.conditions,
            domain_name: self.domain_name,
            domain_name_id: self.domain_name_id,
            priority: self.priority,
        })
    }
}
