// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutRoutingRuleInput {
    /// <p>The routing rule action.</p>
    pub actions: ::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleAction>>,
    /// <p>The routing rule condition.</p>
    pub conditions: ::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleCondition>>,
    /// <p>The domain name.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The domain name ID.</p>
    pub domain_name_id: ::std::option::Option<::std::string::String>,
    /// <p>The routing rule priority.</p>
    pub priority: ::std::option::Option<i32>,
    /// <p>The routing rule ID.</p>
    pub routing_rule_id: ::std::option::Option<::std::string::String>,
}
impl PutRoutingRuleInput {
    /// <p>The routing rule action.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.actions.is_none()`.
    pub fn actions(&self) -> &[crate::types::RoutingRuleAction] {
        self.actions.as_deref().unwrap_or_default()
    }
    /// <p>The routing rule condition.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.conditions.is_none()`.
    pub fn conditions(&self) -> &[crate::types::RoutingRuleCondition] {
        self.conditions.as_deref().unwrap_or_default()
    }
    /// <p>The domain name.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The domain name ID.</p>
    pub fn domain_name_id(&self) -> ::std::option::Option<&str> {
        self.domain_name_id.as_deref()
    }
    /// <p>The routing rule priority.</p>
    pub fn priority(&self) -> ::std::option::Option<i32> {
        self.priority
    }
    /// <p>The routing rule ID.</p>
    pub fn routing_rule_id(&self) -> ::std::option::Option<&str> {
        self.routing_rule_id.as_deref()
    }
}
impl PutRoutingRuleInput {
    /// Creates a new builder-style object to manufacture [`PutRoutingRuleInput`](crate::operation::put_routing_rule::PutRoutingRuleInput).
    pub fn builder() -> crate::operation::put_routing_rule::builders::PutRoutingRuleInputBuilder {
        crate::operation::put_routing_rule::builders::PutRoutingRuleInputBuilder::default()
    }
}

/// A builder for [`PutRoutingRuleInput`](crate::operation::put_routing_rule::PutRoutingRuleInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PutRoutingRuleInputBuilder {
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleAction>>,
    pub(crate) conditions: ::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleCondition>>,
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) domain_name_id: ::std::option::Option<::std::string::String>,
    pub(crate) priority: ::std::option::Option<i32>,
    pub(crate) routing_rule_id: ::std::option::Option<::std::string::String>,
}
impl PutRoutingRuleInputBuilder {
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The routing rule action.</p>
    pub fn actions(mut self, input: crate::types::RoutingRuleAction) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The routing rule action.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleAction>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>The routing rule action.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleAction>> {
        &self.actions
    }
    /// Appends an item to `conditions`.
    ///
    /// To override the contents of this collection use [`set_conditions`](Self::set_conditions).
    ///
    /// <p>The routing rule condition.</p>
    pub fn conditions(mut self, input: crate::types::RoutingRuleCondition) -> Self {
        let mut v = self.conditions.unwrap_or_default();
        v.push(input);
        self.conditions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The routing rule condition.</p>
    pub fn set_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleCondition>>) -> Self {
        self.conditions = input;
        self
    }
    /// <p>The routing rule condition.</p>
    pub fn get_conditions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleCondition>> {
        &self.conditions
    }
    /// <p>The domain name.</p>
    /// This field is required.
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The domain name.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>The domain name ID.</p>
    pub fn domain_name_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name ID.</p>
    pub fn set_domain_name_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name_id = input;
        self
    }
    /// <p>The domain name ID.</p>
    pub fn get_domain_name_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name_id
    }
    /// <p>The routing rule priority.</p>
    /// This field is required.
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = ::std::option::Option::Some(input);
        self
    }
    /// <p>The routing rule priority.</p>
    pub fn set_priority(mut self, input: ::std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// <p>The routing rule priority.</p>
    pub fn get_priority(&self) -> &::std::option::Option<i32> {
        &self.priority
    }
    /// <p>The routing rule ID.</p>
    /// This field is required.
    pub fn routing_rule_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.routing_rule_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The routing rule ID.</p>
    pub fn set_routing_rule_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.routing_rule_id = input;
        self
    }
    /// <p>The routing rule ID.</p>
    pub fn get_routing_rule_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.routing_rule_id
    }
    /// Consumes the builder and constructs a [`PutRoutingRuleInput`](crate::operation::put_routing_rule::PutRoutingRuleInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::put_routing_rule::PutRoutingRuleInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::put_routing_rule::PutRoutingRuleInput {
            actions: self.actions,
            conditions: self.conditions,
            domain_name: self.domain_name,
            domain_name_id: self.domain_name_id,
            priority: self.priority,
            routing_rule_id: self.routing_rule_id,
        })
    }
}
