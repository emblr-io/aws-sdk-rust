// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateCustomLogSourceInput {
    /// <p>Specify the name for a third-party custom source. This must be a Regionally unique value. The <code>sourceName</code> you enter here, is used in the <code>LogProviderRole</code> name which follows the convention <code>AmazonSecurityLake-Provider-{name of the custom source}-{region}</code>. You must use a <code>CustomLogSource</code> name that is shorter than or equal to 20 characters. This ensures that the <code>LogProviderRole</code> name is below the 64 character limit.</p>
    pub source_name: ::std::option::Option<::std::string::String>,
    /// <p>Specify the source version for the third-party custom source, to limit log collection to a specific version of custom data source.</p>
    pub source_version: ::std::option::Option<::std::string::String>,
    /// <p>The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake. For the list of supported event classes, see the <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/adding-custom-sources.html#ocsf-eventclass">Amazon Security Lake User Guide</a>.</p>
    pub event_classes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The configuration used for the third-party custom source.</p>
    pub configuration: ::std::option::Option<crate::types::CustomLogSourceConfiguration>,
}
impl CreateCustomLogSourceInput {
    /// <p>Specify the name for a third-party custom source. This must be a Regionally unique value. The <code>sourceName</code> you enter here, is used in the <code>LogProviderRole</code> name which follows the convention <code>AmazonSecurityLake-Provider-{name of the custom source}-{region}</code>. You must use a <code>CustomLogSource</code> name that is shorter than or equal to 20 characters. This ensures that the <code>LogProviderRole</code> name is below the 64 character limit.</p>
    pub fn source_name(&self) -> ::std::option::Option<&str> {
        self.source_name.as_deref()
    }
    /// <p>Specify the source version for the third-party custom source, to limit log collection to a specific version of custom data source.</p>
    pub fn source_version(&self) -> ::std::option::Option<&str> {
        self.source_version.as_deref()
    }
    /// <p>The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake. For the list of supported event classes, see the <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/adding-custom-sources.html#ocsf-eventclass">Amazon Security Lake User Guide</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.event_classes.is_none()`.
    pub fn event_classes(&self) -> &[::std::string::String] {
        self.event_classes.as_deref().unwrap_or_default()
    }
    /// <p>The configuration used for the third-party custom source.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::CustomLogSourceConfiguration> {
        self.configuration.as_ref()
    }
}
impl CreateCustomLogSourceInput {
    /// Creates a new builder-style object to manufacture [`CreateCustomLogSourceInput`](crate::operation::create_custom_log_source::CreateCustomLogSourceInput).
    pub fn builder() -> crate::operation::create_custom_log_source::builders::CreateCustomLogSourceInputBuilder {
        crate::operation::create_custom_log_source::builders::CreateCustomLogSourceInputBuilder::default()
    }
}

/// A builder for [`CreateCustomLogSourceInput`](crate::operation::create_custom_log_source::CreateCustomLogSourceInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateCustomLogSourceInputBuilder {
    pub(crate) source_name: ::std::option::Option<::std::string::String>,
    pub(crate) source_version: ::std::option::Option<::std::string::String>,
    pub(crate) event_classes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) configuration: ::std::option::Option<crate::types::CustomLogSourceConfiguration>,
}
impl CreateCustomLogSourceInputBuilder {
    /// <p>Specify the name for a third-party custom source. This must be a Regionally unique value. The <code>sourceName</code> you enter here, is used in the <code>LogProviderRole</code> name which follows the convention <code>AmazonSecurityLake-Provider-{name of the custom source}-{region}</code>. You must use a <code>CustomLogSource</code> name that is shorter than or equal to 20 characters. This ensures that the <code>LogProviderRole</code> name is below the 64 character limit.</p>
    /// This field is required.
    pub fn source_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify the name for a third-party custom source. This must be a Regionally unique value. The <code>sourceName</code> you enter here, is used in the <code>LogProviderRole</code> name which follows the convention <code>AmazonSecurityLake-Provider-{name of the custom source}-{region}</code>. You must use a <code>CustomLogSource</code> name that is shorter than or equal to 20 characters. This ensures that the <code>LogProviderRole</code> name is below the 64 character limit.</p>
    pub fn set_source_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_name = input;
        self
    }
    /// <p>Specify the name for a third-party custom source. This must be a Regionally unique value. The <code>sourceName</code> you enter here, is used in the <code>LogProviderRole</code> name which follows the convention <code>AmazonSecurityLake-Provider-{name of the custom source}-{region}</code>. You must use a <code>CustomLogSource</code> name that is shorter than or equal to 20 characters. This ensures that the <code>LogProviderRole</code> name is below the 64 character limit.</p>
    pub fn get_source_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_name
    }
    /// <p>Specify the source version for the third-party custom source, to limit log collection to a specific version of custom data source.</p>
    pub fn source_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify the source version for the third-party custom source, to limit log collection to a specific version of custom data source.</p>
    pub fn set_source_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_version = input;
        self
    }
    /// <p>Specify the source version for the third-party custom source, to limit log collection to a specific version of custom data source.</p>
    pub fn get_source_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_version
    }
    /// Appends an item to `event_classes`.
    ///
    /// To override the contents of this collection use [`set_event_classes`](Self::set_event_classes).
    ///
    /// <p>The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake. For the list of supported event classes, see the <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/adding-custom-sources.html#ocsf-eventclass">Amazon Security Lake User Guide</a>.</p>
    pub fn event_classes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.event_classes.unwrap_or_default();
        v.push(input.into());
        self.event_classes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake. For the list of supported event classes, see the <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/adding-custom-sources.html#ocsf-eventclass">Amazon Security Lake User Guide</a>.</p>
    pub fn set_event_classes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.event_classes = input;
        self
    }
    /// <p>The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake. For the list of supported event classes, see the <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/adding-custom-sources.html#ocsf-eventclass">Amazon Security Lake User Guide</a>.</p>
    pub fn get_event_classes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.event_classes
    }
    /// <p>The configuration used for the third-party custom source.</p>
    /// This field is required.
    pub fn configuration(mut self, input: crate::types::CustomLogSourceConfiguration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration used for the third-party custom source.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::CustomLogSourceConfiguration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>The configuration used for the third-party custom source.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::CustomLogSourceConfiguration> {
        &self.configuration
    }
    /// Consumes the builder and constructs a [`CreateCustomLogSourceInput`](crate::operation::create_custom_log_source::CreateCustomLogSourceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_custom_log_source::CreateCustomLogSourceInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_custom_log_source::CreateCustomLogSourceInput {
            source_name: self.source_name,
            source_version: self.source_version,
            event_classes: self.event_classes,
            configuration: self.configuration,
        })
    }
}
