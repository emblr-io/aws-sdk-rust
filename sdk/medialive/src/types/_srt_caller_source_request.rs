// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Configures the connection for a source that uses SRT as the connection protocol. In terms of establishing the connection, MediaLive is always the caller and the upstream system is always the listener. In terms of transmission of the source content, MediaLive is always the receiver and the upstream system is always the sender.
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SrtCallerSourceRequest {
    /// Complete these parameters only if the content is encrypted.
    pub decryption: ::std::option::Option<crate::types::SrtCallerDecryptionRequest>,
    /// The preferred latency (in milliseconds) for implementing packet loss and recovery. Packet recovery is a key feature of SRT. Obtain this value from the operator at the upstream system.
    pub minimum_latency: ::std::option::Option<i32>,
    /// The IP address at the upstream system (the listener) that MediaLive (the caller) will connect to.
    pub srt_listener_address: ::std::option::Option<::std::string::String>,
    /// The port at the upstream system (the listener) that MediaLive (the caller) will connect to.
    pub srt_listener_port: ::std::option::Option<::std::string::String>,
    /// This value is required if the upstream system uses this identifier because without it, the SRT handshake between MediaLive (the caller) and the upstream system (the listener) might fail.
    pub stream_id: ::std::option::Option<::std::string::String>,
}
impl SrtCallerSourceRequest {
    /// Complete these parameters only if the content is encrypted.
    pub fn decryption(&self) -> ::std::option::Option<&crate::types::SrtCallerDecryptionRequest> {
        self.decryption.as_ref()
    }
    /// The preferred latency (in milliseconds) for implementing packet loss and recovery. Packet recovery is a key feature of SRT. Obtain this value from the operator at the upstream system.
    pub fn minimum_latency(&self) -> ::std::option::Option<i32> {
        self.minimum_latency
    }
    /// The IP address at the upstream system (the listener) that MediaLive (the caller) will connect to.
    pub fn srt_listener_address(&self) -> ::std::option::Option<&str> {
        self.srt_listener_address.as_deref()
    }
    /// The port at the upstream system (the listener) that MediaLive (the caller) will connect to.
    pub fn srt_listener_port(&self) -> ::std::option::Option<&str> {
        self.srt_listener_port.as_deref()
    }
    /// This value is required if the upstream system uses this identifier because without it, the SRT handshake between MediaLive (the caller) and the upstream system (the listener) might fail.
    pub fn stream_id(&self) -> ::std::option::Option<&str> {
        self.stream_id.as_deref()
    }
}
impl SrtCallerSourceRequest {
    /// Creates a new builder-style object to manufacture [`SrtCallerSourceRequest`](crate::types::SrtCallerSourceRequest).
    pub fn builder() -> crate::types::builders::SrtCallerSourceRequestBuilder {
        crate::types::builders::SrtCallerSourceRequestBuilder::default()
    }
}

/// A builder for [`SrtCallerSourceRequest`](crate::types::SrtCallerSourceRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SrtCallerSourceRequestBuilder {
    pub(crate) decryption: ::std::option::Option<crate::types::SrtCallerDecryptionRequest>,
    pub(crate) minimum_latency: ::std::option::Option<i32>,
    pub(crate) srt_listener_address: ::std::option::Option<::std::string::String>,
    pub(crate) srt_listener_port: ::std::option::Option<::std::string::String>,
    pub(crate) stream_id: ::std::option::Option<::std::string::String>,
}
impl SrtCallerSourceRequestBuilder {
    /// Complete these parameters only if the content is encrypted.
    pub fn decryption(mut self, input: crate::types::SrtCallerDecryptionRequest) -> Self {
        self.decryption = ::std::option::Option::Some(input);
        self
    }
    /// Complete these parameters only if the content is encrypted.
    pub fn set_decryption(mut self, input: ::std::option::Option<crate::types::SrtCallerDecryptionRequest>) -> Self {
        self.decryption = input;
        self
    }
    /// Complete these parameters only if the content is encrypted.
    pub fn get_decryption(&self) -> &::std::option::Option<crate::types::SrtCallerDecryptionRequest> {
        &self.decryption
    }
    /// The preferred latency (in milliseconds) for implementing packet loss and recovery. Packet recovery is a key feature of SRT. Obtain this value from the operator at the upstream system.
    pub fn minimum_latency(mut self, input: i32) -> Self {
        self.minimum_latency = ::std::option::Option::Some(input);
        self
    }
    /// The preferred latency (in milliseconds) for implementing packet loss and recovery. Packet recovery is a key feature of SRT. Obtain this value from the operator at the upstream system.
    pub fn set_minimum_latency(mut self, input: ::std::option::Option<i32>) -> Self {
        self.minimum_latency = input;
        self
    }
    /// The preferred latency (in milliseconds) for implementing packet loss and recovery. Packet recovery is a key feature of SRT. Obtain this value from the operator at the upstream system.
    pub fn get_minimum_latency(&self) -> &::std::option::Option<i32> {
        &self.minimum_latency
    }
    /// The IP address at the upstream system (the listener) that MediaLive (the caller) will connect to.
    pub fn srt_listener_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.srt_listener_address = ::std::option::Option::Some(input.into());
        self
    }
    /// The IP address at the upstream system (the listener) that MediaLive (the caller) will connect to.
    pub fn set_srt_listener_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.srt_listener_address = input;
        self
    }
    /// The IP address at the upstream system (the listener) that MediaLive (the caller) will connect to.
    pub fn get_srt_listener_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.srt_listener_address
    }
    /// The port at the upstream system (the listener) that MediaLive (the caller) will connect to.
    pub fn srt_listener_port(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.srt_listener_port = ::std::option::Option::Some(input.into());
        self
    }
    /// The port at the upstream system (the listener) that MediaLive (the caller) will connect to.
    pub fn set_srt_listener_port(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.srt_listener_port = input;
        self
    }
    /// The port at the upstream system (the listener) that MediaLive (the caller) will connect to.
    pub fn get_srt_listener_port(&self) -> &::std::option::Option<::std::string::String> {
        &self.srt_listener_port
    }
    /// This value is required if the upstream system uses this identifier because without it, the SRT handshake between MediaLive (the caller) and the upstream system (the listener) might fail.
    pub fn stream_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stream_id = ::std::option::Option::Some(input.into());
        self
    }
    /// This value is required if the upstream system uses this identifier because without it, the SRT handshake between MediaLive (the caller) and the upstream system (the listener) might fail.
    pub fn set_stream_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stream_id = input;
        self
    }
    /// This value is required if the upstream system uses this identifier because without it, the SRT handshake between MediaLive (the caller) and the upstream system (the listener) might fail.
    pub fn get_stream_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.stream_id
    }
    /// Consumes the builder and constructs a [`SrtCallerSourceRequest`](crate::types::SrtCallerSourceRequest).
    pub fn build(self) -> crate::types::SrtCallerSourceRequest {
        crate::types::SrtCallerSourceRequest {
            decryption: self.decryption,
            minimum_latency: self.minimum_latency,
            srt_listener_address: self.srt_listener_address,
            srt_listener_port: self.srt_listener_port,
            stream_id: self.stream_id,
        }
    }
}
