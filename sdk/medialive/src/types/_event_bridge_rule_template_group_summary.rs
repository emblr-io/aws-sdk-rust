// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Placeholder documentation for EventBridgeRuleTemplateGroupSummary
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EventBridgeRuleTemplateGroupSummary {
    /// An eventbridge rule template group's ARN (Amazon Resource Name)
    pub arn: ::std::option::Option<::std::string::String>,
    /// Placeholder documentation for __timestampIso8601
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// A resource's optional description.
    pub description: ::std::option::Option<::std::string::String>,
    /// An eventbridge rule template group's id. AWS provided template groups have ids that start with `aws-`
    pub id: ::std::option::Option<::std::string::String>,
    /// Placeholder documentation for __timestampIso8601
    pub modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    pub name: ::std::option::Option<::std::string::String>,
    /// Represents the tags associated with a resource.
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// The number of templates in a group.
    pub template_count: ::std::option::Option<i32>,
}
impl EventBridgeRuleTemplateGroupSummary {
    /// An eventbridge rule template group's ARN (Amazon Resource Name)
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// Placeholder documentation for __timestampIso8601
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// A resource's optional description.
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// An eventbridge rule template group's id. AWS provided template groups have ids that start with `aws-`
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// Placeholder documentation for __timestampIso8601
    pub fn modified_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.modified_at.as_ref()
    }
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// Represents the tags associated with a resource.
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// The number of templates in a group.
    pub fn template_count(&self) -> ::std::option::Option<i32> {
        self.template_count
    }
}
impl EventBridgeRuleTemplateGroupSummary {
    /// Creates a new builder-style object to manufacture [`EventBridgeRuleTemplateGroupSummary`](crate::types::EventBridgeRuleTemplateGroupSummary).
    pub fn builder() -> crate::types::builders::EventBridgeRuleTemplateGroupSummaryBuilder {
        crate::types::builders::EventBridgeRuleTemplateGroupSummaryBuilder::default()
    }
}

/// A builder for [`EventBridgeRuleTemplateGroupSummary`](crate::types::EventBridgeRuleTemplateGroupSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EventBridgeRuleTemplateGroupSummaryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) template_count: ::std::option::Option<i32>,
}
impl EventBridgeRuleTemplateGroupSummaryBuilder {
    /// An eventbridge rule template group's ARN (Amazon Resource Name)
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// An eventbridge rule template group's ARN (Amazon Resource Name)
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// An eventbridge rule template group's ARN (Amazon Resource Name)
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Placeholder documentation for __timestampIso8601
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// Placeholder documentation for __timestampIso8601
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// Placeholder documentation for __timestampIso8601
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// A resource's optional description.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// A resource's optional description.
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// A resource's optional description.
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// An eventbridge rule template group's id. AWS provided template groups have ids that start with `aws-`
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// An eventbridge rule template group's id. AWS provided template groups have ids that start with `aws-`
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// An eventbridge rule template group's id. AWS provided template groups have ids that start with `aws-`
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Placeholder documentation for __timestampIso8601
    pub fn modified_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modified_at = ::std::option::Option::Some(input);
        self
    }
    /// Placeholder documentation for __timestampIso8601
    pub fn set_modified_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modified_at = input;
        self
    }
    /// Placeholder documentation for __timestampIso8601
    pub fn get_modified_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modified_at
    }
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// Represents the tags associated with a resource.
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// Represents the tags associated with a resource.
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// Represents the tags associated with a resource.
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// The number of templates in a group.
    /// This field is required.
    pub fn template_count(mut self, input: i32) -> Self {
        self.template_count = ::std::option::Option::Some(input);
        self
    }
    /// The number of templates in a group.
    pub fn set_template_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.template_count = input;
        self
    }
    /// The number of templates in a group.
    pub fn get_template_count(&self) -> &::std::option::Option<i32> {
        &self.template_count
    }
    /// Consumes the builder and constructs a [`EventBridgeRuleTemplateGroupSummary`](crate::types::EventBridgeRuleTemplateGroupSummary).
    pub fn build(self) -> crate::types::EventBridgeRuleTemplateGroupSummary {
        crate::types::EventBridgeRuleTemplateGroupSummary {
            arn: self.arn,
            created_at: self.created_at,
            description: self.description,
            id: self.id,
            modified_at: self.modified_at,
            name: self.name,
            tags: self.tags,
            template_count: self.template_count,
        }
    }
}
