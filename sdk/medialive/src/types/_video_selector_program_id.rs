// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Video Selector Program Id
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VideoSelectorProgramId {
    /// Selects a specific program from within a multi-program transport stream. If the program doesn't exist, the first program within the transport stream will be selected by default.
    pub program_id: ::std::option::Option<i32>,
}
impl VideoSelectorProgramId {
    /// Selects a specific program from within a multi-program transport stream. If the program doesn't exist, the first program within the transport stream will be selected by default.
    pub fn program_id(&self) -> ::std::option::Option<i32> {
        self.program_id
    }
}
impl VideoSelectorProgramId {
    /// Creates a new builder-style object to manufacture [`VideoSelectorProgramId`](crate::types::VideoSelectorProgramId).
    pub fn builder() -> crate::types::builders::VideoSelectorProgramIdBuilder {
        crate::types::builders::VideoSelectorProgramIdBuilder::default()
    }
}

/// A builder for [`VideoSelectorProgramId`](crate::types::VideoSelectorProgramId).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VideoSelectorProgramIdBuilder {
    pub(crate) program_id: ::std::option::Option<i32>,
}
impl VideoSelectorProgramIdBuilder {
    /// Selects a specific program from within a multi-program transport stream. If the program doesn't exist, the first program within the transport stream will be selected by default.
    pub fn program_id(mut self, input: i32) -> Self {
        self.program_id = ::std::option::Option::Some(input);
        self
    }
    /// Selects a specific program from within a multi-program transport stream. If the program doesn't exist, the first program within the transport stream will be selected by default.
    pub fn set_program_id(mut self, input: ::std::option::Option<i32>) -> Self {
        self.program_id = input;
        self
    }
    /// Selects a specific program from within a multi-program transport stream. If the program doesn't exist, the first program within the transport stream will be selected by default.
    pub fn get_program_id(&self) -> &::std::option::Option<i32> {
        &self.program_id
    }
    /// Consumes the builder and constructs a [`VideoSelectorProgramId`](crate::types::VideoSelectorProgramId).
    pub fn build(self) -> crate::types::VideoSelectorProgramId {
        crate::types::VideoSelectorProgramId { program_id: self.program_id }
    }
}
