// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The decryption settings for the SRT caller source. Present only if the source has decryption enabled.
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SrtCallerDecryption {
    /// The algorithm used to encrypt content.
    pub algorithm: ::std::option::Option<crate::types::Algorithm>,
    /// The ARN for the secret in Secrets Manager. Someone in your organization must create a secret and provide you with its ARN. The secret holds the passphrase that MediaLive uses to decrypt the source content.
    pub passphrase_secret_arn: ::std::option::Option<::std::string::String>,
}
impl SrtCallerDecryption {
    /// The algorithm used to encrypt content.
    pub fn algorithm(&self) -> ::std::option::Option<&crate::types::Algorithm> {
        self.algorithm.as_ref()
    }
    /// The ARN for the secret in Secrets Manager. Someone in your organization must create a secret and provide you with its ARN. The secret holds the passphrase that MediaLive uses to decrypt the source content.
    pub fn passphrase_secret_arn(&self) -> ::std::option::Option<&str> {
        self.passphrase_secret_arn.as_deref()
    }
}
impl SrtCallerDecryption {
    /// Creates a new builder-style object to manufacture [`SrtCallerDecryption`](crate::types::SrtCallerDecryption).
    pub fn builder() -> crate::types::builders::SrtCallerDecryptionBuilder {
        crate::types::builders::SrtCallerDecryptionBuilder::default()
    }
}

/// A builder for [`SrtCallerDecryption`](crate::types::SrtCallerDecryption).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SrtCallerDecryptionBuilder {
    pub(crate) algorithm: ::std::option::Option<crate::types::Algorithm>,
    pub(crate) passphrase_secret_arn: ::std::option::Option<::std::string::String>,
}
impl SrtCallerDecryptionBuilder {
    /// The algorithm used to encrypt content.
    pub fn algorithm(mut self, input: crate::types::Algorithm) -> Self {
        self.algorithm = ::std::option::Option::Some(input);
        self
    }
    /// The algorithm used to encrypt content.
    pub fn set_algorithm(mut self, input: ::std::option::Option<crate::types::Algorithm>) -> Self {
        self.algorithm = input;
        self
    }
    /// The algorithm used to encrypt content.
    pub fn get_algorithm(&self) -> &::std::option::Option<crate::types::Algorithm> {
        &self.algorithm
    }
    /// The ARN for the secret in Secrets Manager. Someone in your organization must create a secret and provide you with its ARN. The secret holds the passphrase that MediaLive uses to decrypt the source content.
    pub fn passphrase_secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.passphrase_secret_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The ARN for the secret in Secrets Manager. Someone in your organization must create a secret and provide you with its ARN. The secret holds the passphrase that MediaLive uses to decrypt the source content.
    pub fn set_passphrase_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.passphrase_secret_arn = input;
        self
    }
    /// The ARN for the secret in Secrets Manager. Someone in your organization must create a secret and provide you with its ARN. The secret holds the passphrase that MediaLive uses to decrypt the source content.
    pub fn get_passphrase_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.passphrase_secret_arn
    }
    /// Consumes the builder and constructs a [`SrtCallerDecryption`](crate::types::SrtCallerDecryption).
    pub fn build(self) -> crate::types::SrtCallerDecryption {
        crate::types::SrtCallerDecryption {
            algorithm: self.algorithm,
            passphrase_secret_arn: self.passphrase_secret_arn,
        }
    }
}
