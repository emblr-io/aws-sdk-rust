// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// An AWS resource used in media workflows.
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MediaResource {
    /// Placeholder documentation for __listOfMediaResourceNeighbor
    pub destinations: ::std::option::Option<::std::vec::Vec<crate::types::MediaResourceNeighbor>>,
    /// The logical name of an AWS media resource.
    pub name: ::std::option::Option<::std::string::String>,
    /// Placeholder documentation for __listOfMediaResourceNeighbor
    pub sources: ::std::option::Option<::std::vec::Vec<crate::types::MediaResourceNeighbor>>,
}
impl MediaResource {
    /// Placeholder documentation for __listOfMediaResourceNeighbor
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destinations.is_none()`.
    pub fn destinations(&self) -> &[crate::types::MediaResourceNeighbor] {
        self.destinations.as_deref().unwrap_or_default()
    }
    /// The logical name of an AWS media resource.
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// Placeholder documentation for __listOfMediaResourceNeighbor
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sources.is_none()`.
    pub fn sources(&self) -> &[crate::types::MediaResourceNeighbor] {
        self.sources.as_deref().unwrap_or_default()
    }
}
impl MediaResource {
    /// Creates a new builder-style object to manufacture [`MediaResource`](crate::types::MediaResource).
    pub fn builder() -> crate::types::builders::MediaResourceBuilder {
        crate::types::builders::MediaResourceBuilder::default()
    }
}

/// A builder for [`MediaResource`](crate::types::MediaResource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MediaResourceBuilder {
    pub(crate) destinations: ::std::option::Option<::std::vec::Vec<crate::types::MediaResourceNeighbor>>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) sources: ::std::option::Option<::std::vec::Vec<crate::types::MediaResourceNeighbor>>,
}
impl MediaResourceBuilder {
    /// Appends an item to `destinations`.
    ///
    /// To override the contents of this collection use [`set_destinations`](Self::set_destinations).
    ///
    /// Placeholder documentation for __listOfMediaResourceNeighbor
    pub fn destinations(mut self, input: crate::types::MediaResourceNeighbor) -> Self {
        let mut v = self.destinations.unwrap_or_default();
        v.push(input);
        self.destinations = ::std::option::Option::Some(v);
        self
    }
    /// Placeholder documentation for __listOfMediaResourceNeighbor
    pub fn set_destinations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MediaResourceNeighbor>>) -> Self {
        self.destinations = input;
        self
    }
    /// Placeholder documentation for __listOfMediaResourceNeighbor
    pub fn get_destinations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MediaResourceNeighbor>> {
        &self.destinations
    }
    /// The logical name of an AWS media resource.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// The logical name of an AWS media resource.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// The logical name of an AWS media resource.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// Placeholder documentation for __listOfMediaResourceNeighbor
    pub fn sources(mut self, input: crate::types::MediaResourceNeighbor) -> Self {
        let mut v = self.sources.unwrap_or_default();
        v.push(input);
        self.sources = ::std::option::Option::Some(v);
        self
    }
    /// Placeholder documentation for __listOfMediaResourceNeighbor
    pub fn set_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MediaResourceNeighbor>>) -> Self {
        self.sources = input;
        self
    }
    /// Placeholder documentation for __listOfMediaResourceNeighbor
    pub fn get_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MediaResourceNeighbor>> {
        &self.sources
    }
    /// Consumes the builder and constructs a [`MediaResource`](crate::types::MediaResource).
    pub fn build(self) -> crate::types::MediaResource {
        crate::types::MediaResource {
            destinations: self.destinations,
            name: self.name,
            sources: self.sources,
        }
    }
}
