// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Add an array item for each language. Follow the order of the caption descriptions. For example, if the first caption description is for German, then the first array item must be for German, and its caption channel must be set to 1. The second array item must be 2, and so on.
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CmafIngestCaptionLanguageMapping {
    /// A number for the channel for this caption, 1 to 4.
    pub caption_channel: ::std::option::Option<i32>,
    /// Language code for the language of the caption in this channel. For example, ger/deu. See http://www.loc.gov/standards/iso639-2
    pub language_code: ::std::option::Option<::std::string::String>,
}
impl CmafIngestCaptionLanguageMapping {
    /// A number for the channel for this caption, 1 to 4.
    pub fn caption_channel(&self) -> ::std::option::Option<i32> {
        self.caption_channel
    }
    /// Language code for the language of the caption in this channel. For example, ger/deu. See http://www.loc.gov/standards/iso639-2
    pub fn language_code(&self) -> ::std::option::Option<&str> {
        self.language_code.as_deref()
    }
}
impl CmafIngestCaptionLanguageMapping {
    /// Creates a new builder-style object to manufacture [`CmafIngestCaptionLanguageMapping`](crate::types::CmafIngestCaptionLanguageMapping).
    pub fn builder() -> crate::types::builders::CmafIngestCaptionLanguageMappingBuilder {
        crate::types::builders::CmafIngestCaptionLanguageMappingBuilder::default()
    }
}

/// A builder for [`CmafIngestCaptionLanguageMapping`](crate::types::CmafIngestCaptionLanguageMapping).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CmafIngestCaptionLanguageMappingBuilder {
    pub(crate) caption_channel: ::std::option::Option<i32>,
    pub(crate) language_code: ::std::option::Option<::std::string::String>,
}
impl CmafIngestCaptionLanguageMappingBuilder {
    /// A number for the channel for this caption, 1 to 4.
    /// This field is required.
    pub fn caption_channel(mut self, input: i32) -> Self {
        self.caption_channel = ::std::option::Option::Some(input);
        self
    }
    /// A number for the channel for this caption, 1 to 4.
    pub fn set_caption_channel(mut self, input: ::std::option::Option<i32>) -> Self {
        self.caption_channel = input;
        self
    }
    /// A number for the channel for this caption, 1 to 4.
    pub fn get_caption_channel(&self) -> &::std::option::Option<i32> {
        &self.caption_channel
    }
    /// Language code for the language of the caption in this channel. For example, ger/deu. See http://www.loc.gov/standards/iso639-2
    /// This field is required.
    pub fn language_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.language_code = ::std::option::Option::Some(input.into());
        self
    }
    /// Language code for the language of the caption in this channel. For example, ger/deu. See http://www.loc.gov/standards/iso639-2
    pub fn set_language_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.language_code = input;
        self
    }
    /// Language code for the language of the caption in this channel. For example, ger/deu. See http://www.loc.gov/standards/iso639-2
    pub fn get_language_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.language_code
    }
    /// Consumes the builder and constructs a [`CmafIngestCaptionLanguageMapping`](crate::types::CmafIngestCaptionLanguageMapping).
    pub fn build(self) -> crate::types::CmafIngestCaptionLanguageMapping {
        crate::types::CmafIngestCaptionLanguageMapping {
            caption_channel: self.caption_channel,
            language_code: self.language_code,
        }
    }
}
