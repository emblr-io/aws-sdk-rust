// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Represents the latest monitor deployment of a signal map.
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MonitorDeployment {
    /// URI associated with a signal map's monitor deployment.
    pub details_uri: ::std::option::Option<::std::string::String>,
    /// Error message associated with a failed monitor deployment of a signal map.
    pub error_message: ::std::option::Option<::std::string::String>,
    /// A signal map's monitor deployment status.
    pub status: ::std::option::Option<crate::types::SignalMapMonitorDeploymentStatus>,
}
impl MonitorDeployment {
    /// URI associated with a signal map's monitor deployment.
    pub fn details_uri(&self) -> ::std::option::Option<&str> {
        self.details_uri.as_deref()
    }
    /// Error message associated with a failed monitor deployment of a signal map.
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// A signal map's monitor deployment status.
    pub fn status(&self) -> ::std::option::Option<&crate::types::SignalMapMonitorDeploymentStatus> {
        self.status.as_ref()
    }
}
impl MonitorDeployment {
    /// Creates a new builder-style object to manufacture [`MonitorDeployment`](crate::types::MonitorDeployment).
    pub fn builder() -> crate::types::builders::MonitorDeploymentBuilder {
        crate::types::builders::MonitorDeploymentBuilder::default()
    }
}

/// A builder for [`MonitorDeployment`](crate::types::MonitorDeployment).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MonitorDeploymentBuilder {
    pub(crate) details_uri: ::std::option::Option<::std::string::String>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::SignalMapMonitorDeploymentStatus>,
}
impl MonitorDeploymentBuilder {
    /// URI associated with a signal map's monitor deployment.
    pub fn details_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.details_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// URI associated with a signal map's monitor deployment.
    pub fn set_details_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.details_uri = input;
        self
    }
    /// URI associated with a signal map's monitor deployment.
    pub fn get_details_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.details_uri
    }
    /// Error message associated with a failed monitor deployment of a signal map.
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// Error message associated with a failed monitor deployment of a signal map.
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// Error message associated with a failed monitor deployment of a signal map.
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// A signal map's monitor deployment status.
    /// This field is required.
    pub fn status(mut self, input: crate::types::SignalMapMonitorDeploymentStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// A signal map's monitor deployment status.
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SignalMapMonitorDeploymentStatus>) -> Self {
        self.status = input;
        self
    }
    /// A signal map's monitor deployment status.
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SignalMapMonitorDeploymentStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`MonitorDeployment`](crate::types::MonitorDeployment).
    pub fn build(self) -> crate::types::MonitorDeployment {
        crate::types::MonitorDeployment {
            details_uri: self.details_uri,
            error_message: self.error_message,
            status: self.status,
        }
    }
}
