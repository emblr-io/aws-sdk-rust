// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The configuration for a source that uses SRT as the connection protocol. In terms of establishing the connection, MediaLive is always caller and the upstream system is always the listener. In terms of transmission of the source content, MediaLive is always the receiver and the upstream system is always the sender.
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SrtCallerSource {
    /// The decryption settings for the SRT caller source. Present only if the source has decryption enabled.
    pub decryption: ::std::option::Option<crate::types::SrtCallerDecryption>,
    /// The preferred latency (in milliseconds) for implementing packet loss and recovery. Packet recovery is a key feature of SRT.
    pub minimum_latency: ::std::option::Option<i32>,
    /// The IP address at the upstream system (the listener) that MediaLive (the caller) connects to.
    pub srt_listener_address: ::std::option::Option<::std::string::String>,
    /// The port at the upstream system (the listener) that MediaLive (the caller) connects to.
    pub srt_listener_port: ::std::option::Option<::std::string::String>,
    /// The stream ID, if the upstream system uses this identifier.
    pub stream_id: ::std::option::Option<::std::string::String>,
}
impl SrtCallerSource {
    /// The decryption settings for the SRT caller source. Present only if the source has decryption enabled.
    pub fn decryption(&self) -> ::std::option::Option<&crate::types::SrtCallerDecryption> {
        self.decryption.as_ref()
    }
    /// The preferred latency (in milliseconds) for implementing packet loss and recovery. Packet recovery is a key feature of SRT.
    pub fn minimum_latency(&self) -> ::std::option::Option<i32> {
        self.minimum_latency
    }
    /// The IP address at the upstream system (the listener) that MediaLive (the caller) connects to.
    pub fn srt_listener_address(&self) -> ::std::option::Option<&str> {
        self.srt_listener_address.as_deref()
    }
    /// The port at the upstream system (the listener) that MediaLive (the caller) connects to.
    pub fn srt_listener_port(&self) -> ::std::option::Option<&str> {
        self.srt_listener_port.as_deref()
    }
    /// The stream ID, if the upstream system uses this identifier.
    pub fn stream_id(&self) -> ::std::option::Option<&str> {
        self.stream_id.as_deref()
    }
}
impl SrtCallerSource {
    /// Creates a new builder-style object to manufacture [`SrtCallerSource`](crate::types::SrtCallerSource).
    pub fn builder() -> crate::types::builders::SrtCallerSourceBuilder {
        crate::types::builders::SrtCallerSourceBuilder::default()
    }
}

/// A builder for [`SrtCallerSource`](crate::types::SrtCallerSource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SrtCallerSourceBuilder {
    pub(crate) decryption: ::std::option::Option<crate::types::SrtCallerDecryption>,
    pub(crate) minimum_latency: ::std::option::Option<i32>,
    pub(crate) srt_listener_address: ::std::option::Option<::std::string::String>,
    pub(crate) srt_listener_port: ::std::option::Option<::std::string::String>,
    pub(crate) stream_id: ::std::option::Option<::std::string::String>,
}
impl SrtCallerSourceBuilder {
    /// The decryption settings for the SRT caller source. Present only if the source has decryption enabled.
    pub fn decryption(mut self, input: crate::types::SrtCallerDecryption) -> Self {
        self.decryption = ::std::option::Option::Some(input);
        self
    }
    /// The decryption settings for the SRT caller source. Present only if the source has decryption enabled.
    pub fn set_decryption(mut self, input: ::std::option::Option<crate::types::SrtCallerDecryption>) -> Self {
        self.decryption = input;
        self
    }
    /// The decryption settings for the SRT caller source. Present only if the source has decryption enabled.
    pub fn get_decryption(&self) -> &::std::option::Option<crate::types::SrtCallerDecryption> {
        &self.decryption
    }
    /// The preferred latency (in milliseconds) for implementing packet loss and recovery. Packet recovery is a key feature of SRT.
    pub fn minimum_latency(mut self, input: i32) -> Self {
        self.minimum_latency = ::std::option::Option::Some(input);
        self
    }
    /// The preferred latency (in milliseconds) for implementing packet loss and recovery. Packet recovery is a key feature of SRT.
    pub fn set_minimum_latency(mut self, input: ::std::option::Option<i32>) -> Self {
        self.minimum_latency = input;
        self
    }
    /// The preferred latency (in milliseconds) for implementing packet loss and recovery. Packet recovery is a key feature of SRT.
    pub fn get_minimum_latency(&self) -> &::std::option::Option<i32> {
        &self.minimum_latency
    }
    /// The IP address at the upstream system (the listener) that MediaLive (the caller) connects to.
    pub fn srt_listener_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.srt_listener_address = ::std::option::Option::Some(input.into());
        self
    }
    /// The IP address at the upstream system (the listener) that MediaLive (the caller) connects to.
    pub fn set_srt_listener_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.srt_listener_address = input;
        self
    }
    /// The IP address at the upstream system (the listener) that MediaLive (the caller) connects to.
    pub fn get_srt_listener_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.srt_listener_address
    }
    /// The port at the upstream system (the listener) that MediaLive (the caller) connects to.
    pub fn srt_listener_port(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.srt_listener_port = ::std::option::Option::Some(input.into());
        self
    }
    /// The port at the upstream system (the listener) that MediaLive (the caller) connects to.
    pub fn set_srt_listener_port(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.srt_listener_port = input;
        self
    }
    /// The port at the upstream system (the listener) that MediaLive (the caller) connects to.
    pub fn get_srt_listener_port(&self) -> &::std::option::Option<::std::string::String> {
        &self.srt_listener_port
    }
    /// The stream ID, if the upstream system uses this identifier.
    pub fn stream_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stream_id = ::std::option::Option::Some(input.into());
        self
    }
    /// The stream ID, if the upstream system uses this identifier.
    pub fn set_stream_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stream_id = input;
        self
    }
    /// The stream ID, if the upstream system uses this identifier.
    pub fn get_stream_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.stream_id
    }
    /// Consumes the builder and constructs a [`SrtCallerSource`](crate::types::SrtCallerSource).
    pub fn build(self) -> crate::types::SrtCallerSource {
        crate::types::SrtCallerSource {
            decryption: self.decryption,
            minimum_latency: self.minimum_latency,
            srt_listener_address: self.srt_listener_address,
            srt_listener_port: self.srt_listener_port,
            stream_id: self.stream_id,
        }
    }
}
