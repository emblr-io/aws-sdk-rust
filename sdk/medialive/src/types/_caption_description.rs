// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Caption Description
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CaptionDescription {
    /// Indicates whether the caption track implements accessibility features such as written descriptions of spoken dialog, music, and sounds. This signaling is added to HLS output group and MediaPackage output group.
    pub accessibility: ::std::option::Option<crate::types::AccessibilityType>,
    /// Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
    pub caption_selector_name: ::std::option::Option<::std::string::String>,
    /// Additional settings for captions destination that depend on the destination type.
    pub destination_settings: ::std::option::Option<crate::types::CaptionDestinationSettings>,
    /// ISO 639-2 three-digit code: http://www.loc.gov/standards/iso639-2/
    pub language_code: ::std::option::Option<::std::string::String>,
    /// Human readable information to indicate captions available for players (eg. English, or Spanish).
    pub language_description: ::std::option::Option<::std::string::String>,
    /// Name of the caption description. Used to associate a caption description with an output. Names must be unique within an event.
    pub name: ::std::option::Option<::std::string::String>,
    /// Identifies the DASH roles to assign to this captions output. Applies only when the captions output is configured for DVB DASH accessibility signaling.
    pub caption_dash_roles: ::std::option::Option<::std::vec::Vec<crate::types::DashRoleCaption>>,
    /// Identifies DVB DASH accessibility signaling in this captions output. Used in Microsoft Smooth Streaming outputs to signal accessibility information to packagers.
    pub dvb_dash_accessibility: ::std::option::Option<crate::types::DvbDashAccessibility>,
}
impl CaptionDescription {
    /// Indicates whether the caption track implements accessibility features such as written descriptions of spoken dialog, music, and sounds. This signaling is added to HLS output group and MediaPackage output group.
    pub fn accessibility(&self) -> ::std::option::Option<&crate::types::AccessibilityType> {
        self.accessibility.as_ref()
    }
    /// Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
    pub fn caption_selector_name(&self) -> ::std::option::Option<&str> {
        self.caption_selector_name.as_deref()
    }
    /// Additional settings for captions destination that depend on the destination type.
    pub fn destination_settings(&self) -> ::std::option::Option<&crate::types::CaptionDestinationSettings> {
        self.destination_settings.as_ref()
    }
    /// ISO 639-2 three-digit code: http://www.loc.gov/standards/iso639-2/
    pub fn language_code(&self) -> ::std::option::Option<&str> {
        self.language_code.as_deref()
    }
    /// Human readable information to indicate captions available for players (eg. English, or Spanish).
    pub fn language_description(&self) -> ::std::option::Option<&str> {
        self.language_description.as_deref()
    }
    /// Name of the caption description. Used to associate a caption description with an output. Names must be unique within an event.
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// Identifies the DASH roles to assign to this captions output. Applies only when the captions output is configured for DVB DASH accessibility signaling.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.caption_dash_roles.is_none()`.
    pub fn caption_dash_roles(&self) -> &[crate::types::DashRoleCaption] {
        self.caption_dash_roles.as_deref().unwrap_or_default()
    }
    /// Identifies DVB DASH accessibility signaling in this captions output. Used in Microsoft Smooth Streaming outputs to signal accessibility information to packagers.
    pub fn dvb_dash_accessibility(&self) -> ::std::option::Option<&crate::types::DvbDashAccessibility> {
        self.dvb_dash_accessibility.as_ref()
    }
}
impl CaptionDescription {
    /// Creates a new builder-style object to manufacture [`CaptionDescription`](crate::types::CaptionDescription).
    pub fn builder() -> crate::types::builders::CaptionDescriptionBuilder {
        crate::types::builders::CaptionDescriptionBuilder::default()
    }
}

/// A builder for [`CaptionDescription`](crate::types::CaptionDescription).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CaptionDescriptionBuilder {
    pub(crate) accessibility: ::std::option::Option<crate::types::AccessibilityType>,
    pub(crate) caption_selector_name: ::std::option::Option<::std::string::String>,
    pub(crate) destination_settings: ::std::option::Option<crate::types::CaptionDestinationSettings>,
    pub(crate) language_code: ::std::option::Option<::std::string::String>,
    pub(crate) language_description: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) caption_dash_roles: ::std::option::Option<::std::vec::Vec<crate::types::DashRoleCaption>>,
    pub(crate) dvb_dash_accessibility: ::std::option::Option<crate::types::DvbDashAccessibility>,
}
impl CaptionDescriptionBuilder {
    /// Indicates whether the caption track implements accessibility features such as written descriptions of spoken dialog, music, and sounds. This signaling is added to HLS output group and MediaPackage output group.
    pub fn accessibility(mut self, input: crate::types::AccessibilityType) -> Self {
        self.accessibility = ::std::option::Option::Some(input);
        self
    }
    /// Indicates whether the caption track implements accessibility features such as written descriptions of spoken dialog, music, and sounds. This signaling is added to HLS output group and MediaPackage output group.
    pub fn set_accessibility(mut self, input: ::std::option::Option<crate::types::AccessibilityType>) -> Self {
        self.accessibility = input;
        self
    }
    /// Indicates whether the caption track implements accessibility features such as written descriptions of spoken dialog, music, and sounds. This signaling is added to HLS output group and MediaPackage output group.
    pub fn get_accessibility(&self) -> &::std::option::Option<crate::types::AccessibilityType> {
        &self.accessibility
    }
    /// Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
    /// This field is required.
    pub fn caption_selector_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.caption_selector_name = ::std::option::Option::Some(input.into());
        self
    }
    /// Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
    pub fn set_caption_selector_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.caption_selector_name = input;
        self
    }
    /// Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
    pub fn get_caption_selector_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.caption_selector_name
    }
    /// Additional settings for captions destination that depend on the destination type.
    pub fn destination_settings(mut self, input: crate::types::CaptionDestinationSettings) -> Self {
        self.destination_settings = ::std::option::Option::Some(input);
        self
    }
    /// Additional settings for captions destination that depend on the destination type.
    pub fn set_destination_settings(mut self, input: ::std::option::Option<crate::types::CaptionDestinationSettings>) -> Self {
        self.destination_settings = input;
        self
    }
    /// Additional settings for captions destination that depend on the destination type.
    pub fn get_destination_settings(&self) -> &::std::option::Option<crate::types::CaptionDestinationSettings> {
        &self.destination_settings
    }
    /// ISO 639-2 three-digit code: http://www.loc.gov/standards/iso639-2/
    pub fn language_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.language_code = ::std::option::Option::Some(input.into());
        self
    }
    /// ISO 639-2 three-digit code: http://www.loc.gov/standards/iso639-2/
    pub fn set_language_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.language_code = input;
        self
    }
    /// ISO 639-2 three-digit code: http://www.loc.gov/standards/iso639-2/
    pub fn get_language_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.language_code
    }
    /// Human readable information to indicate captions available for players (eg. English, or Spanish).
    pub fn language_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.language_description = ::std::option::Option::Some(input.into());
        self
    }
    /// Human readable information to indicate captions available for players (eg. English, or Spanish).
    pub fn set_language_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.language_description = input;
        self
    }
    /// Human readable information to indicate captions available for players (eg. English, or Spanish).
    pub fn get_language_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.language_description
    }
    /// Name of the caption description. Used to associate a caption description with an output. Names must be unique within an event.
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// Name of the caption description. Used to associate a caption description with an output. Names must be unique within an event.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Name of the caption description. Used to associate a caption description with an output. Names must be unique within an event.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `caption_dash_roles`.
    ///
    /// To override the contents of this collection use [`set_caption_dash_roles`](Self::set_caption_dash_roles).
    ///
    /// Identifies the DASH roles to assign to this captions output. Applies only when the captions output is configured for DVB DASH accessibility signaling.
    pub fn caption_dash_roles(mut self, input: crate::types::DashRoleCaption) -> Self {
        let mut v = self.caption_dash_roles.unwrap_or_default();
        v.push(input);
        self.caption_dash_roles = ::std::option::Option::Some(v);
        self
    }
    /// Identifies the DASH roles to assign to this captions output. Applies only when the captions output is configured for DVB DASH accessibility signaling.
    pub fn set_caption_dash_roles(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DashRoleCaption>>) -> Self {
        self.caption_dash_roles = input;
        self
    }
    /// Identifies the DASH roles to assign to this captions output. Applies only when the captions output is configured for DVB DASH accessibility signaling.
    pub fn get_caption_dash_roles(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DashRoleCaption>> {
        &self.caption_dash_roles
    }
    /// Identifies DVB DASH accessibility signaling in this captions output. Used in Microsoft Smooth Streaming outputs to signal accessibility information to packagers.
    pub fn dvb_dash_accessibility(mut self, input: crate::types::DvbDashAccessibility) -> Self {
        self.dvb_dash_accessibility = ::std::option::Option::Some(input);
        self
    }
    /// Identifies DVB DASH accessibility signaling in this captions output. Used in Microsoft Smooth Streaming outputs to signal accessibility information to packagers.
    pub fn set_dvb_dash_accessibility(mut self, input: ::std::option::Option<crate::types::DvbDashAccessibility>) -> Self {
        self.dvb_dash_accessibility = input;
        self
    }
    /// Identifies DVB DASH accessibility signaling in this captions output. Used in Microsoft Smooth Streaming outputs to signal accessibility information to packagers.
    pub fn get_dvb_dash_accessibility(&self) -> &::std::option::Option<crate::types::DvbDashAccessibility> {
        &self.dvb_dash_accessibility
    }
    /// Consumes the builder and constructs a [`CaptionDescription`](crate::types::CaptionDescription).
    pub fn build(self) -> crate::types::CaptionDescription {
        crate::types::CaptionDescription {
            accessibility: self.accessibility,
            caption_selector_name: self.caption_selector_name,
            destination_settings: self.destination_settings,
            language_code: self.language_code,
            language_description: self.language_description,
            name: self.name,
            caption_dash_roles: self.caption_dash_roles,
            dvb_dash_accessibility: self.dvb_dash_accessibility,
        }
    }
}
