// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Used in DescribeNodeSummary, DescribeNodeResult.
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SdiSourceMapping {
    /// A number that uniquely identifies the SDI card on the node hardware.
    pub card_number: ::std::option::Option<i32>,
    /// A number that uniquely identifies a port on the SDI card.
    pub channel_number: ::std::option::Option<i32>,
    /// The ID of the SdiSource to associate with this port on this card. You can use the ListSdiSources operation to discover all the IDs.
    pub sdi_source: ::std::option::Option<::std::string::String>,
}
impl SdiSourceMapping {
    /// A number that uniquely identifies the SDI card on the node hardware.
    pub fn card_number(&self) -> ::std::option::Option<i32> {
        self.card_number
    }
    /// A number that uniquely identifies a port on the SDI card.
    pub fn channel_number(&self) -> ::std::option::Option<i32> {
        self.channel_number
    }
    /// The ID of the SdiSource to associate with this port on this card. You can use the ListSdiSources operation to discover all the IDs.
    pub fn sdi_source(&self) -> ::std::option::Option<&str> {
        self.sdi_source.as_deref()
    }
}
impl SdiSourceMapping {
    /// Creates a new builder-style object to manufacture [`SdiSourceMapping`](crate::types::SdiSourceMapping).
    pub fn builder() -> crate::types::builders::SdiSourceMappingBuilder {
        crate::types::builders::SdiSourceMappingBuilder::default()
    }
}

/// A builder for [`SdiSourceMapping`](crate::types::SdiSourceMapping).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SdiSourceMappingBuilder {
    pub(crate) card_number: ::std::option::Option<i32>,
    pub(crate) channel_number: ::std::option::Option<i32>,
    pub(crate) sdi_source: ::std::option::Option<::std::string::String>,
}
impl SdiSourceMappingBuilder {
    /// A number that uniquely identifies the SDI card on the node hardware.
    pub fn card_number(mut self, input: i32) -> Self {
        self.card_number = ::std::option::Option::Some(input);
        self
    }
    /// A number that uniquely identifies the SDI card on the node hardware.
    pub fn set_card_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.card_number = input;
        self
    }
    /// A number that uniquely identifies the SDI card on the node hardware.
    pub fn get_card_number(&self) -> &::std::option::Option<i32> {
        &self.card_number
    }
    /// A number that uniquely identifies a port on the SDI card.
    pub fn channel_number(mut self, input: i32) -> Self {
        self.channel_number = ::std::option::Option::Some(input);
        self
    }
    /// A number that uniquely identifies a port on the SDI card.
    pub fn set_channel_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.channel_number = input;
        self
    }
    /// A number that uniquely identifies a port on the SDI card.
    pub fn get_channel_number(&self) -> &::std::option::Option<i32> {
        &self.channel_number
    }
    /// The ID of the SdiSource to associate with this port on this card. You can use the ListSdiSources operation to discover all the IDs.
    pub fn sdi_source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sdi_source = ::std::option::Option::Some(input.into());
        self
    }
    /// The ID of the SdiSource to associate with this port on this card. You can use the ListSdiSources operation to discover all the IDs.
    pub fn set_sdi_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sdi_source = input;
        self
    }
    /// The ID of the SdiSource to associate with this port on this card. You can use the ListSdiSources operation to discover all the IDs.
    pub fn get_sdi_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.sdi_source
    }
    /// Consumes the builder and constructs a [`SdiSourceMapping`](crate::types::SdiSourceMapping).
    pub fn build(self) -> crate::types::SdiSourceMapping {
        crate::types::SdiSourceMapping {
            card_number: self.card_number,
            channel_number: self.channel_number,
            sdi_source: self.sdi_source,
        }
    }
}
