// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// DVB Time and Date Table (SDT)
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DvbTdtSettings {
    /// The number of milliseconds between instances of this table in the output transport stream.
    pub rep_interval: ::std::option::Option<i32>,
}
impl DvbTdtSettings {
    /// The number of milliseconds between instances of this table in the output transport stream.
    pub fn rep_interval(&self) -> ::std::option::Option<i32> {
        self.rep_interval
    }
}
impl DvbTdtSettings {
    /// Creates a new builder-style object to manufacture [`DvbTdtSettings`](crate::types::DvbTdtSettings).
    pub fn builder() -> crate::types::builders::DvbTdtSettingsBuilder {
        crate::types::builders::DvbTdtSettingsBuilder::default()
    }
}

/// A builder for [`DvbTdtSettings`](crate::types::DvbTdtSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DvbTdtSettingsBuilder {
    pub(crate) rep_interval: ::std::option::Option<i32>,
}
impl DvbTdtSettingsBuilder {
    /// The number of milliseconds between instances of this table in the output transport stream.
    pub fn rep_interval(mut self, input: i32) -> Self {
        self.rep_interval = ::std::option::Option::Some(input);
        self
    }
    /// The number of milliseconds between instances of this table in the output transport stream.
    pub fn set_rep_interval(mut self, input: ::std::option::Option<i32>) -> Self {
        self.rep_interval = input;
        self
    }
    /// The number of milliseconds between instances of this table in the output transport stream.
    pub fn get_rep_interval(&self) -> &::std::option::Option<i32> {
        &self.rep_interval
    }
    /// Consumes the builder and constructs a [`DvbTdtSettings`](crate::types::DvbTdtSettings).
    pub fn build(self) -> crate::types::DvbTdtSettings {
        crate::types::DvbTdtSettings {
            rep_interval: self.rep_interval,
        }
    }
}
