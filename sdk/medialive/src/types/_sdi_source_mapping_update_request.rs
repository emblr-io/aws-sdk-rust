// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Used in SdiSourceMappingsUpdateRequest. One SDI source mapping. It connects one logical SdiSource to the physical SDI card and port that the physical SDI source uses. You must specify all three parameters in this object.
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SdiSourceMappingUpdateRequest {
    /// A number that uniquely identifies the SDI card on the node hardware. For information about how physical cards are identified on your node hardware, see the documentation for your node hardware. The numbering always starts at 1.
    pub card_number: ::std::option::Option<i32>,
    /// A number that uniquely identifies a port on the card. This must be an SDI port (not a timecode port, for example). For information about how ports are identified on physical cards, see the documentation for your node hardware.
    pub channel_number: ::std::option::Option<i32>,
    /// The ID of a SDI source streaming on the given SDI capture card port.
    pub sdi_source: ::std::option::Option<::std::string::String>,
}
impl SdiSourceMappingUpdateRequest {
    /// A number that uniquely identifies the SDI card on the node hardware. For information about how physical cards are identified on your node hardware, see the documentation for your node hardware. The numbering always starts at 1.
    pub fn card_number(&self) -> ::std::option::Option<i32> {
        self.card_number
    }
    /// A number that uniquely identifies a port on the card. This must be an SDI port (not a timecode port, for example). For information about how ports are identified on physical cards, see the documentation for your node hardware.
    pub fn channel_number(&self) -> ::std::option::Option<i32> {
        self.channel_number
    }
    /// The ID of a SDI source streaming on the given SDI capture card port.
    pub fn sdi_source(&self) -> ::std::option::Option<&str> {
        self.sdi_source.as_deref()
    }
}
impl SdiSourceMappingUpdateRequest {
    /// Creates a new builder-style object to manufacture [`SdiSourceMappingUpdateRequest`](crate::types::SdiSourceMappingUpdateRequest).
    pub fn builder() -> crate::types::builders::SdiSourceMappingUpdateRequestBuilder {
        crate::types::builders::SdiSourceMappingUpdateRequestBuilder::default()
    }
}

/// A builder for [`SdiSourceMappingUpdateRequest`](crate::types::SdiSourceMappingUpdateRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SdiSourceMappingUpdateRequestBuilder {
    pub(crate) card_number: ::std::option::Option<i32>,
    pub(crate) channel_number: ::std::option::Option<i32>,
    pub(crate) sdi_source: ::std::option::Option<::std::string::String>,
}
impl SdiSourceMappingUpdateRequestBuilder {
    /// A number that uniquely identifies the SDI card on the node hardware. For information about how physical cards are identified on your node hardware, see the documentation for your node hardware. The numbering always starts at 1.
    pub fn card_number(mut self, input: i32) -> Self {
        self.card_number = ::std::option::Option::Some(input);
        self
    }
    /// A number that uniquely identifies the SDI card on the node hardware. For information about how physical cards are identified on your node hardware, see the documentation for your node hardware. The numbering always starts at 1.
    pub fn set_card_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.card_number = input;
        self
    }
    /// A number that uniquely identifies the SDI card on the node hardware. For information about how physical cards are identified on your node hardware, see the documentation for your node hardware. The numbering always starts at 1.
    pub fn get_card_number(&self) -> &::std::option::Option<i32> {
        &self.card_number
    }
    /// A number that uniquely identifies a port on the card. This must be an SDI port (not a timecode port, for example). For information about how ports are identified on physical cards, see the documentation for your node hardware.
    pub fn channel_number(mut self, input: i32) -> Self {
        self.channel_number = ::std::option::Option::Some(input);
        self
    }
    /// A number that uniquely identifies a port on the card. This must be an SDI port (not a timecode port, for example). For information about how ports are identified on physical cards, see the documentation for your node hardware.
    pub fn set_channel_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.channel_number = input;
        self
    }
    /// A number that uniquely identifies a port on the card. This must be an SDI port (not a timecode port, for example). For information about how ports are identified on physical cards, see the documentation for your node hardware.
    pub fn get_channel_number(&self) -> &::std::option::Option<i32> {
        &self.channel_number
    }
    /// The ID of a SDI source streaming on the given SDI capture card port.
    pub fn sdi_source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sdi_source = ::std::option::Option::Some(input.into());
        self
    }
    /// The ID of a SDI source streaming on the given SDI capture card port.
    pub fn set_sdi_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sdi_source = input;
        self
    }
    /// The ID of a SDI source streaming on the given SDI capture card port.
    pub fn get_sdi_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.sdi_source
    }
    /// Consumes the builder and constructs a [`SdiSourceMappingUpdateRequest`](crate::types::SdiSourceMappingUpdateRequest).
    pub fn build(self) -> crate::types::SdiSourceMappingUpdateRequest {
        crate::types::SdiSourceMappingUpdateRequest {
            card_number: self.card_number,
            channel_number: self.channel_number,
            sdi_source: self.sdi_source,
        }
    }
}
