// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Used in CreateSdiSourceResponse, DeleteSdiSourceResponse, DescribeSdiSourceResponse, ListSdiSourcesResponse, UpdateSdiSourceResponse
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SdiSource {
    /// The ARN of this SdiSource. It is automatically assigned when the SdiSource is created.
    pub arn: ::std::option::Option<::std::string::String>,
    /// The ID of the SdiSource. Unique in the AWS account.The ID is the resource-id portion of the ARN.
    pub id: ::std::option::Option<::std::string::String>,
    /// The list of inputs that are currently using this SDI source. This list will be empty if the SdiSource has just been deleted.
    pub inputs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// Applies only if the type is QUAD. The mode for handling the quad-link signal QUADRANT or INTERLEAVE.
    pub mode: ::std::option::Option<crate::types::SdiSourceMode>,
    /// The name of the SdiSource.
    pub name: ::std::option::Option<::std::string::String>,
    /// Specifies whether the SDI source is attached to an SDI input (IN_USE) or not (IDLE).
    pub state: ::std::option::Option<crate::types::SdiSourceState>,
    /// Used in SdiSource, CreateSdiSourceRequest, UpdateSdiSourceRequest.
    pub r#type: ::std::option::Option<crate::types::SdiSourceType>,
}
impl SdiSource {
    /// The ARN of this SdiSource. It is automatically assigned when the SdiSource is created.
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// The ID of the SdiSource. Unique in the AWS account.The ID is the resource-id portion of the ARN.
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// The list of inputs that are currently using this SDI source. This list will be empty if the SdiSource has just been deleted.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.inputs.is_none()`.
    pub fn inputs(&self) -> &[::std::string::String] {
        self.inputs.as_deref().unwrap_or_default()
    }
    /// Applies only if the type is QUAD. The mode for handling the quad-link signal QUADRANT or INTERLEAVE.
    pub fn mode(&self) -> ::std::option::Option<&crate::types::SdiSourceMode> {
        self.mode.as_ref()
    }
    /// The name of the SdiSource.
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// Specifies whether the SDI source is attached to an SDI input (IN_USE) or not (IDLE).
    pub fn state(&self) -> ::std::option::Option<&crate::types::SdiSourceState> {
        self.state.as_ref()
    }
    /// Used in SdiSource, CreateSdiSourceRequest, UpdateSdiSourceRequest.
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::SdiSourceType> {
        self.r#type.as_ref()
    }
}
impl SdiSource {
    /// Creates a new builder-style object to manufacture [`SdiSource`](crate::types::SdiSource).
    pub fn builder() -> crate::types::builders::SdiSourceBuilder {
        crate::types::builders::SdiSourceBuilder::default()
    }
}

/// A builder for [`SdiSource`](crate::types::SdiSource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SdiSourceBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) inputs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) mode: ::std::option::Option<crate::types::SdiSourceMode>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::SdiSourceState>,
    pub(crate) r#type: ::std::option::Option<crate::types::SdiSourceType>,
}
impl SdiSourceBuilder {
    /// The ARN of this SdiSource. It is automatically assigned when the SdiSource is created.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The ARN of this SdiSource. It is automatically assigned when the SdiSource is created.
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// The ARN of this SdiSource. It is automatically assigned when the SdiSource is created.
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// The ID of the SdiSource. Unique in the AWS account.The ID is the resource-id portion of the ARN.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// The ID of the SdiSource. Unique in the AWS account.The ID is the resource-id portion of the ARN.
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// The ID of the SdiSource. Unique in the AWS account.The ID is the resource-id portion of the ARN.
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Appends an item to `inputs`.
    ///
    /// To override the contents of this collection use [`set_inputs`](Self::set_inputs).
    ///
    /// The list of inputs that are currently using this SDI source. This list will be empty if the SdiSource has just been deleted.
    pub fn inputs(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.inputs.unwrap_or_default();
        v.push(input.into());
        self.inputs = ::std::option::Option::Some(v);
        self
    }
    /// The list of inputs that are currently using this SDI source. This list will be empty if the SdiSource has just been deleted.
    pub fn set_inputs(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inputs = input;
        self
    }
    /// The list of inputs that are currently using this SDI source. This list will be empty if the SdiSource has just been deleted.
    pub fn get_inputs(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.inputs
    }
    /// Applies only if the type is QUAD. The mode for handling the quad-link signal QUADRANT or INTERLEAVE.
    pub fn mode(mut self, input: crate::types::SdiSourceMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// Applies only if the type is QUAD. The mode for handling the quad-link signal QUADRANT or INTERLEAVE.
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::SdiSourceMode>) -> Self {
        self.mode = input;
        self
    }
    /// Applies only if the type is QUAD. The mode for handling the quad-link signal QUADRANT or INTERLEAVE.
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::SdiSourceMode> {
        &self.mode
    }
    /// The name of the SdiSource.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// The name of the SdiSource.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// The name of the SdiSource.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Specifies whether the SDI source is attached to an SDI input (IN_USE) or not (IDLE).
    pub fn state(mut self, input: crate::types::SdiSourceState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// Specifies whether the SDI source is attached to an SDI input (IN_USE) or not (IDLE).
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::SdiSourceState>) -> Self {
        self.state = input;
        self
    }
    /// Specifies whether the SDI source is attached to an SDI input (IN_USE) or not (IDLE).
    pub fn get_state(&self) -> &::std::option::Option<crate::types::SdiSourceState> {
        &self.state
    }
    /// Used in SdiSource, CreateSdiSourceRequest, UpdateSdiSourceRequest.
    pub fn r#type(mut self, input: crate::types::SdiSourceType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// Used in SdiSource, CreateSdiSourceRequest, UpdateSdiSourceRequest.
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::SdiSourceType>) -> Self {
        self.r#type = input;
        self
    }
    /// Used in SdiSource, CreateSdiSourceRequest, UpdateSdiSourceRequest.
    pub fn get_type(&self) -> &::std::option::Option<crate::types::SdiSourceType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`SdiSource`](crate::types::SdiSource).
    pub fn build(self) -> crate::types::SdiSource {
        crate::types::SdiSource {
            arn: self.arn,
            id: self.id,
            inputs: self.inputs,
            mode: self.mode,
            name: self.name,
            state: self.state,
            r#type: self.r#type,
        }
    }
}
