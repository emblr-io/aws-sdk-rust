// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Placeholder documentation for StartMonitorDeploymentResponse
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartMonitorDeploymentOutput {
    /// A signal map's ARN (Amazon Resource Name)
    pub arn: ::std::option::Option<::std::string::String>,
    /// Placeholder documentation for __listOf__stringMin7Max11PatternAws097
    pub cloud_watch_alarm_template_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// Placeholder documentation for __timestampIso8601
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// A resource's optional description.
    pub description: ::std::option::Option<::std::string::String>,
    /// A top-level supported AWS resource ARN to discovery a signal map from.
    pub discovery_entry_point_arn: ::std::option::Option<::std::string::String>,
    /// Error message associated with a failed creation or failed update attempt of a signal map.
    pub error_message: ::std::option::Option<::std::string::String>,
    /// Placeholder documentation for __listOf__stringMin7Max11PatternAws097
    pub event_bridge_rule_template_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// A map representing an incomplete AWS media workflow as a graph.
    pub failed_media_resource_map: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::MediaResource>>,
    /// A signal map's id.
    pub id: ::std::option::Option<::std::string::String>,
    /// Placeholder documentation for __timestampIso8601
    pub last_discovered_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// Represents the latest successful monitor deployment of a signal map.
    pub last_successful_monitor_deployment: ::std::option::Option<crate::types::SuccessfulMonitorDeployment>,
    /// A map representing an AWS media workflow as a graph.
    pub media_resource_map: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::MediaResource>>,
    /// Placeholder documentation for __timestampIso8601
    pub modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// If true, there are pending monitor changes for this signal map that can be deployed.
    pub monitor_changes_pending_deployment: ::std::option::Option<bool>,
    /// Represents the latest monitor deployment of a signal map.
    pub monitor_deployment: ::std::option::Option<crate::types::MonitorDeployment>,
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    pub name: ::std::option::Option<::std::string::String>,
    /// A signal map's current status which is dependent on its lifecycle actions or associated jobs.
    pub status: ::std::option::Option<crate::types::SignalMapStatus>,
    /// Represents the tags associated with a resource.
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl StartMonitorDeploymentOutput {
    /// A signal map's ARN (Amazon Resource Name)
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// Placeholder documentation for __listOf__stringMin7Max11PatternAws097
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cloud_watch_alarm_template_group_ids.is_none()`.
    pub fn cloud_watch_alarm_template_group_ids(&self) -> &[::std::string::String] {
        self.cloud_watch_alarm_template_group_ids.as_deref().unwrap_or_default()
    }
    /// Placeholder documentation for __timestampIso8601
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// A resource's optional description.
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// A top-level supported AWS resource ARN to discovery a signal map from.
    pub fn discovery_entry_point_arn(&self) -> ::std::option::Option<&str> {
        self.discovery_entry_point_arn.as_deref()
    }
    /// Error message associated with a failed creation or failed update attempt of a signal map.
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// Placeholder documentation for __listOf__stringMin7Max11PatternAws097
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.event_bridge_rule_template_group_ids.is_none()`.
    pub fn event_bridge_rule_template_group_ids(&self) -> &[::std::string::String] {
        self.event_bridge_rule_template_group_ids.as_deref().unwrap_or_default()
    }
    /// A map representing an incomplete AWS media workflow as a graph.
    pub fn failed_media_resource_map(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::MediaResource>> {
        self.failed_media_resource_map.as_ref()
    }
    /// A signal map's id.
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// Placeholder documentation for __timestampIso8601
    pub fn last_discovered_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_discovered_at.as_ref()
    }
    /// Represents the latest successful monitor deployment of a signal map.
    pub fn last_successful_monitor_deployment(&self) -> ::std::option::Option<&crate::types::SuccessfulMonitorDeployment> {
        self.last_successful_monitor_deployment.as_ref()
    }
    /// A map representing an AWS media workflow as a graph.
    pub fn media_resource_map(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::MediaResource>> {
        self.media_resource_map.as_ref()
    }
    /// Placeholder documentation for __timestampIso8601
    pub fn modified_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.modified_at.as_ref()
    }
    /// If true, there are pending monitor changes for this signal map that can be deployed.
    pub fn monitor_changes_pending_deployment(&self) -> ::std::option::Option<bool> {
        self.monitor_changes_pending_deployment
    }
    /// Represents the latest monitor deployment of a signal map.
    pub fn monitor_deployment(&self) -> ::std::option::Option<&crate::types::MonitorDeployment> {
        self.monitor_deployment.as_ref()
    }
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// A signal map's current status which is dependent on its lifecycle actions or associated jobs.
    pub fn status(&self) -> ::std::option::Option<&crate::types::SignalMapStatus> {
        self.status.as_ref()
    }
    /// Represents the tags associated with a resource.
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for StartMonitorDeploymentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartMonitorDeploymentOutput {
    /// Creates a new builder-style object to manufacture [`StartMonitorDeploymentOutput`](crate::operation::start_monitor_deployment::StartMonitorDeploymentOutput).
    pub fn builder() -> crate::operation::start_monitor_deployment::builders::StartMonitorDeploymentOutputBuilder {
        crate::operation::start_monitor_deployment::builders::StartMonitorDeploymentOutputBuilder::default()
    }
}

/// A builder for [`StartMonitorDeploymentOutput`](crate::operation::start_monitor_deployment::StartMonitorDeploymentOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartMonitorDeploymentOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) cloud_watch_alarm_template_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) discovery_entry_point_arn: ::std::option::Option<::std::string::String>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
    pub(crate) event_bridge_rule_template_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) failed_media_resource_map: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::MediaResource>>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) last_discovered_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_successful_monitor_deployment: ::std::option::Option<crate::types::SuccessfulMonitorDeployment>,
    pub(crate) media_resource_map: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::MediaResource>>,
    pub(crate) modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) monitor_changes_pending_deployment: ::std::option::Option<bool>,
    pub(crate) monitor_deployment: ::std::option::Option<crate::types::MonitorDeployment>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::SignalMapStatus>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl StartMonitorDeploymentOutputBuilder {
    /// A signal map's ARN (Amazon Resource Name)
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// A signal map's ARN (Amazon Resource Name)
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// A signal map's ARN (Amazon Resource Name)
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Appends an item to `cloud_watch_alarm_template_group_ids`.
    ///
    /// To override the contents of this collection use [`set_cloud_watch_alarm_template_group_ids`](Self::set_cloud_watch_alarm_template_group_ids).
    ///
    /// Placeholder documentation for __listOf__stringMin7Max11PatternAws097
    pub fn cloud_watch_alarm_template_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.cloud_watch_alarm_template_group_ids.unwrap_or_default();
        v.push(input.into());
        self.cloud_watch_alarm_template_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// Placeholder documentation for __listOf__stringMin7Max11PatternAws097
    pub fn set_cloud_watch_alarm_template_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.cloud_watch_alarm_template_group_ids = input;
        self
    }
    /// Placeholder documentation for __listOf__stringMin7Max11PatternAws097
    pub fn get_cloud_watch_alarm_template_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.cloud_watch_alarm_template_group_ids
    }
    /// Placeholder documentation for __timestampIso8601
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// Placeholder documentation for __timestampIso8601
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// Placeholder documentation for __timestampIso8601
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// A resource's optional description.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// A resource's optional description.
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// A resource's optional description.
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// A top-level supported AWS resource ARN to discovery a signal map from.
    pub fn discovery_entry_point_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.discovery_entry_point_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// A top-level supported AWS resource ARN to discovery a signal map from.
    pub fn set_discovery_entry_point_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.discovery_entry_point_arn = input;
        self
    }
    /// A top-level supported AWS resource ARN to discovery a signal map from.
    pub fn get_discovery_entry_point_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.discovery_entry_point_arn
    }
    /// Error message associated with a failed creation or failed update attempt of a signal map.
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// Error message associated with a failed creation or failed update attempt of a signal map.
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// Error message associated with a failed creation or failed update attempt of a signal map.
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// Appends an item to `event_bridge_rule_template_group_ids`.
    ///
    /// To override the contents of this collection use [`set_event_bridge_rule_template_group_ids`](Self::set_event_bridge_rule_template_group_ids).
    ///
    /// Placeholder documentation for __listOf__stringMin7Max11PatternAws097
    pub fn event_bridge_rule_template_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.event_bridge_rule_template_group_ids.unwrap_or_default();
        v.push(input.into());
        self.event_bridge_rule_template_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// Placeholder documentation for __listOf__stringMin7Max11PatternAws097
    pub fn set_event_bridge_rule_template_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.event_bridge_rule_template_group_ids = input;
        self
    }
    /// Placeholder documentation for __listOf__stringMin7Max11PatternAws097
    pub fn get_event_bridge_rule_template_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.event_bridge_rule_template_group_ids
    }
    /// Adds a key-value pair to `failed_media_resource_map`.
    ///
    /// To override the contents of this collection use [`set_failed_media_resource_map`](Self::set_failed_media_resource_map).
    ///
    /// A map representing an incomplete AWS media workflow as a graph.
    pub fn failed_media_resource_map(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::MediaResource) -> Self {
        let mut hash_map = self.failed_media_resource_map.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.failed_media_resource_map = ::std::option::Option::Some(hash_map);
        self
    }
    /// A map representing an incomplete AWS media workflow as a graph.
    pub fn set_failed_media_resource_map(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::MediaResource>>,
    ) -> Self {
        self.failed_media_resource_map = input;
        self
    }
    /// A map representing an incomplete AWS media workflow as a graph.
    pub fn get_failed_media_resource_map(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::MediaResource>> {
        &self.failed_media_resource_map
    }
    /// A signal map's id.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// A signal map's id.
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// A signal map's id.
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Placeholder documentation for __timestampIso8601
    pub fn last_discovered_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_discovered_at = ::std::option::Option::Some(input);
        self
    }
    /// Placeholder documentation for __timestampIso8601
    pub fn set_last_discovered_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_discovered_at = input;
        self
    }
    /// Placeholder documentation for __timestampIso8601
    pub fn get_last_discovered_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_discovered_at
    }
    /// Represents the latest successful monitor deployment of a signal map.
    pub fn last_successful_monitor_deployment(mut self, input: crate::types::SuccessfulMonitorDeployment) -> Self {
        self.last_successful_monitor_deployment = ::std::option::Option::Some(input);
        self
    }
    /// Represents the latest successful monitor deployment of a signal map.
    pub fn set_last_successful_monitor_deployment(mut self, input: ::std::option::Option<crate::types::SuccessfulMonitorDeployment>) -> Self {
        self.last_successful_monitor_deployment = input;
        self
    }
    /// Represents the latest successful monitor deployment of a signal map.
    pub fn get_last_successful_monitor_deployment(&self) -> &::std::option::Option<crate::types::SuccessfulMonitorDeployment> {
        &self.last_successful_monitor_deployment
    }
    /// Adds a key-value pair to `media_resource_map`.
    ///
    /// To override the contents of this collection use [`set_media_resource_map`](Self::set_media_resource_map).
    ///
    /// A map representing an AWS media workflow as a graph.
    pub fn media_resource_map(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::MediaResource) -> Self {
        let mut hash_map = self.media_resource_map.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.media_resource_map = ::std::option::Option::Some(hash_map);
        self
    }
    /// A map representing an AWS media workflow as a graph.
    pub fn set_media_resource_map(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::MediaResource>>,
    ) -> Self {
        self.media_resource_map = input;
        self
    }
    /// A map representing an AWS media workflow as a graph.
    pub fn get_media_resource_map(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::MediaResource>> {
        &self.media_resource_map
    }
    /// Placeholder documentation for __timestampIso8601
    pub fn modified_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modified_at = ::std::option::Option::Some(input);
        self
    }
    /// Placeholder documentation for __timestampIso8601
    pub fn set_modified_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modified_at = input;
        self
    }
    /// Placeholder documentation for __timestampIso8601
    pub fn get_modified_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modified_at
    }
    /// If true, there are pending monitor changes for this signal map that can be deployed.
    pub fn monitor_changes_pending_deployment(mut self, input: bool) -> Self {
        self.monitor_changes_pending_deployment = ::std::option::Option::Some(input);
        self
    }
    /// If true, there are pending monitor changes for this signal map that can be deployed.
    pub fn set_monitor_changes_pending_deployment(mut self, input: ::std::option::Option<bool>) -> Self {
        self.monitor_changes_pending_deployment = input;
        self
    }
    /// If true, there are pending monitor changes for this signal map that can be deployed.
    pub fn get_monitor_changes_pending_deployment(&self) -> &::std::option::Option<bool> {
        &self.monitor_changes_pending_deployment
    }
    /// Represents the latest monitor deployment of a signal map.
    pub fn monitor_deployment(mut self, input: crate::types::MonitorDeployment) -> Self {
        self.monitor_deployment = ::std::option::Option::Some(input);
        self
    }
    /// Represents the latest monitor deployment of a signal map.
    pub fn set_monitor_deployment(mut self, input: ::std::option::Option<crate::types::MonitorDeployment>) -> Self {
        self.monitor_deployment = input;
        self
    }
    /// Represents the latest monitor deployment of a signal map.
    pub fn get_monitor_deployment(&self) -> &::std::option::Option<crate::types::MonitorDeployment> {
        &self.monitor_deployment
    }
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// A signal map's current status which is dependent on its lifecycle actions or associated jobs.
    pub fn status(mut self, input: crate::types::SignalMapStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// A signal map's current status which is dependent on its lifecycle actions or associated jobs.
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SignalMapStatus>) -> Self {
        self.status = input;
        self
    }
    /// A signal map's current status which is dependent on its lifecycle actions or associated jobs.
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SignalMapStatus> {
        &self.status
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// Represents the tags associated with a resource.
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// Represents the tags associated with a resource.
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// Represents the tags associated with a resource.
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartMonitorDeploymentOutput`](crate::operation::start_monitor_deployment::StartMonitorDeploymentOutput).
    pub fn build(self) -> crate::operation::start_monitor_deployment::StartMonitorDeploymentOutput {
        crate::operation::start_monitor_deployment::StartMonitorDeploymentOutput {
            arn: self.arn,
            cloud_watch_alarm_template_group_ids: self.cloud_watch_alarm_template_group_ids,
            created_at: self.created_at,
            description: self.description,
            discovery_entry_point_arn: self.discovery_entry_point_arn,
            error_message: self.error_message,
            event_bridge_rule_template_group_ids: self.event_bridge_rule_template_group_ids,
            failed_media_resource_map: self.failed_media_resource_map,
            id: self.id,
            last_discovered_at: self.last_discovered_at,
            last_successful_monitor_deployment: self.last_successful_monitor_deployment,
            media_resource_map: self.media_resource_map,
            modified_at: self.modified_at,
            monitor_changes_pending_deployment: self.monitor_changes_pending_deployment,
            monitor_deployment: self.monitor_deployment,
            name: self.name,
            status: self.status,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
