// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Placeholder documentation for ListSignalMapsRequest
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListSignalMapsInput {
    /// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
    pub cloud_watch_alarm_template_group_identifier: ::std::option::Option<::std::string::String>,
    /// An eventbridge rule template group's identifier. Can be either be its id or current name.
    pub event_bridge_rule_template_group_identifier: ::std::option::Option<::std::string::String>,
    /// Placeholder documentation for MaxResults
    pub max_results: ::std::option::Option<i32>,
    /// A token used to retrieve the next set of results in paginated list responses.
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListSignalMapsInput {
    /// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
    pub fn cloud_watch_alarm_template_group_identifier(&self) -> ::std::option::Option<&str> {
        self.cloud_watch_alarm_template_group_identifier.as_deref()
    }
    /// An eventbridge rule template group's identifier. Can be either be its id or current name.
    pub fn event_bridge_rule_template_group_identifier(&self) -> ::std::option::Option<&str> {
        self.event_bridge_rule_template_group_identifier.as_deref()
    }
    /// Placeholder documentation for MaxResults
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// A token used to retrieve the next set of results in paginated list responses.
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListSignalMapsInput {
    /// Creates a new builder-style object to manufacture [`ListSignalMapsInput`](crate::operation::list_signal_maps::ListSignalMapsInput).
    pub fn builder() -> crate::operation::list_signal_maps::builders::ListSignalMapsInputBuilder {
        crate::operation::list_signal_maps::builders::ListSignalMapsInputBuilder::default()
    }
}

/// A builder for [`ListSignalMapsInput`](crate::operation::list_signal_maps::ListSignalMapsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListSignalMapsInputBuilder {
    pub(crate) cloud_watch_alarm_template_group_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) event_bridge_rule_template_group_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListSignalMapsInputBuilder {
    /// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
    pub fn cloud_watch_alarm_template_group_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloud_watch_alarm_template_group_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
    pub fn set_cloud_watch_alarm_template_group_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloud_watch_alarm_template_group_identifier = input;
        self
    }
    /// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
    pub fn get_cloud_watch_alarm_template_group_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloud_watch_alarm_template_group_identifier
    }
    /// An eventbridge rule template group's identifier. Can be either be its id or current name.
    pub fn event_bridge_rule_template_group_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_bridge_rule_template_group_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// An eventbridge rule template group's identifier. Can be either be its id or current name.
    pub fn set_event_bridge_rule_template_group_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_bridge_rule_template_group_identifier = input;
        self
    }
    /// An eventbridge rule template group's identifier. Can be either be its id or current name.
    pub fn get_event_bridge_rule_template_group_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_bridge_rule_template_group_identifier
    }
    /// Placeholder documentation for MaxResults
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// Placeholder documentation for MaxResults
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Placeholder documentation for MaxResults
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// A token used to retrieve the next set of results in paginated list responses.
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// A token used to retrieve the next set of results in paginated list responses.
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// A token used to retrieve the next set of results in paginated list responses.
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListSignalMapsInput`](crate::operation::list_signal_maps::ListSignalMapsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_signal_maps::ListSignalMapsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_signal_maps::ListSignalMapsInput {
            cloud_watch_alarm_template_group_identifier: self.cloud_watch_alarm_template_group_identifier,
            event_bridge_rule_template_group_identifier: self.event_bridge_rule_template_group_identifier,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
