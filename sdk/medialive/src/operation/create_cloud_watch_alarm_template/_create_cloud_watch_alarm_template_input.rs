// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Placeholder documentation for CreateCloudWatchAlarmTemplateRequest
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateCloudWatchAlarmTemplateInput {
    /// The comparison operator used to compare the specified statistic and the threshold.
    pub comparison_operator: ::std::option::Option<crate::types::CloudWatchAlarmTemplateComparisonOperator>,
    /// The number of datapoints within the evaluation period that must be breaching to trigger the alarm.
    pub datapoints_to_alarm: ::std::option::Option<i32>,
    /// A resource's optional description.
    pub description: ::std::option::Option<::std::string::String>,
    /// The number of periods over which data is compared to the specified threshold.
    pub evaluation_periods: ::std::option::Option<i32>,
    /// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
    pub group_identifier: ::std::option::Option<::std::string::String>,
    /// The name of the metric associated with the alarm. Must be compatible with targetResourceType.
    pub metric_name: ::std::option::Option<::std::string::String>,
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    pub name: ::std::option::Option<::std::string::String>,
    /// The period, in seconds, over which the specified statistic is applied.
    pub period: ::std::option::Option<i32>,
    /// The statistic to apply to the alarm's metric data.
    pub statistic: ::std::option::Option<crate::types::CloudWatchAlarmTemplateStatistic>,
    /// Represents the tags associated with a resource.
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// The resource type this template should dynamically generate cloudwatch metric alarms for.
    pub target_resource_type: ::std::option::Option<crate::types::CloudWatchAlarmTemplateTargetResourceType>,
    /// The threshold value to compare with the specified statistic.
    pub threshold: ::std::option::Option<f64>,
    /// Specifies how missing data points are treated when evaluating the alarm's condition.
    pub treat_missing_data: ::std::option::Option<crate::types::CloudWatchAlarmTemplateTreatMissingData>,
    /// An ID that you assign to a create request. This ID ensures idempotency when creating resources.
    pub request_id: ::std::option::Option<::std::string::String>,
}
impl CreateCloudWatchAlarmTemplateInput {
    /// The comparison operator used to compare the specified statistic and the threshold.
    pub fn comparison_operator(&self) -> ::std::option::Option<&crate::types::CloudWatchAlarmTemplateComparisonOperator> {
        self.comparison_operator.as_ref()
    }
    /// The number of datapoints within the evaluation period that must be breaching to trigger the alarm.
    pub fn datapoints_to_alarm(&self) -> ::std::option::Option<i32> {
        self.datapoints_to_alarm
    }
    /// A resource's optional description.
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// The number of periods over which data is compared to the specified threshold.
    pub fn evaluation_periods(&self) -> ::std::option::Option<i32> {
        self.evaluation_periods
    }
    /// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
    pub fn group_identifier(&self) -> ::std::option::Option<&str> {
        self.group_identifier.as_deref()
    }
    /// The name of the metric associated with the alarm. Must be compatible with targetResourceType.
    pub fn metric_name(&self) -> ::std::option::Option<&str> {
        self.metric_name.as_deref()
    }
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// The period, in seconds, over which the specified statistic is applied.
    pub fn period(&self) -> ::std::option::Option<i32> {
        self.period
    }
    /// The statistic to apply to the alarm's metric data.
    pub fn statistic(&self) -> ::std::option::Option<&crate::types::CloudWatchAlarmTemplateStatistic> {
        self.statistic.as_ref()
    }
    /// Represents the tags associated with a resource.
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// The resource type this template should dynamically generate cloudwatch metric alarms for.
    pub fn target_resource_type(&self) -> ::std::option::Option<&crate::types::CloudWatchAlarmTemplateTargetResourceType> {
        self.target_resource_type.as_ref()
    }
    /// The threshold value to compare with the specified statistic.
    pub fn threshold(&self) -> ::std::option::Option<f64> {
        self.threshold
    }
    /// Specifies how missing data points are treated when evaluating the alarm's condition.
    pub fn treat_missing_data(&self) -> ::std::option::Option<&crate::types::CloudWatchAlarmTemplateTreatMissingData> {
        self.treat_missing_data.as_ref()
    }
    /// An ID that you assign to a create request. This ID ensures idempotency when creating resources.
    pub fn request_id(&self) -> ::std::option::Option<&str> {
        self.request_id.as_deref()
    }
}
impl CreateCloudWatchAlarmTemplateInput {
    /// Creates a new builder-style object to manufacture [`CreateCloudWatchAlarmTemplateInput`](crate::operation::create_cloud_watch_alarm_template::CreateCloudWatchAlarmTemplateInput).
    pub fn builder() -> crate::operation::create_cloud_watch_alarm_template::builders::CreateCloudWatchAlarmTemplateInputBuilder {
        crate::operation::create_cloud_watch_alarm_template::builders::CreateCloudWatchAlarmTemplateInputBuilder::default()
    }
}

/// A builder for [`CreateCloudWatchAlarmTemplateInput`](crate::operation::create_cloud_watch_alarm_template::CreateCloudWatchAlarmTemplateInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateCloudWatchAlarmTemplateInputBuilder {
    pub(crate) comparison_operator: ::std::option::Option<crate::types::CloudWatchAlarmTemplateComparisonOperator>,
    pub(crate) datapoints_to_alarm: ::std::option::Option<i32>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) evaluation_periods: ::std::option::Option<i32>,
    pub(crate) group_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) metric_name: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) period: ::std::option::Option<i32>,
    pub(crate) statistic: ::std::option::Option<crate::types::CloudWatchAlarmTemplateStatistic>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) target_resource_type: ::std::option::Option<crate::types::CloudWatchAlarmTemplateTargetResourceType>,
    pub(crate) threshold: ::std::option::Option<f64>,
    pub(crate) treat_missing_data: ::std::option::Option<crate::types::CloudWatchAlarmTemplateTreatMissingData>,
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
}
impl CreateCloudWatchAlarmTemplateInputBuilder {
    /// The comparison operator used to compare the specified statistic and the threshold.
    /// This field is required.
    pub fn comparison_operator(mut self, input: crate::types::CloudWatchAlarmTemplateComparisonOperator) -> Self {
        self.comparison_operator = ::std::option::Option::Some(input);
        self
    }
    /// The comparison operator used to compare the specified statistic and the threshold.
    pub fn set_comparison_operator(mut self, input: ::std::option::Option<crate::types::CloudWatchAlarmTemplateComparisonOperator>) -> Self {
        self.comparison_operator = input;
        self
    }
    /// The comparison operator used to compare the specified statistic and the threshold.
    pub fn get_comparison_operator(&self) -> &::std::option::Option<crate::types::CloudWatchAlarmTemplateComparisonOperator> {
        &self.comparison_operator
    }
    /// The number of datapoints within the evaluation period that must be breaching to trigger the alarm.
    pub fn datapoints_to_alarm(mut self, input: i32) -> Self {
        self.datapoints_to_alarm = ::std::option::Option::Some(input);
        self
    }
    /// The number of datapoints within the evaluation period that must be breaching to trigger the alarm.
    pub fn set_datapoints_to_alarm(mut self, input: ::std::option::Option<i32>) -> Self {
        self.datapoints_to_alarm = input;
        self
    }
    /// The number of datapoints within the evaluation period that must be breaching to trigger the alarm.
    pub fn get_datapoints_to_alarm(&self) -> &::std::option::Option<i32> {
        &self.datapoints_to_alarm
    }
    /// A resource's optional description.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// A resource's optional description.
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// A resource's optional description.
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// The number of periods over which data is compared to the specified threshold.
    /// This field is required.
    pub fn evaluation_periods(mut self, input: i32) -> Self {
        self.evaluation_periods = ::std::option::Option::Some(input);
        self
    }
    /// The number of periods over which data is compared to the specified threshold.
    pub fn set_evaluation_periods(mut self, input: ::std::option::Option<i32>) -> Self {
        self.evaluation_periods = input;
        self
    }
    /// The number of periods over which data is compared to the specified threshold.
    pub fn get_evaluation_periods(&self) -> &::std::option::Option<i32> {
        &self.evaluation_periods
    }
    /// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
    /// This field is required.
    pub fn group_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
    pub fn set_group_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_identifier = input;
        self
    }
    /// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
    pub fn get_group_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_identifier
    }
    /// The name of the metric associated with the alarm. Must be compatible with targetResourceType.
    /// This field is required.
    pub fn metric_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metric_name = ::std::option::Option::Some(input.into());
        self
    }
    /// The name of the metric associated with the alarm. Must be compatible with targetResourceType.
    pub fn set_metric_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metric_name = input;
        self
    }
    /// The name of the metric associated with the alarm. Must be compatible with targetResourceType.
    pub fn get_metric_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.metric_name
    }
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// The period, in seconds, over which the specified statistic is applied.
    /// This field is required.
    pub fn period(mut self, input: i32) -> Self {
        self.period = ::std::option::Option::Some(input);
        self
    }
    /// The period, in seconds, over which the specified statistic is applied.
    pub fn set_period(mut self, input: ::std::option::Option<i32>) -> Self {
        self.period = input;
        self
    }
    /// The period, in seconds, over which the specified statistic is applied.
    pub fn get_period(&self) -> &::std::option::Option<i32> {
        &self.period
    }
    /// The statistic to apply to the alarm's metric data.
    /// This field is required.
    pub fn statistic(mut self, input: crate::types::CloudWatchAlarmTemplateStatistic) -> Self {
        self.statistic = ::std::option::Option::Some(input);
        self
    }
    /// The statistic to apply to the alarm's metric data.
    pub fn set_statistic(mut self, input: ::std::option::Option<crate::types::CloudWatchAlarmTemplateStatistic>) -> Self {
        self.statistic = input;
        self
    }
    /// The statistic to apply to the alarm's metric data.
    pub fn get_statistic(&self) -> &::std::option::Option<crate::types::CloudWatchAlarmTemplateStatistic> {
        &self.statistic
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// Represents the tags associated with a resource.
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// Represents the tags associated with a resource.
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// Represents the tags associated with a resource.
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// The resource type this template should dynamically generate cloudwatch metric alarms for.
    /// This field is required.
    pub fn target_resource_type(mut self, input: crate::types::CloudWatchAlarmTemplateTargetResourceType) -> Self {
        self.target_resource_type = ::std::option::Option::Some(input);
        self
    }
    /// The resource type this template should dynamically generate cloudwatch metric alarms for.
    pub fn set_target_resource_type(mut self, input: ::std::option::Option<crate::types::CloudWatchAlarmTemplateTargetResourceType>) -> Self {
        self.target_resource_type = input;
        self
    }
    /// The resource type this template should dynamically generate cloudwatch metric alarms for.
    pub fn get_target_resource_type(&self) -> &::std::option::Option<crate::types::CloudWatchAlarmTemplateTargetResourceType> {
        &self.target_resource_type
    }
    /// The threshold value to compare with the specified statistic.
    /// This field is required.
    pub fn threshold(mut self, input: f64) -> Self {
        self.threshold = ::std::option::Option::Some(input);
        self
    }
    /// The threshold value to compare with the specified statistic.
    pub fn set_threshold(mut self, input: ::std::option::Option<f64>) -> Self {
        self.threshold = input;
        self
    }
    /// The threshold value to compare with the specified statistic.
    pub fn get_threshold(&self) -> &::std::option::Option<f64> {
        &self.threshold
    }
    /// Specifies how missing data points are treated when evaluating the alarm's condition.
    /// This field is required.
    pub fn treat_missing_data(mut self, input: crate::types::CloudWatchAlarmTemplateTreatMissingData) -> Self {
        self.treat_missing_data = ::std::option::Option::Some(input);
        self
    }
    /// Specifies how missing data points are treated when evaluating the alarm's condition.
    pub fn set_treat_missing_data(mut self, input: ::std::option::Option<crate::types::CloudWatchAlarmTemplateTreatMissingData>) -> Self {
        self.treat_missing_data = input;
        self
    }
    /// Specifies how missing data points are treated when evaluating the alarm's condition.
    pub fn get_treat_missing_data(&self) -> &::std::option::Option<crate::types::CloudWatchAlarmTemplateTreatMissingData> {
        &self.treat_missing_data
    }
    /// An ID that you assign to a create request. This ID ensures idempotency when creating resources.
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// An ID that you assign to a create request. This ID ensures idempotency when creating resources.
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// An ID that you assign to a create request. This ID ensures idempotency when creating resources.
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    /// Consumes the builder and constructs a [`CreateCloudWatchAlarmTemplateInput`](crate::operation::create_cloud_watch_alarm_template::CreateCloudWatchAlarmTemplateInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_cloud_watch_alarm_template::CreateCloudWatchAlarmTemplateInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_cloud_watch_alarm_template::CreateCloudWatchAlarmTemplateInput {
            comparison_operator: self.comparison_operator,
            datapoints_to_alarm: self.datapoints_to_alarm,
            description: self.description,
            evaluation_periods: self.evaluation_periods,
            group_identifier: self.group_identifier,
            metric_name: self.metric_name,
            name: self.name,
            period: self.period,
            statistic: self.statistic,
            tags: self.tags,
            target_resource_type: self.target_resource_type,
            threshold: self.threshold,
            treat_missing_data: self.treat_missing_data,
            request_id: self.request_id,
        })
    }
}
