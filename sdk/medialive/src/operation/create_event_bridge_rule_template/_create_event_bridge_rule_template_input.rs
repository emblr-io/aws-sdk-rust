// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Placeholder documentation for CreateEventBridgeRuleTemplateRequest
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateEventBridgeRuleTemplateInput {
    /// A resource's optional description.
    pub description: ::std::option::Option<::std::string::String>,
    /// Placeholder documentation for __listOfEventBridgeRuleTemplateTarget
    pub event_targets: ::std::option::Option<::std::vec::Vec<crate::types::EventBridgeRuleTemplateTarget>>,
    /// The type of event to match with the rule.
    pub event_type: ::std::option::Option<crate::types::EventBridgeRuleTemplateEventType>,
    /// An eventbridge rule template group's identifier. Can be either be its id or current name.
    pub group_identifier: ::std::option::Option<::std::string::String>,
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    pub name: ::std::option::Option<::std::string::String>,
    /// Represents the tags associated with a resource.
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// An ID that you assign to a create request. This ID ensures idempotency when creating resources.
    pub request_id: ::std::option::Option<::std::string::String>,
}
impl CreateEventBridgeRuleTemplateInput {
    /// A resource's optional description.
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// Placeholder documentation for __listOfEventBridgeRuleTemplateTarget
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.event_targets.is_none()`.
    pub fn event_targets(&self) -> &[crate::types::EventBridgeRuleTemplateTarget] {
        self.event_targets.as_deref().unwrap_or_default()
    }
    /// The type of event to match with the rule.
    pub fn event_type(&self) -> ::std::option::Option<&crate::types::EventBridgeRuleTemplateEventType> {
        self.event_type.as_ref()
    }
    /// An eventbridge rule template group's identifier. Can be either be its id or current name.
    pub fn group_identifier(&self) -> ::std::option::Option<&str> {
        self.group_identifier.as_deref()
    }
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// Represents the tags associated with a resource.
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// An ID that you assign to a create request. This ID ensures idempotency when creating resources.
    pub fn request_id(&self) -> ::std::option::Option<&str> {
        self.request_id.as_deref()
    }
}
impl CreateEventBridgeRuleTemplateInput {
    /// Creates a new builder-style object to manufacture [`CreateEventBridgeRuleTemplateInput`](crate::operation::create_event_bridge_rule_template::CreateEventBridgeRuleTemplateInput).
    pub fn builder() -> crate::operation::create_event_bridge_rule_template::builders::CreateEventBridgeRuleTemplateInputBuilder {
        crate::operation::create_event_bridge_rule_template::builders::CreateEventBridgeRuleTemplateInputBuilder::default()
    }
}

/// A builder for [`CreateEventBridgeRuleTemplateInput`](crate::operation::create_event_bridge_rule_template::CreateEventBridgeRuleTemplateInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateEventBridgeRuleTemplateInputBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) event_targets: ::std::option::Option<::std::vec::Vec<crate::types::EventBridgeRuleTemplateTarget>>,
    pub(crate) event_type: ::std::option::Option<crate::types::EventBridgeRuleTemplateEventType>,
    pub(crate) group_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
}
impl CreateEventBridgeRuleTemplateInputBuilder {
    /// A resource's optional description.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// A resource's optional description.
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// A resource's optional description.
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `event_targets`.
    ///
    /// To override the contents of this collection use [`set_event_targets`](Self::set_event_targets).
    ///
    /// Placeholder documentation for __listOfEventBridgeRuleTemplateTarget
    pub fn event_targets(mut self, input: crate::types::EventBridgeRuleTemplateTarget) -> Self {
        let mut v = self.event_targets.unwrap_or_default();
        v.push(input);
        self.event_targets = ::std::option::Option::Some(v);
        self
    }
    /// Placeholder documentation for __listOfEventBridgeRuleTemplateTarget
    pub fn set_event_targets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EventBridgeRuleTemplateTarget>>) -> Self {
        self.event_targets = input;
        self
    }
    /// Placeholder documentation for __listOfEventBridgeRuleTemplateTarget
    pub fn get_event_targets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EventBridgeRuleTemplateTarget>> {
        &self.event_targets
    }
    /// The type of event to match with the rule.
    /// This field is required.
    pub fn event_type(mut self, input: crate::types::EventBridgeRuleTemplateEventType) -> Self {
        self.event_type = ::std::option::Option::Some(input);
        self
    }
    /// The type of event to match with the rule.
    pub fn set_event_type(mut self, input: ::std::option::Option<crate::types::EventBridgeRuleTemplateEventType>) -> Self {
        self.event_type = input;
        self
    }
    /// The type of event to match with the rule.
    pub fn get_event_type(&self) -> &::std::option::Option<crate::types::EventBridgeRuleTemplateEventType> {
        &self.event_type
    }
    /// An eventbridge rule template group's identifier. Can be either be its id or current name.
    /// This field is required.
    pub fn group_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// An eventbridge rule template group's identifier. Can be either be its id or current name.
    pub fn set_group_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_identifier = input;
        self
    }
    /// An eventbridge rule template group's identifier. Can be either be its id or current name.
    pub fn get_group_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_identifier
    }
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// Represents the tags associated with a resource.
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// Represents the tags associated with a resource.
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// Represents the tags associated with a resource.
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// An ID that you assign to a create request. This ID ensures idempotency when creating resources.
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// An ID that you assign to a create request. This ID ensures idempotency when creating resources.
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// An ID that you assign to a create request. This ID ensures idempotency when creating resources.
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    /// Consumes the builder and constructs a [`CreateEventBridgeRuleTemplateInput`](crate::operation::create_event_bridge_rule_template::CreateEventBridgeRuleTemplateInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_event_bridge_rule_template::CreateEventBridgeRuleTemplateInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_event_bridge_rule_template::CreateEventBridgeRuleTemplateInput {
            description: self.description,
            event_targets: self.event_targets,
            event_type: self.event_type,
            group_identifier: self.group_identifier,
            name: self.name,
            tags: self.tags,
            request_id: self.request_id,
        })
    }
}
