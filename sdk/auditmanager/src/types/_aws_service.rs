// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An Amazon Web Services service such as Amazon S3 or CloudTrail.</p>
/// <p>For an example of how to find an Amazon Web Services service name and how to define it in your assessment scope, see the following:</p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_GetServicesInScope.html#API_GetServicesInScope_Example_2">Finding an Amazon Web Services service name to use in your assessment scope</a></p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_GetServicesInScope.html#API_GetServicesInScope_Example_3">Defining an Amazon Web Services service name in your assessment scope</a></p></li>
/// </ul>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsService {
    /// <p>The name of the Amazon Web Services service.</p>
    pub service_name: ::std::option::Option<::std::string::String>,
}
impl AwsService {
    /// <p>The name of the Amazon Web Services service.</p>
    pub fn service_name(&self) -> ::std::option::Option<&str> {
        self.service_name.as_deref()
    }
}
impl AwsService {
    /// Creates a new builder-style object to manufacture [`AwsService`](crate::types::AwsService).
    pub fn builder() -> crate::types::builders::AwsServiceBuilder {
        crate::types::builders::AwsServiceBuilder::default()
    }
}

/// A builder for [`AwsService`](crate::types::AwsService).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AwsServiceBuilder {
    pub(crate) service_name: ::std::option::Option<::std::string::String>,
}
impl AwsServiceBuilder {
    /// <p>The name of the Amazon Web Services service.</p>
    pub fn service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon Web Services service.</p>
    pub fn set_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_name = input;
        self
    }
    /// <p>The name of the Amazon Web Services service.</p>
    pub fn get_service_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_name
    }
    /// Consumes the builder and constructs a [`AwsService`](crate::types::AwsService).
    pub fn build(self) -> crate::types::AwsService {
        crate::types::AwsService {
            service_name: self.service_name,
        }
    }
}
