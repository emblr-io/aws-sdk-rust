// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateOtaTaskConfigurationInput {
    /// <p>A description of the over-the-air (OTA) task configuration.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The name of the over-the-air (OTA) task.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Describes the type of configuration used for the over-the-air (OTA) task.</p>
    pub push_config: ::std::option::Option<crate::types::PushConfig>,
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateOtaTaskConfigurationInput {
    /// <p>A description of the over-the-air (OTA) task configuration.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The name of the over-the-air (OTA) task.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Describes the type of configuration used for the over-the-air (OTA) task.</p>
    pub fn push_config(&self) -> ::std::option::Option<&crate::types::PushConfig> {
        self.push_config.as_ref()
    }
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl ::std::fmt::Debug for CreateOtaTaskConfigurationInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateOtaTaskConfigurationInput");
        formatter.field("description", &self.description);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("push_config", &self.push_config);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
impl CreateOtaTaskConfigurationInput {
    /// Creates a new builder-style object to manufacture [`CreateOtaTaskConfigurationInput`](crate::operation::create_ota_task_configuration::CreateOtaTaskConfigurationInput).
    pub fn builder() -> crate::operation::create_ota_task_configuration::builders::CreateOtaTaskConfigurationInputBuilder {
        crate::operation::create_ota_task_configuration::builders::CreateOtaTaskConfigurationInputBuilder::default()
    }
}

/// A builder for [`CreateOtaTaskConfigurationInput`](crate::operation::create_ota_task_configuration::CreateOtaTaskConfigurationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateOtaTaskConfigurationInputBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) push_config: ::std::option::Option<crate::types::PushConfig>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateOtaTaskConfigurationInputBuilder {
    /// <p>A description of the over-the-air (OTA) task configuration.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the over-the-air (OTA) task configuration.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the over-the-air (OTA) task configuration.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The name of the over-the-air (OTA) task.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the over-the-air (OTA) task.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the over-the-air (OTA) task.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Describes the type of configuration used for the over-the-air (OTA) task.</p>
    pub fn push_config(mut self, input: crate::types::PushConfig) -> Self {
        self.push_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the type of configuration used for the over-the-air (OTA) task.</p>
    pub fn set_push_config(mut self, input: ::std::option::Option<crate::types::PushConfig>) -> Self {
        self.push_config = input;
        self
    }
    /// <p>Describes the type of configuration used for the over-the-air (OTA) task.</p>
    pub fn get_push_config(&self) -> &::std::option::Option<crate::types::PushConfig> {
        &self.push_config
    }
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateOtaTaskConfigurationInput`](crate::operation::create_ota_task_configuration::CreateOtaTaskConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_ota_task_configuration::CreateOtaTaskConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_ota_task_configuration::CreateOtaTaskConfigurationInput {
            description: self.description,
            name: self.name,
            push_config: self.push_config,
            client_token: self.client_token,
        })
    }
}
impl ::std::fmt::Debug for CreateOtaTaskConfigurationInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateOtaTaskConfigurationInputBuilder");
        formatter.field("description", &self.description);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("push_config", &self.push_config);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
