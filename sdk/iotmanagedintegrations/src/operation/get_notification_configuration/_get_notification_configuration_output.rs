// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetNotificationConfigurationOutput {
    /// <p>The type of event triggering a device notification to the customer-managed destination.</p>
    pub event_type: ::std::option::Option<crate::types::EventType>,
    /// <p>The name of the destination for the notification configuration.</p>
    pub destination_name: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp value of when the notification configuration was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp value of when the notification configuration was last updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A set of key/value pairs that are used to manage the notification configuration.</p>
    #[deprecated(note = "Tags has been deprecated for this api", since = "06-25-2025")]
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetNotificationConfigurationOutput {
    /// <p>The type of event triggering a device notification to the customer-managed destination.</p>
    pub fn event_type(&self) -> ::std::option::Option<&crate::types::EventType> {
        self.event_type.as_ref()
    }
    /// <p>The name of the destination for the notification configuration.</p>
    pub fn destination_name(&self) -> ::std::option::Option<&str> {
        self.destination_name.as_deref()
    }
    /// <p>The timestamp value of when the notification configuration was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp value of when the notification configuration was last updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>A set of key/value pairs that are used to manage the notification configuration.</p>
    #[deprecated(note = "Tags has been deprecated for this api", since = "06-25-2025")]
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for GetNotificationConfigurationOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetNotificationConfigurationOutput");
        formatter.field("event_type", &self.event_type);
        formatter.field("destination_name", &self.destination_name);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetNotificationConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetNotificationConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetNotificationConfigurationOutput`](crate::operation::get_notification_configuration::GetNotificationConfigurationOutput).
    pub fn builder() -> crate::operation::get_notification_configuration::builders::GetNotificationConfigurationOutputBuilder {
        crate::operation::get_notification_configuration::builders::GetNotificationConfigurationOutputBuilder::default()
    }
}

/// A builder for [`GetNotificationConfigurationOutput`](crate::operation::get_notification_configuration::GetNotificationConfigurationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetNotificationConfigurationOutputBuilder {
    pub(crate) event_type: ::std::option::Option<crate::types::EventType>,
    pub(crate) destination_name: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetNotificationConfigurationOutputBuilder {
    /// <p>The type of event triggering a device notification to the customer-managed destination.</p>
    pub fn event_type(mut self, input: crate::types::EventType) -> Self {
        self.event_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of event triggering a device notification to the customer-managed destination.</p>
    pub fn set_event_type(mut self, input: ::std::option::Option<crate::types::EventType>) -> Self {
        self.event_type = input;
        self
    }
    /// <p>The type of event triggering a device notification to the customer-managed destination.</p>
    pub fn get_event_type(&self) -> &::std::option::Option<crate::types::EventType> {
        &self.event_type
    }
    /// <p>The name of the destination for the notification configuration.</p>
    pub fn destination_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the destination for the notification configuration.</p>
    pub fn set_destination_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_name = input;
        self
    }
    /// <p>The name of the destination for the notification configuration.</p>
    pub fn get_destination_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_name
    }
    /// <p>The timestamp value of when the notification configuration was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp value of when the notification configuration was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp value of when the notification configuration was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp value of when the notification configuration was last updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp value of when the notification configuration was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp value of when the notification configuration was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A set of key/value pairs that are used to manage the notification configuration.</p>
    #[deprecated(note = "Tags has been deprecated for this api", since = "06-25-2025")]
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A set of key/value pairs that are used to manage the notification configuration.</p>
    #[deprecated(note = "Tags has been deprecated for this api", since = "06-25-2025")]
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A set of key/value pairs that are used to manage the notification configuration.</p>
    #[deprecated(note = "Tags has been deprecated for this api", since = "06-25-2025")]
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetNotificationConfigurationOutput`](crate::operation::get_notification_configuration::GetNotificationConfigurationOutput).
    pub fn build(self) -> crate::operation::get_notification_configuration::GetNotificationConfigurationOutput {
        crate::operation::get_notification_configuration::GetNotificationConfigurationOutput {
            event_type: self.event_type,
            destination_name: self.destination_name,
            created_at: self.created_at,
            updated_at: self.updated_at,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for GetNotificationConfigurationOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetNotificationConfigurationOutputBuilder");
        formatter.field("event_type", &self.event_type);
        formatter.field("destination_name", &self.destination_name);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
