// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateCloudConnectorInput {
    /// <p>The display name of the C2C connector.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The configuration details for the cloud connector endpoint, including connection parameters and authentication requirements.</p>
    pub endpoint_config: ::std::option::Option<crate::types::EndpointConfig>,
    /// <p>A description of the C2C connector.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The type of endpoint used for the cloud connector, which defines how the connector communicates with external services.</p>
    pub endpoint_type: ::std::option::Option<crate::types::EndpointType>,
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateCloudConnectorInput {
    /// <p>The display name of the C2C connector.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The configuration details for the cloud connector endpoint, including connection parameters and authentication requirements.</p>
    pub fn endpoint_config(&self) -> ::std::option::Option<&crate::types::EndpointConfig> {
        self.endpoint_config.as_ref()
    }
    /// <p>A description of the C2C connector.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The type of endpoint used for the cloud connector, which defines how the connector communicates with external services.</p>
    pub fn endpoint_type(&self) -> ::std::option::Option<&crate::types::EndpointType> {
        self.endpoint_type.as_ref()
    }
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateCloudConnectorInput {
    /// Creates a new builder-style object to manufacture [`CreateCloudConnectorInput`](crate::operation::create_cloud_connector::CreateCloudConnectorInput).
    pub fn builder() -> crate::operation::create_cloud_connector::builders::CreateCloudConnectorInputBuilder {
        crate::operation::create_cloud_connector::builders::CreateCloudConnectorInputBuilder::default()
    }
}

/// A builder for [`CreateCloudConnectorInput`](crate::operation::create_cloud_connector::CreateCloudConnectorInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateCloudConnectorInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) endpoint_config: ::std::option::Option<crate::types::EndpointConfig>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) endpoint_type: ::std::option::Option<crate::types::EndpointType>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateCloudConnectorInputBuilder {
    /// <p>The display name of the C2C connector.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the C2C connector.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The display name of the C2C connector.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The configuration details for the cloud connector endpoint, including connection parameters and authentication requirements.</p>
    /// This field is required.
    pub fn endpoint_config(mut self, input: crate::types::EndpointConfig) -> Self {
        self.endpoint_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration details for the cloud connector endpoint, including connection parameters and authentication requirements.</p>
    pub fn set_endpoint_config(mut self, input: ::std::option::Option<crate::types::EndpointConfig>) -> Self {
        self.endpoint_config = input;
        self
    }
    /// <p>The configuration details for the cloud connector endpoint, including connection parameters and authentication requirements.</p>
    pub fn get_endpoint_config(&self) -> &::std::option::Option<crate::types::EndpointConfig> {
        &self.endpoint_config
    }
    /// <p>A description of the C2C connector.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the C2C connector.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the C2C connector.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The type of endpoint used for the cloud connector, which defines how the connector communicates with external services.</p>
    pub fn endpoint_type(mut self, input: crate::types::EndpointType) -> Self {
        self.endpoint_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of endpoint used for the cloud connector, which defines how the connector communicates with external services.</p>
    pub fn set_endpoint_type(mut self, input: ::std::option::Option<crate::types::EndpointType>) -> Self {
        self.endpoint_type = input;
        self
    }
    /// <p>The type of endpoint used for the cloud connector, which defines how the connector communicates with external services.</p>
    pub fn get_endpoint_type(&self) -> &::std::option::Option<crate::types::EndpointType> {
        &self.endpoint_type
    }
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateCloudConnectorInput`](crate::operation::create_cloud_connector::CreateCloudConnectorInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_cloud_connector::CreateCloudConnectorInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_cloud_connector::CreateCloudConnectorInput {
            name: self.name,
            endpoint_config: self.endpoint_config,
            description: self.description,
            endpoint_type: self.endpoint_type,
            client_token: self.client_token,
        })
    }
}
