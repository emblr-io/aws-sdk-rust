// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateDestinationInput {
    /// <p>The Amazon Resource Name (ARN) of the customer-managed destination.</p>
    pub delivery_destination_arn: ::std::option::Option<::std::string::String>,
    /// <p>The destination type for the customer-managed destination.</p>
    pub delivery_destination_type: ::std::option::Option<crate::types::DeliveryDestinationType>,
    /// <p>The name of the customer-managed destination.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the delivery destination role.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The description of the customer-managed destination.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A set of key/value pairs that are used to manage the destination.</p>
    #[deprecated(note = "Tags have been deprecated from this api", since = "06-25-2025")]
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateDestinationInput {
    /// <p>The Amazon Resource Name (ARN) of the customer-managed destination.</p>
    pub fn delivery_destination_arn(&self) -> ::std::option::Option<&str> {
        self.delivery_destination_arn.as_deref()
    }
    /// <p>The destination type for the customer-managed destination.</p>
    pub fn delivery_destination_type(&self) -> ::std::option::Option<&crate::types::DeliveryDestinationType> {
        self.delivery_destination_type.as_ref()
    }
    /// <p>The name of the customer-managed destination.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the delivery destination role.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The description of the customer-managed destination.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A set of key/value pairs that are used to manage the destination.</p>
    #[deprecated(note = "Tags have been deprecated from this api", since = "06-25-2025")]
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for CreateDestinationInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDestinationInput");
        formatter.field("delivery_destination_arn", &self.delivery_destination_arn);
        formatter.field("delivery_destination_type", &self.delivery_destination_type);
        formatter.field("name", &self.name);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("client_token", &self.client_token);
        formatter.field("description", &self.description);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CreateDestinationInput {
    /// Creates a new builder-style object to manufacture [`CreateDestinationInput`](crate::operation::create_destination::CreateDestinationInput).
    pub fn builder() -> crate::operation::create_destination::builders::CreateDestinationInputBuilder {
        crate::operation::create_destination::builders::CreateDestinationInputBuilder::default()
    }
}

/// A builder for [`CreateDestinationInput`](crate::operation::create_destination::CreateDestinationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateDestinationInputBuilder {
    pub(crate) delivery_destination_arn: ::std::option::Option<::std::string::String>,
    pub(crate) delivery_destination_type: ::std::option::Option<crate::types::DeliveryDestinationType>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateDestinationInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the customer-managed destination.</p>
    /// This field is required.
    pub fn delivery_destination_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.delivery_destination_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the customer-managed destination.</p>
    pub fn set_delivery_destination_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.delivery_destination_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the customer-managed destination.</p>
    pub fn get_delivery_destination_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.delivery_destination_arn
    }
    /// <p>The destination type for the customer-managed destination.</p>
    /// This field is required.
    pub fn delivery_destination_type(mut self, input: crate::types::DeliveryDestinationType) -> Self {
        self.delivery_destination_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The destination type for the customer-managed destination.</p>
    pub fn set_delivery_destination_type(mut self, input: ::std::option::Option<crate::types::DeliveryDestinationType>) -> Self {
        self.delivery_destination_type = input;
        self
    }
    /// <p>The destination type for the customer-managed destination.</p>
    pub fn get_delivery_destination_type(&self) -> &::std::option::Option<crate::types::DeliveryDestinationType> {
        &self.delivery_destination_type
    }
    /// <p>The name of the customer-managed destination.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the customer-managed destination.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the customer-managed destination.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the delivery destination role.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the delivery destination role.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the delivery destination role.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The description of the customer-managed destination.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the customer-managed destination.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the customer-managed destination.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A set of key/value pairs that are used to manage the destination.</p>
    #[deprecated(note = "Tags have been deprecated from this api", since = "06-25-2025")]
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A set of key/value pairs that are used to manage the destination.</p>
    #[deprecated(note = "Tags have been deprecated from this api", since = "06-25-2025")]
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A set of key/value pairs that are used to manage the destination.</p>
    #[deprecated(note = "Tags have been deprecated from this api", since = "06-25-2025")]
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateDestinationInput`](crate::operation::create_destination::CreateDestinationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_destination::CreateDestinationInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_destination::CreateDestinationInput {
            delivery_destination_arn: self.delivery_destination_arn,
            delivery_destination_type: self.delivery_destination_type,
            name: self.name,
            role_arn: self.role_arn,
            client_token: self.client_token,
            description: self.description,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for CreateDestinationInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDestinationInputBuilder");
        formatter.field("delivery_destination_arn", &self.delivery_destination_arn);
        formatter.field("delivery_destination_type", &self.delivery_destination_type);
        formatter.field("name", &self.name);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("client_token", &self.client_token);
        formatter.field("description", &self.description);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
