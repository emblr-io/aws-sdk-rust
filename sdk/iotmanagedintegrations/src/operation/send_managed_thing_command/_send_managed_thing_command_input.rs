// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SendManagedThingCommandInput {
    /// <p>The id of the device.</p>
    pub managed_thing_id: ::std::option::Option<::std::string::String>,
    /// <p>The device endpoint.</p>
    pub endpoints: ::std::option::Option<::std::vec::Vec<crate::types::CommandEndpoint>>,
    /// <p>The ID tracking the current discovery process for one connector association.</p>
    #[deprecated(note = "ConnectorAssociationId has been deprecated", since = "06-25-2025")]
    pub connector_association_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the account association to use when sending a command to a managed thing.</p>
    pub account_association_id: ::std::option::Option<::std::string::String>,
}
impl SendManagedThingCommandInput {
    /// <p>The id of the device.</p>
    pub fn managed_thing_id(&self) -> ::std::option::Option<&str> {
        self.managed_thing_id.as_deref()
    }
    /// <p>The device endpoint.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.endpoints.is_none()`.
    pub fn endpoints(&self) -> &[crate::types::CommandEndpoint] {
        self.endpoints.as_deref().unwrap_or_default()
    }
    /// <p>The ID tracking the current discovery process for one connector association.</p>
    #[deprecated(note = "ConnectorAssociationId has been deprecated", since = "06-25-2025")]
    pub fn connector_association_id(&self) -> ::std::option::Option<&str> {
        self.connector_association_id.as_deref()
    }
    /// <p>The identifier of the account association to use when sending a command to a managed thing.</p>
    pub fn account_association_id(&self) -> ::std::option::Option<&str> {
        self.account_association_id.as_deref()
    }
}
impl SendManagedThingCommandInput {
    /// Creates a new builder-style object to manufacture [`SendManagedThingCommandInput`](crate::operation::send_managed_thing_command::SendManagedThingCommandInput).
    pub fn builder() -> crate::operation::send_managed_thing_command::builders::SendManagedThingCommandInputBuilder {
        crate::operation::send_managed_thing_command::builders::SendManagedThingCommandInputBuilder::default()
    }
}

/// A builder for [`SendManagedThingCommandInput`](crate::operation::send_managed_thing_command::SendManagedThingCommandInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SendManagedThingCommandInputBuilder {
    pub(crate) managed_thing_id: ::std::option::Option<::std::string::String>,
    pub(crate) endpoints: ::std::option::Option<::std::vec::Vec<crate::types::CommandEndpoint>>,
    pub(crate) connector_association_id: ::std::option::Option<::std::string::String>,
    pub(crate) account_association_id: ::std::option::Option<::std::string::String>,
}
impl SendManagedThingCommandInputBuilder {
    /// <p>The id of the device.</p>
    /// This field is required.
    pub fn managed_thing_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.managed_thing_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The id of the device.</p>
    pub fn set_managed_thing_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.managed_thing_id = input;
        self
    }
    /// <p>The id of the device.</p>
    pub fn get_managed_thing_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.managed_thing_id
    }
    /// Appends an item to `endpoints`.
    ///
    /// To override the contents of this collection use [`set_endpoints`](Self::set_endpoints).
    ///
    /// <p>The device endpoint.</p>
    pub fn endpoints(mut self, input: crate::types::CommandEndpoint) -> Self {
        let mut v = self.endpoints.unwrap_or_default();
        v.push(input);
        self.endpoints = ::std::option::Option::Some(v);
        self
    }
    /// <p>The device endpoint.</p>
    pub fn set_endpoints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CommandEndpoint>>) -> Self {
        self.endpoints = input;
        self
    }
    /// <p>The device endpoint.</p>
    pub fn get_endpoints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CommandEndpoint>> {
        &self.endpoints
    }
    /// <p>The ID tracking the current discovery process for one connector association.</p>
    #[deprecated(note = "ConnectorAssociationId has been deprecated", since = "06-25-2025")]
    pub fn connector_association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID tracking the current discovery process for one connector association.</p>
    #[deprecated(note = "ConnectorAssociationId has been deprecated", since = "06-25-2025")]
    pub fn set_connector_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_association_id = input;
        self
    }
    /// <p>The ID tracking the current discovery process for one connector association.</p>
    #[deprecated(note = "ConnectorAssociationId has been deprecated", since = "06-25-2025")]
    pub fn get_connector_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_association_id
    }
    /// <p>The identifier of the account association to use when sending a command to a managed thing.</p>
    pub fn account_association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the account association to use when sending a command to a managed thing.</p>
    pub fn set_account_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_association_id = input;
        self
    }
    /// <p>The identifier of the account association to use when sending a command to a managed thing.</p>
    pub fn get_account_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_association_id
    }
    /// Consumes the builder and constructs a [`SendManagedThingCommandInput`](crate::operation::send_managed_thing_command::SendManagedThingCommandInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::send_managed_thing_command::SendManagedThingCommandInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::send_managed_thing_command::SendManagedThingCommandInput {
            managed_thing_id: self.managed_thing_id,
            endpoints: self.endpoints,
            connector_association_id: self.connector_association_id,
            account_association_id: self.account_association_id,
        })
    }
}
