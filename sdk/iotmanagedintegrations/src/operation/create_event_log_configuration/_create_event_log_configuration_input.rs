// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateEventLogConfigurationInput {
    /// <p>The type of resource for the event log configuration.</p>
    pub resource_type: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the resource for the event log configuration.</p>
    pub resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The logging level for the event log configuration.</p>
    pub event_log_level: ::std::option::Option<crate::types::LogLevel>,
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateEventLogConfigurationInput {
    /// <p>The type of resource for the event log configuration.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The identifier of the resource for the event log configuration.</p>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The logging level for the event log configuration.</p>
    pub fn event_log_level(&self) -> ::std::option::Option<&crate::types::LogLevel> {
        self.event_log_level.as_ref()
    }
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateEventLogConfigurationInput {
    /// Creates a new builder-style object to manufacture [`CreateEventLogConfigurationInput`](crate::operation::create_event_log_configuration::CreateEventLogConfigurationInput).
    pub fn builder() -> crate::operation::create_event_log_configuration::builders::CreateEventLogConfigurationInputBuilder {
        crate::operation::create_event_log_configuration::builders::CreateEventLogConfigurationInputBuilder::default()
    }
}

/// A builder for [`CreateEventLogConfigurationInput`](crate::operation::create_event_log_configuration::CreateEventLogConfigurationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateEventLogConfigurationInputBuilder {
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) event_log_level: ::std::option::Option<crate::types::LogLevel>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateEventLogConfigurationInputBuilder {
    /// <p>The type of resource for the event log configuration.</p>
    /// This field is required.
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of resource for the event log configuration.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of resource for the event log configuration.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// <p>The identifier of the resource for the event log configuration.</p>
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the resource for the event log configuration.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The identifier of the resource for the event log configuration.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>The logging level for the event log configuration.</p>
    /// This field is required.
    pub fn event_log_level(mut self, input: crate::types::LogLevel) -> Self {
        self.event_log_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The logging level for the event log configuration.</p>
    pub fn set_event_log_level(mut self, input: ::std::option::Option<crate::types::LogLevel>) -> Self {
        self.event_log_level = input;
        self
    }
    /// <p>The logging level for the event log configuration.</p>
    pub fn get_event_log_level(&self) -> &::std::option::Option<crate::types::LogLevel> {
        &self.event_log_level
    }
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateEventLogConfigurationInput`](crate::operation::create_event_log_configuration::CreateEventLogConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_event_log_configuration::CreateEventLogConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_event_log_configuration::CreateEventLogConfigurationInput {
            resource_type: self.resource_type,
            resource_id: self.resource_id,
            event_log_level: self.event_log_level,
            client_token: self.client_token,
        })
    }
}
