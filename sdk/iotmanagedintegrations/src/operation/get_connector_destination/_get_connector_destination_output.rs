// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetConnectorDestinationOutput {
    /// <p>The display name of the connector destination.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the connector destination.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the C2C connector.</p>
    pub cloud_connector_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the connector destination.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The authentication type used for the connector destination, which determines how credentials and access are managed.</p>
    pub auth_type: ::std::option::Option<crate::types::AuthType>,
    /// <p>The authentication configuration details for the connector destination, including OAuth settings and other authentication parameters.</p>
    pub auth_config: ::std::option::Option<crate::types::AuthConfig>,
    /// <p>The AWS Secrets Manager configuration used to securely store and manage sensitive information for the connector destination.</p>
    pub secrets_manager: ::std::option::Option<crate::types::SecretsManager>,
    /// <p>The URL where users are redirected after completing the OAuth authorization process for the connector destination.</p>
    pub o_auth_complete_redirect_url: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetConnectorDestinationOutput {
    /// <p>The display name of the connector destination.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the connector destination.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The identifier of the C2C connector.</p>
    pub fn cloud_connector_id(&self) -> ::std::option::Option<&str> {
        self.cloud_connector_id.as_deref()
    }
    /// <p>The unique identifier of the connector destination.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The authentication type used for the connector destination, which determines how credentials and access are managed.</p>
    pub fn auth_type(&self) -> ::std::option::Option<&crate::types::AuthType> {
        self.auth_type.as_ref()
    }
    /// <p>The authentication configuration details for the connector destination, including OAuth settings and other authentication parameters.</p>
    pub fn auth_config(&self) -> ::std::option::Option<&crate::types::AuthConfig> {
        self.auth_config.as_ref()
    }
    /// <p>The AWS Secrets Manager configuration used to securely store and manage sensitive information for the connector destination.</p>
    pub fn secrets_manager(&self) -> ::std::option::Option<&crate::types::SecretsManager> {
        self.secrets_manager.as_ref()
    }
    /// <p>The URL where users are redirected after completing the OAuth authorization process for the connector destination.</p>
    pub fn o_auth_complete_redirect_url(&self) -> ::std::option::Option<&str> {
        self.o_auth_complete_redirect_url.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetConnectorDestinationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetConnectorDestinationOutput {
    /// Creates a new builder-style object to manufacture [`GetConnectorDestinationOutput`](crate::operation::get_connector_destination::GetConnectorDestinationOutput).
    pub fn builder() -> crate::operation::get_connector_destination::builders::GetConnectorDestinationOutputBuilder {
        crate::operation::get_connector_destination::builders::GetConnectorDestinationOutputBuilder::default()
    }
}

/// A builder for [`GetConnectorDestinationOutput`](crate::operation::get_connector_destination::GetConnectorDestinationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetConnectorDestinationOutputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) cloud_connector_id: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) auth_type: ::std::option::Option<crate::types::AuthType>,
    pub(crate) auth_config: ::std::option::Option<crate::types::AuthConfig>,
    pub(crate) secrets_manager: ::std::option::Option<crate::types::SecretsManager>,
    pub(crate) o_auth_complete_redirect_url: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetConnectorDestinationOutputBuilder {
    /// <p>The display name of the connector destination.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the connector destination.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The display name of the connector destination.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of the connector destination.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the connector destination.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the connector destination.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The identifier of the C2C connector.</p>
    pub fn cloud_connector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloud_connector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the C2C connector.</p>
    pub fn set_cloud_connector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloud_connector_id = input;
        self
    }
    /// <p>The identifier of the C2C connector.</p>
    pub fn get_cloud_connector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloud_connector_id
    }
    /// <p>The unique identifier of the connector destination.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the connector destination.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the connector destination.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The authentication type used for the connector destination, which determines how credentials and access are managed.</p>
    pub fn auth_type(mut self, input: crate::types::AuthType) -> Self {
        self.auth_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication type used for the connector destination, which determines how credentials and access are managed.</p>
    pub fn set_auth_type(mut self, input: ::std::option::Option<crate::types::AuthType>) -> Self {
        self.auth_type = input;
        self
    }
    /// <p>The authentication type used for the connector destination, which determines how credentials and access are managed.</p>
    pub fn get_auth_type(&self) -> &::std::option::Option<crate::types::AuthType> {
        &self.auth_type
    }
    /// <p>The authentication configuration details for the connector destination, including OAuth settings and other authentication parameters.</p>
    pub fn auth_config(mut self, input: crate::types::AuthConfig) -> Self {
        self.auth_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication configuration details for the connector destination, including OAuth settings and other authentication parameters.</p>
    pub fn set_auth_config(mut self, input: ::std::option::Option<crate::types::AuthConfig>) -> Self {
        self.auth_config = input;
        self
    }
    /// <p>The authentication configuration details for the connector destination, including OAuth settings and other authentication parameters.</p>
    pub fn get_auth_config(&self) -> &::std::option::Option<crate::types::AuthConfig> {
        &self.auth_config
    }
    /// <p>The AWS Secrets Manager configuration used to securely store and manage sensitive information for the connector destination.</p>
    pub fn secrets_manager(mut self, input: crate::types::SecretsManager) -> Self {
        self.secrets_manager = ::std::option::Option::Some(input);
        self
    }
    /// <p>The AWS Secrets Manager configuration used to securely store and manage sensitive information for the connector destination.</p>
    pub fn set_secrets_manager(mut self, input: ::std::option::Option<crate::types::SecretsManager>) -> Self {
        self.secrets_manager = input;
        self
    }
    /// <p>The AWS Secrets Manager configuration used to securely store and manage sensitive information for the connector destination.</p>
    pub fn get_secrets_manager(&self) -> &::std::option::Option<crate::types::SecretsManager> {
        &self.secrets_manager
    }
    /// <p>The URL where users are redirected after completing the OAuth authorization process for the connector destination.</p>
    pub fn o_auth_complete_redirect_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.o_auth_complete_redirect_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL where users are redirected after completing the OAuth authorization process for the connector destination.</p>
    pub fn set_o_auth_complete_redirect_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.o_auth_complete_redirect_url = input;
        self
    }
    /// <p>The URL where users are redirected after completing the OAuth authorization process for the connector destination.</p>
    pub fn get_o_auth_complete_redirect_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.o_auth_complete_redirect_url
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetConnectorDestinationOutput`](crate::operation::get_connector_destination::GetConnectorDestinationOutput).
    pub fn build(self) -> crate::operation::get_connector_destination::GetConnectorDestinationOutput {
        crate::operation::get_connector_destination::GetConnectorDestinationOutput {
            name: self.name,
            description: self.description,
            cloud_connector_id: self.cloud_connector_id,
            id: self.id,
            auth_type: self.auth_type,
            auth_config: self.auth_config,
            secrets_manager: self.secrets_manager,
            o_auth_complete_redirect_url: self.o_auth_complete_redirect_url,
            _request_id: self._request_id,
        }
    }
}
