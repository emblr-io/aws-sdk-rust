// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateConnectorDestinationInput {
    /// <p>The unique identifier of the connector destination to update.</p>
    pub identifier: ::std::option::Option<::std::string::String>,
    /// <p>The new description to assign to the connector destination.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The new display name to assign to the connector destination.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The new authentication type to use for the connector destination.</p>
    pub auth_type: ::std::option::Option<crate::types::AuthType>,
    /// <p>The updated authentication configuration details for the connector destination.</p>
    pub auth_config: ::std::option::Option<crate::types::AuthConfigUpdate>,
    /// <p>The updated AWS Secrets Manager configuration for the connector destination.</p>
    pub secrets_manager: ::std::option::Option<crate::types::SecretsManager>,
}
impl UpdateConnectorDestinationInput {
    /// <p>The unique identifier of the connector destination to update.</p>
    pub fn identifier(&self) -> ::std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>The new description to assign to the connector destination.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The new display name to assign to the connector destination.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The new authentication type to use for the connector destination.</p>
    pub fn auth_type(&self) -> ::std::option::Option<&crate::types::AuthType> {
        self.auth_type.as_ref()
    }
    /// <p>The updated authentication configuration details for the connector destination.</p>
    pub fn auth_config(&self) -> ::std::option::Option<&crate::types::AuthConfigUpdate> {
        self.auth_config.as_ref()
    }
    /// <p>The updated AWS Secrets Manager configuration for the connector destination.</p>
    pub fn secrets_manager(&self) -> ::std::option::Option<&crate::types::SecretsManager> {
        self.secrets_manager.as_ref()
    }
}
impl UpdateConnectorDestinationInput {
    /// Creates a new builder-style object to manufacture [`UpdateConnectorDestinationInput`](crate::operation::update_connector_destination::UpdateConnectorDestinationInput).
    pub fn builder() -> crate::operation::update_connector_destination::builders::UpdateConnectorDestinationInputBuilder {
        crate::operation::update_connector_destination::builders::UpdateConnectorDestinationInputBuilder::default()
    }
}

/// A builder for [`UpdateConnectorDestinationInput`](crate::operation::update_connector_destination::UpdateConnectorDestinationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateConnectorDestinationInputBuilder {
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) auth_type: ::std::option::Option<crate::types::AuthType>,
    pub(crate) auth_config: ::std::option::Option<crate::types::AuthConfigUpdate>,
    pub(crate) secrets_manager: ::std::option::Option<crate::types::SecretsManager>,
}
impl UpdateConnectorDestinationInputBuilder {
    /// <p>The unique identifier of the connector destination to update.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the connector destination to update.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The unique identifier of the connector destination to update.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>The new description to assign to the connector destination.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new description to assign to the connector destination.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The new description to assign to the connector destination.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The new display name to assign to the connector destination.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new display name to assign to the connector destination.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The new display name to assign to the connector destination.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The new authentication type to use for the connector destination.</p>
    pub fn auth_type(mut self, input: crate::types::AuthType) -> Self {
        self.auth_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The new authentication type to use for the connector destination.</p>
    pub fn set_auth_type(mut self, input: ::std::option::Option<crate::types::AuthType>) -> Self {
        self.auth_type = input;
        self
    }
    /// <p>The new authentication type to use for the connector destination.</p>
    pub fn get_auth_type(&self) -> &::std::option::Option<crate::types::AuthType> {
        &self.auth_type
    }
    /// <p>The updated authentication configuration details for the connector destination.</p>
    pub fn auth_config(mut self, input: crate::types::AuthConfigUpdate) -> Self {
        self.auth_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated authentication configuration details for the connector destination.</p>
    pub fn set_auth_config(mut self, input: ::std::option::Option<crate::types::AuthConfigUpdate>) -> Self {
        self.auth_config = input;
        self
    }
    /// <p>The updated authentication configuration details for the connector destination.</p>
    pub fn get_auth_config(&self) -> &::std::option::Option<crate::types::AuthConfigUpdate> {
        &self.auth_config
    }
    /// <p>The updated AWS Secrets Manager configuration for the connector destination.</p>
    pub fn secrets_manager(mut self, input: crate::types::SecretsManager) -> Self {
        self.secrets_manager = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated AWS Secrets Manager configuration for the connector destination.</p>
    pub fn set_secrets_manager(mut self, input: ::std::option::Option<crate::types::SecretsManager>) -> Self {
        self.secrets_manager = input;
        self
    }
    /// <p>The updated AWS Secrets Manager configuration for the connector destination.</p>
    pub fn get_secrets_manager(&self) -> &::std::option::Option<crate::types::SecretsManager> {
        &self.secrets_manager
    }
    /// Consumes the builder and constructs a [`UpdateConnectorDestinationInput`](crate::operation::update_connector_destination::UpdateConnectorDestinationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_connector_destination::UpdateConnectorDestinationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_connector_destination::UpdateConnectorDestinationInput {
            identifier: self.identifier,
            description: self.description,
            name: self.name,
            auth_type: self.auth_type,
            auth_config: self.auth_config,
            secrets_manager: self.secrets_manager,
        })
    }
}
