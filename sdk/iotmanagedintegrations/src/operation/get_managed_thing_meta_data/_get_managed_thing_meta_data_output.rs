// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetManagedThingMetaDataOutput {
    /// <p>The managed thing id.</p>
    pub managed_thing_id: ::std::option::Option<::std::string::String>,
    /// <p>The metadata for the managed thing.</p>
    pub meta_data: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetManagedThingMetaDataOutput {
    /// <p>The managed thing id.</p>
    pub fn managed_thing_id(&self) -> ::std::option::Option<&str> {
        self.managed_thing_id.as_deref()
    }
    /// <p>The metadata for the managed thing.</p>
    pub fn meta_data(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.meta_data.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetManagedThingMetaDataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetManagedThingMetaDataOutput {
    /// Creates a new builder-style object to manufacture [`GetManagedThingMetaDataOutput`](crate::operation::get_managed_thing_meta_data::GetManagedThingMetaDataOutput).
    pub fn builder() -> crate::operation::get_managed_thing_meta_data::builders::GetManagedThingMetaDataOutputBuilder {
        crate::operation::get_managed_thing_meta_data::builders::GetManagedThingMetaDataOutputBuilder::default()
    }
}

/// A builder for [`GetManagedThingMetaDataOutput`](crate::operation::get_managed_thing_meta_data::GetManagedThingMetaDataOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetManagedThingMetaDataOutputBuilder {
    pub(crate) managed_thing_id: ::std::option::Option<::std::string::String>,
    pub(crate) meta_data: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetManagedThingMetaDataOutputBuilder {
    /// <p>The managed thing id.</p>
    pub fn managed_thing_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.managed_thing_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The managed thing id.</p>
    pub fn set_managed_thing_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.managed_thing_id = input;
        self
    }
    /// <p>The managed thing id.</p>
    pub fn get_managed_thing_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.managed_thing_id
    }
    /// Adds a key-value pair to `meta_data`.
    ///
    /// To override the contents of this collection use [`set_meta_data`](Self::set_meta_data).
    ///
    /// <p>The metadata for the managed thing.</p>
    pub fn meta_data(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.meta_data.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.meta_data = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The metadata for the managed thing.</p>
    pub fn set_meta_data(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.meta_data = input;
        self
    }
    /// <p>The metadata for the managed thing.</p>
    pub fn get_meta_data(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.meta_data
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetManagedThingMetaDataOutput`](crate::operation::get_managed_thing_meta_data::GetManagedThingMetaDataOutput).
    pub fn build(self) -> crate::operation::get_managed_thing_meta_data::GetManagedThingMetaDataOutput {
        crate::operation::get_managed_thing_meta_data::GetManagedThingMetaDataOutput {
            managed_thing_id: self.managed_thing_id,
            meta_data: self.meta_data,
            _request_id: self._request_id,
        }
    }
}
