// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetManagedThingCapabilitiesOutput {
    /// <p>The id of the device.</p>
    pub managed_thing_id: ::std::option::Option<::std::string::String>,
    /// <p>The capabilities of the device such as light bulb.</p>
    pub capabilities: ::std::option::Option<::std::string::String>,
    /// <p>A report of the capabilities for the managed thing.</p>
    pub capability_report: ::std::option::Option<crate::types::CapabilityReport>,
    _request_id: Option<String>,
}
impl GetManagedThingCapabilitiesOutput {
    /// <p>The id of the device.</p>
    pub fn managed_thing_id(&self) -> ::std::option::Option<&str> {
        self.managed_thing_id.as_deref()
    }
    /// <p>The capabilities of the device such as light bulb.</p>
    pub fn capabilities(&self) -> ::std::option::Option<&str> {
        self.capabilities.as_deref()
    }
    /// <p>A report of the capabilities for the managed thing.</p>
    pub fn capability_report(&self) -> ::std::option::Option<&crate::types::CapabilityReport> {
        self.capability_report.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetManagedThingCapabilitiesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetManagedThingCapabilitiesOutput {
    /// Creates a new builder-style object to manufacture [`GetManagedThingCapabilitiesOutput`](crate::operation::get_managed_thing_capabilities::GetManagedThingCapabilitiesOutput).
    pub fn builder() -> crate::operation::get_managed_thing_capabilities::builders::GetManagedThingCapabilitiesOutputBuilder {
        crate::operation::get_managed_thing_capabilities::builders::GetManagedThingCapabilitiesOutputBuilder::default()
    }
}

/// A builder for [`GetManagedThingCapabilitiesOutput`](crate::operation::get_managed_thing_capabilities::GetManagedThingCapabilitiesOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetManagedThingCapabilitiesOutputBuilder {
    pub(crate) managed_thing_id: ::std::option::Option<::std::string::String>,
    pub(crate) capabilities: ::std::option::Option<::std::string::String>,
    pub(crate) capability_report: ::std::option::Option<crate::types::CapabilityReport>,
    _request_id: Option<String>,
}
impl GetManagedThingCapabilitiesOutputBuilder {
    /// <p>The id of the device.</p>
    pub fn managed_thing_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.managed_thing_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The id of the device.</p>
    pub fn set_managed_thing_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.managed_thing_id = input;
        self
    }
    /// <p>The id of the device.</p>
    pub fn get_managed_thing_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.managed_thing_id
    }
    /// <p>The capabilities of the device such as light bulb.</p>
    pub fn capabilities(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.capabilities = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The capabilities of the device such as light bulb.</p>
    pub fn set_capabilities(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.capabilities = input;
        self
    }
    /// <p>The capabilities of the device such as light bulb.</p>
    pub fn get_capabilities(&self) -> &::std::option::Option<::std::string::String> {
        &self.capabilities
    }
    /// <p>A report of the capabilities for the managed thing.</p>
    pub fn capability_report(mut self, input: crate::types::CapabilityReport) -> Self {
        self.capability_report = ::std::option::Option::Some(input);
        self
    }
    /// <p>A report of the capabilities for the managed thing.</p>
    pub fn set_capability_report(mut self, input: ::std::option::Option<crate::types::CapabilityReport>) -> Self {
        self.capability_report = input;
        self
    }
    /// <p>A report of the capabilities for the managed thing.</p>
    pub fn get_capability_report(&self) -> &::std::option::Option<crate::types::CapabilityReport> {
        &self.capability_report
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetManagedThingCapabilitiesOutput`](crate::operation::get_managed_thing_capabilities::GetManagedThingCapabilitiesOutput).
    pub fn build(self) -> crate::operation::get_managed_thing_capabilities::GetManagedThingCapabilitiesOutput {
        crate::operation::get_managed_thing_capabilities::GetManagedThingCapabilitiesOutput {
            managed_thing_id: self.managed_thing_id,
            capabilities: self.capabilities,
            capability_report: self.capability_report,
            _request_id: self._request_id,
        }
    }
}
