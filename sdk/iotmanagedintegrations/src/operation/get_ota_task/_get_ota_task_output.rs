// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetOtaTaskOutput {
    /// <p>The id of the over-the-air (OTA) task.</p>
    pub task_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the over-the-air (OTA) task</p>
    pub task_arn: ::std::option::Option<::std::string::String>,
    /// <p>The description of the over-the-air (OTA) task.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The URL to the Amazon S3 bucket where the over-the-air (OTA) task is stored.</p>
    pub s3_url: ::std::option::Option<::std::string::String>,
    /// <p>The connection protocol the over-the-air (OTA) task uses to update the device.</p>
    pub protocol: ::std::option::Option<crate::types::OtaProtocol>,
    /// <p>The frequency type for the over-the-air (OTA) task.</p>
    pub ota_type: ::std::option::Option<crate::types::OtaType>,
    /// <p>The query string to add things to the thing group.</p>
    pub ota_target_query_string: ::std::option::Option<::std::string::String>,
    /// <p>The deployment mechanism for the over-the-air (OTA) task.</p>
    pub ota_mechanism: ::std::option::Option<crate::types::OtaMechanism>,
    /// <p>The device targeted for the over-the-air (OTA) task.</p>
    pub target: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The timestamp value of when the over-the-air (OTA) task was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp value of when the over-the-air (OTA) task was last updated at.</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The identifier for the over-the-air (OTA) task configuration.</p>
    pub task_configuration_id: ::std::option::Option<::std::string::String>,
    /// <p>The processing details of all over-the-air (OTA) tasks.</p>
    pub task_processing_details: ::std::option::Option<crate::types::TaskProcessingDetails>,
    /// <p>Over-the-air (OTA) task scheduling config.</p>
    pub ota_scheduling_config: ::std::option::Option<crate::types::OtaTaskSchedulingConfig>,
    /// <p>Over-the-air (OTA) task retry config.</p>
    pub ota_task_execution_retry_config: ::std::option::Option<crate::types::OtaTaskExecutionRetryConfig>,
    /// <p>The status of the over-the-air (OTA) task.</p>
    pub status: ::std::option::Option<crate::types::OtaStatus>,
    /// <p>A set of key/value pairs that are used to manage the over-the-air (OTA) task.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetOtaTaskOutput {
    /// <p>The id of the over-the-air (OTA) task.</p>
    pub fn task_id(&self) -> ::std::option::Option<&str> {
        self.task_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the over-the-air (OTA) task</p>
    pub fn task_arn(&self) -> ::std::option::Option<&str> {
        self.task_arn.as_deref()
    }
    /// <p>The description of the over-the-air (OTA) task.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The URL to the Amazon S3 bucket where the over-the-air (OTA) task is stored.</p>
    pub fn s3_url(&self) -> ::std::option::Option<&str> {
        self.s3_url.as_deref()
    }
    /// <p>The connection protocol the over-the-air (OTA) task uses to update the device.</p>
    pub fn protocol(&self) -> ::std::option::Option<&crate::types::OtaProtocol> {
        self.protocol.as_ref()
    }
    /// <p>The frequency type for the over-the-air (OTA) task.</p>
    pub fn ota_type(&self) -> ::std::option::Option<&crate::types::OtaType> {
        self.ota_type.as_ref()
    }
    /// <p>The query string to add things to the thing group.</p>
    pub fn ota_target_query_string(&self) -> ::std::option::Option<&str> {
        self.ota_target_query_string.as_deref()
    }
    /// <p>The deployment mechanism for the over-the-air (OTA) task.</p>
    pub fn ota_mechanism(&self) -> ::std::option::Option<&crate::types::OtaMechanism> {
        self.ota_mechanism.as_ref()
    }
    /// <p>The device targeted for the over-the-air (OTA) task.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.target.is_none()`.
    pub fn target(&self) -> &[::std::string::String] {
        self.target.as_deref().unwrap_or_default()
    }
    /// <p>The timestamp value of when the over-the-air (OTA) task was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp value of when the over-the-air (OTA) task was last updated at.</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p>The identifier for the over-the-air (OTA) task configuration.</p>
    pub fn task_configuration_id(&self) -> ::std::option::Option<&str> {
        self.task_configuration_id.as_deref()
    }
    /// <p>The processing details of all over-the-air (OTA) tasks.</p>
    pub fn task_processing_details(&self) -> ::std::option::Option<&crate::types::TaskProcessingDetails> {
        self.task_processing_details.as_ref()
    }
    /// <p>Over-the-air (OTA) task scheduling config.</p>
    pub fn ota_scheduling_config(&self) -> ::std::option::Option<&crate::types::OtaTaskSchedulingConfig> {
        self.ota_scheduling_config.as_ref()
    }
    /// <p>Over-the-air (OTA) task retry config.</p>
    pub fn ota_task_execution_retry_config(&self) -> ::std::option::Option<&crate::types::OtaTaskExecutionRetryConfig> {
        self.ota_task_execution_retry_config.as_ref()
    }
    /// <p>The status of the over-the-air (OTA) task.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::OtaStatus> {
        self.status.as_ref()
    }
    /// <p>A set of key/value pairs that are used to manage the over-the-air (OTA) task.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for GetOtaTaskOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetOtaTaskOutput");
        formatter.field("task_id", &self.task_id);
        formatter.field("task_arn", &self.task_arn);
        formatter.field("description", &self.description);
        formatter.field("s3_url", &self.s3_url);
        formatter.field("protocol", &self.protocol);
        formatter.field("ota_type", &self.ota_type);
        formatter.field("ota_target_query_string", &self.ota_target_query_string);
        formatter.field("ota_mechanism", &self.ota_mechanism);
        formatter.field("target", &self.target);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.field("task_configuration_id", &self.task_configuration_id);
        formatter.field("task_processing_details", &self.task_processing_details);
        formatter.field("ota_scheduling_config", &self.ota_scheduling_config);
        formatter.field("ota_task_execution_retry_config", &self.ota_task_execution_retry_config);
        formatter.field("status", &self.status);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetOtaTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetOtaTaskOutput {
    /// Creates a new builder-style object to manufacture [`GetOtaTaskOutput`](crate::operation::get_ota_task::GetOtaTaskOutput).
    pub fn builder() -> crate::operation::get_ota_task::builders::GetOtaTaskOutputBuilder {
        crate::operation::get_ota_task::builders::GetOtaTaskOutputBuilder::default()
    }
}

/// A builder for [`GetOtaTaskOutput`](crate::operation::get_ota_task::GetOtaTaskOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetOtaTaskOutputBuilder {
    pub(crate) task_id: ::std::option::Option<::std::string::String>,
    pub(crate) task_arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) s3_url: ::std::option::Option<::std::string::String>,
    pub(crate) protocol: ::std::option::Option<crate::types::OtaProtocol>,
    pub(crate) ota_type: ::std::option::Option<crate::types::OtaType>,
    pub(crate) ota_target_query_string: ::std::option::Option<::std::string::String>,
    pub(crate) ota_mechanism: ::std::option::Option<crate::types::OtaMechanism>,
    pub(crate) target: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) task_configuration_id: ::std::option::Option<::std::string::String>,
    pub(crate) task_processing_details: ::std::option::Option<crate::types::TaskProcessingDetails>,
    pub(crate) ota_scheduling_config: ::std::option::Option<crate::types::OtaTaskSchedulingConfig>,
    pub(crate) ota_task_execution_retry_config: ::std::option::Option<crate::types::OtaTaskExecutionRetryConfig>,
    pub(crate) status: ::std::option::Option<crate::types::OtaStatus>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetOtaTaskOutputBuilder {
    /// <p>The id of the over-the-air (OTA) task.</p>
    pub fn task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The id of the over-the-air (OTA) task.</p>
    pub fn set_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_id = input;
        self
    }
    /// <p>The id of the over-the-air (OTA) task.</p>
    pub fn get_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_id
    }
    /// <p>The Amazon Resource Name (ARN) of the over-the-air (OTA) task</p>
    pub fn task_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the over-the-air (OTA) task</p>
    pub fn set_task_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the over-the-air (OTA) task</p>
    pub fn get_task_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_arn
    }
    /// <p>The description of the over-the-air (OTA) task.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the over-the-air (OTA) task.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the over-the-air (OTA) task.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The URL to the Amazon S3 bucket where the over-the-air (OTA) task is stored.</p>
    pub fn s3_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL to the Amazon S3 bucket where the over-the-air (OTA) task is stored.</p>
    pub fn set_s3_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_url = input;
        self
    }
    /// <p>The URL to the Amazon S3 bucket where the over-the-air (OTA) task is stored.</p>
    pub fn get_s3_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_url
    }
    /// <p>The connection protocol the over-the-air (OTA) task uses to update the device.</p>
    pub fn protocol(mut self, input: crate::types::OtaProtocol) -> Self {
        self.protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>The connection protocol the over-the-air (OTA) task uses to update the device.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<crate::types::OtaProtocol>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The connection protocol the over-the-air (OTA) task uses to update the device.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<crate::types::OtaProtocol> {
        &self.protocol
    }
    /// <p>The frequency type for the over-the-air (OTA) task.</p>
    pub fn ota_type(mut self, input: crate::types::OtaType) -> Self {
        self.ota_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The frequency type for the over-the-air (OTA) task.</p>
    pub fn set_ota_type(mut self, input: ::std::option::Option<crate::types::OtaType>) -> Self {
        self.ota_type = input;
        self
    }
    /// <p>The frequency type for the over-the-air (OTA) task.</p>
    pub fn get_ota_type(&self) -> &::std::option::Option<crate::types::OtaType> {
        &self.ota_type
    }
    /// <p>The query string to add things to the thing group.</p>
    pub fn ota_target_query_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ota_target_query_string = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The query string to add things to the thing group.</p>
    pub fn set_ota_target_query_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ota_target_query_string = input;
        self
    }
    /// <p>The query string to add things to the thing group.</p>
    pub fn get_ota_target_query_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.ota_target_query_string
    }
    /// <p>The deployment mechanism for the over-the-air (OTA) task.</p>
    pub fn ota_mechanism(mut self, input: crate::types::OtaMechanism) -> Self {
        self.ota_mechanism = ::std::option::Option::Some(input);
        self
    }
    /// <p>The deployment mechanism for the over-the-air (OTA) task.</p>
    pub fn set_ota_mechanism(mut self, input: ::std::option::Option<crate::types::OtaMechanism>) -> Self {
        self.ota_mechanism = input;
        self
    }
    /// <p>The deployment mechanism for the over-the-air (OTA) task.</p>
    pub fn get_ota_mechanism(&self) -> &::std::option::Option<crate::types::OtaMechanism> {
        &self.ota_mechanism
    }
    /// Appends an item to `target`.
    ///
    /// To override the contents of this collection use [`set_target`](Self::set_target).
    ///
    /// <p>The device targeted for the over-the-air (OTA) task.</p>
    pub fn target(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.target.unwrap_or_default();
        v.push(input.into());
        self.target = ::std::option::Option::Some(v);
        self
    }
    /// <p>The device targeted for the over-the-air (OTA) task.</p>
    pub fn set_target(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.target = input;
        self
    }
    /// <p>The device targeted for the over-the-air (OTA) task.</p>
    pub fn get_target(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.target
    }
    /// <p>The timestamp value of when the over-the-air (OTA) task was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp value of when the over-the-air (OTA) task was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp value of when the over-the-air (OTA) task was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp value of when the over-the-air (OTA) task was last updated at.</p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp value of when the over-the-air (OTA) task was last updated at.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>The timestamp value of when the over-the-air (OTA) task was last updated at.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// <p>The identifier for the over-the-air (OTA) task configuration.</p>
    pub fn task_configuration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_configuration_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the over-the-air (OTA) task configuration.</p>
    pub fn set_task_configuration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_configuration_id = input;
        self
    }
    /// <p>The identifier for the over-the-air (OTA) task configuration.</p>
    pub fn get_task_configuration_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_configuration_id
    }
    /// <p>The processing details of all over-the-air (OTA) tasks.</p>
    pub fn task_processing_details(mut self, input: crate::types::TaskProcessingDetails) -> Self {
        self.task_processing_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The processing details of all over-the-air (OTA) tasks.</p>
    pub fn set_task_processing_details(mut self, input: ::std::option::Option<crate::types::TaskProcessingDetails>) -> Self {
        self.task_processing_details = input;
        self
    }
    /// <p>The processing details of all over-the-air (OTA) tasks.</p>
    pub fn get_task_processing_details(&self) -> &::std::option::Option<crate::types::TaskProcessingDetails> {
        &self.task_processing_details
    }
    /// <p>Over-the-air (OTA) task scheduling config.</p>
    pub fn ota_scheduling_config(mut self, input: crate::types::OtaTaskSchedulingConfig) -> Self {
        self.ota_scheduling_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Over-the-air (OTA) task scheduling config.</p>
    pub fn set_ota_scheduling_config(mut self, input: ::std::option::Option<crate::types::OtaTaskSchedulingConfig>) -> Self {
        self.ota_scheduling_config = input;
        self
    }
    /// <p>Over-the-air (OTA) task scheduling config.</p>
    pub fn get_ota_scheduling_config(&self) -> &::std::option::Option<crate::types::OtaTaskSchedulingConfig> {
        &self.ota_scheduling_config
    }
    /// <p>Over-the-air (OTA) task retry config.</p>
    pub fn ota_task_execution_retry_config(mut self, input: crate::types::OtaTaskExecutionRetryConfig) -> Self {
        self.ota_task_execution_retry_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Over-the-air (OTA) task retry config.</p>
    pub fn set_ota_task_execution_retry_config(mut self, input: ::std::option::Option<crate::types::OtaTaskExecutionRetryConfig>) -> Self {
        self.ota_task_execution_retry_config = input;
        self
    }
    /// <p>Over-the-air (OTA) task retry config.</p>
    pub fn get_ota_task_execution_retry_config(&self) -> &::std::option::Option<crate::types::OtaTaskExecutionRetryConfig> {
        &self.ota_task_execution_retry_config
    }
    /// <p>The status of the over-the-air (OTA) task.</p>
    pub fn status(mut self, input: crate::types::OtaStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the over-the-air (OTA) task.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::OtaStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the over-the-air (OTA) task.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::OtaStatus> {
        &self.status
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A set of key/value pairs that are used to manage the over-the-air (OTA) task.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A set of key/value pairs that are used to manage the over-the-air (OTA) task.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A set of key/value pairs that are used to manage the over-the-air (OTA) task.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetOtaTaskOutput`](crate::operation::get_ota_task::GetOtaTaskOutput).
    pub fn build(self) -> crate::operation::get_ota_task::GetOtaTaskOutput {
        crate::operation::get_ota_task::GetOtaTaskOutput {
            task_id: self.task_id,
            task_arn: self.task_arn,
            description: self.description,
            s3_url: self.s3_url,
            protocol: self.protocol,
            ota_type: self.ota_type,
            ota_target_query_string: self.ota_target_query_string,
            ota_mechanism: self.ota_mechanism,
            target: self.target,
            created_at: self.created_at,
            last_updated_at: self.last_updated_at,
            task_configuration_id: self.task_configuration_id,
            task_processing_details: self.task_processing_details,
            ota_scheduling_config: self.ota_scheduling_config,
            ota_task_execution_retry_config: self.ota_task_execution_retry_config,
            status: self.status,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for GetOtaTaskOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetOtaTaskOutputBuilder");
        formatter.field("task_id", &self.task_id);
        formatter.field("task_arn", &self.task_arn);
        formatter.field("description", &self.description);
        formatter.field("s3_url", &self.s3_url);
        formatter.field("protocol", &self.protocol);
        formatter.field("ota_type", &self.ota_type);
        formatter.field("ota_target_query_string", &self.ota_target_query_string);
        formatter.field("ota_mechanism", &self.ota_mechanism);
        formatter.field("target", &self.target);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.field("task_configuration_id", &self.task_configuration_id);
        formatter.field("task_processing_details", &self.task_processing_details);
        formatter.field("ota_scheduling_config", &self.ota_scheduling_config);
        formatter.field("ota_task_execution_retry_config", &self.ota_task_execution_retry_config);
        formatter.field("status", &self.status);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
