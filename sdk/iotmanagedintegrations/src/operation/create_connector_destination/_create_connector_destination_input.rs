// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateConnectorDestinationInput {
    /// <p>The display name of the connector destination.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the connector destination.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the C2C connector.</p>
    pub cloud_connector_id: ::std::option::Option<::std::string::String>,
    /// <p>The authentication type used for the connector destination, which determines how credentials and access are managed.</p>
    pub auth_type: ::std::option::Option<crate::types::AuthType>,
    /// <p>The authentication configuration details for the connector destination, including OAuth settings and other authentication parameters.</p>
    pub auth_config: ::std::option::Option<crate::types::AuthConfig>,
    /// <p>The AWS Secrets Manager configuration used to securely store and manage sensitive information for the connector destination.</p>
    pub secrets_manager: ::std::option::Option<crate::types::SecretsManager>,
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateConnectorDestinationInput {
    /// <p>The display name of the connector destination.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the connector destination.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The identifier of the C2C connector.</p>
    pub fn cloud_connector_id(&self) -> ::std::option::Option<&str> {
        self.cloud_connector_id.as_deref()
    }
    /// <p>The authentication type used for the connector destination, which determines how credentials and access are managed.</p>
    pub fn auth_type(&self) -> ::std::option::Option<&crate::types::AuthType> {
        self.auth_type.as_ref()
    }
    /// <p>The authentication configuration details for the connector destination, including OAuth settings and other authentication parameters.</p>
    pub fn auth_config(&self) -> ::std::option::Option<&crate::types::AuthConfig> {
        self.auth_config.as_ref()
    }
    /// <p>The AWS Secrets Manager configuration used to securely store and manage sensitive information for the connector destination.</p>
    pub fn secrets_manager(&self) -> ::std::option::Option<&crate::types::SecretsManager> {
        self.secrets_manager.as_ref()
    }
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateConnectorDestinationInput {
    /// Creates a new builder-style object to manufacture [`CreateConnectorDestinationInput`](crate::operation::create_connector_destination::CreateConnectorDestinationInput).
    pub fn builder() -> crate::operation::create_connector_destination::builders::CreateConnectorDestinationInputBuilder {
        crate::operation::create_connector_destination::builders::CreateConnectorDestinationInputBuilder::default()
    }
}

/// A builder for [`CreateConnectorDestinationInput`](crate::operation::create_connector_destination::CreateConnectorDestinationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateConnectorDestinationInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) cloud_connector_id: ::std::option::Option<::std::string::String>,
    pub(crate) auth_type: ::std::option::Option<crate::types::AuthType>,
    pub(crate) auth_config: ::std::option::Option<crate::types::AuthConfig>,
    pub(crate) secrets_manager: ::std::option::Option<crate::types::SecretsManager>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateConnectorDestinationInputBuilder {
    /// <p>The display name of the connector destination.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the connector destination.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The display name of the connector destination.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of the connector destination.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the connector destination.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the connector destination.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The identifier of the C2C connector.</p>
    /// This field is required.
    pub fn cloud_connector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloud_connector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the C2C connector.</p>
    pub fn set_cloud_connector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloud_connector_id = input;
        self
    }
    /// <p>The identifier of the C2C connector.</p>
    pub fn get_cloud_connector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloud_connector_id
    }
    /// <p>The authentication type used for the connector destination, which determines how credentials and access are managed.</p>
    /// This field is required.
    pub fn auth_type(mut self, input: crate::types::AuthType) -> Self {
        self.auth_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication type used for the connector destination, which determines how credentials and access are managed.</p>
    pub fn set_auth_type(mut self, input: ::std::option::Option<crate::types::AuthType>) -> Self {
        self.auth_type = input;
        self
    }
    /// <p>The authentication type used for the connector destination, which determines how credentials and access are managed.</p>
    pub fn get_auth_type(&self) -> &::std::option::Option<crate::types::AuthType> {
        &self.auth_type
    }
    /// <p>The authentication configuration details for the connector destination, including OAuth settings and other authentication parameters.</p>
    /// This field is required.
    pub fn auth_config(mut self, input: crate::types::AuthConfig) -> Self {
        self.auth_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication configuration details for the connector destination, including OAuth settings and other authentication parameters.</p>
    pub fn set_auth_config(mut self, input: ::std::option::Option<crate::types::AuthConfig>) -> Self {
        self.auth_config = input;
        self
    }
    /// <p>The authentication configuration details for the connector destination, including OAuth settings and other authentication parameters.</p>
    pub fn get_auth_config(&self) -> &::std::option::Option<crate::types::AuthConfig> {
        &self.auth_config
    }
    /// <p>The AWS Secrets Manager configuration used to securely store and manage sensitive information for the connector destination.</p>
    /// This field is required.
    pub fn secrets_manager(mut self, input: crate::types::SecretsManager) -> Self {
        self.secrets_manager = ::std::option::Option::Some(input);
        self
    }
    /// <p>The AWS Secrets Manager configuration used to securely store and manage sensitive information for the connector destination.</p>
    pub fn set_secrets_manager(mut self, input: ::std::option::Option<crate::types::SecretsManager>) -> Self {
        self.secrets_manager = input;
        self
    }
    /// <p>The AWS Secrets Manager configuration used to securely store and manage sensitive information for the connector destination.</p>
    pub fn get_secrets_manager(&self) -> &::std::option::Option<crate::types::SecretsManager> {
        &self.secrets_manager
    }
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>An idempotency token. If you retry a request that completed successfully initially using the same client token and parameters, then the retry attempt will succeed without performing any further actions.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateConnectorDestinationInput`](crate::operation::create_connector_destination::CreateConnectorDestinationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_connector_destination::CreateConnectorDestinationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_connector_destination::CreateConnectorDestinationInput {
            name: self.name,
            description: self.description,
            cloud_connector_id: self.cloud_connector_id,
            auth_type: self.auth_type,
            auth_config: self.auth_config,
            secrets_manager: self.secrets_manager,
            client_token: self.client_token,
        })
    }
}
