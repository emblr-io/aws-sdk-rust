// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListManagedThingsInput {
    /// <p>Filter on device owners when listing managed things.</p>
    pub owner_filter: ::std::option::Option<::std::string::String>,
    /// <p>Filter on a credential locker for a managed thing.</p>
    pub credential_locker_filter: ::std::option::Option<::std::string::String>,
    /// <p>Filter on the type of device used. This will be the Amazon Web Services hub controller, cloud device, or IoT device.</p>
    pub role_filter: ::std::option::Option<crate::types::Role>,
    /// <p>Filter on a parent controller id for a managed thing.</p>
    pub parent_controller_identifier_filter: ::std::option::Option<::std::string::String>,
    /// <p>Filter on a connector policy id for a managed thing.</p>
    #[deprecated(note = "ConnectorPolicyIdFilter is deprecated", since = "06-25-2025")]
    pub connector_policy_id_filter: ::std::option::Option<::std::string::String>,
    /// <p>Filter managed things by the connector destination ID they are associated with.</p>
    pub connector_destination_id_filter: ::std::option::Option<::std::string::String>,
    /// <p>Filter managed things by the connector device ID they are associated with. When specified, only managed things with this connector device ID will be returned.</p>
    pub connector_device_id_filter: ::std::option::Option<::std::string::String>,
    /// <p>Filter on the serial number of the device.</p>
    pub serial_number_filter: ::std::option::Option<::std::string::String>,
    /// <p>Filter on the status of the device.</p>
    pub provisioning_status_filter: ::std::option::Option<crate::types::ProvisioningStatus>,
    /// <p>A token that can be used to retrieve the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return at one time.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListManagedThingsInput {
    /// <p>Filter on device owners when listing managed things.</p>
    pub fn owner_filter(&self) -> ::std::option::Option<&str> {
        self.owner_filter.as_deref()
    }
    /// <p>Filter on a credential locker for a managed thing.</p>
    pub fn credential_locker_filter(&self) -> ::std::option::Option<&str> {
        self.credential_locker_filter.as_deref()
    }
    /// <p>Filter on the type of device used. This will be the Amazon Web Services hub controller, cloud device, or IoT device.</p>
    pub fn role_filter(&self) -> ::std::option::Option<&crate::types::Role> {
        self.role_filter.as_ref()
    }
    /// <p>Filter on a parent controller id for a managed thing.</p>
    pub fn parent_controller_identifier_filter(&self) -> ::std::option::Option<&str> {
        self.parent_controller_identifier_filter.as_deref()
    }
    /// <p>Filter on a connector policy id for a managed thing.</p>
    #[deprecated(note = "ConnectorPolicyIdFilter is deprecated", since = "06-25-2025")]
    pub fn connector_policy_id_filter(&self) -> ::std::option::Option<&str> {
        self.connector_policy_id_filter.as_deref()
    }
    /// <p>Filter managed things by the connector destination ID they are associated with.</p>
    pub fn connector_destination_id_filter(&self) -> ::std::option::Option<&str> {
        self.connector_destination_id_filter.as_deref()
    }
    /// <p>Filter managed things by the connector device ID they are associated with. When specified, only managed things with this connector device ID will be returned.</p>
    pub fn connector_device_id_filter(&self) -> ::std::option::Option<&str> {
        self.connector_device_id_filter.as_deref()
    }
    /// <p>Filter on the serial number of the device.</p>
    pub fn serial_number_filter(&self) -> ::std::option::Option<&str> {
        self.serial_number_filter.as_deref()
    }
    /// <p>Filter on the status of the device.</p>
    pub fn provisioning_status_filter(&self) -> ::std::option::Option<&crate::types::ProvisioningStatus> {
        self.provisioning_status_filter.as_ref()
    }
    /// <p>A token that can be used to retrieve the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ::std::fmt::Debug for ListManagedThingsInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListManagedThingsInput");
        formatter.field("owner_filter", &"*** Sensitive Data Redacted ***");
        formatter.field("credential_locker_filter", &self.credential_locker_filter);
        formatter.field("role_filter", &self.role_filter);
        formatter.field("parent_controller_identifier_filter", &self.parent_controller_identifier_filter);
        formatter.field("connector_policy_id_filter", &self.connector_policy_id_filter);
        formatter.field("connector_destination_id_filter", &self.connector_destination_id_filter);
        formatter.field("connector_device_id_filter", &"*** Sensitive Data Redacted ***");
        formatter.field("serial_number_filter", &"*** Sensitive Data Redacted ***");
        formatter.field("provisioning_status_filter", &self.provisioning_status_filter);
        formatter.field("next_token", &self.next_token);
        formatter.field("max_results", &self.max_results);
        formatter.finish()
    }
}
impl ListManagedThingsInput {
    /// Creates a new builder-style object to manufacture [`ListManagedThingsInput`](crate::operation::list_managed_things::ListManagedThingsInput).
    pub fn builder() -> crate::operation::list_managed_things::builders::ListManagedThingsInputBuilder {
        crate::operation::list_managed_things::builders::ListManagedThingsInputBuilder::default()
    }
}

/// A builder for [`ListManagedThingsInput`](crate::operation::list_managed_things::ListManagedThingsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ListManagedThingsInputBuilder {
    pub(crate) owner_filter: ::std::option::Option<::std::string::String>,
    pub(crate) credential_locker_filter: ::std::option::Option<::std::string::String>,
    pub(crate) role_filter: ::std::option::Option<crate::types::Role>,
    pub(crate) parent_controller_identifier_filter: ::std::option::Option<::std::string::String>,
    pub(crate) connector_policy_id_filter: ::std::option::Option<::std::string::String>,
    pub(crate) connector_destination_id_filter: ::std::option::Option<::std::string::String>,
    pub(crate) connector_device_id_filter: ::std::option::Option<::std::string::String>,
    pub(crate) serial_number_filter: ::std::option::Option<::std::string::String>,
    pub(crate) provisioning_status_filter: ::std::option::Option<crate::types::ProvisioningStatus>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListManagedThingsInputBuilder {
    /// <p>Filter on device owners when listing managed things.</p>
    pub fn owner_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_filter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filter on device owners when listing managed things.</p>
    pub fn set_owner_filter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_filter = input;
        self
    }
    /// <p>Filter on device owners when listing managed things.</p>
    pub fn get_owner_filter(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_filter
    }
    /// <p>Filter on a credential locker for a managed thing.</p>
    pub fn credential_locker_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.credential_locker_filter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filter on a credential locker for a managed thing.</p>
    pub fn set_credential_locker_filter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.credential_locker_filter = input;
        self
    }
    /// <p>Filter on a credential locker for a managed thing.</p>
    pub fn get_credential_locker_filter(&self) -> &::std::option::Option<::std::string::String> {
        &self.credential_locker_filter
    }
    /// <p>Filter on the type of device used. This will be the Amazon Web Services hub controller, cloud device, or IoT device.</p>
    pub fn role_filter(mut self, input: crate::types::Role) -> Self {
        self.role_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter on the type of device used. This will be the Amazon Web Services hub controller, cloud device, or IoT device.</p>
    pub fn set_role_filter(mut self, input: ::std::option::Option<crate::types::Role>) -> Self {
        self.role_filter = input;
        self
    }
    /// <p>Filter on the type of device used. This will be the Amazon Web Services hub controller, cloud device, or IoT device.</p>
    pub fn get_role_filter(&self) -> &::std::option::Option<crate::types::Role> {
        &self.role_filter
    }
    /// <p>Filter on a parent controller id for a managed thing.</p>
    pub fn parent_controller_identifier_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parent_controller_identifier_filter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filter on a parent controller id for a managed thing.</p>
    pub fn set_parent_controller_identifier_filter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parent_controller_identifier_filter = input;
        self
    }
    /// <p>Filter on a parent controller id for a managed thing.</p>
    pub fn get_parent_controller_identifier_filter(&self) -> &::std::option::Option<::std::string::String> {
        &self.parent_controller_identifier_filter
    }
    /// <p>Filter on a connector policy id for a managed thing.</p>
    #[deprecated(note = "ConnectorPolicyIdFilter is deprecated", since = "06-25-2025")]
    pub fn connector_policy_id_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_policy_id_filter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filter on a connector policy id for a managed thing.</p>
    #[deprecated(note = "ConnectorPolicyIdFilter is deprecated", since = "06-25-2025")]
    pub fn set_connector_policy_id_filter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_policy_id_filter = input;
        self
    }
    /// <p>Filter on a connector policy id for a managed thing.</p>
    #[deprecated(note = "ConnectorPolicyIdFilter is deprecated", since = "06-25-2025")]
    pub fn get_connector_policy_id_filter(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_policy_id_filter
    }
    /// <p>Filter managed things by the connector destination ID they are associated with.</p>
    pub fn connector_destination_id_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_destination_id_filter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filter managed things by the connector destination ID they are associated with.</p>
    pub fn set_connector_destination_id_filter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_destination_id_filter = input;
        self
    }
    /// <p>Filter managed things by the connector destination ID they are associated with.</p>
    pub fn get_connector_destination_id_filter(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_destination_id_filter
    }
    /// <p>Filter managed things by the connector device ID they are associated with. When specified, only managed things with this connector device ID will be returned.</p>
    pub fn connector_device_id_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_device_id_filter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filter managed things by the connector device ID they are associated with. When specified, only managed things with this connector device ID will be returned.</p>
    pub fn set_connector_device_id_filter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_device_id_filter = input;
        self
    }
    /// <p>Filter managed things by the connector device ID they are associated with. When specified, only managed things with this connector device ID will be returned.</p>
    pub fn get_connector_device_id_filter(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_device_id_filter
    }
    /// <p>Filter on the serial number of the device.</p>
    pub fn serial_number_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.serial_number_filter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filter on the serial number of the device.</p>
    pub fn set_serial_number_filter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.serial_number_filter = input;
        self
    }
    /// <p>Filter on the serial number of the device.</p>
    pub fn get_serial_number_filter(&self) -> &::std::option::Option<::std::string::String> {
        &self.serial_number_filter
    }
    /// <p>Filter on the status of the device.</p>
    pub fn provisioning_status_filter(mut self, input: crate::types::ProvisioningStatus) -> Self {
        self.provisioning_status_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter on the status of the device.</p>
    pub fn set_provisioning_status_filter(mut self, input: ::std::option::Option<crate::types::ProvisioningStatus>) -> Self {
        self.provisioning_status_filter = input;
        self
    }
    /// <p>Filter on the status of the device.</p>
    pub fn get_provisioning_status_filter(&self) -> &::std::option::Option<crate::types::ProvisioningStatus> {
        &self.provisioning_status_filter
    }
    /// <p>A token that can be used to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that can be used to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token that can be used to retrieve the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListManagedThingsInput`](crate::operation::list_managed_things::ListManagedThingsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_managed_things::ListManagedThingsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_managed_things::ListManagedThingsInput {
            owner_filter: self.owner_filter,
            credential_locker_filter: self.credential_locker_filter,
            role_filter: self.role_filter,
            parent_controller_identifier_filter: self.parent_controller_identifier_filter,
            connector_policy_id_filter: self.connector_policy_id_filter,
            connector_destination_id_filter: self.connector_destination_id_filter,
            connector_device_id_filter: self.connector_device_id_filter,
            serial_number_filter: self.serial_number_filter,
            provisioning_status_filter: self.provisioning_status_filter,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
impl ::std::fmt::Debug for ListManagedThingsInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListManagedThingsInputBuilder");
        formatter.field("owner_filter", &"*** Sensitive Data Redacted ***");
        formatter.field("credential_locker_filter", &self.credential_locker_filter);
        formatter.field("role_filter", &self.role_filter);
        formatter.field("parent_controller_identifier_filter", &self.parent_controller_identifier_filter);
        formatter.field("connector_policy_id_filter", &self.connector_policy_id_filter);
        formatter.field("connector_destination_id_filter", &self.connector_destination_id_filter);
        formatter.field("connector_device_id_filter", &"*** Sensitive Data Redacted ***");
        formatter.field("serial_number_filter", &"*** Sensitive Data Redacted ***");
        formatter.field("provisioning_status_filter", &self.provisioning_status_filter);
        formatter.field("next_token", &self.next_token);
        formatter.field("max_results", &self.max_results);
        formatter.finish()
    }
}
