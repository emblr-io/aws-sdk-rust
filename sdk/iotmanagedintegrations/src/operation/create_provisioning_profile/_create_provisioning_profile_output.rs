// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateProvisioningProfileOutput {
    /// <p>The Amazon Resource Name (ARN) of the provisioning template used in the provisioning profile.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the provisioning template.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The type of provisioning workflow the device uses for onboarding to IoT managed integrations.</p>
    pub provisioning_type: ::std::option::Option<crate::types::ProvisioningType>,
    /// <p>The identifier of the provisioning profile.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The id of the claim certificate.</p>
    pub claim_certificate: ::std::option::Option<::std::string::String>,
    /// <p>The private key of the claim certificate. This is stored securely on the device for validating the connection endpoint with IoT managed integrations using the public key.</p>
    pub claim_certificate_private_key: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateProvisioningProfileOutput {
    /// <p>The Amazon Resource Name (ARN) of the provisioning template used in the provisioning profile.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the provisioning template.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of provisioning workflow the device uses for onboarding to IoT managed integrations.</p>
    pub fn provisioning_type(&self) -> ::std::option::Option<&crate::types::ProvisioningType> {
        self.provisioning_type.as_ref()
    }
    /// <p>The identifier of the provisioning profile.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The id of the claim certificate.</p>
    pub fn claim_certificate(&self) -> ::std::option::Option<&str> {
        self.claim_certificate.as_deref()
    }
    /// <p>The private key of the claim certificate. This is stored securely on the device for validating the connection endpoint with IoT managed integrations using the public key.</p>
    pub fn claim_certificate_private_key(&self) -> ::std::option::Option<&str> {
        self.claim_certificate_private_key.as_deref()
    }
}
impl ::std::fmt::Debug for CreateProvisioningProfileOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateProvisioningProfileOutput");
        formatter.field("arn", &self.arn);
        formatter.field("name", &self.name);
        formatter.field("provisioning_type", &self.provisioning_type);
        formatter.field("id", &self.id);
        formatter.field("claim_certificate", &"*** Sensitive Data Redacted ***");
        formatter.field("claim_certificate_private_key", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for CreateProvisioningProfileOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateProvisioningProfileOutput {
    /// Creates a new builder-style object to manufacture [`CreateProvisioningProfileOutput`](crate::operation::create_provisioning_profile::CreateProvisioningProfileOutput).
    pub fn builder() -> crate::operation::create_provisioning_profile::builders::CreateProvisioningProfileOutputBuilder {
        crate::operation::create_provisioning_profile::builders::CreateProvisioningProfileOutputBuilder::default()
    }
}

/// A builder for [`CreateProvisioningProfileOutput`](crate::operation::create_provisioning_profile::CreateProvisioningProfileOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateProvisioningProfileOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) provisioning_type: ::std::option::Option<crate::types::ProvisioningType>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) claim_certificate: ::std::option::Option<::std::string::String>,
    pub(crate) claim_certificate_private_key: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateProvisioningProfileOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the provisioning template used in the provisioning profile.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the provisioning template used in the provisioning profile.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the provisioning template used in the provisioning profile.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the provisioning template.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the provisioning template.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the provisioning template.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of provisioning workflow the device uses for onboarding to IoT managed integrations.</p>
    pub fn provisioning_type(mut self, input: crate::types::ProvisioningType) -> Self {
        self.provisioning_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of provisioning workflow the device uses for onboarding to IoT managed integrations.</p>
    pub fn set_provisioning_type(mut self, input: ::std::option::Option<crate::types::ProvisioningType>) -> Self {
        self.provisioning_type = input;
        self
    }
    /// <p>The type of provisioning workflow the device uses for onboarding to IoT managed integrations.</p>
    pub fn get_provisioning_type(&self) -> &::std::option::Option<crate::types::ProvisioningType> {
        &self.provisioning_type
    }
    /// <p>The identifier of the provisioning profile.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the provisioning profile.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the provisioning profile.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The id of the claim certificate.</p>
    pub fn claim_certificate(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.claim_certificate = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The id of the claim certificate.</p>
    pub fn set_claim_certificate(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.claim_certificate = input;
        self
    }
    /// <p>The id of the claim certificate.</p>
    pub fn get_claim_certificate(&self) -> &::std::option::Option<::std::string::String> {
        &self.claim_certificate
    }
    /// <p>The private key of the claim certificate. This is stored securely on the device for validating the connection endpoint with IoT managed integrations using the public key.</p>
    pub fn claim_certificate_private_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.claim_certificate_private_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The private key of the claim certificate. This is stored securely on the device for validating the connection endpoint with IoT managed integrations using the public key.</p>
    pub fn set_claim_certificate_private_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.claim_certificate_private_key = input;
        self
    }
    /// <p>The private key of the claim certificate. This is stored securely on the device for validating the connection endpoint with IoT managed integrations using the public key.</p>
    pub fn get_claim_certificate_private_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.claim_certificate_private_key
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateProvisioningProfileOutput`](crate::operation::create_provisioning_profile::CreateProvisioningProfileOutput).
    pub fn build(self) -> crate::operation::create_provisioning_profile::CreateProvisioningProfileOutput {
        crate::operation::create_provisioning_profile::CreateProvisioningProfileOutput {
            arn: self.arn,
            name: self.name,
            provisioning_type: self.provisioning_type,
            id: self.id,
            claim_certificate: self.claim_certificate,
            claim_certificate_private_key: self.claim_certificate_private_key,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for CreateProvisioningProfileOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateProvisioningProfileOutputBuilder");
        formatter.field("arn", &self.arn);
        formatter.field("name", &self.name);
        formatter.field("provisioning_type", &self.provisioning_type);
        formatter.field("id", &self.id);
        formatter.field("claim_certificate", &"*** Sensitive Data Redacted ***");
        formatter.field("claim_certificate_private_key", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
