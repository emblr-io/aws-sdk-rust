// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListSchemaVersionsInput {
    /// <p>Filter on the type of schema version.</p>
    pub r#type: ::std::option::Option<crate::types::SchemaVersionType>,
    /// <p>The maximum number of results to return at one time.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>A token that can be used to retrieve the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Filter on the id of the schema version.</p>
    pub schema_id: ::std::option::Option<::std::string::String>,
    /// <p>Filter on the name of the schema version.</p>
    pub namespace: ::std::option::Option<::std::string::String>,
    /// <p>The visibility of the schema version.</p>
    pub visibility: ::std::option::Option<crate::types::SchemaVersionVisibility>,
    /// <p>The schema version. If this is left blank, it defaults to the latest version.</p>
    pub semantic_version: ::std::option::Option<::std::string::String>,
}
impl ListSchemaVersionsInput {
    /// <p>Filter on the type of schema version.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::SchemaVersionType> {
        self.r#type.as_ref()
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>A token that can be used to retrieve the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Filter on the id of the schema version.</p>
    pub fn schema_id(&self) -> ::std::option::Option<&str> {
        self.schema_id.as_deref()
    }
    /// <p>Filter on the name of the schema version.</p>
    pub fn namespace(&self) -> ::std::option::Option<&str> {
        self.namespace.as_deref()
    }
    /// <p>The visibility of the schema version.</p>
    pub fn visibility(&self) -> ::std::option::Option<&crate::types::SchemaVersionVisibility> {
        self.visibility.as_ref()
    }
    /// <p>The schema version. If this is left blank, it defaults to the latest version.</p>
    pub fn semantic_version(&self) -> ::std::option::Option<&str> {
        self.semantic_version.as_deref()
    }
}
impl ListSchemaVersionsInput {
    /// Creates a new builder-style object to manufacture [`ListSchemaVersionsInput`](crate::operation::list_schema_versions::ListSchemaVersionsInput).
    pub fn builder() -> crate::operation::list_schema_versions::builders::ListSchemaVersionsInputBuilder {
        crate::operation::list_schema_versions::builders::ListSchemaVersionsInputBuilder::default()
    }
}

/// A builder for [`ListSchemaVersionsInput`](crate::operation::list_schema_versions::ListSchemaVersionsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListSchemaVersionsInputBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::SchemaVersionType>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) schema_id: ::std::option::Option<::std::string::String>,
    pub(crate) namespace: ::std::option::Option<::std::string::String>,
    pub(crate) visibility: ::std::option::Option<crate::types::SchemaVersionVisibility>,
    pub(crate) semantic_version: ::std::option::Option<::std::string::String>,
}
impl ListSchemaVersionsInputBuilder {
    /// <p>Filter on the type of schema version.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::SchemaVersionType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter on the type of schema version.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::SchemaVersionType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Filter on the type of schema version.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::SchemaVersionType> {
        &self.r#type
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>A token that can be used to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that can be used to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token that can be used to retrieve the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>Filter on the id of the schema version.</p>
    pub fn schema_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schema_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filter on the id of the schema version.</p>
    pub fn set_schema_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schema_id = input;
        self
    }
    /// <p>Filter on the id of the schema version.</p>
    pub fn get_schema_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.schema_id
    }
    /// <p>Filter on the name of the schema version.</p>
    pub fn namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.namespace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filter on the name of the schema version.</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>Filter on the name of the schema version.</p>
    pub fn get_namespace(&self) -> &::std::option::Option<::std::string::String> {
        &self.namespace
    }
    /// <p>The visibility of the schema version.</p>
    pub fn visibility(mut self, input: crate::types::SchemaVersionVisibility) -> Self {
        self.visibility = ::std::option::Option::Some(input);
        self
    }
    /// <p>The visibility of the schema version.</p>
    pub fn set_visibility(mut self, input: ::std::option::Option<crate::types::SchemaVersionVisibility>) -> Self {
        self.visibility = input;
        self
    }
    /// <p>The visibility of the schema version.</p>
    pub fn get_visibility(&self) -> &::std::option::Option<crate::types::SchemaVersionVisibility> {
        &self.visibility
    }
    /// <p>The schema version. If this is left blank, it defaults to the latest version.</p>
    pub fn semantic_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.semantic_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The schema version. If this is left blank, it defaults to the latest version.</p>
    pub fn set_semantic_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.semantic_version = input;
        self
    }
    /// <p>The schema version. If this is left blank, it defaults to the latest version.</p>
    pub fn get_semantic_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.semantic_version
    }
    /// Consumes the builder and constructs a [`ListSchemaVersionsInput`](crate::operation::list_schema_versions::ListSchemaVersionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_schema_versions::ListSchemaVersionsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_schema_versions::ListSchemaVersionsInput {
            r#type: self.r#type,
            max_results: self.max_results,
            next_token: self.next_token,
            schema_id: self.schema_id,
            namespace: self.namespace,
            visibility: self.visibility,
            semantic_version: self.semantic_version,
        })
    }
}
