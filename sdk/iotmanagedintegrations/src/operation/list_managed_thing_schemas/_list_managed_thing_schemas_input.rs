// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListManagedThingSchemasInput {
    /// <p>The managed thing id.</p>
    pub identifier: ::std::option::Option<::std::string::String>,
    /// <p>Filter on an endpoint id.</p>
    pub endpoint_id_filter: ::std::option::Option<::std::string::String>,
    /// <p>Filter on a capability id.</p>
    pub capability_id_filter: ::std::option::Option<::std::string::String>,
    /// <p>A token that can be used to retrieve the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return at one time.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListManagedThingSchemasInput {
    /// <p>The managed thing id.</p>
    pub fn identifier(&self) -> ::std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>Filter on an endpoint id.</p>
    pub fn endpoint_id_filter(&self) -> ::std::option::Option<&str> {
        self.endpoint_id_filter.as_deref()
    }
    /// <p>Filter on a capability id.</p>
    pub fn capability_id_filter(&self) -> ::std::option::Option<&str> {
        self.capability_id_filter.as_deref()
    }
    /// <p>A token that can be used to retrieve the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListManagedThingSchemasInput {
    /// Creates a new builder-style object to manufacture [`ListManagedThingSchemasInput`](crate::operation::list_managed_thing_schemas::ListManagedThingSchemasInput).
    pub fn builder() -> crate::operation::list_managed_thing_schemas::builders::ListManagedThingSchemasInputBuilder {
        crate::operation::list_managed_thing_schemas::builders::ListManagedThingSchemasInputBuilder::default()
    }
}

/// A builder for [`ListManagedThingSchemasInput`](crate::operation::list_managed_thing_schemas::ListManagedThingSchemasInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListManagedThingSchemasInputBuilder {
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) endpoint_id_filter: ::std::option::Option<::std::string::String>,
    pub(crate) capability_id_filter: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListManagedThingSchemasInputBuilder {
    /// <p>The managed thing id.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The managed thing id.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The managed thing id.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>Filter on an endpoint id.</p>
    pub fn endpoint_id_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint_id_filter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filter on an endpoint id.</p>
    pub fn set_endpoint_id_filter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint_id_filter = input;
        self
    }
    /// <p>Filter on an endpoint id.</p>
    pub fn get_endpoint_id_filter(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint_id_filter
    }
    /// <p>Filter on a capability id.</p>
    pub fn capability_id_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.capability_id_filter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filter on a capability id.</p>
    pub fn set_capability_id_filter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.capability_id_filter = input;
        self
    }
    /// <p>Filter on a capability id.</p>
    pub fn get_capability_id_filter(&self) -> &::std::option::Option<::std::string::String> {
        &self.capability_id_filter
    }
    /// <p>A token that can be used to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that can be used to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token that can be used to retrieve the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListManagedThingSchemasInput`](crate::operation::list_managed_thing_schemas::ListManagedThingSchemasInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_managed_thing_schemas::ListManagedThingSchemasInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_managed_thing_schemas::ListManagedThingSchemasInput {
            identifier: self.identifier,
            endpoint_id_filter: self.endpoint_id_filter,
            capability_id_filter: self.capability_id_filter,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
