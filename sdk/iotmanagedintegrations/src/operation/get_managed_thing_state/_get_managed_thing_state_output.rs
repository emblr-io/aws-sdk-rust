// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetManagedThingStateOutput {
    /// <p>The device endpoint.</p>
    pub endpoints: ::std::vec::Vec<crate::types::StateEndpoint>,
    _request_id: Option<String>,
}
impl GetManagedThingStateOutput {
    /// <p>The device endpoint.</p>
    pub fn endpoints(&self) -> &[crate::types::StateEndpoint] {
        use std::ops::Deref;
        self.endpoints.deref()
    }
}
impl ::aws_types::request_id::RequestId for GetManagedThingStateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetManagedThingStateOutput {
    /// Creates a new builder-style object to manufacture [`GetManagedThingStateOutput`](crate::operation::get_managed_thing_state::GetManagedThingStateOutput).
    pub fn builder() -> crate::operation::get_managed_thing_state::builders::GetManagedThingStateOutputBuilder {
        crate::operation::get_managed_thing_state::builders::GetManagedThingStateOutputBuilder::default()
    }
}

/// A builder for [`GetManagedThingStateOutput`](crate::operation::get_managed_thing_state::GetManagedThingStateOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetManagedThingStateOutputBuilder {
    pub(crate) endpoints: ::std::option::Option<::std::vec::Vec<crate::types::StateEndpoint>>,
    _request_id: Option<String>,
}
impl GetManagedThingStateOutputBuilder {
    /// Appends an item to `endpoints`.
    ///
    /// To override the contents of this collection use [`set_endpoints`](Self::set_endpoints).
    ///
    /// <p>The device endpoint.</p>
    pub fn endpoints(mut self, input: crate::types::StateEndpoint) -> Self {
        let mut v = self.endpoints.unwrap_or_default();
        v.push(input);
        self.endpoints = ::std::option::Option::Some(v);
        self
    }
    /// <p>The device endpoint.</p>
    pub fn set_endpoints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StateEndpoint>>) -> Self {
        self.endpoints = input;
        self
    }
    /// <p>The device endpoint.</p>
    pub fn get_endpoints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StateEndpoint>> {
        &self.endpoints
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetManagedThingStateOutput`](crate::operation::get_managed_thing_state::GetManagedThingStateOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`endpoints`](crate::operation::get_managed_thing_state::builders::GetManagedThingStateOutputBuilder::endpoints)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_managed_thing_state::GetManagedThingStateOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_managed_thing_state::GetManagedThingStateOutput {
            endpoints: self.endpoints.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "endpoints",
                    "endpoints was not specified but it is required when building GetManagedThingStateOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
