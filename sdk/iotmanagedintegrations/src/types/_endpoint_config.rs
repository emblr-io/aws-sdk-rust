// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration details for an endpoint, which defines how to connect to and communicate with external services.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EndpointConfig {
    /// <p>The Lambda function configuration for the endpoint, used when the endpoint communicates through an AWS Lambda function.</p>
    pub lambda: ::std::option::Option<crate::types::LambdaConfig>,
}
impl EndpointConfig {
    /// <p>The Lambda function configuration for the endpoint, used when the endpoint communicates through an AWS Lambda function.</p>
    pub fn lambda(&self) -> ::std::option::Option<&crate::types::LambdaConfig> {
        self.lambda.as_ref()
    }
}
impl EndpointConfig {
    /// Creates a new builder-style object to manufacture [`EndpointConfig`](crate::types::EndpointConfig).
    pub fn builder() -> crate::types::builders::EndpointConfigBuilder {
        crate::types::builders::EndpointConfigBuilder::default()
    }
}

/// A builder for [`EndpointConfig`](crate::types::EndpointConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EndpointConfigBuilder {
    pub(crate) lambda: ::std::option::Option<crate::types::LambdaConfig>,
}
impl EndpointConfigBuilder {
    /// <p>The Lambda function configuration for the endpoint, used when the endpoint communicates through an AWS Lambda function.</p>
    pub fn lambda(mut self, input: crate::types::LambdaConfig) -> Self {
        self.lambda = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Lambda function configuration for the endpoint, used when the endpoint communicates through an AWS Lambda function.</p>
    pub fn set_lambda(mut self, input: ::std::option::Option<crate::types::LambdaConfig>) -> Self {
        self.lambda = input;
        self
    }
    /// <p>The Lambda function configuration for the endpoint, used when the endpoint communicates through an AWS Lambda function.</p>
    pub fn get_lambda(&self) -> &::std::option::Option<crate::types::LambdaConfig> {
        &self.lambda
    }
    /// Consumes the builder and constructs a [`EndpointConfig`](crate::types::EndpointConfig).
    pub fn build(self) -> crate::types::EndpointConfig {
        crate::types::EndpointConfig { lambda: self.lambda }
    }
}
