// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Over-the-air (OTA) task timeout config.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OtaTaskTimeoutConfig {
    /// <p>Specifies the amount of time the device has to finish execution of this task. The timeout interval can be anywhere between 1 minute and 7 days.</p>
    pub in_progress_timeout_in_minutes: ::std::option::Option<i64>,
}
impl OtaTaskTimeoutConfig {
    /// <p>Specifies the amount of time the device has to finish execution of this task. The timeout interval can be anywhere between 1 minute and 7 days.</p>
    pub fn in_progress_timeout_in_minutes(&self) -> ::std::option::Option<i64> {
        self.in_progress_timeout_in_minutes
    }
}
impl OtaTaskTimeoutConfig {
    /// Creates a new builder-style object to manufacture [`OtaTaskTimeoutConfig`](crate::types::OtaTaskTimeoutConfig).
    pub fn builder() -> crate::types::builders::OtaTaskTimeoutConfigBuilder {
        crate::types::builders::OtaTaskTimeoutConfigBuilder::default()
    }
}

/// A builder for [`OtaTaskTimeoutConfig`](crate::types::OtaTaskTimeoutConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OtaTaskTimeoutConfigBuilder {
    pub(crate) in_progress_timeout_in_minutes: ::std::option::Option<i64>,
}
impl OtaTaskTimeoutConfigBuilder {
    /// <p>Specifies the amount of time the device has to finish execution of this task. The timeout interval can be anywhere between 1 minute and 7 days.</p>
    pub fn in_progress_timeout_in_minutes(mut self, input: i64) -> Self {
        self.in_progress_timeout_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the amount of time the device has to finish execution of this task. The timeout interval can be anywhere between 1 minute and 7 days.</p>
    pub fn set_in_progress_timeout_in_minutes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.in_progress_timeout_in_minutes = input;
        self
    }
    /// <p>Specifies the amount of time the device has to finish execution of this task. The timeout interval can be anywhere between 1 minute and 7 days.</p>
    pub fn get_in_progress_timeout_in_minutes(&self) -> &::std::option::Option<i64> {
        &self.in_progress_timeout_in_minutes
    }
    /// Consumes the builder and constructs a [`OtaTaskTimeoutConfig`](crate::types::OtaTaskTimeoutConfig).
    pub fn build(self) -> crate::types::OtaTaskTimeoutConfig {
        crate::types::OtaTaskTimeoutConfig {
            in_progress_timeout_in_minutes: self.in_progress_timeout_in_minutes,
        }
    }
}
