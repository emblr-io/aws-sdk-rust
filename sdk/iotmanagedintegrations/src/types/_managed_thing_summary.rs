// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Structure representing one managed thing.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ManagedThingSummary {
    /// <p>The id of the device.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the managed thing.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The id of the advertised product.</p>
    pub advertised_product_id: ::std::option::Option<::std::string::String>,
    /// <p>The brand of the device.</p>
    pub brand: ::std::option::Option<::std::string::String>,
    /// <p>The classification of the managed thing such as light bulb or thermostat.</p>
    pub classification: ::std::option::Option<::std::string::String>,
    /// <p>The third-party device id as defined by the connector. This device id must not contain personal identifiable information (PII).</p><note>
    /// <p>This parameter is used for cloud-to-cloud devices only.</p>
    /// </note>
    pub connector_device_id: ::std::option::Option<::std::string::String>,
    /// <p>The id of the connector policy.</p><note>
    /// <p>This parameter is used for cloud-to-cloud devices only.</p>
    /// </note>
    #[deprecated(note = "ConnectorPolicyId has been deprecated", since = "06-25-2025")]
    pub connector_policy_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the connector destination associated with this managed thing, if applicable.</p>
    pub connector_destination_id: ::std::option::Option<::std::string::String>,
    /// <p>The model of the device.</p>
    pub model: ::std::option::Option<::std::string::String>,
    /// <p>The name of the managed thing representing the physical device.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Owner of the device, usually an indication of whom the device belongs to. This value should not contain personal identifiable information.</p>
    pub owner: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the credential locker for the managed thing.</p>
    pub credential_locker_id: ::std::option::Option<::std::string::String>,
    /// <p>Id of the controller device used for the discovery job.</p>
    pub parent_controller_id: ::std::option::Option<::std::string::String>,
    /// <p>The provisioning status of the device in the provisioning workflow for onboarding to IoT managed integrations.</p>
    pub provisioning_status: ::std::option::Option<crate::types::ProvisioningStatus>,
    /// <p>The type of device used. This will be the Amazon Web Services hub controller, cloud device, or IoT device.</p>
    pub role: ::std::option::Option<crate::types::Role>,
    /// <p>The serial number of the device.</p>
    pub serial_number: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp value of when the device creation request occurred.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp value of when the managed thing was last updated at.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestampe value of when the managed thing was activated at.</p>
    pub activated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ManagedThingSummary {
    /// <p>The id of the device.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the managed thing.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The id of the advertised product.</p>
    pub fn advertised_product_id(&self) -> ::std::option::Option<&str> {
        self.advertised_product_id.as_deref()
    }
    /// <p>The brand of the device.</p>
    pub fn brand(&self) -> ::std::option::Option<&str> {
        self.brand.as_deref()
    }
    /// <p>The classification of the managed thing such as light bulb or thermostat.</p>
    pub fn classification(&self) -> ::std::option::Option<&str> {
        self.classification.as_deref()
    }
    /// <p>The third-party device id as defined by the connector. This device id must not contain personal identifiable information (PII).</p><note>
    /// <p>This parameter is used for cloud-to-cloud devices only.</p>
    /// </note>
    pub fn connector_device_id(&self) -> ::std::option::Option<&str> {
        self.connector_device_id.as_deref()
    }
    /// <p>The id of the connector policy.</p><note>
    /// <p>This parameter is used for cloud-to-cloud devices only.</p>
    /// </note>
    #[deprecated(note = "ConnectorPolicyId has been deprecated", since = "06-25-2025")]
    pub fn connector_policy_id(&self) -> ::std::option::Option<&str> {
        self.connector_policy_id.as_deref()
    }
    /// <p>The identifier of the connector destination associated with this managed thing, if applicable.</p>
    pub fn connector_destination_id(&self) -> ::std::option::Option<&str> {
        self.connector_destination_id.as_deref()
    }
    /// <p>The model of the device.</p>
    pub fn model(&self) -> ::std::option::Option<&str> {
        self.model.as_deref()
    }
    /// <p>The name of the managed thing representing the physical device.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Owner of the device, usually an indication of whom the device belongs to. This value should not contain personal identifiable information.</p>
    pub fn owner(&self) -> ::std::option::Option<&str> {
        self.owner.as_deref()
    }
    /// <p>The identifier of the credential locker for the managed thing.</p>
    pub fn credential_locker_id(&self) -> ::std::option::Option<&str> {
        self.credential_locker_id.as_deref()
    }
    /// <p>Id of the controller device used for the discovery job.</p>
    pub fn parent_controller_id(&self) -> ::std::option::Option<&str> {
        self.parent_controller_id.as_deref()
    }
    /// <p>The provisioning status of the device in the provisioning workflow for onboarding to IoT managed integrations.</p>
    pub fn provisioning_status(&self) -> ::std::option::Option<&crate::types::ProvisioningStatus> {
        self.provisioning_status.as_ref()
    }
    /// <p>The type of device used. This will be the Amazon Web Services hub controller, cloud device, or IoT device.</p>
    pub fn role(&self) -> ::std::option::Option<&crate::types::Role> {
        self.role.as_ref()
    }
    /// <p>The serial number of the device.</p>
    pub fn serial_number(&self) -> ::std::option::Option<&str> {
        self.serial_number.as_deref()
    }
    /// <p>The timestamp value of when the device creation request occurred.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp value of when the managed thing was last updated at.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The timestampe value of when the managed thing was activated at.</p>
    pub fn activated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.activated_at.as_ref()
    }
}
impl ::std::fmt::Debug for ManagedThingSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ManagedThingSummary");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("advertised_product_id", &self.advertised_product_id);
        formatter.field("brand", &"*** Sensitive Data Redacted ***");
        formatter.field("classification", &"*** Sensitive Data Redacted ***");
        formatter.field("connector_device_id", &"*** Sensitive Data Redacted ***");
        formatter.field("connector_policy_id", &self.connector_policy_id);
        formatter.field("connector_destination_id", &self.connector_destination_id);
        formatter.field("model", &"*** Sensitive Data Redacted ***");
        formatter.field("name", &self.name);
        formatter.field("owner", &"*** Sensitive Data Redacted ***");
        formatter.field("credential_locker_id", &self.credential_locker_id);
        formatter.field("parent_controller_id", &self.parent_controller_id);
        formatter.field("provisioning_status", &self.provisioning_status);
        formatter.field("role", &self.role);
        formatter.field("serial_number", &"*** Sensitive Data Redacted ***");
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("activated_at", &self.activated_at);
        formatter.finish()
    }
}
impl ManagedThingSummary {
    /// Creates a new builder-style object to manufacture [`ManagedThingSummary`](crate::types::ManagedThingSummary).
    pub fn builder() -> crate::types::builders::ManagedThingSummaryBuilder {
        crate::types::builders::ManagedThingSummaryBuilder::default()
    }
}

/// A builder for [`ManagedThingSummary`](crate::types::ManagedThingSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ManagedThingSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) advertised_product_id: ::std::option::Option<::std::string::String>,
    pub(crate) brand: ::std::option::Option<::std::string::String>,
    pub(crate) classification: ::std::option::Option<::std::string::String>,
    pub(crate) connector_device_id: ::std::option::Option<::std::string::String>,
    pub(crate) connector_policy_id: ::std::option::Option<::std::string::String>,
    pub(crate) connector_destination_id: ::std::option::Option<::std::string::String>,
    pub(crate) model: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) owner: ::std::option::Option<::std::string::String>,
    pub(crate) credential_locker_id: ::std::option::Option<::std::string::String>,
    pub(crate) parent_controller_id: ::std::option::Option<::std::string::String>,
    pub(crate) provisioning_status: ::std::option::Option<crate::types::ProvisioningStatus>,
    pub(crate) role: ::std::option::Option<crate::types::Role>,
    pub(crate) serial_number: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) activated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ManagedThingSummaryBuilder {
    /// <p>The id of the device.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The id of the device.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The id of the device.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The Amazon Resource Name (ARN) of the managed thing.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the managed thing.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the managed thing.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The id of the advertised product.</p>
    pub fn advertised_product_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.advertised_product_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The id of the advertised product.</p>
    pub fn set_advertised_product_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.advertised_product_id = input;
        self
    }
    /// <p>The id of the advertised product.</p>
    pub fn get_advertised_product_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.advertised_product_id
    }
    /// <p>The brand of the device.</p>
    pub fn brand(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.brand = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The brand of the device.</p>
    pub fn set_brand(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.brand = input;
        self
    }
    /// <p>The brand of the device.</p>
    pub fn get_brand(&self) -> &::std::option::Option<::std::string::String> {
        &self.brand
    }
    /// <p>The classification of the managed thing such as light bulb or thermostat.</p>
    pub fn classification(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.classification = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The classification of the managed thing such as light bulb or thermostat.</p>
    pub fn set_classification(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.classification = input;
        self
    }
    /// <p>The classification of the managed thing such as light bulb or thermostat.</p>
    pub fn get_classification(&self) -> &::std::option::Option<::std::string::String> {
        &self.classification
    }
    /// <p>The third-party device id as defined by the connector. This device id must not contain personal identifiable information (PII).</p><note>
    /// <p>This parameter is used for cloud-to-cloud devices only.</p>
    /// </note>
    pub fn connector_device_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_device_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The third-party device id as defined by the connector. This device id must not contain personal identifiable information (PII).</p><note>
    /// <p>This parameter is used for cloud-to-cloud devices only.</p>
    /// </note>
    pub fn set_connector_device_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_device_id = input;
        self
    }
    /// <p>The third-party device id as defined by the connector. This device id must not contain personal identifiable information (PII).</p><note>
    /// <p>This parameter is used for cloud-to-cloud devices only.</p>
    /// </note>
    pub fn get_connector_device_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_device_id
    }
    /// <p>The id of the connector policy.</p><note>
    /// <p>This parameter is used for cloud-to-cloud devices only.</p>
    /// </note>
    #[deprecated(note = "ConnectorPolicyId has been deprecated", since = "06-25-2025")]
    pub fn connector_policy_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_policy_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The id of the connector policy.</p><note>
    /// <p>This parameter is used for cloud-to-cloud devices only.</p>
    /// </note>
    #[deprecated(note = "ConnectorPolicyId has been deprecated", since = "06-25-2025")]
    pub fn set_connector_policy_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_policy_id = input;
        self
    }
    /// <p>The id of the connector policy.</p><note>
    /// <p>This parameter is used for cloud-to-cloud devices only.</p>
    /// </note>
    #[deprecated(note = "ConnectorPolicyId has been deprecated", since = "06-25-2025")]
    pub fn get_connector_policy_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_policy_id
    }
    /// <p>The identifier of the connector destination associated with this managed thing, if applicable.</p>
    pub fn connector_destination_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_destination_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the connector destination associated with this managed thing, if applicable.</p>
    pub fn set_connector_destination_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_destination_id = input;
        self
    }
    /// <p>The identifier of the connector destination associated with this managed thing, if applicable.</p>
    pub fn get_connector_destination_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_destination_id
    }
    /// <p>The model of the device.</p>
    pub fn model(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The model of the device.</p>
    pub fn set_model(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model = input;
        self
    }
    /// <p>The model of the device.</p>
    pub fn get_model(&self) -> &::std::option::Option<::std::string::String> {
        &self.model
    }
    /// <p>The name of the managed thing representing the physical device.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the managed thing representing the physical device.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the managed thing representing the physical device.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Owner of the device, usually an indication of whom the device belongs to. This value should not contain personal identifiable information.</p>
    pub fn owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Owner of the device, usually an indication of whom the device belongs to. This value should not contain personal identifiable information.</p>
    pub fn set_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner = input;
        self
    }
    /// <p>Owner of the device, usually an indication of whom the device belongs to. This value should not contain personal identifiable information.</p>
    pub fn get_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner
    }
    /// <p>The identifier of the credential locker for the managed thing.</p>
    pub fn credential_locker_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.credential_locker_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the credential locker for the managed thing.</p>
    pub fn set_credential_locker_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.credential_locker_id = input;
        self
    }
    /// <p>The identifier of the credential locker for the managed thing.</p>
    pub fn get_credential_locker_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.credential_locker_id
    }
    /// <p>Id of the controller device used for the discovery job.</p>
    pub fn parent_controller_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parent_controller_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Id of the controller device used for the discovery job.</p>
    pub fn set_parent_controller_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parent_controller_id = input;
        self
    }
    /// <p>Id of the controller device used for the discovery job.</p>
    pub fn get_parent_controller_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.parent_controller_id
    }
    /// <p>The provisioning status of the device in the provisioning workflow for onboarding to IoT managed integrations.</p>
    pub fn provisioning_status(mut self, input: crate::types::ProvisioningStatus) -> Self {
        self.provisioning_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The provisioning status of the device in the provisioning workflow for onboarding to IoT managed integrations.</p>
    pub fn set_provisioning_status(mut self, input: ::std::option::Option<crate::types::ProvisioningStatus>) -> Self {
        self.provisioning_status = input;
        self
    }
    /// <p>The provisioning status of the device in the provisioning workflow for onboarding to IoT managed integrations.</p>
    pub fn get_provisioning_status(&self) -> &::std::option::Option<crate::types::ProvisioningStatus> {
        &self.provisioning_status
    }
    /// <p>The type of device used. This will be the Amazon Web Services hub controller, cloud device, or IoT device.</p>
    pub fn role(mut self, input: crate::types::Role) -> Self {
        self.role = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of device used. This will be the Amazon Web Services hub controller, cloud device, or IoT device.</p>
    pub fn set_role(mut self, input: ::std::option::Option<crate::types::Role>) -> Self {
        self.role = input;
        self
    }
    /// <p>The type of device used. This will be the Amazon Web Services hub controller, cloud device, or IoT device.</p>
    pub fn get_role(&self) -> &::std::option::Option<crate::types::Role> {
        &self.role
    }
    /// <p>The serial number of the device.</p>
    pub fn serial_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.serial_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The serial number of the device.</p>
    pub fn set_serial_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.serial_number = input;
        self
    }
    /// <p>The serial number of the device.</p>
    pub fn get_serial_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.serial_number
    }
    /// <p>The timestamp value of when the device creation request occurred.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp value of when the device creation request occurred.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp value of when the device creation request occurred.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp value of when the managed thing was last updated at.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp value of when the managed thing was last updated at.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp value of when the managed thing was last updated at.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The timestampe value of when the managed thing was activated at.</p>
    pub fn activated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.activated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestampe value of when the managed thing was activated at.</p>
    pub fn set_activated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.activated_at = input;
        self
    }
    /// <p>The timestampe value of when the managed thing was activated at.</p>
    pub fn get_activated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.activated_at
    }
    /// Consumes the builder and constructs a [`ManagedThingSummary`](crate::types::ManagedThingSummary).
    pub fn build(self) -> crate::types::ManagedThingSummary {
        crate::types::ManagedThingSummary {
            id: self.id,
            arn: self.arn,
            advertised_product_id: self.advertised_product_id,
            brand: self.brand,
            classification: self.classification,
            connector_device_id: self.connector_device_id,
            connector_policy_id: self.connector_policy_id,
            connector_destination_id: self.connector_destination_id,
            model: self.model,
            name: self.name,
            owner: self.owner,
            credential_locker_id: self.credential_locker_id,
            parent_controller_id: self.parent_controller_id,
            provisioning_status: self.provisioning_status,
            role: self.role,
            serial_number: self.serial_number,
            created_at: self.created_at,
            updated_at: self.updated_at,
            activated_at: self.activated_at,
        }
    }
}
impl ::std::fmt::Debug for ManagedThingSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ManagedThingSummaryBuilder");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("advertised_product_id", &self.advertised_product_id);
        formatter.field("brand", &"*** Sensitive Data Redacted ***");
        formatter.field("classification", &"*** Sensitive Data Redacted ***");
        formatter.field("connector_device_id", &"*** Sensitive Data Redacted ***");
        formatter.field("connector_policy_id", &self.connector_policy_id);
        formatter.field("connector_destination_id", &self.connector_destination_id);
        formatter.field("model", &"*** Sensitive Data Redacted ***");
        formatter.field("name", &self.name);
        formatter.field("owner", &"*** Sensitive Data Redacted ***");
        formatter.field("credential_locker_id", &self.credential_locker_id);
        formatter.field("parent_controller_id", &self.parent_controller_id);
        formatter.field("provisioning_status", &self.provisioning_status);
        formatter.field("role", &self.role);
        formatter.field("serial_number", &"*** Sensitive Data Redacted ***");
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("activated_at", &self.activated_at);
        formatter.finish()
    }
}
