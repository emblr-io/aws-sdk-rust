// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Capability used in Matter capability report.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MatterCapabilityReportCluster {
    /// <p>The id of the Amazon Web Services Matter capability report cluster.</p>
    pub id: ::std::string::String,
    /// <p>The id of the revision for the Amazon Web Services Matter capability report.</p>
    pub revision: i32,
    /// <p>The id of the schema version.</p>
    pub public_id: ::std::option::Option<::std::string::String>,
    /// <p>The capability name used in the Amazon Web Services Matter capability report.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The spec version used in the Amazon Web Services Matter capability report.</p>
    pub spec_version: ::std::option::Option<::std::string::String>,
    /// <p>The attributes of the Amazon Web Services Matter capability report.</p>
    pub attributes: ::std::option::Option<::std::vec::Vec<crate::types::MatterCapabilityReportAttribute>>,
    /// <p>The commands used with the Amazon Web Services Matter capability report.</p>
    pub commands: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The events used with the Amazon Web Services Matter capability report.</p>
    pub events: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>32 bit-map used to indicate which features a cluster supports.</p>
    pub feature_map: ::std::option::Option<i64>,
    /// <p>Matter clusters used in capability report.</p>
    pub generated_commands: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The fabric index for the Amazon Web Services Matter capability report.</p>
    pub fabric_index: ::std::option::Option<i32>,
}
impl MatterCapabilityReportCluster {
    /// <p>The id of the Amazon Web Services Matter capability report cluster.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The id of the revision for the Amazon Web Services Matter capability report.</p>
    pub fn revision(&self) -> i32 {
        self.revision
    }
    /// <p>The id of the schema version.</p>
    pub fn public_id(&self) -> ::std::option::Option<&str> {
        self.public_id.as_deref()
    }
    /// <p>The capability name used in the Amazon Web Services Matter capability report.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The spec version used in the Amazon Web Services Matter capability report.</p>
    pub fn spec_version(&self) -> ::std::option::Option<&str> {
        self.spec_version.as_deref()
    }
    /// <p>The attributes of the Amazon Web Services Matter capability report.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attributes.is_none()`.
    pub fn attributes(&self) -> &[crate::types::MatterCapabilityReportAttribute] {
        self.attributes.as_deref().unwrap_or_default()
    }
    /// <p>The commands used with the Amazon Web Services Matter capability report.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.commands.is_none()`.
    pub fn commands(&self) -> &[::std::string::String] {
        self.commands.as_deref().unwrap_or_default()
    }
    /// <p>The events used with the Amazon Web Services Matter capability report.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.events.is_none()`.
    pub fn events(&self) -> &[::std::string::String] {
        self.events.as_deref().unwrap_or_default()
    }
    /// <p>32 bit-map used to indicate which features a cluster supports.</p>
    pub fn feature_map(&self) -> ::std::option::Option<i64> {
        self.feature_map
    }
    /// <p>Matter clusters used in capability report.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.generated_commands.is_none()`.
    pub fn generated_commands(&self) -> &[::std::string::String] {
        self.generated_commands.as_deref().unwrap_or_default()
    }
    /// <p>The fabric index for the Amazon Web Services Matter capability report.</p>
    pub fn fabric_index(&self) -> ::std::option::Option<i32> {
        self.fabric_index
    }
}
impl MatterCapabilityReportCluster {
    /// Creates a new builder-style object to manufacture [`MatterCapabilityReportCluster`](crate::types::MatterCapabilityReportCluster).
    pub fn builder() -> crate::types::builders::MatterCapabilityReportClusterBuilder {
        crate::types::builders::MatterCapabilityReportClusterBuilder::default()
    }
}

/// A builder for [`MatterCapabilityReportCluster`](crate::types::MatterCapabilityReportCluster).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MatterCapabilityReportClusterBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) revision: ::std::option::Option<i32>,
    pub(crate) public_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) spec_version: ::std::option::Option<::std::string::String>,
    pub(crate) attributes: ::std::option::Option<::std::vec::Vec<crate::types::MatterCapabilityReportAttribute>>,
    pub(crate) commands: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) events: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) feature_map: ::std::option::Option<i64>,
    pub(crate) generated_commands: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) fabric_index: ::std::option::Option<i32>,
}
impl MatterCapabilityReportClusterBuilder {
    /// <p>The id of the Amazon Web Services Matter capability report cluster.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The id of the Amazon Web Services Matter capability report cluster.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The id of the Amazon Web Services Matter capability report cluster.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The id of the revision for the Amazon Web Services Matter capability report.</p>
    /// This field is required.
    pub fn revision(mut self, input: i32) -> Self {
        self.revision = ::std::option::Option::Some(input);
        self
    }
    /// <p>The id of the revision for the Amazon Web Services Matter capability report.</p>
    pub fn set_revision(mut self, input: ::std::option::Option<i32>) -> Self {
        self.revision = input;
        self
    }
    /// <p>The id of the revision for the Amazon Web Services Matter capability report.</p>
    pub fn get_revision(&self) -> &::std::option::Option<i32> {
        &self.revision
    }
    /// <p>The id of the schema version.</p>
    pub fn public_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The id of the schema version.</p>
    pub fn set_public_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_id = input;
        self
    }
    /// <p>The id of the schema version.</p>
    pub fn get_public_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_id
    }
    /// <p>The capability name used in the Amazon Web Services Matter capability report.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The capability name used in the Amazon Web Services Matter capability report.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The capability name used in the Amazon Web Services Matter capability report.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The spec version used in the Amazon Web Services Matter capability report.</p>
    pub fn spec_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.spec_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The spec version used in the Amazon Web Services Matter capability report.</p>
    pub fn set_spec_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.spec_version = input;
        self
    }
    /// <p>The spec version used in the Amazon Web Services Matter capability report.</p>
    pub fn get_spec_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.spec_version
    }
    /// Appends an item to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>The attributes of the Amazon Web Services Matter capability report.</p>
    pub fn attributes(mut self, input: crate::types::MatterCapabilityReportAttribute) -> Self {
        let mut v = self.attributes.unwrap_or_default();
        v.push(input);
        self.attributes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The attributes of the Amazon Web Services Matter capability report.</p>
    pub fn set_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MatterCapabilityReportAttribute>>) -> Self {
        self.attributes = input;
        self
    }
    /// <p>The attributes of the Amazon Web Services Matter capability report.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MatterCapabilityReportAttribute>> {
        &self.attributes
    }
    /// Appends an item to `commands`.
    ///
    /// To override the contents of this collection use [`set_commands`](Self::set_commands).
    ///
    /// <p>The commands used with the Amazon Web Services Matter capability report.</p>
    pub fn commands(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.commands.unwrap_or_default();
        v.push(input.into());
        self.commands = ::std::option::Option::Some(v);
        self
    }
    /// <p>The commands used with the Amazon Web Services Matter capability report.</p>
    pub fn set_commands(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.commands = input;
        self
    }
    /// <p>The commands used with the Amazon Web Services Matter capability report.</p>
    pub fn get_commands(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.commands
    }
    /// Appends an item to `events`.
    ///
    /// To override the contents of this collection use [`set_events`](Self::set_events).
    ///
    /// <p>The events used with the Amazon Web Services Matter capability report.</p>
    pub fn events(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.events.unwrap_or_default();
        v.push(input.into());
        self.events = ::std::option::Option::Some(v);
        self
    }
    /// <p>The events used with the Amazon Web Services Matter capability report.</p>
    pub fn set_events(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.events = input;
        self
    }
    /// <p>The events used with the Amazon Web Services Matter capability report.</p>
    pub fn get_events(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.events
    }
    /// <p>32 bit-map used to indicate which features a cluster supports.</p>
    pub fn feature_map(mut self, input: i64) -> Self {
        self.feature_map = ::std::option::Option::Some(input);
        self
    }
    /// <p>32 bit-map used to indicate which features a cluster supports.</p>
    pub fn set_feature_map(mut self, input: ::std::option::Option<i64>) -> Self {
        self.feature_map = input;
        self
    }
    /// <p>32 bit-map used to indicate which features a cluster supports.</p>
    pub fn get_feature_map(&self) -> &::std::option::Option<i64> {
        &self.feature_map
    }
    /// Appends an item to `generated_commands`.
    ///
    /// To override the contents of this collection use [`set_generated_commands`](Self::set_generated_commands).
    ///
    /// <p>Matter clusters used in capability report.</p>
    pub fn generated_commands(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.generated_commands.unwrap_or_default();
        v.push(input.into());
        self.generated_commands = ::std::option::Option::Some(v);
        self
    }
    /// <p>Matter clusters used in capability report.</p>
    pub fn set_generated_commands(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.generated_commands = input;
        self
    }
    /// <p>Matter clusters used in capability report.</p>
    pub fn get_generated_commands(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.generated_commands
    }
    /// <p>The fabric index for the Amazon Web Services Matter capability report.</p>
    pub fn fabric_index(mut self, input: i32) -> Self {
        self.fabric_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>The fabric index for the Amazon Web Services Matter capability report.</p>
    pub fn set_fabric_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.fabric_index = input;
        self
    }
    /// <p>The fabric index for the Amazon Web Services Matter capability report.</p>
    pub fn get_fabric_index(&self) -> &::std::option::Option<i32> {
        &self.fabric_index
    }
    /// Consumes the builder and constructs a [`MatterCapabilityReportCluster`](crate::types::MatterCapabilityReportCluster).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::MatterCapabilityReportClusterBuilder::id)
    /// - [`revision`](crate::types::builders::MatterCapabilityReportClusterBuilder::revision)
    pub fn build(self) -> ::std::result::Result<crate::types::MatterCapabilityReportCluster, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MatterCapabilityReportCluster {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building MatterCapabilityReportCluster",
                )
            })?,
            revision: self.revision.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "revision",
                    "revision was not specified but it is required when building MatterCapabilityReportCluster",
                )
            })?,
            public_id: self.public_id,
            name: self.name,
            spec_version: self.spec_version,
            attributes: self.attributes,
            commands: self.commands,
            events: self.events,
            feature_map: self.feature_map,
            generated_commands: self.generated_commands,
            fabric_index: self.fabric_index,
        })
    }
}
