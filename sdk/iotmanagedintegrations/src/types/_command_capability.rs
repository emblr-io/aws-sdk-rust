// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The command capabilities added for the managed thing</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CommandCapability {
    /// <p>Describe the capability with an id.</p>
    pub id: ::std::string::String,
    /// <p>Describe the capability with an name.</p>
    pub name: ::std::string::String,
    /// <p>Describe the capability with a version.</p>
    pub version: ::std::string::String,
    /// <p>Describe the command capability with the actions it supports.</p>
    pub actions: ::std::vec::Vec<crate::types::CapabilityAction>,
}
impl CommandCapability {
    /// <p>Describe the capability with an id.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>Describe the capability with an name.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Describe the capability with a version.</p>
    pub fn version(&self) -> &str {
        use std::ops::Deref;
        self.version.deref()
    }
    /// <p>Describe the command capability with the actions it supports.</p>
    pub fn actions(&self) -> &[crate::types::CapabilityAction] {
        use std::ops::Deref;
        self.actions.deref()
    }
}
impl CommandCapability {
    /// Creates a new builder-style object to manufacture [`CommandCapability`](crate::types::CommandCapability).
    pub fn builder() -> crate::types::builders::CommandCapabilityBuilder {
        crate::types::builders::CommandCapabilityBuilder::default()
    }
}

/// A builder for [`CommandCapability`](crate::types::CommandCapability).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CommandCapabilityBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<crate::types::CapabilityAction>>,
}
impl CommandCapabilityBuilder {
    /// <p>Describe the capability with an id.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describe the capability with an id.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>Describe the capability with an id.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Describe the capability with an name.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describe the capability with an name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Describe the capability with an name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Describe the capability with a version.</p>
    /// This field is required.
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describe the capability with a version.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>Describe the capability with a version.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>Describe the command capability with the actions it supports.</p>
    pub fn actions(mut self, input: crate::types::CapabilityAction) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Describe the command capability with the actions it supports.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CapabilityAction>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>Describe the command capability with the actions it supports.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CapabilityAction>> {
        &self.actions
    }
    /// Consumes the builder and constructs a [`CommandCapability`](crate::types::CommandCapability).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::CommandCapabilityBuilder::id)
    /// - [`name`](crate::types::builders::CommandCapabilityBuilder::name)
    /// - [`version`](crate::types::builders::CommandCapabilityBuilder::version)
    /// - [`actions`](crate::types::builders::CommandCapabilityBuilder::actions)
    pub fn build(self) -> ::std::result::Result<crate::types::CommandCapability, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CommandCapability {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building CommandCapability",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CommandCapability",
                )
            })?,
            version: self.version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "version",
                    "version was not specified but it is required when building CommandCapability",
                )
            })?,
            actions: self.actions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "actions",
                    "actions was not specified but it is required when building CommandCapability",
                )
            })?,
        })
    }
}
