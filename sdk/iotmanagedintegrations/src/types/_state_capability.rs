// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>State capabilities added for the managed thing.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct StateCapability {
    /// <p>The id of the managed thing in the capability report.</p>
    pub id: ::std::string::String,
    /// <p>Name for the Amazon Web Services capability.</p>
    pub name: ::std::string::String,
    /// <p>Version for the Amazon Web Services capability.</p>
    pub version: ::std::string::String,
    /// <p>Describe the command capability with the properties it supports.</p>
    pub properties: ::std::option::Option<::aws_smithy_types::Document>,
}
impl StateCapability {
    /// <p>The id of the managed thing in the capability report.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>Name for the Amazon Web Services capability.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Version for the Amazon Web Services capability.</p>
    pub fn version(&self) -> &str {
        use std::ops::Deref;
        self.version.deref()
    }
    /// <p>Describe the command capability with the properties it supports.</p>
    pub fn properties(&self) -> ::std::option::Option<&::aws_smithy_types::Document> {
        self.properties.as_ref()
    }
}
impl ::std::fmt::Debug for StateCapability {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StateCapability");
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("version", &self.version);
        formatter.field("properties", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl StateCapability {
    /// Creates a new builder-style object to manufacture [`StateCapability`](crate::types::StateCapability).
    pub fn builder() -> crate::types::builders::StateCapabilityBuilder {
        crate::types::builders::StateCapabilityBuilder::default()
    }
}

/// A builder for [`StateCapability`](crate::types::StateCapability).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct StateCapabilityBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) properties: ::std::option::Option<::aws_smithy_types::Document>,
}
impl StateCapabilityBuilder {
    /// <p>The id of the managed thing in the capability report.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The id of the managed thing in the capability report.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The id of the managed thing in the capability report.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Name for the Amazon Web Services capability.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name for the Amazon Web Services capability.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name for the Amazon Web Services capability.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Version for the Amazon Web Services capability.</p>
    /// This field is required.
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Version for the Amazon Web Services capability.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>Version for the Amazon Web Services capability.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>Describe the command capability with the properties it supports.</p>
    pub fn properties(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describe the command capability with the properties it supports.</p>
    pub fn set_properties(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.properties = input;
        self
    }
    /// <p>Describe the command capability with the properties it supports.</p>
    pub fn get_properties(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.properties
    }
    /// Consumes the builder and constructs a [`StateCapability`](crate::types::StateCapability).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::StateCapabilityBuilder::id)
    /// - [`name`](crate::types::builders::StateCapabilityBuilder::name)
    /// - [`version`](crate::types::builders::StateCapabilityBuilder::version)
    pub fn build(self) -> ::std::result::Result<crate::types::StateCapability, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::StateCapability {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building StateCapability",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building StateCapability",
                )
            })?,
            version: self.version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "version",
                    "version was not specified but it is required when building StateCapability",
                )
            })?,
            properties: self.properties,
        })
    }
}
impl ::std::fmt::Debug for StateCapabilityBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StateCapabilityBuilder");
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("version", &self.version);
        formatter.field("properties", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
