// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Structure describing a managed thing.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MatterEndpoint {
    /// <p>The Matter endpoint id.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>A list of Matter clusters for a managed thing.</p>
    pub clusters: ::std::option::Option<::std::vec::Vec<crate::types::MatterCluster>>,
}
impl MatterEndpoint {
    /// <p>The Matter endpoint id.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>A list of Matter clusters for a managed thing.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.clusters.is_none()`.
    pub fn clusters(&self) -> &[crate::types::MatterCluster] {
        self.clusters.as_deref().unwrap_or_default()
    }
}
impl MatterEndpoint {
    /// Creates a new builder-style object to manufacture [`MatterEndpoint`](crate::types::MatterEndpoint).
    pub fn builder() -> crate::types::builders::MatterEndpointBuilder {
        crate::types::builders::MatterEndpointBuilder::default()
    }
}

/// A builder for [`MatterEndpoint`](crate::types::MatterEndpoint).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MatterEndpointBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) clusters: ::std::option::Option<::std::vec::Vec<crate::types::MatterCluster>>,
}
impl MatterEndpointBuilder {
    /// <p>The Matter endpoint id.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Matter endpoint id.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The Matter endpoint id.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Appends an item to `clusters`.
    ///
    /// To override the contents of this collection use [`set_clusters`](Self::set_clusters).
    ///
    /// <p>A list of Matter clusters for a managed thing.</p>
    pub fn clusters(mut self, input: crate::types::MatterCluster) -> Self {
        let mut v = self.clusters.unwrap_or_default();
        v.push(input);
        self.clusters = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Matter clusters for a managed thing.</p>
    pub fn set_clusters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MatterCluster>>) -> Self {
        self.clusters = input;
        self
    }
    /// <p>A list of Matter clusters for a managed thing.</p>
    pub fn get_clusters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MatterCluster>> {
        &self.clusters
    }
    /// Consumes the builder and constructs a [`MatterEndpoint`](crate::types::MatterEndpoint).
    pub fn build(self) -> crate::types::MatterEndpoint {
        crate::types::MatterEndpoint {
            id: self.id,
            clusters: self.clusters,
        }
    }
}
