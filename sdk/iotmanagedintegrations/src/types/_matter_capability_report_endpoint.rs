// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Matter endpoint used in capability report.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MatterCapabilityReportEndpoint {
    /// <p>The id of the Amazon Web Services Matter capability report endpoint.</p>
    pub id: ::std::string::String,
    /// <p>The type of device.</p>
    pub device_types: ::std::vec::Vec<::std::string::String>,
    /// <p>Matter clusters used in capability report.</p>
    pub clusters: ::std::vec::Vec<crate::types::MatterCapabilityReportCluster>,
    /// <p>Heirachy of child endpoints contained in the given endpoint.</p>
    pub parts: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Semantic information related to endpoint.</p>
    pub semantic_tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Semantic information related to endpoint.</p>
    pub client_clusters: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl MatterCapabilityReportEndpoint {
    /// <p>The id of the Amazon Web Services Matter capability report endpoint.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The type of device.</p>
    pub fn device_types(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.device_types.deref()
    }
    /// <p>Matter clusters used in capability report.</p>
    pub fn clusters(&self) -> &[crate::types::MatterCapabilityReportCluster] {
        use std::ops::Deref;
        self.clusters.deref()
    }
    /// <p>Heirachy of child endpoints contained in the given endpoint.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.parts.is_none()`.
    pub fn parts(&self) -> &[::std::string::String] {
        self.parts.as_deref().unwrap_or_default()
    }
    /// <p>Semantic information related to endpoint.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.semantic_tags.is_none()`.
    pub fn semantic_tags(&self) -> &[::std::string::String] {
        self.semantic_tags.as_deref().unwrap_or_default()
    }
    /// <p>Semantic information related to endpoint.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.client_clusters.is_none()`.
    pub fn client_clusters(&self) -> &[::std::string::String] {
        self.client_clusters.as_deref().unwrap_or_default()
    }
}
impl MatterCapabilityReportEndpoint {
    /// Creates a new builder-style object to manufacture [`MatterCapabilityReportEndpoint`](crate::types::MatterCapabilityReportEndpoint).
    pub fn builder() -> crate::types::builders::MatterCapabilityReportEndpointBuilder {
        crate::types::builders::MatterCapabilityReportEndpointBuilder::default()
    }
}

/// A builder for [`MatterCapabilityReportEndpoint`](crate::types::MatterCapabilityReportEndpoint).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MatterCapabilityReportEndpointBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) device_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) clusters: ::std::option::Option<::std::vec::Vec<crate::types::MatterCapabilityReportCluster>>,
    pub(crate) parts: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) semantic_tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) client_clusters: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl MatterCapabilityReportEndpointBuilder {
    /// <p>The id of the Amazon Web Services Matter capability report endpoint.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The id of the Amazon Web Services Matter capability report endpoint.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The id of the Amazon Web Services Matter capability report endpoint.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Appends an item to `device_types`.
    ///
    /// To override the contents of this collection use [`set_device_types`](Self::set_device_types).
    ///
    /// <p>The type of device.</p>
    pub fn device_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.device_types.unwrap_or_default();
        v.push(input.into());
        self.device_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The type of device.</p>
    pub fn set_device_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.device_types = input;
        self
    }
    /// <p>The type of device.</p>
    pub fn get_device_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.device_types
    }
    /// Appends an item to `clusters`.
    ///
    /// To override the contents of this collection use [`set_clusters`](Self::set_clusters).
    ///
    /// <p>Matter clusters used in capability report.</p>
    pub fn clusters(mut self, input: crate::types::MatterCapabilityReportCluster) -> Self {
        let mut v = self.clusters.unwrap_or_default();
        v.push(input);
        self.clusters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Matter clusters used in capability report.</p>
    pub fn set_clusters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MatterCapabilityReportCluster>>) -> Self {
        self.clusters = input;
        self
    }
    /// <p>Matter clusters used in capability report.</p>
    pub fn get_clusters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MatterCapabilityReportCluster>> {
        &self.clusters
    }
    /// Appends an item to `parts`.
    ///
    /// To override the contents of this collection use [`set_parts`](Self::set_parts).
    ///
    /// <p>Heirachy of child endpoints contained in the given endpoint.</p>
    pub fn parts(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.parts.unwrap_or_default();
        v.push(input.into());
        self.parts = ::std::option::Option::Some(v);
        self
    }
    /// <p>Heirachy of child endpoints contained in the given endpoint.</p>
    pub fn set_parts(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.parts = input;
        self
    }
    /// <p>Heirachy of child endpoints contained in the given endpoint.</p>
    pub fn get_parts(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.parts
    }
    /// Appends an item to `semantic_tags`.
    ///
    /// To override the contents of this collection use [`set_semantic_tags`](Self::set_semantic_tags).
    ///
    /// <p>Semantic information related to endpoint.</p>
    pub fn semantic_tags(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.semantic_tags.unwrap_or_default();
        v.push(input.into());
        self.semantic_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Semantic information related to endpoint.</p>
    pub fn set_semantic_tags(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.semantic_tags = input;
        self
    }
    /// <p>Semantic information related to endpoint.</p>
    pub fn get_semantic_tags(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.semantic_tags
    }
    /// Appends an item to `client_clusters`.
    ///
    /// To override the contents of this collection use [`set_client_clusters`](Self::set_client_clusters).
    ///
    /// <p>Semantic information related to endpoint.</p>
    pub fn client_clusters(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.client_clusters.unwrap_or_default();
        v.push(input.into());
        self.client_clusters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Semantic information related to endpoint.</p>
    pub fn set_client_clusters(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.client_clusters = input;
        self
    }
    /// <p>Semantic information related to endpoint.</p>
    pub fn get_client_clusters(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.client_clusters
    }
    /// Consumes the builder and constructs a [`MatterCapabilityReportEndpoint`](crate::types::MatterCapabilityReportEndpoint).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::MatterCapabilityReportEndpointBuilder::id)
    /// - [`device_types`](crate::types::builders::MatterCapabilityReportEndpointBuilder::device_types)
    /// - [`clusters`](crate::types::builders::MatterCapabilityReportEndpointBuilder::clusters)
    pub fn build(self) -> ::std::result::Result<crate::types::MatterCapabilityReportEndpoint, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MatterCapabilityReportEndpoint {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building MatterCapabilityReportEndpoint",
                )
            })?,
            device_types: self.device_types.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "device_types",
                    "device_types was not specified but it is required when building MatterCapabilityReportEndpoint",
                )
            })?,
            clusters: self.clusters.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "clusters",
                    "clusters was not specified but it is required when building MatterCapabilityReportEndpoint",
                )
            })?,
            parts: self.parts,
            semantic_tags: self.semantic_tags,
            client_clusters: self.client_clusters,
        })
    }
}
