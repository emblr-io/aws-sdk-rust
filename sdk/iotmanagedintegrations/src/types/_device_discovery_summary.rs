// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Structure containing summary information about a device discovery job, including its identifier, type, and status.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeviceDiscoverySummary {
    /// <p>The unique identifier of the device discovery job.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The type of discovery process used to find devices.</p>
    pub discovery_type: ::std::option::Option<crate::types::DiscoveryType>,
    /// <p>The current status of the device discovery job.</p>
    pub status: ::std::option::Option<crate::types::DeviceDiscoveryStatus>,
}
impl DeviceDiscoverySummary {
    /// <p>The unique identifier of the device discovery job.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The type of discovery process used to find devices.</p>
    pub fn discovery_type(&self) -> ::std::option::Option<&crate::types::DiscoveryType> {
        self.discovery_type.as_ref()
    }
    /// <p>The current status of the device discovery job.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::DeviceDiscoveryStatus> {
        self.status.as_ref()
    }
}
impl DeviceDiscoverySummary {
    /// Creates a new builder-style object to manufacture [`DeviceDiscoverySummary`](crate::types::DeviceDiscoverySummary).
    pub fn builder() -> crate::types::builders::DeviceDiscoverySummaryBuilder {
        crate::types::builders::DeviceDiscoverySummaryBuilder::default()
    }
}

/// A builder for [`DeviceDiscoverySummary`](crate::types::DeviceDiscoverySummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeviceDiscoverySummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) discovery_type: ::std::option::Option<crate::types::DiscoveryType>,
    pub(crate) status: ::std::option::Option<crate::types::DeviceDiscoveryStatus>,
}
impl DeviceDiscoverySummaryBuilder {
    /// <p>The unique identifier of the device discovery job.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the device discovery job.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the device discovery job.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The type of discovery process used to find devices.</p>
    pub fn discovery_type(mut self, input: crate::types::DiscoveryType) -> Self {
        self.discovery_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of discovery process used to find devices.</p>
    pub fn set_discovery_type(mut self, input: ::std::option::Option<crate::types::DiscoveryType>) -> Self {
        self.discovery_type = input;
        self
    }
    /// <p>The type of discovery process used to find devices.</p>
    pub fn get_discovery_type(&self) -> &::std::option::Option<crate::types::DiscoveryType> {
        &self.discovery_type
    }
    /// <p>The current status of the device discovery job.</p>
    pub fn status(mut self, input: crate::types::DeviceDiscoveryStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the device discovery job.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DeviceDiscoveryStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the device discovery job.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DeviceDiscoveryStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`DeviceDiscoverySummary`](crate::types::DeviceDiscoverySummary).
    pub fn build(self) -> crate::types::DeviceDiscoverySummary {
        crate::types::DeviceDiscoverySummary {
            id: self.id,
            discovery_type: self.discovery_type,
            status: self.status,
        }
    }
}
