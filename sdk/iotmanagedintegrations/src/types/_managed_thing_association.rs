// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Structure representing an association between a managed thing and an account association, which connects a device to a third-party account.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ManagedThingAssociation {
    /// <p>The identifier of the managed thing in the association.</p>
    pub managed_thing_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the account association in the association.</p>
    pub account_association_id: ::std::option::Option<::std::string::String>,
}
impl ManagedThingAssociation {
    /// <p>The identifier of the managed thing in the association.</p>
    pub fn managed_thing_id(&self) -> ::std::option::Option<&str> {
        self.managed_thing_id.as_deref()
    }
    /// <p>The identifier of the account association in the association.</p>
    pub fn account_association_id(&self) -> ::std::option::Option<&str> {
        self.account_association_id.as_deref()
    }
}
impl ManagedThingAssociation {
    /// Creates a new builder-style object to manufacture [`ManagedThingAssociation`](crate::types::ManagedThingAssociation).
    pub fn builder() -> crate::types::builders::ManagedThingAssociationBuilder {
        crate::types::builders::ManagedThingAssociationBuilder::default()
    }
}

/// A builder for [`ManagedThingAssociation`](crate::types::ManagedThingAssociation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ManagedThingAssociationBuilder {
    pub(crate) managed_thing_id: ::std::option::Option<::std::string::String>,
    pub(crate) account_association_id: ::std::option::Option<::std::string::String>,
}
impl ManagedThingAssociationBuilder {
    /// <p>The identifier of the managed thing in the association.</p>
    pub fn managed_thing_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.managed_thing_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the managed thing in the association.</p>
    pub fn set_managed_thing_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.managed_thing_id = input;
        self
    }
    /// <p>The identifier of the managed thing in the association.</p>
    pub fn get_managed_thing_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.managed_thing_id
    }
    /// <p>The identifier of the account association in the association.</p>
    pub fn account_association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the account association in the association.</p>
    pub fn set_account_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_association_id = input;
        self
    }
    /// <p>The identifier of the account association in the association.</p>
    pub fn get_account_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_association_id
    }
    /// Consumes the builder and constructs a [`ManagedThingAssociation`](crate::types::ManagedThingAssociation).
    pub fn build(self) -> crate::types::ManagedThingAssociation {
        crate::types::ManagedThingAssociation {
            managed_thing_id: self.managed_thing_id,
            account_association_id: self.account_association_id,
        }
    }
}
