// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The different configurations for runtime logs.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuntimeLogConfigurations {
    /// <p>The different log levels available for configuration.</p>
    pub log_level: ::std::option::Option<crate::types::LogLevel>,
    /// <p>The different log levels available for configuration.</p>
    pub log_flush_level: ::std::option::Option<crate::types::LogLevel>,
    /// <p>Configuration of where to store runtime logs in the device.</p>
    pub local_store_location: ::std::option::Option<::std::string::String>,
    /// <p>Configuration to set the maximum number of runtime log files that can be stored on the device before the oldest files are deleted or overwritten.</p>
    pub local_store_file_rotation_max_files: ::std::option::Option<i32>,
    /// <p>Configuration to set the maximum bytes of runtime logs that can be stored on the device before the oldest logs are deleted or overwritten.</p>
    pub local_store_file_rotation_max_bytes: ::std::option::Option<i32>,
    /// <p>Configuration to enable or disable uploading of runtime logs to the cloud.</p>
    pub upload_log: ::std::option::Option<bool>,
    /// <p>Configuration to set the time interval in minutes between each batch of runtime logs that the device uploads to the cloud.</p>
    pub upload_period_minutes: ::std::option::Option<i32>,
    /// <p>Configuration to enable or disable deleting of runtime logs in the device once uploaded to the cloud.</p>
    pub delete_local_store_after_upload: ::std::option::Option<bool>,
}
impl RuntimeLogConfigurations {
    /// <p>The different log levels available for configuration.</p>
    pub fn log_level(&self) -> ::std::option::Option<&crate::types::LogLevel> {
        self.log_level.as_ref()
    }
    /// <p>The different log levels available for configuration.</p>
    pub fn log_flush_level(&self) -> ::std::option::Option<&crate::types::LogLevel> {
        self.log_flush_level.as_ref()
    }
    /// <p>Configuration of where to store runtime logs in the device.</p>
    pub fn local_store_location(&self) -> ::std::option::Option<&str> {
        self.local_store_location.as_deref()
    }
    /// <p>Configuration to set the maximum number of runtime log files that can be stored on the device before the oldest files are deleted or overwritten.</p>
    pub fn local_store_file_rotation_max_files(&self) -> ::std::option::Option<i32> {
        self.local_store_file_rotation_max_files
    }
    /// <p>Configuration to set the maximum bytes of runtime logs that can be stored on the device before the oldest logs are deleted or overwritten.</p>
    pub fn local_store_file_rotation_max_bytes(&self) -> ::std::option::Option<i32> {
        self.local_store_file_rotation_max_bytes
    }
    /// <p>Configuration to enable or disable uploading of runtime logs to the cloud.</p>
    pub fn upload_log(&self) -> ::std::option::Option<bool> {
        self.upload_log
    }
    /// <p>Configuration to set the time interval in minutes between each batch of runtime logs that the device uploads to the cloud.</p>
    pub fn upload_period_minutes(&self) -> ::std::option::Option<i32> {
        self.upload_period_minutes
    }
    /// <p>Configuration to enable or disable deleting of runtime logs in the device once uploaded to the cloud.</p>
    pub fn delete_local_store_after_upload(&self) -> ::std::option::Option<bool> {
        self.delete_local_store_after_upload
    }
}
impl RuntimeLogConfigurations {
    /// Creates a new builder-style object to manufacture [`RuntimeLogConfigurations`](crate::types::RuntimeLogConfigurations).
    pub fn builder() -> crate::types::builders::RuntimeLogConfigurationsBuilder {
        crate::types::builders::RuntimeLogConfigurationsBuilder::default()
    }
}

/// A builder for [`RuntimeLogConfigurations`](crate::types::RuntimeLogConfigurations).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuntimeLogConfigurationsBuilder {
    pub(crate) log_level: ::std::option::Option<crate::types::LogLevel>,
    pub(crate) log_flush_level: ::std::option::Option<crate::types::LogLevel>,
    pub(crate) local_store_location: ::std::option::Option<::std::string::String>,
    pub(crate) local_store_file_rotation_max_files: ::std::option::Option<i32>,
    pub(crate) local_store_file_rotation_max_bytes: ::std::option::Option<i32>,
    pub(crate) upload_log: ::std::option::Option<bool>,
    pub(crate) upload_period_minutes: ::std::option::Option<i32>,
    pub(crate) delete_local_store_after_upload: ::std::option::Option<bool>,
}
impl RuntimeLogConfigurationsBuilder {
    /// <p>The different log levels available for configuration.</p>
    pub fn log_level(mut self, input: crate::types::LogLevel) -> Self {
        self.log_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The different log levels available for configuration.</p>
    pub fn set_log_level(mut self, input: ::std::option::Option<crate::types::LogLevel>) -> Self {
        self.log_level = input;
        self
    }
    /// <p>The different log levels available for configuration.</p>
    pub fn get_log_level(&self) -> &::std::option::Option<crate::types::LogLevel> {
        &self.log_level
    }
    /// <p>The different log levels available for configuration.</p>
    pub fn log_flush_level(mut self, input: crate::types::LogLevel) -> Self {
        self.log_flush_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The different log levels available for configuration.</p>
    pub fn set_log_flush_level(mut self, input: ::std::option::Option<crate::types::LogLevel>) -> Self {
        self.log_flush_level = input;
        self
    }
    /// <p>The different log levels available for configuration.</p>
    pub fn get_log_flush_level(&self) -> &::std::option::Option<crate::types::LogLevel> {
        &self.log_flush_level
    }
    /// <p>Configuration of where to store runtime logs in the device.</p>
    pub fn local_store_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_store_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Configuration of where to store runtime logs in the device.</p>
    pub fn set_local_store_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_store_location = input;
        self
    }
    /// <p>Configuration of where to store runtime logs in the device.</p>
    pub fn get_local_store_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_store_location
    }
    /// <p>Configuration to set the maximum number of runtime log files that can be stored on the device before the oldest files are deleted or overwritten.</p>
    pub fn local_store_file_rotation_max_files(mut self, input: i32) -> Self {
        self.local_store_file_rotation_max_files = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration to set the maximum number of runtime log files that can be stored on the device before the oldest files are deleted or overwritten.</p>
    pub fn set_local_store_file_rotation_max_files(mut self, input: ::std::option::Option<i32>) -> Self {
        self.local_store_file_rotation_max_files = input;
        self
    }
    /// <p>Configuration to set the maximum number of runtime log files that can be stored on the device before the oldest files are deleted or overwritten.</p>
    pub fn get_local_store_file_rotation_max_files(&self) -> &::std::option::Option<i32> {
        &self.local_store_file_rotation_max_files
    }
    /// <p>Configuration to set the maximum bytes of runtime logs that can be stored on the device before the oldest logs are deleted or overwritten.</p>
    pub fn local_store_file_rotation_max_bytes(mut self, input: i32) -> Self {
        self.local_store_file_rotation_max_bytes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration to set the maximum bytes of runtime logs that can be stored on the device before the oldest logs are deleted or overwritten.</p>
    pub fn set_local_store_file_rotation_max_bytes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.local_store_file_rotation_max_bytes = input;
        self
    }
    /// <p>Configuration to set the maximum bytes of runtime logs that can be stored on the device before the oldest logs are deleted or overwritten.</p>
    pub fn get_local_store_file_rotation_max_bytes(&self) -> &::std::option::Option<i32> {
        &self.local_store_file_rotation_max_bytes
    }
    /// <p>Configuration to enable or disable uploading of runtime logs to the cloud.</p>
    pub fn upload_log(mut self, input: bool) -> Self {
        self.upload_log = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration to enable or disable uploading of runtime logs to the cloud.</p>
    pub fn set_upload_log(mut self, input: ::std::option::Option<bool>) -> Self {
        self.upload_log = input;
        self
    }
    /// <p>Configuration to enable or disable uploading of runtime logs to the cloud.</p>
    pub fn get_upload_log(&self) -> &::std::option::Option<bool> {
        &self.upload_log
    }
    /// <p>Configuration to set the time interval in minutes between each batch of runtime logs that the device uploads to the cloud.</p>
    pub fn upload_period_minutes(mut self, input: i32) -> Self {
        self.upload_period_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration to set the time interval in minutes between each batch of runtime logs that the device uploads to the cloud.</p>
    pub fn set_upload_period_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.upload_period_minutes = input;
        self
    }
    /// <p>Configuration to set the time interval in minutes between each batch of runtime logs that the device uploads to the cloud.</p>
    pub fn get_upload_period_minutes(&self) -> &::std::option::Option<i32> {
        &self.upload_period_minutes
    }
    /// <p>Configuration to enable or disable deleting of runtime logs in the device once uploaded to the cloud.</p>
    pub fn delete_local_store_after_upload(mut self, input: bool) -> Self {
        self.delete_local_store_after_upload = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration to enable or disable deleting of runtime logs in the device once uploaded to the cloud.</p>
    pub fn set_delete_local_store_after_upload(mut self, input: ::std::option::Option<bool>) -> Self {
        self.delete_local_store_after_upload = input;
        self
    }
    /// <p>Configuration to enable or disable deleting of runtime logs in the device once uploaded to the cloud.</p>
    pub fn get_delete_local_store_after_upload(&self) -> &::std::option::Option<bool> {
        &self.delete_local_store_after_upload
    }
    /// Consumes the builder and constructs a [`RuntimeLogConfigurations`](crate::types::RuntimeLogConfigurations).
    pub fn build(self) -> crate::types::RuntimeLogConfigurations {
        crate::types::RuntimeLogConfigurations {
            log_level: self.log_level,
            log_flush_level: self.log_flush_level,
            local_store_location: self.local_store_location,
            local_store_file_rotation_max_files: self.local_store_file_rotation_max_files,
            local_store_file_rotation_max_bytes: self.local_store_file_rotation_max_bytes,
            upload_log: self.upload_log,
            upload_period_minutes: self.upload_period_minutes,
            delete_local_store_after_upload: self.delete_local_store_after_upload,
        }
    }
}
