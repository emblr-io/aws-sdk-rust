// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Structure representing one schema item associated with a managed thing.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ManagedThingSchemaListItem {
    /// <p>The id of the endpoint for a managed thing.</p>
    pub endpoint_id: ::std::option::Option<::std::string::String>,
    /// <p>The id of the capability for a managed thing.</p>
    pub capability_id: ::std::option::Option<::std::string::String>,
    /// <p>The validation schema for one schema item associated with a managed thing.</p>
    pub schema: ::std::option::Option<::aws_smithy_types::Document>,
}
impl ManagedThingSchemaListItem {
    /// <p>The id of the endpoint for a managed thing.</p>
    pub fn endpoint_id(&self) -> ::std::option::Option<&str> {
        self.endpoint_id.as_deref()
    }
    /// <p>The id of the capability for a managed thing.</p>
    pub fn capability_id(&self) -> ::std::option::Option<&str> {
        self.capability_id.as_deref()
    }
    /// <p>The validation schema for one schema item associated with a managed thing.</p>
    pub fn schema(&self) -> ::std::option::Option<&::aws_smithy_types::Document> {
        self.schema.as_ref()
    }
}
impl ManagedThingSchemaListItem {
    /// Creates a new builder-style object to manufacture [`ManagedThingSchemaListItem`](crate::types::ManagedThingSchemaListItem).
    pub fn builder() -> crate::types::builders::ManagedThingSchemaListItemBuilder {
        crate::types::builders::ManagedThingSchemaListItemBuilder::default()
    }
}

/// A builder for [`ManagedThingSchemaListItem`](crate::types::ManagedThingSchemaListItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ManagedThingSchemaListItemBuilder {
    pub(crate) endpoint_id: ::std::option::Option<::std::string::String>,
    pub(crate) capability_id: ::std::option::Option<::std::string::String>,
    pub(crate) schema: ::std::option::Option<::aws_smithy_types::Document>,
}
impl ManagedThingSchemaListItemBuilder {
    /// <p>The id of the endpoint for a managed thing.</p>
    pub fn endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The id of the endpoint for a managed thing.</p>
    pub fn set_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint_id = input;
        self
    }
    /// <p>The id of the endpoint for a managed thing.</p>
    pub fn get_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint_id
    }
    /// <p>The id of the capability for a managed thing.</p>
    pub fn capability_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.capability_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The id of the capability for a managed thing.</p>
    pub fn set_capability_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.capability_id = input;
        self
    }
    /// <p>The id of the capability for a managed thing.</p>
    pub fn get_capability_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.capability_id
    }
    /// <p>The validation schema for one schema item associated with a managed thing.</p>
    pub fn schema(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.schema = ::std::option::Option::Some(input);
        self
    }
    /// <p>The validation schema for one schema item associated with a managed thing.</p>
    pub fn set_schema(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.schema = input;
        self
    }
    /// <p>The validation schema for one schema item associated with a managed thing.</p>
    pub fn get_schema(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.schema
    }
    /// Consumes the builder and constructs a [`ManagedThingSchemaListItem`](crate::types::ManagedThingSchemaListItem).
    pub fn build(self) -> crate::types::ManagedThingSchemaListItem {
        crate::types::ManagedThingSchemaListItem {
            endpoint_id: self.endpoint_id,
            capability_id: self.capability_id,
            schema: self.schema,
        }
    }
}
