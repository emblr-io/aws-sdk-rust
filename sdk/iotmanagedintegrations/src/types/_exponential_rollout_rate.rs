// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Structure representing exponential rate of rollout for an over-the-air (OTA) task.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExponentialRolloutRate {
    /// <p>The base rate per minute for the rollout of an over-the-air (OTA) task.</p>
    pub base_rate_per_minute: ::std::option::Option<i32>,
    /// <p>The incremental factor for increasing the rollout rate of an over-the-air (OTA) task.</p>
    pub increment_factor: ::std::option::Option<f64>,
    /// <p>The criteria for increasing the rollout rate of an over-the-air (OTA) task.</p>
    pub rate_increase_criteria: ::std::option::Option<crate::types::RolloutRateIncreaseCriteria>,
}
impl ExponentialRolloutRate {
    /// <p>The base rate per minute for the rollout of an over-the-air (OTA) task.</p>
    pub fn base_rate_per_minute(&self) -> ::std::option::Option<i32> {
        self.base_rate_per_minute
    }
    /// <p>The incremental factor for increasing the rollout rate of an over-the-air (OTA) task.</p>
    pub fn increment_factor(&self) -> ::std::option::Option<f64> {
        self.increment_factor
    }
    /// <p>The criteria for increasing the rollout rate of an over-the-air (OTA) task.</p>
    pub fn rate_increase_criteria(&self) -> ::std::option::Option<&crate::types::RolloutRateIncreaseCriteria> {
        self.rate_increase_criteria.as_ref()
    }
}
impl ExponentialRolloutRate {
    /// Creates a new builder-style object to manufacture [`ExponentialRolloutRate`](crate::types::ExponentialRolloutRate).
    pub fn builder() -> crate::types::builders::ExponentialRolloutRateBuilder {
        crate::types::builders::ExponentialRolloutRateBuilder::default()
    }
}

/// A builder for [`ExponentialRolloutRate`](crate::types::ExponentialRolloutRate).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ExponentialRolloutRateBuilder {
    pub(crate) base_rate_per_minute: ::std::option::Option<i32>,
    pub(crate) increment_factor: ::std::option::Option<f64>,
    pub(crate) rate_increase_criteria: ::std::option::Option<crate::types::RolloutRateIncreaseCriteria>,
}
impl ExponentialRolloutRateBuilder {
    /// <p>The base rate per minute for the rollout of an over-the-air (OTA) task.</p>
    pub fn base_rate_per_minute(mut self, input: i32) -> Self {
        self.base_rate_per_minute = ::std::option::Option::Some(input);
        self
    }
    /// <p>The base rate per minute for the rollout of an over-the-air (OTA) task.</p>
    pub fn set_base_rate_per_minute(mut self, input: ::std::option::Option<i32>) -> Self {
        self.base_rate_per_minute = input;
        self
    }
    /// <p>The base rate per minute for the rollout of an over-the-air (OTA) task.</p>
    pub fn get_base_rate_per_minute(&self) -> &::std::option::Option<i32> {
        &self.base_rate_per_minute
    }
    /// <p>The incremental factor for increasing the rollout rate of an over-the-air (OTA) task.</p>
    pub fn increment_factor(mut self, input: f64) -> Self {
        self.increment_factor = ::std::option::Option::Some(input);
        self
    }
    /// <p>The incremental factor for increasing the rollout rate of an over-the-air (OTA) task.</p>
    pub fn set_increment_factor(mut self, input: ::std::option::Option<f64>) -> Self {
        self.increment_factor = input;
        self
    }
    /// <p>The incremental factor for increasing the rollout rate of an over-the-air (OTA) task.</p>
    pub fn get_increment_factor(&self) -> &::std::option::Option<f64> {
        &self.increment_factor
    }
    /// <p>The criteria for increasing the rollout rate of an over-the-air (OTA) task.</p>
    pub fn rate_increase_criteria(mut self, input: crate::types::RolloutRateIncreaseCriteria) -> Self {
        self.rate_increase_criteria = ::std::option::Option::Some(input);
        self
    }
    /// <p>The criteria for increasing the rollout rate of an over-the-air (OTA) task.</p>
    pub fn set_rate_increase_criteria(mut self, input: ::std::option::Option<crate::types::RolloutRateIncreaseCriteria>) -> Self {
        self.rate_increase_criteria = input;
        self
    }
    /// <p>The criteria for increasing the rollout rate of an over-the-air (OTA) task.</p>
    pub fn get_rate_increase_criteria(&self) -> &::std::option::Option<crate::types::RolloutRateIncreaseCriteria> {
        &self.rate_increase_criteria
    }
    /// Consumes the builder and constructs a [`ExponentialRolloutRate`](crate::types::ExponentialRolloutRate).
    pub fn build(self) -> crate::types::ExponentialRolloutRate {
        crate::types::ExponentialRolloutRate {
            base_rate_per_minute: self.base_rate_per_minute,
            increment_factor: self.increment_factor,
            rate_increase_criteria: self.rate_increase_criteria,
        }
    }
}
