// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Over-the-air (OTA) task scheduling config.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OtaTaskSchedulingConfig {
    /// <p>Specifies the end behavior for all task executions after a task reaches the selected <code>endTime</code>. If <code>endTime</code> is not selected when creating the task, then <code>endBehavior</code> does not apply.</p>
    pub end_behavior: ::std::option::Option<crate::types::SchedulingConfigEndBehavior>,
    /// <p>The time an over-the-air (OTA) task will stop.</p>
    pub end_time: ::std::option::Option<::std::string::String>,
    /// <p>Maintenance window list for over-the-air (OTA) task scheduling config.</p>
    pub maintenance_windows: ::std::option::Option<::std::vec::Vec<crate::types::ScheduleMaintenanceWindow>>,
    /// <p>The time an over-the-air (OTA) task will start.</p>
    pub start_time: ::std::option::Option<::std::string::String>,
}
impl OtaTaskSchedulingConfig {
    /// <p>Specifies the end behavior for all task executions after a task reaches the selected <code>endTime</code>. If <code>endTime</code> is not selected when creating the task, then <code>endBehavior</code> does not apply.</p>
    pub fn end_behavior(&self) -> ::std::option::Option<&crate::types::SchedulingConfigEndBehavior> {
        self.end_behavior.as_ref()
    }
    /// <p>The time an over-the-air (OTA) task will stop.</p>
    pub fn end_time(&self) -> ::std::option::Option<&str> {
        self.end_time.as_deref()
    }
    /// <p>Maintenance window list for over-the-air (OTA) task scheduling config.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.maintenance_windows.is_none()`.
    pub fn maintenance_windows(&self) -> &[crate::types::ScheduleMaintenanceWindow] {
        self.maintenance_windows.as_deref().unwrap_or_default()
    }
    /// <p>The time an over-the-air (OTA) task will start.</p>
    pub fn start_time(&self) -> ::std::option::Option<&str> {
        self.start_time.as_deref()
    }
}
impl OtaTaskSchedulingConfig {
    /// Creates a new builder-style object to manufacture [`OtaTaskSchedulingConfig`](crate::types::OtaTaskSchedulingConfig).
    pub fn builder() -> crate::types::builders::OtaTaskSchedulingConfigBuilder {
        crate::types::builders::OtaTaskSchedulingConfigBuilder::default()
    }
}

/// A builder for [`OtaTaskSchedulingConfig`](crate::types::OtaTaskSchedulingConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OtaTaskSchedulingConfigBuilder {
    pub(crate) end_behavior: ::std::option::Option<crate::types::SchedulingConfigEndBehavior>,
    pub(crate) end_time: ::std::option::Option<::std::string::String>,
    pub(crate) maintenance_windows: ::std::option::Option<::std::vec::Vec<crate::types::ScheduleMaintenanceWindow>>,
    pub(crate) start_time: ::std::option::Option<::std::string::String>,
}
impl OtaTaskSchedulingConfigBuilder {
    /// <p>Specifies the end behavior for all task executions after a task reaches the selected <code>endTime</code>. If <code>endTime</code> is not selected when creating the task, then <code>endBehavior</code> does not apply.</p>
    pub fn end_behavior(mut self, input: crate::types::SchedulingConfigEndBehavior) -> Self {
        self.end_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the end behavior for all task executions after a task reaches the selected <code>endTime</code>. If <code>endTime</code> is not selected when creating the task, then <code>endBehavior</code> does not apply.</p>
    pub fn set_end_behavior(mut self, input: ::std::option::Option<crate::types::SchedulingConfigEndBehavior>) -> Self {
        self.end_behavior = input;
        self
    }
    /// <p>Specifies the end behavior for all task executions after a task reaches the selected <code>endTime</code>. If <code>endTime</code> is not selected when creating the task, then <code>endBehavior</code> does not apply.</p>
    pub fn get_end_behavior(&self) -> &::std::option::Option<crate::types::SchedulingConfigEndBehavior> {
        &self.end_behavior
    }
    /// <p>The time an over-the-air (OTA) task will stop.</p>
    pub fn end_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.end_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time an over-the-air (OTA) task will stop.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The time an over-the-air (OTA) task will stop.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.end_time
    }
    /// Appends an item to `maintenance_windows`.
    ///
    /// To override the contents of this collection use [`set_maintenance_windows`](Self::set_maintenance_windows).
    ///
    /// <p>Maintenance window list for over-the-air (OTA) task scheduling config.</p>
    pub fn maintenance_windows(mut self, input: crate::types::ScheduleMaintenanceWindow) -> Self {
        let mut v = self.maintenance_windows.unwrap_or_default();
        v.push(input);
        self.maintenance_windows = ::std::option::Option::Some(v);
        self
    }
    /// <p>Maintenance window list for over-the-air (OTA) task scheduling config.</p>
    pub fn set_maintenance_windows(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ScheduleMaintenanceWindow>>) -> Self {
        self.maintenance_windows = input;
        self
    }
    /// <p>Maintenance window list for over-the-air (OTA) task scheduling config.</p>
    pub fn get_maintenance_windows(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ScheduleMaintenanceWindow>> {
        &self.maintenance_windows
    }
    /// <p>The time an over-the-air (OTA) task will start.</p>
    pub fn start_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.start_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time an over-the-air (OTA) task will start.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time an over-the-air (OTA) task will start.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.start_time
    }
    /// Consumes the builder and constructs a [`OtaTaskSchedulingConfig`](crate::types::OtaTaskSchedulingConfig).
    pub fn build(self) -> crate::types::OtaTaskSchedulingConfig {
        crate::types::OtaTaskSchedulingConfig {
            end_behavior: self.end_behavior,
            end_time: self.end_time,
            maintenance_windows: self.maintenance_windows,
            start_time: self.start_time,
        }
    }
}
