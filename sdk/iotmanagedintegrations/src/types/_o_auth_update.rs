// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Structure containing updated OAuth configuration settings.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OAuthUpdate {
    /// <p>The updated URL where users are redirected after completing the OAuth authorization process.</p>
    pub o_auth_complete_redirect_url: ::std::option::Option<::std::string::String>,
    /// <p>Updated configuration for proactively refreshing OAuth tokens before they expire.</p>
    pub proactive_refresh_token_renewal: ::std::option::Option<crate::types::ProactiveRefreshTokenRenewal>,
}
impl OAuthUpdate {
    /// <p>The updated URL where users are redirected after completing the OAuth authorization process.</p>
    pub fn o_auth_complete_redirect_url(&self) -> ::std::option::Option<&str> {
        self.o_auth_complete_redirect_url.as_deref()
    }
    /// <p>Updated configuration for proactively refreshing OAuth tokens before they expire.</p>
    pub fn proactive_refresh_token_renewal(&self) -> ::std::option::Option<&crate::types::ProactiveRefreshTokenRenewal> {
        self.proactive_refresh_token_renewal.as_ref()
    }
}
impl OAuthUpdate {
    /// Creates a new builder-style object to manufacture [`OAuthUpdate`](crate::types::OAuthUpdate).
    pub fn builder() -> crate::types::builders::OAuthUpdateBuilder {
        crate::types::builders::OAuthUpdateBuilder::default()
    }
}

/// A builder for [`OAuthUpdate`](crate::types::OAuthUpdate).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OAuthUpdateBuilder {
    pub(crate) o_auth_complete_redirect_url: ::std::option::Option<::std::string::String>,
    pub(crate) proactive_refresh_token_renewal: ::std::option::Option<crate::types::ProactiveRefreshTokenRenewal>,
}
impl OAuthUpdateBuilder {
    /// <p>The updated URL where users are redirected after completing the OAuth authorization process.</p>
    pub fn o_auth_complete_redirect_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.o_auth_complete_redirect_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated URL where users are redirected after completing the OAuth authorization process.</p>
    pub fn set_o_auth_complete_redirect_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.o_auth_complete_redirect_url = input;
        self
    }
    /// <p>The updated URL where users are redirected after completing the OAuth authorization process.</p>
    pub fn get_o_auth_complete_redirect_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.o_auth_complete_redirect_url
    }
    /// <p>Updated configuration for proactively refreshing OAuth tokens before they expire.</p>
    pub fn proactive_refresh_token_renewal(mut self, input: crate::types::ProactiveRefreshTokenRenewal) -> Self {
        self.proactive_refresh_token_renewal = ::std::option::Option::Some(input);
        self
    }
    /// <p>Updated configuration for proactively refreshing OAuth tokens before they expire.</p>
    pub fn set_proactive_refresh_token_renewal(mut self, input: ::std::option::Option<crate::types::ProactiveRefreshTokenRenewal>) -> Self {
        self.proactive_refresh_token_renewal = input;
        self
    }
    /// <p>Updated configuration for proactively refreshing OAuth tokens before they expire.</p>
    pub fn get_proactive_refresh_token_renewal(&self) -> &::std::option::Option<crate::types::ProactiveRefreshTokenRenewal> {
        &self.proactive_refresh_token_renewal
    }
    /// Consumes the builder and constructs a [`OAuthUpdate`](crate::types::OAuthUpdate).
    pub fn build(self) -> crate::types::OAuthUpdate {
        crate::types::OAuthUpdate {
            o_auth_complete_redirect_url: self.o_auth_complete_redirect_url,
            proactive_refresh_token_renewal: self.proactive_refresh_token_renewal,
        }
    }
}
