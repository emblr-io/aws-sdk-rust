// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The authentication configuration details for a connector destination, including OAuth settings and other authentication parameters.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuthConfig {
    /// <p>The OAuth configuration settings used for authentication with the third-party service.</p>
    pub o_auth: ::std::option::Option<crate::types::OAuthConfig>,
}
impl AuthConfig {
    /// <p>The OAuth configuration settings used for authentication with the third-party service.</p>
    pub fn o_auth(&self) -> ::std::option::Option<&crate::types::OAuthConfig> {
        self.o_auth.as_ref()
    }
}
impl AuthConfig {
    /// Creates a new builder-style object to manufacture [`AuthConfig`](crate::types::AuthConfig).
    pub fn builder() -> crate::types::builders::AuthConfigBuilder {
        crate::types::builders::AuthConfigBuilder::default()
    }
}

/// A builder for [`AuthConfig`](crate::types::AuthConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AuthConfigBuilder {
    pub(crate) o_auth: ::std::option::Option<crate::types::OAuthConfig>,
}
impl AuthConfigBuilder {
    /// <p>The OAuth configuration settings used for authentication with the third-party service.</p>
    pub fn o_auth(mut self, input: crate::types::OAuthConfig) -> Self {
        self.o_auth = ::std::option::Option::Some(input);
        self
    }
    /// <p>The OAuth configuration settings used for authentication with the third-party service.</p>
    pub fn set_o_auth(mut self, input: ::std::option::Option<crate::types::OAuthConfig>) -> Self {
        self.o_auth = input;
        self
    }
    /// <p>The OAuth configuration settings used for authentication with the third-party service.</p>
    pub fn get_o_auth(&self) -> &::std::option::Option<crate::types::OAuthConfig> {
        &self.o_auth
    }
    /// Consumes the builder and constructs a [`AuthConfig`](crate::types::AuthConfig).
    pub fn build(self) -> crate::types::AuthConfig {
        crate::types::AuthConfig { o_auth: self.o_auth }
    }
}
