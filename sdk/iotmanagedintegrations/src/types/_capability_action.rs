// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Action for an Amazon Web Services capability, containing the action parameters for control.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CapabilityAction {
    /// <p>Describe a capability action with a name.</p>
    pub name: ::std::string::String,
    /// <p>Describe a capability action with an reference.</p>
    pub r#ref: ::std::option::Option<::std::string::String>,
    /// <p>Describe a capability action with an <code>actionTraceId</code> for a response command.</p>
    pub action_trace_id: ::std::option::Option<::std::string::String>,
    /// <p>Describe a capability action with a capability property.</p>
    pub parameters: ::std::option::Option<::aws_smithy_types::Document>,
}
impl CapabilityAction {
    /// <p>Describe a capability action with a name.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Describe a capability action with an reference.</p>
    pub fn r#ref(&self) -> ::std::option::Option<&str> {
        self.r#ref.as_deref()
    }
    /// <p>Describe a capability action with an <code>actionTraceId</code> for a response command.</p>
    pub fn action_trace_id(&self) -> ::std::option::Option<&str> {
        self.action_trace_id.as_deref()
    }
    /// <p>Describe a capability action with a capability property.</p>
    pub fn parameters(&self) -> ::std::option::Option<&::aws_smithy_types::Document> {
        self.parameters.as_ref()
    }
}
impl ::std::fmt::Debug for CapabilityAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CapabilityAction");
        formatter.field("name", &self.name);
        formatter.field("r#ref", &self.r#ref);
        formatter.field("action_trace_id", &self.action_trace_id);
        formatter.field("parameters", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CapabilityAction {
    /// Creates a new builder-style object to manufacture [`CapabilityAction`](crate::types::CapabilityAction).
    pub fn builder() -> crate::types::builders::CapabilityActionBuilder {
        crate::types::builders::CapabilityActionBuilder::default()
    }
}

/// A builder for [`CapabilityAction`](crate::types::CapabilityAction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CapabilityActionBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#ref: ::std::option::Option<::std::string::String>,
    pub(crate) action_trace_id: ::std::option::Option<::std::string::String>,
    pub(crate) parameters: ::std::option::Option<::aws_smithy_types::Document>,
}
impl CapabilityActionBuilder {
    /// <p>Describe a capability action with a name.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describe a capability action with a name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Describe a capability action with a name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Describe a capability action with an reference.</p>
    pub fn r#ref(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#ref = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describe a capability action with an reference.</p>
    pub fn set_ref(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#ref = input;
        self
    }
    /// <p>Describe a capability action with an reference.</p>
    pub fn get_ref(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#ref
    }
    /// <p>Describe a capability action with an <code>actionTraceId</code> for a response command.</p>
    pub fn action_trace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_trace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describe a capability action with an <code>actionTraceId</code> for a response command.</p>
    pub fn set_action_trace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_trace_id = input;
        self
    }
    /// <p>Describe a capability action with an <code>actionTraceId</code> for a response command.</p>
    pub fn get_action_trace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_trace_id
    }
    /// <p>Describe a capability action with a capability property.</p>
    pub fn parameters(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describe a capability action with a capability property.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>Describe a capability action with a capability property.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.parameters
    }
    /// Consumes the builder and constructs a [`CapabilityAction`](crate::types::CapabilityAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::CapabilityActionBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::CapabilityAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CapabilityAction {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CapabilityAction",
                )
            })?,
            r#ref: self.r#ref,
            action_trace_id: self.action_trace_id,
            parameters: self.parameters,
        })
    }
}
impl ::std::fmt::Debug for CapabilityActionBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CapabilityActionBuilder");
        formatter.field("name", &self.name);
        formatter.field("r#ref", &self.r#ref);
        formatter.field("action_trace_id", &self.action_trace_id);
        formatter.field("parameters", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
