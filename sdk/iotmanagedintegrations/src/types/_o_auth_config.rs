// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration details for OAuth authentication with a third-party service.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OAuthConfig {
    /// <p>The authorization URL for the OAuth service, where users are directed to authenticate and authorize access.</p>
    pub auth_url: ::std::string::String,
    /// <p>The token URL for the OAuth service, where authorization codes are exchanged for access tokens.</p>
    pub token_url: ::std::string::String,
    /// <p>The OAuth scopes requested during authorization, which define the permissions granted to the application.</p>
    pub scope: ::std::option::Option<::std::string::String>,
    /// <p>The authentication scheme used when requesting tokens from the token endpoint.</p>
    pub token_endpoint_authentication_scheme: crate::types::TokenEndpointAuthenticationScheme,
    /// <p>The URL where users are redirected after completing the OAuth authorization process.</p>
    pub o_auth_complete_redirect_url: ::std::option::Option<::std::string::String>,
    /// <p>Configuration for proactively refreshing OAuth tokens before they expire.</p>
    pub proactive_refresh_token_renewal: ::std::option::Option<crate::types::ProactiveRefreshTokenRenewal>,
}
impl OAuthConfig {
    /// <p>The authorization URL for the OAuth service, where users are directed to authenticate and authorize access.</p>
    pub fn auth_url(&self) -> &str {
        use std::ops::Deref;
        self.auth_url.deref()
    }
    /// <p>The token URL for the OAuth service, where authorization codes are exchanged for access tokens.</p>
    pub fn token_url(&self) -> &str {
        use std::ops::Deref;
        self.token_url.deref()
    }
    /// <p>The OAuth scopes requested during authorization, which define the permissions granted to the application.</p>
    pub fn scope(&self) -> ::std::option::Option<&str> {
        self.scope.as_deref()
    }
    /// <p>The authentication scheme used when requesting tokens from the token endpoint.</p>
    pub fn token_endpoint_authentication_scheme(&self) -> &crate::types::TokenEndpointAuthenticationScheme {
        &self.token_endpoint_authentication_scheme
    }
    /// <p>The URL where users are redirected after completing the OAuth authorization process.</p>
    pub fn o_auth_complete_redirect_url(&self) -> ::std::option::Option<&str> {
        self.o_auth_complete_redirect_url.as_deref()
    }
    /// <p>Configuration for proactively refreshing OAuth tokens before they expire.</p>
    pub fn proactive_refresh_token_renewal(&self) -> ::std::option::Option<&crate::types::ProactiveRefreshTokenRenewal> {
        self.proactive_refresh_token_renewal.as_ref()
    }
}
impl OAuthConfig {
    /// Creates a new builder-style object to manufacture [`OAuthConfig`](crate::types::OAuthConfig).
    pub fn builder() -> crate::types::builders::OAuthConfigBuilder {
        crate::types::builders::OAuthConfigBuilder::default()
    }
}

/// A builder for [`OAuthConfig`](crate::types::OAuthConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OAuthConfigBuilder {
    pub(crate) auth_url: ::std::option::Option<::std::string::String>,
    pub(crate) token_url: ::std::option::Option<::std::string::String>,
    pub(crate) scope: ::std::option::Option<::std::string::String>,
    pub(crate) token_endpoint_authentication_scheme: ::std::option::Option<crate::types::TokenEndpointAuthenticationScheme>,
    pub(crate) o_auth_complete_redirect_url: ::std::option::Option<::std::string::String>,
    pub(crate) proactive_refresh_token_renewal: ::std::option::Option<crate::types::ProactiveRefreshTokenRenewal>,
}
impl OAuthConfigBuilder {
    /// <p>The authorization URL for the OAuth service, where users are directed to authenticate and authorize access.</p>
    /// This field is required.
    pub fn auth_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.auth_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The authorization URL for the OAuth service, where users are directed to authenticate and authorize access.</p>
    pub fn set_auth_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.auth_url = input;
        self
    }
    /// <p>The authorization URL for the OAuth service, where users are directed to authenticate and authorize access.</p>
    pub fn get_auth_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.auth_url
    }
    /// <p>The token URL for the OAuth service, where authorization codes are exchanged for access tokens.</p>
    /// This field is required.
    pub fn token_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.token_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token URL for the OAuth service, where authorization codes are exchanged for access tokens.</p>
    pub fn set_token_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.token_url = input;
        self
    }
    /// <p>The token URL for the OAuth service, where authorization codes are exchanged for access tokens.</p>
    pub fn get_token_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.token_url
    }
    /// <p>The OAuth scopes requested during authorization, which define the permissions granted to the application.</p>
    pub fn scope(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scope = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The OAuth scopes requested during authorization, which define the permissions granted to the application.</p>
    pub fn set_scope(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scope = input;
        self
    }
    /// <p>The OAuth scopes requested during authorization, which define the permissions granted to the application.</p>
    pub fn get_scope(&self) -> &::std::option::Option<::std::string::String> {
        &self.scope
    }
    /// <p>The authentication scheme used when requesting tokens from the token endpoint.</p>
    /// This field is required.
    pub fn token_endpoint_authentication_scheme(mut self, input: crate::types::TokenEndpointAuthenticationScheme) -> Self {
        self.token_endpoint_authentication_scheme = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication scheme used when requesting tokens from the token endpoint.</p>
    pub fn set_token_endpoint_authentication_scheme(mut self, input: ::std::option::Option<crate::types::TokenEndpointAuthenticationScheme>) -> Self {
        self.token_endpoint_authentication_scheme = input;
        self
    }
    /// <p>The authentication scheme used when requesting tokens from the token endpoint.</p>
    pub fn get_token_endpoint_authentication_scheme(&self) -> &::std::option::Option<crate::types::TokenEndpointAuthenticationScheme> {
        &self.token_endpoint_authentication_scheme
    }
    /// <p>The URL where users are redirected after completing the OAuth authorization process.</p>
    pub fn o_auth_complete_redirect_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.o_auth_complete_redirect_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL where users are redirected after completing the OAuth authorization process.</p>
    pub fn set_o_auth_complete_redirect_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.o_auth_complete_redirect_url = input;
        self
    }
    /// <p>The URL where users are redirected after completing the OAuth authorization process.</p>
    pub fn get_o_auth_complete_redirect_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.o_auth_complete_redirect_url
    }
    /// <p>Configuration for proactively refreshing OAuth tokens before they expire.</p>
    pub fn proactive_refresh_token_renewal(mut self, input: crate::types::ProactiveRefreshTokenRenewal) -> Self {
        self.proactive_refresh_token_renewal = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration for proactively refreshing OAuth tokens before they expire.</p>
    pub fn set_proactive_refresh_token_renewal(mut self, input: ::std::option::Option<crate::types::ProactiveRefreshTokenRenewal>) -> Self {
        self.proactive_refresh_token_renewal = input;
        self
    }
    /// <p>Configuration for proactively refreshing OAuth tokens before they expire.</p>
    pub fn get_proactive_refresh_token_renewal(&self) -> &::std::option::Option<crate::types::ProactiveRefreshTokenRenewal> {
        &self.proactive_refresh_token_renewal
    }
    /// Consumes the builder and constructs a [`OAuthConfig`](crate::types::OAuthConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`auth_url`](crate::types::builders::OAuthConfigBuilder::auth_url)
    /// - [`token_url`](crate::types::builders::OAuthConfigBuilder::token_url)
    /// - [`token_endpoint_authentication_scheme`](crate::types::builders::OAuthConfigBuilder::token_endpoint_authentication_scheme)
    pub fn build(self) -> ::std::result::Result<crate::types::OAuthConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OAuthConfig {
            auth_url: self.auth_url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "auth_url",
                    "auth_url was not specified but it is required when building OAuthConfig",
                )
            })?,
            token_url: self.token_url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "token_url",
                    "token_url was not specified but it is required when building OAuthConfig",
                )
            })?,
            scope: self.scope,
            token_endpoint_authentication_scheme: self.token_endpoint_authentication_scheme.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "token_endpoint_authentication_scheme",
                    "token_endpoint_authentication_scheme was not specified but it is required when building OAuthConfig",
                )
            })?,
            o_auth_complete_redirect_url: self.o_auth_complete_redirect_url,
            proactive_refresh_token_renewal: self.proactive_refresh_token_renewal,
        })
    }
}
