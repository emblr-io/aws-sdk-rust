// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration settings for proactively refreshing OAuth tokens before they expire.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProactiveRefreshTokenRenewal {
    /// <p>Indicates whether proactive refresh token renewal is enabled.</p>
    pub enabled: ::std::option::Option<bool>,
    /// <p>The days before token expiration when the system should attempt to renew the token, specified in days.</p>
    pub days_before_renewal: ::std::option::Option<i32>,
}
impl ProactiveRefreshTokenRenewal {
    /// <p>Indicates whether proactive refresh token renewal is enabled.</p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
    /// <p>The days before token expiration when the system should attempt to renew the token, specified in days.</p>
    pub fn days_before_renewal(&self) -> ::std::option::Option<i32> {
        self.days_before_renewal
    }
}
impl ProactiveRefreshTokenRenewal {
    /// Creates a new builder-style object to manufacture [`ProactiveRefreshTokenRenewal`](crate::types::ProactiveRefreshTokenRenewal).
    pub fn builder() -> crate::types::builders::ProactiveRefreshTokenRenewalBuilder {
        crate::types::builders::ProactiveRefreshTokenRenewalBuilder::default()
    }
}

/// A builder for [`ProactiveRefreshTokenRenewal`](crate::types::ProactiveRefreshTokenRenewal).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProactiveRefreshTokenRenewalBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) days_before_renewal: ::std::option::Option<i32>,
}
impl ProactiveRefreshTokenRenewalBuilder {
    /// <p>Indicates whether proactive refresh token renewal is enabled.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether proactive refresh token renewal is enabled.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Indicates whether proactive refresh token renewal is enabled.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>The days before token expiration when the system should attempt to renew the token, specified in days.</p>
    pub fn days_before_renewal(mut self, input: i32) -> Self {
        self.days_before_renewal = ::std::option::Option::Some(input);
        self
    }
    /// <p>The days before token expiration when the system should attempt to renew the token, specified in days.</p>
    pub fn set_days_before_renewal(mut self, input: ::std::option::Option<i32>) -> Self {
        self.days_before_renewal = input;
        self
    }
    /// <p>The days before token expiration when the system should attempt to renew the token, specified in days.</p>
    pub fn get_days_before_renewal(&self) -> &::std::option::Option<i32> {
        &self.days_before_renewal
    }
    /// Consumes the builder and constructs a [`ProactiveRefreshTokenRenewal`](crate::types::ProactiveRefreshTokenRenewal).
    pub fn build(self) -> crate::types::ProactiveRefreshTokenRenewal {
        crate::types::ProactiveRefreshTokenRenewal {
            enabled: self.enabled,
            days_before_renewal: self.days_before_renewal,
        }
    }
}
