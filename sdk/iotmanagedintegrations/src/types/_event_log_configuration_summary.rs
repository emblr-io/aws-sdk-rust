// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>List of event log configurations.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EventLogConfigurationSummary {
    /// <p>The identifier of the event log configuration.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The type of resource for the event log configuration.</p>
    pub resource_type: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the resource for the event log configuration.</p>
    pub resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The logging level for the event log configuration.</p>
    pub event_log_level: ::std::option::Option<crate::types::LogLevel>,
}
impl EventLogConfigurationSummary {
    /// <p>The identifier of the event log configuration.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The type of resource for the event log configuration.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The identifier of the resource for the event log configuration.</p>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The logging level for the event log configuration.</p>
    pub fn event_log_level(&self) -> ::std::option::Option<&crate::types::LogLevel> {
        self.event_log_level.as_ref()
    }
}
impl EventLogConfigurationSummary {
    /// Creates a new builder-style object to manufacture [`EventLogConfigurationSummary`](crate::types::EventLogConfigurationSummary).
    pub fn builder() -> crate::types::builders::EventLogConfigurationSummaryBuilder {
        crate::types::builders::EventLogConfigurationSummaryBuilder::default()
    }
}

/// A builder for [`EventLogConfigurationSummary`](crate::types::EventLogConfigurationSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EventLogConfigurationSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) event_log_level: ::std::option::Option<crate::types::LogLevel>,
}
impl EventLogConfigurationSummaryBuilder {
    /// <p>The identifier of the event log configuration.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the event log configuration.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the event log configuration.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The type of resource for the event log configuration.</p>
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of resource for the event log configuration.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of resource for the event log configuration.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// <p>The identifier of the resource for the event log configuration.</p>
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the resource for the event log configuration.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The identifier of the resource for the event log configuration.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>The logging level for the event log configuration.</p>
    pub fn event_log_level(mut self, input: crate::types::LogLevel) -> Self {
        self.event_log_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The logging level for the event log configuration.</p>
    pub fn set_event_log_level(mut self, input: ::std::option::Option<crate::types::LogLevel>) -> Self {
        self.event_log_level = input;
        self
    }
    /// <p>The logging level for the event log configuration.</p>
    pub fn get_event_log_level(&self) -> &::std::option::Option<crate::types::LogLevel> {
        &self.event_log_level
    }
    /// Consumes the builder and constructs a [`EventLogConfigurationSummary`](crate::types::EventLogConfigurationSummary).
    pub fn build(self) -> crate::types::EventLogConfigurationSummary {
        crate::types::EventLogConfigurationSummary {
            id: self.id,
            resource_type: self.resource_type,
            resource_id: self.resource_id,
            event_log_level: self.event_log_level,
        }
    }
}
