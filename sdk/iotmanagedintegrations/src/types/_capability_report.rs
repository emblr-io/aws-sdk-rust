// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Report of all capabilities supported by the device.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CapabilityReport {
    /// <p>The version of the capability report.</p>
    pub version: ::std::string::String,
    /// <p>The numeric identifier of the node.</p>
    pub node_id: ::std::option::Option<::std::string::String>,
    /// <p>The endpoints used in the capability report.</p>
    pub endpoints: ::std::vec::Vec<crate::types::CapabilityReportEndpoint>,
}
impl CapabilityReport {
    /// <p>The version of the capability report.</p>
    pub fn version(&self) -> &str {
        use std::ops::Deref;
        self.version.deref()
    }
    /// <p>The numeric identifier of the node.</p>
    pub fn node_id(&self) -> ::std::option::Option<&str> {
        self.node_id.as_deref()
    }
    /// <p>The endpoints used in the capability report.</p>
    pub fn endpoints(&self) -> &[crate::types::CapabilityReportEndpoint] {
        use std::ops::Deref;
        self.endpoints.deref()
    }
}
impl CapabilityReport {
    /// Creates a new builder-style object to manufacture [`CapabilityReport`](crate::types::CapabilityReport).
    pub fn builder() -> crate::types::builders::CapabilityReportBuilder {
        crate::types::builders::CapabilityReportBuilder::default()
    }
}

/// A builder for [`CapabilityReport`](crate::types::CapabilityReport).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CapabilityReportBuilder {
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) node_id: ::std::option::Option<::std::string::String>,
    pub(crate) endpoints: ::std::option::Option<::std::vec::Vec<crate::types::CapabilityReportEndpoint>>,
}
impl CapabilityReportBuilder {
    /// <p>The version of the capability report.</p>
    /// This field is required.
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the capability report.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version of the capability report.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>The numeric identifier of the node.</p>
    pub fn node_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The numeric identifier of the node.</p>
    pub fn set_node_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_id = input;
        self
    }
    /// <p>The numeric identifier of the node.</p>
    pub fn get_node_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_id
    }
    /// Appends an item to `endpoints`.
    ///
    /// To override the contents of this collection use [`set_endpoints`](Self::set_endpoints).
    ///
    /// <p>The endpoints used in the capability report.</p>
    pub fn endpoints(mut self, input: crate::types::CapabilityReportEndpoint) -> Self {
        let mut v = self.endpoints.unwrap_or_default();
        v.push(input);
        self.endpoints = ::std::option::Option::Some(v);
        self
    }
    /// <p>The endpoints used in the capability report.</p>
    pub fn set_endpoints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CapabilityReportEndpoint>>) -> Self {
        self.endpoints = input;
        self
    }
    /// <p>The endpoints used in the capability report.</p>
    pub fn get_endpoints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CapabilityReportEndpoint>> {
        &self.endpoints
    }
    /// Consumes the builder and constructs a [`CapabilityReport`](crate::types::CapabilityReport).
    /// This method will fail if any of the following fields are not set:
    /// - [`version`](crate::types::builders::CapabilityReportBuilder::version)
    /// - [`endpoints`](crate::types::builders::CapabilityReportBuilder::endpoints)
    pub fn build(self) -> ::std::result::Result<crate::types::CapabilityReport, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CapabilityReport {
            version: self.version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "version",
                    "version was not specified but it is required when building CapabilityReport",
                )
            })?,
            node_id: self.node_id,
            endpoints: self.endpoints.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "endpoints",
                    "endpoints was not specified but it is required when building CapabilityReport",
                )
            })?,
        })
    }
}
