// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The endpoint for a managed thing when sending a command.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CommandEndpoint {
    /// <p>The id of the endpoint for a managed thing.</p>
    pub endpoint_id: ::std::string::String,
    /// <p>Describe the endpoint with an id, a name, and the relevant capabilities for sending commands.</p>
    pub capabilities: ::std::vec::Vec<crate::types::CommandCapability>,
}
impl CommandEndpoint {
    /// <p>The id of the endpoint for a managed thing.</p>
    pub fn endpoint_id(&self) -> &str {
        use std::ops::Deref;
        self.endpoint_id.deref()
    }
    /// <p>Describe the endpoint with an id, a name, and the relevant capabilities for sending commands.</p>
    pub fn capabilities(&self) -> &[crate::types::CommandCapability] {
        use std::ops::Deref;
        self.capabilities.deref()
    }
}
impl CommandEndpoint {
    /// Creates a new builder-style object to manufacture [`CommandEndpoint`](crate::types::CommandEndpoint).
    pub fn builder() -> crate::types::builders::CommandEndpointBuilder {
        crate::types::builders::CommandEndpointBuilder::default()
    }
}

/// A builder for [`CommandEndpoint`](crate::types::CommandEndpoint).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CommandEndpointBuilder {
    pub(crate) endpoint_id: ::std::option::Option<::std::string::String>,
    pub(crate) capabilities: ::std::option::Option<::std::vec::Vec<crate::types::CommandCapability>>,
}
impl CommandEndpointBuilder {
    /// <p>The id of the endpoint for a managed thing.</p>
    /// This field is required.
    pub fn endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The id of the endpoint for a managed thing.</p>
    pub fn set_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint_id = input;
        self
    }
    /// <p>The id of the endpoint for a managed thing.</p>
    pub fn get_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint_id
    }
    /// Appends an item to `capabilities`.
    ///
    /// To override the contents of this collection use [`set_capabilities`](Self::set_capabilities).
    ///
    /// <p>Describe the endpoint with an id, a name, and the relevant capabilities for sending commands.</p>
    pub fn capabilities(mut self, input: crate::types::CommandCapability) -> Self {
        let mut v = self.capabilities.unwrap_or_default();
        v.push(input);
        self.capabilities = ::std::option::Option::Some(v);
        self
    }
    /// <p>Describe the endpoint with an id, a name, and the relevant capabilities for sending commands.</p>
    pub fn set_capabilities(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CommandCapability>>) -> Self {
        self.capabilities = input;
        self
    }
    /// <p>Describe the endpoint with an id, a name, and the relevant capabilities for sending commands.</p>
    pub fn get_capabilities(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CommandCapability>> {
        &self.capabilities
    }
    /// Consumes the builder and constructs a [`CommandEndpoint`](crate::types::CommandEndpoint).
    /// This method will fail if any of the following fields are not set:
    /// - [`endpoint_id`](crate::types::builders::CommandEndpointBuilder::endpoint_id)
    /// - [`capabilities`](crate::types::builders::CommandEndpointBuilder::capabilities)
    pub fn build(self) -> ::std::result::Result<crate::types::CommandEndpoint, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CommandEndpoint {
            endpoint_id: self.endpoint_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "endpoint_id",
                    "endpoint_id was not specified but it is required when building CommandEndpoint",
                )
            })?,
            capabilities: self.capabilities.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "capabilities",
                    "capabilities was not specified but it is required when building CommandEndpoint",
                )
            })?,
        })
    }
}
