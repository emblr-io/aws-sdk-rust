// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describe a Matter cluster with an id, and the relevant attributes, commands, and events.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct MatterCluster {
    /// <p>The cluster id.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The Matter attributes.</p>
    pub attributes: ::std::option::Option<::aws_smithy_types::Document>,
    /// <p>Describe the Matter commands with the Matter command identifier mapped to the command fields.</p>
    pub commands: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::aws_smithy_types::Document>>,
    /// <p>Describe the Matter events with the Matter event identifier mapped to the event fields.</p>
    pub events: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::aws_smithy_types::Document>>,
}
impl MatterCluster {
    /// <p>The cluster id.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Matter attributes.</p>
    pub fn attributes(&self) -> ::std::option::Option<&::aws_smithy_types::Document> {
        self.attributes.as_ref()
    }
    /// <p>Describe the Matter commands with the Matter command identifier mapped to the command fields.</p>
    pub fn commands(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::aws_smithy_types::Document>> {
        self.commands.as_ref()
    }
    /// <p>Describe the Matter events with the Matter event identifier mapped to the event fields.</p>
    pub fn events(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::aws_smithy_types::Document>> {
        self.events.as_ref()
    }
}
impl ::std::fmt::Debug for MatterCluster {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MatterCluster");
        formatter.field("id", &self.id);
        formatter.field("attributes", &"*** Sensitive Data Redacted ***");
        formatter.field("commands", &"*** Sensitive Data Redacted ***");
        formatter.field("events", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl MatterCluster {
    /// Creates a new builder-style object to manufacture [`MatterCluster`](crate::types::MatterCluster).
    pub fn builder() -> crate::types::builders::MatterClusterBuilder {
        crate::types::builders::MatterClusterBuilder::default()
    }
}

/// A builder for [`MatterCluster`](crate::types::MatterCluster).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct MatterClusterBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) attributes: ::std::option::Option<::aws_smithy_types::Document>,
    pub(crate) commands: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::aws_smithy_types::Document>>,
    pub(crate) events: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::aws_smithy_types::Document>>,
}
impl MatterClusterBuilder {
    /// <p>The cluster id.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cluster id.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The cluster id.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The Matter attributes.</p>
    pub fn attributes(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Matter attributes.</p>
    pub fn set_attributes(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.attributes = input;
        self
    }
    /// <p>The Matter attributes.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.attributes
    }
    /// Adds a key-value pair to `commands`.
    ///
    /// To override the contents of this collection use [`set_commands`](Self::set_commands).
    ///
    /// <p>Describe the Matter commands with the Matter command identifier mapped to the command fields.</p>
    pub fn commands(mut self, k: impl ::std::convert::Into<::std::string::String>, v: ::aws_smithy_types::Document) -> Self {
        let mut hash_map = self.commands.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.commands = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Describe the Matter commands with the Matter command identifier mapped to the command fields.</p>
    pub fn set_commands(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::aws_smithy_types::Document>>,
    ) -> Self {
        self.commands = input;
        self
    }
    /// <p>Describe the Matter commands with the Matter command identifier mapped to the command fields.</p>
    pub fn get_commands(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::aws_smithy_types::Document>> {
        &self.commands
    }
    /// Adds a key-value pair to `events`.
    ///
    /// To override the contents of this collection use [`set_events`](Self::set_events).
    ///
    /// <p>Describe the Matter events with the Matter event identifier mapped to the event fields.</p>
    pub fn events(mut self, k: impl ::std::convert::Into<::std::string::String>, v: ::aws_smithy_types::Document) -> Self {
        let mut hash_map = self.events.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.events = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Describe the Matter events with the Matter event identifier mapped to the event fields.</p>
    pub fn set_events(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::aws_smithy_types::Document>>,
    ) -> Self {
        self.events = input;
        self
    }
    /// <p>Describe the Matter events with the Matter event identifier mapped to the event fields.</p>
    pub fn get_events(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::aws_smithy_types::Document>> {
        &self.events
    }
    /// Consumes the builder and constructs a [`MatterCluster`](crate::types::MatterCluster).
    pub fn build(self) -> crate::types::MatterCluster {
        crate::types::MatterCluster {
            id: self.id,
            attributes: self.attributes,
            commands: self.commands,
            events: self.events,
        }
    }
}
impl ::std::fmt::Debug for MatterClusterBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MatterClusterBuilder");
        formatter.field("id", &self.id);
        formatter.field("attributes", &"*** Sensitive Data Redacted ***");
        formatter.field("commands", &"*** Sensitive Data Redacted ***");
        formatter.field("events", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
