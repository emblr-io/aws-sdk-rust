// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Structure describing a connector.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConnectorItem {
    /// <p>The display name of the C2C connector.</p>
    pub name: ::std::string::String,
    /// <p>The configuration details for the cloud connector endpoint, including connection parameters and authentication requirements.</p>
    pub endpoint_config: ::std::option::Option<crate::types::EndpointConfig>,
    /// <p>A description of the C2C connector.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The type of endpoint used for the C2C connector.</p>
    pub endpoint_type: ::std::option::Option<crate::types::EndpointType>,
    /// <p>The identifier of the C2C connector.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The type of cloud connector created.</p>
    pub r#type: ::std::option::Option<crate::types::CloudConnectorType>,
}
impl ConnectorItem {
    /// <p>The display name of the C2C connector.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The configuration details for the cloud connector endpoint, including connection parameters and authentication requirements.</p>
    pub fn endpoint_config(&self) -> ::std::option::Option<&crate::types::EndpointConfig> {
        self.endpoint_config.as_ref()
    }
    /// <p>A description of the C2C connector.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The type of endpoint used for the C2C connector.</p>
    pub fn endpoint_type(&self) -> ::std::option::Option<&crate::types::EndpointType> {
        self.endpoint_type.as_ref()
    }
    /// <p>The identifier of the C2C connector.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The type of cloud connector created.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::CloudConnectorType> {
        self.r#type.as_ref()
    }
}
impl ConnectorItem {
    /// Creates a new builder-style object to manufacture [`ConnectorItem`](crate::types::ConnectorItem).
    pub fn builder() -> crate::types::builders::ConnectorItemBuilder {
        crate::types::builders::ConnectorItemBuilder::default()
    }
}

/// A builder for [`ConnectorItem`](crate::types::ConnectorItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConnectorItemBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) endpoint_config: ::std::option::Option<crate::types::EndpointConfig>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) endpoint_type: ::std::option::Option<crate::types::EndpointType>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::CloudConnectorType>,
}
impl ConnectorItemBuilder {
    /// <p>The display name of the C2C connector.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the C2C connector.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The display name of the C2C connector.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The configuration details for the cloud connector endpoint, including connection parameters and authentication requirements.</p>
    /// This field is required.
    pub fn endpoint_config(mut self, input: crate::types::EndpointConfig) -> Self {
        self.endpoint_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration details for the cloud connector endpoint, including connection parameters and authentication requirements.</p>
    pub fn set_endpoint_config(mut self, input: ::std::option::Option<crate::types::EndpointConfig>) -> Self {
        self.endpoint_config = input;
        self
    }
    /// <p>The configuration details for the cloud connector endpoint, including connection parameters and authentication requirements.</p>
    pub fn get_endpoint_config(&self) -> &::std::option::Option<crate::types::EndpointConfig> {
        &self.endpoint_config
    }
    /// <p>A description of the C2C connector.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the C2C connector.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the C2C connector.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The type of endpoint used for the C2C connector.</p>
    pub fn endpoint_type(mut self, input: crate::types::EndpointType) -> Self {
        self.endpoint_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of endpoint used for the C2C connector.</p>
    pub fn set_endpoint_type(mut self, input: ::std::option::Option<crate::types::EndpointType>) -> Self {
        self.endpoint_type = input;
        self
    }
    /// <p>The type of endpoint used for the C2C connector.</p>
    pub fn get_endpoint_type(&self) -> &::std::option::Option<crate::types::EndpointType> {
        &self.endpoint_type
    }
    /// <p>The identifier of the C2C connector.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the C2C connector.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the C2C connector.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The type of cloud connector created.</p>
    pub fn r#type(mut self, input: crate::types::CloudConnectorType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of cloud connector created.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::CloudConnectorType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of cloud connector created.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::CloudConnectorType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`ConnectorItem`](crate::types::ConnectorItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::ConnectorItemBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::ConnectorItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConnectorItem {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building ConnectorItem",
                )
            })?,
            endpoint_config: self.endpoint_config,
            description: self.description,
            endpoint_type: self.endpoint_type,
            id: self.id,
            r#type: self.r#type,
        })
    }
}
