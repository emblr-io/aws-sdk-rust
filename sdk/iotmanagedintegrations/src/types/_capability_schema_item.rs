// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Structure representing a capability schema item that defines the functionality and features supported by a managed thing.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CapabilitySchemaItem {
    /// <p>The format of the capability schema, which defines how the schema is structured and interpreted.</p>
    pub format: crate::types::SchemaVersionFormat,
    /// <p>The unique identifier of the capability defined in the schema.</p>
    pub capability_id: ::std::string::String,
    /// <p>The external identifier for the capability, used when referencing the capability outside of the AWS ecosystem.</p>
    pub extrinsic_id: ::std::string::String,
    /// <p>The version of the external capability definition, used to track compatibility with external systems.</p>
    pub extrinsic_version: i32,
    /// <p>The actual schema definition that describes the capability's properties, actions, and events.</p>
    pub schema: ::aws_smithy_types::Document,
}
impl CapabilitySchemaItem {
    /// <p>The format of the capability schema, which defines how the schema is structured and interpreted.</p>
    pub fn format(&self) -> &crate::types::SchemaVersionFormat {
        &self.format
    }
    /// <p>The unique identifier of the capability defined in the schema.</p>
    pub fn capability_id(&self) -> &str {
        use std::ops::Deref;
        self.capability_id.deref()
    }
    /// <p>The external identifier for the capability, used when referencing the capability outside of the AWS ecosystem.</p>
    pub fn extrinsic_id(&self) -> &str {
        use std::ops::Deref;
        self.extrinsic_id.deref()
    }
    /// <p>The version of the external capability definition, used to track compatibility with external systems.</p>
    pub fn extrinsic_version(&self) -> i32 {
        self.extrinsic_version
    }
    /// <p>The actual schema definition that describes the capability's properties, actions, and events.</p>
    pub fn schema(&self) -> &::aws_smithy_types::Document {
        &self.schema
    }
}
impl CapabilitySchemaItem {
    /// Creates a new builder-style object to manufacture [`CapabilitySchemaItem`](crate::types::CapabilitySchemaItem).
    pub fn builder() -> crate::types::builders::CapabilitySchemaItemBuilder {
        crate::types::builders::CapabilitySchemaItemBuilder::default()
    }
}

/// A builder for [`CapabilitySchemaItem`](crate::types::CapabilitySchemaItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CapabilitySchemaItemBuilder {
    pub(crate) format: ::std::option::Option<crate::types::SchemaVersionFormat>,
    pub(crate) capability_id: ::std::option::Option<::std::string::String>,
    pub(crate) extrinsic_id: ::std::option::Option<::std::string::String>,
    pub(crate) extrinsic_version: ::std::option::Option<i32>,
    pub(crate) schema: ::std::option::Option<::aws_smithy_types::Document>,
}
impl CapabilitySchemaItemBuilder {
    /// <p>The format of the capability schema, which defines how the schema is structured and interpreted.</p>
    /// This field is required.
    pub fn format(mut self, input: crate::types::SchemaVersionFormat) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format of the capability schema, which defines how the schema is structured and interpreted.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::SchemaVersionFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>The format of the capability schema, which defines how the schema is structured and interpreted.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::SchemaVersionFormat> {
        &self.format
    }
    /// <p>The unique identifier of the capability defined in the schema.</p>
    /// This field is required.
    pub fn capability_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.capability_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the capability defined in the schema.</p>
    pub fn set_capability_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.capability_id = input;
        self
    }
    /// <p>The unique identifier of the capability defined in the schema.</p>
    pub fn get_capability_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.capability_id
    }
    /// <p>The external identifier for the capability, used when referencing the capability outside of the AWS ecosystem.</p>
    /// This field is required.
    pub fn extrinsic_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.extrinsic_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The external identifier for the capability, used when referencing the capability outside of the AWS ecosystem.</p>
    pub fn set_extrinsic_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.extrinsic_id = input;
        self
    }
    /// <p>The external identifier for the capability, used when referencing the capability outside of the AWS ecosystem.</p>
    pub fn get_extrinsic_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.extrinsic_id
    }
    /// <p>The version of the external capability definition, used to track compatibility with external systems.</p>
    /// This field is required.
    pub fn extrinsic_version(mut self, input: i32) -> Self {
        self.extrinsic_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version of the external capability definition, used to track compatibility with external systems.</p>
    pub fn set_extrinsic_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.extrinsic_version = input;
        self
    }
    /// <p>The version of the external capability definition, used to track compatibility with external systems.</p>
    pub fn get_extrinsic_version(&self) -> &::std::option::Option<i32> {
        &self.extrinsic_version
    }
    /// <p>The actual schema definition that describes the capability's properties, actions, and events.</p>
    /// This field is required.
    pub fn schema(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.schema = ::std::option::Option::Some(input);
        self
    }
    /// <p>The actual schema definition that describes the capability's properties, actions, and events.</p>
    pub fn set_schema(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.schema = input;
        self
    }
    /// <p>The actual schema definition that describes the capability's properties, actions, and events.</p>
    pub fn get_schema(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.schema
    }
    /// Consumes the builder and constructs a [`CapabilitySchemaItem`](crate::types::CapabilitySchemaItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`format`](crate::types::builders::CapabilitySchemaItemBuilder::format)
    /// - [`capability_id`](crate::types::builders::CapabilitySchemaItemBuilder::capability_id)
    /// - [`extrinsic_id`](crate::types::builders::CapabilitySchemaItemBuilder::extrinsic_id)
    /// - [`extrinsic_version`](crate::types::builders::CapabilitySchemaItemBuilder::extrinsic_version)
    /// - [`schema`](crate::types::builders::CapabilitySchemaItemBuilder::schema)
    pub fn build(self) -> ::std::result::Result<crate::types::CapabilitySchemaItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CapabilitySchemaItem {
            format: self.format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "format",
                    "format was not specified but it is required when building CapabilitySchemaItem",
                )
            })?,
            capability_id: self.capability_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "capability_id",
                    "capability_id was not specified but it is required when building CapabilitySchemaItem",
                )
            })?,
            extrinsic_id: self.extrinsic_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "extrinsic_id",
                    "extrinsic_id was not specified but it is required when building CapabilitySchemaItem",
                )
            })?,
            extrinsic_version: self.extrinsic_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "extrinsic_version",
                    "extrinsic_version was not specified but it is required when building CapabilitySchemaItem",
                )
            })?,
            schema: self.schema.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "schema",
                    "schema was not specified but it is required when building CapabilitySchemaItem",
                )
            })?,
        })
    }
}
