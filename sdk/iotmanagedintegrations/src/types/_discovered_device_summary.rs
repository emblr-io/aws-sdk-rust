// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Structure containing summary information about a device discovered during a device discovery job.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DiscoveredDeviceSummary {
    /// <p>The third-party device identifier as defined by the connector. This identifier must not contain personal identifiable information (PII).</p>
    pub connector_device_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the device as defined by the connector or third-party system.</p>
    pub connector_device_name: ::std::option::Option<::std::string::String>,
    /// <p>The list of device types or categories that the discovered device belongs to.</p>
    pub device_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The identifier of the managed thing created for this discovered device, if one exists.</p>
    pub managed_thing_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the discovered device, indicating whether it has been added, removed, or modified since the last discovery.</p>
    pub modification: ::std::option::Option<crate::types::DiscoveryModification>,
    /// <p>The timestamp indicating when the device was discovered.</p>
    pub discovered_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The brand of the discovered device.</p>
    pub brand: ::std::option::Option<::std::string::String>,
    /// <p>The model of the discovered device.</p>
    pub model: ::std::option::Option<::std::string::String>,
    /// <p>The authentication material required for connecting to the discovered device, such as credentials or tokens.</p>
    pub authentication_material: ::std::option::Option<::std::string::String>,
}
impl DiscoveredDeviceSummary {
    /// <p>The third-party device identifier as defined by the connector. This identifier must not contain personal identifiable information (PII).</p>
    pub fn connector_device_id(&self) -> ::std::option::Option<&str> {
        self.connector_device_id.as_deref()
    }
    /// <p>The name of the device as defined by the connector or third-party system.</p>
    pub fn connector_device_name(&self) -> ::std::option::Option<&str> {
        self.connector_device_name.as_deref()
    }
    /// <p>The list of device types or categories that the discovered device belongs to.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.device_types.is_none()`.
    pub fn device_types(&self) -> &[::std::string::String] {
        self.device_types.as_deref().unwrap_or_default()
    }
    /// <p>The identifier of the managed thing created for this discovered device, if one exists.</p>
    pub fn managed_thing_id(&self) -> ::std::option::Option<&str> {
        self.managed_thing_id.as_deref()
    }
    /// <p>The status of the discovered device, indicating whether it has been added, removed, or modified since the last discovery.</p>
    pub fn modification(&self) -> ::std::option::Option<&crate::types::DiscoveryModification> {
        self.modification.as_ref()
    }
    /// <p>The timestamp indicating when the device was discovered.</p>
    pub fn discovered_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.discovered_at.as_ref()
    }
    /// <p>The brand of the discovered device.</p>
    pub fn brand(&self) -> ::std::option::Option<&str> {
        self.brand.as_deref()
    }
    /// <p>The model of the discovered device.</p>
    pub fn model(&self) -> ::std::option::Option<&str> {
        self.model.as_deref()
    }
    /// <p>The authentication material required for connecting to the discovered device, such as credentials or tokens.</p>
    pub fn authentication_material(&self) -> ::std::option::Option<&str> {
        self.authentication_material.as_deref()
    }
}
impl ::std::fmt::Debug for DiscoveredDeviceSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DiscoveredDeviceSummary");
        formatter.field("connector_device_id", &"*** Sensitive Data Redacted ***");
        formatter.field("connector_device_name", &"*** Sensitive Data Redacted ***");
        formatter.field("device_types", &self.device_types);
        formatter.field("managed_thing_id", &self.managed_thing_id);
        formatter.field("modification", &self.modification);
        formatter.field("discovered_at", &self.discovered_at);
        formatter.field("brand", &"*** Sensitive Data Redacted ***");
        formatter.field("model", &"*** Sensitive Data Redacted ***");
        formatter.field("authentication_material", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl DiscoveredDeviceSummary {
    /// Creates a new builder-style object to manufacture [`DiscoveredDeviceSummary`](crate::types::DiscoveredDeviceSummary).
    pub fn builder() -> crate::types::builders::DiscoveredDeviceSummaryBuilder {
        crate::types::builders::DiscoveredDeviceSummaryBuilder::default()
    }
}

/// A builder for [`DiscoveredDeviceSummary`](crate::types::DiscoveredDeviceSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct DiscoveredDeviceSummaryBuilder {
    pub(crate) connector_device_id: ::std::option::Option<::std::string::String>,
    pub(crate) connector_device_name: ::std::option::Option<::std::string::String>,
    pub(crate) device_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) managed_thing_id: ::std::option::Option<::std::string::String>,
    pub(crate) modification: ::std::option::Option<crate::types::DiscoveryModification>,
    pub(crate) discovered_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) brand: ::std::option::Option<::std::string::String>,
    pub(crate) model: ::std::option::Option<::std::string::String>,
    pub(crate) authentication_material: ::std::option::Option<::std::string::String>,
}
impl DiscoveredDeviceSummaryBuilder {
    /// <p>The third-party device identifier as defined by the connector. This identifier must not contain personal identifiable information (PII).</p>
    pub fn connector_device_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_device_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The third-party device identifier as defined by the connector. This identifier must not contain personal identifiable information (PII).</p>
    pub fn set_connector_device_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_device_id = input;
        self
    }
    /// <p>The third-party device identifier as defined by the connector. This identifier must not contain personal identifiable information (PII).</p>
    pub fn get_connector_device_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_device_id
    }
    /// <p>The name of the device as defined by the connector or third-party system.</p>
    pub fn connector_device_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_device_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the device as defined by the connector or third-party system.</p>
    pub fn set_connector_device_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_device_name = input;
        self
    }
    /// <p>The name of the device as defined by the connector or third-party system.</p>
    pub fn get_connector_device_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_device_name
    }
    /// Appends an item to `device_types`.
    ///
    /// To override the contents of this collection use [`set_device_types`](Self::set_device_types).
    ///
    /// <p>The list of device types or categories that the discovered device belongs to.</p>
    pub fn device_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.device_types.unwrap_or_default();
        v.push(input.into());
        self.device_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of device types or categories that the discovered device belongs to.</p>
    pub fn set_device_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.device_types = input;
        self
    }
    /// <p>The list of device types or categories that the discovered device belongs to.</p>
    pub fn get_device_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.device_types
    }
    /// <p>The identifier of the managed thing created for this discovered device, if one exists.</p>
    pub fn managed_thing_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.managed_thing_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the managed thing created for this discovered device, if one exists.</p>
    pub fn set_managed_thing_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.managed_thing_id = input;
        self
    }
    /// <p>The identifier of the managed thing created for this discovered device, if one exists.</p>
    pub fn get_managed_thing_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.managed_thing_id
    }
    /// <p>The status of the discovered device, indicating whether it has been added, removed, or modified since the last discovery.</p>
    pub fn modification(mut self, input: crate::types::DiscoveryModification) -> Self {
        self.modification = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the discovered device, indicating whether it has been added, removed, or modified since the last discovery.</p>
    pub fn set_modification(mut self, input: ::std::option::Option<crate::types::DiscoveryModification>) -> Self {
        self.modification = input;
        self
    }
    /// <p>The status of the discovered device, indicating whether it has been added, removed, or modified since the last discovery.</p>
    pub fn get_modification(&self) -> &::std::option::Option<crate::types::DiscoveryModification> {
        &self.modification
    }
    /// <p>The timestamp indicating when the device was discovered.</p>
    pub fn discovered_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.discovered_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp indicating when the device was discovered.</p>
    pub fn set_discovered_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.discovered_at = input;
        self
    }
    /// <p>The timestamp indicating when the device was discovered.</p>
    pub fn get_discovered_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.discovered_at
    }
    /// <p>The brand of the discovered device.</p>
    pub fn brand(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.brand = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The brand of the discovered device.</p>
    pub fn set_brand(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.brand = input;
        self
    }
    /// <p>The brand of the discovered device.</p>
    pub fn get_brand(&self) -> &::std::option::Option<::std::string::String> {
        &self.brand
    }
    /// <p>The model of the discovered device.</p>
    pub fn model(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The model of the discovered device.</p>
    pub fn set_model(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model = input;
        self
    }
    /// <p>The model of the discovered device.</p>
    pub fn get_model(&self) -> &::std::option::Option<::std::string::String> {
        &self.model
    }
    /// <p>The authentication material required for connecting to the discovered device, such as credentials or tokens.</p>
    pub fn authentication_material(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authentication_material = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The authentication material required for connecting to the discovered device, such as credentials or tokens.</p>
    pub fn set_authentication_material(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authentication_material = input;
        self
    }
    /// <p>The authentication material required for connecting to the discovered device, such as credentials or tokens.</p>
    pub fn get_authentication_material(&self) -> &::std::option::Option<::std::string::String> {
        &self.authentication_material
    }
    /// Consumes the builder and constructs a [`DiscoveredDeviceSummary`](crate::types::DiscoveredDeviceSummary).
    pub fn build(self) -> crate::types::DiscoveredDeviceSummary {
        crate::types::DiscoveredDeviceSummary {
            connector_device_id: self.connector_device_id,
            connector_device_name: self.connector_device_name,
            device_types: self.device_types,
            managed_thing_id: self.managed_thing_id,
            modification: self.modification,
            discovered_at: self.discovered_at,
            brand: self.brand,
            model: self.model,
            authentication_material: self.authentication_material,
        }
    }
}
impl ::std::fmt::Debug for DiscoveredDeviceSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DiscoveredDeviceSummaryBuilder");
        formatter.field("connector_device_id", &"*** Sensitive Data Redacted ***");
        formatter.field("connector_device_name", &"*** Sensitive Data Redacted ***");
        formatter.field("device_types", &self.device_types);
        formatter.field("managed_thing_id", &self.managed_thing_id);
        formatter.field("modification", &self.modification);
        formatter.field("discovered_at", &self.discovered_at);
        formatter.field("brand", &"*** Sensitive Data Redacted ***");
        formatter.field("model", &"*** Sensitive Data Redacted ***");
        formatter.field("authentication_material", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
