// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Structure representing one abort config criteria.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AbortConfigCriteria {
    /// <p>The action taken by the abort configuration.</p>
    pub action: ::std::option::Option<crate::types::AbortCriteriaAction>,
    /// <p>Over-the-air (OTA) task abort criteria failure type.</p>
    pub failure_type: ::std::option::Option<crate::types::AbortCriteriaFailureType>,
    /// <p>The minimum number of things that must receive task execution notifications before the task can be aborted.</p>
    pub min_number_of_executed_things: ::std::option::Option<i32>,
    /// <p>The minimum percentage of over-the-air (OTA) task execution failures that must occur to initiate the last abort.</p>
    pub threshold_percentage: ::std::option::Option<f64>,
}
impl AbortConfigCriteria {
    /// <p>The action taken by the abort configuration.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::AbortCriteriaAction> {
        self.action.as_ref()
    }
    /// <p>Over-the-air (OTA) task abort criteria failure type.</p>
    pub fn failure_type(&self) -> ::std::option::Option<&crate::types::AbortCriteriaFailureType> {
        self.failure_type.as_ref()
    }
    /// <p>The minimum number of things that must receive task execution notifications before the task can be aborted.</p>
    pub fn min_number_of_executed_things(&self) -> ::std::option::Option<i32> {
        self.min_number_of_executed_things
    }
    /// <p>The minimum percentage of over-the-air (OTA) task execution failures that must occur to initiate the last abort.</p>
    pub fn threshold_percentage(&self) -> ::std::option::Option<f64> {
        self.threshold_percentage
    }
}
impl AbortConfigCriteria {
    /// Creates a new builder-style object to manufacture [`AbortConfigCriteria`](crate::types::AbortConfigCriteria).
    pub fn builder() -> crate::types::builders::AbortConfigCriteriaBuilder {
        crate::types::builders::AbortConfigCriteriaBuilder::default()
    }
}

/// A builder for [`AbortConfigCriteria`](crate::types::AbortConfigCriteria).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AbortConfigCriteriaBuilder {
    pub(crate) action: ::std::option::Option<crate::types::AbortCriteriaAction>,
    pub(crate) failure_type: ::std::option::Option<crate::types::AbortCriteriaFailureType>,
    pub(crate) min_number_of_executed_things: ::std::option::Option<i32>,
    pub(crate) threshold_percentage: ::std::option::Option<f64>,
}
impl AbortConfigCriteriaBuilder {
    /// <p>The action taken by the abort configuration.</p>
    pub fn action(mut self, input: crate::types::AbortCriteriaAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action taken by the abort configuration.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::AbortCriteriaAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action taken by the abort configuration.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::AbortCriteriaAction> {
        &self.action
    }
    /// <p>Over-the-air (OTA) task abort criteria failure type.</p>
    pub fn failure_type(mut self, input: crate::types::AbortCriteriaFailureType) -> Self {
        self.failure_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Over-the-air (OTA) task abort criteria failure type.</p>
    pub fn set_failure_type(mut self, input: ::std::option::Option<crate::types::AbortCriteriaFailureType>) -> Self {
        self.failure_type = input;
        self
    }
    /// <p>Over-the-air (OTA) task abort criteria failure type.</p>
    pub fn get_failure_type(&self) -> &::std::option::Option<crate::types::AbortCriteriaFailureType> {
        &self.failure_type
    }
    /// <p>The minimum number of things that must receive task execution notifications before the task can be aborted.</p>
    pub fn min_number_of_executed_things(mut self, input: i32) -> Self {
        self.min_number_of_executed_things = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum number of things that must receive task execution notifications before the task can be aborted.</p>
    pub fn set_min_number_of_executed_things(mut self, input: ::std::option::Option<i32>) -> Self {
        self.min_number_of_executed_things = input;
        self
    }
    /// <p>The minimum number of things that must receive task execution notifications before the task can be aborted.</p>
    pub fn get_min_number_of_executed_things(&self) -> &::std::option::Option<i32> {
        &self.min_number_of_executed_things
    }
    /// <p>The minimum percentage of over-the-air (OTA) task execution failures that must occur to initiate the last abort.</p>
    pub fn threshold_percentage(mut self, input: f64) -> Self {
        self.threshold_percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum percentage of over-the-air (OTA) task execution failures that must occur to initiate the last abort.</p>
    pub fn set_threshold_percentage(mut self, input: ::std::option::Option<f64>) -> Self {
        self.threshold_percentage = input;
        self
    }
    /// <p>The minimum percentage of over-the-air (OTA) task execution failures that must occur to initiate the last abort.</p>
    pub fn get_threshold_percentage(&self) -> &::std::option::Option<f64> {
        &self.threshold_percentage
    }
    /// Consumes the builder and constructs a [`AbortConfigCriteria`](crate::types::AbortConfigCriteria).
    pub fn build(self) -> crate::types::AbortConfigCriteria {
        crate::types::AbortConfigCriteria {
            action: self.action,
            failure_type: self.failure_type,
            min_number_of_executed_things: self.min_number_of_executed_things,
            threshold_percentage: self.threshold_percentage,
        }
    }
}
