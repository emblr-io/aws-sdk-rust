// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Structure containing information about an account association, including its identifier, state, and related metadata.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccountAssociationItem {
    /// <p>The unique identifier of the account association.</p>
    pub account_association_id: ::std::string::String,
    /// <p>The current state of the account association, indicating its status in the association lifecycle.</p>
    pub association_state: crate::types::AssociationState,
    /// <p>The error message explaining any issues with the account association, if applicable.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the connector destination associated with this account association.</p>
    pub connector_destination_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the account association.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the account association.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the account association.</p>
    pub arn: ::std::option::Option<::std::string::String>,
}
impl AccountAssociationItem {
    /// <p>The unique identifier of the account association.</p>
    pub fn account_association_id(&self) -> &str {
        use std::ops::Deref;
        self.account_association_id.deref()
    }
    /// <p>The current state of the account association, indicating its status in the association lifecycle.</p>
    pub fn association_state(&self) -> &crate::types::AssociationState {
        &self.association_state
    }
    /// <p>The error message explaining any issues with the account association, if applicable.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>The identifier of the connector destination associated with this account association.</p>
    pub fn connector_destination_id(&self) -> ::std::option::Option<&str> {
        self.connector_destination_id.as_deref()
    }
    /// <p>The name of the account association.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the account association.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the account association.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl AccountAssociationItem {
    /// Creates a new builder-style object to manufacture [`AccountAssociationItem`](crate::types::AccountAssociationItem).
    pub fn builder() -> crate::types::builders::AccountAssociationItemBuilder {
        crate::types::builders::AccountAssociationItemBuilder::default()
    }
}

/// A builder for [`AccountAssociationItem`](crate::types::AccountAssociationItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AccountAssociationItemBuilder {
    pub(crate) account_association_id: ::std::option::Option<::std::string::String>,
    pub(crate) association_state: ::std::option::Option<crate::types::AssociationState>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
    pub(crate) connector_destination_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
}
impl AccountAssociationItemBuilder {
    /// <p>The unique identifier of the account association.</p>
    /// This field is required.
    pub fn account_association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the account association.</p>
    pub fn set_account_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_association_id = input;
        self
    }
    /// <p>The unique identifier of the account association.</p>
    pub fn get_account_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_association_id
    }
    /// <p>The current state of the account association, indicating its status in the association lifecycle.</p>
    /// This field is required.
    pub fn association_state(mut self, input: crate::types::AssociationState) -> Self {
        self.association_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the account association, indicating its status in the association lifecycle.</p>
    pub fn set_association_state(mut self, input: ::std::option::Option<crate::types::AssociationState>) -> Self {
        self.association_state = input;
        self
    }
    /// <p>The current state of the account association, indicating its status in the association lifecycle.</p>
    pub fn get_association_state(&self) -> &::std::option::Option<crate::types::AssociationState> {
        &self.association_state
    }
    /// <p>The error message explaining any issues with the account association, if applicable.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error message explaining any issues with the account association, if applicable.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The error message explaining any issues with the account association, if applicable.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// <p>The identifier of the connector destination associated with this account association.</p>
    pub fn connector_destination_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_destination_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the connector destination associated with this account association.</p>
    pub fn set_connector_destination_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_destination_id = input;
        self
    }
    /// <p>The identifier of the connector destination associated with this account association.</p>
    pub fn get_connector_destination_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_destination_id
    }
    /// <p>The name of the account association.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the account association.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the account association.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of the account association.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the account association.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the account association.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The Amazon Resource Name (ARN) of the account association.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the account association.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the account association.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Consumes the builder and constructs a [`AccountAssociationItem`](crate::types::AccountAssociationItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`account_association_id`](crate::types::builders::AccountAssociationItemBuilder::account_association_id)
    /// - [`association_state`](crate::types::builders::AccountAssociationItemBuilder::association_state)
    pub fn build(self) -> ::std::result::Result<crate::types::AccountAssociationItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AccountAssociationItem {
            account_association_id: self.account_association_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "account_association_id",
                    "account_association_id was not specified but it is required when building AccountAssociationItem",
                )
            })?,
            association_state: self.association_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "association_state",
                    "association_state was not specified but it is required when building AccountAssociationItem",
                )
            })?,
            error_message: self.error_message,
            connector_destination_id: self.connector_destination_id,
            name: self.name,
            description: self.description,
            arn: self.arn,
        })
    }
}
