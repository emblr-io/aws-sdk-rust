// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Over-the-air (OTA) task rollout config.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OtaTaskExecutionRolloutConfig {
    /// <p>Structure representing exponential rate of rollout for an over-the-air (OTA) task.</p>
    pub exponential_rollout_rate: ::std::option::Option<crate::types::ExponentialRolloutRate>,
    /// <p>The maximum number of things that will be notified of a pending task, per minute.</p>
    pub maximum_per_minute: ::std::option::Option<i32>,
}
impl OtaTaskExecutionRolloutConfig {
    /// <p>Structure representing exponential rate of rollout for an over-the-air (OTA) task.</p>
    pub fn exponential_rollout_rate(&self) -> ::std::option::Option<&crate::types::ExponentialRolloutRate> {
        self.exponential_rollout_rate.as_ref()
    }
    /// <p>The maximum number of things that will be notified of a pending task, per minute.</p>
    pub fn maximum_per_minute(&self) -> ::std::option::Option<i32> {
        self.maximum_per_minute
    }
}
impl OtaTaskExecutionRolloutConfig {
    /// Creates a new builder-style object to manufacture [`OtaTaskExecutionRolloutConfig`](crate::types::OtaTaskExecutionRolloutConfig).
    pub fn builder() -> crate::types::builders::OtaTaskExecutionRolloutConfigBuilder {
        crate::types::builders::OtaTaskExecutionRolloutConfigBuilder::default()
    }
}

/// A builder for [`OtaTaskExecutionRolloutConfig`](crate::types::OtaTaskExecutionRolloutConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OtaTaskExecutionRolloutConfigBuilder {
    pub(crate) exponential_rollout_rate: ::std::option::Option<crate::types::ExponentialRolloutRate>,
    pub(crate) maximum_per_minute: ::std::option::Option<i32>,
}
impl OtaTaskExecutionRolloutConfigBuilder {
    /// <p>Structure representing exponential rate of rollout for an over-the-air (OTA) task.</p>
    pub fn exponential_rollout_rate(mut self, input: crate::types::ExponentialRolloutRate) -> Self {
        self.exponential_rollout_rate = ::std::option::Option::Some(input);
        self
    }
    /// <p>Structure representing exponential rate of rollout for an over-the-air (OTA) task.</p>
    pub fn set_exponential_rollout_rate(mut self, input: ::std::option::Option<crate::types::ExponentialRolloutRate>) -> Self {
        self.exponential_rollout_rate = input;
        self
    }
    /// <p>Structure representing exponential rate of rollout for an over-the-air (OTA) task.</p>
    pub fn get_exponential_rollout_rate(&self) -> &::std::option::Option<crate::types::ExponentialRolloutRate> {
        &self.exponential_rollout_rate
    }
    /// <p>The maximum number of things that will be notified of a pending task, per minute.</p>
    pub fn maximum_per_minute(mut self, input: i32) -> Self {
        self.maximum_per_minute = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of things that will be notified of a pending task, per minute.</p>
    pub fn set_maximum_per_minute(mut self, input: ::std::option::Option<i32>) -> Self {
        self.maximum_per_minute = input;
        self
    }
    /// <p>The maximum number of things that will be notified of a pending task, per minute.</p>
    pub fn get_maximum_per_minute(&self) -> &::std::option::Option<i32> {
        &self.maximum_per_minute
    }
    /// Consumes the builder and constructs a [`OtaTaskExecutionRolloutConfig`](crate::types::OtaTaskExecutionRolloutConfig).
    pub fn build(self) -> crate::types::OtaTaskExecutionRolloutConfig {
        crate::types::OtaTaskExecutionRolloutConfig {
            exponential_rollout_rate: self.exponential_rollout_rate,
            maximum_per_minute: self.maximum_per_minute,
        }
    }
}
