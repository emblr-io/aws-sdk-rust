// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The capability used in capability report.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CapabilityReportCapability {
    /// <p>The id of the schema version.</p>
    pub id: ::std::string::String,
    /// <p>The name of the capability.</p>
    pub name: ::std::string::String,
    /// <p>The version of the capability.</p>
    pub version: ::std::string::String,
    /// <p>The capability properties used in the capability report.</p>
    pub properties: ::std::vec::Vec<::std::string::String>,
    /// <p>The capability actions used in the capability report.</p>
    pub actions: ::std::vec::Vec<::std::string::String>,
    /// <p>The capability events used in the capability report.</p>
    pub events: ::std::vec::Vec<::std::string::String>,
}
impl CapabilityReportCapability {
    /// <p>The id of the schema version.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The name of the capability.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The version of the capability.</p>
    pub fn version(&self) -> &str {
        use std::ops::Deref;
        self.version.deref()
    }
    /// <p>The capability properties used in the capability report.</p>
    pub fn properties(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.properties.deref()
    }
    /// <p>The capability actions used in the capability report.</p>
    pub fn actions(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.actions.deref()
    }
    /// <p>The capability events used in the capability report.</p>
    pub fn events(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.events.deref()
    }
}
impl CapabilityReportCapability {
    /// Creates a new builder-style object to manufacture [`CapabilityReportCapability`](crate::types::CapabilityReportCapability).
    pub fn builder() -> crate::types::builders::CapabilityReportCapabilityBuilder {
        crate::types::builders::CapabilityReportCapabilityBuilder::default()
    }
}

/// A builder for [`CapabilityReportCapability`](crate::types::CapabilityReportCapability).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CapabilityReportCapabilityBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) properties: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) events: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CapabilityReportCapabilityBuilder {
    /// <p>The id of the schema version.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The id of the schema version.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The id of the schema version.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the capability.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the capability.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the capability.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The version of the capability.</p>
    /// This field is required.
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the capability.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version of the capability.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// Appends an item to `properties`.
    ///
    /// To override the contents of this collection use [`set_properties`](Self::set_properties).
    ///
    /// <p>The capability properties used in the capability report.</p>
    pub fn properties(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.properties.unwrap_or_default();
        v.push(input.into());
        self.properties = ::std::option::Option::Some(v);
        self
    }
    /// <p>The capability properties used in the capability report.</p>
    pub fn set_properties(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.properties = input;
        self
    }
    /// <p>The capability properties used in the capability report.</p>
    pub fn get_properties(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.properties
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The capability actions used in the capability report.</p>
    pub fn actions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input.into());
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The capability actions used in the capability report.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>The capability actions used in the capability report.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.actions
    }
    /// Appends an item to `events`.
    ///
    /// To override the contents of this collection use [`set_events`](Self::set_events).
    ///
    /// <p>The capability events used in the capability report.</p>
    pub fn events(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.events.unwrap_or_default();
        v.push(input.into());
        self.events = ::std::option::Option::Some(v);
        self
    }
    /// <p>The capability events used in the capability report.</p>
    pub fn set_events(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.events = input;
        self
    }
    /// <p>The capability events used in the capability report.</p>
    pub fn get_events(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.events
    }
    /// Consumes the builder and constructs a [`CapabilityReportCapability`](crate::types::CapabilityReportCapability).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::CapabilityReportCapabilityBuilder::id)
    /// - [`name`](crate::types::builders::CapabilityReportCapabilityBuilder::name)
    /// - [`version`](crate::types::builders::CapabilityReportCapabilityBuilder::version)
    /// - [`properties`](crate::types::builders::CapabilityReportCapabilityBuilder::properties)
    /// - [`actions`](crate::types::builders::CapabilityReportCapabilityBuilder::actions)
    /// - [`events`](crate::types::builders::CapabilityReportCapabilityBuilder::events)
    pub fn build(self) -> ::std::result::Result<crate::types::CapabilityReportCapability, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CapabilityReportCapability {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building CapabilityReportCapability",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CapabilityReportCapability",
                )
            })?,
            version: self.version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "version",
                    "version was not specified but it is required when building CapabilityReportCapability",
                )
            })?,
            properties: self.properties.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "properties",
                    "properties was not specified but it is required when building CapabilityReportCapability",
                )
            })?,
            actions: self.actions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "actions",
                    "actions was not specified but it is required when building CapabilityReportCapability",
                )
            })?,
            events: self.events.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "events",
                    "events was not specified but it is required when building CapabilityReportCapability",
                )
            })?,
        })
    }
}
