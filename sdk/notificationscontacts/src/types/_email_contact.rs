// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An email contact.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EmailContact {
    /// <p>The Amazon Resource Name (ARN) of the email contact.</p>
    pub arn: ::std::string::String,
    /// <p>The name of the email contact.</p>
    pub name: ::std::string::String,
    /// <p>The email address this email contact points to. The activation email and any subscribed emails are sent here.</p>
    pub address: ::std::string::String,
    /// <p>The status of the email contact. Only activated email contacts receive emails.</p>
    pub status: crate::types::EmailContactStatus,
    /// <p>The creation time of the resource.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>The time the resource was last updated.</p>
    pub update_time: ::aws_smithy_types::DateTime,
}
impl EmailContact {
    /// <p>The Amazon Resource Name (ARN) of the email contact.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The name of the email contact.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The email address this email contact points to. The activation email and any subscribed emails are sent here.</p>
    pub fn address(&self) -> &str {
        use std::ops::Deref;
        self.address.deref()
    }
    /// <p>The status of the email contact. Only activated email contacts receive emails.</p>
    pub fn status(&self) -> &crate::types::EmailContactStatus {
        &self.status
    }
    /// <p>The creation time of the resource.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>The time the resource was last updated.</p>
    pub fn update_time(&self) -> &::aws_smithy_types::DateTime {
        &self.update_time
    }
}
impl ::std::fmt::Debug for EmailContact {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EmailContact");
        formatter.field("arn", &self.arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("address", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("update_time", &self.update_time);
        formatter.finish()
    }
}
impl EmailContact {
    /// Creates a new builder-style object to manufacture [`EmailContact`](crate::types::EmailContact).
    pub fn builder() -> crate::types::builders::EmailContactBuilder {
        crate::types::builders::EmailContactBuilder::default()
    }
}

/// A builder for [`EmailContact`](crate::types::EmailContact).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct EmailContactBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) address: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::EmailContactStatus>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl EmailContactBuilder {
    /// <p>The Amazon Resource Name (ARN) of the email contact.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the email contact.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the email contact.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the email contact.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the email contact.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the email contact.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The email address this email contact points to. The activation email and any subscribed emails are sent here.</p>
    /// This field is required.
    pub fn address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address this email contact points to. The activation email and any subscribed emails are sent here.</p>
    pub fn set_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address = input;
        self
    }
    /// <p>The email address this email contact points to. The activation email and any subscribed emails are sent here.</p>
    pub fn get_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.address
    }
    /// <p>The status of the email contact. Only activated email contacts receive emails.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::EmailContactStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the email contact. Only activated email contacts receive emails.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::EmailContactStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the email contact. Only activated email contacts receive emails.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::EmailContactStatus> {
        &self.status
    }
    /// <p>The creation time of the resource.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation time of the resource.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The creation time of the resource.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The time the resource was last updated.</p>
    /// This field is required.
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the resource was last updated.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The time the resource was last updated.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// Consumes the builder and constructs a [`EmailContact`](crate::types::EmailContact).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::EmailContactBuilder::arn)
    /// - [`name`](crate::types::builders::EmailContactBuilder::name)
    /// - [`address`](crate::types::builders::EmailContactBuilder::address)
    /// - [`status`](crate::types::builders::EmailContactBuilder::status)
    /// - [`creation_time`](crate::types::builders::EmailContactBuilder::creation_time)
    /// - [`update_time`](crate::types::builders::EmailContactBuilder::update_time)
    pub fn build(self) -> ::std::result::Result<crate::types::EmailContact, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EmailContact {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building EmailContact",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building EmailContact",
                )
            })?,
            address: self.address.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "address",
                    "address was not specified but it is required when building EmailContact",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building EmailContact",
                )
            })?,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building EmailContact",
                )
            })?,
            update_time: self.update_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_time",
                    "update_time was not specified but it is required when building EmailContact",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for EmailContactBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EmailContactBuilder");
        formatter.field("arn", &self.arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("address", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("update_time", &self.update_time);
        formatter.finish()
    }
}
