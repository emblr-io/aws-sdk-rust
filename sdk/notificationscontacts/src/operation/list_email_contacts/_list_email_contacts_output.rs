// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListEmailContactsOutput {
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>A list of email contacts.</p>
    pub email_contacts: ::std::vec::Vec<crate::types::EmailContact>,
    _request_id: Option<String>,
}
impl ListEmailContactsOutput {
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A list of email contacts.</p>
    pub fn email_contacts(&self) -> &[crate::types::EmailContact] {
        use std::ops::Deref;
        self.email_contacts.deref()
    }
}
impl ::aws_types::request_id::RequestId for ListEmailContactsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListEmailContactsOutput {
    /// Creates a new builder-style object to manufacture [`ListEmailContactsOutput`](crate::operation::list_email_contacts::ListEmailContactsOutput).
    pub fn builder() -> crate::operation::list_email_contacts::builders::ListEmailContactsOutputBuilder {
        crate::operation::list_email_contacts::builders::ListEmailContactsOutputBuilder::default()
    }
}

/// A builder for [`ListEmailContactsOutput`](crate::operation::list_email_contacts::ListEmailContactsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListEmailContactsOutputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) email_contacts: ::std::option::Option<::std::vec::Vec<crate::types::EmailContact>>,
    _request_id: Option<String>,
}
impl ListEmailContactsOutputBuilder {
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `email_contacts`.
    ///
    /// To override the contents of this collection use [`set_email_contacts`](Self::set_email_contacts).
    ///
    /// <p>A list of email contacts.</p>
    pub fn email_contacts(mut self, input: crate::types::EmailContact) -> Self {
        let mut v = self.email_contacts.unwrap_or_default();
        v.push(input);
        self.email_contacts = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of email contacts.</p>
    pub fn set_email_contacts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EmailContact>>) -> Self {
        self.email_contacts = input;
        self
    }
    /// <p>A list of email contacts.</p>
    pub fn get_email_contacts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EmailContact>> {
        &self.email_contacts
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListEmailContactsOutput`](crate::operation::list_email_contacts::ListEmailContactsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`email_contacts`](crate::operation::list_email_contacts::builders::ListEmailContactsOutputBuilder::email_contacts)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_email_contacts::ListEmailContactsOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_email_contacts::ListEmailContactsOutput {
            next_token: self.next_token,
            email_contacts: self.email_contacts.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "email_contacts",
                    "email_contacts was not specified but it is required when building ListEmailContactsOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
