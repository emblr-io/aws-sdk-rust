// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains high-level information about the invoice receiver.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct InvoiceProfile {
    /// <p>The account ID the invoice profile is generated for.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the person receiving the invoice profile.</p>
    pub receiver_name: ::std::option::Option<::std::string::String>,
    /// <p>The address of the receiver that will be printed on the invoice.</p>
    pub receiver_address: ::std::option::Option<crate::types::ReceiverAddress>,
    /// <p>The email address for the invoice profile receiver.</p>
    pub receiver_email: ::std::option::Option<::std::string::String>,
    /// <p>This specifies the issuing entity of the invoice.</p>
    pub issuer: ::std::option::Option<::std::string::String>,
    /// <p>Your Tax Registration Number (TRN) information.</p>
    pub tax_registration_number: ::std::option::Option<::std::string::String>,
}
impl InvoiceProfile {
    /// <p>The account ID the invoice profile is generated for.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The name of the person receiving the invoice profile.</p>
    pub fn receiver_name(&self) -> ::std::option::Option<&str> {
        self.receiver_name.as_deref()
    }
    /// <p>The address of the receiver that will be printed on the invoice.</p>
    pub fn receiver_address(&self) -> ::std::option::Option<&crate::types::ReceiverAddress> {
        self.receiver_address.as_ref()
    }
    /// <p>The email address for the invoice profile receiver.</p>
    pub fn receiver_email(&self) -> ::std::option::Option<&str> {
        self.receiver_email.as_deref()
    }
    /// <p>This specifies the issuing entity of the invoice.</p>
    pub fn issuer(&self) -> ::std::option::Option<&str> {
        self.issuer.as_deref()
    }
    /// <p>Your Tax Registration Number (TRN) information.</p>
    pub fn tax_registration_number(&self) -> ::std::option::Option<&str> {
        self.tax_registration_number.as_deref()
    }
}
impl ::std::fmt::Debug for InvoiceProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InvoiceProfile");
        formatter.field("account_id", &self.account_id);
        formatter.field("receiver_name", &self.receiver_name);
        formatter.field("receiver_address", &"*** Sensitive Data Redacted ***");
        formatter.field("receiver_email", &"*** Sensitive Data Redacted ***");
        formatter.field("issuer", &self.issuer);
        formatter.field("tax_registration_number", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl InvoiceProfile {
    /// Creates a new builder-style object to manufacture [`InvoiceProfile`](crate::types::InvoiceProfile).
    pub fn builder() -> crate::types::builders::InvoiceProfileBuilder {
        crate::types::builders::InvoiceProfileBuilder::default()
    }
}

/// A builder for [`InvoiceProfile`](crate::types::InvoiceProfile).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct InvoiceProfileBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) receiver_name: ::std::option::Option<::std::string::String>,
    pub(crate) receiver_address: ::std::option::Option<crate::types::ReceiverAddress>,
    pub(crate) receiver_email: ::std::option::Option<::std::string::String>,
    pub(crate) issuer: ::std::option::Option<::std::string::String>,
    pub(crate) tax_registration_number: ::std::option::Option<::std::string::String>,
}
impl InvoiceProfileBuilder {
    /// <p>The account ID the invoice profile is generated for.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account ID the invoice profile is generated for.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The account ID the invoice profile is generated for.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The name of the person receiving the invoice profile.</p>
    pub fn receiver_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.receiver_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the person receiving the invoice profile.</p>
    pub fn set_receiver_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.receiver_name = input;
        self
    }
    /// <p>The name of the person receiving the invoice profile.</p>
    pub fn get_receiver_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.receiver_name
    }
    /// <p>The address of the receiver that will be printed on the invoice.</p>
    pub fn receiver_address(mut self, input: crate::types::ReceiverAddress) -> Self {
        self.receiver_address = ::std::option::Option::Some(input);
        self
    }
    /// <p>The address of the receiver that will be printed on the invoice.</p>
    pub fn set_receiver_address(mut self, input: ::std::option::Option<crate::types::ReceiverAddress>) -> Self {
        self.receiver_address = input;
        self
    }
    /// <p>The address of the receiver that will be printed on the invoice.</p>
    pub fn get_receiver_address(&self) -> &::std::option::Option<crate::types::ReceiverAddress> {
        &self.receiver_address
    }
    /// <p>The email address for the invoice profile receiver.</p>
    pub fn receiver_email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.receiver_email = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address for the invoice profile receiver.</p>
    pub fn set_receiver_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.receiver_email = input;
        self
    }
    /// <p>The email address for the invoice profile receiver.</p>
    pub fn get_receiver_email(&self) -> &::std::option::Option<::std::string::String> {
        &self.receiver_email
    }
    /// <p>This specifies the issuing entity of the invoice.</p>
    pub fn issuer(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.issuer = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This specifies the issuing entity of the invoice.</p>
    pub fn set_issuer(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.issuer = input;
        self
    }
    /// <p>This specifies the issuing entity of the invoice.</p>
    pub fn get_issuer(&self) -> &::std::option::Option<::std::string::String> {
        &self.issuer
    }
    /// <p>Your Tax Registration Number (TRN) information.</p>
    pub fn tax_registration_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tax_registration_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Your Tax Registration Number (TRN) information.</p>
    pub fn set_tax_registration_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tax_registration_number = input;
        self
    }
    /// <p>Your Tax Registration Number (TRN) information.</p>
    pub fn get_tax_registration_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.tax_registration_number
    }
    /// Consumes the builder and constructs a [`InvoiceProfile`](crate::types::InvoiceProfile).
    pub fn build(self) -> crate::types::InvoiceProfile {
        crate::types::InvoiceProfile {
            account_id: self.account_id,
            receiver_name: self.receiver_name,
            receiver_address: self.receiver_address,
            receiver_email: self.receiver_email,
            issuer: self.issuer,
            tax_registration_number: self.tax_registration_number,
        }
    }
}
impl ::std::fmt::Debug for InvoiceProfileBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InvoiceProfileBuilder");
        formatter.field("account_id", &self.account_id);
        formatter.field("receiver_name", &self.receiver_name);
        formatter.field("receiver_address", &"*** Sensitive Data Redacted ***");
        formatter.field("receiver_email", &"*** Sensitive Data Redacted ***");
        formatter.field("issuer", &self.issuer);
        formatter.field("tax_registration_number", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
