// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of currency exchange.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CurrencyExchangeDetails {
    /// <p>The exchange source currency.</p>
    pub source_currency_code: ::std::option::Option<::std::string::String>,
    /// <p>The exchange target currency.</p>
    pub target_currency_code: ::std::option::Option<::std::string::String>,
    /// <p>The currency exchange rate.</p>
    pub rate: ::std::option::Option<::std::string::String>,
}
impl CurrencyExchangeDetails {
    /// <p>The exchange source currency.</p>
    pub fn source_currency_code(&self) -> ::std::option::Option<&str> {
        self.source_currency_code.as_deref()
    }
    /// <p>The exchange target currency.</p>
    pub fn target_currency_code(&self) -> ::std::option::Option<&str> {
        self.target_currency_code.as_deref()
    }
    /// <p>The currency exchange rate.</p>
    pub fn rate(&self) -> ::std::option::Option<&str> {
        self.rate.as_deref()
    }
}
impl CurrencyExchangeDetails {
    /// Creates a new builder-style object to manufacture [`CurrencyExchangeDetails`](crate::types::CurrencyExchangeDetails).
    pub fn builder() -> crate::types::builders::CurrencyExchangeDetailsBuilder {
        crate::types::builders::CurrencyExchangeDetailsBuilder::default()
    }
}

/// A builder for [`CurrencyExchangeDetails`](crate::types::CurrencyExchangeDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CurrencyExchangeDetailsBuilder {
    pub(crate) source_currency_code: ::std::option::Option<::std::string::String>,
    pub(crate) target_currency_code: ::std::option::Option<::std::string::String>,
    pub(crate) rate: ::std::option::Option<::std::string::String>,
}
impl CurrencyExchangeDetailsBuilder {
    /// <p>The exchange source currency.</p>
    pub fn source_currency_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_currency_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The exchange source currency.</p>
    pub fn set_source_currency_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_currency_code = input;
        self
    }
    /// <p>The exchange source currency.</p>
    pub fn get_source_currency_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_currency_code
    }
    /// <p>The exchange target currency.</p>
    pub fn target_currency_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_currency_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The exchange target currency.</p>
    pub fn set_target_currency_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_currency_code = input;
        self
    }
    /// <p>The exchange target currency.</p>
    pub fn get_target_currency_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_currency_code
    }
    /// <p>The currency exchange rate.</p>
    pub fn rate(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rate = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The currency exchange rate.</p>
    pub fn set_rate(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rate = input;
        self
    }
    /// <p>The currency exchange rate.</p>
    pub fn get_rate(&self) -> &::std::option::Option<::std::string::String> {
        &self.rate
    }
    /// Consumes the builder and constructs a [`CurrencyExchangeDetails`](crate::types::CurrencyExchangeDetails).
    pub fn build(self) -> crate::types::CurrencyExchangeDetails {
        crate::types::CurrencyExchangeDetails {
            source_currency_code: self.source_currency_code,
            target_currency_code: self.target_currency_code,
            rate: self.rate,
        }
    }
}
