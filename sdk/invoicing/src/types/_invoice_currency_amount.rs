// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The amount charged after taxes, in the preferred currency.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InvoiceCurrencyAmount {
    /// <p>The invoice currency amount.</p>
    pub total_amount: ::std::option::Option<::std::string::String>,
    /// <p>Details about the invoice total amount before tax.</p>
    pub total_amount_before_tax: ::std::option::Option<::std::string::String>,
    /// <p>The currency dominion of the invoice document.</p>
    pub currency_code: ::std::option::Option<::std::string::String>,
    /// <p>Details about the invoice currency amount.</p>
    pub amount_breakdown: ::std::option::Option<crate::types::AmountBreakdown>,
    /// <p>The details of currency exchange.</p>
    pub currency_exchange_details: ::std::option::Option<crate::types::CurrencyExchangeDetails>,
}
impl InvoiceCurrencyAmount {
    /// <p>The invoice currency amount.</p>
    pub fn total_amount(&self) -> ::std::option::Option<&str> {
        self.total_amount.as_deref()
    }
    /// <p>Details about the invoice total amount before tax.</p>
    pub fn total_amount_before_tax(&self) -> ::std::option::Option<&str> {
        self.total_amount_before_tax.as_deref()
    }
    /// <p>The currency dominion of the invoice document.</p>
    pub fn currency_code(&self) -> ::std::option::Option<&str> {
        self.currency_code.as_deref()
    }
    /// <p>Details about the invoice currency amount.</p>
    pub fn amount_breakdown(&self) -> ::std::option::Option<&crate::types::AmountBreakdown> {
        self.amount_breakdown.as_ref()
    }
    /// <p>The details of currency exchange.</p>
    pub fn currency_exchange_details(&self) -> ::std::option::Option<&crate::types::CurrencyExchangeDetails> {
        self.currency_exchange_details.as_ref()
    }
}
impl InvoiceCurrencyAmount {
    /// Creates a new builder-style object to manufacture [`InvoiceCurrencyAmount`](crate::types::InvoiceCurrencyAmount).
    pub fn builder() -> crate::types::builders::InvoiceCurrencyAmountBuilder {
        crate::types::builders::InvoiceCurrencyAmountBuilder::default()
    }
}

/// A builder for [`InvoiceCurrencyAmount`](crate::types::InvoiceCurrencyAmount).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InvoiceCurrencyAmountBuilder {
    pub(crate) total_amount: ::std::option::Option<::std::string::String>,
    pub(crate) total_amount_before_tax: ::std::option::Option<::std::string::String>,
    pub(crate) currency_code: ::std::option::Option<::std::string::String>,
    pub(crate) amount_breakdown: ::std::option::Option<crate::types::AmountBreakdown>,
    pub(crate) currency_exchange_details: ::std::option::Option<crate::types::CurrencyExchangeDetails>,
}
impl InvoiceCurrencyAmountBuilder {
    /// <p>The invoice currency amount.</p>
    pub fn total_amount(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.total_amount = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The invoice currency amount.</p>
    pub fn set_total_amount(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.total_amount = input;
        self
    }
    /// <p>The invoice currency amount.</p>
    pub fn get_total_amount(&self) -> &::std::option::Option<::std::string::String> {
        &self.total_amount
    }
    /// <p>Details about the invoice total amount before tax.</p>
    pub fn total_amount_before_tax(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.total_amount_before_tax = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Details about the invoice total amount before tax.</p>
    pub fn set_total_amount_before_tax(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.total_amount_before_tax = input;
        self
    }
    /// <p>Details about the invoice total amount before tax.</p>
    pub fn get_total_amount_before_tax(&self) -> &::std::option::Option<::std::string::String> {
        &self.total_amount_before_tax
    }
    /// <p>The currency dominion of the invoice document.</p>
    pub fn currency_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.currency_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The currency dominion of the invoice document.</p>
    pub fn set_currency_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.currency_code = input;
        self
    }
    /// <p>The currency dominion of the invoice document.</p>
    pub fn get_currency_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.currency_code
    }
    /// <p>Details about the invoice currency amount.</p>
    pub fn amount_breakdown(mut self, input: crate::types::AmountBreakdown) -> Self {
        self.amount_breakdown = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the invoice currency amount.</p>
    pub fn set_amount_breakdown(mut self, input: ::std::option::Option<crate::types::AmountBreakdown>) -> Self {
        self.amount_breakdown = input;
        self
    }
    /// <p>Details about the invoice currency amount.</p>
    pub fn get_amount_breakdown(&self) -> &::std::option::Option<crate::types::AmountBreakdown> {
        &self.amount_breakdown
    }
    /// <p>The details of currency exchange.</p>
    pub fn currency_exchange_details(mut self, input: crate::types::CurrencyExchangeDetails) -> Self {
        self.currency_exchange_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of currency exchange.</p>
    pub fn set_currency_exchange_details(mut self, input: ::std::option::Option<crate::types::CurrencyExchangeDetails>) -> Self {
        self.currency_exchange_details = input;
        self
    }
    /// <p>The details of currency exchange.</p>
    pub fn get_currency_exchange_details(&self) -> &::std::option::Option<crate::types::CurrencyExchangeDetails> {
        &self.currency_exchange_details
    }
    /// Consumes the builder and constructs a [`InvoiceCurrencyAmount`](crate::types::InvoiceCurrencyAmount).
    pub fn build(self) -> crate::types::InvoiceCurrencyAmount {
        crate::types::InvoiceCurrencyAmount {
            total_amount: self.total_amount,
            total_amount_before_tax: self.total_amount_before_tax,
            currency_code: self.currency_code,
            amount_breakdown: self.amount_breakdown,
            currency_exchange_details: self.currency_exchange_details,
        }
    }
}
