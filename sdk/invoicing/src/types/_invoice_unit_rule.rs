// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This is used to categorize the invoice unit. Values are Amazon Web Services account IDs. Currently, the only supported rule is <code>LINKED_ACCOUNT</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InvoiceUnitRule {
    /// <p>The list of <code>LINKED_ACCOUNT</code> IDs where charges are included within the invoice unit.</p>
    pub linked_accounts: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl InvoiceUnitRule {
    /// <p>The list of <code>LINKED_ACCOUNT</code> IDs where charges are included within the invoice unit.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.linked_accounts.is_none()`.
    pub fn linked_accounts(&self) -> &[::std::string::String] {
        self.linked_accounts.as_deref().unwrap_or_default()
    }
}
impl InvoiceUnitRule {
    /// Creates a new builder-style object to manufacture [`InvoiceUnitRule`](crate::types::InvoiceUnitRule).
    pub fn builder() -> crate::types::builders::InvoiceUnitRuleBuilder {
        crate::types::builders::InvoiceUnitRuleBuilder::default()
    }
}

/// A builder for [`InvoiceUnitRule`](crate::types::InvoiceUnitRule).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InvoiceUnitRuleBuilder {
    pub(crate) linked_accounts: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl InvoiceUnitRuleBuilder {
    /// Appends an item to `linked_accounts`.
    ///
    /// To override the contents of this collection use [`set_linked_accounts`](Self::set_linked_accounts).
    ///
    /// <p>The list of <code>LINKED_ACCOUNT</code> IDs where charges are included within the invoice unit.</p>
    pub fn linked_accounts(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.linked_accounts.unwrap_or_default();
        v.push(input.into());
        self.linked_accounts = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of <code>LINKED_ACCOUNT</code> IDs where charges are included within the invoice unit.</p>
    pub fn set_linked_accounts(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.linked_accounts = input;
        self
    }
    /// <p>The list of <code>LINKED_ACCOUNT</code> IDs where charges are included within the invoice unit.</p>
    pub fn get_linked_accounts(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.linked_accounts
    }
    /// Consumes the builder and constructs a [`InvoiceUnitRule`](crate::types::InvoiceUnitRule).
    pub fn build(self) -> crate::types::InvoiceUnitRule {
        crate::types::InvoiceUnitRule {
            linked_accounts: self.linked_accounts,
        }
    }
}
