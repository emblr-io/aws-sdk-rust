// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The organization name providing Amazon Web Services services.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Entity {
    /// <p>The name of the entity that issues the Amazon Web Services invoice.</p>
    pub invoicing_entity: ::std::option::Option<::std::string::String>,
}
impl Entity {
    /// <p>The name of the entity that issues the Amazon Web Services invoice.</p>
    pub fn invoicing_entity(&self) -> ::std::option::Option<&str> {
        self.invoicing_entity.as_deref()
    }
}
impl Entity {
    /// Creates a new builder-style object to manufacture [`Entity`](crate::types::Entity).
    pub fn builder() -> crate::types::builders::EntityBuilder {
        crate::types::builders::EntityBuilder::default()
    }
}

/// A builder for [`Entity`](crate::types::Entity).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EntityBuilder {
    pub(crate) invoicing_entity: ::std::option::Option<::std::string::String>,
}
impl EntityBuilder {
    /// <p>The name of the entity that issues the Amazon Web Services invoice.</p>
    pub fn invoicing_entity(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.invoicing_entity = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the entity that issues the Amazon Web Services invoice.</p>
    pub fn set_invoicing_entity(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.invoicing_entity = input;
        self
    }
    /// <p>The name of the entity that issues the Amazon Web Services invoice.</p>
    pub fn get_invoicing_entity(&self) -> &::std::option::Option<::std::string::String> {
        &self.invoicing_entity
    }
    /// Consumes the builder and constructs a [`Entity`](crate::types::Entity).
    pub fn build(self) -> crate::types::Entity {
        crate::types::Entity {
            invoicing_entity: self.invoicing_entity,
        }
    }
}
