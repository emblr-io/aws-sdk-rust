// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about how the total amount was calculated and categorized.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AmountBreakdown {
    /// <p>The total of a set of the breakdown.</p>
    pub sub_total_amount: ::std::option::Option<::std::string::String>,
    /// <p>The discounted amount.</p>
    pub discounts: ::std::option::Option<crate::types::DiscountsBreakdown>,
    /// <p>The tax amount.</p>
    pub taxes: ::std::option::Option<crate::types::TaxesBreakdown>,
    /// <p>The fee amount.</p>
    pub fees: ::std::option::Option<crate::types::FeesBreakdown>,
}
impl AmountBreakdown {
    /// <p>The total of a set of the breakdown.</p>
    pub fn sub_total_amount(&self) -> ::std::option::Option<&str> {
        self.sub_total_amount.as_deref()
    }
    /// <p>The discounted amount.</p>
    pub fn discounts(&self) -> ::std::option::Option<&crate::types::DiscountsBreakdown> {
        self.discounts.as_ref()
    }
    /// <p>The tax amount.</p>
    pub fn taxes(&self) -> ::std::option::Option<&crate::types::TaxesBreakdown> {
        self.taxes.as_ref()
    }
    /// <p>The fee amount.</p>
    pub fn fees(&self) -> ::std::option::Option<&crate::types::FeesBreakdown> {
        self.fees.as_ref()
    }
}
impl AmountBreakdown {
    /// Creates a new builder-style object to manufacture [`AmountBreakdown`](crate::types::AmountBreakdown).
    pub fn builder() -> crate::types::builders::AmountBreakdownBuilder {
        crate::types::builders::AmountBreakdownBuilder::default()
    }
}

/// A builder for [`AmountBreakdown`](crate::types::AmountBreakdown).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AmountBreakdownBuilder {
    pub(crate) sub_total_amount: ::std::option::Option<::std::string::String>,
    pub(crate) discounts: ::std::option::Option<crate::types::DiscountsBreakdown>,
    pub(crate) taxes: ::std::option::Option<crate::types::TaxesBreakdown>,
    pub(crate) fees: ::std::option::Option<crate::types::FeesBreakdown>,
}
impl AmountBreakdownBuilder {
    /// <p>The total of a set of the breakdown.</p>
    pub fn sub_total_amount(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sub_total_amount = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The total of a set of the breakdown.</p>
    pub fn set_sub_total_amount(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sub_total_amount = input;
        self
    }
    /// <p>The total of a set of the breakdown.</p>
    pub fn get_sub_total_amount(&self) -> &::std::option::Option<::std::string::String> {
        &self.sub_total_amount
    }
    /// <p>The discounted amount.</p>
    pub fn discounts(mut self, input: crate::types::DiscountsBreakdown) -> Self {
        self.discounts = ::std::option::Option::Some(input);
        self
    }
    /// <p>The discounted amount.</p>
    pub fn set_discounts(mut self, input: ::std::option::Option<crate::types::DiscountsBreakdown>) -> Self {
        self.discounts = input;
        self
    }
    /// <p>The discounted amount.</p>
    pub fn get_discounts(&self) -> &::std::option::Option<crate::types::DiscountsBreakdown> {
        &self.discounts
    }
    /// <p>The tax amount.</p>
    pub fn taxes(mut self, input: crate::types::TaxesBreakdown) -> Self {
        self.taxes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The tax amount.</p>
    pub fn set_taxes(mut self, input: ::std::option::Option<crate::types::TaxesBreakdown>) -> Self {
        self.taxes = input;
        self
    }
    /// <p>The tax amount.</p>
    pub fn get_taxes(&self) -> &::std::option::Option<crate::types::TaxesBreakdown> {
        &self.taxes
    }
    /// <p>The fee amount.</p>
    pub fn fees(mut self, input: crate::types::FeesBreakdown) -> Self {
        self.fees = ::std::option::Option::Some(input);
        self
    }
    /// <p>The fee amount.</p>
    pub fn set_fees(mut self, input: ::std::option::Option<crate::types::FeesBreakdown>) -> Self {
        self.fees = input;
        self
    }
    /// <p>The fee amount.</p>
    pub fn get_fees(&self) -> &::std::option::Option<crate::types::FeesBreakdown> {
        &self.fees
    }
    /// Consumes the builder and constructs a [`AmountBreakdown`](crate::types::AmountBreakdown).
    pub fn build(self) -> crate::types::AmountBreakdown {
        crate::types::AmountBreakdown {
            sub_total_amount: self.sub_total_amount,
            discounts: self.discounts,
            taxes: self.taxes,
            fees: self.fees,
        }
    }
}
