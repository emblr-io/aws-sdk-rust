// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The invoice that the API retrieved.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InvoiceSummary {
    /// <p>The Amazon Web Services account ID.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The invoice ID.</p>
    pub invoice_id: ::std::option::Option<::std::string::String>,
    /// <p>The issued date of the invoice.</p>
    pub issued_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The invoice due date.</p>
    pub due_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The organization name providing Amazon Web Services services.</p>
    pub entity: ::std::option::Option<crate::types::Entity>,
    /// <p>The billing period of the invoice-related document.</p>
    pub billing_period: ::std::option::Option<crate::types::BillingPeriod>,
    /// <p>The type of invoice.</p>
    pub invoice_type: ::std::option::Option<crate::types::InvoiceType>,
    /// <p>The initial or original invoice ID.</p>
    pub original_invoice_id: ::std::option::Option<::std::string::String>,
    /// <p>The purchase order number associated to the invoice.</p>
    pub purchase_order_number: ::std::option::Option<::std::string::String>,
    /// <p>The summary with the product and service currency.</p>
    pub base_currency_amount: ::std::option::Option<crate::types::InvoiceCurrencyAmount>,
    /// <p>The summary with the tax currency.</p>
    pub tax_currency_amount: ::std::option::Option<crate::types::InvoiceCurrencyAmount>,
    /// <p>The summary with the customer configured currency.</p>
    pub payment_currency_amount: ::std::option::Option<crate::types::InvoiceCurrencyAmount>,
}
impl InvoiceSummary {
    /// <p>The Amazon Web Services account ID.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The invoice ID.</p>
    pub fn invoice_id(&self) -> ::std::option::Option<&str> {
        self.invoice_id.as_deref()
    }
    /// <p>The issued date of the invoice.</p>
    pub fn issued_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.issued_date.as_ref()
    }
    /// <p>The invoice due date.</p>
    pub fn due_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.due_date.as_ref()
    }
    /// <p>The organization name providing Amazon Web Services services.</p>
    pub fn entity(&self) -> ::std::option::Option<&crate::types::Entity> {
        self.entity.as_ref()
    }
    /// <p>The billing period of the invoice-related document.</p>
    pub fn billing_period(&self) -> ::std::option::Option<&crate::types::BillingPeriod> {
        self.billing_period.as_ref()
    }
    /// <p>The type of invoice.</p>
    pub fn invoice_type(&self) -> ::std::option::Option<&crate::types::InvoiceType> {
        self.invoice_type.as_ref()
    }
    /// <p>The initial or original invoice ID.</p>
    pub fn original_invoice_id(&self) -> ::std::option::Option<&str> {
        self.original_invoice_id.as_deref()
    }
    /// <p>The purchase order number associated to the invoice.</p>
    pub fn purchase_order_number(&self) -> ::std::option::Option<&str> {
        self.purchase_order_number.as_deref()
    }
    /// <p>The summary with the product and service currency.</p>
    pub fn base_currency_amount(&self) -> ::std::option::Option<&crate::types::InvoiceCurrencyAmount> {
        self.base_currency_amount.as_ref()
    }
    /// <p>The summary with the tax currency.</p>
    pub fn tax_currency_amount(&self) -> ::std::option::Option<&crate::types::InvoiceCurrencyAmount> {
        self.tax_currency_amount.as_ref()
    }
    /// <p>The summary with the customer configured currency.</p>
    pub fn payment_currency_amount(&self) -> ::std::option::Option<&crate::types::InvoiceCurrencyAmount> {
        self.payment_currency_amount.as_ref()
    }
}
impl InvoiceSummary {
    /// Creates a new builder-style object to manufacture [`InvoiceSummary`](crate::types::InvoiceSummary).
    pub fn builder() -> crate::types::builders::InvoiceSummaryBuilder {
        crate::types::builders::InvoiceSummaryBuilder::default()
    }
}

/// A builder for [`InvoiceSummary`](crate::types::InvoiceSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InvoiceSummaryBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) invoice_id: ::std::option::Option<::std::string::String>,
    pub(crate) issued_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) due_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) entity: ::std::option::Option<crate::types::Entity>,
    pub(crate) billing_period: ::std::option::Option<crate::types::BillingPeriod>,
    pub(crate) invoice_type: ::std::option::Option<crate::types::InvoiceType>,
    pub(crate) original_invoice_id: ::std::option::Option<::std::string::String>,
    pub(crate) purchase_order_number: ::std::option::Option<::std::string::String>,
    pub(crate) base_currency_amount: ::std::option::Option<crate::types::InvoiceCurrencyAmount>,
    pub(crate) tax_currency_amount: ::std::option::Option<crate::types::InvoiceCurrencyAmount>,
    pub(crate) payment_currency_amount: ::std::option::Option<crate::types::InvoiceCurrencyAmount>,
}
impl InvoiceSummaryBuilder {
    /// <p>The Amazon Web Services account ID.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The invoice ID.</p>
    pub fn invoice_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.invoice_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The invoice ID.</p>
    pub fn set_invoice_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.invoice_id = input;
        self
    }
    /// <p>The invoice ID.</p>
    pub fn get_invoice_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.invoice_id
    }
    /// <p>The issued date of the invoice.</p>
    pub fn issued_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.issued_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The issued date of the invoice.</p>
    pub fn set_issued_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.issued_date = input;
        self
    }
    /// <p>The issued date of the invoice.</p>
    pub fn get_issued_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.issued_date
    }
    /// <p>The invoice due date.</p>
    pub fn due_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.due_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The invoice due date.</p>
    pub fn set_due_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.due_date = input;
        self
    }
    /// <p>The invoice due date.</p>
    pub fn get_due_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.due_date
    }
    /// <p>The organization name providing Amazon Web Services services.</p>
    pub fn entity(mut self, input: crate::types::Entity) -> Self {
        self.entity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The organization name providing Amazon Web Services services.</p>
    pub fn set_entity(mut self, input: ::std::option::Option<crate::types::Entity>) -> Self {
        self.entity = input;
        self
    }
    /// <p>The organization name providing Amazon Web Services services.</p>
    pub fn get_entity(&self) -> &::std::option::Option<crate::types::Entity> {
        &self.entity
    }
    /// <p>The billing period of the invoice-related document.</p>
    pub fn billing_period(mut self, input: crate::types::BillingPeriod) -> Self {
        self.billing_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The billing period of the invoice-related document.</p>
    pub fn set_billing_period(mut self, input: ::std::option::Option<crate::types::BillingPeriod>) -> Self {
        self.billing_period = input;
        self
    }
    /// <p>The billing period of the invoice-related document.</p>
    pub fn get_billing_period(&self) -> &::std::option::Option<crate::types::BillingPeriod> {
        &self.billing_period
    }
    /// <p>The type of invoice.</p>
    pub fn invoice_type(mut self, input: crate::types::InvoiceType) -> Self {
        self.invoice_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of invoice.</p>
    pub fn set_invoice_type(mut self, input: ::std::option::Option<crate::types::InvoiceType>) -> Self {
        self.invoice_type = input;
        self
    }
    /// <p>The type of invoice.</p>
    pub fn get_invoice_type(&self) -> &::std::option::Option<crate::types::InvoiceType> {
        &self.invoice_type
    }
    /// <p>The initial or original invoice ID.</p>
    pub fn original_invoice_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.original_invoice_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The initial or original invoice ID.</p>
    pub fn set_original_invoice_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.original_invoice_id = input;
        self
    }
    /// <p>The initial or original invoice ID.</p>
    pub fn get_original_invoice_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.original_invoice_id
    }
    /// <p>The purchase order number associated to the invoice.</p>
    pub fn purchase_order_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.purchase_order_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The purchase order number associated to the invoice.</p>
    pub fn set_purchase_order_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.purchase_order_number = input;
        self
    }
    /// <p>The purchase order number associated to the invoice.</p>
    pub fn get_purchase_order_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.purchase_order_number
    }
    /// <p>The summary with the product and service currency.</p>
    pub fn base_currency_amount(mut self, input: crate::types::InvoiceCurrencyAmount) -> Self {
        self.base_currency_amount = ::std::option::Option::Some(input);
        self
    }
    /// <p>The summary with the product and service currency.</p>
    pub fn set_base_currency_amount(mut self, input: ::std::option::Option<crate::types::InvoiceCurrencyAmount>) -> Self {
        self.base_currency_amount = input;
        self
    }
    /// <p>The summary with the product and service currency.</p>
    pub fn get_base_currency_amount(&self) -> &::std::option::Option<crate::types::InvoiceCurrencyAmount> {
        &self.base_currency_amount
    }
    /// <p>The summary with the tax currency.</p>
    pub fn tax_currency_amount(mut self, input: crate::types::InvoiceCurrencyAmount) -> Self {
        self.tax_currency_amount = ::std::option::Option::Some(input);
        self
    }
    /// <p>The summary with the tax currency.</p>
    pub fn set_tax_currency_amount(mut self, input: ::std::option::Option<crate::types::InvoiceCurrencyAmount>) -> Self {
        self.tax_currency_amount = input;
        self
    }
    /// <p>The summary with the tax currency.</p>
    pub fn get_tax_currency_amount(&self) -> &::std::option::Option<crate::types::InvoiceCurrencyAmount> {
        &self.tax_currency_amount
    }
    /// <p>The summary with the customer configured currency.</p>
    pub fn payment_currency_amount(mut self, input: crate::types::InvoiceCurrencyAmount) -> Self {
        self.payment_currency_amount = ::std::option::Option::Some(input);
        self
    }
    /// <p>The summary with the customer configured currency.</p>
    pub fn set_payment_currency_amount(mut self, input: ::std::option::Option<crate::types::InvoiceCurrencyAmount>) -> Self {
        self.payment_currency_amount = input;
        self
    }
    /// <p>The summary with the customer configured currency.</p>
    pub fn get_payment_currency_amount(&self) -> &::std::option::Option<crate::types::InvoiceCurrencyAmount> {
        &self.payment_currency_amount
    }
    /// Consumes the builder and constructs a [`InvoiceSummary`](crate::types::InvoiceSummary).
    pub fn build(self) -> crate::types::InvoiceSummary {
        crate::types::InvoiceSummary {
            account_id: self.account_id,
            invoice_id: self.invoice_id,
            issued_date: self.issued_date,
            due_date: self.due_date,
            entity: self.entity,
            billing_period: self.billing_period,
            invoice_type: self.invoice_type,
            original_invoice_id: self.original_invoice_id,
            purchase_order_number: self.purchase_order_number,
            base_currency_amount: self.base_currency_amount,
            tax_currency_amount: self.tax_currency_amount,
            payment_currency_amount: self.payment_currency_amount,
        }
    }
}
