// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the address associated with the receiver.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ReceiverAddress {
    /// <p>The first line of the address.</p>
    pub address_line1: ::std::option::Option<::std::string::String>,
    /// <p>The second line of the address, if applicable.</p>
    pub address_line2: ::std::option::Option<::std::string::String>,
    /// <p>The third line of the address, if applicable.</p>
    pub address_line3: ::std::option::Option<::std::string::String>,
    /// <p>The district or country the address is located in.</p>
    pub district_or_county: ::std::option::Option<::std::string::String>,
    /// <p>The city that the address is in.</p>
    pub city: ::std::option::Option<::std::string::String>,
    /// <p>The state, region, or province the address is located.</p>
    pub state_or_region: ::std::option::Option<::std::string::String>,
    /// <p>The country code for the country the address is in.</p>
    pub country_code: ::std::option::Option<::std::string::String>,
    /// <p>A unique company name.</p>
    pub company_name: ::std::option::Option<::std::string::String>,
    /// <p>The postal code associated with the address.</p>
    pub postal_code: ::std::option::Option<::std::string::String>,
}
impl ReceiverAddress {
    /// <p>The first line of the address.</p>
    pub fn address_line1(&self) -> ::std::option::Option<&str> {
        self.address_line1.as_deref()
    }
    /// <p>The second line of the address, if applicable.</p>
    pub fn address_line2(&self) -> ::std::option::Option<&str> {
        self.address_line2.as_deref()
    }
    /// <p>The third line of the address, if applicable.</p>
    pub fn address_line3(&self) -> ::std::option::Option<&str> {
        self.address_line3.as_deref()
    }
    /// <p>The district or country the address is located in.</p>
    pub fn district_or_county(&self) -> ::std::option::Option<&str> {
        self.district_or_county.as_deref()
    }
    /// <p>The city that the address is in.</p>
    pub fn city(&self) -> ::std::option::Option<&str> {
        self.city.as_deref()
    }
    /// <p>The state, region, or province the address is located.</p>
    pub fn state_or_region(&self) -> ::std::option::Option<&str> {
        self.state_or_region.as_deref()
    }
    /// <p>The country code for the country the address is in.</p>
    pub fn country_code(&self) -> ::std::option::Option<&str> {
        self.country_code.as_deref()
    }
    /// <p>A unique company name.</p>
    pub fn company_name(&self) -> ::std::option::Option<&str> {
        self.company_name.as_deref()
    }
    /// <p>The postal code associated with the address.</p>
    pub fn postal_code(&self) -> ::std::option::Option<&str> {
        self.postal_code.as_deref()
    }
}
impl ::std::fmt::Debug for ReceiverAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ReceiverAddress");
        formatter.field("address_line1", &"*** Sensitive Data Redacted ***");
        formatter.field("address_line2", &"*** Sensitive Data Redacted ***");
        formatter.field("address_line3", &"*** Sensitive Data Redacted ***");
        formatter.field("district_or_county", &"*** Sensitive Data Redacted ***");
        formatter.field("city", &"*** Sensitive Data Redacted ***");
        formatter.field("state_or_region", &"*** Sensitive Data Redacted ***");
        formatter.field("country_code", &"*** Sensitive Data Redacted ***");
        formatter.field("company_name", &"*** Sensitive Data Redacted ***");
        formatter.field("postal_code", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ReceiverAddress {
    /// Creates a new builder-style object to manufacture [`ReceiverAddress`](crate::types::ReceiverAddress).
    pub fn builder() -> crate::types::builders::ReceiverAddressBuilder {
        crate::types::builders::ReceiverAddressBuilder::default()
    }
}

/// A builder for [`ReceiverAddress`](crate::types::ReceiverAddress).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ReceiverAddressBuilder {
    pub(crate) address_line1: ::std::option::Option<::std::string::String>,
    pub(crate) address_line2: ::std::option::Option<::std::string::String>,
    pub(crate) address_line3: ::std::option::Option<::std::string::String>,
    pub(crate) district_or_county: ::std::option::Option<::std::string::String>,
    pub(crate) city: ::std::option::Option<::std::string::String>,
    pub(crate) state_or_region: ::std::option::Option<::std::string::String>,
    pub(crate) country_code: ::std::option::Option<::std::string::String>,
    pub(crate) company_name: ::std::option::Option<::std::string::String>,
    pub(crate) postal_code: ::std::option::Option<::std::string::String>,
}
impl ReceiverAddressBuilder {
    /// <p>The first line of the address.</p>
    pub fn address_line1(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address_line1 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The first line of the address.</p>
    pub fn set_address_line1(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address_line1 = input;
        self
    }
    /// <p>The first line of the address.</p>
    pub fn get_address_line1(&self) -> &::std::option::Option<::std::string::String> {
        &self.address_line1
    }
    /// <p>The second line of the address, if applicable.</p>
    pub fn address_line2(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address_line2 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The second line of the address, if applicable.</p>
    pub fn set_address_line2(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address_line2 = input;
        self
    }
    /// <p>The second line of the address, if applicable.</p>
    pub fn get_address_line2(&self) -> &::std::option::Option<::std::string::String> {
        &self.address_line2
    }
    /// <p>The third line of the address, if applicable.</p>
    pub fn address_line3(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address_line3 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The third line of the address, if applicable.</p>
    pub fn set_address_line3(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address_line3 = input;
        self
    }
    /// <p>The third line of the address, if applicable.</p>
    pub fn get_address_line3(&self) -> &::std::option::Option<::std::string::String> {
        &self.address_line3
    }
    /// <p>The district or country the address is located in.</p>
    pub fn district_or_county(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.district_or_county = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The district or country the address is located in.</p>
    pub fn set_district_or_county(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.district_or_county = input;
        self
    }
    /// <p>The district or country the address is located in.</p>
    pub fn get_district_or_county(&self) -> &::std::option::Option<::std::string::String> {
        &self.district_or_county
    }
    /// <p>The city that the address is in.</p>
    pub fn city(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.city = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The city that the address is in.</p>
    pub fn set_city(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.city = input;
        self
    }
    /// <p>The city that the address is in.</p>
    pub fn get_city(&self) -> &::std::option::Option<::std::string::String> {
        &self.city
    }
    /// <p>The state, region, or province the address is located.</p>
    pub fn state_or_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_or_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The state, region, or province the address is located.</p>
    pub fn set_state_or_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_or_region = input;
        self
    }
    /// <p>The state, region, or province the address is located.</p>
    pub fn get_state_or_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_or_region
    }
    /// <p>The country code for the country the address is in.</p>
    pub fn country_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.country_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The country code for the country the address is in.</p>
    pub fn set_country_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.country_code = input;
        self
    }
    /// <p>The country code for the country the address is in.</p>
    pub fn get_country_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.country_code
    }
    /// <p>A unique company name.</p>
    pub fn company_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.company_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique company name.</p>
    pub fn set_company_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.company_name = input;
        self
    }
    /// <p>A unique company name.</p>
    pub fn get_company_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.company_name
    }
    /// <p>The postal code associated with the address.</p>
    pub fn postal_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.postal_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The postal code associated with the address.</p>
    pub fn set_postal_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.postal_code = input;
        self
    }
    /// <p>The postal code associated with the address.</p>
    pub fn get_postal_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.postal_code
    }
    /// Consumes the builder and constructs a [`ReceiverAddress`](crate::types::ReceiverAddress).
    pub fn build(self) -> crate::types::ReceiverAddress {
        crate::types::ReceiverAddress {
            address_line1: self.address_line1,
            address_line2: self.address_line2,
            address_line3: self.address_line3,
            district_or_county: self.district_or_county,
            city: self.city,
            state_or_region: self.state_or_region,
            country_code: self.country_code,
            company_name: self.company_name,
            postal_code: self.postal_code,
        }
    }
}
impl ::std::fmt::Debug for ReceiverAddressBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ReceiverAddressBuilder");
        formatter.field("address_line1", &"*** Sensitive Data Redacted ***");
        formatter.field("address_line2", &"*** Sensitive Data Redacted ***");
        formatter.field("address_line3", &"*** Sensitive Data Redacted ***");
        formatter.field("district_or_county", &"*** Sensitive Data Redacted ***");
        formatter.field("city", &"*** Sensitive Data Redacted ***");
        formatter.field("state_or_region", &"*** Sensitive Data Redacted ***");
        formatter.field("country_code", &"*** Sensitive Data Redacted ***");
        formatter.field("company_name", &"*** Sensitive Data Redacted ***");
        formatter.field("postal_code", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
