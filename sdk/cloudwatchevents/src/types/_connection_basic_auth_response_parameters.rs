// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the authorization parameters for the connection if Basic is specified as the authorization type.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConnectionBasicAuthResponseParameters {
    /// <p>The user name to use for Basic authorization.</p>
    pub username: ::std::option::Option<::std::string::String>,
}
impl ConnectionBasicAuthResponseParameters {
    /// <p>The user name to use for Basic authorization.</p>
    pub fn username(&self) -> ::std::option::Option<&str> {
        self.username.as_deref()
    }
}
impl ConnectionBasicAuthResponseParameters {
    /// Creates a new builder-style object to manufacture [`ConnectionBasicAuthResponseParameters`](crate::types::ConnectionBasicAuthResponseParameters).
    pub fn builder() -> crate::types::builders::ConnectionBasicAuthResponseParametersBuilder {
        crate::types::builders::ConnectionBasicAuthResponseParametersBuilder::default()
    }
}

/// A builder for [`ConnectionBasicAuthResponseParameters`](crate::types::ConnectionBasicAuthResponseParameters).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConnectionBasicAuthResponseParametersBuilder {
    pub(crate) username: ::std::option::Option<::std::string::String>,
}
impl ConnectionBasicAuthResponseParametersBuilder {
    /// <p>The user name to use for Basic authorization.</p>
    pub fn username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user name to use for Basic authorization.</p>
    pub fn set_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p>The user name to use for Basic authorization.</p>
    pub fn get_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.username
    }
    /// Consumes the builder and constructs a [`ConnectionBasicAuthResponseParameters`](crate::types::ConnectionBasicAuthResponseParameters).
    pub fn build(self) -> crate::types::ConnectionBasicAuthResponseParameters {
        crate::types::ConnectionBasicAuthResponseParameters { username: self.username }
    }
}
