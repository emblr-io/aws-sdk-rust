// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the configuration information for a token.</p><important>
/// <p>If you're using an Amazon Kendra Gen AI Enterprise Edition index and you try to use <code>UserTokenConfigurations</code> to configure user context policy, Amazon Kendra returns a <code>ValidationException</code> error.</p>
/// </important>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UserTokenConfiguration {
    /// <p>Information about the JWT token type configuration.</p>
    pub jwt_token_type_configuration: ::std::option::Option<crate::types::JwtTokenTypeConfiguration>,
    /// <p>Information about the JSON token type configuration.</p>
    pub json_token_type_configuration: ::std::option::Option<crate::types::JsonTokenTypeConfiguration>,
}
impl UserTokenConfiguration {
    /// <p>Information about the JWT token type configuration.</p>
    pub fn jwt_token_type_configuration(&self) -> ::std::option::Option<&crate::types::JwtTokenTypeConfiguration> {
        self.jwt_token_type_configuration.as_ref()
    }
    /// <p>Information about the JSON token type configuration.</p>
    pub fn json_token_type_configuration(&self) -> ::std::option::Option<&crate::types::JsonTokenTypeConfiguration> {
        self.json_token_type_configuration.as_ref()
    }
}
impl UserTokenConfiguration {
    /// Creates a new builder-style object to manufacture [`UserTokenConfiguration`](crate::types::UserTokenConfiguration).
    pub fn builder() -> crate::types::builders::UserTokenConfigurationBuilder {
        crate::types::builders::UserTokenConfigurationBuilder::default()
    }
}

/// A builder for [`UserTokenConfiguration`](crate::types::UserTokenConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UserTokenConfigurationBuilder {
    pub(crate) jwt_token_type_configuration: ::std::option::Option<crate::types::JwtTokenTypeConfiguration>,
    pub(crate) json_token_type_configuration: ::std::option::Option<crate::types::JsonTokenTypeConfiguration>,
}
impl UserTokenConfigurationBuilder {
    /// <p>Information about the JWT token type configuration.</p>
    pub fn jwt_token_type_configuration(mut self, input: crate::types::JwtTokenTypeConfiguration) -> Self {
        self.jwt_token_type_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the JWT token type configuration.</p>
    pub fn set_jwt_token_type_configuration(mut self, input: ::std::option::Option<crate::types::JwtTokenTypeConfiguration>) -> Self {
        self.jwt_token_type_configuration = input;
        self
    }
    /// <p>Information about the JWT token type configuration.</p>
    pub fn get_jwt_token_type_configuration(&self) -> &::std::option::Option<crate::types::JwtTokenTypeConfiguration> {
        &self.jwt_token_type_configuration
    }
    /// <p>Information about the JSON token type configuration.</p>
    pub fn json_token_type_configuration(mut self, input: crate::types::JsonTokenTypeConfiguration) -> Self {
        self.json_token_type_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the JSON token type configuration.</p>
    pub fn set_json_token_type_configuration(mut self, input: ::std::option::Option<crate::types::JsonTokenTypeConfiguration>) -> Self {
        self.json_token_type_configuration = input;
        self
    }
    /// <p>Information about the JSON token type configuration.</p>
    pub fn get_json_token_type_configuration(&self) -> &::std::option::Option<crate::types::JsonTokenTypeConfiguration> {
        &self.json_token_type_configuration
    }
    /// Consumes the builder and constructs a [`UserTokenConfiguration`](crate::types::UserTokenConfiguration).
    pub fn build(self) -> crate::types::UserTokenConfiguration {
        crate::types::UserTokenConfiguration {
            jwt_token_type_configuration: self.jwt_token_type_configuration,
            json_token_type_configuration: self.json_token_type_configuration,
        }
    }
}
