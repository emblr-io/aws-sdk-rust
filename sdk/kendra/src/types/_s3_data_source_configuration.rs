// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the configuration information to connect to an Amazon S3 bucket.</p><note>
/// <p>Amazon Kendra now supports an upgraded Amazon S3 connector.</p>
/// <p>You must now use the <a href="https://docs.aws.amazon.com/kendra/latest/APIReference/API_TemplateConfiguration.html">TemplateConfiguration</a> object instead of the <code>S3DataSourceConfiguration</code> object to configure your connector.</p>
/// <p>Connectors configured using the older console and API architecture will continue to function as configured. However, you won't be able to edit or update them. If you want to edit or update your connector configuration, you must create a new connector.</p>
/// <p>We recommended migrating your connector workflow to the upgraded version. Support for connectors configured using the older architecture is scheduled to end by June 2024.</p>
/// </note>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3DataSourceConfiguration {
    /// <p>The name of the bucket that contains the documents.</p>
    pub bucket_name: ::std::string::String,
    /// <p>A list of S3 prefixes for the documents that should be included in the index.</p>
    pub inclusion_prefixes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of glob patterns (patterns that can expand a wildcard pattern into a list of path names that match the given pattern) for certain file names and file types to include in your index. If a document matches both an inclusion and exclusion prefix or pattern, the exclusion prefix takes precendence and the document is not indexed. Examples of glob patterns include:</p>
    /// <ul>
    /// <li>
    /// <p><i>/myapp/config/*</i>—All files inside config directory.</p></li>
    /// <li>
    /// <p><i>**/*.png</i>—All .png files in all directories.</p></li>
    /// <li>
    /// <p><i>**/*.{png, ico, md}</i>—All .png, .ico or .md files in all directories.</p></li>
    /// <li>
    /// <p><i>/myapp/src/**/*.ts</i>—All .ts files inside src directory (and all its subdirectories).</p></li>
    /// <li>
    /// <p><i>**/!(*.module).ts</i>—All .ts files but not .module.ts</p></li>
    /// <li>
    /// <p><i>*.png , *.jpg</i>—All PNG and JPEG image files in a directory (files with the extensions .png and .jpg).</p></li>
    /// <li>
    /// <p><i>*internal*</i>—All files in a directory that contain 'internal' in the file name, such as 'internal', 'internal_only', 'company_internal'.</p></li>
    /// <li>
    /// <p><i>**/*internal*</i>—All internal-related files in a directory and its subdirectories.</p></li>
    /// </ul>
    /// <p>For more examples, see <a href="https://docs.aws.amazon.com/cli/latest/reference/s3/#use-of-exclude-and-include-filters">Use of Exclude and Include Filters</a> in the Amazon Web Services CLI Command Reference.</p>
    pub inclusion_patterns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of glob patterns (patterns that can expand a wildcard pattern into a list of path names that match the given pattern) for certain file names and file types to exclude from your index. If a document matches both an inclusion and exclusion prefix or pattern, the exclusion prefix takes precendence and the document is not indexed. Examples of glob patterns include:</p>
    /// <ul>
    /// <li>
    /// <p><i>/myapp/config/*</i>—All files inside config directory.</p></li>
    /// <li>
    /// <p><i>**/*.png</i>—All .png files in all directories.</p></li>
    /// <li>
    /// <p><i>**/*.{png, ico, md}</i>—All .png, .ico or .md files in all directories.</p></li>
    /// <li>
    /// <p><i>/myapp/src/**/*.ts</i>—All .ts files inside src directory (and all its subdirectories).</p></li>
    /// <li>
    /// <p><i>**/!(*.module).ts</i>—All .ts files but not .module.ts</p></li>
    /// <li>
    /// <p><i>*.png , *.jpg</i>—All PNG and JPEG image files in a directory (files with the extensions .png and .jpg).</p></li>
    /// <li>
    /// <p><i>*internal*</i>—All files in a directory that contain 'internal' in the file name, such as 'internal', 'internal_only', 'company_internal'.</p></li>
    /// <li>
    /// <p><i>**/*internal*</i>—All internal-related files in a directory and its subdirectories.</p></li>
    /// </ul>
    /// <p>For more examples, see <a href="https://docs.aws.amazon.com/cli/latest/reference/s3/#use-of-exclude-and-include-filters">Use of Exclude and Include Filters</a> in the Amazon Web Services CLI Command Reference.</p>
    pub exclusion_patterns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Document metadata files that contain information such as the document access control information, source URI, document author, and custom attributes. Each metadata file contains metadata about a single document.</p>
    pub documents_metadata_configuration: ::std::option::Option<crate::types::DocumentsMetadataConfiguration>,
    /// <p>Provides the path to the S3 bucket that contains the user context filtering files for the data source. For the format of the file, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/s3-acl.html">Access control for S3 data sources</a>.</p>
    pub access_control_list_configuration: ::std::option::Option<crate::types::AccessControlListConfiguration>,
}
impl S3DataSourceConfiguration {
    /// <p>The name of the bucket that contains the documents.</p>
    pub fn bucket_name(&self) -> &str {
        use std::ops::Deref;
        self.bucket_name.deref()
    }
    /// <p>A list of S3 prefixes for the documents that should be included in the index.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.inclusion_prefixes.is_none()`.
    pub fn inclusion_prefixes(&self) -> &[::std::string::String] {
        self.inclusion_prefixes.as_deref().unwrap_or_default()
    }
    /// <p>A list of glob patterns (patterns that can expand a wildcard pattern into a list of path names that match the given pattern) for certain file names and file types to include in your index. If a document matches both an inclusion and exclusion prefix or pattern, the exclusion prefix takes precendence and the document is not indexed. Examples of glob patterns include:</p>
    /// <ul>
    /// <li>
    /// <p><i>/myapp/config/*</i>—All files inside config directory.</p></li>
    /// <li>
    /// <p><i>**/*.png</i>—All .png files in all directories.</p></li>
    /// <li>
    /// <p><i>**/*.{png, ico, md}</i>—All .png, .ico or .md files in all directories.</p></li>
    /// <li>
    /// <p><i>/myapp/src/**/*.ts</i>—All .ts files inside src directory (and all its subdirectories).</p></li>
    /// <li>
    /// <p><i>**/!(*.module).ts</i>—All .ts files but not .module.ts</p></li>
    /// <li>
    /// <p><i>*.png , *.jpg</i>—All PNG and JPEG image files in a directory (files with the extensions .png and .jpg).</p></li>
    /// <li>
    /// <p><i>*internal*</i>—All files in a directory that contain 'internal' in the file name, such as 'internal', 'internal_only', 'company_internal'.</p></li>
    /// <li>
    /// <p><i>**/*internal*</i>—All internal-related files in a directory and its subdirectories.</p></li>
    /// </ul>
    /// <p>For more examples, see <a href="https://docs.aws.amazon.com/cli/latest/reference/s3/#use-of-exclude-and-include-filters">Use of Exclude and Include Filters</a> in the Amazon Web Services CLI Command Reference.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.inclusion_patterns.is_none()`.
    pub fn inclusion_patterns(&self) -> &[::std::string::String] {
        self.inclusion_patterns.as_deref().unwrap_or_default()
    }
    /// <p>A list of glob patterns (patterns that can expand a wildcard pattern into a list of path names that match the given pattern) for certain file names and file types to exclude from your index. If a document matches both an inclusion and exclusion prefix or pattern, the exclusion prefix takes precendence and the document is not indexed. Examples of glob patterns include:</p>
    /// <ul>
    /// <li>
    /// <p><i>/myapp/config/*</i>—All files inside config directory.</p></li>
    /// <li>
    /// <p><i>**/*.png</i>—All .png files in all directories.</p></li>
    /// <li>
    /// <p><i>**/*.{png, ico, md}</i>—All .png, .ico or .md files in all directories.</p></li>
    /// <li>
    /// <p><i>/myapp/src/**/*.ts</i>—All .ts files inside src directory (and all its subdirectories).</p></li>
    /// <li>
    /// <p><i>**/!(*.module).ts</i>—All .ts files but not .module.ts</p></li>
    /// <li>
    /// <p><i>*.png , *.jpg</i>—All PNG and JPEG image files in a directory (files with the extensions .png and .jpg).</p></li>
    /// <li>
    /// <p><i>*internal*</i>—All files in a directory that contain 'internal' in the file name, such as 'internal', 'internal_only', 'company_internal'.</p></li>
    /// <li>
    /// <p><i>**/*internal*</i>—All internal-related files in a directory and its subdirectories.</p></li>
    /// </ul>
    /// <p>For more examples, see <a href="https://docs.aws.amazon.com/cli/latest/reference/s3/#use-of-exclude-and-include-filters">Use of Exclude and Include Filters</a> in the Amazon Web Services CLI Command Reference.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.exclusion_patterns.is_none()`.
    pub fn exclusion_patterns(&self) -> &[::std::string::String] {
        self.exclusion_patterns.as_deref().unwrap_or_default()
    }
    /// <p>Document metadata files that contain information such as the document access control information, source URI, document author, and custom attributes. Each metadata file contains metadata about a single document.</p>
    pub fn documents_metadata_configuration(&self) -> ::std::option::Option<&crate::types::DocumentsMetadataConfiguration> {
        self.documents_metadata_configuration.as_ref()
    }
    /// <p>Provides the path to the S3 bucket that contains the user context filtering files for the data source. For the format of the file, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/s3-acl.html">Access control for S3 data sources</a>.</p>
    pub fn access_control_list_configuration(&self) -> ::std::option::Option<&crate::types::AccessControlListConfiguration> {
        self.access_control_list_configuration.as_ref()
    }
}
impl S3DataSourceConfiguration {
    /// Creates a new builder-style object to manufacture [`S3DataSourceConfiguration`](crate::types::S3DataSourceConfiguration).
    pub fn builder() -> crate::types::builders::S3DataSourceConfigurationBuilder {
        crate::types::builders::S3DataSourceConfigurationBuilder::default()
    }
}

/// A builder for [`S3DataSourceConfiguration`](crate::types::S3DataSourceConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct S3DataSourceConfigurationBuilder {
    pub(crate) bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) inclusion_prefixes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) inclusion_patterns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) exclusion_patterns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) documents_metadata_configuration: ::std::option::Option<crate::types::DocumentsMetadataConfiguration>,
    pub(crate) access_control_list_configuration: ::std::option::Option<crate::types::AccessControlListConfiguration>,
}
impl S3DataSourceConfigurationBuilder {
    /// <p>The name of the bucket that contains the documents.</p>
    /// This field is required.
    pub fn bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the bucket that contains the documents.</p>
    pub fn set_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_name = input;
        self
    }
    /// <p>The name of the bucket that contains the documents.</p>
    pub fn get_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_name
    }
    /// Appends an item to `inclusion_prefixes`.
    ///
    /// To override the contents of this collection use [`set_inclusion_prefixes`](Self::set_inclusion_prefixes).
    ///
    /// <p>A list of S3 prefixes for the documents that should be included in the index.</p>
    pub fn inclusion_prefixes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.inclusion_prefixes.unwrap_or_default();
        v.push(input.into());
        self.inclusion_prefixes = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of S3 prefixes for the documents that should be included in the index.</p>
    pub fn set_inclusion_prefixes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inclusion_prefixes = input;
        self
    }
    /// <p>A list of S3 prefixes for the documents that should be included in the index.</p>
    pub fn get_inclusion_prefixes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.inclusion_prefixes
    }
    /// Appends an item to `inclusion_patterns`.
    ///
    /// To override the contents of this collection use [`set_inclusion_patterns`](Self::set_inclusion_patterns).
    ///
    /// <p>A list of glob patterns (patterns that can expand a wildcard pattern into a list of path names that match the given pattern) for certain file names and file types to include in your index. If a document matches both an inclusion and exclusion prefix or pattern, the exclusion prefix takes precendence and the document is not indexed. Examples of glob patterns include:</p>
    /// <ul>
    /// <li>
    /// <p><i>/myapp/config/*</i>—All files inside config directory.</p></li>
    /// <li>
    /// <p><i>**/*.png</i>—All .png files in all directories.</p></li>
    /// <li>
    /// <p><i>**/*.{png, ico, md}</i>—All .png, .ico or .md files in all directories.</p></li>
    /// <li>
    /// <p><i>/myapp/src/**/*.ts</i>—All .ts files inside src directory (and all its subdirectories).</p></li>
    /// <li>
    /// <p><i>**/!(*.module).ts</i>—All .ts files but not .module.ts</p></li>
    /// <li>
    /// <p><i>*.png , *.jpg</i>—All PNG and JPEG image files in a directory (files with the extensions .png and .jpg).</p></li>
    /// <li>
    /// <p><i>*internal*</i>—All files in a directory that contain 'internal' in the file name, such as 'internal', 'internal_only', 'company_internal'.</p></li>
    /// <li>
    /// <p><i>**/*internal*</i>—All internal-related files in a directory and its subdirectories.</p></li>
    /// </ul>
    /// <p>For more examples, see <a href="https://docs.aws.amazon.com/cli/latest/reference/s3/#use-of-exclude-and-include-filters">Use of Exclude and Include Filters</a> in the Amazon Web Services CLI Command Reference.</p>
    pub fn inclusion_patterns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.inclusion_patterns.unwrap_or_default();
        v.push(input.into());
        self.inclusion_patterns = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of glob patterns (patterns that can expand a wildcard pattern into a list of path names that match the given pattern) for certain file names and file types to include in your index. If a document matches both an inclusion and exclusion prefix or pattern, the exclusion prefix takes precendence and the document is not indexed. Examples of glob patterns include:</p>
    /// <ul>
    /// <li>
    /// <p><i>/myapp/config/*</i>—All files inside config directory.</p></li>
    /// <li>
    /// <p><i>**/*.png</i>—All .png files in all directories.</p></li>
    /// <li>
    /// <p><i>**/*.{png, ico, md}</i>—All .png, .ico or .md files in all directories.</p></li>
    /// <li>
    /// <p><i>/myapp/src/**/*.ts</i>—All .ts files inside src directory (and all its subdirectories).</p></li>
    /// <li>
    /// <p><i>**/!(*.module).ts</i>—All .ts files but not .module.ts</p></li>
    /// <li>
    /// <p><i>*.png , *.jpg</i>—All PNG and JPEG image files in a directory (files with the extensions .png and .jpg).</p></li>
    /// <li>
    /// <p><i>*internal*</i>—All files in a directory that contain 'internal' in the file name, such as 'internal', 'internal_only', 'company_internal'.</p></li>
    /// <li>
    /// <p><i>**/*internal*</i>—All internal-related files in a directory and its subdirectories.</p></li>
    /// </ul>
    /// <p>For more examples, see <a href="https://docs.aws.amazon.com/cli/latest/reference/s3/#use-of-exclude-and-include-filters">Use of Exclude and Include Filters</a> in the Amazon Web Services CLI Command Reference.</p>
    pub fn set_inclusion_patterns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inclusion_patterns = input;
        self
    }
    /// <p>A list of glob patterns (patterns that can expand a wildcard pattern into a list of path names that match the given pattern) for certain file names and file types to include in your index. If a document matches both an inclusion and exclusion prefix or pattern, the exclusion prefix takes precendence and the document is not indexed. Examples of glob patterns include:</p>
    /// <ul>
    /// <li>
    /// <p><i>/myapp/config/*</i>—All files inside config directory.</p></li>
    /// <li>
    /// <p><i>**/*.png</i>—All .png files in all directories.</p></li>
    /// <li>
    /// <p><i>**/*.{png, ico, md}</i>—All .png, .ico or .md files in all directories.</p></li>
    /// <li>
    /// <p><i>/myapp/src/**/*.ts</i>—All .ts files inside src directory (and all its subdirectories).</p></li>
    /// <li>
    /// <p><i>**/!(*.module).ts</i>—All .ts files but not .module.ts</p></li>
    /// <li>
    /// <p><i>*.png , *.jpg</i>—All PNG and JPEG image files in a directory (files with the extensions .png and .jpg).</p></li>
    /// <li>
    /// <p><i>*internal*</i>—All files in a directory that contain 'internal' in the file name, such as 'internal', 'internal_only', 'company_internal'.</p></li>
    /// <li>
    /// <p><i>**/*internal*</i>—All internal-related files in a directory and its subdirectories.</p></li>
    /// </ul>
    /// <p>For more examples, see <a href="https://docs.aws.amazon.com/cli/latest/reference/s3/#use-of-exclude-and-include-filters">Use of Exclude and Include Filters</a> in the Amazon Web Services CLI Command Reference.</p>
    pub fn get_inclusion_patterns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.inclusion_patterns
    }
    /// Appends an item to `exclusion_patterns`.
    ///
    /// To override the contents of this collection use [`set_exclusion_patterns`](Self::set_exclusion_patterns).
    ///
    /// <p>A list of glob patterns (patterns that can expand a wildcard pattern into a list of path names that match the given pattern) for certain file names and file types to exclude from your index. If a document matches both an inclusion and exclusion prefix or pattern, the exclusion prefix takes precendence and the document is not indexed. Examples of glob patterns include:</p>
    /// <ul>
    /// <li>
    /// <p><i>/myapp/config/*</i>—All files inside config directory.</p></li>
    /// <li>
    /// <p><i>**/*.png</i>—All .png files in all directories.</p></li>
    /// <li>
    /// <p><i>**/*.{png, ico, md}</i>—All .png, .ico or .md files in all directories.</p></li>
    /// <li>
    /// <p><i>/myapp/src/**/*.ts</i>—All .ts files inside src directory (and all its subdirectories).</p></li>
    /// <li>
    /// <p><i>**/!(*.module).ts</i>—All .ts files but not .module.ts</p></li>
    /// <li>
    /// <p><i>*.png , *.jpg</i>—All PNG and JPEG image files in a directory (files with the extensions .png and .jpg).</p></li>
    /// <li>
    /// <p><i>*internal*</i>—All files in a directory that contain 'internal' in the file name, such as 'internal', 'internal_only', 'company_internal'.</p></li>
    /// <li>
    /// <p><i>**/*internal*</i>—All internal-related files in a directory and its subdirectories.</p></li>
    /// </ul>
    /// <p>For more examples, see <a href="https://docs.aws.amazon.com/cli/latest/reference/s3/#use-of-exclude-and-include-filters">Use of Exclude and Include Filters</a> in the Amazon Web Services CLI Command Reference.</p>
    pub fn exclusion_patterns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.exclusion_patterns.unwrap_or_default();
        v.push(input.into());
        self.exclusion_patterns = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of glob patterns (patterns that can expand a wildcard pattern into a list of path names that match the given pattern) for certain file names and file types to exclude from your index. If a document matches both an inclusion and exclusion prefix or pattern, the exclusion prefix takes precendence and the document is not indexed. Examples of glob patterns include:</p>
    /// <ul>
    /// <li>
    /// <p><i>/myapp/config/*</i>—All files inside config directory.</p></li>
    /// <li>
    /// <p><i>**/*.png</i>—All .png files in all directories.</p></li>
    /// <li>
    /// <p><i>**/*.{png, ico, md}</i>—All .png, .ico or .md files in all directories.</p></li>
    /// <li>
    /// <p><i>/myapp/src/**/*.ts</i>—All .ts files inside src directory (and all its subdirectories).</p></li>
    /// <li>
    /// <p><i>**/!(*.module).ts</i>—All .ts files but not .module.ts</p></li>
    /// <li>
    /// <p><i>*.png , *.jpg</i>—All PNG and JPEG image files in a directory (files with the extensions .png and .jpg).</p></li>
    /// <li>
    /// <p><i>*internal*</i>—All files in a directory that contain 'internal' in the file name, such as 'internal', 'internal_only', 'company_internal'.</p></li>
    /// <li>
    /// <p><i>**/*internal*</i>—All internal-related files in a directory and its subdirectories.</p></li>
    /// </ul>
    /// <p>For more examples, see <a href="https://docs.aws.amazon.com/cli/latest/reference/s3/#use-of-exclude-and-include-filters">Use of Exclude and Include Filters</a> in the Amazon Web Services CLI Command Reference.</p>
    pub fn set_exclusion_patterns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.exclusion_patterns = input;
        self
    }
    /// <p>A list of glob patterns (patterns that can expand a wildcard pattern into a list of path names that match the given pattern) for certain file names and file types to exclude from your index. If a document matches both an inclusion and exclusion prefix or pattern, the exclusion prefix takes precendence and the document is not indexed. Examples of glob patterns include:</p>
    /// <ul>
    /// <li>
    /// <p><i>/myapp/config/*</i>—All files inside config directory.</p></li>
    /// <li>
    /// <p><i>**/*.png</i>—All .png files in all directories.</p></li>
    /// <li>
    /// <p><i>**/*.{png, ico, md}</i>—All .png, .ico or .md files in all directories.</p></li>
    /// <li>
    /// <p><i>/myapp/src/**/*.ts</i>—All .ts files inside src directory (and all its subdirectories).</p></li>
    /// <li>
    /// <p><i>**/!(*.module).ts</i>—All .ts files but not .module.ts</p></li>
    /// <li>
    /// <p><i>*.png , *.jpg</i>—All PNG and JPEG image files in a directory (files with the extensions .png and .jpg).</p></li>
    /// <li>
    /// <p><i>*internal*</i>—All files in a directory that contain 'internal' in the file name, such as 'internal', 'internal_only', 'company_internal'.</p></li>
    /// <li>
    /// <p><i>**/*internal*</i>—All internal-related files in a directory and its subdirectories.</p></li>
    /// </ul>
    /// <p>For more examples, see <a href="https://docs.aws.amazon.com/cli/latest/reference/s3/#use-of-exclude-and-include-filters">Use of Exclude and Include Filters</a> in the Amazon Web Services CLI Command Reference.</p>
    pub fn get_exclusion_patterns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.exclusion_patterns
    }
    /// <p>Document metadata files that contain information such as the document access control information, source URI, document author, and custom attributes. Each metadata file contains metadata about a single document.</p>
    pub fn documents_metadata_configuration(mut self, input: crate::types::DocumentsMetadataConfiguration) -> Self {
        self.documents_metadata_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Document metadata files that contain information such as the document access control information, source URI, document author, and custom attributes. Each metadata file contains metadata about a single document.</p>
    pub fn set_documents_metadata_configuration(mut self, input: ::std::option::Option<crate::types::DocumentsMetadataConfiguration>) -> Self {
        self.documents_metadata_configuration = input;
        self
    }
    /// <p>Document metadata files that contain information such as the document access control information, source URI, document author, and custom attributes. Each metadata file contains metadata about a single document.</p>
    pub fn get_documents_metadata_configuration(&self) -> &::std::option::Option<crate::types::DocumentsMetadataConfiguration> {
        &self.documents_metadata_configuration
    }
    /// <p>Provides the path to the S3 bucket that contains the user context filtering files for the data source. For the format of the file, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/s3-acl.html">Access control for S3 data sources</a>.</p>
    pub fn access_control_list_configuration(mut self, input: crate::types::AccessControlListConfiguration) -> Self {
        self.access_control_list_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides the path to the S3 bucket that contains the user context filtering files for the data source. For the format of the file, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/s3-acl.html">Access control for S3 data sources</a>.</p>
    pub fn set_access_control_list_configuration(mut self, input: ::std::option::Option<crate::types::AccessControlListConfiguration>) -> Self {
        self.access_control_list_configuration = input;
        self
    }
    /// <p>Provides the path to the S3 bucket that contains the user context filtering files for the data source. For the format of the file, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/s3-acl.html">Access control for S3 data sources</a>.</p>
    pub fn get_access_control_list_configuration(&self) -> &::std::option::Option<crate::types::AccessControlListConfiguration> {
        &self.access_control_list_configuration
    }
    /// Consumes the builder and constructs a [`S3DataSourceConfiguration`](crate::types::S3DataSourceConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`bucket_name`](crate::types::builders::S3DataSourceConfigurationBuilder::bucket_name)
    pub fn build(self) -> ::std::result::Result<crate::types::S3DataSourceConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::S3DataSourceConfiguration {
            bucket_name: self.bucket_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bucket_name",
                    "bucket_name was not specified but it is required when building S3DataSourceConfiguration",
                )
            })?,
            inclusion_prefixes: self.inclusion_prefixes,
            inclusion_patterns: self.inclusion_patterns,
            exclusion_patterns: self.exclusion_patterns,
            documents_metadata_configuration: self.documents_metadata_configuration,
            access_control_list_configuration: self.access_control_list_configuration,
        })
    }
}
