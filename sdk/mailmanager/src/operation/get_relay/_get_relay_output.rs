// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetRelayOutput {
    /// <p>The unique relay identifier.</p>
    pub relay_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the relay.</p>
    pub relay_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique name of the relay.</p>
    pub relay_name: ::std::option::Option<::std::string::String>,
    /// <p>The destination relay server address.</p>
    pub server_name: ::std::option::Option<::std::string::String>,
    /// <p>The destination relay server port.</p>
    pub server_port: ::std::option::Option<i32>,
    /// <p>The authentication attribute—contains the secret ARN where the customer relay server credentials are stored.</p>
    pub authentication: ::std::option::Option<crate::types::RelayAuthentication>,
    /// <p>The timestamp of when the relay was created.</p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of when relay was last updated.</p>
    pub last_modified_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetRelayOutput {
    /// <p>The unique relay identifier.</p>
    pub fn relay_id(&self) -> &str {
        use std::ops::Deref;
        self.relay_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the relay.</p>
    pub fn relay_arn(&self) -> ::std::option::Option<&str> {
        self.relay_arn.as_deref()
    }
    /// <p>The unique name of the relay.</p>
    pub fn relay_name(&self) -> ::std::option::Option<&str> {
        self.relay_name.as_deref()
    }
    /// <p>The destination relay server address.</p>
    pub fn server_name(&self) -> ::std::option::Option<&str> {
        self.server_name.as_deref()
    }
    /// <p>The destination relay server port.</p>
    pub fn server_port(&self) -> ::std::option::Option<i32> {
        self.server_port
    }
    /// <p>The authentication attribute—contains the secret ARN where the customer relay server credentials are stored.</p>
    pub fn authentication(&self) -> ::std::option::Option<&crate::types::RelayAuthentication> {
        self.authentication.as_ref()
    }
    /// <p>The timestamp of when the relay was created.</p>
    pub fn created_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The timestamp of when relay was last updated.</p>
    pub fn last_modified_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_timestamp.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetRelayOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetRelayOutput {
    /// Creates a new builder-style object to manufacture [`GetRelayOutput`](crate::operation::get_relay::GetRelayOutput).
    pub fn builder() -> crate::operation::get_relay::builders::GetRelayOutputBuilder {
        crate::operation::get_relay::builders::GetRelayOutputBuilder::default()
    }
}

/// A builder for [`GetRelayOutput`](crate::operation::get_relay::GetRelayOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetRelayOutputBuilder {
    pub(crate) relay_id: ::std::option::Option<::std::string::String>,
    pub(crate) relay_arn: ::std::option::Option<::std::string::String>,
    pub(crate) relay_name: ::std::option::Option<::std::string::String>,
    pub(crate) server_name: ::std::option::Option<::std::string::String>,
    pub(crate) server_port: ::std::option::Option<i32>,
    pub(crate) authentication: ::std::option::Option<crate::types::RelayAuthentication>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetRelayOutputBuilder {
    /// <p>The unique relay identifier.</p>
    /// This field is required.
    pub fn relay_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.relay_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique relay identifier.</p>
    pub fn set_relay_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.relay_id = input;
        self
    }
    /// <p>The unique relay identifier.</p>
    pub fn get_relay_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.relay_id
    }
    /// <p>The Amazon Resource Name (ARN) of the relay.</p>
    pub fn relay_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.relay_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the relay.</p>
    pub fn set_relay_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.relay_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the relay.</p>
    pub fn get_relay_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.relay_arn
    }
    /// <p>The unique name of the relay.</p>
    pub fn relay_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.relay_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the relay.</p>
    pub fn set_relay_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.relay_name = input;
        self
    }
    /// <p>The unique name of the relay.</p>
    pub fn get_relay_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.relay_name
    }
    /// <p>The destination relay server address.</p>
    pub fn server_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.server_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The destination relay server address.</p>
    pub fn set_server_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.server_name = input;
        self
    }
    /// <p>The destination relay server address.</p>
    pub fn get_server_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.server_name
    }
    /// <p>The destination relay server port.</p>
    pub fn server_port(mut self, input: i32) -> Self {
        self.server_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The destination relay server port.</p>
    pub fn set_server_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.server_port = input;
        self
    }
    /// <p>The destination relay server port.</p>
    pub fn get_server_port(&self) -> &::std::option::Option<i32> {
        &self.server_port
    }
    /// <p>The authentication attribute—contains the secret ARN where the customer relay server credentials are stored.</p>
    pub fn authentication(mut self, input: crate::types::RelayAuthentication) -> Self {
        self.authentication = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication attribute—contains the secret ARN where the customer relay server credentials are stored.</p>
    pub fn set_authentication(mut self, input: ::std::option::Option<crate::types::RelayAuthentication>) -> Self {
        self.authentication = input;
        self
    }
    /// <p>The authentication attribute—contains the secret ARN where the customer relay server credentials are stored.</p>
    pub fn get_authentication(&self) -> &::std::option::Option<crate::types::RelayAuthentication> {
        &self.authentication
    }
    /// <p>The timestamp of when the relay was created.</p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the relay was created.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The timestamp of when the relay was created.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    /// <p>The timestamp of when relay was last updated.</p>
    pub fn last_modified_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when relay was last updated.</p>
    pub fn set_last_modified_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_timestamp = input;
        self
    }
    /// <p>The timestamp of when relay was last updated.</p>
    pub fn get_last_modified_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_timestamp
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetRelayOutput`](crate::operation::get_relay::GetRelayOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`relay_id`](crate::operation::get_relay::builders::GetRelayOutputBuilder::relay_id)
    pub fn build(self) -> ::std::result::Result<crate::operation::get_relay::GetRelayOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_relay::GetRelayOutput {
            relay_id: self.relay_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "relay_id",
                    "relay_id was not specified but it is required when building GetRelayOutput",
                )
            })?,
            relay_arn: self.relay_arn,
            relay_name: self.relay_name,
            server_name: self.server_name,
            server_port: self.server_port,
            authentication: self.authentication,
            created_timestamp: self.created_timestamp,
            last_modified_timestamp: self.last_modified_timestamp,
            _request_id: self._request_id,
        })
    }
}
