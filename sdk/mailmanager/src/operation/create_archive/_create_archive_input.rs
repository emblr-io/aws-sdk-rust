// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The request to create a new email archive.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateArchiveInput {
    /// <p>A unique token Amazon SES uses to recognize retries of this request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>A unique name for the new archive.</p>
    pub archive_name: ::std::option::Option<::std::string::String>,
    /// <p>The period for retaining emails in the archive before automatic deletion.</p>
    pub retention: ::std::option::Option<crate::types::ArchiveRetention>,
    /// <p>The Amazon Resource Name (ARN) of the KMS key for encrypting emails in the archive.</p>
    pub kms_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The tags used to organize, track, or control access for the resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateArchiveInput {
    /// <p>A unique token Amazon SES uses to recognize retries of this request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>A unique name for the new archive.</p>
    pub fn archive_name(&self) -> ::std::option::Option<&str> {
        self.archive_name.as_deref()
    }
    /// <p>The period for retaining emails in the archive before automatic deletion.</p>
    pub fn retention(&self) -> ::std::option::Option<&crate::types::ArchiveRetention> {
        self.retention.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key for encrypting emails in the archive.</p>
    pub fn kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
    /// <p>The tags used to organize, track, or control access for the resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateArchiveInput {
    /// Creates a new builder-style object to manufacture [`CreateArchiveInput`](crate::operation::create_archive::CreateArchiveInput).
    pub fn builder() -> crate::operation::create_archive::builders::CreateArchiveInputBuilder {
        crate::operation::create_archive::builders::CreateArchiveInputBuilder::default()
    }
}

/// A builder for [`CreateArchiveInput`](crate::operation::create_archive::CreateArchiveInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateArchiveInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) archive_name: ::std::option::Option<::std::string::String>,
    pub(crate) retention: ::std::option::Option<crate::types::ArchiveRetention>,
    pub(crate) kms_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateArchiveInputBuilder {
    /// <p>A unique token Amazon SES uses to recognize retries of this request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique token Amazon SES uses to recognize retries of this request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique token Amazon SES uses to recognize retries of this request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>A unique name for the new archive.</p>
    /// This field is required.
    pub fn archive_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.archive_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique name for the new archive.</p>
    pub fn set_archive_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.archive_name = input;
        self
    }
    /// <p>A unique name for the new archive.</p>
    pub fn get_archive_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.archive_name
    }
    /// <p>The period for retaining emails in the archive before automatic deletion.</p>
    pub fn retention(mut self, input: crate::types::ArchiveRetention) -> Self {
        self.retention = ::std::option::Option::Some(input);
        self
    }
    /// <p>The period for retaining emails in the archive before automatic deletion.</p>
    pub fn set_retention(mut self, input: ::std::option::Option<crate::types::ArchiveRetention>) -> Self {
        self.retention = input;
        self
    }
    /// <p>The period for retaining emails in the archive before automatic deletion.</p>
    pub fn get_retention(&self) -> &::std::option::Option<crate::types::ArchiveRetention> {
        &self.retention
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key for encrypting emails in the archive.</p>
    pub fn kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key for encrypting emails in the archive.</p>
    pub fn set_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key for encrypting emails in the archive.</p>
    pub fn get_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_arn
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for the resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags used to organize, track, or control access for the resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags used to organize, track, or control access for the resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateArchiveInput`](crate::operation::create_archive::CreateArchiveInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_archive::CreateArchiveInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_archive::CreateArchiveInput {
            client_token: self.client_token,
            archive_name: self.archive_name,
            retention: self.retention,
            kms_key_arn: self.kms_key_arn,
            tags: self.tags,
        })
    }
}
