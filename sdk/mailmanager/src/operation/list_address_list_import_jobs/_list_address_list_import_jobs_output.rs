// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListAddressListImportJobsOutput {
    /// <p>The list of import jobs.</p>
    pub import_jobs: ::std::vec::Vec<crate::types::ImportJob>,
    /// <p>If NextToken is returned, there are more results available. The value of NextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListAddressListImportJobsOutput {
    /// <p>The list of import jobs.</p>
    pub fn import_jobs(&self) -> &[crate::types::ImportJob] {
        use std::ops::Deref;
        self.import_jobs.deref()
    }
    /// <p>If NextToken is returned, there are more results available. The value of NextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListAddressListImportJobsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListAddressListImportJobsOutput {
    /// Creates a new builder-style object to manufacture [`ListAddressListImportJobsOutput`](crate::operation::list_address_list_import_jobs::ListAddressListImportJobsOutput).
    pub fn builder() -> crate::operation::list_address_list_import_jobs::builders::ListAddressListImportJobsOutputBuilder {
        crate::operation::list_address_list_import_jobs::builders::ListAddressListImportJobsOutputBuilder::default()
    }
}

/// A builder for [`ListAddressListImportJobsOutput`](crate::operation::list_address_list_import_jobs::ListAddressListImportJobsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListAddressListImportJobsOutputBuilder {
    pub(crate) import_jobs: ::std::option::Option<::std::vec::Vec<crate::types::ImportJob>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListAddressListImportJobsOutputBuilder {
    /// Appends an item to `import_jobs`.
    ///
    /// To override the contents of this collection use [`set_import_jobs`](Self::set_import_jobs).
    ///
    /// <p>The list of import jobs.</p>
    pub fn import_jobs(mut self, input: crate::types::ImportJob) -> Self {
        let mut v = self.import_jobs.unwrap_or_default();
        v.push(input);
        self.import_jobs = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of import jobs.</p>
    pub fn set_import_jobs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ImportJob>>) -> Self {
        self.import_jobs = input;
        self
    }
    /// <p>The list of import jobs.</p>
    pub fn get_import_jobs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ImportJob>> {
        &self.import_jobs
    }
    /// <p>If NextToken is returned, there are more results available. The value of NextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If NextToken is returned, there are more results available. The value of NextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If NextToken is returned, there are more results available. The value of NextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListAddressListImportJobsOutput`](crate::operation::list_address_list_import_jobs::ListAddressListImportJobsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`import_jobs`](crate::operation::list_address_list_import_jobs::builders::ListAddressListImportJobsOutputBuilder::import_jobs)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_address_list_import_jobs::ListAddressListImportJobsOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_address_list_import_jobs::ListAddressListImportJobsOutput {
            import_jobs: self.import_jobs.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "import_jobs",
                    "import_jobs was not specified but it is required when building ListAddressListImportJobsOutput",
                )
            })?,
            next_token: self.next_token,
            _request_id: self._request_id,
        })
    }
}
