// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListMembersOfAddressListInput {
    /// <p>The unique identifier of the address list to list the addresses from.</p>
    pub address_list_id: ::std::option::Option<::std::string::String>,
    /// <p>Filter to be used to limit the results.</p>
    pub filter: ::std::option::Option<crate::types::AddressFilter>,
    /// <p>If you received a pagination token from a previous call to this API, you can provide it here to continue paginating through the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of address list members that are returned per call. You can use NextToken to retrieve the next page of members.</p>
    pub page_size: ::std::option::Option<i32>,
}
impl ListMembersOfAddressListInput {
    /// <p>The unique identifier of the address list to list the addresses from.</p>
    pub fn address_list_id(&self) -> ::std::option::Option<&str> {
        self.address_list_id.as_deref()
    }
    /// <p>Filter to be used to limit the results.</p>
    pub fn filter(&self) -> ::std::option::Option<&crate::types::AddressFilter> {
        self.filter.as_ref()
    }
    /// <p>If you received a pagination token from a previous call to this API, you can provide it here to continue paginating through the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of address list members that are returned per call. You can use NextToken to retrieve the next page of members.</p>
    pub fn page_size(&self) -> ::std::option::Option<i32> {
        self.page_size
    }
}
impl ListMembersOfAddressListInput {
    /// Creates a new builder-style object to manufacture [`ListMembersOfAddressListInput`](crate::operation::list_members_of_address_list::ListMembersOfAddressListInput).
    pub fn builder() -> crate::operation::list_members_of_address_list::builders::ListMembersOfAddressListInputBuilder {
        crate::operation::list_members_of_address_list::builders::ListMembersOfAddressListInputBuilder::default()
    }
}

/// A builder for [`ListMembersOfAddressListInput`](crate::operation::list_members_of_address_list::ListMembersOfAddressListInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListMembersOfAddressListInputBuilder {
    pub(crate) address_list_id: ::std::option::Option<::std::string::String>,
    pub(crate) filter: ::std::option::Option<crate::types::AddressFilter>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) page_size: ::std::option::Option<i32>,
}
impl ListMembersOfAddressListInputBuilder {
    /// <p>The unique identifier of the address list to list the addresses from.</p>
    /// This field is required.
    pub fn address_list_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address_list_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the address list to list the addresses from.</p>
    pub fn set_address_list_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address_list_id = input;
        self
    }
    /// <p>The unique identifier of the address list to list the addresses from.</p>
    pub fn get_address_list_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.address_list_id
    }
    /// <p>Filter to be used to limit the results.</p>
    pub fn filter(mut self, input: crate::types::AddressFilter) -> Self {
        self.filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter to be used to limit the results.</p>
    pub fn set_filter(mut self, input: ::std::option::Option<crate::types::AddressFilter>) -> Self {
        self.filter = input;
        self
    }
    /// <p>Filter to be used to limit the results.</p>
    pub fn get_filter(&self) -> &::std::option::Option<crate::types::AddressFilter> {
        &self.filter
    }
    /// <p>If you received a pagination token from a previous call to this API, you can provide it here to continue paginating through the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If you received a pagination token from a previous call to this API, you can provide it here to continue paginating through the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If you received a pagination token from a previous call to this API, you can provide it here to continue paginating through the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of address list members that are returned per call. You can use NextToken to retrieve the next page of members.</p>
    pub fn page_size(mut self, input: i32) -> Self {
        self.page_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of address list members that are returned per call. You can use NextToken to retrieve the next page of members.</p>
    pub fn set_page_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.page_size = input;
        self
    }
    /// <p>The maximum number of address list members that are returned per call. You can use NextToken to retrieve the next page of members.</p>
    pub fn get_page_size(&self) -> &::std::option::Option<i32> {
        &self.page_size
    }
    /// Consumes the builder and constructs a [`ListMembersOfAddressListInput`](crate::operation::list_members_of_address_list::ListMembersOfAddressListInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_members_of_address_list::ListMembersOfAddressListInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_members_of_address_list::ListMembersOfAddressListInput {
            address_list_id: self.address_list_id,
            filter: self.filter,
            next_token: self.next_token,
            page_size: self.page_size,
        })
    }
}
