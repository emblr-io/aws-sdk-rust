// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetIngressPointOutput {
    /// <p>The identifier of an ingress endpoint resource.</p>
    pub ingress_point_id: ::std::string::String,
    /// <p>A user friendly name for the ingress endpoint.</p>
    pub ingress_point_name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the ingress endpoint resource.</p>
    pub ingress_point_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the ingress endpoint resource.</p>
    pub status: ::std::option::Option<crate::types::IngressPointStatus>,
    /// <p>The type of ingress endpoint.</p>
    pub r#type: ::std::option::Option<crate::types::IngressPointType>,
    /// <p>The DNS A Record that identifies your ingress endpoint. Configure your DNS Mail Exchange (MX) record with this value to route emails to Mail Manager.</p>
    pub a_record: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of a rule set resource associated with the ingress endpoint.</p>
    pub rule_set_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the traffic policy resource associated with the ingress endpoint.</p>
    pub traffic_policy_id: ::std::option::Option<::std::string::String>,
    /// <p>The authentication configuration of the ingress endpoint resource.</p>
    pub ingress_point_auth_configuration: ::std::option::Option<crate::types::IngressPointAuthConfiguration>,
    /// <p>The network configuration for the ingress point.</p>
    pub network_configuration: ::std::option::Option<crate::types::NetworkConfiguration>,
    /// <p>The timestamp of when the ingress endpoint was created.</p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of when the ingress endpoint was last updated.</p>
    pub last_updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetIngressPointOutput {
    /// <p>The identifier of an ingress endpoint resource.</p>
    pub fn ingress_point_id(&self) -> &str {
        use std::ops::Deref;
        self.ingress_point_id.deref()
    }
    /// <p>A user friendly name for the ingress endpoint.</p>
    pub fn ingress_point_name(&self) -> &str {
        use std::ops::Deref;
        self.ingress_point_name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the ingress endpoint resource.</p>
    pub fn ingress_point_arn(&self) -> ::std::option::Option<&str> {
        self.ingress_point_arn.as_deref()
    }
    /// <p>The status of the ingress endpoint resource.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::IngressPointStatus> {
        self.status.as_ref()
    }
    /// <p>The type of ingress endpoint.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::IngressPointType> {
        self.r#type.as_ref()
    }
    /// <p>The DNS A Record that identifies your ingress endpoint. Configure your DNS Mail Exchange (MX) record with this value to route emails to Mail Manager.</p>
    pub fn a_record(&self) -> ::std::option::Option<&str> {
        self.a_record.as_deref()
    }
    /// <p>The identifier of a rule set resource associated with the ingress endpoint.</p>
    pub fn rule_set_id(&self) -> ::std::option::Option<&str> {
        self.rule_set_id.as_deref()
    }
    /// <p>The identifier of the traffic policy resource associated with the ingress endpoint.</p>
    pub fn traffic_policy_id(&self) -> ::std::option::Option<&str> {
        self.traffic_policy_id.as_deref()
    }
    /// <p>The authentication configuration of the ingress endpoint resource.</p>
    pub fn ingress_point_auth_configuration(&self) -> ::std::option::Option<&crate::types::IngressPointAuthConfiguration> {
        self.ingress_point_auth_configuration.as_ref()
    }
    /// <p>The network configuration for the ingress point.</p>
    pub fn network_configuration(&self) -> ::std::option::Option<&crate::types::NetworkConfiguration> {
        self.network_configuration.as_ref()
    }
    /// <p>The timestamp of when the ingress endpoint was created.</p>
    pub fn created_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The timestamp of when the ingress endpoint was last updated.</p>
    pub fn last_updated_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_timestamp.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetIngressPointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetIngressPointOutput {
    /// Creates a new builder-style object to manufacture [`GetIngressPointOutput`](crate::operation::get_ingress_point::GetIngressPointOutput).
    pub fn builder() -> crate::operation::get_ingress_point::builders::GetIngressPointOutputBuilder {
        crate::operation::get_ingress_point::builders::GetIngressPointOutputBuilder::default()
    }
}

/// A builder for [`GetIngressPointOutput`](crate::operation::get_ingress_point::GetIngressPointOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetIngressPointOutputBuilder {
    pub(crate) ingress_point_id: ::std::option::Option<::std::string::String>,
    pub(crate) ingress_point_name: ::std::option::Option<::std::string::String>,
    pub(crate) ingress_point_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::IngressPointStatus>,
    pub(crate) r#type: ::std::option::Option<crate::types::IngressPointType>,
    pub(crate) a_record: ::std::option::Option<::std::string::String>,
    pub(crate) rule_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) traffic_policy_id: ::std::option::Option<::std::string::String>,
    pub(crate) ingress_point_auth_configuration: ::std::option::Option<crate::types::IngressPointAuthConfiguration>,
    pub(crate) network_configuration: ::std::option::Option<crate::types::NetworkConfiguration>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetIngressPointOutputBuilder {
    /// <p>The identifier of an ingress endpoint resource.</p>
    /// This field is required.
    pub fn ingress_point_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ingress_point_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of an ingress endpoint resource.</p>
    pub fn set_ingress_point_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ingress_point_id = input;
        self
    }
    /// <p>The identifier of an ingress endpoint resource.</p>
    pub fn get_ingress_point_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ingress_point_id
    }
    /// <p>A user friendly name for the ingress endpoint.</p>
    /// This field is required.
    pub fn ingress_point_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ingress_point_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user friendly name for the ingress endpoint.</p>
    pub fn set_ingress_point_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ingress_point_name = input;
        self
    }
    /// <p>A user friendly name for the ingress endpoint.</p>
    pub fn get_ingress_point_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.ingress_point_name
    }
    /// <p>The Amazon Resource Name (ARN) of the ingress endpoint resource.</p>
    pub fn ingress_point_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ingress_point_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ingress endpoint resource.</p>
    pub fn set_ingress_point_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ingress_point_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ingress endpoint resource.</p>
    pub fn get_ingress_point_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.ingress_point_arn
    }
    /// <p>The status of the ingress endpoint resource.</p>
    pub fn status(mut self, input: crate::types::IngressPointStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the ingress endpoint resource.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::IngressPointStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the ingress endpoint resource.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::IngressPointStatus> {
        &self.status
    }
    /// <p>The type of ingress endpoint.</p>
    pub fn r#type(mut self, input: crate::types::IngressPointType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of ingress endpoint.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::IngressPointType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of ingress endpoint.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::IngressPointType> {
        &self.r#type
    }
    /// <p>The DNS A Record that identifies your ingress endpoint. Configure your DNS Mail Exchange (MX) record with this value to route emails to Mail Manager.</p>
    pub fn a_record(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.a_record = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DNS A Record that identifies your ingress endpoint. Configure your DNS Mail Exchange (MX) record with this value to route emails to Mail Manager.</p>
    pub fn set_a_record(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.a_record = input;
        self
    }
    /// <p>The DNS A Record that identifies your ingress endpoint. Configure your DNS Mail Exchange (MX) record with this value to route emails to Mail Manager.</p>
    pub fn get_a_record(&self) -> &::std::option::Option<::std::string::String> {
        &self.a_record
    }
    /// <p>The identifier of a rule set resource associated with the ingress endpoint.</p>
    pub fn rule_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of a rule set resource associated with the ingress endpoint.</p>
    pub fn set_rule_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_set_id = input;
        self
    }
    /// <p>The identifier of a rule set resource associated with the ingress endpoint.</p>
    pub fn get_rule_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_set_id
    }
    /// <p>The identifier of the traffic policy resource associated with the ingress endpoint.</p>
    pub fn traffic_policy_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.traffic_policy_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the traffic policy resource associated with the ingress endpoint.</p>
    pub fn set_traffic_policy_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.traffic_policy_id = input;
        self
    }
    /// <p>The identifier of the traffic policy resource associated with the ingress endpoint.</p>
    pub fn get_traffic_policy_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.traffic_policy_id
    }
    /// <p>The authentication configuration of the ingress endpoint resource.</p>
    pub fn ingress_point_auth_configuration(mut self, input: crate::types::IngressPointAuthConfiguration) -> Self {
        self.ingress_point_auth_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication configuration of the ingress endpoint resource.</p>
    pub fn set_ingress_point_auth_configuration(mut self, input: ::std::option::Option<crate::types::IngressPointAuthConfiguration>) -> Self {
        self.ingress_point_auth_configuration = input;
        self
    }
    /// <p>The authentication configuration of the ingress endpoint resource.</p>
    pub fn get_ingress_point_auth_configuration(&self) -> &::std::option::Option<crate::types::IngressPointAuthConfiguration> {
        &self.ingress_point_auth_configuration
    }
    /// <p>The network configuration for the ingress point.</p>
    pub fn network_configuration(mut self, input: crate::types::NetworkConfiguration) -> Self {
        self.network_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The network configuration for the ingress point.</p>
    pub fn set_network_configuration(mut self, input: ::std::option::Option<crate::types::NetworkConfiguration>) -> Self {
        self.network_configuration = input;
        self
    }
    /// <p>The network configuration for the ingress point.</p>
    pub fn get_network_configuration(&self) -> &::std::option::Option<crate::types::NetworkConfiguration> {
        &self.network_configuration
    }
    /// <p>The timestamp of when the ingress endpoint was created.</p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the ingress endpoint was created.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The timestamp of when the ingress endpoint was created.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    /// <p>The timestamp of when the ingress endpoint was last updated.</p>
    pub fn last_updated_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the ingress endpoint was last updated.</p>
    pub fn set_last_updated_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_timestamp = input;
        self
    }
    /// <p>The timestamp of when the ingress endpoint was last updated.</p>
    pub fn get_last_updated_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_timestamp
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetIngressPointOutput`](crate::operation::get_ingress_point::GetIngressPointOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`ingress_point_id`](crate::operation::get_ingress_point::builders::GetIngressPointOutputBuilder::ingress_point_id)
    /// - [`ingress_point_name`](crate::operation::get_ingress_point::builders::GetIngressPointOutputBuilder::ingress_point_name)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_ingress_point::GetIngressPointOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_ingress_point::GetIngressPointOutput {
            ingress_point_id: self.ingress_point_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ingress_point_id",
                    "ingress_point_id was not specified but it is required when building GetIngressPointOutput",
                )
            })?,
            ingress_point_name: self.ingress_point_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ingress_point_name",
                    "ingress_point_name was not specified but it is required when building GetIngressPointOutput",
                )
            })?,
            ingress_point_arn: self.ingress_point_arn,
            status: self.status,
            r#type: self.r#type,
            a_record: self.a_record,
            rule_set_id: self.rule_set_id,
            traffic_policy_id: self.traffic_policy_id,
            ingress_point_auth_configuration: self.ingress_point_auth_configuration,
            network_configuration: self.network_configuration,
            created_timestamp: self.created_timestamp,
            last_updated_timestamp: self.last_updated_timestamp,
            _request_id: self._request_id,
        })
    }
}
