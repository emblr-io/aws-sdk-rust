// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The request to initiate an export of emails from an archive.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartArchiveExportInput {
    /// <p>The identifier of the archive to export emails from.</p>
    pub archive_id: ::std::option::Option<::std::string::String>,
    /// <p>Criteria to filter which emails are included in the export.</p>
    pub filters: ::std::option::Option<crate::types::ArchiveFilters>,
    /// <p>The start of the timestamp range to include emails from.</p>
    pub from_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The end of the timestamp range to include emails from.</p>
    pub to_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The maximum number of email items to include in the export.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Details on where to deliver the exported email data.</p>
    pub export_destination_configuration: ::std::option::Option<crate::types::ExportDestinationConfiguration>,
    /// <p>Whether to include message metadata as JSON files in the export.</p>
    pub include_metadata: ::std::option::Option<bool>,
}
impl StartArchiveExportInput {
    /// <p>The identifier of the archive to export emails from.</p>
    pub fn archive_id(&self) -> ::std::option::Option<&str> {
        self.archive_id.as_deref()
    }
    /// <p>Criteria to filter which emails are included in the export.</p>
    pub fn filters(&self) -> ::std::option::Option<&crate::types::ArchiveFilters> {
        self.filters.as_ref()
    }
    /// <p>The start of the timestamp range to include emails from.</p>
    pub fn from_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.from_timestamp.as_ref()
    }
    /// <p>The end of the timestamp range to include emails from.</p>
    pub fn to_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.to_timestamp.as_ref()
    }
    /// <p>The maximum number of email items to include in the export.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Details on where to deliver the exported email data.</p>
    pub fn export_destination_configuration(&self) -> ::std::option::Option<&crate::types::ExportDestinationConfiguration> {
        self.export_destination_configuration.as_ref()
    }
    /// <p>Whether to include message metadata as JSON files in the export.</p>
    pub fn include_metadata(&self) -> ::std::option::Option<bool> {
        self.include_metadata
    }
}
impl StartArchiveExportInput {
    /// Creates a new builder-style object to manufacture [`StartArchiveExportInput`](crate::operation::start_archive_export::StartArchiveExportInput).
    pub fn builder() -> crate::operation::start_archive_export::builders::StartArchiveExportInputBuilder {
        crate::operation::start_archive_export::builders::StartArchiveExportInputBuilder::default()
    }
}

/// A builder for [`StartArchiveExportInput`](crate::operation::start_archive_export::StartArchiveExportInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartArchiveExportInputBuilder {
    pub(crate) archive_id: ::std::option::Option<::std::string::String>,
    pub(crate) filters: ::std::option::Option<crate::types::ArchiveFilters>,
    pub(crate) from_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) to_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) export_destination_configuration: ::std::option::Option<crate::types::ExportDestinationConfiguration>,
    pub(crate) include_metadata: ::std::option::Option<bool>,
}
impl StartArchiveExportInputBuilder {
    /// <p>The identifier of the archive to export emails from.</p>
    /// This field is required.
    pub fn archive_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.archive_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the archive to export emails from.</p>
    pub fn set_archive_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.archive_id = input;
        self
    }
    /// <p>The identifier of the archive to export emails from.</p>
    pub fn get_archive_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.archive_id
    }
    /// <p>Criteria to filter which emails are included in the export.</p>
    pub fn filters(mut self, input: crate::types::ArchiveFilters) -> Self {
        self.filters = ::std::option::Option::Some(input);
        self
    }
    /// <p>Criteria to filter which emails are included in the export.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<crate::types::ArchiveFilters>) -> Self {
        self.filters = input;
        self
    }
    /// <p>Criteria to filter which emails are included in the export.</p>
    pub fn get_filters(&self) -> &::std::option::Option<crate::types::ArchiveFilters> {
        &self.filters
    }
    /// <p>The start of the timestamp range to include emails from.</p>
    /// This field is required.
    pub fn from_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.from_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start of the timestamp range to include emails from.</p>
    pub fn set_from_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.from_timestamp = input;
        self
    }
    /// <p>The start of the timestamp range to include emails from.</p>
    pub fn get_from_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.from_timestamp
    }
    /// <p>The end of the timestamp range to include emails from.</p>
    /// This field is required.
    pub fn to_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.to_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end of the timestamp range to include emails from.</p>
    pub fn set_to_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.to_timestamp = input;
        self
    }
    /// <p>The end of the timestamp range to include emails from.</p>
    pub fn get_to_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.to_timestamp
    }
    /// <p>The maximum number of email items to include in the export.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of email items to include in the export.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of email items to include in the export.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Details on where to deliver the exported email data.</p>
    /// This field is required.
    pub fn export_destination_configuration(mut self, input: crate::types::ExportDestinationConfiguration) -> Self {
        self.export_destination_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details on where to deliver the exported email data.</p>
    pub fn set_export_destination_configuration(mut self, input: ::std::option::Option<crate::types::ExportDestinationConfiguration>) -> Self {
        self.export_destination_configuration = input;
        self
    }
    /// <p>Details on where to deliver the exported email data.</p>
    pub fn get_export_destination_configuration(&self) -> &::std::option::Option<crate::types::ExportDestinationConfiguration> {
        &self.export_destination_configuration
    }
    /// <p>Whether to include message metadata as JSON files in the export.</p>
    pub fn include_metadata(mut self, input: bool) -> Self {
        self.include_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to include message metadata as JSON files in the export.</p>
    pub fn set_include_metadata(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_metadata = input;
        self
    }
    /// <p>Whether to include message metadata as JSON files in the export.</p>
    pub fn get_include_metadata(&self) -> &::std::option::Option<bool> {
        &self.include_metadata
    }
    /// Consumes the builder and constructs a [`StartArchiveExportInput`](crate::operation::start_archive_export::StartArchiveExportInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_archive_export::StartArchiveExportInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::start_archive_export::StartArchiveExportInput {
            archive_id: self.archive_id,
            filters: self.filters,
            from_timestamp: self.from_timestamp,
            to_timestamp: self.to_timestamp,
            max_results: self.max_results,
            export_destination_configuration: self.export_destination_configuration,
            include_metadata: self.include_metadata,
        })
    }
}
