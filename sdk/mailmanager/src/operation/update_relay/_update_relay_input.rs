// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateRelayInput {
    /// <p>The unique relay identifier.</p>
    pub relay_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the relay resource.</p>
    pub relay_name: ::std::option::Option<::std::string::String>,
    /// <p>The destination relay server address.</p>
    pub server_name: ::std::option::Option<::std::string::String>,
    /// <p>The destination relay server port.</p>
    pub server_port: ::std::option::Option<i32>,
    /// <p>Authentication for the relay destination server—specify the secretARN where the SMTP credentials are stored.</p>
    pub authentication: ::std::option::Option<crate::types::RelayAuthentication>,
}
impl UpdateRelayInput {
    /// <p>The unique relay identifier.</p>
    pub fn relay_id(&self) -> ::std::option::Option<&str> {
        self.relay_id.as_deref()
    }
    /// <p>The name of the relay resource.</p>
    pub fn relay_name(&self) -> ::std::option::Option<&str> {
        self.relay_name.as_deref()
    }
    /// <p>The destination relay server address.</p>
    pub fn server_name(&self) -> ::std::option::Option<&str> {
        self.server_name.as_deref()
    }
    /// <p>The destination relay server port.</p>
    pub fn server_port(&self) -> ::std::option::Option<i32> {
        self.server_port
    }
    /// <p>Authentication for the relay destination server—specify the secretARN where the SMTP credentials are stored.</p>
    pub fn authentication(&self) -> ::std::option::Option<&crate::types::RelayAuthentication> {
        self.authentication.as_ref()
    }
}
impl UpdateRelayInput {
    /// Creates a new builder-style object to manufacture [`UpdateRelayInput`](crate::operation::update_relay::UpdateRelayInput).
    pub fn builder() -> crate::operation::update_relay::builders::UpdateRelayInputBuilder {
        crate::operation::update_relay::builders::UpdateRelayInputBuilder::default()
    }
}

/// A builder for [`UpdateRelayInput`](crate::operation::update_relay::UpdateRelayInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateRelayInputBuilder {
    pub(crate) relay_id: ::std::option::Option<::std::string::String>,
    pub(crate) relay_name: ::std::option::Option<::std::string::String>,
    pub(crate) server_name: ::std::option::Option<::std::string::String>,
    pub(crate) server_port: ::std::option::Option<i32>,
    pub(crate) authentication: ::std::option::Option<crate::types::RelayAuthentication>,
}
impl UpdateRelayInputBuilder {
    /// <p>The unique relay identifier.</p>
    /// This field is required.
    pub fn relay_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.relay_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique relay identifier.</p>
    pub fn set_relay_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.relay_id = input;
        self
    }
    /// <p>The unique relay identifier.</p>
    pub fn get_relay_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.relay_id
    }
    /// <p>The name of the relay resource.</p>
    pub fn relay_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.relay_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the relay resource.</p>
    pub fn set_relay_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.relay_name = input;
        self
    }
    /// <p>The name of the relay resource.</p>
    pub fn get_relay_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.relay_name
    }
    /// <p>The destination relay server address.</p>
    pub fn server_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.server_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The destination relay server address.</p>
    pub fn set_server_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.server_name = input;
        self
    }
    /// <p>The destination relay server address.</p>
    pub fn get_server_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.server_name
    }
    /// <p>The destination relay server port.</p>
    pub fn server_port(mut self, input: i32) -> Self {
        self.server_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The destination relay server port.</p>
    pub fn set_server_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.server_port = input;
        self
    }
    /// <p>The destination relay server port.</p>
    pub fn get_server_port(&self) -> &::std::option::Option<i32> {
        &self.server_port
    }
    /// <p>Authentication for the relay destination server—specify the secretARN where the SMTP credentials are stored.</p>
    pub fn authentication(mut self, input: crate::types::RelayAuthentication) -> Self {
        self.authentication = ::std::option::Option::Some(input);
        self
    }
    /// <p>Authentication for the relay destination server—specify the secretARN where the SMTP credentials are stored.</p>
    pub fn set_authentication(mut self, input: ::std::option::Option<crate::types::RelayAuthentication>) -> Self {
        self.authentication = input;
        self
    }
    /// <p>Authentication for the relay destination server—specify the secretARN where the SMTP credentials are stored.</p>
    pub fn get_authentication(&self) -> &::std::option::Option<crate::types::RelayAuthentication> {
        &self.authentication
    }
    /// Consumes the builder and constructs a [`UpdateRelayInput`](crate::operation::update_relay::UpdateRelayInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_relay::UpdateRelayInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_relay::UpdateRelayInput {
            relay_id: self.relay_id,
            relay_name: self.relay_name,
            server_name: self.server_name,
            server_port: self.server_port,
            authentication: self.authentication,
        })
    }
}
