// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetMemberOfAddressListOutput {
    /// <p>The address retrieved from the address list.</p>
    pub address: ::std::string::String,
    /// <p>The timestamp of when the address was created.</p>
    pub created_timestamp: ::aws_smithy_types::DateTime,
    _request_id: Option<String>,
}
impl GetMemberOfAddressListOutput {
    /// <p>The address retrieved from the address list.</p>
    pub fn address(&self) -> &str {
        use std::ops::Deref;
        self.address.deref()
    }
    /// <p>The timestamp of when the address was created.</p>
    pub fn created_timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.created_timestamp
    }
}
impl ::std::fmt::Debug for GetMemberOfAddressListOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetMemberOfAddressListOutput");
        formatter.field("address", &"*** Sensitive Data Redacted ***");
        formatter.field("created_timestamp", &self.created_timestamp);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetMemberOfAddressListOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetMemberOfAddressListOutput {
    /// Creates a new builder-style object to manufacture [`GetMemberOfAddressListOutput`](crate::operation::get_member_of_address_list::GetMemberOfAddressListOutput).
    pub fn builder() -> crate::operation::get_member_of_address_list::builders::GetMemberOfAddressListOutputBuilder {
        crate::operation::get_member_of_address_list::builders::GetMemberOfAddressListOutputBuilder::default()
    }
}

/// A builder for [`GetMemberOfAddressListOutput`](crate::operation::get_member_of_address_list::GetMemberOfAddressListOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetMemberOfAddressListOutputBuilder {
    pub(crate) address: ::std::option::Option<::std::string::String>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetMemberOfAddressListOutputBuilder {
    /// <p>The address retrieved from the address list.</p>
    /// This field is required.
    pub fn address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The address retrieved from the address list.</p>
    pub fn set_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address = input;
        self
    }
    /// <p>The address retrieved from the address list.</p>
    pub fn get_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.address
    }
    /// <p>The timestamp of when the address was created.</p>
    /// This field is required.
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the address was created.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The timestamp of when the address was created.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetMemberOfAddressListOutput`](crate::operation::get_member_of_address_list::GetMemberOfAddressListOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`address`](crate::operation::get_member_of_address_list::builders::GetMemberOfAddressListOutputBuilder::address)
    /// - [`created_timestamp`](crate::operation::get_member_of_address_list::builders::GetMemberOfAddressListOutputBuilder::created_timestamp)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_member_of_address_list::GetMemberOfAddressListOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_member_of_address_list::GetMemberOfAddressListOutput {
            address: self.address.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "address",
                    "address was not specified but it is required when building GetMemberOfAddressListOutput",
                )
            })?,
            created_timestamp: self.created_timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_timestamp",
                    "created_timestamp was not specified but it is required when building GetMemberOfAddressListOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetMemberOfAddressListOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetMemberOfAddressListOutputBuilder");
        formatter.field("address", &"*** Sensitive Data Redacted ***");
        formatter.field("created_timestamp", &self.created_timestamp);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
