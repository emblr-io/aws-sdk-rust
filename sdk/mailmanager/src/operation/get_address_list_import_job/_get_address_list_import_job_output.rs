// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetAddressListImportJobOutput {
    /// <p>The identifier of the import job.</p>
    pub job_id: ::std::string::String,
    /// <p>A user-friendly name for the import job.</p>
    pub name: ::std::string::String,
    /// <p>The status of the import job.</p>
    pub status: crate::types::ImportJobStatus,
    /// <p>The pre-signed URL target for uploading the input file.</p>
    pub pre_signed_url: ::std::string::String,
    /// <p>The number of input addresses successfully imported into the address list.</p>
    pub imported_items_count: ::std::option::Option<i32>,
    /// <p>The number of input addresses that failed to be imported into the address list.</p>
    pub failed_items_count: ::std::option::Option<i32>,
    /// <p>The format of the input for an import job.</p>
    pub import_data_format: ::std::option::Option<crate::types::ImportDataFormat>,
    /// <p>The unique identifier of the address list the import job was created for.</p>
    pub address_list_id: ::std::string::String,
    /// <p>The timestamp of when the import job was created.</p>
    pub created_timestamp: ::aws_smithy_types::DateTime,
    /// <p>The timestamp of when the import job was started.</p>
    pub start_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of when the import job was completed.</p>
    pub completed_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The reason for failure of an import job.</p>
    pub error: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetAddressListImportJobOutput {
    /// <p>The identifier of the import job.</p>
    pub fn job_id(&self) -> &str {
        use std::ops::Deref;
        self.job_id.deref()
    }
    /// <p>A user-friendly name for the import job.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The status of the import job.</p>
    pub fn status(&self) -> &crate::types::ImportJobStatus {
        &self.status
    }
    /// <p>The pre-signed URL target for uploading the input file.</p>
    pub fn pre_signed_url(&self) -> &str {
        use std::ops::Deref;
        self.pre_signed_url.deref()
    }
    /// <p>The number of input addresses successfully imported into the address list.</p>
    pub fn imported_items_count(&self) -> ::std::option::Option<i32> {
        self.imported_items_count
    }
    /// <p>The number of input addresses that failed to be imported into the address list.</p>
    pub fn failed_items_count(&self) -> ::std::option::Option<i32> {
        self.failed_items_count
    }
    /// <p>The format of the input for an import job.</p>
    pub fn import_data_format(&self) -> ::std::option::Option<&crate::types::ImportDataFormat> {
        self.import_data_format.as_ref()
    }
    /// <p>The unique identifier of the address list the import job was created for.</p>
    pub fn address_list_id(&self) -> &str {
        use std::ops::Deref;
        self.address_list_id.deref()
    }
    /// <p>The timestamp of when the import job was created.</p>
    pub fn created_timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.created_timestamp
    }
    /// <p>The timestamp of when the import job was started.</p>
    pub fn start_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_timestamp.as_ref()
    }
    /// <p>The timestamp of when the import job was completed.</p>
    pub fn completed_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.completed_timestamp.as_ref()
    }
    /// <p>The reason for failure of an import job.</p>
    pub fn error(&self) -> ::std::option::Option<&str> {
        self.error.as_deref()
    }
}
impl ::std::fmt::Debug for GetAddressListImportJobOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetAddressListImportJobOutput");
        formatter.field("job_id", &self.job_id);
        formatter.field("name", &self.name);
        formatter.field("status", &self.status);
        formatter.field("pre_signed_url", &"*** Sensitive Data Redacted ***");
        formatter.field("imported_items_count", &self.imported_items_count);
        formatter.field("failed_items_count", &self.failed_items_count);
        formatter.field("import_data_format", &self.import_data_format);
        formatter.field("address_list_id", &self.address_list_id);
        formatter.field("created_timestamp", &self.created_timestamp);
        formatter.field("start_timestamp", &self.start_timestamp);
        formatter.field("completed_timestamp", &self.completed_timestamp);
        formatter.field("error", &self.error);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetAddressListImportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAddressListImportJobOutput {
    /// Creates a new builder-style object to manufacture [`GetAddressListImportJobOutput`](crate::operation::get_address_list_import_job::GetAddressListImportJobOutput).
    pub fn builder() -> crate::operation::get_address_list_import_job::builders::GetAddressListImportJobOutputBuilder {
        crate::operation::get_address_list_import_job::builders::GetAddressListImportJobOutputBuilder::default()
    }
}

/// A builder for [`GetAddressListImportJobOutput`](crate::operation::get_address_list_import_job::GetAddressListImportJobOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetAddressListImportJobOutputBuilder {
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ImportJobStatus>,
    pub(crate) pre_signed_url: ::std::option::Option<::std::string::String>,
    pub(crate) imported_items_count: ::std::option::Option<i32>,
    pub(crate) failed_items_count: ::std::option::Option<i32>,
    pub(crate) import_data_format: ::std::option::Option<crate::types::ImportDataFormat>,
    pub(crate) address_list_id: ::std::option::Option<::std::string::String>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) start_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) completed_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) error: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetAddressListImportJobOutputBuilder {
    /// <p>The identifier of the import job.</p>
    /// This field is required.
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the import job.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The identifier of the import job.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>A user-friendly name for the import job.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user-friendly name for the import job.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A user-friendly name for the import job.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The status of the import job.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ImportJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the import job.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ImportJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the import job.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ImportJobStatus> {
        &self.status
    }
    /// <p>The pre-signed URL target for uploading the input file.</p>
    /// This field is required.
    pub fn pre_signed_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pre_signed_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pre-signed URL target for uploading the input file.</p>
    pub fn set_pre_signed_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pre_signed_url = input;
        self
    }
    /// <p>The pre-signed URL target for uploading the input file.</p>
    pub fn get_pre_signed_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.pre_signed_url
    }
    /// <p>The number of input addresses successfully imported into the address list.</p>
    pub fn imported_items_count(mut self, input: i32) -> Self {
        self.imported_items_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of input addresses successfully imported into the address list.</p>
    pub fn set_imported_items_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.imported_items_count = input;
        self
    }
    /// <p>The number of input addresses successfully imported into the address list.</p>
    pub fn get_imported_items_count(&self) -> &::std::option::Option<i32> {
        &self.imported_items_count
    }
    /// <p>The number of input addresses that failed to be imported into the address list.</p>
    pub fn failed_items_count(mut self, input: i32) -> Self {
        self.failed_items_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of input addresses that failed to be imported into the address list.</p>
    pub fn set_failed_items_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.failed_items_count = input;
        self
    }
    /// <p>The number of input addresses that failed to be imported into the address list.</p>
    pub fn get_failed_items_count(&self) -> &::std::option::Option<i32> {
        &self.failed_items_count
    }
    /// <p>The format of the input for an import job.</p>
    /// This field is required.
    pub fn import_data_format(mut self, input: crate::types::ImportDataFormat) -> Self {
        self.import_data_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format of the input for an import job.</p>
    pub fn set_import_data_format(mut self, input: ::std::option::Option<crate::types::ImportDataFormat>) -> Self {
        self.import_data_format = input;
        self
    }
    /// <p>The format of the input for an import job.</p>
    pub fn get_import_data_format(&self) -> &::std::option::Option<crate::types::ImportDataFormat> {
        &self.import_data_format
    }
    /// <p>The unique identifier of the address list the import job was created for.</p>
    /// This field is required.
    pub fn address_list_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address_list_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the address list the import job was created for.</p>
    pub fn set_address_list_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address_list_id = input;
        self
    }
    /// <p>The unique identifier of the address list the import job was created for.</p>
    pub fn get_address_list_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.address_list_id
    }
    /// <p>The timestamp of when the import job was created.</p>
    /// This field is required.
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the import job was created.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The timestamp of when the import job was created.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    /// <p>The timestamp of when the import job was started.</p>
    pub fn start_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the import job was started.</p>
    pub fn set_start_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_timestamp = input;
        self
    }
    /// <p>The timestamp of when the import job was started.</p>
    pub fn get_start_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_timestamp
    }
    /// <p>The timestamp of when the import job was completed.</p>
    pub fn completed_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.completed_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the import job was completed.</p>
    pub fn set_completed_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.completed_timestamp = input;
        self
    }
    /// <p>The timestamp of when the import job was completed.</p>
    pub fn get_completed_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.completed_timestamp
    }
    /// <p>The reason for failure of an import job.</p>
    pub fn error(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for failure of an import job.</p>
    pub fn set_error(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error = input;
        self
    }
    /// <p>The reason for failure of an import job.</p>
    pub fn get_error(&self) -> &::std::option::Option<::std::string::String> {
        &self.error
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetAddressListImportJobOutput`](crate::operation::get_address_list_import_job::GetAddressListImportJobOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`job_id`](crate::operation::get_address_list_import_job::builders::GetAddressListImportJobOutputBuilder::job_id)
    /// - [`name`](crate::operation::get_address_list_import_job::builders::GetAddressListImportJobOutputBuilder::name)
    /// - [`status`](crate::operation::get_address_list_import_job::builders::GetAddressListImportJobOutputBuilder::status)
    /// - [`pre_signed_url`](crate::operation::get_address_list_import_job::builders::GetAddressListImportJobOutputBuilder::pre_signed_url)
    /// - [`address_list_id`](crate::operation::get_address_list_import_job::builders::GetAddressListImportJobOutputBuilder::address_list_id)
    /// - [`created_timestamp`](crate::operation::get_address_list_import_job::builders::GetAddressListImportJobOutputBuilder::created_timestamp)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_address_list_import_job::GetAddressListImportJobOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_address_list_import_job::GetAddressListImportJobOutput {
            job_id: self.job_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_id",
                    "job_id was not specified but it is required when building GetAddressListImportJobOutput",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GetAddressListImportJobOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetAddressListImportJobOutput",
                )
            })?,
            pre_signed_url: self.pre_signed_url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "pre_signed_url",
                    "pre_signed_url was not specified but it is required when building GetAddressListImportJobOutput",
                )
            })?,
            imported_items_count: self.imported_items_count,
            failed_items_count: self.failed_items_count,
            import_data_format: self.import_data_format,
            address_list_id: self.address_list_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "address_list_id",
                    "address_list_id was not specified but it is required when building GetAddressListImportJobOutput",
                )
            })?,
            created_timestamp: self.created_timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_timestamp",
                    "created_timestamp was not specified but it is required when building GetAddressListImportJobOutput",
                )
            })?,
            start_timestamp: self.start_timestamp,
            completed_timestamp: self.completed_timestamp,
            error: self.error,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetAddressListImportJobOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetAddressListImportJobOutputBuilder");
        formatter.field("job_id", &self.job_id);
        formatter.field("name", &self.name);
        formatter.field("status", &self.status);
        formatter.field("pre_signed_url", &"*** Sensitive Data Redacted ***");
        formatter.field("imported_items_count", &self.imported_items_count);
        formatter.field("failed_items_count", &self.failed_items_count);
        formatter.field("import_data_format", &self.import_data_format);
        formatter.field("address_list_id", &self.address_list_id);
        formatter.field("created_timestamp", &self.created_timestamp);
        formatter.field("start_timestamp", &self.start_timestamp);
        formatter.field("completed_timestamp", &self.completed_timestamp);
        formatter.field("error", &self.error);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
