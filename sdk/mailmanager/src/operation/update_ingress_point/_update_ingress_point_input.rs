// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateIngressPointInput {
    /// <p>The identifier for the ingress endpoint you want to update.</p>
    pub ingress_point_id: ::std::option::Option<::std::string::String>,
    /// <p>A user friendly name for the ingress endpoint resource.</p>
    pub ingress_point_name: ::std::option::Option<::std::string::String>,
    /// <p>The update status of an ingress endpoint.</p>
    pub status_to_update: ::std::option::Option<crate::types::IngressPointStatusToUpdate>,
    /// <p>The identifier of an existing rule set that you attach to an ingress endpoint resource.</p>
    pub rule_set_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of an existing traffic policy that you attach to an ingress endpoint resource.</p>
    pub traffic_policy_id: ::std::option::Option<::std::string::String>,
    /// <p>If you choose an Authenticated ingress endpoint, you must configure either an SMTP password or a secret ARN.</p>
    pub ingress_point_configuration: ::std::option::Option<crate::types::IngressPointConfiguration>,
}
impl UpdateIngressPointInput {
    /// <p>The identifier for the ingress endpoint you want to update.</p>
    pub fn ingress_point_id(&self) -> ::std::option::Option<&str> {
        self.ingress_point_id.as_deref()
    }
    /// <p>A user friendly name for the ingress endpoint resource.</p>
    pub fn ingress_point_name(&self) -> ::std::option::Option<&str> {
        self.ingress_point_name.as_deref()
    }
    /// <p>The update status of an ingress endpoint.</p>
    pub fn status_to_update(&self) -> ::std::option::Option<&crate::types::IngressPointStatusToUpdate> {
        self.status_to_update.as_ref()
    }
    /// <p>The identifier of an existing rule set that you attach to an ingress endpoint resource.</p>
    pub fn rule_set_id(&self) -> ::std::option::Option<&str> {
        self.rule_set_id.as_deref()
    }
    /// <p>The identifier of an existing traffic policy that you attach to an ingress endpoint resource.</p>
    pub fn traffic_policy_id(&self) -> ::std::option::Option<&str> {
        self.traffic_policy_id.as_deref()
    }
    /// <p>If you choose an Authenticated ingress endpoint, you must configure either an SMTP password or a secret ARN.</p>
    pub fn ingress_point_configuration(&self) -> ::std::option::Option<&crate::types::IngressPointConfiguration> {
        self.ingress_point_configuration.as_ref()
    }
}
impl UpdateIngressPointInput {
    /// Creates a new builder-style object to manufacture [`UpdateIngressPointInput`](crate::operation::update_ingress_point::UpdateIngressPointInput).
    pub fn builder() -> crate::operation::update_ingress_point::builders::UpdateIngressPointInputBuilder {
        crate::operation::update_ingress_point::builders::UpdateIngressPointInputBuilder::default()
    }
}

/// A builder for [`UpdateIngressPointInput`](crate::operation::update_ingress_point::UpdateIngressPointInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateIngressPointInputBuilder {
    pub(crate) ingress_point_id: ::std::option::Option<::std::string::String>,
    pub(crate) ingress_point_name: ::std::option::Option<::std::string::String>,
    pub(crate) status_to_update: ::std::option::Option<crate::types::IngressPointStatusToUpdate>,
    pub(crate) rule_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) traffic_policy_id: ::std::option::Option<::std::string::String>,
    pub(crate) ingress_point_configuration: ::std::option::Option<crate::types::IngressPointConfiguration>,
}
impl UpdateIngressPointInputBuilder {
    /// <p>The identifier for the ingress endpoint you want to update.</p>
    /// This field is required.
    pub fn ingress_point_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ingress_point_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the ingress endpoint you want to update.</p>
    pub fn set_ingress_point_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ingress_point_id = input;
        self
    }
    /// <p>The identifier for the ingress endpoint you want to update.</p>
    pub fn get_ingress_point_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ingress_point_id
    }
    /// <p>A user friendly name for the ingress endpoint resource.</p>
    pub fn ingress_point_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ingress_point_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user friendly name for the ingress endpoint resource.</p>
    pub fn set_ingress_point_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ingress_point_name = input;
        self
    }
    /// <p>A user friendly name for the ingress endpoint resource.</p>
    pub fn get_ingress_point_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.ingress_point_name
    }
    /// <p>The update status of an ingress endpoint.</p>
    pub fn status_to_update(mut self, input: crate::types::IngressPointStatusToUpdate) -> Self {
        self.status_to_update = ::std::option::Option::Some(input);
        self
    }
    /// <p>The update status of an ingress endpoint.</p>
    pub fn set_status_to_update(mut self, input: ::std::option::Option<crate::types::IngressPointStatusToUpdate>) -> Self {
        self.status_to_update = input;
        self
    }
    /// <p>The update status of an ingress endpoint.</p>
    pub fn get_status_to_update(&self) -> &::std::option::Option<crate::types::IngressPointStatusToUpdate> {
        &self.status_to_update
    }
    /// <p>The identifier of an existing rule set that you attach to an ingress endpoint resource.</p>
    pub fn rule_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of an existing rule set that you attach to an ingress endpoint resource.</p>
    pub fn set_rule_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_set_id = input;
        self
    }
    /// <p>The identifier of an existing rule set that you attach to an ingress endpoint resource.</p>
    pub fn get_rule_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_set_id
    }
    /// <p>The identifier of an existing traffic policy that you attach to an ingress endpoint resource.</p>
    pub fn traffic_policy_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.traffic_policy_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of an existing traffic policy that you attach to an ingress endpoint resource.</p>
    pub fn set_traffic_policy_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.traffic_policy_id = input;
        self
    }
    /// <p>The identifier of an existing traffic policy that you attach to an ingress endpoint resource.</p>
    pub fn get_traffic_policy_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.traffic_policy_id
    }
    /// <p>If you choose an Authenticated ingress endpoint, you must configure either an SMTP password or a secret ARN.</p>
    pub fn ingress_point_configuration(mut self, input: crate::types::IngressPointConfiguration) -> Self {
        self.ingress_point_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>If you choose an Authenticated ingress endpoint, you must configure either an SMTP password or a secret ARN.</p>
    pub fn set_ingress_point_configuration(mut self, input: ::std::option::Option<crate::types::IngressPointConfiguration>) -> Self {
        self.ingress_point_configuration = input;
        self
    }
    /// <p>If you choose an Authenticated ingress endpoint, you must configure either an SMTP password or a secret ARN.</p>
    pub fn get_ingress_point_configuration(&self) -> &::std::option::Option<crate::types::IngressPointConfiguration> {
        &self.ingress_point_configuration
    }
    /// Consumes the builder and constructs a [`UpdateIngressPointInput`](crate::operation::update_ingress_point::UpdateIngressPointInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_ingress_point::UpdateIngressPointInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_ingress_point::UpdateIngressPointInput {
            ingress_point_id: self.ingress_point_id,
            ingress_point_name: self.ingress_point_name,
            status_to_update: self.status_to_update,
            rule_set_id: self.rule_set_id,
            traffic_policy_id: self.traffic_policy_id,
            ingress_point_configuration: self.ingress_point_configuration,
        })
    }
}
