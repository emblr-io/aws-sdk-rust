// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateIngressPointInput {
    /// <p>A unique token that Amazon SES uses to recognize subsequent retries of the same request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>A user friendly name for an ingress endpoint resource.</p>
    pub ingress_point_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of the ingress endpoint to create.</p>
    pub r#type: ::std::option::Option<crate::types::IngressPointType>,
    /// <p>The identifier of an existing rule set that you attach to an ingress endpoint resource.</p>
    pub rule_set_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of an existing traffic policy that you attach to an ingress endpoint resource.</p>
    pub traffic_policy_id: ::std::option::Option<::std::string::String>,
    /// <p>If you choose an Authenticated ingress endpoint, you must configure either an SMTP password or a secret ARN.</p>
    pub ingress_point_configuration: ::std::option::Option<crate::types::IngressPointConfiguration>,
    /// <p>Specifies the network configuration for the ingress point. This allows you to create an IPv4-only, Dual-Stack, or PrivateLink type of ingress point. If not specified, the default network type is IPv4-only.</p>
    pub network_configuration: ::std::option::Option<crate::types::NetworkConfiguration>,
    /// <p>The tags used to organize, track, or control access for the resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateIngressPointInput {
    /// <p>A unique token that Amazon SES uses to recognize subsequent retries of the same request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>A user friendly name for an ingress endpoint resource.</p>
    pub fn ingress_point_name(&self) -> ::std::option::Option<&str> {
        self.ingress_point_name.as_deref()
    }
    /// <p>The type of the ingress endpoint to create.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::IngressPointType> {
        self.r#type.as_ref()
    }
    /// <p>The identifier of an existing rule set that you attach to an ingress endpoint resource.</p>
    pub fn rule_set_id(&self) -> ::std::option::Option<&str> {
        self.rule_set_id.as_deref()
    }
    /// <p>The identifier of an existing traffic policy that you attach to an ingress endpoint resource.</p>
    pub fn traffic_policy_id(&self) -> ::std::option::Option<&str> {
        self.traffic_policy_id.as_deref()
    }
    /// <p>If you choose an Authenticated ingress endpoint, you must configure either an SMTP password or a secret ARN.</p>
    pub fn ingress_point_configuration(&self) -> ::std::option::Option<&crate::types::IngressPointConfiguration> {
        self.ingress_point_configuration.as_ref()
    }
    /// <p>Specifies the network configuration for the ingress point. This allows you to create an IPv4-only, Dual-Stack, or PrivateLink type of ingress point. If not specified, the default network type is IPv4-only.</p>
    pub fn network_configuration(&self) -> ::std::option::Option<&crate::types::NetworkConfiguration> {
        self.network_configuration.as_ref()
    }
    /// <p>The tags used to organize, track, or control access for the resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateIngressPointInput {
    /// Creates a new builder-style object to manufacture [`CreateIngressPointInput`](crate::operation::create_ingress_point::CreateIngressPointInput).
    pub fn builder() -> crate::operation::create_ingress_point::builders::CreateIngressPointInputBuilder {
        crate::operation::create_ingress_point::builders::CreateIngressPointInputBuilder::default()
    }
}

/// A builder for [`CreateIngressPointInput`](crate::operation::create_ingress_point::CreateIngressPointInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateIngressPointInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) ingress_point_name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::IngressPointType>,
    pub(crate) rule_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) traffic_policy_id: ::std::option::Option<::std::string::String>,
    pub(crate) ingress_point_configuration: ::std::option::Option<crate::types::IngressPointConfiguration>,
    pub(crate) network_configuration: ::std::option::Option<crate::types::NetworkConfiguration>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateIngressPointInputBuilder {
    /// <p>A unique token that Amazon SES uses to recognize subsequent retries of the same request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique token that Amazon SES uses to recognize subsequent retries of the same request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique token that Amazon SES uses to recognize subsequent retries of the same request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>A user friendly name for an ingress endpoint resource.</p>
    /// This field is required.
    pub fn ingress_point_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ingress_point_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user friendly name for an ingress endpoint resource.</p>
    pub fn set_ingress_point_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ingress_point_name = input;
        self
    }
    /// <p>A user friendly name for an ingress endpoint resource.</p>
    pub fn get_ingress_point_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.ingress_point_name
    }
    /// <p>The type of the ingress endpoint to create.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::IngressPointType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the ingress endpoint to create.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::IngressPointType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the ingress endpoint to create.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::IngressPointType> {
        &self.r#type
    }
    /// <p>The identifier of an existing rule set that you attach to an ingress endpoint resource.</p>
    /// This field is required.
    pub fn rule_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of an existing rule set that you attach to an ingress endpoint resource.</p>
    pub fn set_rule_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_set_id = input;
        self
    }
    /// <p>The identifier of an existing rule set that you attach to an ingress endpoint resource.</p>
    pub fn get_rule_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_set_id
    }
    /// <p>The identifier of an existing traffic policy that you attach to an ingress endpoint resource.</p>
    /// This field is required.
    pub fn traffic_policy_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.traffic_policy_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of an existing traffic policy that you attach to an ingress endpoint resource.</p>
    pub fn set_traffic_policy_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.traffic_policy_id = input;
        self
    }
    /// <p>The identifier of an existing traffic policy that you attach to an ingress endpoint resource.</p>
    pub fn get_traffic_policy_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.traffic_policy_id
    }
    /// <p>If you choose an Authenticated ingress endpoint, you must configure either an SMTP password or a secret ARN.</p>
    pub fn ingress_point_configuration(mut self, input: crate::types::IngressPointConfiguration) -> Self {
        self.ingress_point_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>If you choose an Authenticated ingress endpoint, you must configure either an SMTP password or a secret ARN.</p>
    pub fn set_ingress_point_configuration(mut self, input: ::std::option::Option<crate::types::IngressPointConfiguration>) -> Self {
        self.ingress_point_configuration = input;
        self
    }
    /// <p>If you choose an Authenticated ingress endpoint, you must configure either an SMTP password or a secret ARN.</p>
    pub fn get_ingress_point_configuration(&self) -> &::std::option::Option<crate::types::IngressPointConfiguration> {
        &self.ingress_point_configuration
    }
    /// <p>Specifies the network configuration for the ingress point. This allows you to create an IPv4-only, Dual-Stack, or PrivateLink type of ingress point. If not specified, the default network type is IPv4-only.</p>
    pub fn network_configuration(mut self, input: crate::types::NetworkConfiguration) -> Self {
        self.network_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the network configuration for the ingress point. This allows you to create an IPv4-only, Dual-Stack, or PrivateLink type of ingress point. If not specified, the default network type is IPv4-only.</p>
    pub fn set_network_configuration(mut self, input: ::std::option::Option<crate::types::NetworkConfiguration>) -> Self {
        self.network_configuration = input;
        self
    }
    /// <p>Specifies the network configuration for the ingress point. This allows you to create an IPv4-only, Dual-Stack, or PrivateLink type of ingress point. If not specified, the default network type is IPv4-only.</p>
    pub fn get_network_configuration(&self) -> &::std::option::Option<crate::types::NetworkConfiguration> {
        &self.network_configuration
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for the resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags used to organize, track, or control access for the resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags used to organize, track, or control access for the resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateIngressPointInput`](crate::operation::create_ingress_point::CreateIngressPointInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_ingress_point::CreateIngressPointInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_ingress_point::CreateIngressPointInput {
            client_token: self.client_token,
            ingress_point_name: self.ingress_point_name,
            r#type: self.r#type,
            rule_set_id: self.rule_set_id,
            traffic_policy_id: self.traffic_policy_id,
            ingress_point_configuration: self.ingress_point_configuration,
            network_configuration: self.network_configuration,
            tags: self.tags,
        })
    }
}
