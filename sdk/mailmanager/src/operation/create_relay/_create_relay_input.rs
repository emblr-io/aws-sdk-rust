// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateRelayInput {
    /// <p>A unique token that Amazon SES uses to recognize subsequent retries of the same request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The unique name of the relay resource.</p>
    pub relay_name: ::std::option::Option<::std::string::String>,
    /// <p>The destination relay server address.</p>
    pub server_name: ::std::option::Option<::std::string::String>,
    /// <p>The destination relay server port.</p>
    pub server_port: ::std::option::Option<i32>,
    /// <p>Authentication for the relay destination server—specify the secretARN where the SMTP credentials are stored.</p>
    pub authentication: ::std::option::Option<crate::types::RelayAuthentication>,
    /// <p>The tags used to organize, track, or control access for the resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateRelayInput {
    /// <p>A unique token that Amazon SES uses to recognize subsequent retries of the same request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The unique name of the relay resource.</p>
    pub fn relay_name(&self) -> ::std::option::Option<&str> {
        self.relay_name.as_deref()
    }
    /// <p>The destination relay server address.</p>
    pub fn server_name(&self) -> ::std::option::Option<&str> {
        self.server_name.as_deref()
    }
    /// <p>The destination relay server port.</p>
    pub fn server_port(&self) -> ::std::option::Option<i32> {
        self.server_port
    }
    /// <p>Authentication for the relay destination server—specify the secretARN where the SMTP credentials are stored.</p>
    pub fn authentication(&self) -> ::std::option::Option<&crate::types::RelayAuthentication> {
        self.authentication.as_ref()
    }
    /// <p>The tags used to organize, track, or control access for the resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateRelayInput {
    /// Creates a new builder-style object to manufacture [`CreateRelayInput`](crate::operation::create_relay::CreateRelayInput).
    pub fn builder() -> crate::operation::create_relay::builders::CreateRelayInputBuilder {
        crate::operation::create_relay::builders::CreateRelayInputBuilder::default()
    }
}

/// A builder for [`CreateRelayInput`](crate::operation::create_relay::CreateRelayInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateRelayInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) relay_name: ::std::option::Option<::std::string::String>,
    pub(crate) server_name: ::std::option::Option<::std::string::String>,
    pub(crate) server_port: ::std::option::Option<i32>,
    pub(crate) authentication: ::std::option::Option<crate::types::RelayAuthentication>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateRelayInputBuilder {
    /// <p>A unique token that Amazon SES uses to recognize subsequent retries of the same request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique token that Amazon SES uses to recognize subsequent retries of the same request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique token that Amazon SES uses to recognize subsequent retries of the same request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The unique name of the relay resource.</p>
    /// This field is required.
    pub fn relay_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.relay_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the relay resource.</p>
    pub fn set_relay_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.relay_name = input;
        self
    }
    /// <p>The unique name of the relay resource.</p>
    pub fn get_relay_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.relay_name
    }
    /// <p>The destination relay server address.</p>
    /// This field is required.
    pub fn server_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.server_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The destination relay server address.</p>
    pub fn set_server_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.server_name = input;
        self
    }
    /// <p>The destination relay server address.</p>
    pub fn get_server_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.server_name
    }
    /// <p>The destination relay server port.</p>
    /// This field is required.
    pub fn server_port(mut self, input: i32) -> Self {
        self.server_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The destination relay server port.</p>
    pub fn set_server_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.server_port = input;
        self
    }
    /// <p>The destination relay server port.</p>
    pub fn get_server_port(&self) -> &::std::option::Option<i32> {
        &self.server_port
    }
    /// <p>Authentication for the relay destination server—specify the secretARN where the SMTP credentials are stored.</p>
    /// This field is required.
    pub fn authentication(mut self, input: crate::types::RelayAuthentication) -> Self {
        self.authentication = ::std::option::Option::Some(input);
        self
    }
    /// <p>Authentication for the relay destination server—specify the secretARN where the SMTP credentials are stored.</p>
    pub fn set_authentication(mut self, input: ::std::option::Option<crate::types::RelayAuthentication>) -> Self {
        self.authentication = input;
        self
    }
    /// <p>Authentication for the relay destination server—specify the secretARN where the SMTP credentials are stored.</p>
    pub fn get_authentication(&self) -> &::std::option::Option<crate::types::RelayAuthentication> {
        &self.authentication
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for the resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags used to organize, track, or control access for the resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags used to organize, track, or control access for the resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateRelayInput`](crate::operation::create_relay::CreateRelayInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::create_relay::CreateRelayInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_relay::CreateRelayInput {
            client_token: self.client_token,
            relay_name: self.relay_name,
            server_name: self.server_name,
            server_port: self.server_port,
            authentication: self.authentication,
            tags: self.tags,
        })
    }
}
