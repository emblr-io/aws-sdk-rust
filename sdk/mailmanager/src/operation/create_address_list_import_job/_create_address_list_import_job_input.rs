// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateAddressListImportJobInput {
    /// <p>A unique token that Amazon SES uses to recognize subsequent retries of the same request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the address list for importing addresses to.</p>
    pub address_list_id: ::std::option::Option<::std::string::String>,
    /// <p>A user-friendly name for the import job.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The format of the input for an import job.</p>
    pub import_data_format: ::std::option::Option<crate::types::ImportDataFormat>,
}
impl CreateAddressListImportJobInput {
    /// <p>A unique token that Amazon SES uses to recognize subsequent retries of the same request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The unique identifier of the address list for importing addresses to.</p>
    pub fn address_list_id(&self) -> ::std::option::Option<&str> {
        self.address_list_id.as_deref()
    }
    /// <p>A user-friendly name for the import job.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The format of the input for an import job.</p>
    pub fn import_data_format(&self) -> ::std::option::Option<&crate::types::ImportDataFormat> {
        self.import_data_format.as_ref()
    }
}
impl CreateAddressListImportJobInput {
    /// Creates a new builder-style object to manufacture [`CreateAddressListImportJobInput`](crate::operation::create_address_list_import_job::CreateAddressListImportJobInput).
    pub fn builder() -> crate::operation::create_address_list_import_job::builders::CreateAddressListImportJobInputBuilder {
        crate::operation::create_address_list_import_job::builders::CreateAddressListImportJobInputBuilder::default()
    }
}

/// A builder for [`CreateAddressListImportJobInput`](crate::operation::create_address_list_import_job::CreateAddressListImportJobInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateAddressListImportJobInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) address_list_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) import_data_format: ::std::option::Option<crate::types::ImportDataFormat>,
}
impl CreateAddressListImportJobInputBuilder {
    /// <p>A unique token that Amazon SES uses to recognize subsequent retries of the same request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique token that Amazon SES uses to recognize subsequent retries of the same request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique token that Amazon SES uses to recognize subsequent retries of the same request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The unique identifier of the address list for importing addresses to.</p>
    /// This field is required.
    pub fn address_list_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address_list_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the address list for importing addresses to.</p>
    pub fn set_address_list_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address_list_id = input;
        self
    }
    /// <p>The unique identifier of the address list for importing addresses to.</p>
    pub fn get_address_list_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.address_list_id
    }
    /// <p>A user-friendly name for the import job.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user-friendly name for the import job.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A user-friendly name for the import job.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The format of the input for an import job.</p>
    /// This field is required.
    pub fn import_data_format(mut self, input: crate::types::ImportDataFormat) -> Self {
        self.import_data_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format of the input for an import job.</p>
    pub fn set_import_data_format(mut self, input: ::std::option::Option<crate::types::ImportDataFormat>) -> Self {
        self.import_data_format = input;
        self
    }
    /// <p>The format of the input for an import job.</p>
    pub fn get_import_data_format(&self) -> &::std::option::Option<crate::types::ImportDataFormat> {
        &self.import_data_format
    }
    /// Consumes the builder and constructs a [`CreateAddressListImportJobInput`](crate::operation::create_address_list_import_job::CreateAddressListImportJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_address_list_import_job::CreateAddressListImportJobInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_address_list_import_job::CreateAddressListImportJobInput {
            client_token: self.client_token,
            address_list_id: self.address_list_id,
            name: self.name,
            import_data_format: self.import_data_format,
        })
    }
}
