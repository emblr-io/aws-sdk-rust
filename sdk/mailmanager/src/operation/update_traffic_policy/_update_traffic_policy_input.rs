// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateTrafficPolicyInput {
    /// <p>The identifier of the traffic policy that you want to update.</p>
    pub traffic_policy_id: ::std::option::Option<::std::string::String>,
    /// <p>A user-friendly name for the traffic policy resource.</p>
    pub traffic_policy_name: ::std::option::Option<::std::string::String>,
    /// <p>The list of conditions to be updated for filtering email traffic.</p>
    pub policy_statements: ::std::option::Option<::std::vec::Vec<crate::types::PolicyStatement>>,
    /// <p>Default action instructs the traﬃc policy to either Allow or Deny (block) messages that fall outside of (or not addressed by) the conditions of your policy statements</p>
    pub default_action: ::std::option::Option<crate::types::AcceptAction>,
    /// <p>The maximum message size in bytes of email which is allowed in by this traffic policy—anything larger will be blocked.</p>
    pub max_message_size_bytes: ::std::option::Option<i32>,
}
impl UpdateTrafficPolicyInput {
    /// <p>The identifier of the traffic policy that you want to update.</p>
    pub fn traffic_policy_id(&self) -> ::std::option::Option<&str> {
        self.traffic_policy_id.as_deref()
    }
    /// <p>A user-friendly name for the traffic policy resource.</p>
    pub fn traffic_policy_name(&self) -> ::std::option::Option<&str> {
        self.traffic_policy_name.as_deref()
    }
    /// <p>The list of conditions to be updated for filtering email traffic.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.policy_statements.is_none()`.
    pub fn policy_statements(&self) -> &[crate::types::PolicyStatement] {
        self.policy_statements.as_deref().unwrap_or_default()
    }
    /// <p>Default action instructs the traﬃc policy to either Allow or Deny (block) messages that fall outside of (or not addressed by) the conditions of your policy statements</p>
    pub fn default_action(&self) -> ::std::option::Option<&crate::types::AcceptAction> {
        self.default_action.as_ref()
    }
    /// <p>The maximum message size in bytes of email which is allowed in by this traffic policy—anything larger will be blocked.</p>
    pub fn max_message_size_bytes(&self) -> ::std::option::Option<i32> {
        self.max_message_size_bytes
    }
}
impl UpdateTrafficPolicyInput {
    /// Creates a new builder-style object to manufacture [`UpdateTrafficPolicyInput`](crate::operation::update_traffic_policy::UpdateTrafficPolicyInput).
    pub fn builder() -> crate::operation::update_traffic_policy::builders::UpdateTrafficPolicyInputBuilder {
        crate::operation::update_traffic_policy::builders::UpdateTrafficPolicyInputBuilder::default()
    }
}

/// A builder for [`UpdateTrafficPolicyInput`](crate::operation::update_traffic_policy::UpdateTrafficPolicyInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateTrafficPolicyInputBuilder {
    pub(crate) traffic_policy_id: ::std::option::Option<::std::string::String>,
    pub(crate) traffic_policy_name: ::std::option::Option<::std::string::String>,
    pub(crate) policy_statements: ::std::option::Option<::std::vec::Vec<crate::types::PolicyStatement>>,
    pub(crate) default_action: ::std::option::Option<crate::types::AcceptAction>,
    pub(crate) max_message_size_bytes: ::std::option::Option<i32>,
}
impl UpdateTrafficPolicyInputBuilder {
    /// <p>The identifier of the traffic policy that you want to update.</p>
    /// This field is required.
    pub fn traffic_policy_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.traffic_policy_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the traffic policy that you want to update.</p>
    pub fn set_traffic_policy_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.traffic_policy_id = input;
        self
    }
    /// <p>The identifier of the traffic policy that you want to update.</p>
    pub fn get_traffic_policy_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.traffic_policy_id
    }
    /// <p>A user-friendly name for the traffic policy resource.</p>
    pub fn traffic_policy_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.traffic_policy_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user-friendly name for the traffic policy resource.</p>
    pub fn set_traffic_policy_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.traffic_policy_name = input;
        self
    }
    /// <p>A user-friendly name for the traffic policy resource.</p>
    pub fn get_traffic_policy_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.traffic_policy_name
    }
    /// Appends an item to `policy_statements`.
    ///
    /// To override the contents of this collection use [`set_policy_statements`](Self::set_policy_statements).
    ///
    /// <p>The list of conditions to be updated for filtering email traffic.</p>
    pub fn policy_statements(mut self, input: crate::types::PolicyStatement) -> Self {
        let mut v = self.policy_statements.unwrap_or_default();
        v.push(input);
        self.policy_statements = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of conditions to be updated for filtering email traffic.</p>
    pub fn set_policy_statements(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PolicyStatement>>) -> Self {
        self.policy_statements = input;
        self
    }
    /// <p>The list of conditions to be updated for filtering email traffic.</p>
    pub fn get_policy_statements(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PolicyStatement>> {
        &self.policy_statements
    }
    /// <p>Default action instructs the traﬃc policy to either Allow or Deny (block) messages that fall outside of (or not addressed by) the conditions of your policy statements</p>
    pub fn default_action(mut self, input: crate::types::AcceptAction) -> Self {
        self.default_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Default action instructs the traﬃc policy to either Allow or Deny (block) messages that fall outside of (or not addressed by) the conditions of your policy statements</p>
    pub fn set_default_action(mut self, input: ::std::option::Option<crate::types::AcceptAction>) -> Self {
        self.default_action = input;
        self
    }
    /// <p>Default action instructs the traﬃc policy to either Allow or Deny (block) messages that fall outside of (or not addressed by) the conditions of your policy statements</p>
    pub fn get_default_action(&self) -> &::std::option::Option<crate::types::AcceptAction> {
        &self.default_action
    }
    /// <p>The maximum message size in bytes of email which is allowed in by this traffic policy—anything larger will be blocked.</p>
    pub fn max_message_size_bytes(mut self, input: i32) -> Self {
        self.max_message_size_bytes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum message size in bytes of email which is allowed in by this traffic policy—anything larger will be blocked.</p>
    pub fn set_max_message_size_bytes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_message_size_bytes = input;
        self
    }
    /// <p>The maximum message size in bytes of email which is allowed in by this traffic policy—anything larger will be blocked.</p>
    pub fn get_max_message_size_bytes(&self) -> &::std::option::Option<i32> {
        &self.max_message_size_bytes
    }
    /// Consumes the builder and constructs a [`UpdateTrafficPolicyInput`](crate::operation::update_traffic_policy::UpdateTrafficPolicyInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_traffic_policy::UpdateTrafficPolicyInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_traffic_policy::UpdateTrafficPolicyInput {
            traffic_policy_id: self.traffic_policy_id,
            traffic_policy_name: self.traffic_policy_name,
            policy_statements: self.policy_statements,
            default_action: self.default_action,
            max_message_size_bytes: self.max_message_size_bytes,
        })
    }
}
