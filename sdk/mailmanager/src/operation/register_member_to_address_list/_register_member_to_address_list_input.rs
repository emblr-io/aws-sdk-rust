// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RegisterMemberToAddressListInput {
    /// <p>The unique identifier of the address list where the address should be added.</p>
    pub address_list_id: ::std::option::Option<::std::string::String>,
    /// <p>The address to be added to the address list.</p>
    pub address: ::std::option::Option<::std::string::String>,
}
impl RegisterMemberToAddressListInput {
    /// <p>The unique identifier of the address list where the address should be added.</p>
    pub fn address_list_id(&self) -> ::std::option::Option<&str> {
        self.address_list_id.as_deref()
    }
    /// <p>The address to be added to the address list.</p>
    pub fn address(&self) -> ::std::option::Option<&str> {
        self.address.as_deref()
    }
}
impl ::std::fmt::Debug for RegisterMemberToAddressListInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RegisterMemberToAddressListInput");
        formatter.field("address_list_id", &self.address_list_id);
        formatter.field("address", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RegisterMemberToAddressListInput {
    /// Creates a new builder-style object to manufacture [`RegisterMemberToAddressListInput`](crate::operation::register_member_to_address_list::RegisterMemberToAddressListInput).
    pub fn builder() -> crate::operation::register_member_to_address_list::builders::RegisterMemberToAddressListInputBuilder {
        crate::operation::register_member_to_address_list::builders::RegisterMemberToAddressListInputBuilder::default()
    }
}

/// A builder for [`RegisterMemberToAddressListInput`](crate::operation::register_member_to_address_list::RegisterMemberToAddressListInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RegisterMemberToAddressListInputBuilder {
    pub(crate) address_list_id: ::std::option::Option<::std::string::String>,
    pub(crate) address: ::std::option::Option<::std::string::String>,
}
impl RegisterMemberToAddressListInputBuilder {
    /// <p>The unique identifier of the address list where the address should be added.</p>
    /// This field is required.
    pub fn address_list_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address_list_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the address list where the address should be added.</p>
    pub fn set_address_list_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address_list_id = input;
        self
    }
    /// <p>The unique identifier of the address list where the address should be added.</p>
    pub fn get_address_list_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.address_list_id
    }
    /// <p>The address to be added to the address list.</p>
    /// This field is required.
    pub fn address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The address to be added to the address list.</p>
    pub fn set_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address = input;
        self
    }
    /// <p>The address to be added to the address list.</p>
    pub fn get_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.address
    }
    /// Consumes the builder and constructs a [`RegisterMemberToAddressListInput`](crate::operation::register_member_to_address_list::RegisterMemberToAddressListInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::register_member_to_address_list::RegisterMemberToAddressListInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::register_member_to_address_list::RegisterMemberToAddressListInput {
            address_list_id: self.address_list_id,
            address: self.address,
        })
    }
}
impl ::std::fmt::Debug for RegisterMemberToAddressListInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RegisterMemberToAddressListInputBuilder");
        formatter.field("address_list_id", &self.address_list_id);
        formatter.field("address", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
