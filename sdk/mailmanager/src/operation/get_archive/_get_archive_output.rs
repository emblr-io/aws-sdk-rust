// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The response containing details of the requested archive.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetArchiveOutput {
    /// <p>The unique identifier of the archive.</p>
    pub archive_id: ::std::string::String,
    /// <p>The unique name assigned to the archive.</p>
    pub archive_name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the archive.</p>
    pub archive_arn: ::std::string::String,
    /// <p>The current state of the archive:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVE</code> – The archive is ready and available for use.</p></li>
    /// <li>
    /// <p><code>PENDING_DELETION</code> – The archive has been marked for deletion and will be permanently deleted in 30 days. No further modifications can be made in this state.</p></li>
    /// </ul>
    pub archive_state: crate::types::ArchiveState,
    /// <p>The retention period for emails in this archive.</p>
    pub retention: ::std::option::Option<crate::types::ArchiveRetention>,
    /// <p>The timestamp of when the archive was created.</p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of when the archive was modified.</p>
    pub last_updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the archive.</p>
    pub kms_key_arn: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetArchiveOutput {
    /// <p>The unique identifier of the archive.</p>
    pub fn archive_id(&self) -> &str {
        use std::ops::Deref;
        self.archive_id.deref()
    }
    /// <p>The unique name assigned to the archive.</p>
    pub fn archive_name(&self) -> &str {
        use std::ops::Deref;
        self.archive_name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the archive.</p>
    pub fn archive_arn(&self) -> &str {
        use std::ops::Deref;
        self.archive_arn.deref()
    }
    /// <p>The current state of the archive:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVE</code> – The archive is ready and available for use.</p></li>
    /// <li>
    /// <p><code>PENDING_DELETION</code> – The archive has been marked for deletion and will be permanently deleted in 30 days. No further modifications can be made in this state.</p></li>
    /// </ul>
    pub fn archive_state(&self) -> &crate::types::ArchiveState {
        &self.archive_state
    }
    /// <p>The retention period for emails in this archive.</p>
    pub fn retention(&self) -> ::std::option::Option<&crate::types::ArchiveRetention> {
        self.retention.as_ref()
    }
    /// <p>The timestamp of when the archive was created.</p>
    pub fn created_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The timestamp of when the archive was modified.</p>
    pub fn last_updated_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_timestamp.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the archive.</p>
    pub fn kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetArchiveOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetArchiveOutput {
    /// Creates a new builder-style object to manufacture [`GetArchiveOutput`](crate::operation::get_archive::GetArchiveOutput).
    pub fn builder() -> crate::operation::get_archive::builders::GetArchiveOutputBuilder {
        crate::operation::get_archive::builders::GetArchiveOutputBuilder::default()
    }
}

/// A builder for [`GetArchiveOutput`](crate::operation::get_archive::GetArchiveOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetArchiveOutputBuilder {
    pub(crate) archive_id: ::std::option::Option<::std::string::String>,
    pub(crate) archive_name: ::std::option::Option<::std::string::String>,
    pub(crate) archive_arn: ::std::option::Option<::std::string::String>,
    pub(crate) archive_state: ::std::option::Option<crate::types::ArchiveState>,
    pub(crate) retention: ::std::option::Option<crate::types::ArchiveRetention>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) kms_key_arn: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetArchiveOutputBuilder {
    /// <p>The unique identifier of the archive.</p>
    /// This field is required.
    pub fn archive_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.archive_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the archive.</p>
    pub fn set_archive_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.archive_id = input;
        self
    }
    /// <p>The unique identifier of the archive.</p>
    pub fn get_archive_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.archive_id
    }
    /// <p>The unique name assigned to the archive.</p>
    /// This field is required.
    pub fn archive_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.archive_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name assigned to the archive.</p>
    pub fn set_archive_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.archive_name = input;
        self
    }
    /// <p>The unique name assigned to the archive.</p>
    pub fn get_archive_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.archive_name
    }
    /// <p>The Amazon Resource Name (ARN) of the archive.</p>
    /// This field is required.
    pub fn archive_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.archive_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the archive.</p>
    pub fn set_archive_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.archive_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the archive.</p>
    pub fn get_archive_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.archive_arn
    }
    /// <p>The current state of the archive:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVE</code> – The archive is ready and available for use.</p></li>
    /// <li>
    /// <p><code>PENDING_DELETION</code> – The archive has been marked for deletion and will be permanently deleted in 30 days. No further modifications can be made in this state.</p></li>
    /// </ul>
    /// This field is required.
    pub fn archive_state(mut self, input: crate::types::ArchiveState) -> Self {
        self.archive_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the archive:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVE</code> – The archive is ready and available for use.</p></li>
    /// <li>
    /// <p><code>PENDING_DELETION</code> – The archive has been marked for deletion and will be permanently deleted in 30 days. No further modifications can be made in this state.</p></li>
    /// </ul>
    pub fn set_archive_state(mut self, input: ::std::option::Option<crate::types::ArchiveState>) -> Self {
        self.archive_state = input;
        self
    }
    /// <p>The current state of the archive:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVE</code> – The archive is ready and available for use.</p></li>
    /// <li>
    /// <p><code>PENDING_DELETION</code> – The archive has been marked for deletion and will be permanently deleted in 30 days. No further modifications can be made in this state.</p></li>
    /// </ul>
    pub fn get_archive_state(&self) -> &::std::option::Option<crate::types::ArchiveState> {
        &self.archive_state
    }
    /// <p>The retention period for emails in this archive.</p>
    /// This field is required.
    pub fn retention(mut self, input: crate::types::ArchiveRetention) -> Self {
        self.retention = ::std::option::Option::Some(input);
        self
    }
    /// <p>The retention period for emails in this archive.</p>
    pub fn set_retention(mut self, input: ::std::option::Option<crate::types::ArchiveRetention>) -> Self {
        self.retention = input;
        self
    }
    /// <p>The retention period for emails in this archive.</p>
    pub fn get_retention(&self) -> &::std::option::Option<crate::types::ArchiveRetention> {
        &self.retention
    }
    /// <p>The timestamp of when the archive was created.</p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the archive was created.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The timestamp of when the archive was created.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    /// <p>The timestamp of when the archive was modified.</p>
    pub fn last_updated_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the archive was modified.</p>
    pub fn set_last_updated_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_timestamp = input;
        self
    }
    /// <p>The timestamp of when the archive was modified.</p>
    pub fn get_last_updated_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_timestamp
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the archive.</p>
    pub fn kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the archive.</p>
    pub fn set_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the archive.</p>
    pub fn get_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_arn
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetArchiveOutput`](crate::operation::get_archive::GetArchiveOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`archive_id`](crate::operation::get_archive::builders::GetArchiveOutputBuilder::archive_id)
    /// - [`archive_name`](crate::operation::get_archive::builders::GetArchiveOutputBuilder::archive_name)
    /// - [`archive_arn`](crate::operation::get_archive::builders::GetArchiveOutputBuilder::archive_arn)
    /// - [`archive_state`](crate::operation::get_archive::builders::GetArchiveOutputBuilder::archive_state)
    pub fn build(self) -> ::std::result::Result<crate::operation::get_archive::GetArchiveOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_archive::GetArchiveOutput {
            archive_id: self.archive_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "archive_id",
                    "archive_id was not specified but it is required when building GetArchiveOutput",
                )
            })?,
            archive_name: self.archive_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "archive_name",
                    "archive_name was not specified but it is required when building GetArchiveOutput",
                )
            })?,
            archive_arn: self.archive_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "archive_arn",
                    "archive_arn was not specified but it is required when building GetArchiveOutput",
                )
            })?,
            archive_state: self.archive_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "archive_state",
                    "archive_state was not specified but it is required when building GetArchiveOutput",
                )
            })?,
            retention: self.retention,
            created_timestamp: self.created_timestamp,
            last_updated_timestamp: self.last_updated_timestamp,
            kms_key_arn: self.kms_key_arn,
            _request_id: self._request_id,
        })
    }
}
