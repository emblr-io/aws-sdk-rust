// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Writes the MIME content of the email to an S3 bucket.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3Action {
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, the specified the bucket has been deleted.</p>
    pub action_failure_policy: ::std::option::Option<crate::types::ActionFailurePolicy>,
    /// <p>The Amazon Resource Name (ARN) of the IAM Role to use while writing to S3. This role must have access to the s3:PutObject, kms:Encrypt, and kms:GenerateDataKey APIs for the given bucket.</p>
    pub role_arn: ::std::string::String,
    /// <p>The bucket name of the S3 bucket to write to.</p>
    pub s3_bucket: ::std::string::String,
    /// <p>The S3 prefix to use for the write to the s3 bucket.</p>
    pub s3_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The KMS Key ID to use to encrypt the message in S3.</p>
    pub s3_sse_kms_key_id: ::std::option::Option<::std::string::String>,
}
impl S3Action {
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, the specified the bucket has been deleted.</p>
    pub fn action_failure_policy(&self) -> ::std::option::Option<&crate::types::ActionFailurePolicy> {
        self.action_failure_policy.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM Role to use while writing to S3. This role must have access to the s3:PutObject, kms:Encrypt, and kms:GenerateDataKey APIs for the given bucket.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>The bucket name of the S3 bucket to write to.</p>
    pub fn s3_bucket(&self) -> &str {
        use std::ops::Deref;
        self.s3_bucket.deref()
    }
    /// <p>The S3 prefix to use for the write to the s3 bucket.</p>
    pub fn s3_prefix(&self) -> ::std::option::Option<&str> {
        self.s3_prefix.as_deref()
    }
    /// <p>The KMS Key ID to use to encrypt the message in S3.</p>
    pub fn s3_sse_kms_key_id(&self) -> ::std::option::Option<&str> {
        self.s3_sse_kms_key_id.as_deref()
    }
}
impl S3Action {
    /// Creates a new builder-style object to manufacture [`S3Action`](crate::types::S3Action).
    pub fn builder() -> crate::types::builders::S3ActionBuilder {
        crate::types::builders::S3ActionBuilder::default()
    }
}

/// A builder for [`S3Action`](crate::types::S3Action).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct S3ActionBuilder {
    pub(crate) action_failure_policy: ::std::option::Option<crate::types::ActionFailurePolicy>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) s3_bucket: ::std::option::Option<::std::string::String>,
    pub(crate) s3_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) s3_sse_kms_key_id: ::std::option::Option<::std::string::String>,
}
impl S3ActionBuilder {
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, the specified the bucket has been deleted.</p>
    pub fn action_failure_policy(mut self, input: crate::types::ActionFailurePolicy) -> Self {
        self.action_failure_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, the specified the bucket has been deleted.</p>
    pub fn set_action_failure_policy(mut self, input: ::std::option::Option<crate::types::ActionFailurePolicy>) -> Self {
        self.action_failure_policy = input;
        self
    }
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, the specified the bucket has been deleted.</p>
    pub fn get_action_failure_policy(&self) -> &::std::option::Option<crate::types::ActionFailurePolicy> {
        &self.action_failure_policy
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM Role to use while writing to S3. This role must have access to the s3:PutObject, kms:Encrypt, and kms:GenerateDataKey APIs for the given bucket.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM Role to use while writing to S3. This role must have access to the s3:PutObject, kms:Encrypt, and kms:GenerateDataKey APIs for the given bucket.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM Role to use while writing to S3. This role must have access to the s3:PutObject, kms:Encrypt, and kms:GenerateDataKey APIs for the given bucket.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The bucket name of the S3 bucket to write to.</p>
    /// This field is required.
    pub fn s3_bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_bucket = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The bucket name of the S3 bucket to write to.</p>
    pub fn set_s3_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_bucket = input;
        self
    }
    /// <p>The bucket name of the S3 bucket to write to.</p>
    pub fn get_s3_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_bucket
    }
    /// <p>The S3 prefix to use for the write to the s3 bucket.</p>
    pub fn s3_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 prefix to use for the write to the s3 bucket.</p>
    pub fn set_s3_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_prefix = input;
        self
    }
    /// <p>The S3 prefix to use for the write to the s3 bucket.</p>
    pub fn get_s3_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_prefix
    }
    /// <p>The KMS Key ID to use to encrypt the message in S3.</p>
    pub fn s3_sse_kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_sse_kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The KMS Key ID to use to encrypt the message in S3.</p>
    pub fn set_s3_sse_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_sse_kms_key_id = input;
        self
    }
    /// <p>The KMS Key ID to use to encrypt the message in S3.</p>
    pub fn get_s3_sse_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_sse_kms_key_id
    }
    /// Consumes the builder and constructs a [`S3Action`](crate::types::S3Action).
    /// This method will fail if any of the following fields are not set:
    /// - [`role_arn`](crate::types::builders::S3ActionBuilder::role_arn)
    /// - [`s3_bucket`](crate::types::builders::S3ActionBuilder::s3_bucket)
    pub fn build(self) -> ::std::result::Result<crate::types::S3Action, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::S3Action {
            action_failure_policy: self.action_failure_policy,
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building S3Action",
                )
            })?,
            s3_bucket: self.s3_bucket.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "s3_bucket",
                    "s3_bucket was not specified but it is required when building S3Action",
                )
            })?,
            s3_prefix: self.s3_prefix,
            s3_sse_kms_key_id: self.s3_sse_kms_key_id,
        })
    }
}
