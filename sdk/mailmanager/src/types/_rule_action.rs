// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The action for a rule to take. Only one of the contained actions can be set.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum RuleAction {
    /// <p>This action adds a header. This can be used to add arbitrary email headers.</p>
    AddHeader(crate::types::AddHeaderAction),
    /// <p>This action archives the email. This can be used to deliver an email to an archive.</p>
    Archive(crate::types::ArchiveAction),
    /// <p>This action delivers an email to a WorkMail mailbox.</p>
    DeliverToMailbox(crate::types::DeliverToMailboxAction),
    /// <p>This action delivers an email to an Amazon Q Business application for ingestion into its knowledge base.</p>
    DeliverToQBusiness(crate::types::DeliverToQBusinessAction),
    /// <p>This action terminates the evaluation of rules in the rule set.</p>
    Drop(crate::types::DropAction),
    /// <p>This action publishes the email content to an Amazon SNS topic.</p>
    PublishToSns(crate::types::SnsAction),
    /// <p>This action relays the email to another SMTP server.</p>
    Relay(crate::types::RelayAction),
    /// <p>The action replaces certain or all recipients with a different set of recipients.</p>
    ReplaceRecipient(crate::types::ReplaceRecipientAction),
    /// <p>This action sends the email to the internet.</p>
    Send(crate::types::SendAction),
    /// <p>This action writes the MIME content of the email to an S3 bucket.</p>
    WriteToS3(crate::types::S3Action),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl RuleAction {
    /// Tries to convert the enum instance into [`AddHeader`](crate::types::RuleAction::AddHeader), extracting the inner [`AddHeaderAction`](crate::types::AddHeaderAction).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_add_header(&self) -> ::std::result::Result<&crate::types::AddHeaderAction, &Self> {
        if let RuleAction::AddHeader(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AddHeader`](crate::types::RuleAction::AddHeader).
    pub fn is_add_header(&self) -> bool {
        self.as_add_header().is_ok()
    }
    /// Tries to convert the enum instance into [`Archive`](crate::types::RuleAction::Archive), extracting the inner [`ArchiveAction`](crate::types::ArchiveAction).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_archive(&self) -> ::std::result::Result<&crate::types::ArchiveAction, &Self> {
        if let RuleAction::Archive(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Archive`](crate::types::RuleAction::Archive).
    pub fn is_archive(&self) -> bool {
        self.as_archive().is_ok()
    }
    /// Tries to convert the enum instance into [`DeliverToMailbox`](crate::types::RuleAction::DeliverToMailbox), extracting the inner [`DeliverToMailboxAction`](crate::types::DeliverToMailboxAction).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_deliver_to_mailbox(&self) -> ::std::result::Result<&crate::types::DeliverToMailboxAction, &Self> {
        if let RuleAction::DeliverToMailbox(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`DeliverToMailbox`](crate::types::RuleAction::DeliverToMailbox).
    pub fn is_deliver_to_mailbox(&self) -> bool {
        self.as_deliver_to_mailbox().is_ok()
    }
    /// Tries to convert the enum instance into [`DeliverToQBusiness`](crate::types::RuleAction::DeliverToQBusiness), extracting the inner [`DeliverToQBusinessAction`](crate::types::DeliverToQBusinessAction).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_deliver_to_q_business(&self) -> ::std::result::Result<&crate::types::DeliverToQBusinessAction, &Self> {
        if let RuleAction::DeliverToQBusiness(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`DeliverToQBusiness`](crate::types::RuleAction::DeliverToQBusiness).
    pub fn is_deliver_to_q_business(&self) -> bool {
        self.as_deliver_to_q_business().is_ok()
    }
    /// Tries to convert the enum instance into [`Drop`](crate::types::RuleAction::Drop), extracting the inner [`DropAction`](crate::types::DropAction).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_drop(&self) -> ::std::result::Result<&crate::types::DropAction, &Self> {
        if let RuleAction::Drop(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Drop`](crate::types::RuleAction::Drop).
    pub fn is_drop(&self) -> bool {
        self.as_drop().is_ok()
    }
    /// Tries to convert the enum instance into [`PublishToSns`](crate::types::RuleAction::PublishToSns), extracting the inner [`SnsAction`](crate::types::SnsAction).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_publish_to_sns(&self) -> ::std::result::Result<&crate::types::SnsAction, &Self> {
        if let RuleAction::PublishToSns(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`PublishToSns`](crate::types::RuleAction::PublishToSns).
    pub fn is_publish_to_sns(&self) -> bool {
        self.as_publish_to_sns().is_ok()
    }
    /// Tries to convert the enum instance into [`Relay`](crate::types::RuleAction::Relay), extracting the inner [`RelayAction`](crate::types::RelayAction).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_relay(&self) -> ::std::result::Result<&crate::types::RelayAction, &Self> {
        if let RuleAction::Relay(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Relay`](crate::types::RuleAction::Relay).
    pub fn is_relay(&self) -> bool {
        self.as_relay().is_ok()
    }
    /// Tries to convert the enum instance into [`ReplaceRecipient`](crate::types::RuleAction::ReplaceRecipient), extracting the inner [`ReplaceRecipientAction`](crate::types::ReplaceRecipientAction).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_replace_recipient(&self) -> ::std::result::Result<&crate::types::ReplaceRecipientAction, &Self> {
        if let RuleAction::ReplaceRecipient(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ReplaceRecipient`](crate::types::RuleAction::ReplaceRecipient).
    pub fn is_replace_recipient(&self) -> bool {
        self.as_replace_recipient().is_ok()
    }
    /// Tries to convert the enum instance into [`Send`](crate::types::RuleAction::Send), extracting the inner [`SendAction`](crate::types::SendAction).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_send(&self) -> ::std::result::Result<&crate::types::SendAction, &Self> {
        if let RuleAction::Send(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Send`](crate::types::RuleAction::Send).
    pub fn is_send(&self) -> bool {
        self.as_send().is_ok()
    }
    /// Tries to convert the enum instance into [`WriteToS3`](crate::types::RuleAction::WriteToS3), extracting the inner [`S3Action`](crate::types::S3Action).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_write_to_s3(&self) -> ::std::result::Result<&crate::types::S3Action, &Self> {
        if let RuleAction::WriteToS3(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`WriteToS3`](crate::types::RuleAction::WriteToS3).
    pub fn is_write_to_s3(&self) -> bool {
        self.as_write_to_s3().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
