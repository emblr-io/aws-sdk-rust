// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filtering options for ListMembersOfAddressList operation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AddressFilter {
    /// <p>Filter to limit the results to addresses having the provided prefix.</p>
    pub address_prefix: ::std::option::Option<::std::string::String>,
}
impl AddressFilter {
    /// <p>Filter to limit the results to addresses having the provided prefix.</p>
    pub fn address_prefix(&self) -> ::std::option::Option<&str> {
        self.address_prefix.as_deref()
    }
}
impl ::std::fmt::Debug for AddressFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AddressFilter");
        formatter.field("address_prefix", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AddressFilter {
    /// Creates a new builder-style object to manufacture [`AddressFilter`](crate::types::AddressFilter).
    pub fn builder() -> crate::types::builders::AddressFilterBuilder {
        crate::types::builders::AddressFilterBuilder::default()
    }
}

/// A builder for [`AddressFilter`](crate::types::AddressFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AddressFilterBuilder {
    pub(crate) address_prefix: ::std::option::Option<::std::string::String>,
}
impl AddressFilterBuilder {
    /// <p>Filter to limit the results to addresses having the provided prefix.</p>
    pub fn address_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filter to limit the results to addresses having the provided prefix.</p>
    pub fn set_address_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address_prefix = input;
        self
    }
    /// <p>Filter to limit the results to addresses having the provided prefix.</p>
    pub fn get_address_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.address_prefix
    }
    /// Consumes the builder and constructs a [`AddressFilter`](crate::types::AddressFilter).
    pub fn build(self) -> crate::types::AddressFilter {
        crate::types::AddressFilter {
            address_prefix: self.address_prefix,
        }
    }
}
impl ::std::fmt::Debug for AddressFilterBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AddressFilterBuilder");
        formatter.field("address_prefix", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
