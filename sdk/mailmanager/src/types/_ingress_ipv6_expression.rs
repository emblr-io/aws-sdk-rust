// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The union type representing the allowed types for the left hand side of an IPv6 condition.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IngressIpv6Expression {
    /// <p>The left hand side argument of an IPv6 condition expression.</p>
    pub evaluate: ::std::option::Option<crate::types::IngressIpv6ToEvaluate>,
    /// <p>The matching operator for an IPv6 condition expression.</p>
    pub operator: crate::types::IngressIpOperator,
    /// <p>The right hand side argument of an IPv6 condition expression.</p>
    pub values: ::std::vec::Vec<::std::string::String>,
}
impl IngressIpv6Expression {
    /// <p>The left hand side argument of an IPv6 condition expression.</p>
    pub fn evaluate(&self) -> ::std::option::Option<&crate::types::IngressIpv6ToEvaluate> {
        self.evaluate.as_ref()
    }
    /// <p>The matching operator for an IPv6 condition expression.</p>
    pub fn operator(&self) -> &crate::types::IngressIpOperator {
        &self.operator
    }
    /// <p>The right hand side argument of an IPv6 condition expression.</p>
    pub fn values(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.values.deref()
    }
}
impl IngressIpv6Expression {
    /// Creates a new builder-style object to manufacture [`IngressIpv6Expression`](crate::types::IngressIpv6Expression).
    pub fn builder() -> crate::types::builders::IngressIpv6ExpressionBuilder {
        crate::types::builders::IngressIpv6ExpressionBuilder::default()
    }
}

/// A builder for [`IngressIpv6Expression`](crate::types::IngressIpv6Expression).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IngressIpv6ExpressionBuilder {
    pub(crate) evaluate: ::std::option::Option<crate::types::IngressIpv6ToEvaluate>,
    pub(crate) operator: ::std::option::Option<crate::types::IngressIpOperator>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl IngressIpv6ExpressionBuilder {
    /// <p>The left hand side argument of an IPv6 condition expression.</p>
    /// This field is required.
    pub fn evaluate(mut self, input: crate::types::IngressIpv6ToEvaluate) -> Self {
        self.evaluate = ::std::option::Option::Some(input);
        self
    }
    /// <p>The left hand side argument of an IPv6 condition expression.</p>
    pub fn set_evaluate(mut self, input: ::std::option::Option<crate::types::IngressIpv6ToEvaluate>) -> Self {
        self.evaluate = input;
        self
    }
    /// <p>The left hand side argument of an IPv6 condition expression.</p>
    pub fn get_evaluate(&self) -> &::std::option::Option<crate::types::IngressIpv6ToEvaluate> {
        &self.evaluate
    }
    /// <p>The matching operator for an IPv6 condition expression.</p>
    /// This field is required.
    pub fn operator(mut self, input: crate::types::IngressIpOperator) -> Self {
        self.operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The matching operator for an IPv6 condition expression.</p>
    pub fn set_operator(mut self, input: ::std::option::Option<crate::types::IngressIpOperator>) -> Self {
        self.operator = input;
        self
    }
    /// <p>The matching operator for an IPv6 condition expression.</p>
    pub fn get_operator(&self) -> &::std::option::Option<crate::types::IngressIpOperator> {
        &self.operator
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The right hand side argument of an IPv6 condition expression.</p>
    pub fn values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The right hand side argument of an IPv6 condition expression.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The right hand side argument of an IPv6 condition expression.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`IngressIpv6Expression`](crate::types::IngressIpv6Expression).
    /// This method will fail if any of the following fields are not set:
    /// - [`operator`](crate::types::builders::IngressIpv6ExpressionBuilder::operator)
    /// - [`values`](crate::types::builders::IngressIpv6ExpressionBuilder::values)
    pub fn build(self) -> ::std::result::Result<crate::types::IngressIpv6Expression, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IngressIpv6Expression {
            evaluate: self.evaluate,
            operator: self.operator.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operator",
                    "operator was not specified but it is required when building IngressIpv6Expression",
                )
            })?,
            values: self.values.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "values",
                    "values was not specified but it is required when building IngressIpv6Expression",
                )
            })?,
        })
    }
}
