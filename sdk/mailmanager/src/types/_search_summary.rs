// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary details of an archive search job.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchSummary {
    /// <p>The unique identifier of the search job.</p>
    pub search_id: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the search job.</p>
    pub status: ::std::option::Option<crate::types::SearchStatus>,
}
impl SearchSummary {
    /// <p>The unique identifier of the search job.</p>
    pub fn search_id(&self) -> ::std::option::Option<&str> {
        self.search_id.as_deref()
    }
    /// <p>The current status of the search job.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::SearchStatus> {
        self.status.as_ref()
    }
}
impl SearchSummary {
    /// Creates a new builder-style object to manufacture [`SearchSummary`](crate::types::SearchSummary).
    pub fn builder() -> crate::types::builders::SearchSummaryBuilder {
        crate::types::builders::SearchSummaryBuilder::default()
    }
}

/// A builder for [`SearchSummary`](crate::types::SearchSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SearchSummaryBuilder {
    pub(crate) search_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::SearchStatus>,
}
impl SearchSummaryBuilder {
    /// <p>The unique identifier of the search job.</p>
    pub fn search_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.search_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the search job.</p>
    pub fn set_search_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.search_id = input;
        self
    }
    /// <p>The unique identifier of the search job.</p>
    pub fn get_search_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.search_id
    }
    /// <p>The current status of the search job.</p>
    pub fn status(mut self, input: crate::types::SearchStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the search job.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SearchStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the search job.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SearchStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`SearchSummary`](crate::types::SearchSummary).
    pub fn build(self) -> crate::types::SearchSummary {
        crate::types::SearchSummary {
            search_id: self.search_id,
            status: self.status,
        }
    }
}
