// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for exporting email data to an Amazon S3 bucket.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3ExportDestinationConfiguration {
    /// <p>The S3 location to deliver the exported email data.</p>
    pub s3_location: ::std::option::Option<::std::string::String>,
}
impl S3ExportDestinationConfiguration {
    /// <p>The S3 location to deliver the exported email data.</p>
    pub fn s3_location(&self) -> ::std::option::Option<&str> {
        self.s3_location.as_deref()
    }
}
impl S3ExportDestinationConfiguration {
    /// Creates a new builder-style object to manufacture [`S3ExportDestinationConfiguration`](crate::types::S3ExportDestinationConfiguration).
    pub fn builder() -> crate::types::builders::S3ExportDestinationConfigurationBuilder {
        crate::types::builders::S3ExportDestinationConfigurationBuilder::default()
    }
}

/// A builder for [`S3ExportDestinationConfiguration`](crate::types::S3ExportDestinationConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct S3ExportDestinationConfigurationBuilder {
    pub(crate) s3_location: ::std::option::Option<::std::string::String>,
}
impl S3ExportDestinationConfigurationBuilder {
    /// <p>The S3 location to deliver the exported email data.</p>
    pub fn s3_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 location to deliver the exported email data.</p>
    pub fn set_s3_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_location = input;
        self
    }
    /// <p>The S3 location to deliver the exported email data.</p>
    pub fn get_s3_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_location
    }
    /// Consumes the builder and constructs a [`S3ExportDestinationConfiguration`](crate::types::S3ExportDestinationConfiguration).
    pub fn build(self) -> crate::types::S3ExportDestinationConfiguration {
        crate::types::S3ExportDestinationConfiguration {
            s3_location: self.s3_location,
        }
    }
}
