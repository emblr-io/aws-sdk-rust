// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A set of filter conditions to include and/or exclude emails.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ArchiveFilters {
    /// <p>The filter conditions for emails to include.</p>
    pub include: ::std::option::Option<::std::vec::Vec<crate::types::ArchiveFilterCondition>>,
    /// <p>The filter conditions for emails to exclude.</p>
    pub unless: ::std::option::Option<::std::vec::Vec<crate::types::ArchiveFilterCondition>>,
}
impl ArchiveFilters {
    /// <p>The filter conditions for emails to include.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.include.is_none()`.
    pub fn include(&self) -> &[crate::types::ArchiveFilterCondition] {
        self.include.as_deref().unwrap_or_default()
    }
    /// <p>The filter conditions for emails to exclude.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.unless.is_none()`.
    pub fn unless(&self) -> &[crate::types::ArchiveFilterCondition] {
        self.unless.as_deref().unwrap_or_default()
    }
}
impl ArchiveFilters {
    /// Creates a new builder-style object to manufacture [`ArchiveFilters`](crate::types::ArchiveFilters).
    pub fn builder() -> crate::types::builders::ArchiveFiltersBuilder {
        crate::types::builders::ArchiveFiltersBuilder::default()
    }
}

/// A builder for [`ArchiveFilters`](crate::types::ArchiveFilters).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ArchiveFiltersBuilder {
    pub(crate) include: ::std::option::Option<::std::vec::Vec<crate::types::ArchiveFilterCondition>>,
    pub(crate) unless: ::std::option::Option<::std::vec::Vec<crate::types::ArchiveFilterCondition>>,
}
impl ArchiveFiltersBuilder {
    /// Appends an item to `include`.
    ///
    /// To override the contents of this collection use [`set_include`](Self::set_include).
    ///
    /// <p>The filter conditions for emails to include.</p>
    pub fn include(mut self, input: crate::types::ArchiveFilterCondition) -> Self {
        let mut v = self.include.unwrap_or_default();
        v.push(input);
        self.include = ::std::option::Option::Some(v);
        self
    }
    /// <p>The filter conditions for emails to include.</p>
    pub fn set_include(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ArchiveFilterCondition>>) -> Self {
        self.include = input;
        self
    }
    /// <p>The filter conditions for emails to include.</p>
    pub fn get_include(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ArchiveFilterCondition>> {
        &self.include
    }
    /// Appends an item to `unless`.
    ///
    /// To override the contents of this collection use [`set_unless`](Self::set_unless).
    ///
    /// <p>The filter conditions for emails to exclude.</p>
    pub fn unless(mut self, input: crate::types::ArchiveFilterCondition) -> Self {
        let mut v = self.unless.unwrap_or_default();
        v.push(input);
        self.unless = ::std::option::Option::Some(v);
        self
    }
    /// <p>The filter conditions for emails to exclude.</p>
    pub fn set_unless(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ArchiveFilterCondition>>) -> Self {
        self.unless = input;
        self
    }
    /// <p>The filter conditions for emails to exclude.</p>
    pub fn get_unless(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ArchiveFilterCondition>> {
        &self.unless
    }
    /// Consumes the builder and constructs a [`ArchiveFilters`](crate::types::ArchiveFilters).
    pub fn build(self) -> crate::types::ArchiveFilters {
        crate::types::ArchiveFilters {
            include: self.include,
            unless: self.unless,
        }
    }
}
