// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A rule set contains a list of rules that are evaluated in order. Each rule is evaluated sequentially for each email.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleSet {
    /// <p>The identifier of the rule set.</p>
    pub rule_set_id: ::std::option::Option<::std::string::String>,
    /// <p>A user-friendly name for the rule set.</p>
    pub rule_set_name: ::std::option::Option<::std::string::String>,
    /// <p>The last modification date of the rule set.</p>
    pub last_modification_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl RuleSet {
    /// <p>The identifier of the rule set.</p>
    pub fn rule_set_id(&self) -> ::std::option::Option<&str> {
        self.rule_set_id.as_deref()
    }
    /// <p>A user-friendly name for the rule set.</p>
    pub fn rule_set_name(&self) -> ::std::option::Option<&str> {
        self.rule_set_name.as_deref()
    }
    /// <p>The last modification date of the rule set.</p>
    pub fn last_modification_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modification_date.as_ref()
    }
}
impl RuleSet {
    /// Creates a new builder-style object to manufacture [`RuleSet`](crate::types::RuleSet).
    pub fn builder() -> crate::types::builders::RuleSetBuilder {
        crate::types::builders::RuleSetBuilder::default()
    }
}

/// A builder for [`RuleSet`](crate::types::RuleSet).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuleSetBuilder {
    pub(crate) rule_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) rule_set_name: ::std::option::Option<::std::string::String>,
    pub(crate) last_modification_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl RuleSetBuilder {
    /// <p>The identifier of the rule set.</p>
    pub fn rule_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the rule set.</p>
    pub fn set_rule_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_set_id = input;
        self
    }
    /// <p>The identifier of the rule set.</p>
    pub fn get_rule_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_set_id
    }
    /// <p>A user-friendly name for the rule set.</p>
    pub fn rule_set_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_set_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user-friendly name for the rule set.</p>
    pub fn set_rule_set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_set_name = input;
        self
    }
    /// <p>A user-friendly name for the rule set.</p>
    pub fn get_rule_set_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_set_name
    }
    /// <p>The last modification date of the rule set.</p>
    pub fn last_modification_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modification_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last modification date of the rule set.</p>
    pub fn set_last_modification_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modification_date = input;
        self
    }
    /// <p>The last modification date of the rule set.</p>
    pub fn get_last_modification_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modification_date
    }
    /// Consumes the builder and constructs a [`RuleSet`](crate::types::RuleSet).
    pub fn build(self) -> crate::types::RuleSet {
        crate::types::RuleSet {
            rule_set_id: self.rule_set_id,
            rule_set_name: self.rule_set_name,
            last_modification_date: self.last_modification_date,
        }
    }
}
