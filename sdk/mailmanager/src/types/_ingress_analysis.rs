// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Add On ARN and its returned value that is evaluated in a policy statement's conditional expression to either deny or block the incoming email.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IngressAnalysis {
    /// <p>The Amazon Resource Name (ARN) of an Add On.</p>
    pub analyzer: ::std::string::String,
    /// <p>The returned value from an Add On.</p>
    pub result_field: ::std::string::String,
}
impl IngressAnalysis {
    /// <p>The Amazon Resource Name (ARN) of an Add On.</p>
    pub fn analyzer(&self) -> &str {
        use std::ops::Deref;
        self.analyzer.deref()
    }
    /// <p>The returned value from an Add On.</p>
    pub fn result_field(&self) -> &str {
        use std::ops::Deref;
        self.result_field.deref()
    }
}
impl IngressAnalysis {
    /// Creates a new builder-style object to manufacture [`IngressAnalysis`](crate::types::IngressAnalysis).
    pub fn builder() -> crate::types::builders::IngressAnalysisBuilder {
        crate::types::builders::IngressAnalysisBuilder::default()
    }
}

/// A builder for [`IngressAnalysis`](crate::types::IngressAnalysis).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IngressAnalysisBuilder {
    pub(crate) analyzer: ::std::option::Option<::std::string::String>,
    pub(crate) result_field: ::std::option::Option<::std::string::String>,
}
impl IngressAnalysisBuilder {
    /// <p>The Amazon Resource Name (ARN) of an Add On.</p>
    /// This field is required.
    pub fn analyzer(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.analyzer = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an Add On.</p>
    pub fn set_analyzer(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.analyzer = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an Add On.</p>
    pub fn get_analyzer(&self) -> &::std::option::Option<::std::string::String> {
        &self.analyzer
    }
    /// <p>The returned value from an Add On.</p>
    /// This field is required.
    pub fn result_field(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.result_field = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The returned value from an Add On.</p>
    pub fn set_result_field(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.result_field = input;
        self
    }
    /// <p>The returned value from an Add On.</p>
    pub fn get_result_field(&self) -> &::std::option::Option<::std::string::String> {
        &self.result_field
    }
    /// Consumes the builder and constructs a [`IngressAnalysis`](crate::types::IngressAnalysis).
    /// This method will fail if any of the following fields are not set:
    /// - [`analyzer`](crate::types::builders::IngressAnalysisBuilder::analyzer)
    /// - [`result_field`](crate::types::builders::IngressAnalysisBuilder::result_field)
    pub fn build(self) -> ::std::result::Result<crate::types::IngressAnalysis, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IngressAnalysis {
            analyzer: self.analyzer.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "analyzer",
                    "analyzer was not specified but it is required when building IngressAnalysis",
                )
            })?,
            result_field: self.result_field.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "result_field",
                    "result_field was not specified but it is required when building IngressAnalysis",
                )
            })?,
        })
    }
}
