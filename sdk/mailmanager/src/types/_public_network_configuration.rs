// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the network configuration for the public ingress point.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PublicNetworkConfiguration {
    /// <p>The IP address type for the public ingress point. Valid values are IPV4 and DUAL_STACK.</p>
    pub ip_type: crate::types::IpType,
}
impl PublicNetworkConfiguration {
    /// <p>The IP address type for the public ingress point. Valid values are IPV4 and DUAL_STACK.</p>
    pub fn ip_type(&self) -> &crate::types::IpType {
        &self.ip_type
    }
}
impl PublicNetworkConfiguration {
    /// Creates a new builder-style object to manufacture [`PublicNetworkConfiguration`](crate::types::PublicNetworkConfiguration).
    pub fn builder() -> crate::types::builders::PublicNetworkConfigurationBuilder {
        crate::types::builders::PublicNetworkConfigurationBuilder::default()
    }
}

/// A builder for [`PublicNetworkConfiguration`](crate::types::PublicNetworkConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PublicNetworkConfigurationBuilder {
    pub(crate) ip_type: ::std::option::Option<crate::types::IpType>,
}
impl PublicNetworkConfigurationBuilder {
    /// <p>The IP address type for the public ingress point. Valid values are IPV4 and DUAL_STACK.</p>
    /// This field is required.
    pub fn ip_type(mut self, input: crate::types::IpType) -> Self {
        self.ip_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The IP address type for the public ingress point. Valid values are IPV4 and DUAL_STACK.</p>
    pub fn set_ip_type(mut self, input: ::std::option::Option<crate::types::IpType>) -> Self {
        self.ip_type = input;
        self
    }
    /// <p>The IP address type for the public ingress point. Valid values are IPV4 and DUAL_STACK.</p>
    pub fn get_ip_type(&self) -> &::std::option::Option<crate::types::IpType> {
        &self.ip_type
    }
    /// Consumes the builder and constructs a [`PublicNetworkConfiguration`](crate::types::PublicNetworkConfiguration).
    pub fn build(self) -> crate::types::PublicNetworkConfiguration {
        crate::types::PublicNetworkConfiguration {
            ip_type: self
                .ip_type
                .unwrap_or("IPV4".parse::<crate::types::IpType>().expect("static value validated to member")),
        }
    }
}
