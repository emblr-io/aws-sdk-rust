// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This action replaces the email envelope recipients with the given list of recipients. If the condition of this action applies only to a subset of recipients, only those recipients are replaced with the recipients specified in the action. The message contents and headers are unaffected by this action, only the envelope recipients are updated.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReplaceRecipientAction {
    /// <p>This action specifies the replacement recipient email addresses to insert.</p>
    pub replace_with: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ReplaceRecipientAction {
    /// <p>This action specifies the replacement recipient email addresses to insert.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.replace_with.is_none()`.
    pub fn replace_with(&self) -> &[::std::string::String] {
        self.replace_with.as_deref().unwrap_or_default()
    }
}
impl ReplaceRecipientAction {
    /// Creates a new builder-style object to manufacture [`ReplaceRecipientAction`](crate::types::ReplaceRecipientAction).
    pub fn builder() -> crate::types::builders::ReplaceRecipientActionBuilder {
        crate::types::builders::ReplaceRecipientActionBuilder::default()
    }
}

/// A builder for [`ReplaceRecipientAction`](crate::types::ReplaceRecipientAction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ReplaceRecipientActionBuilder {
    pub(crate) replace_with: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ReplaceRecipientActionBuilder {
    /// Appends an item to `replace_with`.
    ///
    /// To override the contents of this collection use [`set_replace_with`](Self::set_replace_with).
    ///
    /// <p>This action specifies the replacement recipient email addresses to insert.</p>
    pub fn replace_with(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.replace_with.unwrap_or_default();
        v.push(input.into());
        self.replace_with = ::std::option::Option::Some(v);
        self
    }
    /// <p>This action specifies the replacement recipient email addresses to insert.</p>
    pub fn set_replace_with(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.replace_with = input;
        self
    }
    /// <p>This action specifies the replacement recipient email addresses to insert.</p>
    pub fn get_replace_with(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.replace_with
    }
    /// Consumes the builder and constructs a [`ReplaceRecipientAction`](crate::types::ReplaceRecipientAction).
    pub fn build(self) -> crate::types::ReplaceRecipientAction {
        crate::types::ReplaceRecipientAction {
            replace_with: self.replace_with,
        }
    }
}
