// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The action relays the email via SMTP to another specific SMTP server.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RelayAction {
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, the specified relay has been deleted.</p>
    pub action_failure_policy: ::std::option::Option<crate::types::ActionFailurePolicy>,
    /// <p>The identifier of the relay resource to be used when relaying an email.</p>
    pub relay: ::std::string::String,
    /// <p>This action specifies whether to preserve or replace original mail from address while relaying received emails to a destination server.</p>
    pub mail_from: ::std::option::Option<crate::types::MailFrom>,
}
impl RelayAction {
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, the specified relay has been deleted.</p>
    pub fn action_failure_policy(&self) -> ::std::option::Option<&crate::types::ActionFailurePolicy> {
        self.action_failure_policy.as_ref()
    }
    /// <p>The identifier of the relay resource to be used when relaying an email.</p>
    pub fn relay(&self) -> &str {
        use std::ops::Deref;
        self.relay.deref()
    }
    /// <p>This action specifies whether to preserve or replace original mail from address while relaying received emails to a destination server.</p>
    pub fn mail_from(&self) -> ::std::option::Option<&crate::types::MailFrom> {
        self.mail_from.as_ref()
    }
}
impl RelayAction {
    /// Creates a new builder-style object to manufacture [`RelayAction`](crate::types::RelayAction).
    pub fn builder() -> crate::types::builders::RelayActionBuilder {
        crate::types::builders::RelayActionBuilder::default()
    }
}

/// A builder for [`RelayAction`](crate::types::RelayAction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RelayActionBuilder {
    pub(crate) action_failure_policy: ::std::option::Option<crate::types::ActionFailurePolicy>,
    pub(crate) relay: ::std::option::Option<::std::string::String>,
    pub(crate) mail_from: ::std::option::Option<crate::types::MailFrom>,
}
impl RelayActionBuilder {
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, the specified relay has been deleted.</p>
    pub fn action_failure_policy(mut self, input: crate::types::ActionFailurePolicy) -> Self {
        self.action_failure_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, the specified relay has been deleted.</p>
    pub fn set_action_failure_policy(mut self, input: ::std::option::Option<crate::types::ActionFailurePolicy>) -> Self {
        self.action_failure_policy = input;
        self
    }
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, the specified relay has been deleted.</p>
    pub fn get_action_failure_policy(&self) -> &::std::option::Option<crate::types::ActionFailurePolicy> {
        &self.action_failure_policy
    }
    /// <p>The identifier of the relay resource to be used when relaying an email.</p>
    /// This field is required.
    pub fn relay(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.relay = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the relay resource to be used when relaying an email.</p>
    pub fn set_relay(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.relay = input;
        self
    }
    /// <p>The identifier of the relay resource to be used when relaying an email.</p>
    pub fn get_relay(&self) -> &::std::option::Option<::std::string::String> {
        &self.relay
    }
    /// <p>This action specifies whether to preserve or replace original mail from address while relaying received emails to a destination server.</p>
    pub fn mail_from(mut self, input: crate::types::MailFrom) -> Self {
        self.mail_from = ::std::option::Option::Some(input);
        self
    }
    /// <p>This action specifies whether to preserve or replace original mail from address while relaying received emails to a destination server.</p>
    pub fn set_mail_from(mut self, input: ::std::option::Option<crate::types::MailFrom>) -> Self {
        self.mail_from = input;
        self
    }
    /// <p>This action specifies whether to preserve or replace original mail from address while relaying received emails to a destination server.</p>
    pub fn get_mail_from(&self) -> &::std::option::Option<crate::types::MailFrom> {
        &self.mail_from
    }
    /// Consumes the builder and constructs a [`RelayAction`](crate::types::RelayAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`relay`](crate::types::builders::RelayActionBuilder::relay)
    pub fn build(self) -> ::std::result::Result<crate::types::RelayAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RelayAction {
            action_failure_policy: self.action_failure_policy,
            relay: self.relay.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "relay",
                    "relay was not specified but it is required when building RelayAction",
                )
            })?,
            mail_from: self.mail_from,
        })
    }
}
