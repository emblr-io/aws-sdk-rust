// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The action to archive the email by delivering the email to an Amazon SES archive.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ArchiveAction {
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, the specified archive has been deleted.</p>
    pub action_failure_policy: ::std::option::Option<crate::types::ActionFailurePolicy>,
    /// <p>The identifier of the archive to send the email to.</p>
    pub target_archive: ::std::string::String,
}
impl ArchiveAction {
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, the specified archive has been deleted.</p>
    pub fn action_failure_policy(&self) -> ::std::option::Option<&crate::types::ActionFailurePolicy> {
        self.action_failure_policy.as_ref()
    }
    /// <p>The identifier of the archive to send the email to.</p>
    pub fn target_archive(&self) -> &str {
        use std::ops::Deref;
        self.target_archive.deref()
    }
}
impl ArchiveAction {
    /// Creates a new builder-style object to manufacture [`ArchiveAction`](crate::types::ArchiveAction).
    pub fn builder() -> crate::types::builders::ArchiveActionBuilder {
        crate::types::builders::ArchiveActionBuilder::default()
    }
}

/// A builder for [`ArchiveAction`](crate::types::ArchiveAction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ArchiveActionBuilder {
    pub(crate) action_failure_policy: ::std::option::Option<crate::types::ActionFailurePolicy>,
    pub(crate) target_archive: ::std::option::Option<::std::string::String>,
}
impl ArchiveActionBuilder {
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, the specified archive has been deleted.</p>
    pub fn action_failure_policy(mut self, input: crate::types::ActionFailurePolicy) -> Self {
        self.action_failure_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, the specified archive has been deleted.</p>
    pub fn set_action_failure_policy(mut self, input: ::std::option::Option<crate::types::ActionFailurePolicy>) -> Self {
        self.action_failure_policy = input;
        self
    }
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, the specified archive has been deleted.</p>
    pub fn get_action_failure_policy(&self) -> &::std::option::Option<crate::types::ActionFailurePolicy> {
        &self.action_failure_policy
    }
    /// <p>The identifier of the archive to send the email to.</p>
    /// This field is required.
    pub fn target_archive(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_archive = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the archive to send the email to.</p>
    pub fn set_target_archive(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_archive = input;
        self
    }
    /// <p>The identifier of the archive to send the email to.</p>
    pub fn get_target_archive(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_archive
    }
    /// Consumes the builder and constructs a [`ArchiveAction`](crate::types::ArchiveAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`target_archive`](crate::types::builders::ArchiveActionBuilder::target_archive)
    pub fn build(self) -> ::std::result::Result<crate::types::ArchiveAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ArchiveAction {
            action_failure_policy: self.action_failure_policy,
            target_archive: self.target_archive.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target_archive",
                    "target_archive was not specified but it is required when building ArchiveAction",
                )
            })?,
        })
    }
}
