// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The conditional expression used to evaluate an email for determining if a rule action should be taken.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum RuleCondition {
    /// <p>The condition applies to a boolean expression passed in this field.</p>
    BooleanExpression(crate::types::RuleBooleanExpression),
    /// <p>The condition applies to a DMARC policy expression passed in this field.</p>
    DmarcExpression(crate::types::RuleDmarcExpression),
    /// <p>The condition applies to an IP address expression passed in this field.</p>
    IpExpression(crate::types::RuleIpExpression),
    /// <p>The condition applies to a number expression passed in this field.</p>
    NumberExpression(crate::types::RuleNumberExpression),
    /// <p>The condition applies to a string expression passed in this field.</p>
    StringExpression(crate::types::RuleStringExpression),
    /// <p>The condition applies to a verdict expression passed in this field.</p>
    VerdictExpression(crate::types::RuleVerdictExpression),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl RuleCondition {
    /// Tries to convert the enum instance into [`BooleanExpression`](crate::types::RuleCondition::BooleanExpression), extracting the inner [`RuleBooleanExpression`](crate::types::RuleBooleanExpression).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_boolean_expression(&self) -> ::std::result::Result<&crate::types::RuleBooleanExpression, &Self> {
        if let RuleCondition::BooleanExpression(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`BooleanExpression`](crate::types::RuleCondition::BooleanExpression).
    pub fn is_boolean_expression(&self) -> bool {
        self.as_boolean_expression().is_ok()
    }
    /// Tries to convert the enum instance into [`DmarcExpression`](crate::types::RuleCondition::DmarcExpression), extracting the inner [`RuleDmarcExpression`](crate::types::RuleDmarcExpression).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_dmarc_expression(&self) -> ::std::result::Result<&crate::types::RuleDmarcExpression, &Self> {
        if let RuleCondition::DmarcExpression(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`DmarcExpression`](crate::types::RuleCondition::DmarcExpression).
    pub fn is_dmarc_expression(&self) -> bool {
        self.as_dmarc_expression().is_ok()
    }
    /// Tries to convert the enum instance into [`IpExpression`](crate::types::RuleCondition::IpExpression), extracting the inner [`RuleIpExpression`](crate::types::RuleIpExpression).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_ip_expression(&self) -> ::std::result::Result<&crate::types::RuleIpExpression, &Self> {
        if let RuleCondition::IpExpression(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`IpExpression`](crate::types::RuleCondition::IpExpression).
    pub fn is_ip_expression(&self) -> bool {
        self.as_ip_expression().is_ok()
    }
    /// Tries to convert the enum instance into [`NumberExpression`](crate::types::RuleCondition::NumberExpression), extracting the inner [`RuleNumberExpression`](crate::types::RuleNumberExpression).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_number_expression(&self) -> ::std::result::Result<&crate::types::RuleNumberExpression, &Self> {
        if let RuleCondition::NumberExpression(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`NumberExpression`](crate::types::RuleCondition::NumberExpression).
    pub fn is_number_expression(&self) -> bool {
        self.as_number_expression().is_ok()
    }
    /// Tries to convert the enum instance into [`StringExpression`](crate::types::RuleCondition::StringExpression), extracting the inner [`RuleStringExpression`](crate::types::RuleStringExpression).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_string_expression(&self) -> ::std::result::Result<&crate::types::RuleStringExpression, &Self> {
        if let RuleCondition::StringExpression(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`StringExpression`](crate::types::RuleCondition::StringExpression).
    pub fn is_string_expression(&self) -> bool {
        self.as_string_expression().is_ok()
    }
    /// Tries to convert the enum instance into [`VerdictExpression`](crate::types::RuleCondition::VerdictExpression), extracting the inner [`RuleVerdictExpression`](crate::types::RuleVerdictExpression).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_verdict_expression(&self) -> ::std::result::Result<&crate::types::RuleVerdictExpression, &Self> {
        if let RuleCondition::VerdictExpression(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`VerdictExpression`](crate::types::RuleCondition::VerdictExpression).
    pub fn is_verdict_expression(&self) -> bool {
        self.as_verdict_expression().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
