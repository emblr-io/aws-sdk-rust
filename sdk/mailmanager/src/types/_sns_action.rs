// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The action to publish the email content to an Amazon SNS topic. When executed, this action will send the email as a notification to the specified SNS topic.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SnsAction {
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, specified SNS topic has been deleted or the role lacks necessary permissions to call the <code>sns:Publish</code> API.</p>
    pub action_failure_policy: ::std::option::Option<crate::types::ActionFailurePolicy>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS Topic to which notification for the email received will be published.</p>
    pub topic_arn: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the IAM Role to use while writing to Amazon SNS. This role must have access to the <code>sns:Publish</code> API for the given topic.</p>
    pub role_arn: ::std::string::String,
    /// <p>The encoding to use for the email within the Amazon SNS notification. The default value is <code>UTF-8</code>. Use <code>BASE64</code> if you need to preserve all special characters, especially when the original message uses a different encoding format.</p>
    pub encoding: crate::types::SnsNotificationEncoding,
    /// <p>The expected payload type within the Amazon SNS notification. <code>CONTENT</code> attempts to publish the full email content with 20KB of headers content. <code>HEADERS</code> extracts up to 100KB of header content to include in the notification, email content will not be included to the notification. The default value is <code>CONTENT</code>.</p>
    pub payload_type: crate::types::SnsNotificationPayloadType,
}
impl SnsAction {
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, specified SNS topic has been deleted or the role lacks necessary permissions to call the <code>sns:Publish</code> API.</p>
    pub fn action_failure_policy(&self) -> ::std::option::Option<&crate::types::ActionFailurePolicy> {
        self.action_failure_policy.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS Topic to which notification for the email received will be published.</p>
    pub fn topic_arn(&self) -> &str {
        use std::ops::Deref;
        self.topic_arn.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM Role to use while writing to Amazon SNS. This role must have access to the <code>sns:Publish</code> API for the given topic.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>The encoding to use for the email within the Amazon SNS notification. The default value is <code>UTF-8</code>. Use <code>BASE64</code> if you need to preserve all special characters, especially when the original message uses a different encoding format.</p>
    pub fn encoding(&self) -> &crate::types::SnsNotificationEncoding {
        &self.encoding
    }
    /// <p>The expected payload type within the Amazon SNS notification. <code>CONTENT</code> attempts to publish the full email content with 20KB of headers content. <code>HEADERS</code> extracts up to 100KB of header content to include in the notification, email content will not be included to the notification. The default value is <code>CONTENT</code>.</p>
    pub fn payload_type(&self) -> &crate::types::SnsNotificationPayloadType {
        &self.payload_type
    }
}
impl SnsAction {
    /// Creates a new builder-style object to manufacture [`SnsAction`](crate::types::SnsAction).
    pub fn builder() -> crate::types::builders::SnsActionBuilder {
        crate::types::builders::SnsActionBuilder::default()
    }
}

/// A builder for [`SnsAction`](crate::types::SnsAction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SnsActionBuilder {
    pub(crate) action_failure_policy: ::std::option::Option<crate::types::ActionFailurePolicy>,
    pub(crate) topic_arn: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) encoding: ::std::option::Option<crate::types::SnsNotificationEncoding>,
    pub(crate) payload_type: ::std::option::Option<crate::types::SnsNotificationPayloadType>,
}
impl SnsActionBuilder {
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, specified SNS topic has been deleted or the role lacks necessary permissions to call the <code>sns:Publish</code> API.</p>
    pub fn action_failure_policy(mut self, input: crate::types::ActionFailurePolicy) -> Self {
        self.action_failure_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, specified SNS topic has been deleted or the role lacks necessary permissions to call the <code>sns:Publish</code> API.</p>
    pub fn set_action_failure_policy(mut self, input: ::std::option::Option<crate::types::ActionFailurePolicy>) -> Self {
        self.action_failure_policy = input;
        self
    }
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, specified SNS topic has been deleted or the role lacks necessary permissions to call the <code>sns:Publish</code> API.</p>
    pub fn get_action_failure_policy(&self) -> &::std::option::Option<crate::types::ActionFailurePolicy> {
        &self.action_failure_policy
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS Topic to which notification for the email received will be published.</p>
    /// This field is required.
    pub fn topic_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.topic_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS Topic to which notification for the email received will be published.</p>
    pub fn set_topic_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.topic_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS Topic to which notification for the email received will be published.</p>
    pub fn get_topic_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.topic_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM Role to use while writing to Amazon SNS. This role must have access to the <code>sns:Publish</code> API for the given topic.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM Role to use while writing to Amazon SNS. This role must have access to the <code>sns:Publish</code> API for the given topic.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM Role to use while writing to Amazon SNS. This role must have access to the <code>sns:Publish</code> API for the given topic.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The encoding to use for the email within the Amazon SNS notification. The default value is <code>UTF-8</code>. Use <code>BASE64</code> if you need to preserve all special characters, especially when the original message uses a different encoding format.</p>
    pub fn encoding(mut self, input: crate::types::SnsNotificationEncoding) -> Self {
        self.encoding = ::std::option::Option::Some(input);
        self
    }
    /// <p>The encoding to use for the email within the Amazon SNS notification. The default value is <code>UTF-8</code>. Use <code>BASE64</code> if you need to preserve all special characters, especially when the original message uses a different encoding format.</p>
    pub fn set_encoding(mut self, input: ::std::option::Option<crate::types::SnsNotificationEncoding>) -> Self {
        self.encoding = input;
        self
    }
    /// <p>The encoding to use for the email within the Amazon SNS notification. The default value is <code>UTF-8</code>. Use <code>BASE64</code> if you need to preserve all special characters, especially when the original message uses a different encoding format.</p>
    pub fn get_encoding(&self) -> &::std::option::Option<crate::types::SnsNotificationEncoding> {
        &self.encoding
    }
    /// <p>The expected payload type within the Amazon SNS notification. <code>CONTENT</code> attempts to publish the full email content with 20KB of headers content. <code>HEADERS</code> extracts up to 100KB of header content to include in the notification, email content will not be included to the notification. The default value is <code>CONTENT</code>.</p>
    pub fn payload_type(mut self, input: crate::types::SnsNotificationPayloadType) -> Self {
        self.payload_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expected payload type within the Amazon SNS notification. <code>CONTENT</code> attempts to publish the full email content with 20KB of headers content. <code>HEADERS</code> extracts up to 100KB of header content to include in the notification, email content will not be included to the notification. The default value is <code>CONTENT</code>.</p>
    pub fn set_payload_type(mut self, input: ::std::option::Option<crate::types::SnsNotificationPayloadType>) -> Self {
        self.payload_type = input;
        self
    }
    /// <p>The expected payload type within the Amazon SNS notification. <code>CONTENT</code> attempts to publish the full email content with 20KB of headers content. <code>HEADERS</code> extracts up to 100KB of header content to include in the notification, email content will not be included to the notification. The default value is <code>CONTENT</code>.</p>
    pub fn get_payload_type(&self) -> &::std::option::Option<crate::types::SnsNotificationPayloadType> {
        &self.payload_type
    }
    /// Consumes the builder and constructs a [`SnsAction`](crate::types::SnsAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`topic_arn`](crate::types::builders::SnsActionBuilder::topic_arn)
    /// - [`role_arn`](crate::types::builders::SnsActionBuilder::role_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::SnsAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SnsAction {
            action_failure_policy: self.action_failure_policy,
            topic_arn: self.topic_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "topic_arn",
                    "topic_arn was not specified but it is required when building SnsAction",
                )
            })?,
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building SnsAction",
                )
            })?,
            encoding: self.encoding.unwrap_or(
                "UTF-8"
                    .parse::<crate::types::SnsNotificationEncoding>()
                    .expect("static value validated to member"),
            ),
            payload_type: self.payload_type.unwrap_or(
                "CONTENT"
                    .parse::<crate::types::SnsNotificationPayloadType>()
                    .expect("static value validated to member"),
            ),
        })
    }
}
