// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A verdict expression is evaluated against verdicts of the email.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleVerdictExpression {
    /// <p>The verdict to evaluate in a verdict condition expression.</p>
    pub evaluate: ::std::option::Option<crate::types::RuleVerdictToEvaluate>,
    /// <p>The matching operator for a verdict condition expression.</p>
    pub operator: crate::types::RuleVerdictOperator,
    /// <p>The values to match with the email's verdict using the given operator. For the EQUALS operator, if multiple values are given, the condition is deemed to match if any of the given verdicts match that of the email. For the NOT_EQUALS operator, if multiple values are given, the condition is deemed to match of none of the given verdicts match the verdict of the email.</p>
    pub values: ::std::vec::Vec<crate::types::RuleVerdict>,
}
impl RuleVerdictExpression {
    /// <p>The verdict to evaluate in a verdict condition expression.</p>
    pub fn evaluate(&self) -> ::std::option::Option<&crate::types::RuleVerdictToEvaluate> {
        self.evaluate.as_ref()
    }
    /// <p>The matching operator for a verdict condition expression.</p>
    pub fn operator(&self) -> &crate::types::RuleVerdictOperator {
        &self.operator
    }
    /// <p>The values to match with the email's verdict using the given operator. For the EQUALS operator, if multiple values are given, the condition is deemed to match if any of the given verdicts match that of the email. For the NOT_EQUALS operator, if multiple values are given, the condition is deemed to match of none of the given verdicts match the verdict of the email.</p>
    pub fn values(&self) -> &[crate::types::RuleVerdict] {
        use std::ops::Deref;
        self.values.deref()
    }
}
impl RuleVerdictExpression {
    /// Creates a new builder-style object to manufacture [`RuleVerdictExpression`](crate::types::RuleVerdictExpression).
    pub fn builder() -> crate::types::builders::RuleVerdictExpressionBuilder {
        crate::types::builders::RuleVerdictExpressionBuilder::default()
    }
}

/// A builder for [`RuleVerdictExpression`](crate::types::RuleVerdictExpression).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuleVerdictExpressionBuilder {
    pub(crate) evaluate: ::std::option::Option<crate::types::RuleVerdictToEvaluate>,
    pub(crate) operator: ::std::option::Option<crate::types::RuleVerdictOperator>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<crate::types::RuleVerdict>>,
}
impl RuleVerdictExpressionBuilder {
    /// <p>The verdict to evaluate in a verdict condition expression.</p>
    /// This field is required.
    pub fn evaluate(mut self, input: crate::types::RuleVerdictToEvaluate) -> Self {
        self.evaluate = ::std::option::Option::Some(input);
        self
    }
    /// <p>The verdict to evaluate in a verdict condition expression.</p>
    pub fn set_evaluate(mut self, input: ::std::option::Option<crate::types::RuleVerdictToEvaluate>) -> Self {
        self.evaluate = input;
        self
    }
    /// <p>The verdict to evaluate in a verdict condition expression.</p>
    pub fn get_evaluate(&self) -> &::std::option::Option<crate::types::RuleVerdictToEvaluate> {
        &self.evaluate
    }
    /// <p>The matching operator for a verdict condition expression.</p>
    /// This field is required.
    pub fn operator(mut self, input: crate::types::RuleVerdictOperator) -> Self {
        self.operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The matching operator for a verdict condition expression.</p>
    pub fn set_operator(mut self, input: ::std::option::Option<crate::types::RuleVerdictOperator>) -> Self {
        self.operator = input;
        self
    }
    /// <p>The matching operator for a verdict condition expression.</p>
    pub fn get_operator(&self) -> &::std::option::Option<crate::types::RuleVerdictOperator> {
        &self.operator
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The values to match with the email's verdict using the given operator. For the EQUALS operator, if multiple values are given, the condition is deemed to match if any of the given verdicts match that of the email. For the NOT_EQUALS operator, if multiple values are given, the condition is deemed to match of none of the given verdicts match the verdict of the email.</p>
    pub fn values(mut self, input: crate::types::RuleVerdict) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input);
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The values to match with the email's verdict using the given operator. For the EQUALS operator, if multiple values are given, the condition is deemed to match if any of the given verdicts match that of the email. For the NOT_EQUALS operator, if multiple values are given, the condition is deemed to match of none of the given verdicts match the verdict of the email.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RuleVerdict>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The values to match with the email's verdict using the given operator. For the EQUALS operator, if multiple values are given, the condition is deemed to match if any of the given verdicts match that of the email. For the NOT_EQUALS operator, if multiple values are given, the condition is deemed to match of none of the given verdicts match the verdict of the email.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RuleVerdict>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`RuleVerdictExpression`](crate::types::RuleVerdictExpression).
    /// This method will fail if any of the following fields are not set:
    /// - [`operator`](crate::types::builders::RuleVerdictExpressionBuilder::operator)
    /// - [`values`](crate::types::builders::RuleVerdictExpressionBuilder::values)
    pub fn build(self) -> ::std::result::Result<crate::types::RuleVerdictExpression, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RuleVerdictExpression {
            evaluate: self.evaluate,
            operator: self.operator.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operator",
                    "operator was not specified but it is required when building RuleVerdictExpression",
                )
            })?,
            values: self.values.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "values",
                    "values was not specified but it is required when building RuleVerdictExpression",
                )
            })?,
        })
    }
}
