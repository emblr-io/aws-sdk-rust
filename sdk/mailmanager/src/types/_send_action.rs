// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Sends the email to the internet using the ses:SendRawEmail API.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SendAction {
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, the caller does not have the permissions to call the sendRawEmail API.</p>
    pub action_failure_policy: ::std::option::Option<crate::types::ActionFailurePolicy>,
    /// <p>The Amazon Resource Name (ARN) of the role to use for this action. This role must have access to the ses:SendRawEmail API.</p>
    pub role_arn: ::std::string::String,
}
impl SendAction {
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, the caller does not have the permissions to call the sendRawEmail API.</p>
    pub fn action_failure_policy(&self) -> ::std::option::Option<&crate::types::ActionFailurePolicy> {
        self.action_failure_policy.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the role to use for this action. This role must have access to the ses:SendRawEmail API.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
}
impl SendAction {
    /// Creates a new builder-style object to manufacture [`SendAction`](crate::types::SendAction).
    pub fn builder() -> crate::types::builders::SendActionBuilder {
        crate::types::builders::SendActionBuilder::default()
    }
}

/// A builder for [`SendAction`](crate::types::SendAction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SendActionBuilder {
    pub(crate) action_failure_policy: ::std::option::Option<crate::types::ActionFailurePolicy>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
}
impl SendActionBuilder {
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, the caller does not have the permissions to call the sendRawEmail API.</p>
    pub fn action_failure_policy(mut self, input: crate::types::ActionFailurePolicy) -> Self {
        self.action_failure_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, the caller does not have the permissions to call the sendRawEmail API.</p>
    pub fn set_action_failure_policy(mut self, input: ::std::option::Option<crate::types::ActionFailurePolicy>) -> Self {
        self.action_failure_policy = input;
        self
    }
    /// <p>A policy that states what to do in the case of failure. The action will fail if there are configuration errors. For example, the caller does not have the permissions to call the sendRawEmail API.</p>
    pub fn get_action_failure_policy(&self) -> &::std::option::Option<crate::types::ActionFailurePolicy> {
        &self.action_failure_policy
    }
    /// <p>The Amazon Resource Name (ARN) of the role to use for this action. This role must have access to the ses:SendRawEmail API.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role to use for this action. This role must have access to the ses:SendRawEmail API.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role to use for this action. This role must have access to the ses:SendRawEmail API.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Consumes the builder and constructs a [`SendAction`](crate::types::SendAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`role_arn`](crate::types::builders::SendActionBuilder::role_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::SendAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SendAction {
            action_failure_policy: self.action_failure_policy,
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building SendAction",
                )
            })?,
        })
    }
}
