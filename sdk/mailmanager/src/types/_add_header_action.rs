// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The action to add a header to a message. When executed, this action will add the given header to the message.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AddHeaderAction {
    /// <p>The name of the header to add to an email. The header must be prefixed with "X-". Headers are added regardless of whether the header name pre-existed in the email.</p>
    pub header_name: ::std::string::String,
    /// <p>The value of the header to add to the email.</p>
    pub header_value: ::std::string::String,
}
impl AddHeaderAction {
    /// <p>The name of the header to add to an email. The header must be prefixed with "X-". Headers are added regardless of whether the header name pre-existed in the email.</p>
    pub fn header_name(&self) -> &str {
        use std::ops::Deref;
        self.header_name.deref()
    }
    /// <p>The value of the header to add to the email.</p>
    pub fn header_value(&self) -> &str {
        use std::ops::Deref;
        self.header_value.deref()
    }
}
impl AddHeaderAction {
    /// Creates a new builder-style object to manufacture [`AddHeaderAction`](crate::types::AddHeaderAction).
    pub fn builder() -> crate::types::builders::AddHeaderActionBuilder {
        crate::types::builders::AddHeaderActionBuilder::default()
    }
}

/// A builder for [`AddHeaderAction`](crate::types::AddHeaderAction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AddHeaderActionBuilder {
    pub(crate) header_name: ::std::option::Option<::std::string::String>,
    pub(crate) header_value: ::std::option::Option<::std::string::String>,
}
impl AddHeaderActionBuilder {
    /// <p>The name of the header to add to an email. The header must be prefixed with "X-". Headers are added regardless of whether the header name pre-existed in the email.</p>
    /// This field is required.
    pub fn header_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.header_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the header to add to an email. The header must be prefixed with "X-". Headers are added regardless of whether the header name pre-existed in the email.</p>
    pub fn set_header_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.header_name = input;
        self
    }
    /// <p>The name of the header to add to an email. The header must be prefixed with "X-". Headers are added regardless of whether the header name pre-existed in the email.</p>
    pub fn get_header_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.header_name
    }
    /// <p>The value of the header to add to the email.</p>
    /// This field is required.
    pub fn header_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.header_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the header to add to the email.</p>
    pub fn set_header_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.header_value = input;
        self
    }
    /// <p>The value of the header to add to the email.</p>
    pub fn get_header_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.header_value
    }
    /// Consumes the builder and constructs a [`AddHeaderAction`](crate::types::AddHeaderAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`header_name`](crate::types::builders::AddHeaderActionBuilder::header_name)
    /// - [`header_value`](crate::types::builders::AddHeaderActionBuilder::header_value)
    pub fn build(self) -> ::std::result::Result<crate::types::AddHeaderAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AddHeaderAction {
            header_name: self.header_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "header_name",
                    "header_name was not specified but it is required when building AddHeaderAction",
                )
            })?,
            header_value: self.header_value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "header_value",
                    "header_value was not specified but it is required when building AddHeaderAction",
                )
            })?,
        })
    }
}
