// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A subscription for an Add On representing the acceptance of its terms of use and additional pricing.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AddonSubscription {
    /// <p>The unique ID of the Add On subscription.</p>
    pub addon_subscription_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Add On.</p>
    pub addon_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Add On subscription.</p>
    pub addon_subscription_arn: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of when the Add On subscription was created.</p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl AddonSubscription {
    /// <p>The unique ID of the Add On subscription.</p>
    pub fn addon_subscription_id(&self) -> ::std::option::Option<&str> {
        self.addon_subscription_id.as_deref()
    }
    /// <p>The name of the Add On.</p>
    pub fn addon_name(&self) -> ::std::option::Option<&str> {
        self.addon_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Add On subscription.</p>
    pub fn addon_subscription_arn(&self) -> ::std::option::Option<&str> {
        self.addon_subscription_arn.as_deref()
    }
    /// <p>The timestamp of when the Add On subscription was created.</p>
    pub fn created_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
}
impl AddonSubscription {
    /// Creates a new builder-style object to manufacture [`AddonSubscription`](crate::types::AddonSubscription).
    pub fn builder() -> crate::types::builders::AddonSubscriptionBuilder {
        crate::types::builders::AddonSubscriptionBuilder::default()
    }
}

/// A builder for [`AddonSubscription`](crate::types::AddonSubscription).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AddonSubscriptionBuilder {
    pub(crate) addon_subscription_id: ::std::option::Option<::std::string::String>,
    pub(crate) addon_name: ::std::option::Option<::std::string::String>,
    pub(crate) addon_subscription_arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl AddonSubscriptionBuilder {
    /// <p>The unique ID of the Add On subscription.</p>
    pub fn addon_subscription_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.addon_subscription_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the Add On subscription.</p>
    pub fn set_addon_subscription_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.addon_subscription_id = input;
        self
    }
    /// <p>The unique ID of the Add On subscription.</p>
    pub fn get_addon_subscription_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.addon_subscription_id
    }
    /// <p>The name of the Add On.</p>
    pub fn addon_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.addon_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Add On.</p>
    pub fn set_addon_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.addon_name = input;
        self
    }
    /// <p>The name of the Add On.</p>
    pub fn get_addon_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.addon_name
    }
    /// <p>The Amazon Resource Name (ARN) of the Add On subscription.</p>
    pub fn addon_subscription_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.addon_subscription_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Add On subscription.</p>
    pub fn set_addon_subscription_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.addon_subscription_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Add On subscription.</p>
    pub fn get_addon_subscription_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.addon_subscription_arn
    }
    /// <p>The timestamp of when the Add On subscription was created.</p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the Add On subscription was created.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The timestamp of when the Add On subscription was created.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    /// Consumes the builder and constructs a [`AddonSubscription`](crate::types::AddonSubscription).
    pub fn build(self) -> crate::types::AddonSubscription {
        crate::types::AddonSubscription {
            addon_subscription_id: self.addon_subscription_id,
            addon_name: self.addon_name,
            addon_subscription_arn: self.addon_subscription_arn,
            created_timestamp: self.created_timestamp,
        }
    }
}
