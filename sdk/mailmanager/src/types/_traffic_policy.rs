// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure of a traffic policy resource which is a container for policy statements.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TrafficPolicy {
    /// <p>A user-friendly name of the traffic policy resource.</p>
    pub traffic_policy_name: ::std::string::String,
    /// <p>The identifier of the traffic policy resource.</p>
    pub traffic_policy_id: ::std::string::String,
    /// <p>Default action instructs the traﬃc policy to either Allow or Deny (block) messages that fall outside of (or not addressed by) the conditions of your policy statements</p>
    pub default_action: crate::types::AcceptAction,
}
impl TrafficPolicy {
    /// <p>A user-friendly name of the traffic policy resource.</p>
    pub fn traffic_policy_name(&self) -> &str {
        use std::ops::Deref;
        self.traffic_policy_name.deref()
    }
    /// <p>The identifier of the traffic policy resource.</p>
    pub fn traffic_policy_id(&self) -> &str {
        use std::ops::Deref;
        self.traffic_policy_id.deref()
    }
    /// <p>Default action instructs the traﬃc policy to either Allow or Deny (block) messages that fall outside of (or not addressed by) the conditions of your policy statements</p>
    pub fn default_action(&self) -> &crate::types::AcceptAction {
        &self.default_action
    }
}
impl TrafficPolicy {
    /// Creates a new builder-style object to manufacture [`TrafficPolicy`](crate::types::TrafficPolicy).
    pub fn builder() -> crate::types::builders::TrafficPolicyBuilder {
        crate::types::builders::TrafficPolicyBuilder::default()
    }
}

/// A builder for [`TrafficPolicy`](crate::types::TrafficPolicy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TrafficPolicyBuilder {
    pub(crate) traffic_policy_name: ::std::option::Option<::std::string::String>,
    pub(crate) traffic_policy_id: ::std::option::Option<::std::string::String>,
    pub(crate) default_action: ::std::option::Option<crate::types::AcceptAction>,
}
impl TrafficPolicyBuilder {
    /// <p>A user-friendly name of the traffic policy resource.</p>
    /// This field is required.
    pub fn traffic_policy_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.traffic_policy_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user-friendly name of the traffic policy resource.</p>
    pub fn set_traffic_policy_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.traffic_policy_name = input;
        self
    }
    /// <p>A user-friendly name of the traffic policy resource.</p>
    pub fn get_traffic_policy_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.traffic_policy_name
    }
    /// <p>The identifier of the traffic policy resource.</p>
    /// This field is required.
    pub fn traffic_policy_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.traffic_policy_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the traffic policy resource.</p>
    pub fn set_traffic_policy_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.traffic_policy_id = input;
        self
    }
    /// <p>The identifier of the traffic policy resource.</p>
    pub fn get_traffic_policy_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.traffic_policy_id
    }
    /// <p>Default action instructs the traﬃc policy to either Allow or Deny (block) messages that fall outside of (or not addressed by) the conditions of your policy statements</p>
    /// This field is required.
    pub fn default_action(mut self, input: crate::types::AcceptAction) -> Self {
        self.default_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Default action instructs the traﬃc policy to either Allow or Deny (block) messages that fall outside of (or not addressed by) the conditions of your policy statements</p>
    pub fn set_default_action(mut self, input: ::std::option::Option<crate::types::AcceptAction>) -> Self {
        self.default_action = input;
        self
    }
    /// <p>Default action instructs the traﬃc policy to either Allow or Deny (block) messages that fall outside of (or not addressed by) the conditions of your policy statements</p>
    pub fn get_default_action(&self) -> &::std::option::Option<crate::types::AcceptAction> {
        &self.default_action
    }
    /// Consumes the builder and constructs a [`TrafficPolicy`](crate::types::TrafficPolicy).
    /// This method will fail if any of the following fields are not set:
    /// - [`traffic_policy_name`](crate::types::builders::TrafficPolicyBuilder::traffic_policy_name)
    /// - [`traffic_policy_id`](crate::types::builders::TrafficPolicyBuilder::traffic_policy_id)
    /// - [`default_action`](crate::types::builders::TrafficPolicyBuilder::default_action)
    pub fn build(self) -> ::std::result::Result<crate::types::TrafficPolicy, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TrafficPolicy {
            traffic_policy_name: self.traffic_policy_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "traffic_policy_name",
                    "traffic_policy_name was not specified but it is required when building TrafficPolicy",
                )
            })?,
            traffic_policy_id: self.traffic_policy_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "traffic_policy_id",
                    "traffic_policy_id was not specified but it is required when building TrafficPolicy",
                )
            })?,
            default_action: self.default_action.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "default_action",
                    "default_action was not specified but it is required when building TrafficPolicy",
                )
            })?,
        })
    }
}
