// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The authentication configuration for the ingress endpoint resource.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IngressPointAuthConfiguration {
    /// <p>The ingress endpoint password configuration for the ingress endpoint resource.</p>
    pub ingress_point_password_configuration: ::std::option::Option<crate::types::IngressPointPasswordConfiguration>,
    /// <p>The ingress endpoint SecretsManager::Secret ARN configuration for the ingress endpoint resource.</p>
    pub secret_arn: ::std::option::Option<::std::string::String>,
}
impl IngressPointAuthConfiguration {
    /// <p>The ingress endpoint password configuration for the ingress endpoint resource.</p>
    pub fn ingress_point_password_configuration(&self) -> ::std::option::Option<&crate::types::IngressPointPasswordConfiguration> {
        self.ingress_point_password_configuration.as_ref()
    }
    /// <p>The ingress endpoint SecretsManager::Secret ARN configuration for the ingress endpoint resource.</p>
    pub fn secret_arn(&self) -> ::std::option::Option<&str> {
        self.secret_arn.as_deref()
    }
}
impl IngressPointAuthConfiguration {
    /// Creates a new builder-style object to manufacture [`IngressPointAuthConfiguration`](crate::types::IngressPointAuthConfiguration).
    pub fn builder() -> crate::types::builders::IngressPointAuthConfigurationBuilder {
        crate::types::builders::IngressPointAuthConfigurationBuilder::default()
    }
}

/// A builder for [`IngressPointAuthConfiguration`](crate::types::IngressPointAuthConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IngressPointAuthConfigurationBuilder {
    pub(crate) ingress_point_password_configuration: ::std::option::Option<crate::types::IngressPointPasswordConfiguration>,
    pub(crate) secret_arn: ::std::option::Option<::std::string::String>,
}
impl IngressPointAuthConfigurationBuilder {
    /// <p>The ingress endpoint password configuration for the ingress endpoint resource.</p>
    pub fn ingress_point_password_configuration(mut self, input: crate::types::IngressPointPasswordConfiguration) -> Self {
        self.ingress_point_password_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ingress endpoint password configuration for the ingress endpoint resource.</p>
    pub fn set_ingress_point_password_configuration(mut self, input: ::std::option::Option<crate::types::IngressPointPasswordConfiguration>) -> Self {
        self.ingress_point_password_configuration = input;
        self
    }
    /// <p>The ingress endpoint password configuration for the ingress endpoint resource.</p>
    pub fn get_ingress_point_password_configuration(&self) -> &::std::option::Option<crate::types::IngressPointPasswordConfiguration> {
        &self.ingress_point_password_configuration
    }
    /// <p>The ingress endpoint SecretsManager::Secret ARN configuration for the ingress endpoint resource.</p>
    pub fn secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ingress endpoint SecretsManager::Secret ARN configuration for the ingress endpoint resource.</p>
    pub fn set_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_arn = input;
        self
    }
    /// <p>The ingress endpoint SecretsManager::Secret ARN configuration for the ingress endpoint resource.</p>
    pub fn get_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_arn
    }
    /// Consumes the builder and constructs a [`IngressPointAuthConfiguration`](crate::types::IngressPointAuthConfiguration).
    pub fn build(self) -> crate::types::IngressPointAuthConfiguration {
        crate::types::IngressPointAuthConfiguration {
            ingress_point_password_configuration: self.ingress_point_password_configuration,
            secret_arn: self.secret_arn,
        }
    }
}
