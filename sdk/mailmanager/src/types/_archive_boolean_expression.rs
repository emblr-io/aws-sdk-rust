// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A boolean expression to evaluate email attribute values.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ArchiveBooleanExpression {
    /// <p>The email attribute value to evaluate.</p>
    pub evaluate: ::std::option::Option<crate::types::ArchiveBooleanToEvaluate>,
    /// <p>The boolean operator to use for evaluation.</p>
    pub operator: crate::types::ArchiveBooleanOperator,
}
impl ArchiveBooleanExpression {
    /// <p>The email attribute value to evaluate.</p>
    pub fn evaluate(&self) -> ::std::option::Option<&crate::types::ArchiveBooleanToEvaluate> {
        self.evaluate.as_ref()
    }
    /// <p>The boolean operator to use for evaluation.</p>
    pub fn operator(&self) -> &crate::types::ArchiveBooleanOperator {
        &self.operator
    }
}
impl ArchiveBooleanExpression {
    /// Creates a new builder-style object to manufacture [`ArchiveBooleanExpression`](crate::types::ArchiveBooleanExpression).
    pub fn builder() -> crate::types::builders::ArchiveBooleanExpressionBuilder {
        crate::types::builders::ArchiveBooleanExpressionBuilder::default()
    }
}

/// A builder for [`ArchiveBooleanExpression`](crate::types::ArchiveBooleanExpression).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ArchiveBooleanExpressionBuilder {
    pub(crate) evaluate: ::std::option::Option<crate::types::ArchiveBooleanToEvaluate>,
    pub(crate) operator: ::std::option::Option<crate::types::ArchiveBooleanOperator>,
}
impl ArchiveBooleanExpressionBuilder {
    /// <p>The email attribute value to evaluate.</p>
    /// This field is required.
    pub fn evaluate(mut self, input: crate::types::ArchiveBooleanToEvaluate) -> Self {
        self.evaluate = ::std::option::Option::Some(input);
        self
    }
    /// <p>The email attribute value to evaluate.</p>
    pub fn set_evaluate(mut self, input: ::std::option::Option<crate::types::ArchiveBooleanToEvaluate>) -> Self {
        self.evaluate = input;
        self
    }
    /// <p>The email attribute value to evaluate.</p>
    pub fn get_evaluate(&self) -> &::std::option::Option<crate::types::ArchiveBooleanToEvaluate> {
        &self.evaluate
    }
    /// <p>The boolean operator to use for evaluation.</p>
    /// This field is required.
    pub fn operator(mut self, input: crate::types::ArchiveBooleanOperator) -> Self {
        self.operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The boolean operator to use for evaluation.</p>
    pub fn set_operator(mut self, input: ::std::option::Option<crate::types::ArchiveBooleanOperator>) -> Self {
        self.operator = input;
        self
    }
    /// <p>The boolean operator to use for evaluation.</p>
    pub fn get_operator(&self) -> &::std::option::Option<crate::types::ArchiveBooleanOperator> {
        &self.operator
    }
    /// Consumes the builder and constructs a [`ArchiveBooleanExpression`](crate::types::ArchiveBooleanExpression).
    /// This method will fail if any of the following fields are not set:
    /// - [`operator`](crate::types::builders::ArchiveBooleanExpressionBuilder::operator)
    pub fn build(self) -> ::std::result::Result<crate::types::ArchiveBooleanExpression, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ArchiveBooleanExpression {
            evaluate: self.evaluate,
            operator: self.operator.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operator",
                    "operator was not specified but it is required when building ArchiveBooleanExpression",
                )
            })?,
        })
    }
}
