// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure containing traffic policy conditions and actions.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PolicyStatement {
    /// <p>The list of conditions to apply to incoming messages for filtering email traffic.</p>
    pub conditions: ::std::vec::Vec<crate::types::PolicyCondition>,
    /// <p>The action that informs a traffic policy resource to either allow or block the email if it matches a condition in the policy statement.</p>
    pub action: crate::types::AcceptAction,
}
impl PolicyStatement {
    /// <p>The list of conditions to apply to incoming messages for filtering email traffic.</p>
    pub fn conditions(&self) -> &[crate::types::PolicyCondition] {
        use std::ops::Deref;
        self.conditions.deref()
    }
    /// <p>The action that informs a traffic policy resource to either allow or block the email if it matches a condition in the policy statement.</p>
    pub fn action(&self) -> &crate::types::AcceptAction {
        &self.action
    }
}
impl PolicyStatement {
    /// Creates a new builder-style object to manufacture [`PolicyStatement`](crate::types::PolicyStatement).
    pub fn builder() -> crate::types::builders::PolicyStatementBuilder {
        crate::types::builders::PolicyStatementBuilder::default()
    }
}

/// A builder for [`PolicyStatement`](crate::types::PolicyStatement).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PolicyStatementBuilder {
    pub(crate) conditions: ::std::option::Option<::std::vec::Vec<crate::types::PolicyCondition>>,
    pub(crate) action: ::std::option::Option<crate::types::AcceptAction>,
}
impl PolicyStatementBuilder {
    /// Appends an item to `conditions`.
    ///
    /// To override the contents of this collection use [`set_conditions`](Self::set_conditions).
    ///
    /// <p>The list of conditions to apply to incoming messages for filtering email traffic.</p>
    pub fn conditions(mut self, input: crate::types::PolicyCondition) -> Self {
        let mut v = self.conditions.unwrap_or_default();
        v.push(input);
        self.conditions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of conditions to apply to incoming messages for filtering email traffic.</p>
    pub fn set_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PolicyCondition>>) -> Self {
        self.conditions = input;
        self
    }
    /// <p>The list of conditions to apply to incoming messages for filtering email traffic.</p>
    pub fn get_conditions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PolicyCondition>> {
        &self.conditions
    }
    /// <p>The action that informs a traffic policy resource to either allow or block the email if it matches a condition in the policy statement.</p>
    /// This field is required.
    pub fn action(mut self, input: crate::types::AcceptAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action that informs a traffic policy resource to either allow or block the email if it matches a condition in the policy statement.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::AcceptAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action that informs a traffic policy resource to either allow or block the email if it matches a condition in the policy statement.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::AcceptAction> {
        &self.action
    }
    /// Consumes the builder and constructs a [`PolicyStatement`](crate::types::PolicyStatement).
    /// This method will fail if any of the following fields are not set:
    /// - [`conditions`](crate::types::builders::PolicyStatementBuilder::conditions)
    /// - [`action`](crate::types::builders::PolicyStatementBuilder::action)
    pub fn build(self) -> ::std::result::Result<crate::types::PolicyStatement, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PolicyStatement {
            conditions: self.conditions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "conditions",
                    "conditions was not specified but it is required when building PolicyStatement",
                )
            })?,
            action: self.action.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action",
                    "action was not specified but it is required when building PolicyStatement",
                )
            })?,
        })
    }
}
