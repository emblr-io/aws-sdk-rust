// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The import data format contains the specifications of the input file that would be passed to the address list import job.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImportDataFormat {
    /// <p>The type of file that would be passed as an input for the address list import job.</p>
    pub import_data_type: crate::types::ImportDataType,
}
impl ImportDataFormat {
    /// <p>The type of file that would be passed as an input for the address list import job.</p>
    pub fn import_data_type(&self) -> &crate::types::ImportDataType {
        &self.import_data_type
    }
}
impl ImportDataFormat {
    /// Creates a new builder-style object to manufacture [`ImportDataFormat`](crate::types::ImportDataFormat).
    pub fn builder() -> crate::types::builders::ImportDataFormatBuilder {
        crate::types::builders::ImportDataFormatBuilder::default()
    }
}

/// A builder for [`ImportDataFormat`](crate::types::ImportDataFormat).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ImportDataFormatBuilder {
    pub(crate) import_data_type: ::std::option::Option<crate::types::ImportDataType>,
}
impl ImportDataFormatBuilder {
    /// <p>The type of file that would be passed as an input for the address list import job.</p>
    /// This field is required.
    pub fn import_data_type(mut self, input: crate::types::ImportDataType) -> Self {
        self.import_data_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of file that would be passed as an input for the address list import job.</p>
    pub fn set_import_data_type(mut self, input: ::std::option::Option<crate::types::ImportDataType>) -> Self {
        self.import_data_type = input;
        self
    }
    /// <p>The type of file that would be passed as an input for the address list import job.</p>
    pub fn get_import_data_type(&self) -> &::std::option::Option<crate::types::ImportDataType> {
        &self.import_data_type
    }
    /// Consumes the builder and constructs a [`ImportDataFormat`](crate::types::ImportDataFormat).
    /// This method will fail if any of the following fields are not set:
    /// - [`import_data_type`](crate::types::builders::ImportDataFormatBuilder::import_data_type)
    pub fn build(self) -> ::std::result::Result<crate::types::ImportDataFormat, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ImportDataFormat {
            import_data_type: self.import_data_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "import_data_type",
                    "import_data_type was not specified but it is required when building ImportDataFormat",
                )
            })?,
        })
    }
}
