// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure type for a boolean condition that provides the address lists and address list attribute to evaluate.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleIsInAddressList {
    /// <p>The email attribute that needs to be evaluated against the address list.</p>
    pub attribute: crate::types::RuleAddressListEmailAttribute,
    /// <p>The address lists that will be used for evaluation.</p>
    pub address_lists: ::std::vec::Vec<::std::string::String>,
}
impl RuleIsInAddressList {
    /// <p>The email attribute that needs to be evaluated against the address list.</p>
    pub fn attribute(&self) -> &crate::types::RuleAddressListEmailAttribute {
        &self.attribute
    }
    /// <p>The address lists that will be used for evaluation.</p>
    pub fn address_lists(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.address_lists.deref()
    }
}
impl RuleIsInAddressList {
    /// Creates a new builder-style object to manufacture [`RuleIsInAddressList`](crate::types::RuleIsInAddressList).
    pub fn builder() -> crate::types::builders::RuleIsInAddressListBuilder {
        crate::types::builders::RuleIsInAddressListBuilder::default()
    }
}

/// A builder for [`RuleIsInAddressList`](crate::types::RuleIsInAddressList).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuleIsInAddressListBuilder {
    pub(crate) attribute: ::std::option::Option<crate::types::RuleAddressListEmailAttribute>,
    pub(crate) address_lists: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RuleIsInAddressListBuilder {
    /// <p>The email attribute that needs to be evaluated against the address list.</p>
    /// This field is required.
    pub fn attribute(mut self, input: crate::types::RuleAddressListEmailAttribute) -> Self {
        self.attribute = ::std::option::Option::Some(input);
        self
    }
    /// <p>The email attribute that needs to be evaluated against the address list.</p>
    pub fn set_attribute(mut self, input: ::std::option::Option<crate::types::RuleAddressListEmailAttribute>) -> Self {
        self.attribute = input;
        self
    }
    /// <p>The email attribute that needs to be evaluated against the address list.</p>
    pub fn get_attribute(&self) -> &::std::option::Option<crate::types::RuleAddressListEmailAttribute> {
        &self.attribute
    }
    /// Appends an item to `address_lists`.
    ///
    /// To override the contents of this collection use [`set_address_lists`](Self::set_address_lists).
    ///
    /// <p>The address lists that will be used for evaluation.</p>
    pub fn address_lists(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.address_lists.unwrap_or_default();
        v.push(input.into());
        self.address_lists = ::std::option::Option::Some(v);
        self
    }
    /// <p>The address lists that will be used for evaluation.</p>
    pub fn set_address_lists(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.address_lists = input;
        self
    }
    /// <p>The address lists that will be used for evaluation.</p>
    pub fn get_address_lists(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.address_lists
    }
    /// Consumes the builder and constructs a [`RuleIsInAddressList`](crate::types::RuleIsInAddressList).
    /// This method will fail if any of the following fields are not set:
    /// - [`attribute`](crate::types::builders::RuleIsInAddressListBuilder::attribute)
    /// - [`address_lists`](crate::types::builders::RuleIsInAddressListBuilder::address_lists)
    pub fn build(self) -> ::std::result::Result<crate::types::RuleIsInAddressList, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RuleIsInAddressList {
            attribute: self.attribute.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "attribute",
                    "attribute was not specified but it is required when building RuleIsInAddressList",
                )
            })?,
            address_lists: self.address_lists.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "address_lists",
                    "address_lists was not specified but it is required when building RuleIsInAddressList",
                )
            })?,
        })
    }
}
