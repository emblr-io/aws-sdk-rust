// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>If you encrypt query and calculation results in Athena owned storage, this field indicates the encryption option (for example, SSE_KMS or CSE_KMS) and key information.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ManagedQueryResultsEncryptionConfiguration {
    /// <p>The ARN of an KMS key for encrypting managed query results.</p>
    pub kms_key: ::std::string::String,
}
impl ManagedQueryResultsEncryptionConfiguration {
    /// <p>The ARN of an KMS key for encrypting managed query results.</p>
    pub fn kms_key(&self) -> &str {
        use std::ops::Deref;
        self.kms_key.deref()
    }
}
impl ManagedQueryResultsEncryptionConfiguration {
    /// Creates a new builder-style object to manufacture [`ManagedQueryResultsEncryptionConfiguration`](crate::types::ManagedQueryResultsEncryptionConfiguration).
    pub fn builder() -> crate::types::builders::ManagedQueryResultsEncryptionConfigurationBuilder {
        crate::types::builders::ManagedQueryResultsEncryptionConfigurationBuilder::default()
    }
}

/// A builder for [`ManagedQueryResultsEncryptionConfiguration`](crate::types::ManagedQueryResultsEncryptionConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ManagedQueryResultsEncryptionConfigurationBuilder {
    pub(crate) kms_key: ::std::option::Option<::std::string::String>,
}
impl ManagedQueryResultsEncryptionConfigurationBuilder {
    /// <p>The ARN of an KMS key for encrypting managed query results.</p>
    /// This field is required.
    pub fn kms_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of an KMS key for encrypting managed query results.</p>
    pub fn set_kms_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key = input;
        self
    }
    /// <p>The ARN of an KMS key for encrypting managed query results.</p>
    pub fn get_kms_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key
    }
    /// Consumes the builder and constructs a [`ManagedQueryResultsEncryptionConfiguration`](crate::types::ManagedQueryResultsEncryptionConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`kms_key`](crate::types::builders::ManagedQueryResultsEncryptionConfigurationBuilder::kms_key)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ManagedQueryResultsEncryptionConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ManagedQueryResultsEncryptionConfiguration {
            kms_key: self.kms_key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "kms_key",
                    "kms_key was not specified but it is required when building ManagedQueryResultsEncryptionConfiguration",
                )
            })?,
        })
    }
}
