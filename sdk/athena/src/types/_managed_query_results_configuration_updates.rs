// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Updates the configuration for managed query results.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ManagedQueryResultsConfigurationUpdates {
    /// <p>If set to true, specifies that Athena manages query results in Athena owned storage.</p>
    pub enabled: ::std::option::Option<bool>,
    /// <p>If you encrypt query and calculation results in Athena owned storage, this field indicates the encryption option (for example, SSE_KMS or CSE_KMS) and key information.</p>
    pub encryption_configuration: ::std::option::Option<crate::types::ManagedQueryResultsEncryptionConfiguration>,
    /// <p>If set to true, it removes workgroup from Athena owned storage. The existing query results are cleaned up after 24hrs. You must provide query results in location specified under <code>ResultConfiguration$OutputLocation</code>.</p>
    pub remove_encryption_configuration: ::std::option::Option<bool>,
}
impl ManagedQueryResultsConfigurationUpdates {
    /// <p>If set to true, specifies that Athena manages query results in Athena owned storage.</p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
    /// <p>If you encrypt query and calculation results in Athena owned storage, this field indicates the encryption option (for example, SSE_KMS or CSE_KMS) and key information.</p>
    pub fn encryption_configuration(&self) -> ::std::option::Option<&crate::types::ManagedQueryResultsEncryptionConfiguration> {
        self.encryption_configuration.as_ref()
    }
    /// <p>If set to true, it removes workgroup from Athena owned storage. The existing query results are cleaned up after 24hrs. You must provide query results in location specified under <code>ResultConfiguration$OutputLocation</code>.</p>
    pub fn remove_encryption_configuration(&self) -> ::std::option::Option<bool> {
        self.remove_encryption_configuration
    }
}
impl ManagedQueryResultsConfigurationUpdates {
    /// Creates a new builder-style object to manufacture [`ManagedQueryResultsConfigurationUpdates`](crate::types::ManagedQueryResultsConfigurationUpdates).
    pub fn builder() -> crate::types::builders::ManagedQueryResultsConfigurationUpdatesBuilder {
        crate::types::builders::ManagedQueryResultsConfigurationUpdatesBuilder::default()
    }
}

/// A builder for [`ManagedQueryResultsConfigurationUpdates`](crate::types::ManagedQueryResultsConfigurationUpdates).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ManagedQueryResultsConfigurationUpdatesBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) encryption_configuration: ::std::option::Option<crate::types::ManagedQueryResultsEncryptionConfiguration>,
    pub(crate) remove_encryption_configuration: ::std::option::Option<bool>,
}
impl ManagedQueryResultsConfigurationUpdatesBuilder {
    /// <p>If set to true, specifies that Athena manages query results in Athena owned storage.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>If set to true, specifies that Athena manages query results in Athena owned storage.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>If set to true, specifies that Athena manages query results in Athena owned storage.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>If you encrypt query and calculation results in Athena owned storage, this field indicates the encryption option (for example, SSE_KMS or CSE_KMS) and key information.</p>
    pub fn encryption_configuration(mut self, input: crate::types::ManagedQueryResultsEncryptionConfiguration) -> Self {
        self.encryption_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>If you encrypt query and calculation results in Athena owned storage, this field indicates the encryption option (for example, SSE_KMS or CSE_KMS) and key information.</p>
    pub fn set_encryption_configuration(mut self, input: ::std::option::Option<crate::types::ManagedQueryResultsEncryptionConfiguration>) -> Self {
        self.encryption_configuration = input;
        self
    }
    /// <p>If you encrypt query and calculation results in Athena owned storage, this field indicates the encryption option (for example, SSE_KMS or CSE_KMS) and key information.</p>
    pub fn get_encryption_configuration(&self) -> &::std::option::Option<crate::types::ManagedQueryResultsEncryptionConfiguration> {
        &self.encryption_configuration
    }
    /// <p>If set to true, it removes workgroup from Athena owned storage. The existing query results are cleaned up after 24hrs. You must provide query results in location specified under <code>ResultConfiguration$OutputLocation</code>.</p>
    pub fn remove_encryption_configuration(mut self, input: bool) -> Self {
        self.remove_encryption_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>If set to true, it removes workgroup from Athena owned storage. The existing query results are cleaned up after 24hrs. You must provide query results in location specified under <code>ResultConfiguration$OutputLocation</code>.</p>
    pub fn set_remove_encryption_configuration(mut self, input: ::std::option::Option<bool>) -> Self {
        self.remove_encryption_configuration = input;
        self
    }
    /// <p>If set to true, it removes workgroup from Athena owned storage. The existing query results are cleaned up after 24hrs. You must provide query results in location specified under <code>ResultConfiguration$OutputLocation</code>.</p>
    pub fn get_remove_encryption_configuration(&self) -> &::std::option::Option<bool> {
        &self.remove_encryption_configuration
    }
    /// Consumes the builder and constructs a [`ManagedQueryResultsConfigurationUpdates`](crate::types::ManagedQueryResultsConfigurationUpdates).
    pub fn build(self) -> crate::types::ManagedQueryResultsConfigurationUpdates {
        crate::types::ManagedQueryResultsConfigurationUpdates {
            enabled: self.enabled,
            encryption_configuration: self.encryption_configuration,
            remove_encryption_configuration: self.remove_encryption_configuration,
        }
    }
}
