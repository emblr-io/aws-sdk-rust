// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetQueryResultsInput {
    /// <p>The unique ID of the query execution.</p>
    pub query_execution_id: ::std::option::Option<::std::string::String>,
    /// <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results (rows) to return in this request.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>When you set this to <code>DATA_ROWS</code> or empty, <code>GetQueryResults</code> returns the query results in rows. If set to <code>DATA_MANIFEST</code>, it returns the manifest file in rows. Only the query types <code>CREATE TABLE AS SELECT</code>, <code>UNLOAD</code>, and <code>INSERT</code> can generate a manifest file. If you use <code>DATA_MANIFEST</code> for other query types, the query will fail.</p>
    pub query_result_type: ::std::option::Option<crate::types::QueryResultType>,
}
impl GetQueryResultsInput {
    /// <p>The unique ID of the query execution.</p>
    pub fn query_execution_id(&self) -> ::std::option::Option<&str> {
        self.query_execution_id.as_deref()
    }
    /// <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results (rows) to return in this request.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>When you set this to <code>DATA_ROWS</code> or empty, <code>GetQueryResults</code> returns the query results in rows. If set to <code>DATA_MANIFEST</code>, it returns the manifest file in rows. Only the query types <code>CREATE TABLE AS SELECT</code>, <code>UNLOAD</code>, and <code>INSERT</code> can generate a manifest file. If you use <code>DATA_MANIFEST</code> for other query types, the query will fail.</p>
    pub fn query_result_type(&self) -> ::std::option::Option<&crate::types::QueryResultType> {
        self.query_result_type.as_ref()
    }
}
impl GetQueryResultsInput {
    /// Creates a new builder-style object to manufacture [`GetQueryResultsInput`](crate::operation::get_query_results::GetQueryResultsInput).
    pub fn builder() -> crate::operation::get_query_results::builders::GetQueryResultsInputBuilder {
        crate::operation::get_query_results::builders::GetQueryResultsInputBuilder::default()
    }
}

/// A builder for [`GetQueryResultsInput`](crate::operation::get_query_results::GetQueryResultsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetQueryResultsInputBuilder {
    pub(crate) query_execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) query_result_type: ::std::option::Option<crate::types::QueryResultType>,
}
impl GetQueryResultsInputBuilder {
    /// <p>The unique ID of the query execution.</p>
    /// This field is required.
    pub fn query_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query_execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the query execution.</p>
    pub fn set_query_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query_execution_id = input;
        self
    }
    /// <p>The unique ID of the query execution.</p>
    pub fn get_query_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.query_execution_id
    }
    /// <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token generated by the Athena service that specifies where to continue pagination if a previous request was truncated. To obtain the next set of pages, pass in the <code>NextToken</code> from the response object of the previous page call.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results (rows) to return in this request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results (rows) to return in this request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results (rows) to return in this request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>When you set this to <code>DATA_ROWS</code> or empty, <code>GetQueryResults</code> returns the query results in rows. If set to <code>DATA_MANIFEST</code>, it returns the manifest file in rows. Only the query types <code>CREATE TABLE AS SELECT</code>, <code>UNLOAD</code>, and <code>INSERT</code> can generate a manifest file. If you use <code>DATA_MANIFEST</code> for other query types, the query will fail.</p>
    pub fn query_result_type(mut self, input: crate::types::QueryResultType) -> Self {
        self.query_result_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>When you set this to <code>DATA_ROWS</code> or empty, <code>GetQueryResults</code> returns the query results in rows. If set to <code>DATA_MANIFEST</code>, it returns the manifest file in rows. Only the query types <code>CREATE TABLE AS SELECT</code>, <code>UNLOAD</code>, and <code>INSERT</code> can generate a manifest file. If you use <code>DATA_MANIFEST</code> for other query types, the query will fail.</p>
    pub fn set_query_result_type(mut self, input: ::std::option::Option<crate::types::QueryResultType>) -> Self {
        self.query_result_type = input;
        self
    }
    /// <p>When you set this to <code>DATA_ROWS</code> or empty, <code>GetQueryResults</code> returns the query results in rows. If set to <code>DATA_MANIFEST</code>, it returns the manifest file in rows. Only the query types <code>CREATE TABLE AS SELECT</code>, <code>UNLOAD</code>, and <code>INSERT</code> can generate a manifest file. If you use <code>DATA_MANIFEST</code> for other query types, the query will fail.</p>
    pub fn get_query_result_type(&self) -> &::std::option::Option<crate::types::QueryResultType> {
        &self.query_result_type
    }
    /// Consumes the builder and constructs a [`GetQueryResultsInput`](crate::operation::get_query_results::GetQueryResultsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_query_results::GetQueryResultsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_query_results::GetQueryResultsInput {
            query_execution_id: self.query_execution_id,
            next_token: self.next_token,
            max_results: self.max_results,
            query_result_type: self.query_result_type,
        })
    }
}
