// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetInvestigationGroupOutput {
    /// <p>The name of the user who created the investigation group.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the investigation group was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The name of the user who created the investigation group.</p>
    pub last_modified_by: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the investigation group was most recently modified.</p>
    pub last_modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The name of the investigation group.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the investigation group.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the IAM role that the investigation group uses for permissions to gather data.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the customer managed KMS key that the investigation group uses to encrypt data, if there is one. If not, the investigation group uses an Amazon Web Services key to encrypt the data.</p>
    pub encryption_configuration: ::std::option::Option<crate::types::EncryptionConfiguration>,
    /// <p>Specifies how long that investigation data is kept.</p>
    pub retention_in_days: ::std::option::Option<i64>,
    /// <p>This structure is a string array. The first string is the ARN of a Amazon SNS topic. The array of strings display the ARNs of Amazon Q in chat applications configurations that are associated with that topic. For more information about these configuration ARNs, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/getting-started.html">Getting started with Amazon Q in chat applications</a> and <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awschatbot.html#awschatbot-resources-for-iam-policies">Resource type defined by Amazon Web Services Chatbot</a>.</p>
    pub chatbot_notification_channel:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    /// <p>Displays the custom tag keys for custom applications in your system that you have specified in the investigation group. Resource tags help Amazon Q narrow the search space when it is unable to discover definite relationships between resources.</p>
    pub tag_key_boundaries: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies whether CloudWatch investigationshas access to change events that are recorded by CloudTrail.</p>
    pub is_cloud_trail_event_history_enabled: ::std::option::Option<bool>,
    /// <p>Lists the <code>AWSAccountId</code> of the accounts configured for cross-account access and the results of the last scan performed on each account.</p>
    pub cross_account_configurations: ::std::option::Option<::std::vec::Vec<crate::types::CrossAccountConfiguration>>,
    _request_id: Option<String>,
}
impl GetInvestigationGroupOutput {
    /// <p>The name of the user who created the investigation group.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The date and time that the investigation group was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The name of the user who created the investigation group.</p>
    pub fn last_modified_by(&self) -> ::std::option::Option<&str> {
        self.last_modified_by.as_deref()
    }
    /// <p>The date and time that the investigation group was most recently modified.</p>
    pub fn last_modified_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_at.as_ref()
    }
    /// <p>The name of the investigation group.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the investigation group.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The ARN of the IAM role that the investigation group uses for permissions to gather data.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>Specifies the customer managed KMS key that the investigation group uses to encrypt data, if there is one. If not, the investigation group uses an Amazon Web Services key to encrypt the data.</p>
    pub fn encryption_configuration(&self) -> ::std::option::Option<&crate::types::EncryptionConfiguration> {
        self.encryption_configuration.as_ref()
    }
    /// <p>Specifies how long that investigation data is kept.</p>
    pub fn retention_in_days(&self) -> ::std::option::Option<i64> {
        self.retention_in_days
    }
    /// <p>This structure is a string array. The first string is the ARN of a Amazon SNS topic. The array of strings display the ARNs of Amazon Q in chat applications configurations that are associated with that topic. For more information about these configuration ARNs, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/getting-started.html">Getting started with Amazon Q in chat applications</a> and <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awschatbot.html#awschatbot-resources-for-iam-policies">Resource type defined by Amazon Web Services Chatbot</a>.</p>
    pub fn chatbot_notification_channel(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>> {
        self.chatbot_notification_channel.as_ref()
    }
    /// <p>Displays the custom tag keys for custom applications in your system that you have specified in the investigation group. Resource tags help Amazon Q narrow the search space when it is unable to discover definite relationships between resources.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tag_key_boundaries.is_none()`.
    pub fn tag_key_boundaries(&self) -> &[::std::string::String] {
        self.tag_key_boundaries.as_deref().unwrap_or_default()
    }
    /// <p>Specifies whether CloudWatch investigationshas access to change events that are recorded by CloudTrail.</p>
    pub fn is_cloud_trail_event_history_enabled(&self) -> ::std::option::Option<bool> {
        self.is_cloud_trail_event_history_enabled
    }
    /// <p>Lists the <code>AWSAccountId</code> of the accounts configured for cross-account access and the results of the last scan performed on each account.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cross_account_configurations.is_none()`.
    pub fn cross_account_configurations(&self) -> &[crate::types::CrossAccountConfiguration] {
        self.cross_account_configurations.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for GetInvestigationGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetInvestigationGroupOutput {
    /// Creates a new builder-style object to manufacture [`GetInvestigationGroupOutput`](crate::operation::get_investigation_group::GetInvestigationGroupOutput).
    pub fn builder() -> crate::operation::get_investigation_group::builders::GetInvestigationGroupOutputBuilder {
        crate::operation::get_investigation_group::builders::GetInvestigationGroupOutputBuilder::default()
    }
}

/// A builder for [`GetInvestigationGroupOutput`](crate::operation::get_investigation_group::GetInvestigationGroupOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetInvestigationGroupOutputBuilder {
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_by: ::std::option::Option<::std::string::String>,
    pub(crate) last_modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_configuration: ::std::option::Option<crate::types::EncryptionConfiguration>,
    pub(crate) retention_in_days: ::std::option::Option<i64>,
    pub(crate) chatbot_notification_channel:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    pub(crate) tag_key_boundaries: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) is_cloud_trail_event_history_enabled: ::std::option::Option<bool>,
    pub(crate) cross_account_configurations: ::std::option::Option<::std::vec::Vec<crate::types::CrossAccountConfiguration>>,
    _request_id: Option<String>,
}
impl GetInvestigationGroupOutputBuilder {
    /// <p>The name of the user who created the investigation group.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the user who created the investigation group.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The name of the user who created the investigation group.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The date and time that the investigation group was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the investigation group was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time that the investigation group was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The name of the user who created the investigation group.</p>
    pub fn last_modified_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_modified_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the user who created the investigation group.</p>
    pub fn set_last_modified_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_modified_by = input;
        self
    }
    /// <p>The name of the user who created the investigation group.</p>
    pub fn get_last_modified_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_modified_by
    }
    /// <p>The date and time that the investigation group was most recently modified.</p>
    pub fn last_modified_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the investigation group was most recently modified.</p>
    pub fn set_last_modified_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_at = input;
        self
    }
    /// <p>The date and time that the investigation group was most recently modified.</p>
    pub fn get_last_modified_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_at
    }
    /// <p>The name of the investigation group.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the investigation group.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the investigation group.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the investigation group.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the investigation group.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the investigation group.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The ARN of the IAM role that the investigation group uses for permissions to gather data.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that the investigation group uses for permissions to gather data.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of the IAM role that the investigation group uses for permissions to gather data.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>Specifies the customer managed KMS key that the investigation group uses to encrypt data, if there is one. If not, the investigation group uses an Amazon Web Services key to encrypt the data.</p>
    pub fn encryption_configuration(mut self, input: crate::types::EncryptionConfiguration) -> Self {
        self.encryption_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the customer managed KMS key that the investigation group uses to encrypt data, if there is one. If not, the investigation group uses an Amazon Web Services key to encrypt the data.</p>
    pub fn set_encryption_configuration(mut self, input: ::std::option::Option<crate::types::EncryptionConfiguration>) -> Self {
        self.encryption_configuration = input;
        self
    }
    /// <p>Specifies the customer managed KMS key that the investigation group uses to encrypt data, if there is one. If not, the investigation group uses an Amazon Web Services key to encrypt the data.</p>
    pub fn get_encryption_configuration(&self) -> &::std::option::Option<crate::types::EncryptionConfiguration> {
        &self.encryption_configuration
    }
    /// <p>Specifies how long that investigation data is kept.</p>
    pub fn retention_in_days(mut self, input: i64) -> Self {
        self.retention_in_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies how long that investigation data is kept.</p>
    pub fn set_retention_in_days(mut self, input: ::std::option::Option<i64>) -> Self {
        self.retention_in_days = input;
        self
    }
    /// <p>Specifies how long that investigation data is kept.</p>
    pub fn get_retention_in_days(&self) -> &::std::option::Option<i64> {
        &self.retention_in_days
    }
    /// Adds a key-value pair to `chatbot_notification_channel`.
    ///
    /// To override the contents of this collection use [`set_chatbot_notification_channel`](Self::set_chatbot_notification_channel).
    ///
    /// <p>This structure is a string array. The first string is the ARN of a Amazon SNS topic. The array of strings display the ARNs of Amazon Q in chat applications configurations that are associated with that topic. For more information about these configuration ARNs, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/getting-started.html">Getting started with Amazon Q in chat applications</a> and <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awschatbot.html#awschatbot-resources-for-iam-policies">Resource type defined by Amazon Web Services Chatbot</a>.</p>
    pub fn chatbot_notification_channel(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: ::std::vec::Vec<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.chatbot_notification_channel.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.chatbot_notification_channel = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>This structure is a string array. The first string is the ARN of a Amazon SNS topic. The array of strings display the ARNs of Amazon Q in chat applications configurations that are associated with that topic. For more information about these configuration ARNs, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/getting-started.html">Getting started with Amazon Q in chat applications</a> and <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awschatbot.html#awschatbot-resources-for-iam-policies">Resource type defined by Amazon Web Services Chatbot</a>.</p>
    pub fn set_chatbot_notification_channel(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    ) -> Self {
        self.chatbot_notification_channel = input;
        self
    }
    /// <p>This structure is a string array. The first string is the ARN of a Amazon SNS topic. The array of strings display the ARNs of Amazon Q in chat applications configurations that are associated with that topic. For more information about these configuration ARNs, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/getting-started.html">Getting started with Amazon Q in chat applications</a> and <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awschatbot.html#awschatbot-resources-for-iam-policies">Resource type defined by Amazon Web Services Chatbot</a>.</p>
    pub fn get_chatbot_notification_channel(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>> {
        &self.chatbot_notification_channel
    }
    /// Appends an item to `tag_key_boundaries`.
    ///
    /// To override the contents of this collection use [`set_tag_key_boundaries`](Self::set_tag_key_boundaries).
    ///
    /// <p>Displays the custom tag keys for custom applications in your system that you have specified in the investigation group. Resource tags help Amazon Q narrow the search space when it is unable to discover definite relationships between resources.</p>
    pub fn tag_key_boundaries(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.tag_key_boundaries.unwrap_or_default();
        v.push(input.into());
        self.tag_key_boundaries = ::std::option::Option::Some(v);
        self
    }
    /// <p>Displays the custom tag keys for custom applications in your system that you have specified in the investigation group. Resource tags help Amazon Q narrow the search space when it is unable to discover definite relationships between resources.</p>
    pub fn set_tag_key_boundaries(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.tag_key_boundaries = input;
        self
    }
    /// <p>Displays the custom tag keys for custom applications in your system that you have specified in the investigation group. Resource tags help Amazon Q narrow the search space when it is unable to discover definite relationships between resources.</p>
    pub fn get_tag_key_boundaries(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.tag_key_boundaries
    }
    /// <p>Specifies whether CloudWatch investigationshas access to change events that are recorded by CloudTrail.</p>
    pub fn is_cloud_trail_event_history_enabled(mut self, input: bool) -> Self {
        self.is_cloud_trail_event_history_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether CloudWatch investigationshas access to change events that are recorded by CloudTrail.</p>
    pub fn set_is_cloud_trail_event_history_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_cloud_trail_event_history_enabled = input;
        self
    }
    /// <p>Specifies whether CloudWatch investigationshas access to change events that are recorded by CloudTrail.</p>
    pub fn get_is_cloud_trail_event_history_enabled(&self) -> &::std::option::Option<bool> {
        &self.is_cloud_trail_event_history_enabled
    }
    /// Appends an item to `cross_account_configurations`.
    ///
    /// To override the contents of this collection use [`set_cross_account_configurations`](Self::set_cross_account_configurations).
    ///
    /// <p>Lists the <code>AWSAccountId</code> of the accounts configured for cross-account access and the results of the last scan performed on each account.</p>
    pub fn cross_account_configurations(mut self, input: crate::types::CrossAccountConfiguration) -> Self {
        let mut v = self.cross_account_configurations.unwrap_or_default();
        v.push(input);
        self.cross_account_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Lists the <code>AWSAccountId</code> of the accounts configured for cross-account access and the results of the last scan performed on each account.</p>
    pub fn set_cross_account_configurations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::CrossAccountConfiguration>>,
    ) -> Self {
        self.cross_account_configurations = input;
        self
    }
    /// <p>Lists the <code>AWSAccountId</code> of the accounts configured for cross-account access and the results of the last scan performed on each account.</p>
    pub fn get_cross_account_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CrossAccountConfiguration>> {
        &self.cross_account_configurations
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetInvestigationGroupOutput`](crate::operation::get_investigation_group::GetInvestigationGroupOutput).
    pub fn build(self) -> crate::operation::get_investigation_group::GetInvestigationGroupOutput {
        crate::operation::get_investigation_group::GetInvestigationGroupOutput {
            created_by: self.created_by,
            created_at: self.created_at,
            last_modified_by: self.last_modified_by,
            last_modified_at: self.last_modified_at,
            name: self.name,
            arn: self.arn,
            role_arn: self.role_arn,
            encryption_configuration: self.encryption_configuration,
            retention_in_days: self.retention_in_days,
            chatbot_notification_channel: self.chatbot_notification_channel,
            tag_key_boundaries: self.tag_key_boundaries,
            is_cloud_trail_event_history_enabled: self.is_cloud_trail_event_history_enabled,
            cross_account_configurations: self.cross_account_configurations,
            _request_id: self._request_id,
        }
    }
}
