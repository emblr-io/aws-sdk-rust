// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Use this structure to specify a customer managed KMS key to use to encrypt investigation data.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EncryptionConfiguration {
    /// <p>Displays whether investigation data is encrypted by a customer managed key or an Amazon Web Services owned kay.</p>
    pub r#type: ::std::option::Option<crate::types::EncryptionConfigurationType>,
    /// <p>If the investigation group uses a customer managed key for encryption, this field displays the ID of that key.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
}
impl EncryptionConfiguration {
    /// <p>Displays whether investigation data is encrypted by a customer managed key or an Amazon Web Services owned kay.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::EncryptionConfigurationType> {
        self.r#type.as_ref()
    }
    /// <p>If the investigation group uses a customer managed key for encryption, this field displays the ID of that key.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
}
impl EncryptionConfiguration {
    /// Creates a new builder-style object to manufacture [`EncryptionConfiguration`](crate::types::EncryptionConfiguration).
    pub fn builder() -> crate::types::builders::EncryptionConfigurationBuilder {
        crate::types::builders::EncryptionConfigurationBuilder::default()
    }
}

/// A builder for [`EncryptionConfiguration`](crate::types::EncryptionConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EncryptionConfigurationBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::EncryptionConfigurationType>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
}
impl EncryptionConfigurationBuilder {
    /// <p>Displays whether investigation data is encrypted by a customer managed key or an Amazon Web Services owned kay.</p>
    pub fn r#type(mut self, input: crate::types::EncryptionConfigurationType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Displays whether investigation data is encrypted by a customer managed key or an Amazon Web Services owned kay.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::EncryptionConfigurationType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Displays whether investigation data is encrypted by a customer managed key or an Amazon Web Services owned kay.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::EncryptionConfigurationType> {
        &self.r#type
    }
    /// <p>If the investigation group uses a customer managed key for encryption, this field displays the ID of that key.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the investigation group uses a customer managed key for encryption, this field displays the ID of that key.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>If the investigation group uses a customer managed key for encryption, this field displays the ID of that key.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// Consumes the builder and constructs a [`EncryptionConfiguration`](crate::types::EncryptionConfiguration).
    pub fn build(self) -> crate::types::EncryptionConfiguration {
        crate::types::EncryptionConfiguration {
            r#type: self.r#type,
            kms_key_id: self.kms_key_id,
        }
    }
}
