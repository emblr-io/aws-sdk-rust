// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains information about the cross-account configuration in the account.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CrossAccountConfiguration {
    /// <p>The ARN of an existing role which will be used to do investigations on your behalf.</p>
    pub source_role_arn: ::std::option::Option<::std::string::String>,
}
impl CrossAccountConfiguration {
    /// <p>The ARN of an existing role which will be used to do investigations on your behalf.</p>
    pub fn source_role_arn(&self) -> ::std::option::Option<&str> {
        self.source_role_arn.as_deref()
    }
}
impl CrossAccountConfiguration {
    /// Creates a new builder-style object to manufacture [`CrossAccountConfiguration`](crate::types::CrossAccountConfiguration).
    pub fn builder() -> crate::types::builders::CrossAccountConfigurationBuilder {
        crate::types::builders::CrossAccountConfigurationBuilder::default()
    }
}

/// A builder for [`CrossAccountConfiguration`](crate::types::CrossAccountConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CrossAccountConfigurationBuilder {
    pub(crate) source_role_arn: ::std::option::Option<::std::string::String>,
}
impl CrossAccountConfigurationBuilder {
    /// <p>The ARN of an existing role which will be used to do investigations on your behalf.</p>
    pub fn source_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of an existing role which will be used to do investigations on your behalf.</p>
    pub fn set_source_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_role_arn = input;
        self
    }
    /// <p>The ARN of an existing role which will be used to do investigations on your behalf.</p>
    pub fn get_source_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_role_arn
    }
    /// Consumes the builder and constructs a [`CrossAccountConfiguration`](crate::types::CrossAccountConfiguration).
    pub fn build(self) -> crate::types::CrossAccountConfiguration {
        crate::types::CrossAccountConfiguration {
            source_role_arn: self.source_role_arn,
        }
    }
}
