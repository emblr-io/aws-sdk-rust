// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateMultiRegionClusterInput {
    /// <p>A suffix to be added to the Multi-Region cluster name. Amazon MemoryDB automatically applies a prefix to the Multi-Region cluster Name when it is created. Each Amazon Region has its own prefix. For instance, a Multi-Region cluster Name created in the US-West-1 region will begin with "virxk", along with the suffix name you provide. The suffix guarantees uniqueness of the Multi-Region cluster name across multiple regions.</p>
    pub multi_region_cluster_name_suffix: ::std::option::Option<::std::string::String>,
    /// <p>A description for the multi-Region cluster.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The name of the engine to be used for the multi-Region cluster.</p>
    pub engine: ::std::option::Option<::std::string::String>,
    /// <p>The version of the engine to be used for the multi-Region cluster.</p>
    pub engine_version: ::std::option::Option<::std::string::String>,
    /// <p>The node type to be used for the multi-Region cluster.</p>
    pub node_type: ::std::option::Option<::std::string::String>,
    /// <p>The name of the multi-Region parameter group to be associated with the cluster.</p>
    pub multi_region_parameter_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The number of shards for the multi-Region cluster.</p>
    pub num_shards: ::std::option::Option<i32>,
    /// <p>Whether to enable TLS encryption for the multi-Region cluster.</p>
    pub tls_enabled: ::std::option::Option<bool>,
    /// <p>A list of tags to be applied to the multi-Region cluster.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateMultiRegionClusterInput {
    /// <p>A suffix to be added to the Multi-Region cluster name. Amazon MemoryDB automatically applies a prefix to the Multi-Region cluster Name when it is created. Each Amazon Region has its own prefix. For instance, a Multi-Region cluster Name created in the US-West-1 region will begin with "virxk", along with the suffix name you provide. The suffix guarantees uniqueness of the Multi-Region cluster name across multiple regions.</p>
    pub fn multi_region_cluster_name_suffix(&self) -> ::std::option::Option<&str> {
        self.multi_region_cluster_name_suffix.as_deref()
    }
    /// <p>A description for the multi-Region cluster.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The name of the engine to be used for the multi-Region cluster.</p>
    pub fn engine(&self) -> ::std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>The version of the engine to be used for the multi-Region cluster.</p>
    pub fn engine_version(&self) -> ::std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The node type to be used for the multi-Region cluster.</p>
    pub fn node_type(&self) -> ::std::option::Option<&str> {
        self.node_type.as_deref()
    }
    /// <p>The name of the multi-Region parameter group to be associated with the cluster.</p>
    pub fn multi_region_parameter_group_name(&self) -> ::std::option::Option<&str> {
        self.multi_region_parameter_group_name.as_deref()
    }
    /// <p>The number of shards for the multi-Region cluster.</p>
    pub fn num_shards(&self) -> ::std::option::Option<i32> {
        self.num_shards
    }
    /// <p>Whether to enable TLS encryption for the multi-Region cluster.</p>
    pub fn tls_enabled(&self) -> ::std::option::Option<bool> {
        self.tls_enabled
    }
    /// <p>A list of tags to be applied to the multi-Region cluster.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateMultiRegionClusterInput {
    /// Creates a new builder-style object to manufacture [`CreateMultiRegionClusterInput`](crate::operation::create_multi_region_cluster::CreateMultiRegionClusterInput).
    pub fn builder() -> crate::operation::create_multi_region_cluster::builders::CreateMultiRegionClusterInputBuilder {
        crate::operation::create_multi_region_cluster::builders::CreateMultiRegionClusterInputBuilder::default()
    }
}

/// A builder for [`CreateMultiRegionClusterInput`](crate::operation::create_multi_region_cluster::CreateMultiRegionClusterInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateMultiRegionClusterInputBuilder {
    pub(crate) multi_region_cluster_name_suffix: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) engine: ::std::option::Option<::std::string::String>,
    pub(crate) engine_version: ::std::option::Option<::std::string::String>,
    pub(crate) node_type: ::std::option::Option<::std::string::String>,
    pub(crate) multi_region_parameter_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) num_shards: ::std::option::Option<i32>,
    pub(crate) tls_enabled: ::std::option::Option<bool>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateMultiRegionClusterInputBuilder {
    /// <p>A suffix to be added to the Multi-Region cluster name. Amazon MemoryDB automatically applies a prefix to the Multi-Region cluster Name when it is created. Each Amazon Region has its own prefix. For instance, a Multi-Region cluster Name created in the US-West-1 region will begin with "virxk", along with the suffix name you provide. The suffix guarantees uniqueness of the Multi-Region cluster name across multiple regions.</p>
    /// This field is required.
    pub fn multi_region_cluster_name_suffix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.multi_region_cluster_name_suffix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A suffix to be added to the Multi-Region cluster name. Amazon MemoryDB automatically applies a prefix to the Multi-Region cluster Name when it is created. Each Amazon Region has its own prefix. For instance, a Multi-Region cluster Name created in the US-West-1 region will begin with "virxk", along with the suffix name you provide. The suffix guarantees uniqueness of the Multi-Region cluster name across multiple regions.</p>
    pub fn set_multi_region_cluster_name_suffix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.multi_region_cluster_name_suffix = input;
        self
    }
    /// <p>A suffix to be added to the Multi-Region cluster name. Amazon MemoryDB automatically applies a prefix to the Multi-Region cluster Name when it is created. Each Amazon Region has its own prefix. For instance, a Multi-Region cluster Name created in the US-West-1 region will begin with "virxk", along with the suffix name you provide. The suffix guarantees uniqueness of the Multi-Region cluster name across multiple regions.</p>
    pub fn get_multi_region_cluster_name_suffix(&self) -> &::std::option::Option<::std::string::String> {
        &self.multi_region_cluster_name_suffix
    }
    /// <p>A description for the multi-Region cluster.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description for the multi-Region cluster.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description for the multi-Region cluster.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The name of the engine to be used for the multi-Region cluster.</p>
    pub fn engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the engine to be used for the multi-Region cluster.</p>
    pub fn set_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>The name of the engine to be used for the multi-Region cluster.</p>
    pub fn get_engine(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine
    }
    /// <p>The version of the engine to be used for the multi-Region cluster.</p>
    pub fn engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the engine to be used for the multi-Region cluster.</p>
    pub fn set_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The version of the engine to be used for the multi-Region cluster.</p>
    pub fn get_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_version
    }
    /// <p>The node type to be used for the multi-Region cluster.</p>
    /// This field is required.
    pub fn node_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The node type to be used for the multi-Region cluster.</p>
    pub fn set_node_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_type = input;
        self
    }
    /// <p>The node type to be used for the multi-Region cluster.</p>
    pub fn get_node_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_type
    }
    /// <p>The name of the multi-Region parameter group to be associated with the cluster.</p>
    pub fn multi_region_parameter_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.multi_region_parameter_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the multi-Region parameter group to be associated with the cluster.</p>
    pub fn set_multi_region_parameter_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.multi_region_parameter_group_name = input;
        self
    }
    /// <p>The name of the multi-Region parameter group to be associated with the cluster.</p>
    pub fn get_multi_region_parameter_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.multi_region_parameter_group_name
    }
    /// <p>The number of shards for the multi-Region cluster.</p>
    pub fn num_shards(mut self, input: i32) -> Self {
        self.num_shards = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of shards for the multi-Region cluster.</p>
    pub fn set_num_shards(mut self, input: ::std::option::Option<i32>) -> Self {
        self.num_shards = input;
        self
    }
    /// <p>The number of shards for the multi-Region cluster.</p>
    pub fn get_num_shards(&self) -> &::std::option::Option<i32> {
        &self.num_shards
    }
    /// <p>Whether to enable TLS encryption for the multi-Region cluster.</p>
    pub fn tls_enabled(mut self, input: bool) -> Self {
        self.tls_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to enable TLS encryption for the multi-Region cluster.</p>
    pub fn set_tls_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.tls_enabled = input;
        self
    }
    /// <p>Whether to enable TLS encryption for the multi-Region cluster.</p>
    pub fn get_tls_enabled(&self) -> &::std::option::Option<bool> {
        &self.tls_enabled
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to be applied to the multi-Region cluster.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of tags to be applied to the multi-Region cluster.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of tags to be applied to the multi-Region cluster.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateMultiRegionClusterInput`](crate::operation::create_multi_region_cluster::CreateMultiRegionClusterInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_multi_region_cluster::CreateMultiRegionClusterInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_multi_region_cluster::CreateMultiRegionClusterInput {
            multi_region_cluster_name_suffix: self.multi_region_cluster_name_suffix,
            description: self.description,
            engine: self.engine,
            engine_version: self.engine_version,
            node_type: self.node_type,
            multi_region_parameter_group_name: self.multi_region_parameter_group_name,
            num_shards: self.num_shards,
            tls_enabled: self.tls_enabled,
            tags: self.tags,
        })
    }
}
