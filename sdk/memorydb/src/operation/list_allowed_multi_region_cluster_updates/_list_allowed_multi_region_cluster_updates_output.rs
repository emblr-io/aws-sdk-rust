// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListAllowedMultiRegionClusterUpdatesOutput {
    /// <p>The node types that the cluster can be scaled up to.</p>
    pub scale_up_node_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The node types that the cluster can be scaled down to.</p>
    pub scale_down_node_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl ListAllowedMultiRegionClusterUpdatesOutput {
    /// <p>The node types that the cluster can be scaled up to.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.scale_up_node_types.is_none()`.
    pub fn scale_up_node_types(&self) -> &[::std::string::String] {
        self.scale_up_node_types.as_deref().unwrap_or_default()
    }
    /// <p>The node types that the cluster can be scaled down to.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.scale_down_node_types.is_none()`.
    pub fn scale_down_node_types(&self) -> &[::std::string::String] {
        self.scale_down_node_types.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for ListAllowedMultiRegionClusterUpdatesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListAllowedMultiRegionClusterUpdatesOutput {
    /// Creates a new builder-style object to manufacture [`ListAllowedMultiRegionClusterUpdatesOutput`](crate::operation::list_allowed_multi_region_cluster_updates::ListAllowedMultiRegionClusterUpdatesOutput).
    pub fn builder() -> crate::operation::list_allowed_multi_region_cluster_updates::builders::ListAllowedMultiRegionClusterUpdatesOutputBuilder {
        crate::operation::list_allowed_multi_region_cluster_updates::builders::ListAllowedMultiRegionClusterUpdatesOutputBuilder::default()
    }
}

/// A builder for [`ListAllowedMultiRegionClusterUpdatesOutput`](crate::operation::list_allowed_multi_region_cluster_updates::ListAllowedMultiRegionClusterUpdatesOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListAllowedMultiRegionClusterUpdatesOutputBuilder {
    pub(crate) scale_up_node_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) scale_down_node_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl ListAllowedMultiRegionClusterUpdatesOutputBuilder {
    /// Appends an item to `scale_up_node_types`.
    ///
    /// To override the contents of this collection use [`set_scale_up_node_types`](Self::set_scale_up_node_types).
    ///
    /// <p>The node types that the cluster can be scaled up to.</p>
    pub fn scale_up_node_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.scale_up_node_types.unwrap_or_default();
        v.push(input.into());
        self.scale_up_node_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The node types that the cluster can be scaled up to.</p>
    pub fn set_scale_up_node_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.scale_up_node_types = input;
        self
    }
    /// <p>The node types that the cluster can be scaled up to.</p>
    pub fn get_scale_up_node_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.scale_up_node_types
    }
    /// Appends an item to `scale_down_node_types`.
    ///
    /// To override the contents of this collection use [`set_scale_down_node_types`](Self::set_scale_down_node_types).
    ///
    /// <p>The node types that the cluster can be scaled down to.</p>
    pub fn scale_down_node_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.scale_down_node_types.unwrap_or_default();
        v.push(input.into());
        self.scale_down_node_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The node types that the cluster can be scaled down to.</p>
    pub fn set_scale_down_node_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.scale_down_node_types = input;
        self
    }
    /// <p>The node types that the cluster can be scaled down to.</p>
    pub fn get_scale_down_node_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.scale_down_node_types
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListAllowedMultiRegionClusterUpdatesOutput`](crate::operation::list_allowed_multi_region_cluster_updates::ListAllowedMultiRegionClusterUpdatesOutput).
    pub fn build(self) -> crate::operation::list_allowed_multi_region_cluster_updates::ListAllowedMultiRegionClusterUpdatesOutput {
        crate::operation::list_allowed_multi_region_cluster_updates::ListAllowedMultiRegionClusterUpdatesOutput {
            scale_up_node_types: self.scale_up_node_types,
            scale_down_node_types: self.scale_down_node_types,
            _request_id: self._request_id,
        }
    }
}
