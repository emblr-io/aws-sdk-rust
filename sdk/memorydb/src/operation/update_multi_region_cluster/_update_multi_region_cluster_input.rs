// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateMultiRegionClusterInput {
    /// <p>The name of the multi-Region cluster to be updated.</p>
    pub multi_region_cluster_name: ::std::option::Option<::std::string::String>,
    /// <p>The new node type to be used for the multi-Region cluster.</p>
    pub node_type: ::std::option::Option<::std::string::String>,
    /// <p>A new description for the multi-Region cluster.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The new engine version to be used for the multi-Region cluster.</p>
    pub engine_version: ::std::option::Option<::std::string::String>,
    /// <p>A request to configure the sharding properties of a cluster</p>
    pub shard_configuration: ::std::option::Option<crate::types::ShardConfigurationRequest>,
    /// <p>The new multi-Region parameter group to be associated with the cluster.</p>
    pub multi_region_parameter_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The strategy to use for the update operation. Supported values are "coordinated" or "uncoordinated".</p>
    pub update_strategy: ::std::option::Option<crate::types::UpdateStrategy>,
}
impl UpdateMultiRegionClusterInput {
    /// <p>The name of the multi-Region cluster to be updated.</p>
    pub fn multi_region_cluster_name(&self) -> ::std::option::Option<&str> {
        self.multi_region_cluster_name.as_deref()
    }
    /// <p>The new node type to be used for the multi-Region cluster.</p>
    pub fn node_type(&self) -> ::std::option::Option<&str> {
        self.node_type.as_deref()
    }
    /// <p>A new description for the multi-Region cluster.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The new engine version to be used for the multi-Region cluster.</p>
    pub fn engine_version(&self) -> ::std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>A request to configure the sharding properties of a cluster</p>
    pub fn shard_configuration(&self) -> ::std::option::Option<&crate::types::ShardConfigurationRequest> {
        self.shard_configuration.as_ref()
    }
    /// <p>The new multi-Region parameter group to be associated with the cluster.</p>
    pub fn multi_region_parameter_group_name(&self) -> ::std::option::Option<&str> {
        self.multi_region_parameter_group_name.as_deref()
    }
    /// <p>The strategy to use for the update operation. Supported values are "coordinated" or "uncoordinated".</p>
    pub fn update_strategy(&self) -> ::std::option::Option<&crate::types::UpdateStrategy> {
        self.update_strategy.as_ref()
    }
}
impl UpdateMultiRegionClusterInput {
    /// Creates a new builder-style object to manufacture [`UpdateMultiRegionClusterInput`](crate::operation::update_multi_region_cluster::UpdateMultiRegionClusterInput).
    pub fn builder() -> crate::operation::update_multi_region_cluster::builders::UpdateMultiRegionClusterInputBuilder {
        crate::operation::update_multi_region_cluster::builders::UpdateMultiRegionClusterInputBuilder::default()
    }
}

/// A builder for [`UpdateMultiRegionClusterInput`](crate::operation::update_multi_region_cluster::UpdateMultiRegionClusterInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateMultiRegionClusterInputBuilder {
    pub(crate) multi_region_cluster_name: ::std::option::Option<::std::string::String>,
    pub(crate) node_type: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) engine_version: ::std::option::Option<::std::string::String>,
    pub(crate) shard_configuration: ::std::option::Option<crate::types::ShardConfigurationRequest>,
    pub(crate) multi_region_parameter_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) update_strategy: ::std::option::Option<crate::types::UpdateStrategy>,
}
impl UpdateMultiRegionClusterInputBuilder {
    /// <p>The name of the multi-Region cluster to be updated.</p>
    /// This field is required.
    pub fn multi_region_cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.multi_region_cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the multi-Region cluster to be updated.</p>
    pub fn set_multi_region_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.multi_region_cluster_name = input;
        self
    }
    /// <p>The name of the multi-Region cluster to be updated.</p>
    pub fn get_multi_region_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.multi_region_cluster_name
    }
    /// <p>The new node type to be used for the multi-Region cluster.</p>
    pub fn node_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new node type to be used for the multi-Region cluster.</p>
    pub fn set_node_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_type = input;
        self
    }
    /// <p>The new node type to be used for the multi-Region cluster.</p>
    pub fn get_node_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_type
    }
    /// <p>A new description for the multi-Region cluster.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A new description for the multi-Region cluster.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A new description for the multi-Region cluster.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The new engine version to be used for the multi-Region cluster.</p>
    pub fn engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new engine version to be used for the multi-Region cluster.</p>
    pub fn set_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The new engine version to be used for the multi-Region cluster.</p>
    pub fn get_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_version
    }
    /// <p>A request to configure the sharding properties of a cluster</p>
    pub fn shard_configuration(mut self, input: crate::types::ShardConfigurationRequest) -> Self {
        self.shard_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>A request to configure the sharding properties of a cluster</p>
    pub fn set_shard_configuration(mut self, input: ::std::option::Option<crate::types::ShardConfigurationRequest>) -> Self {
        self.shard_configuration = input;
        self
    }
    /// <p>A request to configure the sharding properties of a cluster</p>
    pub fn get_shard_configuration(&self) -> &::std::option::Option<crate::types::ShardConfigurationRequest> {
        &self.shard_configuration
    }
    /// <p>The new multi-Region parameter group to be associated with the cluster.</p>
    pub fn multi_region_parameter_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.multi_region_parameter_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new multi-Region parameter group to be associated with the cluster.</p>
    pub fn set_multi_region_parameter_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.multi_region_parameter_group_name = input;
        self
    }
    /// <p>The new multi-Region parameter group to be associated with the cluster.</p>
    pub fn get_multi_region_parameter_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.multi_region_parameter_group_name
    }
    /// <p>The strategy to use for the update operation. Supported values are "coordinated" or "uncoordinated".</p>
    pub fn update_strategy(mut self, input: crate::types::UpdateStrategy) -> Self {
        self.update_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The strategy to use for the update operation. Supported values are "coordinated" or "uncoordinated".</p>
    pub fn set_update_strategy(mut self, input: ::std::option::Option<crate::types::UpdateStrategy>) -> Self {
        self.update_strategy = input;
        self
    }
    /// <p>The strategy to use for the update operation. Supported values are "coordinated" or "uncoordinated".</p>
    pub fn get_update_strategy(&self) -> &::std::option::Option<crate::types::UpdateStrategy> {
        &self.update_strategy
    }
    /// Consumes the builder and constructs a [`UpdateMultiRegionClusterInput`](crate::operation::update_multi_region_cluster::UpdateMultiRegionClusterInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_multi_region_cluster::UpdateMultiRegionClusterInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_multi_region_cluster::UpdateMultiRegionClusterInput {
            multi_region_cluster_name: self.multi_region_cluster_name,
            node_type: self.node_type,
            description: self.description,
            engine_version: self.engine_version,
            shard_configuration: self.shard_configuration,
            multi_region_parameter_group_name: self.multi_region_parameter_group_name,
            update_strategy: self.update_strategy,
        })
    }
}
