// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a multi-Region cluster.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MultiRegionCluster {
    /// <p>The name of the multi-Region cluster.</p>
    pub multi_region_cluster_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the multi-Region cluster.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the multi-Region cluster.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>The node type used by the multi-Region cluster.</p>
    pub node_type: ::std::option::Option<::std::string::String>,
    /// <p>The name of the engine used by the multi-Region cluster.</p>
    pub engine: ::std::option::Option<::std::string::String>,
    /// <p>The version of the engine used by the multi-Region cluster.</p>
    pub engine_version: ::std::option::Option<::std::string::String>,
    /// <p>The number of shards in the multi-Region cluster.</p>
    pub number_of_shards: ::std::option::Option<i32>,
    /// <p>The clusters in this multi-Region cluster.</p>
    pub clusters: ::std::option::Option<::std::vec::Vec<crate::types::RegionalCluster>>,
    /// <p>The name of the multi-Region parameter group associated with the cluster.</p>
    pub multi_region_parameter_group_name: ::std::option::Option<::std::string::String>,
    /// <p>Indiciates if the multi-Region cluster is TLS enabled.</p>
    pub tls_enabled: ::std::option::Option<bool>,
    /// <p>The Amazon Resource Name (ARN) of the multi-Region cluster.</p>
    pub arn: ::std::option::Option<::std::string::String>,
}
impl MultiRegionCluster {
    /// <p>The name of the multi-Region cluster.</p>
    pub fn multi_region_cluster_name(&self) -> ::std::option::Option<&str> {
        self.multi_region_cluster_name.as_deref()
    }
    /// <p>The description of the multi-Region cluster.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The current status of the multi-Region cluster.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The node type used by the multi-Region cluster.</p>
    pub fn node_type(&self) -> ::std::option::Option<&str> {
        self.node_type.as_deref()
    }
    /// <p>The name of the engine used by the multi-Region cluster.</p>
    pub fn engine(&self) -> ::std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>The version of the engine used by the multi-Region cluster.</p>
    pub fn engine_version(&self) -> ::std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The number of shards in the multi-Region cluster.</p>
    pub fn number_of_shards(&self) -> ::std::option::Option<i32> {
        self.number_of_shards
    }
    /// <p>The clusters in this multi-Region cluster.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.clusters.is_none()`.
    pub fn clusters(&self) -> &[crate::types::RegionalCluster] {
        self.clusters.as_deref().unwrap_or_default()
    }
    /// <p>The name of the multi-Region parameter group associated with the cluster.</p>
    pub fn multi_region_parameter_group_name(&self) -> ::std::option::Option<&str> {
        self.multi_region_parameter_group_name.as_deref()
    }
    /// <p>Indiciates if the multi-Region cluster is TLS enabled.</p>
    pub fn tls_enabled(&self) -> ::std::option::Option<bool> {
        self.tls_enabled
    }
    /// <p>The Amazon Resource Name (ARN) of the multi-Region cluster.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl MultiRegionCluster {
    /// Creates a new builder-style object to manufacture [`MultiRegionCluster`](crate::types::MultiRegionCluster).
    pub fn builder() -> crate::types::builders::MultiRegionClusterBuilder {
        crate::types::builders::MultiRegionClusterBuilder::default()
    }
}

/// A builder for [`MultiRegionCluster`](crate::types::MultiRegionCluster).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MultiRegionClusterBuilder {
    pub(crate) multi_region_cluster_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) node_type: ::std::option::Option<::std::string::String>,
    pub(crate) engine: ::std::option::Option<::std::string::String>,
    pub(crate) engine_version: ::std::option::Option<::std::string::String>,
    pub(crate) number_of_shards: ::std::option::Option<i32>,
    pub(crate) clusters: ::std::option::Option<::std::vec::Vec<crate::types::RegionalCluster>>,
    pub(crate) multi_region_parameter_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) tls_enabled: ::std::option::Option<bool>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
}
impl MultiRegionClusterBuilder {
    /// <p>The name of the multi-Region cluster.</p>
    pub fn multi_region_cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.multi_region_cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the multi-Region cluster.</p>
    pub fn set_multi_region_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.multi_region_cluster_name = input;
        self
    }
    /// <p>The name of the multi-Region cluster.</p>
    pub fn get_multi_region_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.multi_region_cluster_name
    }
    /// <p>The description of the multi-Region cluster.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the multi-Region cluster.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the multi-Region cluster.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The current status of the multi-Region cluster.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current status of the multi-Region cluster.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the multi-Region cluster.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The node type used by the multi-Region cluster.</p>
    pub fn node_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The node type used by the multi-Region cluster.</p>
    pub fn set_node_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_type = input;
        self
    }
    /// <p>The node type used by the multi-Region cluster.</p>
    pub fn get_node_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_type
    }
    /// <p>The name of the engine used by the multi-Region cluster.</p>
    pub fn engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the engine used by the multi-Region cluster.</p>
    pub fn set_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>The name of the engine used by the multi-Region cluster.</p>
    pub fn get_engine(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine
    }
    /// <p>The version of the engine used by the multi-Region cluster.</p>
    pub fn engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the engine used by the multi-Region cluster.</p>
    pub fn set_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The version of the engine used by the multi-Region cluster.</p>
    pub fn get_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_version
    }
    /// <p>The number of shards in the multi-Region cluster.</p>
    pub fn number_of_shards(mut self, input: i32) -> Self {
        self.number_of_shards = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of shards in the multi-Region cluster.</p>
    pub fn set_number_of_shards(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_shards = input;
        self
    }
    /// <p>The number of shards in the multi-Region cluster.</p>
    pub fn get_number_of_shards(&self) -> &::std::option::Option<i32> {
        &self.number_of_shards
    }
    /// Appends an item to `clusters`.
    ///
    /// To override the contents of this collection use [`set_clusters`](Self::set_clusters).
    ///
    /// <p>The clusters in this multi-Region cluster.</p>
    pub fn clusters(mut self, input: crate::types::RegionalCluster) -> Self {
        let mut v = self.clusters.unwrap_or_default();
        v.push(input);
        self.clusters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The clusters in this multi-Region cluster.</p>
    pub fn set_clusters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RegionalCluster>>) -> Self {
        self.clusters = input;
        self
    }
    /// <p>The clusters in this multi-Region cluster.</p>
    pub fn get_clusters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RegionalCluster>> {
        &self.clusters
    }
    /// <p>The name of the multi-Region parameter group associated with the cluster.</p>
    pub fn multi_region_parameter_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.multi_region_parameter_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the multi-Region parameter group associated with the cluster.</p>
    pub fn set_multi_region_parameter_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.multi_region_parameter_group_name = input;
        self
    }
    /// <p>The name of the multi-Region parameter group associated with the cluster.</p>
    pub fn get_multi_region_parameter_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.multi_region_parameter_group_name
    }
    /// <p>Indiciates if the multi-Region cluster is TLS enabled.</p>
    pub fn tls_enabled(mut self, input: bool) -> Self {
        self.tls_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indiciates if the multi-Region cluster is TLS enabled.</p>
    pub fn set_tls_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.tls_enabled = input;
        self
    }
    /// <p>Indiciates if the multi-Region cluster is TLS enabled.</p>
    pub fn get_tls_enabled(&self) -> &::std::option::Option<bool> {
        &self.tls_enabled
    }
    /// <p>The Amazon Resource Name (ARN) of the multi-Region cluster.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the multi-Region cluster.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the multi-Region cluster.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Consumes the builder and constructs a [`MultiRegionCluster`](crate::types::MultiRegionCluster).
    pub fn build(self) -> crate::types::MultiRegionCluster {
        crate::types::MultiRegionCluster {
            multi_region_cluster_name: self.multi_region_cluster_name,
            description: self.description,
            status: self.status,
            node_type: self.node_type,
            engine: self.engine,
            engine_version: self.engine_version,
            number_of_shards: self.number_of_shards,
            clusters: self.clusters,
            multi_region_parameter_group_name: self.multi_region_parameter_group_name,
            tls_enabled: self.tls_enabled,
            arn: self.arn,
        }
    }
}
