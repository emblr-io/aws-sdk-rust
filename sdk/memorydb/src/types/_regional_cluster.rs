// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a Regional cluster</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RegionalCluster {
    /// <p>The name of the Regional cluster</p>
    pub cluster_name: ::std::option::Option<::std::string::String>,
    /// <p>The Region the current Regional cluster is assigned to.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The status of the Regional cluster.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) the Regional cluster</p>
    pub arn: ::std::option::Option<::std::string::String>,
}
impl RegionalCluster {
    /// <p>The name of the Regional cluster</p>
    pub fn cluster_name(&self) -> ::std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>The Region the current Regional cluster is assigned to.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The status of the Regional cluster.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) the Regional cluster</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl RegionalCluster {
    /// Creates a new builder-style object to manufacture [`RegionalCluster`](crate::types::RegionalCluster).
    pub fn builder() -> crate::types::builders::RegionalClusterBuilder {
        crate::types::builders::RegionalClusterBuilder::default()
    }
}

/// A builder for [`RegionalCluster`](crate::types::RegionalCluster).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RegionalClusterBuilder {
    pub(crate) cluster_name: ::std::option::Option<::std::string::String>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
}
impl RegionalClusterBuilder {
    /// <p>The name of the Regional cluster</p>
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Regional cluster</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>The name of the Regional cluster</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_name
    }
    /// <p>The Region the current Regional cluster is assigned to.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Region the current Regional cluster is assigned to.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Region the current Regional cluster is assigned to.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The status of the Regional cluster.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the Regional cluster.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the Regional cluster.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The Amazon Resource Name (ARN) the Regional cluster</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) the Regional cluster</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) the Regional cluster</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Consumes the builder and constructs a [`RegionalCluster`](crate::types::RegionalCluster).
    pub fn build(self) -> crate::types::RegionalCluster {
        crate::types::RegionalCluster {
            cluster_name: self.cluster_name,
            region: self.region,
            status: self.status,
            arn: self.arn,
        }
    }
}
