// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The event associated with <code>MedicalScribeResultStream</code>.</p>
/// <p>Contains <code>MedicalScribeTranscriptSegment</code>, which contains segment related information.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MedicalScribeTranscriptEvent {
    /// <p>The <code>TranscriptSegment</code> associated with a <code>MedicalScribeTranscriptEvent</code>.</p>
    pub transcript_segment: ::std::option::Option<crate::types::MedicalScribeTranscriptSegment>,
}
impl MedicalScribeTranscriptEvent {
    /// <p>The <code>TranscriptSegment</code> associated with a <code>MedicalScribeTranscriptEvent</code>.</p>
    pub fn transcript_segment(&self) -> ::std::option::Option<&crate::types::MedicalScribeTranscriptSegment> {
        self.transcript_segment.as_ref()
    }
}
impl MedicalScribeTranscriptEvent {
    /// Creates a new builder-style object to manufacture [`MedicalScribeTranscriptEvent`](crate::types::MedicalScribeTranscriptEvent).
    pub fn builder() -> crate::types::builders::MedicalScribeTranscriptEventBuilder {
        crate::types::builders::MedicalScribeTranscriptEventBuilder::default()
    }
}

/// A builder for [`MedicalScribeTranscriptEvent`](crate::types::MedicalScribeTranscriptEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MedicalScribeTranscriptEventBuilder {
    pub(crate) transcript_segment: ::std::option::Option<crate::types::MedicalScribeTranscriptSegment>,
}
impl MedicalScribeTranscriptEventBuilder {
    /// <p>The <code>TranscriptSegment</code> associated with a <code>MedicalScribeTranscriptEvent</code>.</p>
    pub fn transcript_segment(mut self, input: crate::types::MedicalScribeTranscriptSegment) -> Self {
        self.transcript_segment = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>TranscriptSegment</code> associated with a <code>MedicalScribeTranscriptEvent</code>.</p>
    pub fn set_transcript_segment(mut self, input: ::std::option::Option<crate::types::MedicalScribeTranscriptSegment>) -> Self {
        self.transcript_segment = input;
        self
    }
    /// <p>The <code>TranscriptSegment</code> associated with a <code>MedicalScribeTranscriptEvent</code>.</p>
    pub fn get_transcript_segment(&self) -> &::std::option::Option<crate::types::MedicalScribeTranscriptSegment> {
        &self.transcript_segment
    }
    /// Consumes the builder and constructs a [`MedicalScribeTranscriptEvent`](crate::types::MedicalScribeTranscriptEvent).
    pub fn build(self) -> crate::types::MedicalScribeTranscriptEvent {
        crate::types::MedicalScribeTranscriptEvent {
            transcript_segment: self.transcript_segment,
        }
    }
}
