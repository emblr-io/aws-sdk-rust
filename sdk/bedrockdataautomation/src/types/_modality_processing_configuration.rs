// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Configuration to enable/disable processing of modality
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModalityProcessingConfiguration {
    /// State
    pub state: ::std::option::Option<crate::types::State>,
}
impl ModalityProcessingConfiguration {
    /// State
    pub fn state(&self) -> ::std::option::Option<&crate::types::State> {
        self.state.as_ref()
    }
}
impl ModalityProcessingConfiguration {
    /// Creates a new builder-style object to manufacture [`ModalityProcessingConfiguration`](crate::types::ModalityProcessingConfiguration).
    pub fn builder() -> crate::types::builders::ModalityProcessingConfigurationBuilder {
        crate::types::builders::ModalityProcessingConfigurationBuilder::default()
    }
}

/// A builder for [`ModalityProcessingConfiguration`](crate::types::ModalityProcessingConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ModalityProcessingConfigurationBuilder {
    pub(crate) state: ::std::option::Option<crate::types::State>,
}
impl ModalityProcessingConfigurationBuilder {
    /// State
    pub fn state(mut self, input: crate::types::State) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// State
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::State>) -> Self {
        self.state = input;
        self
    }
    /// State
    pub fn get_state(&self) -> &::std::option::Option<crate::types::State> {
        &self.state
    }
    /// Consumes the builder and constructs a [`ModalityProcessingConfiguration`](crate::types::ModalityProcessingConfiguration).
    pub fn build(self) -> crate::types::ModalityProcessingConfiguration {
        crate::types::ModalityProcessingConfiguration { state: self.state }
    }
}
