// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Contains the information of a DataAutomationProject.
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DataAutomationProject {
    /// ARN of a DataAutomationProject
    pub project_arn: ::std::string::String,
    /// Time Stamp
    pub creation_time: ::aws_smithy_types::DateTime,
    /// Time Stamp
    pub last_modified_time: ::aws_smithy_types::DateTime,
    /// Name of the DataAutomationProject
    pub project_name: ::std::string::String,
    /// Stage of the Project
    pub project_stage: ::std::option::Option<crate::types::DataAutomationProjectStage>,
    /// Description of the DataAutomationProject
    pub project_description: ::std::option::Option<::std::string::String>,
    /// Standard output configuration
    pub standard_output_configuration: ::std::option::Option<crate::types::StandardOutputConfiguration>,
    /// Custom output configuration
    pub custom_output_configuration: ::std::option::Option<crate::types::CustomOutputConfiguration>,
    /// Override configuration
    pub override_configuration: ::std::option::Option<crate::types::OverrideConfiguration>,
    /// Status of Data Automation Project
    pub status: crate::types::DataAutomationProjectStatus,
    /// KMS Key Identifier
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// KMS Encryption Context
    pub kms_encryption_context: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl DataAutomationProject {
    /// ARN of a DataAutomationProject
    pub fn project_arn(&self) -> &str {
        use std::ops::Deref;
        self.project_arn.deref()
    }
    /// Time Stamp
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// Time Stamp
    pub fn last_modified_time(&self) -> &::aws_smithy_types::DateTime {
        &self.last_modified_time
    }
    /// Name of the DataAutomationProject
    pub fn project_name(&self) -> &str {
        use std::ops::Deref;
        self.project_name.deref()
    }
    /// Stage of the Project
    pub fn project_stage(&self) -> ::std::option::Option<&crate::types::DataAutomationProjectStage> {
        self.project_stage.as_ref()
    }
    /// Description of the DataAutomationProject
    pub fn project_description(&self) -> ::std::option::Option<&str> {
        self.project_description.as_deref()
    }
    /// Standard output configuration
    pub fn standard_output_configuration(&self) -> ::std::option::Option<&crate::types::StandardOutputConfiguration> {
        self.standard_output_configuration.as_ref()
    }
    /// Custom output configuration
    pub fn custom_output_configuration(&self) -> ::std::option::Option<&crate::types::CustomOutputConfiguration> {
        self.custom_output_configuration.as_ref()
    }
    /// Override configuration
    pub fn override_configuration(&self) -> ::std::option::Option<&crate::types::OverrideConfiguration> {
        self.override_configuration.as_ref()
    }
    /// Status of Data Automation Project
    pub fn status(&self) -> &crate::types::DataAutomationProjectStatus {
        &self.status
    }
    /// KMS Key Identifier
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// KMS Encryption Context
    pub fn kms_encryption_context(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.kms_encryption_context.as_ref()
    }
}
impl ::std::fmt::Debug for DataAutomationProject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DataAutomationProject");
        formatter.field("project_arn", &self.project_arn);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("last_modified_time", &self.last_modified_time);
        formatter.field("project_name", &"*** Sensitive Data Redacted ***");
        formatter.field("project_stage", &self.project_stage);
        formatter.field("project_description", &"*** Sensitive Data Redacted ***");
        formatter.field("standard_output_configuration", &self.standard_output_configuration);
        formatter.field("custom_output_configuration", &self.custom_output_configuration);
        formatter.field("override_configuration", &self.override_configuration);
        formatter.field("status", &self.status);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("kms_encryption_context", &self.kms_encryption_context);
        formatter.finish()
    }
}
impl DataAutomationProject {
    /// Creates a new builder-style object to manufacture [`DataAutomationProject`](crate::types::DataAutomationProject).
    pub fn builder() -> crate::types::builders::DataAutomationProjectBuilder {
        crate::types::builders::DataAutomationProjectBuilder::default()
    }
}

/// A builder for [`DataAutomationProject`](crate::types::DataAutomationProject).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct DataAutomationProjectBuilder {
    pub(crate) project_arn: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) project_name: ::std::option::Option<::std::string::String>,
    pub(crate) project_stage: ::std::option::Option<crate::types::DataAutomationProjectStage>,
    pub(crate) project_description: ::std::option::Option<::std::string::String>,
    pub(crate) standard_output_configuration: ::std::option::Option<crate::types::StandardOutputConfiguration>,
    pub(crate) custom_output_configuration: ::std::option::Option<crate::types::CustomOutputConfiguration>,
    pub(crate) override_configuration: ::std::option::Option<crate::types::OverrideConfiguration>,
    pub(crate) status: ::std::option::Option<crate::types::DataAutomationProjectStatus>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) kms_encryption_context: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl DataAutomationProjectBuilder {
    /// ARN of a DataAutomationProject
    /// This field is required.
    pub fn project_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// ARN of a DataAutomationProject
    pub fn set_project_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_arn = input;
        self
    }
    /// ARN of a DataAutomationProject
    pub fn get_project_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_arn
    }
    /// Time Stamp
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// Time Stamp
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// Time Stamp
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// Time Stamp
    /// This field is required.
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// Time Stamp
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// Time Stamp
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// Name of the DataAutomationProject
    /// This field is required.
    pub fn project_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_name = ::std::option::Option::Some(input.into());
        self
    }
    /// Name of the DataAutomationProject
    pub fn set_project_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// Name of the DataAutomationProject
    pub fn get_project_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_name
    }
    /// Stage of the Project
    pub fn project_stage(mut self, input: crate::types::DataAutomationProjectStage) -> Self {
        self.project_stage = ::std::option::Option::Some(input);
        self
    }
    /// Stage of the Project
    pub fn set_project_stage(mut self, input: ::std::option::Option<crate::types::DataAutomationProjectStage>) -> Self {
        self.project_stage = input;
        self
    }
    /// Stage of the Project
    pub fn get_project_stage(&self) -> &::std::option::Option<crate::types::DataAutomationProjectStage> {
        &self.project_stage
    }
    /// Description of the DataAutomationProject
    pub fn project_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_description = ::std::option::Option::Some(input.into());
        self
    }
    /// Description of the DataAutomationProject
    pub fn set_project_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_description = input;
        self
    }
    /// Description of the DataAutomationProject
    pub fn get_project_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_description
    }
    /// Standard output configuration
    pub fn standard_output_configuration(mut self, input: crate::types::StandardOutputConfiguration) -> Self {
        self.standard_output_configuration = ::std::option::Option::Some(input);
        self
    }
    /// Standard output configuration
    pub fn set_standard_output_configuration(mut self, input: ::std::option::Option<crate::types::StandardOutputConfiguration>) -> Self {
        self.standard_output_configuration = input;
        self
    }
    /// Standard output configuration
    pub fn get_standard_output_configuration(&self) -> &::std::option::Option<crate::types::StandardOutputConfiguration> {
        &self.standard_output_configuration
    }
    /// Custom output configuration
    pub fn custom_output_configuration(mut self, input: crate::types::CustomOutputConfiguration) -> Self {
        self.custom_output_configuration = ::std::option::Option::Some(input);
        self
    }
    /// Custom output configuration
    pub fn set_custom_output_configuration(mut self, input: ::std::option::Option<crate::types::CustomOutputConfiguration>) -> Self {
        self.custom_output_configuration = input;
        self
    }
    /// Custom output configuration
    pub fn get_custom_output_configuration(&self) -> &::std::option::Option<crate::types::CustomOutputConfiguration> {
        &self.custom_output_configuration
    }
    /// Override configuration
    pub fn override_configuration(mut self, input: crate::types::OverrideConfiguration) -> Self {
        self.override_configuration = ::std::option::Option::Some(input);
        self
    }
    /// Override configuration
    pub fn set_override_configuration(mut self, input: ::std::option::Option<crate::types::OverrideConfiguration>) -> Self {
        self.override_configuration = input;
        self
    }
    /// Override configuration
    pub fn get_override_configuration(&self) -> &::std::option::Option<crate::types::OverrideConfiguration> {
        &self.override_configuration
    }
    /// Status of Data Automation Project
    /// This field is required.
    pub fn status(mut self, input: crate::types::DataAutomationProjectStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// Status of Data Automation Project
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DataAutomationProjectStatus>) -> Self {
        self.status = input;
        self
    }
    /// Status of Data Automation Project
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DataAutomationProjectStatus> {
        &self.status
    }
    /// KMS Key Identifier
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// KMS Key Identifier
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// KMS Key Identifier
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// Adds a key-value pair to `kms_encryption_context`.
    ///
    /// To override the contents of this collection use [`set_kms_encryption_context`](Self::set_kms_encryption_context).
    ///
    /// KMS Encryption Context
    pub fn kms_encryption_context(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.kms_encryption_context.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.kms_encryption_context = ::std::option::Option::Some(hash_map);
        self
    }
    /// KMS Encryption Context
    pub fn set_kms_encryption_context(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.kms_encryption_context = input;
        self
    }
    /// KMS Encryption Context
    pub fn get_kms_encryption_context(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.kms_encryption_context
    }
    /// Consumes the builder and constructs a [`DataAutomationProject`](crate::types::DataAutomationProject).
    /// This method will fail if any of the following fields are not set:
    /// - [`project_arn`](crate::types::builders::DataAutomationProjectBuilder::project_arn)
    /// - [`creation_time`](crate::types::builders::DataAutomationProjectBuilder::creation_time)
    /// - [`last_modified_time`](crate::types::builders::DataAutomationProjectBuilder::last_modified_time)
    /// - [`project_name`](crate::types::builders::DataAutomationProjectBuilder::project_name)
    /// - [`status`](crate::types::builders::DataAutomationProjectBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::DataAutomationProject, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataAutomationProject {
            project_arn: self.project_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "project_arn",
                    "project_arn was not specified but it is required when building DataAutomationProject",
                )
            })?,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building DataAutomationProject",
                )
            })?,
            last_modified_time: self.last_modified_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_modified_time",
                    "last_modified_time was not specified but it is required when building DataAutomationProject",
                )
            })?,
            project_name: self.project_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "project_name",
                    "project_name was not specified but it is required when building DataAutomationProject",
                )
            })?,
            project_stage: self.project_stage,
            project_description: self.project_description,
            standard_output_configuration: self.standard_output_configuration,
            custom_output_configuration: self.custom_output_configuration,
            override_configuration: self.override_configuration,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building DataAutomationProject",
                )
            })?,
            kms_key_id: self.kms_key_id,
            kms_encryption_context: self.kms_encryption_context,
        })
    }
}
impl ::std::fmt::Debug for DataAutomationProjectBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DataAutomationProjectBuilder");
        formatter.field("project_arn", &self.project_arn);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("last_modified_time", &self.last_modified_time);
        formatter.field("project_name", &"*** Sensitive Data Redacted ***");
        formatter.field("project_stage", &self.project_stage);
        formatter.field("project_description", &"*** Sensitive Data Redacted ***");
        formatter.field("standard_output_configuration", &self.standard_output_configuration);
        formatter.field("custom_output_configuration", &self.custom_output_configuration);
        formatter.field("override_configuration", &self.override_configuration);
        formatter.field("status", &self.status);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("kms_encryption_context", &self.kms_encryption_context);
        formatter.finish()
    }
}
