// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Data Automation Project Filter
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataAutomationProjectFilter {
    /// ARN of a DataAutomationProject
    pub project_arn: ::std::string::String,
    /// Stage of the Project
    pub project_stage: ::std::option::Option<crate::types::DataAutomationProjectStage>,
}
impl DataAutomationProjectFilter {
    /// ARN of a DataAutomationProject
    pub fn project_arn(&self) -> &str {
        use std::ops::Deref;
        self.project_arn.deref()
    }
    /// Stage of the Project
    pub fn project_stage(&self) -> ::std::option::Option<&crate::types::DataAutomationProjectStage> {
        self.project_stage.as_ref()
    }
}
impl DataAutomationProjectFilter {
    /// Creates a new builder-style object to manufacture [`DataAutomationProjectFilter`](crate::types::DataAutomationProjectFilter).
    pub fn builder() -> crate::types::builders::DataAutomationProjectFilterBuilder {
        crate::types::builders::DataAutomationProjectFilterBuilder::default()
    }
}

/// A builder for [`DataAutomationProjectFilter`](crate::types::DataAutomationProjectFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataAutomationProjectFilterBuilder {
    pub(crate) project_arn: ::std::option::Option<::std::string::String>,
    pub(crate) project_stage: ::std::option::Option<crate::types::DataAutomationProjectStage>,
}
impl DataAutomationProjectFilterBuilder {
    /// ARN of a DataAutomationProject
    /// This field is required.
    pub fn project_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// ARN of a DataAutomationProject
    pub fn set_project_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_arn = input;
        self
    }
    /// ARN of a DataAutomationProject
    pub fn get_project_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_arn
    }
    /// Stage of the Project
    pub fn project_stage(mut self, input: crate::types::DataAutomationProjectStage) -> Self {
        self.project_stage = ::std::option::Option::Some(input);
        self
    }
    /// Stage of the Project
    pub fn set_project_stage(mut self, input: ::std::option::Option<crate::types::DataAutomationProjectStage>) -> Self {
        self.project_stage = input;
        self
    }
    /// Stage of the Project
    pub fn get_project_stage(&self) -> &::std::option::Option<crate::types::DataAutomationProjectStage> {
        &self.project_stage
    }
    /// Consumes the builder and constructs a [`DataAutomationProjectFilter`](crate::types::DataAutomationProjectFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`project_arn`](crate::types::builders::DataAutomationProjectFilterBuilder::project_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::DataAutomationProjectFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataAutomationProjectFilter {
            project_arn: self.project_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "project_arn",
                    "project_arn was not specified but it is required when building DataAutomationProjectFilter",
                )
            })?,
            project_stage: self.project_stage,
        })
    }
}
