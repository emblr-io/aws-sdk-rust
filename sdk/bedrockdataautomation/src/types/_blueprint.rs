// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Contains the information of a Blueprint.
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Blueprint {
    /// ARN of a Blueprint
    pub blueprint_arn: ::std::string::String,
    /// Schema of the blueprint
    pub schema: ::std::string::String,
    /// Type
    pub r#type: crate::types::Type,
    /// Time Stamp
    pub creation_time: ::aws_smithy_types::DateTime,
    /// Time Stamp
    pub last_modified_time: ::aws_smithy_types::DateTime,
    /// Name of the Blueprint
    pub blueprint_name: ::std::string::String,
    /// Blueprint Version
    pub blueprint_version: ::std::option::Option<::std::string::String>,
    /// Stage of the Blueprint
    pub blueprint_stage: ::std::option::Option<crate::types::BlueprintStage>,
    /// KMS Key Identifier
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// KMS Encryption Context
    pub kms_encryption_context: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl Blueprint {
    /// ARN of a Blueprint
    pub fn blueprint_arn(&self) -> &str {
        use std::ops::Deref;
        self.blueprint_arn.deref()
    }
    /// Schema of the blueprint
    pub fn schema(&self) -> &str {
        use std::ops::Deref;
        self.schema.deref()
    }
    /// Type
    pub fn r#type(&self) -> &crate::types::Type {
        &self.r#type
    }
    /// Time Stamp
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// Time Stamp
    pub fn last_modified_time(&self) -> &::aws_smithy_types::DateTime {
        &self.last_modified_time
    }
    /// Name of the Blueprint
    pub fn blueprint_name(&self) -> &str {
        use std::ops::Deref;
        self.blueprint_name.deref()
    }
    /// Blueprint Version
    pub fn blueprint_version(&self) -> ::std::option::Option<&str> {
        self.blueprint_version.as_deref()
    }
    /// Stage of the Blueprint
    pub fn blueprint_stage(&self) -> ::std::option::Option<&crate::types::BlueprintStage> {
        self.blueprint_stage.as_ref()
    }
    /// KMS Key Identifier
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// KMS Encryption Context
    pub fn kms_encryption_context(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.kms_encryption_context.as_ref()
    }
}
impl ::std::fmt::Debug for Blueprint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Blueprint");
        formatter.field("blueprint_arn", &self.blueprint_arn);
        formatter.field("schema", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("last_modified_time", &self.last_modified_time);
        formatter.field("blueprint_name", &"*** Sensitive Data Redacted ***");
        formatter.field("blueprint_version", &self.blueprint_version);
        formatter.field("blueprint_stage", &self.blueprint_stage);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("kms_encryption_context", &self.kms_encryption_context);
        formatter.finish()
    }
}
impl Blueprint {
    /// Creates a new builder-style object to manufacture [`Blueprint`](crate::types::Blueprint).
    pub fn builder() -> crate::types::builders::BlueprintBuilder {
        crate::types::builders::BlueprintBuilder::default()
    }
}

/// A builder for [`Blueprint`](crate::types::Blueprint).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct BlueprintBuilder {
    pub(crate) blueprint_arn: ::std::option::Option<::std::string::String>,
    pub(crate) schema: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::Type>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) blueprint_name: ::std::option::Option<::std::string::String>,
    pub(crate) blueprint_version: ::std::option::Option<::std::string::String>,
    pub(crate) blueprint_stage: ::std::option::Option<crate::types::BlueprintStage>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) kms_encryption_context: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl BlueprintBuilder {
    /// ARN of a Blueprint
    /// This field is required.
    pub fn blueprint_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.blueprint_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// ARN of a Blueprint
    pub fn set_blueprint_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.blueprint_arn = input;
        self
    }
    /// ARN of a Blueprint
    pub fn get_blueprint_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.blueprint_arn
    }
    /// Schema of the blueprint
    /// This field is required.
    pub fn schema(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schema = ::std::option::Option::Some(input.into());
        self
    }
    /// Schema of the blueprint
    pub fn set_schema(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schema = input;
        self
    }
    /// Schema of the blueprint
    pub fn get_schema(&self) -> &::std::option::Option<::std::string::String> {
        &self.schema
    }
    /// Type
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::Type) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// Type
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::Type>) -> Self {
        self.r#type = input;
        self
    }
    /// Type
    pub fn get_type(&self) -> &::std::option::Option<crate::types::Type> {
        &self.r#type
    }
    /// Time Stamp
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// Time Stamp
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// Time Stamp
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// Time Stamp
    /// This field is required.
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// Time Stamp
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// Time Stamp
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// Name of the Blueprint
    /// This field is required.
    pub fn blueprint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.blueprint_name = ::std::option::Option::Some(input.into());
        self
    }
    /// Name of the Blueprint
    pub fn set_blueprint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.blueprint_name = input;
        self
    }
    /// Name of the Blueprint
    pub fn get_blueprint_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.blueprint_name
    }
    /// Blueprint Version
    pub fn blueprint_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.blueprint_version = ::std::option::Option::Some(input.into());
        self
    }
    /// Blueprint Version
    pub fn set_blueprint_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.blueprint_version = input;
        self
    }
    /// Blueprint Version
    pub fn get_blueprint_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.blueprint_version
    }
    /// Stage of the Blueprint
    pub fn blueprint_stage(mut self, input: crate::types::BlueprintStage) -> Self {
        self.blueprint_stage = ::std::option::Option::Some(input);
        self
    }
    /// Stage of the Blueprint
    pub fn set_blueprint_stage(mut self, input: ::std::option::Option<crate::types::BlueprintStage>) -> Self {
        self.blueprint_stage = input;
        self
    }
    /// Stage of the Blueprint
    pub fn get_blueprint_stage(&self) -> &::std::option::Option<crate::types::BlueprintStage> {
        &self.blueprint_stage
    }
    /// KMS Key Identifier
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// KMS Key Identifier
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// KMS Key Identifier
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// Adds a key-value pair to `kms_encryption_context`.
    ///
    /// To override the contents of this collection use [`set_kms_encryption_context`](Self::set_kms_encryption_context).
    ///
    /// KMS Encryption Context
    pub fn kms_encryption_context(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.kms_encryption_context.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.kms_encryption_context = ::std::option::Option::Some(hash_map);
        self
    }
    /// KMS Encryption Context
    pub fn set_kms_encryption_context(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.kms_encryption_context = input;
        self
    }
    /// KMS Encryption Context
    pub fn get_kms_encryption_context(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.kms_encryption_context
    }
    /// Consumes the builder and constructs a [`Blueprint`](crate::types::Blueprint).
    /// This method will fail if any of the following fields are not set:
    /// - [`blueprint_arn`](crate::types::builders::BlueprintBuilder::blueprint_arn)
    /// - [`schema`](crate::types::builders::BlueprintBuilder::schema)
    /// - [`r#type`](crate::types::builders::BlueprintBuilder::type)
    /// - [`creation_time`](crate::types::builders::BlueprintBuilder::creation_time)
    /// - [`last_modified_time`](crate::types::builders::BlueprintBuilder::last_modified_time)
    /// - [`blueprint_name`](crate::types::builders::BlueprintBuilder::blueprint_name)
    pub fn build(self) -> ::std::result::Result<crate::types::Blueprint, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Blueprint {
            blueprint_arn: self.blueprint_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "blueprint_arn",
                    "blueprint_arn was not specified but it is required when building Blueprint",
                )
            })?,
            schema: self.schema.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "schema",
                    "schema was not specified but it is required when building Blueprint",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building Blueprint",
                )
            })?,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building Blueprint",
                )
            })?,
            last_modified_time: self.last_modified_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_modified_time",
                    "last_modified_time was not specified but it is required when building Blueprint",
                )
            })?,
            blueprint_name: self.blueprint_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "blueprint_name",
                    "blueprint_name was not specified but it is required when building Blueprint",
                )
            })?,
            blueprint_version: self.blueprint_version,
            blueprint_stage: self.blueprint_stage,
            kms_key_id: self.kms_key_id,
            kms_encryption_context: self.kms_encryption_context,
        })
    }
}
impl ::std::fmt::Debug for BlueprintBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BlueprintBuilder");
        formatter.field("blueprint_arn", &self.blueprint_arn);
        formatter.field("schema", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("last_modified_time", &self.last_modified_time);
        formatter.field("blueprint_name", &"*** Sensitive Data Redacted ***");
        formatter.field("blueprint_version", &self.blueprint_version);
        formatter.field("blueprint_stage", &self.blueprint_stage);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("kms_encryption_context", &self.kms_encryption_context);
        formatter.finish()
    }
}
