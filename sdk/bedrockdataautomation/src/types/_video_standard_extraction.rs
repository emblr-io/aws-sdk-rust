// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Standard Extraction Configuration of Video
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VideoStandardExtraction {
    /// Category of Video Extraction
    pub category: ::std::option::Option<crate::types::VideoExtractionCategory>,
    /// Bounding Box Configuration of Video Extraction
    pub bounding_box: ::std::option::Option<crate::types::VideoBoundingBox>,
}
impl VideoStandardExtraction {
    /// Category of Video Extraction
    pub fn category(&self) -> ::std::option::Option<&crate::types::VideoExtractionCategory> {
        self.category.as_ref()
    }
    /// Bounding Box Configuration of Video Extraction
    pub fn bounding_box(&self) -> ::std::option::Option<&crate::types::VideoBoundingBox> {
        self.bounding_box.as_ref()
    }
}
impl VideoStandardExtraction {
    /// Creates a new builder-style object to manufacture [`VideoStandardExtraction`](crate::types::VideoStandardExtraction).
    pub fn builder() -> crate::types::builders::VideoStandardExtractionBuilder {
        crate::types::builders::VideoStandardExtractionBuilder::default()
    }
}

/// A builder for [`VideoStandardExtraction`](crate::types::VideoStandardExtraction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VideoStandardExtractionBuilder {
    pub(crate) category: ::std::option::Option<crate::types::VideoExtractionCategory>,
    pub(crate) bounding_box: ::std::option::Option<crate::types::VideoBoundingBox>,
}
impl VideoStandardExtractionBuilder {
    /// Category of Video Extraction
    /// This field is required.
    pub fn category(mut self, input: crate::types::VideoExtractionCategory) -> Self {
        self.category = ::std::option::Option::Some(input);
        self
    }
    /// Category of Video Extraction
    pub fn set_category(mut self, input: ::std::option::Option<crate::types::VideoExtractionCategory>) -> Self {
        self.category = input;
        self
    }
    /// Category of Video Extraction
    pub fn get_category(&self) -> &::std::option::Option<crate::types::VideoExtractionCategory> {
        &self.category
    }
    /// Bounding Box Configuration of Video Extraction
    /// This field is required.
    pub fn bounding_box(mut self, input: crate::types::VideoBoundingBox) -> Self {
        self.bounding_box = ::std::option::Option::Some(input);
        self
    }
    /// Bounding Box Configuration of Video Extraction
    pub fn set_bounding_box(mut self, input: ::std::option::Option<crate::types::VideoBoundingBox>) -> Self {
        self.bounding_box = input;
        self
    }
    /// Bounding Box Configuration of Video Extraction
    pub fn get_bounding_box(&self) -> &::std::option::Option<crate::types::VideoBoundingBox> {
        &self.bounding_box
    }
    /// Consumes the builder and constructs a [`VideoStandardExtraction`](crate::types::VideoStandardExtraction).
    pub fn build(self) -> crate::types::VideoStandardExtraction {
        crate::types::VideoStandardExtraction {
            category: self.category,
            bounding_box: self.bounding_box,
        }
    }
}
