// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// List DataAutomationProject Request
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListDataAutomationProjectsInput {
    /// Max Results
    pub max_results: ::std::option::Option<i32>,
    /// Pagination token
    pub next_token: ::std::option::Option<::std::string::String>,
    /// Project Stage filter
    pub project_stage_filter: ::std::option::Option<crate::types::DataAutomationProjectStageFilter>,
    /// Blueprint Filter
    pub blueprint_filter: ::std::option::Option<crate::types::BlueprintFilter>,
    /// Resource Owner
    pub resource_owner: ::std::option::Option<crate::types::ResourceOwner>,
}
impl ListDataAutomationProjectsInput {
    /// Max Results
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// Pagination token
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// Project Stage filter
    pub fn project_stage_filter(&self) -> ::std::option::Option<&crate::types::DataAutomationProjectStageFilter> {
        self.project_stage_filter.as_ref()
    }
    /// Blueprint Filter
    pub fn blueprint_filter(&self) -> ::std::option::Option<&crate::types::BlueprintFilter> {
        self.blueprint_filter.as_ref()
    }
    /// Resource Owner
    pub fn resource_owner(&self) -> ::std::option::Option<&crate::types::ResourceOwner> {
        self.resource_owner.as_ref()
    }
}
impl ListDataAutomationProjectsInput {
    /// Creates a new builder-style object to manufacture [`ListDataAutomationProjectsInput`](crate::operation::list_data_automation_projects::ListDataAutomationProjectsInput).
    pub fn builder() -> crate::operation::list_data_automation_projects::builders::ListDataAutomationProjectsInputBuilder {
        crate::operation::list_data_automation_projects::builders::ListDataAutomationProjectsInputBuilder::default()
    }
}

/// A builder for [`ListDataAutomationProjectsInput`](crate::operation::list_data_automation_projects::ListDataAutomationProjectsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListDataAutomationProjectsInputBuilder {
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) project_stage_filter: ::std::option::Option<crate::types::DataAutomationProjectStageFilter>,
    pub(crate) blueprint_filter: ::std::option::Option<crate::types::BlueprintFilter>,
    pub(crate) resource_owner: ::std::option::Option<crate::types::ResourceOwner>,
}
impl ListDataAutomationProjectsInputBuilder {
    /// Max Results
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// Max Results
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Max Results
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Pagination token
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// Pagination token
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Pagination token
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Project Stage filter
    pub fn project_stage_filter(mut self, input: crate::types::DataAutomationProjectStageFilter) -> Self {
        self.project_stage_filter = ::std::option::Option::Some(input);
        self
    }
    /// Project Stage filter
    pub fn set_project_stage_filter(mut self, input: ::std::option::Option<crate::types::DataAutomationProjectStageFilter>) -> Self {
        self.project_stage_filter = input;
        self
    }
    /// Project Stage filter
    pub fn get_project_stage_filter(&self) -> &::std::option::Option<crate::types::DataAutomationProjectStageFilter> {
        &self.project_stage_filter
    }
    /// Blueprint Filter
    pub fn blueprint_filter(mut self, input: crate::types::BlueprintFilter) -> Self {
        self.blueprint_filter = ::std::option::Option::Some(input);
        self
    }
    /// Blueprint Filter
    pub fn set_blueprint_filter(mut self, input: ::std::option::Option<crate::types::BlueprintFilter>) -> Self {
        self.blueprint_filter = input;
        self
    }
    /// Blueprint Filter
    pub fn get_blueprint_filter(&self) -> &::std::option::Option<crate::types::BlueprintFilter> {
        &self.blueprint_filter
    }
    /// Resource Owner
    pub fn resource_owner(mut self, input: crate::types::ResourceOwner) -> Self {
        self.resource_owner = ::std::option::Option::Some(input);
        self
    }
    /// Resource Owner
    pub fn set_resource_owner(mut self, input: ::std::option::Option<crate::types::ResourceOwner>) -> Self {
        self.resource_owner = input;
        self
    }
    /// Resource Owner
    pub fn get_resource_owner(&self) -> &::std::option::Option<crate::types::ResourceOwner> {
        &self.resource_owner
    }
    /// Consumes the builder and constructs a [`ListDataAutomationProjectsInput`](crate::operation::list_data_automation_projects::ListDataAutomationProjectsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_data_automation_projects::ListDataAutomationProjectsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_data_automation_projects::ListDataAutomationProjectsInput {
            max_results: self.max_results,
            next_token: self.next_token,
            project_stage_filter: self.project_stage_filter,
            blueprint_filter: self.blueprint_filter,
            resource_owner: self.resource_owner,
        })
    }
}
