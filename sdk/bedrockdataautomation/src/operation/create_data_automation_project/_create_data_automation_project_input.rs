// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Create DataAutomationProject Request
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateDataAutomationProjectInput {
    /// Name of the DataAutomationProject
    pub project_name: ::std::option::Option<::std::string::String>,
    /// Description of the DataAutomationProject
    pub project_description: ::std::option::Option<::std::string::String>,
    /// Stage of the Project
    pub project_stage: ::std::option::Option<crate::types::DataAutomationProjectStage>,
    /// Standard output configuration
    pub standard_output_configuration: ::std::option::Option<crate::types::StandardOutputConfiguration>,
    /// Custom output configuration
    pub custom_output_configuration: ::std::option::Option<crate::types::CustomOutputConfiguration>,
    /// Override configuration
    pub override_configuration: ::std::option::Option<crate::types::OverrideConfiguration>,
    /// Client specified token used for idempotency checks
    pub client_token: ::std::option::Option<::std::string::String>,
    /// KMS Encryption Configuration
    pub encryption_configuration: ::std::option::Option<crate::types::EncryptionConfiguration>,
    /// List of tags
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateDataAutomationProjectInput {
    /// Name of the DataAutomationProject
    pub fn project_name(&self) -> ::std::option::Option<&str> {
        self.project_name.as_deref()
    }
    /// Description of the DataAutomationProject
    pub fn project_description(&self) -> ::std::option::Option<&str> {
        self.project_description.as_deref()
    }
    /// Stage of the Project
    pub fn project_stage(&self) -> ::std::option::Option<&crate::types::DataAutomationProjectStage> {
        self.project_stage.as_ref()
    }
    /// Standard output configuration
    pub fn standard_output_configuration(&self) -> ::std::option::Option<&crate::types::StandardOutputConfiguration> {
        self.standard_output_configuration.as_ref()
    }
    /// Custom output configuration
    pub fn custom_output_configuration(&self) -> ::std::option::Option<&crate::types::CustomOutputConfiguration> {
        self.custom_output_configuration.as_ref()
    }
    /// Override configuration
    pub fn override_configuration(&self) -> ::std::option::Option<&crate::types::OverrideConfiguration> {
        self.override_configuration.as_ref()
    }
    /// Client specified token used for idempotency checks
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// KMS Encryption Configuration
    pub fn encryption_configuration(&self) -> ::std::option::Option<&crate::types::EncryptionConfiguration> {
        self.encryption_configuration.as_ref()
    }
    /// List of tags
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for CreateDataAutomationProjectInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDataAutomationProjectInput");
        formatter.field("project_name", &"*** Sensitive Data Redacted ***");
        formatter.field("project_description", &"*** Sensitive Data Redacted ***");
        formatter.field("project_stage", &self.project_stage);
        formatter.field("standard_output_configuration", &self.standard_output_configuration);
        formatter.field("custom_output_configuration", &self.custom_output_configuration);
        formatter.field("override_configuration", &self.override_configuration);
        formatter.field("client_token", &self.client_token);
        formatter.field("encryption_configuration", &self.encryption_configuration);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl CreateDataAutomationProjectInput {
    /// Creates a new builder-style object to manufacture [`CreateDataAutomationProjectInput`](crate::operation::create_data_automation_project::CreateDataAutomationProjectInput).
    pub fn builder() -> crate::operation::create_data_automation_project::builders::CreateDataAutomationProjectInputBuilder {
        crate::operation::create_data_automation_project::builders::CreateDataAutomationProjectInputBuilder::default()
    }
}

/// A builder for [`CreateDataAutomationProjectInput`](crate::operation::create_data_automation_project::CreateDataAutomationProjectInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateDataAutomationProjectInputBuilder {
    pub(crate) project_name: ::std::option::Option<::std::string::String>,
    pub(crate) project_description: ::std::option::Option<::std::string::String>,
    pub(crate) project_stage: ::std::option::Option<crate::types::DataAutomationProjectStage>,
    pub(crate) standard_output_configuration: ::std::option::Option<crate::types::StandardOutputConfiguration>,
    pub(crate) custom_output_configuration: ::std::option::Option<crate::types::CustomOutputConfiguration>,
    pub(crate) override_configuration: ::std::option::Option<crate::types::OverrideConfiguration>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_configuration: ::std::option::Option<crate::types::EncryptionConfiguration>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateDataAutomationProjectInputBuilder {
    /// Name of the DataAutomationProject
    /// This field is required.
    pub fn project_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_name = ::std::option::Option::Some(input.into());
        self
    }
    /// Name of the DataAutomationProject
    pub fn set_project_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// Name of the DataAutomationProject
    pub fn get_project_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_name
    }
    /// Description of the DataAutomationProject
    pub fn project_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_description = ::std::option::Option::Some(input.into());
        self
    }
    /// Description of the DataAutomationProject
    pub fn set_project_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_description = input;
        self
    }
    /// Description of the DataAutomationProject
    pub fn get_project_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_description
    }
    /// Stage of the Project
    pub fn project_stage(mut self, input: crate::types::DataAutomationProjectStage) -> Self {
        self.project_stage = ::std::option::Option::Some(input);
        self
    }
    /// Stage of the Project
    pub fn set_project_stage(mut self, input: ::std::option::Option<crate::types::DataAutomationProjectStage>) -> Self {
        self.project_stage = input;
        self
    }
    /// Stage of the Project
    pub fn get_project_stage(&self) -> &::std::option::Option<crate::types::DataAutomationProjectStage> {
        &self.project_stage
    }
    /// Standard output configuration
    /// This field is required.
    pub fn standard_output_configuration(mut self, input: crate::types::StandardOutputConfiguration) -> Self {
        self.standard_output_configuration = ::std::option::Option::Some(input);
        self
    }
    /// Standard output configuration
    pub fn set_standard_output_configuration(mut self, input: ::std::option::Option<crate::types::StandardOutputConfiguration>) -> Self {
        self.standard_output_configuration = input;
        self
    }
    /// Standard output configuration
    pub fn get_standard_output_configuration(&self) -> &::std::option::Option<crate::types::StandardOutputConfiguration> {
        &self.standard_output_configuration
    }
    /// Custom output configuration
    pub fn custom_output_configuration(mut self, input: crate::types::CustomOutputConfiguration) -> Self {
        self.custom_output_configuration = ::std::option::Option::Some(input);
        self
    }
    /// Custom output configuration
    pub fn set_custom_output_configuration(mut self, input: ::std::option::Option<crate::types::CustomOutputConfiguration>) -> Self {
        self.custom_output_configuration = input;
        self
    }
    /// Custom output configuration
    pub fn get_custom_output_configuration(&self) -> &::std::option::Option<crate::types::CustomOutputConfiguration> {
        &self.custom_output_configuration
    }
    /// Override configuration
    pub fn override_configuration(mut self, input: crate::types::OverrideConfiguration) -> Self {
        self.override_configuration = ::std::option::Option::Some(input);
        self
    }
    /// Override configuration
    pub fn set_override_configuration(mut self, input: ::std::option::Option<crate::types::OverrideConfiguration>) -> Self {
        self.override_configuration = input;
        self
    }
    /// Override configuration
    pub fn get_override_configuration(&self) -> &::std::option::Option<crate::types::OverrideConfiguration> {
        &self.override_configuration
    }
    /// Client specified token used for idempotency checks
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// Client specified token used for idempotency checks
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Client specified token used for idempotency checks
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// KMS Encryption Configuration
    pub fn encryption_configuration(mut self, input: crate::types::EncryptionConfiguration) -> Self {
        self.encryption_configuration = ::std::option::Option::Some(input);
        self
    }
    /// KMS Encryption Configuration
    pub fn set_encryption_configuration(mut self, input: ::std::option::Option<crate::types::EncryptionConfiguration>) -> Self {
        self.encryption_configuration = input;
        self
    }
    /// KMS Encryption Configuration
    pub fn get_encryption_configuration(&self) -> &::std::option::Option<crate::types::EncryptionConfiguration> {
        &self.encryption_configuration
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// List of tags
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// List of tags
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// List of tags
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateDataAutomationProjectInput`](crate::operation::create_data_automation_project::CreateDataAutomationProjectInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_data_automation_project::CreateDataAutomationProjectInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_data_automation_project::CreateDataAutomationProjectInput {
            project_name: self.project_name,
            project_description: self.project_description,
            project_stage: self.project_stage,
            standard_output_configuration: self.standard_output_configuration,
            custom_output_configuration: self.custom_output_configuration,
            override_configuration: self.override_configuration,
            client_token: self.client_token,
            encryption_configuration: self.encryption_configuration,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for CreateDataAutomationProjectInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDataAutomationProjectInputBuilder");
        formatter.field("project_name", &"*** Sensitive Data Redacted ***");
        formatter.field("project_description", &"*** Sensitive Data Redacted ***");
        formatter.field("project_stage", &self.project_stage);
        formatter.field("standard_output_configuration", &self.standard_output_configuration);
        formatter.field("custom_output_configuration", &self.custom_output_configuration);
        formatter.field("override_configuration", &self.override_configuration);
        formatter.field("client_token", &self.client_token);
        formatter.field("encryption_configuration", &self.encryption_configuration);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
