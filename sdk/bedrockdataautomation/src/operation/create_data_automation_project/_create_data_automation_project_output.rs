// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Create DataAutomationProject Response
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateDataAutomationProjectOutput {
    /// ARN of a DataAutomationProject
    pub project_arn: ::std::string::String,
    /// Stage of the Project
    pub project_stage: ::std::option::Option<crate::types::DataAutomationProjectStage>,
    /// Status of Data Automation Project
    pub status: ::std::option::Option<crate::types::DataAutomationProjectStatus>,
    _request_id: Option<String>,
}
impl CreateDataAutomationProjectOutput {
    /// ARN of a DataAutomationProject
    pub fn project_arn(&self) -> &str {
        use std::ops::Deref;
        self.project_arn.deref()
    }
    /// Stage of the Project
    pub fn project_stage(&self) -> ::std::option::Option<&crate::types::DataAutomationProjectStage> {
        self.project_stage.as_ref()
    }
    /// Status of Data Automation Project
    pub fn status(&self) -> ::std::option::Option<&crate::types::DataAutomationProjectStatus> {
        self.status.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for CreateDataAutomationProjectOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateDataAutomationProjectOutput {
    /// Creates a new builder-style object to manufacture [`CreateDataAutomationProjectOutput`](crate::operation::create_data_automation_project::CreateDataAutomationProjectOutput).
    pub fn builder() -> crate::operation::create_data_automation_project::builders::CreateDataAutomationProjectOutputBuilder {
        crate::operation::create_data_automation_project::builders::CreateDataAutomationProjectOutputBuilder::default()
    }
}

/// A builder for [`CreateDataAutomationProjectOutput`](crate::operation::create_data_automation_project::CreateDataAutomationProjectOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateDataAutomationProjectOutputBuilder {
    pub(crate) project_arn: ::std::option::Option<::std::string::String>,
    pub(crate) project_stage: ::std::option::Option<crate::types::DataAutomationProjectStage>,
    pub(crate) status: ::std::option::Option<crate::types::DataAutomationProjectStatus>,
    _request_id: Option<String>,
}
impl CreateDataAutomationProjectOutputBuilder {
    /// ARN of a DataAutomationProject
    /// This field is required.
    pub fn project_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// ARN of a DataAutomationProject
    pub fn set_project_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_arn = input;
        self
    }
    /// ARN of a DataAutomationProject
    pub fn get_project_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_arn
    }
    /// Stage of the Project
    pub fn project_stage(mut self, input: crate::types::DataAutomationProjectStage) -> Self {
        self.project_stage = ::std::option::Option::Some(input);
        self
    }
    /// Stage of the Project
    pub fn set_project_stage(mut self, input: ::std::option::Option<crate::types::DataAutomationProjectStage>) -> Self {
        self.project_stage = input;
        self
    }
    /// Stage of the Project
    pub fn get_project_stage(&self) -> &::std::option::Option<crate::types::DataAutomationProjectStage> {
        &self.project_stage
    }
    /// Status of Data Automation Project
    pub fn status(mut self, input: crate::types::DataAutomationProjectStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// Status of Data Automation Project
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DataAutomationProjectStatus>) -> Self {
        self.status = input;
        self
    }
    /// Status of Data Automation Project
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DataAutomationProjectStatus> {
        &self.status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateDataAutomationProjectOutput`](crate::operation::create_data_automation_project::CreateDataAutomationProjectOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`project_arn`](crate::operation::create_data_automation_project::builders::CreateDataAutomationProjectOutputBuilder::project_arn)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_data_automation_project::CreateDataAutomationProjectOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_data_automation_project::CreateDataAutomationProjectOutput {
            project_arn: self.project_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "project_arn",
                    "project_arn was not specified but it is required when building CreateDataAutomationProjectOutput",
                )
            })?,
            project_stage: self.project_stage,
            status: self.status,
            _request_id: self._request_id,
        })
    }
}
