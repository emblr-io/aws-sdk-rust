// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Update Blueprint Request
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateBlueprintInput {
    /// ARN generated at the server side when a Blueprint is created
    pub blueprint_arn: ::std::option::Option<::std::string::String>,
    /// Schema of the blueprint
    pub schema: ::std::option::Option<::std::string::String>,
    /// Stage of the Blueprint
    pub blueprint_stage: ::std::option::Option<crate::types::BlueprintStage>,
    /// KMS Encryption Configuration
    pub encryption_configuration: ::std::option::Option<crate::types::EncryptionConfiguration>,
}
impl UpdateBlueprintInput {
    /// ARN generated at the server side when a Blueprint is created
    pub fn blueprint_arn(&self) -> ::std::option::Option<&str> {
        self.blueprint_arn.as_deref()
    }
    /// Schema of the blueprint
    pub fn schema(&self) -> ::std::option::Option<&str> {
        self.schema.as_deref()
    }
    /// Stage of the Blueprint
    pub fn blueprint_stage(&self) -> ::std::option::Option<&crate::types::BlueprintStage> {
        self.blueprint_stage.as_ref()
    }
    /// KMS Encryption Configuration
    pub fn encryption_configuration(&self) -> ::std::option::Option<&crate::types::EncryptionConfiguration> {
        self.encryption_configuration.as_ref()
    }
}
impl ::std::fmt::Debug for UpdateBlueprintInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateBlueprintInput");
        formatter.field("blueprint_arn", &self.blueprint_arn);
        formatter.field("schema", &"*** Sensitive Data Redacted ***");
        formatter.field("blueprint_stage", &self.blueprint_stage);
        formatter.field("encryption_configuration", &self.encryption_configuration);
        formatter.finish()
    }
}
impl UpdateBlueprintInput {
    /// Creates a new builder-style object to manufacture [`UpdateBlueprintInput`](crate::operation::update_blueprint::UpdateBlueprintInput).
    pub fn builder() -> crate::operation::update_blueprint::builders::UpdateBlueprintInputBuilder {
        crate::operation::update_blueprint::builders::UpdateBlueprintInputBuilder::default()
    }
}

/// A builder for [`UpdateBlueprintInput`](crate::operation::update_blueprint::UpdateBlueprintInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateBlueprintInputBuilder {
    pub(crate) blueprint_arn: ::std::option::Option<::std::string::String>,
    pub(crate) schema: ::std::option::Option<::std::string::String>,
    pub(crate) blueprint_stage: ::std::option::Option<crate::types::BlueprintStage>,
    pub(crate) encryption_configuration: ::std::option::Option<crate::types::EncryptionConfiguration>,
}
impl UpdateBlueprintInputBuilder {
    /// ARN generated at the server side when a Blueprint is created
    /// This field is required.
    pub fn blueprint_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.blueprint_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// ARN generated at the server side when a Blueprint is created
    pub fn set_blueprint_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.blueprint_arn = input;
        self
    }
    /// ARN generated at the server side when a Blueprint is created
    pub fn get_blueprint_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.blueprint_arn
    }
    /// Schema of the blueprint
    /// This field is required.
    pub fn schema(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schema = ::std::option::Option::Some(input.into());
        self
    }
    /// Schema of the blueprint
    pub fn set_schema(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schema = input;
        self
    }
    /// Schema of the blueprint
    pub fn get_schema(&self) -> &::std::option::Option<::std::string::String> {
        &self.schema
    }
    /// Stage of the Blueprint
    pub fn blueprint_stage(mut self, input: crate::types::BlueprintStage) -> Self {
        self.blueprint_stage = ::std::option::Option::Some(input);
        self
    }
    /// Stage of the Blueprint
    pub fn set_blueprint_stage(mut self, input: ::std::option::Option<crate::types::BlueprintStage>) -> Self {
        self.blueprint_stage = input;
        self
    }
    /// Stage of the Blueprint
    pub fn get_blueprint_stage(&self) -> &::std::option::Option<crate::types::BlueprintStage> {
        &self.blueprint_stage
    }
    /// KMS Encryption Configuration
    pub fn encryption_configuration(mut self, input: crate::types::EncryptionConfiguration) -> Self {
        self.encryption_configuration = ::std::option::Option::Some(input);
        self
    }
    /// KMS Encryption Configuration
    pub fn set_encryption_configuration(mut self, input: ::std::option::Option<crate::types::EncryptionConfiguration>) -> Self {
        self.encryption_configuration = input;
        self
    }
    /// KMS Encryption Configuration
    pub fn get_encryption_configuration(&self) -> &::std::option::Option<crate::types::EncryptionConfiguration> {
        &self.encryption_configuration
    }
    /// Consumes the builder and constructs a [`UpdateBlueprintInput`](crate::operation::update_blueprint::UpdateBlueprintInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_blueprint::UpdateBlueprintInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_blueprint::UpdateBlueprintInput {
            blueprint_arn: self.blueprint_arn,
            schema: self.schema,
            blueprint_stage: self.blueprint_stage,
            encryption_configuration: self.encryption_configuration,
        })
    }
}
impl ::std::fmt::Debug for UpdateBlueprintInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateBlueprintInputBuilder");
        formatter.field("blueprint_arn", &self.blueprint_arn);
        formatter.field("schema", &"*** Sensitive Data Redacted ***");
        formatter.field("blueprint_stage", &self.blueprint_stage);
        formatter.field("encryption_configuration", &self.encryption_configuration);
        formatter.finish()
    }
}
