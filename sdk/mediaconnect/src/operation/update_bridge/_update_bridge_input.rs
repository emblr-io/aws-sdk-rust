// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateBridgeInput {
    /// <p>TheAmazon Resource Name (ARN) of the bridge that you want to update.</p>
    pub bridge_arn: ::std::option::Option<::std::string::String>,
    /// <p>A cloud-to-ground bridge. The content comes from an existing MediaConnect flow and is delivered to your premises.</p>
    pub egress_gateway_bridge: ::std::option::Option<crate::types::UpdateEgressGatewayBridgeRequest>,
    /// <p>A ground-to-cloud bridge. The content originates at your premises and is delivered to the cloud.</p>
    pub ingress_gateway_bridge: ::std::option::Option<crate::types::UpdateIngressGatewayBridgeRequest>,
    /// <p>The settings for source failover.</p>
    pub source_failover_config: ::std::option::Option<crate::types::UpdateFailoverConfig>,
}
impl UpdateBridgeInput {
    /// <p>TheAmazon Resource Name (ARN) of the bridge that you want to update.</p>
    pub fn bridge_arn(&self) -> ::std::option::Option<&str> {
        self.bridge_arn.as_deref()
    }
    /// <p>A cloud-to-ground bridge. The content comes from an existing MediaConnect flow and is delivered to your premises.</p>
    pub fn egress_gateway_bridge(&self) -> ::std::option::Option<&crate::types::UpdateEgressGatewayBridgeRequest> {
        self.egress_gateway_bridge.as_ref()
    }
    /// <p>A ground-to-cloud bridge. The content originates at your premises and is delivered to the cloud.</p>
    pub fn ingress_gateway_bridge(&self) -> ::std::option::Option<&crate::types::UpdateIngressGatewayBridgeRequest> {
        self.ingress_gateway_bridge.as_ref()
    }
    /// <p>The settings for source failover.</p>
    pub fn source_failover_config(&self) -> ::std::option::Option<&crate::types::UpdateFailoverConfig> {
        self.source_failover_config.as_ref()
    }
}
impl UpdateBridgeInput {
    /// Creates a new builder-style object to manufacture [`UpdateBridgeInput`](crate::operation::update_bridge::UpdateBridgeInput).
    pub fn builder() -> crate::operation::update_bridge::builders::UpdateBridgeInputBuilder {
        crate::operation::update_bridge::builders::UpdateBridgeInputBuilder::default()
    }
}

/// A builder for [`UpdateBridgeInput`](crate::operation::update_bridge::UpdateBridgeInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateBridgeInputBuilder {
    pub(crate) bridge_arn: ::std::option::Option<::std::string::String>,
    pub(crate) egress_gateway_bridge: ::std::option::Option<crate::types::UpdateEgressGatewayBridgeRequest>,
    pub(crate) ingress_gateway_bridge: ::std::option::Option<crate::types::UpdateIngressGatewayBridgeRequest>,
    pub(crate) source_failover_config: ::std::option::Option<crate::types::UpdateFailoverConfig>,
}
impl UpdateBridgeInputBuilder {
    /// <p>TheAmazon Resource Name (ARN) of the bridge that you want to update.</p>
    /// This field is required.
    pub fn bridge_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bridge_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>TheAmazon Resource Name (ARN) of the bridge that you want to update.</p>
    pub fn set_bridge_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bridge_arn = input;
        self
    }
    /// <p>TheAmazon Resource Name (ARN) of the bridge that you want to update.</p>
    pub fn get_bridge_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.bridge_arn
    }
    /// <p>A cloud-to-ground bridge. The content comes from an existing MediaConnect flow and is delivered to your premises.</p>
    pub fn egress_gateway_bridge(mut self, input: crate::types::UpdateEgressGatewayBridgeRequest) -> Self {
        self.egress_gateway_bridge = ::std::option::Option::Some(input);
        self
    }
    /// <p>A cloud-to-ground bridge. The content comes from an existing MediaConnect flow and is delivered to your premises.</p>
    pub fn set_egress_gateway_bridge(mut self, input: ::std::option::Option<crate::types::UpdateEgressGatewayBridgeRequest>) -> Self {
        self.egress_gateway_bridge = input;
        self
    }
    /// <p>A cloud-to-ground bridge. The content comes from an existing MediaConnect flow and is delivered to your premises.</p>
    pub fn get_egress_gateway_bridge(&self) -> &::std::option::Option<crate::types::UpdateEgressGatewayBridgeRequest> {
        &self.egress_gateway_bridge
    }
    /// <p>A ground-to-cloud bridge. The content originates at your premises and is delivered to the cloud.</p>
    pub fn ingress_gateway_bridge(mut self, input: crate::types::UpdateIngressGatewayBridgeRequest) -> Self {
        self.ingress_gateway_bridge = ::std::option::Option::Some(input);
        self
    }
    /// <p>A ground-to-cloud bridge. The content originates at your premises and is delivered to the cloud.</p>
    pub fn set_ingress_gateway_bridge(mut self, input: ::std::option::Option<crate::types::UpdateIngressGatewayBridgeRequest>) -> Self {
        self.ingress_gateway_bridge = input;
        self
    }
    /// <p>A ground-to-cloud bridge. The content originates at your premises and is delivered to the cloud.</p>
    pub fn get_ingress_gateway_bridge(&self) -> &::std::option::Option<crate::types::UpdateIngressGatewayBridgeRequest> {
        &self.ingress_gateway_bridge
    }
    /// <p>The settings for source failover.</p>
    pub fn source_failover_config(mut self, input: crate::types::UpdateFailoverConfig) -> Self {
        self.source_failover_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The settings for source failover.</p>
    pub fn set_source_failover_config(mut self, input: ::std::option::Option<crate::types::UpdateFailoverConfig>) -> Self {
        self.source_failover_config = input;
        self
    }
    /// <p>The settings for source failover.</p>
    pub fn get_source_failover_config(&self) -> &::std::option::Option<crate::types::UpdateFailoverConfig> {
        &self.source_failover_config
    }
    /// Consumes the builder and constructs a [`UpdateBridgeInput`](crate::operation::update_bridge::UpdateBridgeInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_bridge::UpdateBridgeInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_bridge::UpdateBridgeInput {
            bridge_arn: self.bridge_arn,
            egress_gateway_bridge: self.egress_gateway_bridge,
            ingress_gateway_bridge: self.ingress_gateway_bridge,
            source_failover_config: self.source_failover_config,
        })
    }
}
