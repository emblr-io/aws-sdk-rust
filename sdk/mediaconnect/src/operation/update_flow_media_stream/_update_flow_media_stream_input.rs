// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateFlowMediaStreamInput {
    /// <p>The attributes that you want to assign to the media stream.</p>
    pub attributes: ::std::option::Option<crate::types::MediaStreamAttributesRequest>,
    /// <p>The sample rate for the stream. This value in measured in kHz.</p>
    pub clock_rate: ::std::option::Option<i32>,
    /// <p>A description that can help you quickly identify what your media stream is used for.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the flow that is associated with the media stream that you updated.</p>
    pub flow_arn: ::std::option::Option<::std::string::String>,
    /// <p>The media stream that you updated.</p>
    pub media_stream_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of media stream.</p>
    pub media_stream_type: ::std::option::Option<crate::types::MediaStreamType>,
    /// <p>The resolution of the video.</p>
    pub video_format: ::std::option::Option<::std::string::String>,
}
impl UpdateFlowMediaStreamInput {
    /// <p>The attributes that you want to assign to the media stream.</p>
    pub fn attributes(&self) -> ::std::option::Option<&crate::types::MediaStreamAttributesRequest> {
        self.attributes.as_ref()
    }
    /// <p>The sample rate for the stream. This value in measured in kHz.</p>
    pub fn clock_rate(&self) -> ::std::option::Option<i32> {
        self.clock_rate
    }
    /// <p>A description that can help you quickly identify what your media stream is used for.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the flow that is associated with the media stream that you updated.</p>
    pub fn flow_arn(&self) -> ::std::option::Option<&str> {
        self.flow_arn.as_deref()
    }
    /// <p>The media stream that you updated.</p>
    pub fn media_stream_name(&self) -> ::std::option::Option<&str> {
        self.media_stream_name.as_deref()
    }
    /// <p>The type of media stream.</p>
    pub fn media_stream_type(&self) -> ::std::option::Option<&crate::types::MediaStreamType> {
        self.media_stream_type.as_ref()
    }
    /// <p>The resolution of the video.</p>
    pub fn video_format(&self) -> ::std::option::Option<&str> {
        self.video_format.as_deref()
    }
}
impl UpdateFlowMediaStreamInput {
    /// Creates a new builder-style object to manufacture [`UpdateFlowMediaStreamInput`](crate::operation::update_flow_media_stream::UpdateFlowMediaStreamInput).
    pub fn builder() -> crate::operation::update_flow_media_stream::builders::UpdateFlowMediaStreamInputBuilder {
        crate::operation::update_flow_media_stream::builders::UpdateFlowMediaStreamInputBuilder::default()
    }
}

/// A builder for [`UpdateFlowMediaStreamInput`](crate::operation::update_flow_media_stream::UpdateFlowMediaStreamInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateFlowMediaStreamInputBuilder {
    pub(crate) attributes: ::std::option::Option<crate::types::MediaStreamAttributesRequest>,
    pub(crate) clock_rate: ::std::option::Option<i32>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) flow_arn: ::std::option::Option<::std::string::String>,
    pub(crate) media_stream_name: ::std::option::Option<::std::string::String>,
    pub(crate) media_stream_type: ::std::option::Option<crate::types::MediaStreamType>,
    pub(crate) video_format: ::std::option::Option<::std::string::String>,
}
impl UpdateFlowMediaStreamInputBuilder {
    /// <p>The attributes that you want to assign to the media stream.</p>
    pub fn attributes(mut self, input: crate::types::MediaStreamAttributesRequest) -> Self {
        self.attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The attributes that you want to assign to the media stream.</p>
    pub fn set_attributes(mut self, input: ::std::option::Option<crate::types::MediaStreamAttributesRequest>) -> Self {
        self.attributes = input;
        self
    }
    /// <p>The attributes that you want to assign to the media stream.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<crate::types::MediaStreamAttributesRequest> {
        &self.attributes
    }
    /// <p>The sample rate for the stream. This value in measured in kHz.</p>
    pub fn clock_rate(mut self, input: i32) -> Self {
        self.clock_rate = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sample rate for the stream. This value in measured in kHz.</p>
    pub fn set_clock_rate(mut self, input: ::std::option::Option<i32>) -> Self {
        self.clock_rate = input;
        self
    }
    /// <p>The sample rate for the stream. This value in measured in kHz.</p>
    pub fn get_clock_rate(&self) -> &::std::option::Option<i32> {
        &self.clock_rate
    }
    /// <p>A description that can help you quickly identify what your media stream is used for.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description that can help you quickly identify what your media stream is used for.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description that can help you quickly identify what your media stream is used for.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The Amazon Resource Name (ARN) of the flow that is associated with the media stream that you updated.</p>
    /// This field is required.
    pub fn flow_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.flow_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the flow that is associated with the media stream that you updated.</p>
    pub fn set_flow_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.flow_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the flow that is associated with the media stream that you updated.</p>
    pub fn get_flow_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.flow_arn
    }
    /// <p>The media stream that you updated.</p>
    /// This field is required.
    pub fn media_stream_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.media_stream_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The media stream that you updated.</p>
    pub fn set_media_stream_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.media_stream_name = input;
        self
    }
    /// <p>The media stream that you updated.</p>
    pub fn get_media_stream_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.media_stream_name
    }
    /// <p>The type of media stream.</p>
    pub fn media_stream_type(mut self, input: crate::types::MediaStreamType) -> Self {
        self.media_stream_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of media stream.</p>
    pub fn set_media_stream_type(mut self, input: ::std::option::Option<crate::types::MediaStreamType>) -> Self {
        self.media_stream_type = input;
        self
    }
    /// <p>The type of media stream.</p>
    pub fn get_media_stream_type(&self) -> &::std::option::Option<crate::types::MediaStreamType> {
        &self.media_stream_type
    }
    /// <p>The resolution of the video.</p>
    pub fn video_format(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.video_format = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resolution of the video.</p>
    pub fn set_video_format(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.video_format = input;
        self
    }
    /// <p>The resolution of the video.</p>
    pub fn get_video_format(&self) -> &::std::option::Option<::std::string::String> {
        &self.video_format
    }
    /// Consumes the builder and constructs a [`UpdateFlowMediaStreamInput`](crate::operation::update_flow_media_stream::UpdateFlowMediaStreamInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_flow_media_stream::UpdateFlowMediaStreamInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_flow_media_stream::UpdateFlowMediaStreamInput {
            attributes: self.attributes,
            clock_rate: self.clock_rate,
            description: self.description,
            flow_arn: self.flow_arn,
            media_stream_name: self.media_stream_name,
            media_stream_type: self.media_stream_type,
            video_format: self.video_format,
        })
    }
}
