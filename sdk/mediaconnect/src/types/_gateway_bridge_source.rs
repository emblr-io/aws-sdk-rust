// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The source configuration for cloud flows receiving a stream from a bridge.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GatewayBridgeSource {
    /// <p>The ARN of the bridge feeding this flow.</p>
    pub bridge_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the VPC interface attachment to use for this bridge source.</p>
    pub vpc_interface_attachment: ::std::option::Option<crate::types::VpcInterfaceAttachment>,
}
impl GatewayBridgeSource {
    /// <p>The ARN of the bridge feeding this flow.</p>
    pub fn bridge_arn(&self) -> ::std::option::Option<&str> {
        self.bridge_arn.as_deref()
    }
    /// <p>The name of the VPC interface attachment to use for this bridge source.</p>
    pub fn vpc_interface_attachment(&self) -> ::std::option::Option<&crate::types::VpcInterfaceAttachment> {
        self.vpc_interface_attachment.as_ref()
    }
}
impl GatewayBridgeSource {
    /// Creates a new builder-style object to manufacture [`GatewayBridgeSource`](crate::types::GatewayBridgeSource).
    pub fn builder() -> crate::types::builders::GatewayBridgeSourceBuilder {
        crate::types::builders::GatewayBridgeSourceBuilder::default()
    }
}

/// A builder for [`GatewayBridgeSource`](crate::types::GatewayBridgeSource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GatewayBridgeSourceBuilder {
    pub(crate) bridge_arn: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_interface_attachment: ::std::option::Option<crate::types::VpcInterfaceAttachment>,
}
impl GatewayBridgeSourceBuilder {
    /// <p>The ARN of the bridge feeding this flow.</p>
    /// This field is required.
    pub fn bridge_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bridge_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the bridge feeding this flow.</p>
    pub fn set_bridge_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bridge_arn = input;
        self
    }
    /// <p>The ARN of the bridge feeding this flow.</p>
    pub fn get_bridge_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.bridge_arn
    }
    /// <p>The name of the VPC interface attachment to use for this bridge source.</p>
    pub fn vpc_interface_attachment(mut self, input: crate::types::VpcInterfaceAttachment) -> Self {
        self.vpc_interface_attachment = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the VPC interface attachment to use for this bridge source.</p>
    pub fn set_vpc_interface_attachment(mut self, input: ::std::option::Option<crate::types::VpcInterfaceAttachment>) -> Self {
        self.vpc_interface_attachment = input;
        self
    }
    /// <p>The name of the VPC interface attachment to use for this bridge source.</p>
    pub fn get_vpc_interface_attachment(&self) -> &::std::option::Option<crate::types::VpcInterfaceAttachment> {
        &self.vpc_interface_attachment
    }
    /// Consumes the builder and constructs a [`GatewayBridgeSource`](crate::types::GatewayBridgeSource).
    pub fn build(self) -> crate::types::GatewayBridgeSource {
        crate::types::GatewayBridgeSource {
            bridge_arn: self.bridge_arn,
            vpc_interface_attachment: self.vpc_interface_attachment,
        }
    }
}
