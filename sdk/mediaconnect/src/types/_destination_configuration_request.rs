// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition of a media stream that you want to associate with the output.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DestinationConfigurationRequest {
    /// <p>The IP address where you want MediaConnect to send contents of the media stream.</p>
    pub destination_ip: ::std::option::Option<::std::string::String>,
    /// <p>The port that you want MediaConnect to use when it distributes the media stream to the output.</p>
    pub destination_port: ::std::option::Option<i32>,
    /// <p>The VPC interface that you want to use for the media stream associated with the output.</p>
    pub interface: ::std::option::Option<crate::types::InterfaceRequest>,
}
impl DestinationConfigurationRequest {
    /// <p>The IP address where you want MediaConnect to send contents of the media stream.</p>
    pub fn destination_ip(&self) -> ::std::option::Option<&str> {
        self.destination_ip.as_deref()
    }
    /// <p>The port that you want MediaConnect to use when it distributes the media stream to the output.</p>
    pub fn destination_port(&self) -> ::std::option::Option<i32> {
        self.destination_port
    }
    /// <p>The VPC interface that you want to use for the media stream associated with the output.</p>
    pub fn interface(&self) -> ::std::option::Option<&crate::types::InterfaceRequest> {
        self.interface.as_ref()
    }
}
impl DestinationConfigurationRequest {
    /// Creates a new builder-style object to manufacture [`DestinationConfigurationRequest`](crate::types::DestinationConfigurationRequest).
    pub fn builder() -> crate::types::builders::DestinationConfigurationRequestBuilder {
        crate::types::builders::DestinationConfigurationRequestBuilder::default()
    }
}

/// A builder for [`DestinationConfigurationRequest`](crate::types::DestinationConfigurationRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DestinationConfigurationRequestBuilder {
    pub(crate) destination_ip: ::std::option::Option<::std::string::String>,
    pub(crate) destination_port: ::std::option::Option<i32>,
    pub(crate) interface: ::std::option::Option<crate::types::InterfaceRequest>,
}
impl DestinationConfigurationRequestBuilder {
    /// <p>The IP address where you want MediaConnect to send contents of the media stream.</p>
    /// This field is required.
    pub fn destination_ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_ip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address where you want MediaConnect to send contents of the media stream.</p>
    pub fn set_destination_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_ip = input;
        self
    }
    /// <p>The IP address where you want MediaConnect to send contents of the media stream.</p>
    pub fn get_destination_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_ip
    }
    /// <p>The port that you want MediaConnect to use when it distributes the media stream to the output.</p>
    /// This field is required.
    pub fn destination_port(mut self, input: i32) -> Self {
        self.destination_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port that you want MediaConnect to use when it distributes the media stream to the output.</p>
    pub fn set_destination_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.destination_port = input;
        self
    }
    /// <p>The port that you want MediaConnect to use when it distributes the media stream to the output.</p>
    pub fn get_destination_port(&self) -> &::std::option::Option<i32> {
        &self.destination_port
    }
    /// <p>The VPC interface that you want to use for the media stream associated with the output.</p>
    /// This field is required.
    pub fn interface(mut self, input: crate::types::InterfaceRequest) -> Self {
        self.interface = ::std::option::Option::Some(input);
        self
    }
    /// <p>The VPC interface that you want to use for the media stream associated with the output.</p>
    pub fn set_interface(mut self, input: ::std::option::Option<crate::types::InterfaceRequest>) -> Self {
        self.interface = input;
        self
    }
    /// <p>The VPC interface that you want to use for the media stream associated with the output.</p>
    pub fn get_interface(&self) -> &::std::option::Option<crate::types::InterfaceRequest> {
        &self.interface
    }
    /// Consumes the builder and constructs a [`DestinationConfigurationRequest`](crate::types::DestinationConfigurationRequest).
    pub fn build(self) -> crate::types::DestinationConfigurationRequest {
        crate::types::DestinationConfigurationRequest {
            destination_ip: self.destination_ip,
            destination_port: self.destination_port,
            interface: self.interface,
        }
    }
}
