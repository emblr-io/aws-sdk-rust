// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the configuration settings for individual NDI discovery servers. A maximum of 3 servers is allowed.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NdiDiscoveryServerConfig {
    /// <p>The unique network address of the NDI discovery server.</p>
    pub discovery_server_address: ::std::option::Option<::std::string::String>,
    /// <p>The port for the NDI discovery server. Defaults to 5959 if a custom port isn't specified.</p>
    pub discovery_server_port: ::std::option::Option<i32>,
    /// <p>The identifier for the Virtual Private Cloud (VPC) network interface used by the flow.</p>
    pub vpc_interface_adapter: ::std::option::Option<::std::string::String>,
}
impl NdiDiscoveryServerConfig {
    /// <p>The unique network address of the NDI discovery server.</p>
    pub fn discovery_server_address(&self) -> ::std::option::Option<&str> {
        self.discovery_server_address.as_deref()
    }
    /// <p>The port for the NDI discovery server. Defaults to 5959 if a custom port isn't specified.</p>
    pub fn discovery_server_port(&self) -> ::std::option::Option<i32> {
        self.discovery_server_port
    }
    /// <p>The identifier for the Virtual Private Cloud (VPC) network interface used by the flow.</p>
    pub fn vpc_interface_adapter(&self) -> ::std::option::Option<&str> {
        self.vpc_interface_adapter.as_deref()
    }
}
impl NdiDiscoveryServerConfig {
    /// Creates a new builder-style object to manufacture [`NdiDiscoveryServerConfig`](crate::types::NdiDiscoveryServerConfig).
    pub fn builder() -> crate::types::builders::NdiDiscoveryServerConfigBuilder {
        crate::types::builders::NdiDiscoveryServerConfigBuilder::default()
    }
}

/// A builder for [`NdiDiscoveryServerConfig`](crate::types::NdiDiscoveryServerConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NdiDiscoveryServerConfigBuilder {
    pub(crate) discovery_server_address: ::std::option::Option<::std::string::String>,
    pub(crate) discovery_server_port: ::std::option::Option<i32>,
    pub(crate) vpc_interface_adapter: ::std::option::Option<::std::string::String>,
}
impl NdiDiscoveryServerConfigBuilder {
    /// <p>The unique network address of the NDI discovery server.</p>
    /// This field is required.
    pub fn discovery_server_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.discovery_server_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique network address of the NDI discovery server.</p>
    pub fn set_discovery_server_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.discovery_server_address = input;
        self
    }
    /// <p>The unique network address of the NDI discovery server.</p>
    pub fn get_discovery_server_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.discovery_server_address
    }
    /// <p>The port for the NDI discovery server. Defaults to 5959 if a custom port isn't specified.</p>
    pub fn discovery_server_port(mut self, input: i32) -> Self {
        self.discovery_server_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port for the NDI discovery server. Defaults to 5959 if a custom port isn't specified.</p>
    pub fn set_discovery_server_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.discovery_server_port = input;
        self
    }
    /// <p>The port for the NDI discovery server. Defaults to 5959 if a custom port isn't specified.</p>
    pub fn get_discovery_server_port(&self) -> &::std::option::Option<i32> {
        &self.discovery_server_port
    }
    /// <p>The identifier for the Virtual Private Cloud (VPC) network interface used by the flow.</p>
    /// This field is required.
    pub fn vpc_interface_adapter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_interface_adapter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the Virtual Private Cloud (VPC) network interface used by the flow.</p>
    pub fn set_vpc_interface_adapter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_interface_adapter = input;
        self
    }
    /// <p>The identifier for the Virtual Private Cloud (VPC) network interface used by the flow.</p>
    pub fn get_vpc_interface_adapter(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_interface_adapter
    }
    /// Consumes the builder and constructs a [`NdiDiscoveryServerConfig`](crate::types::NdiDiscoveryServerConfig).
    pub fn build(self) -> crate::types::NdiDiscoveryServerConfig {
        crate::types::NdiDiscoveryServerConfig {
            discovery_server_address: self.discovery_server_address,
            discovery_server_port: self.discovery_server_port,
            vpc_interface_adapter: self.vpc_interface_adapter,
        }
    }
}
