// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The settings for source monitoring.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MonitoringConfig {
    /// <p>Indicates whether thumbnails are enabled or disabled.</p>
    pub thumbnail_state: ::std::option::Option<crate::types::ThumbnailState>,
    /// <p>Contains the settings for audio stream metrics monitoring.</p>
    pub audio_monitoring_settings: ::std::option::Option<::std::vec::Vec<crate::types::AudioMonitoringSetting>>,
    /// <p>Indicates whether content quality analysis is enabled or disabled.</p>
    pub content_quality_analysis_state: ::std::option::Option<crate::types::ContentQualityAnalysisState>,
    /// <p>Contains the settings for video stream metrics monitoring.</p>
    pub video_monitoring_settings: ::std::option::Option<::std::vec::Vec<crate::types::VideoMonitoringSetting>>,
}
impl MonitoringConfig {
    /// <p>Indicates whether thumbnails are enabled or disabled.</p>
    pub fn thumbnail_state(&self) -> ::std::option::Option<&crate::types::ThumbnailState> {
        self.thumbnail_state.as_ref()
    }
    /// <p>Contains the settings for audio stream metrics monitoring.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.audio_monitoring_settings.is_none()`.
    pub fn audio_monitoring_settings(&self) -> &[crate::types::AudioMonitoringSetting] {
        self.audio_monitoring_settings.as_deref().unwrap_or_default()
    }
    /// <p>Indicates whether content quality analysis is enabled or disabled.</p>
    pub fn content_quality_analysis_state(&self) -> ::std::option::Option<&crate::types::ContentQualityAnalysisState> {
        self.content_quality_analysis_state.as_ref()
    }
    /// <p>Contains the settings for video stream metrics monitoring.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.video_monitoring_settings.is_none()`.
    pub fn video_monitoring_settings(&self) -> &[crate::types::VideoMonitoringSetting] {
        self.video_monitoring_settings.as_deref().unwrap_or_default()
    }
}
impl MonitoringConfig {
    /// Creates a new builder-style object to manufacture [`MonitoringConfig`](crate::types::MonitoringConfig).
    pub fn builder() -> crate::types::builders::MonitoringConfigBuilder {
        crate::types::builders::MonitoringConfigBuilder::default()
    }
}

/// A builder for [`MonitoringConfig`](crate::types::MonitoringConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MonitoringConfigBuilder {
    pub(crate) thumbnail_state: ::std::option::Option<crate::types::ThumbnailState>,
    pub(crate) audio_monitoring_settings: ::std::option::Option<::std::vec::Vec<crate::types::AudioMonitoringSetting>>,
    pub(crate) content_quality_analysis_state: ::std::option::Option<crate::types::ContentQualityAnalysisState>,
    pub(crate) video_monitoring_settings: ::std::option::Option<::std::vec::Vec<crate::types::VideoMonitoringSetting>>,
}
impl MonitoringConfigBuilder {
    /// <p>Indicates whether thumbnails are enabled or disabled.</p>
    pub fn thumbnail_state(mut self, input: crate::types::ThumbnailState) -> Self {
        self.thumbnail_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether thumbnails are enabled or disabled.</p>
    pub fn set_thumbnail_state(mut self, input: ::std::option::Option<crate::types::ThumbnailState>) -> Self {
        self.thumbnail_state = input;
        self
    }
    /// <p>Indicates whether thumbnails are enabled or disabled.</p>
    pub fn get_thumbnail_state(&self) -> &::std::option::Option<crate::types::ThumbnailState> {
        &self.thumbnail_state
    }
    /// Appends an item to `audio_monitoring_settings`.
    ///
    /// To override the contents of this collection use [`set_audio_monitoring_settings`](Self::set_audio_monitoring_settings).
    ///
    /// <p>Contains the settings for audio stream metrics monitoring.</p>
    pub fn audio_monitoring_settings(mut self, input: crate::types::AudioMonitoringSetting) -> Self {
        let mut v = self.audio_monitoring_settings.unwrap_or_default();
        v.push(input);
        self.audio_monitoring_settings = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains the settings for audio stream metrics monitoring.</p>
    pub fn set_audio_monitoring_settings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AudioMonitoringSetting>>) -> Self {
        self.audio_monitoring_settings = input;
        self
    }
    /// <p>Contains the settings for audio stream metrics monitoring.</p>
    pub fn get_audio_monitoring_settings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AudioMonitoringSetting>> {
        &self.audio_monitoring_settings
    }
    /// <p>Indicates whether content quality analysis is enabled or disabled.</p>
    pub fn content_quality_analysis_state(mut self, input: crate::types::ContentQualityAnalysisState) -> Self {
        self.content_quality_analysis_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether content quality analysis is enabled or disabled.</p>
    pub fn set_content_quality_analysis_state(mut self, input: ::std::option::Option<crate::types::ContentQualityAnalysisState>) -> Self {
        self.content_quality_analysis_state = input;
        self
    }
    /// <p>Indicates whether content quality analysis is enabled or disabled.</p>
    pub fn get_content_quality_analysis_state(&self) -> &::std::option::Option<crate::types::ContentQualityAnalysisState> {
        &self.content_quality_analysis_state
    }
    /// Appends an item to `video_monitoring_settings`.
    ///
    /// To override the contents of this collection use [`set_video_monitoring_settings`](Self::set_video_monitoring_settings).
    ///
    /// <p>Contains the settings for video stream metrics monitoring.</p>
    pub fn video_monitoring_settings(mut self, input: crate::types::VideoMonitoringSetting) -> Self {
        let mut v = self.video_monitoring_settings.unwrap_or_default();
        v.push(input);
        self.video_monitoring_settings = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains the settings for video stream metrics monitoring.</p>
    pub fn set_video_monitoring_settings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::VideoMonitoringSetting>>) -> Self {
        self.video_monitoring_settings = input;
        self
    }
    /// <p>Contains the settings for video stream metrics monitoring.</p>
    pub fn get_video_monitoring_settings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VideoMonitoringSetting>> {
        &self.video_monitoring_settings
    }
    /// Consumes the builder and constructs a [`MonitoringConfig`](crate::types::MonitoringConfig).
    pub fn build(self) -> crate::types::MonitoringConfig {
        crate::types::MonitoringConfig {
            thumbnail_state: self.thumbnail_state,
            audio_monitoring_settings: self.audio_monitoring_settings,
            content_quality_analysis_state: self.content_quality_analysis_state,
            video_monitoring_settings: self.video_monitoring_settings,
        }
    }
}
