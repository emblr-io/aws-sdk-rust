// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The media stream that you want to associate with the output, and the parameters for that association.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MediaStreamOutputConfigurationRequest {
    /// <p>The media streams that you want to associate with the output.</p>
    pub destination_configurations: ::std::option::Option<::std::vec::Vec<crate::types::DestinationConfigurationRequest>>,
    /// <p>The format that will be used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv.</p>
    pub encoding_name: ::std::option::Option<crate::types::EncodingName>,
    /// <p>A collection of parameters that determine how MediaConnect will convert the content. These fields only apply to outputs on flows that have a CDI source.</p>
    pub encoding_parameters: ::std::option::Option<crate::types::EncodingParametersRequest>,
    /// <p>The name of the media stream that is associated with the output.</p>
    pub media_stream_name: ::std::option::Option<::std::string::String>,
}
impl MediaStreamOutputConfigurationRequest {
    /// <p>The media streams that you want to associate with the output.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destination_configurations.is_none()`.
    pub fn destination_configurations(&self) -> &[crate::types::DestinationConfigurationRequest] {
        self.destination_configurations.as_deref().unwrap_or_default()
    }
    /// <p>The format that will be used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv.</p>
    pub fn encoding_name(&self) -> ::std::option::Option<&crate::types::EncodingName> {
        self.encoding_name.as_ref()
    }
    /// <p>A collection of parameters that determine how MediaConnect will convert the content. These fields only apply to outputs on flows that have a CDI source.</p>
    pub fn encoding_parameters(&self) -> ::std::option::Option<&crate::types::EncodingParametersRequest> {
        self.encoding_parameters.as_ref()
    }
    /// <p>The name of the media stream that is associated with the output.</p>
    pub fn media_stream_name(&self) -> ::std::option::Option<&str> {
        self.media_stream_name.as_deref()
    }
}
impl MediaStreamOutputConfigurationRequest {
    /// Creates a new builder-style object to manufacture [`MediaStreamOutputConfigurationRequest`](crate::types::MediaStreamOutputConfigurationRequest).
    pub fn builder() -> crate::types::builders::MediaStreamOutputConfigurationRequestBuilder {
        crate::types::builders::MediaStreamOutputConfigurationRequestBuilder::default()
    }
}

/// A builder for [`MediaStreamOutputConfigurationRequest`](crate::types::MediaStreamOutputConfigurationRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MediaStreamOutputConfigurationRequestBuilder {
    pub(crate) destination_configurations: ::std::option::Option<::std::vec::Vec<crate::types::DestinationConfigurationRequest>>,
    pub(crate) encoding_name: ::std::option::Option<crate::types::EncodingName>,
    pub(crate) encoding_parameters: ::std::option::Option<crate::types::EncodingParametersRequest>,
    pub(crate) media_stream_name: ::std::option::Option<::std::string::String>,
}
impl MediaStreamOutputConfigurationRequestBuilder {
    /// Appends an item to `destination_configurations`.
    ///
    /// To override the contents of this collection use [`set_destination_configurations`](Self::set_destination_configurations).
    ///
    /// <p>The media streams that you want to associate with the output.</p>
    pub fn destination_configurations(mut self, input: crate::types::DestinationConfigurationRequest) -> Self {
        let mut v = self.destination_configurations.unwrap_or_default();
        v.push(input);
        self.destination_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The media streams that you want to associate with the output.</p>
    pub fn set_destination_configurations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::DestinationConfigurationRequest>>,
    ) -> Self {
        self.destination_configurations = input;
        self
    }
    /// <p>The media streams that you want to associate with the output.</p>
    pub fn get_destination_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DestinationConfigurationRequest>> {
        &self.destination_configurations
    }
    /// <p>The format that will be used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv.</p>
    /// This field is required.
    pub fn encoding_name(mut self, input: crate::types::EncodingName) -> Self {
        self.encoding_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format that will be used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv.</p>
    pub fn set_encoding_name(mut self, input: ::std::option::Option<crate::types::EncodingName>) -> Self {
        self.encoding_name = input;
        self
    }
    /// <p>The format that will be used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv.</p>
    pub fn get_encoding_name(&self) -> &::std::option::Option<crate::types::EncodingName> {
        &self.encoding_name
    }
    /// <p>A collection of parameters that determine how MediaConnect will convert the content. These fields only apply to outputs on flows that have a CDI source.</p>
    pub fn encoding_parameters(mut self, input: crate::types::EncodingParametersRequest) -> Self {
        self.encoding_parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>A collection of parameters that determine how MediaConnect will convert the content. These fields only apply to outputs on flows that have a CDI source.</p>
    pub fn set_encoding_parameters(mut self, input: ::std::option::Option<crate::types::EncodingParametersRequest>) -> Self {
        self.encoding_parameters = input;
        self
    }
    /// <p>A collection of parameters that determine how MediaConnect will convert the content. These fields only apply to outputs on flows that have a CDI source.</p>
    pub fn get_encoding_parameters(&self) -> &::std::option::Option<crate::types::EncodingParametersRequest> {
        &self.encoding_parameters
    }
    /// <p>The name of the media stream that is associated with the output.</p>
    /// This field is required.
    pub fn media_stream_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.media_stream_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the media stream that is associated with the output.</p>
    pub fn set_media_stream_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.media_stream_name = input;
        self
    }
    /// <p>The name of the media stream that is associated with the output.</p>
    pub fn get_media_stream_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.media_stream_name
    }
    /// Consumes the builder and constructs a [`MediaStreamOutputConfigurationRequest`](crate::types::MediaStreamOutputConfigurationRequest).
    pub fn build(self) -> crate::types::MediaStreamOutputConfigurationRequest {
        crate::types::MediaStreamOutputConfigurationRequest {
            destination_configurations: self.destination_configurations,
            encoding_name: self.encoding_name,
            encoding_parameters: self.encoding_parameters,
            media_stream_name: self.media_stream_name,
        }
    }
}
