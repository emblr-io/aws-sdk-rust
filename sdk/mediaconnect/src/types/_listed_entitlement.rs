// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An entitlement that has been granted to you from other Amazon Web Services accounts.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListedEntitlement {
    /// <p>Percentage from 0-100 of the data transfer cost to be billed to the subscriber.</p>
    pub data_transfer_subscriber_fee_percent: ::std::option::Option<i32>,
    /// <p>The ARN of the entitlement.</p>
    pub entitlement_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the entitlement.</p>
    pub entitlement_name: ::std::option::Option<::std::string::String>,
}
impl ListedEntitlement {
    /// <p>Percentage from 0-100 of the data transfer cost to be billed to the subscriber.</p>
    pub fn data_transfer_subscriber_fee_percent(&self) -> ::std::option::Option<i32> {
        self.data_transfer_subscriber_fee_percent
    }
    /// <p>The ARN of the entitlement.</p>
    pub fn entitlement_arn(&self) -> ::std::option::Option<&str> {
        self.entitlement_arn.as_deref()
    }
    /// <p>The name of the entitlement.</p>
    pub fn entitlement_name(&self) -> ::std::option::Option<&str> {
        self.entitlement_name.as_deref()
    }
}
impl ListedEntitlement {
    /// Creates a new builder-style object to manufacture [`ListedEntitlement`](crate::types::ListedEntitlement).
    pub fn builder() -> crate::types::builders::ListedEntitlementBuilder {
        crate::types::builders::ListedEntitlementBuilder::default()
    }
}

/// A builder for [`ListedEntitlement`](crate::types::ListedEntitlement).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListedEntitlementBuilder {
    pub(crate) data_transfer_subscriber_fee_percent: ::std::option::Option<i32>,
    pub(crate) entitlement_arn: ::std::option::Option<::std::string::String>,
    pub(crate) entitlement_name: ::std::option::Option<::std::string::String>,
}
impl ListedEntitlementBuilder {
    /// <p>Percentage from 0-100 of the data transfer cost to be billed to the subscriber.</p>
    pub fn data_transfer_subscriber_fee_percent(mut self, input: i32) -> Self {
        self.data_transfer_subscriber_fee_percent = ::std::option::Option::Some(input);
        self
    }
    /// <p>Percentage from 0-100 of the data transfer cost to be billed to the subscriber.</p>
    pub fn set_data_transfer_subscriber_fee_percent(mut self, input: ::std::option::Option<i32>) -> Self {
        self.data_transfer_subscriber_fee_percent = input;
        self
    }
    /// <p>Percentage from 0-100 of the data transfer cost to be billed to the subscriber.</p>
    pub fn get_data_transfer_subscriber_fee_percent(&self) -> &::std::option::Option<i32> {
        &self.data_transfer_subscriber_fee_percent
    }
    /// <p>The ARN of the entitlement.</p>
    /// This field is required.
    pub fn entitlement_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entitlement_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the entitlement.</p>
    pub fn set_entitlement_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entitlement_arn = input;
        self
    }
    /// <p>The ARN of the entitlement.</p>
    pub fn get_entitlement_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.entitlement_arn
    }
    /// <p>The name of the entitlement.</p>
    /// This field is required.
    pub fn entitlement_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entitlement_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the entitlement.</p>
    pub fn set_entitlement_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entitlement_name = input;
        self
    }
    /// <p>The name of the entitlement.</p>
    pub fn get_entitlement_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.entitlement_name
    }
    /// Consumes the builder and constructs a [`ListedEntitlement`](crate::types::ListedEntitlement).
    pub fn build(self) -> crate::types::ListedEntitlement {
        crate::types::ListedEntitlement {
            data_transfer_subscriber_fee_percent: self.data_transfer_subscriber_fee_percent,
            entitlement_arn: self.entitlement_arn,
            entitlement_name: self.entitlement_name,
        }
    }
}
