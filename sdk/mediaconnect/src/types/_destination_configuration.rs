// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The transport parameters that you want to associate with an outbound media stream.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DestinationConfiguration {
    /// <p>The IP address where you want MediaConnect to send contents of the media stream.</p>
    pub destination_ip: ::std::option::Option<::std::string::String>,
    /// <p>The port that you want MediaConnect to use when it distributes the media stream to the output.</p>
    pub destination_port: ::std::option::Option<i32>,
    /// <p>The VPC interface that you want to use for the media stream associated with the output.</p>
    pub interface: ::std::option::Option<crate::types::Interface>,
    /// <p>The IP address that the receiver requires in order to establish a connection with the flow. This value is represented by the elastic network interface IP address of the VPC. This field applies only to outputs that use the CDI or ST 2110 JPEG XS or protocol.</p>
    pub outbound_ip: ::std::option::Option<::std::string::String>,
}
impl DestinationConfiguration {
    /// <p>The IP address where you want MediaConnect to send contents of the media stream.</p>
    pub fn destination_ip(&self) -> ::std::option::Option<&str> {
        self.destination_ip.as_deref()
    }
    /// <p>The port that you want MediaConnect to use when it distributes the media stream to the output.</p>
    pub fn destination_port(&self) -> ::std::option::Option<i32> {
        self.destination_port
    }
    /// <p>The VPC interface that you want to use for the media stream associated with the output.</p>
    pub fn interface(&self) -> ::std::option::Option<&crate::types::Interface> {
        self.interface.as_ref()
    }
    /// <p>The IP address that the receiver requires in order to establish a connection with the flow. This value is represented by the elastic network interface IP address of the VPC. This field applies only to outputs that use the CDI or ST 2110 JPEG XS or protocol.</p>
    pub fn outbound_ip(&self) -> ::std::option::Option<&str> {
        self.outbound_ip.as_deref()
    }
}
impl DestinationConfiguration {
    /// Creates a new builder-style object to manufacture [`DestinationConfiguration`](crate::types::DestinationConfiguration).
    pub fn builder() -> crate::types::builders::DestinationConfigurationBuilder {
        crate::types::builders::DestinationConfigurationBuilder::default()
    }
}

/// A builder for [`DestinationConfiguration`](crate::types::DestinationConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DestinationConfigurationBuilder {
    pub(crate) destination_ip: ::std::option::Option<::std::string::String>,
    pub(crate) destination_port: ::std::option::Option<i32>,
    pub(crate) interface: ::std::option::Option<crate::types::Interface>,
    pub(crate) outbound_ip: ::std::option::Option<::std::string::String>,
}
impl DestinationConfigurationBuilder {
    /// <p>The IP address where you want MediaConnect to send contents of the media stream.</p>
    /// This field is required.
    pub fn destination_ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_ip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address where you want MediaConnect to send contents of the media stream.</p>
    pub fn set_destination_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_ip = input;
        self
    }
    /// <p>The IP address where you want MediaConnect to send contents of the media stream.</p>
    pub fn get_destination_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_ip
    }
    /// <p>The port that you want MediaConnect to use when it distributes the media stream to the output.</p>
    /// This field is required.
    pub fn destination_port(mut self, input: i32) -> Self {
        self.destination_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port that you want MediaConnect to use when it distributes the media stream to the output.</p>
    pub fn set_destination_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.destination_port = input;
        self
    }
    /// <p>The port that you want MediaConnect to use when it distributes the media stream to the output.</p>
    pub fn get_destination_port(&self) -> &::std::option::Option<i32> {
        &self.destination_port
    }
    /// <p>The VPC interface that you want to use for the media stream associated with the output.</p>
    /// This field is required.
    pub fn interface(mut self, input: crate::types::Interface) -> Self {
        self.interface = ::std::option::Option::Some(input);
        self
    }
    /// <p>The VPC interface that you want to use for the media stream associated with the output.</p>
    pub fn set_interface(mut self, input: ::std::option::Option<crate::types::Interface>) -> Self {
        self.interface = input;
        self
    }
    /// <p>The VPC interface that you want to use for the media stream associated with the output.</p>
    pub fn get_interface(&self) -> &::std::option::Option<crate::types::Interface> {
        &self.interface
    }
    /// <p>The IP address that the receiver requires in order to establish a connection with the flow. This value is represented by the elastic network interface IP address of the VPC. This field applies only to outputs that use the CDI or ST 2110 JPEG XS or protocol.</p>
    /// This field is required.
    pub fn outbound_ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.outbound_ip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address that the receiver requires in order to establish a connection with the flow. This value is represented by the elastic network interface IP address of the VPC. This field applies only to outputs that use the CDI or ST 2110 JPEG XS or protocol.</p>
    pub fn set_outbound_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.outbound_ip = input;
        self
    }
    /// <p>The IP address that the receiver requires in order to establish a connection with the flow. This value is represented by the elastic network interface IP address of the VPC. This field applies only to outputs that use the CDI or ST 2110 JPEG XS or protocol.</p>
    pub fn get_outbound_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.outbound_ip
    }
    /// Consumes the builder and constructs a [`DestinationConfiguration`](crate::types::DestinationConfiguration).
    pub fn build(self) -> crate::types::DestinationConfiguration {
        crate::types::DestinationConfiguration {
            destination_ip: self.destination_ip,
            destination_port: self.destination_port,
            interface: self.interface,
            outbound_ip: self.outbound_ip,
        }
    }
}
