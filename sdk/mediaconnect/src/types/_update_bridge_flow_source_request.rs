// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Update the flow source of the bridge.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateBridgeFlowSourceRequest {
    /// <p>The Amazon Resource Name (ARN) that identifies the MediaConnect resource from which to delete tags.</p>
    pub flow_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the VPC interface attachment to use for this source.</p>
    pub flow_vpc_interface_attachment: ::std::option::Option<crate::types::VpcInterfaceAttachment>,
}
impl UpdateBridgeFlowSourceRequest {
    /// <p>The Amazon Resource Name (ARN) that identifies the MediaConnect resource from which to delete tags.</p>
    pub fn flow_arn(&self) -> ::std::option::Option<&str> {
        self.flow_arn.as_deref()
    }
    /// <p>The name of the VPC interface attachment to use for this source.</p>
    pub fn flow_vpc_interface_attachment(&self) -> ::std::option::Option<&crate::types::VpcInterfaceAttachment> {
        self.flow_vpc_interface_attachment.as_ref()
    }
}
impl UpdateBridgeFlowSourceRequest {
    /// Creates a new builder-style object to manufacture [`UpdateBridgeFlowSourceRequest`](crate::types::UpdateBridgeFlowSourceRequest).
    pub fn builder() -> crate::types::builders::UpdateBridgeFlowSourceRequestBuilder {
        crate::types::builders::UpdateBridgeFlowSourceRequestBuilder::default()
    }
}

/// A builder for [`UpdateBridgeFlowSourceRequest`](crate::types::UpdateBridgeFlowSourceRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateBridgeFlowSourceRequestBuilder {
    pub(crate) flow_arn: ::std::option::Option<::std::string::String>,
    pub(crate) flow_vpc_interface_attachment: ::std::option::Option<crate::types::VpcInterfaceAttachment>,
}
impl UpdateBridgeFlowSourceRequestBuilder {
    /// <p>The Amazon Resource Name (ARN) that identifies the MediaConnect resource from which to delete tags.</p>
    pub fn flow_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.flow_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that identifies the MediaConnect resource from which to delete tags.</p>
    pub fn set_flow_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.flow_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that identifies the MediaConnect resource from which to delete tags.</p>
    pub fn get_flow_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.flow_arn
    }
    /// <p>The name of the VPC interface attachment to use for this source.</p>
    pub fn flow_vpc_interface_attachment(mut self, input: crate::types::VpcInterfaceAttachment) -> Self {
        self.flow_vpc_interface_attachment = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the VPC interface attachment to use for this source.</p>
    pub fn set_flow_vpc_interface_attachment(mut self, input: ::std::option::Option<crate::types::VpcInterfaceAttachment>) -> Self {
        self.flow_vpc_interface_attachment = input;
        self
    }
    /// <p>The name of the VPC interface attachment to use for this source.</p>
    pub fn get_flow_vpc_interface_attachment(&self) -> &::std::option::Option<crate::types::VpcInterfaceAttachment> {
        &self.flow_vpc_interface_attachment
    }
    /// Consumes the builder and constructs a [`UpdateBridgeFlowSourceRequest`](crate::types::UpdateBridgeFlowSourceRequest).
    pub fn build(self) -> crate::types::UpdateBridgeFlowSourceRequest {
        crate::types::UpdateBridgeFlowSourceRequest {
            flow_arn: self.flow_arn,
            flow_vpc_interface_attachment: self.flow_vpc_interface_attachment,
        }
    }
}
