// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Add outputs to the specified bridge.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AddBridgeOutputRequest {
    /// <p>The network output of the bridge. A network output is delivered to your premises.</p>
    pub network_output: ::std::option::Option<crate::types::AddBridgeNetworkOutputRequest>,
}
impl AddBridgeOutputRequest {
    /// <p>The network output of the bridge. A network output is delivered to your premises.</p>
    pub fn network_output(&self) -> ::std::option::Option<&crate::types::AddBridgeNetworkOutputRequest> {
        self.network_output.as_ref()
    }
}
impl AddBridgeOutputRequest {
    /// Creates a new builder-style object to manufacture [`AddBridgeOutputRequest`](crate::types::AddBridgeOutputRequest).
    pub fn builder() -> crate::types::builders::AddBridgeOutputRequestBuilder {
        crate::types::builders::AddBridgeOutputRequestBuilder::default()
    }
}

/// A builder for [`AddBridgeOutputRequest`](crate::types::AddBridgeOutputRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AddBridgeOutputRequestBuilder {
    pub(crate) network_output: ::std::option::Option<crate::types::AddBridgeNetworkOutputRequest>,
}
impl AddBridgeOutputRequestBuilder {
    /// <p>The network output of the bridge. A network output is delivered to your premises.</p>
    pub fn network_output(mut self, input: crate::types::AddBridgeNetworkOutputRequest) -> Self {
        self.network_output = ::std::option::Option::Some(input);
        self
    }
    /// <p>The network output of the bridge. A network output is delivered to your premises.</p>
    pub fn set_network_output(mut self, input: ::std::option::Option<crate::types::AddBridgeNetworkOutputRequest>) -> Self {
        self.network_output = input;
        self
    }
    /// <p>The network output of the bridge. A network output is delivered to your premises.</p>
    pub fn get_network_output(&self) -> &::std::option::Option<crate::types::AddBridgeNetworkOutputRequest> {
        &self.network_output
    }
    /// Consumes the builder and constructs a [`AddBridgeOutputRequest`](crate::types::AddBridgeOutputRequest).
    pub fn build(self) -> crate::types::AddBridgeOutputRequest {
        crate::types::AddBridgeOutputRequest {
            network_output: self.network_output,
        }
    }
}
