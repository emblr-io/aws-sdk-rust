// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configures settings for the <code>BlackFrames</code> metric.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BlackFrames {
    /// <p>Indicates whether the <code>BlackFrames</code> metric is enabled or disabled..</p>
    pub state: ::std::option::Option<crate::types::State>,
    /// <p>Specifies the number of consecutive seconds of black frames that triggers an event or alert.</p>
    pub threshold_seconds: ::std::option::Option<i32>,
}
impl BlackFrames {
    /// <p>Indicates whether the <code>BlackFrames</code> metric is enabled or disabled..</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::State> {
        self.state.as_ref()
    }
    /// <p>Specifies the number of consecutive seconds of black frames that triggers an event or alert.</p>
    pub fn threshold_seconds(&self) -> ::std::option::Option<i32> {
        self.threshold_seconds
    }
}
impl BlackFrames {
    /// Creates a new builder-style object to manufacture [`BlackFrames`](crate::types::BlackFrames).
    pub fn builder() -> crate::types::builders::BlackFramesBuilder {
        crate::types::builders::BlackFramesBuilder::default()
    }
}

/// A builder for [`BlackFrames`](crate::types::BlackFrames).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BlackFramesBuilder {
    pub(crate) state: ::std::option::Option<crate::types::State>,
    pub(crate) threshold_seconds: ::std::option::Option<i32>,
}
impl BlackFramesBuilder {
    /// <p>Indicates whether the <code>BlackFrames</code> metric is enabled or disabled..</p>
    pub fn state(mut self, input: crate::types::State) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the <code>BlackFrames</code> metric is enabled or disabled..</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::State>) -> Self {
        self.state = input;
        self
    }
    /// <p>Indicates whether the <code>BlackFrames</code> metric is enabled or disabled..</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::State> {
        &self.state
    }
    /// <p>Specifies the number of consecutive seconds of black frames that triggers an event or alert.</p>
    pub fn threshold_seconds(mut self, input: i32) -> Self {
        self.threshold_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the number of consecutive seconds of black frames that triggers an event or alert.</p>
    pub fn set_threshold_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.threshold_seconds = input;
        self
    }
    /// <p>Specifies the number of consecutive seconds of black frames that triggers an event or alert.</p>
    pub fn get_threshold_seconds(&self) -> &::std::option::Option<i32> {
        &self.threshold_seconds
    }
    /// Consumes the builder and constructs a [`BlackFrames`](crate::types::BlackFrames).
    pub fn build(self) -> crate::types::BlackFrames {
        crate::types::BlackFrames {
            state: self.state,
            threshold_seconds: self.threshold_seconds,
        }
    }
}
