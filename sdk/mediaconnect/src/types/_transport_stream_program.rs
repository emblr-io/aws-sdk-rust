// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metadata of a single transport stream program.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TransportStreamProgram {
    /// <p>The Program Clock Reference (PCR) Packet ID (PID) as it is reported in the Program Association Table.</p>
    pub pcr_pid: ::std::option::Option<i32>,
    /// <p>The program name as it is reported in the Program Association Table.</p>
    pub program_name: ::std::option::Option<::std::string::String>,
    /// <p>The program number as it is reported in the Program Association Table.</p>
    pub program_number: ::std::option::Option<i32>,
    /// <p>The program Packet ID (PID) as it is reported in the Program Association Table.</p>
    pub program_pid: ::std::option::Option<i32>,
    /// <p>The list of elementary transport streams in the program. The list includes video, audio, and data streams.</p>
    pub streams: ::std::option::Option<::std::vec::Vec<crate::types::TransportStream>>,
}
impl TransportStreamProgram {
    /// <p>The Program Clock Reference (PCR) Packet ID (PID) as it is reported in the Program Association Table.</p>
    pub fn pcr_pid(&self) -> ::std::option::Option<i32> {
        self.pcr_pid
    }
    /// <p>The program name as it is reported in the Program Association Table.</p>
    pub fn program_name(&self) -> ::std::option::Option<&str> {
        self.program_name.as_deref()
    }
    /// <p>The program number as it is reported in the Program Association Table.</p>
    pub fn program_number(&self) -> ::std::option::Option<i32> {
        self.program_number
    }
    /// <p>The program Packet ID (PID) as it is reported in the Program Association Table.</p>
    pub fn program_pid(&self) -> ::std::option::Option<i32> {
        self.program_pid
    }
    /// <p>The list of elementary transport streams in the program. The list includes video, audio, and data streams.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.streams.is_none()`.
    pub fn streams(&self) -> &[crate::types::TransportStream] {
        self.streams.as_deref().unwrap_or_default()
    }
}
impl TransportStreamProgram {
    /// Creates a new builder-style object to manufacture [`TransportStreamProgram`](crate::types::TransportStreamProgram).
    pub fn builder() -> crate::types::builders::TransportStreamProgramBuilder {
        crate::types::builders::TransportStreamProgramBuilder::default()
    }
}

/// A builder for [`TransportStreamProgram`](crate::types::TransportStreamProgram).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TransportStreamProgramBuilder {
    pub(crate) pcr_pid: ::std::option::Option<i32>,
    pub(crate) program_name: ::std::option::Option<::std::string::String>,
    pub(crate) program_number: ::std::option::Option<i32>,
    pub(crate) program_pid: ::std::option::Option<i32>,
    pub(crate) streams: ::std::option::Option<::std::vec::Vec<crate::types::TransportStream>>,
}
impl TransportStreamProgramBuilder {
    /// <p>The Program Clock Reference (PCR) Packet ID (PID) as it is reported in the Program Association Table.</p>
    /// This field is required.
    pub fn pcr_pid(mut self, input: i32) -> Self {
        self.pcr_pid = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Program Clock Reference (PCR) Packet ID (PID) as it is reported in the Program Association Table.</p>
    pub fn set_pcr_pid(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pcr_pid = input;
        self
    }
    /// <p>The Program Clock Reference (PCR) Packet ID (PID) as it is reported in the Program Association Table.</p>
    pub fn get_pcr_pid(&self) -> &::std::option::Option<i32> {
        &self.pcr_pid
    }
    /// <p>The program name as it is reported in the Program Association Table.</p>
    pub fn program_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.program_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The program name as it is reported in the Program Association Table.</p>
    pub fn set_program_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.program_name = input;
        self
    }
    /// <p>The program name as it is reported in the Program Association Table.</p>
    pub fn get_program_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.program_name
    }
    /// <p>The program number as it is reported in the Program Association Table.</p>
    /// This field is required.
    pub fn program_number(mut self, input: i32) -> Self {
        self.program_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The program number as it is reported in the Program Association Table.</p>
    pub fn set_program_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.program_number = input;
        self
    }
    /// <p>The program number as it is reported in the Program Association Table.</p>
    pub fn get_program_number(&self) -> &::std::option::Option<i32> {
        &self.program_number
    }
    /// <p>The program Packet ID (PID) as it is reported in the Program Association Table.</p>
    /// This field is required.
    pub fn program_pid(mut self, input: i32) -> Self {
        self.program_pid = ::std::option::Option::Some(input);
        self
    }
    /// <p>The program Packet ID (PID) as it is reported in the Program Association Table.</p>
    pub fn set_program_pid(mut self, input: ::std::option::Option<i32>) -> Self {
        self.program_pid = input;
        self
    }
    /// <p>The program Packet ID (PID) as it is reported in the Program Association Table.</p>
    pub fn get_program_pid(&self) -> &::std::option::Option<i32> {
        &self.program_pid
    }
    /// Appends an item to `streams`.
    ///
    /// To override the contents of this collection use [`set_streams`](Self::set_streams).
    ///
    /// <p>The list of elementary transport streams in the program. The list includes video, audio, and data streams.</p>
    pub fn streams(mut self, input: crate::types::TransportStream) -> Self {
        let mut v = self.streams.unwrap_or_default();
        v.push(input);
        self.streams = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of elementary transport streams in the program. The list includes video, audio, and data streams.</p>
    pub fn set_streams(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TransportStream>>) -> Self {
        self.streams = input;
        self
    }
    /// <p>The list of elementary transport streams in the program. The list includes video, audio, and data streams.</p>
    pub fn get_streams(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TransportStream>> {
        &self.streams
    }
    /// Consumes the builder and constructs a [`TransportStreamProgram`](crate::types::TransportStreamProgram).
    pub fn build(self) -> crate::types::TransportStreamProgram {
        crate::types::TransportStreamProgram {
            pcr_pid: self.pcr_pid,
            program_name: self.program_name,
            program_number: self.program_number,
            program_pid: self.program_pid,
            streams: self.streams,
        }
    }
}
