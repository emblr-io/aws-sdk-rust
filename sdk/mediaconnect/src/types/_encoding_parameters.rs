// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A collection of parameters that determine how MediaConnect will convert the content. These fields only apply to outputs on flows that have a CDI source.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EncodingParameters {
    /// <p>A value that is used to calculate compression for an output. The bitrate of the output is calculated as follows: Output bitrate = (1 / compressionFactor) * (source bitrate) This property only applies to outputs that use the ST 2110 JPEG XS protocol, with a flow source that uses the CDI protocol. Valid values are floating point numbers in the range of 3.0 to 10.0, inclusive.</p>
    pub compression_factor: ::std::option::Option<f64>,
    /// <p>A setting on the encoder that drives compression settings. This property only applies to video media streams associated with outputs that use the ST 2110 JPEG XS protocol, with a flow source that uses the CDI protocol.</p>
    pub encoder_profile: ::std::option::Option<crate::types::EncoderProfile>,
}
impl EncodingParameters {
    /// <p>A value that is used to calculate compression for an output. The bitrate of the output is calculated as follows: Output bitrate = (1 / compressionFactor) * (source bitrate) This property only applies to outputs that use the ST 2110 JPEG XS protocol, with a flow source that uses the CDI protocol. Valid values are floating point numbers in the range of 3.0 to 10.0, inclusive.</p>
    pub fn compression_factor(&self) -> ::std::option::Option<f64> {
        self.compression_factor
    }
    /// <p>A setting on the encoder that drives compression settings. This property only applies to video media streams associated with outputs that use the ST 2110 JPEG XS protocol, with a flow source that uses the CDI protocol.</p>
    pub fn encoder_profile(&self) -> ::std::option::Option<&crate::types::EncoderProfile> {
        self.encoder_profile.as_ref()
    }
}
impl EncodingParameters {
    /// Creates a new builder-style object to manufacture [`EncodingParameters`](crate::types::EncodingParameters).
    pub fn builder() -> crate::types::builders::EncodingParametersBuilder {
        crate::types::builders::EncodingParametersBuilder::default()
    }
}

/// A builder for [`EncodingParameters`](crate::types::EncodingParameters).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EncodingParametersBuilder {
    pub(crate) compression_factor: ::std::option::Option<f64>,
    pub(crate) encoder_profile: ::std::option::Option<crate::types::EncoderProfile>,
}
impl EncodingParametersBuilder {
    /// <p>A value that is used to calculate compression for an output. The bitrate of the output is calculated as follows: Output bitrate = (1 / compressionFactor) * (source bitrate) This property only applies to outputs that use the ST 2110 JPEG XS protocol, with a flow source that uses the CDI protocol. Valid values are floating point numbers in the range of 3.0 to 10.0, inclusive.</p>
    /// This field is required.
    pub fn compression_factor(mut self, input: f64) -> Self {
        self.compression_factor = ::std::option::Option::Some(input);
        self
    }
    /// <p>A value that is used to calculate compression for an output. The bitrate of the output is calculated as follows: Output bitrate = (1 / compressionFactor) * (source bitrate) This property only applies to outputs that use the ST 2110 JPEG XS protocol, with a flow source that uses the CDI protocol. Valid values are floating point numbers in the range of 3.0 to 10.0, inclusive.</p>
    pub fn set_compression_factor(mut self, input: ::std::option::Option<f64>) -> Self {
        self.compression_factor = input;
        self
    }
    /// <p>A value that is used to calculate compression for an output. The bitrate of the output is calculated as follows: Output bitrate = (1 / compressionFactor) * (source bitrate) This property only applies to outputs that use the ST 2110 JPEG XS protocol, with a flow source that uses the CDI protocol. Valid values are floating point numbers in the range of 3.0 to 10.0, inclusive.</p>
    pub fn get_compression_factor(&self) -> &::std::option::Option<f64> {
        &self.compression_factor
    }
    /// <p>A setting on the encoder that drives compression settings. This property only applies to video media streams associated with outputs that use the ST 2110 JPEG XS protocol, with a flow source that uses the CDI protocol.</p>
    /// This field is required.
    pub fn encoder_profile(mut self, input: crate::types::EncoderProfile) -> Self {
        self.encoder_profile = ::std::option::Option::Some(input);
        self
    }
    /// <p>A setting on the encoder that drives compression settings. This property only applies to video media streams associated with outputs that use the ST 2110 JPEG XS protocol, with a flow source that uses the CDI protocol.</p>
    pub fn set_encoder_profile(mut self, input: ::std::option::Option<crate::types::EncoderProfile>) -> Self {
        self.encoder_profile = input;
        self
    }
    /// <p>A setting on the encoder that drives compression settings. This property only applies to video media streams associated with outputs that use the ST 2110 JPEG XS protocol, with a flow source that uses the CDI protocol.</p>
    pub fn get_encoder_profile(&self) -> &::std::option::Option<crate::types::EncoderProfile> {
        &self.encoder_profile
    }
    /// Consumes the builder and constructs a [`EncodingParameters`](crate::types::EncodingParameters).
    pub fn build(self) -> crate::types::EncodingParameters {
        crate::types::EncodingParameters {
            compression_factor: self.compression_factor,
            encoder_profile: self.encoder_profile,
        }
    }
}
