// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The settings for source failover.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FailoverConfig {
    /// <p>The type of failover you choose for this flow. MERGE combines the source streams into a single stream, allowing graceful recovery from any single-source loss. FAILOVER allows switching between different streams.</p>
    pub failover_mode: ::std::option::Option<crate::types::FailoverMode>,
    /// <p>Search window time to look for dash-7 packets.</p>
    pub recovery_window: ::std::option::Option<i32>,
    /// <p>The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.</p>
    pub source_priority: ::std::option::Option<crate::types::SourcePriority>,
    /// <p>The state of source failover on the flow. If the state is inactive, the flow can have only one source. If the state is active, the flow can have one or two sources.</p>
    pub state: ::std::option::Option<crate::types::State>,
}
impl FailoverConfig {
    /// <p>The type of failover you choose for this flow. MERGE combines the source streams into a single stream, allowing graceful recovery from any single-source loss. FAILOVER allows switching between different streams.</p>
    pub fn failover_mode(&self) -> ::std::option::Option<&crate::types::FailoverMode> {
        self.failover_mode.as_ref()
    }
    /// <p>Search window time to look for dash-7 packets.</p>
    pub fn recovery_window(&self) -> ::std::option::Option<i32> {
        self.recovery_window
    }
    /// <p>The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.</p>
    pub fn source_priority(&self) -> ::std::option::Option<&crate::types::SourcePriority> {
        self.source_priority.as_ref()
    }
    /// <p>The state of source failover on the flow. If the state is inactive, the flow can have only one source. If the state is active, the flow can have one or two sources.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::State> {
        self.state.as_ref()
    }
}
impl FailoverConfig {
    /// Creates a new builder-style object to manufacture [`FailoverConfig`](crate::types::FailoverConfig).
    pub fn builder() -> crate::types::builders::FailoverConfigBuilder {
        crate::types::builders::FailoverConfigBuilder::default()
    }
}

/// A builder for [`FailoverConfig`](crate::types::FailoverConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FailoverConfigBuilder {
    pub(crate) failover_mode: ::std::option::Option<crate::types::FailoverMode>,
    pub(crate) recovery_window: ::std::option::Option<i32>,
    pub(crate) source_priority: ::std::option::Option<crate::types::SourcePriority>,
    pub(crate) state: ::std::option::Option<crate::types::State>,
}
impl FailoverConfigBuilder {
    /// <p>The type of failover you choose for this flow. MERGE combines the source streams into a single stream, allowing graceful recovery from any single-source loss. FAILOVER allows switching between different streams.</p>
    pub fn failover_mode(mut self, input: crate::types::FailoverMode) -> Self {
        self.failover_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of failover you choose for this flow. MERGE combines the source streams into a single stream, allowing graceful recovery from any single-source loss. FAILOVER allows switching between different streams.</p>
    pub fn set_failover_mode(mut self, input: ::std::option::Option<crate::types::FailoverMode>) -> Self {
        self.failover_mode = input;
        self
    }
    /// <p>The type of failover you choose for this flow. MERGE combines the source streams into a single stream, allowing graceful recovery from any single-source loss. FAILOVER allows switching between different streams.</p>
    pub fn get_failover_mode(&self) -> &::std::option::Option<crate::types::FailoverMode> {
        &self.failover_mode
    }
    /// <p>Search window time to look for dash-7 packets.</p>
    pub fn recovery_window(mut self, input: i32) -> Self {
        self.recovery_window = ::std::option::Option::Some(input);
        self
    }
    /// <p>Search window time to look for dash-7 packets.</p>
    pub fn set_recovery_window(mut self, input: ::std::option::Option<i32>) -> Self {
        self.recovery_window = input;
        self
    }
    /// <p>Search window time to look for dash-7 packets.</p>
    pub fn get_recovery_window(&self) -> &::std::option::Option<i32> {
        &self.recovery_window
    }
    /// <p>The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.</p>
    pub fn source_priority(mut self, input: crate::types::SourcePriority) -> Self {
        self.source_priority = ::std::option::Option::Some(input);
        self
    }
    /// <p>The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.</p>
    pub fn set_source_priority(mut self, input: ::std::option::Option<crate::types::SourcePriority>) -> Self {
        self.source_priority = input;
        self
    }
    /// <p>The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.</p>
    pub fn get_source_priority(&self) -> &::std::option::Option<crate::types::SourcePriority> {
        &self.source_priority
    }
    /// <p>The state of source failover on the flow. If the state is inactive, the flow can have only one source. If the state is active, the flow can have one or two sources.</p>
    pub fn state(mut self, input: crate::types::State) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of source failover on the flow. If the state is inactive, the flow can have only one source. If the state is active, the flow can have one or two sources.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::State>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of source failover on the flow. If the state is inactive, the flow can have only one source. If the state is active, the flow can have one or two sources.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::State> {
        &self.state
    }
    /// Consumes the builder and constructs a [`FailoverConfig`](crate::types::FailoverConfig).
    pub fn build(self) -> crate::types::FailoverConfig {
        crate::types::FailoverConfig {
            failover_mode: self.failover_mode,
            recovery_window: self.recovery_window,
            source_priority: self.source_priority,
            state: self.state,
        }
    }
}
