// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The media stream that is associated with the source, and the parameters for that association.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MediaStreamSourceConfiguration {
    /// <p>The format that was used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv.</p>
    pub encoding_name: ::std::option::Option<crate::types::EncodingName>,
    /// <p>The media streams that you want to associate with the source.</p>
    pub input_configurations: ::std::option::Option<::std::vec::Vec<crate::types::InputConfiguration>>,
    /// <p>A name that helps you distinguish one media stream from another.</p>
    pub media_stream_name: ::std::option::Option<::std::string::String>,
}
impl MediaStreamSourceConfiguration {
    /// <p>The format that was used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv.</p>
    pub fn encoding_name(&self) -> ::std::option::Option<&crate::types::EncodingName> {
        self.encoding_name.as_ref()
    }
    /// <p>The media streams that you want to associate with the source.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.input_configurations.is_none()`.
    pub fn input_configurations(&self) -> &[crate::types::InputConfiguration] {
        self.input_configurations.as_deref().unwrap_or_default()
    }
    /// <p>A name that helps you distinguish one media stream from another.</p>
    pub fn media_stream_name(&self) -> ::std::option::Option<&str> {
        self.media_stream_name.as_deref()
    }
}
impl MediaStreamSourceConfiguration {
    /// Creates a new builder-style object to manufacture [`MediaStreamSourceConfiguration`](crate::types::MediaStreamSourceConfiguration).
    pub fn builder() -> crate::types::builders::MediaStreamSourceConfigurationBuilder {
        crate::types::builders::MediaStreamSourceConfigurationBuilder::default()
    }
}

/// A builder for [`MediaStreamSourceConfiguration`](crate::types::MediaStreamSourceConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MediaStreamSourceConfigurationBuilder {
    pub(crate) encoding_name: ::std::option::Option<crate::types::EncodingName>,
    pub(crate) input_configurations: ::std::option::Option<::std::vec::Vec<crate::types::InputConfiguration>>,
    pub(crate) media_stream_name: ::std::option::Option<::std::string::String>,
}
impl MediaStreamSourceConfigurationBuilder {
    /// <p>The format that was used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv.</p>
    /// This field is required.
    pub fn encoding_name(mut self, input: crate::types::EncodingName) -> Self {
        self.encoding_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format that was used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv.</p>
    pub fn set_encoding_name(mut self, input: ::std::option::Option<crate::types::EncodingName>) -> Self {
        self.encoding_name = input;
        self
    }
    /// <p>The format that was used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv.</p>
    pub fn get_encoding_name(&self) -> &::std::option::Option<crate::types::EncodingName> {
        &self.encoding_name
    }
    /// Appends an item to `input_configurations`.
    ///
    /// To override the contents of this collection use [`set_input_configurations`](Self::set_input_configurations).
    ///
    /// <p>The media streams that you want to associate with the source.</p>
    pub fn input_configurations(mut self, input: crate::types::InputConfiguration) -> Self {
        let mut v = self.input_configurations.unwrap_or_default();
        v.push(input);
        self.input_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The media streams that you want to associate with the source.</p>
    pub fn set_input_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InputConfiguration>>) -> Self {
        self.input_configurations = input;
        self
    }
    /// <p>The media streams that you want to associate with the source.</p>
    pub fn get_input_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InputConfiguration>> {
        &self.input_configurations
    }
    /// <p>A name that helps you distinguish one media stream from another.</p>
    /// This field is required.
    pub fn media_stream_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.media_stream_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name that helps you distinguish one media stream from another.</p>
    pub fn set_media_stream_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.media_stream_name = input;
        self
    }
    /// <p>A name that helps you distinguish one media stream from another.</p>
    pub fn get_media_stream_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.media_stream_name
    }
    /// Consumes the builder and constructs a [`MediaStreamSourceConfiguration`](crate::types::MediaStreamSourceConfiguration).
    pub fn build(self) -> crate::types::MediaStreamSourceConfiguration {
        crate::types::MediaStreamSourceConfiguration {
            encoding_name: self.encoding_name,
            input_configurations: self.input_configurations,
            media_stream_name: self.media_stream_name,
        }
    }
}
