// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the configuration for video stream metrics monitoring.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VideoMonitoringSetting {
    /// <p>Detects video frames that are black.</p>
    pub black_frames: ::std::option::Option<crate::types::BlackFrames>,
    /// <p>Detects video frames that have not changed.</p>
    pub frozen_frames: ::std::option::Option<crate::types::FrozenFrames>,
}
impl VideoMonitoringSetting {
    /// <p>Detects video frames that are black.</p>
    pub fn black_frames(&self) -> ::std::option::Option<&crate::types::BlackFrames> {
        self.black_frames.as_ref()
    }
    /// <p>Detects video frames that have not changed.</p>
    pub fn frozen_frames(&self) -> ::std::option::Option<&crate::types::FrozenFrames> {
        self.frozen_frames.as_ref()
    }
}
impl VideoMonitoringSetting {
    /// Creates a new builder-style object to manufacture [`VideoMonitoringSetting`](crate::types::VideoMonitoringSetting).
    pub fn builder() -> crate::types::builders::VideoMonitoringSettingBuilder {
        crate::types::builders::VideoMonitoringSettingBuilder::default()
    }
}

/// A builder for [`VideoMonitoringSetting`](crate::types::VideoMonitoringSetting).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VideoMonitoringSettingBuilder {
    pub(crate) black_frames: ::std::option::Option<crate::types::BlackFrames>,
    pub(crate) frozen_frames: ::std::option::Option<crate::types::FrozenFrames>,
}
impl VideoMonitoringSettingBuilder {
    /// <p>Detects video frames that are black.</p>
    pub fn black_frames(mut self, input: crate::types::BlackFrames) -> Self {
        self.black_frames = ::std::option::Option::Some(input);
        self
    }
    /// <p>Detects video frames that are black.</p>
    pub fn set_black_frames(mut self, input: ::std::option::Option<crate::types::BlackFrames>) -> Self {
        self.black_frames = input;
        self
    }
    /// <p>Detects video frames that are black.</p>
    pub fn get_black_frames(&self) -> &::std::option::Option<crate::types::BlackFrames> {
        &self.black_frames
    }
    /// <p>Detects video frames that have not changed.</p>
    pub fn frozen_frames(mut self, input: crate::types::FrozenFrames) -> Self {
        self.frozen_frames = ::std::option::Option::Some(input);
        self
    }
    /// <p>Detects video frames that have not changed.</p>
    pub fn set_frozen_frames(mut self, input: ::std::option::Option<crate::types::FrozenFrames>) -> Self {
        self.frozen_frames = input;
        self
    }
    /// <p>Detects video frames that have not changed.</p>
    pub fn get_frozen_frames(&self) -> &::std::option::Option<crate::types::FrozenFrames> {
        &self.frozen_frames
    }
    /// Consumes the builder and constructs a [`VideoMonitoringSetting`](crate::types::VideoMonitoringSetting).
    pub fn build(self) -> crate::types::VideoMonitoringSetting {
        crate::types::VideoMonitoringSetting {
            black_frames: self.black_frames,
            frozen_frames: self.frozen_frames,
        }
    }
}
