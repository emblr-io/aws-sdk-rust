// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The settings related to the multicast source.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MulticastSourceSettings {
    /// <p>The IP address of the source for source-specific multicast (SSM).</p>
    pub multicast_source_ip: ::std::option::Option<::std::string::String>,
}
impl MulticastSourceSettings {
    /// <p>The IP address of the source for source-specific multicast (SSM).</p>
    pub fn multicast_source_ip(&self) -> ::std::option::Option<&str> {
        self.multicast_source_ip.as_deref()
    }
}
impl MulticastSourceSettings {
    /// Creates a new builder-style object to manufacture [`MulticastSourceSettings`](crate::types::MulticastSourceSettings).
    pub fn builder() -> crate::types::builders::MulticastSourceSettingsBuilder {
        crate::types::builders::MulticastSourceSettingsBuilder::default()
    }
}

/// A builder for [`MulticastSourceSettings`](crate::types::MulticastSourceSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MulticastSourceSettingsBuilder {
    pub(crate) multicast_source_ip: ::std::option::Option<::std::string::String>,
}
impl MulticastSourceSettingsBuilder {
    /// <p>The IP address of the source for source-specific multicast (SSM).</p>
    pub fn multicast_source_ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.multicast_source_ip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address of the source for source-specific multicast (SSM).</p>
    pub fn set_multicast_source_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.multicast_source_ip = input;
        self
    }
    /// <p>The IP address of the source for source-specific multicast (SSM).</p>
    pub fn get_multicast_source_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.multicast_source_ip
    }
    /// Consumes the builder and constructs a [`MulticastSourceSettings`](crate::types::MulticastSourceSettings).
    pub fn build(self) -> crate::types::MulticastSourceSettings {
        crate::types::MulticastSourceSettings {
            multicast_source_ip: self.multicast_source_ip,
        }
    }
}
