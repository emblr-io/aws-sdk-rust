// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of a flow, including its ARN, Availability Zone, and source type.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListedFlow {
    /// <p>The Availability Zone that the flow was created in.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>A description of the flow.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the flow.</p>
    pub flow_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the flow.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The type of source. This value is either owned (originated somewhere other than an MediaConnect flow owned by another Amazon Web Services account) or entitled (originated at a MediaConnect flow owned by another Amazon Web Services account).</p>
    pub source_type: ::std::option::Option<crate::types::SourceType>,
    /// <p>The current status of the flow.</p>
    pub status: ::std::option::Option<crate::types::Status>,
    /// <p>The maintenance settings for the flow.</p>
    pub maintenance: ::std::option::Option<crate::types::Maintenance>,
}
impl ListedFlow {
    /// <p>The Availability Zone that the flow was created in.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>A description of the flow.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ARN of the flow.</p>
    pub fn flow_arn(&self) -> ::std::option::Option<&str> {
        self.flow_arn.as_deref()
    }
    /// <p>The name of the flow.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of source. This value is either owned (originated somewhere other than an MediaConnect flow owned by another Amazon Web Services account) or entitled (originated at a MediaConnect flow owned by another Amazon Web Services account).</p>
    pub fn source_type(&self) -> ::std::option::Option<&crate::types::SourceType> {
        self.source_type.as_ref()
    }
    /// <p>The current status of the flow.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
    /// <p>The maintenance settings for the flow.</p>
    pub fn maintenance(&self) -> ::std::option::Option<&crate::types::Maintenance> {
        self.maintenance.as_ref()
    }
}
impl ListedFlow {
    /// Creates a new builder-style object to manufacture [`ListedFlow`](crate::types::ListedFlow).
    pub fn builder() -> crate::types::builders::ListedFlowBuilder {
        crate::types::builders::ListedFlowBuilder::default()
    }
}

/// A builder for [`ListedFlow`](crate::types::ListedFlow).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListedFlowBuilder {
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) flow_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) source_type: ::std::option::Option<crate::types::SourceType>,
    pub(crate) status: ::std::option::Option<crate::types::Status>,
    pub(crate) maintenance: ::std::option::Option<crate::types::Maintenance>,
}
impl ListedFlowBuilder {
    /// <p>The Availability Zone that the flow was created in.</p>
    /// This field is required.
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone that the flow was created in.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The Availability Zone that the flow was created in.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>A description of the flow.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the flow.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the flow.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The ARN of the flow.</p>
    /// This field is required.
    pub fn flow_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.flow_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the flow.</p>
    pub fn set_flow_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.flow_arn = input;
        self
    }
    /// <p>The ARN of the flow.</p>
    pub fn get_flow_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.flow_arn
    }
    /// <p>The name of the flow.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the flow.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the flow.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of source. This value is either owned (originated somewhere other than an MediaConnect flow owned by another Amazon Web Services account) or entitled (originated at a MediaConnect flow owned by another Amazon Web Services account).</p>
    /// This field is required.
    pub fn source_type(mut self, input: crate::types::SourceType) -> Self {
        self.source_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of source. This value is either owned (originated somewhere other than an MediaConnect flow owned by another Amazon Web Services account) or entitled (originated at a MediaConnect flow owned by another Amazon Web Services account).</p>
    pub fn set_source_type(mut self, input: ::std::option::Option<crate::types::SourceType>) -> Self {
        self.source_type = input;
        self
    }
    /// <p>The type of source. This value is either owned (originated somewhere other than an MediaConnect flow owned by another Amazon Web Services account) or entitled (originated at a MediaConnect flow owned by another Amazon Web Services account).</p>
    pub fn get_source_type(&self) -> &::std::option::Option<crate::types::SourceType> {
        &self.source_type
    }
    /// <p>The current status of the flow.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the flow.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the flow.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::Status> {
        &self.status
    }
    /// <p>The maintenance settings for the flow.</p>
    pub fn maintenance(mut self, input: crate::types::Maintenance) -> Self {
        self.maintenance = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maintenance settings for the flow.</p>
    pub fn set_maintenance(mut self, input: ::std::option::Option<crate::types::Maintenance>) -> Self {
        self.maintenance = input;
        self
    }
    /// <p>The maintenance settings for the flow.</p>
    pub fn get_maintenance(&self) -> &::std::option::Option<crate::types::Maintenance> {
        &self.maintenance
    }
    /// Consumes the builder and constructs a [`ListedFlow`](crate::types::ListedFlow).
    pub fn build(self) -> crate::types::ListedFlow {
        crate::types::ListedFlow {
            availability_zone: self.availability_zone,
            description: self.description,
            flow_arn: self.flow_arn,
            name: self.name,
            source_type: self.source_type,
            status: self.status,
            maintenance: self.maintenance,
        }
    }
}
