// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SourcePriority {
    /// <p>The name of the source you choose as the primary source for this flow.</p>
    pub primary_source: ::std::option::Option<::std::string::String>,
}
impl SourcePriority {
    /// <p>The name of the source you choose as the primary source for this flow.</p>
    pub fn primary_source(&self) -> ::std::option::Option<&str> {
        self.primary_source.as_deref()
    }
}
impl SourcePriority {
    /// Creates a new builder-style object to manufacture [`SourcePriority`](crate::types::SourcePriority).
    pub fn builder() -> crate::types::builders::SourcePriorityBuilder {
        crate::types::builders::SourcePriorityBuilder::default()
    }
}

/// A builder for [`SourcePriority`](crate::types::SourcePriority).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SourcePriorityBuilder {
    pub(crate) primary_source: ::std::option::Option<::std::string::String>,
}
impl SourcePriorityBuilder {
    /// <p>The name of the source you choose as the primary source for this flow.</p>
    pub fn primary_source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.primary_source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the source you choose as the primary source for this flow.</p>
    pub fn set_primary_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.primary_source = input;
        self
    }
    /// <p>The name of the source you choose as the primary source for this flow.</p>
    pub fn get_primary_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.primary_source
    }
    /// Consumes the builder and constructs a [`SourcePriority`](crate::types::SourcePriority).
    pub fn build(self) -> crate::types::SourcePriority {
        crate::types::SourcePriority {
            primary_source: self.primary_source,
        }
    }
}
