// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Displays details of the selected bridge.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListedBridge {
    /// <p>The ARN of the bridge.</p>
    pub bridge_arn: ::std::option::Option<::std::string::String>,
    /// <p>The state of the bridge.</p>
    pub bridge_state: ::std::option::Option<crate::types::BridgeState>,
    /// <p>The type of the bridge.</p>
    pub bridge_type: ::std::option::Option<::std::string::String>,
    /// <p>The name of the bridge.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the gateway associated with the bridge.</p>
    pub placement_arn: ::std::option::Option<::std::string::String>,
}
impl ListedBridge {
    /// <p>The ARN of the bridge.</p>
    pub fn bridge_arn(&self) -> ::std::option::Option<&str> {
        self.bridge_arn.as_deref()
    }
    /// <p>The state of the bridge.</p>
    pub fn bridge_state(&self) -> ::std::option::Option<&crate::types::BridgeState> {
        self.bridge_state.as_ref()
    }
    /// <p>The type of the bridge.</p>
    pub fn bridge_type(&self) -> ::std::option::Option<&str> {
        self.bridge_type.as_deref()
    }
    /// <p>The name of the bridge.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ARN of the gateway associated with the bridge.</p>
    pub fn placement_arn(&self) -> ::std::option::Option<&str> {
        self.placement_arn.as_deref()
    }
}
impl ListedBridge {
    /// Creates a new builder-style object to manufacture [`ListedBridge`](crate::types::ListedBridge).
    pub fn builder() -> crate::types::builders::ListedBridgeBuilder {
        crate::types::builders::ListedBridgeBuilder::default()
    }
}

/// A builder for [`ListedBridge`](crate::types::ListedBridge).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListedBridgeBuilder {
    pub(crate) bridge_arn: ::std::option::Option<::std::string::String>,
    pub(crate) bridge_state: ::std::option::Option<crate::types::BridgeState>,
    pub(crate) bridge_type: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) placement_arn: ::std::option::Option<::std::string::String>,
}
impl ListedBridgeBuilder {
    /// <p>The ARN of the bridge.</p>
    /// This field is required.
    pub fn bridge_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bridge_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the bridge.</p>
    pub fn set_bridge_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bridge_arn = input;
        self
    }
    /// <p>The ARN of the bridge.</p>
    pub fn get_bridge_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.bridge_arn
    }
    /// <p>The state of the bridge.</p>
    /// This field is required.
    pub fn bridge_state(mut self, input: crate::types::BridgeState) -> Self {
        self.bridge_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the bridge.</p>
    pub fn set_bridge_state(mut self, input: ::std::option::Option<crate::types::BridgeState>) -> Self {
        self.bridge_state = input;
        self
    }
    /// <p>The state of the bridge.</p>
    pub fn get_bridge_state(&self) -> &::std::option::Option<crate::types::BridgeState> {
        &self.bridge_state
    }
    /// <p>The type of the bridge.</p>
    /// This field is required.
    pub fn bridge_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bridge_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of the bridge.</p>
    pub fn set_bridge_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bridge_type = input;
        self
    }
    /// <p>The type of the bridge.</p>
    pub fn get_bridge_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.bridge_type
    }
    /// <p>The name of the bridge.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the bridge.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the bridge.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The ARN of the gateway associated with the bridge.</p>
    /// This field is required.
    pub fn placement_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.placement_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the gateway associated with the bridge.</p>
    pub fn set_placement_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.placement_arn = input;
        self
    }
    /// <p>The ARN of the gateway associated with the bridge.</p>
    pub fn get_placement_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.placement_arn
    }
    /// Consumes the builder and constructs a [`ListedBridge`](crate::types::ListedBridge).
    pub fn build(self) -> crate::types::ListedBridge {
        crate::types::ListedBridge {
            bridge_arn: self.bridge_arn,
            bridge_state: self.bridge_state,
            bridge_type: self.bridge_type,
            name: self.name,
            placement_arn: self.placement_arn,
        }
    }
}
