// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The transport parameters that are associated with an incoming media stream.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InputConfiguration {
    /// <p>The IP address that the flow listens on for incoming content for a media stream.</p>
    pub input_ip: ::std::option::Option<::std::string::String>,
    /// <p>The port that the flow listens on for an incoming media stream.</p>
    pub input_port: ::std::option::Option<i32>,
    /// <p>The VPC interface where the media stream comes in from.</p>
    pub interface: ::std::option::Option<crate::types::Interface>,
}
impl InputConfiguration {
    /// <p>The IP address that the flow listens on for incoming content for a media stream.</p>
    pub fn input_ip(&self) -> ::std::option::Option<&str> {
        self.input_ip.as_deref()
    }
    /// <p>The port that the flow listens on for an incoming media stream.</p>
    pub fn input_port(&self) -> ::std::option::Option<i32> {
        self.input_port
    }
    /// <p>The VPC interface where the media stream comes in from.</p>
    pub fn interface(&self) -> ::std::option::Option<&crate::types::Interface> {
        self.interface.as_ref()
    }
}
impl InputConfiguration {
    /// Creates a new builder-style object to manufacture [`InputConfiguration`](crate::types::InputConfiguration).
    pub fn builder() -> crate::types::builders::InputConfigurationBuilder {
        crate::types::builders::InputConfigurationBuilder::default()
    }
}

/// A builder for [`InputConfiguration`](crate::types::InputConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InputConfigurationBuilder {
    pub(crate) input_ip: ::std::option::Option<::std::string::String>,
    pub(crate) input_port: ::std::option::Option<i32>,
    pub(crate) interface: ::std::option::Option<crate::types::Interface>,
}
impl InputConfigurationBuilder {
    /// <p>The IP address that the flow listens on for incoming content for a media stream.</p>
    /// This field is required.
    pub fn input_ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_ip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address that the flow listens on for incoming content for a media stream.</p>
    pub fn set_input_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_ip = input;
        self
    }
    /// <p>The IP address that the flow listens on for incoming content for a media stream.</p>
    pub fn get_input_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_ip
    }
    /// <p>The port that the flow listens on for an incoming media stream.</p>
    /// This field is required.
    pub fn input_port(mut self, input: i32) -> Self {
        self.input_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port that the flow listens on for an incoming media stream.</p>
    pub fn set_input_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.input_port = input;
        self
    }
    /// <p>The port that the flow listens on for an incoming media stream.</p>
    pub fn get_input_port(&self) -> &::std::option::Option<i32> {
        &self.input_port
    }
    /// <p>The VPC interface where the media stream comes in from.</p>
    /// This field is required.
    pub fn interface(mut self, input: crate::types::Interface) -> Self {
        self.interface = ::std::option::Option::Some(input);
        self
    }
    /// <p>The VPC interface where the media stream comes in from.</p>
    pub fn set_interface(mut self, input: ::std::option::Option<crate::types::Interface>) -> Self {
        self.interface = input;
        self
    }
    /// <p>The VPC interface where the media stream comes in from.</p>
    pub fn get_interface(&self) -> &::std::option::Option<crate::types::Interface> {
        &self.interface
    }
    /// Consumes the builder and constructs a [`InputConfiguration`](crate::types::InputConfiguration).
    pub fn build(self) -> crate::types::InputConfiguration {
        crate::types::InputConfiguration {
            input_ip: self.input_ip,
            input_port: self.input_port,
            interface: self.interface,
        }
    }
}
