// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the configuration settings for NDI outputs. Required when the flow includes NDI outputs.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NdiConfig {
    /// <p>A setting that controls whether NDI outputs can be used in the flow. Must be ENABLED to add NDI outputs. Default is DISABLED.</p>
    pub ndi_state: ::std::option::Option<crate::types::NdiState>,
    /// <p>A prefix for the names of the NDI sources that the flow creates. If a custom name isn't specified, MediaConnect generates a unique 12-character ID as the prefix.</p>
    pub machine_name: ::std::option::Option<::std::string::String>,
    /// <p>A list of up to three NDI discovery server configurations. While not required by the API, this configuration is necessary for NDI functionality to work properly.</p>
    pub ndi_discovery_servers: ::std::option::Option<::std::vec::Vec<crate::types::NdiDiscoveryServerConfig>>,
}
impl NdiConfig {
    /// <p>A setting that controls whether NDI outputs can be used in the flow. Must be ENABLED to add NDI outputs. Default is DISABLED.</p>
    pub fn ndi_state(&self) -> ::std::option::Option<&crate::types::NdiState> {
        self.ndi_state.as_ref()
    }
    /// <p>A prefix for the names of the NDI sources that the flow creates. If a custom name isn't specified, MediaConnect generates a unique 12-character ID as the prefix.</p>
    pub fn machine_name(&self) -> ::std::option::Option<&str> {
        self.machine_name.as_deref()
    }
    /// <p>A list of up to three NDI discovery server configurations. While not required by the API, this configuration is necessary for NDI functionality to work properly.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ndi_discovery_servers.is_none()`.
    pub fn ndi_discovery_servers(&self) -> &[crate::types::NdiDiscoveryServerConfig] {
        self.ndi_discovery_servers.as_deref().unwrap_or_default()
    }
}
impl NdiConfig {
    /// Creates a new builder-style object to manufacture [`NdiConfig`](crate::types::NdiConfig).
    pub fn builder() -> crate::types::builders::NdiConfigBuilder {
        crate::types::builders::NdiConfigBuilder::default()
    }
}

/// A builder for [`NdiConfig`](crate::types::NdiConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NdiConfigBuilder {
    pub(crate) ndi_state: ::std::option::Option<crate::types::NdiState>,
    pub(crate) machine_name: ::std::option::Option<::std::string::String>,
    pub(crate) ndi_discovery_servers: ::std::option::Option<::std::vec::Vec<crate::types::NdiDiscoveryServerConfig>>,
}
impl NdiConfigBuilder {
    /// <p>A setting that controls whether NDI outputs can be used in the flow. Must be ENABLED to add NDI outputs. Default is DISABLED.</p>
    pub fn ndi_state(mut self, input: crate::types::NdiState) -> Self {
        self.ndi_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>A setting that controls whether NDI outputs can be used in the flow. Must be ENABLED to add NDI outputs. Default is DISABLED.</p>
    pub fn set_ndi_state(mut self, input: ::std::option::Option<crate::types::NdiState>) -> Self {
        self.ndi_state = input;
        self
    }
    /// <p>A setting that controls whether NDI outputs can be used in the flow. Must be ENABLED to add NDI outputs. Default is DISABLED.</p>
    pub fn get_ndi_state(&self) -> &::std::option::Option<crate::types::NdiState> {
        &self.ndi_state
    }
    /// <p>A prefix for the names of the NDI sources that the flow creates. If a custom name isn't specified, MediaConnect generates a unique 12-character ID as the prefix.</p>
    pub fn machine_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.machine_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A prefix for the names of the NDI sources that the flow creates. If a custom name isn't specified, MediaConnect generates a unique 12-character ID as the prefix.</p>
    pub fn set_machine_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.machine_name = input;
        self
    }
    /// <p>A prefix for the names of the NDI sources that the flow creates. If a custom name isn't specified, MediaConnect generates a unique 12-character ID as the prefix.</p>
    pub fn get_machine_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.machine_name
    }
    /// Appends an item to `ndi_discovery_servers`.
    ///
    /// To override the contents of this collection use [`set_ndi_discovery_servers`](Self::set_ndi_discovery_servers).
    ///
    /// <p>A list of up to three NDI discovery server configurations. While not required by the API, this configuration is necessary for NDI functionality to work properly.</p>
    pub fn ndi_discovery_servers(mut self, input: crate::types::NdiDiscoveryServerConfig) -> Self {
        let mut v = self.ndi_discovery_servers.unwrap_or_default();
        v.push(input);
        self.ndi_discovery_servers = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of up to three NDI discovery server configurations. While not required by the API, this configuration is necessary for NDI functionality to work properly.</p>
    pub fn set_ndi_discovery_servers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NdiDiscoveryServerConfig>>) -> Self {
        self.ndi_discovery_servers = input;
        self
    }
    /// <p>A list of up to three NDI discovery server configurations. While not required by the API, this configuration is necessary for NDI functionality to work properly.</p>
    pub fn get_ndi_discovery_servers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NdiDiscoveryServerConfig>> {
        &self.ndi_discovery_servers
    }
    /// Consumes the builder and constructs a [`NdiConfig`](crate::types::NdiConfig).
    pub fn build(self) -> crate::types::NdiConfig {
        crate::types::NdiConfig {
            ndi_state: self.ndi_state,
            machine_name: self.machine_name,
            ndi_discovery_servers: self.ndi_discovery_servers,
        }
    }
}
