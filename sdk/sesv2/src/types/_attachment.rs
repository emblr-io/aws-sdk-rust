// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains metadata and attachment raw content.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Attachment {
    /// <p>The raw data of the attachment. It needs to be base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an Amazon Web Services SDK, the SDK takes care of the base 64-encoding for you.</p>
    pub raw_content: ::aws_smithy_types::Blob,
    /// <p>A standard descriptor indicating how the attachment should be rendered in the email. Supported values: <code>ATTACHMENT</code> or <code>INLINE</code>.</p>
    pub content_disposition: ::std::option::Option<crate::types::AttachmentContentDisposition>,
    /// <p>The file name for the attachment as it will appear in the email. Amazon SES restricts certain file extensions. To ensure attachments are accepted, check the <a href="https://docs.aws.amazon.com/ses/latest/dg/mime-types.html">Unsupported attachment types</a> in the Amazon SES Developer Guide.</p>
    pub file_name: ::std::string::String,
    /// <p>A brief description of the attachment content.</p>
    pub content_description: ::std::option::Option<::std::string::String>,
    /// <p>Unique identifier for the attachment, used for referencing attachments with INLINE disposition in HTML content.</p>
    pub content_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies how the attachment is encoded. Supported values: <code>BASE64</code>, <code>QUOTED_PRINTABLE</code>, <code>SEVEN_BIT</code>.</p>
    pub content_transfer_encoding: ::std::option::Option<crate::types::AttachmentContentTransferEncoding>,
    /// <p>The MIME type of the attachment.</p><note>
    /// <p>Example: <code>application/pdf</code>, <code>image/jpeg</code></p>
    /// </note>
    pub content_type: ::std::option::Option<::std::string::String>,
}
impl Attachment {
    /// <p>The raw data of the attachment. It needs to be base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an Amazon Web Services SDK, the SDK takes care of the base 64-encoding for you.</p>
    pub fn raw_content(&self) -> &::aws_smithy_types::Blob {
        &self.raw_content
    }
    /// <p>A standard descriptor indicating how the attachment should be rendered in the email. Supported values: <code>ATTACHMENT</code> or <code>INLINE</code>.</p>
    pub fn content_disposition(&self) -> ::std::option::Option<&crate::types::AttachmentContentDisposition> {
        self.content_disposition.as_ref()
    }
    /// <p>The file name for the attachment as it will appear in the email. Amazon SES restricts certain file extensions. To ensure attachments are accepted, check the <a href="https://docs.aws.amazon.com/ses/latest/dg/mime-types.html">Unsupported attachment types</a> in the Amazon SES Developer Guide.</p>
    pub fn file_name(&self) -> &str {
        use std::ops::Deref;
        self.file_name.deref()
    }
    /// <p>A brief description of the attachment content.</p>
    pub fn content_description(&self) -> ::std::option::Option<&str> {
        self.content_description.as_deref()
    }
    /// <p>Unique identifier for the attachment, used for referencing attachments with INLINE disposition in HTML content.</p>
    pub fn content_id(&self) -> ::std::option::Option<&str> {
        self.content_id.as_deref()
    }
    /// <p>Specifies how the attachment is encoded. Supported values: <code>BASE64</code>, <code>QUOTED_PRINTABLE</code>, <code>SEVEN_BIT</code>.</p>
    pub fn content_transfer_encoding(&self) -> ::std::option::Option<&crate::types::AttachmentContentTransferEncoding> {
        self.content_transfer_encoding.as_ref()
    }
    /// <p>The MIME type of the attachment.</p><note>
    /// <p>Example: <code>application/pdf</code>, <code>image/jpeg</code></p>
    /// </note>
    pub fn content_type(&self) -> ::std::option::Option<&str> {
        self.content_type.as_deref()
    }
}
impl Attachment {
    /// Creates a new builder-style object to manufacture [`Attachment`](crate::types::Attachment).
    pub fn builder() -> crate::types::builders::AttachmentBuilder {
        crate::types::builders::AttachmentBuilder::default()
    }
}

/// A builder for [`Attachment`](crate::types::Attachment).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AttachmentBuilder {
    pub(crate) raw_content: ::std::option::Option<::aws_smithy_types::Blob>,
    pub(crate) content_disposition: ::std::option::Option<crate::types::AttachmentContentDisposition>,
    pub(crate) file_name: ::std::option::Option<::std::string::String>,
    pub(crate) content_description: ::std::option::Option<::std::string::String>,
    pub(crate) content_id: ::std::option::Option<::std::string::String>,
    pub(crate) content_transfer_encoding: ::std::option::Option<crate::types::AttachmentContentTransferEncoding>,
    pub(crate) content_type: ::std::option::Option<::std::string::String>,
}
impl AttachmentBuilder {
    /// <p>The raw data of the attachment. It needs to be base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an Amazon Web Services SDK, the SDK takes care of the base 64-encoding for you.</p>
    /// This field is required.
    pub fn raw_content(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.raw_content = ::std::option::Option::Some(input);
        self
    }
    /// <p>The raw data of the attachment. It needs to be base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an Amazon Web Services SDK, the SDK takes care of the base 64-encoding for you.</p>
    pub fn set_raw_content(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.raw_content = input;
        self
    }
    /// <p>The raw data of the attachment. It needs to be base64-encoded if you are accessing Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an Amazon Web Services SDK, the SDK takes care of the base 64-encoding for you.</p>
    pub fn get_raw_content(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.raw_content
    }
    /// <p>A standard descriptor indicating how the attachment should be rendered in the email. Supported values: <code>ATTACHMENT</code> or <code>INLINE</code>.</p>
    pub fn content_disposition(mut self, input: crate::types::AttachmentContentDisposition) -> Self {
        self.content_disposition = ::std::option::Option::Some(input);
        self
    }
    /// <p>A standard descriptor indicating how the attachment should be rendered in the email. Supported values: <code>ATTACHMENT</code> or <code>INLINE</code>.</p>
    pub fn set_content_disposition(mut self, input: ::std::option::Option<crate::types::AttachmentContentDisposition>) -> Self {
        self.content_disposition = input;
        self
    }
    /// <p>A standard descriptor indicating how the attachment should be rendered in the email. Supported values: <code>ATTACHMENT</code> or <code>INLINE</code>.</p>
    pub fn get_content_disposition(&self) -> &::std::option::Option<crate::types::AttachmentContentDisposition> {
        &self.content_disposition
    }
    /// <p>The file name for the attachment as it will appear in the email. Amazon SES restricts certain file extensions. To ensure attachments are accepted, check the <a href="https://docs.aws.amazon.com/ses/latest/dg/mime-types.html">Unsupported attachment types</a> in the Amazon SES Developer Guide.</p>
    /// This field is required.
    pub fn file_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The file name for the attachment as it will appear in the email. Amazon SES restricts certain file extensions. To ensure attachments are accepted, check the <a href="https://docs.aws.amazon.com/ses/latest/dg/mime-types.html">Unsupported attachment types</a> in the Amazon SES Developer Guide.</p>
    pub fn set_file_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_name = input;
        self
    }
    /// <p>The file name for the attachment as it will appear in the email. Amazon SES restricts certain file extensions. To ensure attachments are accepted, check the <a href="https://docs.aws.amazon.com/ses/latest/dg/mime-types.html">Unsupported attachment types</a> in the Amazon SES Developer Guide.</p>
    pub fn get_file_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_name
    }
    /// <p>A brief description of the attachment content.</p>
    pub fn content_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A brief description of the attachment content.</p>
    pub fn set_content_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_description = input;
        self
    }
    /// <p>A brief description of the attachment content.</p>
    pub fn get_content_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_description
    }
    /// <p>Unique identifier for the attachment, used for referencing attachments with INLINE disposition in HTML content.</p>
    pub fn content_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier for the attachment, used for referencing attachments with INLINE disposition in HTML content.</p>
    pub fn set_content_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_id = input;
        self
    }
    /// <p>Unique identifier for the attachment, used for referencing attachments with INLINE disposition in HTML content.</p>
    pub fn get_content_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_id
    }
    /// <p>Specifies how the attachment is encoded. Supported values: <code>BASE64</code>, <code>QUOTED_PRINTABLE</code>, <code>SEVEN_BIT</code>.</p>
    pub fn content_transfer_encoding(mut self, input: crate::types::AttachmentContentTransferEncoding) -> Self {
        self.content_transfer_encoding = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies how the attachment is encoded. Supported values: <code>BASE64</code>, <code>QUOTED_PRINTABLE</code>, <code>SEVEN_BIT</code>.</p>
    pub fn set_content_transfer_encoding(mut self, input: ::std::option::Option<crate::types::AttachmentContentTransferEncoding>) -> Self {
        self.content_transfer_encoding = input;
        self
    }
    /// <p>Specifies how the attachment is encoded. Supported values: <code>BASE64</code>, <code>QUOTED_PRINTABLE</code>, <code>SEVEN_BIT</code>.</p>
    pub fn get_content_transfer_encoding(&self) -> &::std::option::Option<crate::types::AttachmentContentTransferEncoding> {
        &self.content_transfer_encoding
    }
    /// <p>The MIME type of the attachment.</p><note>
    /// <p>Example: <code>application/pdf</code>, <code>image/jpeg</code></p>
    /// </note>
    pub fn content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The MIME type of the attachment.</p><note>
    /// <p>Example: <code>application/pdf</code>, <code>image/jpeg</code></p>
    /// </note>
    pub fn set_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>The MIME type of the attachment.</p><note>
    /// <p>Example: <code>application/pdf</code>, <code>image/jpeg</code></p>
    /// </note>
    pub fn get_content_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_type
    }
    /// Consumes the builder and constructs a [`Attachment`](crate::types::Attachment).
    /// This method will fail if any of the following fields are not set:
    /// - [`raw_content`](crate::types::builders::AttachmentBuilder::raw_content)
    /// - [`file_name`](crate::types::builders::AttachmentBuilder::file_name)
    pub fn build(self) -> ::std::result::Result<crate::types::Attachment, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Attachment {
            raw_content: self.raw_content.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "raw_content",
                    "raw_content was not specified but it is required when building Attachment",
                )
            })?,
            content_disposition: self.content_disposition,
            file_name: self.file_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "file_name",
                    "file_name was not specified but it is required when building Attachment",
                )
            })?,
            content_description: self.content_description,
            content_id: self.content_id,
            content_transfer_encoding: self.content_transfer_encoding,
            content_type: self.content_type,
        })
    }
}
