// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains configuration details of multi-region endpoint (global-endpoint).</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Details {
    /// <p>A list of route configuration details. Must contain exactly one route configuration.</p>
    pub routes_details: ::std::vec::Vec<crate::types::RouteDetails>,
}
impl Details {
    /// <p>A list of route configuration details. Must contain exactly one route configuration.</p>
    pub fn routes_details(&self) -> &[crate::types::RouteDetails] {
        use std::ops::Deref;
        self.routes_details.deref()
    }
}
impl Details {
    /// Creates a new builder-style object to manufacture [`Details`](crate::types::Details).
    pub fn builder() -> crate::types::builders::DetailsBuilder {
        crate::types::builders::DetailsBuilder::default()
    }
}

/// A builder for [`Details`](crate::types::Details).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DetailsBuilder {
    pub(crate) routes_details: ::std::option::Option<::std::vec::Vec<crate::types::RouteDetails>>,
}
impl DetailsBuilder {
    /// Appends an item to `routes_details`.
    ///
    /// To override the contents of this collection use [`set_routes_details`](Self::set_routes_details).
    ///
    /// <p>A list of route configuration details. Must contain exactly one route configuration.</p>
    pub fn routes_details(mut self, input: crate::types::RouteDetails) -> Self {
        let mut v = self.routes_details.unwrap_or_default();
        v.push(input);
        self.routes_details = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of route configuration details. Must contain exactly one route configuration.</p>
    pub fn set_routes_details(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteDetails>>) -> Self {
        self.routes_details = input;
        self
    }
    /// <p>A list of route configuration details. Must contain exactly one route configuration.</p>
    pub fn get_routes_details(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteDetails>> {
        &self.routes_details
    }
    /// Consumes the builder and constructs a [`Details`](crate::types::Details).
    /// This method will fail if any of the following fields are not set:
    /// - [`routes_details`](crate::types::builders::DetailsBuilder::routes_details)
    pub fn build(self) -> ::std::result::Result<crate::types::Details, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Details {
            routes_details: self.routes_details.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "routes_details",
                    "routes_details was not specified but it is required when building Details",
                )
            })?,
        })
    }
}
