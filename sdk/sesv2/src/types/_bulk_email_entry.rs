// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BulkEmailEntry {
    /// <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p><note>
    /// <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the local part of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the domain part of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p>
    /// </note>
    pub destination: ::std::option::Option<crate::types::Destination>,
    /// <p>A list of tags, in the form of name/value pairs, to apply to an email that you send using the <code>SendBulkTemplatedEmail</code> operation. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.</p>
    pub replacement_tags: ::std::option::Option<::std::vec::Vec<crate::types::MessageTag>>,
    /// <p>The <code>ReplacementEmailContent</code> associated with a <code>BulkEmailEntry</code>.</p>
    pub replacement_email_content: ::std::option::Option<crate::types::ReplacementEmailContent>,
    /// <p>The list of message headers associated with the <code>BulkEmailEntry</code> data type.</p>
    /// <ul>
    /// <li>
    /// <p>Headers Not Present in <code>BulkEmailEntry</code>: If a header is specified in <a href="https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_Template.html"> <code>Template</code> </a> but not in <code>BulkEmailEntry</code>, the header from <code>Template</code> will be added to the outgoing email.</p></li>
    /// <li>
    /// <p>Headers Present in <code>BulkEmailEntry</code>: If a header is specified in <code>BulkEmailEntry</code>, it takes precedence over any header of the same name specified in <a href="https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_Template.html"> <code>Template</code> </a>:</p>
    /// <ul>
    /// <li>
    /// <p>If the header is also defined within <code>Template</code>, the value from <code>BulkEmailEntry</code> will replace the header's value in the email.</p></li>
    /// <li>
    /// <p>If the header is not defined within <code>Template</code>, it will simply be added to the email as specified in <code>BulkEmailEntry</code>.</p></li>
    /// </ul></li>
    /// </ul>
    pub replacement_headers: ::std::option::Option<::std::vec::Vec<crate::types::MessageHeader>>,
}
impl BulkEmailEntry {
    /// <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p><note>
    /// <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the local part of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the domain part of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p>
    /// </note>
    pub fn destination(&self) -> ::std::option::Option<&crate::types::Destination> {
        self.destination.as_ref()
    }
    /// <p>A list of tags, in the form of name/value pairs, to apply to an email that you send using the <code>SendBulkTemplatedEmail</code> operation. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.replacement_tags.is_none()`.
    pub fn replacement_tags(&self) -> &[crate::types::MessageTag] {
        self.replacement_tags.as_deref().unwrap_or_default()
    }
    /// <p>The <code>ReplacementEmailContent</code> associated with a <code>BulkEmailEntry</code>.</p>
    pub fn replacement_email_content(&self) -> ::std::option::Option<&crate::types::ReplacementEmailContent> {
        self.replacement_email_content.as_ref()
    }
    /// <p>The list of message headers associated with the <code>BulkEmailEntry</code> data type.</p>
    /// <ul>
    /// <li>
    /// <p>Headers Not Present in <code>BulkEmailEntry</code>: If a header is specified in <a href="https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_Template.html"> <code>Template</code> </a> but not in <code>BulkEmailEntry</code>, the header from <code>Template</code> will be added to the outgoing email.</p></li>
    /// <li>
    /// <p>Headers Present in <code>BulkEmailEntry</code>: If a header is specified in <code>BulkEmailEntry</code>, it takes precedence over any header of the same name specified in <a href="https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_Template.html"> <code>Template</code> </a>:</p>
    /// <ul>
    /// <li>
    /// <p>If the header is also defined within <code>Template</code>, the value from <code>BulkEmailEntry</code> will replace the header's value in the email.</p></li>
    /// <li>
    /// <p>If the header is not defined within <code>Template</code>, it will simply be added to the email as specified in <code>BulkEmailEntry</code>.</p></li>
    /// </ul></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.replacement_headers.is_none()`.
    pub fn replacement_headers(&self) -> &[crate::types::MessageHeader] {
        self.replacement_headers.as_deref().unwrap_or_default()
    }
}
impl BulkEmailEntry {
    /// Creates a new builder-style object to manufacture [`BulkEmailEntry`](crate::types::BulkEmailEntry).
    pub fn builder() -> crate::types::builders::BulkEmailEntryBuilder {
        crate::types::builders::BulkEmailEntryBuilder::default()
    }
}

/// A builder for [`BulkEmailEntry`](crate::types::BulkEmailEntry).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BulkEmailEntryBuilder {
    pub(crate) destination: ::std::option::Option<crate::types::Destination>,
    pub(crate) replacement_tags: ::std::option::Option<::std::vec::Vec<crate::types::MessageTag>>,
    pub(crate) replacement_email_content: ::std::option::Option<crate::types::ReplacementEmailContent>,
    pub(crate) replacement_headers: ::std::option::Option<::std::vec::Vec<crate::types::MessageHeader>>,
}
impl BulkEmailEntryBuilder {
    /// <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p><note>
    /// <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the local part of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the domain part of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p>
    /// </note>
    /// This field is required.
    pub fn destination(mut self, input: crate::types::Destination) -> Self {
        self.destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p><note>
    /// <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the local part of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the domain part of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p>
    /// </note>
    pub fn set_destination(mut self, input: ::std::option::Option<crate::types::Destination>) -> Self {
        self.destination = input;
        self
    }
    /// <p>Represents the destination of the message, consisting of To:, CC:, and BCC: fields.</p><note>
    /// <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the local part of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the domain part of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p>
    /// </note>
    pub fn get_destination(&self) -> &::std::option::Option<crate::types::Destination> {
        &self.destination
    }
    /// Appends an item to `replacement_tags`.
    ///
    /// To override the contents of this collection use [`set_replacement_tags`](Self::set_replacement_tags).
    ///
    /// <p>A list of tags, in the form of name/value pairs, to apply to an email that you send using the <code>SendBulkTemplatedEmail</code> operation. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.</p>
    pub fn replacement_tags(mut self, input: crate::types::MessageTag) -> Self {
        let mut v = self.replacement_tags.unwrap_or_default();
        v.push(input);
        self.replacement_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of tags, in the form of name/value pairs, to apply to an email that you send using the <code>SendBulkTemplatedEmail</code> operation. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.</p>
    pub fn set_replacement_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MessageTag>>) -> Self {
        self.replacement_tags = input;
        self
    }
    /// <p>A list of tags, in the form of name/value pairs, to apply to an email that you send using the <code>SendBulkTemplatedEmail</code> operation. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.</p>
    pub fn get_replacement_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MessageTag>> {
        &self.replacement_tags
    }
    /// <p>The <code>ReplacementEmailContent</code> associated with a <code>BulkEmailEntry</code>.</p>
    pub fn replacement_email_content(mut self, input: crate::types::ReplacementEmailContent) -> Self {
        self.replacement_email_content = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>ReplacementEmailContent</code> associated with a <code>BulkEmailEntry</code>.</p>
    pub fn set_replacement_email_content(mut self, input: ::std::option::Option<crate::types::ReplacementEmailContent>) -> Self {
        self.replacement_email_content = input;
        self
    }
    /// <p>The <code>ReplacementEmailContent</code> associated with a <code>BulkEmailEntry</code>.</p>
    pub fn get_replacement_email_content(&self) -> &::std::option::Option<crate::types::ReplacementEmailContent> {
        &self.replacement_email_content
    }
    /// Appends an item to `replacement_headers`.
    ///
    /// To override the contents of this collection use [`set_replacement_headers`](Self::set_replacement_headers).
    ///
    /// <p>The list of message headers associated with the <code>BulkEmailEntry</code> data type.</p>
    /// <ul>
    /// <li>
    /// <p>Headers Not Present in <code>BulkEmailEntry</code>: If a header is specified in <a href="https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_Template.html"> <code>Template</code> </a> but not in <code>BulkEmailEntry</code>, the header from <code>Template</code> will be added to the outgoing email.</p></li>
    /// <li>
    /// <p>Headers Present in <code>BulkEmailEntry</code>: If a header is specified in <code>BulkEmailEntry</code>, it takes precedence over any header of the same name specified in <a href="https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_Template.html"> <code>Template</code> </a>:</p>
    /// <ul>
    /// <li>
    /// <p>If the header is also defined within <code>Template</code>, the value from <code>BulkEmailEntry</code> will replace the header's value in the email.</p></li>
    /// <li>
    /// <p>If the header is not defined within <code>Template</code>, it will simply be added to the email as specified in <code>BulkEmailEntry</code>.</p></li>
    /// </ul></li>
    /// </ul>
    pub fn replacement_headers(mut self, input: crate::types::MessageHeader) -> Self {
        let mut v = self.replacement_headers.unwrap_or_default();
        v.push(input);
        self.replacement_headers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of message headers associated with the <code>BulkEmailEntry</code> data type.</p>
    /// <ul>
    /// <li>
    /// <p>Headers Not Present in <code>BulkEmailEntry</code>: If a header is specified in <a href="https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_Template.html"> <code>Template</code> </a> but not in <code>BulkEmailEntry</code>, the header from <code>Template</code> will be added to the outgoing email.</p></li>
    /// <li>
    /// <p>Headers Present in <code>BulkEmailEntry</code>: If a header is specified in <code>BulkEmailEntry</code>, it takes precedence over any header of the same name specified in <a href="https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_Template.html"> <code>Template</code> </a>:</p>
    /// <ul>
    /// <li>
    /// <p>If the header is also defined within <code>Template</code>, the value from <code>BulkEmailEntry</code> will replace the header's value in the email.</p></li>
    /// <li>
    /// <p>If the header is not defined within <code>Template</code>, it will simply be added to the email as specified in <code>BulkEmailEntry</code>.</p></li>
    /// </ul></li>
    /// </ul>
    pub fn set_replacement_headers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MessageHeader>>) -> Self {
        self.replacement_headers = input;
        self
    }
    /// <p>The list of message headers associated with the <code>BulkEmailEntry</code> data type.</p>
    /// <ul>
    /// <li>
    /// <p>Headers Not Present in <code>BulkEmailEntry</code>: If a header is specified in <a href="https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_Template.html"> <code>Template</code> </a> but not in <code>BulkEmailEntry</code>, the header from <code>Template</code> will be added to the outgoing email.</p></li>
    /// <li>
    /// <p>Headers Present in <code>BulkEmailEntry</code>: If a header is specified in <code>BulkEmailEntry</code>, it takes precedence over any header of the same name specified in <a href="https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_Template.html"> <code>Template</code> </a>:</p>
    /// <ul>
    /// <li>
    /// <p>If the header is also defined within <code>Template</code>, the value from <code>BulkEmailEntry</code> will replace the header's value in the email.</p></li>
    /// <li>
    /// <p>If the header is not defined within <code>Template</code>, it will simply be added to the email as specified in <code>BulkEmailEntry</code>.</p></li>
    /// </ul></li>
    /// </ul>
    pub fn get_replacement_headers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MessageHeader>> {
        &self.replacement_headers
    }
    /// Consumes the builder and constructs a [`BulkEmailEntry`](crate::types::BulkEmailEntry).
    pub fn build(self) -> crate::types::BulkEmailEntry {
        crate::types::BulkEmailEntry {
            destination: self.destination,
            replacement_tags: self.replacement_tags,
            replacement_email_content: self.replacement_email_content,
            replacement_headers: self.replacement_headers,
        }
    }
}
