// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An HTTP 200 response if the request succeeds, or an error message if the request fails.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteMultiRegionEndpointOutput {
    /// <p>A status of the multi-region endpoint (global-endpoint) right after the delete request.</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATING</code> – The resource is being provisioned.</p></li>
    /// <li>
    /// <p><code>READY</code> – The resource is ready to use.</p></li>
    /// <li>
    /// <p><code>FAILED</code> – The resource failed to be provisioned.</p></li>
    /// <li>
    /// <p><code>DELETING</code> – The resource is being deleted as requested.</p></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::Status>,
    _request_id: Option<String>,
}
impl DeleteMultiRegionEndpointOutput {
    /// <p>A status of the multi-region endpoint (global-endpoint) right after the delete request.</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATING</code> – The resource is being provisioned.</p></li>
    /// <li>
    /// <p><code>READY</code> – The resource is ready to use.</p></li>
    /// <li>
    /// <p><code>FAILED</code> – The resource failed to be provisioned.</p></li>
    /// <li>
    /// <p><code>DELETING</code> – The resource is being deleted as requested.</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DeleteMultiRegionEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteMultiRegionEndpointOutput {
    /// Creates a new builder-style object to manufacture [`DeleteMultiRegionEndpointOutput`](crate::operation::delete_multi_region_endpoint::DeleteMultiRegionEndpointOutput).
    pub fn builder() -> crate::operation::delete_multi_region_endpoint::builders::DeleteMultiRegionEndpointOutputBuilder {
        crate::operation::delete_multi_region_endpoint::builders::DeleteMultiRegionEndpointOutputBuilder::default()
    }
}

/// A builder for [`DeleteMultiRegionEndpointOutput`](crate::operation::delete_multi_region_endpoint::DeleteMultiRegionEndpointOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeleteMultiRegionEndpointOutputBuilder {
    pub(crate) status: ::std::option::Option<crate::types::Status>,
    _request_id: Option<String>,
}
impl DeleteMultiRegionEndpointOutputBuilder {
    /// <p>A status of the multi-region endpoint (global-endpoint) right after the delete request.</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATING</code> – The resource is being provisioned.</p></li>
    /// <li>
    /// <p><code>READY</code> – The resource is ready to use.</p></li>
    /// <li>
    /// <p><code>FAILED</code> – The resource failed to be provisioned.</p></li>
    /// <li>
    /// <p><code>DELETING</code> – The resource is being deleted as requested.</p></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>A status of the multi-region endpoint (global-endpoint) right after the delete request.</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATING</code> – The resource is being provisioned.</p></li>
    /// <li>
    /// <p><code>READY</code> – The resource is ready to use.</p></li>
    /// <li>
    /// <p><code>FAILED</code> – The resource failed to be provisioned.</p></li>
    /// <li>
    /// <p><code>DELETING</code> – The resource is being deleted as requested.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>A status of the multi-region endpoint (global-endpoint) right after the delete request.</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATING</code> – The resource is being provisioned.</p></li>
    /// <li>
    /// <p><code>READY</code> – The resource is ready to use.</p></li>
    /// <li>
    /// <p><code>FAILED</code> – The resource failed to be provisioned.</p></li>
    /// <li>
    /// <p><code>DELETING</code> – The resource is being deleted as requested.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::Status> {
        &self.status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DeleteMultiRegionEndpointOutput`](crate::operation::delete_multi_region_endpoint::DeleteMultiRegionEndpointOutput).
    pub fn build(self) -> crate::operation::delete_multi_region_endpoint::DeleteMultiRegionEndpointOutput {
        crate::operation::delete_multi_region_endpoint::DeleteMultiRegionEndpointOutput {
            status: self.status,
            _request_id: self._request_id,
        }
    }
}
