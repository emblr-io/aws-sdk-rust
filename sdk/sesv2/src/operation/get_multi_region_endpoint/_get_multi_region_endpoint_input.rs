// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a request to display the multi-region endpoint (global-endpoint).</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetMultiRegionEndpointInput {
    /// <p>The name of the multi-region endpoint (global-endpoint).</p>
    pub endpoint_name: ::std::option::Option<::std::string::String>,
}
impl GetMultiRegionEndpointInput {
    /// <p>The name of the multi-region endpoint (global-endpoint).</p>
    pub fn endpoint_name(&self) -> ::std::option::Option<&str> {
        self.endpoint_name.as_deref()
    }
}
impl GetMultiRegionEndpointInput {
    /// Creates a new builder-style object to manufacture [`GetMultiRegionEndpointInput`](crate::operation::get_multi_region_endpoint::GetMultiRegionEndpointInput).
    pub fn builder() -> crate::operation::get_multi_region_endpoint::builders::GetMultiRegionEndpointInputBuilder {
        crate::operation::get_multi_region_endpoint::builders::GetMultiRegionEndpointInputBuilder::default()
    }
}

/// A builder for [`GetMultiRegionEndpointInput`](crate::operation::get_multi_region_endpoint::GetMultiRegionEndpointInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetMultiRegionEndpointInputBuilder {
    pub(crate) endpoint_name: ::std::option::Option<::std::string::String>,
}
impl GetMultiRegionEndpointInputBuilder {
    /// <p>The name of the multi-region endpoint (global-endpoint).</p>
    /// This field is required.
    pub fn endpoint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the multi-region endpoint (global-endpoint).</p>
    pub fn set_endpoint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint_name = input;
        self
    }
    /// <p>The name of the multi-region endpoint (global-endpoint).</p>
    pub fn get_endpoint_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint_name
    }
    /// Consumes the builder and constructs a [`GetMultiRegionEndpointInput`](crate::operation::get_multi_region_endpoint::GetMultiRegionEndpointInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_multi_region_endpoint::GetMultiRegionEndpointInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_multi_region_endpoint::GetMultiRegionEndpointInput {
            endpoint_name: self.endpoint_name,
        })
    }
}
