// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An HTTP 200 response if the request succeeds, or an error message if the request fails.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetMultiRegionEndpointOutput {
    /// <p>The name of the multi-region endpoint (global-endpoint).</p>
    pub endpoint_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the multi-region endpoint (global-endpoint).</p>
    pub endpoint_id: ::std::option::Option<::std::string::String>,
    /// <p>Contains routes information for the multi-region endpoint (global-endpoint).</p>
    pub routes: ::std::option::Option<::std::vec::Vec<crate::types::Route>>,
    /// <p>The status of the multi-region endpoint (global-endpoint).</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATING</code> – The resource is being provisioned.</p></li>
    /// <li>
    /// <p><code>READY</code> – The resource is ready to use.</p></li>
    /// <li>
    /// <p><code>FAILED</code> – The resource failed to be provisioned.</p></li>
    /// <li>
    /// <p><code>DELETING</code> – The resource is being deleted as requested.</p></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::Status>,
    /// <p>The time stamp of when the multi-region endpoint (global-endpoint) was created.</p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time stamp of when the multi-region endpoint (global-endpoint) was last updated.</p>
    pub last_updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetMultiRegionEndpointOutput {
    /// <p>The name of the multi-region endpoint (global-endpoint).</p>
    pub fn endpoint_name(&self) -> ::std::option::Option<&str> {
        self.endpoint_name.as_deref()
    }
    /// <p>The ID of the multi-region endpoint (global-endpoint).</p>
    pub fn endpoint_id(&self) -> ::std::option::Option<&str> {
        self.endpoint_id.as_deref()
    }
    /// <p>Contains routes information for the multi-region endpoint (global-endpoint).</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.routes.is_none()`.
    pub fn routes(&self) -> &[crate::types::Route] {
        self.routes.as_deref().unwrap_or_default()
    }
    /// <p>The status of the multi-region endpoint (global-endpoint).</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATING</code> – The resource is being provisioned.</p></li>
    /// <li>
    /// <p><code>READY</code> – The resource is ready to use.</p></li>
    /// <li>
    /// <p><code>FAILED</code> – The resource failed to be provisioned.</p></li>
    /// <li>
    /// <p><code>DELETING</code> – The resource is being deleted as requested.</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
    /// <p>The time stamp of when the multi-region endpoint (global-endpoint) was created.</p>
    pub fn created_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The time stamp of when the multi-region endpoint (global-endpoint) was last updated.</p>
    pub fn last_updated_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_timestamp.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetMultiRegionEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetMultiRegionEndpointOutput {
    /// Creates a new builder-style object to manufacture [`GetMultiRegionEndpointOutput`](crate::operation::get_multi_region_endpoint::GetMultiRegionEndpointOutput).
    pub fn builder() -> crate::operation::get_multi_region_endpoint::builders::GetMultiRegionEndpointOutputBuilder {
        crate::operation::get_multi_region_endpoint::builders::GetMultiRegionEndpointOutputBuilder::default()
    }
}

/// A builder for [`GetMultiRegionEndpointOutput`](crate::operation::get_multi_region_endpoint::GetMultiRegionEndpointOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetMultiRegionEndpointOutputBuilder {
    pub(crate) endpoint_name: ::std::option::Option<::std::string::String>,
    pub(crate) endpoint_id: ::std::option::Option<::std::string::String>,
    pub(crate) routes: ::std::option::Option<::std::vec::Vec<crate::types::Route>>,
    pub(crate) status: ::std::option::Option<crate::types::Status>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetMultiRegionEndpointOutputBuilder {
    /// <p>The name of the multi-region endpoint (global-endpoint).</p>
    pub fn endpoint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the multi-region endpoint (global-endpoint).</p>
    pub fn set_endpoint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint_name = input;
        self
    }
    /// <p>The name of the multi-region endpoint (global-endpoint).</p>
    pub fn get_endpoint_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint_name
    }
    /// <p>The ID of the multi-region endpoint (global-endpoint).</p>
    pub fn endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the multi-region endpoint (global-endpoint).</p>
    pub fn set_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint_id = input;
        self
    }
    /// <p>The ID of the multi-region endpoint (global-endpoint).</p>
    pub fn get_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint_id
    }
    /// Appends an item to `routes`.
    ///
    /// To override the contents of this collection use [`set_routes`](Self::set_routes).
    ///
    /// <p>Contains routes information for the multi-region endpoint (global-endpoint).</p>
    pub fn routes(mut self, input: crate::types::Route) -> Self {
        let mut v = self.routes.unwrap_or_default();
        v.push(input);
        self.routes = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains routes information for the multi-region endpoint (global-endpoint).</p>
    pub fn set_routes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Route>>) -> Self {
        self.routes = input;
        self
    }
    /// <p>Contains routes information for the multi-region endpoint (global-endpoint).</p>
    pub fn get_routes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Route>> {
        &self.routes
    }
    /// <p>The status of the multi-region endpoint (global-endpoint).</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATING</code> – The resource is being provisioned.</p></li>
    /// <li>
    /// <p><code>READY</code> – The resource is ready to use.</p></li>
    /// <li>
    /// <p><code>FAILED</code> – The resource failed to be provisioned.</p></li>
    /// <li>
    /// <p><code>DELETING</code> – The resource is being deleted as requested.</p></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the multi-region endpoint (global-endpoint).</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATING</code> – The resource is being provisioned.</p></li>
    /// <li>
    /// <p><code>READY</code> – The resource is ready to use.</p></li>
    /// <li>
    /// <p><code>FAILED</code> – The resource failed to be provisioned.</p></li>
    /// <li>
    /// <p><code>DELETING</code> – The resource is being deleted as requested.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the multi-region endpoint (global-endpoint).</p>
    /// <ul>
    /// <li>
    /// <p><code>CREATING</code> – The resource is being provisioned.</p></li>
    /// <li>
    /// <p><code>READY</code> – The resource is ready to use.</p></li>
    /// <li>
    /// <p><code>FAILED</code> – The resource failed to be provisioned.</p></li>
    /// <li>
    /// <p><code>DELETING</code> – The resource is being deleted as requested.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::Status> {
        &self.status
    }
    /// <p>The time stamp of when the multi-region endpoint (global-endpoint) was created.</p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time stamp of when the multi-region endpoint (global-endpoint) was created.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The time stamp of when the multi-region endpoint (global-endpoint) was created.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    /// <p>The time stamp of when the multi-region endpoint (global-endpoint) was last updated.</p>
    pub fn last_updated_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time stamp of when the multi-region endpoint (global-endpoint) was last updated.</p>
    pub fn set_last_updated_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_timestamp = input;
        self
    }
    /// <p>The time stamp of when the multi-region endpoint (global-endpoint) was last updated.</p>
    pub fn get_last_updated_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_timestamp
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetMultiRegionEndpointOutput`](crate::operation::get_multi_region_endpoint::GetMultiRegionEndpointOutput).
    pub fn build(self) -> crate::operation::get_multi_region_endpoint::GetMultiRegionEndpointOutput {
        crate::operation::get_multi_region_endpoint::GetMultiRegionEndpointOutput {
            endpoint_name: self.endpoint_name,
            endpoint_id: self.endpoint_id,
            routes: self.routes,
            status: self.status,
            created_timestamp: self.created_timestamp,
            last_updated_timestamp: self.last_updated_timestamp,
            _request_id: self._request_id,
        }
    }
}
