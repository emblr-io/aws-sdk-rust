// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a request to create a multi-region endpoint (global-endpoint).</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateMultiRegionEndpointInput {
    /// <p>The name of the multi-region endpoint (global-endpoint).</p>
    pub endpoint_name: ::std::option::Option<::std::string::String>,
    /// <p>Contains details of a multi-region endpoint (global-endpoint) being created.</p>
    pub details: ::std::option::Option<crate::types::Details>,
    /// <p>An array of objects that define the tags (keys and values) to associate with the multi-region endpoint (global-endpoint).</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateMultiRegionEndpointInput {
    /// <p>The name of the multi-region endpoint (global-endpoint).</p>
    pub fn endpoint_name(&self) -> ::std::option::Option<&str> {
        self.endpoint_name.as_deref()
    }
    /// <p>Contains details of a multi-region endpoint (global-endpoint) being created.</p>
    pub fn details(&self) -> ::std::option::Option<&crate::types::Details> {
        self.details.as_ref()
    }
    /// <p>An array of objects that define the tags (keys and values) to associate with the multi-region endpoint (global-endpoint).</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateMultiRegionEndpointInput {
    /// Creates a new builder-style object to manufacture [`CreateMultiRegionEndpointInput`](crate::operation::create_multi_region_endpoint::CreateMultiRegionEndpointInput).
    pub fn builder() -> crate::operation::create_multi_region_endpoint::builders::CreateMultiRegionEndpointInputBuilder {
        crate::operation::create_multi_region_endpoint::builders::CreateMultiRegionEndpointInputBuilder::default()
    }
}

/// A builder for [`CreateMultiRegionEndpointInput`](crate::operation::create_multi_region_endpoint::CreateMultiRegionEndpointInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateMultiRegionEndpointInputBuilder {
    pub(crate) endpoint_name: ::std::option::Option<::std::string::String>,
    pub(crate) details: ::std::option::Option<crate::types::Details>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateMultiRegionEndpointInputBuilder {
    /// <p>The name of the multi-region endpoint (global-endpoint).</p>
    /// This field is required.
    pub fn endpoint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the multi-region endpoint (global-endpoint).</p>
    pub fn set_endpoint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint_name = input;
        self
    }
    /// <p>The name of the multi-region endpoint (global-endpoint).</p>
    pub fn get_endpoint_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint_name
    }
    /// <p>Contains details of a multi-region endpoint (global-endpoint) being created.</p>
    /// This field is required.
    pub fn details(mut self, input: crate::types::Details) -> Self {
        self.details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details of a multi-region endpoint (global-endpoint) being created.</p>
    pub fn set_details(mut self, input: ::std::option::Option<crate::types::Details>) -> Self {
        self.details = input;
        self
    }
    /// <p>Contains details of a multi-region endpoint (global-endpoint) being created.</p>
    pub fn get_details(&self) -> &::std::option::Option<crate::types::Details> {
        &self.details
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of objects that define the tags (keys and values) to associate with the multi-region endpoint (global-endpoint).</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects that define the tags (keys and values) to associate with the multi-region endpoint (global-endpoint).</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>An array of objects that define the tags (keys and values) to associate with the multi-region endpoint (global-endpoint).</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateMultiRegionEndpointInput`](crate::operation::create_multi_region_endpoint::CreateMultiRegionEndpointInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_multi_region_endpoint::CreateMultiRegionEndpointInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_multi_region_endpoint::CreateMultiRegionEndpointInput {
            endpoint_name: self.endpoint_name,
            details: self.details,
            tags: self.tags,
        })
    }
}
