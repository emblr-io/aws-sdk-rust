// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The progress report of an import job.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JobProgressReport {
    /// <p>The number of files scanned from input S3 bucket.</p>
    pub total_number_of_scanned_files: ::std::option::Option<i64>,
    /// <p>The size (in MB) of the files scanned from the input S3 bucket.</p>
    pub total_size_of_scanned_files_in_mb: ::std::option::Option<f64>,
    /// <p>The number of files imported so far.</p>
    pub total_number_of_imported_files: ::std::option::Option<i64>,
    /// <p>The number of resources scanned from the input S3 bucket.</p>
    pub total_number_of_resources_scanned: ::std::option::Option<i64>,
    /// <p>The number of resources imported so far.</p>
    pub total_number_of_resources_imported: ::std::option::Option<i64>,
    /// <p>The number of resources that failed due to customer error.</p>
    pub total_number_of_resources_with_customer_error: ::std::option::Option<i64>,
    /// <p>The number of files that failed to be read from the input S3 bucket due to customer error.</p>
    pub total_number_of_files_read_with_customer_error: ::std::option::Option<i64>,
    /// <p>The throughput (in MB/sec) of the import job.</p>
    pub throughput: ::std::option::Option<f64>,
}
impl JobProgressReport {
    /// <p>The number of files scanned from input S3 bucket.</p>
    pub fn total_number_of_scanned_files(&self) -> ::std::option::Option<i64> {
        self.total_number_of_scanned_files
    }
    /// <p>The size (in MB) of the files scanned from the input S3 bucket.</p>
    pub fn total_size_of_scanned_files_in_mb(&self) -> ::std::option::Option<f64> {
        self.total_size_of_scanned_files_in_mb
    }
    /// <p>The number of files imported so far.</p>
    pub fn total_number_of_imported_files(&self) -> ::std::option::Option<i64> {
        self.total_number_of_imported_files
    }
    /// <p>The number of resources scanned from the input S3 bucket.</p>
    pub fn total_number_of_resources_scanned(&self) -> ::std::option::Option<i64> {
        self.total_number_of_resources_scanned
    }
    /// <p>The number of resources imported so far.</p>
    pub fn total_number_of_resources_imported(&self) -> ::std::option::Option<i64> {
        self.total_number_of_resources_imported
    }
    /// <p>The number of resources that failed due to customer error.</p>
    pub fn total_number_of_resources_with_customer_error(&self) -> ::std::option::Option<i64> {
        self.total_number_of_resources_with_customer_error
    }
    /// <p>The number of files that failed to be read from the input S3 bucket due to customer error.</p>
    pub fn total_number_of_files_read_with_customer_error(&self) -> ::std::option::Option<i64> {
        self.total_number_of_files_read_with_customer_error
    }
    /// <p>The throughput (in MB/sec) of the import job.</p>
    pub fn throughput(&self) -> ::std::option::Option<f64> {
        self.throughput
    }
}
impl JobProgressReport {
    /// Creates a new builder-style object to manufacture [`JobProgressReport`](crate::types::JobProgressReport).
    pub fn builder() -> crate::types::builders::JobProgressReportBuilder {
        crate::types::builders::JobProgressReportBuilder::default()
    }
}

/// A builder for [`JobProgressReport`](crate::types::JobProgressReport).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct JobProgressReportBuilder {
    pub(crate) total_number_of_scanned_files: ::std::option::Option<i64>,
    pub(crate) total_size_of_scanned_files_in_mb: ::std::option::Option<f64>,
    pub(crate) total_number_of_imported_files: ::std::option::Option<i64>,
    pub(crate) total_number_of_resources_scanned: ::std::option::Option<i64>,
    pub(crate) total_number_of_resources_imported: ::std::option::Option<i64>,
    pub(crate) total_number_of_resources_with_customer_error: ::std::option::Option<i64>,
    pub(crate) total_number_of_files_read_with_customer_error: ::std::option::Option<i64>,
    pub(crate) throughput: ::std::option::Option<f64>,
}
impl JobProgressReportBuilder {
    /// <p>The number of files scanned from input S3 bucket.</p>
    pub fn total_number_of_scanned_files(mut self, input: i64) -> Self {
        self.total_number_of_scanned_files = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of files scanned from input S3 bucket.</p>
    pub fn set_total_number_of_scanned_files(mut self, input: ::std::option::Option<i64>) -> Self {
        self.total_number_of_scanned_files = input;
        self
    }
    /// <p>The number of files scanned from input S3 bucket.</p>
    pub fn get_total_number_of_scanned_files(&self) -> &::std::option::Option<i64> {
        &self.total_number_of_scanned_files
    }
    /// <p>The size (in MB) of the files scanned from the input S3 bucket.</p>
    pub fn total_size_of_scanned_files_in_mb(mut self, input: f64) -> Self {
        self.total_size_of_scanned_files_in_mb = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size (in MB) of the files scanned from the input S3 bucket.</p>
    pub fn set_total_size_of_scanned_files_in_mb(mut self, input: ::std::option::Option<f64>) -> Self {
        self.total_size_of_scanned_files_in_mb = input;
        self
    }
    /// <p>The size (in MB) of the files scanned from the input S3 bucket.</p>
    pub fn get_total_size_of_scanned_files_in_mb(&self) -> &::std::option::Option<f64> {
        &self.total_size_of_scanned_files_in_mb
    }
    /// <p>The number of files imported so far.</p>
    pub fn total_number_of_imported_files(mut self, input: i64) -> Self {
        self.total_number_of_imported_files = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of files imported so far.</p>
    pub fn set_total_number_of_imported_files(mut self, input: ::std::option::Option<i64>) -> Self {
        self.total_number_of_imported_files = input;
        self
    }
    /// <p>The number of files imported so far.</p>
    pub fn get_total_number_of_imported_files(&self) -> &::std::option::Option<i64> {
        &self.total_number_of_imported_files
    }
    /// <p>The number of resources scanned from the input S3 bucket.</p>
    pub fn total_number_of_resources_scanned(mut self, input: i64) -> Self {
        self.total_number_of_resources_scanned = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of resources scanned from the input S3 bucket.</p>
    pub fn set_total_number_of_resources_scanned(mut self, input: ::std::option::Option<i64>) -> Self {
        self.total_number_of_resources_scanned = input;
        self
    }
    /// <p>The number of resources scanned from the input S3 bucket.</p>
    pub fn get_total_number_of_resources_scanned(&self) -> &::std::option::Option<i64> {
        &self.total_number_of_resources_scanned
    }
    /// <p>The number of resources imported so far.</p>
    pub fn total_number_of_resources_imported(mut self, input: i64) -> Self {
        self.total_number_of_resources_imported = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of resources imported so far.</p>
    pub fn set_total_number_of_resources_imported(mut self, input: ::std::option::Option<i64>) -> Self {
        self.total_number_of_resources_imported = input;
        self
    }
    /// <p>The number of resources imported so far.</p>
    pub fn get_total_number_of_resources_imported(&self) -> &::std::option::Option<i64> {
        &self.total_number_of_resources_imported
    }
    /// <p>The number of resources that failed due to customer error.</p>
    pub fn total_number_of_resources_with_customer_error(mut self, input: i64) -> Self {
        self.total_number_of_resources_with_customer_error = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of resources that failed due to customer error.</p>
    pub fn set_total_number_of_resources_with_customer_error(mut self, input: ::std::option::Option<i64>) -> Self {
        self.total_number_of_resources_with_customer_error = input;
        self
    }
    /// <p>The number of resources that failed due to customer error.</p>
    pub fn get_total_number_of_resources_with_customer_error(&self) -> &::std::option::Option<i64> {
        &self.total_number_of_resources_with_customer_error
    }
    /// <p>The number of files that failed to be read from the input S3 bucket due to customer error.</p>
    pub fn total_number_of_files_read_with_customer_error(mut self, input: i64) -> Self {
        self.total_number_of_files_read_with_customer_error = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of files that failed to be read from the input S3 bucket due to customer error.</p>
    pub fn set_total_number_of_files_read_with_customer_error(mut self, input: ::std::option::Option<i64>) -> Self {
        self.total_number_of_files_read_with_customer_error = input;
        self
    }
    /// <p>The number of files that failed to be read from the input S3 bucket due to customer error.</p>
    pub fn get_total_number_of_files_read_with_customer_error(&self) -> &::std::option::Option<i64> {
        &self.total_number_of_files_read_with_customer_error
    }
    /// <p>The throughput (in MB/sec) of the import job.</p>
    pub fn throughput(mut self, input: f64) -> Self {
        self.throughput = ::std::option::Option::Some(input);
        self
    }
    /// <p>The throughput (in MB/sec) of the import job.</p>
    pub fn set_throughput(mut self, input: ::std::option::Option<f64>) -> Self {
        self.throughput = input;
        self
    }
    /// <p>The throughput (in MB/sec) of the import job.</p>
    pub fn get_throughput(&self) -> &::std::option::Option<f64> {
        &self.throughput
    }
    /// Consumes the builder and constructs a [`JobProgressReport`](crate::types::JobProgressReport).
    pub fn build(self) -> crate::types::JobProgressReport {
        crate::types::JobProgressReport {
            total_number_of_scanned_files: self.total_number_of_scanned_files,
            total_size_of_scanned_files_in_mb: self.total_size_of_scanned_files_in_mb,
            total_number_of_imported_files: self.total_number_of_imported_files,
            total_number_of_resources_scanned: self.total_number_of_resources_scanned,
            total_number_of_resources_imported: self.total_number_of_resources_imported,
            total_number_of_resources_with_customer_error: self.total_number_of_resources_with_customer_error,
            total_number_of_files_read_with_customer_error: self.total_number_of_files_read_with_customer_error,
            throughput: self.throughput,
        }
    }
}
