// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The error info of the create/delete data store operation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ErrorCause {
    /// <p>The text of the error message.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
    /// <p>The error category of the create/delete data store operation. Possible statuses are RETRYABLE_ERROR or NON_RETRYABLE_ERROR.</p>
    pub error_category: ::std::option::Option<crate::types::ErrorCategory>,
}
impl ErrorCause {
    /// <p>The text of the error message.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>The error category of the create/delete data store operation. Possible statuses are RETRYABLE_ERROR or NON_RETRYABLE_ERROR.</p>
    pub fn error_category(&self) -> ::std::option::Option<&crate::types::ErrorCategory> {
        self.error_category.as_ref()
    }
}
impl ErrorCause {
    /// Creates a new builder-style object to manufacture [`ErrorCause`](crate::types::ErrorCause).
    pub fn builder() -> crate::types::builders::ErrorCauseBuilder {
        crate::types::builders::ErrorCauseBuilder::default()
    }
}

/// A builder for [`ErrorCause`](crate::types::ErrorCause).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ErrorCauseBuilder {
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
    pub(crate) error_category: ::std::option::Option<crate::types::ErrorCategory>,
}
impl ErrorCauseBuilder {
    /// <p>The text of the error message.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text of the error message.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The text of the error message.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// <p>The error category of the create/delete data store operation. Possible statuses are RETRYABLE_ERROR or NON_RETRYABLE_ERROR.</p>
    pub fn error_category(mut self, input: crate::types::ErrorCategory) -> Self {
        self.error_category = ::std::option::Option::Some(input);
        self
    }
    /// <p>The error category of the create/delete data store operation. Possible statuses are RETRYABLE_ERROR or NON_RETRYABLE_ERROR.</p>
    pub fn set_error_category(mut self, input: ::std::option::Option<crate::types::ErrorCategory>) -> Self {
        self.error_category = input;
        self
    }
    /// <p>The error category of the create/delete data store operation. Possible statuses are RETRYABLE_ERROR or NON_RETRYABLE_ERROR.</p>
    pub fn get_error_category(&self) -> &::std::option::Option<crate::types::ErrorCategory> {
        &self.error_category
    }
    /// Consumes the builder and constructs a [`ErrorCause`](crate::types::ErrorCause).
    pub fn build(self) -> crate::types::ErrorCause {
        crate::types::ErrorCause {
            error_message: self.error_message,
            error_category: self.error_category,
        }
    }
}
