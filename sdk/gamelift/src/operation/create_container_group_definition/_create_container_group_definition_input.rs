// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateContainerGroupDefinitionInput {
    /// <p>A descriptive identifier for the container group definition. The name value must be unique in an Amazon Web Services Region.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The type of container group being defined. Container group type determines how Amazon GameLift Servers deploys the container group on each fleet instance.</p>
    /// <p>Default value: <code>GAME_SERVER</code></p>
    pub container_group_type: ::std::option::Option<crate::types::ContainerGroupType>,
    /// <p>The maximum amount of memory (in MiB) to allocate to the container group. All containers in the group share this memory. If you specify memory limits for an individual container, the total value must be greater than any individual container's memory limit.</p>
    /// <p>Default value: 1024</p>
    pub total_memory_limit_mebibytes: ::std::option::Option<i32>,
    /// <p>The maximum amount of vCPU units to allocate to the container group (1 vCPU is equal to 1024 CPU units). All containers in the group share this memory. If you specify vCPU limits for individual containers, the total value must be equal to or greater than the sum of the CPU limits for all containers in the group.</p>
    /// <p>Default value: 1</p>
    pub total_vcpu_limit: ::std::option::Option<f64>,
    /// <p>The definition for the game server container in this group. Define a game server container only when the container group type is <code>GAME_SERVER</code>. Game server containers specify a container image with your game server build. You can pass in your container definitions as a JSON file.</p>
    pub game_server_container_definition: ::std::option::Option<crate::types::GameServerContainerDefinitionInput>,
    /// <p>One or more definition for support containers in this group. You can define a support container in any type of container group. You can pass in your container definitions as a JSON file.</p>
    pub support_container_definitions: ::std::option::Option<::std::vec::Vec<crate::types::SupportContainerDefinitionInput>>,
    /// <p>The platform that all containers in the group use. Containers in a group must run on the same operating system.</p>
    /// <p>Default value: <code>AMAZON_LINUX_2023</code></p><note>
    /// <p>Amazon Linux 2 (AL2) will reach end of support on 6/30/2025. See more details in the <a href="http://aws.amazon.com/amazon-linux-2/faqs/">Amazon Linux 2 FAQs</a>. For game servers that are hosted on AL2 and use server SDK version 4.x for Amazon GameLift Servers, first update the game server build to server SDK 5.x, and then deploy to AL2023 instances. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk5-migration.html"> Migrate to server SDK version 5.</a></p>
    /// </note>
    pub operating_system: ::std::option::Option<crate::types::ContainerOperatingSystem>,
    /// <p>A description for the initial version of this container group definition.</p>
    pub version_description: ::std::option::Option<::std::string::String>,
    /// <p>A list of labels to assign to the container group definition resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging Amazon Web Services Resources</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateContainerGroupDefinitionInput {
    /// <p>A descriptive identifier for the container group definition. The name value must be unique in an Amazon Web Services Region.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of container group being defined. Container group type determines how Amazon GameLift Servers deploys the container group on each fleet instance.</p>
    /// <p>Default value: <code>GAME_SERVER</code></p>
    pub fn container_group_type(&self) -> ::std::option::Option<&crate::types::ContainerGroupType> {
        self.container_group_type.as_ref()
    }
    /// <p>The maximum amount of memory (in MiB) to allocate to the container group. All containers in the group share this memory. If you specify memory limits for an individual container, the total value must be greater than any individual container's memory limit.</p>
    /// <p>Default value: 1024</p>
    pub fn total_memory_limit_mebibytes(&self) -> ::std::option::Option<i32> {
        self.total_memory_limit_mebibytes
    }
    /// <p>The maximum amount of vCPU units to allocate to the container group (1 vCPU is equal to 1024 CPU units). All containers in the group share this memory. If you specify vCPU limits for individual containers, the total value must be equal to or greater than the sum of the CPU limits for all containers in the group.</p>
    /// <p>Default value: 1</p>
    pub fn total_vcpu_limit(&self) -> ::std::option::Option<f64> {
        self.total_vcpu_limit
    }
    /// <p>The definition for the game server container in this group. Define a game server container only when the container group type is <code>GAME_SERVER</code>. Game server containers specify a container image with your game server build. You can pass in your container definitions as a JSON file.</p>
    pub fn game_server_container_definition(&self) -> ::std::option::Option<&crate::types::GameServerContainerDefinitionInput> {
        self.game_server_container_definition.as_ref()
    }
    /// <p>One or more definition for support containers in this group. You can define a support container in any type of container group. You can pass in your container definitions as a JSON file.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.support_container_definitions.is_none()`.
    pub fn support_container_definitions(&self) -> &[crate::types::SupportContainerDefinitionInput] {
        self.support_container_definitions.as_deref().unwrap_or_default()
    }
    /// <p>The platform that all containers in the group use. Containers in a group must run on the same operating system.</p>
    /// <p>Default value: <code>AMAZON_LINUX_2023</code></p><note>
    /// <p>Amazon Linux 2 (AL2) will reach end of support on 6/30/2025. See more details in the <a href="http://aws.amazon.com/amazon-linux-2/faqs/">Amazon Linux 2 FAQs</a>. For game servers that are hosted on AL2 and use server SDK version 4.x for Amazon GameLift Servers, first update the game server build to server SDK 5.x, and then deploy to AL2023 instances. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk5-migration.html"> Migrate to server SDK version 5.</a></p>
    /// </note>
    pub fn operating_system(&self) -> ::std::option::Option<&crate::types::ContainerOperatingSystem> {
        self.operating_system.as_ref()
    }
    /// <p>A description for the initial version of this container group definition.</p>
    pub fn version_description(&self) -> ::std::option::Option<&str> {
        self.version_description.as_deref()
    }
    /// <p>A list of labels to assign to the container group definition resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging Amazon Web Services Resources</a> in the <i>Amazon Web Services General Reference</i>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateContainerGroupDefinitionInput {
    /// Creates a new builder-style object to manufacture [`CreateContainerGroupDefinitionInput`](crate::operation::create_container_group_definition::CreateContainerGroupDefinitionInput).
    pub fn builder() -> crate::operation::create_container_group_definition::builders::CreateContainerGroupDefinitionInputBuilder {
        crate::operation::create_container_group_definition::builders::CreateContainerGroupDefinitionInputBuilder::default()
    }
}

/// A builder for [`CreateContainerGroupDefinitionInput`](crate::operation::create_container_group_definition::CreateContainerGroupDefinitionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateContainerGroupDefinitionInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) container_group_type: ::std::option::Option<crate::types::ContainerGroupType>,
    pub(crate) total_memory_limit_mebibytes: ::std::option::Option<i32>,
    pub(crate) total_vcpu_limit: ::std::option::Option<f64>,
    pub(crate) game_server_container_definition: ::std::option::Option<crate::types::GameServerContainerDefinitionInput>,
    pub(crate) support_container_definitions: ::std::option::Option<::std::vec::Vec<crate::types::SupportContainerDefinitionInput>>,
    pub(crate) operating_system: ::std::option::Option<crate::types::ContainerOperatingSystem>,
    pub(crate) version_description: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateContainerGroupDefinitionInputBuilder {
    /// <p>A descriptive identifier for the container group definition. The name value must be unique in an Amazon Web Services Region.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A descriptive identifier for the container group definition. The name value must be unique in an Amazon Web Services Region.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A descriptive identifier for the container group definition. The name value must be unique in an Amazon Web Services Region.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of container group being defined. Container group type determines how Amazon GameLift Servers deploys the container group on each fleet instance.</p>
    /// <p>Default value: <code>GAME_SERVER</code></p>
    pub fn container_group_type(mut self, input: crate::types::ContainerGroupType) -> Self {
        self.container_group_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of container group being defined. Container group type determines how Amazon GameLift Servers deploys the container group on each fleet instance.</p>
    /// <p>Default value: <code>GAME_SERVER</code></p>
    pub fn set_container_group_type(mut self, input: ::std::option::Option<crate::types::ContainerGroupType>) -> Self {
        self.container_group_type = input;
        self
    }
    /// <p>The type of container group being defined. Container group type determines how Amazon GameLift Servers deploys the container group on each fleet instance.</p>
    /// <p>Default value: <code>GAME_SERVER</code></p>
    pub fn get_container_group_type(&self) -> &::std::option::Option<crate::types::ContainerGroupType> {
        &self.container_group_type
    }
    /// <p>The maximum amount of memory (in MiB) to allocate to the container group. All containers in the group share this memory. If you specify memory limits for an individual container, the total value must be greater than any individual container's memory limit.</p>
    /// <p>Default value: 1024</p>
    /// This field is required.
    pub fn total_memory_limit_mebibytes(mut self, input: i32) -> Self {
        self.total_memory_limit_mebibytes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum amount of memory (in MiB) to allocate to the container group. All containers in the group share this memory. If you specify memory limits for an individual container, the total value must be greater than any individual container's memory limit.</p>
    /// <p>Default value: 1024</p>
    pub fn set_total_memory_limit_mebibytes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_memory_limit_mebibytes = input;
        self
    }
    /// <p>The maximum amount of memory (in MiB) to allocate to the container group. All containers in the group share this memory. If you specify memory limits for an individual container, the total value must be greater than any individual container's memory limit.</p>
    /// <p>Default value: 1024</p>
    pub fn get_total_memory_limit_mebibytes(&self) -> &::std::option::Option<i32> {
        &self.total_memory_limit_mebibytes
    }
    /// <p>The maximum amount of vCPU units to allocate to the container group (1 vCPU is equal to 1024 CPU units). All containers in the group share this memory. If you specify vCPU limits for individual containers, the total value must be equal to or greater than the sum of the CPU limits for all containers in the group.</p>
    /// <p>Default value: 1</p>
    /// This field is required.
    pub fn total_vcpu_limit(mut self, input: f64) -> Self {
        self.total_vcpu_limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum amount of vCPU units to allocate to the container group (1 vCPU is equal to 1024 CPU units). All containers in the group share this memory. If you specify vCPU limits for individual containers, the total value must be equal to or greater than the sum of the CPU limits for all containers in the group.</p>
    /// <p>Default value: 1</p>
    pub fn set_total_vcpu_limit(mut self, input: ::std::option::Option<f64>) -> Self {
        self.total_vcpu_limit = input;
        self
    }
    /// <p>The maximum amount of vCPU units to allocate to the container group (1 vCPU is equal to 1024 CPU units). All containers in the group share this memory. If you specify vCPU limits for individual containers, the total value must be equal to or greater than the sum of the CPU limits for all containers in the group.</p>
    /// <p>Default value: 1</p>
    pub fn get_total_vcpu_limit(&self) -> &::std::option::Option<f64> {
        &self.total_vcpu_limit
    }
    /// <p>The definition for the game server container in this group. Define a game server container only when the container group type is <code>GAME_SERVER</code>. Game server containers specify a container image with your game server build. You can pass in your container definitions as a JSON file.</p>
    pub fn game_server_container_definition(mut self, input: crate::types::GameServerContainerDefinitionInput) -> Self {
        self.game_server_container_definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The definition for the game server container in this group. Define a game server container only when the container group type is <code>GAME_SERVER</code>. Game server containers specify a container image with your game server build. You can pass in your container definitions as a JSON file.</p>
    pub fn set_game_server_container_definition(mut self, input: ::std::option::Option<crate::types::GameServerContainerDefinitionInput>) -> Self {
        self.game_server_container_definition = input;
        self
    }
    /// <p>The definition for the game server container in this group. Define a game server container only when the container group type is <code>GAME_SERVER</code>. Game server containers specify a container image with your game server build. You can pass in your container definitions as a JSON file.</p>
    pub fn get_game_server_container_definition(&self) -> &::std::option::Option<crate::types::GameServerContainerDefinitionInput> {
        &self.game_server_container_definition
    }
    /// Appends an item to `support_container_definitions`.
    ///
    /// To override the contents of this collection use [`set_support_container_definitions`](Self::set_support_container_definitions).
    ///
    /// <p>One or more definition for support containers in this group. You can define a support container in any type of container group. You can pass in your container definitions as a JSON file.</p>
    pub fn support_container_definitions(mut self, input: crate::types::SupportContainerDefinitionInput) -> Self {
        let mut v = self.support_container_definitions.unwrap_or_default();
        v.push(input);
        self.support_container_definitions = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more definition for support containers in this group. You can define a support container in any type of container group. You can pass in your container definitions as a JSON file.</p>
    pub fn set_support_container_definitions(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::SupportContainerDefinitionInput>>,
    ) -> Self {
        self.support_container_definitions = input;
        self
    }
    /// <p>One or more definition for support containers in this group. You can define a support container in any type of container group. You can pass in your container definitions as a JSON file.</p>
    pub fn get_support_container_definitions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SupportContainerDefinitionInput>> {
        &self.support_container_definitions
    }
    /// <p>The platform that all containers in the group use. Containers in a group must run on the same operating system.</p>
    /// <p>Default value: <code>AMAZON_LINUX_2023</code></p><note>
    /// <p>Amazon Linux 2 (AL2) will reach end of support on 6/30/2025. See more details in the <a href="http://aws.amazon.com/amazon-linux-2/faqs/">Amazon Linux 2 FAQs</a>. For game servers that are hosted on AL2 and use server SDK version 4.x for Amazon GameLift Servers, first update the game server build to server SDK 5.x, and then deploy to AL2023 instances. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk5-migration.html"> Migrate to server SDK version 5.</a></p>
    /// </note>
    /// This field is required.
    pub fn operating_system(mut self, input: crate::types::ContainerOperatingSystem) -> Self {
        self.operating_system = ::std::option::Option::Some(input);
        self
    }
    /// <p>The platform that all containers in the group use. Containers in a group must run on the same operating system.</p>
    /// <p>Default value: <code>AMAZON_LINUX_2023</code></p><note>
    /// <p>Amazon Linux 2 (AL2) will reach end of support on 6/30/2025. See more details in the <a href="http://aws.amazon.com/amazon-linux-2/faqs/">Amazon Linux 2 FAQs</a>. For game servers that are hosted on AL2 and use server SDK version 4.x for Amazon GameLift Servers, first update the game server build to server SDK 5.x, and then deploy to AL2023 instances. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk5-migration.html"> Migrate to server SDK version 5.</a></p>
    /// </note>
    pub fn set_operating_system(mut self, input: ::std::option::Option<crate::types::ContainerOperatingSystem>) -> Self {
        self.operating_system = input;
        self
    }
    /// <p>The platform that all containers in the group use. Containers in a group must run on the same operating system.</p>
    /// <p>Default value: <code>AMAZON_LINUX_2023</code></p><note>
    /// <p>Amazon Linux 2 (AL2) will reach end of support on 6/30/2025. See more details in the <a href="http://aws.amazon.com/amazon-linux-2/faqs/">Amazon Linux 2 FAQs</a>. For game servers that are hosted on AL2 and use server SDK version 4.x for Amazon GameLift Servers, first update the game server build to server SDK 5.x, and then deploy to AL2023 instances. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk5-migration.html"> Migrate to server SDK version 5.</a></p>
    /// </note>
    pub fn get_operating_system(&self) -> &::std::option::Option<crate::types::ContainerOperatingSystem> {
        &self.operating_system
    }
    /// <p>A description for the initial version of this container group definition.</p>
    pub fn version_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description for the initial version of this container group definition.</p>
    pub fn set_version_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_description = input;
        self
    }
    /// <p>A description for the initial version of this container group definition.</p>
    pub fn get_version_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_description
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of labels to assign to the container group definition resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging Amazon Web Services Resources</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of labels to assign to the container group definition resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging Amazon Web Services Resources</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of labels to assign to the container group definition resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging Amazon Web Services Resources</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateContainerGroupDefinitionInput`](crate::operation::create_container_group_definition::CreateContainerGroupDefinitionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_container_group_definition::CreateContainerGroupDefinitionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_container_group_definition::CreateContainerGroupDefinitionInput {
            name: self.name,
            container_group_type: self.container_group_type,
            total_memory_limit_mebibytes: self.total_memory_limit_mebibytes,
            total_vcpu_limit: self.total_vcpu_limit,
            game_server_container_definition: self.game_server_container_definition,
            support_container_definitions: self.support_container_definitions,
            operating_system: self.operating_system,
            version_description: self.version_description,
            tags: self.tags,
        })
    }
}
