// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TerminateGameSessionOutput {
    /// <p>Properties describing a game session.</p>
    /// <p>A game session in ACTIVE status can host players. When a game session ends, its status is set to <code>TERMINATED</code>.</p>
    /// <p>Amazon GameLift Servers retains a game session resource for 30 days after the game session ends. You can reuse idempotency token values after this time. Game session logs are retained for 14 days.</p>
    /// <p><a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets">All APIs by task</a></p>
    pub game_session: ::std::option::Option<crate::types::GameSession>,
    _request_id: Option<String>,
}
impl TerminateGameSessionOutput {
    /// <p>Properties describing a game session.</p>
    /// <p>A game session in ACTIVE status can host players. When a game session ends, its status is set to <code>TERMINATED</code>.</p>
    /// <p>Amazon GameLift Servers retains a game session resource for 30 days after the game session ends. You can reuse idempotency token values after this time. Game session logs are retained for 14 days.</p>
    /// <p><a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets">All APIs by task</a></p>
    pub fn game_session(&self) -> ::std::option::Option<&crate::types::GameSession> {
        self.game_session.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for TerminateGameSessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TerminateGameSessionOutput {
    /// Creates a new builder-style object to manufacture [`TerminateGameSessionOutput`](crate::operation::terminate_game_session::TerminateGameSessionOutput).
    pub fn builder() -> crate::operation::terminate_game_session::builders::TerminateGameSessionOutputBuilder {
        crate::operation::terminate_game_session::builders::TerminateGameSessionOutputBuilder::default()
    }
}

/// A builder for [`TerminateGameSessionOutput`](crate::operation::terminate_game_session::TerminateGameSessionOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TerminateGameSessionOutputBuilder {
    pub(crate) game_session: ::std::option::Option<crate::types::GameSession>,
    _request_id: Option<String>,
}
impl TerminateGameSessionOutputBuilder {
    /// <p>Properties describing a game session.</p>
    /// <p>A game session in ACTIVE status can host players. When a game session ends, its status is set to <code>TERMINATED</code>.</p>
    /// <p>Amazon GameLift Servers retains a game session resource for 30 days after the game session ends. You can reuse idempotency token values after this time. Game session logs are retained for 14 days.</p>
    /// <p><a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets">All APIs by task</a></p>
    pub fn game_session(mut self, input: crate::types::GameSession) -> Self {
        self.game_session = ::std::option::Option::Some(input);
        self
    }
    /// <p>Properties describing a game session.</p>
    /// <p>A game session in ACTIVE status can host players. When a game session ends, its status is set to <code>TERMINATED</code>.</p>
    /// <p>Amazon GameLift Servers retains a game session resource for 30 days after the game session ends. You can reuse idempotency token values after this time. Game session logs are retained for 14 days.</p>
    /// <p><a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets">All APIs by task</a></p>
    pub fn set_game_session(mut self, input: ::std::option::Option<crate::types::GameSession>) -> Self {
        self.game_session = input;
        self
    }
    /// <p>Properties describing a game session.</p>
    /// <p>A game session in ACTIVE status can host players. When a game session ends, its status is set to <code>TERMINATED</code>.</p>
    /// <p>Amazon GameLift Servers retains a game session resource for 30 days after the game session ends. You can reuse idempotency token values after this time. Game session logs are retained for 14 days.</p>
    /// <p><a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets">All APIs by task</a></p>
    pub fn get_game_session(&self) -> &::std::option::Option<crate::types::GameSession> {
        &self.game_session
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`TerminateGameSessionOutput`](crate::operation::terminate_game_session::TerminateGameSessionOutput).
    pub fn build(self) -> crate::operation::terminate_game_session::TerminateGameSessionOutput {
        crate::operation::terminate_game_session::TerminateGameSessionOutput {
            game_session: self.game_session,
            _request_id: self._request_id,
        }
    }
}
