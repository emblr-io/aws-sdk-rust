// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateContainerFleetOutput {
    /// <p>A collection of container fleet objects for all fleets that match the request criteria.</p>
    pub container_fleet: ::std::option::Option<crate::types::ContainerFleet>,
    _request_id: Option<String>,
}
impl UpdateContainerFleetOutput {
    /// <p>A collection of container fleet objects for all fleets that match the request criteria.</p>
    pub fn container_fleet(&self) -> ::std::option::Option<&crate::types::ContainerFleet> {
        self.container_fleet.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for UpdateContainerFleetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateContainerFleetOutput {
    /// Creates a new builder-style object to manufacture [`UpdateContainerFleetOutput`](crate::operation::update_container_fleet::UpdateContainerFleetOutput).
    pub fn builder() -> crate::operation::update_container_fleet::builders::UpdateContainerFleetOutputBuilder {
        crate::operation::update_container_fleet::builders::UpdateContainerFleetOutputBuilder::default()
    }
}

/// A builder for [`UpdateContainerFleetOutput`](crate::operation::update_container_fleet::UpdateContainerFleetOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateContainerFleetOutputBuilder {
    pub(crate) container_fleet: ::std::option::Option<crate::types::ContainerFleet>,
    _request_id: Option<String>,
}
impl UpdateContainerFleetOutputBuilder {
    /// <p>A collection of container fleet objects for all fleets that match the request criteria.</p>
    pub fn container_fleet(mut self, input: crate::types::ContainerFleet) -> Self {
        self.container_fleet = ::std::option::Option::Some(input);
        self
    }
    /// <p>A collection of container fleet objects for all fleets that match the request criteria.</p>
    pub fn set_container_fleet(mut self, input: ::std::option::Option<crate::types::ContainerFleet>) -> Self {
        self.container_fleet = input;
        self
    }
    /// <p>A collection of container fleet objects for all fleets that match the request criteria.</p>
    pub fn get_container_fleet(&self) -> &::std::option::Option<crate::types::ContainerFleet> {
        &self.container_fleet
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateContainerFleetOutput`](crate::operation::update_container_fleet::UpdateContainerFleetOutput).
    pub fn build(self) -> crate::operation::update_container_fleet::UpdateContainerFleetOutput {
        crate::operation::update_container_fleet::UpdateContainerFleetOutput {
            container_fleet: self.container_fleet,
            _request_id: self._request_id,
        }
    }
}
