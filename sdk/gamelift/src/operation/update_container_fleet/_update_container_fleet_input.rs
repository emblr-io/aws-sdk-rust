// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateContainerFleetInput {
    /// <p>A unique identifier for the container fleet to update. You can use either the fleet ID or ARN value.</p>
    pub fleet_id: ::std::option::Option<::std::string::String>,
    /// <p>The name or ARN value of a new game server container group definition to deploy on the fleet. If you're updating the fleet to a specific version of a container group definition, use the ARN value and include the version number. If you're updating the fleet to the latest version of a container group definition, you can use the name value. You can't remove a fleet's game server container group definition, you can only update or replace it with another definition.</p>
    /// <p>Update a container group definition by calling <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateContainerGroupDefinition.html">UpdateContainerGroupDefinition</a>. This operation creates a <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_ContainerGroupDefinition.html">ContainerGroupDefinition</a> resource with an incremented version.</p>
    pub game_server_container_group_definition_name: ::std::option::Option<::std::string::String>,
    /// <p>The name or ARN value of a new per-instance container group definition to deploy on the fleet. If you're updating the fleet to a specific version of a container group definition, use the ARN value and include the version number. If you're updating the fleet to the latest version of a container group definition, you can use the name value.</p>
    /// <p>Update a container group definition by calling <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateContainerGroupDefinition.html">UpdateContainerGroupDefinition</a>. This operation creates a <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_ContainerGroupDefinition.html">ContainerGroupDefinition</a> resource with an incremented version.</p>
    /// <p>To remove a fleet's per-instance container group definition, leave this parameter empty and use the parameter <code>RemoveAttributes</code>.</p>
    pub per_instance_container_group_definition_name: ::std::option::Option<::std::string::String>,
    /// <p>The number of times to replicate the game server container group on each fleet instance. By default, Amazon GameLift Servers calculates the maximum number of game server container groups that can fit on each instance. You can remove this property value to use the calculated value, or set it manually. If you set this number manually, Amazon GameLift Servers uses your value as long as it's less than the calculated maximum.</p>
    pub game_server_container_groups_per_instance: ::std::option::Option<i32>,
    /// <p>A revised set of port numbers to open on each fleet instance. By default, Amazon GameLift Servers calculates an optimal port range based on your fleet configuration. If you previously set this parameter manually, you can't reset this to use the calculated settings.</p>
    pub instance_connection_port_range: ::std::option::Option<crate::types::ConnectionPortRange>,
    /// <p>A set of ports to add to the container fleet's inbound permissions.</p>
    pub instance_inbound_permission_authorizations: ::std::option::Option<::std::vec::Vec<crate::types::IpPermission>>,
    /// <p>A set of ports to remove from the container fleet's inbound permissions.</p>
    pub instance_inbound_permission_revocations: ::std::option::Option<::std::vec::Vec<crate::types::IpPermission>>,
    /// <p>Instructions for how to deploy updates to a container fleet, if the fleet update initiates a deployment. The deployment configuration lets you determine how to replace fleet instances and what actions to take if the deployment fails.</p>
    pub deployment_configuration: ::std::option::Option<crate::types::DeploymentConfiguration>,
    /// <p>A meaningful description of the container fleet.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The name of an Amazon Web Services CloudWatch metric group to add this fleet to.</p>
    pub metric_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The game session protection policy to apply to all new game sessions that are started in this fleet. Game sessions that already exist are not affected.</p>
    pub new_game_session_protection_policy: ::std::option::Option<crate::types::ProtectionPolicy>,
    /// <p>A policy that limits the number of game sessions that each individual player can create on instances in this fleet. The limit applies for a specified span of time.</p>
    pub game_session_creation_limit_policy: ::std::option::Option<crate::types::GameSessionCreationLimitPolicy>,
    /// <p>The method for collecting container logs for the fleet.</p>
    pub log_configuration: ::std::option::Option<crate::types::LogConfiguration>,
    /// <p>If set, this update removes a fleet's per-instance container group definition. You can't remove a fleet's game server container group definition.</p>
    pub remove_attributes: ::std::option::Option<::std::vec::Vec<crate::types::ContainerFleetRemoveAttribute>>,
}
impl UpdateContainerFleetInput {
    /// <p>A unique identifier for the container fleet to update. You can use either the fleet ID or ARN value.</p>
    pub fn fleet_id(&self) -> ::std::option::Option<&str> {
        self.fleet_id.as_deref()
    }
    /// <p>The name or ARN value of a new game server container group definition to deploy on the fleet. If you're updating the fleet to a specific version of a container group definition, use the ARN value and include the version number. If you're updating the fleet to the latest version of a container group definition, you can use the name value. You can't remove a fleet's game server container group definition, you can only update or replace it with another definition.</p>
    /// <p>Update a container group definition by calling <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateContainerGroupDefinition.html">UpdateContainerGroupDefinition</a>. This operation creates a <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_ContainerGroupDefinition.html">ContainerGroupDefinition</a> resource with an incremented version.</p>
    pub fn game_server_container_group_definition_name(&self) -> ::std::option::Option<&str> {
        self.game_server_container_group_definition_name.as_deref()
    }
    /// <p>The name or ARN value of a new per-instance container group definition to deploy on the fleet. If you're updating the fleet to a specific version of a container group definition, use the ARN value and include the version number. If you're updating the fleet to the latest version of a container group definition, you can use the name value.</p>
    /// <p>Update a container group definition by calling <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateContainerGroupDefinition.html">UpdateContainerGroupDefinition</a>. This operation creates a <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_ContainerGroupDefinition.html">ContainerGroupDefinition</a> resource with an incremented version.</p>
    /// <p>To remove a fleet's per-instance container group definition, leave this parameter empty and use the parameter <code>RemoveAttributes</code>.</p>
    pub fn per_instance_container_group_definition_name(&self) -> ::std::option::Option<&str> {
        self.per_instance_container_group_definition_name.as_deref()
    }
    /// <p>The number of times to replicate the game server container group on each fleet instance. By default, Amazon GameLift Servers calculates the maximum number of game server container groups that can fit on each instance. You can remove this property value to use the calculated value, or set it manually. If you set this number manually, Amazon GameLift Servers uses your value as long as it's less than the calculated maximum.</p>
    pub fn game_server_container_groups_per_instance(&self) -> ::std::option::Option<i32> {
        self.game_server_container_groups_per_instance
    }
    /// <p>A revised set of port numbers to open on each fleet instance. By default, Amazon GameLift Servers calculates an optimal port range based on your fleet configuration. If you previously set this parameter manually, you can't reset this to use the calculated settings.</p>
    pub fn instance_connection_port_range(&self) -> ::std::option::Option<&crate::types::ConnectionPortRange> {
        self.instance_connection_port_range.as_ref()
    }
    /// <p>A set of ports to add to the container fleet's inbound permissions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instance_inbound_permission_authorizations.is_none()`.
    pub fn instance_inbound_permission_authorizations(&self) -> &[crate::types::IpPermission] {
        self.instance_inbound_permission_authorizations.as_deref().unwrap_or_default()
    }
    /// <p>A set of ports to remove from the container fleet's inbound permissions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instance_inbound_permission_revocations.is_none()`.
    pub fn instance_inbound_permission_revocations(&self) -> &[crate::types::IpPermission] {
        self.instance_inbound_permission_revocations.as_deref().unwrap_or_default()
    }
    /// <p>Instructions for how to deploy updates to a container fleet, if the fleet update initiates a deployment. The deployment configuration lets you determine how to replace fleet instances and what actions to take if the deployment fails.</p>
    pub fn deployment_configuration(&self) -> ::std::option::Option<&crate::types::DeploymentConfiguration> {
        self.deployment_configuration.as_ref()
    }
    /// <p>A meaningful description of the container fleet.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The name of an Amazon Web Services CloudWatch metric group to add this fleet to.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metric_groups.is_none()`.
    pub fn metric_groups(&self) -> &[::std::string::String] {
        self.metric_groups.as_deref().unwrap_or_default()
    }
    /// <p>The game session protection policy to apply to all new game sessions that are started in this fleet. Game sessions that already exist are not affected.</p>
    pub fn new_game_session_protection_policy(&self) -> ::std::option::Option<&crate::types::ProtectionPolicy> {
        self.new_game_session_protection_policy.as_ref()
    }
    /// <p>A policy that limits the number of game sessions that each individual player can create on instances in this fleet. The limit applies for a specified span of time.</p>
    pub fn game_session_creation_limit_policy(&self) -> ::std::option::Option<&crate::types::GameSessionCreationLimitPolicy> {
        self.game_session_creation_limit_policy.as_ref()
    }
    /// <p>The method for collecting container logs for the fleet.</p>
    pub fn log_configuration(&self) -> ::std::option::Option<&crate::types::LogConfiguration> {
        self.log_configuration.as_ref()
    }
    /// <p>If set, this update removes a fleet's per-instance container group definition. You can't remove a fleet's game server container group definition.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.remove_attributes.is_none()`.
    pub fn remove_attributes(&self) -> &[crate::types::ContainerFleetRemoveAttribute] {
        self.remove_attributes.as_deref().unwrap_or_default()
    }
}
impl UpdateContainerFleetInput {
    /// Creates a new builder-style object to manufacture [`UpdateContainerFleetInput`](crate::operation::update_container_fleet::UpdateContainerFleetInput).
    pub fn builder() -> crate::operation::update_container_fleet::builders::UpdateContainerFleetInputBuilder {
        crate::operation::update_container_fleet::builders::UpdateContainerFleetInputBuilder::default()
    }
}

/// A builder for [`UpdateContainerFleetInput`](crate::operation::update_container_fleet::UpdateContainerFleetInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateContainerFleetInputBuilder {
    pub(crate) fleet_id: ::std::option::Option<::std::string::String>,
    pub(crate) game_server_container_group_definition_name: ::std::option::Option<::std::string::String>,
    pub(crate) per_instance_container_group_definition_name: ::std::option::Option<::std::string::String>,
    pub(crate) game_server_container_groups_per_instance: ::std::option::Option<i32>,
    pub(crate) instance_connection_port_range: ::std::option::Option<crate::types::ConnectionPortRange>,
    pub(crate) instance_inbound_permission_authorizations: ::std::option::Option<::std::vec::Vec<crate::types::IpPermission>>,
    pub(crate) instance_inbound_permission_revocations: ::std::option::Option<::std::vec::Vec<crate::types::IpPermission>>,
    pub(crate) deployment_configuration: ::std::option::Option<crate::types::DeploymentConfiguration>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) metric_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) new_game_session_protection_policy: ::std::option::Option<crate::types::ProtectionPolicy>,
    pub(crate) game_session_creation_limit_policy: ::std::option::Option<crate::types::GameSessionCreationLimitPolicy>,
    pub(crate) log_configuration: ::std::option::Option<crate::types::LogConfiguration>,
    pub(crate) remove_attributes: ::std::option::Option<::std::vec::Vec<crate::types::ContainerFleetRemoveAttribute>>,
}
impl UpdateContainerFleetInputBuilder {
    /// <p>A unique identifier for the container fleet to update. You can use either the fleet ID or ARN value.</p>
    /// This field is required.
    pub fn fleet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fleet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the container fleet to update. You can use either the fleet ID or ARN value.</p>
    pub fn set_fleet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fleet_id = input;
        self
    }
    /// <p>A unique identifier for the container fleet to update. You can use either the fleet ID or ARN value.</p>
    pub fn get_fleet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.fleet_id
    }
    /// <p>The name or ARN value of a new game server container group definition to deploy on the fleet. If you're updating the fleet to a specific version of a container group definition, use the ARN value and include the version number. If you're updating the fleet to the latest version of a container group definition, you can use the name value. You can't remove a fleet's game server container group definition, you can only update or replace it with another definition.</p>
    /// <p>Update a container group definition by calling <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateContainerGroupDefinition.html">UpdateContainerGroupDefinition</a>. This operation creates a <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_ContainerGroupDefinition.html">ContainerGroupDefinition</a> resource with an incremented version.</p>
    pub fn game_server_container_group_definition_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.game_server_container_group_definition_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or ARN value of a new game server container group definition to deploy on the fleet. If you're updating the fleet to a specific version of a container group definition, use the ARN value and include the version number. If you're updating the fleet to the latest version of a container group definition, you can use the name value. You can't remove a fleet's game server container group definition, you can only update or replace it with another definition.</p>
    /// <p>Update a container group definition by calling <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateContainerGroupDefinition.html">UpdateContainerGroupDefinition</a>. This operation creates a <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_ContainerGroupDefinition.html">ContainerGroupDefinition</a> resource with an incremented version.</p>
    pub fn set_game_server_container_group_definition_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.game_server_container_group_definition_name = input;
        self
    }
    /// <p>The name or ARN value of a new game server container group definition to deploy on the fleet. If you're updating the fleet to a specific version of a container group definition, use the ARN value and include the version number. If you're updating the fleet to the latest version of a container group definition, you can use the name value. You can't remove a fleet's game server container group definition, you can only update or replace it with another definition.</p>
    /// <p>Update a container group definition by calling <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateContainerGroupDefinition.html">UpdateContainerGroupDefinition</a>. This operation creates a <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_ContainerGroupDefinition.html">ContainerGroupDefinition</a> resource with an incremented version.</p>
    pub fn get_game_server_container_group_definition_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.game_server_container_group_definition_name
    }
    /// <p>The name or ARN value of a new per-instance container group definition to deploy on the fleet. If you're updating the fleet to a specific version of a container group definition, use the ARN value and include the version number. If you're updating the fleet to the latest version of a container group definition, you can use the name value.</p>
    /// <p>Update a container group definition by calling <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateContainerGroupDefinition.html">UpdateContainerGroupDefinition</a>. This operation creates a <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_ContainerGroupDefinition.html">ContainerGroupDefinition</a> resource with an incremented version.</p>
    /// <p>To remove a fleet's per-instance container group definition, leave this parameter empty and use the parameter <code>RemoveAttributes</code>.</p>
    pub fn per_instance_container_group_definition_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.per_instance_container_group_definition_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or ARN value of a new per-instance container group definition to deploy on the fleet. If you're updating the fleet to a specific version of a container group definition, use the ARN value and include the version number. If you're updating the fleet to the latest version of a container group definition, you can use the name value.</p>
    /// <p>Update a container group definition by calling <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateContainerGroupDefinition.html">UpdateContainerGroupDefinition</a>. This operation creates a <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_ContainerGroupDefinition.html">ContainerGroupDefinition</a> resource with an incremented version.</p>
    /// <p>To remove a fleet's per-instance container group definition, leave this parameter empty and use the parameter <code>RemoveAttributes</code>.</p>
    pub fn set_per_instance_container_group_definition_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.per_instance_container_group_definition_name = input;
        self
    }
    /// <p>The name or ARN value of a new per-instance container group definition to deploy on the fleet. If you're updating the fleet to a specific version of a container group definition, use the ARN value and include the version number. If you're updating the fleet to the latest version of a container group definition, you can use the name value.</p>
    /// <p>Update a container group definition by calling <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateContainerGroupDefinition.html">UpdateContainerGroupDefinition</a>. This operation creates a <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_ContainerGroupDefinition.html">ContainerGroupDefinition</a> resource with an incremented version.</p>
    /// <p>To remove a fleet's per-instance container group definition, leave this parameter empty and use the parameter <code>RemoveAttributes</code>.</p>
    pub fn get_per_instance_container_group_definition_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.per_instance_container_group_definition_name
    }
    /// <p>The number of times to replicate the game server container group on each fleet instance. By default, Amazon GameLift Servers calculates the maximum number of game server container groups that can fit on each instance. You can remove this property value to use the calculated value, or set it manually. If you set this number manually, Amazon GameLift Servers uses your value as long as it's less than the calculated maximum.</p>
    pub fn game_server_container_groups_per_instance(mut self, input: i32) -> Self {
        self.game_server_container_groups_per_instance = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of times to replicate the game server container group on each fleet instance. By default, Amazon GameLift Servers calculates the maximum number of game server container groups that can fit on each instance. You can remove this property value to use the calculated value, or set it manually. If you set this number manually, Amazon GameLift Servers uses your value as long as it's less than the calculated maximum.</p>
    pub fn set_game_server_container_groups_per_instance(mut self, input: ::std::option::Option<i32>) -> Self {
        self.game_server_container_groups_per_instance = input;
        self
    }
    /// <p>The number of times to replicate the game server container group on each fleet instance. By default, Amazon GameLift Servers calculates the maximum number of game server container groups that can fit on each instance. You can remove this property value to use the calculated value, or set it manually. If you set this number manually, Amazon GameLift Servers uses your value as long as it's less than the calculated maximum.</p>
    pub fn get_game_server_container_groups_per_instance(&self) -> &::std::option::Option<i32> {
        &self.game_server_container_groups_per_instance
    }
    /// <p>A revised set of port numbers to open on each fleet instance. By default, Amazon GameLift Servers calculates an optimal port range based on your fleet configuration. If you previously set this parameter manually, you can't reset this to use the calculated settings.</p>
    pub fn instance_connection_port_range(mut self, input: crate::types::ConnectionPortRange) -> Self {
        self.instance_connection_port_range = ::std::option::Option::Some(input);
        self
    }
    /// <p>A revised set of port numbers to open on each fleet instance. By default, Amazon GameLift Servers calculates an optimal port range based on your fleet configuration. If you previously set this parameter manually, you can't reset this to use the calculated settings.</p>
    pub fn set_instance_connection_port_range(mut self, input: ::std::option::Option<crate::types::ConnectionPortRange>) -> Self {
        self.instance_connection_port_range = input;
        self
    }
    /// <p>A revised set of port numbers to open on each fleet instance. By default, Amazon GameLift Servers calculates an optimal port range based on your fleet configuration. If you previously set this parameter manually, you can't reset this to use the calculated settings.</p>
    pub fn get_instance_connection_port_range(&self) -> &::std::option::Option<crate::types::ConnectionPortRange> {
        &self.instance_connection_port_range
    }
    /// Appends an item to `instance_inbound_permission_authorizations`.
    ///
    /// To override the contents of this collection use [`set_instance_inbound_permission_authorizations`](Self::set_instance_inbound_permission_authorizations).
    ///
    /// <p>A set of ports to add to the container fleet's inbound permissions.</p>
    pub fn instance_inbound_permission_authorizations(mut self, input: crate::types::IpPermission) -> Self {
        let mut v = self.instance_inbound_permission_authorizations.unwrap_or_default();
        v.push(input);
        self.instance_inbound_permission_authorizations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A set of ports to add to the container fleet's inbound permissions.</p>
    pub fn set_instance_inbound_permission_authorizations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::IpPermission>>,
    ) -> Self {
        self.instance_inbound_permission_authorizations = input;
        self
    }
    /// <p>A set of ports to add to the container fleet's inbound permissions.</p>
    pub fn get_instance_inbound_permission_authorizations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IpPermission>> {
        &self.instance_inbound_permission_authorizations
    }
    /// Appends an item to `instance_inbound_permission_revocations`.
    ///
    /// To override the contents of this collection use [`set_instance_inbound_permission_revocations`](Self::set_instance_inbound_permission_revocations).
    ///
    /// <p>A set of ports to remove from the container fleet's inbound permissions.</p>
    pub fn instance_inbound_permission_revocations(mut self, input: crate::types::IpPermission) -> Self {
        let mut v = self.instance_inbound_permission_revocations.unwrap_or_default();
        v.push(input);
        self.instance_inbound_permission_revocations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A set of ports to remove from the container fleet's inbound permissions.</p>
    pub fn set_instance_inbound_permission_revocations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IpPermission>>) -> Self {
        self.instance_inbound_permission_revocations = input;
        self
    }
    /// <p>A set of ports to remove from the container fleet's inbound permissions.</p>
    pub fn get_instance_inbound_permission_revocations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IpPermission>> {
        &self.instance_inbound_permission_revocations
    }
    /// <p>Instructions for how to deploy updates to a container fleet, if the fleet update initiates a deployment. The deployment configuration lets you determine how to replace fleet instances and what actions to take if the deployment fails.</p>
    pub fn deployment_configuration(mut self, input: crate::types::DeploymentConfiguration) -> Self {
        self.deployment_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Instructions for how to deploy updates to a container fleet, if the fleet update initiates a deployment. The deployment configuration lets you determine how to replace fleet instances and what actions to take if the deployment fails.</p>
    pub fn set_deployment_configuration(mut self, input: ::std::option::Option<crate::types::DeploymentConfiguration>) -> Self {
        self.deployment_configuration = input;
        self
    }
    /// <p>Instructions for how to deploy updates to a container fleet, if the fleet update initiates a deployment. The deployment configuration lets you determine how to replace fleet instances and what actions to take if the deployment fails.</p>
    pub fn get_deployment_configuration(&self) -> &::std::option::Option<crate::types::DeploymentConfiguration> {
        &self.deployment_configuration
    }
    /// <p>A meaningful description of the container fleet.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A meaningful description of the container fleet.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A meaningful description of the container fleet.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `metric_groups`.
    ///
    /// To override the contents of this collection use [`set_metric_groups`](Self::set_metric_groups).
    ///
    /// <p>The name of an Amazon Web Services CloudWatch metric group to add this fleet to.</p>
    pub fn metric_groups(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.metric_groups.unwrap_or_default();
        v.push(input.into());
        self.metric_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>The name of an Amazon Web Services CloudWatch metric group to add this fleet to.</p>
    pub fn set_metric_groups(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.metric_groups = input;
        self
    }
    /// <p>The name of an Amazon Web Services CloudWatch metric group to add this fleet to.</p>
    pub fn get_metric_groups(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.metric_groups
    }
    /// <p>The game session protection policy to apply to all new game sessions that are started in this fleet. Game sessions that already exist are not affected.</p>
    pub fn new_game_session_protection_policy(mut self, input: crate::types::ProtectionPolicy) -> Self {
        self.new_game_session_protection_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The game session protection policy to apply to all new game sessions that are started in this fleet. Game sessions that already exist are not affected.</p>
    pub fn set_new_game_session_protection_policy(mut self, input: ::std::option::Option<crate::types::ProtectionPolicy>) -> Self {
        self.new_game_session_protection_policy = input;
        self
    }
    /// <p>The game session protection policy to apply to all new game sessions that are started in this fleet. Game sessions that already exist are not affected.</p>
    pub fn get_new_game_session_protection_policy(&self) -> &::std::option::Option<crate::types::ProtectionPolicy> {
        &self.new_game_session_protection_policy
    }
    /// <p>A policy that limits the number of game sessions that each individual player can create on instances in this fleet. The limit applies for a specified span of time.</p>
    pub fn game_session_creation_limit_policy(mut self, input: crate::types::GameSessionCreationLimitPolicy) -> Self {
        self.game_session_creation_limit_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>A policy that limits the number of game sessions that each individual player can create on instances in this fleet. The limit applies for a specified span of time.</p>
    pub fn set_game_session_creation_limit_policy(mut self, input: ::std::option::Option<crate::types::GameSessionCreationLimitPolicy>) -> Self {
        self.game_session_creation_limit_policy = input;
        self
    }
    /// <p>A policy that limits the number of game sessions that each individual player can create on instances in this fleet. The limit applies for a specified span of time.</p>
    pub fn get_game_session_creation_limit_policy(&self) -> &::std::option::Option<crate::types::GameSessionCreationLimitPolicy> {
        &self.game_session_creation_limit_policy
    }
    /// <p>The method for collecting container logs for the fleet.</p>
    pub fn log_configuration(mut self, input: crate::types::LogConfiguration) -> Self {
        self.log_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The method for collecting container logs for the fleet.</p>
    pub fn set_log_configuration(mut self, input: ::std::option::Option<crate::types::LogConfiguration>) -> Self {
        self.log_configuration = input;
        self
    }
    /// <p>The method for collecting container logs for the fleet.</p>
    pub fn get_log_configuration(&self) -> &::std::option::Option<crate::types::LogConfiguration> {
        &self.log_configuration
    }
    /// Appends an item to `remove_attributes`.
    ///
    /// To override the contents of this collection use [`set_remove_attributes`](Self::set_remove_attributes).
    ///
    /// <p>If set, this update removes a fleet's per-instance container group definition. You can't remove a fleet's game server container group definition.</p>
    pub fn remove_attributes(mut self, input: crate::types::ContainerFleetRemoveAttribute) -> Self {
        let mut v = self.remove_attributes.unwrap_or_default();
        v.push(input);
        self.remove_attributes = ::std::option::Option::Some(v);
        self
    }
    /// <p>If set, this update removes a fleet's per-instance container group definition. You can't remove a fleet's game server container group definition.</p>
    pub fn set_remove_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContainerFleetRemoveAttribute>>) -> Self {
        self.remove_attributes = input;
        self
    }
    /// <p>If set, this update removes a fleet's per-instance container group definition. You can't remove a fleet's game server container group definition.</p>
    pub fn get_remove_attributes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContainerFleetRemoveAttribute>> {
        &self.remove_attributes
    }
    /// Consumes the builder and constructs a [`UpdateContainerFleetInput`](crate::operation::update_container_fleet::UpdateContainerFleetInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_container_fleet::UpdateContainerFleetInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_container_fleet::UpdateContainerFleetInput {
            fleet_id: self.fleet_id,
            game_server_container_group_definition_name: self.game_server_container_group_definition_name,
            per_instance_container_group_definition_name: self.per_instance_container_group_definition_name,
            game_server_container_groups_per_instance: self.game_server_container_groups_per_instance,
            instance_connection_port_range: self.instance_connection_port_range,
            instance_inbound_permission_authorizations: self.instance_inbound_permission_authorizations,
            instance_inbound_permission_revocations: self.instance_inbound_permission_revocations,
            deployment_configuration: self.deployment_configuration,
            description: self.description,
            metric_groups: self.metric_groups,
            new_game_session_protection_policy: self.new_game_session_protection_policy,
            game_session_creation_limit_policy: self.game_session_creation_limit_policy,
            log_configuration: self.log_configuration,
            remove_attributes: self.remove_attributes,
        })
    }
}
