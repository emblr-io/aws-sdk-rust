// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a location in a multi-location container fleet.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContainerFleetLocationAttributes {
    /// <p>A location identifier.</p>
    pub location: ::std::option::Option<::std::string::String>,
    /// <p>The status of fleet activity in the location.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code> -- A new container fleet has been requested.</p></li>
    /// <li>
    /// <p><code>CREATING</code> -- A new container fleet resource is being created.</p></li>
    /// <li>
    /// <p><code>CREATED</code> -- A new container fleet resource has been created. No fleet instances have been deployed.</p></li>
    /// <li>
    /// <p><code>ACTIVATING</code> -- New container fleet instances are being deployed.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code> -- The container fleet has been deployed and is ready to host game sessions.</p></li>
    /// <li>
    /// <p><code>UPDATING</code> -- Updates to the container fleet is being updated. A deployment is in progress.</p></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::ContainerFleetLocationStatus>,
}
impl ContainerFleetLocationAttributes {
    /// <p>A location identifier.</p>
    pub fn location(&self) -> ::std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>The status of fleet activity in the location.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code> -- A new container fleet has been requested.</p></li>
    /// <li>
    /// <p><code>CREATING</code> -- A new container fleet resource is being created.</p></li>
    /// <li>
    /// <p><code>CREATED</code> -- A new container fleet resource has been created. No fleet instances have been deployed.</p></li>
    /// <li>
    /// <p><code>ACTIVATING</code> -- New container fleet instances are being deployed.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code> -- The container fleet has been deployed and is ready to host game sessions.</p></li>
    /// <li>
    /// <p><code>UPDATING</code> -- Updates to the container fleet is being updated. A deployment is in progress.</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ContainerFleetLocationStatus> {
        self.status.as_ref()
    }
}
impl ContainerFleetLocationAttributes {
    /// Creates a new builder-style object to manufacture [`ContainerFleetLocationAttributes`](crate::types::ContainerFleetLocationAttributes).
    pub fn builder() -> crate::types::builders::ContainerFleetLocationAttributesBuilder {
        crate::types::builders::ContainerFleetLocationAttributesBuilder::default()
    }
}

/// A builder for [`ContainerFleetLocationAttributes`](crate::types::ContainerFleetLocationAttributes).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContainerFleetLocationAttributesBuilder {
    pub(crate) location: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ContainerFleetLocationStatus>,
}
impl ContainerFleetLocationAttributesBuilder {
    /// <p>A location identifier.</p>
    pub fn location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A location identifier.</p>
    pub fn set_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>A location identifier.</p>
    pub fn get_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.location
    }
    /// <p>The status of fleet activity in the location.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code> -- A new container fleet has been requested.</p></li>
    /// <li>
    /// <p><code>CREATING</code> -- A new container fleet resource is being created.</p></li>
    /// <li>
    /// <p><code>CREATED</code> -- A new container fleet resource has been created. No fleet instances have been deployed.</p></li>
    /// <li>
    /// <p><code>ACTIVATING</code> -- New container fleet instances are being deployed.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code> -- The container fleet has been deployed and is ready to host game sessions.</p></li>
    /// <li>
    /// <p><code>UPDATING</code> -- Updates to the container fleet is being updated. A deployment is in progress.</p></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::ContainerFleetLocationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of fleet activity in the location.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code> -- A new container fleet has been requested.</p></li>
    /// <li>
    /// <p><code>CREATING</code> -- A new container fleet resource is being created.</p></li>
    /// <li>
    /// <p><code>CREATED</code> -- A new container fleet resource has been created. No fleet instances have been deployed.</p></li>
    /// <li>
    /// <p><code>ACTIVATING</code> -- New container fleet instances are being deployed.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code> -- The container fleet has been deployed and is ready to host game sessions.</p></li>
    /// <li>
    /// <p><code>UPDATING</code> -- Updates to the container fleet is being updated. A deployment is in progress.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ContainerFleetLocationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of fleet activity in the location.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code> -- A new container fleet has been requested.</p></li>
    /// <li>
    /// <p><code>CREATING</code> -- A new container fleet resource is being created.</p></li>
    /// <li>
    /// <p><code>CREATED</code> -- A new container fleet resource has been created. No fleet instances have been deployed.</p></li>
    /// <li>
    /// <p><code>ACTIVATING</code> -- New container fleet instances are being deployed.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code> -- The container fleet has been deployed and is ready to host game sessions.</p></li>
    /// <li>
    /// <p><code>UPDATING</code> -- Updates to the container fleet is being updated. A deployment is in progress.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ContainerFleetLocationStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`ContainerFleetLocationAttributes`](crate::types::ContainerFleetLocationAttributes).
    pub fn build(self) -> crate::types::ContainerFleetLocationAttributes {
        crate::types::ContainerFleetLocationAttributes {
            location: self.location,
            status: self.status,
        }
    }
}
