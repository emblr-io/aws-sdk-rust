// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an Amazon GameLift Servers managed container fleet.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContainerFleet {
    /// <p>A unique identifier for the container fleet to retrieve.</p>
    pub fleet_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a Amazon GameLift Servers fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>
    /// ::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912
    /// </region></code>. In a GameLift fleet ARN, the resource ID matches the <code>FleetId</code> value.</p>
    pub fleet_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for an Identity and Access Management (IAM) role with permissions to run your containers on resources that are managed by Amazon GameLift Servers. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/setting-up-role.html">Set up an IAM service role</a>. This fleet property can't be changed.</p>
    pub fleet_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the fleet's game server container group definition, which describes how to deploy containers with your game server build and support software onto each fleet instance.</p>
    pub game_server_container_group_definition_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to the fleet's game server container group. The ARN value also identifies the specific container group definition version in use.</p>
    pub game_server_container_group_definition_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the fleet's per-instance container group definition.</p>
    pub per_instance_container_group_definition_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to the fleet's per-instance container group. The ARN value also identifies the specific container group definition version in use.</p>
    pub per_instance_container_group_definition_arn: ::std::option::Option<::std::string::String>,
    /// <p>The set of port numbers to open on each instance in a container fleet. Connection ports are used by inbound traffic to connect with processes that are running in containers on the fleet.</p>
    pub instance_connection_port_range: ::std::option::Option<crate::types::ConnectionPortRange>,
    /// <p>The IP address ranges and port settings that allow inbound traffic to access game server processes and other processes on this fleet.</p>
    pub instance_inbound_permissions: ::std::option::Option<::std::vec::Vec<crate::types::IpPermission>>,
    /// <p>The number of times to replicate the game server container group on each fleet instance.</p>
    pub game_server_container_groups_per_instance: ::std::option::Option<i32>,
    /// <p>The calculated maximum number of game server container group that can be deployed on each fleet instance. The calculation depends on the resource needs of the container group and the CPU and memory resources of the fleet's instance type.</p>
    pub maximum_game_server_container_groups_per_instance: ::std::option::Option<i32>,
    /// <p>The Amazon EC2 instance type to use for all instances in the fleet. Instance type determines the computing resources and processing power that's available to host your game servers. This includes including CPU, memory, storage, and networking capacity. You can't update this fleet property.</p>
    pub instance_type: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the fleet uses On-Demand or Spot instances for this fleet. Learn more about when to use <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-ec2-instances.html#gamelift-ec2-instances-spot"> On-Demand versus Spot Instances</a>. You can't update this fleet property.</p>
    /// <p>By default, this property is set to <code>ON_DEMAND</code>.</p>
    pub billing_type: ::std::option::Option<crate::types::ContainerFleetBillingType>,
    /// <p>A meaningful description of the container fleet.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The name of an Amazon Web Services CloudWatch metric group to add this fleet to. Metric groups aggregate metrics for multiple fleets.</p>
    pub metric_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Determines whether Amazon GameLift Servers can shut down game sessions on the fleet that are actively running and hosting players. Amazon GameLift Servers might prompt an instance shutdown when scaling down fleet capacity or when retiring unhealthy instances. You can also set game session protection for individual game sessions using <a href="gamelift/latest/apireference/API_UpdateGameSession.html">UpdateGameSession</a>.</p>
    /// <ul>
    /// <li>
    /// <p><b>NoProtection</b> -- Game sessions can be shut down during active gameplay.</p></li>
    /// <li>
    /// <p><b>FullProtection</b> -- Game sessions in <code>ACTIVE</code> status can't be shut down.</p></li>
    /// </ul>
    pub new_game_session_protection_policy: ::std::option::Option<crate::types::ProtectionPolicy>,
    /// <p>A policy that limits the number of game sessions that each individual player can create on instances in this fleet. The limit applies for a specified span of time.</p>
    pub game_session_creation_limit_policy: ::std::option::Option<crate::types::GameSessionCreationLimitPolicy>,
    /// <p>The current status of the container fleet.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code> -- A new container fleet has been requested.</p></li>
    /// <li>
    /// <p><code>CREATING</code> -- A new container fleet resource is being created.</p></li>
    /// <li>
    /// <p><code>CREATED</code> -- A new container fleet resource has been created. No fleet instances have been deployed.</p></li>
    /// <li>
    /// <p><code>ACTIVATING</code> -- New container fleet instances are being deployed.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code> -- The container fleet has been deployed and is ready to host game sessions.</p></li>
    /// <li>
    /// <p><code>UPDATING</code> -- Updates to the container fleet is being updated. A deployment is in progress.</p></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::ContainerFleetStatus>,
    /// <p>Information about the most recent deployment for the container fleet.</p>
    pub deployment_details: ::std::option::Option<crate::types::DeploymentDetails>,
    /// <p>The method that is used to collect container logs for the fleet. Amazon GameLift Servers saves all standard output for each container in logs, including game session logs.</p>
    /// <ul>
    /// <li>
    /// <p><code>CLOUDWATCH</code> -- Send logs to an Amazon CloudWatch log group that you define. Each container emits a log stream, which is organized in the log group.</p></li>
    /// <li>
    /// <p><code>S3</code> -- Store logs in an Amazon S3 bucket that you define.</p></li>
    /// <li>
    /// <p><code>NONE</code> -- Don't collect container logs.</p></li>
    /// </ul>
    pub log_configuration: ::std::option::Option<crate::types::LogConfiguration>,
    /// <p>Information about the container fleet's remote locations where fleet instances are deployed.</p>
    pub location_attributes: ::std::option::Option<::std::vec::Vec<crate::types::ContainerFleetLocationAttributes>>,
}
impl ContainerFleet {
    /// <p>A unique identifier for the container fleet to retrieve.</p>
    pub fn fleet_id(&self) -> ::std::option::Option<&str> {
        self.fleet_id.as_deref()
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a Amazon GameLift Servers fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>
    /// ::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912
    /// </region></code>. In a GameLift fleet ARN, the resource ID matches the <code>FleetId</code> value.</p>
    pub fn fleet_arn(&self) -> ::std::option::Option<&str> {
        self.fleet_arn.as_deref()
    }
    /// <p>The unique identifier for an Identity and Access Management (IAM) role with permissions to run your containers on resources that are managed by Amazon GameLift Servers. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/setting-up-role.html">Set up an IAM service role</a>. This fleet property can't be changed.</p>
    pub fn fleet_role_arn(&self) -> ::std::option::Option<&str> {
        self.fleet_role_arn.as_deref()
    }
    /// <p>The name of the fleet's game server container group definition, which describes how to deploy containers with your game server build and support software onto each fleet instance.</p>
    pub fn game_server_container_group_definition_name(&self) -> ::std::option::Option<&str> {
        self.game_server_container_group_definition_name.as_deref()
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to the fleet's game server container group. The ARN value also identifies the specific container group definition version in use.</p>
    pub fn game_server_container_group_definition_arn(&self) -> ::std::option::Option<&str> {
        self.game_server_container_group_definition_arn.as_deref()
    }
    /// <p>The name of the fleet's per-instance container group definition.</p>
    pub fn per_instance_container_group_definition_name(&self) -> ::std::option::Option<&str> {
        self.per_instance_container_group_definition_name.as_deref()
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to the fleet's per-instance container group. The ARN value also identifies the specific container group definition version in use.</p>
    pub fn per_instance_container_group_definition_arn(&self) -> ::std::option::Option<&str> {
        self.per_instance_container_group_definition_arn.as_deref()
    }
    /// <p>The set of port numbers to open on each instance in a container fleet. Connection ports are used by inbound traffic to connect with processes that are running in containers on the fleet.</p>
    pub fn instance_connection_port_range(&self) -> ::std::option::Option<&crate::types::ConnectionPortRange> {
        self.instance_connection_port_range.as_ref()
    }
    /// <p>The IP address ranges and port settings that allow inbound traffic to access game server processes and other processes on this fleet.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instance_inbound_permissions.is_none()`.
    pub fn instance_inbound_permissions(&self) -> &[crate::types::IpPermission] {
        self.instance_inbound_permissions.as_deref().unwrap_or_default()
    }
    /// <p>The number of times to replicate the game server container group on each fleet instance.</p>
    pub fn game_server_container_groups_per_instance(&self) -> ::std::option::Option<i32> {
        self.game_server_container_groups_per_instance
    }
    /// <p>The calculated maximum number of game server container group that can be deployed on each fleet instance. The calculation depends on the resource needs of the container group and the CPU and memory resources of the fleet's instance type.</p>
    pub fn maximum_game_server_container_groups_per_instance(&self) -> ::std::option::Option<i32> {
        self.maximum_game_server_container_groups_per_instance
    }
    /// <p>The Amazon EC2 instance type to use for all instances in the fleet. Instance type determines the computing resources and processing power that's available to host your game servers. This includes including CPU, memory, storage, and networking capacity. You can't update this fleet property.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>Indicates whether the fleet uses On-Demand or Spot instances for this fleet. Learn more about when to use <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-ec2-instances.html#gamelift-ec2-instances-spot"> On-Demand versus Spot Instances</a>. You can't update this fleet property.</p>
    /// <p>By default, this property is set to <code>ON_DEMAND</code>.</p>
    pub fn billing_type(&self) -> ::std::option::Option<&crate::types::ContainerFleetBillingType> {
        self.billing_type.as_ref()
    }
    /// <p>A meaningful description of the container fleet.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The name of an Amazon Web Services CloudWatch metric group to add this fleet to. Metric groups aggregate metrics for multiple fleets.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metric_groups.is_none()`.
    pub fn metric_groups(&self) -> &[::std::string::String] {
        self.metric_groups.as_deref().unwrap_or_default()
    }
    /// <p>Determines whether Amazon GameLift Servers can shut down game sessions on the fleet that are actively running and hosting players. Amazon GameLift Servers might prompt an instance shutdown when scaling down fleet capacity or when retiring unhealthy instances. You can also set game session protection for individual game sessions using <a href="gamelift/latest/apireference/API_UpdateGameSession.html">UpdateGameSession</a>.</p>
    /// <ul>
    /// <li>
    /// <p><b>NoProtection</b> -- Game sessions can be shut down during active gameplay.</p></li>
    /// <li>
    /// <p><b>FullProtection</b> -- Game sessions in <code>ACTIVE</code> status can't be shut down.</p></li>
    /// </ul>
    pub fn new_game_session_protection_policy(&self) -> ::std::option::Option<&crate::types::ProtectionPolicy> {
        self.new_game_session_protection_policy.as_ref()
    }
    /// <p>A policy that limits the number of game sessions that each individual player can create on instances in this fleet. The limit applies for a specified span of time.</p>
    pub fn game_session_creation_limit_policy(&self) -> ::std::option::Option<&crate::types::GameSessionCreationLimitPolicy> {
        self.game_session_creation_limit_policy.as_ref()
    }
    /// <p>The current status of the container fleet.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code> -- A new container fleet has been requested.</p></li>
    /// <li>
    /// <p><code>CREATING</code> -- A new container fleet resource is being created.</p></li>
    /// <li>
    /// <p><code>CREATED</code> -- A new container fleet resource has been created. No fleet instances have been deployed.</p></li>
    /// <li>
    /// <p><code>ACTIVATING</code> -- New container fleet instances are being deployed.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code> -- The container fleet has been deployed and is ready to host game sessions.</p></li>
    /// <li>
    /// <p><code>UPDATING</code> -- Updates to the container fleet is being updated. A deployment is in progress.</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ContainerFleetStatus> {
        self.status.as_ref()
    }
    /// <p>Information about the most recent deployment for the container fleet.</p>
    pub fn deployment_details(&self) -> ::std::option::Option<&crate::types::DeploymentDetails> {
        self.deployment_details.as_ref()
    }
    /// <p>The method that is used to collect container logs for the fleet. Amazon GameLift Servers saves all standard output for each container in logs, including game session logs.</p>
    /// <ul>
    /// <li>
    /// <p><code>CLOUDWATCH</code> -- Send logs to an Amazon CloudWatch log group that you define. Each container emits a log stream, which is organized in the log group.</p></li>
    /// <li>
    /// <p><code>S3</code> -- Store logs in an Amazon S3 bucket that you define.</p></li>
    /// <li>
    /// <p><code>NONE</code> -- Don't collect container logs.</p></li>
    /// </ul>
    pub fn log_configuration(&self) -> ::std::option::Option<&crate::types::LogConfiguration> {
        self.log_configuration.as_ref()
    }
    /// <p>Information about the container fleet's remote locations where fleet instances are deployed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.location_attributes.is_none()`.
    pub fn location_attributes(&self) -> &[crate::types::ContainerFleetLocationAttributes] {
        self.location_attributes.as_deref().unwrap_or_default()
    }
}
impl ContainerFleet {
    /// Creates a new builder-style object to manufacture [`ContainerFleet`](crate::types::ContainerFleet).
    pub fn builder() -> crate::types::builders::ContainerFleetBuilder {
        crate::types::builders::ContainerFleetBuilder::default()
    }
}

/// A builder for [`ContainerFleet`](crate::types::ContainerFleet).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContainerFleetBuilder {
    pub(crate) fleet_id: ::std::option::Option<::std::string::String>,
    pub(crate) fleet_arn: ::std::option::Option<::std::string::String>,
    pub(crate) fleet_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) game_server_container_group_definition_name: ::std::option::Option<::std::string::String>,
    pub(crate) game_server_container_group_definition_arn: ::std::option::Option<::std::string::String>,
    pub(crate) per_instance_container_group_definition_name: ::std::option::Option<::std::string::String>,
    pub(crate) per_instance_container_group_definition_arn: ::std::option::Option<::std::string::String>,
    pub(crate) instance_connection_port_range: ::std::option::Option<crate::types::ConnectionPortRange>,
    pub(crate) instance_inbound_permissions: ::std::option::Option<::std::vec::Vec<crate::types::IpPermission>>,
    pub(crate) game_server_container_groups_per_instance: ::std::option::Option<i32>,
    pub(crate) maximum_game_server_container_groups_per_instance: ::std::option::Option<i32>,
    pub(crate) instance_type: ::std::option::Option<::std::string::String>,
    pub(crate) billing_type: ::std::option::Option<crate::types::ContainerFleetBillingType>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) metric_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) new_game_session_protection_policy: ::std::option::Option<crate::types::ProtectionPolicy>,
    pub(crate) game_session_creation_limit_policy: ::std::option::Option<crate::types::GameSessionCreationLimitPolicy>,
    pub(crate) status: ::std::option::Option<crate::types::ContainerFleetStatus>,
    pub(crate) deployment_details: ::std::option::Option<crate::types::DeploymentDetails>,
    pub(crate) log_configuration: ::std::option::Option<crate::types::LogConfiguration>,
    pub(crate) location_attributes: ::std::option::Option<::std::vec::Vec<crate::types::ContainerFleetLocationAttributes>>,
}
impl ContainerFleetBuilder {
    /// <p>A unique identifier for the container fleet to retrieve.</p>
    pub fn fleet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fleet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the container fleet to retrieve.</p>
    pub fn set_fleet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fleet_id = input;
        self
    }
    /// <p>A unique identifier for the container fleet to retrieve.</p>
    pub fn get_fleet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.fleet_id
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a Amazon GameLift Servers fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>
    /// ::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912
    /// </region></code>. In a GameLift fleet ARN, the resource ID matches the <code>FleetId</code> value.</p>
    pub fn fleet_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fleet_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a Amazon GameLift Servers fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>
    /// ::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912
    /// </region></code>. In a GameLift fleet ARN, the resource ID matches the <code>FleetId</code> value.</p>
    pub fn set_fleet_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fleet_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a Amazon GameLift Servers fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>
    /// ::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912
    /// </region></code>. In a GameLift fleet ARN, the resource ID matches the <code>FleetId</code> value.</p>
    pub fn get_fleet_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.fleet_arn
    }
    /// <p>The unique identifier for an Identity and Access Management (IAM) role with permissions to run your containers on resources that are managed by Amazon GameLift Servers. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/setting-up-role.html">Set up an IAM service role</a>. This fleet property can't be changed.</p>
    pub fn fleet_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fleet_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for an Identity and Access Management (IAM) role with permissions to run your containers on resources that are managed by Amazon GameLift Servers. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/setting-up-role.html">Set up an IAM service role</a>. This fleet property can't be changed.</p>
    pub fn set_fleet_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fleet_role_arn = input;
        self
    }
    /// <p>The unique identifier for an Identity and Access Management (IAM) role with permissions to run your containers on resources that are managed by Amazon GameLift Servers. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/setting-up-role.html">Set up an IAM service role</a>. This fleet property can't be changed.</p>
    pub fn get_fleet_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.fleet_role_arn
    }
    /// <p>The name of the fleet's game server container group definition, which describes how to deploy containers with your game server build and support software onto each fleet instance.</p>
    pub fn game_server_container_group_definition_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.game_server_container_group_definition_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the fleet's game server container group definition, which describes how to deploy containers with your game server build and support software onto each fleet instance.</p>
    pub fn set_game_server_container_group_definition_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.game_server_container_group_definition_name = input;
        self
    }
    /// <p>The name of the fleet's game server container group definition, which describes how to deploy containers with your game server build and support software onto each fleet instance.</p>
    pub fn get_game_server_container_group_definition_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.game_server_container_group_definition_name
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to the fleet's game server container group. The ARN value also identifies the specific container group definition version in use.</p>
    pub fn game_server_container_group_definition_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.game_server_container_group_definition_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to the fleet's game server container group. The ARN value also identifies the specific container group definition version in use.</p>
    pub fn set_game_server_container_group_definition_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.game_server_container_group_definition_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to the fleet's game server container group. The ARN value also identifies the specific container group definition version in use.</p>
    pub fn get_game_server_container_group_definition_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.game_server_container_group_definition_arn
    }
    /// <p>The name of the fleet's per-instance container group definition.</p>
    pub fn per_instance_container_group_definition_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.per_instance_container_group_definition_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the fleet's per-instance container group definition.</p>
    pub fn set_per_instance_container_group_definition_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.per_instance_container_group_definition_name = input;
        self
    }
    /// <p>The name of the fleet's per-instance container group definition.</p>
    pub fn get_per_instance_container_group_definition_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.per_instance_container_group_definition_name
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to the fleet's per-instance container group. The ARN value also identifies the specific container group definition version in use.</p>
    pub fn per_instance_container_group_definition_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.per_instance_container_group_definition_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to the fleet's per-instance container group. The ARN value also identifies the specific container group definition version in use.</p>
    pub fn set_per_instance_container_group_definition_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.per_instance_container_group_definition_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to the fleet's per-instance container group. The ARN value also identifies the specific container group definition version in use.</p>
    pub fn get_per_instance_container_group_definition_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.per_instance_container_group_definition_arn
    }
    /// <p>The set of port numbers to open on each instance in a container fleet. Connection ports are used by inbound traffic to connect with processes that are running in containers on the fleet.</p>
    pub fn instance_connection_port_range(mut self, input: crate::types::ConnectionPortRange) -> Self {
        self.instance_connection_port_range = ::std::option::Option::Some(input);
        self
    }
    /// <p>The set of port numbers to open on each instance in a container fleet. Connection ports are used by inbound traffic to connect with processes that are running in containers on the fleet.</p>
    pub fn set_instance_connection_port_range(mut self, input: ::std::option::Option<crate::types::ConnectionPortRange>) -> Self {
        self.instance_connection_port_range = input;
        self
    }
    /// <p>The set of port numbers to open on each instance in a container fleet. Connection ports are used by inbound traffic to connect with processes that are running in containers on the fleet.</p>
    pub fn get_instance_connection_port_range(&self) -> &::std::option::Option<crate::types::ConnectionPortRange> {
        &self.instance_connection_port_range
    }
    /// Appends an item to `instance_inbound_permissions`.
    ///
    /// To override the contents of this collection use [`set_instance_inbound_permissions`](Self::set_instance_inbound_permissions).
    ///
    /// <p>The IP address ranges and port settings that allow inbound traffic to access game server processes and other processes on this fleet.</p>
    pub fn instance_inbound_permissions(mut self, input: crate::types::IpPermission) -> Self {
        let mut v = self.instance_inbound_permissions.unwrap_or_default();
        v.push(input);
        self.instance_inbound_permissions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IP address ranges and port settings that allow inbound traffic to access game server processes and other processes on this fleet.</p>
    pub fn set_instance_inbound_permissions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IpPermission>>) -> Self {
        self.instance_inbound_permissions = input;
        self
    }
    /// <p>The IP address ranges and port settings that allow inbound traffic to access game server processes and other processes on this fleet.</p>
    pub fn get_instance_inbound_permissions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IpPermission>> {
        &self.instance_inbound_permissions
    }
    /// <p>The number of times to replicate the game server container group on each fleet instance.</p>
    pub fn game_server_container_groups_per_instance(mut self, input: i32) -> Self {
        self.game_server_container_groups_per_instance = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of times to replicate the game server container group on each fleet instance.</p>
    pub fn set_game_server_container_groups_per_instance(mut self, input: ::std::option::Option<i32>) -> Self {
        self.game_server_container_groups_per_instance = input;
        self
    }
    /// <p>The number of times to replicate the game server container group on each fleet instance.</p>
    pub fn get_game_server_container_groups_per_instance(&self) -> &::std::option::Option<i32> {
        &self.game_server_container_groups_per_instance
    }
    /// <p>The calculated maximum number of game server container group that can be deployed on each fleet instance. The calculation depends on the resource needs of the container group and the CPU and memory resources of the fleet's instance type.</p>
    pub fn maximum_game_server_container_groups_per_instance(mut self, input: i32) -> Self {
        self.maximum_game_server_container_groups_per_instance = ::std::option::Option::Some(input);
        self
    }
    /// <p>The calculated maximum number of game server container group that can be deployed on each fleet instance. The calculation depends on the resource needs of the container group and the CPU and memory resources of the fleet's instance type.</p>
    pub fn set_maximum_game_server_container_groups_per_instance(mut self, input: ::std::option::Option<i32>) -> Self {
        self.maximum_game_server_container_groups_per_instance = input;
        self
    }
    /// <p>The calculated maximum number of game server container group that can be deployed on each fleet instance. The calculation depends on the resource needs of the container group and the CPU and memory resources of the fleet's instance type.</p>
    pub fn get_maximum_game_server_container_groups_per_instance(&self) -> &::std::option::Option<i32> {
        &self.maximum_game_server_container_groups_per_instance
    }
    /// <p>The Amazon EC2 instance type to use for all instances in the fleet. Instance type determines the computing resources and processing power that's available to host your game servers. This includes including CPU, memory, storage, and networking capacity. You can't update this fleet property.</p>
    pub fn instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon EC2 instance type to use for all instances in the fleet. Instance type determines the computing resources and processing power that's available to host your game servers. This includes including CPU, memory, storage, and networking capacity. You can't update this fleet property.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The Amazon EC2 instance type to use for all instances in the fleet. Instance type determines the computing resources and processing power that's available to host your game servers. This includes including CPU, memory, storage, and networking capacity. You can't update this fleet property.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_type
    }
    /// <p>Indicates whether the fleet uses On-Demand or Spot instances for this fleet. Learn more about when to use <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-ec2-instances.html#gamelift-ec2-instances-spot"> On-Demand versus Spot Instances</a>. You can't update this fleet property.</p>
    /// <p>By default, this property is set to <code>ON_DEMAND</code>.</p>
    pub fn billing_type(mut self, input: crate::types::ContainerFleetBillingType) -> Self {
        self.billing_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the fleet uses On-Demand or Spot instances for this fleet. Learn more about when to use <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-ec2-instances.html#gamelift-ec2-instances-spot"> On-Demand versus Spot Instances</a>. You can't update this fleet property.</p>
    /// <p>By default, this property is set to <code>ON_DEMAND</code>.</p>
    pub fn set_billing_type(mut self, input: ::std::option::Option<crate::types::ContainerFleetBillingType>) -> Self {
        self.billing_type = input;
        self
    }
    /// <p>Indicates whether the fleet uses On-Demand or Spot instances for this fleet. Learn more about when to use <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-ec2-instances.html#gamelift-ec2-instances-spot"> On-Demand versus Spot Instances</a>. You can't update this fleet property.</p>
    /// <p>By default, this property is set to <code>ON_DEMAND</code>.</p>
    pub fn get_billing_type(&self) -> &::std::option::Option<crate::types::ContainerFleetBillingType> {
        &self.billing_type
    }
    /// <p>A meaningful description of the container fleet.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A meaningful description of the container fleet.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A meaningful description of the container fleet.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// Appends an item to `metric_groups`.
    ///
    /// To override the contents of this collection use [`set_metric_groups`](Self::set_metric_groups).
    ///
    /// <p>The name of an Amazon Web Services CloudWatch metric group to add this fleet to. Metric groups aggregate metrics for multiple fleets.</p>
    pub fn metric_groups(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.metric_groups.unwrap_or_default();
        v.push(input.into());
        self.metric_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>The name of an Amazon Web Services CloudWatch metric group to add this fleet to. Metric groups aggregate metrics for multiple fleets.</p>
    pub fn set_metric_groups(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.metric_groups = input;
        self
    }
    /// <p>The name of an Amazon Web Services CloudWatch metric group to add this fleet to. Metric groups aggregate metrics for multiple fleets.</p>
    pub fn get_metric_groups(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.metric_groups
    }
    /// <p>Determines whether Amazon GameLift Servers can shut down game sessions on the fleet that are actively running and hosting players. Amazon GameLift Servers might prompt an instance shutdown when scaling down fleet capacity or when retiring unhealthy instances. You can also set game session protection for individual game sessions using <a href="gamelift/latest/apireference/API_UpdateGameSession.html">UpdateGameSession</a>.</p>
    /// <ul>
    /// <li>
    /// <p><b>NoProtection</b> -- Game sessions can be shut down during active gameplay.</p></li>
    /// <li>
    /// <p><b>FullProtection</b> -- Game sessions in <code>ACTIVE</code> status can't be shut down.</p></li>
    /// </ul>
    pub fn new_game_session_protection_policy(mut self, input: crate::types::ProtectionPolicy) -> Self {
        self.new_game_session_protection_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether Amazon GameLift Servers can shut down game sessions on the fleet that are actively running and hosting players. Amazon GameLift Servers might prompt an instance shutdown when scaling down fleet capacity or when retiring unhealthy instances. You can also set game session protection for individual game sessions using <a href="gamelift/latest/apireference/API_UpdateGameSession.html">UpdateGameSession</a>.</p>
    /// <ul>
    /// <li>
    /// <p><b>NoProtection</b> -- Game sessions can be shut down during active gameplay.</p></li>
    /// <li>
    /// <p><b>FullProtection</b> -- Game sessions in <code>ACTIVE</code> status can't be shut down.</p></li>
    /// </ul>
    pub fn set_new_game_session_protection_policy(mut self, input: ::std::option::Option<crate::types::ProtectionPolicy>) -> Self {
        self.new_game_session_protection_policy = input;
        self
    }
    /// <p>Determines whether Amazon GameLift Servers can shut down game sessions on the fleet that are actively running and hosting players. Amazon GameLift Servers might prompt an instance shutdown when scaling down fleet capacity or when retiring unhealthy instances. You can also set game session protection for individual game sessions using <a href="gamelift/latest/apireference/API_UpdateGameSession.html">UpdateGameSession</a>.</p>
    /// <ul>
    /// <li>
    /// <p><b>NoProtection</b> -- Game sessions can be shut down during active gameplay.</p></li>
    /// <li>
    /// <p><b>FullProtection</b> -- Game sessions in <code>ACTIVE</code> status can't be shut down.</p></li>
    /// </ul>
    pub fn get_new_game_session_protection_policy(&self) -> &::std::option::Option<crate::types::ProtectionPolicy> {
        &self.new_game_session_protection_policy
    }
    /// <p>A policy that limits the number of game sessions that each individual player can create on instances in this fleet. The limit applies for a specified span of time.</p>
    pub fn game_session_creation_limit_policy(mut self, input: crate::types::GameSessionCreationLimitPolicy) -> Self {
        self.game_session_creation_limit_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>A policy that limits the number of game sessions that each individual player can create on instances in this fleet. The limit applies for a specified span of time.</p>
    pub fn set_game_session_creation_limit_policy(mut self, input: ::std::option::Option<crate::types::GameSessionCreationLimitPolicy>) -> Self {
        self.game_session_creation_limit_policy = input;
        self
    }
    /// <p>A policy that limits the number of game sessions that each individual player can create on instances in this fleet. The limit applies for a specified span of time.</p>
    pub fn get_game_session_creation_limit_policy(&self) -> &::std::option::Option<crate::types::GameSessionCreationLimitPolicy> {
        &self.game_session_creation_limit_policy
    }
    /// <p>The current status of the container fleet.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code> -- A new container fleet has been requested.</p></li>
    /// <li>
    /// <p><code>CREATING</code> -- A new container fleet resource is being created.</p></li>
    /// <li>
    /// <p><code>CREATED</code> -- A new container fleet resource has been created. No fleet instances have been deployed.</p></li>
    /// <li>
    /// <p><code>ACTIVATING</code> -- New container fleet instances are being deployed.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code> -- The container fleet has been deployed and is ready to host game sessions.</p></li>
    /// <li>
    /// <p><code>UPDATING</code> -- Updates to the container fleet is being updated. A deployment is in progress.</p></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::ContainerFleetStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the container fleet.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code> -- A new container fleet has been requested.</p></li>
    /// <li>
    /// <p><code>CREATING</code> -- A new container fleet resource is being created.</p></li>
    /// <li>
    /// <p><code>CREATED</code> -- A new container fleet resource has been created. No fleet instances have been deployed.</p></li>
    /// <li>
    /// <p><code>ACTIVATING</code> -- New container fleet instances are being deployed.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code> -- The container fleet has been deployed and is ready to host game sessions.</p></li>
    /// <li>
    /// <p><code>UPDATING</code> -- Updates to the container fleet is being updated. A deployment is in progress.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ContainerFleetStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the container fleet.</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code> -- A new container fleet has been requested.</p></li>
    /// <li>
    /// <p><code>CREATING</code> -- A new container fleet resource is being created.</p></li>
    /// <li>
    /// <p><code>CREATED</code> -- A new container fleet resource has been created. No fleet instances have been deployed.</p></li>
    /// <li>
    /// <p><code>ACTIVATING</code> -- New container fleet instances are being deployed.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code> -- The container fleet has been deployed and is ready to host game sessions.</p></li>
    /// <li>
    /// <p><code>UPDATING</code> -- Updates to the container fleet is being updated. A deployment is in progress.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ContainerFleetStatus> {
        &self.status
    }
    /// <p>Information about the most recent deployment for the container fleet.</p>
    pub fn deployment_details(mut self, input: crate::types::DeploymentDetails) -> Self {
        self.deployment_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the most recent deployment for the container fleet.</p>
    pub fn set_deployment_details(mut self, input: ::std::option::Option<crate::types::DeploymentDetails>) -> Self {
        self.deployment_details = input;
        self
    }
    /// <p>Information about the most recent deployment for the container fleet.</p>
    pub fn get_deployment_details(&self) -> &::std::option::Option<crate::types::DeploymentDetails> {
        &self.deployment_details
    }
    /// <p>The method that is used to collect container logs for the fleet. Amazon GameLift Servers saves all standard output for each container in logs, including game session logs.</p>
    /// <ul>
    /// <li>
    /// <p><code>CLOUDWATCH</code> -- Send logs to an Amazon CloudWatch log group that you define. Each container emits a log stream, which is organized in the log group.</p></li>
    /// <li>
    /// <p><code>S3</code> -- Store logs in an Amazon S3 bucket that you define.</p></li>
    /// <li>
    /// <p><code>NONE</code> -- Don't collect container logs.</p></li>
    /// </ul>
    pub fn log_configuration(mut self, input: crate::types::LogConfiguration) -> Self {
        self.log_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The method that is used to collect container logs for the fleet. Amazon GameLift Servers saves all standard output for each container in logs, including game session logs.</p>
    /// <ul>
    /// <li>
    /// <p><code>CLOUDWATCH</code> -- Send logs to an Amazon CloudWatch log group that you define. Each container emits a log stream, which is organized in the log group.</p></li>
    /// <li>
    /// <p><code>S3</code> -- Store logs in an Amazon S3 bucket that you define.</p></li>
    /// <li>
    /// <p><code>NONE</code> -- Don't collect container logs.</p></li>
    /// </ul>
    pub fn set_log_configuration(mut self, input: ::std::option::Option<crate::types::LogConfiguration>) -> Self {
        self.log_configuration = input;
        self
    }
    /// <p>The method that is used to collect container logs for the fleet. Amazon GameLift Servers saves all standard output for each container in logs, including game session logs.</p>
    /// <ul>
    /// <li>
    /// <p><code>CLOUDWATCH</code> -- Send logs to an Amazon CloudWatch log group that you define. Each container emits a log stream, which is organized in the log group.</p></li>
    /// <li>
    /// <p><code>S3</code> -- Store logs in an Amazon S3 bucket that you define.</p></li>
    /// <li>
    /// <p><code>NONE</code> -- Don't collect container logs.</p></li>
    /// </ul>
    pub fn get_log_configuration(&self) -> &::std::option::Option<crate::types::LogConfiguration> {
        &self.log_configuration
    }
    /// Appends an item to `location_attributes`.
    ///
    /// To override the contents of this collection use [`set_location_attributes`](Self::set_location_attributes).
    ///
    /// <p>Information about the container fleet's remote locations where fleet instances are deployed.</p>
    pub fn location_attributes(mut self, input: crate::types::ContainerFleetLocationAttributes) -> Self {
        let mut v = self.location_attributes.unwrap_or_default();
        v.push(input);
        self.location_attributes = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the container fleet's remote locations where fleet instances are deployed.</p>
    pub fn set_location_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContainerFleetLocationAttributes>>) -> Self {
        self.location_attributes = input;
        self
    }
    /// <p>Information about the container fleet's remote locations where fleet instances are deployed.</p>
    pub fn get_location_attributes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContainerFleetLocationAttributes>> {
        &self.location_attributes
    }
    /// Consumes the builder and constructs a [`ContainerFleet`](crate::types::ContainerFleet).
    pub fn build(self) -> crate::types::ContainerFleet {
        crate::types::ContainerFleet {
            fleet_id: self.fleet_id,
            fleet_arn: self.fleet_arn,
            fleet_role_arn: self.fleet_role_arn,
            game_server_container_group_definition_name: self.game_server_container_group_definition_name,
            game_server_container_group_definition_arn: self.game_server_container_group_definition_arn,
            per_instance_container_group_definition_name: self.per_instance_container_group_definition_name,
            per_instance_container_group_definition_arn: self.per_instance_container_group_definition_arn,
            instance_connection_port_range: self.instance_connection_port_range,
            instance_inbound_permissions: self.instance_inbound_permissions,
            game_server_container_groups_per_instance: self.game_server_container_groups_per_instance,
            maximum_game_server_container_groups_per_instance: self.maximum_game_server_container_groups_per_instance,
            instance_type: self.instance_type,
            billing_type: self.billing_type,
            description: self.description,
            creation_time: self.creation_time,
            metric_groups: self.metric_groups,
            new_game_session_protection_policy: self.new_game_session_protection_policy,
            game_session_creation_limit_policy: self.game_session_creation_limit_policy,
            status: self.status,
            deployment_details: self.deployment_details,
            log_configuration: self.log_configuration,
            location_attributes: self.location_attributes,
        }
    }
}
