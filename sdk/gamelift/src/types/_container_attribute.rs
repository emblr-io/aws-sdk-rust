// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A unique identifier for a container in a container fleet compute.</p>
/// <p><b>Returned by:</b> <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_DescribeCompute.html">DescribeCompute</a></p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContainerAttribute {
    /// <p>The identifier for a container that's running in a compute.</p>
    pub container_name: ::std::option::Option<::std::string::String>,
    /// <p>The runtime ID for the container that's running in a compute. This value is unique within the compute.</p>
    pub container_runtime_id: ::std::option::Option<::std::string::String>,
}
impl ContainerAttribute {
    /// <p>The identifier for a container that's running in a compute.</p>
    pub fn container_name(&self) -> ::std::option::Option<&str> {
        self.container_name.as_deref()
    }
    /// <p>The runtime ID for the container that's running in a compute. This value is unique within the compute.</p>
    pub fn container_runtime_id(&self) -> ::std::option::Option<&str> {
        self.container_runtime_id.as_deref()
    }
}
impl ContainerAttribute {
    /// Creates a new builder-style object to manufacture [`ContainerAttribute`](crate::types::ContainerAttribute).
    pub fn builder() -> crate::types::builders::ContainerAttributeBuilder {
        crate::types::builders::ContainerAttributeBuilder::default()
    }
}

/// A builder for [`ContainerAttribute`](crate::types::ContainerAttribute).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContainerAttributeBuilder {
    pub(crate) container_name: ::std::option::Option<::std::string::String>,
    pub(crate) container_runtime_id: ::std::option::Option<::std::string::String>,
}
impl ContainerAttributeBuilder {
    /// <p>The identifier for a container that's running in a compute.</p>
    pub fn container_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.container_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for a container that's running in a compute.</p>
    pub fn set_container_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.container_name = input;
        self
    }
    /// <p>The identifier for a container that's running in a compute.</p>
    pub fn get_container_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.container_name
    }
    /// <p>The runtime ID for the container that's running in a compute. This value is unique within the compute.</p>
    pub fn container_runtime_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.container_runtime_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The runtime ID for the container that's running in a compute. This value is unique within the compute.</p>
    pub fn set_container_runtime_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.container_runtime_id = input;
        self
    }
    /// <p>The runtime ID for the container that's running in a compute. This value is unique within the compute.</p>
    pub fn get_container_runtime_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.container_runtime_id
    }
    /// Consumes the builder and constructs a [`ContainerAttribute`](crate::types::ContainerAttribute).
    pub fn build(self) -> crate::types::ContainerAttribute {
        crate::types::ContainerAttribute {
            container_name: self.container_name,
            container_runtime_id: self.container_runtime_id,
        }
    }
}
