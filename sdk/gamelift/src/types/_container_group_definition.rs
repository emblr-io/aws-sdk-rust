// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The properties that describe a container group resource. You can update all properties of a container group definition properties. Updates to a container group definition are saved as new versions.</p>
/// <p><b>Used with:</b> <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_CreateContainerGroupDefinition.html">CreateContainerGroupDefinition</a></p>
/// <p><b>Returned by:</b> <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_DescribeContainerGroupDefinition.html">DescribeContainerGroupDefinition</a>, <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_ListContainerGroupDefinitions.html">ListContainerGroupDefinitions</a>, <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateContainerGroupDefinition.html">UpdateContainerGroupDefinition</a></p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContainerGroupDefinition {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to an Amazon GameLift Servers <code>ContainerGroupDefinition</code> resource. It uniquely identifies the resource across all Amazon Web Services Regions. Format is <code>arn:aws:gamelift:\[region\]::containergroupdefinition/\[container group definition name\]:\[version\]</code>.</p>
    pub container_group_definition_arn: ::std::option::Option<::std::string::String>,
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The platform that all containers in the container group definition run on.</p><note>
    /// <p>Amazon Linux 2 (AL2) will reach end of support on 6/30/2025. See more details in the <a href="http://aws.amazon.com/amazon-linux-2/faqs/">Amazon Linux 2 FAQs</a>. For game servers that are hosted on AL2 and use server SDK version 4.x for Amazon GameLift Servers, first update the game server build to server SDK 5.x, and then deploy to AL2023 instances. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk5-migration.html"> Migrate to server SDK version 5.</a></p>
    /// </note>
    pub operating_system: ::std::option::Option<crate::types::ContainerOperatingSystem>,
    /// <p>A descriptive identifier for the container group definition. The name value is unique in an Amazon Web Services Region.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The type of container group. Container group type determines how Amazon GameLift Servers deploys the container group on each fleet instance.</p>
    pub container_group_type: ::std::option::Option<crate::types::ContainerGroupType>,
    /// <p>The amount of memory (in MiB) on a fleet instance to allocate for the container group. All containers in the group share these resources.</p>
    /// <p>You can set a limit for each container definition in the group. If individual containers have limits, this total value must be greater than any individual container's memory limit.</p>
    pub total_memory_limit_mebibytes: ::std::option::Option<i32>,
    /// <p>The amount of vCPU units on a fleet instance to allocate for the container group (1 vCPU is equal to 1024 CPU units). All containers in the group share these resources. You can set a limit for each container definition in the group. If individual containers have limits, this total value must be equal to or greater than the sum of the limits for each container in the group.</p>
    pub total_vcpu_limit: ::std::option::Option<f64>,
    /// <p>The definition for the game server container in this group. This property is used only when the container group type is <code>GAME_SERVER</code>. This container definition specifies a container image with the game server build.</p>
    pub game_server_container_definition: ::std::option::Option<crate::types::GameServerContainerDefinition>,
    /// <p>The set of definitions for support containers in this group. A container group definition might have zero support container definitions. Support container can be used in any type of container group.</p>
    pub support_container_definitions: ::std::option::Option<::std::vec::Vec<crate::types::SupportContainerDefinition>>,
    /// <p>Indicates the version of a particular container group definition. This number is incremented automatically when you update a container group definition. You can view, update, or delete individual versions or the entire container group definition.</p>
    pub version_number: ::std::option::Option<i32>,
    /// <p>An optional description that was provided for a container group definition update. Each version can have a unique description.</p>
    pub version_description: ::std::option::Option<::std::string::String>,
    /// <p>Current status of the container group definition resource. Values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>COPYING</code> -- Amazon GameLift Servers is in the process of making copies of all container images that are defined in the group. While in this state, the resource can't be used to create a container fleet.</p></li>
    /// <li>
    /// <p><code>READY</code> -- Amazon GameLift Servers has copied the registry images for all containers that are defined in the group. You can use a container group definition in this status to create a container fleet.</p></li>
    /// <li>
    /// <p><code>FAILED</code> -- Amazon GameLift Servers failed to create a valid container group definition resource. For more details on the cause of the failure, see <code>StatusReason</code>. A container group definition resource in failed status will be deleted within a few minutes.</p></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::ContainerGroupDefinitionStatus>,
    /// <p>Additional information about a container group definition that's in <code>FAILED</code> status. Possible reasons include:</p>
    /// <ul>
    /// <li>
    /// <p>An internal issue prevented Amazon GameLift Servers from creating the container group definition resource. Delete the failed resource and call <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_CreateContainerGroupDefinition.html">CreateContainerGroupDefinition</a>again.</p></li>
    /// <li>
    /// <p>An access-denied message means that you don't have permissions to access the container image on ECR. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-iam-policy-examples.html.html"> IAM permission examples</a> for help setting up required IAM permissions for Amazon GameLift Servers.</p></li>
    /// <li>
    /// <p>The <code>ImageUri</code> value for at least one of the containers in the container group definition was invalid or not found in the current Amazon Web Services account.</p></li>
    /// <li>
    /// <p>At least one of the container images referenced in the container group definition exceeds the allowed size. For size limits, see <a href="https://docs.aws.amazon.com/general/latest/gr/gamelift.html"> Amazon GameLift Servers endpoints and quotas</a>.</p></li>
    /// <li>
    /// <p>At least one of the container images referenced in the container group definition uses a different operating system than the one defined for the container group.</p></li>
    /// </ul>
    pub status_reason: ::std::option::Option<::std::string::String>,
}
impl ContainerGroupDefinition {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to an Amazon GameLift Servers <code>ContainerGroupDefinition</code> resource. It uniquely identifies the resource across all Amazon Web Services Regions. Format is <code>arn:aws:gamelift:\[region\]::containergroupdefinition/\[container group definition name\]:\[version\]</code>.</p>
    pub fn container_group_definition_arn(&self) -> ::std::option::Option<&str> {
        self.container_group_definition_arn.as_deref()
    }
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The platform that all containers in the container group definition run on.</p><note>
    /// <p>Amazon Linux 2 (AL2) will reach end of support on 6/30/2025. See more details in the <a href="http://aws.amazon.com/amazon-linux-2/faqs/">Amazon Linux 2 FAQs</a>. For game servers that are hosted on AL2 and use server SDK version 4.x for Amazon GameLift Servers, first update the game server build to server SDK 5.x, and then deploy to AL2023 instances. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk5-migration.html"> Migrate to server SDK version 5.</a></p>
    /// </note>
    pub fn operating_system(&self) -> ::std::option::Option<&crate::types::ContainerOperatingSystem> {
        self.operating_system.as_ref()
    }
    /// <p>A descriptive identifier for the container group definition. The name value is unique in an Amazon Web Services Region.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of container group. Container group type determines how Amazon GameLift Servers deploys the container group on each fleet instance.</p>
    pub fn container_group_type(&self) -> ::std::option::Option<&crate::types::ContainerGroupType> {
        self.container_group_type.as_ref()
    }
    /// <p>The amount of memory (in MiB) on a fleet instance to allocate for the container group. All containers in the group share these resources.</p>
    /// <p>You can set a limit for each container definition in the group. If individual containers have limits, this total value must be greater than any individual container's memory limit.</p>
    pub fn total_memory_limit_mebibytes(&self) -> ::std::option::Option<i32> {
        self.total_memory_limit_mebibytes
    }
    /// <p>The amount of vCPU units on a fleet instance to allocate for the container group (1 vCPU is equal to 1024 CPU units). All containers in the group share these resources. You can set a limit for each container definition in the group. If individual containers have limits, this total value must be equal to or greater than the sum of the limits for each container in the group.</p>
    pub fn total_vcpu_limit(&self) -> ::std::option::Option<f64> {
        self.total_vcpu_limit
    }
    /// <p>The definition for the game server container in this group. This property is used only when the container group type is <code>GAME_SERVER</code>. This container definition specifies a container image with the game server build.</p>
    pub fn game_server_container_definition(&self) -> ::std::option::Option<&crate::types::GameServerContainerDefinition> {
        self.game_server_container_definition.as_ref()
    }
    /// <p>The set of definitions for support containers in this group. A container group definition might have zero support container definitions. Support container can be used in any type of container group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.support_container_definitions.is_none()`.
    pub fn support_container_definitions(&self) -> &[crate::types::SupportContainerDefinition] {
        self.support_container_definitions.as_deref().unwrap_or_default()
    }
    /// <p>Indicates the version of a particular container group definition. This number is incremented automatically when you update a container group definition. You can view, update, or delete individual versions or the entire container group definition.</p>
    pub fn version_number(&self) -> ::std::option::Option<i32> {
        self.version_number
    }
    /// <p>An optional description that was provided for a container group definition update. Each version can have a unique description.</p>
    pub fn version_description(&self) -> ::std::option::Option<&str> {
        self.version_description.as_deref()
    }
    /// <p>Current status of the container group definition resource. Values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>COPYING</code> -- Amazon GameLift Servers is in the process of making copies of all container images that are defined in the group. While in this state, the resource can't be used to create a container fleet.</p></li>
    /// <li>
    /// <p><code>READY</code> -- Amazon GameLift Servers has copied the registry images for all containers that are defined in the group. You can use a container group definition in this status to create a container fleet.</p></li>
    /// <li>
    /// <p><code>FAILED</code> -- Amazon GameLift Servers failed to create a valid container group definition resource. For more details on the cause of the failure, see <code>StatusReason</code>. A container group definition resource in failed status will be deleted within a few minutes.</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ContainerGroupDefinitionStatus> {
        self.status.as_ref()
    }
    /// <p>Additional information about a container group definition that's in <code>FAILED</code> status. Possible reasons include:</p>
    /// <ul>
    /// <li>
    /// <p>An internal issue prevented Amazon GameLift Servers from creating the container group definition resource. Delete the failed resource and call <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_CreateContainerGroupDefinition.html">CreateContainerGroupDefinition</a>again.</p></li>
    /// <li>
    /// <p>An access-denied message means that you don't have permissions to access the container image on ECR. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-iam-policy-examples.html.html"> IAM permission examples</a> for help setting up required IAM permissions for Amazon GameLift Servers.</p></li>
    /// <li>
    /// <p>The <code>ImageUri</code> value for at least one of the containers in the container group definition was invalid or not found in the current Amazon Web Services account.</p></li>
    /// <li>
    /// <p>At least one of the container images referenced in the container group definition exceeds the allowed size. For size limits, see <a href="https://docs.aws.amazon.com/general/latest/gr/gamelift.html"> Amazon GameLift Servers endpoints and quotas</a>.</p></li>
    /// <li>
    /// <p>At least one of the container images referenced in the container group definition uses a different operating system than the one defined for the container group.</p></li>
    /// </ul>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
}
impl ContainerGroupDefinition {
    /// Creates a new builder-style object to manufacture [`ContainerGroupDefinition`](crate::types::ContainerGroupDefinition).
    pub fn builder() -> crate::types::builders::ContainerGroupDefinitionBuilder {
        crate::types::builders::ContainerGroupDefinitionBuilder::default()
    }
}

/// A builder for [`ContainerGroupDefinition`](crate::types::ContainerGroupDefinition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContainerGroupDefinitionBuilder {
    pub(crate) container_group_definition_arn: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) operating_system: ::std::option::Option<crate::types::ContainerOperatingSystem>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) container_group_type: ::std::option::Option<crate::types::ContainerGroupType>,
    pub(crate) total_memory_limit_mebibytes: ::std::option::Option<i32>,
    pub(crate) total_vcpu_limit: ::std::option::Option<f64>,
    pub(crate) game_server_container_definition: ::std::option::Option<crate::types::GameServerContainerDefinition>,
    pub(crate) support_container_definitions: ::std::option::Option<::std::vec::Vec<crate::types::SupportContainerDefinition>>,
    pub(crate) version_number: ::std::option::Option<i32>,
    pub(crate) version_description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ContainerGroupDefinitionStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
}
impl ContainerGroupDefinitionBuilder {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to an Amazon GameLift Servers <code>ContainerGroupDefinition</code> resource. It uniquely identifies the resource across all Amazon Web Services Regions. Format is <code>arn:aws:gamelift:\[region\]::containergroupdefinition/\[container group definition name\]:\[version\]</code>.</p>
    pub fn container_group_definition_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.container_group_definition_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to an Amazon GameLift Servers <code>ContainerGroupDefinition</code> resource. It uniquely identifies the resource across all Amazon Web Services Regions. Format is <code>arn:aws:gamelift:\[region\]::containergroupdefinition/\[container group definition name\]:\[version\]</code>.</p>
    pub fn set_container_group_definition_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.container_group_definition_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to an Amazon GameLift Servers <code>ContainerGroupDefinition</code> resource. It uniquely identifies the resource across all Amazon Web Services Regions. Format is <code>arn:aws:gamelift:\[region\]::containergroupdefinition/\[container group definition name\]:\[version\]</code>.</p>
    pub fn get_container_group_definition_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.container_group_definition_arn
    }
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The platform that all containers in the container group definition run on.</p><note>
    /// <p>Amazon Linux 2 (AL2) will reach end of support on 6/30/2025. See more details in the <a href="http://aws.amazon.com/amazon-linux-2/faqs/">Amazon Linux 2 FAQs</a>. For game servers that are hosted on AL2 and use server SDK version 4.x for Amazon GameLift Servers, first update the game server build to server SDK 5.x, and then deploy to AL2023 instances. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk5-migration.html"> Migrate to server SDK version 5.</a></p>
    /// </note>
    pub fn operating_system(mut self, input: crate::types::ContainerOperatingSystem) -> Self {
        self.operating_system = ::std::option::Option::Some(input);
        self
    }
    /// <p>The platform that all containers in the container group definition run on.</p><note>
    /// <p>Amazon Linux 2 (AL2) will reach end of support on 6/30/2025. See more details in the <a href="http://aws.amazon.com/amazon-linux-2/faqs/">Amazon Linux 2 FAQs</a>. For game servers that are hosted on AL2 and use server SDK version 4.x for Amazon GameLift Servers, first update the game server build to server SDK 5.x, and then deploy to AL2023 instances. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk5-migration.html"> Migrate to server SDK version 5.</a></p>
    /// </note>
    pub fn set_operating_system(mut self, input: ::std::option::Option<crate::types::ContainerOperatingSystem>) -> Self {
        self.operating_system = input;
        self
    }
    /// <p>The platform that all containers in the container group definition run on.</p><note>
    /// <p>Amazon Linux 2 (AL2) will reach end of support on 6/30/2025. See more details in the <a href="http://aws.amazon.com/amazon-linux-2/faqs/">Amazon Linux 2 FAQs</a>. For game servers that are hosted on AL2 and use server SDK version 4.x for Amazon GameLift Servers, first update the game server build to server SDK 5.x, and then deploy to AL2023 instances. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk5-migration.html"> Migrate to server SDK version 5.</a></p>
    /// </note>
    pub fn get_operating_system(&self) -> &::std::option::Option<crate::types::ContainerOperatingSystem> {
        &self.operating_system
    }
    /// <p>A descriptive identifier for the container group definition. The name value is unique in an Amazon Web Services Region.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A descriptive identifier for the container group definition. The name value is unique in an Amazon Web Services Region.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A descriptive identifier for the container group definition. The name value is unique in an Amazon Web Services Region.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of container group. Container group type determines how Amazon GameLift Servers deploys the container group on each fleet instance.</p>
    pub fn container_group_type(mut self, input: crate::types::ContainerGroupType) -> Self {
        self.container_group_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of container group. Container group type determines how Amazon GameLift Servers deploys the container group on each fleet instance.</p>
    pub fn set_container_group_type(mut self, input: ::std::option::Option<crate::types::ContainerGroupType>) -> Self {
        self.container_group_type = input;
        self
    }
    /// <p>The type of container group. Container group type determines how Amazon GameLift Servers deploys the container group on each fleet instance.</p>
    pub fn get_container_group_type(&self) -> &::std::option::Option<crate::types::ContainerGroupType> {
        &self.container_group_type
    }
    /// <p>The amount of memory (in MiB) on a fleet instance to allocate for the container group. All containers in the group share these resources.</p>
    /// <p>You can set a limit for each container definition in the group. If individual containers have limits, this total value must be greater than any individual container's memory limit.</p>
    pub fn total_memory_limit_mebibytes(mut self, input: i32) -> Self {
        self.total_memory_limit_mebibytes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of memory (in MiB) on a fleet instance to allocate for the container group. All containers in the group share these resources.</p>
    /// <p>You can set a limit for each container definition in the group. If individual containers have limits, this total value must be greater than any individual container's memory limit.</p>
    pub fn set_total_memory_limit_mebibytes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_memory_limit_mebibytes = input;
        self
    }
    /// <p>The amount of memory (in MiB) on a fleet instance to allocate for the container group. All containers in the group share these resources.</p>
    /// <p>You can set a limit for each container definition in the group. If individual containers have limits, this total value must be greater than any individual container's memory limit.</p>
    pub fn get_total_memory_limit_mebibytes(&self) -> &::std::option::Option<i32> {
        &self.total_memory_limit_mebibytes
    }
    /// <p>The amount of vCPU units on a fleet instance to allocate for the container group (1 vCPU is equal to 1024 CPU units). All containers in the group share these resources. You can set a limit for each container definition in the group. If individual containers have limits, this total value must be equal to or greater than the sum of the limits for each container in the group.</p>
    pub fn total_vcpu_limit(mut self, input: f64) -> Self {
        self.total_vcpu_limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of vCPU units on a fleet instance to allocate for the container group (1 vCPU is equal to 1024 CPU units). All containers in the group share these resources. You can set a limit for each container definition in the group. If individual containers have limits, this total value must be equal to or greater than the sum of the limits for each container in the group.</p>
    pub fn set_total_vcpu_limit(mut self, input: ::std::option::Option<f64>) -> Self {
        self.total_vcpu_limit = input;
        self
    }
    /// <p>The amount of vCPU units on a fleet instance to allocate for the container group (1 vCPU is equal to 1024 CPU units). All containers in the group share these resources. You can set a limit for each container definition in the group. If individual containers have limits, this total value must be equal to or greater than the sum of the limits for each container in the group.</p>
    pub fn get_total_vcpu_limit(&self) -> &::std::option::Option<f64> {
        &self.total_vcpu_limit
    }
    /// <p>The definition for the game server container in this group. This property is used only when the container group type is <code>GAME_SERVER</code>. This container definition specifies a container image with the game server build.</p>
    pub fn game_server_container_definition(mut self, input: crate::types::GameServerContainerDefinition) -> Self {
        self.game_server_container_definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The definition for the game server container in this group. This property is used only when the container group type is <code>GAME_SERVER</code>. This container definition specifies a container image with the game server build.</p>
    pub fn set_game_server_container_definition(mut self, input: ::std::option::Option<crate::types::GameServerContainerDefinition>) -> Self {
        self.game_server_container_definition = input;
        self
    }
    /// <p>The definition for the game server container in this group. This property is used only when the container group type is <code>GAME_SERVER</code>. This container definition specifies a container image with the game server build.</p>
    pub fn get_game_server_container_definition(&self) -> &::std::option::Option<crate::types::GameServerContainerDefinition> {
        &self.game_server_container_definition
    }
    /// Appends an item to `support_container_definitions`.
    ///
    /// To override the contents of this collection use [`set_support_container_definitions`](Self::set_support_container_definitions).
    ///
    /// <p>The set of definitions for support containers in this group. A container group definition might have zero support container definitions. Support container can be used in any type of container group.</p>
    pub fn support_container_definitions(mut self, input: crate::types::SupportContainerDefinition) -> Self {
        let mut v = self.support_container_definitions.unwrap_or_default();
        v.push(input);
        self.support_container_definitions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The set of definitions for support containers in this group. A container group definition might have zero support container definitions. Support container can be used in any type of container group.</p>
    pub fn set_support_container_definitions(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::SupportContainerDefinition>>,
    ) -> Self {
        self.support_container_definitions = input;
        self
    }
    /// <p>The set of definitions for support containers in this group. A container group definition might have zero support container definitions. Support container can be used in any type of container group.</p>
    pub fn get_support_container_definitions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SupportContainerDefinition>> {
        &self.support_container_definitions
    }
    /// <p>Indicates the version of a particular container group definition. This number is incremented automatically when you update a container group definition. You can view, update, or delete individual versions or the entire container group definition.</p>
    pub fn version_number(mut self, input: i32) -> Self {
        self.version_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the version of a particular container group definition. This number is incremented automatically when you update a container group definition. You can view, update, or delete individual versions or the entire container group definition.</p>
    pub fn set_version_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.version_number = input;
        self
    }
    /// <p>Indicates the version of a particular container group definition. This number is incremented automatically when you update a container group definition. You can view, update, or delete individual versions or the entire container group definition.</p>
    pub fn get_version_number(&self) -> &::std::option::Option<i32> {
        &self.version_number
    }
    /// <p>An optional description that was provided for a container group definition update. Each version can have a unique description.</p>
    pub fn version_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional description that was provided for a container group definition update. Each version can have a unique description.</p>
    pub fn set_version_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_description = input;
        self
    }
    /// <p>An optional description that was provided for a container group definition update. Each version can have a unique description.</p>
    pub fn get_version_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_description
    }
    /// <p>Current status of the container group definition resource. Values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>COPYING</code> -- Amazon GameLift Servers is in the process of making copies of all container images that are defined in the group. While in this state, the resource can't be used to create a container fleet.</p></li>
    /// <li>
    /// <p><code>READY</code> -- Amazon GameLift Servers has copied the registry images for all containers that are defined in the group. You can use a container group definition in this status to create a container fleet.</p></li>
    /// <li>
    /// <p><code>FAILED</code> -- Amazon GameLift Servers failed to create a valid container group definition resource. For more details on the cause of the failure, see <code>StatusReason</code>. A container group definition resource in failed status will be deleted within a few minutes.</p></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::ContainerGroupDefinitionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Current status of the container group definition resource. Values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>COPYING</code> -- Amazon GameLift Servers is in the process of making copies of all container images that are defined in the group. While in this state, the resource can't be used to create a container fleet.</p></li>
    /// <li>
    /// <p><code>READY</code> -- Amazon GameLift Servers has copied the registry images for all containers that are defined in the group. You can use a container group definition in this status to create a container fleet.</p></li>
    /// <li>
    /// <p><code>FAILED</code> -- Amazon GameLift Servers failed to create a valid container group definition resource. For more details on the cause of the failure, see <code>StatusReason</code>. A container group definition resource in failed status will be deleted within a few minutes.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ContainerGroupDefinitionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Current status of the container group definition resource. Values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>COPYING</code> -- Amazon GameLift Servers is in the process of making copies of all container images that are defined in the group. While in this state, the resource can't be used to create a container fleet.</p></li>
    /// <li>
    /// <p><code>READY</code> -- Amazon GameLift Servers has copied the registry images for all containers that are defined in the group. You can use a container group definition in this status to create a container fleet.</p></li>
    /// <li>
    /// <p><code>FAILED</code> -- Amazon GameLift Servers failed to create a valid container group definition resource. For more details on the cause of the failure, see <code>StatusReason</code>. A container group definition resource in failed status will be deleted within a few minutes.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ContainerGroupDefinitionStatus> {
        &self.status
    }
    /// <p>Additional information about a container group definition that's in <code>FAILED</code> status. Possible reasons include:</p>
    /// <ul>
    /// <li>
    /// <p>An internal issue prevented Amazon GameLift Servers from creating the container group definition resource. Delete the failed resource and call <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_CreateContainerGroupDefinition.html">CreateContainerGroupDefinition</a>again.</p></li>
    /// <li>
    /// <p>An access-denied message means that you don't have permissions to access the container image on ECR. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-iam-policy-examples.html.html"> IAM permission examples</a> for help setting up required IAM permissions for Amazon GameLift Servers.</p></li>
    /// <li>
    /// <p>The <code>ImageUri</code> value for at least one of the containers in the container group definition was invalid or not found in the current Amazon Web Services account.</p></li>
    /// <li>
    /// <p>At least one of the container images referenced in the container group definition exceeds the allowed size. For size limits, see <a href="https://docs.aws.amazon.com/general/latest/gr/gamelift.html"> Amazon GameLift Servers endpoints and quotas</a>.</p></li>
    /// <li>
    /// <p>At least one of the container images referenced in the container group definition uses a different operating system than the one defined for the container group.</p></li>
    /// </ul>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Additional information about a container group definition that's in <code>FAILED</code> status. Possible reasons include:</p>
    /// <ul>
    /// <li>
    /// <p>An internal issue prevented Amazon GameLift Servers from creating the container group definition resource. Delete the failed resource and call <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_CreateContainerGroupDefinition.html">CreateContainerGroupDefinition</a>again.</p></li>
    /// <li>
    /// <p>An access-denied message means that you don't have permissions to access the container image on ECR. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-iam-policy-examples.html.html"> IAM permission examples</a> for help setting up required IAM permissions for Amazon GameLift Servers.</p></li>
    /// <li>
    /// <p>The <code>ImageUri</code> value for at least one of the containers in the container group definition was invalid or not found in the current Amazon Web Services account.</p></li>
    /// <li>
    /// <p>At least one of the container images referenced in the container group definition exceeds the allowed size. For size limits, see <a href="https://docs.aws.amazon.com/general/latest/gr/gamelift.html"> Amazon GameLift Servers endpoints and quotas</a>.</p></li>
    /// <li>
    /// <p>At least one of the container images referenced in the container group definition uses a different operating system than the one defined for the container group.</p></li>
    /// </ul>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>Additional information about a container group definition that's in <code>FAILED</code> status. Possible reasons include:</p>
    /// <ul>
    /// <li>
    /// <p>An internal issue prevented Amazon GameLift Servers from creating the container group definition resource. Delete the failed resource and call <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_CreateContainerGroupDefinition.html">CreateContainerGroupDefinition</a>again.</p></li>
    /// <li>
    /// <p>An access-denied message means that you don't have permissions to access the container image on ECR. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-iam-policy-examples.html.html"> IAM permission examples</a> for help setting up required IAM permissions for Amazon GameLift Servers.</p></li>
    /// <li>
    /// <p>The <code>ImageUri</code> value for at least one of the containers in the container group definition was invalid or not found in the current Amazon Web Services account.</p></li>
    /// <li>
    /// <p>At least one of the container images referenced in the container group definition exceeds the allowed size. For size limits, see <a href="https://docs.aws.amazon.com/general/latest/gr/gamelift.html"> Amazon GameLift Servers endpoints and quotas</a>.</p></li>
    /// <li>
    /// <p>At least one of the container images referenced in the container group definition uses a different operating system than the one defined for the container group.</p></li>
    /// </ul>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// Consumes the builder and constructs a [`ContainerGroupDefinition`](crate::types::ContainerGroupDefinition).
    pub fn build(self) -> crate::types::ContainerGroupDefinition {
        crate::types::ContainerGroupDefinition {
            container_group_definition_arn: self.container_group_definition_arn,
            creation_time: self.creation_time,
            operating_system: self.operating_system,
            name: self.name,
            container_group_type: self.container_group_type,
            total_memory_limit_mebibytes: self.total_memory_limit_mebibytes,
            total_vcpu_limit: self.total_vcpu_limit,
            game_server_container_definition: self.game_server_container_definition,
            support_container_definitions: self.support_container_definitions,
            version_number: self.version_number,
            version_description: self.version_description,
            status: self.status,
            status_reason: self.status_reason,
        }
    }
}
