// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Custom prioritization settings to use with a game session queue. Prioritization settings determine how the queue selects a game hosting resource to start a new game session. This configuration replaces the default prioritization process for queues.</p>
/// <p>By default, a queue makes game session placements based on the following criteria:</p>
/// <ul>
/// <li>
/// <p>When a game session request does not include player latency data, Amazon GameLift Servers places game sessions based on the following priorities: (1) the queue's default destination order, and (2) for multi-location fleets, an alphabetic list of locations.</p></li>
/// <li>
/// <p>When a game session request includes player latency data, Amazon GameLift Servers re-orders the queue's destinations to make placements where the average player latency is lowest. It reorders based the following priorities: (1) the lowest average latency across all players, (2) the lowest hosting cost, (3) the queue's default destination order, and (4) for multi-location fleets, an alphabetic list of locations.</p></li>
/// </ul>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PriorityConfiguration {
    /// <p>A custom sequence to use when prioritizing where to place new game sessions. Each priority type is listed once.</p>
    /// <ul>
    /// <li>
    /// <p><code>LATENCY</code> -- Amazon GameLift Servers prioritizes locations where the average player latency is lowest. Player latency data is provided in each game session placement request.</p></li>
    /// <li>
    /// <p><code>COST</code> -- Amazon GameLift Servers prioritizes queue destinations with the lowest current hosting costs. Cost is evaluated based on the destination's location, instance type, and fleet type (Spot or On-Demand).</p></li>
    /// <li>
    /// <p><code>DESTINATION</code> -- Amazon GameLift Servers prioritizes based on the list order of destinations in the queue configuration.</p></li>
    /// <li>
    /// <p><code>LOCATION</code> -- Amazon GameLift Servers prioritizes based on the provided order of locations, as defined in <code>LocationOrder</code>.</p></li>
    /// </ul>
    pub priority_order: ::std::option::Option<::std::vec::Vec<crate::types::PriorityType>>,
    /// <p>The prioritization order to use for fleet locations, when the <code>PriorityOrder</code> property includes <code>LOCATION</code>. Locations can include Amazon Web Services Region codes (such as <code>us-west-2</code>), local zones, and custom locations (for Anywhere fleets). Each location must be listed only once. For details, see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-regions.html">Amazon GameLift Servers service locations.</a></p>
    pub location_order: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PriorityConfiguration {
    /// <p>A custom sequence to use when prioritizing where to place new game sessions. Each priority type is listed once.</p>
    /// <ul>
    /// <li>
    /// <p><code>LATENCY</code> -- Amazon GameLift Servers prioritizes locations where the average player latency is lowest. Player latency data is provided in each game session placement request.</p></li>
    /// <li>
    /// <p><code>COST</code> -- Amazon GameLift Servers prioritizes queue destinations with the lowest current hosting costs. Cost is evaluated based on the destination's location, instance type, and fleet type (Spot or On-Demand).</p></li>
    /// <li>
    /// <p><code>DESTINATION</code> -- Amazon GameLift Servers prioritizes based on the list order of destinations in the queue configuration.</p></li>
    /// <li>
    /// <p><code>LOCATION</code> -- Amazon GameLift Servers prioritizes based on the provided order of locations, as defined in <code>LocationOrder</code>.</p></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.priority_order.is_none()`.
    pub fn priority_order(&self) -> &[crate::types::PriorityType] {
        self.priority_order.as_deref().unwrap_or_default()
    }
    /// <p>The prioritization order to use for fleet locations, when the <code>PriorityOrder</code> property includes <code>LOCATION</code>. Locations can include Amazon Web Services Region codes (such as <code>us-west-2</code>), local zones, and custom locations (for Anywhere fleets). Each location must be listed only once. For details, see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-regions.html">Amazon GameLift Servers service locations.</a></p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.location_order.is_none()`.
    pub fn location_order(&self) -> &[::std::string::String] {
        self.location_order.as_deref().unwrap_or_default()
    }
}
impl PriorityConfiguration {
    /// Creates a new builder-style object to manufacture [`PriorityConfiguration`](crate::types::PriorityConfiguration).
    pub fn builder() -> crate::types::builders::PriorityConfigurationBuilder {
        crate::types::builders::PriorityConfigurationBuilder::default()
    }
}

/// A builder for [`PriorityConfiguration`](crate::types::PriorityConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PriorityConfigurationBuilder {
    pub(crate) priority_order: ::std::option::Option<::std::vec::Vec<crate::types::PriorityType>>,
    pub(crate) location_order: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PriorityConfigurationBuilder {
    /// Appends an item to `priority_order`.
    ///
    /// To override the contents of this collection use [`set_priority_order`](Self::set_priority_order).
    ///
    /// <p>A custom sequence to use when prioritizing where to place new game sessions. Each priority type is listed once.</p>
    /// <ul>
    /// <li>
    /// <p><code>LATENCY</code> -- Amazon GameLift Servers prioritizes locations where the average player latency is lowest. Player latency data is provided in each game session placement request.</p></li>
    /// <li>
    /// <p><code>COST</code> -- Amazon GameLift Servers prioritizes queue destinations with the lowest current hosting costs. Cost is evaluated based on the destination's location, instance type, and fleet type (Spot or On-Demand).</p></li>
    /// <li>
    /// <p><code>DESTINATION</code> -- Amazon GameLift Servers prioritizes based on the list order of destinations in the queue configuration.</p></li>
    /// <li>
    /// <p><code>LOCATION</code> -- Amazon GameLift Servers prioritizes based on the provided order of locations, as defined in <code>LocationOrder</code>.</p></li>
    /// </ul>
    pub fn priority_order(mut self, input: crate::types::PriorityType) -> Self {
        let mut v = self.priority_order.unwrap_or_default();
        v.push(input);
        self.priority_order = ::std::option::Option::Some(v);
        self
    }
    /// <p>A custom sequence to use when prioritizing where to place new game sessions. Each priority type is listed once.</p>
    /// <ul>
    /// <li>
    /// <p><code>LATENCY</code> -- Amazon GameLift Servers prioritizes locations where the average player latency is lowest. Player latency data is provided in each game session placement request.</p></li>
    /// <li>
    /// <p><code>COST</code> -- Amazon GameLift Servers prioritizes queue destinations with the lowest current hosting costs. Cost is evaluated based on the destination's location, instance type, and fleet type (Spot or On-Demand).</p></li>
    /// <li>
    /// <p><code>DESTINATION</code> -- Amazon GameLift Servers prioritizes based on the list order of destinations in the queue configuration.</p></li>
    /// <li>
    /// <p><code>LOCATION</code> -- Amazon GameLift Servers prioritizes based on the provided order of locations, as defined in <code>LocationOrder</code>.</p></li>
    /// </ul>
    pub fn set_priority_order(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PriorityType>>) -> Self {
        self.priority_order = input;
        self
    }
    /// <p>A custom sequence to use when prioritizing where to place new game sessions. Each priority type is listed once.</p>
    /// <ul>
    /// <li>
    /// <p><code>LATENCY</code> -- Amazon GameLift Servers prioritizes locations where the average player latency is lowest. Player latency data is provided in each game session placement request.</p></li>
    /// <li>
    /// <p><code>COST</code> -- Amazon GameLift Servers prioritizes queue destinations with the lowest current hosting costs. Cost is evaluated based on the destination's location, instance type, and fleet type (Spot or On-Demand).</p></li>
    /// <li>
    /// <p><code>DESTINATION</code> -- Amazon GameLift Servers prioritizes based on the list order of destinations in the queue configuration.</p></li>
    /// <li>
    /// <p><code>LOCATION</code> -- Amazon GameLift Servers prioritizes based on the provided order of locations, as defined in <code>LocationOrder</code>.</p></li>
    /// </ul>
    pub fn get_priority_order(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PriorityType>> {
        &self.priority_order
    }
    /// Appends an item to `location_order`.
    ///
    /// To override the contents of this collection use [`set_location_order`](Self::set_location_order).
    ///
    /// <p>The prioritization order to use for fleet locations, when the <code>PriorityOrder</code> property includes <code>LOCATION</code>. Locations can include Amazon Web Services Region codes (such as <code>us-west-2</code>), local zones, and custom locations (for Anywhere fleets). Each location must be listed only once. For details, see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-regions.html">Amazon GameLift Servers service locations.</a></p>
    pub fn location_order(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.location_order.unwrap_or_default();
        v.push(input.into());
        self.location_order = ::std::option::Option::Some(v);
        self
    }
    /// <p>The prioritization order to use for fleet locations, when the <code>PriorityOrder</code> property includes <code>LOCATION</code>. Locations can include Amazon Web Services Region codes (such as <code>us-west-2</code>), local zones, and custom locations (for Anywhere fleets). Each location must be listed only once. For details, see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-regions.html">Amazon GameLift Servers service locations.</a></p>
    pub fn set_location_order(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.location_order = input;
        self
    }
    /// <p>The prioritization order to use for fleet locations, when the <code>PriorityOrder</code> property includes <code>LOCATION</code>. Locations can include Amazon Web Services Region codes (such as <code>us-west-2</code>), local zones, and custom locations (for Anywhere fleets). Each location must be listed only once. For details, see <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-regions.html">Amazon GameLift Servers service locations.</a></p>
    pub fn get_location_order(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.location_order
    }
    /// Consumes the builder and constructs a [`PriorityConfiguration`](crate::types::PriorityConfiguration).
    pub fn build(self) -> crate::types::PriorityConfiguration {
        crate::types::PriorityConfiguration {
            priority_order: self.priority_order,
            location_order: self.location_order,
        }
    }
}
