// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A mount point that binds a container to a file or directory on the host system.</p>
/// <p><b>Part of:</b> <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_GameServerContainerDefinition.html">GameServerContainerDefinition</a>, <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_GameServerContainerDefinitionInput.html">https://docs.aws.amazon.com/gamelift/latest/apireference/API_GameServerContainerDefinitionInput.html</a>, <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_SupportContainerDefinition.html">SupportContainerDefinition</a>, <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_SupportContainerDefinitionInput.html">https://docs.aws.amazon.com/gamelift/latest/apireference/API_SupportContainerDefinitionInput.html</a></p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContainerMountPoint {
    /// <p>The path to the source file or directory.</p>
    pub instance_path: ::std::option::Option<::std::string::String>,
    /// <p>The mount path on the container. If this property isn't set, the instance path is used.</p>
    pub container_path: ::std::option::Option<::std::string::String>,
    /// <p>The type of access for the container.</p>
    pub access_level: ::std::option::Option<crate::types::ContainerMountPointAccessLevel>,
}
impl ContainerMountPoint {
    /// <p>The path to the source file or directory.</p>
    pub fn instance_path(&self) -> ::std::option::Option<&str> {
        self.instance_path.as_deref()
    }
    /// <p>The mount path on the container. If this property isn't set, the instance path is used.</p>
    pub fn container_path(&self) -> ::std::option::Option<&str> {
        self.container_path.as_deref()
    }
    /// <p>The type of access for the container.</p>
    pub fn access_level(&self) -> ::std::option::Option<&crate::types::ContainerMountPointAccessLevel> {
        self.access_level.as_ref()
    }
}
impl ContainerMountPoint {
    /// Creates a new builder-style object to manufacture [`ContainerMountPoint`](crate::types::ContainerMountPoint).
    pub fn builder() -> crate::types::builders::ContainerMountPointBuilder {
        crate::types::builders::ContainerMountPointBuilder::default()
    }
}

/// A builder for [`ContainerMountPoint`](crate::types::ContainerMountPoint).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContainerMountPointBuilder {
    pub(crate) instance_path: ::std::option::Option<::std::string::String>,
    pub(crate) container_path: ::std::option::Option<::std::string::String>,
    pub(crate) access_level: ::std::option::Option<crate::types::ContainerMountPointAccessLevel>,
}
impl ContainerMountPointBuilder {
    /// <p>The path to the source file or directory.</p>
    /// This field is required.
    pub fn instance_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path to the source file or directory.</p>
    pub fn set_instance_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_path = input;
        self
    }
    /// <p>The path to the source file or directory.</p>
    pub fn get_instance_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_path
    }
    /// <p>The mount path on the container. If this property isn't set, the instance path is used.</p>
    pub fn container_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.container_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The mount path on the container. If this property isn't set, the instance path is used.</p>
    pub fn set_container_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.container_path = input;
        self
    }
    /// <p>The mount path on the container. If this property isn't set, the instance path is used.</p>
    pub fn get_container_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.container_path
    }
    /// <p>The type of access for the container.</p>
    pub fn access_level(mut self, input: crate::types::ContainerMountPointAccessLevel) -> Self {
        self.access_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of access for the container.</p>
    pub fn set_access_level(mut self, input: ::std::option::Option<crate::types::ContainerMountPointAccessLevel>) -> Self {
        self.access_level = input;
        self
    }
    /// <p>The type of access for the container.</p>
    pub fn get_access_level(&self) -> &::std::option::Option<crate::types::ContainerMountPointAccessLevel> {
        &self.access_level
    }
    /// Consumes the builder and constructs a [`ContainerMountPoint`](crate::types::ContainerMountPoint).
    pub fn build(self) -> crate::types::ContainerMountPoint {
        crate::types::ContainerMountPoint {
            instance_path: self.instance_path,
            container_path: self.container_path,
            access_level: self.access_level,
        }
    }
}
