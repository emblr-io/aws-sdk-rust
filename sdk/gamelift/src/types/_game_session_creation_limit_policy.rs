// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A policy that puts limits on the number of game sessions that a player can create within a specified span of time. With this policy, you can control players' ability to consume available resources.</p>
/// <p>The policy is evaluated when a player tries to create a new game session. On receiving a <code>CreateGameSession</code> request, Amazon GameLift Servers checks that the player (identified by <code>CreatorId</code>) has created fewer than game session limit in the specified time period.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GameSessionCreationLimitPolicy {
    /// <p>A policy that puts limits on the number of game sessions that a player can create within a specified span of time. With this policy, you can control players' ability to consume available resources.</p>
    /// <p>The policy evaluates when a player tries to create a new game session. On receiving a <code>CreateGameSession</code> request, Amazon GameLift Servers checks that the player (identified by <code>CreatorId</code>) has created fewer than game session limit in the specified time period.</p>
    pub new_game_sessions_per_creator: ::std::option::Option<i32>,
    /// <p>The time span used in evaluating the resource creation limit policy.</p>
    pub policy_period_in_minutes: ::std::option::Option<i32>,
}
impl GameSessionCreationLimitPolicy {
    /// <p>A policy that puts limits on the number of game sessions that a player can create within a specified span of time. With this policy, you can control players' ability to consume available resources.</p>
    /// <p>The policy evaluates when a player tries to create a new game session. On receiving a <code>CreateGameSession</code> request, Amazon GameLift Servers checks that the player (identified by <code>CreatorId</code>) has created fewer than game session limit in the specified time period.</p>
    pub fn new_game_sessions_per_creator(&self) -> ::std::option::Option<i32> {
        self.new_game_sessions_per_creator
    }
    /// <p>The time span used in evaluating the resource creation limit policy.</p>
    pub fn policy_period_in_minutes(&self) -> ::std::option::Option<i32> {
        self.policy_period_in_minutes
    }
}
impl GameSessionCreationLimitPolicy {
    /// Creates a new builder-style object to manufacture [`GameSessionCreationLimitPolicy`](crate::types::GameSessionCreationLimitPolicy).
    pub fn builder() -> crate::types::builders::GameSessionCreationLimitPolicyBuilder {
        crate::types::builders::GameSessionCreationLimitPolicyBuilder::default()
    }
}

/// A builder for [`GameSessionCreationLimitPolicy`](crate::types::GameSessionCreationLimitPolicy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GameSessionCreationLimitPolicyBuilder {
    pub(crate) new_game_sessions_per_creator: ::std::option::Option<i32>,
    pub(crate) policy_period_in_minutes: ::std::option::Option<i32>,
}
impl GameSessionCreationLimitPolicyBuilder {
    /// <p>A policy that puts limits on the number of game sessions that a player can create within a specified span of time. With this policy, you can control players' ability to consume available resources.</p>
    /// <p>The policy evaluates when a player tries to create a new game session. On receiving a <code>CreateGameSession</code> request, Amazon GameLift Servers checks that the player (identified by <code>CreatorId</code>) has created fewer than game session limit in the specified time period.</p>
    pub fn new_game_sessions_per_creator(mut self, input: i32) -> Self {
        self.new_game_sessions_per_creator = ::std::option::Option::Some(input);
        self
    }
    /// <p>A policy that puts limits on the number of game sessions that a player can create within a specified span of time. With this policy, you can control players' ability to consume available resources.</p>
    /// <p>The policy evaluates when a player tries to create a new game session. On receiving a <code>CreateGameSession</code> request, Amazon GameLift Servers checks that the player (identified by <code>CreatorId</code>) has created fewer than game session limit in the specified time period.</p>
    pub fn set_new_game_sessions_per_creator(mut self, input: ::std::option::Option<i32>) -> Self {
        self.new_game_sessions_per_creator = input;
        self
    }
    /// <p>A policy that puts limits on the number of game sessions that a player can create within a specified span of time. With this policy, you can control players' ability to consume available resources.</p>
    /// <p>The policy evaluates when a player tries to create a new game session. On receiving a <code>CreateGameSession</code> request, Amazon GameLift Servers checks that the player (identified by <code>CreatorId</code>) has created fewer than game session limit in the specified time period.</p>
    pub fn get_new_game_sessions_per_creator(&self) -> &::std::option::Option<i32> {
        &self.new_game_sessions_per_creator
    }
    /// <p>The time span used in evaluating the resource creation limit policy.</p>
    pub fn policy_period_in_minutes(mut self, input: i32) -> Self {
        self.policy_period_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time span used in evaluating the resource creation limit policy.</p>
    pub fn set_policy_period_in_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.policy_period_in_minutes = input;
        self
    }
    /// <p>The time span used in evaluating the resource creation limit policy.</p>
    pub fn get_policy_period_in_minutes(&self) -> &::std::option::Option<i32> {
        &self.policy_period_in_minutes
    }
    /// Consumes the builder and constructs a [`GameSessionCreationLimitPolicy`](crate::types::GameSessionCreationLimitPolicy).
    pub fn build(self) -> crate::types::GameSessionCreationLimitPolicy {
        crate::types::GameSessionCreationLimitPolicy {
            new_game_sessions_per_creator: self.new_game_sessions_per_creator,
            policy_period_in_minutes: self.policy_period_in_minutes,
        }
    }
}
