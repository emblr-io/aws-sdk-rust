// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Properties of a location, which can include its name, ARN (for custom locations), and ping beacon information.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LocationModel {
    /// <p>The location's name.</p>
    pub location_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a custom location resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>
    /// ::location/location-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912
    /// </region></code>.</p>
    pub location_arn: ::std::option::Option<::std::string::String>,
    /// <p>Information about the UDP ping beacon for this location.</p>
    pub ping_beacon: ::std::option::Option<crate::types::PingBeacon>,
}
impl LocationModel {
    /// <p>The location's name.</p>
    pub fn location_name(&self) -> ::std::option::Option<&str> {
        self.location_name.as_deref()
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a custom location resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>
    /// ::location/location-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912
    /// </region></code>.</p>
    pub fn location_arn(&self) -> ::std::option::Option<&str> {
        self.location_arn.as_deref()
    }
    /// <p>Information about the UDP ping beacon for this location.</p>
    pub fn ping_beacon(&self) -> ::std::option::Option<&crate::types::PingBeacon> {
        self.ping_beacon.as_ref()
    }
}
impl LocationModel {
    /// Creates a new builder-style object to manufacture [`LocationModel`](crate::types::LocationModel).
    pub fn builder() -> crate::types::builders::LocationModelBuilder {
        crate::types::builders::LocationModelBuilder::default()
    }
}

/// A builder for [`LocationModel`](crate::types::LocationModel).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LocationModelBuilder {
    pub(crate) location_name: ::std::option::Option<::std::string::String>,
    pub(crate) location_arn: ::std::option::Option<::std::string::String>,
    pub(crate) ping_beacon: ::std::option::Option<crate::types::PingBeacon>,
}
impl LocationModelBuilder {
    /// <p>The location's name.</p>
    pub fn location_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The location's name.</p>
    pub fn set_location_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location_name = input;
        self
    }
    /// <p>The location's name.</p>
    pub fn get_location_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.location_name
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a custom location resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>
    /// ::location/location-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912
    /// </region></code>.</p>
    pub fn location_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a custom location resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>
    /// ::location/location-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912
    /// </region></code>.</p>
    pub fn set_location_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to a custom location resource and uniquely identifies it. ARNs are unique across all Regions. Format is <code>arn:aws:gamelift:<region>
    /// ::location/location-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912
    /// </region></code>.</p>
    pub fn get_location_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.location_arn
    }
    /// <p>Information about the UDP ping beacon for this location.</p>
    pub fn ping_beacon(mut self, input: crate::types::PingBeacon) -> Self {
        self.ping_beacon = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the UDP ping beacon for this location.</p>
    pub fn set_ping_beacon(mut self, input: ::std::option::Option<crate::types::PingBeacon>) -> Self {
        self.ping_beacon = input;
        self
    }
    /// <p>Information about the UDP ping beacon for this location.</p>
    pub fn get_ping_beacon(&self) -> &::std::option::Option<crate::types::PingBeacon> {
        &self.ping_beacon
    }
    /// Consumes the builder and constructs a [`LocationModel`](crate::types::LocationModel).
    pub fn build(self) -> crate::types::LocationModel {
        crate::types::LocationModel {
            location_name: self.location_name,
            location_arn: self.location_arn,
            ping_beacon: self.ping_beacon,
        }
    }
}
