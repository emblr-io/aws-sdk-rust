// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A container's dependency on another container in the same container group. The dependency impacts how the dependent container is able to start or shut down based the status of the other container.</p>
/// <p>For example, <i>ContainerA</i> is configured with the following dependency: a <code>START</code> dependency on <i>ContainerB</i>. This means that <i>ContainerA</i> can't start until <i>ContainerB</i> has started. It also means that <i>ContainerA</i> must shut down before <i>ContainerB</i>.</p>
/// <p><b>Part of:</b> <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_GameServerContainerDefinition.html">GameServerContainerDefinition</a>, <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_GameServerContainerDefinitionInput.html">GameServerContainerDefinitionInput</a>, <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_SupportContainerDefinition.html">SupportContainerDefinition</a>, <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_SupportContainerDefinitionInput.html">SupportContainerDefinitionInput</a></p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContainerDependency {
    /// <p>A descriptive label for the container definition that this container depends on.</p>
    pub container_name: ::std::option::Option<::std::string::String>,
    /// <p>The condition that the dependency container must reach before the dependent container can start. Valid conditions include:</p>
    /// <ul>
    /// <li>
    /// <p>START - The dependency container must have started.</p></li>
    /// <li>
    /// <p>COMPLETE - The dependency container has run to completion (exits). Use this condition with nonessential containers, such as those that run a script and then exit. The dependency container can't be an essential container.</p></li>
    /// <li>
    /// <p>SUCCESS - The dependency container has run to completion and exited with a zero status. The dependency container can't be an essential container.</p></li>
    /// <li>
    /// <p>HEALTHY - The dependency container has passed its Docker health check. Use this condition with dependency containers that have health checks configured. This condition is confirmed at container group startup only.</p></li>
    /// </ul>
    pub condition: ::std::option::Option<crate::types::ContainerDependencyCondition>,
}
impl ContainerDependency {
    /// <p>A descriptive label for the container definition that this container depends on.</p>
    pub fn container_name(&self) -> ::std::option::Option<&str> {
        self.container_name.as_deref()
    }
    /// <p>The condition that the dependency container must reach before the dependent container can start. Valid conditions include:</p>
    /// <ul>
    /// <li>
    /// <p>START - The dependency container must have started.</p></li>
    /// <li>
    /// <p>COMPLETE - The dependency container has run to completion (exits). Use this condition with nonessential containers, such as those that run a script and then exit. The dependency container can't be an essential container.</p></li>
    /// <li>
    /// <p>SUCCESS - The dependency container has run to completion and exited with a zero status. The dependency container can't be an essential container.</p></li>
    /// <li>
    /// <p>HEALTHY - The dependency container has passed its Docker health check. Use this condition with dependency containers that have health checks configured. This condition is confirmed at container group startup only.</p></li>
    /// </ul>
    pub fn condition(&self) -> ::std::option::Option<&crate::types::ContainerDependencyCondition> {
        self.condition.as_ref()
    }
}
impl ContainerDependency {
    /// Creates a new builder-style object to manufacture [`ContainerDependency`](crate::types::ContainerDependency).
    pub fn builder() -> crate::types::builders::ContainerDependencyBuilder {
        crate::types::builders::ContainerDependencyBuilder::default()
    }
}

/// A builder for [`ContainerDependency`](crate::types::ContainerDependency).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContainerDependencyBuilder {
    pub(crate) container_name: ::std::option::Option<::std::string::String>,
    pub(crate) condition: ::std::option::Option<crate::types::ContainerDependencyCondition>,
}
impl ContainerDependencyBuilder {
    /// <p>A descriptive label for the container definition that this container depends on.</p>
    /// This field is required.
    pub fn container_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.container_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A descriptive label for the container definition that this container depends on.</p>
    pub fn set_container_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.container_name = input;
        self
    }
    /// <p>A descriptive label for the container definition that this container depends on.</p>
    pub fn get_container_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.container_name
    }
    /// <p>The condition that the dependency container must reach before the dependent container can start. Valid conditions include:</p>
    /// <ul>
    /// <li>
    /// <p>START - The dependency container must have started.</p></li>
    /// <li>
    /// <p>COMPLETE - The dependency container has run to completion (exits). Use this condition with nonessential containers, such as those that run a script and then exit. The dependency container can't be an essential container.</p></li>
    /// <li>
    /// <p>SUCCESS - The dependency container has run to completion and exited with a zero status. The dependency container can't be an essential container.</p></li>
    /// <li>
    /// <p>HEALTHY - The dependency container has passed its Docker health check. Use this condition with dependency containers that have health checks configured. This condition is confirmed at container group startup only.</p></li>
    /// </ul>
    /// This field is required.
    pub fn condition(mut self, input: crate::types::ContainerDependencyCondition) -> Self {
        self.condition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The condition that the dependency container must reach before the dependent container can start. Valid conditions include:</p>
    /// <ul>
    /// <li>
    /// <p>START - The dependency container must have started.</p></li>
    /// <li>
    /// <p>COMPLETE - The dependency container has run to completion (exits). Use this condition with nonessential containers, such as those that run a script and then exit. The dependency container can't be an essential container.</p></li>
    /// <li>
    /// <p>SUCCESS - The dependency container has run to completion and exited with a zero status. The dependency container can't be an essential container.</p></li>
    /// <li>
    /// <p>HEALTHY - The dependency container has passed its Docker health check. Use this condition with dependency containers that have health checks configured. This condition is confirmed at container group startup only.</p></li>
    /// </ul>
    pub fn set_condition(mut self, input: ::std::option::Option<crate::types::ContainerDependencyCondition>) -> Self {
        self.condition = input;
        self
    }
    /// <p>The condition that the dependency container must reach before the dependent container can start. Valid conditions include:</p>
    /// <ul>
    /// <li>
    /// <p>START - The dependency container must have started.</p></li>
    /// <li>
    /// <p>COMPLETE - The dependency container has run to completion (exits). Use this condition with nonessential containers, such as those that run a script and then exit. The dependency container can't be an essential container.</p></li>
    /// <li>
    /// <p>SUCCESS - The dependency container has run to completion and exited with a zero status. The dependency container can't be an essential container.</p></li>
    /// <li>
    /// <p>HEALTHY - The dependency container has passed its Docker health check. Use this condition with dependency containers that have health checks configured. This condition is confirmed at container group startup only.</p></li>
    /// </ul>
    pub fn get_condition(&self) -> &::std::option::Option<crate::types::ContainerDependencyCondition> {
        &self.condition
    }
    /// Consumes the builder and constructs a [`ContainerDependency`](crate::types::ContainerDependency).
    pub fn build(self) -> crate::types::ContainerDependency {
        crate::types::ContainerDependency {
            container_name: self.container_name,
            condition: self.condition,
        }
    }
}
