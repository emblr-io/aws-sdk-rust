// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A set of port ranges that can be opened on the container. A process that's running in the container can bind to a port number, making it accessible to inbound traffic when it's mapped to a container fleet's connection port.</p>
/// <p>Each container port range specifies a network protocol. When the configuration supports more than one protocol, we recommend that you use a different range for each protocol. If your ranges have overlapping port numbers, Amazon GameLift Servers maps a duplicated container port number to different connection ports. For example, if you include 1935 in port ranges for both TCP and UDP, it might result in the following mappings:</p>
/// <ul>
/// <li>
/// <p>container port 1935 (tcp) =&gt; connection port 2001</p></li>
/// <li>
/// <p>container port 1935 (udp) =&gt; connection port 2002</p></li>
/// </ul>
/// <p><b>Part of:</b> <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_GameServerContainerDefinition.html">GameServerContainerDefinition</a>, <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_GameServerContainerDefinitionInput.html">GameServerContainerDefinitionInput</a>, <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_SupportContainerDefinition.html">SupportContainerDefinition</a>, <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_SupportContainerDefinitionInput.html">SupportContainerDefinitionInput</a></p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContainerPortConfiguration {
    /// <p>A set of one or more container port number ranges. The ranges can't overlap if the ranges' network protocols are the same. Overlapping ranges with different protocols is allowed but not recommended.</p>
    pub container_port_ranges: ::std::option::Option<::std::vec::Vec<crate::types::ContainerPortRange>>,
}
impl ContainerPortConfiguration {
    /// <p>A set of one or more container port number ranges. The ranges can't overlap if the ranges' network protocols are the same. Overlapping ranges with different protocols is allowed but not recommended.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.container_port_ranges.is_none()`.
    pub fn container_port_ranges(&self) -> &[crate::types::ContainerPortRange] {
        self.container_port_ranges.as_deref().unwrap_or_default()
    }
}
impl ContainerPortConfiguration {
    /// Creates a new builder-style object to manufacture [`ContainerPortConfiguration`](crate::types::ContainerPortConfiguration).
    pub fn builder() -> crate::types::builders::ContainerPortConfigurationBuilder {
        crate::types::builders::ContainerPortConfigurationBuilder::default()
    }
}

/// A builder for [`ContainerPortConfiguration`](crate::types::ContainerPortConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContainerPortConfigurationBuilder {
    pub(crate) container_port_ranges: ::std::option::Option<::std::vec::Vec<crate::types::ContainerPortRange>>,
}
impl ContainerPortConfigurationBuilder {
    /// Appends an item to `container_port_ranges`.
    ///
    /// To override the contents of this collection use [`set_container_port_ranges`](Self::set_container_port_ranges).
    ///
    /// <p>A set of one or more container port number ranges. The ranges can't overlap if the ranges' network protocols are the same. Overlapping ranges with different protocols is allowed but not recommended.</p>
    pub fn container_port_ranges(mut self, input: crate::types::ContainerPortRange) -> Self {
        let mut v = self.container_port_ranges.unwrap_or_default();
        v.push(input);
        self.container_port_ranges = ::std::option::Option::Some(v);
        self
    }
    /// <p>A set of one or more container port number ranges. The ranges can't overlap if the ranges' network protocols are the same. Overlapping ranges with different protocols is allowed but not recommended.</p>
    pub fn set_container_port_ranges(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContainerPortRange>>) -> Self {
        self.container_port_ranges = input;
        self
    }
    /// <p>A set of one or more container port number ranges. The ranges can't overlap if the ranges' network protocols are the same. Overlapping ranges with different protocols is allowed but not recommended.</p>
    pub fn get_container_port_ranges(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContainerPortRange>> {
        &self.container_port_ranges
    }
    /// Consumes the builder and constructs a [`ContainerPortConfiguration`](crate::types::ContainerPortConfiguration).
    pub fn build(self) -> crate::types::ContainerPortConfiguration {
        crate::types::ContainerPortConfiguration {
            container_port_ranges: self.container_port_ranges,
        }
    }
}
