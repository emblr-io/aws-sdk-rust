// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a container fleet deployment with updates to the fleet.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FleetDeployment {
    /// <p>A unique identifier for the deployment.</p>
    pub deployment_id: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for the container fleet.</p>
    pub fleet_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the version of the game server container group definition that is being deployed.</p>
    pub game_server_binary_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the version of the game server container group definition to roll back to if deployment fails. Amazon GameLift Servers sets this property to the container group definition version that the fleet used when it was last active.</p>
    pub rollback_game_server_binary_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the version of the per-instance container group definition that is being deployed.</p>
    pub per_instance_binary_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the version of the per-instance container group definition to roll back to if deployment fails. Amazon GameLift Servers sets this property to the container group definition version that the fleet used when it was last active.</p>
    pub rollback_per_instance_binary_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of fleet deployment activity in the location.</p>
    /// <ul>
    /// <li>
    /// <p><code>IN_PROGRESS</code> -- The deployment is in progress.</p></li>
    /// <li>
    /// <p><code>IMPAIRED</code> -- The deployment failed and the fleet has some impaired containers.</p></li>
    /// <li>
    /// <p><code>COMPLETE</code> -- The deployment has completed successfully.</p></li>
    /// <li>
    /// <p><code>ROLLBACK_IN_PROGRESS</code> -- The deployment failed and rollback has been initiated.</p></li>
    /// <li>
    /// <p><code>ROLLBACK_IN_COMPLETE</code> -- The deployment failed and rollback has been completed.</p></li>
    /// <li>
    /// <p><code>CANCELLED</code> -- The deployment was cancelled.</p></li>
    /// </ul>
    pub deployment_status: ::std::option::Option<crate::types::DeploymentStatus>,
    /// <p>Instructions for how to deploy updates to a container fleet and what actions to take if the deployment fails.</p>
    pub deployment_configuration: ::std::option::Option<crate::types::DeploymentConfiguration>,
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl FleetDeployment {
    /// <p>A unique identifier for the deployment.</p>
    pub fn deployment_id(&self) -> ::std::option::Option<&str> {
        self.deployment_id.as_deref()
    }
    /// <p>A unique identifier for the container fleet.</p>
    pub fn fleet_id(&self) -> ::std::option::Option<&str> {
        self.fleet_id.as_deref()
    }
    /// <p>The unique identifier for the version of the game server container group definition that is being deployed.</p>
    pub fn game_server_binary_arn(&self) -> ::std::option::Option<&str> {
        self.game_server_binary_arn.as_deref()
    }
    /// <p>The unique identifier for the version of the game server container group definition to roll back to if deployment fails. Amazon GameLift Servers sets this property to the container group definition version that the fleet used when it was last active.</p>
    pub fn rollback_game_server_binary_arn(&self) -> ::std::option::Option<&str> {
        self.rollback_game_server_binary_arn.as_deref()
    }
    /// <p>The unique identifier for the version of the per-instance container group definition that is being deployed.</p>
    pub fn per_instance_binary_arn(&self) -> ::std::option::Option<&str> {
        self.per_instance_binary_arn.as_deref()
    }
    /// <p>The unique identifier for the version of the per-instance container group definition to roll back to if deployment fails. Amazon GameLift Servers sets this property to the container group definition version that the fleet used when it was last active.</p>
    pub fn rollback_per_instance_binary_arn(&self) -> ::std::option::Option<&str> {
        self.rollback_per_instance_binary_arn.as_deref()
    }
    /// <p>The status of fleet deployment activity in the location.</p>
    /// <ul>
    /// <li>
    /// <p><code>IN_PROGRESS</code> -- The deployment is in progress.</p></li>
    /// <li>
    /// <p><code>IMPAIRED</code> -- The deployment failed and the fleet has some impaired containers.</p></li>
    /// <li>
    /// <p><code>COMPLETE</code> -- The deployment has completed successfully.</p></li>
    /// <li>
    /// <p><code>ROLLBACK_IN_PROGRESS</code> -- The deployment failed and rollback has been initiated.</p></li>
    /// <li>
    /// <p><code>ROLLBACK_IN_COMPLETE</code> -- The deployment failed and rollback has been completed.</p></li>
    /// <li>
    /// <p><code>CANCELLED</code> -- The deployment was cancelled.</p></li>
    /// </ul>
    pub fn deployment_status(&self) -> ::std::option::Option<&crate::types::DeploymentStatus> {
        self.deployment_status.as_ref()
    }
    /// <p>Instructions for how to deploy updates to a container fleet and what actions to take if the deployment fails.</p>
    pub fn deployment_configuration(&self) -> ::std::option::Option<&crate::types::DeploymentConfiguration> {
        self.deployment_configuration.as_ref()
    }
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
}
impl FleetDeployment {
    /// Creates a new builder-style object to manufacture [`FleetDeployment`](crate::types::FleetDeployment).
    pub fn builder() -> crate::types::builders::FleetDeploymentBuilder {
        crate::types::builders::FleetDeploymentBuilder::default()
    }
}

/// A builder for [`FleetDeployment`](crate::types::FleetDeployment).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FleetDeploymentBuilder {
    pub(crate) deployment_id: ::std::option::Option<::std::string::String>,
    pub(crate) fleet_id: ::std::option::Option<::std::string::String>,
    pub(crate) game_server_binary_arn: ::std::option::Option<::std::string::String>,
    pub(crate) rollback_game_server_binary_arn: ::std::option::Option<::std::string::String>,
    pub(crate) per_instance_binary_arn: ::std::option::Option<::std::string::String>,
    pub(crate) rollback_per_instance_binary_arn: ::std::option::Option<::std::string::String>,
    pub(crate) deployment_status: ::std::option::Option<crate::types::DeploymentStatus>,
    pub(crate) deployment_configuration: ::std::option::Option<crate::types::DeploymentConfiguration>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl FleetDeploymentBuilder {
    /// <p>A unique identifier for the deployment.</p>
    pub fn deployment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.deployment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the deployment.</p>
    pub fn set_deployment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.deployment_id = input;
        self
    }
    /// <p>A unique identifier for the deployment.</p>
    pub fn get_deployment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.deployment_id
    }
    /// <p>A unique identifier for the container fleet.</p>
    pub fn fleet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fleet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the container fleet.</p>
    pub fn set_fleet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fleet_id = input;
        self
    }
    /// <p>A unique identifier for the container fleet.</p>
    pub fn get_fleet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.fleet_id
    }
    /// <p>The unique identifier for the version of the game server container group definition that is being deployed.</p>
    pub fn game_server_binary_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.game_server_binary_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the version of the game server container group definition that is being deployed.</p>
    pub fn set_game_server_binary_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.game_server_binary_arn = input;
        self
    }
    /// <p>The unique identifier for the version of the game server container group definition that is being deployed.</p>
    pub fn get_game_server_binary_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.game_server_binary_arn
    }
    /// <p>The unique identifier for the version of the game server container group definition to roll back to if deployment fails. Amazon GameLift Servers sets this property to the container group definition version that the fleet used when it was last active.</p>
    pub fn rollback_game_server_binary_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rollback_game_server_binary_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the version of the game server container group definition to roll back to if deployment fails. Amazon GameLift Servers sets this property to the container group definition version that the fleet used when it was last active.</p>
    pub fn set_rollback_game_server_binary_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rollback_game_server_binary_arn = input;
        self
    }
    /// <p>The unique identifier for the version of the game server container group definition to roll back to if deployment fails. Amazon GameLift Servers sets this property to the container group definition version that the fleet used when it was last active.</p>
    pub fn get_rollback_game_server_binary_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.rollback_game_server_binary_arn
    }
    /// <p>The unique identifier for the version of the per-instance container group definition that is being deployed.</p>
    pub fn per_instance_binary_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.per_instance_binary_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the version of the per-instance container group definition that is being deployed.</p>
    pub fn set_per_instance_binary_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.per_instance_binary_arn = input;
        self
    }
    /// <p>The unique identifier for the version of the per-instance container group definition that is being deployed.</p>
    pub fn get_per_instance_binary_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.per_instance_binary_arn
    }
    /// <p>The unique identifier for the version of the per-instance container group definition to roll back to if deployment fails. Amazon GameLift Servers sets this property to the container group definition version that the fleet used when it was last active.</p>
    pub fn rollback_per_instance_binary_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rollback_per_instance_binary_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the version of the per-instance container group definition to roll back to if deployment fails. Amazon GameLift Servers sets this property to the container group definition version that the fleet used when it was last active.</p>
    pub fn set_rollback_per_instance_binary_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rollback_per_instance_binary_arn = input;
        self
    }
    /// <p>The unique identifier for the version of the per-instance container group definition to roll back to if deployment fails. Amazon GameLift Servers sets this property to the container group definition version that the fleet used when it was last active.</p>
    pub fn get_rollback_per_instance_binary_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.rollback_per_instance_binary_arn
    }
    /// <p>The status of fleet deployment activity in the location.</p>
    /// <ul>
    /// <li>
    /// <p><code>IN_PROGRESS</code> -- The deployment is in progress.</p></li>
    /// <li>
    /// <p><code>IMPAIRED</code> -- The deployment failed and the fleet has some impaired containers.</p></li>
    /// <li>
    /// <p><code>COMPLETE</code> -- The deployment has completed successfully.</p></li>
    /// <li>
    /// <p><code>ROLLBACK_IN_PROGRESS</code> -- The deployment failed and rollback has been initiated.</p></li>
    /// <li>
    /// <p><code>ROLLBACK_IN_COMPLETE</code> -- The deployment failed and rollback has been completed.</p></li>
    /// <li>
    /// <p><code>CANCELLED</code> -- The deployment was cancelled.</p></li>
    /// </ul>
    pub fn deployment_status(mut self, input: crate::types::DeploymentStatus) -> Self {
        self.deployment_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of fleet deployment activity in the location.</p>
    /// <ul>
    /// <li>
    /// <p><code>IN_PROGRESS</code> -- The deployment is in progress.</p></li>
    /// <li>
    /// <p><code>IMPAIRED</code> -- The deployment failed and the fleet has some impaired containers.</p></li>
    /// <li>
    /// <p><code>COMPLETE</code> -- The deployment has completed successfully.</p></li>
    /// <li>
    /// <p><code>ROLLBACK_IN_PROGRESS</code> -- The deployment failed and rollback has been initiated.</p></li>
    /// <li>
    /// <p><code>ROLLBACK_IN_COMPLETE</code> -- The deployment failed and rollback has been completed.</p></li>
    /// <li>
    /// <p><code>CANCELLED</code> -- The deployment was cancelled.</p></li>
    /// </ul>
    pub fn set_deployment_status(mut self, input: ::std::option::Option<crate::types::DeploymentStatus>) -> Self {
        self.deployment_status = input;
        self
    }
    /// <p>The status of fleet deployment activity in the location.</p>
    /// <ul>
    /// <li>
    /// <p><code>IN_PROGRESS</code> -- The deployment is in progress.</p></li>
    /// <li>
    /// <p><code>IMPAIRED</code> -- The deployment failed and the fleet has some impaired containers.</p></li>
    /// <li>
    /// <p><code>COMPLETE</code> -- The deployment has completed successfully.</p></li>
    /// <li>
    /// <p><code>ROLLBACK_IN_PROGRESS</code> -- The deployment failed and rollback has been initiated.</p></li>
    /// <li>
    /// <p><code>ROLLBACK_IN_COMPLETE</code> -- The deployment failed and rollback has been completed.</p></li>
    /// <li>
    /// <p><code>CANCELLED</code> -- The deployment was cancelled.</p></li>
    /// </ul>
    pub fn get_deployment_status(&self) -> &::std::option::Option<crate::types::DeploymentStatus> {
        &self.deployment_status
    }
    /// <p>Instructions for how to deploy updates to a container fleet and what actions to take if the deployment fails.</p>
    pub fn deployment_configuration(mut self, input: crate::types::DeploymentConfiguration) -> Self {
        self.deployment_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Instructions for how to deploy updates to a container fleet and what actions to take if the deployment fails.</p>
    pub fn set_deployment_configuration(mut self, input: ::std::option::Option<crate::types::DeploymentConfiguration>) -> Self {
        self.deployment_configuration = input;
        self
    }
    /// <p>Instructions for how to deploy updates to a container fleet and what actions to take if the deployment fails.</p>
    pub fn get_deployment_configuration(&self) -> &::std::option::Option<crate::types::DeploymentConfiguration> {
        &self.deployment_configuration
    }
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// Consumes the builder and constructs a [`FleetDeployment`](crate::types::FleetDeployment).
    pub fn build(self) -> crate::types::FleetDeployment {
        crate::types::FleetDeployment {
            deployment_id: self.deployment_id,
            fleet_id: self.fleet_id,
            game_server_binary_arn: self.game_server_binary_arn,
            rollback_game_server_binary_arn: self.rollback_game_server_binary_arn,
            per_instance_binary_arn: self.per_instance_binary_arn,
            rollback_per_instance_binary_arn: self.rollback_per_instance_binary_arn,
            deployment_status: self.deployment_status,
            deployment_configuration: self.deployment_configuration,
            creation_time: self.creation_time,
        }
    }
}
