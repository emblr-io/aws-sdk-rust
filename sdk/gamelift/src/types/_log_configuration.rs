// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A method for collecting container logs for the fleet. Amazon GameLift Servers saves all standard output for each container in logs, including game session logs. You can select from the following methods:</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LogConfiguration {
    /// <p>The type of log collection to use for a fleet.</p>
    /// <ul>
    /// <li>
    /// <p><code>CLOUDWATCH</code> -- (default value) Send logs to an Amazon CloudWatch log group that you define. Each container emits a log stream, which is organized in the log group.</p></li>
    /// <li>
    /// <p><code>S3</code> -- Store logs in an Amazon S3 bucket that you define. This bucket must reside in the fleet's home Amazon Web Services Region.</p></li>
    /// <li>
    /// <p><code>NONE</code> -- Don't collect container logs.</p></li>
    /// </ul>
    pub log_destination: ::std::option::Option<crate::types::LogDestination>,
    /// <p>If log destination is <code>S3</code>, logs are sent to the specified Amazon S3 bucket name.</p>
    pub s3_bucket_name: ::std::option::Option<::std::string::String>,
    /// <p>If log destination is <code>CLOUDWATCH</code>, logs are sent to the specified log group in Amazon CloudWatch.</p>
    pub log_group_arn: ::std::option::Option<::std::string::String>,
}
impl LogConfiguration {
    /// <p>The type of log collection to use for a fleet.</p>
    /// <ul>
    /// <li>
    /// <p><code>CLOUDWATCH</code> -- (default value) Send logs to an Amazon CloudWatch log group that you define. Each container emits a log stream, which is organized in the log group.</p></li>
    /// <li>
    /// <p><code>S3</code> -- Store logs in an Amazon S3 bucket that you define. This bucket must reside in the fleet's home Amazon Web Services Region.</p></li>
    /// <li>
    /// <p><code>NONE</code> -- Don't collect container logs.</p></li>
    /// </ul>
    pub fn log_destination(&self) -> ::std::option::Option<&crate::types::LogDestination> {
        self.log_destination.as_ref()
    }
    /// <p>If log destination is <code>S3</code>, logs are sent to the specified Amazon S3 bucket name.</p>
    pub fn s3_bucket_name(&self) -> ::std::option::Option<&str> {
        self.s3_bucket_name.as_deref()
    }
    /// <p>If log destination is <code>CLOUDWATCH</code>, logs are sent to the specified log group in Amazon CloudWatch.</p>
    pub fn log_group_arn(&self) -> ::std::option::Option<&str> {
        self.log_group_arn.as_deref()
    }
}
impl LogConfiguration {
    /// Creates a new builder-style object to manufacture [`LogConfiguration`](crate::types::LogConfiguration).
    pub fn builder() -> crate::types::builders::LogConfigurationBuilder {
        crate::types::builders::LogConfigurationBuilder::default()
    }
}

/// A builder for [`LogConfiguration`](crate::types::LogConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LogConfigurationBuilder {
    pub(crate) log_destination: ::std::option::Option<crate::types::LogDestination>,
    pub(crate) s3_bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) log_group_arn: ::std::option::Option<::std::string::String>,
}
impl LogConfigurationBuilder {
    /// <p>The type of log collection to use for a fleet.</p>
    /// <ul>
    /// <li>
    /// <p><code>CLOUDWATCH</code> -- (default value) Send logs to an Amazon CloudWatch log group that you define. Each container emits a log stream, which is organized in the log group.</p></li>
    /// <li>
    /// <p><code>S3</code> -- Store logs in an Amazon S3 bucket that you define. This bucket must reside in the fleet's home Amazon Web Services Region.</p></li>
    /// <li>
    /// <p><code>NONE</code> -- Don't collect container logs.</p></li>
    /// </ul>
    pub fn log_destination(mut self, input: crate::types::LogDestination) -> Self {
        self.log_destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of log collection to use for a fleet.</p>
    /// <ul>
    /// <li>
    /// <p><code>CLOUDWATCH</code> -- (default value) Send logs to an Amazon CloudWatch log group that you define. Each container emits a log stream, which is organized in the log group.</p></li>
    /// <li>
    /// <p><code>S3</code> -- Store logs in an Amazon S3 bucket that you define. This bucket must reside in the fleet's home Amazon Web Services Region.</p></li>
    /// <li>
    /// <p><code>NONE</code> -- Don't collect container logs.</p></li>
    /// </ul>
    pub fn set_log_destination(mut self, input: ::std::option::Option<crate::types::LogDestination>) -> Self {
        self.log_destination = input;
        self
    }
    /// <p>The type of log collection to use for a fleet.</p>
    /// <ul>
    /// <li>
    /// <p><code>CLOUDWATCH</code> -- (default value) Send logs to an Amazon CloudWatch log group that you define. Each container emits a log stream, which is organized in the log group.</p></li>
    /// <li>
    /// <p><code>S3</code> -- Store logs in an Amazon S3 bucket that you define. This bucket must reside in the fleet's home Amazon Web Services Region.</p></li>
    /// <li>
    /// <p><code>NONE</code> -- Don't collect container logs.</p></li>
    /// </ul>
    pub fn get_log_destination(&self) -> &::std::option::Option<crate::types::LogDestination> {
        &self.log_destination
    }
    /// <p>If log destination is <code>S3</code>, logs are sent to the specified Amazon S3 bucket name.</p>
    pub fn s3_bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If log destination is <code>S3</code>, logs are sent to the specified Amazon S3 bucket name.</p>
    pub fn set_s3_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_bucket_name = input;
        self
    }
    /// <p>If log destination is <code>S3</code>, logs are sent to the specified Amazon S3 bucket name.</p>
    pub fn get_s3_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_bucket_name
    }
    /// <p>If log destination is <code>CLOUDWATCH</code>, logs are sent to the specified log group in Amazon CloudWatch.</p>
    pub fn log_group_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_group_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If log destination is <code>CLOUDWATCH</code>, logs are sent to the specified log group in Amazon CloudWatch.</p>
    pub fn set_log_group_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_group_arn = input;
        self
    }
    /// <p>If log destination is <code>CLOUDWATCH</code>, logs are sent to the specified log group in Amazon CloudWatch.</p>
    pub fn get_log_group_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_group_arn
    }
    /// Consumes the builder and constructs a [`LogConfiguration`](crate::types::LogConfiguration).
    pub fn build(self) -> crate::types::LogConfiguration {
        crate::types::LogConfiguration {
            log_destination: self.log_destination,
            s3_bucket_name: self.s3_bucket_name,
            log_group_arn: self.log_group_arn,
        }
    }
}
