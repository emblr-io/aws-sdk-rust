// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration parameters for where in an S3 bucket to place the harvested content.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3DestinationConfig {
    /// <p>The name of an S3 bucket within which harvested content will be exported.</p>
    pub bucket_name: ::std::string::String,
    /// <p>The path within the specified S3 bucket where the harvested content will be placed.</p>
    pub destination_path: ::std::string::String,
}
impl S3DestinationConfig {
    /// <p>The name of an S3 bucket within which harvested content will be exported.</p>
    pub fn bucket_name(&self) -> &str {
        use std::ops::Deref;
        self.bucket_name.deref()
    }
    /// <p>The path within the specified S3 bucket where the harvested content will be placed.</p>
    pub fn destination_path(&self) -> &str {
        use std::ops::Deref;
        self.destination_path.deref()
    }
}
impl S3DestinationConfig {
    /// Creates a new builder-style object to manufacture [`S3DestinationConfig`](crate::types::S3DestinationConfig).
    pub fn builder() -> crate::types::builders::S3DestinationConfigBuilder {
        crate::types::builders::S3DestinationConfigBuilder::default()
    }
}

/// A builder for [`S3DestinationConfig`](crate::types::S3DestinationConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct S3DestinationConfigBuilder {
    pub(crate) bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) destination_path: ::std::option::Option<::std::string::String>,
}
impl S3DestinationConfigBuilder {
    /// <p>The name of an S3 bucket within which harvested content will be exported.</p>
    /// This field is required.
    pub fn bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of an S3 bucket within which harvested content will be exported.</p>
    pub fn set_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_name = input;
        self
    }
    /// <p>The name of an S3 bucket within which harvested content will be exported.</p>
    pub fn get_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_name
    }
    /// <p>The path within the specified S3 bucket where the harvested content will be placed.</p>
    /// This field is required.
    pub fn destination_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path within the specified S3 bucket where the harvested content will be placed.</p>
    pub fn set_destination_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_path = input;
        self
    }
    /// <p>The path within the specified S3 bucket where the harvested content will be placed.</p>
    pub fn get_destination_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_path
    }
    /// Consumes the builder and constructs a [`S3DestinationConfig`](crate::types::S3DestinationConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`bucket_name`](crate::types::builders::S3DestinationConfigBuilder::bucket_name)
    /// - [`destination_path`](crate::types::builders::S3DestinationConfigBuilder::destination_path)
    pub fn build(self) -> ::std::result::Result<crate::types::S3DestinationConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::S3DestinationConfig {
            bucket_name: self.bucket_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bucket_name",
                    "bucket_name was not specified but it is required when building S3DestinationConfig",
                )
            })?,
            destination_path: self.destination_path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "destination_path",
                    "destination_path was not specified but it is required when building S3DestinationConfig",
                )
            })?,
        })
    }
}
