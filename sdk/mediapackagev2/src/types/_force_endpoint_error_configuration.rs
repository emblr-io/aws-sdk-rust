// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The failover settings for the endpoint.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ForceEndpointErrorConfiguration {
    /// <p>The failover conditions for the endpoint. The options are:</p>
    /// <ul>
    /// <li>
    /// <p><code>STALE_MANIFEST</code> - The manifest stalled and there are no new segments or parts.</p></li>
    /// <li>
    /// <p><code>INCOMPLETE_MANIFEST</code> - There is a gap in the manifest.</p></li>
    /// <li>
    /// <p><code>MISSING_DRM_KEY</code> - Key rotation is enabled but we're unable to fetch the key for the current key period.</p></li>
    /// <li>
    /// <p><code>SLATE_INPUT</code> - The segments which contain slate content are considered to be missing content.</p></li>
    /// </ul>
    pub endpoint_error_conditions: ::std::option::Option<::std::vec::Vec<crate::types::EndpointErrorCondition>>,
}
impl ForceEndpointErrorConfiguration {
    /// <p>The failover conditions for the endpoint. The options are:</p>
    /// <ul>
    /// <li>
    /// <p><code>STALE_MANIFEST</code> - The manifest stalled and there are no new segments or parts.</p></li>
    /// <li>
    /// <p><code>INCOMPLETE_MANIFEST</code> - There is a gap in the manifest.</p></li>
    /// <li>
    /// <p><code>MISSING_DRM_KEY</code> - Key rotation is enabled but we're unable to fetch the key for the current key period.</p></li>
    /// <li>
    /// <p><code>SLATE_INPUT</code> - The segments which contain slate content are considered to be missing content.</p></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.endpoint_error_conditions.is_none()`.
    pub fn endpoint_error_conditions(&self) -> &[crate::types::EndpointErrorCondition] {
        self.endpoint_error_conditions.as_deref().unwrap_or_default()
    }
}
impl ForceEndpointErrorConfiguration {
    /// Creates a new builder-style object to manufacture [`ForceEndpointErrorConfiguration`](crate::types::ForceEndpointErrorConfiguration).
    pub fn builder() -> crate::types::builders::ForceEndpointErrorConfigurationBuilder {
        crate::types::builders::ForceEndpointErrorConfigurationBuilder::default()
    }
}

/// A builder for [`ForceEndpointErrorConfiguration`](crate::types::ForceEndpointErrorConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ForceEndpointErrorConfigurationBuilder {
    pub(crate) endpoint_error_conditions: ::std::option::Option<::std::vec::Vec<crate::types::EndpointErrorCondition>>,
}
impl ForceEndpointErrorConfigurationBuilder {
    /// Appends an item to `endpoint_error_conditions`.
    ///
    /// To override the contents of this collection use [`set_endpoint_error_conditions`](Self::set_endpoint_error_conditions).
    ///
    /// <p>The failover conditions for the endpoint. The options are:</p>
    /// <ul>
    /// <li>
    /// <p><code>STALE_MANIFEST</code> - The manifest stalled and there are no new segments or parts.</p></li>
    /// <li>
    /// <p><code>INCOMPLETE_MANIFEST</code> - There is a gap in the manifest.</p></li>
    /// <li>
    /// <p><code>MISSING_DRM_KEY</code> - Key rotation is enabled but we're unable to fetch the key for the current key period.</p></li>
    /// <li>
    /// <p><code>SLATE_INPUT</code> - The segments which contain slate content are considered to be missing content.</p></li>
    /// </ul>
    pub fn endpoint_error_conditions(mut self, input: crate::types::EndpointErrorCondition) -> Self {
        let mut v = self.endpoint_error_conditions.unwrap_or_default();
        v.push(input);
        self.endpoint_error_conditions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The failover conditions for the endpoint. The options are:</p>
    /// <ul>
    /// <li>
    /// <p><code>STALE_MANIFEST</code> - The manifest stalled and there are no new segments or parts.</p></li>
    /// <li>
    /// <p><code>INCOMPLETE_MANIFEST</code> - There is a gap in the manifest.</p></li>
    /// <li>
    /// <p><code>MISSING_DRM_KEY</code> - Key rotation is enabled but we're unable to fetch the key for the current key period.</p></li>
    /// <li>
    /// <p><code>SLATE_INPUT</code> - The segments which contain slate content are considered to be missing content.</p></li>
    /// </ul>
    pub fn set_endpoint_error_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EndpointErrorCondition>>) -> Self {
        self.endpoint_error_conditions = input;
        self
    }
    /// <p>The failover conditions for the endpoint. The options are:</p>
    /// <ul>
    /// <li>
    /// <p><code>STALE_MANIFEST</code> - The manifest stalled and there are no new segments or parts.</p></li>
    /// <li>
    /// <p><code>INCOMPLETE_MANIFEST</code> - There is a gap in the manifest.</p></li>
    /// <li>
    /// <p><code>MISSING_DRM_KEY</code> - Key rotation is enabled but we're unable to fetch the key for the current key period.</p></li>
    /// <li>
    /// <p><code>SLATE_INPUT</code> - The segments which contain slate content are considered to be missing content.</p></li>
    /// </ul>
    pub fn get_endpoint_error_conditions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EndpointErrorCondition>> {
        &self.endpoint_error_conditions
    }
    /// Consumes the builder and constructs a [`ForceEndpointErrorConfiguration`](crate::types::ForceEndpointErrorConfiguration).
    pub fn build(self) -> crate::types::ForceEndpointErrorConfiguration {
        crate::types::ForceEndpointErrorConfiguration {
            endpoint_error_conditions: self.endpoint_error_conditions,
        }
    }
}
