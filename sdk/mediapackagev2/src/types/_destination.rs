// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for the destination where the harvested content will be exported.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Destination {
    /// <p>The configuration for exporting harvested content to an S3 bucket. This includes details such as the bucket name and destination path within the bucket.</p>
    pub s3_destination: ::std::option::Option<crate::types::S3DestinationConfig>,
}
impl Destination {
    /// <p>The configuration for exporting harvested content to an S3 bucket. This includes details such as the bucket name and destination path within the bucket.</p>
    pub fn s3_destination(&self) -> ::std::option::Option<&crate::types::S3DestinationConfig> {
        self.s3_destination.as_ref()
    }
}
impl Destination {
    /// Creates a new builder-style object to manufacture [`Destination`](crate::types::Destination).
    pub fn builder() -> crate::types::builders::DestinationBuilder {
        crate::types::builders::DestinationBuilder::default()
    }
}

/// A builder for [`Destination`](crate::types::Destination).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DestinationBuilder {
    pub(crate) s3_destination: ::std::option::Option<crate::types::S3DestinationConfig>,
}
impl DestinationBuilder {
    /// <p>The configuration for exporting harvested content to an S3 bucket. This includes details such as the bucket name and destination path within the bucket.</p>
    /// This field is required.
    pub fn s3_destination(mut self, input: crate::types::S3DestinationConfig) -> Self {
        self.s3_destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for exporting harvested content to an S3 bucket. This includes details such as the bucket name and destination path within the bucket.</p>
    pub fn set_s3_destination(mut self, input: ::std::option::Option<crate::types::S3DestinationConfig>) -> Self {
        self.s3_destination = input;
        self
    }
    /// <p>The configuration for exporting harvested content to an S3 bucket. This includes details such as the bucket name and destination path within the bucket.</p>
    pub fn get_s3_destination(&self) -> &::std::option::Option<crate::types::S3DestinationConfig> {
        &self.s3_destination
    }
    /// Consumes the builder and constructs a [`Destination`](crate::types::Destination).
    pub fn build(self) -> crate::types::Destination {
        crate::types::Destination {
            s3_destination: self.s3_destination,
        }
    }
}
