// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration details for a Microsoft Smooth Streaming (MSS) manifest associated with an origin endpoint. This includes all the settings and properties that define how the MSS content is packaged and delivered.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetMssManifestConfiguration {
    /// <p>The name of the MSS manifest. This name is appended to the origin endpoint URL to create the unique path for accessing this specific MSS manifest.</p>
    pub manifest_name: ::std::string::String,
    /// <p>The complete URL for accessing the MSS manifest. Client players use this URL to retrieve the manifest and begin streaming the Microsoft Smooth Streaming content.</p>
    pub url: ::std::string::String,
    /// <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest.</p>
    pub filter_configuration: ::std::option::Option<crate::types::FilterConfiguration>,
    /// <p>The duration (in seconds) of the manifest window. This represents the total amount of content available in the manifest at any given time.</p>
    pub manifest_window_seconds: ::std::option::Option<i32>,
    /// <p>The layout format of the MSS manifest, which determines how the manifest is structured for client compatibility.</p>
    pub manifest_layout: ::std::option::Option<crate::types::MssManifestLayout>,
}
impl GetMssManifestConfiguration {
    /// <p>The name of the MSS manifest. This name is appended to the origin endpoint URL to create the unique path for accessing this specific MSS manifest.</p>
    pub fn manifest_name(&self) -> &str {
        use std::ops::Deref;
        self.manifest_name.deref()
    }
    /// <p>The complete URL for accessing the MSS manifest. Client players use this URL to retrieve the manifest and begin streaming the Microsoft Smooth Streaming content.</p>
    pub fn url(&self) -> &str {
        use std::ops::Deref;
        self.url.deref()
    }
    /// <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest.</p>
    pub fn filter_configuration(&self) -> ::std::option::Option<&crate::types::FilterConfiguration> {
        self.filter_configuration.as_ref()
    }
    /// <p>The duration (in seconds) of the manifest window. This represents the total amount of content available in the manifest at any given time.</p>
    pub fn manifest_window_seconds(&self) -> ::std::option::Option<i32> {
        self.manifest_window_seconds
    }
    /// <p>The layout format of the MSS manifest, which determines how the manifest is structured for client compatibility.</p>
    pub fn manifest_layout(&self) -> ::std::option::Option<&crate::types::MssManifestLayout> {
        self.manifest_layout.as_ref()
    }
}
impl GetMssManifestConfiguration {
    /// Creates a new builder-style object to manufacture [`GetMssManifestConfiguration`](crate::types::GetMssManifestConfiguration).
    pub fn builder() -> crate::types::builders::GetMssManifestConfigurationBuilder {
        crate::types::builders::GetMssManifestConfigurationBuilder::default()
    }
}

/// A builder for [`GetMssManifestConfiguration`](crate::types::GetMssManifestConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetMssManifestConfigurationBuilder {
    pub(crate) manifest_name: ::std::option::Option<::std::string::String>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) filter_configuration: ::std::option::Option<crate::types::FilterConfiguration>,
    pub(crate) manifest_window_seconds: ::std::option::Option<i32>,
    pub(crate) manifest_layout: ::std::option::Option<crate::types::MssManifestLayout>,
}
impl GetMssManifestConfigurationBuilder {
    /// <p>The name of the MSS manifest. This name is appended to the origin endpoint URL to create the unique path for accessing this specific MSS manifest.</p>
    /// This field is required.
    pub fn manifest_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.manifest_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the MSS manifest. This name is appended to the origin endpoint URL to create the unique path for accessing this specific MSS manifest.</p>
    pub fn set_manifest_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.manifest_name = input;
        self
    }
    /// <p>The name of the MSS manifest. This name is appended to the origin endpoint URL to create the unique path for accessing this specific MSS manifest.</p>
    pub fn get_manifest_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.manifest_name
    }
    /// <p>The complete URL for accessing the MSS manifest. Client players use this URL to retrieve the manifest and begin streaming the Microsoft Smooth Streaming content.</p>
    /// This field is required.
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The complete URL for accessing the MSS manifest. Client players use this URL to retrieve the manifest and begin streaming the Microsoft Smooth Streaming content.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The complete URL for accessing the MSS manifest. Client players use this URL to retrieve the manifest and begin streaming the Microsoft Smooth Streaming content.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest.</p>
    pub fn filter_configuration(mut self, input: crate::types::FilterConfiguration) -> Self {
        self.filter_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest.</p>
    pub fn set_filter_configuration(mut self, input: ::std::option::Option<crate::types::FilterConfiguration>) -> Self {
        self.filter_configuration = input;
        self
    }
    /// <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest.</p>
    pub fn get_filter_configuration(&self) -> &::std::option::Option<crate::types::FilterConfiguration> {
        &self.filter_configuration
    }
    /// <p>The duration (in seconds) of the manifest window. This represents the total amount of content available in the manifest at any given time.</p>
    pub fn manifest_window_seconds(mut self, input: i32) -> Self {
        self.manifest_window_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The duration (in seconds) of the manifest window. This represents the total amount of content available in the manifest at any given time.</p>
    pub fn set_manifest_window_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.manifest_window_seconds = input;
        self
    }
    /// <p>The duration (in seconds) of the manifest window. This represents the total amount of content available in the manifest at any given time.</p>
    pub fn get_manifest_window_seconds(&self) -> &::std::option::Option<i32> {
        &self.manifest_window_seconds
    }
    /// <p>The layout format of the MSS manifest, which determines how the manifest is structured for client compatibility.</p>
    pub fn manifest_layout(mut self, input: crate::types::MssManifestLayout) -> Self {
        self.manifest_layout = ::std::option::Option::Some(input);
        self
    }
    /// <p>The layout format of the MSS manifest, which determines how the manifest is structured for client compatibility.</p>
    pub fn set_manifest_layout(mut self, input: ::std::option::Option<crate::types::MssManifestLayout>) -> Self {
        self.manifest_layout = input;
        self
    }
    /// <p>The layout format of the MSS manifest, which determines how the manifest is structured for client compatibility.</p>
    pub fn get_manifest_layout(&self) -> &::std::option::Option<crate::types::MssManifestLayout> {
        &self.manifest_layout
    }
    /// Consumes the builder and constructs a [`GetMssManifestConfiguration`](crate::types::GetMssManifestConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`manifest_name`](crate::types::builders::GetMssManifestConfigurationBuilder::manifest_name)
    /// - [`url`](crate::types::builders::GetMssManifestConfigurationBuilder::url)
    pub fn build(self) -> ::std::result::Result<crate::types::GetMssManifestConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GetMssManifestConfiguration {
            manifest_name: self.manifest_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "manifest_name",
                    "manifest_name was not specified but it is required when building GetMssManifestConfiguration",
                )
            })?,
            url: self.url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "url",
                    "url was not specified but it is required when building GetMssManifestConfiguration",
                )
            })?,
            filter_configuration: self.filter_configuration,
            manifest_window_seconds: self.manifest_window_seconds,
            manifest_layout: self.manifest_layout,
        })
    }
}
