// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A collection of harvested manifests of different types.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HarvestedManifests {
    /// <p>A list of harvested HLS manifests.</p>
    pub hls_manifests: ::std::option::Option<::std::vec::Vec<crate::types::HarvestedHlsManifest>>,
    /// <p>A list of harvested DASH manifests.</p>
    pub dash_manifests: ::std::option::Option<::std::vec::Vec<crate::types::HarvestedDashManifest>>,
    /// <p>A list of harvested Low-Latency HLS manifests.</p>
    pub low_latency_hls_manifests: ::std::option::Option<::std::vec::Vec<crate::types::HarvestedLowLatencyHlsManifest>>,
}
impl HarvestedManifests {
    /// <p>A list of harvested HLS manifests.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.hls_manifests.is_none()`.
    pub fn hls_manifests(&self) -> &[crate::types::HarvestedHlsManifest] {
        self.hls_manifests.as_deref().unwrap_or_default()
    }
    /// <p>A list of harvested DASH manifests.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dash_manifests.is_none()`.
    pub fn dash_manifests(&self) -> &[crate::types::HarvestedDashManifest] {
        self.dash_manifests.as_deref().unwrap_or_default()
    }
    /// <p>A list of harvested Low-Latency HLS manifests.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.low_latency_hls_manifests.is_none()`.
    pub fn low_latency_hls_manifests(&self) -> &[crate::types::HarvestedLowLatencyHlsManifest] {
        self.low_latency_hls_manifests.as_deref().unwrap_or_default()
    }
}
impl HarvestedManifests {
    /// Creates a new builder-style object to manufacture [`HarvestedManifests`](crate::types::HarvestedManifests).
    pub fn builder() -> crate::types::builders::HarvestedManifestsBuilder {
        crate::types::builders::HarvestedManifestsBuilder::default()
    }
}

/// A builder for [`HarvestedManifests`](crate::types::HarvestedManifests).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct HarvestedManifestsBuilder {
    pub(crate) hls_manifests: ::std::option::Option<::std::vec::Vec<crate::types::HarvestedHlsManifest>>,
    pub(crate) dash_manifests: ::std::option::Option<::std::vec::Vec<crate::types::HarvestedDashManifest>>,
    pub(crate) low_latency_hls_manifests: ::std::option::Option<::std::vec::Vec<crate::types::HarvestedLowLatencyHlsManifest>>,
}
impl HarvestedManifestsBuilder {
    /// Appends an item to `hls_manifests`.
    ///
    /// To override the contents of this collection use [`set_hls_manifests`](Self::set_hls_manifests).
    ///
    /// <p>A list of harvested HLS manifests.</p>
    pub fn hls_manifests(mut self, input: crate::types::HarvestedHlsManifest) -> Self {
        let mut v = self.hls_manifests.unwrap_or_default();
        v.push(input);
        self.hls_manifests = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of harvested HLS manifests.</p>
    pub fn set_hls_manifests(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::HarvestedHlsManifest>>) -> Self {
        self.hls_manifests = input;
        self
    }
    /// <p>A list of harvested HLS manifests.</p>
    pub fn get_hls_manifests(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::HarvestedHlsManifest>> {
        &self.hls_manifests
    }
    /// Appends an item to `dash_manifests`.
    ///
    /// To override the contents of this collection use [`set_dash_manifests`](Self::set_dash_manifests).
    ///
    /// <p>A list of harvested DASH manifests.</p>
    pub fn dash_manifests(mut self, input: crate::types::HarvestedDashManifest) -> Self {
        let mut v = self.dash_manifests.unwrap_or_default();
        v.push(input);
        self.dash_manifests = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of harvested DASH manifests.</p>
    pub fn set_dash_manifests(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::HarvestedDashManifest>>) -> Self {
        self.dash_manifests = input;
        self
    }
    /// <p>A list of harvested DASH manifests.</p>
    pub fn get_dash_manifests(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::HarvestedDashManifest>> {
        &self.dash_manifests
    }
    /// Appends an item to `low_latency_hls_manifests`.
    ///
    /// To override the contents of this collection use [`set_low_latency_hls_manifests`](Self::set_low_latency_hls_manifests).
    ///
    /// <p>A list of harvested Low-Latency HLS manifests.</p>
    pub fn low_latency_hls_manifests(mut self, input: crate::types::HarvestedLowLatencyHlsManifest) -> Self {
        let mut v = self.low_latency_hls_manifests.unwrap_or_default();
        v.push(input);
        self.low_latency_hls_manifests = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of harvested Low-Latency HLS manifests.</p>
    pub fn set_low_latency_hls_manifests(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::HarvestedLowLatencyHlsManifest>>,
    ) -> Self {
        self.low_latency_hls_manifests = input;
        self
    }
    /// <p>A list of harvested Low-Latency HLS manifests.</p>
    pub fn get_low_latency_hls_manifests(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::HarvestedLowLatencyHlsManifest>> {
        &self.low_latency_hls_manifests
    }
    /// Consumes the builder and constructs a [`HarvestedManifests`](crate::types::HarvestedManifests).
    pub fn build(self) -> crate::types::HarvestedManifests {
        crate::types::HarvestedManifests {
            hls_manifests: self.hls_manifests,
            dash_manifests: self.dash_manifests,
            low_latency_hls_manifests: self.low_latency_hls_manifests,
        }
    }
}
