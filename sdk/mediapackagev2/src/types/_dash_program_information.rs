// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the content that you want MediaPackage to pass through in the manifest to the playback device.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DashProgramInformation {
    /// <p>The title for the manifest.</p>
    pub title: ::std::option::Option<::std::string::String>,
    /// <p>Information about the content provider.</p>
    pub source: ::std::option::Option<::std::string::String>,
    /// <p>A copyright statement about the content.</p>
    pub copyright: ::std::option::Option<::std::string::String>,
    /// <p>The language code for this manifest.</p>
    pub language_code: ::std::option::Option<::std::string::String>,
    /// <p>An absolute URL that contains more information about this content.</p>
    pub more_information_url: ::std::option::Option<::std::string::String>,
}
impl DashProgramInformation {
    /// <p>The title for the manifest.</p>
    pub fn title(&self) -> ::std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>Information about the content provider.</p>
    pub fn source(&self) -> ::std::option::Option<&str> {
        self.source.as_deref()
    }
    /// <p>A copyright statement about the content.</p>
    pub fn copyright(&self) -> ::std::option::Option<&str> {
        self.copyright.as_deref()
    }
    /// <p>The language code for this manifest.</p>
    pub fn language_code(&self) -> ::std::option::Option<&str> {
        self.language_code.as_deref()
    }
    /// <p>An absolute URL that contains more information about this content.</p>
    pub fn more_information_url(&self) -> ::std::option::Option<&str> {
        self.more_information_url.as_deref()
    }
}
impl DashProgramInformation {
    /// Creates a new builder-style object to manufacture [`DashProgramInformation`](crate::types::DashProgramInformation).
    pub fn builder() -> crate::types::builders::DashProgramInformationBuilder {
        crate::types::builders::DashProgramInformationBuilder::default()
    }
}

/// A builder for [`DashProgramInformation`](crate::types::DashProgramInformation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DashProgramInformationBuilder {
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) source: ::std::option::Option<::std::string::String>,
    pub(crate) copyright: ::std::option::Option<::std::string::String>,
    pub(crate) language_code: ::std::option::Option<::std::string::String>,
    pub(crate) more_information_url: ::std::option::Option<::std::string::String>,
}
impl DashProgramInformationBuilder {
    /// <p>The title for the manifest.</p>
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title for the manifest.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title for the manifest.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>Information about the content provider.</p>
    pub fn source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Information about the content provider.</p>
    pub fn set_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// <p>Information about the content provider.</p>
    pub fn get_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.source
    }
    /// <p>A copyright statement about the content.</p>
    pub fn copyright(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.copyright = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A copyright statement about the content.</p>
    pub fn set_copyright(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.copyright = input;
        self
    }
    /// <p>A copyright statement about the content.</p>
    pub fn get_copyright(&self) -> &::std::option::Option<::std::string::String> {
        &self.copyright
    }
    /// <p>The language code for this manifest.</p>
    pub fn language_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.language_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The language code for this manifest.</p>
    pub fn set_language_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.language_code = input;
        self
    }
    /// <p>The language code for this manifest.</p>
    pub fn get_language_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.language_code
    }
    /// <p>An absolute URL that contains more information about this content.</p>
    pub fn more_information_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.more_information_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An absolute URL that contains more information about this content.</p>
    pub fn set_more_information_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.more_information_url = input;
        self
    }
    /// <p>An absolute URL that contains more information about this content.</p>
    pub fn get_more_information_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.more_information_url
    }
    /// Consumes the builder and constructs a [`DashProgramInformation`](crate::types::DashProgramInformation).
    pub fn build(self) -> crate::types::DashProgramInformation {
        crate::types::DashProgramInformation {
            title: self.title,
            source: self.source,
            copyright: self.copyright,
            language_code: self.language_code,
            more_information_url: self.more_information_url,
        }
    }
}
