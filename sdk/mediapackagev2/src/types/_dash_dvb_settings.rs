// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>For endpoints that use the DVB-DASH profile only. The font download and error reporting information that you want MediaPackage to pass through to the manifest.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DashDvbSettings {
    /// <p>Subtitle font settings.</p>
    pub font_download: ::std::option::Option<crate::types::DashDvbFontDownload>,
    /// <p>Playback device error reporting settings.</p>
    pub error_metrics: ::std::option::Option<::std::vec::Vec<crate::types::DashDvbMetricsReporting>>,
}
impl DashDvbSettings {
    /// <p>Subtitle font settings.</p>
    pub fn font_download(&self) -> ::std::option::Option<&crate::types::DashDvbFontDownload> {
        self.font_download.as_ref()
    }
    /// <p>Playback device error reporting settings.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.error_metrics.is_none()`.
    pub fn error_metrics(&self) -> &[crate::types::DashDvbMetricsReporting] {
        self.error_metrics.as_deref().unwrap_or_default()
    }
}
impl DashDvbSettings {
    /// Creates a new builder-style object to manufacture [`DashDvbSettings`](crate::types::DashDvbSettings).
    pub fn builder() -> crate::types::builders::DashDvbSettingsBuilder {
        crate::types::builders::DashDvbSettingsBuilder::default()
    }
}

/// A builder for [`DashDvbSettings`](crate::types::DashDvbSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DashDvbSettingsBuilder {
    pub(crate) font_download: ::std::option::Option<crate::types::DashDvbFontDownload>,
    pub(crate) error_metrics: ::std::option::Option<::std::vec::Vec<crate::types::DashDvbMetricsReporting>>,
}
impl DashDvbSettingsBuilder {
    /// <p>Subtitle font settings.</p>
    pub fn font_download(mut self, input: crate::types::DashDvbFontDownload) -> Self {
        self.font_download = ::std::option::Option::Some(input);
        self
    }
    /// <p>Subtitle font settings.</p>
    pub fn set_font_download(mut self, input: ::std::option::Option<crate::types::DashDvbFontDownload>) -> Self {
        self.font_download = input;
        self
    }
    /// <p>Subtitle font settings.</p>
    pub fn get_font_download(&self) -> &::std::option::Option<crate::types::DashDvbFontDownload> {
        &self.font_download
    }
    /// Appends an item to `error_metrics`.
    ///
    /// To override the contents of this collection use [`set_error_metrics`](Self::set_error_metrics).
    ///
    /// <p>Playback device error reporting settings.</p>
    pub fn error_metrics(mut self, input: crate::types::DashDvbMetricsReporting) -> Self {
        let mut v = self.error_metrics.unwrap_or_default();
        v.push(input);
        self.error_metrics = ::std::option::Option::Some(v);
        self
    }
    /// <p>Playback device error reporting settings.</p>
    pub fn set_error_metrics(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DashDvbMetricsReporting>>) -> Self {
        self.error_metrics = input;
        self
    }
    /// <p>Playback device error reporting settings.</p>
    pub fn get_error_metrics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DashDvbMetricsReporting>> {
        &self.error_metrics
    }
    /// Consumes the builder and constructs a [`DashDvbSettings`](crate::types::DashDvbSettings).
    pub fn build(self) -> crate::types::DashDvbSettings {
        crate::types::DashDvbSettings {
            font_download: self.font_download,
            error_metrics: self.error_metrics,
        }
    }
}
