// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>For use with DVB-DASH profiles only. The settings for font downloads that you want Elemental MediaPackage to pass through to the manifest.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DashDvbFontDownload {
    /// <p>The URL for downloading fonts for subtitles.</p>
    pub url: ::std::option::Option<::std::string::String>,
    /// <p>The <code>mimeType</code> of the resource that's at the font download URL.</p>
    /// <p>For information about font MIME types, see the <a href="https://dvb.org/wp-content/uploads/2021/06/A168r4_MPEG-DASH-Profile-for-Transport-of-ISO-BMFF-Based-DVB-Services_Draft-ts_103-285-v140_November_2021.pdf">MPEG-DASH Profile for Transport of ISO BMFF Based DVB Services over IP Based Networks</a> document.</p>
    pub mime_type: ::std::option::Option<::std::string::String>,
    /// <p>The <code>fontFamily</code> name for subtitles, as described in <a href="https://tech.ebu.ch/publications/tech3380">EBU-TT-D Subtitling Distribution Format</a>.</p>
    pub font_family: ::std::option::Option<::std::string::String>,
}
impl DashDvbFontDownload {
    /// <p>The URL for downloading fonts for subtitles.</p>
    pub fn url(&self) -> ::std::option::Option<&str> {
        self.url.as_deref()
    }
    /// <p>The <code>mimeType</code> of the resource that's at the font download URL.</p>
    /// <p>For information about font MIME types, see the <a href="https://dvb.org/wp-content/uploads/2021/06/A168r4_MPEG-DASH-Profile-for-Transport-of-ISO-BMFF-Based-DVB-Services_Draft-ts_103-285-v140_November_2021.pdf">MPEG-DASH Profile for Transport of ISO BMFF Based DVB Services over IP Based Networks</a> document.</p>
    pub fn mime_type(&self) -> ::std::option::Option<&str> {
        self.mime_type.as_deref()
    }
    /// <p>The <code>fontFamily</code> name for subtitles, as described in <a href="https://tech.ebu.ch/publications/tech3380">EBU-TT-D Subtitling Distribution Format</a>.</p>
    pub fn font_family(&self) -> ::std::option::Option<&str> {
        self.font_family.as_deref()
    }
}
impl DashDvbFontDownload {
    /// Creates a new builder-style object to manufacture [`DashDvbFontDownload`](crate::types::DashDvbFontDownload).
    pub fn builder() -> crate::types::builders::DashDvbFontDownloadBuilder {
        crate::types::builders::DashDvbFontDownloadBuilder::default()
    }
}

/// A builder for [`DashDvbFontDownload`](crate::types::DashDvbFontDownload).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DashDvbFontDownloadBuilder {
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) mime_type: ::std::option::Option<::std::string::String>,
    pub(crate) font_family: ::std::option::Option<::std::string::String>,
}
impl DashDvbFontDownloadBuilder {
    /// <p>The URL for downloading fonts for subtitles.</p>
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL for downloading fonts for subtitles.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The URL for downloading fonts for subtitles.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// <p>The <code>mimeType</code> of the resource that's at the font download URL.</p>
    /// <p>For information about font MIME types, see the <a href="https://dvb.org/wp-content/uploads/2021/06/A168r4_MPEG-DASH-Profile-for-Transport-of-ISO-BMFF-Based-DVB-Services_Draft-ts_103-285-v140_November_2021.pdf">MPEG-DASH Profile for Transport of ISO BMFF Based DVB Services over IP Based Networks</a> document.</p>
    pub fn mime_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mime_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>mimeType</code> of the resource that's at the font download URL.</p>
    /// <p>For information about font MIME types, see the <a href="https://dvb.org/wp-content/uploads/2021/06/A168r4_MPEG-DASH-Profile-for-Transport-of-ISO-BMFF-Based-DVB-Services_Draft-ts_103-285-v140_November_2021.pdf">MPEG-DASH Profile for Transport of ISO BMFF Based DVB Services over IP Based Networks</a> document.</p>
    pub fn set_mime_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mime_type = input;
        self
    }
    /// <p>The <code>mimeType</code> of the resource that's at the font download URL.</p>
    /// <p>For information about font MIME types, see the <a href="https://dvb.org/wp-content/uploads/2021/06/A168r4_MPEG-DASH-Profile-for-Transport-of-ISO-BMFF-Based-DVB-Services_Draft-ts_103-285-v140_November_2021.pdf">MPEG-DASH Profile for Transport of ISO BMFF Based DVB Services over IP Based Networks</a> document.</p>
    pub fn get_mime_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.mime_type
    }
    /// <p>The <code>fontFamily</code> name for subtitles, as described in <a href="https://tech.ebu.ch/publications/tech3380">EBU-TT-D Subtitling Distribution Format</a>.</p>
    pub fn font_family(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.font_family = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>fontFamily</code> name for subtitles, as described in <a href="https://tech.ebu.ch/publications/tech3380">EBU-TT-D Subtitling Distribution Format</a>.</p>
    pub fn set_font_family(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.font_family = input;
        self
    }
    /// <p>The <code>fontFamily</code> name for subtitles, as described in <a href="https://tech.ebu.ch/publications/tech3380">EBU-TT-D Subtitling Distribution Format</a>.</p>
    pub fn get_font_family(&self) -> &::std::option::Option<::std::string::String> {
        &self.font_family
    }
    /// Consumes the builder and constructs a [`DashDvbFontDownload`](crate::types::DashDvbFontDownload).
    pub fn build(self) -> crate::types::DashDvbFontDownload {
        crate::types::DashDvbFontDownload {
            url: self.url,
            mime_type: self.mime_type,
            font_family: self.font_family,
        }
    }
}
