// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration parameters for creating a Microsoft Smooth Streaming (MSS) manifest. MSS is a streaming media format developed by Microsoft that delivers adaptive bitrate streaming content to compatible players and devices.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateMssManifestConfiguration {
    /// <p>A short string that's appended to the endpoint URL to create a unique path to this MSS manifest. The manifest name must be unique within the origin endpoint and can contain letters, numbers, hyphens, and underscores.</p>
    pub manifest_name: ::std::string::String,
    /// <p>The total duration (in seconds) of the manifest window. This determines how much content is available in the manifest at any given time. The manifest window slides forward as new segments become available, maintaining a consistent duration of content. The minimum value is 30 seconds.</p>
    pub manifest_window_seconds: ::std::option::Option<i32>,
    /// <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest.</p>
    pub filter_configuration: ::std::option::Option<crate::types::FilterConfiguration>,
    /// <p>Determines the layout format of the MSS manifest. This controls how the manifest is structured and presented to client players, affecting compatibility with different MSS-compatible devices and applications.</p>
    pub manifest_layout: ::std::option::Option<crate::types::MssManifestLayout>,
}
impl CreateMssManifestConfiguration {
    /// <p>A short string that's appended to the endpoint URL to create a unique path to this MSS manifest. The manifest name must be unique within the origin endpoint and can contain letters, numbers, hyphens, and underscores.</p>
    pub fn manifest_name(&self) -> &str {
        use std::ops::Deref;
        self.manifest_name.deref()
    }
    /// <p>The total duration (in seconds) of the manifest window. This determines how much content is available in the manifest at any given time. The manifest window slides forward as new segments become available, maintaining a consistent duration of content. The minimum value is 30 seconds.</p>
    pub fn manifest_window_seconds(&self) -> ::std::option::Option<i32> {
        self.manifest_window_seconds
    }
    /// <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest.</p>
    pub fn filter_configuration(&self) -> ::std::option::Option<&crate::types::FilterConfiguration> {
        self.filter_configuration.as_ref()
    }
    /// <p>Determines the layout format of the MSS manifest. This controls how the manifest is structured and presented to client players, affecting compatibility with different MSS-compatible devices and applications.</p>
    pub fn manifest_layout(&self) -> ::std::option::Option<&crate::types::MssManifestLayout> {
        self.manifest_layout.as_ref()
    }
}
impl CreateMssManifestConfiguration {
    /// Creates a new builder-style object to manufacture [`CreateMssManifestConfiguration`](crate::types::CreateMssManifestConfiguration).
    pub fn builder() -> crate::types::builders::CreateMssManifestConfigurationBuilder {
        crate::types::builders::CreateMssManifestConfigurationBuilder::default()
    }
}

/// A builder for [`CreateMssManifestConfiguration`](crate::types::CreateMssManifestConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateMssManifestConfigurationBuilder {
    pub(crate) manifest_name: ::std::option::Option<::std::string::String>,
    pub(crate) manifest_window_seconds: ::std::option::Option<i32>,
    pub(crate) filter_configuration: ::std::option::Option<crate::types::FilterConfiguration>,
    pub(crate) manifest_layout: ::std::option::Option<crate::types::MssManifestLayout>,
}
impl CreateMssManifestConfigurationBuilder {
    /// <p>A short string that's appended to the endpoint URL to create a unique path to this MSS manifest. The manifest name must be unique within the origin endpoint and can contain letters, numbers, hyphens, and underscores.</p>
    /// This field is required.
    pub fn manifest_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.manifest_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A short string that's appended to the endpoint URL to create a unique path to this MSS manifest. The manifest name must be unique within the origin endpoint and can contain letters, numbers, hyphens, and underscores.</p>
    pub fn set_manifest_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.manifest_name = input;
        self
    }
    /// <p>A short string that's appended to the endpoint URL to create a unique path to this MSS manifest. The manifest name must be unique within the origin endpoint and can contain letters, numbers, hyphens, and underscores.</p>
    pub fn get_manifest_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.manifest_name
    }
    /// <p>The total duration (in seconds) of the manifest window. This determines how much content is available in the manifest at any given time. The manifest window slides forward as new segments become available, maintaining a consistent duration of content. The minimum value is 30 seconds.</p>
    pub fn manifest_window_seconds(mut self, input: i32) -> Self {
        self.manifest_window_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total duration (in seconds) of the manifest window. This determines how much content is available in the manifest at any given time. The manifest window slides forward as new segments become available, maintaining a consistent duration of content. The minimum value is 30 seconds.</p>
    pub fn set_manifest_window_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.manifest_window_seconds = input;
        self
    }
    /// <p>The total duration (in seconds) of the manifest window. This determines how much content is available in the manifest at any given time. The manifest window slides forward as new segments become available, maintaining a consistent duration of content. The minimum value is 30 seconds.</p>
    pub fn get_manifest_window_seconds(&self) -> &::std::option::Option<i32> {
        &self.manifest_window_seconds
    }
    /// <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest.</p>
    pub fn filter_configuration(mut self, input: crate::types::FilterConfiguration) -> Self {
        self.filter_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest.</p>
    pub fn set_filter_configuration(mut self, input: ::std::option::Option<crate::types::FilterConfiguration>) -> Self {
        self.filter_configuration = input;
        self
    }
    /// <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest.</p>
    pub fn get_filter_configuration(&self) -> &::std::option::Option<crate::types::FilterConfiguration> {
        &self.filter_configuration
    }
    /// <p>Determines the layout format of the MSS manifest. This controls how the manifest is structured and presented to client players, affecting compatibility with different MSS-compatible devices and applications.</p>
    pub fn manifest_layout(mut self, input: crate::types::MssManifestLayout) -> Self {
        self.manifest_layout = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines the layout format of the MSS manifest. This controls how the manifest is structured and presented to client players, affecting compatibility with different MSS-compatible devices and applications.</p>
    pub fn set_manifest_layout(mut self, input: ::std::option::Option<crate::types::MssManifestLayout>) -> Self {
        self.manifest_layout = input;
        self
    }
    /// <p>Determines the layout format of the MSS manifest. This controls how the manifest is structured and presented to client players, affecting compatibility with different MSS-compatible devices and applications.</p>
    pub fn get_manifest_layout(&self) -> &::std::option::Option<crate::types::MssManifestLayout> {
        &self.manifest_layout
    }
    /// Consumes the builder and constructs a [`CreateMssManifestConfiguration`](crate::types::CreateMssManifestConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`manifest_name`](crate::types::builders::CreateMssManifestConfigurationBuilder::manifest_name)
    pub fn build(self) -> ::std::result::Result<crate::types::CreateMssManifestConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CreateMssManifestConfiguration {
            manifest_name: self.manifest_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "manifest_name",
                    "manifest_name was not specified but it is required when building CreateMssManifestConfiguration",
                )
            })?,
            manifest_window_seconds: self.manifest_window_seconds,
            filter_configuration: self.filter_configuration,
            manifest_layout: self.manifest_layout,
        })
    }
}
