// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The settings for TTML subtitles.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DashTtmlConfiguration {
    /// <p>The profile that MediaPackage uses when signaling subtitles in the manifest. <code>IMSC</code> is the default profile. <code>EBU-TT-D</code> produces subtitles that are compliant with the EBU-TT-D TTML profile. MediaPackage passes through subtitle styles to the manifest. For more information about EBU-TT-D subtitles, see <a href="https://tech.ebu.ch/publications/tech3380">EBU-TT-D Subtitling Distribution Format</a>.</p>
    pub ttml_profile: crate::types::DashTtmlProfile,
}
impl DashTtmlConfiguration {
    /// <p>The profile that MediaPackage uses when signaling subtitles in the manifest. <code>IMSC</code> is the default profile. <code>EBU-TT-D</code> produces subtitles that are compliant with the EBU-TT-D TTML profile. MediaPackage passes through subtitle styles to the manifest. For more information about EBU-TT-D subtitles, see <a href="https://tech.ebu.ch/publications/tech3380">EBU-TT-D Subtitling Distribution Format</a>.</p>
    pub fn ttml_profile(&self) -> &crate::types::DashTtmlProfile {
        &self.ttml_profile
    }
}
impl DashTtmlConfiguration {
    /// Creates a new builder-style object to manufacture [`DashTtmlConfiguration`](crate::types::DashTtmlConfiguration).
    pub fn builder() -> crate::types::builders::DashTtmlConfigurationBuilder {
        crate::types::builders::DashTtmlConfigurationBuilder::default()
    }
}

/// A builder for [`DashTtmlConfiguration`](crate::types::DashTtmlConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DashTtmlConfigurationBuilder {
    pub(crate) ttml_profile: ::std::option::Option<crate::types::DashTtmlProfile>,
}
impl DashTtmlConfigurationBuilder {
    /// <p>The profile that MediaPackage uses when signaling subtitles in the manifest. <code>IMSC</code> is the default profile. <code>EBU-TT-D</code> produces subtitles that are compliant with the EBU-TT-D TTML profile. MediaPackage passes through subtitle styles to the manifest. For more information about EBU-TT-D subtitles, see <a href="https://tech.ebu.ch/publications/tech3380">EBU-TT-D Subtitling Distribution Format</a>.</p>
    /// This field is required.
    pub fn ttml_profile(mut self, input: crate::types::DashTtmlProfile) -> Self {
        self.ttml_profile = ::std::option::Option::Some(input);
        self
    }
    /// <p>The profile that MediaPackage uses when signaling subtitles in the manifest. <code>IMSC</code> is the default profile. <code>EBU-TT-D</code> produces subtitles that are compliant with the EBU-TT-D TTML profile. MediaPackage passes through subtitle styles to the manifest. For more information about EBU-TT-D subtitles, see <a href="https://tech.ebu.ch/publications/tech3380">EBU-TT-D Subtitling Distribution Format</a>.</p>
    pub fn set_ttml_profile(mut self, input: ::std::option::Option<crate::types::DashTtmlProfile>) -> Self {
        self.ttml_profile = input;
        self
    }
    /// <p>The profile that MediaPackage uses when signaling subtitles in the manifest. <code>IMSC</code> is the default profile. <code>EBU-TT-D</code> produces subtitles that are compliant with the EBU-TT-D TTML profile. MediaPackage passes through subtitle styles to the manifest. For more information about EBU-TT-D subtitles, see <a href="https://tech.ebu.ch/publications/tech3380">EBU-TT-D Subtitling Distribution Format</a>.</p>
    pub fn get_ttml_profile(&self) -> &::std::option::Option<crate::types::DashTtmlProfile> {
        &self.ttml_profile
    }
    /// Consumes the builder and constructs a [`DashTtmlConfiguration`](crate::types::DashTtmlConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`ttml_profile`](crate::types::builders::DashTtmlConfigurationBuilder::ttml_profile)
    pub fn build(self) -> ::std::result::Result<crate::types::DashTtmlConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DashTtmlConfiguration {
            ttml_profile: self.ttml_profile.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ttml_profile",
                    "ttml_profile was not specified but it is required when building DashTtmlConfiguration",
                )
            })?,
        })
    }
}
