// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The base URLs to use for retrieving segments. You can specify multiple locations and indicate the priority and weight for when each should be used, for use in mutli-CDN workflows.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DashBaseUrl {
    /// <p>A source location for segments.</p>
    pub url: ::std::string::String,
    /// <p>The name of the source location.</p>
    pub service_location: ::std::option::Option<::std::string::String>,
    /// <p>For use with DVB-DASH profiles only. The priority of this location for servings segments. The lower the number, the higher the priority.</p>
    pub dvb_priority: ::std::option::Option<i32>,
    /// <p>For use with DVB-DASH profiles only. The weighting for source locations that have the same priority.</p>
    pub dvb_weight: ::std::option::Option<i32>,
}
impl DashBaseUrl {
    /// <p>A source location for segments.</p>
    pub fn url(&self) -> &str {
        use std::ops::Deref;
        self.url.deref()
    }
    /// <p>The name of the source location.</p>
    pub fn service_location(&self) -> ::std::option::Option<&str> {
        self.service_location.as_deref()
    }
    /// <p>For use with DVB-DASH profiles only. The priority of this location for servings segments. The lower the number, the higher the priority.</p>
    pub fn dvb_priority(&self) -> ::std::option::Option<i32> {
        self.dvb_priority
    }
    /// <p>For use with DVB-DASH profiles only. The weighting for source locations that have the same priority.</p>
    pub fn dvb_weight(&self) -> ::std::option::Option<i32> {
        self.dvb_weight
    }
}
impl DashBaseUrl {
    /// Creates a new builder-style object to manufacture [`DashBaseUrl`](crate::types::DashBaseUrl).
    pub fn builder() -> crate::types::builders::DashBaseUrlBuilder {
        crate::types::builders::DashBaseUrlBuilder::default()
    }
}

/// A builder for [`DashBaseUrl`](crate::types::DashBaseUrl).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DashBaseUrlBuilder {
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) service_location: ::std::option::Option<::std::string::String>,
    pub(crate) dvb_priority: ::std::option::Option<i32>,
    pub(crate) dvb_weight: ::std::option::Option<i32>,
}
impl DashBaseUrlBuilder {
    /// <p>A source location for segments.</p>
    /// This field is required.
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A source location for segments.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>A source location for segments.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// <p>The name of the source location.</p>
    pub fn service_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the source location.</p>
    pub fn set_service_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_location = input;
        self
    }
    /// <p>The name of the source location.</p>
    pub fn get_service_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_location
    }
    /// <p>For use with DVB-DASH profiles only. The priority of this location for servings segments. The lower the number, the higher the priority.</p>
    pub fn dvb_priority(mut self, input: i32) -> Self {
        self.dvb_priority = ::std::option::Option::Some(input);
        self
    }
    /// <p>For use with DVB-DASH profiles only. The priority of this location for servings segments. The lower the number, the higher the priority.</p>
    pub fn set_dvb_priority(mut self, input: ::std::option::Option<i32>) -> Self {
        self.dvb_priority = input;
        self
    }
    /// <p>For use with DVB-DASH profiles only. The priority of this location for servings segments. The lower the number, the higher the priority.</p>
    pub fn get_dvb_priority(&self) -> &::std::option::Option<i32> {
        &self.dvb_priority
    }
    /// <p>For use with DVB-DASH profiles only. The weighting for source locations that have the same priority.</p>
    pub fn dvb_weight(mut self, input: i32) -> Self {
        self.dvb_weight = ::std::option::Option::Some(input);
        self
    }
    /// <p>For use with DVB-DASH profiles only. The weighting for source locations that have the same priority.</p>
    pub fn set_dvb_weight(mut self, input: ::std::option::Option<i32>) -> Self {
        self.dvb_weight = input;
        self
    }
    /// <p>For use with DVB-DASH profiles only. The weighting for source locations that have the same priority.</p>
    pub fn get_dvb_weight(&self) -> &::std::option::Option<i32> {
        &self.dvb_weight
    }
    /// Consumes the builder and constructs a [`DashBaseUrl`](crate::types::DashBaseUrl).
    /// This method will fail if any of the following fields are not set:
    /// - [`url`](crate::types::builders::DashBaseUrlBuilder::url)
    pub fn build(self) -> ::std::result::Result<crate::types::DashBaseUrl, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DashBaseUrl {
            url: self.url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "url",
                    "url was not specified but it is required when building DashBaseUrl",
                )
            })?,
            service_location: self.service_location,
            dvb_priority: self.dvb_priority,
            dvb_weight: self.dvb_weight,
        })
    }
}
