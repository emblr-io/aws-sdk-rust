// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_origin_endpoint_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_origin_endpoint::CreateOriginEndpointInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.container_type {
        object.key("ContainerType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.dash_manifests {
        let mut array_3 = object.key("DashManifests").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_create_dash_manifest_configuration::ser_create_dash_manifest_configuration(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.description {
        object.key("Description").string(var_6.as_str());
    }
    if let Some(var_7) = &input.force_endpoint_error_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("ForceEndpointErrorConfiguration").start_object();
        crate::protocol_serde::shape_force_endpoint_error_configuration::ser_force_endpoint_error_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.hls_manifests {
        let mut array_10 = object.key("HlsManifests").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_create_hls_manifest_configuration::ser_create_hls_manifest_configuration(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.low_latency_hls_manifests {
        let mut array_14 = object.key("LowLatencyHlsManifests").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_create_low_latency_hls_manifest_configuration::ser_create_low_latency_hls_manifest_configuration(
                    &mut object_16,
                    item_15,
                )?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.mss_manifests {
        let mut array_18 = object.key("MssManifests").start_array();
        for item_19 in var_17 {
            {
                #[allow(unused_mut)]
                let mut object_20 = array_18.value().start_object();
                crate::protocol_serde::shape_create_mss_manifest_configuration::ser_create_mss_manifest_configuration(&mut object_20, item_19)?;
                object_20.finish();
            }
        }
        array_18.finish();
    }
    if let Some(var_21) = &input.origin_endpoint_name {
        object.key("OriginEndpointName").string(var_21.as_str());
    }
    if let Some(var_22) = &input.segment {
        #[allow(unused_mut)]
        let mut object_23 = object.key("Segment").start_object();
        crate::protocol_serde::shape_segment::ser_segment(&mut object_23, var_22)?;
        object_23.finish();
    }
    if let Some(var_24) = &input.startover_window_seconds {
        object.key("StartoverWindowSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_24).into()),
        );
    }
    if let Some(var_25) = &input.tags {
        #[allow(unused_mut)]
        let mut object_26 = object.key("Tags").start_object();
        for (key_27, value_28) in var_25 {
            {
                object_26.key(key_27.as_str()).string(value_28.as_str());
            }
        }
        object_26.finish();
    }
    Ok(())
}
