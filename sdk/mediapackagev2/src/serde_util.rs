// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_channel_output_output_correct_errors(
    mut builder: crate::operation::create_channel::builders::CreateChannelOutputBuilder,
) -> crate::operation::create_channel::builders::CreateChannelOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.channel_name.is_none() {
        builder.channel_name = Some(Default::default())
    }
    if builder.channel_group_name.is_none() {
        builder.channel_group_name = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_channel_group_output_output_correct_errors(
    mut builder: crate::operation::create_channel_group::builders::CreateChannelGroupOutputBuilder,
) -> crate::operation::create_channel_group::builders::CreateChannelGroupOutputBuilder {
    if builder.channel_group_name.is_none() {
        builder.channel_group_name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.egress_domain.is_none() {
        builder.egress_domain = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_harvest_job_output_output_correct_errors(
    mut builder: crate::operation::create_harvest_job::builders::CreateHarvestJobOutputBuilder,
) -> crate::operation::create_harvest_job::builders::CreateHarvestJobOutputBuilder {
    if builder.channel_group_name.is_none() {
        builder.channel_group_name = Some(Default::default())
    }
    if builder.channel_name.is_none() {
        builder.channel_name = Some(Default::default())
    }
    if builder.origin_endpoint_name.is_none() {
        builder.origin_endpoint_name = Some(Default::default())
    }
    if builder.destination.is_none() {
        builder.destination = {
            let builder = crate::types::builders::DestinationBuilder::default();
            Some(crate::serde_util::destination_correct_errors(builder).build())
        }
    }
    if builder.harvest_job_name.is_none() {
        builder.harvest_job_name = Some(Default::default())
    }
    if builder.harvested_manifests.is_none() {
        builder.harvested_manifests = {
            let builder = crate::types::builders::HarvestedManifestsBuilder::default();
            Some(builder.build())
        }
    }
    if builder.schedule_configuration.is_none() {
        builder.schedule_configuration = {
            let builder = crate::types::builders::HarvesterScheduleConfigurationBuilder::default();
            crate::serde_util::harvester_schedule_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::HarvestJobStatus>().ok()
    }
    builder
}

pub(crate) fn create_origin_endpoint_output_output_correct_errors(
    mut builder: crate::operation::create_origin_endpoint::builders::CreateOriginEndpointOutputBuilder,
) -> crate::operation::create_origin_endpoint::builders::CreateOriginEndpointOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.channel_group_name.is_none() {
        builder.channel_group_name = Some(Default::default())
    }
    if builder.channel_name.is_none() {
        builder.channel_name = Some(Default::default())
    }
    if builder.origin_endpoint_name.is_none() {
        builder.origin_endpoint_name = Some(Default::default())
    }
    if builder.container_type.is_none() {
        builder.container_type = "no value was set".parse::<crate::types::ContainerType>().ok()
    }
    if builder.segment.is_none() {
        builder.segment = {
            let builder = crate::types::builders::SegmentBuilder::default();
            Some(builder.build())
        }
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_channel_output_output_correct_errors(
    mut builder: crate::operation::get_channel::builders::GetChannelOutputBuilder,
) -> crate::operation::get_channel::builders::GetChannelOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.channel_name.is_none() {
        builder.channel_name = Some(Default::default())
    }
    if builder.channel_group_name.is_none() {
        builder.channel_group_name = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_channel_group_output_output_correct_errors(
    mut builder: crate::operation::get_channel_group::builders::GetChannelGroupOutputBuilder,
) -> crate::operation::get_channel_group::builders::GetChannelGroupOutputBuilder {
    if builder.channel_group_name.is_none() {
        builder.channel_group_name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.egress_domain.is_none() {
        builder.egress_domain = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_channel_policy_output_output_correct_errors(
    mut builder: crate::operation::get_channel_policy::builders::GetChannelPolicyOutputBuilder,
) -> crate::operation::get_channel_policy::builders::GetChannelPolicyOutputBuilder {
    if builder.channel_group_name.is_none() {
        builder.channel_group_name = Some(Default::default())
    }
    if builder.channel_name.is_none() {
        builder.channel_name = Some(Default::default())
    }
    if builder.policy.is_none() {
        builder.policy = Some(Default::default())
    }
    builder
}

pub(crate) fn get_harvest_job_output_output_correct_errors(
    mut builder: crate::operation::get_harvest_job::builders::GetHarvestJobOutputBuilder,
) -> crate::operation::get_harvest_job::builders::GetHarvestJobOutputBuilder {
    if builder.channel_group_name.is_none() {
        builder.channel_group_name = Some(Default::default())
    }
    if builder.channel_name.is_none() {
        builder.channel_name = Some(Default::default())
    }
    if builder.origin_endpoint_name.is_none() {
        builder.origin_endpoint_name = Some(Default::default())
    }
    if builder.destination.is_none() {
        builder.destination = {
            let builder = crate::types::builders::DestinationBuilder::default();
            Some(crate::serde_util::destination_correct_errors(builder).build())
        }
    }
    if builder.harvest_job_name.is_none() {
        builder.harvest_job_name = Some(Default::default())
    }
    if builder.harvested_manifests.is_none() {
        builder.harvested_manifests = {
            let builder = crate::types::builders::HarvestedManifestsBuilder::default();
            Some(builder.build())
        }
    }
    if builder.schedule_configuration.is_none() {
        builder.schedule_configuration = {
            let builder = crate::types::builders::HarvesterScheduleConfigurationBuilder::default();
            crate::serde_util::harvester_schedule_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::HarvestJobStatus>().ok()
    }
    builder
}

pub(crate) fn get_origin_endpoint_output_output_correct_errors(
    mut builder: crate::operation::get_origin_endpoint::builders::GetOriginEndpointOutputBuilder,
) -> crate::operation::get_origin_endpoint::builders::GetOriginEndpointOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.channel_group_name.is_none() {
        builder.channel_group_name = Some(Default::default())
    }
    if builder.channel_name.is_none() {
        builder.channel_name = Some(Default::default())
    }
    if builder.origin_endpoint_name.is_none() {
        builder.origin_endpoint_name = Some(Default::default())
    }
    if builder.container_type.is_none() {
        builder.container_type = "no value was set".parse::<crate::types::ContainerType>().ok()
    }
    if builder.segment.is_none() {
        builder.segment = {
            let builder = crate::types::builders::SegmentBuilder::default();
            Some(builder.build())
        }
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_origin_endpoint_policy_output_output_correct_errors(
    mut builder: crate::operation::get_origin_endpoint_policy::builders::GetOriginEndpointPolicyOutputBuilder,
) -> crate::operation::get_origin_endpoint_policy::builders::GetOriginEndpointPolicyOutputBuilder {
    if builder.channel_group_name.is_none() {
        builder.channel_group_name = Some(Default::default())
    }
    if builder.channel_name.is_none() {
        builder.channel_name = Some(Default::default())
    }
    if builder.origin_endpoint_name.is_none() {
        builder.origin_endpoint_name = Some(Default::default())
    }
    if builder.policy.is_none() {
        builder.policy = Some(Default::default())
    }
    builder
}

pub(crate) fn reset_channel_state_output_output_correct_errors(
    mut builder: crate::operation::reset_channel_state::builders::ResetChannelStateOutputBuilder,
) -> crate::operation::reset_channel_state::builders::ResetChannelStateOutputBuilder {
    if builder.channel_group_name.is_none() {
        builder.channel_group_name = Some(Default::default())
    }
    if builder.channel_name.is_none() {
        builder.channel_name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.reset_at.is_none() {
        builder.reset_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn reset_origin_endpoint_state_output_output_correct_errors(
    mut builder: crate::operation::reset_origin_endpoint_state::builders::ResetOriginEndpointStateOutputBuilder,
) -> crate::operation::reset_origin_endpoint_state::builders::ResetOriginEndpointStateOutputBuilder {
    if builder.channel_group_name.is_none() {
        builder.channel_group_name = Some(Default::default())
    }
    if builder.channel_name.is_none() {
        builder.channel_name = Some(Default::default())
    }
    if builder.origin_endpoint_name.is_none() {
        builder.origin_endpoint_name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.reset_at.is_none() {
        builder.reset_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_channel_output_output_correct_errors(
    mut builder: crate::operation::update_channel::builders::UpdateChannelOutputBuilder,
) -> crate::operation::update_channel::builders::UpdateChannelOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.channel_name.is_none() {
        builder.channel_name = Some(Default::default())
    }
    if builder.channel_group_name.is_none() {
        builder.channel_group_name = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_channel_group_output_output_correct_errors(
    mut builder: crate::operation::update_channel_group::builders::UpdateChannelGroupOutputBuilder,
) -> crate::operation::update_channel_group::builders::UpdateChannelGroupOutputBuilder {
    if builder.channel_group_name.is_none() {
        builder.channel_group_name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.egress_domain.is_none() {
        builder.egress_domain = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_origin_endpoint_output_output_correct_errors(
    mut builder: crate::operation::update_origin_endpoint::builders::UpdateOriginEndpointOutputBuilder,
) -> crate::operation::update_origin_endpoint::builders::UpdateOriginEndpointOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.channel_group_name.is_none() {
        builder.channel_group_name = Some(Default::default())
    }
    if builder.channel_name.is_none() {
        builder.channel_name = Some(Default::default())
    }
    if builder.origin_endpoint_name.is_none() {
        builder.origin_endpoint_name = Some(Default::default())
    }
    if builder.container_type.is_none() {
        builder.container_type = "no value was set".parse::<crate::types::ContainerType>().ok()
    }
    if builder.segment.is_none() {
        builder.segment = {
            let builder = crate::types::builders::SegmentBuilder::default();
            Some(builder.build())
        }
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn destination_correct_errors(mut builder: crate::types::builders::DestinationBuilder) -> crate::types::builders::DestinationBuilder {
    if builder.s3_destination.is_none() {
        builder.s3_destination = {
            let builder = crate::types::builders::S3DestinationConfigBuilder::default();
            crate::serde_util::s3_destination_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn harvester_schedule_configuration_correct_errors(
    mut builder: crate::types::builders::HarvesterScheduleConfigurationBuilder,
) -> crate::types::builders::HarvesterScheduleConfigurationBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn s3_destination_config_correct_errors(
    mut builder: crate::types::builders::S3DestinationConfigBuilder,
) -> crate::types::builders::S3DestinationConfigBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    if builder.destination_path.is_none() {
        builder.destination_path = Some(Default::default())
    }
    builder
}

pub(crate) fn channel_group_list_configuration_correct_errors(
    mut builder: crate::types::builders::ChannelGroupListConfigurationBuilder,
) -> crate::types::builders::ChannelGroupListConfigurationBuilder {
    if builder.channel_group_name.is_none() {
        builder.channel_group_name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn channel_list_configuration_correct_errors(
    mut builder: crate::types::builders::ChannelListConfigurationBuilder,
) -> crate::types::builders::ChannelListConfigurationBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.channel_name.is_none() {
        builder.channel_name = Some(Default::default())
    }
    if builder.channel_group_name.is_none() {
        builder.channel_group_name = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn encryption_correct_errors(mut builder: crate::types::builders::EncryptionBuilder) -> crate::types::builders::EncryptionBuilder {
    if builder.encryption_method.is_none() {
        builder.encryption_method = {
            let builder = crate::types::builders::EncryptionMethodBuilder::default();
            Some(builder.build())
        }
    }
    if builder.speke_key_provider.is_none() {
        builder.speke_key_provider = {
            let builder = crate::types::builders::SpekeKeyProviderBuilder::default();
            crate::serde_util::speke_key_provider_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_dash_manifest_configuration_correct_errors(
    mut builder: crate::types::builders::GetDashManifestConfigurationBuilder,
) -> crate::types::builders::GetDashManifestConfigurationBuilder {
    if builder.manifest_name.is_none() {
        builder.manifest_name = Some(Default::default())
    }
    if builder.url.is_none() {
        builder.url = Some(Default::default())
    }
    builder
}

pub(crate) fn get_hls_manifest_configuration_correct_errors(
    mut builder: crate::types::builders::GetHlsManifestConfigurationBuilder,
) -> crate::types::builders::GetHlsManifestConfigurationBuilder {
    if builder.manifest_name.is_none() {
        builder.manifest_name = Some(Default::default())
    }
    if builder.url.is_none() {
        builder.url = Some(Default::default())
    }
    builder
}

pub(crate) fn get_low_latency_hls_manifest_configuration_correct_errors(
    mut builder: crate::types::builders::GetLowLatencyHlsManifestConfigurationBuilder,
) -> crate::types::builders::GetLowLatencyHlsManifestConfigurationBuilder {
    if builder.manifest_name.is_none() {
        builder.manifest_name = Some(Default::default())
    }
    if builder.url.is_none() {
        builder.url = Some(Default::default())
    }
    builder
}

pub(crate) fn get_mss_manifest_configuration_correct_errors(
    mut builder: crate::types::builders::GetMssManifestConfigurationBuilder,
) -> crate::types::builders::GetMssManifestConfigurationBuilder {
    if builder.manifest_name.is_none() {
        builder.manifest_name = Some(Default::default())
    }
    if builder.url.is_none() {
        builder.url = Some(Default::default())
    }
    builder
}

pub(crate) fn harvest_job_correct_errors(mut builder: crate::types::builders::HarvestJobBuilder) -> crate::types::builders::HarvestJobBuilder {
    if builder.channel_group_name.is_none() {
        builder.channel_group_name = Some(Default::default())
    }
    if builder.channel_name.is_none() {
        builder.channel_name = Some(Default::default())
    }
    if builder.origin_endpoint_name.is_none() {
        builder.origin_endpoint_name = Some(Default::default())
    }
    if builder.destination.is_none() {
        builder.destination = {
            let builder = crate::types::builders::DestinationBuilder::default();
            Some(crate::serde_util::destination_correct_errors(builder).build())
        }
    }
    if builder.harvest_job_name.is_none() {
        builder.harvest_job_name = Some(Default::default())
    }
    if builder.harvested_manifests.is_none() {
        builder.harvested_manifests = {
            let builder = crate::types::builders::HarvestedManifestsBuilder::default();
            Some(builder.build())
        }
    }
    if builder.schedule_configuration.is_none() {
        builder.schedule_configuration = {
            let builder = crate::types::builders::HarvesterScheduleConfigurationBuilder::default();
            crate::serde_util::harvester_schedule_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::HarvestJobStatus>().ok()
    }
    builder
}

pub(crate) fn origin_endpoint_list_configuration_correct_errors(
    mut builder: crate::types::builders::OriginEndpointListConfigurationBuilder,
) -> crate::types::builders::OriginEndpointListConfigurationBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.channel_group_name.is_none() {
        builder.channel_group_name = Some(Default::default())
    }
    if builder.channel_name.is_none() {
        builder.channel_name = Some(Default::default())
    }
    if builder.origin_endpoint_name.is_none() {
        builder.origin_endpoint_name = Some(Default::default())
    }
    if builder.container_type.is_none() {
        builder.container_type = "no value was set".parse::<crate::types::ContainerType>().ok()
    }
    builder
}

pub(crate) fn harvested_dash_manifest_correct_errors(
    mut builder: crate::types::builders::HarvestedDashManifestBuilder,
) -> crate::types::builders::HarvestedDashManifestBuilder {
    if builder.manifest_name.is_none() {
        builder.manifest_name = Some(Default::default())
    }
    builder
}

pub(crate) fn harvested_hls_manifest_correct_errors(
    mut builder: crate::types::builders::HarvestedHlsManifestBuilder,
) -> crate::types::builders::HarvestedHlsManifestBuilder {
    if builder.manifest_name.is_none() {
        builder.manifest_name = Some(Default::default())
    }
    builder
}

pub(crate) fn harvested_low_latency_hls_manifest_correct_errors(
    mut builder: crate::types::builders::HarvestedLowLatencyHlsManifestBuilder,
) -> crate::types::builders::HarvestedLowLatencyHlsManifestBuilder {
    if builder.manifest_name.is_none() {
        builder.manifest_name = Some(Default::default())
    }
    builder
}

pub(crate) fn speke_key_provider_correct_errors(
    mut builder: crate::types::builders::SpekeKeyProviderBuilder,
) -> crate::types::builders::SpekeKeyProviderBuilder {
    if builder.encryption_contract_configuration.is_none() {
        builder.encryption_contract_configuration = {
            let builder = crate::types::builders::EncryptionContractConfigurationBuilder::default();
            crate::serde_util::encryption_contract_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.drm_systems.is_none() {
        builder.drm_systems = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.url.is_none() {
        builder.url = Some(Default::default())
    }
    builder
}

pub(crate) fn start_tag_correct_errors(mut builder: crate::types::builders::StartTagBuilder) -> crate::types::builders::StartTagBuilder {
    if builder.time_offset.is_none() {
        builder.time_offset = Some(Default::default())
    }
    builder
}

pub(crate) fn dash_base_url_correct_errors(mut builder: crate::types::builders::DashBaseUrlBuilder) -> crate::types::builders::DashBaseUrlBuilder {
    if builder.url.is_none() {
        builder.url = Some(Default::default())
    }
    builder
}

pub(crate) fn dash_ttml_configuration_correct_errors(
    mut builder: crate::types::builders::DashTtmlConfigurationBuilder,
) -> crate::types::builders::DashTtmlConfigurationBuilder {
    if builder.ttml_profile.is_none() {
        builder.ttml_profile = "no value was set".parse::<crate::types::DashTtmlProfile>().ok()
    }
    builder
}

pub(crate) fn encryption_contract_configuration_correct_errors(
    mut builder: crate::types::builders::EncryptionContractConfigurationBuilder,
) -> crate::types::builders::EncryptionContractConfigurationBuilder {
    if builder.preset_speke20_audio.is_none() {
        builder.preset_speke20_audio = "no value was set".parse::<crate::types::PresetSpeke20Audio>().ok()
    }
    if builder.preset_speke20_video.is_none() {
        builder.preset_speke20_video = "no value was set".parse::<crate::types::PresetSpeke20Video>().ok()
    }
    builder
}

pub(crate) fn list_dash_manifest_configuration_correct_errors(
    mut builder: crate::types::builders::ListDashManifestConfigurationBuilder,
) -> crate::types::builders::ListDashManifestConfigurationBuilder {
    if builder.manifest_name.is_none() {
        builder.manifest_name = Some(Default::default())
    }
    builder
}

pub(crate) fn list_hls_manifest_configuration_correct_errors(
    mut builder: crate::types::builders::ListHlsManifestConfigurationBuilder,
) -> crate::types::builders::ListHlsManifestConfigurationBuilder {
    if builder.manifest_name.is_none() {
        builder.manifest_name = Some(Default::default())
    }
    builder
}

pub(crate) fn list_low_latency_hls_manifest_configuration_correct_errors(
    mut builder: crate::types::builders::ListLowLatencyHlsManifestConfigurationBuilder,
) -> crate::types::builders::ListLowLatencyHlsManifestConfigurationBuilder {
    if builder.manifest_name.is_none() {
        builder.manifest_name = Some(Default::default())
    }
    builder
}

pub(crate) fn list_mss_manifest_configuration_correct_errors(
    mut builder: crate::types::builders::ListMssManifestConfigurationBuilder,
) -> crate::types::builders::ListMssManifestConfigurationBuilder {
    if builder.manifest_name.is_none() {
        builder.manifest_name = Some(Default::default())
    }
    builder
}

pub(crate) fn dash_dvb_metrics_reporting_correct_errors(
    mut builder: crate::types::builders::DashDvbMetricsReportingBuilder,
) -> crate::types::builders::DashDvbMetricsReportingBuilder {
    if builder.reporting_url.is_none() {
        builder.reporting_url = Some(Default::default())
    }
    builder
}
