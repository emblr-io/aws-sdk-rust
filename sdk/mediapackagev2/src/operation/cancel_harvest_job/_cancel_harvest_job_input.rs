// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CancelHarvestJobInput {
    /// <p>The name of the channel group containing the channel from which the harvest job is running.</p>
    pub channel_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the channel from which the harvest job is running.</p>
    pub channel_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the origin endpoint that the harvest job is harvesting from. This cannot be changed after the harvest job is submitted.</p>
    pub origin_endpoint_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the harvest job to cancel. This name must be unique within the channel and cannot be changed after the harvest job is submitted.</p>
    pub harvest_job_name: ::std::option::Option<::std::string::String>,
    /// <p>The current Entity Tag (ETag) associated with the harvest job. Used for concurrency control.</p>
    pub e_tag: ::std::option::Option<::std::string::String>,
}
impl CancelHarvestJobInput {
    /// <p>The name of the channel group containing the channel from which the harvest job is running.</p>
    pub fn channel_group_name(&self) -> ::std::option::Option<&str> {
        self.channel_group_name.as_deref()
    }
    /// <p>The name of the channel from which the harvest job is running.</p>
    pub fn channel_name(&self) -> ::std::option::Option<&str> {
        self.channel_name.as_deref()
    }
    /// <p>The name of the origin endpoint that the harvest job is harvesting from. This cannot be changed after the harvest job is submitted.</p>
    pub fn origin_endpoint_name(&self) -> ::std::option::Option<&str> {
        self.origin_endpoint_name.as_deref()
    }
    /// <p>The name of the harvest job to cancel. This name must be unique within the channel and cannot be changed after the harvest job is submitted.</p>
    pub fn harvest_job_name(&self) -> ::std::option::Option<&str> {
        self.harvest_job_name.as_deref()
    }
    /// <p>The current Entity Tag (ETag) associated with the harvest job. Used for concurrency control.</p>
    pub fn e_tag(&self) -> ::std::option::Option<&str> {
        self.e_tag.as_deref()
    }
}
impl CancelHarvestJobInput {
    /// Creates a new builder-style object to manufacture [`CancelHarvestJobInput`](crate::operation::cancel_harvest_job::CancelHarvestJobInput).
    pub fn builder() -> crate::operation::cancel_harvest_job::builders::CancelHarvestJobInputBuilder {
        crate::operation::cancel_harvest_job::builders::CancelHarvestJobInputBuilder::default()
    }
}

/// A builder for [`CancelHarvestJobInput`](crate::operation::cancel_harvest_job::CancelHarvestJobInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CancelHarvestJobInputBuilder {
    pub(crate) channel_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) channel_name: ::std::option::Option<::std::string::String>,
    pub(crate) origin_endpoint_name: ::std::option::Option<::std::string::String>,
    pub(crate) harvest_job_name: ::std::option::Option<::std::string::String>,
    pub(crate) e_tag: ::std::option::Option<::std::string::String>,
}
impl CancelHarvestJobInputBuilder {
    /// <p>The name of the channel group containing the channel from which the harvest job is running.</p>
    /// This field is required.
    pub fn channel_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the channel group containing the channel from which the harvest job is running.</p>
    pub fn set_channel_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_group_name = input;
        self
    }
    /// <p>The name of the channel group containing the channel from which the harvest job is running.</p>
    pub fn get_channel_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_group_name
    }
    /// <p>The name of the channel from which the harvest job is running.</p>
    /// This field is required.
    pub fn channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the channel from which the harvest job is running.</p>
    pub fn set_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>The name of the channel from which the harvest job is running.</p>
    pub fn get_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_name
    }
    /// <p>The name of the origin endpoint that the harvest job is harvesting from. This cannot be changed after the harvest job is submitted.</p>
    /// This field is required.
    pub fn origin_endpoint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.origin_endpoint_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the origin endpoint that the harvest job is harvesting from. This cannot be changed after the harvest job is submitted.</p>
    pub fn set_origin_endpoint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.origin_endpoint_name = input;
        self
    }
    /// <p>The name of the origin endpoint that the harvest job is harvesting from. This cannot be changed after the harvest job is submitted.</p>
    pub fn get_origin_endpoint_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.origin_endpoint_name
    }
    /// <p>The name of the harvest job to cancel. This name must be unique within the channel and cannot be changed after the harvest job is submitted.</p>
    /// This field is required.
    pub fn harvest_job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.harvest_job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the harvest job to cancel. This name must be unique within the channel and cannot be changed after the harvest job is submitted.</p>
    pub fn set_harvest_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.harvest_job_name = input;
        self
    }
    /// <p>The name of the harvest job to cancel. This name must be unique within the channel and cannot be changed after the harvest job is submitted.</p>
    pub fn get_harvest_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.harvest_job_name
    }
    /// <p>The current Entity Tag (ETag) associated with the harvest job. Used for concurrency control.</p>
    pub fn e_tag(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.e_tag = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current Entity Tag (ETag) associated with the harvest job. Used for concurrency control.</p>
    pub fn set_e_tag(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.e_tag = input;
        self
    }
    /// <p>The current Entity Tag (ETag) associated with the harvest job. Used for concurrency control.</p>
    pub fn get_e_tag(&self) -> &::std::option::Option<::std::string::String> {
        &self.e_tag
    }
    /// Consumes the builder and constructs a [`CancelHarvestJobInput`](crate::operation::cancel_harvest_job::CancelHarvestJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::cancel_harvest_job::CancelHarvestJobInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::cancel_harvest_job::CancelHarvestJobInput {
            channel_group_name: self.channel_group_name,
            channel_name: self.channel_name,
            origin_endpoint_name: self.origin_endpoint_name,
            harvest_job_name: self.harvest_job_name,
            e_tag: self.e_tag,
        })
    }
}
