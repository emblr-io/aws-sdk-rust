// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The request object for creating a new harvest job.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateHarvestJobInput {
    /// <p>The name of the channel group containing the channel from which to harvest content.</p>
    pub channel_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the channel from which to harvest content.</p>
    pub channel_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the origin endpoint from which to harvest content.</p>
    pub origin_endpoint_name: ::std::option::Option<::std::string::String>,
    /// <p>An optional description for the harvest job.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A list of manifests to be harvested.</p>
    pub harvested_manifests: ::std::option::Option<crate::types::HarvestedManifests>,
    /// <p>The configuration for when the harvest job should run, including start and end times.</p>
    pub schedule_configuration: ::std::option::Option<crate::types::HarvesterScheduleConfiguration>,
    /// <p>The S3 destination where the harvested content will be placed.</p>
    pub destination: ::std::option::Option<crate::types::Destination>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>A name for the harvest job. This name must be unique within the channel.</p>
    pub harvest_job_name: ::std::option::Option<::std::string::String>,
    /// <p>A collection of tags associated with the harvest job.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateHarvestJobInput {
    /// <p>The name of the channel group containing the channel from which to harvest content.</p>
    pub fn channel_group_name(&self) -> ::std::option::Option<&str> {
        self.channel_group_name.as_deref()
    }
    /// <p>The name of the channel from which to harvest content.</p>
    pub fn channel_name(&self) -> ::std::option::Option<&str> {
        self.channel_name.as_deref()
    }
    /// <p>The name of the origin endpoint from which to harvest content.</p>
    pub fn origin_endpoint_name(&self) -> ::std::option::Option<&str> {
        self.origin_endpoint_name.as_deref()
    }
    /// <p>An optional description for the harvest job.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A list of manifests to be harvested.</p>
    pub fn harvested_manifests(&self) -> ::std::option::Option<&crate::types::HarvestedManifests> {
        self.harvested_manifests.as_ref()
    }
    /// <p>The configuration for when the harvest job should run, including start and end times.</p>
    pub fn schedule_configuration(&self) -> ::std::option::Option<&crate::types::HarvesterScheduleConfiguration> {
        self.schedule_configuration.as_ref()
    }
    /// <p>The S3 destination where the harvested content will be placed.</p>
    pub fn destination(&self) -> ::std::option::Option<&crate::types::Destination> {
        self.destination.as_ref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>A name for the harvest job. This name must be unique within the channel.</p>
    pub fn harvest_job_name(&self) -> ::std::option::Option<&str> {
        self.harvest_job_name.as_deref()
    }
    /// <p>A collection of tags associated with the harvest job.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateHarvestJobInput {
    /// Creates a new builder-style object to manufacture [`CreateHarvestJobInput`](crate::operation::create_harvest_job::CreateHarvestJobInput).
    pub fn builder() -> crate::operation::create_harvest_job::builders::CreateHarvestJobInputBuilder {
        crate::operation::create_harvest_job::builders::CreateHarvestJobInputBuilder::default()
    }
}

/// A builder for [`CreateHarvestJobInput`](crate::operation::create_harvest_job::CreateHarvestJobInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateHarvestJobInputBuilder {
    pub(crate) channel_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) channel_name: ::std::option::Option<::std::string::String>,
    pub(crate) origin_endpoint_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) harvested_manifests: ::std::option::Option<crate::types::HarvestedManifests>,
    pub(crate) schedule_configuration: ::std::option::Option<crate::types::HarvesterScheduleConfiguration>,
    pub(crate) destination: ::std::option::Option<crate::types::Destination>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) harvest_job_name: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateHarvestJobInputBuilder {
    /// <p>The name of the channel group containing the channel from which to harvest content.</p>
    /// This field is required.
    pub fn channel_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the channel group containing the channel from which to harvest content.</p>
    pub fn set_channel_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_group_name = input;
        self
    }
    /// <p>The name of the channel group containing the channel from which to harvest content.</p>
    pub fn get_channel_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_group_name
    }
    /// <p>The name of the channel from which to harvest content.</p>
    /// This field is required.
    pub fn channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the channel from which to harvest content.</p>
    pub fn set_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>The name of the channel from which to harvest content.</p>
    pub fn get_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_name
    }
    /// <p>The name of the origin endpoint from which to harvest content.</p>
    /// This field is required.
    pub fn origin_endpoint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.origin_endpoint_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the origin endpoint from which to harvest content.</p>
    pub fn set_origin_endpoint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.origin_endpoint_name = input;
        self
    }
    /// <p>The name of the origin endpoint from which to harvest content.</p>
    pub fn get_origin_endpoint_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.origin_endpoint_name
    }
    /// <p>An optional description for the harvest job.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional description for the harvest job.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>An optional description for the harvest job.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>A list of manifests to be harvested.</p>
    /// This field is required.
    pub fn harvested_manifests(mut self, input: crate::types::HarvestedManifests) -> Self {
        self.harvested_manifests = ::std::option::Option::Some(input);
        self
    }
    /// <p>A list of manifests to be harvested.</p>
    pub fn set_harvested_manifests(mut self, input: ::std::option::Option<crate::types::HarvestedManifests>) -> Self {
        self.harvested_manifests = input;
        self
    }
    /// <p>A list of manifests to be harvested.</p>
    pub fn get_harvested_manifests(&self) -> &::std::option::Option<crate::types::HarvestedManifests> {
        &self.harvested_manifests
    }
    /// <p>The configuration for when the harvest job should run, including start and end times.</p>
    /// This field is required.
    pub fn schedule_configuration(mut self, input: crate::types::HarvesterScheduleConfiguration) -> Self {
        self.schedule_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for when the harvest job should run, including start and end times.</p>
    pub fn set_schedule_configuration(mut self, input: ::std::option::Option<crate::types::HarvesterScheduleConfiguration>) -> Self {
        self.schedule_configuration = input;
        self
    }
    /// <p>The configuration for when the harvest job should run, including start and end times.</p>
    pub fn get_schedule_configuration(&self) -> &::std::option::Option<crate::types::HarvesterScheduleConfiguration> {
        &self.schedule_configuration
    }
    /// <p>The S3 destination where the harvested content will be placed.</p>
    /// This field is required.
    pub fn destination(mut self, input: crate::types::Destination) -> Self {
        self.destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>The S3 destination where the harvested content will be placed.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<crate::types::Destination>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The S3 destination where the harvested content will be placed.</p>
    pub fn get_destination(&self) -> &::std::option::Option<crate::types::Destination> {
        &self.destination
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>A name for the harvest job. This name must be unique within the channel.</p>
    pub fn harvest_job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.harvest_job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the harvest job. This name must be unique within the channel.</p>
    pub fn set_harvest_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.harvest_job_name = input;
        self
    }
    /// <p>A name for the harvest job. This name must be unique within the channel.</p>
    pub fn get_harvest_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.harvest_job_name
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A collection of tags associated with the harvest job.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A collection of tags associated with the harvest job.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A collection of tags associated with the harvest job.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateHarvestJobInput`](crate::operation::create_harvest_job::CreateHarvestJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_harvest_job::CreateHarvestJobInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_harvest_job::CreateHarvestJobInput {
            channel_group_name: self.channel_group_name,
            channel_name: self.channel_name,
            origin_endpoint_name: self.origin_endpoint_name,
            description: self.description,
            harvested_manifests: self.harvested_manifests,
            schedule_configuration: self.schedule_configuration,
            destination: self.destination,
            client_token: self.client_token,
            harvest_job_name: self.harvest_job_name,
            tags: self.tags,
        })
    }
}
