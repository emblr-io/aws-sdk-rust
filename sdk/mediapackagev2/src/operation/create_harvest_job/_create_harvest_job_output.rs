// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The response object returned after creating a harvest job.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateHarvestJobOutput {
    /// <p>The name of the channel group containing the channel from which content is being harvested.</p>
    pub channel_group_name: ::std::string::String,
    /// <p>The name of the channel from which content is being harvested.</p>
    pub channel_name: ::std::string::String,
    /// <p>The name of the origin endpoint from which content is being harvested.</p>
    pub origin_endpoint_name: ::std::string::String,
    /// <p>The S3 destination where the harvested content will be placed.</p>
    pub destination: ::std::option::Option<crate::types::Destination>,
    /// <p>The name of the created harvest job.</p>
    pub harvest_job_name: ::std::string::String,
    /// <p>A list of manifests that will be harvested.</p>
    pub harvested_manifests: ::std::option::Option<crate::types::HarvestedManifests>,
    /// <p>The description of the harvest job, if provided.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The configuration for when the harvest job will run, including start and end times.</p>
    pub schedule_configuration: ::std::option::Option<crate::types::HarvesterScheduleConfiguration>,
    /// <p>The Amazon Resource Name (ARN) of the created harvest job.</p>
    pub arn: ::std::string::String,
    /// <p>The date and time the harvest job was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The date and time the harvest job was last modified.</p>
    pub modified_at: ::aws_smithy_types::DateTime,
    /// <p>The current status of the harvest job (e.g., CREATED, IN_PROGRESS, ABORTED, COMPLETED, FAILED).</p>
    pub status: crate::types::HarvestJobStatus,
    /// <p>An error message if the harvest job creation failed.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
    /// <p>The current version of the harvest job. Used for concurrency control.</p>
    pub e_tag: ::std::option::Option<::std::string::String>,
    /// <p>A collection of tags associated with the harvest job.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl CreateHarvestJobOutput {
    /// <p>The name of the channel group containing the channel from which content is being harvested.</p>
    pub fn channel_group_name(&self) -> &str {
        use std::ops::Deref;
        self.channel_group_name.deref()
    }
    /// <p>The name of the channel from which content is being harvested.</p>
    pub fn channel_name(&self) -> &str {
        use std::ops::Deref;
        self.channel_name.deref()
    }
    /// <p>The name of the origin endpoint from which content is being harvested.</p>
    pub fn origin_endpoint_name(&self) -> &str {
        use std::ops::Deref;
        self.origin_endpoint_name.deref()
    }
    /// <p>The S3 destination where the harvested content will be placed.</p>
    pub fn destination(&self) -> ::std::option::Option<&crate::types::Destination> {
        self.destination.as_ref()
    }
    /// <p>The name of the created harvest job.</p>
    pub fn harvest_job_name(&self) -> &str {
        use std::ops::Deref;
        self.harvest_job_name.deref()
    }
    /// <p>A list of manifests that will be harvested.</p>
    pub fn harvested_manifests(&self) -> ::std::option::Option<&crate::types::HarvestedManifests> {
        self.harvested_manifests.as_ref()
    }
    /// <p>The description of the harvest job, if provided.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The configuration for when the harvest job will run, including start and end times.</p>
    pub fn schedule_configuration(&self) -> ::std::option::Option<&crate::types::HarvesterScheduleConfiguration> {
        self.schedule_configuration.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the created harvest job.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The date and time the harvest job was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The date and time the harvest job was last modified.</p>
    pub fn modified_at(&self) -> &::aws_smithy_types::DateTime {
        &self.modified_at
    }
    /// <p>The current status of the harvest job (e.g., CREATED, IN_PROGRESS, ABORTED, COMPLETED, FAILED).</p>
    pub fn status(&self) -> &crate::types::HarvestJobStatus {
        &self.status
    }
    /// <p>An error message if the harvest job creation failed.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>The current version of the harvest job. Used for concurrency control.</p>
    pub fn e_tag(&self) -> ::std::option::Option<&str> {
        self.e_tag.as_deref()
    }
    /// <p>A collection of tags associated with the harvest job.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for CreateHarvestJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateHarvestJobOutput {
    /// Creates a new builder-style object to manufacture [`CreateHarvestJobOutput`](crate::operation::create_harvest_job::CreateHarvestJobOutput).
    pub fn builder() -> crate::operation::create_harvest_job::builders::CreateHarvestJobOutputBuilder {
        crate::operation::create_harvest_job::builders::CreateHarvestJobOutputBuilder::default()
    }
}

/// A builder for [`CreateHarvestJobOutput`](crate::operation::create_harvest_job::CreateHarvestJobOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateHarvestJobOutputBuilder {
    pub(crate) channel_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) channel_name: ::std::option::Option<::std::string::String>,
    pub(crate) origin_endpoint_name: ::std::option::Option<::std::string::String>,
    pub(crate) destination: ::std::option::Option<crate::types::Destination>,
    pub(crate) harvest_job_name: ::std::option::Option<::std::string::String>,
    pub(crate) harvested_manifests: ::std::option::Option<crate::types::HarvestedManifests>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) schedule_configuration: ::std::option::Option<crate::types::HarvesterScheduleConfiguration>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::HarvestJobStatus>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
    pub(crate) e_tag: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl CreateHarvestJobOutputBuilder {
    /// <p>The name of the channel group containing the channel from which content is being harvested.</p>
    /// This field is required.
    pub fn channel_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the channel group containing the channel from which content is being harvested.</p>
    pub fn set_channel_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_group_name = input;
        self
    }
    /// <p>The name of the channel group containing the channel from which content is being harvested.</p>
    pub fn get_channel_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_group_name
    }
    /// <p>The name of the channel from which content is being harvested.</p>
    /// This field is required.
    pub fn channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the channel from which content is being harvested.</p>
    pub fn set_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>The name of the channel from which content is being harvested.</p>
    pub fn get_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_name
    }
    /// <p>The name of the origin endpoint from which content is being harvested.</p>
    /// This field is required.
    pub fn origin_endpoint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.origin_endpoint_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the origin endpoint from which content is being harvested.</p>
    pub fn set_origin_endpoint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.origin_endpoint_name = input;
        self
    }
    /// <p>The name of the origin endpoint from which content is being harvested.</p>
    pub fn get_origin_endpoint_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.origin_endpoint_name
    }
    /// <p>The S3 destination where the harvested content will be placed.</p>
    /// This field is required.
    pub fn destination(mut self, input: crate::types::Destination) -> Self {
        self.destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>The S3 destination where the harvested content will be placed.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<crate::types::Destination>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The S3 destination where the harvested content will be placed.</p>
    pub fn get_destination(&self) -> &::std::option::Option<crate::types::Destination> {
        &self.destination
    }
    /// <p>The name of the created harvest job.</p>
    /// This field is required.
    pub fn harvest_job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.harvest_job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the created harvest job.</p>
    pub fn set_harvest_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.harvest_job_name = input;
        self
    }
    /// <p>The name of the created harvest job.</p>
    pub fn get_harvest_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.harvest_job_name
    }
    /// <p>A list of manifests that will be harvested.</p>
    /// This field is required.
    pub fn harvested_manifests(mut self, input: crate::types::HarvestedManifests) -> Self {
        self.harvested_manifests = ::std::option::Option::Some(input);
        self
    }
    /// <p>A list of manifests that will be harvested.</p>
    pub fn set_harvested_manifests(mut self, input: ::std::option::Option<crate::types::HarvestedManifests>) -> Self {
        self.harvested_manifests = input;
        self
    }
    /// <p>A list of manifests that will be harvested.</p>
    pub fn get_harvested_manifests(&self) -> &::std::option::Option<crate::types::HarvestedManifests> {
        &self.harvested_manifests
    }
    /// <p>The description of the harvest job, if provided.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the harvest job, if provided.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the harvest job, if provided.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The configuration for when the harvest job will run, including start and end times.</p>
    /// This field is required.
    pub fn schedule_configuration(mut self, input: crate::types::HarvesterScheduleConfiguration) -> Self {
        self.schedule_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for when the harvest job will run, including start and end times.</p>
    pub fn set_schedule_configuration(mut self, input: ::std::option::Option<crate::types::HarvesterScheduleConfiguration>) -> Self {
        self.schedule_configuration = input;
        self
    }
    /// <p>The configuration for when the harvest job will run, including start and end times.</p>
    pub fn get_schedule_configuration(&self) -> &::std::option::Option<crate::types::HarvesterScheduleConfiguration> {
        &self.schedule_configuration
    }
    /// <p>The Amazon Resource Name (ARN) of the created harvest job.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the created harvest job.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the created harvest job.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The date and time the harvest job was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the harvest job was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time the harvest job was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The date and time the harvest job was last modified.</p>
    /// This field is required.
    pub fn modified_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modified_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the harvest job was last modified.</p>
    pub fn set_modified_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modified_at = input;
        self
    }
    /// <p>The date and time the harvest job was last modified.</p>
    pub fn get_modified_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modified_at
    }
    /// <p>The current status of the harvest job (e.g., CREATED, IN_PROGRESS, ABORTED, COMPLETED, FAILED).</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::HarvestJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the harvest job (e.g., CREATED, IN_PROGRESS, ABORTED, COMPLETED, FAILED).</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::HarvestJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the harvest job (e.g., CREATED, IN_PROGRESS, ABORTED, COMPLETED, FAILED).</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::HarvestJobStatus> {
        &self.status
    }
    /// <p>An error message if the harvest job creation failed.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An error message if the harvest job creation failed.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>An error message if the harvest job creation failed.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// <p>The current version of the harvest job. Used for concurrency control.</p>
    pub fn e_tag(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.e_tag = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current version of the harvest job. Used for concurrency control.</p>
    pub fn set_e_tag(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.e_tag = input;
        self
    }
    /// <p>The current version of the harvest job. Used for concurrency control.</p>
    pub fn get_e_tag(&self) -> &::std::option::Option<::std::string::String> {
        &self.e_tag
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A collection of tags associated with the harvest job.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A collection of tags associated with the harvest job.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A collection of tags associated with the harvest job.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateHarvestJobOutput`](crate::operation::create_harvest_job::CreateHarvestJobOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`channel_group_name`](crate::operation::create_harvest_job::builders::CreateHarvestJobOutputBuilder::channel_group_name)
    /// - [`channel_name`](crate::operation::create_harvest_job::builders::CreateHarvestJobOutputBuilder::channel_name)
    /// - [`origin_endpoint_name`](crate::operation::create_harvest_job::builders::CreateHarvestJobOutputBuilder::origin_endpoint_name)
    /// - [`harvest_job_name`](crate::operation::create_harvest_job::builders::CreateHarvestJobOutputBuilder::harvest_job_name)
    /// - [`arn`](crate::operation::create_harvest_job::builders::CreateHarvestJobOutputBuilder::arn)
    /// - [`created_at`](crate::operation::create_harvest_job::builders::CreateHarvestJobOutputBuilder::created_at)
    /// - [`modified_at`](crate::operation::create_harvest_job::builders::CreateHarvestJobOutputBuilder::modified_at)
    /// - [`status`](crate::operation::create_harvest_job::builders::CreateHarvestJobOutputBuilder::status)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_harvest_job::CreateHarvestJobOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_harvest_job::CreateHarvestJobOutput {
            channel_group_name: self.channel_group_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "channel_group_name",
                    "channel_group_name was not specified but it is required when building CreateHarvestJobOutput",
                )
            })?,
            channel_name: self.channel_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "channel_name",
                    "channel_name was not specified but it is required when building CreateHarvestJobOutput",
                )
            })?,
            origin_endpoint_name: self.origin_endpoint_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "origin_endpoint_name",
                    "origin_endpoint_name was not specified but it is required when building CreateHarvestJobOutput",
                )
            })?,
            destination: self.destination,
            harvest_job_name: self.harvest_job_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "harvest_job_name",
                    "harvest_job_name was not specified but it is required when building CreateHarvestJobOutput",
                )
            })?,
            harvested_manifests: self.harvested_manifests,
            description: self.description,
            schedule_configuration: self.schedule_configuration,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building CreateHarvestJobOutput",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building CreateHarvestJobOutput",
                )
            })?,
            modified_at: self.modified_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "modified_at",
                    "modified_at was not specified but it is required when building CreateHarvestJobOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building CreateHarvestJobOutput",
                )
            })?,
            error_message: self.error_message,
            e_tag: self.e_tag,
            tags: self.tags,
            _request_id: self._request_id,
        })
    }
}
