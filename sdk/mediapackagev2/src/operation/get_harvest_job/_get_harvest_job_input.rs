// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The request object for retrieving a specific harvest job.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetHarvestJobInput {
    /// <p>The name of the channel group containing the channel associated with the harvest job.</p>
    pub channel_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the channel associated with the harvest job.</p>
    pub channel_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the origin endpoint associated with the harvest job.</p>
    pub origin_endpoint_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the harvest job to retrieve.</p>
    pub harvest_job_name: ::std::option::Option<::std::string::String>,
}
impl GetHarvestJobInput {
    /// <p>The name of the channel group containing the channel associated with the harvest job.</p>
    pub fn channel_group_name(&self) -> ::std::option::Option<&str> {
        self.channel_group_name.as_deref()
    }
    /// <p>The name of the channel associated with the harvest job.</p>
    pub fn channel_name(&self) -> ::std::option::Option<&str> {
        self.channel_name.as_deref()
    }
    /// <p>The name of the origin endpoint associated with the harvest job.</p>
    pub fn origin_endpoint_name(&self) -> ::std::option::Option<&str> {
        self.origin_endpoint_name.as_deref()
    }
    /// <p>The name of the harvest job to retrieve.</p>
    pub fn harvest_job_name(&self) -> ::std::option::Option<&str> {
        self.harvest_job_name.as_deref()
    }
}
impl GetHarvestJobInput {
    /// Creates a new builder-style object to manufacture [`GetHarvestJobInput`](crate::operation::get_harvest_job::GetHarvestJobInput).
    pub fn builder() -> crate::operation::get_harvest_job::builders::GetHarvestJobInputBuilder {
        crate::operation::get_harvest_job::builders::GetHarvestJobInputBuilder::default()
    }
}

/// A builder for [`GetHarvestJobInput`](crate::operation::get_harvest_job::GetHarvestJobInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetHarvestJobInputBuilder {
    pub(crate) channel_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) channel_name: ::std::option::Option<::std::string::String>,
    pub(crate) origin_endpoint_name: ::std::option::Option<::std::string::String>,
    pub(crate) harvest_job_name: ::std::option::Option<::std::string::String>,
}
impl GetHarvestJobInputBuilder {
    /// <p>The name of the channel group containing the channel associated with the harvest job.</p>
    /// This field is required.
    pub fn channel_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the channel group containing the channel associated with the harvest job.</p>
    pub fn set_channel_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_group_name = input;
        self
    }
    /// <p>The name of the channel group containing the channel associated with the harvest job.</p>
    pub fn get_channel_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_group_name
    }
    /// <p>The name of the channel associated with the harvest job.</p>
    /// This field is required.
    pub fn channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the channel associated with the harvest job.</p>
    pub fn set_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>The name of the channel associated with the harvest job.</p>
    pub fn get_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_name
    }
    /// <p>The name of the origin endpoint associated with the harvest job.</p>
    /// This field is required.
    pub fn origin_endpoint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.origin_endpoint_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the origin endpoint associated with the harvest job.</p>
    pub fn set_origin_endpoint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.origin_endpoint_name = input;
        self
    }
    /// <p>The name of the origin endpoint associated with the harvest job.</p>
    pub fn get_origin_endpoint_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.origin_endpoint_name
    }
    /// <p>The name of the harvest job to retrieve.</p>
    /// This field is required.
    pub fn harvest_job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.harvest_job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the harvest job to retrieve.</p>
    pub fn set_harvest_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.harvest_job_name = input;
        self
    }
    /// <p>The name of the harvest job to retrieve.</p>
    pub fn get_harvest_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.harvest_job_name
    }
    /// Consumes the builder and constructs a [`GetHarvestJobInput`](crate::operation::get_harvest_job::GetHarvestJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_harvest_job::GetHarvestJobInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_harvest_job::GetHarvestJobInput {
            channel_group_name: self.channel_group_name,
            channel_name: self.channel_name,
            origin_endpoint_name: self.origin_endpoint_name,
            harvest_job_name: self.harvest_job_name,
        })
    }
}
