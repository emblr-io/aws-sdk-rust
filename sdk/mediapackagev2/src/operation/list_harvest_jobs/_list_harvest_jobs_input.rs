// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The request object for listing harvest jobs.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListHarvestJobsInput {
    /// <p>The name of the channel group to filter the harvest jobs by. If specified, only harvest jobs associated with channels in this group will be returned.</p>
    pub channel_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the channel to filter the harvest jobs by. If specified, only harvest jobs associated with this channel will be returned.</p>
    pub channel_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the origin endpoint to filter the harvest jobs by. If specified, only harvest jobs associated with this origin endpoint will be returned.</p>
    pub origin_endpoint_name: ::std::option::Option<::std::string::String>,
    /// <p>The status to filter the harvest jobs by. If specified, only harvest jobs with this status will be returned.</p>
    pub status: ::std::option::Option<crate::types::HarvestJobStatus>,
    /// <p>The maximum number of harvest jobs to return in a single request. If not specified, a default value will be used.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>A token used for pagination. Provide this value in subsequent requests to retrieve the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListHarvestJobsInput {
    /// <p>The name of the channel group to filter the harvest jobs by. If specified, only harvest jobs associated with channels in this group will be returned.</p>
    pub fn channel_group_name(&self) -> ::std::option::Option<&str> {
        self.channel_group_name.as_deref()
    }
    /// <p>The name of the channel to filter the harvest jobs by. If specified, only harvest jobs associated with this channel will be returned.</p>
    pub fn channel_name(&self) -> ::std::option::Option<&str> {
        self.channel_name.as_deref()
    }
    /// <p>The name of the origin endpoint to filter the harvest jobs by. If specified, only harvest jobs associated with this origin endpoint will be returned.</p>
    pub fn origin_endpoint_name(&self) -> ::std::option::Option<&str> {
        self.origin_endpoint_name.as_deref()
    }
    /// <p>The status to filter the harvest jobs by. If specified, only harvest jobs with this status will be returned.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::HarvestJobStatus> {
        self.status.as_ref()
    }
    /// <p>The maximum number of harvest jobs to return in a single request. If not specified, a default value will be used.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>A token used for pagination. Provide this value in subsequent requests to retrieve the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListHarvestJobsInput {
    /// Creates a new builder-style object to manufacture [`ListHarvestJobsInput`](crate::operation::list_harvest_jobs::ListHarvestJobsInput).
    pub fn builder() -> crate::operation::list_harvest_jobs::builders::ListHarvestJobsInputBuilder {
        crate::operation::list_harvest_jobs::builders::ListHarvestJobsInputBuilder::default()
    }
}

/// A builder for [`ListHarvestJobsInput`](crate::operation::list_harvest_jobs::ListHarvestJobsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListHarvestJobsInputBuilder {
    pub(crate) channel_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) channel_name: ::std::option::Option<::std::string::String>,
    pub(crate) origin_endpoint_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::HarvestJobStatus>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListHarvestJobsInputBuilder {
    /// <p>The name of the channel group to filter the harvest jobs by. If specified, only harvest jobs associated with channels in this group will be returned.</p>
    /// This field is required.
    pub fn channel_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the channel group to filter the harvest jobs by. If specified, only harvest jobs associated with channels in this group will be returned.</p>
    pub fn set_channel_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_group_name = input;
        self
    }
    /// <p>The name of the channel group to filter the harvest jobs by. If specified, only harvest jobs associated with channels in this group will be returned.</p>
    pub fn get_channel_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_group_name
    }
    /// <p>The name of the channel to filter the harvest jobs by. If specified, only harvest jobs associated with this channel will be returned.</p>
    pub fn channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the channel to filter the harvest jobs by. If specified, only harvest jobs associated with this channel will be returned.</p>
    pub fn set_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>The name of the channel to filter the harvest jobs by. If specified, only harvest jobs associated with this channel will be returned.</p>
    pub fn get_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_name
    }
    /// <p>The name of the origin endpoint to filter the harvest jobs by. If specified, only harvest jobs associated with this origin endpoint will be returned.</p>
    pub fn origin_endpoint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.origin_endpoint_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the origin endpoint to filter the harvest jobs by. If specified, only harvest jobs associated with this origin endpoint will be returned.</p>
    pub fn set_origin_endpoint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.origin_endpoint_name = input;
        self
    }
    /// <p>The name of the origin endpoint to filter the harvest jobs by. If specified, only harvest jobs associated with this origin endpoint will be returned.</p>
    pub fn get_origin_endpoint_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.origin_endpoint_name
    }
    /// <p>The status to filter the harvest jobs by. If specified, only harvest jobs with this status will be returned.</p>
    pub fn status(mut self, input: crate::types::HarvestJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status to filter the harvest jobs by. If specified, only harvest jobs with this status will be returned.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::HarvestJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status to filter the harvest jobs by. If specified, only harvest jobs with this status will be returned.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::HarvestJobStatus> {
        &self.status
    }
    /// <p>The maximum number of harvest jobs to return in a single request. If not specified, a default value will be used.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of harvest jobs to return in a single request. If not specified, a default value will be used.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of harvest jobs to return in a single request. If not specified, a default value will be used.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>A token used for pagination. Provide this value in subsequent requests to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token used for pagination. Provide this value in subsequent requests to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token used for pagination. Provide this value in subsequent requests to retrieve the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListHarvestJobsInput`](crate::operation::list_harvest_jobs::ListHarvestJobsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_harvest_jobs::ListHarvestJobsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_harvest_jobs::ListHarvestJobsInput {
            channel_group_name: self.channel_group_name,
            channel_name: self.channel_name,
            origin_endpoint_name: self.origin_endpoint_name,
            status: self.status,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
