// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateKxScalingGroupInput {
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for the kdb environment, where you want to create the scaling group.</p>
    pub environment_id: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for the kdb scaling group.</p>
    pub scaling_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The memory and CPU capabilities of the scaling group host on which FinSpace Managed kdb clusters will be placed.</p>
    /// <p>You can add one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>kx.sg.large</code> – The host type with a configuration of 16 GiB memory and 2 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.xlarge</code> – The host type with a configuration of 32 GiB memory and 4 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.2xlarge</code> – The host type with a configuration of 64 GiB memory and 8 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.4xlarge</code> – The host type with a configuration of 108 GiB memory and 16 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.8xlarge</code> – The host type with a configuration of 216 GiB memory and 32 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.16xlarge</code> – The host type with a configuration of 432 GiB memory and 64 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.32xlarge</code> – The host type with a configuration of 864 GiB memory and 128 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg1.16xlarge</code> – The host type with a configuration of 1949 GiB memory and 64 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg1.24xlarge</code> – The host type with a configuration of 2948 GiB memory and 96 vCPUs.</p></li>
    /// </ul>
    pub host_type: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the availability zones.</p>
    pub availability_zone_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of key-value pairs to label the scaling group. You can add up to 50 tags to a scaling group.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateKxScalingGroupInput {
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>A unique identifier for the kdb environment, where you want to create the scaling group.</p>
    pub fn environment_id(&self) -> ::std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>A unique identifier for the kdb scaling group.</p>
    pub fn scaling_group_name(&self) -> ::std::option::Option<&str> {
        self.scaling_group_name.as_deref()
    }
    /// <p>The memory and CPU capabilities of the scaling group host on which FinSpace Managed kdb clusters will be placed.</p>
    /// <p>You can add one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>kx.sg.large</code> – The host type with a configuration of 16 GiB memory and 2 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.xlarge</code> – The host type with a configuration of 32 GiB memory and 4 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.2xlarge</code> – The host type with a configuration of 64 GiB memory and 8 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.4xlarge</code> – The host type with a configuration of 108 GiB memory and 16 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.8xlarge</code> – The host type with a configuration of 216 GiB memory and 32 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.16xlarge</code> – The host type with a configuration of 432 GiB memory and 64 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.32xlarge</code> – The host type with a configuration of 864 GiB memory and 128 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg1.16xlarge</code> – The host type with a configuration of 1949 GiB memory and 64 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg1.24xlarge</code> – The host type with a configuration of 2948 GiB memory and 96 vCPUs.</p></li>
    /// </ul>
    pub fn host_type(&self) -> ::std::option::Option<&str> {
        self.host_type.as_deref()
    }
    /// <p>The identifier of the availability zones.</p>
    pub fn availability_zone_id(&self) -> ::std::option::Option<&str> {
        self.availability_zone_id.as_deref()
    }
    /// <p>A list of key-value pairs to label the scaling group. You can add up to 50 tags to a scaling group.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateKxScalingGroupInput {
    /// Creates a new builder-style object to manufacture [`CreateKxScalingGroupInput`](crate::operation::create_kx_scaling_group::CreateKxScalingGroupInput).
    pub fn builder() -> crate::operation::create_kx_scaling_group::builders::CreateKxScalingGroupInputBuilder {
        crate::operation::create_kx_scaling_group::builders::CreateKxScalingGroupInputBuilder::default()
    }
}

/// A builder for [`CreateKxScalingGroupInput`](crate::operation::create_kx_scaling_group::CreateKxScalingGroupInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateKxScalingGroupInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) environment_id: ::std::option::Option<::std::string::String>,
    pub(crate) scaling_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) host_type: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone_id: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateKxScalingGroupInputBuilder {
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    /// This field is required.
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>A unique identifier for the kdb environment, where you want to create the scaling group.</p>
    /// This field is required.
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the kdb environment, where you want to create the scaling group.</p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>A unique identifier for the kdb environment, where you want to create the scaling group.</p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_id
    }
    /// <p>A unique identifier for the kdb scaling group.</p>
    /// This field is required.
    pub fn scaling_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scaling_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the kdb scaling group.</p>
    pub fn set_scaling_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scaling_group_name = input;
        self
    }
    /// <p>A unique identifier for the kdb scaling group.</p>
    pub fn get_scaling_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.scaling_group_name
    }
    /// <p>The memory and CPU capabilities of the scaling group host on which FinSpace Managed kdb clusters will be placed.</p>
    /// <p>You can add one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>kx.sg.large</code> – The host type with a configuration of 16 GiB memory and 2 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.xlarge</code> – The host type with a configuration of 32 GiB memory and 4 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.2xlarge</code> – The host type with a configuration of 64 GiB memory and 8 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.4xlarge</code> – The host type with a configuration of 108 GiB memory and 16 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.8xlarge</code> – The host type with a configuration of 216 GiB memory and 32 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.16xlarge</code> – The host type with a configuration of 432 GiB memory and 64 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.32xlarge</code> – The host type with a configuration of 864 GiB memory and 128 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg1.16xlarge</code> – The host type with a configuration of 1949 GiB memory and 64 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg1.24xlarge</code> – The host type with a configuration of 2948 GiB memory and 96 vCPUs.</p></li>
    /// </ul>
    /// This field is required.
    pub fn host_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.host_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The memory and CPU capabilities of the scaling group host on which FinSpace Managed kdb clusters will be placed.</p>
    /// <p>You can add one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>kx.sg.large</code> – The host type with a configuration of 16 GiB memory and 2 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.xlarge</code> – The host type with a configuration of 32 GiB memory and 4 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.2xlarge</code> – The host type with a configuration of 64 GiB memory and 8 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.4xlarge</code> – The host type with a configuration of 108 GiB memory and 16 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.8xlarge</code> – The host type with a configuration of 216 GiB memory and 32 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.16xlarge</code> – The host type with a configuration of 432 GiB memory and 64 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.32xlarge</code> – The host type with a configuration of 864 GiB memory and 128 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg1.16xlarge</code> – The host type with a configuration of 1949 GiB memory and 64 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg1.24xlarge</code> – The host type with a configuration of 2948 GiB memory and 96 vCPUs.</p></li>
    /// </ul>
    pub fn set_host_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.host_type = input;
        self
    }
    /// <p>The memory and CPU capabilities of the scaling group host on which FinSpace Managed kdb clusters will be placed.</p>
    /// <p>You can add one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>kx.sg.large</code> – The host type with a configuration of 16 GiB memory and 2 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.xlarge</code> – The host type with a configuration of 32 GiB memory and 4 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.2xlarge</code> – The host type with a configuration of 64 GiB memory and 8 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.4xlarge</code> – The host type with a configuration of 108 GiB memory and 16 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.8xlarge</code> – The host type with a configuration of 216 GiB memory and 32 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.16xlarge</code> – The host type with a configuration of 432 GiB memory and 64 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg.32xlarge</code> – The host type with a configuration of 864 GiB memory and 128 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg1.16xlarge</code> – The host type with a configuration of 1949 GiB memory and 64 vCPUs.</p></li>
    /// <li>
    /// <p><code>kx.sg1.24xlarge</code> – The host type with a configuration of 2948 GiB memory and 96 vCPUs.</p></li>
    /// </ul>
    pub fn get_host_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.host_type
    }
    /// <p>The identifier of the availability zones.</p>
    /// This field is required.
    pub fn availability_zone_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the availability zones.</p>
    pub fn set_availability_zone_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone_id = input;
        self
    }
    /// <p>The identifier of the availability zones.</p>
    pub fn get_availability_zone_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone_id
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of key-value pairs to label the scaling group. You can add up to 50 tags to a scaling group.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A list of key-value pairs to label the scaling group. You can add up to 50 tags to a scaling group.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of key-value pairs to label the scaling group. You can add up to 50 tags to a scaling group.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateKxScalingGroupInput`](crate::operation::create_kx_scaling_group::CreateKxScalingGroupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_kx_scaling_group::CreateKxScalingGroupInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_kx_scaling_group::CreateKxScalingGroupInput {
            client_token: self.client_token,
            environment_id: self.environment_id,
            scaling_group_name: self.scaling_group_name,
            host_type: self.host_type,
            availability_zone_id: self.availability_zone_id,
            tags: self.tags,
        })
    }
}
