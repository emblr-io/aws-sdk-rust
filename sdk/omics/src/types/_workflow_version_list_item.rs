// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of workflow version items.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkflowVersionListItem {
    /// <p>ARN of the workflow version.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The workflow's ID.</p>
    pub workflow_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the workflow version.</p>
    pub version_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the workflow version.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The status of the workflow version.</p>
    pub status: ::std::option::Option<crate::types::WorkflowStatus>,
    /// <p>The type of the workflow version.</p>
    pub r#type: ::std::option::Option<crate::types::WorkflowType>,
    /// <p>The digist of the workflow version.</p>
    pub digest: ::std::option::Option<::std::string::String>,
    /// <p>The creation time of the workflow version.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Metadata for the workflow version.</p>
    pub metadata: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl WorkflowVersionListItem {
    /// <p>ARN of the workflow version.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The workflow's ID.</p>
    pub fn workflow_id(&self) -> ::std::option::Option<&str> {
        self.workflow_id.as_deref()
    }
    /// <p>The name of the workflow version.</p>
    pub fn version_name(&self) -> ::std::option::Option<&str> {
        self.version_name.as_deref()
    }
    /// <p>The description of the workflow version.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The status of the workflow version.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::WorkflowStatus> {
        self.status.as_ref()
    }
    /// <p>The type of the workflow version.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::WorkflowType> {
        self.r#type.as_ref()
    }
    /// <p>The digist of the workflow version.</p>
    pub fn digest(&self) -> ::std::option::Option<&str> {
        self.digest.as_deref()
    }
    /// <p>The creation time of the workflow version.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>Metadata for the workflow version.</p>
    pub fn metadata(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.metadata.as_ref()
    }
}
impl WorkflowVersionListItem {
    /// Creates a new builder-style object to manufacture [`WorkflowVersionListItem`](crate::types::WorkflowVersionListItem).
    pub fn builder() -> crate::types::builders::WorkflowVersionListItemBuilder {
        crate::types::builders::WorkflowVersionListItemBuilder::default()
    }
}

/// A builder for [`WorkflowVersionListItem`](crate::types::WorkflowVersionListItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WorkflowVersionListItemBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) workflow_id: ::std::option::Option<::std::string::String>,
    pub(crate) version_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::WorkflowStatus>,
    pub(crate) r#type: ::std::option::Option<crate::types::WorkflowType>,
    pub(crate) digest: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) metadata: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl WorkflowVersionListItemBuilder {
    /// <p>ARN of the workflow version.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the workflow version.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>ARN of the workflow version.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The workflow's ID.</p>
    pub fn workflow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workflow_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The workflow's ID.</p>
    pub fn set_workflow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workflow_id = input;
        self
    }
    /// <p>The workflow's ID.</p>
    pub fn get_workflow_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workflow_id
    }
    /// <p>The name of the workflow version.</p>
    pub fn version_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the workflow version.</p>
    pub fn set_version_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_name = input;
        self
    }
    /// <p>The name of the workflow version.</p>
    pub fn get_version_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_name
    }
    /// <p>The description of the workflow version.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the workflow version.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the workflow version.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The status of the workflow version.</p>
    pub fn status(mut self, input: crate::types::WorkflowStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the workflow version.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::WorkflowStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the workflow version.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::WorkflowStatus> {
        &self.status
    }
    /// <p>The type of the workflow version.</p>
    pub fn r#type(mut self, input: crate::types::WorkflowType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the workflow version.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::WorkflowType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the workflow version.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::WorkflowType> {
        &self.r#type
    }
    /// <p>The digist of the workflow version.</p>
    pub fn digest(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.digest = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The digist of the workflow version.</p>
    pub fn set_digest(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.digest = input;
        self
    }
    /// <p>The digist of the workflow version.</p>
    pub fn get_digest(&self) -> &::std::option::Option<::std::string::String> {
        &self.digest
    }
    /// <p>The creation time of the workflow version.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation time of the workflow version.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The creation time of the workflow version.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// Adds a key-value pair to `metadata`.
    ///
    /// To override the contents of this collection use [`set_metadata`](Self::set_metadata).
    ///
    /// <p>Metadata for the workflow version.</p>
    pub fn metadata(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.metadata.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.metadata = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Metadata for the workflow version.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>Metadata for the workflow version.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.metadata
    }
    /// Consumes the builder and constructs a [`WorkflowVersionListItem`](crate::types::WorkflowVersionListItem).
    pub fn build(self) -> crate::types::WorkflowVersionListItem {
        crate::types::WorkflowVersionListItem {
            arn: self.arn,
            workflow_id: self.workflow_id,
            version_name: self.version_name,
            description: self.description,
            status: self.status,
            r#type: self.r#type,
            digest: self.digest,
            creation_time: self.creation_time,
            metadata: self.metadata,
        }
    }
}
