// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>S3 access configuration parameters.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3AccessConfig {
    /// <p>Location of the access logs.</p>
    pub access_log_location: ::std::option::Option<::std::string::String>,
}
impl S3AccessConfig {
    /// <p>Location of the access logs.</p>
    pub fn access_log_location(&self) -> ::std::option::Option<&str> {
        self.access_log_location.as_deref()
    }
}
impl S3AccessConfig {
    /// Creates a new builder-style object to manufacture [`S3AccessConfig`](crate::types::S3AccessConfig).
    pub fn builder() -> crate::types::builders::S3AccessConfigBuilder {
        crate::types::builders::S3AccessConfigBuilder::default()
    }
}

/// A builder for [`S3AccessConfig`](crate::types::S3AccessConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct S3AccessConfigBuilder {
    pub(crate) access_log_location: ::std::option::Option<::std::string::String>,
}
impl S3AccessConfigBuilder {
    /// <p>Location of the access logs.</p>
    pub fn access_log_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_log_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Location of the access logs.</p>
    pub fn set_access_log_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_log_location = input;
        self
    }
    /// <p>Location of the access logs.</p>
    pub fn get_access_log_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_log_location
    }
    /// Consumes the builder and constructs a [`S3AccessConfig`](crate::types::S3AccessConfig).
    pub fn build(self) -> crate::types::S3AccessConfig {
        crate::types::S3AccessConfig {
            access_log_location: self.access_log_location,
        }
    }
}
