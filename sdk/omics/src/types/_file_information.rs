// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a file.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FileInformation {
    /// <p>The file's total parts.</p>
    pub total_parts: ::std::option::Option<i32>,
    /// <p>The file's part size.</p>
    pub part_size: ::std::option::Option<i64>,
    /// <p>The file's content length.</p>
    pub content_length: ::std::option::Option<i64>,
    /// <p>The S3 URI metadata of a sequence store.</p>
    pub s3_access: ::std::option::Option<crate::types::ReadSetS3Access>,
}
impl FileInformation {
    /// <p>The file's total parts.</p>
    pub fn total_parts(&self) -> ::std::option::Option<i32> {
        self.total_parts
    }
    /// <p>The file's part size.</p>
    pub fn part_size(&self) -> ::std::option::Option<i64> {
        self.part_size
    }
    /// <p>The file's content length.</p>
    pub fn content_length(&self) -> ::std::option::Option<i64> {
        self.content_length
    }
    /// <p>The S3 URI metadata of a sequence store.</p>
    pub fn s3_access(&self) -> ::std::option::Option<&crate::types::ReadSetS3Access> {
        self.s3_access.as_ref()
    }
}
impl FileInformation {
    /// Creates a new builder-style object to manufacture [`FileInformation`](crate::types::FileInformation).
    pub fn builder() -> crate::types::builders::FileInformationBuilder {
        crate::types::builders::FileInformationBuilder::default()
    }
}

/// A builder for [`FileInformation`](crate::types::FileInformation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FileInformationBuilder {
    pub(crate) total_parts: ::std::option::Option<i32>,
    pub(crate) part_size: ::std::option::Option<i64>,
    pub(crate) content_length: ::std::option::Option<i64>,
    pub(crate) s3_access: ::std::option::Option<crate::types::ReadSetS3Access>,
}
impl FileInformationBuilder {
    /// <p>The file's total parts.</p>
    pub fn total_parts(mut self, input: i32) -> Self {
        self.total_parts = ::std::option::Option::Some(input);
        self
    }
    /// <p>The file's total parts.</p>
    pub fn set_total_parts(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_parts = input;
        self
    }
    /// <p>The file's total parts.</p>
    pub fn get_total_parts(&self) -> &::std::option::Option<i32> {
        &self.total_parts
    }
    /// <p>The file's part size.</p>
    pub fn part_size(mut self, input: i64) -> Self {
        self.part_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The file's part size.</p>
    pub fn set_part_size(mut self, input: ::std::option::Option<i64>) -> Self {
        self.part_size = input;
        self
    }
    /// <p>The file's part size.</p>
    pub fn get_part_size(&self) -> &::std::option::Option<i64> {
        &self.part_size
    }
    /// <p>The file's content length.</p>
    pub fn content_length(mut self, input: i64) -> Self {
        self.content_length = ::std::option::Option::Some(input);
        self
    }
    /// <p>The file's content length.</p>
    pub fn set_content_length(mut self, input: ::std::option::Option<i64>) -> Self {
        self.content_length = input;
        self
    }
    /// <p>The file's content length.</p>
    pub fn get_content_length(&self) -> &::std::option::Option<i64> {
        &self.content_length
    }
    /// <p>The S3 URI metadata of a sequence store.</p>
    pub fn s3_access(mut self, input: crate::types::ReadSetS3Access) -> Self {
        self.s3_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>The S3 URI metadata of a sequence store.</p>
    pub fn set_s3_access(mut self, input: ::std::option::Option<crate::types::ReadSetS3Access>) -> Self {
        self.s3_access = input;
        self
    }
    /// <p>The S3 URI metadata of a sequence store.</p>
    pub fn get_s3_access(&self) -> &::std::option::Option<crate::types::ReadSetS3Access> {
        &self.s3_access
    }
    /// Consumes the builder and constructs a [`FileInformation`](crate::types::FileInformation).
    pub fn build(self) -> crate::types::FileInformation {
        crate::types::FileInformation {
            total_parts: self.total_parts,
            part_size: self.part_size,
            content_length: self.content_length,
            s3_access: self.s3_access,
        }
    }
}
