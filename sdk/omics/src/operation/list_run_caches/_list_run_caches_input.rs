// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListRunCachesInput {
    /// <p>The maximum number of results to return.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Optional pagination token returned from a prior call to the <code>ListRunCaches</code> API operation.</p>
    pub starting_token: ::std::option::Option<::std::string::String>,
}
impl ListRunCachesInput {
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Optional pagination token returned from a prior call to the <code>ListRunCaches</code> API operation.</p>
    pub fn starting_token(&self) -> ::std::option::Option<&str> {
        self.starting_token.as_deref()
    }
}
impl ListRunCachesInput {
    /// Creates a new builder-style object to manufacture [`ListRunCachesInput`](crate::operation::list_run_caches::ListRunCachesInput).
    pub fn builder() -> crate::operation::list_run_caches::builders::ListRunCachesInputBuilder {
        crate::operation::list_run_caches::builders::ListRunCachesInputBuilder::default()
    }
}

/// A builder for [`ListRunCachesInput`](crate::operation::list_run_caches::ListRunCachesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListRunCachesInputBuilder {
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) starting_token: ::std::option::Option<::std::string::String>,
}
impl ListRunCachesInputBuilder {
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Optional pagination token returned from a prior call to the <code>ListRunCaches</code> API operation.</p>
    pub fn starting_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.starting_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional pagination token returned from a prior call to the <code>ListRunCaches</code> API operation.</p>
    pub fn set_starting_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.starting_token = input;
        self
    }
    /// <p>Optional pagination token returned from a prior call to the <code>ListRunCaches</code> API operation.</p>
    pub fn get_starting_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.starting_token
    }
    /// Consumes the builder and constructs a [`ListRunCachesInput`](crate::operation::list_run_caches::ListRunCachesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_run_caches::ListRunCachesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_run_caches::ListRunCachesInput {
            max_results: self.max_results,
            starting_token: self.starting_token,
        })
    }
}
