// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutS3AccessPolicyOutput {
    /// <p>The S3 access point ARN that now has the access policy.</p>
    pub s3_access_point_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services-generated Sequence Store or Reference Store ID.</p>
    pub store_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of store associated with the access point.</p>
    pub store_type: ::std::option::Option<crate::types::StoreType>,
    _request_id: Option<String>,
}
impl PutS3AccessPolicyOutput {
    /// <p>The S3 access point ARN that now has the access policy.</p>
    pub fn s3_access_point_arn(&self) -> ::std::option::Option<&str> {
        self.s3_access_point_arn.as_deref()
    }
    /// <p>The Amazon Web Services-generated Sequence Store or Reference Store ID.</p>
    pub fn store_id(&self) -> ::std::option::Option<&str> {
        self.store_id.as_deref()
    }
    /// <p>The type of store associated with the access point.</p>
    pub fn store_type(&self) -> ::std::option::Option<&crate::types::StoreType> {
        self.store_type.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for PutS3AccessPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutS3AccessPolicyOutput {
    /// Creates a new builder-style object to manufacture [`PutS3AccessPolicyOutput`](crate::operation::put_s3_access_policy::PutS3AccessPolicyOutput).
    pub fn builder() -> crate::operation::put_s3_access_policy::builders::PutS3AccessPolicyOutputBuilder {
        crate::operation::put_s3_access_policy::builders::PutS3AccessPolicyOutputBuilder::default()
    }
}

/// A builder for [`PutS3AccessPolicyOutput`](crate::operation::put_s3_access_policy::PutS3AccessPolicyOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PutS3AccessPolicyOutputBuilder {
    pub(crate) s3_access_point_arn: ::std::option::Option<::std::string::String>,
    pub(crate) store_id: ::std::option::Option<::std::string::String>,
    pub(crate) store_type: ::std::option::Option<crate::types::StoreType>,
    _request_id: Option<String>,
}
impl PutS3AccessPolicyOutputBuilder {
    /// <p>The S3 access point ARN that now has the access policy.</p>
    pub fn s3_access_point_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_access_point_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 access point ARN that now has the access policy.</p>
    pub fn set_s3_access_point_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_access_point_arn = input;
        self
    }
    /// <p>The S3 access point ARN that now has the access policy.</p>
    pub fn get_s3_access_point_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_access_point_arn
    }
    /// <p>The Amazon Web Services-generated Sequence Store or Reference Store ID.</p>
    pub fn store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.store_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services-generated Sequence Store or Reference Store ID.</p>
    pub fn set_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.store_id = input;
        self
    }
    /// <p>The Amazon Web Services-generated Sequence Store or Reference Store ID.</p>
    pub fn get_store_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.store_id
    }
    /// <p>The type of store associated with the access point.</p>
    pub fn store_type(mut self, input: crate::types::StoreType) -> Self {
        self.store_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of store associated with the access point.</p>
    pub fn set_store_type(mut self, input: ::std::option::Option<crate::types::StoreType>) -> Self {
        self.store_type = input;
        self
    }
    /// <p>The type of store associated with the access point.</p>
    pub fn get_store_type(&self) -> &::std::option::Option<crate::types::StoreType> {
        &self.store_type
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`PutS3AccessPolicyOutput`](crate::operation::put_s3_access_policy::PutS3AccessPolicyOutput).
    pub fn build(self) -> crate::operation::put_s3_access_policy::PutS3AccessPolicyOutput {
        crate::operation::put_s3_access_policy::PutS3AccessPolicyOutput {
            s3_access_point_arn: self.s3_access_point_arn,
            store_id: self.store_id,
            store_type: self.store_type,
            _request_id: self._request_id,
        }
    }
}
