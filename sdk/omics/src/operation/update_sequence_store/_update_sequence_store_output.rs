// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateSequenceStoreOutput {
    /// <p>The ID of the sequence store.</p>
    pub id: ::std::string::String,
    /// <p>The ARN of the sequence store.</p>
    pub arn: ::std::string::String,
    /// <p>The name of the sequence store.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Description of the sequence store.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Server-side encryption (SSE) settings for a store.</p>
    pub sse_config: ::std::option::Option<crate::types::SseConfig>,
    /// <p>The time when the store was created.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>The last-updated time of the Sequence Store.</p>
    pub update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The tags keys to propagate to the S3 objects associated with read sets in the sequence store.</p>
    pub propagated_set_level_tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The status of the sequence store.</p>
    pub status: ::std::option::Option<crate::types::SequenceStoreStatus>,
    /// <p>The status message of the sequence store.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>The S3 URI of a bucket and folder to store Read Sets that fail to upload.</p>
    pub fallback_location: ::std::option::Option<::std::string::String>,
    /// <p>The S3 access metadata of the sequence store.</p>
    pub s3_access: ::std::option::Option<crate::types::SequenceStoreS3Access>,
    /// <p>The ETag algorithm family to use on ingested read sets.</p>
    pub e_tag_algorithm_family: ::std::option::Option<crate::types::ETagAlgorithmFamily>,
    _request_id: Option<String>,
}
impl UpdateSequenceStoreOutput {
    /// <p>The ID of the sequence store.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The ARN of the sequence store.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The name of the sequence store.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Description of the sequence store.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Server-side encryption (SSE) settings for a store.</p>
    pub fn sse_config(&self) -> ::std::option::Option<&crate::types::SseConfig> {
        self.sse_config.as_ref()
    }
    /// <p>The time when the store was created.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>The last-updated time of the Sequence Store.</p>
    pub fn update_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
    /// <p>The tags keys to propagate to the S3 objects associated with read sets in the sequence store.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.propagated_set_level_tags.is_none()`.
    pub fn propagated_set_level_tags(&self) -> &[::std::string::String] {
        self.propagated_set_level_tags.as_deref().unwrap_or_default()
    }
    /// <p>The status of the sequence store.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::SequenceStoreStatus> {
        self.status.as_ref()
    }
    /// <p>The status message of the sequence store.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The S3 URI of a bucket and folder to store Read Sets that fail to upload.</p>
    pub fn fallback_location(&self) -> ::std::option::Option<&str> {
        self.fallback_location.as_deref()
    }
    /// <p>The S3 access metadata of the sequence store.</p>
    pub fn s3_access(&self) -> ::std::option::Option<&crate::types::SequenceStoreS3Access> {
        self.s3_access.as_ref()
    }
    /// <p>The ETag algorithm family to use on ingested read sets.</p>
    pub fn e_tag_algorithm_family(&self) -> ::std::option::Option<&crate::types::ETagAlgorithmFamily> {
        self.e_tag_algorithm_family.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for UpdateSequenceStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateSequenceStoreOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSequenceStoreOutput`](crate::operation::update_sequence_store::UpdateSequenceStoreOutput).
    pub fn builder() -> crate::operation::update_sequence_store::builders::UpdateSequenceStoreOutputBuilder {
        crate::operation::update_sequence_store::builders::UpdateSequenceStoreOutputBuilder::default()
    }
}

/// A builder for [`UpdateSequenceStoreOutput`](crate::operation::update_sequence_store::UpdateSequenceStoreOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateSequenceStoreOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) sse_config: ::std::option::Option<crate::types::SseConfig>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) propagated_set_level_tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) status: ::std::option::Option<crate::types::SequenceStoreStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) fallback_location: ::std::option::Option<::std::string::String>,
    pub(crate) s3_access: ::std::option::Option<crate::types::SequenceStoreS3Access>,
    pub(crate) e_tag_algorithm_family: ::std::option::Option<crate::types::ETagAlgorithmFamily>,
    _request_id: Option<String>,
}
impl UpdateSequenceStoreOutputBuilder {
    /// <p>The ID of the sequence store.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the sequence store.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the sequence store.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ARN of the sequence store.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the sequence store.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the sequence store.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the sequence store.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the sequence store.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the sequence store.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Description of the sequence store.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Description of the sequence store.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Description of the sequence store.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Server-side encryption (SSE) settings for a store.</p>
    pub fn sse_config(mut self, input: crate::types::SseConfig) -> Self {
        self.sse_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Server-side encryption (SSE) settings for a store.</p>
    pub fn set_sse_config(mut self, input: ::std::option::Option<crate::types::SseConfig>) -> Self {
        self.sse_config = input;
        self
    }
    /// <p>Server-side encryption (SSE) settings for a store.</p>
    pub fn get_sse_config(&self) -> &::std::option::Option<crate::types::SseConfig> {
        &self.sse_config
    }
    /// <p>The time when the store was created.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the store was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time when the store was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The last-updated time of the Sequence Store.</p>
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last-updated time of the Sequence Store.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The last-updated time of the Sequence Store.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// Appends an item to `propagated_set_level_tags`.
    ///
    /// To override the contents of this collection use [`set_propagated_set_level_tags`](Self::set_propagated_set_level_tags).
    ///
    /// <p>The tags keys to propagate to the S3 objects associated with read sets in the sequence store.</p>
    pub fn propagated_set_level_tags(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.propagated_set_level_tags.unwrap_or_default();
        v.push(input.into());
        self.propagated_set_level_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags keys to propagate to the S3 objects associated with read sets in the sequence store.</p>
    pub fn set_propagated_set_level_tags(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.propagated_set_level_tags = input;
        self
    }
    /// <p>The tags keys to propagate to the S3 objects associated with read sets in the sequence store.</p>
    pub fn get_propagated_set_level_tags(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.propagated_set_level_tags
    }
    /// <p>The status of the sequence store.</p>
    pub fn status(mut self, input: crate::types::SequenceStoreStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the sequence store.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SequenceStoreStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the sequence store.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SequenceStoreStatus> {
        &self.status
    }
    /// <p>The status message of the sequence store.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status message of the sequence store.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The status message of the sequence store.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>The S3 URI of a bucket and folder to store Read Sets that fail to upload.</p>
    pub fn fallback_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fallback_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 URI of a bucket and folder to store Read Sets that fail to upload.</p>
    pub fn set_fallback_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fallback_location = input;
        self
    }
    /// <p>The S3 URI of a bucket and folder to store Read Sets that fail to upload.</p>
    pub fn get_fallback_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.fallback_location
    }
    /// <p>The S3 access metadata of the sequence store.</p>
    pub fn s3_access(mut self, input: crate::types::SequenceStoreS3Access) -> Self {
        self.s3_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>The S3 access metadata of the sequence store.</p>
    pub fn set_s3_access(mut self, input: ::std::option::Option<crate::types::SequenceStoreS3Access>) -> Self {
        self.s3_access = input;
        self
    }
    /// <p>The S3 access metadata of the sequence store.</p>
    pub fn get_s3_access(&self) -> &::std::option::Option<crate::types::SequenceStoreS3Access> {
        &self.s3_access
    }
    /// <p>The ETag algorithm family to use on ingested read sets.</p>
    pub fn e_tag_algorithm_family(mut self, input: crate::types::ETagAlgorithmFamily) -> Self {
        self.e_tag_algorithm_family = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ETag algorithm family to use on ingested read sets.</p>
    pub fn set_e_tag_algorithm_family(mut self, input: ::std::option::Option<crate::types::ETagAlgorithmFamily>) -> Self {
        self.e_tag_algorithm_family = input;
        self
    }
    /// <p>The ETag algorithm family to use on ingested read sets.</p>
    pub fn get_e_tag_algorithm_family(&self) -> &::std::option::Option<crate::types::ETagAlgorithmFamily> {
        &self.e_tag_algorithm_family
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateSequenceStoreOutput`](crate::operation::update_sequence_store::UpdateSequenceStoreOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::operation::update_sequence_store::builders::UpdateSequenceStoreOutputBuilder::id)
    /// - [`arn`](crate::operation::update_sequence_store::builders::UpdateSequenceStoreOutputBuilder::arn)
    /// - [`creation_time`](crate::operation::update_sequence_store::builders::UpdateSequenceStoreOutputBuilder::creation_time)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_sequence_store::UpdateSequenceStoreOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_sequence_store::UpdateSequenceStoreOutput {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building UpdateSequenceStoreOutput",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building UpdateSequenceStoreOutput",
                )
            })?,
            name: self.name,
            description: self.description,
            sse_config: self.sse_config,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building UpdateSequenceStoreOutput",
                )
            })?,
            update_time: self.update_time,
            propagated_set_level_tags: self.propagated_set_level_tags,
            status: self.status,
            status_message: self.status_message,
            fallback_location: self.fallback_location,
            s3_access: self.s3_access,
            e_tag_algorithm_family: self.e_tag_algorithm_family,
            _request_id: self._request_id,
        })
    }
}
