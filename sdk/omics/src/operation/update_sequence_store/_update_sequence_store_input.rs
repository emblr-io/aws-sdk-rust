// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateSequenceStoreInput {
    /// <p>The ID of the sequence store.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>A name for the sequence store.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description for the sequence store.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>To ensure that requests don't run multiple times, specify a unique token for each request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The S3 URI of a bucket and folder to store Read Sets that fail to upload.</p>
    pub fallback_location: ::std::option::Option<::std::string::String>,
    /// <p>The tags keys to propagate to the S3 objects associated with read sets in the sequence store.</p>
    pub propagated_set_level_tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>S3 access configuration parameters.</p>
    pub s3_access_config: ::std::option::Option<crate::types::S3AccessConfig>,
}
impl UpdateSequenceStoreInput {
    /// <p>The ID of the sequence store.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>A name for the sequence store.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description for the sequence store.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>To ensure that requests don't run multiple times, specify a unique token for each request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The S3 URI of a bucket and folder to store Read Sets that fail to upload.</p>
    pub fn fallback_location(&self) -> ::std::option::Option<&str> {
        self.fallback_location.as_deref()
    }
    /// <p>The tags keys to propagate to the S3 objects associated with read sets in the sequence store.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.propagated_set_level_tags.is_none()`.
    pub fn propagated_set_level_tags(&self) -> &[::std::string::String] {
        self.propagated_set_level_tags.as_deref().unwrap_or_default()
    }
    /// <p>S3 access configuration parameters.</p>
    pub fn s3_access_config(&self) -> ::std::option::Option<&crate::types::S3AccessConfig> {
        self.s3_access_config.as_ref()
    }
}
impl UpdateSequenceStoreInput {
    /// Creates a new builder-style object to manufacture [`UpdateSequenceStoreInput`](crate::operation::update_sequence_store::UpdateSequenceStoreInput).
    pub fn builder() -> crate::operation::update_sequence_store::builders::UpdateSequenceStoreInputBuilder {
        crate::operation::update_sequence_store::builders::UpdateSequenceStoreInputBuilder::default()
    }
}

/// A builder for [`UpdateSequenceStoreInput`](crate::operation::update_sequence_store::UpdateSequenceStoreInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateSequenceStoreInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) fallback_location: ::std::option::Option<::std::string::String>,
    pub(crate) propagated_set_level_tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) s3_access_config: ::std::option::Option<crate::types::S3AccessConfig>,
}
impl UpdateSequenceStoreInputBuilder {
    /// <p>The ID of the sequence store.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the sequence store.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the sequence store.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>A name for the sequence store.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the sequence store.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name for the sequence store.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description for the sequence store.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description for the sequence store.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description for the sequence store.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>To ensure that requests don't run multiple times, specify a unique token for each request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>To ensure that requests don't run multiple times, specify a unique token for each request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>To ensure that requests don't run multiple times, specify a unique token for each request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The S3 URI of a bucket and folder to store Read Sets that fail to upload.</p>
    pub fn fallback_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fallback_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 URI of a bucket and folder to store Read Sets that fail to upload.</p>
    pub fn set_fallback_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fallback_location = input;
        self
    }
    /// <p>The S3 URI of a bucket and folder to store Read Sets that fail to upload.</p>
    pub fn get_fallback_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.fallback_location
    }
    /// Appends an item to `propagated_set_level_tags`.
    ///
    /// To override the contents of this collection use [`set_propagated_set_level_tags`](Self::set_propagated_set_level_tags).
    ///
    /// <p>The tags keys to propagate to the S3 objects associated with read sets in the sequence store.</p>
    pub fn propagated_set_level_tags(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.propagated_set_level_tags.unwrap_or_default();
        v.push(input.into());
        self.propagated_set_level_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags keys to propagate to the S3 objects associated with read sets in the sequence store.</p>
    pub fn set_propagated_set_level_tags(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.propagated_set_level_tags = input;
        self
    }
    /// <p>The tags keys to propagate to the S3 objects associated with read sets in the sequence store.</p>
    pub fn get_propagated_set_level_tags(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.propagated_set_level_tags
    }
    /// <p>S3 access configuration parameters.</p>
    pub fn s3_access_config(mut self, input: crate::types::S3AccessConfig) -> Self {
        self.s3_access_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>S3 access configuration parameters.</p>
    pub fn set_s3_access_config(mut self, input: ::std::option::Option<crate::types::S3AccessConfig>) -> Self {
        self.s3_access_config = input;
        self
    }
    /// <p>S3 access configuration parameters.</p>
    pub fn get_s3_access_config(&self) -> &::std::option::Option<crate::types::S3AccessConfig> {
        &self.s3_access_config
    }
    /// Consumes the builder and constructs a [`UpdateSequenceStoreInput`](crate::operation::update_sequence_store::UpdateSequenceStoreInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_sequence_store::UpdateSequenceStoreInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_sequence_store::UpdateSequenceStoreInput {
            id: self.id,
            name: self.name,
            description: self.description,
            client_token: self.client_token,
            fallback_location: self.fallback_location,
            propagated_set_level_tags: self.propagated_set_level_tags,
            s3_access_config: self.s3_access_config,
        })
    }
}
