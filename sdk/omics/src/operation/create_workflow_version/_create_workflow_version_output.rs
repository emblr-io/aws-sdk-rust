// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateWorkflowVersionOutput {
    /// <p>ARN of the workflow version.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The workflow's ID.</p>
    pub workflow_id: ::std::option::Option<::std::string::String>,
    /// <p>The workflow version name.</p>
    pub version_name: ::std::option::Option<::std::string::String>,
    /// <p>The workflow version status.</p>
    pub status: ::std::option::Option<crate::types::WorkflowStatus>,
    /// <p>The workflow version's tags.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The universally unique identifier (UUID) value for this workflow version.</p>
    pub uuid: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateWorkflowVersionOutput {
    /// <p>ARN of the workflow version.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The workflow's ID.</p>
    pub fn workflow_id(&self) -> ::std::option::Option<&str> {
        self.workflow_id.as_deref()
    }
    /// <p>The workflow version name.</p>
    pub fn version_name(&self) -> ::std::option::Option<&str> {
        self.version_name.as_deref()
    }
    /// <p>The workflow version status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::WorkflowStatus> {
        self.status.as_ref()
    }
    /// <p>The workflow version's tags.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The universally unique identifier (UUID) value for this workflow version.</p>
    pub fn uuid(&self) -> ::std::option::Option<&str> {
        self.uuid.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for CreateWorkflowVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateWorkflowVersionOutput {
    /// Creates a new builder-style object to manufacture [`CreateWorkflowVersionOutput`](crate::operation::create_workflow_version::CreateWorkflowVersionOutput).
    pub fn builder() -> crate::operation::create_workflow_version::builders::CreateWorkflowVersionOutputBuilder {
        crate::operation::create_workflow_version::builders::CreateWorkflowVersionOutputBuilder::default()
    }
}

/// A builder for [`CreateWorkflowVersionOutput`](crate::operation::create_workflow_version::CreateWorkflowVersionOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateWorkflowVersionOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) workflow_id: ::std::option::Option<::std::string::String>,
    pub(crate) version_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::WorkflowStatus>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) uuid: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateWorkflowVersionOutputBuilder {
    /// <p>ARN of the workflow version.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the workflow version.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>ARN of the workflow version.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The workflow's ID.</p>
    pub fn workflow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workflow_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The workflow's ID.</p>
    pub fn set_workflow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workflow_id = input;
        self
    }
    /// <p>The workflow's ID.</p>
    pub fn get_workflow_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workflow_id
    }
    /// <p>The workflow version name.</p>
    pub fn version_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The workflow version name.</p>
    pub fn set_version_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_name = input;
        self
    }
    /// <p>The workflow version name.</p>
    pub fn get_version_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_name
    }
    /// <p>The workflow version status.</p>
    pub fn status(mut self, input: crate::types::WorkflowStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The workflow version status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::WorkflowStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The workflow version status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::WorkflowStatus> {
        &self.status
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The workflow version's tags.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The workflow version's tags.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The workflow version's tags.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The universally unique identifier (UUID) value for this workflow version.</p>
    pub fn uuid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.uuid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The universally unique identifier (UUID) value for this workflow version.</p>
    pub fn set_uuid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.uuid = input;
        self
    }
    /// <p>The universally unique identifier (UUID) value for this workflow version.</p>
    pub fn get_uuid(&self) -> &::std::option::Option<::std::string::String> {
        &self.uuid
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateWorkflowVersionOutput`](crate::operation::create_workflow_version::CreateWorkflowVersionOutput).
    pub fn build(self) -> crate::operation::create_workflow_version::CreateWorkflowVersionOutput {
        crate::operation::create_workflow_version::CreateWorkflowVersionOutput {
            arn: self.arn,
            workflow_id: self.workflow_id,
            version_name: self.version_name,
            status: self.status,
            tags: self.tags,
            uuid: self.uuid,
            _request_id: self._request_id,
        }
    }
}
