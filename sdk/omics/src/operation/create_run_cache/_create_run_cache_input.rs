// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateRunCacheInput {
    /// <p>Default cache behavior for runs that use this cache. Supported values are:</p>
    /// <p><code>CACHE_ON_FAILURE</code>: Caches task outputs from completed tasks for runs that fail. This setting is useful if you're debugging a workflow that fails after several tasks completed successfully. The subsequent run uses the cache outputs for previously-completed tasks if the task definition, inputs, and container in ECR are identical to the prior run.</p>
    /// <p><code>CACHE_ALWAYS</code>: Caches task outputs from completed tasks for all runs. This setting is useful in development mode, but do not use it in a production setting.</p>
    /// <p>If you don't specify a value, the default behavior is CACHE_ON_FAILURE. When you start a run that uses this cache, you can override the default cache behavior.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/omics/latest/dev/how-run-cache.html#run-cache-behavior">Run cache behavior</a> in the Amazon Web Services HealthOmics User Guide.</p>
    pub cache_behavior: ::std::option::Option<crate::types::CacheBehavior>,
    /// <p>Specify the S3 location for storing the cached task outputs. This data must be immediately accessible (not in an archived state).</p>
    pub cache_s3_location: ::std::option::Option<::std::string::String>,
    /// <p>Enter a description of the run cache.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Enter a user-friendly name for the run cache.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A unique request token, to ensure idempotency. If you don't specify a token, Amazon Web Services HealthOmics automatically generates a universally unique identifier (UUID) for the request.</p>
    pub request_id: ::std::option::Option<::std::string::String>,
    /// <p>Specify one or more tags to associate with this run cache.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The Amazon Web Services account ID of the expected owner of the S3 bucket for the run cache. If not provided, your account ID is set as the owner of the bucket.</p>
    pub cache_bucket_owner_id: ::std::option::Option<::std::string::String>,
}
impl CreateRunCacheInput {
    /// <p>Default cache behavior for runs that use this cache. Supported values are:</p>
    /// <p><code>CACHE_ON_FAILURE</code>: Caches task outputs from completed tasks for runs that fail. This setting is useful if you're debugging a workflow that fails after several tasks completed successfully. The subsequent run uses the cache outputs for previously-completed tasks if the task definition, inputs, and container in ECR are identical to the prior run.</p>
    /// <p><code>CACHE_ALWAYS</code>: Caches task outputs from completed tasks for all runs. This setting is useful in development mode, but do not use it in a production setting.</p>
    /// <p>If you don't specify a value, the default behavior is CACHE_ON_FAILURE. When you start a run that uses this cache, you can override the default cache behavior.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/omics/latest/dev/how-run-cache.html#run-cache-behavior">Run cache behavior</a> in the Amazon Web Services HealthOmics User Guide.</p>
    pub fn cache_behavior(&self) -> ::std::option::Option<&crate::types::CacheBehavior> {
        self.cache_behavior.as_ref()
    }
    /// <p>Specify the S3 location for storing the cached task outputs. This data must be immediately accessible (not in an archived state).</p>
    pub fn cache_s3_location(&self) -> ::std::option::Option<&str> {
        self.cache_s3_location.as_deref()
    }
    /// <p>Enter a description of the run cache.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Enter a user-friendly name for the run cache.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A unique request token, to ensure idempotency. If you don't specify a token, Amazon Web Services HealthOmics automatically generates a universally unique identifier (UUID) for the request.</p>
    pub fn request_id(&self) -> ::std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>Specify one or more tags to associate with this run cache.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The Amazon Web Services account ID of the expected owner of the S3 bucket for the run cache. If not provided, your account ID is set as the owner of the bucket.</p>
    pub fn cache_bucket_owner_id(&self) -> ::std::option::Option<&str> {
        self.cache_bucket_owner_id.as_deref()
    }
}
impl CreateRunCacheInput {
    /// Creates a new builder-style object to manufacture [`CreateRunCacheInput`](crate::operation::create_run_cache::CreateRunCacheInput).
    pub fn builder() -> crate::operation::create_run_cache::builders::CreateRunCacheInputBuilder {
        crate::operation::create_run_cache::builders::CreateRunCacheInputBuilder::default()
    }
}

/// A builder for [`CreateRunCacheInput`](crate::operation::create_run_cache::CreateRunCacheInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateRunCacheInputBuilder {
    pub(crate) cache_behavior: ::std::option::Option<crate::types::CacheBehavior>,
    pub(crate) cache_s3_location: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) cache_bucket_owner_id: ::std::option::Option<::std::string::String>,
}
impl CreateRunCacheInputBuilder {
    /// <p>Default cache behavior for runs that use this cache. Supported values are:</p>
    /// <p><code>CACHE_ON_FAILURE</code>: Caches task outputs from completed tasks for runs that fail. This setting is useful if you're debugging a workflow that fails after several tasks completed successfully. The subsequent run uses the cache outputs for previously-completed tasks if the task definition, inputs, and container in ECR are identical to the prior run.</p>
    /// <p><code>CACHE_ALWAYS</code>: Caches task outputs from completed tasks for all runs. This setting is useful in development mode, but do not use it in a production setting.</p>
    /// <p>If you don't specify a value, the default behavior is CACHE_ON_FAILURE. When you start a run that uses this cache, you can override the default cache behavior.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/omics/latest/dev/how-run-cache.html#run-cache-behavior">Run cache behavior</a> in the Amazon Web Services HealthOmics User Guide.</p>
    pub fn cache_behavior(mut self, input: crate::types::CacheBehavior) -> Self {
        self.cache_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>Default cache behavior for runs that use this cache. Supported values are:</p>
    /// <p><code>CACHE_ON_FAILURE</code>: Caches task outputs from completed tasks for runs that fail. This setting is useful if you're debugging a workflow that fails after several tasks completed successfully. The subsequent run uses the cache outputs for previously-completed tasks if the task definition, inputs, and container in ECR are identical to the prior run.</p>
    /// <p><code>CACHE_ALWAYS</code>: Caches task outputs from completed tasks for all runs. This setting is useful in development mode, but do not use it in a production setting.</p>
    /// <p>If you don't specify a value, the default behavior is CACHE_ON_FAILURE. When you start a run that uses this cache, you can override the default cache behavior.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/omics/latest/dev/how-run-cache.html#run-cache-behavior">Run cache behavior</a> in the Amazon Web Services HealthOmics User Guide.</p>
    pub fn set_cache_behavior(mut self, input: ::std::option::Option<crate::types::CacheBehavior>) -> Self {
        self.cache_behavior = input;
        self
    }
    /// <p>Default cache behavior for runs that use this cache. Supported values are:</p>
    /// <p><code>CACHE_ON_FAILURE</code>: Caches task outputs from completed tasks for runs that fail. This setting is useful if you're debugging a workflow that fails after several tasks completed successfully. The subsequent run uses the cache outputs for previously-completed tasks if the task definition, inputs, and container in ECR are identical to the prior run.</p>
    /// <p><code>CACHE_ALWAYS</code>: Caches task outputs from completed tasks for all runs. This setting is useful in development mode, but do not use it in a production setting.</p>
    /// <p>If you don't specify a value, the default behavior is CACHE_ON_FAILURE. When you start a run that uses this cache, you can override the default cache behavior.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/omics/latest/dev/how-run-cache.html#run-cache-behavior">Run cache behavior</a> in the Amazon Web Services HealthOmics User Guide.</p>
    pub fn get_cache_behavior(&self) -> &::std::option::Option<crate::types::CacheBehavior> {
        &self.cache_behavior
    }
    /// <p>Specify the S3 location for storing the cached task outputs. This data must be immediately accessible (not in an archived state).</p>
    /// This field is required.
    pub fn cache_s3_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cache_s3_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify the S3 location for storing the cached task outputs. This data must be immediately accessible (not in an archived state).</p>
    pub fn set_cache_s3_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cache_s3_location = input;
        self
    }
    /// <p>Specify the S3 location for storing the cached task outputs. This data must be immediately accessible (not in an archived state).</p>
    pub fn get_cache_s3_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.cache_s3_location
    }
    /// <p>Enter a description of the run cache.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Enter a description of the run cache.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Enter a description of the run cache.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Enter a user-friendly name for the run cache.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Enter a user-friendly name for the run cache.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Enter a user-friendly name for the run cache.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A unique request token, to ensure idempotency. If you don't specify a token, Amazon Web Services HealthOmics automatically generates a universally unique identifier (UUID) for the request.</p>
    /// This field is required.
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique request token, to ensure idempotency. If you don't specify a token, Amazon Web Services HealthOmics automatically generates a universally unique identifier (UUID) for the request.</p>
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>A unique request token, to ensure idempotency. If you don't specify a token, Amazon Web Services HealthOmics automatically generates a universally unique identifier (UUID) for the request.</p>
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Specify one or more tags to associate with this run cache.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Specify one or more tags to associate with this run cache.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Specify one or more tags to associate with this run cache.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The Amazon Web Services account ID of the expected owner of the S3 bucket for the run cache. If not provided, your account ID is set as the owner of the bucket.</p>
    pub fn cache_bucket_owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cache_bucket_owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the expected owner of the S3 bucket for the run cache. If not provided, your account ID is set as the owner of the bucket.</p>
    pub fn set_cache_bucket_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cache_bucket_owner_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the expected owner of the S3 bucket for the run cache. If not provided, your account ID is set as the owner of the bucket.</p>
    pub fn get_cache_bucket_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cache_bucket_owner_id
    }
    /// Consumes the builder and constructs a [`CreateRunCacheInput`](crate::operation::create_run_cache::CreateRunCacheInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_run_cache::CreateRunCacheInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_run_cache::CreateRunCacheInput {
            cache_behavior: self.cache_behavior,
            cache_s3_location: self.cache_s3_location,
            description: self.description,
            name: self.name,
            request_id: self.request_id,
            tags: self.tags,
            cache_bucket_owner_id: self.cache_bucket_owner_id,
        })
    }
}
