// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateRunCacheInput {
    /// <p>Update the default run cache behavior.</p>
    pub cache_behavior: ::std::option::Option<crate::types::CacheBehavior>,
    /// <p>Update the run cache description.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the run cache you want to update.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>Update the name of the run cache.</p>
    pub name: ::std::option::Option<::std::string::String>,
}
impl UpdateRunCacheInput {
    /// <p>Update the default run cache behavior.</p>
    pub fn cache_behavior(&self) -> ::std::option::Option<&crate::types::CacheBehavior> {
        self.cache_behavior.as_ref()
    }
    /// <p>Update the run cache description.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The identifier of the run cache you want to update.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Update the name of the run cache.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl UpdateRunCacheInput {
    /// Creates a new builder-style object to manufacture [`UpdateRunCacheInput`](crate::operation::update_run_cache::UpdateRunCacheInput).
    pub fn builder() -> crate::operation::update_run_cache::builders::UpdateRunCacheInputBuilder {
        crate::operation::update_run_cache::builders::UpdateRunCacheInputBuilder::default()
    }
}

/// A builder for [`UpdateRunCacheInput`](crate::operation::update_run_cache::UpdateRunCacheInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateRunCacheInputBuilder {
    pub(crate) cache_behavior: ::std::option::Option<crate::types::CacheBehavior>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
}
impl UpdateRunCacheInputBuilder {
    /// <p>Update the default run cache behavior.</p>
    pub fn cache_behavior(mut self, input: crate::types::CacheBehavior) -> Self {
        self.cache_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>Update the default run cache behavior.</p>
    pub fn set_cache_behavior(mut self, input: ::std::option::Option<crate::types::CacheBehavior>) -> Self {
        self.cache_behavior = input;
        self
    }
    /// <p>Update the default run cache behavior.</p>
    pub fn get_cache_behavior(&self) -> &::std::option::Option<crate::types::CacheBehavior> {
        &self.cache_behavior
    }
    /// <p>Update the run cache description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Update the run cache description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Update the run cache description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The identifier of the run cache you want to update.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the run cache you want to update.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the run cache you want to update.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Update the name of the run cache.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Update the name of the run cache.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Update the name of the run cache.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Consumes the builder and constructs a [`UpdateRunCacheInput`](crate::operation::update_run_cache::UpdateRunCacheInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_run_cache::UpdateRunCacheInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_run_cache::UpdateRunCacheInput {
            cache_behavior: self.cache_behavior,
            description: self.description,
            id: self.id,
            name: self.name,
        })
    }
}
