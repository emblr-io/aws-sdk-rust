// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartRunInput {
    /// <p>The run's workflow ID.</p>
    pub workflow_id: ::std::option::Option<::std::string::String>,
    /// <p>The run's workflow type.</p>
    pub workflow_type: ::std::option::Option<crate::types::WorkflowType>,
    /// <p>The ID of a run to duplicate.</p>
    pub run_id: ::std::option::Option<::std::string::String>,
    /// <p>A service role for the run.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>A name for the run.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Identifier of the cache associated with this run. If you don't specify a cache ID, no task outputs are cached for this run.</p>
    pub cache_id: ::std::option::Option<::std::string::String>,
    /// <p>The cache behavior for the run. You specify this value if you want to override the default behavior for the cache. You had set the default value when you created the cache. For more information, see <a href="https://docs.aws.amazon.com/omics/latest/dev/how-run-cache.html#run-cache-behavior">Run cache behavior</a> in the Amazon Web Services HealthOmics User Guide.</p>
    pub cache_behavior: ::std::option::Option<crate::types::CacheBehavior>,
    /// <p>The run's group ID.</p>
    pub run_group_id: ::std::option::Option<::std::string::String>,
    /// <p>A priority for the run.</p>
    pub priority: ::std::option::Option<i32>,
    /// <p>Parameters for the run.</p>
    pub parameters: ::std::option::Option<::aws_smithy_types::Document>,
    /// <p>The static storage capacity (in gibibytes) for this run. This field is not required if the storage type is dynamic (the system ignores any value that you enter).</p>
    pub storage_capacity: ::std::option::Option<i32>,
    /// <p>An output URI for the run.</p>
    pub output_uri: ::std::option::Option<::std::string::String>,
    /// <p>A log level for the run.</p>
    pub log_level: ::std::option::Option<crate::types::RunLogLevel>,
    /// <p>Tags for the run.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>To ensure that requests don't run multiple times, specify a unique ID for each request.</p>
    pub request_id: ::std::option::Option<::std::string::String>,
    /// <p>The retention mode for the run. The default value is RETAIN.</p>
    /// <p>Amazon Web Services HealthOmics stores a fixed number of runs that are available to the console and API. In the default mode (RETAIN), you need to remove runs manually when the number of run exceeds the maximum. If you set the retention mode to <code>REMOVE</code>, Amazon Web Services HealthOmics automatically removes runs (that have mode set to REMOVE) when the number of run exceeds the maximum. All run logs are available in CloudWatch logs, if you need information about a run that is no longer available to the API.</p>
    /// <p>For more information about retention mode, see <a href="https://docs.aws.amazon.com/omics/latest/dev/starting-a-run.html">Specifying run retention mode</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>
    pub retention_mode: ::std::option::Option<crate::types::RunRetentionMode>,
    /// <p>The storage type for the run. By default, the run uses STATIC storage type, which allocates a fixed amount of storage. If you set the storage type to DYNAMIC, Amazon Web Services HealthOmics dynamically scales the storage up or down, based on file system utilization. For more information about static and dynamic storage, see <a href="https://docs.aws.amazon.com/omics/latest/dev/Using-workflows.html">Running workflows</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>
    pub storage_type: ::std::option::Option<crate::types::StorageType>,
    /// <p>The ID of the workflow owner.</p>
    pub workflow_owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the workflow version.</p>
    pub workflow_version_name: ::std::option::Option<::std::string::String>,
}
impl StartRunInput {
    /// <p>The run's workflow ID.</p>
    pub fn workflow_id(&self) -> ::std::option::Option<&str> {
        self.workflow_id.as_deref()
    }
    /// <p>The run's workflow type.</p>
    pub fn workflow_type(&self) -> ::std::option::Option<&crate::types::WorkflowType> {
        self.workflow_type.as_ref()
    }
    /// <p>The ID of a run to duplicate.</p>
    pub fn run_id(&self) -> ::std::option::Option<&str> {
        self.run_id.as_deref()
    }
    /// <p>A service role for the run.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>A name for the run.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Identifier of the cache associated with this run. If you don't specify a cache ID, no task outputs are cached for this run.</p>
    pub fn cache_id(&self) -> ::std::option::Option<&str> {
        self.cache_id.as_deref()
    }
    /// <p>The cache behavior for the run. You specify this value if you want to override the default behavior for the cache. You had set the default value when you created the cache. For more information, see <a href="https://docs.aws.amazon.com/omics/latest/dev/how-run-cache.html#run-cache-behavior">Run cache behavior</a> in the Amazon Web Services HealthOmics User Guide.</p>
    pub fn cache_behavior(&self) -> ::std::option::Option<&crate::types::CacheBehavior> {
        self.cache_behavior.as_ref()
    }
    /// <p>The run's group ID.</p>
    pub fn run_group_id(&self) -> ::std::option::Option<&str> {
        self.run_group_id.as_deref()
    }
    /// <p>A priority for the run.</p>
    pub fn priority(&self) -> ::std::option::Option<i32> {
        self.priority
    }
    /// <p>Parameters for the run.</p>
    pub fn parameters(&self) -> ::std::option::Option<&::aws_smithy_types::Document> {
        self.parameters.as_ref()
    }
    /// <p>The static storage capacity (in gibibytes) for this run. This field is not required if the storage type is dynamic (the system ignores any value that you enter).</p>
    pub fn storage_capacity(&self) -> ::std::option::Option<i32> {
        self.storage_capacity
    }
    /// <p>An output URI for the run.</p>
    pub fn output_uri(&self) -> ::std::option::Option<&str> {
        self.output_uri.as_deref()
    }
    /// <p>A log level for the run.</p>
    pub fn log_level(&self) -> ::std::option::Option<&crate::types::RunLogLevel> {
        self.log_level.as_ref()
    }
    /// <p>Tags for the run.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>To ensure that requests don't run multiple times, specify a unique ID for each request.</p>
    pub fn request_id(&self) -> ::std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>The retention mode for the run. The default value is RETAIN.</p>
    /// <p>Amazon Web Services HealthOmics stores a fixed number of runs that are available to the console and API. In the default mode (RETAIN), you need to remove runs manually when the number of run exceeds the maximum. If you set the retention mode to <code>REMOVE</code>, Amazon Web Services HealthOmics automatically removes runs (that have mode set to REMOVE) when the number of run exceeds the maximum. All run logs are available in CloudWatch logs, if you need information about a run that is no longer available to the API.</p>
    /// <p>For more information about retention mode, see <a href="https://docs.aws.amazon.com/omics/latest/dev/starting-a-run.html">Specifying run retention mode</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>
    pub fn retention_mode(&self) -> ::std::option::Option<&crate::types::RunRetentionMode> {
        self.retention_mode.as_ref()
    }
    /// <p>The storage type for the run. By default, the run uses STATIC storage type, which allocates a fixed amount of storage. If you set the storage type to DYNAMIC, Amazon Web Services HealthOmics dynamically scales the storage up or down, based on file system utilization. For more information about static and dynamic storage, see <a href="https://docs.aws.amazon.com/omics/latest/dev/Using-workflows.html">Running workflows</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>
    pub fn storage_type(&self) -> ::std::option::Option<&crate::types::StorageType> {
        self.storage_type.as_ref()
    }
    /// <p>The ID of the workflow owner.</p>
    pub fn workflow_owner_id(&self) -> ::std::option::Option<&str> {
        self.workflow_owner_id.as_deref()
    }
    /// <p>The name of the workflow version.</p>
    pub fn workflow_version_name(&self) -> ::std::option::Option<&str> {
        self.workflow_version_name.as_deref()
    }
}
impl StartRunInput {
    /// Creates a new builder-style object to manufacture [`StartRunInput`](crate::operation::start_run::StartRunInput).
    pub fn builder() -> crate::operation::start_run::builders::StartRunInputBuilder {
        crate::operation::start_run::builders::StartRunInputBuilder::default()
    }
}

/// A builder for [`StartRunInput`](crate::operation::start_run::StartRunInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartRunInputBuilder {
    pub(crate) workflow_id: ::std::option::Option<::std::string::String>,
    pub(crate) workflow_type: ::std::option::Option<crate::types::WorkflowType>,
    pub(crate) run_id: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) cache_id: ::std::option::Option<::std::string::String>,
    pub(crate) cache_behavior: ::std::option::Option<crate::types::CacheBehavior>,
    pub(crate) run_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) priority: ::std::option::Option<i32>,
    pub(crate) parameters: ::std::option::Option<::aws_smithy_types::Document>,
    pub(crate) storage_capacity: ::std::option::Option<i32>,
    pub(crate) output_uri: ::std::option::Option<::std::string::String>,
    pub(crate) log_level: ::std::option::Option<crate::types::RunLogLevel>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
    pub(crate) retention_mode: ::std::option::Option<crate::types::RunRetentionMode>,
    pub(crate) storage_type: ::std::option::Option<crate::types::StorageType>,
    pub(crate) workflow_owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) workflow_version_name: ::std::option::Option<::std::string::String>,
}
impl StartRunInputBuilder {
    /// <p>The run's workflow ID.</p>
    pub fn workflow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workflow_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The run's workflow ID.</p>
    pub fn set_workflow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workflow_id = input;
        self
    }
    /// <p>The run's workflow ID.</p>
    pub fn get_workflow_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workflow_id
    }
    /// <p>The run's workflow type.</p>
    pub fn workflow_type(mut self, input: crate::types::WorkflowType) -> Self {
        self.workflow_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The run's workflow type.</p>
    pub fn set_workflow_type(mut self, input: ::std::option::Option<crate::types::WorkflowType>) -> Self {
        self.workflow_type = input;
        self
    }
    /// <p>The run's workflow type.</p>
    pub fn get_workflow_type(&self) -> &::std::option::Option<crate::types::WorkflowType> {
        &self.workflow_type
    }
    /// <p>The ID of a run to duplicate.</p>
    pub fn run_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.run_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of a run to duplicate.</p>
    pub fn set_run_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.run_id = input;
        self
    }
    /// <p>The ID of a run to duplicate.</p>
    pub fn get_run_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.run_id
    }
    /// <p>A service role for the run.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A service role for the run.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>A service role for the run.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>A name for the run.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the run.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name for the run.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Identifier of the cache associated with this run. If you don't specify a cache ID, no task outputs are cached for this run.</p>
    pub fn cache_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cache_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifier of the cache associated with this run. If you don't specify a cache ID, no task outputs are cached for this run.</p>
    pub fn set_cache_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cache_id = input;
        self
    }
    /// <p>Identifier of the cache associated with this run. If you don't specify a cache ID, no task outputs are cached for this run.</p>
    pub fn get_cache_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cache_id
    }
    /// <p>The cache behavior for the run. You specify this value if you want to override the default behavior for the cache. You had set the default value when you created the cache. For more information, see <a href="https://docs.aws.amazon.com/omics/latest/dev/how-run-cache.html#run-cache-behavior">Run cache behavior</a> in the Amazon Web Services HealthOmics User Guide.</p>
    pub fn cache_behavior(mut self, input: crate::types::CacheBehavior) -> Self {
        self.cache_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>The cache behavior for the run. You specify this value if you want to override the default behavior for the cache. You had set the default value when you created the cache. For more information, see <a href="https://docs.aws.amazon.com/omics/latest/dev/how-run-cache.html#run-cache-behavior">Run cache behavior</a> in the Amazon Web Services HealthOmics User Guide.</p>
    pub fn set_cache_behavior(mut self, input: ::std::option::Option<crate::types::CacheBehavior>) -> Self {
        self.cache_behavior = input;
        self
    }
    /// <p>The cache behavior for the run. You specify this value if you want to override the default behavior for the cache. You had set the default value when you created the cache. For more information, see <a href="https://docs.aws.amazon.com/omics/latest/dev/how-run-cache.html#run-cache-behavior">Run cache behavior</a> in the Amazon Web Services HealthOmics User Guide.</p>
    pub fn get_cache_behavior(&self) -> &::std::option::Option<crate::types::CacheBehavior> {
        &self.cache_behavior
    }
    /// <p>The run's group ID.</p>
    pub fn run_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.run_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The run's group ID.</p>
    pub fn set_run_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.run_group_id = input;
        self
    }
    /// <p>The run's group ID.</p>
    pub fn get_run_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.run_group_id
    }
    /// <p>A priority for the run.</p>
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = ::std::option::Option::Some(input);
        self
    }
    /// <p>A priority for the run.</p>
    pub fn set_priority(mut self, input: ::std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// <p>A priority for the run.</p>
    pub fn get_priority(&self) -> &::std::option::Option<i32> {
        &self.priority
    }
    /// <p>Parameters for the run.</p>
    pub fn parameters(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>Parameters for the run.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>Parameters for the run.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.parameters
    }
    /// <p>The static storage capacity (in gibibytes) for this run. This field is not required if the storage type is dynamic (the system ignores any value that you enter).</p>
    pub fn storage_capacity(mut self, input: i32) -> Self {
        self.storage_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The static storage capacity (in gibibytes) for this run. This field is not required if the storage type is dynamic (the system ignores any value that you enter).</p>
    pub fn set_storage_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.storage_capacity = input;
        self
    }
    /// <p>The static storage capacity (in gibibytes) for this run. This field is not required if the storage type is dynamic (the system ignores any value that you enter).</p>
    pub fn get_storage_capacity(&self) -> &::std::option::Option<i32> {
        &self.storage_capacity
    }
    /// <p>An output URI for the run.</p>
    pub fn output_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.output_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An output URI for the run.</p>
    pub fn set_output_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.output_uri = input;
        self
    }
    /// <p>An output URI for the run.</p>
    pub fn get_output_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.output_uri
    }
    /// <p>A log level for the run.</p>
    pub fn log_level(mut self, input: crate::types::RunLogLevel) -> Self {
        self.log_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>A log level for the run.</p>
    pub fn set_log_level(mut self, input: ::std::option::Option<crate::types::RunLogLevel>) -> Self {
        self.log_level = input;
        self
    }
    /// <p>A log level for the run.</p>
    pub fn get_log_level(&self) -> &::std::option::Option<crate::types::RunLogLevel> {
        &self.log_level
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags for the run.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Tags for the run.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Tags for the run.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>To ensure that requests don't run multiple times, specify a unique ID for each request.</p>
    /// This field is required.
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>To ensure that requests don't run multiple times, specify a unique ID for each request.</p>
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>To ensure that requests don't run multiple times, specify a unique ID for each request.</p>
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    /// <p>The retention mode for the run. The default value is RETAIN.</p>
    /// <p>Amazon Web Services HealthOmics stores a fixed number of runs that are available to the console and API. In the default mode (RETAIN), you need to remove runs manually when the number of run exceeds the maximum. If you set the retention mode to <code>REMOVE</code>, Amazon Web Services HealthOmics automatically removes runs (that have mode set to REMOVE) when the number of run exceeds the maximum. All run logs are available in CloudWatch logs, if you need information about a run that is no longer available to the API.</p>
    /// <p>For more information about retention mode, see <a href="https://docs.aws.amazon.com/omics/latest/dev/starting-a-run.html">Specifying run retention mode</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>
    pub fn retention_mode(mut self, input: crate::types::RunRetentionMode) -> Self {
        self.retention_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The retention mode for the run. The default value is RETAIN.</p>
    /// <p>Amazon Web Services HealthOmics stores a fixed number of runs that are available to the console and API. In the default mode (RETAIN), you need to remove runs manually when the number of run exceeds the maximum. If you set the retention mode to <code>REMOVE</code>, Amazon Web Services HealthOmics automatically removes runs (that have mode set to REMOVE) when the number of run exceeds the maximum. All run logs are available in CloudWatch logs, if you need information about a run that is no longer available to the API.</p>
    /// <p>For more information about retention mode, see <a href="https://docs.aws.amazon.com/omics/latest/dev/starting-a-run.html">Specifying run retention mode</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>
    pub fn set_retention_mode(mut self, input: ::std::option::Option<crate::types::RunRetentionMode>) -> Self {
        self.retention_mode = input;
        self
    }
    /// <p>The retention mode for the run. The default value is RETAIN.</p>
    /// <p>Amazon Web Services HealthOmics stores a fixed number of runs that are available to the console and API. In the default mode (RETAIN), you need to remove runs manually when the number of run exceeds the maximum. If you set the retention mode to <code>REMOVE</code>, Amazon Web Services HealthOmics automatically removes runs (that have mode set to REMOVE) when the number of run exceeds the maximum. All run logs are available in CloudWatch logs, if you need information about a run that is no longer available to the API.</p>
    /// <p>For more information about retention mode, see <a href="https://docs.aws.amazon.com/omics/latest/dev/starting-a-run.html">Specifying run retention mode</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>
    pub fn get_retention_mode(&self) -> &::std::option::Option<crate::types::RunRetentionMode> {
        &self.retention_mode
    }
    /// <p>The storage type for the run. By default, the run uses STATIC storage type, which allocates a fixed amount of storage. If you set the storage type to DYNAMIC, Amazon Web Services HealthOmics dynamically scales the storage up or down, based on file system utilization. For more information about static and dynamic storage, see <a href="https://docs.aws.amazon.com/omics/latest/dev/Using-workflows.html">Running workflows</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>
    pub fn storage_type(mut self, input: crate::types::StorageType) -> Self {
        self.storage_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The storage type for the run. By default, the run uses STATIC storage type, which allocates a fixed amount of storage. If you set the storage type to DYNAMIC, Amazon Web Services HealthOmics dynamically scales the storage up or down, based on file system utilization. For more information about static and dynamic storage, see <a href="https://docs.aws.amazon.com/omics/latest/dev/Using-workflows.html">Running workflows</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>
    pub fn set_storage_type(mut self, input: ::std::option::Option<crate::types::StorageType>) -> Self {
        self.storage_type = input;
        self
    }
    /// <p>The storage type for the run. By default, the run uses STATIC storage type, which allocates a fixed amount of storage. If you set the storage type to DYNAMIC, Amazon Web Services HealthOmics dynamically scales the storage up or down, based on file system utilization. For more information about static and dynamic storage, see <a href="https://docs.aws.amazon.com/omics/latest/dev/Using-workflows.html">Running workflows</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>
    pub fn get_storage_type(&self) -> &::std::option::Option<crate::types::StorageType> {
        &self.storage_type
    }
    /// <p>The ID of the workflow owner.</p>
    pub fn workflow_owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workflow_owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the workflow owner.</p>
    pub fn set_workflow_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workflow_owner_id = input;
        self
    }
    /// <p>The ID of the workflow owner.</p>
    pub fn get_workflow_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workflow_owner_id
    }
    /// <p>The name of the workflow version.</p>
    pub fn workflow_version_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workflow_version_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the workflow version.</p>
    pub fn set_workflow_version_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workflow_version_name = input;
        self
    }
    /// <p>The name of the workflow version.</p>
    pub fn get_workflow_version_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.workflow_version_name
    }
    /// Consumes the builder and constructs a [`StartRunInput`](crate::operation::start_run::StartRunInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::start_run::StartRunInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_run::StartRunInput {
            workflow_id: self.workflow_id,
            workflow_type: self.workflow_type,
            run_id: self.run_id,
            role_arn: self.role_arn,
            name: self.name,
            cache_id: self.cache_id,
            cache_behavior: self.cache_behavior,
            run_group_id: self.run_group_id,
            priority: self.priority,
            parameters: self.parameters,
            storage_capacity: self.storage_capacity,
            output_uri: self.output_uri,
            log_level: self.log_level,
            tags: self.tags,
            request_id: self.request_id,
            retention_mode: self.retention_mode,
            storage_type: self.storage_type,
            workflow_owner_id: self.workflow_owner_id,
            workflow_version_name: self.workflow_version_name,
        })
    }
}
