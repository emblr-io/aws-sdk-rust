// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateAccountSettingsInput {
    /// <p>The maximum number of compute units the service will use at any point in time to serve your queries. To run queries, you must set a minimum capacity of 4 TCU. You can set the maximum number of TCU in multiples of 4, for example, 4, 8, 16, 32, and so on. The maximum value supported for <code>MaxQueryTCU</code> is 1000. To request an increase to this soft limit, contact Amazon Web Services Support. For information about the default quota for maxQueryTCU, see Default quotas. This configuration is applicable only for on-demand usage of Timestream Compute Units (TCUs).</p>
    /// <p>The maximum value supported for <code>MaxQueryTCU</code> is 1000. To request an increase to this soft limit, contact Amazon Web Services Support. For information about the default quota for <code>maxQueryTCU</code>, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html#limits.default">Default quotas</a>.</p>
    pub max_query_tcu: ::std::option::Option<i32>,
    /// <p>The pricing model for queries in an account.</p><note>
    /// <p>The <code>QueryPricingModel</code> parameter is used by several Timestream operations; however, the <code>UpdateAccountSettings</code> API operation doesn't recognize any values other than <code>COMPUTE_UNITS</code>.</p>
    /// </note>
    pub query_pricing_model: ::std::option::Option<crate::types::QueryPricingModel>,
    /// <p>Modifies the query compute settings configured in your account, including the query pricing model and provisioned Timestream Compute Units (TCUs) in your account.</p><note>
    /// <p>This API is idempotent, meaning that making the same request multiple times will have the same effect as making the request once.</p>
    /// </note>
    pub query_compute: ::std::option::Option<crate::types::QueryComputeRequest>,
}
impl UpdateAccountSettingsInput {
    /// <p>The maximum number of compute units the service will use at any point in time to serve your queries. To run queries, you must set a minimum capacity of 4 TCU. You can set the maximum number of TCU in multiples of 4, for example, 4, 8, 16, 32, and so on. The maximum value supported for <code>MaxQueryTCU</code> is 1000. To request an increase to this soft limit, contact Amazon Web Services Support. For information about the default quota for maxQueryTCU, see Default quotas. This configuration is applicable only for on-demand usage of Timestream Compute Units (TCUs).</p>
    /// <p>The maximum value supported for <code>MaxQueryTCU</code> is 1000. To request an increase to this soft limit, contact Amazon Web Services Support. For information about the default quota for <code>maxQueryTCU</code>, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html#limits.default">Default quotas</a>.</p>
    pub fn max_query_tcu(&self) -> ::std::option::Option<i32> {
        self.max_query_tcu
    }
    /// <p>The pricing model for queries in an account.</p><note>
    /// <p>The <code>QueryPricingModel</code> parameter is used by several Timestream operations; however, the <code>UpdateAccountSettings</code> API operation doesn't recognize any values other than <code>COMPUTE_UNITS</code>.</p>
    /// </note>
    pub fn query_pricing_model(&self) -> ::std::option::Option<&crate::types::QueryPricingModel> {
        self.query_pricing_model.as_ref()
    }
    /// <p>Modifies the query compute settings configured in your account, including the query pricing model and provisioned Timestream Compute Units (TCUs) in your account.</p><note>
    /// <p>This API is idempotent, meaning that making the same request multiple times will have the same effect as making the request once.</p>
    /// </note>
    pub fn query_compute(&self) -> ::std::option::Option<&crate::types::QueryComputeRequest> {
        self.query_compute.as_ref()
    }
}
impl UpdateAccountSettingsInput {
    /// Creates a new builder-style object to manufacture [`UpdateAccountSettingsInput`](crate::operation::update_account_settings::UpdateAccountSettingsInput).
    pub fn builder() -> crate::operation::update_account_settings::builders::UpdateAccountSettingsInputBuilder {
        crate::operation::update_account_settings::builders::UpdateAccountSettingsInputBuilder::default()
    }
}

/// A builder for [`UpdateAccountSettingsInput`](crate::operation::update_account_settings::UpdateAccountSettingsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateAccountSettingsInputBuilder {
    pub(crate) max_query_tcu: ::std::option::Option<i32>,
    pub(crate) query_pricing_model: ::std::option::Option<crate::types::QueryPricingModel>,
    pub(crate) query_compute: ::std::option::Option<crate::types::QueryComputeRequest>,
}
impl UpdateAccountSettingsInputBuilder {
    /// <p>The maximum number of compute units the service will use at any point in time to serve your queries. To run queries, you must set a minimum capacity of 4 TCU. You can set the maximum number of TCU in multiples of 4, for example, 4, 8, 16, 32, and so on. The maximum value supported for <code>MaxQueryTCU</code> is 1000. To request an increase to this soft limit, contact Amazon Web Services Support. For information about the default quota for maxQueryTCU, see Default quotas. This configuration is applicable only for on-demand usage of Timestream Compute Units (TCUs).</p>
    /// <p>The maximum value supported for <code>MaxQueryTCU</code> is 1000. To request an increase to this soft limit, contact Amazon Web Services Support. For information about the default quota for <code>maxQueryTCU</code>, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html#limits.default">Default quotas</a>.</p>
    pub fn max_query_tcu(mut self, input: i32) -> Self {
        self.max_query_tcu = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of compute units the service will use at any point in time to serve your queries. To run queries, you must set a minimum capacity of 4 TCU. You can set the maximum number of TCU in multiples of 4, for example, 4, 8, 16, 32, and so on. The maximum value supported for <code>MaxQueryTCU</code> is 1000. To request an increase to this soft limit, contact Amazon Web Services Support. For information about the default quota for maxQueryTCU, see Default quotas. This configuration is applicable only for on-demand usage of Timestream Compute Units (TCUs).</p>
    /// <p>The maximum value supported for <code>MaxQueryTCU</code> is 1000. To request an increase to this soft limit, contact Amazon Web Services Support. For information about the default quota for <code>maxQueryTCU</code>, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html#limits.default">Default quotas</a>.</p>
    pub fn set_max_query_tcu(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_query_tcu = input;
        self
    }
    /// <p>The maximum number of compute units the service will use at any point in time to serve your queries. To run queries, you must set a minimum capacity of 4 TCU. You can set the maximum number of TCU in multiples of 4, for example, 4, 8, 16, 32, and so on. The maximum value supported for <code>MaxQueryTCU</code> is 1000. To request an increase to this soft limit, contact Amazon Web Services Support. For information about the default quota for maxQueryTCU, see Default quotas. This configuration is applicable only for on-demand usage of Timestream Compute Units (TCUs).</p>
    /// <p>The maximum value supported for <code>MaxQueryTCU</code> is 1000. To request an increase to this soft limit, contact Amazon Web Services Support. For information about the default quota for <code>maxQueryTCU</code>, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html#limits.default">Default quotas</a>.</p>
    pub fn get_max_query_tcu(&self) -> &::std::option::Option<i32> {
        &self.max_query_tcu
    }
    /// <p>The pricing model for queries in an account.</p><note>
    /// <p>The <code>QueryPricingModel</code> parameter is used by several Timestream operations; however, the <code>UpdateAccountSettings</code> API operation doesn't recognize any values other than <code>COMPUTE_UNITS</code>.</p>
    /// </note>
    pub fn query_pricing_model(mut self, input: crate::types::QueryPricingModel) -> Self {
        self.query_pricing_model = ::std::option::Option::Some(input);
        self
    }
    /// <p>The pricing model for queries in an account.</p><note>
    /// <p>The <code>QueryPricingModel</code> parameter is used by several Timestream operations; however, the <code>UpdateAccountSettings</code> API operation doesn't recognize any values other than <code>COMPUTE_UNITS</code>.</p>
    /// </note>
    pub fn set_query_pricing_model(mut self, input: ::std::option::Option<crate::types::QueryPricingModel>) -> Self {
        self.query_pricing_model = input;
        self
    }
    /// <p>The pricing model for queries in an account.</p><note>
    /// <p>The <code>QueryPricingModel</code> parameter is used by several Timestream operations; however, the <code>UpdateAccountSettings</code> API operation doesn't recognize any values other than <code>COMPUTE_UNITS</code>.</p>
    /// </note>
    pub fn get_query_pricing_model(&self) -> &::std::option::Option<crate::types::QueryPricingModel> {
        &self.query_pricing_model
    }
    /// <p>Modifies the query compute settings configured in your account, including the query pricing model and provisioned Timestream Compute Units (TCUs) in your account.</p><note>
    /// <p>This API is idempotent, meaning that making the same request multiple times will have the same effect as making the request once.</p>
    /// </note>
    pub fn query_compute(mut self, input: crate::types::QueryComputeRequest) -> Self {
        self.query_compute = ::std::option::Option::Some(input);
        self
    }
    /// <p>Modifies the query compute settings configured in your account, including the query pricing model and provisioned Timestream Compute Units (TCUs) in your account.</p><note>
    /// <p>This API is idempotent, meaning that making the same request multiple times will have the same effect as making the request once.</p>
    /// </note>
    pub fn set_query_compute(mut self, input: ::std::option::Option<crate::types::QueryComputeRequest>) -> Self {
        self.query_compute = input;
        self
    }
    /// <p>Modifies the query compute settings configured in your account, including the query pricing model and provisioned Timestream Compute Units (TCUs) in your account.</p><note>
    /// <p>This API is idempotent, meaning that making the same request multiple times will have the same effect as making the request once.</p>
    /// </note>
    pub fn get_query_compute(&self) -> &::std::option::Option<crate::types::QueryComputeRequest> {
        &self.query_compute
    }
    /// Consumes the builder and constructs a [`UpdateAccountSettingsInput`](crate::operation::update_account_settings::UpdateAccountSettingsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_account_settings::UpdateAccountSettingsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_account_settings::UpdateAccountSettingsInput {
            max_query_tcu: self.max_query_tcu,
            query_pricing_model: self.query_pricing_model,
            query_compute: self.query_compute,
        })
    }
}
