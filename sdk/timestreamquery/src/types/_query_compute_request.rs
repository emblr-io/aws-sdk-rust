// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A request to retrieve or update the compute capacity settings for querying data.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QueryComputeRequest {
    /// <p>The mode in which Timestream Compute Units (TCUs) are allocated and utilized within an account. Note that in the Asia Pacific (Mumbai) region, the API operation only recognizes the value <code>PROVISIONED</code>.</p>
    pub compute_mode: ::std::option::Option<crate::types::ComputeMode>,
    /// <p>Configuration object that contains settings for provisioned Timestream Compute Units (TCUs) in your account.</p>
    pub provisioned_capacity: ::std::option::Option<crate::types::ProvisionedCapacityRequest>,
}
impl QueryComputeRequest {
    /// <p>The mode in which Timestream Compute Units (TCUs) are allocated and utilized within an account. Note that in the Asia Pacific (Mumbai) region, the API operation only recognizes the value <code>PROVISIONED</code>.</p>
    pub fn compute_mode(&self) -> ::std::option::Option<&crate::types::ComputeMode> {
        self.compute_mode.as_ref()
    }
    /// <p>Configuration object that contains settings for provisioned Timestream Compute Units (TCUs) in your account.</p>
    pub fn provisioned_capacity(&self) -> ::std::option::Option<&crate::types::ProvisionedCapacityRequest> {
        self.provisioned_capacity.as_ref()
    }
}
impl QueryComputeRequest {
    /// Creates a new builder-style object to manufacture [`QueryComputeRequest`](crate::types::QueryComputeRequest).
    pub fn builder() -> crate::types::builders::QueryComputeRequestBuilder {
        crate::types::builders::QueryComputeRequestBuilder::default()
    }
}

/// A builder for [`QueryComputeRequest`](crate::types::QueryComputeRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QueryComputeRequestBuilder {
    pub(crate) compute_mode: ::std::option::Option<crate::types::ComputeMode>,
    pub(crate) provisioned_capacity: ::std::option::Option<crate::types::ProvisionedCapacityRequest>,
}
impl QueryComputeRequestBuilder {
    /// <p>The mode in which Timestream Compute Units (TCUs) are allocated and utilized within an account. Note that in the Asia Pacific (Mumbai) region, the API operation only recognizes the value <code>PROVISIONED</code>.</p>
    pub fn compute_mode(mut self, input: crate::types::ComputeMode) -> Self {
        self.compute_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The mode in which Timestream Compute Units (TCUs) are allocated and utilized within an account. Note that in the Asia Pacific (Mumbai) region, the API operation only recognizes the value <code>PROVISIONED</code>.</p>
    pub fn set_compute_mode(mut self, input: ::std::option::Option<crate::types::ComputeMode>) -> Self {
        self.compute_mode = input;
        self
    }
    /// <p>The mode in which Timestream Compute Units (TCUs) are allocated and utilized within an account. Note that in the Asia Pacific (Mumbai) region, the API operation only recognizes the value <code>PROVISIONED</code>.</p>
    pub fn get_compute_mode(&self) -> &::std::option::Option<crate::types::ComputeMode> {
        &self.compute_mode
    }
    /// <p>Configuration object that contains settings for provisioned Timestream Compute Units (TCUs) in your account.</p>
    pub fn provisioned_capacity(mut self, input: crate::types::ProvisionedCapacityRequest) -> Self {
        self.provisioned_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration object that contains settings for provisioned Timestream Compute Units (TCUs) in your account.</p>
    pub fn set_provisioned_capacity(mut self, input: ::std::option::Option<crate::types::ProvisionedCapacityRequest>) -> Self {
        self.provisioned_capacity = input;
        self
    }
    /// <p>Configuration object that contains settings for provisioned Timestream Compute Units (TCUs) in your account.</p>
    pub fn get_provisioned_capacity(&self) -> &::std::option::Option<crate::types::ProvisionedCapacityRequest> {
        &self.provisioned_capacity
    }
    /// Consumes the builder and constructs a [`QueryComputeRequest`](crate::types::QueryComputeRequest).
    pub fn build(self) -> crate::types::QueryComputeRequest {
        crate::types::QueryComputeRequest {
            compute_mode: self.compute_mode,
            provisioned_capacity: self.provisioned_capacity,
        }
    }
}
