// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p><code>QueryInsights</code> is a performance tuning feature that helps you optimize your queries, reducing costs and improving performance. With <code>QueryInsights</code>, you can assess the pruning efficiency of your queries and identify areas for improvement to enhance query performance. With <code>QueryInsights</code>, you can also analyze the effectiveness of your queries in terms of temporal and spatial pruning, and identify opportunities to improve performance. Specifically, you can evaluate how well your queries use time-based and partition key-based indexing strategies to optimize data retrieval. To optimize query performance, it's essential that you fine-tune both the temporal and spatial parameters that govern query execution.</p>
/// <p>The key metrics provided by <code>QueryInsights</code> are <code>QuerySpatialCoverage</code> and <code>QueryTemporalRange</code>. <code>QuerySpatialCoverage</code> indicates how much of the spatial axis the query scans, with lower values being more efficient. <code>QueryTemporalRange</code> shows the time range scanned, with narrower ranges being more performant.</p>
/// <p><b>Benefits of QueryInsights</b></p>
/// <p>The following are the key benefits of using <code>QueryInsights</code>:</p>
/// <ul>
/// <li>
/// <p><b>Identifying inefficient queries</b> – <code>QueryInsights</code> provides information on the time-based and attribute-based pruning of the tables accessed by the query. This information helps you identify the tables that are sub-optimally accessed.</p></li>
/// <li>
/// <p><b>Optimizing your data model and partitioning</b> – You can use the <code>QueryInsights</code> information to access and fine-tune your data model and partitioning strategy.</p></li>
/// <li>
/// <p><b>Tuning queries</b> – <code>QueryInsights</code> highlights opportunities to use indexes more effectively.</p></li>
/// </ul><note>
/// <p>The maximum number of <code>Query</code> API requests you're allowed to make with <code>QueryInsights</code> enabled is 1 query per second (QPS). If you exceed this query rate, it might result in throttling.</p>
/// </note>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QueryInsights {
    /// <p>Provides the following modes to enable <code>QueryInsights</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED_WITH_RATE_CONTROL</code> – Enables <code>QueryInsights</code> for the queries being processed. This mode also includes a rate control mechanism, which limits the <code>QueryInsights</code> feature to 1 query per second (QPS).</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – Disables <code>QueryInsights</code>.</p></li>
    /// </ul>
    pub mode: crate::types::QueryInsightsMode,
}
impl QueryInsights {
    /// <p>Provides the following modes to enable <code>QueryInsights</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED_WITH_RATE_CONTROL</code> – Enables <code>QueryInsights</code> for the queries being processed. This mode also includes a rate control mechanism, which limits the <code>QueryInsights</code> feature to 1 query per second (QPS).</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – Disables <code>QueryInsights</code>.</p></li>
    /// </ul>
    pub fn mode(&self) -> &crate::types::QueryInsightsMode {
        &self.mode
    }
}
impl QueryInsights {
    /// Creates a new builder-style object to manufacture [`QueryInsights`](crate::types::QueryInsights).
    pub fn builder() -> crate::types::builders::QueryInsightsBuilder {
        crate::types::builders::QueryInsightsBuilder::default()
    }
}

/// A builder for [`QueryInsights`](crate::types::QueryInsights).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QueryInsightsBuilder {
    pub(crate) mode: ::std::option::Option<crate::types::QueryInsightsMode>,
}
impl QueryInsightsBuilder {
    /// <p>Provides the following modes to enable <code>QueryInsights</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED_WITH_RATE_CONTROL</code> – Enables <code>QueryInsights</code> for the queries being processed. This mode also includes a rate control mechanism, which limits the <code>QueryInsights</code> feature to 1 query per second (QPS).</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – Disables <code>QueryInsights</code>.</p></li>
    /// </ul>
    /// This field is required.
    pub fn mode(mut self, input: crate::types::QueryInsightsMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides the following modes to enable <code>QueryInsights</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED_WITH_RATE_CONTROL</code> – Enables <code>QueryInsights</code> for the queries being processed. This mode also includes a rate control mechanism, which limits the <code>QueryInsights</code> feature to 1 query per second (QPS).</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – Disables <code>QueryInsights</code>.</p></li>
    /// </ul>
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::QueryInsightsMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>Provides the following modes to enable <code>QueryInsights</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED_WITH_RATE_CONTROL</code> – Enables <code>QueryInsights</code> for the queries being processed. This mode also includes a rate control mechanism, which limits the <code>QueryInsights</code> feature to 1 query per second (QPS).</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – Disables <code>QueryInsights</code>.</p></li>
    /// </ul>
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::QueryInsightsMode> {
        &self.mode
    }
    /// Consumes the builder and constructs a [`QueryInsights`](crate::types::QueryInsights).
    /// This method will fail if any of the following fields are not set:
    /// - [`mode`](crate::types::builders::QueryInsightsBuilder::mode)
    pub fn build(self) -> ::std::result::Result<crate::types::QueryInsights, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::QueryInsights {
            mode: self.mode.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mode",
                    "mode was not specified but it is required when building QueryInsights",
                )
            })?,
        })
    }
}
