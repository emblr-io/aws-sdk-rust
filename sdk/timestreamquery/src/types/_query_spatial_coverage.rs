// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides insights into the spatial coverage of the query, including the table with sub-optimal (max) spatial pruning. This information can help you identify areas for improvement in your partitioning strategy to enhance spatial pruning</p>
/// <p>For example, you can do the following with the <code>QuerySpatialCoverage</code> information:</p>
/// <ul>
/// <li>
/// <p>Add measure_name or use <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/customer-defined-partition-keys.html">customer-defined partition key</a> (CDPK) predicates.</p></li>
/// <li>
/// <p>If you've already done the preceding action, remove functions around them or clauses, such as <code>LIKE</code>.</p></li>
/// </ul>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QuerySpatialCoverage {
    /// <p>Provides insights into the spatial coverage of the executed query and the table with the most inefficient spatial pruning.</p>
    /// <ul>
    /// <li>
    /// <p><code>Value</code> – The maximum ratio of spatial coverage.</p></li>
    /// <li>
    /// <p><code>TableArn</code> – The Amazon Resource Name (ARN) of the table with sub-optimal spatial pruning.</p></li>
    /// <li>
    /// <p><code>PartitionKey</code> – The partition key used for partitioning, which can be a default <code>measure_name</code> or a CDPK.</p></li>
    /// </ul>
    pub max: ::std::option::Option<crate::types::QuerySpatialCoverageMax>,
}
impl QuerySpatialCoverage {
    /// <p>Provides insights into the spatial coverage of the executed query and the table with the most inefficient spatial pruning.</p>
    /// <ul>
    /// <li>
    /// <p><code>Value</code> – The maximum ratio of spatial coverage.</p></li>
    /// <li>
    /// <p><code>TableArn</code> – The Amazon Resource Name (ARN) of the table with sub-optimal spatial pruning.</p></li>
    /// <li>
    /// <p><code>PartitionKey</code> – The partition key used for partitioning, which can be a default <code>measure_name</code> or a CDPK.</p></li>
    /// </ul>
    pub fn max(&self) -> ::std::option::Option<&crate::types::QuerySpatialCoverageMax> {
        self.max.as_ref()
    }
}
impl QuerySpatialCoverage {
    /// Creates a new builder-style object to manufacture [`QuerySpatialCoverage`](crate::types::QuerySpatialCoverage).
    pub fn builder() -> crate::types::builders::QuerySpatialCoverageBuilder {
        crate::types::builders::QuerySpatialCoverageBuilder::default()
    }
}

/// A builder for [`QuerySpatialCoverage`](crate::types::QuerySpatialCoverage).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QuerySpatialCoverageBuilder {
    pub(crate) max: ::std::option::Option<crate::types::QuerySpatialCoverageMax>,
}
impl QuerySpatialCoverageBuilder {
    /// <p>Provides insights into the spatial coverage of the executed query and the table with the most inefficient spatial pruning.</p>
    /// <ul>
    /// <li>
    /// <p><code>Value</code> – The maximum ratio of spatial coverage.</p></li>
    /// <li>
    /// <p><code>TableArn</code> – The Amazon Resource Name (ARN) of the table with sub-optimal spatial pruning.</p></li>
    /// <li>
    /// <p><code>PartitionKey</code> – The partition key used for partitioning, which can be a default <code>measure_name</code> or a CDPK.</p></li>
    /// </ul>
    pub fn max(mut self, input: crate::types::QuerySpatialCoverageMax) -> Self {
        self.max = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides insights into the spatial coverage of the executed query and the table with the most inefficient spatial pruning.</p>
    /// <ul>
    /// <li>
    /// <p><code>Value</code> – The maximum ratio of spatial coverage.</p></li>
    /// <li>
    /// <p><code>TableArn</code> – The Amazon Resource Name (ARN) of the table with sub-optimal spatial pruning.</p></li>
    /// <li>
    /// <p><code>PartitionKey</code> – The partition key used for partitioning, which can be a default <code>measure_name</code> or a CDPK.</p></li>
    /// </ul>
    pub fn set_max(mut self, input: ::std::option::Option<crate::types::QuerySpatialCoverageMax>) -> Self {
        self.max = input;
        self
    }
    /// <p>Provides insights into the spatial coverage of the executed query and the table with the most inefficient spatial pruning.</p>
    /// <ul>
    /// <li>
    /// <p><code>Value</code> – The maximum ratio of spatial coverage.</p></li>
    /// <li>
    /// <p><code>TableArn</code> – The Amazon Resource Name (ARN) of the table with sub-optimal spatial pruning.</p></li>
    /// <li>
    /// <p><code>PartitionKey</code> – The partition key used for partitioning, which can be a default <code>measure_name</code> or a CDPK.</p></li>
    /// </ul>
    pub fn get_max(&self) -> &::std::option::Option<crate::types::QuerySpatialCoverageMax> {
        &self.max
    }
    /// Consumes the builder and constructs a [`QuerySpatialCoverage`](crate::types::QuerySpatialCoverage).
    pub fn build(self) -> crate::types::QuerySpatialCoverage {
        crate::types::QuerySpatialCoverage { max: self.max }
    }
}
