// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides insights into the table with the most sub-optimal spatial range scanned by your query.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QuerySpatialCoverageMax {
    /// <p>The maximum ratio of spatial coverage.</p>
    pub value: f64,
    /// <p>The Amazon Resource Name (ARN) of the table with the most sub-optimal spatial pruning.</p>
    pub table_arn: ::std::option::Option<::std::string::String>,
    /// <p>The partition key used for partitioning, which can be a default <code>measure_name</code> or a <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/customer-defined-partition-keys.html">customer defined partition key</a>.</p>
    pub partition_key: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl QuerySpatialCoverageMax {
    /// <p>The maximum ratio of spatial coverage.</p>
    pub fn value(&self) -> f64 {
        self.value
    }
    /// <p>The Amazon Resource Name (ARN) of the table with the most sub-optimal spatial pruning.</p>
    pub fn table_arn(&self) -> ::std::option::Option<&str> {
        self.table_arn.as_deref()
    }
    /// <p>The partition key used for partitioning, which can be a default <code>measure_name</code> or a <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/customer-defined-partition-keys.html">customer defined partition key</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.partition_key.is_none()`.
    pub fn partition_key(&self) -> &[::std::string::String] {
        self.partition_key.as_deref().unwrap_or_default()
    }
}
impl QuerySpatialCoverageMax {
    /// Creates a new builder-style object to manufacture [`QuerySpatialCoverageMax`](crate::types::QuerySpatialCoverageMax).
    pub fn builder() -> crate::types::builders::QuerySpatialCoverageMaxBuilder {
        crate::types::builders::QuerySpatialCoverageMaxBuilder::default()
    }
}

/// A builder for [`QuerySpatialCoverageMax`](crate::types::QuerySpatialCoverageMax).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QuerySpatialCoverageMaxBuilder {
    pub(crate) value: ::std::option::Option<f64>,
    pub(crate) table_arn: ::std::option::Option<::std::string::String>,
    pub(crate) partition_key: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl QuerySpatialCoverageMaxBuilder {
    /// <p>The maximum ratio of spatial coverage.</p>
    pub fn value(mut self, input: f64) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum ratio of spatial coverage.</p>
    pub fn set_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.value = input;
        self
    }
    /// <p>The maximum ratio of spatial coverage.</p>
    pub fn get_value(&self) -> &::std::option::Option<f64> {
        &self.value
    }
    /// <p>The Amazon Resource Name (ARN) of the table with the most sub-optimal spatial pruning.</p>
    pub fn table_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the table with the most sub-optimal spatial pruning.</p>
    pub fn set_table_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the table with the most sub-optimal spatial pruning.</p>
    pub fn get_table_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_arn
    }
    /// Appends an item to `partition_key`.
    ///
    /// To override the contents of this collection use [`set_partition_key`](Self::set_partition_key).
    ///
    /// <p>The partition key used for partitioning, which can be a default <code>measure_name</code> or a <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/customer-defined-partition-keys.html">customer defined partition key</a>.</p>
    pub fn partition_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.partition_key.unwrap_or_default();
        v.push(input.into());
        self.partition_key = ::std::option::Option::Some(v);
        self
    }
    /// <p>The partition key used for partitioning, which can be a default <code>measure_name</code> or a <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/customer-defined-partition-keys.html">customer defined partition key</a>.</p>
    pub fn set_partition_key(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.partition_key = input;
        self
    }
    /// <p>The partition key used for partitioning, which can be a default <code>measure_name</code> or a <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/customer-defined-partition-keys.html">customer defined partition key</a>.</p>
    pub fn get_partition_key(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.partition_key
    }
    /// Consumes the builder and constructs a [`QuerySpatialCoverageMax`](crate::types::QuerySpatialCoverageMax).
    pub fn build(self) -> crate::types::QuerySpatialCoverageMax {
        crate::types::QuerySpatialCoverageMax {
            value: self.value.unwrap_or_default(),
            table_arn: self.table_arn,
            partition_key: self.partition_key,
        }
    }
}
