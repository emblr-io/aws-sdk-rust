// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides insights into the temporal range of the query, including the table with the largest (max) time range.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QueryTemporalRange {
    /// <p>Encapsulates the following properties that provide insights into the most sub-optimal performing table on the temporal axis:</p>
    /// <ul>
    /// <li>
    /// <p><code>Value</code> – The maximum duration in nanoseconds between the start and end of the query.</p></li>
    /// <li>
    /// <p><code>TableArn</code> – The Amazon Resource Name (ARN) of the table which is queried with the largest time range.</p></li>
    /// </ul>
    pub max: ::std::option::Option<crate::types::QueryTemporalRangeMax>,
}
impl QueryTemporalRange {
    /// <p>Encapsulates the following properties that provide insights into the most sub-optimal performing table on the temporal axis:</p>
    /// <ul>
    /// <li>
    /// <p><code>Value</code> – The maximum duration in nanoseconds between the start and end of the query.</p></li>
    /// <li>
    /// <p><code>TableArn</code> – The Amazon Resource Name (ARN) of the table which is queried with the largest time range.</p></li>
    /// </ul>
    pub fn max(&self) -> ::std::option::Option<&crate::types::QueryTemporalRangeMax> {
        self.max.as_ref()
    }
}
impl QueryTemporalRange {
    /// Creates a new builder-style object to manufacture [`QueryTemporalRange`](crate::types::QueryTemporalRange).
    pub fn builder() -> crate::types::builders::QueryTemporalRangeBuilder {
        crate::types::builders::QueryTemporalRangeBuilder::default()
    }
}

/// A builder for [`QueryTemporalRange`](crate::types::QueryTemporalRange).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QueryTemporalRangeBuilder {
    pub(crate) max: ::std::option::Option<crate::types::QueryTemporalRangeMax>,
}
impl QueryTemporalRangeBuilder {
    /// <p>Encapsulates the following properties that provide insights into the most sub-optimal performing table on the temporal axis:</p>
    /// <ul>
    /// <li>
    /// <p><code>Value</code> – The maximum duration in nanoseconds between the start and end of the query.</p></li>
    /// <li>
    /// <p><code>TableArn</code> – The Amazon Resource Name (ARN) of the table which is queried with the largest time range.</p></li>
    /// </ul>
    pub fn max(mut self, input: crate::types::QueryTemporalRangeMax) -> Self {
        self.max = ::std::option::Option::Some(input);
        self
    }
    /// <p>Encapsulates the following properties that provide insights into the most sub-optimal performing table on the temporal axis:</p>
    /// <ul>
    /// <li>
    /// <p><code>Value</code> – The maximum duration in nanoseconds between the start and end of the query.</p></li>
    /// <li>
    /// <p><code>TableArn</code> – The Amazon Resource Name (ARN) of the table which is queried with the largest time range.</p></li>
    /// </ul>
    pub fn set_max(mut self, input: ::std::option::Option<crate::types::QueryTemporalRangeMax>) -> Self {
        self.max = input;
        self
    }
    /// <p>Encapsulates the following properties that provide insights into the most sub-optimal performing table on the temporal axis:</p>
    /// <ul>
    /// <li>
    /// <p><code>Value</code> – The maximum duration in nanoseconds between the start and end of the query.</p></li>
    /// <li>
    /// <p><code>TableArn</code> – The Amazon Resource Name (ARN) of the table which is queried with the largest time range.</p></li>
    /// </ul>
    pub fn get_max(&self) -> &::std::option::Option<crate::types::QueryTemporalRangeMax> {
        &self.max
    }
    /// Consumes the builder and constructs a [`QueryTemporalRange`](crate::types::QueryTemporalRange).
    pub fn build(self) -> crate::types::QueryTemporalRange {
        crate::types::QueryTemporalRange { max: self.max }
    }
}
