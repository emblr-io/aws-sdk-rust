// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Encapsulates settings for enabling <code>QueryInsights</code> on an <code>ExecuteScheduledQueryRequest</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScheduledQueryInsights {
    /// <p>Provides the following modes to enable <code>ScheduledQueryInsights</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED_WITH_RATE_CONTROL</code> – Enables <code>ScheduledQueryInsights</code> for the queries being processed. This mode also includes a rate control mechanism, which limits the <code>QueryInsights</code> feature to 1 query per second (QPS).</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – Disables <code>ScheduledQueryInsights</code>.</p></li>
    /// </ul>
    pub mode: crate::types::ScheduledQueryInsightsMode,
}
impl ScheduledQueryInsights {
    /// <p>Provides the following modes to enable <code>ScheduledQueryInsights</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED_WITH_RATE_CONTROL</code> – Enables <code>ScheduledQueryInsights</code> for the queries being processed. This mode also includes a rate control mechanism, which limits the <code>QueryInsights</code> feature to 1 query per second (QPS).</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – Disables <code>ScheduledQueryInsights</code>.</p></li>
    /// </ul>
    pub fn mode(&self) -> &crate::types::ScheduledQueryInsightsMode {
        &self.mode
    }
}
impl ScheduledQueryInsights {
    /// Creates a new builder-style object to manufacture [`ScheduledQueryInsights`](crate::types::ScheduledQueryInsights).
    pub fn builder() -> crate::types::builders::ScheduledQueryInsightsBuilder {
        crate::types::builders::ScheduledQueryInsightsBuilder::default()
    }
}

/// A builder for [`ScheduledQueryInsights`](crate::types::ScheduledQueryInsights).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ScheduledQueryInsightsBuilder {
    pub(crate) mode: ::std::option::Option<crate::types::ScheduledQueryInsightsMode>,
}
impl ScheduledQueryInsightsBuilder {
    /// <p>Provides the following modes to enable <code>ScheduledQueryInsights</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED_WITH_RATE_CONTROL</code> – Enables <code>ScheduledQueryInsights</code> for the queries being processed. This mode also includes a rate control mechanism, which limits the <code>QueryInsights</code> feature to 1 query per second (QPS).</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – Disables <code>ScheduledQueryInsights</code>.</p></li>
    /// </ul>
    /// This field is required.
    pub fn mode(mut self, input: crate::types::ScheduledQueryInsightsMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides the following modes to enable <code>ScheduledQueryInsights</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED_WITH_RATE_CONTROL</code> – Enables <code>ScheduledQueryInsights</code> for the queries being processed. This mode also includes a rate control mechanism, which limits the <code>QueryInsights</code> feature to 1 query per second (QPS).</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – Disables <code>ScheduledQueryInsights</code>.</p></li>
    /// </ul>
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::ScheduledQueryInsightsMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>Provides the following modes to enable <code>ScheduledQueryInsights</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED_WITH_RATE_CONTROL</code> – Enables <code>ScheduledQueryInsights</code> for the queries being processed. This mode also includes a rate control mechanism, which limits the <code>QueryInsights</code> feature to 1 query per second (QPS).</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – Disables <code>ScheduledQueryInsights</code>.</p></li>
    /// </ul>
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::ScheduledQueryInsightsMode> {
        &self.mode
    }
    /// Consumes the builder and constructs a [`ScheduledQueryInsights`](crate::types::ScheduledQueryInsights).
    /// This method will fail if any of the following fields are not set:
    /// - [`mode`](crate::types::builders::ScheduledQueryInsightsBuilder::mode)
    pub fn build(self) -> ::std::result::Result<crate::types::ScheduledQueryInsights, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ScheduledQueryInsights {
            mode: self.mode.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mode",
                    "mode was not specified but it is required when building ScheduledQueryInsights",
                )
            })?,
        })
    }
}
