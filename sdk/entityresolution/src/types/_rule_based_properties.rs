// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object which defines the list of matching rules to run in a matching workflow. RuleBasedProperties contain a <code>Rules</code> field, which is a list of rule objects.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleBasedProperties {
    /// <p>A list of <code>Rule</code> objects, each of which have fields <code>RuleName</code> and <code>MatchingKeys</code>.</p>
    pub rules: ::std::vec::Vec<crate::types::Rule>,
    /// <p>The comparison type. You can either choose <code>ONE_TO_ONE</code> or <code>MANY_TO_MANY</code> as the <code>attributeMatchingModel</code>.</p>
    /// <p>If you choose <code>MANY_TO_MANY</code>, the system can match attributes across the sub-types of an attribute type. For example, if the value of the <code>Email</code> field of Profile A and the value of <code>BusinessEmail</code> field of Profile B matches, the two profiles are matched on the <code>Email</code> attribute type.</p>
    /// <p>If you choose <code>ONE_TO_ONE</code>, the system can only match attributes if the sub-types are an exact match. For example, for the <code>Email</code> attribute type, the system will only consider it a match if the value of the <code>Email</code> field of Profile A matches the value of the <code>Email</code> field of Profile B.</p>
    pub attribute_matching_model: crate::types::AttributeMatchingModel,
    /// <p>An indicator of whether to generate IDs and index the data or not.</p>
    /// <p>If you choose <code>IDENTIFIER_GENERATION</code>, the process generates IDs and indexes the data.</p>
    /// <p>If you choose <code>INDEXING</code>, the process indexes the data without generating IDs.</p>
    pub match_purpose: ::std::option::Option<crate::types::MatchPurpose>,
}
impl RuleBasedProperties {
    /// <p>A list of <code>Rule</code> objects, each of which have fields <code>RuleName</code> and <code>MatchingKeys</code>.</p>
    pub fn rules(&self) -> &[crate::types::Rule] {
        use std::ops::Deref;
        self.rules.deref()
    }
    /// <p>The comparison type. You can either choose <code>ONE_TO_ONE</code> or <code>MANY_TO_MANY</code> as the <code>attributeMatchingModel</code>.</p>
    /// <p>If you choose <code>MANY_TO_MANY</code>, the system can match attributes across the sub-types of an attribute type. For example, if the value of the <code>Email</code> field of Profile A and the value of <code>BusinessEmail</code> field of Profile B matches, the two profiles are matched on the <code>Email</code> attribute type.</p>
    /// <p>If you choose <code>ONE_TO_ONE</code>, the system can only match attributes if the sub-types are an exact match. For example, for the <code>Email</code> attribute type, the system will only consider it a match if the value of the <code>Email</code> field of Profile A matches the value of the <code>Email</code> field of Profile B.</p>
    pub fn attribute_matching_model(&self) -> &crate::types::AttributeMatchingModel {
        &self.attribute_matching_model
    }
    /// <p>An indicator of whether to generate IDs and index the data or not.</p>
    /// <p>If you choose <code>IDENTIFIER_GENERATION</code>, the process generates IDs and indexes the data.</p>
    /// <p>If you choose <code>INDEXING</code>, the process indexes the data without generating IDs.</p>
    pub fn match_purpose(&self) -> ::std::option::Option<&crate::types::MatchPurpose> {
        self.match_purpose.as_ref()
    }
}
impl RuleBasedProperties {
    /// Creates a new builder-style object to manufacture [`RuleBasedProperties`](crate::types::RuleBasedProperties).
    pub fn builder() -> crate::types::builders::RuleBasedPropertiesBuilder {
        crate::types::builders::RuleBasedPropertiesBuilder::default()
    }
}

/// A builder for [`RuleBasedProperties`](crate::types::RuleBasedProperties).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuleBasedPropertiesBuilder {
    pub(crate) rules: ::std::option::Option<::std::vec::Vec<crate::types::Rule>>,
    pub(crate) attribute_matching_model: ::std::option::Option<crate::types::AttributeMatchingModel>,
    pub(crate) match_purpose: ::std::option::Option<crate::types::MatchPurpose>,
}
impl RuleBasedPropertiesBuilder {
    /// Appends an item to `rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>A list of <code>Rule</code> objects, each of which have fields <code>RuleName</code> and <code>MatchingKeys</code>.</p>
    pub fn rules(mut self, input: crate::types::Rule) -> Self {
        let mut v = self.rules.unwrap_or_default();
        v.push(input);
        self.rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>Rule</code> objects, each of which have fields <code>RuleName</code> and <code>MatchingKeys</code>.</p>
    pub fn set_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Rule>>) -> Self {
        self.rules = input;
        self
    }
    /// <p>A list of <code>Rule</code> objects, each of which have fields <code>RuleName</code> and <code>MatchingKeys</code>.</p>
    pub fn get_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Rule>> {
        &self.rules
    }
    /// <p>The comparison type. You can either choose <code>ONE_TO_ONE</code> or <code>MANY_TO_MANY</code> as the <code>attributeMatchingModel</code>.</p>
    /// <p>If you choose <code>MANY_TO_MANY</code>, the system can match attributes across the sub-types of an attribute type. For example, if the value of the <code>Email</code> field of Profile A and the value of <code>BusinessEmail</code> field of Profile B matches, the two profiles are matched on the <code>Email</code> attribute type.</p>
    /// <p>If you choose <code>ONE_TO_ONE</code>, the system can only match attributes if the sub-types are an exact match. For example, for the <code>Email</code> attribute type, the system will only consider it a match if the value of the <code>Email</code> field of Profile A matches the value of the <code>Email</code> field of Profile B.</p>
    /// This field is required.
    pub fn attribute_matching_model(mut self, input: crate::types::AttributeMatchingModel) -> Self {
        self.attribute_matching_model = ::std::option::Option::Some(input);
        self
    }
    /// <p>The comparison type. You can either choose <code>ONE_TO_ONE</code> or <code>MANY_TO_MANY</code> as the <code>attributeMatchingModel</code>.</p>
    /// <p>If you choose <code>MANY_TO_MANY</code>, the system can match attributes across the sub-types of an attribute type. For example, if the value of the <code>Email</code> field of Profile A and the value of <code>BusinessEmail</code> field of Profile B matches, the two profiles are matched on the <code>Email</code> attribute type.</p>
    /// <p>If you choose <code>ONE_TO_ONE</code>, the system can only match attributes if the sub-types are an exact match. For example, for the <code>Email</code> attribute type, the system will only consider it a match if the value of the <code>Email</code> field of Profile A matches the value of the <code>Email</code> field of Profile B.</p>
    pub fn set_attribute_matching_model(mut self, input: ::std::option::Option<crate::types::AttributeMatchingModel>) -> Self {
        self.attribute_matching_model = input;
        self
    }
    /// <p>The comparison type. You can either choose <code>ONE_TO_ONE</code> or <code>MANY_TO_MANY</code> as the <code>attributeMatchingModel</code>.</p>
    /// <p>If you choose <code>MANY_TO_MANY</code>, the system can match attributes across the sub-types of an attribute type. For example, if the value of the <code>Email</code> field of Profile A and the value of <code>BusinessEmail</code> field of Profile B matches, the two profiles are matched on the <code>Email</code> attribute type.</p>
    /// <p>If you choose <code>ONE_TO_ONE</code>, the system can only match attributes if the sub-types are an exact match. For example, for the <code>Email</code> attribute type, the system will only consider it a match if the value of the <code>Email</code> field of Profile A matches the value of the <code>Email</code> field of Profile B.</p>
    pub fn get_attribute_matching_model(&self) -> &::std::option::Option<crate::types::AttributeMatchingModel> {
        &self.attribute_matching_model
    }
    /// <p>An indicator of whether to generate IDs and index the data or not.</p>
    /// <p>If you choose <code>IDENTIFIER_GENERATION</code>, the process generates IDs and indexes the data.</p>
    /// <p>If you choose <code>INDEXING</code>, the process indexes the data without generating IDs.</p>
    pub fn match_purpose(mut self, input: crate::types::MatchPurpose) -> Self {
        self.match_purpose = ::std::option::Option::Some(input);
        self
    }
    /// <p>An indicator of whether to generate IDs and index the data or not.</p>
    /// <p>If you choose <code>IDENTIFIER_GENERATION</code>, the process generates IDs and indexes the data.</p>
    /// <p>If you choose <code>INDEXING</code>, the process indexes the data without generating IDs.</p>
    pub fn set_match_purpose(mut self, input: ::std::option::Option<crate::types::MatchPurpose>) -> Self {
        self.match_purpose = input;
        self
    }
    /// <p>An indicator of whether to generate IDs and index the data or not.</p>
    /// <p>If you choose <code>IDENTIFIER_GENERATION</code>, the process generates IDs and indexes the data.</p>
    /// <p>If you choose <code>INDEXING</code>, the process indexes the data without generating IDs.</p>
    pub fn get_match_purpose(&self) -> &::std::option::Option<crate::types::MatchPurpose> {
        &self.match_purpose
    }
    /// Consumes the builder and constructs a [`RuleBasedProperties`](crate::types::RuleBasedProperties).
    /// This method will fail if any of the following fields are not set:
    /// - [`rules`](crate::types::builders::RuleBasedPropertiesBuilder::rules)
    /// - [`attribute_matching_model`](crate::types::builders::RuleBasedPropertiesBuilder::attribute_matching_model)
    pub fn build(self) -> ::std::result::Result<crate::types::RuleBasedProperties, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RuleBasedProperties {
            rules: self.rules.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rules",
                    "rules was not specified but it is required when building RuleBasedProperties",
                )
            })?,
            attribute_matching_model: self.attribute_matching_model.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "attribute_matching_model",
                    "attribute_matching_model was not specified but it is required when building RuleBasedProperties",
                )
            })?,
            match_purpose: self.match_purpose,
        })
    }
}
