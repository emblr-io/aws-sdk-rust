// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The record.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Record {
    /// <p>The input source ARN of the record.</p>
    pub input_source_arn: ::std::string::String,
    /// <p>The unique ID of the record.</p>
    pub unique_id: ::std::string::String,
    /// <p>The record's attribute map.</p>
    pub record_attribute_map: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl Record {
    /// <p>The input source ARN of the record.</p>
    pub fn input_source_arn(&self) -> &str {
        use std::ops::Deref;
        self.input_source_arn.deref()
    }
    /// <p>The unique ID of the record.</p>
    pub fn unique_id(&self) -> &str {
        use std::ops::Deref;
        self.unique_id.deref()
    }
    /// <p>The record's attribute map.</p>
    pub fn record_attribute_map(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.record_attribute_map
    }
}
impl ::std::fmt::Debug for Record {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Record");
        formatter.field("input_source_arn", &self.input_source_arn);
        formatter.field("unique_id", &self.unique_id);
        formatter.field("record_attribute_map", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl Record {
    /// Creates a new builder-style object to manufacture [`Record`](crate::types::Record).
    pub fn builder() -> crate::types::builders::RecordBuilder {
        crate::types::builders::RecordBuilder::default()
    }
}

/// A builder for [`Record`](crate::types::Record).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RecordBuilder {
    pub(crate) input_source_arn: ::std::option::Option<::std::string::String>,
    pub(crate) unique_id: ::std::option::Option<::std::string::String>,
    pub(crate) record_attribute_map: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl RecordBuilder {
    /// <p>The input source ARN of the record.</p>
    /// This field is required.
    pub fn input_source_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_source_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The input source ARN of the record.</p>
    pub fn set_input_source_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_source_arn = input;
        self
    }
    /// <p>The input source ARN of the record.</p>
    pub fn get_input_source_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_source_arn
    }
    /// <p>The unique ID of the record.</p>
    /// This field is required.
    pub fn unique_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.unique_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the record.</p>
    pub fn set_unique_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.unique_id = input;
        self
    }
    /// <p>The unique ID of the record.</p>
    pub fn get_unique_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.unique_id
    }
    /// Adds a key-value pair to `record_attribute_map`.
    ///
    /// To override the contents of this collection use [`set_record_attribute_map`](Self::set_record_attribute_map).
    ///
    /// <p>The record's attribute map.</p>
    pub fn record_attribute_map(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.record_attribute_map.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.record_attribute_map = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The record's attribute map.</p>
    pub fn set_record_attribute_map(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.record_attribute_map = input;
        self
    }
    /// <p>The record's attribute map.</p>
    pub fn get_record_attribute_map(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.record_attribute_map
    }
    /// Consumes the builder and constructs a [`Record`](crate::types::Record).
    /// This method will fail if any of the following fields are not set:
    /// - [`input_source_arn`](crate::types::builders::RecordBuilder::input_source_arn)
    /// - [`unique_id`](crate::types::builders::RecordBuilder::unique_id)
    /// - [`record_attribute_map`](crate::types::builders::RecordBuilder::record_attribute_map)
    pub fn build(self) -> ::std::result::Result<crate::types::Record, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Record {
            input_source_arn: self.input_source_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "input_source_arn",
                    "input_source_arn was not specified but it is required when building Record",
                )
            })?,
            unique_id: self.unique_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "unique_id",
                    "unique_id was not specified but it is required when building Record",
                )
            })?,
            record_attribute_map: self.record_attribute_map.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "record_attribute_map",
                    "record_attribute_map was not specified but it is required when building Record",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for RecordBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RecordBuilder");
        formatter.field("input_source_arn", &self.input_source_arn);
        formatter.field("unique_id", &self.unique_id);
        formatter.field("record_attribute_map", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
