// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The rule-based properties of an ID namespace. These properties define how the ID namespace can be used in an ID mapping workflow.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NamespaceRuleBasedProperties {
    /// <p>The rules for the ID namespace.</p>
    pub rules: ::std::option::Option<::std::vec::Vec<crate::types::Rule>>,
    /// <p>The sets of rules you can use in an ID mapping workflow. The limitations specified for the source and target must be compatible.</p>
    pub rule_definition_types: ::std::option::Option<::std::vec::Vec<crate::types::IdMappingWorkflowRuleDefinitionType>>,
    /// <p>The comparison type. You can either choose <code>ONE_TO_ONE</code> or <code>MANY_TO_MANY</code> as the <code>attributeMatchingModel</code>.</p>
    /// <p>If you choose <code>MANY_TO_MANY</code>, the system can match attributes across the sub-types of an attribute type. For example, if the value of the <code>Email</code> field of Profile A matches the value of <code>BusinessEmail</code> field of Profile B, the two profiles are matched on the <code>Email</code> attribute type.</p>
    /// <p>If you choose <code>ONE_TO_ONE</code>, the system can only match attributes if the sub-types are an exact match. For example, for the <code>Email</code> attribute type, the system will only consider it a match if the value of the <code>Email</code> field of Profile A matches the value of the <code>Email</code> field of Profile B.</p>
    pub attribute_matching_model: ::std::option::Option<crate::types::AttributeMatchingModel>,
    /// <p>The type of matching record that is allowed to be used in an ID mapping workflow.</p>
    /// <p>If the value is set to <code>ONE_SOURCE_TO_ONE_TARGET</code>, only one record in the source is matched to one record in the target.</p>
    /// <p>If the value is set to <code>MANY_SOURCE_TO_ONE_TARGET</code>, all matching records in the source are matched to one record in the target.</p>
    pub record_matching_models: ::std::option::Option<::std::vec::Vec<crate::types::RecordMatchingModel>>,
}
impl NamespaceRuleBasedProperties {
    /// <p>The rules for the ID namespace.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rules.is_none()`.
    pub fn rules(&self) -> &[crate::types::Rule] {
        self.rules.as_deref().unwrap_or_default()
    }
    /// <p>The sets of rules you can use in an ID mapping workflow. The limitations specified for the source and target must be compatible.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rule_definition_types.is_none()`.
    pub fn rule_definition_types(&self) -> &[crate::types::IdMappingWorkflowRuleDefinitionType] {
        self.rule_definition_types.as_deref().unwrap_or_default()
    }
    /// <p>The comparison type. You can either choose <code>ONE_TO_ONE</code> or <code>MANY_TO_MANY</code> as the <code>attributeMatchingModel</code>.</p>
    /// <p>If you choose <code>MANY_TO_MANY</code>, the system can match attributes across the sub-types of an attribute type. For example, if the value of the <code>Email</code> field of Profile A matches the value of <code>BusinessEmail</code> field of Profile B, the two profiles are matched on the <code>Email</code> attribute type.</p>
    /// <p>If you choose <code>ONE_TO_ONE</code>, the system can only match attributes if the sub-types are an exact match. For example, for the <code>Email</code> attribute type, the system will only consider it a match if the value of the <code>Email</code> field of Profile A matches the value of the <code>Email</code> field of Profile B.</p>
    pub fn attribute_matching_model(&self) -> ::std::option::Option<&crate::types::AttributeMatchingModel> {
        self.attribute_matching_model.as_ref()
    }
    /// <p>The type of matching record that is allowed to be used in an ID mapping workflow.</p>
    /// <p>If the value is set to <code>ONE_SOURCE_TO_ONE_TARGET</code>, only one record in the source is matched to one record in the target.</p>
    /// <p>If the value is set to <code>MANY_SOURCE_TO_ONE_TARGET</code>, all matching records in the source are matched to one record in the target.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.record_matching_models.is_none()`.
    pub fn record_matching_models(&self) -> &[crate::types::RecordMatchingModel] {
        self.record_matching_models.as_deref().unwrap_or_default()
    }
}
impl NamespaceRuleBasedProperties {
    /// Creates a new builder-style object to manufacture [`NamespaceRuleBasedProperties`](crate::types::NamespaceRuleBasedProperties).
    pub fn builder() -> crate::types::builders::NamespaceRuleBasedPropertiesBuilder {
        crate::types::builders::NamespaceRuleBasedPropertiesBuilder::default()
    }
}

/// A builder for [`NamespaceRuleBasedProperties`](crate::types::NamespaceRuleBasedProperties).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NamespaceRuleBasedPropertiesBuilder {
    pub(crate) rules: ::std::option::Option<::std::vec::Vec<crate::types::Rule>>,
    pub(crate) rule_definition_types: ::std::option::Option<::std::vec::Vec<crate::types::IdMappingWorkflowRuleDefinitionType>>,
    pub(crate) attribute_matching_model: ::std::option::Option<crate::types::AttributeMatchingModel>,
    pub(crate) record_matching_models: ::std::option::Option<::std::vec::Vec<crate::types::RecordMatchingModel>>,
}
impl NamespaceRuleBasedPropertiesBuilder {
    /// Appends an item to `rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>The rules for the ID namespace.</p>
    pub fn rules(mut self, input: crate::types::Rule) -> Self {
        let mut v = self.rules.unwrap_or_default();
        v.push(input);
        self.rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>The rules for the ID namespace.</p>
    pub fn set_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Rule>>) -> Self {
        self.rules = input;
        self
    }
    /// <p>The rules for the ID namespace.</p>
    pub fn get_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Rule>> {
        &self.rules
    }
    /// Appends an item to `rule_definition_types`.
    ///
    /// To override the contents of this collection use [`set_rule_definition_types`](Self::set_rule_definition_types).
    ///
    /// <p>The sets of rules you can use in an ID mapping workflow. The limitations specified for the source and target must be compatible.</p>
    pub fn rule_definition_types(mut self, input: crate::types::IdMappingWorkflowRuleDefinitionType) -> Self {
        let mut v = self.rule_definition_types.unwrap_or_default();
        v.push(input);
        self.rule_definition_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The sets of rules you can use in an ID mapping workflow. The limitations specified for the source and target must be compatible.</p>
    pub fn set_rule_definition_types(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::IdMappingWorkflowRuleDefinitionType>>,
    ) -> Self {
        self.rule_definition_types = input;
        self
    }
    /// <p>The sets of rules you can use in an ID mapping workflow. The limitations specified for the source and target must be compatible.</p>
    pub fn get_rule_definition_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IdMappingWorkflowRuleDefinitionType>> {
        &self.rule_definition_types
    }
    /// <p>The comparison type. You can either choose <code>ONE_TO_ONE</code> or <code>MANY_TO_MANY</code> as the <code>attributeMatchingModel</code>.</p>
    /// <p>If you choose <code>MANY_TO_MANY</code>, the system can match attributes across the sub-types of an attribute type. For example, if the value of the <code>Email</code> field of Profile A matches the value of <code>BusinessEmail</code> field of Profile B, the two profiles are matched on the <code>Email</code> attribute type.</p>
    /// <p>If you choose <code>ONE_TO_ONE</code>, the system can only match attributes if the sub-types are an exact match. For example, for the <code>Email</code> attribute type, the system will only consider it a match if the value of the <code>Email</code> field of Profile A matches the value of the <code>Email</code> field of Profile B.</p>
    pub fn attribute_matching_model(mut self, input: crate::types::AttributeMatchingModel) -> Self {
        self.attribute_matching_model = ::std::option::Option::Some(input);
        self
    }
    /// <p>The comparison type. You can either choose <code>ONE_TO_ONE</code> or <code>MANY_TO_MANY</code> as the <code>attributeMatchingModel</code>.</p>
    /// <p>If you choose <code>MANY_TO_MANY</code>, the system can match attributes across the sub-types of an attribute type. For example, if the value of the <code>Email</code> field of Profile A matches the value of <code>BusinessEmail</code> field of Profile B, the two profiles are matched on the <code>Email</code> attribute type.</p>
    /// <p>If you choose <code>ONE_TO_ONE</code>, the system can only match attributes if the sub-types are an exact match. For example, for the <code>Email</code> attribute type, the system will only consider it a match if the value of the <code>Email</code> field of Profile A matches the value of the <code>Email</code> field of Profile B.</p>
    pub fn set_attribute_matching_model(mut self, input: ::std::option::Option<crate::types::AttributeMatchingModel>) -> Self {
        self.attribute_matching_model = input;
        self
    }
    /// <p>The comparison type. You can either choose <code>ONE_TO_ONE</code> or <code>MANY_TO_MANY</code> as the <code>attributeMatchingModel</code>.</p>
    /// <p>If you choose <code>MANY_TO_MANY</code>, the system can match attributes across the sub-types of an attribute type. For example, if the value of the <code>Email</code> field of Profile A matches the value of <code>BusinessEmail</code> field of Profile B, the two profiles are matched on the <code>Email</code> attribute type.</p>
    /// <p>If you choose <code>ONE_TO_ONE</code>, the system can only match attributes if the sub-types are an exact match. For example, for the <code>Email</code> attribute type, the system will only consider it a match if the value of the <code>Email</code> field of Profile A matches the value of the <code>Email</code> field of Profile B.</p>
    pub fn get_attribute_matching_model(&self) -> &::std::option::Option<crate::types::AttributeMatchingModel> {
        &self.attribute_matching_model
    }
    /// Appends an item to `record_matching_models`.
    ///
    /// To override the contents of this collection use [`set_record_matching_models`](Self::set_record_matching_models).
    ///
    /// <p>The type of matching record that is allowed to be used in an ID mapping workflow.</p>
    /// <p>If the value is set to <code>ONE_SOURCE_TO_ONE_TARGET</code>, only one record in the source is matched to one record in the target.</p>
    /// <p>If the value is set to <code>MANY_SOURCE_TO_ONE_TARGET</code>, all matching records in the source are matched to one record in the target.</p>
    pub fn record_matching_models(mut self, input: crate::types::RecordMatchingModel) -> Self {
        let mut v = self.record_matching_models.unwrap_or_default();
        v.push(input);
        self.record_matching_models = ::std::option::Option::Some(v);
        self
    }
    /// <p>The type of matching record that is allowed to be used in an ID mapping workflow.</p>
    /// <p>If the value is set to <code>ONE_SOURCE_TO_ONE_TARGET</code>, only one record in the source is matched to one record in the target.</p>
    /// <p>If the value is set to <code>MANY_SOURCE_TO_ONE_TARGET</code>, all matching records in the source are matched to one record in the target.</p>
    pub fn set_record_matching_models(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RecordMatchingModel>>) -> Self {
        self.record_matching_models = input;
        self
    }
    /// <p>The type of matching record that is allowed to be used in an ID mapping workflow.</p>
    /// <p>If the value is set to <code>ONE_SOURCE_TO_ONE_TARGET</code>, only one record in the source is matched to one record in the target.</p>
    /// <p>If the value is set to <code>MANY_SOURCE_TO_ONE_TARGET</code>, all matching records in the source are matched to one record in the target.</p>
    pub fn get_record_matching_models(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RecordMatchingModel>> {
        &self.record_matching_models
    }
    /// Consumes the builder and constructs a [`NamespaceRuleBasedProperties`](crate::types::NamespaceRuleBasedProperties).
    pub fn build(self) -> crate::types::NamespaceRuleBasedProperties {
        crate::types::NamespaceRuleBasedProperties {
            rules: self.rules,
            rule_definition_types: self.rule_definition_types,
            attribute_matching_model: self.attribute_matching_model,
            record_matching_models: self.record_matching_models,
        }
    }
}
