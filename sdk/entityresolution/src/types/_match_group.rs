// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The match group.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MatchGroup {
    /// <p>The matched records.</p>
    pub records: ::std::vec::Vec<crate::types::MatchedRecord>,
    /// <p>The match ID.</p>
    pub match_id: ::std::string::String,
    /// <p>The match rule of the match group.</p>
    pub match_rule: ::std::string::String,
}
impl MatchGroup {
    /// <p>The matched records.</p>
    pub fn records(&self) -> &[crate::types::MatchedRecord] {
        use std::ops::Deref;
        self.records.deref()
    }
    /// <p>The match ID.</p>
    pub fn match_id(&self) -> &str {
        use std::ops::Deref;
        self.match_id.deref()
    }
    /// <p>The match rule of the match group.</p>
    pub fn match_rule(&self) -> &str {
        use std::ops::Deref;
        self.match_rule.deref()
    }
}
impl MatchGroup {
    /// Creates a new builder-style object to manufacture [`MatchGroup`](crate::types::MatchGroup).
    pub fn builder() -> crate::types::builders::MatchGroupBuilder {
        crate::types::builders::MatchGroupBuilder::default()
    }
}

/// A builder for [`MatchGroup`](crate::types::MatchGroup).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MatchGroupBuilder {
    pub(crate) records: ::std::option::Option<::std::vec::Vec<crate::types::MatchedRecord>>,
    pub(crate) match_id: ::std::option::Option<::std::string::String>,
    pub(crate) match_rule: ::std::option::Option<::std::string::String>,
}
impl MatchGroupBuilder {
    /// Appends an item to `records`.
    ///
    /// To override the contents of this collection use [`set_records`](Self::set_records).
    ///
    /// <p>The matched records.</p>
    pub fn records(mut self, input: crate::types::MatchedRecord) -> Self {
        let mut v = self.records.unwrap_or_default();
        v.push(input);
        self.records = ::std::option::Option::Some(v);
        self
    }
    /// <p>The matched records.</p>
    pub fn set_records(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MatchedRecord>>) -> Self {
        self.records = input;
        self
    }
    /// <p>The matched records.</p>
    pub fn get_records(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MatchedRecord>> {
        &self.records
    }
    /// <p>The match ID.</p>
    /// This field is required.
    pub fn match_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.match_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The match ID.</p>
    pub fn set_match_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.match_id = input;
        self
    }
    /// <p>The match ID.</p>
    pub fn get_match_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.match_id
    }
    /// <p>The match rule of the match group.</p>
    /// This field is required.
    pub fn match_rule(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.match_rule = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The match rule of the match group.</p>
    pub fn set_match_rule(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.match_rule = input;
        self
    }
    /// <p>The match rule of the match group.</p>
    pub fn get_match_rule(&self) -> &::std::option::Option<::std::string::String> {
        &self.match_rule
    }
    /// Consumes the builder and constructs a [`MatchGroup`](crate::types::MatchGroup).
    /// This method will fail if any of the following fields are not set:
    /// - [`records`](crate::types::builders::MatchGroupBuilder::records)
    /// - [`match_id`](crate::types::builders::MatchGroupBuilder::match_id)
    /// - [`match_rule`](crate::types::builders::MatchGroupBuilder::match_rule)
    pub fn build(self) -> ::std::result::Result<crate::types::MatchGroup, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MatchGroup {
            records: self.records.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "records",
                    "records was not specified but it is required when building MatchGroup",
                )
            })?,
            match_id: self.match_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "match_id",
                    "match_id was not specified but it is required when building MatchGroup",
                )
            })?,
            match_rule: self.match_rule.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "match_rule",
                    "match_rule was not specified but it is required when building MatchGroup",
                )
            })?,
        })
    }
}
