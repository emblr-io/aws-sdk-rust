// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object containing <code>IdMappingType</code>, <code>ProviderProperties</code>, and <code>RuleBasedProperties</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IdNamespaceIdMappingWorkflowProperties {
    /// <p>The type of ID mapping.</p>
    pub id_mapping_type: crate::types::IdMappingType,
    /// <p>An object which defines any additional configurations required by rule-based matching.</p>
    pub rule_based_properties: ::std::option::Option<crate::types::NamespaceRuleBasedProperties>,
    /// <p>An object which defines any additional configurations required by the provider service.</p>
    pub provider_properties: ::std::option::Option<crate::types::NamespaceProviderProperties>,
}
impl IdNamespaceIdMappingWorkflowProperties {
    /// <p>The type of ID mapping.</p>
    pub fn id_mapping_type(&self) -> &crate::types::IdMappingType {
        &self.id_mapping_type
    }
    /// <p>An object which defines any additional configurations required by rule-based matching.</p>
    pub fn rule_based_properties(&self) -> ::std::option::Option<&crate::types::NamespaceRuleBasedProperties> {
        self.rule_based_properties.as_ref()
    }
    /// <p>An object which defines any additional configurations required by the provider service.</p>
    pub fn provider_properties(&self) -> ::std::option::Option<&crate::types::NamespaceProviderProperties> {
        self.provider_properties.as_ref()
    }
}
impl IdNamespaceIdMappingWorkflowProperties {
    /// Creates a new builder-style object to manufacture [`IdNamespaceIdMappingWorkflowProperties`](crate::types::IdNamespaceIdMappingWorkflowProperties).
    pub fn builder() -> crate::types::builders::IdNamespaceIdMappingWorkflowPropertiesBuilder {
        crate::types::builders::IdNamespaceIdMappingWorkflowPropertiesBuilder::default()
    }
}

/// A builder for [`IdNamespaceIdMappingWorkflowProperties`](crate::types::IdNamespaceIdMappingWorkflowProperties).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IdNamespaceIdMappingWorkflowPropertiesBuilder {
    pub(crate) id_mapping_type: ::std::option::Option<crate::types::IdMappingType>,
    pub(crate) rule_based_properties: ::std::option::Option<crate::types::NamespaceRuleBasedProperties>,
    pub(crate) provider_properties: ::std::option::Option<crate::types::NamespaceProviderProperties>,
}
impl IdNamespaceIdMappingWorkflowPropertiesBuilder {
    /// <p>The type of ID mapping.</p>
    /// This field is required.
    pub fn id_mapping_type(mut self, input: crate::types::IdMappingType) -> Self {
        self.id_mapping_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of ID mapping.</p>
    pub fn set_id_mapping_type(mut self, input: ::std::option::Option<crate::types::IdMappingType>) -> Self {
        self.id_mapping_type = input;
        self
    }
    /// <p>The type of ID mapping.</p>
    pub fn get_id_mapping_type(&self) -> &::std::option::Option<crate::types::IdMappingType> {
        &self.id_mapping_type
    }
    /// <p>An object which defines any additional configurations required by rule-based matching.</p>
    pub fn rule_based_properties(mut self, input: crate::types::NamespaceRuleBasedProperties) -> Self {
        self.rule_based_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object which defines any additional configurations required by rule-based matching.</p>
    pub fn set_rule_based_properties(mut self, input: ::std::option::Option<crate::types::NamespaceRuleBasedProperties>) -> Self {
        self.rule_based_properties = input;
        self
    }
    /// <p>An object which defines any additional configurations required by rule-based matching.</p>
    pub fn get_rule_based_properties(&self) -> &::std::option::Option<crate::types::NamespaceRuleBasedProperties> {
        &self.rule_based_properties
    }
    /// <p>An object which defines any additional configurations required by the provider service.</p>
    pub fn provider_properties(mut self, input: crate::types::NamespaceProviderProperties) -> Self {
        self.provider_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object which defines any additional configurations required by the provider service.</p>
    pub fn set_provider_properties(mut self, input: ::std::option::Option<crate::types::NamespaceProviderProperties>) -> Self {
        self.provider_properties = input;
        self
    }
    /// <p>An object which defines any additional configurations required by the provider service.</p>
    pub fn get_provider_properties(&self) -> &::std::option::Option<crate::types::NamespaceProviderProperties> {
        &self.provider_properties
    }
    /// Consumes the builder and constructs a [`IdNamespaceIdMappingWorkflowProperties`](crate::types::IdNamespaceIdMappingWorkflowProperties).
    /// This method will fail if any of the following fields are not set:
    /// - [`id_mapping_type`](crate::types::builders::IdNamespaceIdMappingWorkflowPropertiesBuilder::id_mapping_type)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::IdNamespaceIdMappingWorkflowProperties, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IdNamespaceIdMappingWorkflowProperties {
            id_mapping_type: self.id_mapping_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id_mapping_type",
                    "id_mapping_type was not specified but it is required when building IdNamespaceIdMappingWorkflowProperties",
                )
            })?,
            rule_based_properties: self.rule_based_properties,
            provider_properties: self.provider_properties,
        })
    }
}
