// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents one of the following:</p>
/// <ul>
/// <li>
/// <p>A new witness to be added to a new global table.</p></li>
/// <li>
/// <p>An existing witness to be removed from an existing global table.</p></li>
/// </ul>
/// <p>You can configure one witness per MRSC global table.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GlobalTableWitnessGroupUpdate {
    /// <p>Specifies a witness Region to be added to a new MRSC global table. The witness must be added when creating the MRSC global table.</p>
    pub create: ::std::option::Option<crate::types::CreateGlobalTableWitnessGroupMemberAction>,
    /// <p>Specifies a witness Region to be removed from an existing global table. Must be done in conjunction with removing a replica. The deletion of both a witness and replica converts the remaining replica to a single-Region DynamoDB table.</p>
    pub delete: ::std::option::Option<crate::types::DeleteGlobalTableWitnessGroupMemberAction>,
}
impl GlobalTableWitnessGroupUpdate {
    /// <p>Specifies a witness Region to be added to a new MRSC global table. The witness must be added when creating the MRSC global table.</p>
    pub fn create(&self) -> ::std::option::Option<&crate::types::CreateGlobalTableWitnessGroupMemberAction> {
        self.create.as_ref()
    }
    /// <p>Specifies a witness Region to be removed from an existing global table. Must be done in conjunction with removing a replica. The deletion of both a witness and replica converts the remaining replica to a single-Region DynamoDB table.</p>
    pub fn delete(&self) -> ::std::option::Option<&crate::types::DeleteGlobalTableWitnessGroupMemberAction> {
        self.delete.as_ref()
    }
}
impl GlobalTableWitnessGroupUpdate {
    /// Creates a new builder-style object to manufacture [`GlobalTableWitnessGroupUpdate`](crate::types::GlobalTableWitnessGroupUpdate).
    pub fn builder() -> crate::types::builders::GlobalTableWitnessGroupUpdateBuilder {
        crate::types::builders::GlobalTableWitnessGroupUpdateBuilder::default()
    }
}

/// A builder for [`GlobalTableWitnessGroupUpdate`](crate::types::GlobalTableWitnessGroupUpdate).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GlobalTableWitnessGroupUpdateBuilder {
    pub(crate) create: ::std::option::Option<crate::types::CreateGlobalTableWitnessGroupMemberAction>,
    pub(crate) delete: ::std::option::Option<crate::types::DeleteGlobalTableWitnessGroupMemberAction>,
}
impl GlobalTableWitnessGroupUpdateBuilder {
    /// <p>Specifies a witness Region to be added to a new MRSC global table. The witness must be added when creating the MRSC global table.</p>
    pub fn create(mut self, input: crate::types::CreateGlobalTableWitnessGroupMemberAction) -> Self {
        self.create = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies a witness Region to be added to a new MRSC global table. The witness must be added when creating the MRSC global table.</p>
    pub fn set_create(mut self, input: ::std::option::Option<crate::types::CreateGlobalTableWitnessGroupMemberAction>) -> Self {
        self.create = input;
        self
    }
    /// <p>Specifies a witness Region to be added to a new MRSC global table. The witness must be added when creating the MRSC global table.</p>
    pub fn get_create(&self) -> &::std::option::Option<crate::types::CreateGlobalTableWitnessGroupMemberAction> {
        &self.create
    }
    /// <p>Specifies a witness Region to be removed from an existing global table. Must be done in conjunction with removing a replica. The deletion of both a witness and replica converts the remaining replica to a single-Region DynamoDB table.</p>
    pub fn delete(mut self, input: crate::types::DeleteGlobalTableWitnessGroupMemberAction) -> Self {
        self.delete = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies a witness Region to be removed from an existing global table. Must be done in conjunction with removing a replica. The deletion of both a witness and replica converts the remaining replica to a single-Region DynamoDB table.</p>
    pub fn set_delete(mut self, input: ::std::option::Option<crate::types::DeleteGlobalTableWitnessGroupMemberAction>) -> Self {
        self.delete = input;
        self
    }
    /// <p>Specifies a witness Region to be removed from an existing global table. Must be done in conjunction with removing a replica. The deletion of both a witness and replica converts the remaining replica to a single-Region DynamoDB table.</p>
    pub fn get_delete(&self) -> &::std::option::Option<crate::types::DeleteGlobalTableWitnessGroupMemberAction> {
        &self.delete
    }
    /// Consumes the builder and constructs a [`GlobalTableWitnessGroupUpdate`](crate::types::GlobalTableWitnessGroupUpdate).
    pub fn build(self) -> crate::types::GlobalTableWitnessGroupUpdate {
        crate::types::GlobalTableWitnessGroupUpdate {
            create: self.create,
            delete: self.delete,
        }
    }
}
