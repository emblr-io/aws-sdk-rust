// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the warm throughput value (in read units per second and write units per second) of the table. Warm throughput is applicable for DynamoDB Standard-IA tables and specifies the minimum provisioned capacity maintained for immediate data access.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TableWarmThroughputDescription {
    /// <p>Represents the base table's warm throughput value in read units per second.</p>
    pub read_units_per_second: ::std::option::Option<i64>,
    /// <p>Represents the base table's warm throughput value in write units per second.</p>
    pub write_units_per_second: ::std::option::Option<i64>,
    /// <p>Represents warm throughput value of the base table.</p>
    pub status: ::std::option::Option<crate::types::TableStatus>,
}
impl TableWarmThroughputDescription {
    /// <p>Represents the base table's warm throughput value in read units per second.</p>
    pub fn read_units_per_second(&self) -> ::std::option::Option<i64> {
        self.read_units_per_second
    }
    /// <p>Represents the base table's warm throughput value in write units per second.</p>
    pub fn write_units_per_second(&self) -> ::std::option::Option<i64> {
        self.write_units_per_second
    }
    /// <p>Represents warm throughput value of the base table.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::TableStatus> {
        self.status.as_ref()
    }
}
impl TableWarmThroughputDescription {
    /// Creates a new builder-style object to manufacture [`TableWarmThroughputDescription`](crate::types::TableWarmThroughputDescription).
    pub fn builder() -> crate::types::builders::TableWarmThroughputDescriptionBuilder {
        crate::types::builders::TableWarmThroughputDescriptionBuilder::default()
    }
}

/// A builder for [`TableWarmThroughputDescription`](crate::types::TableWarmThroughputDescription).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TableWarmThroughputDescriptionBuilder {
    pub(crate) read_units_per_second: ::std::option::Option<i64>,
    pub(crate) write_units_per_second: ::std::option::Option<i64>,
    pub(crate) status: ::std::option::Option<crate::types::TableStatus>,
}
impl TableWarmThroughputDescriptionBuilder {
    /// <p>Represents the base table's warm throughput value in read units per second.</p>
    pub fn read_units_per_second(mut self, input: i64) -> Self {
        self.read_units_per_second = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the base table's warm throughput value in read units per second.</p>
    pub fn set_read_units_per_second(mut self, input: ::std::option::Option<i64>) -> Self {
        self.read_units_per_second = input;
        self
    }
    /// <p>Represents the base table's warm throughput value in read units per second.</p>
    pub fn get_read_units_per_second(&self) -> &::std::option::Option<i64> {
        &self.read_units_per_second
    }
    /// <p>Represents the base table's warm throughput value in write units per second.</p>
    pub fn write_units_per_second(mut self, input: i64) -> Self {
        self.write_units_per_second = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the base table's warm throughput value in write units per second.</p>
    pub fn set_write_units_per_second(mut self, input: ::std::option::Option<i64>) -> Self {
        self.write_units_per_second = input;
        self
    }
    /// <p>Represents the base table's warm throughput value in write units per second.</p>
    pub fn get_write_units_per_second(&self) -> &::std::option::Option<i64> {
        &self.write_units_per_second
    }
    /// <p>Represents warm throughput value of the base table.</p>
    pub fn status(mut self, input: crate::types::TableStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents warm throughput value of the base table.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TableStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Represents warm throughput value of the base table.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TableStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`TableWarmThroughputDescription`](crate::types::TableWarmThroughputDescription).
    pub fn build(self) -> crate::types::TableWarmThroughputDescription {
        crate::types::TableWarmThroughputDescription {
            read_units_per_second: self.read_units_per_second,
            write_units_per_second: self.write_units_per_second,
            status: self.status,
        }
    }
}
