// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A numeric value corresponding to the severity of a finding, such as the number of open findings or the average time it takes to close findings of a given severity.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FindingMetricsValuePerSeverity {
    /// <p>A numeric value corresponding to an informational finding.</p>
    pub info: ::std::option::Option<f64>,
    /// <p>A numeric value corresponding to a low severity finding.</p>
    pub low: ::std::option::Option<f64>,
    /// <p>A numeric value corresponding to a medium severity finding.</p>
    pub medium: ::std::option::Option<f64>,
    /// <p>A numeric value corresponding to a high severity finding.</p>
    pub high: ::std::option::Option<f64>,
    /// <p>A numeric value corresponding to a critical finding.</p>
    pub critical: ::std::option::Option<f64>,
}
impl FindingMetricsValuePerSeverity {
    /// <p>A numeric value corresponding to an informational finding.</p>
    pub fn info(&self) -> ::std::option::Option<f64> {
        self.info
    }
    /// <p>A numeric value corresponding to a low severity finding.</p>
    pub fn low(&self) -> ::std::option::Option<f64> {
        self.low
    }
    /// <p>A numeric value corresponding to a medium severity finding.</p>
    pub fn medium(&self) -> ::std::option::Option<f64> {
        self.medium
    }
    /// <p>A numeric value corresponding to a high severity finding.</p>
    pub fn high(&self) -> ::std::option::Option<f64> {
        self.high
    }
    /// <p>A numeric value corresponding to a critical finding.</p>
    pub fn critical(&self) -> ::std::option::Option<f64> {
        self.critical
    }
}
impl FindingMetricsValuePerSeverity {
    /// Creates a new builder-style object to manufacture [`FindingMetricsValuePerSeverity`](crate::types::FindingMetricsValuePerSeverity).
    pub fn builder() -> crate::types::builders::FindingMetricsValuePerSeverityBuilder {
        crate::types::builders::FindingMetricsValuePerSeverityBuilder::default()
    }
}

/// A builder for [`FindingMetricsValuePerSeverity`](crate::types::FindingMetricsValuePerSeverity).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FindingMetricsValuePerSeverityBuilder {
    pub(crate) info: ::std::option::Option<f64>,
    pub(crate) low: ::std::option::Option<f64>,
    pub(crate) medium: ::std::option::Option<f64>,
    pub(crate) high: ::std::option::Option<f64>,
    pub(crate) critical: ::std::option::Option<f64>,
}
impl FindingMetricsValuePerSeverityBuilder {
    /// <p>A numeric value corresponding to an informational finding.</p>
    pub fn info(mut self, input: f64) -> Self {
        self.info = ::std::option::Option::Some(input);
        self
    }
    /// <p>A numeric value corresponding to an informational finding.</p>
    pub fn set_info(mut self, input: ::std::option::Option<f64>) -> Self {
        self.info = input;
        self
    }
    /// <p>A numeric value corresponding to an informational finding.</p>
    pub fn get_info(&self) -> &::std::option::Option<f64> {
        &self.info
    }
    /// <p>A numeric value corresponding to a low severity finding.</p>
    pub fn low(mut self, input: f64) -> Self {
        self.low = ::std::option::Option::Some(input);
        self
    }
    /// <p>A numeric value corresponding to a low severity finding.</p>
    pub fn set_low(mut self, input: ::std::option::Option<f64>) -> Self {
        self.low = input;
        self
    }
    /// <p>A numeric value corresponding to a low severity finding.</p>
    pub fn get_low(&self) -> &::std::option::Option<f64> {
        &self.low
    }
    /// <p>A numeric value corresponding to a medium severity finding.</p>
    pub fn medium(mut self, input: f64) -> Self {
        self.medium = ::std::option::Option::Some(input);
        self
    }
    /// <p>A numeric value corresponding to a medium severity finding.</p>
    pub fn set_medium(mut self, input: ::std::option::Option<f64>) -> Self {
        self.medium = input;
        self
    }
    /// <p>A numeric value corresponding to a medium severity finding.</p>
    pub fn get_medium(&self) -> &::std::option::Option<f64> {
        &self.medium
    }
    /// <p>A numeric value corresponding to a high severity finding.</p>
    pub fn high(mut self, input: f64) -> Self {
        self.high = ::std::option::Option::Some(input);
        self
    }
    /// <p>A numeric value corresponding to a high severity finding.</p>
    pub fn set_high(mut self, input: ::std::option::Option<f64>) -> Self {
        self.high = input;
        self
    }
    /// <p>A numeric value corresponding to a high severity finding.</p>
    pub fn get_high(&self) -> &::std::option::Option<f64> {
        &self.high
    }
    /// <p>A numeric value corresponding to a critical finding.</p>
    pub fn critical(mut self, input: f64) -> Self {
        self.critical = ::std::option::Option::Some(input);
        self
    }
    /// <p>A numeric value corresponding to a critical finding.</p>
    pub fn set_critical(mut self, input: ::std::option::Option<f64>) -> Self {
        self.critical = input;
        self
    }
    /// <p>A numeric value corresponding to a critical finding.</p>
    pub fn get_critical(&self) -> &::std::option::Option<f64> {
        &self.critical
    }
    /// Consumes the builder and constructs a [`FindingMetricsValuePerSeverity`](crate::types::FindingMetricsValuePerSeverity).
    pub fn build(self) -> crate::types::FindingMetricsValuePerSeverity {
        crate::types::FindingMetricsValuePerSeverity {
            info: self.info,
            low: self.low,
            medium: self.medium,
            high: self.high,
            critical: self.critical,
        }
    }
}
