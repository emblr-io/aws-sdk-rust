// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the encryption configuration for an account. Required to call <code>UpdateAccountConfiguration</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EncryptionConfig {
    /// <p>The KMS key ARN that is used for encryption. If an AWS-managed key is used for encryption, returns empty.</p>
    pub kms_key_arn: ::std::option::Option<::std::string::String>,
}
impl EncryptionConfig {
    /// <p>The KMS key ARN that is used for encryption. If an AWS-managed key is used for encryption, returns empty.</p>
    pub fn kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
}
impl EncryptionConfig {
    /// Creates a new builder-style object to manufacture [`EncryptionConfig`](crate::types::EncryptionConfig).
    pub fn builder() -> crate::types::builders::EncryptionConfigBuilder {
        crate::types::builders::EncryptionConfigBuilder::default()
    }
}

/// A builder for [`EncryptionConfig`](crate::types::EncryptionConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EncryptionConfigBuilder {
    pub(crate) kms_key_arn: ::std::option::Option<::std::string::String>,
}
impl EncryptionConfigBuilder {
    /// <p>The KMS key ARN that is used for encryption. If an AWS-managed key is used for encryption, returns empty.</p>
    pub fn kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The KMS key ARN that is used for encryption. If an AWS-managed key is used for encryption, returns empty.</p>
    pub fn set_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>The KMS key ARN that is used for encryption. If an AWS-managed key is used for encryption, returns empty.</p>
    pub fn get_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_arn
    }
    /// Consumes the builder and constructs a [`EncryptionConfig`](crate::types::EncryptionConfig).
    pub fn build(self) -> crate::types::EncryptionConfig {
        crate::types::EncryptionConfig {
            kms_key_arn: self.kms_key_arn,
        }
    }
}
