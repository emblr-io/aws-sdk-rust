// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The dollar value of the root cause.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RootCauseImpact {
    /// <p>The dollar amount that this root cause contributed to the anomaly's TotalImpact.</p>
    pub contribution: f64,
}
impl RootCauseImpact {
    /// <p>The dollar amount that this root cause contributed to the anomaly's TotalImpact.</p>
    pub fn contribution(&self) -> f64 {
        self.contribution
    }
}
impl RootCauseImpact {
    /// Creates a new builder-style object to manufacture [`RootCauseImpact`](crate::types::RootCauseImpact).
    pub fn builder() -> crate::types::builders::RootCauseImpactBuilder {
        crate::types::builders::RootCauseImpactBuilder::default()
    }
}

/// A builder for [`RootCauseImpact`](crate::types::RootCauseImpact).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RootCauseImpactBuilder {
    pub(crate) contribution: ::std::option::Option<f64>,
}
impl RootCauseImpactBuilder {
    /// <p>The dollar amount that this root cause contributed to the anomaly's TotalImpact.</p>
    /// This field is required.
    pub fn contribution(mut self, input: f64) -> Self {
        self.contribution = ::std::option::Option::Some(input);
        self
    }
    /// <p>The dollar amount that this root cause contributed to the anomaly's TotalImpact.</p>
    pub fn set_contribution(mut self, input: ::std::option::Option<f64>) -> Self {
        self.contribution = input;
        self
    }
    /// <p>The dollar amount that this root cause contributed to the anomaly's TotalImpact.</p>
    pub fn get_contribution(&self) -> &::std::option::Option<f64> {
        &self.contribution
    }
    /// Consumes the builder and constructs a [`RootCauseImpact`](crate::types::RootCauseImpact).
    pub fn build(self) -> crate::types::RootCauseImpact {
        crate::types::RootCauseImpact {
            contribution: self.contribution.unwrap_or_default(),
        }
    }
}
