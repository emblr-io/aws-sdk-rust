// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains cost or usage metric values for comparing two time periods. Each value includes amounts for the baseline and comparison time periods, their difference, and the unit of measurement.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComparisonMetricValue {
    /// <p>The numeric value for the baseline time period measurement.</p>
    pub baseline_time_period_amount: ::std::option::Option<::std::string::String>,
    /// <p>The numeric value for the comparison time period measurement.</p>
    pub comparison_time_period_amount: ::std::option::Option<::std::string::String>,
    /// <p>The calculated difference between <code>ComparisonTimePeriodAmount</code> and <code>BaselineTimePeriodAmount</code>.</p>
    pub difference: ::std::option::Option<::std::string::String>,
    /// <p>The unit of measurement applicable to all numeric values in this comparison.</p>
    pub unit: ::std::option::Option<::std::string::String>,
}
impl ComparisonMetricValue {
    /// <p>The numeric value for the baseline time period measurement.</p>
    pub fn baseline_time_period_amount(&self) -> ::std::option::Option<&str> {
        self.baseline_time_period_amount.as_deref()
    }
    /// <p>The numeric value for the comparison time period measurement.</p>
    pub fn comparison_time_period_amount(&self) -> ::std::option::Option<&str> {
        self.comparison_time_period_amount.as_deref()
    }
    /// <p>The calculated difference between <code>ComparisonTimePeriodAmount</code> and <code>BaselineTimePeriodAmount</code>.</p>
    pub fn difference(&self) -> ::std::option::Option<&str> {
        self.difference.as_deref()
    }
    /// <p>The unit of measurement applicable to all numeric values in this comparison.</p>
    pub fn unit(&self) -> ::std::option::Option<&str> {
        self.unit.as_deref()
    }
}
impl ComparisonMetricValue {
    /// Creates a new builder-style object to manufacture [`ComparisonMetricValue`](crate::types::ComparisonMetricValue).
    pub fn builder() -> crate::types::builders::ComparisonMetricValueBuilder {
        crate::types::builders::ComparisonMetricValueBuilder::default()
    }
}

/// A builder for [`ComparisonMetricValue`](crate::types::ComparisonMetricValue).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ComparisonMetricValueBuilder {
    pub(crate) baseline_time_period_amount: ::std::option::Option<::std::string::String>,
    pub(crate) comparison_time_period_amount: ::std::option::Option<::std::string::String>,
    pub(crate) difference: ::std::option::Option<::std::string::String>,
    pub(crate) unit: ::std::option::Option<::std::string::String>,
}
impl ComparisonMetricValueBuilder {
    /// <p>The numeric value for the baseline time period measurement.</p>
    pub fn baseline_time_period_amount(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.baseline_time_period_amount = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The numeric value for the baseline time period measurement.</p>
    pub fn set_baseline_time_period_amount(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.baseline_time_period_amount = input;
        self
    }
    /// <p>The numeric value for the baseline time period measurement.</p>
    pub fn get_baseline_time_period_amount(&self) -> &::std::option::Option<::std::string::String> {
        &self.baseline_time_period_amount
    }
    /// <p>The numeric value for the comparison time period measurement.</p>
    pub fn comparison_time_period_amount(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.comparison_time_period_amount = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The numeric value for the comparison time period measurement.</p>
    pub fn set_comparison_time_period_amount(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.comparison_time_period_amount = input;
        self
    }
    /// <p>The numeric value for the comparison time period measurement.</p>
    pub fn get_comparison_time_period_amount(&self) -> &::std::option::Option<::std::string::String> {
        &self.comparison_time_period_amount
    }
    /// <p>The calculated difference between <code>ComparisonTimePeriodAmount</code> and <code>BaselineTimePeriodAmount</code>.</p>
    pub fn difference(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.difference = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The calculated difference between <code>ComparisonTimePeriodAmount</code> and <code>BaselineTimePeriodAmount</code>.</p>
    pub fn set_difference(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.difference = input;
        self
    }
    /// <p>The calculated difference between <code>ComparisonTimePeriodAmount</code> and <code>BaselineTimePeriodAmount</code>.</p>
    pub fn get_difference(&self) -> &::std::option::Option<::std::string::String> {
        &self.difference
    }
    /// <p>The unit of measurement applicable to all numeric values in this comparison.</p>
    pub fn unit(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.unit = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unit of measurement applicable to all numeric values in this comparison.</p>
    pub fn set_unit(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.unit = input;
        self
    }
    /// <p>The unit of measurement applicable to all numeric values in this comparison.</p>
    pub fn get_unit(&self) -> &::std::option::Option<::std::string::String> {
        &self.unit
    }
    /// Consumes the builder and constructs a [`ComparisonMetricValue`](crate::types::ComparisonMetricValue).
    pub fn build(self) -> crate::types::ComparisonMetricValue {
        crate::types::ComparisonMetricValue {
            baseline_time_period_amount: self.baseline_time_period_amount,
            comparison_time_period_amount: self.comparison_time_period_amount,
            difference: self.difference,
            unit: self.unit,
        }
    }
}
