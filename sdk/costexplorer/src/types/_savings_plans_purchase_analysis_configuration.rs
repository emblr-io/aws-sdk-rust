// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for the Savings Plans purchase analysis.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SavingsPlansPurchaseAnalysisConfiguration {
    /// <p>The account scope that you want your analysis for.</p>
    pub account_scope: ::std::option::Option<crate::types::AccountScope>,
    /// <p>The account that the analysis is for.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of analysis.</p>
    pub analysis_type: crate::types::AnalysisType,
    /// <p>Savings Plans to include in the analysis.</p>
    pub savings_plans_to_add: ::std::vec::Vec<crate::types::SavingsPlans>,
    /// <p>Savings Plans to exclude from the analysis.</p>
    pub savings_plans_to_exclude: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The time period associated with the analysis.</p>
    pub look_back_time_period: ::std::option::Option<crate::types::DateInterval>,
}
impl SavingsPlansPurchaseAnalysisConfiguration {
    /// <p>The account scope that you want your analysis for.</p>
    pub fn account_scope(&self) -> ::std::option::Option<&crate::types::AccountScope> {
        self.account_scope.as_ref()
    }
    /// <p>The account that the analysis is for.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The type of analysis.</p>
    pub fn analysis_type(&self) -> &crate::types::AnalysisType {
        &self.analysis_type
    }
    /// <p>Savings Plans to include in the analysis.</p>
    pub fn savings_plans_to_add(&self) -> &[crate::types::SavingsPlans] {
        use std::ops::Deref;
        self.savings_plans_to_add.deref()
    }
    /// <p>Savings Plans to exclude from the analysis.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.savings_plans_to_exclude.is_none()`.
    pub fn savings_plans_to_exclude(&self) -> &[::std::string::String] {
        self.savings_plans_to_exclude.as_deref().unwrap_or_default()
    }
    /// <p>The time period associated with the analysis.</p>
    pub fn look_back_time_period(&self) -> ::std::option::Option<&crate::types::DateInterval> {
        self.look_back_time_period.as_ref()
    }
}
impl SavingsPlansPurchaseAnalysisConfiguration {
    /// Creates a new builder-style object to manufacture [`SavingsPlansPurchaseAnalysisConfiguration`](crate::types::SavingsPlansPurchaseAnalysisConfiguration).
    pub fn builder() -> crate::types::builders::SavingsPlansPurchaseAnalysisConfigurationBuilder {
        crate::types::builders::SavingsPlansPurchaseAnalysisConfigurationBuilder::default()
    }
}

/// A builder for [`SavingsPlansPurchaseAnalysisConfiguration`](crate::types::SavingsPlansPurchaseAnalysisConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SavingsPlansPurchaseAnalysisConfigurationBuilder {
    pub(crate) account_scope: ::std::option::Option<crate::types::AccountScope>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) analysis_type: ::std::option::Option<crate::types::AnalysisType>,
    pub(crate) savings_plans_to_add: ::std::option::Option<::std::vec::Vec<crate::types::SavingsPlans>>,
    pub(crate) savings_plans_to_exclude: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) look_back_time_period: ::std::option::Option<crate::types::DateInterval>,
}
impl SavingsPlansPurchaseAnalysisConfigurationBuilder {
    /// <p>The account scope that you want your analysis for.</p>
    pub fn account_scope(mut self, input: crate::types::AccountScope) -> Self {
        self.account_scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>The account scope that you want your analysis for.</p>
    pub fn set_account_scope(mut self, input: ::std::option::Option<crate::types::AccountScope>) -> Self {
        self.account_scope = input;
        self
    }
    /// <p>The account scope that you want your analysis for.</p>
    pub fn get_account_scope(&self) -> &::std::option::Option<crate::types::AccountScope> {
        &self.account_scope
    }
    /// <p>The account that the analysis is for.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account that the analysis is for.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The account that the analysis is for.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The type of analysis.</p>
    /// This field is required.
    pub fn analysis_type(mut self, input: crate::types::AnalysisType) -> Self {
        self.analysis_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of analysis.</p>
    pub fn set_analysis_type(mut self, input: ::std::option::Option<crate::types::AnalysisType>) -> Self {
        self.analysis_type = input;
        self
    }
    /// <p>The type of analysis.</p>
    pub fn get_analysis_type(&self) -> &::std::option::Option<crate::types::AnalysisType> {
        &self.analysis_type
    }
    /// Appends an item to `savings_plans_to_add`.
    ///
    /// To override the contents of this collection use [`set_savings_plans_to_add`](Self::set_savings_plans_to_add).
    ///
    /// <p>Savings Plans to include in the analysis.</p>
    pub fn savings_plans_to_add(mut self, input: crate::types::SavingsPlans) -> Self {
        let mut v = self.savings_plans_to_add.unwrap_or_default();
        v.push(input);
        self.savings_plans_to_add = ::std::option::Option::Some(v);
        self
    }
    /// <p>Savings Plans to include in the analysis.</p>
    pub fn set_savings_plans_to_add(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SavingsPlans>>) -> Self {
        self.savings_plans_to_add = input;
        self
    }
    /// <p>Savings Plans to include in the analysis.</p>
    pub fn get_savings_plans_to_add(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SavingsPlans>> {
        &self.savings_plans_to_add
    }
    /// Appends an item to `savings_plans_to_exclude`.
    ///
    /// To override the contents of this collection use [`set_savings_plans_to_exclude`](Self::set_savings_plans_to_exclude).
    ///
    /// <p>Savings Plans to exclude from the analysis.</p>
    pub fn savings_plans_to_exclude(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.savings_plans_to_exclude.unwrap_or_default();
        v.push(input.into());
        self.savings_plans_to_exclude = ::std::option::Option::Some(v);
        self
    }
    /// <p>Savings Plans to exclude from the analysis.</p>
    pub fn set_savings_plans_to_exclude(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.savings_plans_to_exclude = input;
        self
    }
    /// <p>Savings Plans to exclude from the analysis.</p>
    pub fn get_savings_plans_to_exclude(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.savings_plans_to_exclude
    }
    /// <p>The time period associated with the analysis.</p>
    /// This field is required.
    pub fn look_back_time_period(mut self, input: crate::types::DateInterval) -> Self {
        self.look_back_time_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time period associated with the analysis.</p>
    pub fn set_look_back_time_period(mut self, input: ::std::option::Option<crate::types::DateInterval>) -> Self {
        self.look_back_time_period = input;
        self
    }
    /// <p>The time period associated with the analysis.</p>
    pub fn get_look_back_time_period(&self) -> &::std::option::Option<crate::types::DateInterval> {
        &self.look_back_time_period
    }
    /// Consumes the builder and constructs a [`SavingsPlansPurchaseAnalysisConfiguration`](crate::types::SavingsPlansPurchaseAnalysisConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`analysis_type`](crate::types::builders::SavingsPlansPurchaseAnalysisConfigurationBuilder::analysis_type)
    /// - [`savings_plans_to_add`](crate::types::builders::SavingsPlansPurchaseAnalysisConfigurationBuilder::savings_plans_to_add)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::SavingsPlansPurchaseAnalysisConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SavingsPlansPurchaseAnalysisConfiguration {
            account_scope: self.account_scope,
            account_id: self.account_id,
            analysis_type: self.analysis_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "analysis_type",
                    "analysis_type was not specified but it is required when building SavingsPlansPurchaseAnalysisConfiguration",
                )
            })?,
            savings_plans_to_add: self.savings_plans_to_add.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "savings_plans_to_add",
                    "savings_plans_to_add was not specified but it is required when building SavingsPlansPurchaseAnalysisConfiguration",
                )
            })?,
            savings_plans_to_exclude: self.savings_plans_to_exclude,
            look_back_time_period: self.look_back_time_period,
        })
    }
}
