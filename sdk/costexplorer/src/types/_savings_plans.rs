// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Savings Plans commitment details.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SavingsPlans {
    /// <p>The payment option for the Savings Plans commitment.</p>
    pub payment_option: ::std::option::Option<crate::types::PaymentOption>,
    /// <p>The Savings Plans type.</p>
    pub savings_plans_type: ::std::option::Option<crate::types::SupportedSavingsPlansType>,
    /// <p>The Region associated with the Savings Plans commitment.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The instance family of the Savings Plans commitment.</p>
    pub instance_family: ::std::option::Option<::std::string::String>,
    /// <p>The term that you want the Savings Plans commitment for.</p>
    pub term_in_years: ::std::option::Option<crate::types::TermInYears>,
    /// <p>The Savings Plans commitment.</p>
    pub savings_plans_commitment: ::std::option::Option<f64>,
    /// <p>The unique ID that's used to distinguish Savings Plans commitments from one another.</p>
    pub offering_id: ::std::option::Option<::std::string::String>,
}
impl SavingsPlans {
    /// <p>The payment option for the Savings Plans commitment.</p>
    pub fn payment_option(&self) -> ::std::option::Option<&crate::types::PaymentOption> {
        self.payment_option.as_ref()
    }
    /// <p>The Savings Plans type.</p>
    pub fn savings_plans_type(&self) -> ::std::option::Option<&crate::types::SupportedSavingsPlansType> {
        self.savings_plans_type.as_ref()
    }
    /// <p>The Region associated with the Savings Plans commitment.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The instance family of the Savings Plans commitment.</p>
    pub fn instance_family(&self) -> ::std::option::Option<&str> {
        self.instance_family.as_deref()
    }
    /// <p>The term that you want the Savings Plans commitment for.</p>
    pub fn term_in_years(&self) -> ::std::option::Option<&crate::types::TermInYears> {
        self.term_in_years.as_ref()
    }
    /// <p>The Savings Plans commitment.</p>
    pub fn savings_plans_commitment(&self) -> ::std::option::Option<f64> {
        self.savings_plans_commitment
    }
    /// <p>The unique ID that's used to distinguish Savings Plans commitments from one another.</p>
    pub fn offering_id(&self) -> ::std::option::Option<&str> {
        self.offering_id.as_deref()
    }
}
impl SavingsPlans {
    /// Creates a new builder-style object to manufacture [`SavingsPlans`](crate::types::SavingsPlans).
    pub fn builder() -> crate::types::builders::SavingsPlansBuilder {
        crate::types::builders::SavingsPlansBuilder::default()
    }
}

/// A builder for [`SavingsPlans`](crate::types::SavingsPlans).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SavingsPlansBuilder {
    pub(crate) payment_option: ::std::option::Option<crate::types::PaymentOption>,
    pub(crate) savings_plans_type: ::std::option::Option<crate::types::SupportedSavingsPlansType>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) instance_family: ::std::option::Option<::std::string::String>,
    pub(crate) term_in_years: ::std::option::Option<crate::types::TermInYears>,
    pub(crate) savings_plans_commitment: ::std::option::Option<f64>,
    pub(crate) offering_id: ::std::option::Option<::std::string::String>,
}
impl SavingsPlansBuilder {
    /// <p>The payment option for the Savings Plans commitment.</p>
    pub fn payment_option(mut self, input: crate::types::PaymentOption) -> Self {
        self.payment_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>The payment option for the Savings Plans commitment.</p>
    pub fn set_payment_option(mut self, input: ::std::option::Option<crate::types::PaymentOption>) -> Self {
        self.payment_option = input;
        self
    }
    /// <p>The payment option for the Savings Plans commitment.</p>
    pub fn get_payment_option(&self) -> &::std::option::Option<crate::types::PaymentOption> {
        &self.payment_option
    }
    /// <p>The Savings Plans type.</p>
    pub fn savings_plans_type(mut self, input: crate::types::SupportedSavingsPlansType) -> Self {
        self.savings_plans_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Savings Plans type.</p>
    pub fn set_savings_plans_type(mut self, input: ::std::option::Option<crate::types::SupportedSavingsPlansType>) -> Self {
        self.savings_plans_type = input;
        self
    }
    /// <p>The Savings Plans type.</p>
    pub fn get_savings_plans_type(&self) -> &::std::option::Option<crate::types::SupportedSavingsPlansType> {
        &self.savings_plans_type
    }
    /// <p>The Region associated with the Savings Plans commitment.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Region associated with the Savings Plans commitment.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Region associated with the Savings Plans commitment.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The instance family of the Savings Plans commitment.</p>
    pub fn instance_family(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_family = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance family of the Savings Plans commitment.</p>
    pub fn set_instance_family(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_family = input;
        self
    }
    /// <p>The instance family of the Savings Plans commitment.</p>
    pub fn get_instance_family(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_family
    }
    /// <p>The term that you want the Savings Plans commitment for.</p>
    pub fn term_in_years(mut self, input: crate::types::TermInYears) -> Self {
        self.term_in_years = ::std::option::Option::Some(input);
        self
    }
    /// <p>The term that you want the Savings Plans commitment for.</p>
    pub fn set_term_in_years(mut self, input: ::std::option::Option<crate::types::TermInYears>) -> Self {
        self.term_in_years = input;
        self
    }
    /// <p>The term that you want the Savings Plans commitment for.</p>
    pub fn get_term_in_years(&self) -> &::std::option::Option<crate::types::TermInYears> {
        &self.term_in_years
    }
    /// <p>The Savings Plans commitment.</p>
    pub fn savings_plans_commitment(mut self, input: f64) -> Self {
        self.savings_plans_commitment = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Savings Plans commitment.</p>
    pub fn set_savings_plans_commitment(mut self, input: ::std::option::Option<f64>) -> Self {
        self.savings_plans_commitment = input;
        self
    }
    /// <p>The Savings Plans commitment.</p>
    pub fn get_savings_plans_commitment(&self) -> &::std::option::Option<f64> {
        &self.savings_plans_commitment
    }
    /// <p>The unique ID that's used to distinguish Savings Plans commitments from one another.</p>
    pub fn offering_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.offering_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID that's used to distinguish Savings Plans commitments from one another.</p>
    pub fn set_offering_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.offering_id = input;
        self
    }
    /// <p>The unique ID that's used to distinguish Savings Plans commitments from one another.</p>
    pub fn get_offering_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.offering_id
    }
    /// Consumes the builder and constructs a [`SavingsPlans`](crate::types::SavingsPlans).
    pub fn build(self) -> crate::types::SavingsPlans {
        crate::types::SavingsPlans {
            payment_option: self.payment_option,
            savings_plans_type: self.savings_plans_type,
            region: self.region,
            instance_family: self.instance_family,
            term_in_years: self.term_in_years,
            savings_plans_commitment: self.savings_plans_commitment,
            offering_id: self.offering_id,
        }
    }
}
