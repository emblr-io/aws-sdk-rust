// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of the analysis.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalysisSummary {
    /// <p>The estimated time for when the analysis will complete.</p>
    pub estimated_completion_time: ::std::option::Option<::std::string::String>,
    /// <p>The completion time of the analysis.</p>
    pub analysis_completion_time: ::std::option::Option<::std::string::String>,
    /// <p>The start time of the analysis.</p>
    pub analysis_started_time: ::std::option::Option<::std::string::String>,
    /// <p>The status of the analysis.</p>
    pub analysis_status: ::std::option::Option<crate::types::AnalysisStatus>,
    /// <p>The error code used for the analysis.</p>
    pub error_code: ::std::option::Option<crate::types::ErrorCode>,
    /// <p>The analysis ID that's associated with the commitment purchase analysis.</p>
    pub analysis_id: ::std::option::Option<::std::string::String>,
    /// <p>The configuration for the commitment purchase analysis.</p>
    pub commitment_purchase_analysis_configuration: ::std::option::Option<crate::types::CommitmentPurchaseAnalysisConfiguration>,
}
impl AnalysisSummary {
    /// <p>The estimated time for when the analysis will complete.</p>
    pub fn estimated_completion_time(&self) -> ::std::option::Option<&str> {
        self.estimated_completion_time.as_deref()
    }
    /// <p>The completion time of the analysis.</p>
    pub fn analysis_completion_time(&self) -> ::std::option::Option<&str> {
        self.analysis_completion_time.as_deref()
    }
    /// <p>The start time of the analysis.</p>
    pub fn analysis_started_time(&self) -> ::std::option::Option<&str> {
        self.analysis_started_time.as_deref()
    }
    /// <p>The status of the analysis.</p>
    pub fn analysis_status(&self) -> ::std::option::Option<&crate::types::AnalysisStatus> {
        self.analysis_status.as_ref()
    }
    /// <p>The error code used for the analysis.</p>
    pub fn error_code(&self) -> ::std::option::Option<&crate::types::ErrorCode> {
        self.error_code.as_ref()
    }
    /// <p>The analysis ID that's associated with the commitment purchase analysis.</p>
    pub fn analysis_id(&self) -> ::std::option::Option<&str> {
        self.analysis_id.as_deref()
    }
    /// <p>The configuration for the commitment purchase analysis.</p>
    pub fn commitment_purchase_analysis_configuration(&self) -> ::std::option::Option<&crate::types::CommitmentPurchaseAnalysisConfiguration> {
        self.commitment_purchase_analysis_configuration.as_ref()
    }
}
impl AnalysisSummary {
    /// Creates a new builder-style object to manufacture [`AnalysisSummary`](crate::types::AnalysisSummary).
    pub fn builder() -> crate::types::builders::AnalysisSummaryBuilder {
        crate::types::builders::AnalysisSummaryBuilder::default()
    }
}

/// A builder for [`AnalysisSummary`](crate::types::AnalysisSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AnalysisSummaryBuilder {
    pub(crate) estimated_completion_time: ::std::option::Option<::std::string::String>,
    pub(crate) analysis_completion_time: ::std::option::Option<::std::string::String>,
    pub(crate) analysis_started_time: ::std::option::Option<::std::string::String>,
    pub(crate) analysis_status: ::std::option::Option<crate::types::AnalysisStatus>,
    pub(crate) error_code: ::std::option::Option<crate::types::ErrorCode>,
    pub(crate) analysis_id: ::std::option::Option<::std::string::String>,
    pub(crate) commitment_purchase_analysis_configuration: ::std::option::Option<crate::types::CommitmentPurchaseAnalysisConfiguration>,
}
impl AnalysisSummaryBuilder {
    /// <p>The estimated time for when the analysis will complete.</p>
    pub fn estimated_completion_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.estimated_completion_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The estimated time for when the analysis will complete.</p>
    pub fn set_estimated_completion_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.estimated_completion_time = input;
        self
    }
    /// <p>The estimated time for when the analysis will complete.</p>
    pub fn get_estimated_completion_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.estimated_completion_time
    }
    /// <p>The completion time of the analysis.</p>
    pub fn analysis_completion_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.analysis_completion_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The completion time of the analysis.</p>
    pub fn set_analysis_completion_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.analysis_completion_time = input;
        self
    }
    /// <p>The completion time of the analysis.</p>
    pub fn get_analysis_completion_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.analysis_completion_time
    }
    /// <p>The start time of the analysis.</p>
    pub fn analysis_started_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.analysis_started_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The start time of the analysis.</p>
    pub fn set_analysis_started_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.analysis_started_time = input;
        self
    }
    /// <p>The start time of the analysis.</p>
    pub fn get_analysis_started_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.analysis_started_time
    }
    /// <p>The status of the analysis.</p>
    pub fn analysis_status(mut self, input: crate::types::AnalysisStatus) -> Self {
        self.analysis_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the analysis.</p>
    pub fn set_analysis_status(mut self, input: ::std::option::Option<crate::types::AnalysisStatus>) -> Self {
        self.analysis_status = input;
        self
    }
    /// <p>The status of the analysis.</p>
    pub fn get_analysis_status(&self) -> &::std::option::Option<crate::types::AnalysisStatus> {
        &self.analysis_status
    }
    /// <p>The error code used for the analysis.</p>
    pub fn error_code(mut self, input: crate::types::ErrorCode) -> Self {
        self.error_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The error code used for the analysis.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<crate::types::ErrorCode>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The error code used for the analysis.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<crate::types::ErrorCode> {
        &self.error_code
    }
    /// <p>The analysis ID that's associated with the commitment purchase analysis.</p>
    pub fn analysis_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.analysis_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The analysis ID that's associated with the commitment purchase analysis.</p>
    pub fn set_analysis_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.analysis_id = input;
        self
    }
    /// <p>The analysis ID that's associated with the commitment purchase analysis.</p>
    pub fn get_analysis_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.analysis_id
    }
    /// <p>The configuration for the commitment purchase analysis.</p>
    pub fn commitment_purchase_analysis_configuration(mut self, input: crate::types::CommitmentPurchaseAnalysisConfiguration) -> Self {
        self.commitment_purchase_analysis_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for the commitment purchase analysis.</p>
    pub fn set_commitment_purchase_analysis_configuration(
        mut self,
        input: ::std::option::Option<crate::types::CommitmentPurchaseAnalysisConfiguration>,
    ) -> Self {
        self.commitment_purchase_analysis_configuration = input;
        self
    }
    /// <p>The configuration for the commitment purchase analysis.</p>
    pub fn get_commitment_purchase_analysis_configuration(&self) -> &::std::option::Option<crate::types::CommitmentPurchaseAnalysisConfiguration> {
        &self.commitment_purchase_analysis_configuration
    }
    /// Consumes the builder and constructs a [`AnalysisSummary`](crate::types::AnalysisSummary).
    pub fn build(self) -> crate::types::AnalysisSummary {
        crate::types::AnalysisSummary {
            estimated_completion_time: self.estimated_completion_time,
            analysis_completion_time: self.analysis_completion_time,
            analysis_started_time: self.analysis_started_time,
            analysis_status: self.analysis_status,
            error_code: self.error_code,
            analysis_id: self.analysis_id,
            commitment_purchase_analysis_configuration: self.commitment_purchase_analysis_configuration,
        }
    }
}
