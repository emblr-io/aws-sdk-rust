// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListCommitmentPurchaseAnalysesInput {
    /// <p>The status of the analysis.</p>
    pub analysis_status: ::std::option::Option<crate::types::AnalysisStatus>,
    /// <p>The token to retrieve the next set of results.</p>
    pub next_page_token: ::std::option::Option<::std::string::String>,
    /// <p>The number of analyses that you want returned in a single response object.</p>
    pub page_size: ::std::option::Option<i32>,
    /// <p>The analysis IDs associated with the commitment purchase analyses.</p>
    pub analysis_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ListCommitmentPurchaseAnalysesInput {
    /// <p>The status of the analysis.</p>
    pub fn analysis_status(&self) -> ::std::option::Option<&crate::types::AnalysisStatus> {
        self.analysis_status.as_ref()
    }
    /// <p>The token to retrieve the next set of results.</p>
    pub fn next_page_token(&self) -> ::std::option::Option<&str> {
        self.next_page_token.as_deref()
    }
    /// <p>The number of analyses that you want returned in a single response object.</p>
    pub fn page_size(&self) -> ::std::option::Option<i32> {
        self.page_size
    }
    /// <p>The analysis IDs associated with the commitment purchase analyses.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.analysis_ids.is_none()`.
    pub fn analysis_ids(&self) -> &[::std::string::String] {
        self.analysis_ids.as_deref().unwrap_or_default()
    }
}
impl ListCommitmentPurchaseAnalysesInput {
    /// Creates a new builder-style object to manufacture [`ListCommitmentPurchaseAnalysesInput`](crate::operation::list_commitment_purchase_analyses::ListCommitmentPurchaseAnalysesInput).
    pub fn builder() -> crate::operation::list_commitment_purchase_analyses::builders::ListCommitmentPurchaseAnalysesInputBuilder {
        crate::operation::list_commitment_purchase_analyses::builders::ListCommitmentPurchaseAnalysesInputBuilder::default()
    }
}

/// A builder for [`ListCommitmentPurchaseAnalysesInput`](crate::operation::list_commitment_purchase_analyses::ListCommitmentPurchaseAnalysesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListCommitmentPurchaseAnalysesInputBuilder {
    pub(crate) analysis_status: ::std::option::Option<crate::types::AnalysisStatus>,
    pub(crate) next_page_token: ::std::option::Option<::std::string::String>,
    pub(crate) page_size: ::std::option::Option<i32>,
    pub(crate) analysis_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ListCommitmentPurchaseAnalysesInputBuilder {
    /// <p>The status of the analysis.</p>
    pub fn analysis_status(mut self, input: crate::types::AnalysisStatus) -> Self {
        self.analysis_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the analysis.</p>
    pub fn set_analysis_status(mut self, input: ::std::option::Option<crate::types::AnalysisStatus>) -> Self {
        self.analysis_status = input;
        self
    }
    /// <p>The status of the analysis.</p>
    pub fn get_analysis_status(&self) -> &::std::option::Option<crate::types::AnalysisStatus> {
        &self.analysis_status
    }
    /// <p>The token to retrieve the next set of results.</p>
    pub fn next_page_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_page_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to retrieve the next set of results.</p>
    pub fn set_next_page_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_page_token = input;
        self
    }
    /// <p>The token to retrieve the next set of results.</p>
    pub fn get_next_page_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_page_token
    }
    /// <p>The number of analyses that you want returned in a single response object.</p>
    pub fn page_size(mut self, input: i32) -> Self {
        self.page_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of analyses that you want returned in a single response object.</p>
    pub fn set_page_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.page_size = input;
        self
    }
    /// <p>The number of analyses that you want returned in a single response object.</p>
    pub fn get_page_size(&self) -> &::std::option::Option<i32> {
        &self.page_size
    }
    /// Appends an item to `analysis_ids`.
    ///
    /// To override the contents of this collection use [`set_analysis_ids`](Self::set_analysis_ids).
    ///
    /// <p>The analysis IDs associated with the commitment purchase analyses.</p>
    pub fn analysis_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.analysis_ids.unwrap_or_default();
        v.push(input.into());
        self.analysis_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The analysis IDs associated with the commitment purchase analyses.</p>
    pub fn set_analysis_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.analysis_ids = input;
        self
    }
    /// <p>The analysis IDs associated with the commitment purchase analyses.</p>
    pub fn get_analysis_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.analysis_ids
    }
    /// Consumes the builder and constructs a [`ListCommitmentPurchaseAnalysesInput`](crate::operation::list_commitment_purchase_analyses::ListCommitmentPurchaseAnalysesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_commitment_purchase_analyses::ListCommitmentPurchaseAnalysesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_commitment_purchase_analyses::ListCommitmentPurchaseAnalysesInput {
            analysis_status: self.analysis_status,
            next_page_token: self.next_page_token,
            page_size: self.page_size,
            analysis_ids: self.analysis_ids,
        })
    }
}
