// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetCommitmentPurchaseAnalysisOutput {
    /// <p>The estimated time for when the analysis will complete.</p>
    pub estimated_completion_time: ::std::string::String,
    /// <p>The completion time of the analysis.</p>
    pub analysis_completion_time: ::std::option::Option<::std::string::String>,
    /// <p>The start time of the analysis.</p>
    pub analysis_started_time: ::std::string::String,
    /// <p>The analysis ID that's associated with the commitment purchase analysis.</p>
    pub analysis_id: ::std::string::String,
    /// <p>The status of the analysis.</p>
    pub analysis_status: crate::types::AnalysisStatus,
    /// <p>The error code used for the analysis.</p>
    pub error_code: ::std::option::Option<crate::types::ErrorCode>,
    /// <p>Details about the analysis.</p>
    pub analysis_details: ::std::option::Option<crate::types::AnalysisDetails>,
    /// <p>The configuration for the commitment purchase analysis.</p>
    pub commitment_purchase_analysis_configuration: ::std::option::Option<crate::types::CommitmentPurchaseAnalysisConfiguration>,
    _request_id: Option<String>,
}
impl GetCommitmentPurchaseAnalysisOutput {
    /// <p>The estimated time for when the analysis will complete.</p>
    pub fn estimated_completion_time(&self) -> &str {
        use std::ops::Deref;
        self.estimated_completion_time.deref()
    }
    /// <p>The completion time of the analysis.</p>
    pub fn analysis_completion_time(&self) -> ::std::option::Option<&str> {
        self.analysis_completion_time.as_deref()
    }
    /// <p>The start time of the analysis.</p>
    pub fn analysis_started_time(&self) -> &str {
        use std::ops::Deref;
        self.analysis_started_time.deref()
    }
    /// <p>The analysis ID that's associated with the commitment purchase analysis.</p>
    pub fn analysis_id(&self) -> &str {
        use std::ops::Deref;
        self.analysis_id.deref()
    }
    /// <p>The status of the analysis.</p>
    pub fn analysis_status(&self) -> &crate::types::AnalysisStatus {
        &self.analysis_status
    }
    /// <p>The error code used for the analysis.</p>
    pub fn error_code(&self) -> ::std::option::Option<&crate::types::ErrorCode> {
        self.error_code.as_ref()
    }
    /// <p>Details about the analysis.</p>
    pub fn analysis_details(&self) -> ::std::option::Option<&crate::types::AnalysisDetails> {
        self.analysis_details.as_ref()
    }
    /// <p>The configuration for the commitment purchase analysis.</p>
    pub fn commitment_purchase_analysis_configuration(&self) -> ::std::option::Option<&crate::types::CommitmentPurchaseAnalysisConfiguration> {
        self.commitment_purchase_analysis_configuration.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetCommitmentPurchaseAnalysisOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetCommitmentPurchaseAnalysisOutput {
    /// Creates a new builder-style object to manufacture [`GetCommitmentPurchaseAnalysisOutput`](crate::operation::get_commitment_purchase_analysis::GetCommitmentPurchaseAnalysisOutput).
    pub fn builder() -> crate::operation::get_commitment_purchase_analysis::builders::GetCommitmentPurchaseAnalysisOutputBuilder {
        crate::operation::get_commitment_purchase_analysis::builders::GetCommitmentPurchaseAnalysisOutputBuilder::default()
    }
}

/// A builder for [`GetCommitmentPurchaseAnalysisOutput`](crate::operation::get_commitment_purchase_analysis::GetCommitmentPurchaseAnalysisOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetCommitmentPurchaseAnalysisOutputBuilder {
    pub(crate) estimated_completion_time: ::std::option::Option<::std::string::String>,
    pub(crate) analysis_completion_time: ::std::option::Option<::std::string::String>,
    pub(crate) analysis_started_time: ::std::option::Option<::std::string::String>,
    pub(crate) analysis_id: ::std::option::Option<::std::string::String>,
    pub(crate) analysis_status: ::std::option::Option<crate::types::AnalysisStatus>,
    pub(crate) error_code: ::std::option::Option<crate::types::ErrorCode>,
    pub(crate) analysis_details: ::std::option::Option<crate::types::AnalysisDetails>,
    pub(crate) commitment_purchase_analysis_configuration: ::std::option::Option<crate::types::CommitmentPurchaseAnalysisConfiguration>,
    _request_id: Option<String>,
}
impl GetCommitmentPurchaseAnalysisOutputBuilder {
    /// <p>The estimated time for when the analysis will complete.</p>
    /// This field is required.
    pub fn estimated_completion_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.estimated_completion_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The estimated time for when the analysis will complete.</p>
    pub fn set_estimated_completion_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.estimated_completion_time = input;
        self
    }
    /// <p>The estimated time for when the analysis will complete.</p>
    pub fn get_estimated_completion_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.estimated_completion_time
    }
    /// <p>The completion time of the analysis.</p>
    pub fn analysis_completion_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.analysis_completion_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The completion time of the analysis.</p>
    pub fn set_analysis_completion_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.analysis_completion_time = input;
        self
    }
    /// <p>The completion time of the analysis.</p>
    pub fn get_analysis_completion_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.analysis_completion_time
    }
    /// <p>The start time of the analysis.</p>
    /// This field is required.
    pub fn analysis_started_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.analysis_started_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The start time of the analysis.</p>
    pub fn set_analysis_started_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.analysis_started_time = input;
        self
    }
    /// <p>The start time of the analysis.</p>
    pub fn get_analysis_started_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.analysis_started_time
    }
    /// <p>The analysis ID that's associated with the commitment purchase analysis.</p>
    /// This field is required.
    pub fn analysis_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.analysis_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The analysis ID that's associated with the commitment purchase analysis.</p>
    pub fn set_analysis_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.analysis_id = input;
        self
    }
    /// <p>The analysis ID that's associated with the commitment purchase analysis.</p>
    pub fn get_analysis_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.analysis_id
    }
    /// <p>The status of the analysis.</p>
    /// This field is required.
    pub fn analysis_status(mut self, input: crate::types::AnalysisStatus) -> Self {
        self.analysis_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the analysis.</p>
    pub fn set_analysis_status(mut self, input: ::std::option::Option<crate::types::AnalysisStatus>) -> Self {
        self.analysis_status = input;
        self
    }
    /// <p>The status of the analysis.</p>
    pub fn get_analysis_status(&self) -> &::std::option::Option<crate::types::AnalysisStatus> {
        &self.analysis_status
    }
    /// <p>The error code used for the analysis.</p>
    pub fn error_code(mut self, input: crate::types::ErrorCode) -> Self {
        self.error_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The error code used for the analysis.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<crate::types::ErrorCode>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The error code used for the analysis.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<crate::types::ErrorCode> {
        &self.error_code
    }
    /// <p>Details about the analysis.</p>
    pub fn analysis_details(mut self, input: crate::types::AnalysisDetails) -> Self {
        self.analysis_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the analysis.</p>
    pub fn set_analysis_details(mut self, input: ::std::option::Option<crate::types::AnalysisDetails>) -> Self {
        self.analysis_details = input;
        self
    }
    /// <p>Details about the analysis.</p>
    pub fn get_analysis_details(&self) -> &::std::option::Option<crate::types::AnalysisDetails> {
        &self.analysis_details
    }
    /// <p>The configuration for the commitment purchase analysis.</p>
    /// This field is required.
    pub fn commitment_purchase_analysis_configuration(mut self, input: crate::types::CommitmentPurchaseAnalysisConfiguration) -> Self {
        self.commitment_purchase_analysis_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for the commitment purchase analysis.</p>
    pub fn set_commitment_purchase_analysis_configuration(
        mut self,
        input: ::std::option::Option<crate::types::CommitmentPurchaseAnalysisConfiguration>,
    ) -> Self {
        self.commitment_purchase_analysis_configuration = input;
        self
    }
    /// <p>The configuration for the commitment purchase analysis.</p>
    pub fn get_commitment_purchase_analysis_configuration(&self) -> &::std::option::Option<crate::types::CommitmentPurchaseAnalysisConfiguration> {
        &self.commitment_purchase_analysis_configuration
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetCommitmentPurchaseAnalysisOutput`](crate::operation::get_commitment_purchase_analysis::GetCommitmentPurchaseAnalysisOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`estimated_completion_time`](crate::operation::get_commitment_purchase_analysis::builders::GetCommitmentPurchaseAnalysisOutputBuilder::estimated_completion_time)
    /// - [`analysis_started_time`](crate::operation::get_commitment_purchase_analysis::builders::GetCommitmentPurchaseAnalysisOutputBuilder::analysis_started_time)
    /// - [`analysis_id`](crate::operation::get_commitment_purchase_analysis::builders::GetCommitmentPurchaseAnalysisOutputBuilder::analysis_id)
    /// - [`analysis_status`](crate::operation::get_commitment_purchase_analysis::builders::GetCommitmentPurchaseAnalysisOutputBuilder::analysis_status)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_commitment_purchase_analysis::GetCommitmentPurchaseAnalysisOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_commitment_purchase_analysis::GetCommitmentPurchaseAnalysisOutput {
            estimated_completion_time: self.estimated_completion_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "estimated_completion_time",
                    "estimated_completion_time was not specified but it is required when building GetCommitmentPurchaseAnalysisOutput",
                )
            })?,
            analysis_completion_time: self.analysis_completion_time,
            analysis_started_time: self.analysis_started_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "analysis_started_time",
                    "analysis_started_time was not specified but it is required when building GetCommitmentPurchaseAnalysisOutput",
                )
            })?,
            analysis_id: self.analysis_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "analysis_id",
                    "analysis_id was not specified but it is required when building GetCommitmentPurchaseAnalysisOutput",
                )
            })?,
            analysis_status: self.analysis_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "analysis_status",
                    "analysis_status was not specified but it is required when building GetCommitmentPurchaseAnalysisOutput",
                )
            })?,
            error_code: self.error_code,
            analysis_details: self.analysis_details,
            commitment_purchase_analysis_configuration: self.commitment_purchase_analysis_configuration,
            _request_id: self._request_id,
        })
    }
}
