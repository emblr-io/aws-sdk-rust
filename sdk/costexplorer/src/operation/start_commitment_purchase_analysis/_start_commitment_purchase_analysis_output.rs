// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartCommitmentPurchaseAnalysisOutput {
    /// <p>The analysis ID that's associated with the commitment purchase analysis.</p>
    pub analysis_id: ::std::string::String,
    /// <p>The start time of the analysis.</p>
    pub analysis_started_time: ::std::string::String,
    /// <p>The estimated time for when the analysis will complete.</p>
    pub estimated_completion_time: ::std::string::String,
    _request_id: Option<String>,
}
impl StartCommitmentPurchaseAnalysisOutput {
    /// <p>The analysis ID that's associated with the commitment purchase analysis.</p>
    pub fn analysis_id(&self) -> &str {
        use std::ops::Deref;
        self.analysis_id.deref()
    }
    /// <p>The start time of the analysis.</p>
    pub fn analysis_started_time(&self) -> &str {
        use std::ops::Deref;
        self.analysis_started_time.deref()
    }
    /// <p>The estimated time for when the analysis will complete.</p>
    pub fn estimated_completion_time(&self) -> &str {
        use std::ops::Deref;
        self.estimated_completion_time.deref()
    }
}
impl ::aws_types::request_id::RequestId for StartCommitmentPurchaseAnalysisOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartCommitmentPurchaseAnalysisOutput {
    /// Creates a new builder-style object to manufacture [`StartCommitmentPurchaseAnalysisOutput`](crate::operation::start_commitment_purchase_analysis::StartCommitmentPurchaseAnalysisOutput).
    pub fn builder() -> crate::operation::start_commitment_purchase_analysis::builders::StartCommitmentPurchaseAnalysisOutputBuilder {
        crate::operation::start_commitment_purchase_analysis::builders::StartCommitmentPurchaseAnalysisOutputBuilder::default()
    }
}

/// A builder for [`StartCommitmentPurchaseAnalysisOutput`](crate::operation::start_commitment_purchase_analysis::StartCommitmentPurchaseAnalysisOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartCommitmentPurchaseAnalysisOutputBuilder {
    pub(crate) analysis_id: ::std::option::Option<::std::string::String>,
    pub(crate) analysis_started_time: ::std::option::Option<::std::string::String>,
    pub(crate) estimated_completion_time: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl StartCommitmentPurchaseAnalysisOutputBuilder {
    /// <p>The analysis ID that's associated with the commitment purchase analysis.</p>
    /// This field is required.
    pub fn analysis_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.analysis_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The analysis ID that's associated with the commitment purchase analysis.</p>
    pub fn set_analysis_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.analysis_id = input;
        self
    }
    /// <p>The analysis ID that's associated with the commitment purchase analysis.</p>
    pub fn get_analysis_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.analysis_id
    }
    /// <p>The start time of the analysis.</p>
    /// This field is required.
    pub fn analysis_started_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.analysis_started_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The start time of the analysis.</p>
    pub fn set_analysis_started_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.analysis_started_time = input;
        self
    }
    /// <p>The start time of the analysis.</p>
    pub fn get_analysis_started_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.analysis_started_time
    }
    /// <p>The estimated time for when the analysis will complete.</p>
    /// This field is required.
    pub fn estimated_completion_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.estimated_completion_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The estimated time for when the analysis will complete.</p>
    pub fn set_estimated_completion_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.estimated_completion_time = input;
        self
    }
    /// <p>The estimated time for when the analysis will complete.</p>
    pub fn get_estimated_completion_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.estimated_completion_time
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartCommitmentPurchaseAnalysisOutput`](crate::operation::start_commitment_purchase_analysis::StartCommitmentPurchaseAnalysisOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`analysis_id`](crate::operation::start_commitment_purchase_analysis::builders::StartCommitmentPurchaseAnalysisOutputBuilder::analysis_id)
    /// - [`analysis_started_time`](crate::operation::start_commitment_purchase_analysis::builders::StartCommitmentPurchaseAnalysisOutputBuilder::analysis_started_time)
    /// - [`estimated_completion_time`](crate::operation::start_commitment_purchase_analysis::builders::StartCommitmentPurchaseAnalysisOutputBuilder::estimated_completion_time)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_commitment_purchase_analysis::StartCommitmentPurchaseAnalysisOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::start_commitment_purchase_analysis::StartCommitmentPurchaseAnalysisOutput {
                analysis_id: self.analysis_id.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "analysis_id",
                        "analysis_id was not specified but it is required when building StartCommitmentPurchaseAnalysisOutput",
                    )
                })?,
                analysis_started_time: self.analysis_started_time.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "analysis_started_time",
                        "analysis_started_time was not specified but it is required when building StartCommitmentPurchaseAnalysisOutput",
                    )
                })?,
                estimated_completion_time: self.estimated_completion_time.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "estimated_completion_time",
                        "estimated_completion_time was not specified but it is required when building StartCommitmentPurchaseAnalysisOutput",
                    )
                })?,
                _request_id: self._request_id,
            },
        )
    }
}
