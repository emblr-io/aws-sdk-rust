// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the type and version of the challenge being used for the Face Liveness session.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Challenge {
    /// <p>The type of the challenge being used for the Face Liveness session.</p>
    pub r#type: crate::types::ChallengeType,
    /// <p>The version of the challenge being used for the Face Liveness session.</p>
    pub version: ::std::string::String,
}
impl Challenge {
    /// <p>The type of the challenge being used for the Face Liveness session.</p>
    pub fn r#type(&self) -> &crate::types::ChallengeType {
        &self.r#type
    }
    /// <p>The version of the challenge being used for the Face Liveness session.</p>
    pub fn version(&self) -> &str {
        use std::ops::Deref;
        self.version.deref()
    }
}
impl Challenge {
    /// Creates a new builder-style object to manufacture [`Challenge`](crate::types::Challenge).
    pub fn builder() -> crate::types::builders::ChallengeBuilder {
        crate::types::builders::ChallengeBuilder::default()
    }
}

/// A builder for [`Challenge`](crate::types::Challenge).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ChallengeBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::ChallengeType>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
}
impl ChallengeBuilder {
    /// <p>The type of the challenge being used for the Face Liveness session.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::ChallengeType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the challenge being used for the Face Liveness session.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ChallengeType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the challenge being used for the Face Liveness session.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ChallengeType> {
        &self.r#type
    }
    /// <p>The version of the challenge being used for the Face Liveness session.</p>
    /// This field is required.
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the challenge being used for the Face Liveness session.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version of the challenge being used for the Face Liveness session.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// Consumes the builder and constructs a [`Challenge`](crate::types::Challenge).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::ChallengeBuilder::type)
    /// - [`version`](crate::types::builders::ChallengeBuilder::version)
    pub fn build(self) -> ::std::result::Result<crate::types::Challenge, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Challenge {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building Challenge",
                )
            })?,
            version: self.version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "version",
                    "version was not specified but it is required when building Challenge",
                )
            })?,
        })
    }
}
