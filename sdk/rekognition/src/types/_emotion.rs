// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The API returns a prediction of an emotion based on a person's facial expressions, along with the confidence level for the predicted emotion. It is not a determination of the personâ€™s internal emotional state and should not be used in such a way. For example, a person pretending to have a sad face might not be sad emotionally. The API is not intended to be used, and you may not use it, in a manner that violates the EU Artificial Intelligence Act or any other applicable law.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Emotion {
    /// <p>Type of emotion detected.</p>
    pub r#type: ::std::option::Option<crate::types::EmotionName>,
    /// <p>Level of confidence in the determination.</p>
    pub confidence: ::std::option::Option<f32>,
}
impl Emotion {
    /// <p>Type of emotion detected.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::EmotionName> {
        self.r#type.as_ref()
    }
    /// <p>Level of confidence in the determination.</p>
    pub fn confidence(&self) -> ::std::option::Option<f32> {
        self.confidence
    }
}
impl Emotion {
    /// Creates a new builder-style object to manufacture [`Emotion`](crate::types::Emotion).
    pub fn builder() -> crate::types::builders::EmotionBuilder {
        crate::types::builders::EmotionBuilder::default()
    }
}

/// A builder for [`Emotion`](crate::types::Emotion).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EmotionBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::EmotionName>,
    pub(crate) confidence: ::std::option::Option<f32>,
}
impl EmotionBuilder {
    /// <p>Type of emotion detected.</p>
    pub fn r#type(mut self, input: crate::types::EmotionName) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of emotion detected.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::EmotionName>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Type of emotion detected.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::EmotionName> {
        &self.r#type
    }
    /// <p>Level of confidence in the determination.</p>
    pub fn confidence(mut self, input: f32) -> Self {
        self.confidence = ::std::option::Option::Some(input);
        self
    }
    /// <p>Level of confidence in the determination.</p>
    pub fn set_confidence(mut self, input: ::std::option::Option<f32>) -> Self {
        self.confidence = input;
        self
    }
    /// <p>Level of confidence in the determination.</p>
    pub fn get_confidence(&self) -> &::std::option::Option<f32> {
        &self.confidence
    }
    /// Consumes the builder and constructs a [`Emotion`](crate::types::Emotion).
    pub fn build(self) -> crate::types::Emotion {
        crate::types::Emotion {
            r#type: self.r#type,
            confidence: self.confidence,
        }
    }
}
