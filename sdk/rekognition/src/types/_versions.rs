// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object specifying the acceptable range of challenge versions.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Versions {
    /// <p>The desired minimum version for the challenge.</p>
    pub minimum: ::std::option::Option<::std::string::String>,
    /// <p>The desired maximum version for the challenge.</p>
    pub maximum: ::std::option::Option<::std::string::String>,
}
impl Versions {
    /// <p>The desired minimum version for the challenge.</p>
    pub fn minimum(&self) -> ::std::option::Option<&str> {
        self.minimum.as_deref()
    }
    /// <p>The desired maximum version for the challenge.</p>
    pub fn maximum(&self) -> ::std::option::Option<&str> {
        self.maximum.as_deref()
    }
}
impl Versions {
    /// Creates a new builder-style object to manufacture [`Versions`](crate::types::Versions).
    pub fn builder() -> crate::types::builders::VersionsBuilder {
        crate::types::builders::VersionsBuilder::default()
    }
}

/// A builder for [`Versions`](crate::types::Versions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VersionsBuilder {
    pub(crate) minimum: ::std::option::Option<::std::string::String>,
    pub(crate) maximum: ::std::option::Option<::std::string::String>,
}
impl VersionsBuilder {
    /// <p>The desired minimum version for the challenge.</p>
    pub fn minimum(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.minimum = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The desired minimum version for the challenge.</p>
    pub fn set_minimum(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.minimum = input;
        self
    }
    /// <p>The desired minimum version for the challenge.</p>
    pub fn get_minimum(&self) -> &::std::option::Option<::std::string::String> {
        &self.minimum
    }
    /// <p>The desired maximum version for the challenge.</p>
    pub fn maximum(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.maximum = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The desired maximum version for the challenge.</p>
    pub fn set_maximum(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.maximum = input;
        self
    }
    /// <p>The desired maximum version for the challenge.</p>
    pub fn get_maximum(&self) -> &::std::option::Option<::std::string::String> {
        &self.maximum
    }
    /// Consumes the builder and constructs a [`Versions`](crate::types::Versions).
    pub fn build(self) -> crate::types::Versions {
        crate::types::Versions {
            minimum: self.minimum,
            maximum: self.maximum,
        }
    }
}
