// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an inappropriate, unwanted, or offensive content label detection in a stored video.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContentModerationDetection {
    /// <p>Time, in milliseconds from the beginning of the video, that the content moderation label was detected. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the moderated content first appears.</p>
    pub timestamp: i64,
    /// <p>The content moderation label detected by in the stored video.</p>
    pub moderation_label: ::std::option::Option<crate::types::ModerationLabel>,
    /// <p>The time in milliseconds defining the start of the timeline segment containing a continuously detected moderation label.</p>
    pub start_timestamp_millis: ::std::option::Option<i64>,
    /// <p>The time in milliseconds defining the end of the timeline segment containing a continuously detected moderation label.</p>
    pub end_timestamp_millis: ::std::option::Option<i64>,
    /// <p>The time duration of a segment in milliseconds, I.e. time elapsed from StartTimestampMillis to EndTimestampMillis.</p>
    pub duration_millis: ::std::option::Option<i64>,
    /// <p>A list of predicted results for the type of content an image contains. For example, the image content might be from animation, sports, or a video game.</p>
    pub content_types: ::std::option::Option<::std::vec::Vec<crate::types::ContentType>>,
}
impl ContentModerationDetection {
    /// <p>Time, in milliseconds from the beginning of the video, that the content moderation label was detected. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the moderated content first appears.</p>
    pub fn timestamp(&self) -> i64 {
        self.timestamp
    }
    /// <p>The content moderation label detected by in the stored video.</p>
    pub fn moderation_label(&self) -> ::std::option::Option<&crate::types::ModerationLabel> {
        self.moderation_label.as_ref()
    }
    /// <p>The time in milliseconds defining the start of the timeline segment containing a continuously detected moderation label.</p>
    pub fn start_timestamp_millis(&self) -> ::std::option::Option<i64> {
        self.start_timestamp_millis
    }
    /// <p>The time in milliseconds defining the end of the timeline segment containing a continuously detected moderation label.</p>
    pub fn end_timestamp_millis(&self) -> ::std::option::Option<i64> {
        self.end_timestamp_millis
    }
    /// <p>The time duration of a segment in milliseconds, I.e. time elapsed from StartTimestampMillis to EndTimestampMillis.</p>
    pub fn duration_millis(&self) -> ::std::option::Option<i64> {
        self.duration_millis
    }
    /// <p>A list of predicted results for the type of content an image contains. For example, the image content might be from animation, sports, or a video game.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.content_types.is_none()`.
    pub fn content_types(&self) -> &[crate::types::ContentType] {
        self.content_types.as_deref().unwrap_or_default()
    }
}
impl ContentModerationDetection {
    /// Creates a new builder-style object to manufacture [`ContentModerationDetection`](crate::types::ContentModerationDetection).
    pub fn builder() -> crate::types::builders::ContentModerationDetectionBuilder {
        crate::types::builders::ContentModerationDetectionBuilder::default()
    }
}

/// A builder for [`ContentModerationDetection`](crate::types::ContentModerationDetection).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContentModerationDetectionBuilder {
    pub(crate) timestamp: ::std::option::Option<i64>,
    pub(crate) moderation_label: ::std::option::Option<crate::types::ModerationLabel>,
    pub(crate) start_timestamp_millis: ::std::option::Option<i64>,
    pub(crate) end_timestamp_millis: ::std::option::Option<i64>,
    pub(crate) duration_millis: ::std::option::Option<i64>,
    pub(crate) content_types: ::std::option::Option<::std::vec::Vec<crate::types::ContentType>>,
}
impl ContentModerationDetectionBuilder {
    /// <p>Time, in milliseconds from the beginning of the video, that the content moderation label was detected. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the moderated content first appears.</p>
    pub fn timestamp(mut self, input: i64) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>Time, in milliseconds from the beginning of the video, that the content moderation label was detected. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the moderated content first appears.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<i64>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>Time, in milliseconds from the beginning of the video, that the content moderation label was detected. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the moderated content first appears.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<i64> {
        &self.timestamp
    }
    /// <p>The content moderation label detected by in the stored video.</p>
    pub fn moderation_label(mut self, input: crate::types::ModerationLabel) -> Self {
        self.moderation_label = ::std::option::Option::Some(input);
        self
    }
    /// <p>The content moderation label detected by in the stored video.</p>
    pub fn set_moderation_label(mut self, input: ::std::option::Option<crate::types::ModerationLabel>) -> Self {
        self.moderation_label = input;
        self
    }
    /// <p>The content moderation label detected by in the stored video.</p>
    pub fn get_moderation_label(&self) -> &::std::option::Option<crate::types::ModerationLabel> {
        &self.moderation_label
    }
    /// <p>The time in milliseconds defining the start of the timeline segment containing a continuously detected moderation label.</p>
    pub fn start_timestamp_millis(mut self, input: i64) -> Self {
        self.start_timestamp_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time in milliseconds defining the start of the timeline segment containing a continuously detected moderation label.</p>
    pub fn set_start_timestamp_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.start_timestamp_millis = input;
        self
    }
    /// <p>The time in milliseconds defining the start of the timeline segment containing a continuously detected moderation label.</p>
    pub fn get_start_timestamp_millis(&self) -> &::std::option::Option<i64> {
        &self.start_timestamp_millis
    }
    /// <p>The time in milliseconds defining the end of the timeline segment containing a continuously detected moderation label.</p>
    pub fn end_timestamp_millis(mut self, input: i64) -> Self {
        self.end_timestamp_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time in milliseconds defining the end of the timeline segment containing a continuously detected moderation label.</p>
    pub fn set_end_timestamp_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.end_timestamp_millis = input;
        self
    }
    /// <p>The time in milliseconds defining the end of the timeline segment containing a continuously detected moderation label.</p>
    pub fn get_end_timestamp_millis(&self) -> &::std::option::Option<i64> {
        &self.end_timestamp_millis
    }
    /// <p>The time duration of a segment in milliseconds, I.e. time elapsed from StartTimestampMillis to EndTimestampMillis.</p>
    pub fn duration_millis(mut self, input: i64) -> Self {
        self.duration_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time duration of a segment in milliseconds, I.e. time elapsed from StartTimestampMillis to EndTimestampMillis.</p>
    pub fn set_duration_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.duration_millis = input;
        self
    }
    /// <p>The time duration of a segment in milliseconds, I.e. time elapsed from StartTimestampMillis to EndTimestampMillis.</p>
    pub fn get_duration_millis(&self) -> &::std::option::Option<i64> {
        &self.duration_millis
    }
    /// Appends an item to `content_types`.
    ///
    /// To override the contents of this collection use [`set_content_types`](Self::set_content_types).
    ///
    /// <p>A list of predicted results for the type of content an image contains. For example, the image content might be from animation, sports, or a video game.</p>
    pub fn content_types(mut self, input: crate::types::ContentType) -> Self {
        let mut v = self.content_types.unwrap_or_default();
        v.push(input);
        self.content_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of predicted results for the type of content an image contains. For example, the image content might be from animation, sports, or a video game.</p>
    pub fn set_content_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContentType>>) -> Self {
        self.content_types = input;
        self
    }
    /// <p>A list of predicted results for the type of content an image contains. For example, the image content might be from animation, sports, or a video game.</p>
    pub fn get_content_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContentType>> {
        &self.content_types
    }
    /// Consumes the builder and constructs a [`ContentModerationDetection`](crate::types::ContentModerationDetection).
    pub fn build(self) -> crate::types::ContentModerationDetection {
        crate::types::ContentModerationDetection {
            timestamp: self.timestamp.unwrap_or_default(),
            moderation_label: self.moderation_label,
            start_timestamp_millis: self.start_timestamp_millis,
            end_timestamp_millis: self.end_timestamp_millis,
            duration_millis: self.duration_millis,
            content_types: self.content_types,
        }
    }
}
