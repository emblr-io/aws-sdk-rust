// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the Firewall configuration for a hosted Amplify application. Firewall support enables you to protect your web applications with a direct integration with WAF. For more information about using WAF protections for an Amplify application, see <a href="https://docs.aws.amazon.com/amplify/latest/userguide/WAF-integration.html">Firewall support for hosted sites</a> in the <i>Amplify User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WafConfiguration {
    /// <p>The Amazon Resource Name (ARN) for the web ACL associated with an Amplify app.</p>
    pub web_acl_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the process to associate or disassociate a web ACL to an Amplify app.</p>
    pub waf_status: ::std::option::Option<crate::types::WafStatus>,
    /// <p>The reason for the current status of the Firewall configuration.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
}
impl WafConfiguration {
    /// <p>The Amazon Resource Name (ARN) for the web ACL associated with an Amplify app.</p>
    pub fn web_acl_arn(&self) -> ::std::option::Option<&str> {
        self.web_acl_arn.as_deref()
    }
    /// <p>The status of the process to associate or disassociate a web ACL to an Amplify app.</p>
    pub fn waf_status(&self) -> ::std::option::Option<&crate::types::WafStatus> {
        self.waf_status.as_ref()
    }
    /// <p>The reason for the current status of the Firewall configuration.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
}
impl WafConfiguration {
    /// Creates a new builder-style object to manufacture [`WafConfiguration`](crate::types::WafConfiguration).
    pub fn builder() -> crate::types::builders::WafConfigurationBuilder {
        crate::types::builders::WafConfigurationBuilder::default()
    }
}

/// A builder for [`WafConfiguration`](crate::types::WafConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WafConfigurationBuilder {
    pub(crate) web_acl_arn: ::std::option::Option<::std::string::String>,
    pub(crate) waf_status: ::std::option::Option<crate::types::WafStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
}
impl WafConfigurationBuilder {
    /// <p>The Amazon Resource Name (ARN) for the web ACL associated with an Amplify app.</p>
    pub fn web_acl_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.web_acl_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the web ACL associated with an Amplify app.</p>
    pub fn set_web_acl_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.web_acl_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the web ACL associated with an Amplify app.</p>
    pub fn get_web_acl_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.web_acl_arn
    }
    /// <p>The status of the process to associate or disassociate a web ACL to an Amplify app.</p>
    pub fn waf_status(mut self, input: crate::types::WafStatus) -> Self {
        self.waf_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the process to associate or disassociate a web ACL to an Amplify app.</p>
    pub fn set_waf_status(mut self, input: ::std::option::Option<crate::types::WafStatus>) -> Self {
        self.waf_status = input;
        self
    }
    /// <p>The status of the process to associate or disassociate a web ACL to an Amplify app.</p>
    pub fn get_waf_status(&self) -> &::std::option::Option<crate::types::WafStatus> {
        &self.waf_status
    }
    /// <p>The reason for the current status of the Firewall configuration.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the current status of the Firewall configuration.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The reason for the current status of the Firewall configuration.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// Consumes the builder and constructs a [`WafConfiguration`](crate::types::WafConfiguration).
    pub fn build(self) -> crate::types::WafConfiguration {
        crate::types::WafConfiguration {
            web_acl_arn: self.web_acl_arn,
            waf_status: self.waf_status,
            status_reason: self.status_reason,
        }
    }
}
