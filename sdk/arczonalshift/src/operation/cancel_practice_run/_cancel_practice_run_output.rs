// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CancelPracticeRunOutput {
    /// <p>The identifier of the practice run zonal shift in Amazon Application Recovery Controller that was canceled.</p>
    pub zonal_shift_id: ::std::string::String,
    /// <p>The identifier for the resource that you canceled a practice run zonal shift for. The identifier is the Amazon Resource Name (ARN) for the resource.</p>
    pub resource_identifier: ::std::string::String,
    /// <p>The Availability Zone (for example, <code>use1-az1</code>) that traffic was moved away from for a resource that you specified for the practice run.</p>
    pub away_from: ::std::string::String,
    /// <p>The expiry time (expiration time) for an on-demand practice run zonal shift is 30 minutes from the time when you start the practice run, unless you cancel it before that time. However, be aware that the <code>expiryTime</code> field for practice run zonal shifts always has a value of 1 minute.</p>
    pub expiry_time: ::aws_smithy_types::DateTime,
    /// <p>The time (UTC) when the zonal shift starts.</p>
    pub start_time: ::aws_smithy_types::DateTime,
    /// <p>A status for the practice run that you canceled (expected status is <b>CANCELED</b>).</p>
    /// <p>The <code>Status</code> for a practice run zonal shift can have one of the following values:</p>
    pub status: crate::types::ZonalShiftStatus,
    /// <p>The initial comment that you entered about the practice run. Be aware that this comment can be overwritten by Amazon Web Services if the automatic check for balanced capacity fails. For more information, see <a href="https://docs.aws.amazon.com/r53recovery/latest/dg/arc-zonal-autoshift.how-it-works.capacity-check.html"> Capacity checks for practice runs</a> in the Amazon Application Recovery Controller Developer Guide.</p>
    pub comment: ::std::string::String,
    _request_id: Option<String>,
}
impl CancelPracticeRunOutput {
    /// <p>The identifier of the practice run zonal shift in Amazon Application Recovery Controller that was canceled.</p>
    pub fn zonal_shift_id(&self) -> &str {
        use std::ops::Deref;
        self.zonal_shift_id.deref()
    }
    /// <p>The identifier for the resource that you canceled a practice run zonal shift for. The identifier is the Amazon Resource Name (ARN) for the resource.</p>
    pub fn resource_identifier(&self) -> &str {
        use std::ops::Deref;
        self.resource_identifier.deref()
    }
    /// <p>The Availability Zone (for example, <code>use1-az1</code>) that traffic was moved away from for a resource that you specified for the practice run.</p>
    pub fn away_from(&self) -> &str {
        use std::ops::Deref;
        self.away_from.deref()
    }
    /// <p>The expiry time (expiration time) for an on-demand practice run zonal shift is 30 minutes from the time when you start the practice run, unless you cancel it before that time. However, be aware that the <code>expiryTime</code> field for practice run zonal shifts always has a value of 1 minute.</p>
    pub fn expiry_time(&self) -> &::aws_smithy_types::DateTime {
        &self.expiry_time
    }
    /// <p>The time (UTC) when the zonal shift starts.</p>
    pub fn start_time(&self) -> &::aws_smithy_types::DateTime {
        &self.start_time
    }
    /// <p>A status for the practice run that you canceled (expected status is <b>CANCELED</b>).</p>
    /// <p>The <code>Status</code> for a practice run zonal shift can have one of the following values:</p>
    pub fn status(&self) -> &crate::types::ZonalShiftStatus {
        &self.status
    }
    /// <p>The initial comment that you entered about the practice run. Be aware that this comment can be overwritten by Amazon Web Services if the automatic check for balanced capacity fails. For more information, see <a href="https://docs.aws.amazon.com/r53recovery/latest/dg/arc-zonal-autoshift.how-it-works.capacity-check.html"> Capacity checks for practice runs</a> in the Amazon Application Recovery Controller Developer Guide.</p>
    pub fn comment(&self) -> &str {
        use std::ops::Deref;
        self.comment.deref()
    }
}
impl ::aws_types::request_id::RequestId for CancelPracticeRunOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CancelPracticeRunOutput {
    /// Creates a new builder-style object to manufacture [`CancelPracticeRunOutput`](crate::operation::cancel_practice_run::CancelPracticeRunOutput).
    pub fn builder() -> crate::operation::cancel_practice_run::builders::CancelPracticeRunOutputBuilder {
        crate::operation::cancel_practice_run::builders::CancelPracticeRunOutputBuilder::default()
    }
}

/// A builder for [`CancelPracticeRunOutput`](crate::operation::cancel_practice_run::CancelPracticeRunOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CancelPracticeRunOutputBuilder {
    pub(crate) zonal_shift_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) away_from: ::std::option::Option<::std::string::String>,
    pub(crate) expiry_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::ZonalShiftStatus>,
    pub(crate) comment: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CancelPracticeRunOutputBuilder {
    /// <p>The identifier of the practice run zonal shift in Amazon Application Recovery Controller that was canceled.</p>
    /// This field is required.
    pub fn zonal_shift_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.zonal_shift_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the practice run zonal shift in Amazon Application Recovery Controller that was canceled.</p>
    pub fn set_zonal_shift_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.zonal_shift_id = input;
        self
    }
    /// <p>The identifier of the practice run zonal shift in Amazon Application Recovery Controller that was canceled.</p>
    pub fn get_zonal_shift_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.zonal_shift_id
    }
    /// <p>The identifier for the resource that you canceled a practice run zonal shift for. The identifier is the Amazon Resource Name (ARN) for the resource.</p>
    /// This field is required.
    pub fn resource_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the resource that you canceled a practice run zonal shift for. The identifier is the Amazon Resource Name (ARN) for the resource.</p>
    pub fn set_resource_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_identifier = input;
        self
    }
    /// <p>The identifier for the resource that you canceled a practice run zonal shift for. The identifier is the Amazon Resource Name (ARN) for the resource.</p>
    pub fn get_resource_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_identifier
    }
    /// <p>The Availability Zone (for example, <code>use1-az1</code>) that traffic was moved away from for a resource that you specified for the practice run.</p>
    /// This field is required.
    pub fn away_from(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.away_from = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone (for example, <code>use1-az1</code>) that traffic was moved away from for a resource that you specified for the practice run.</p>
    pub fn set_away_from(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.away_from = input;
        self
    }
    /// <p>The Availability Zone (for example, <code>use1-az1</code>) that traffic was moved away from for a resource that you specified for the practice run.</p>
    pub fn get_away_from(&self) -> &::std::option::Option<::std::string::String> {
        &self.away_from
    }
    /// <p>The expiry time (expiration time) for an on-demand practice run zonal shift is 30 minutes from the time when you start the practice run, unless you cancel it before that time. However, be aware that the <code>expiryTime</code> field for practice run zonal shifts always has a value of 1 minute.</p>
    /// This field is required.
    pub fn expiry_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expiry_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expiry time (expiration time) for an on-demand practice run zonal shift is 30 minutes from the time when you start the practice run, unless you cancel it before that time. However, be aware that the <code>expiryTime</code> field for practice run zonal shifts always has a value of 1 minute.</p>
    pub fn set_expiry_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expiry_time = input;
        self
    }
    /// <p>The expiry time (expiration time) for an on-demand practice run zonal shift is 30 minutes from the time when you start the practice run, unless you cancel it before that time. However, be aware that the <code>expiryTime</code> field for practice run zonal shifts always has a value of 1 minute.</p>
    pub fn get_expiry_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expiry_time
    }
    /// <p>The time (UTC) when the zonal shift starts.</p>
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time (UTC) when the zonal shift starts.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time (UTC) when the zonal shift starts.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>A status for the practice run that you canceled (expected status is <b>CANCELED</b>).</p>
    /// <p>The <code>Status</code> for a practice run zonal shift can have one of the following values:</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ZonalShiftStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>A status for the practice run that you canceled (expected status is <b>CANCELED</b>).</p>
    /// <p>The <code>Status</code> for a practice run zonal shift can have one of the following values:</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ZonalShiftStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>A status for the practice run that you canceled (expected status is <b>CANCELED</b>).</p>
    /// <p>The <code>Status</code> for a practice run zonal shift can have one of the following values:</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ZonalShiftStatus> {
        &self.status
    }
    /// <p>The initial comment that you entered about the practice run. Be aware that this comment can be overwritten by Amazon Web Services if the automatic check for balanced capacity fails. For more information, see <a href="https://docs.aws.amazon.com/r53recovery/latest/dg/arc-zonal-autoshift.how-it-works.capacity-check.html"> Capacity checks for practice runs</a> in the Amazon Application Recovery Controller Developer Guide.</p>
    /// This field is required.
    pub fn comment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.comment = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The initial comment that you entered about the practice run. Be aware that this comment can be overwritten by Amazon Web Services if the automatic check for balanced capacity fails. For more information, see <a href="https://docs.aws.amazon.com/r53recovery/latest/dg/arc-zonal-autoshift.how-it-works.capacity-check.html"> Capacity checks for practice runs</a> in the Amazon Application Recovery Controller Developer Guide.</p>
    pub fn set_comment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// <p>The initial comment that you entered about the practice run. Be aware that this comment can be overwritten by Amazon Web Services if the automatic check for balanced capacity fails. For more information, see <a href="https://docs.aws.amazon.com/r53recovery/latest/dg/arc-zonal-autoshift.how-it-works.capacity-check.html"> Capacity checks for practice runs</a> in the Amazon Application Recovery Controller Developer Guide.</p>
    pub fn get_comment(&self) -> &::std::option::Option<::std::string::String> {
        &self.comment
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CancelPracticeRunOutput`](crate::operation::cancel_practice_run::CancelPracticeRunOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`zonal_shift_id`](crate::operation::cancel_practice_run::builders::CancelPracticeRunOutputBuilder::zonal_shift_id)
    /// - [`resource_identifier`](crate::operation::cancel_practice_run::builders::CancelPracticeRunOutputBuilder::resource_identifier)
    /// - [`away_from`](crate::operation::cancel_practice_run::builders::CancelPracticeRunOutputBuilder::away_from)
    /// - [`expiry_time`](crate::operation::cancel_practice_run::builders::CancelPracticeRunOutputBuilder::expiry_time)
    /// - [`start_time`](crate::operation::cancel_practice_run::builders::CancelPracticeRunOutputBuilder::start_time)
    /// - [`status`](crate::operation::cancel_practice_run::builders::CancelPracticeRunOutputBuilder::status)
    /// - [`comment`](crate::operation::cancel_practice_run::builders::CancelPracticeRunOutputBuilder::comment)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::cancel_practice_run::CancelPracticeRunOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::cancel_practice_run::CancelPracticeRunOutput {
            zonal_shift_id: self.zonal_shift_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "zonal_shift_id",
                    "zonal_shift_id was not specified but it is required when building CancelPracticeRunOutput",
                )
            })?,
            resource_identifier: self.resource_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "resource_identifier",
                    "resource_identifier was not specified but it is required when building CancelPracticeRunOutput",
                )
            })?,
            away_from: self.away_from.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "away_from",
                    "away_from was not specified but it is required when building CancelPracticeRunOutput",
                )
            })?,
            expiry_time: self.expiry_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "expiry_time",
                    "expiry_time was not specified but it is required when building CancelPracticeRunOutput",
                )
            })?,
            start_time: self.start_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_time",
                    "start_time was not specified but it is required when building CancelPracticeRunOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building CancelPracticeRunOutput",
                )
            })?,
            comment: self.comment.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "comment",
                    "comment was not specified but it is required when building CancelPracticeRunOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
