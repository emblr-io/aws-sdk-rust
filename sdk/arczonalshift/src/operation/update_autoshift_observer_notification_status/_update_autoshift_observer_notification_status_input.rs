// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateAutoshiftObserverNotificationStatusInput {
    /// <p>The status to set for autoshift observer notification. If the status is <code>ENABLED</code>, ARC includes all autoshift events when you use the Amazon EventBridge pattern <code>Autoshift In Progress</code>. When the status is <code>DISABLED</code>, ARC includes only autoshift events for autoshifts when one or more of your resources is included in the autoshift.</p>
    pub status: ::std::option::Option<crate::types::AutoshiftObserverNotificationStatus>,
}
impl UpdateAutoshiftObserverNotificationStatusInput {
    /// <p>The status to set for autoshift observer notification. If the status is <code>ENABLED</code>, ARC includes all autoshift events when you use the Amazon EventBridge pattern <code>Autoshift In Progress</code>. When the status is <code>DISABLED</code>, ARC includes only autoshift events for autoshifts when one or more of your resources is included in the autoshift.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::AutoshiftObserverNotificationStatus> {
        self.status.as_ref()
    }
}
impl UpdateAutoshiftObserverNotificationStatusInput {
    /// Creates a new builder-style object to manufacture [`UpdateAutoshiftObserverNotificationStatusInput`](crate::operation::update_autoshift_observer_notification_status::UpdateAutoshiftObserverNotificationStatusInput).
    pub fn builder(
    ) -> crate::operation::update_autoshift_observer_notification_status::builders::UpdateAutoshiftObserverNotificationStatusInputBuilder {
        crate::operation::update_autoshift_observer_notification_status::builders::UpdateAutoshiftObserverNotificationStatusInputBuilder::default()
    }
}

/// A builder for [`UpdateAutoshiftObserverNotificationStatusInput`](crate::operation::update_autoshift_observer_notification_status::UpdateAutoshiftObserverNotificationStatusInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateAutoshiftObserverNotificationStatusInputBuilder {
    pub(crate) status: ::std::option::Option<crate::types::AutoshiftObserverNotificationStatus>,
}
impl UpdateAutoshiftObserverNotificationStatusInputBuilder {
    /// <p>The status to set for autoshift observer notification. If the status is <code>ENABLED</code>, ARC includes all autoshift events when you use the Amazon EventBridge pattern <code>Autoshift In Progress</code>. When the status is <code>DISABLED</code>, ARC includes only autoshift events for autoshifts when one or more of your resources is included in the autoshift.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::AutoshiftObserverNotificationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status to set for autoshift observer notification. If the status is <code>ENABLED</code>, ARC includes all autoshift events when you use the Amazon EventBridge pattern <code>Autoshift In Progress</code>. When the status is <code>DISABLED</code>, ARC includes only autoshift events for autoshifts when one or more of your resources is included in the autoshift.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AutoshiftObserverNotificationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status to set for autoshift observer notification. If the status is <code>ENABLED</code>, ARC includes all autoshift events when you use the Amazon EventBridge pattern <code>Autoshift In Progress</code>. When the status is <code>DISABLED</code>, ARC includes only autoshift events for autoshifts when one or more of your resources is included in the autoshift.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AutoshiftObserverNotificationStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`UpdateAutoshiftObserverNotificationStatusInput`](crate::operation::update_autoshift_observer_notification_status::UpdateAutoshiftObserverNotificationStatusInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_autoshift_observer_notification_status::UpdateAutoshiftObserverNotificationStatusInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_autoshift_observer_notification_status::UpdateAutoshiftObserverNotificationStatusInput { status: self.status },
        )
    }
}
