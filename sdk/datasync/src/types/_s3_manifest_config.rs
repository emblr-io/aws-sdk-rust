// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the S3 bucket where you're hosting the manifest that you want DataSync to use. For more information and configuration examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html">Specifying what DataSync transfers by using a manifest</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3ManifestConfig {
    /// <p>Specifies the Amazon S3 object key of your manifest. This can include a prefix (for example, <code>prefix/my-manifest.csv</code>).</p>
    pub manifest_object_path: ::std::string::String,
    /// <p>Specifies the Identity and Access Management (IAM) role that allows DataSync to access your manifest. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html#transferring-with-manifest-access">Providing DataSync access to your manifest</a>.</p>
    pub bucket_access_role_arn: ::std::string::String,
    /// <p>Specifies the Amazon Resource Name (ARN) of the S3 bucket where you're hosting your manifest.</p>
    pub s3_bucket_arn: ::std::string::String,
    /// <p>Specifies the object version ID of the manifest that you want DataSync to use. If you don't set this, DataSync uses the latest version of the object.</p>
    pub manifest_object_version_id: ::std::option::Option<::std::string::String>,
}
impl S3ManifestConfig {
    /// <p>Specifies the Amazon S3 object key of your manifest. This can include a prefix (for example, <code>prefix/my-manifest.csv</code>).</p>
    pub fn manifest_object_path(&self) -> &str {
        use std::ops::Deref;
        self.manifest_object_path.deref()
    }
    /// <p>Specifies the Identity and Access Management (IAM) role that allows DataSync to access your manifest. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html#transferring-with-manifest-access">Providing DataSync access to your manifest</a>.</p>
    pub fn bucket_access_role_arn(&self) -> &str {
        use std::ops::Deref;
        self.bucket_access_role_arn.deref()
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the S3 bucket where you're hosting your manifest.</p>
    pub fn s3_bucket_arn(&self) -> &str {
        use std::ops::Deref;
        self.s3_bucket_arn.deref()
    }
    /// <p>Specifies the object version ID of the manifest that you want DataSync to use. If you don't set this, DataSync uses the latest version of the object.</p>
    pub fn manifest_object_version_id(&self) -> ::std::option::Option<&str> {
        self.manifest_object_version_id.as_deref()
    }
}
impl S3ManifestConfig {
    /// Creates a new builder-style object to manufacture [`S3ManifestConfig`](crate::types::S3ManifestConfig).
    pub fn builder() -> crate::types::builders::S3ManifestConfigBuilder {
        crate::types::builders::S3ManifestConfigBuilder::default()
    }
}

/// A builder for [`S3ManifestConfig`](crate::types::S3ManifestConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct S3ManifestConfigBuilder {
    pub(crate) manifest_object_path: ::std::option::Option<::std::string::String>,
    pub(crate) bucket_access_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) s3_bucket_arn: ::std::option::Option<::std::string::String>,
    pub(crate) manifest_object_version_id: ::std::option::Option<::std::string::String>,
}
impl S3ManifestConfigBuilder {
    /// <p>Specifies the Amazon S3 object key of your manifest. This can include a prefix (for example, <code>prefix/my-manifest.csv</code>).</p>
    /// This field is required.
    pub fn manifest_object_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.manifest_object_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the Amazon S3 object key of your manifest. This can include a prefix (for example, <code>prefix/my-manifest.csv</code>).</p>
    pub fn set_manifest_object_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.manifest_object_path = input;
        self
    }
    /// <p>Specifies the Amazon S3 object key of your manifest. This can include a prefix (for example, <code>prefix/my-manifest.csv</code>).</p>
    pub fn get_manifest_object_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.manifest_object_path
    }
    /// <p>Specifies the Identity and Access Management (IAM) role that allows DataSync to access your manifest. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html#transferring-with-manifest-access">Providing DataSync access to your manifest</a>.</p>
    /// This field is required.
    pub fn bucket_access_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_access_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the Identity and Access Management (IAM) role that allows DataSync to access your manifest. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html#transferring-with-manifest-access">Providing DataSync access to your manifest</a>.</p>
    pub fn set_bucket_access_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_access_role_arn = input;
        self
    }
    /// <p>Specifies the Identity and Access Management (IAM) role that allows DataSync to access your manifest. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html#transferring-with-manifest-access">Providing DataSync access to your manifest</a>.</p>
    pub fn get_bucket_access_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_access_role_arn
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the S3 bucket where you're hosting your manifest.</p>
    /// This field is required.
    pub fn s3_bucket_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_bucket_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the S3 bucket where you're hosting your manifest.</p>
    pub fn set_s3_bucket_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_bucket_arn = input;
        self
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the S3 bucket where you're hosting your manifest.</p>
    pub fn get_s3_bucket_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_bucket_arn
    }
    /// <p>Specifies the object version ID of the manifest that you want DataSync to use. If you don't set this, DataSync uses the latest version of the object.</p>
    pub fn manifest_object_version_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.manifest_object_version_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the object version ID of the manifest that you want DataSync to use. If you don't set this, DataSync uses the latest version of the object.</p>
    pub fn set_manifest_object_version_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.manifest_object_version_id = input;
        self
    }
    /// <p>Specifies the object version ID of the manifest that you want DataSync to use. If you don't set this, DataSync uses the latest version of the object.</p>
    pub fn get_manifest_object_version_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.manifest_object_version_id
    }
    /// Consumes the builder and constructs a [`S3ManifestConfig`](crate::types::S3ManifestConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`manifest_object_path`](crate::types::builders::S3ManifestConfigBuilder::manifest_object_path)
    /// - [`bucket_access_role_arn`](crate::types::builders::S3ManifestConfigBuilder::bucket_access_role_arn)
    /// - [`s3_bucket_arn`](crate::types::builders::S3ManifestConfigBuilder::s3_bucket_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::S3ManifestConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::S3ManifestConfig {
            manifest_object_path: self.manifest_object_path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "manifest_object_path",
                    "manifest_object_path was not specified but it is required when building S3ManifestConfig",
                )
            })?,
            bucket_access_role_arn: self.bucket_access_role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bucket_access_role_arn",
                    "bucket_access_role_arn was not specified but it is required when building S3ManifestConfig",
                )
            })?,
            s3_bucket_arn: self.s3_bucket_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "s3_bucket_arn",
                    "s3_bucket_arn was not specified but it is required when building S3ManifestConfig",
                )
            })?,
            manifest_object_version_id: self.manifest_object_version_id,
        })
    }
}
