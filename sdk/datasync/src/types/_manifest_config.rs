// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configures a manifest, which is a list of files or objects that you want DataSync to transfer. For more information and configuration examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html">Specifying what DataSync transfers by using a manifest</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ManifestConfig {
    /// <p>Specifies what DataSync uses the manifest for.</p>
    pub action: ::std::option::Option<crate::types::ManifestAction>,
    /// <p>Specifies the file format of your manifest. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html#transferring-with-manifest-create">Creating a manifest</a>.</p>
    pub format: ::std::option::Option<crate::types::ManifestFormat>,
    /// <p>Specifies the manifest that you want DataSync to use and where it's hosted.</p><note>
    /// <p>You must specify this parameter if you're configuring a new manifest on or after February 7, 2024.</p>
    /// <p>If you don't, you'll get a 400 status code and <code>ValidationException</code> error stating that you're missing the IAM role for DataSync to access the S3 bucket where you're hosting your manifest. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html#transferring-with-manifest-access">Providing DataSync access to your manifest</a>.</p>
    /// </note>
    pub source: ::std::option::Option<crate::types::SourceManifestConfig>,
}
impl ManifestConfig {
    /// <p>Specifies what DataSync uses the manifest for.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::ManifestAction> {
        self.action.as_ref()
    }
    /// <p>Specifies the file format of your manifest. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html#transferring-with-manifest-create">Creating a manifest</a>.</p>
    pub fn format(&self) -> ::std::option::Option<&crate::types::ManifestFormat> {
        self.format.as_ref()
    }
    /// <p>Specifies the manifest that you want DataSync to use and where it's hosted.</p><note>
    /// <p>You must specify this parameter if you're configuring a new manifest on or after February 7, 2024.</p>
    /// <p>If you don't, you'll get a 400 status code and <code>ValidationException</code> error stating that you're missing the IAM role for DataSync to access the S3 bucket where you're hosting your manifest. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html#transferring-with-manifest-access">Providing DataSync access to your manifest</a>.</p>
    /// </note>
    pub fn source(&self) -> ::std::option::Option<&crate::types::SourceManifestConfig> {
        self.source.as_ref()
    }
}
impl ManifestConfig {
    /// Creates a new builder-style object to manufacture [`ManifestConfig`](crate::types::ManifestConfig).
    pub fn builder() -> crate::types::builders::ManifestConfigBuilder {
        crate::types::builders::ManifestConfigBuilder::default()
    }
}

/// A builder for [`ManifestConfig`](crate::types::ManifestConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ManifestConfigBuilder {
    pub(crate) action: ::std::option::Option<crate::types::ManifestAction>,
    pub(crate) format: ::std::option::Option<crate::types::ManifestFormat>,
    pub(crate) source: ::std::option::Option<crate::types::SourceManifestConfig>,
}
impl ManifestConfigBuilder {
    /// <p>Specifies what DataSync uses the manifest for.</p>
    pub fn action(mut self, input: crate::types::ManifestAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies what DataSync uses the manifest for.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::ManifestAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>Specifies what DataSync uses the manifest for.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::ManifestAction> {
        &self.action
    }
    /// <p>Specifies the file format of your manifest. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html#transferring-with-manifest-create">Creating a manifest</a>.</p>
    pub fn format(mut self, input: crate::types::ManifestFormat) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the file format of your manifest. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html#transferring-with-manifest-create">Creating a manifest</a>.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::ManifestFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>Specifies the file format of your manifest. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html#transferring-with-manifest-create">Creating a manifest</a>.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::ManifestFormat> {
        &self.format
    }
    /// <p>Specifies the manifest that you want DataSync to use and where it's hosted.</p><note>
    /// <p>You must specify this parameter if you're configuring a new manifest on or after February 7, 2024.</p>
    /// <p>If you don't, you'll get a 400 status code and <code>ValidationException</code> error stating that you're missing the IAM role for DataSync to access the S3 bucket where you're hosting your manifest. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html#transferring-with-manifest-access">Providing DataSync access to your manifest</a>.</p>
    /// </note>
    pub fn source(mut self, input: crate::types::SourceManifestConfig) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the manifest that you want DataSync to use and where it's hosted.</p><note>
    /// <p>You must specify this parameter if you're configuring a new manifest on or after February 7, 2024.</p>
    /// <p>If you don't, you'll get a 400 status code and <code>ValidationException</code> error stating that you're missing the IAM role for DataSync to access the S3 bucket where you're hosting your manifest. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html#transferring-with-manifest-access">Providing DataSync access to your manifest</a>.</p>
    /// </note>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::SourceManifestConfig>) -> Self {
        self.source = input;
        self
    }
    /// <p>Specifies the manifest that you want DataSync to use and where it's hosted.</p><note>
    /// <p>You must specify this parameter if you're configuring a new manifest on or after February 7, 2024.</p>
    /// <p>If you don't, you'll get a 400 status code and <code>ValidationException</code> error stating that you're missing the IAM role for DataSync to access the S3 bucket where you're hosting your manifest. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html#transferring-with-manifest-access">Providing DataSync access to your manifest</a>.</p>
    /// </note>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::SourceManifestConfig> {
        &self.source
    }
    /// Consumes the builder and constructs a [`ManifestConfig`](crate::types::ManifestConfig).
    pub fn build(self) -> crate::types::ManifestConfig {
        crate::types::ManifestConfig {
            action: self.action,
            format: self.format,
            source: self.source,
        }
    }
}
