// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the data transfer protocol that DataSync uses to access your Amazon FSx file system.</p><note>
/// <p>You can't update the Network File System (NFS) protocol configuration for FSx for ONTAP locations. DataSync currently only supports NFS version 3 with this location type.</p>
/// </note>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FsxUpdateProtocol {
    /// <p>Specifies the Network File System (NFS) protocol configuration that DataSync uses to access your FSx for OpenZFS file system or FSx for ONTAP file system's storage virtual machine (SVM).</p>
    pub nfs: ::std::option::Option<crate::types::FsxProtocolNfs>,
    /// <p>Specifies the Server Message Block (SMB) protocol configuration that DataSync uses to access your FSx for ONTAP file system's storage virtual machine (SVM).</p>
    pub smb: ::std::option::Option<crate::types::FsxUpdateProtocolSmb>,
}
impl FsxUpdateProtocol {
    /// <p>Specifies the Network File System (NFS) protocol configuration that DataSync uses to access your FSx for OpenZFS file system or FSx for ONTAP file system's storage virtual machine (SVM).</p>
    pub fn nfs(&self) -> ::std::option::Option<&crate::types::FsxProtocolNfs> {
        self.nfs.as_ref()
    }
    /// <p>Specifies the Server Message Block (SMB) protocol configuration that DataSync uses to access your FSx for ONTAP file system's storage virtual machine (SVM).</p>
    pub fn smb(&self) -> ::std::option::Option<&crate::types::FsxUpdateProtocolSmb> {
        self.smb.as_ref()
    }
}
impl FsxUpdateProtocol {
    /// Creates a new builder-style object to manufacture [`FsxUpdateProtocol`](crate::types::FsxUpdateProtocol).
    pub fn builder() -> crate::types::builders::FsxUpdateProtocolBuilder {
        crate::types::builders::FsxUpdateProtocolBuilder::default()
    }
}

/// A builder for [`FsxUpdateProtocol`](crate::types::FsxUpdateProtocol).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FsxUpdateProtocolBuilder {
    pub(crate) nfs: ::std::option::Option<crate::types::FsxProtocolNfs>,
    pub(crate) smb: ::std::option::Option<crate::types::FsxUpdateProtocolSmb>,
}
impl FsxUpdateProtocolBuilder {
    /// <p>Specifies the Network File System (NFS) protocol configuration that DataSync uses to access your FSx for OpenZFS file system or FSx for ONTAP file system's storage virtual machine (SVM).</p>
    pub fn nfs(mut self, input: crate::types::FsxProtocolNfs) -> Self {
        self.nfs = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the Network File System (NFS) protocol configuration that DataSync uses to access your FSx for OpenZFS file system or FSx for ONTAP file system's storage virtual machine (SVM).</p>
    pub fn set_nfs(mut self, input: ::std::option::Option<crate::types::FsxProtocolNfs>) -> Self {
        self.nfs = input;
        self
    }
    /// <p>Specifies the Network File System (NFS) protocol configuration that DataSync uses to access your FSx for OpenZFS file system or FSx for ONTAP file system's storage virtual machine (SVM).</p>
    pub fn get_nfs(&self) -> &::std::option::Option<crate::types::FsxProtocolNfs> {
        &self.nfs
    }
    /// <p>Specifies the Server Message Block (SMB) protocol configuration that DataSync uses to access your FSx for ONTAP file system's storage virtual machine (SVM).</p>
    pub fn smb(mut self, input: crate::types::FsxUpdateProtocolSmb) -> Self {
        self.smb = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the Server Message Block (SMB) protocol configuration that DataSync uses to access your FSx for ONTAP file system's storage virtual machine (SVM).</p>
    pub fn set_smb(mut self, input: ::std::option::Option<crate::types::FsxUpdateProtocolSmb>) -> Self {
        self.smb = input;
        self
    }
    /// <p>Specifies the Server Message Block (SMB) protocol configuration that DataSync uses to access your FSx for ONTAP file system's storage virtual machine (SVM).</p>
    pub fn get_smb(&self) -> &::std::option::Option<crate::types::FsxUpdateProtocolSmb> {
        &self.smb
    }
    /// Consumes the builder and constructs a [`FsxUpdateProtocol`](crate::types::FsxUpdateProtocol).
    pub fn build(self) -> crate::types::FsxUpdateProtocol {
        crate::types::FsxUpdateProtocol {
            nfs: self.nfs,
            smb: self.smb,
        }
    }
}
