// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies configuration information for a DataSync-managed secret, such as an authentication token or set of credentials that DataSync uses to access a specific transfer location. DataSync uses the default Amazon Web Services-managed KMS key to encrypt this secret in Secrets Manager.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ManagedSecretConfig {
    /// <p>Specifies the ARN for an Secrets Manager secret.</p>
    pub secret_arn: ::std::option::Option<::std::string::String>,
}
impl ManagedSecretConfig {
    /// <p>Specifies the ARN for an Secrets Manager secret.</p>
    pub fn secret_arn(&self) -> ::std::option::Option<&str> {
        self.secret_arn.as_deref()
    }
}
impl ManagedSecretConfig {
    /// Creates a new builder-style object to manufacture [`ManagedSecretConfig`](crate::types::ManagedSecretConfig).
    pub fn builder() -> crate::types::builders::ManagedSecretConfigBuilder {
        crate::types::builders::ManagedSecretConfigBuilder::default()
    }
}

/// A builder for [`ManagedSecretConfig`](crate::types::ManagedSecretConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ManagedSecretConfigBuilder {
    pub(crate) secret_arn: ::std::option::Option<::std::string::String>,
}
impl ManagedSecretConfigBuilder {
    /// <p>Specifies the ARN for an Secrets Manager secret.</p>
    pub fn secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the ARN for an Secrets Manager secret.</p>
    pub fn set_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_arn = input;
        self
    }
    /// <p>Specifies the ARN for an Secrets Manager secret.</p>
    pub fn get_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_arn
    }
    /// Consumes the builder and constructs a [`ManagedSecretConfig`](crate::types::ManagedSecretConfig).
    pub fn build(self) -> crate::types::ManagedSecretConfig {
        crate::types::ManagedSecretConfig { secret_arn: self.secret_arn }
    }
}
