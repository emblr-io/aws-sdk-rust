// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the manifest that you want DataSync to use and where it's hosted. For more information and configuration examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html">Specifying what DataSync transfers by using a manifest</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SourceManifestConfig {
    /// <p>Specifies the S3 bucket where you're hosting your manifest.</p>
    pub s3: ::std::option::Option<crate::types::S3ManifestConfig>,
}
impl SourceManifestConfig {
    /// <p>Specifies the S3 bucket where you're hosting your manifest.</p>
    pub fn s3(&self) -> ::std::option::Option<&crate::types::S3ManifestConfig> {
        self.s3.as_ref()
    }
}
impl SourceManifestConfig {
    /// Creates a new builder-style object to manufacture [`SourceManifestConfig`](crate::types::SourceManifestConfig).
    pub fn builder() -> crate::types::builders::SourceManifestConfigBuilder {
        crate::types::builders::SourceManifestConfigBuilder::default()
    }
}

/// A builder for [`SourceManifestConfig`](crate::types::SourceManifestConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SourceManifestConfigBuilder {
    pub(crate) s3: ::std::option::Option<crate::types::S3ManifestConfig>,
}
impl SourceManifestConfigBuilder {
    /// <p>Specifies the S3 bucket where you're hosting your manifest.</p>
    /// This field is required.
    pub fn s3(mut self, input: crate::types::S3ManifestConfig) -> Self {
        self.s3 = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the S3 bucket where you're hosting your manifest.</p>
    pub fn set_s3(mut self, input: ::std::option::Option<crate::types::S3ManifestConfig>) -> Self {
        self.s3 = input;
        self
    }
    /// <p>Specifies the S3 bucket where you're hosting your manifest.</p>
    pub fn get_s3(&self) -> &::std::option::Option<crate::types::S3ManifestConfig> {
        &self.s3
    }
    /// Consumes the builder and constructs a [`SourceManifestConfig`](crate::types::SourceManifestConfig).
    pub fn build(self) -> crate::types::SourceManifestConfig {
        crate::types::SourceManifestConfig { s3: self.s3 }
    }
}
