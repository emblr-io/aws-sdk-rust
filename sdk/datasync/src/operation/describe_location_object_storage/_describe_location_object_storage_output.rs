// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>DescribeLocationObjectStorageResponse</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeLocationObjectStorageOutput {
    /// <p>The ARN of the object storage system location.</p>
    pub location_arn: ::std::option::Option<::std::string::String>,
    /// <p>The URI of the object storage system location.</p>
    pub location_uri: ::std::option::Option<::std::string::String>,
    /// <p>The access key (for example, a user name) required to authenticate with the object storage system.</p>
    pub access_key: ::std::option::Option<::std::string::String>,
    /// <p>The port that your object storage server accepts inbound network traffic on (for example, port 443).</p>
    pub server_port: ::std::option::Option<i32>,
    /// <p>The protocol that your object storage system uses to communicate.</p>
    pub server_protocol: ::std::option::Option<crate::types::ObjectStorageServerProtocol>,
    /// <p>The ARNs of the DataSync agents that can connect with your object storage system.</p>
    pub agent_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The time that the location was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The certificate chain for DataSync to authenticate with your object storage system if the system uses a private or self-signed certificate authority (CA).</p>
    pub server_certificate: ::std::option::Option<::aws_smithy_types::Blob>,
    /// <p>Describes configuration information for a DataSync-managed secret, such as an authentication token or set of credentials that DataSync uses to access a specific transfer location. DataSync uses the default Amazon Web Services-managed KMS key to encrypt this secret in Secrets Manager.</p>
    pub managed_secret_config: ::std::option::Option<crate::types::ManagedSecretConfig>,
    /// <p>Describes configuration information for a DataSync-managed secret, such as an authentication token or set of credentials that DataSync uses to access a specific transfer location, and a customer-managed KMS key.</p>
    pub cmk_secret_config: ::std::option::Option<crate::types::CmkSecretConfig>,
    /// <p>Describes configuration information for a customer-managed secret, such as an authentication token or set of credentials that DataSync uses to access a specific transfer location, and a customer-managed KMS key.</p>
    pub custom_secret_config: ::std::option::Option<crate::types::CustomSecretConfig>,
    _request_id: Option<String>,
}
impl DescribeLocationObjectStorageOutput {
    /// <p>The ARN of the object storage system location.</p>
    pub fn location_arn(&self) -> ::std::option::Option<&str> {
        self.location_arn.as_deref()
    }
    /// <p>The URI of the object storage system location.</p>
    pub fn location_uri(&self) -> ::std::option::Option<&str> {
        self.location_uri.as_deref()
    }
    /// <p>The access key (for example, a user name) required to authenticate with the object storage system.</p>
    pub fn access_key(&self) -> ::std::option::Option<&str> {
        self.access_key.as_deref()
    }
    /// <p>The port that your object storage server accepts inbound network traffic on (for example, port 443).</p>
    pub fn server_port(&self) -> ::std::option::Option<i32> {
        self.server_port
    }
    /// <p>The protocol that your object storage system uses to communicate.</p>
    pub fn server_protocol(&self) -> ::std::option::Option<&crate::types::ObjectStorageServerProtocol> {
        self.server_protocol.as_ref()
    }
    /// <p>The ARNs of the DataSync agents that can connect with your object storage system.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.agent_arns.is_none()`.
    pub fn agent_arns(&self) -> &[::std::string::String] {
        self.agent_arns.as_deref().unwrap_or_default()
    }
    /// <p>The time that the location was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The certificate chain for DataSync to authenticate with your object storage system if the system uses a private or self-signed certificate authority (CA).</p>
    pub fn server_certificate(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.server_certificate.as_ref()
    }
    /// <p>Describes configuration information for a DataSync-managed secret, such as an authentication token or set of credentials that DataSync uses to access a specific transfer location. DataSync uses the default Amazon Web Services-managed KMS key to encrypt this secret in Secrets Manager.</p>
    pub fn managed_secret_config(&self) -> ::std::option::Option<&crate::types::ManagedSecretConfig> {
        self.managed_secret_config.as_ref()
    }
    /// <p>Describes configuration information for a DataSync-managed secret, such as an authentication token or set of credentials that DataSync uses to access a specific transfer location, and a customer-managed KMS key.</p>
    pub fn cmk_secret_config(&self) -> ::std::option::Option<&crate::types::CmkSecretConfig> {
        self.cmk_secret_config.as_ref()
    }
    /// <p>Describes configuration information for a customer-managed secret, such as an authentication token or set of credentials that DataSync uses to access a specific transfer location, and a customer-managed KMS key.</p>
    pub fn custom_secret_config(&self) -> ::std::option::Option<&crate::types::CustomSecretConfig> {
        self.custom_secret_config.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeLocationObjectStorageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeLocationObjectStorageOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLocationObjectStorageOutput`](crate::operation::describe_location_object_storage::DescribeLocationObjectStorageOutput).
    pub fn builder() -> crate::operation::describe_location_object_storage::builders::DescribeLocationObjectStorageOutputBuilder {
        crate::operation::describe_location_object_storage::builders::DescribeLocationObjectStorageOutputBuilder::default()
    }
}

/// A builder for [`DescribeLocationObjectStorageOutput`](crate::operation::describe_location_object_storage::DescribeLocationObjectStorageOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeLocationObjectStorageOutputBuilder {
    pub(crate) location_arn: ::std::option::Option<::std::string::String>,
    pub(crate) location_uri: ::std::option::Option<::std::string::String>,
    pub(crate) access_key: ::std::option::Option<::std::string::String>,
    pub(crate) server_port: ::std::option::Option<i32>,
    pub(crate) server_protocol: ::std::option::Option<crate::types::ObjectStorageServerProtocol>,
    pub(crate) agent_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) server_certificate: ::std::option::Option<::aws_smithy_types::Blob>,
    pub(crate) managed_secret_config: ::std::option::Option<crate::types::ManagedSecretConfig>,
    pub(crate) cmk_secret_config: ::std::option::Option<crate::types::CmkSecretConfig>,
    pub(crate) custom_secret_config: ::std::option::Option<crate::types::CustomSecretConfig>,
    _request_id: Option<String>,
}
impl DescribeLocationObjectStorageOutputBuilder {
    /// <p>The ARN of the object storage system location.</p>
    pub fn location_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the object storage system location.</p>
    pub fn set_location_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location_arn = input;
        self
    }
    /// <p>The ARN of the object storage system location.</p>
    pub fn get_location_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.location_arn
    }
    /// <p>The URI of the object storage system location.</p>
    pub fn location_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URI of the object storage system location.</p>
    pub fn set_location_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location_uri = input;
        self
    }
    /// <p>The URI of the object storage system location.</p>
    pub fn get_location_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.location_uri
    }
    /// <p>The access key (for example, a user name) required to authenticate with the object storage system.</p>
    pub fn access_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The access key (for example, a user name) required to authenticate with the object storage system.</p>
    pub fn set_access_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_key = input;
        self
    }
    /// <p>The access key (for example, a user name) required to authenticate with the object storage system.</p>
    pub fn get_access_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_key
    }
    /// <p>The port that your object storage server accepts inbound network traffic on (for example, port 443).</p>
    pub fn server_port(mut self, input: i32) -> Self {
        self.server_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port that your object storage server accepts inbound network traffic on (for example, port 443).</p>
    pub fn set_server_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.server_port = input;
        self
    }
    /// <p>The port that your object storage server accepts inbound network traffic on (for example, port 443).</p>
    pub fn get_server_port(&self) -> &::std::option::Option<i32> {
        &self.server_port
    }
    /// <p>The protocol that your object storage system uses to communicate.</p>
    pub fn server_protocol(mut self, input: crate::types::ObjectStorageServerProtocol) -> Self {
        self.server_protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>The protocol that your object storage system uses to communicate.</p>
    pub fn set_server_protocol(mut self, input: ::std::option::Option<crate::types::ObjectStorageServerProtocol>) -> Self {
        self.server_protocol = input;
        self
    }
    /// <p>The protocol that your object storage system uses to communicate.</p>
    pub fn get_server_protocol(&self) -> &::std::option::Option<crate::types::ObjectStorageServerProtocol> {
        &self.server_protocol
    }
    /// Appends an item to `agent_arns`.
    ///
    /// To override the contents of this collection use [`set_agent_arns`](Self::set_agent_arns).
    ///
    /// <p>The ARNs of the DataSync agents that can connect with your object storage system.</p>
    pub fn agent_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.agent_arns.unwrap_or_default();
        v.push(input.into());
        self.agent_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The ARNs of the DataSync agents that can connect with your object storage system.</p>
    pub fn set_agent_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.agent_arns = input;
        self
    }
    /// <p>The ARNs of the DataSync agents that can connect with your object storage system.</p>
    pub fn get_agent_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.agent_arns
    }
    /// <p>The time that the location was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the location was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time that the location was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The certificate chain for DataSync to authenticate with your object storage system if the system uses a private or self-signed certificate authority (CA).</p>
    pub fn server_certificate(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.server_certificate = ::std::option::Option::Some(input);
        self
    }
    /// <p>The certificate chain for DataSync to authenticate with your object storage system if the system uses a private or self-signed certificate authority (CA).</p>
    pub fn set_server_certificate(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.server_certificate = input;
        self
    }
    /// <p>The certificate chain for DataSync to authenticate with your object storage system if the system uses a private or self-signed certificate authority (CA).</p>
    pub fn get_server_certificate(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.server_certificate
    }
    /// <p>Describes configuration information for a DataSync-managed secret, such as an authentication token or set of credentials that DataSync uses to access a specific transfer location. DataSync uses the default Amazon Web Services-managed KMS key to encrypt this secret in Secrets Manager.</p>
    pub fn managed_secret_config(mut self, input: crate::types::ManagedSecretConfig) -> Self {
        self.managed_secret_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes configuration information for a DataSync-managed secret, such as an authentication token or set of credentials that DataSync uses to access a specific transfer location. DataSync uses the default Amazon Web Services-managed KMS key to encrypt this secret in Secrets Manager.</p>
    pub fn set_managed_secret_config(mut self, input: ::std::option::Option<crate::types::ManagedSecretConfig>) -> Self {
        self.managed_secret_config = input;
        self
    }
    /// <p>Describes configuration information for a DataSync-managed secret, such as an authentication token or set of credentials that DataSync uses to access a specific transfer location. DataSync uses the default Amazon Web Services-managed KMS key to encrypt this secret in Secrets Manager.</p>
    pub fn get_managed_secret_config(&self) -> &::std::option::Option<crate::types::ManagedSecretConfig> {
        &self.managed_secret_config
    }
    /// <p>Describes configuration information for a DataSync-managed secret, such as an authentication token or set of credentials that DataSync uses to access a specific transfer location, and a customer-managed KMS key.</p>
    pub fn cmk_secret_config(mut self, input: crate::types::CmkSecretConfig) -> Self {
        self.cmk_secret_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes configuration information for a DataSync-managed secret, such as an authentication token or set of credentials that DataSync uses to access a specific transfer location, and a customer-managed KMS key.</p>
    pub fn set_cmk_secret_config(mut self, input: ::std::option::Option<crate::types::CmkSecretConfig>) -> Self {
        self.cmk_secret_config = input;
        self
    }
    /// <p>Describes configuration information for a DataSync-managed secret, such as an authentication token or set of credentials that DataSync uses to access a specific transfer location, and a customer-managed KMS key.</p>
    pub fn get_cmk_secret_config(&self) -> &::std::option::Option<crate::types::CmkSecretConfig> {
        &self.cmk_secret_config
    }
    /// <p>Describes configuration information for a customer-managed secret, such as an authentication token or set of credentials that DataSync uses to access a specific transfer location, and a customer-managed KMS key.</p>
    pub fn custom_secret_config(mut self, input: crate::types::CustomSecretConfig) -> Self {
        self.custom_secret_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes configuration information for a customer-managed secret, such as an authentication token or set of credentials that DataSync uses to access a specific transfer location, and a customer-managed KMS key.</p>
    pub fn set_custom_secret_config(mut self, input: ::std::option::Option<crate::types::CustomSecretConfig>) -> Self {
        self.custom_secret_config = input;
        self
    }
    /// <p>Describes configuration information for a customer-managed secret, such as an authentication token or set of credentials that DataSync uses to access a specific transfer location, and a customer-managed KMS key.</p>
    pub fn get_custom_secret_config(&self) -> &::std::option::Option<crate::types::CustomSecretConfig> {
        &self.custom_secret_config
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeLocationObjectStorageOutput`](crate::operation::describe_location_object_storage::DescribeLocationObjectStorageOutput).
    pub fn build(self) -> crate::operation::describe_location_object_storage::DescribeLocationObjectStorageOutput {
        crate::operation::describe_location_object_storage::DescribeLocationObjectStorageOutput {
            location_arn: self.location_arn,
            location_uri: self.location_uri,
            access_key: self.access_key,
            server_port: self.server_port,
            server_protocol: self.server_protocol,
            agent_arns: self.agent_arns,
            creation_time: self.creation_time,
            server_certificate: self.server_certificate,
            managed_secret_config: self.managed_secret_config,
            cmk_secret_config: self.cmk_secret_config,
            custom_secret_config: self.custom_secret_config,
            _request_id: self._request_id,
        }
    }
}
