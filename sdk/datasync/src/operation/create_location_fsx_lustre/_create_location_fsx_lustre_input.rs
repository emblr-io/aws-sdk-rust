// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateLocationFsxLustreInput {
    /// <p>Specifies the Amazon Resource Name (ARN) of the FSx for Lustre file system.</p>
    pub fsx_filesystem_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the Amazon Resource Names (ARNs) of up to five security groups that provide access to your FSx for Lustre file system.</p>
    /// <p>The security groups must be able to access the file system's ports. The file system must also allow access from the security groups. For information about file system access, see the <a href="https://docs.aws.amazon.com/fsx/latest/LustreGuide/limit-access-security-groups.html"> <i>Amazon FSx for Lustre User Guide</i> </a>.</p>
    pub security_group_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies a mount path for your FSx for Lustre file system. The path can include subdirectories.</p>
    /// <p>When the location is used as a source, DataSync reads data from the mount path. When the location is used as a destination, DataSync writes data to the mount path. If you don't include this parameter, DataSync uses the file system's root directory (<code>/</code>).</p>
    pub subdirectory: ::std::option::Option<::std::string::String>,
    /// <p>Specifies labels that help you categorize, filter, and search for your Amazon Web Services resources. We recommend creating at least a name tag for your location.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::TagListEntry>>,
}
impl CreateLocationFsxLustreInput {
    /// <p>Specifies the Amazon Resource Name (ARN) of the FSx for Lustre file system.</p>
    pub fn fsx_filesystem_arn(&self) -> ::std::option::Option<&str> {
        self.fsx_filesystem_arn.as_deref()
    }
    /// <p>Specifies the Amazon Resource Names (ARNs) of up to five security groups that provide access to your FSx for Lustre file system.</p>
    /// <p>The security groups must be able to access the file system's ports. The file system must also allow access from the security groups. For information about file system access, see the <a href="https://docs.aws.amazon.com/fsx/latest/LustreGuide/limit-access-security-groups.html"> <i>Amazon FSx for Lustre User Guide</i> </a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_group_arns.is_none()`.
    pub fn security_group_arns(&self) -> &[::std::string::String] {
        self.security_group_arns.as_deref().unwrap_or_default()
    }
    /// <p>Specifies a mount path for your FSx for Lustre file system. The path can include subdirectories.</p>
    /// <p>When the location is used as a source, DataSync reads data from the mount path. When the location is used as a destination, DataSync writes data to the mount path. If you don't include this parameter, DataSync uses the file system's root directory (<code>/</code>).</p>
    pub fn subdirectory(&self) -> ::std::option::Option<&str> {
        self.subdirectory.as_deref()
    }
    /// <p>Specifies labels that help you categorize, filter, and search for your Amazon Web Services resources. We recommend creating at least a name tag for your location.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::TagListEntry] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateLocationFsxLustreInput {
    /// Creates a new builder-style object to manufacture [`CreateLocationFsxLustreInput`](crate::operation::create_location_fsx_lustre::CreateLocationFsxLustreInput).
    pub fn builder() -> crate::operation::create_location_fsx_lustre::builders::CreateLocationFsxLustreInputBuilder {
        crate::operation::create_location_fsx_lustre::builders::CreateLocationFsxLustreInputBuilder::default()
    }
}

/// A builder for [`CreateLocationFsxLustreInput`](crate::operation::create_location_fsx_lustre::CreateLocationFsxLustreInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateLocationFsxLustreInputBuilder {
    pub(crate) fsx_filesystem_arn: ::std::option::Option<::std::string::String>,
    pub(crate) security_group_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) subdirectory: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::TagListEntry>>,
}
impl CreateLocationFsxLustreInputBuilder {
    /// <p>Specifies the Amazon Resource Name (ARN) of the FSx for Lustre file system.</p>
    /// This field is required.
    pub fn fsx_filesystem_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fsx_filesystem_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the FSx for Lustre file system.</p>
    pub fn set_fsx_filesystem_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fsx_filesystem_arn = input;
        self
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the FSx for Lustre file system.</p>
    pub fn get_fsx_filesystem_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.fsx_filesystem_arn
    }
    /// Appends an item to `security_group_arns`.
    ///
    /// To override the contents of this collection use [`set_security_group_arns`](Self::set_security_group_arns).
    ///
    /// <p>Specifies the Amazon Resource Names (ARNs) of up to five security groups that provide access to your FSx for Lustre file system.</p>
    /// <p>The security groups must be able to access the file system's ports. The file system must also allow access from the security groups. For information about file system access, see the <a href="https://docs.aws.amazon.com/fsx/latest/LustreGuide/limit-access-security-groups.html"> <i>Amazon FSx for Lustre User Guide</i> </a>.</p>
    pub fn security_group_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_group_arns.unwrap_or_default();
        v.push(input.into());
        self.security_group_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the Amazon Resource Names (ARNs) of up to five security groups that provide access to your FSx for Lustre file system.</p>
    /// <p>The security groups must be able to access the file system's ports. The file system must also allow access from the security groups. For information about file system access, see the <a href="https://docs.aws.amazon.com/fsx/latest/LustreGuide/limit-access-security-groups.html"> <i>Amazon FSx for Lustre User Guide</i> </a>.</p>
    pub fn set_security_group_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_group_arns = input;
        self
    }
    /// <p>Specifies the Amazon Resource Names (ARNs) of up to five security groups that provide access to your FSx for Lustre file system.</p>
    /// <p>The security groups must be able to access the file system's ports. The file system must also allow access from the security groups. For information about file system access, see the <a href="https://docs.aws.amazon.com/fsx/latest/LustreGuide/limit-access-security-groups.html"> <i>Amazon FSx for Lustre User Guide</i> </a>.</p>
    pub fn get_security_group_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_group_arns
    }
    /// <p>Specifies a mount path for your FSx for Lustre file system. The path can include subdirectories.</p>
    /// <p>When the location is used as a source, DataSync reads data from the mount path. When the location is used as a destination, DataSync writes data to the mount path. If you don't include this parameter, DataSync uses the file system's root directory (<code>/</code>).</p>
    pub fn subdirectory(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subdirectory = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a mount path for your FSx for Lustre file system. The path can include subdirectories.</p>
    /// <p>When the location is used as a source, DataSync reads data from the mount path. When the location is used as a destination, DataSync writes data to the mount path. If you don't include this parameter, DataSync uses the file system's root directory (<code>/</code>).</p>
    pub fn set_subdirectory(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subdirectory = input;
        self
    }
    /// <p>Specifies a mount path for your FSx for Lustre file system. The path can include subdirectories.</p>
    /// <p>When the location is used as a source, DataSync reads data from the mount path. When the location is used as a destination, DataSync writes data to the mount path. If you don't include this parameter, DataSync uses the file system's root directory (<code>/</code>).</p>
    pub fn get_subdirectory(&self) -> &::std::option::Option<::std::string::String> {
        &self.subdirectory
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Specifies labels that help you categorize, filter, and search for your Amazon Web Services resources. We recommend creating at least a name tag for your location.</p>
    pub fn tags(mut self, input: crate::types::TagListEntry) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies labels that help you categorize, filter, and search for your Amazon Web Services resources. We recommend creating at least a name tag for your location.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagListEntry>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Specifies labels that help you categorize, filter, and search for your Amazon Web Services resources. We recommend creating at least a name tag for your location.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagListEntry>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateLocationFsxLustreInput`](crate::operation::create_location_fsx_lustre::CreateLocationFsxLustreInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_location_fsx_lustre::CreateLocationFsxLustreInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_location_fsx_lustre::CreateLocationFsxLustreInput {
            fsx_filesystem_arn: self.fsx_filesystem_arn,
            security_group_arns: self.security_group_arns,
            subdirectory: self.subdirectory,
            tags: self.tags,
        })
    }
}
