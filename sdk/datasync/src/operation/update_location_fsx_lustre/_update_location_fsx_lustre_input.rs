// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateLocationFsxLustreInput {
    /// <p>Specifies the Amazon Resource Name (ARN) of the FSx for Lustre transfer location that you're updating.</p>
    pub location_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies a mount path for your FSx for Lustre file system. The path can include subdirectories.</p>
    /// <p>When the location is used as a source, DataSync reads data from the mount path. When the location is used as a destination, DataSync writes data to the mount path. If you don't include this parameter, DataSync uses the file system's root directory (<code>/</code>).</p>
    pub subdirectory: ::std::option::Option<::std::string::String>,
}
impl UpdateLocationFsxLustreInput {
    /// <p>Specifies the Amazon Resource Name (ARN) of the FSx for Lustre transfer location that you're updating.</p>
    pub fn location_arn(&self) -> ::std::option::Option<&str> {
        self.location_arn.as_deref()
    }
    /// <p>Specifies a mount path for your FSx for Lustre file system. The path can include subdirectories.</p>
    /// <p>When the location is used as a source, DataSync reads data from the mount path. When the location is used as a destination, DataSync writes data to the mount path. If you don't include this parameter, DataSync uses the file system's root directory (<code>/</code>).</p>
    pub fn subdirectory(&self) -> ::std::option::Option<&str> {
        self.subdirectory.as_deref()
    }
}
impl UpdateLocationFsxLustreInput {
    /// Creates a new builder-style object to manufacture [`UpdateLocationFsxLustreInput`](crate::operation::update_location_fsx_lustre::UpdateLocationFsxLustreInput).
    pub fn builder() -> crate::operation::update_location_fsx_lustre::builders::UpdateLocationFsxLustreInputBuilder {
        crate::operation::update_location_fsx_lustre::builders::UpdateLocationFsxLustreInputBuilder::default()
    }
}

/// A builder for [`UpdateLocationFsxLustreInput`](crate::operation::update_location_fsx_lustre::UpdateLocationFsxLustreInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateLocationFsxLustreInputBuilder {
    pub(crate) location_arn: ::std::option::Option<::std::string::String>,
    pub(crate) subdirectory: ::std::option::Option<::std::string::String>,
}
impl UpdateLocationFsxLustreInputBuilder {
    /// <p>Specifies the Amazon Resource Name (ARN) of the FSx for Lustre transfer location that you're updating.</p>
    /// This field is required.
    pub fn location_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the FSx for Lustre transfer location that you're updating.</p>
    pub fn set_location_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location_arn = input;
        self
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the FSx for Lustre transfer location that you're updating.</p>
    pub fn get_location_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.location_arn
    }
    /// <p>Specifies a mount path for your FSx for Lustre file system. The path can include subdirectories.</p>
    /// <p>When the location is used as a source, DataSync reads data from the mount path. When the location is used as a destination, DataSync writes data to the mount path. If you don't include this parameter, DataSync uses the file system's root directory (<code>/</code>).</p>
    pub fn subdirectory(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subdirectory = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a mount path for your FSx for Lustre file system. The path can include subdirectories.</p>
    /// <p>When the location is used as a source, DataSync reads data from the mount path. When the location is used as a destination, DataSync writes data to the mount path. If you don't include this parameter, DataSync uses the file system's root directory (<code>/</code>).</p>
    pub fn set_subdirectory(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subdirectory = input;
        self
    }
    /// <p>Specifies a mount path for your FSx for Lustre file system. The path can include subdirectories.</p>
    /// <p>When the location is used as a source, DataSync reads data from the mount path. When the location is used as a destination, DataSync writes data to the mount path. If you don't include this parameter, DataSync uses the file system's root directory (<code>/</code>).</p>
    pub fn get_subdirectory(&self) -> &::std::option::Option<::std::string::String> {
        &self.subdirectory
    }
    /// Consumes the builder and constructs a [`UpdateLocationFsxLustreInput`](crate::operation::update_location_fsx_lustre::UpdateLocationFsxLustreInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_location_fsx_lustre::UpdateLocationFsxLustreInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_location_fsx_lustre::UpdateLocationFsxLustreInput {
            location_arn: self.location_arn,
            subdirectory: self.subdirectory,
        })
    }
}
