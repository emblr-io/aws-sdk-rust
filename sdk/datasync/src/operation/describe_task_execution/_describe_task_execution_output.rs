// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>DescribeTaskExecutionResponse</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeTaskExecutionOutput {
    /// <p>The ARN of the task execution that you wanted information about. <code>TaskExecutionArn</code> is hierarchical and includes <code>TaskArn</code> for the task that was executed.</p>
    /// <p>For example, a <code>TaskExecution</code> value with the ARN <code>arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2/execution/exec-08ef1e88ec491019b</code> executed the task with the ARN <code>arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2</code>.</p>
    pub task_execution_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the task execution.</p>
    pub status: ::std::option::Option<crate::types::TaskExecutionStatus>,
    /// <p>Indicates how your transfer task is configured. These options include how DataSync handles files, objects, and their associated metadata during your transfer. You also can specify how to verify data integrity, set bandwidth limits for your task, among other options.</p>
    /// <p>Each option has a default value. Unless you need to, you don't have to configure any option before calling <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html">StartTaskExecution</a>.</p>
    /// <p>You also can override your task options for each task execution. For example, you might want to adjust the <code>LogLevel</code> for an individual execution.</p>
    pub options: ::std::option::Option<crate::types::Options>,
    /// <p>A list of filter rules that exclude specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    pub excludes: ::std::option::Option<::std::vec::Vec<crate::types::FilterRule>>,
    /// <p>A list of filter rules that include specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    pub includes: ::std::option::Option<::std::vec::Vec<crate::types::FilterRule>>,
    /// <p>The configuration of the manifest that lists the files or objects to transfer. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html">Specifying what DataSync transfers by using a manifest</a>.</p>
    pub manifest_config: ::std::option::Option<crate::types::ManifestConfig>,
    /// <p>The time that DataSync sends the request to start the task execution. For non-queued tasks, <code>LaunchTime</code> and <code>StartTime</code> are typically the same. For queued tasks, <code>LaunchTime</code> is typically later than <code>StartTime</code> because previously queued tasks must finish running before newer tasks can begin.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The number of files, objects, and directories that DataSync expects to transfer over the network. This value is calculated while DataSync <a href="https://docs.aws.amazon.com/datasync/latest/userguide/run-task.html#understand-task-execution-statuses">prepares</a> the transfer.</p>
    /// <p>How this gets calculated depends primarily on your taskâ€™s <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_Options.html#DataSync-Type-Options-TransferMode">transfer mode</a> configuration:</p>
    /// <ul>
    /// <li>
    /// <p>If <code>TranserMode</code> is set to <code>CHANGED</code> - The calculation is based on comparing the content of the source and destination locations and determining the difference that needs to be transferred. The difference can include:</p>
    /// <ul>
    /// <li>
    /// <p>Anything that's added or modified at the source location.</p></li>
    /// <li>
    /// <p>Anything that's in both locations and modified at the destination after an initial transfer (unless <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_Options.html#DataSync-Type-Options-OverwriteMode">OverwriteMode</a> is set to <code>NEVER</code>).</p></li>
    /// <li>
    /// <p><b>(Basic task mode only)</b> The number of items that DataSync expects to delete (if <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_Options.html#DataSync-Type-Options-PreserveDeletedFiles">PreserveDeletedFiles</a> is set to <code>REMOVE</code>).</p></li>
    /// </ul></li>
    /// <li>
    /// <p>If <code>TranserMode</code> is set to <code>ALL</code> - The calculation is based only on the items that DataSync finds at the source location.</p></li>
    /// </ul>
    pub estimated_files_to_transfer: i64,
    /// <p>The number of logical bytes that DataSync expects to write to the destination location.</p>
    pub estimated_bytes_to_transfer: i64,
    /// <p>The number of files, objects, and directories that DataSync actually transfers over the network. This value is updated periodically during your task execution when something is read from the source and sent over the network.</p>
    /// <p>If DataSync fails to transfer something, this value can be less than <code>EstimatedFilesToTransfer</code>. In some cases, this value can also be greater than <code>EstimatedFilesToTransfer</code>. This element is implementation-specific for some location types, so don't use it as an exact indication of what's transferring or to monitor your task execution.</p>
    pub files_transferred: i64,
    /// <p>The number of logical bytes that DataSync actually writes to the destination location.</p>
    pub bytes_written: i64,
    /// <p>The number of bytes that DataSync sends to the network before compression (if compression is possible). For the number of bytes transferred over the network, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_DescribeTaskExecution.html#DataSync-DescribeTaskExecution-response-BytesCompressed">BytesCompressed</a>.</p>
    pub bytes_transferred: i64,
    /// <p>The number of physical bytes that DataSync transfers over the network after compression (if compression is possible). This number is typically less than <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_DescribeTaskExecution.html#DataSync-DescribeTaskExecution-response-BytesTransferred">BytesTransferred</a> unless the data isn't compressible.</p>
    pub bytes_compressed: i64,
    /// <p>The result of the task execution.</p>
    pub result: ::std::option::Option<crate::types::TaskExecutionResultDetail>,
    /// <p>The configuration of your task report, which provides detailed information about for your DataSync transfer. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/task-reports.html">Creating a task report</a>.</p>
    pub task_report_config: ::std::option::Option<crate::types::TaskReportConfig>,
    /// <p>The number of files, objects, and directories that DataSync actually deletes in your destination location. If you don't configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html">delete data in the destination that isn't in the source</a>, the value is always <code>0</code>.</p>
    pub files_deleted: i64,
    /// <p>The number of files, objects, and directories that DataSync skips during your transfer.</p>
    pub files_skipped: i64,
    /// <p>The number of files, objects, and directories that DataSync verifies during your transfer.</p><note>
    /// <p>When you configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-data-verification-options.html">verify only the data that's transferred</a>, DataSync doesn't verify directories in some situations or files that fail to transfer.</p>
    /// </note>
    pub files_verified: i64,
    /// <p>Indicates whether DataSync generated a complete <a href="https://docs.aws.amazon.com/datasync/latest/userguide/task-reports.html">task report</a> for your transfer.</p>
    pub report_result: ::std::option::Option<crate::types::ReportResult>,
    /// <p>The number of files, objects, and directories that DataSync expects to delete in your destination location. If you don't configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html">delete data in the destination that isn't in the source</a>, the value is always <code>0</code>.</p>
    pub estimated_files_to_delete: i64,
    /// <p>The task mode that you're using. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choosing-task-mode.html">Choosing a task mode for your data transfer</a>.</p>
    pub task_mode: ::std::option::Option<crate::types::TaskMode>,
    /// <p>The number of objects that DataSync will attempt to transfer after comparing your source and destination locations.</p><note>
    /// <p>Applies only to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choosing-task-mode.html">Enhanced mode tasks</a>.</p>
    /// </note>
    /// <p>This counter isn't applicable if you configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html#task-option-transfer-mode">transfer all data</a>. In that scenario, DataSync copies everything from the source to the destination without comparing differences between the locations.</p>
    pub files_prepared: i64,
    /// <p>The number of objects that DataSync finds at your locations.</p><note>
    /// <p>Applies only to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choosing-task-mode.html">Enhanced mode tasks</a>.</p>
    /// </note>
    pub files_listed: ::std::option::Option<crate::types::TaskExecutionFilesListedDetail>,
    /// <p>The number of objects that DataSync fails to prepare, transfer, verify, and delete during your task execution.</p><note>
    /// <p>Applies only to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choosing-task-mode.html">Enhanced mode tasks</a>.</p>
    /// </note>
    pub files_failed: ::std::option::Option<crate::types::TaskExecutionFilesFailedDetail>,
    /// <p>The time that the task execution actually begins. For non-queued tasks, <code>LaunchTime</code> and <code>StartTime</code> are typically the same. For queued tasks, <code>LaunchTime</code> is typically later than <code>StartTime</code> because previously queued tasks must finish running before newer tasks can begin.</p>
    pub launch_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time that the transfer task ends.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeTaskExecutionOutput {
    /// <p>The ARN of the task execution that you wanted information about. <code>TaskExecutionArn</code> is hierarchical and includes <code>TaskArn</code> for the task that was executed.</p>
    /// <p>For example, a <code>TaskExecution</code> value with the ARN <code>arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2/execution/exec-08ef1e88ec491019b</code> executed the task with the ARN <code>arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2</code>.</p>
    pub fn task_execution_arn(&self) -> ::std::option::Option<&str> {
        self.task_execution_arn.as_deref()
    }
    /// <p>The status of the task execution.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::TaskExecutionStatus> {
        self.status.as_ref()
    }
    /// <p>Indicates how your transfer task is configured. These options include how DataSync handles files, objects, and their associated metadata during your transfer. You also can specify how to verify data integrity, set bandwidth limits for your task, among other options.</p>
    /// <p>Each option has a default value. Unless you need to, you don't have to configure any option before calling <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html">StartTaskExecution</a>.</p>
    /// <p>You also can override your task options for each task execution. For example, you might want to adjust the <code>LogLevel</code> for an individual execution.</p>
    pub fn options(&self) -> ::std::option::Option<&crate::types::Options> {
        self.options.as_ref()
    }
    /// <p>A list of filter rules that exclude specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.excludes.is_none()`.
    pub fn excludes(&self) -> &[crate::types::FilterRule] {
        self.excludes.as_deref().unwrap_or_default()
    }
    /// <p>A list of filter rules that include specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.includes.is_none()`.
    pub fn includes(&self) -> &[crate::types::FilterRule] {
        self.includes.as_deref().unwrap_or_default()
    }
    /// <p>The configuration of the manifest that lists the files or objects to transfer. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html">Specifying what DataSync transfers by using a manifest</a>.</p>
    pub fn manifest_config(&self) -> ::std::option::Option<&crate::types::ManifestConfig> {
        self.manifest_config.as_ref()
    }
    /// <p>The time that DataSync sends the request to start the task execution. For non-queued tasks, <code>LaunchTime</code> and <code>StartTime</code> are typically the same. For queued tasks, <code>LaunchTime</code> is typically later than <code>StartTime</code> because previously queued tasks must finish running before newer tasks can begin.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The number of files, objects, and directories that DataSync expects to transfer over the network. This value is calculated while DataSync <a href="https://docs.aws.amazon.com/datasync/latest/userguide/run-task.html#understand-task-execution-statuses">prepares</a> the transfer.</p>
    /// <p>How this gets calculated depends primarily on your taskâ€™s <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_Options.html#DataSync-Type-Options-TransferMode">transfer mode</a> configuration:</p>
    /// <ul>
    /// <li>
    /// <p>If <code>TranserMode</code> is set to <code>CHANGED</code> - The calculation is based on comparing the content of the source and destination locations and determining the difference that needs to be transferred. The difference can include:</p>
    /// <ul>
    /// <li>
    /// <p>Anything that's added or modified at the source location.</p></li>
    /// <li>
    /// <p>Anything that's in both locations and modified at the destination after an initial transfer (unless <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_Options.html#DataSync-Type-Options-OverwriteMode">OverwriteMode</a> is set to <code>NEVER</code>).</p></li>
    /// <li>
    /// <p><b>(Basic task mode only)</b> The number of items that DataSync expects to delete (if <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_Options.html#DataSync-Type-Options-PreserveDeletedFiles">PreserveDeletedFiles</a> is set to <code>REMOVE</code>).</p></li>
    /// </ul></li>
    /// <li>
    /// <p>If <code>TranserMode</code> is set to <code>ALL</code> - The calculation is based only on the items that DataSync finds at the source location.</p></li>
    /// </ul>
    pub fn estimated_files_to_transfer(&self) -> i64 {
        self.estimated_files_to_transfer
    }
    /// <p>The number of logical bytes that DataSync expects to write to the destination location.</p>
    pub fn estimated_bytes_to_transfer(&self) -> i64 {
        self.estimated_bytes_to_transfer
    }
    /// <p>The number of files, objects, and directories that DataSync actually transfers over the network. This value is updated periodically during your task execution when something is read from the source and sent over the network.</p>
    /// <p>If DataSync fails to transfer something, this value can be less than <code>EstimatedFilesToTransfer</code>. In some cases, this value can also be greater than <code>EstimatedFilesToTransfer</code>. This element is implementation-specific for some location types, so don't use it as an exact indication of what's transferring or to monitor your task execution.</p>
    pub fn files_transferred(&self) -> i64 {
        self.files_transferred
    }
    /// <p>The number of logical bytes that DataSync actually writes to the destination location.</p>
    pub fn bytes_written(&self) -> i64 {
        self.bytes_written
    }
    /// <p>The number of bytes that DataSync sends to the network before compression (if compression is possible). For the number of bytes transferred over the network, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_DescribeTaskExecution.html#DataSync-DescribeTaskExecution-response-BytesCompressed">BytesCompressed</a>.</p>
    pub fn bytes_transferred(&self) -> i64 {
        self.bytes_transferred
    }
    /// <p>The number of physical bytes that DataSync transfers over the network after compression (if compression is possible). This number is typically less than <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_DescribeTaskExecution.html#DataSync-DescribeTaskExecution-response-BytesTransferred">BytesTransferred</a> unless the data isn't compressible.</p>
    pub fn bytes_compressed(&self) -> i64 {
        self.bytes_compressed
    }
    /// <p>The result of the task execution.</p>
    pub fn result(&self) -> ::std::option::Option<&crate::types::TaskExecutionResultDetail> {
        self.result.as_ref()
    }
    /// <p>The configuration of your task report, which provides detailed information about for your DataSync transfer. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/task-reports.html">Creating a task report</a>.</p>
    pub fn task_report_config(&self) -> ::std::option::Option<&crate::types::TaskReportConfig> {
        self.task_report_config.as_ref()
    }
    /// <p>The number of files, objects, and directories that DataSync actually deletes in your destination location. If you don't configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html">delete data in the destination that isn't in the source</a>, the value is always <code>0</code>.</p>
    pub fn files_deleted(&self) -> i64 {
        self.files_deleted
    }
    /// <p>The number of files, objects, and directories that DataSync skips during your transfer.</p>
    pub fn files_skipped(&self) -> i64 {
        self.files_skipped
    }
    /// <p>The number of files, objects, and directories that DataSync verifies during your transfer.</p><note>
    /// <p>When you configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-data-verification-options.html">verify only the data that's transferred</a>, DataSync doesn't verify directories in some situations or files that fail to transfer.</p>
    /// </note>
    pub fn files_verified(&self) -> i64 {
        self.files_verified
    }
    /// <p>Indicates whether DataSync generated a complete <a href="https://docs.aws.amazon.com/datasync/latest/userguide/task-reports.html">task report</a> for your transfer.</p>
    pub fn report_result(&self) -> ::std::option::Option<&crate::types::ReportResult> {
        self.report_result.as_ref()
    }
    /// <p>The number of files, objects, and directories that DataSync expects to delete in your destination location. If you don't configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html">delete data in the destination that isn't in the source</a>, the value is always <code>0</code>.</p>
    pub fn estimated_files_to_delete(&self) -> i64 {
        self.estimated_files_to_delete
    }
    /// <p>The task mode that you're using. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choosing-task-mode.html">Choosing a task mode for your data transfer</a>.</p>
    pub fn task_mode(&self) -> ::std::option::Option<&crate::types::TaskMode> {
        self.task_mode.as_ref()
    }
    /// <p>The number of objects that DataSync will attempt to transfer after comparing your source and destination locations.</p><note>
    /// <p>Applies only to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choosing-task-mode.html">Enhanced mode tasks</a>.</p>
    /// </note>
    /// <p>This counter isn't applicable if you configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html#task-option-transfer-mode">transfer all data</a>. In that scenario, DataSync copies everything from the source to the destination without comparing differences between the locations.</p>
    pub fn files_prepared(&self) -> i64 {
        self.files_prepared
    }
    /// <p>The number of objects that DataSync finds at your locations.</p><note>
    /// <p>Applies only to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choosing-task-mode.html">Enhanced mode tasks</a>.</p>
    /// </note>
    pub fn files_listed(&self) -> ::std::option::Option<&crate::types::TaskExecutionFilesListedDetail> {
        self.files_listed.as_ref()
    }
    /// <p>The number of objects that DataSync fails to prepare, transfer, verify, and delete during your task execution.</p><note>
    /// <p>Applies only to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choosing-task-mode.html">Enhanced mode tasks</a>.</p>
    /// </note>
    pub fn files_failed(&self) -> ::std::option::Option<&crate::types::TaskExecutionFilesFailedDetail> {
        self.files_failed.as_ref()
    }
    /// <p>The time that the task execution actually begins. For non-queued tasks, <code>LaunchTime</code> and <code>StartTime</code> are typically the same. For queued tasks, <code>LaunchTime</code> is typically later than <code>StartTime</code> because previously queued tasks must finish running before newer tasks can begin.</p>
    pub fn launch_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.launch_time.as_ref()
    }
    /// <p>The time that the transfer task ends.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeTaskExecutionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeTaskExecutionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTaskExecutionOutput`](crate::operation::describe_task_execution::DescribeTaskExecutionOutput).
    pub fn builder() -> crate::operation::describe_task_execution::builders::DescribeTaskExecutionOutputBuilder {
        crate::operation::describe_task_execution::builders::DescribeTaskExecutionOutputBuilder::default()
    }
}

/// A builder for [`DescribeTaskExecutionOutput`](crate::operation::describe_task_execution::DescribeTaskExecutionOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeTaskExecutionOutputBuilder {
    pub(crate) task_execution_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::TaskExecutionStatus>,
    pub(crate) options: ::std::option::Option<crate::types::Options>,
    pub(crate) excludes: ::std::option::Option<::std::vec::Vec<crate::types::FilterRule>>,
    pub(crate) includes: ::std::option::Option<::std::vec::Vec<crate::types::FilterRule>>,
    pub(crate) manifest_config: ::std::option::Option<crate::types::ManifestConfig>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) estimated_files_to_transfer: ::std::option::Option<i64>,
    pub(crate) estimated_bytes_to_transfer: ::std::option::Option<i64>,
    pub(crate) files_transferred: ::std::option::Option<i64>,
    pub(crate) bytes_written: ::std::option::Option<i64>,
    pub(crate) bytes_transferred: ::std::option::Option<i64>,
    pub(crate) bytes_compressed: ::std::option::Option<i64>,
    pub(crate) result: ::std::option::Option<crate::types::TaskExecutionResultDetail>,
    pub(crate) task_report_config: ::std::option::Option<crate::types::TaskReportConfig>,
    pub(crate) files_deleted: ::std::option::Option<i64>,
    pub(crate) files_skipped: ::std::option::Option<i64>,
    pub(crate) files_verified: ::std::option::Option<i64>,
    pub(crate) report_result: ::std::option::Option<crate::types::ReportResult>,
    pub(crate) estimated_files_to_delete: ::std::option::Option<i64>,
    pub(crate) task_mode: ::std::option::Option<crate::types::TaskMode>,
    pub(crate) files_prepared: ::std::option::Option<i64>,
    pub(crate) files_listed: ::std::option::Option<crate::types::TaskExecutionFilesListedDetail>,
    pub(crate) files_failed: ::std::option::Option<crate::types::TaskExecutionFilesFailedDetail>,
    pub(crate) launch_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeTaskExecutionOutputBuilder {
    /// <p>The ARN of the task execution that you wanted information about. <code>TaskExecutionArn</code> is hierarchical and includes <code>TaskArn</code> for the task that was executed.</p>
    /// <p>For example, a <code>TaskExecution</code> value with the ARN <code>arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2/execution/exec-08ef1e88ec491019b</code> executed the task with the ARN <code>arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2</code>.</p>
    pub fn task_execution_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_execution_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the task execution that you wanted information about. <code>TaskExecutionArn</code> is hierarchical and includes <code>TaskArn</code> for the task that was executed.</p>
    /// <p>For example, a <code>TaskExecution</code> value with the ARN <code>arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2/execution/exec-08ef1e88ec491019b</code> executed the task with the ARN <code>arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2</code>.</p>
    pub fn set_task_execution_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_execution_arn = input;
        self
    }
    /// <p>The ARN of the task execution that you wanted information about. <code>TaskExecutionArn</code> is hierarchical and includes <code>TaskArn</code> for the task that was executed.</p>
    /// <p>For example, a <code>TaskExecution</code> value with the ARN <code>arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2/execution/exec-08ef1e88ec491019b</code> executed the task with the ARN <code>arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2</code>.</p>
    pub fn get_task_execution_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_execution_arn
    }
    /// <p>The status of the task execution.</p>
    pub fn status(mut self, input: crate::types::TaskExecutionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the task execution.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TaskExecutionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the task execution.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TaskExecutionStatus> {
        &self.status
    }
    /// <p>Indicates how your transfer task is configured. These options include how DataSync handles files, objects, and their associated metadata during your transfer. You also can specify how to verify data integrity, set bandwidth limits for your task, among other options.</p>
    /// <p>Each option has a default value. Unless you need to, you don't have to configure any option before calling <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html">StartTaskExecution</a>.</p>
    /// <p>You also can override your task options for each task execution. For example, you might want to adjust the <code>LogLevel</code> for an individual execution.</p>
    pub fn options(mut self, input: crate::types::Options) -> Self {
        self.options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates how your transfer task is configured. These options include how DataSync handles files, objects, and their associated metadata during your transfer. You also can specify how to verify data integrity, set bandwidth limits for your task, among other options.</p>
    /// <p>Each option has a default value. Unless you need to, you don't have to configure any option before calling <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html">StartTaskExecution</a>.</p>
    /// <p>You also can override your task options for each task execution. For example, you might want to adjust the <code>LogLevel</code> for an individual execution.</p>
    pub fn set_options(mut self, input: ::std::option::Option<crate::types::Options>) -> Self {
        self.options = input;
        self
    }
    /// <p>Indicates how your transfer task is configured. These options include how DataSync handles files, objects, and their associated metadata during your transfer. You also can specify how to verify data integrity, set bandwidth limits for your task, among other options.</p>
    /// <p>Each option has a default value. Unless you need to, you don't have to configure any option before calling <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html">StartTaskExecution</a>.</p>
    /// <p>You also can override your task options for each task execution. For example, you might want to adjust the <code>LogLevel</code> for an individual execution.</p>
    pub fn get_options(&self) -> &::std::option::Option<crate::types::Options> {
        &self.options
    }
    /// Appends an item to `excludes`.
    ///
    /// To override the contents of this collection use [`set_excludes`](Self::set_excludes).
    ///
    /// <p>A list of filter rules that exclude specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    pub fn excludes(mut self, input: crate::types::FilterRule) -> Self {
        let mut v = self.excludes.unwrap_or_default();
        v.push(input);
        self.excludes = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of filter rules that exclude specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    pub fn set_excludes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FilterRule>>) -> Self {
        self.excludes = input;
        self
    }
    /// <p>A list of filter rules that exclude specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    pub fn get_excludes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FilterRule>> {
        &self.excludes
    }
    /// Appends an item to `includes`.
    ///
    /// To override the contents of this collection use [`set_includes`](Self::set_includes).
    ///
    /// <p>A list of filter rules that include specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    pub fn includes(mut self, input: crate::types::FilterRule) -> Self {
        let mut v = self.includes.unwrap_or_default();
        v.push(input);
        self.includes = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of filter rules that include specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    pub fn set_includes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FilterRule>>) -> Self {
        self.includes = input;
        self
    }
    /// <p>A list of filter rules that include specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    pub fn get_includes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FilterRule>> {
        &self.includes
    }
    /// <p>The configuration of the manifest that lists the files or objects to transfer. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html">Specifying what DataSync transfers by using a manifest</a>.</p>
    pub fn manifest_config(mut self, input: crate::types::ManifestConfig) -> Self {
        self.manifest_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the manifest that lists the files or objects to transfer. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html">Specifying what DataSync transfers by using a manifest</a>.</p>
    pub fn set_manifest_config(mut self, input: ::std::option::Option<crate::types::ManifestConfig>) -> Self {
        self.manifest_config = input;
        self
    }
    /// <p>The configuration of the manifest that lists the files or objects to transfer. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html">Specifying what DataSync transfers by using a manifest</a>.</p>
    pub fn get_manifest_config(&self) -> &::std::option::Option<crate::types::ManifestConfig> {
        &self.manifest_config
    }
    /// <p>The time that DataSync sends the request to start the task execution. For non-queued tasks, <code>LaunchTime</code> and <code>StartTime</code> are typically the same. For queued tasks, <code>LaunchTime</code> is typically later than <code>StartTime</code> because previously queued tasks must finish running before newer tasks can begin.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that DataSync sends the request to start the task execution. For non-queued tasks, <code>LaunchTime</code> and <code>StartTime</code> are typically the same. For queued tasks, <code>LaunchTime</code> is typically later than <code>StartTime</code> because previously queued tasks must finish running before newer tasks can begin.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time that DataSync sends the request to start the task execution. For non-queued tasks, <code>LaunchTime</code> and <code>StartTime</code> are typically the same. For queued tasks, <code>LaunchTime</code> is typically later than <code>StartTime</code> because previously queued tasks must finish running before newer tasks can begin.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The number of files, objects, and directories that DataSync expects to transfer over the network. This value is calculated while DataSync <a href="https://docs.aws.amazon.com/datasync/latest/userguide/run-task.html#understand-task-execution-statuses">prepares</a> the transfer.</p>
    /// <p>How this gets calculated depends primarily on your taskâ€™s <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_Options.html#DataSync-Type-Options-TransferMode">transfer mode</a> configuration:</p>
    /// <ul>
    /// <li>
    /// <p>If <code>TranserMode</code> is set to <code>CHANGED</code> - The calculation is based on comparing the content of the source and destination locations and determining the difference that needs to be transferred. The difference can include:</p>
    /// <ul>
    /// <li>
    /// <p>Anything that's added or modified at the source location.</p></li>
    /// <li>
    /// <p>Anything that's in both locations and modified at the destination after an initial transfer (unless <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_Options.html#DataSync-Type-Options-OverwriteMode">OverwriteMode</a> is set to <code>NEVER</code>).</p></li>
    /// <li>
    /// <p><b>(Basic task mode only)</b> The number of items that DataSync expects to delete (if <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_Options.html#DataSync-Type-Options-PreserveDeletedFiles">PreserveDeletedFiles</a> is set to <code>REMOVE</code>).</p></li>
    /// </ul></li>
    /// <li>
    /// <p>If <code>TranserMode</code> is set to <code>ALL</code> - The calculation is based only on the items that DataSync finds at the source location.</p></li>
    /// </ul>
    pub fn estimated_files_to_transfer(mut self, input: i64) -> Self {
        self.estimated_files_to_transfer = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of files, objects, and directories that DataSync expects to transfer over the network. This value is calculated while DataSync <a href="https://docs.aws.amazon.com/datasync/latest/userguide/run-task.html#understand-task-execution-statuses">prepares</a> the transfer.</p>
    /// <p>How this gets calculated depends primarily on your taskâ€™s <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_Options.html#DataSync-Type-Options-TransferMode">transfer mode</a> configuration:</p>
    /// <ul>
    /// <li>
    /// <p>If <code>TranserMode</code> is set to <code>CHANGED</code> - The calculation is based on comparing the content of the source and destination locations and determining the difference that needs to be transferred. The difference can include:</p>
    /// <ul>
    /// <li>
    /// <p>Anything that's added or modified at the source location.</p></li>
    /// <li>
    /// <p>Anything that's in both locations and modified at the destination after an initial transfer (unless <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_Options.html#DataSync-Type-Options-OverwriteMode">OverwriteMode</a> is set to <code>NEVER</code>).</p></li>
    /// <li>
    /// <p><b>(Basic task mode only)</b> The number of items that DataSync expects to delete (if <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_Options.html#DataSync-Type-Options-PreserveDeletedFiles">PreserveDeletedFiles</a> is set to <code>REMOVE</code>).</p></li>
    /// </ul></li>
    /// <li>
    /// <p>If <code>TranserMode</code> is set to <code>ALL</code> - The calculation is based only on the items that DataSync finds at the source location.</p></li>
    /// </ul>
    pub fn set_estimated_files_to_transfer(mut self, input: ::std::option::Option<i64>) -> Self {
        self.estimated_files_to_transfer = input;
        self
    }
    /// <p>The number of files, objects, and directories that DataSync expects to transfer over the network. This value is calculated while DataSync <a href="https://docs.aws.amazon.com/datasync/latest/userguide/run-task.html#understand-task-execution-statuses">prepares</a> the transfer.</p>
    /// <p>How this gets calculated depends primarily on your taskâ€™s <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_Options.html#DataSync-Type-Options-TransferMode">transfer mode</a> configuration:</p>
    /// <ul>
    /// <li>
    /// <p>If <code>TranserMode</code> is set to <code>CHANGED</code> - The calculation is based on comparing the content of the source and destination locations and determining the difference that needs to be transferred. The difference can include:</p>
    /// <ul>
    /// <li>
    /// <p>Anything that's added or modified at the source location.</p></li>
    /// <li>
    /// <p>Anything that's in both locations and modified at the destination after an initial transfer (unless <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_Options.html#DataSync-Type-Options-OverwriteMode">OverwriteMode</a> is set to <code>NEVER</code>).</p></li>
    /// <li>
    /// <p><b>(Basic task mode only)</b> The number of items that DataSync expects to delete (if <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_Options.html#DataSync-Type-Options-PreserveDeletedFiles">PreserveDeletedFiles</a> is set to <code>REMOVE</code>).</p></li>
    /// </ul></li>
    /// <li>
    /// <p>If <code>TranserMode</code> is set to <code>ALL</code> - The calculation is based only on the items that DataSync finds at the source location.</p></li>
    /// </ul>
    pub fn get_estimated_files_to_transfer(&self) -> &::std::option::Option<i64> {
        &self.estimated_files_to_transfer
    }
    /// <p>The number of logical bytes that DataSync expects to write to the destination location.</p>
    pub fn estimated_bytes_to_transfer(mut self, input: i64) -> Self {
        self.estimated_bytes_to_transfer = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of logical bytes that DataSync expects to write to the destination location.</p>
    pub fn set_estimated_bytes_to_transfer(mut self, input: ::std::option::Option<i64>) -> Self {
        self.estimated_bytes_to_transfer = input;
        self
    }
    /// <p>The number of logical bytes that DataSync expects to write to the destination location.</p>
    pub fn get_estimated_bytes_to_transfer(&self) -> &::std::option::Option<i64> {
        &self.estimated_bytes_to_transfer
    }
    /// <p>The number of files, objects, and directories that DataSync actually transfers over the network. This value is updated periodically during your task execution when something is read from the source and sent over the network.</p>
    /// <p>If DataSync fails to transfer something, this value can be less than <code>EstimatedFilesToTransfer</code>. In some cases, this value can also be greater than <code>EstimatedFilesToTransfer</code>. This element is implementation-specific for some location types, so don't use it as an exact indication of what's transferring or to monitor your task execution.</p>
    pub fn files_transferred(mut self, input: i64) -> Self {
        self.files_transferred = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of files, objects, and directories that DataSync actually transfers over the network. This value is updated periodically during your task execution when something is read from the source and sent over the network.</p>
    /// <p>If DataSync fails to transfer something, this value can be less than <code>EstimatedFilesToTransfer</code>. In some cases, this value can also be greater than <code>EstimatedFilesToTransfer</code>. This element is implementation-specific for some location types, so don't use it as an exact indication of what's transferring or to monitor your task execution.</p>
    pub fn set_files_transferred(mut self, input: ::std::option::Option<i64>) -> Self {
        self.files_transferred = input;
        self
    }
    /// <p>The number of files, objects, and directories that DataSync actually transfers over the network. This value is updated periodically during your task execution when something is read from the source and sent over the network.</p>
    /// <p>If DataSync fails to transfer something, this value can be less than <code>EstimatedFilesToTransfer</code>. In some cases, this value can also be greater than <code>EstimatedFilesToTransfer</code>. This element is implementation-specific for some location types, so don't use it as an exact indication of what's transferring or to monitor your task execution.</p>
    pub fn get_files_transferred(&self) -> &::std::option::Option<i64> {
        &self.files_transferred
    }
    /// <p>The number of logical bytes that DataSync actually writes to the destination location.</p>
    pub fn bytes_written(mut self, input: i64) -> Self {
        self.bytes_written = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of logical bytes that DataSync actually writes to the destination location.</p>
    pub fn set_bytes_written(mut self, input: ::std::option::Option<i64>) -> Self {
        self.bytes_written = input;
        self
    }
    /// <p>The number of logical bytes that DataSync actually writes to the destination location.</p>
    pub fn get_bytes_written(&self) -> &::std::option::Option<i64> {
        &self.bytes_written
    }
    /// <p>The number of bytes that DataSync sends to the network before compression (if compression is possible). For the number of bytes transferred over the network, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_DescribeTaskExecution.html#DataSync-DescribeTaskExecution-response-BytesCompressed">BytesCompressed</a>.</p>
    pub fn bytes_transferred(mut self, input: i64) -> Self {
        self.bytes_transferred = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of bytes that DataSync sends to the network before compression (if compression is possible). For the number of bytes transferred over the network, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_DescribeTaskExecution.html#DataSync-DescribeTaskExecution-response-BytesCompressed">BytesCompressed</a>.</p>
    pub fn set_bytes_transferred(mut self, input: ::std::option::Option<i64>) -> Self {
        self.bytes_transferred = input;
        self
    }
    /// <p>The number of bytes that DataSync sends to the network before compression (if compression is possible). For the number of bytes transferred over the network, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_DescribeTaskExecution.html#DataSync-DescribeTaskExecution-response-BytesCompressed">BytesCompressed</a>.</p>
    pub fn get_bytes_transferred(&self) -> &::std::option::Option<i64> {
        &self.bytes_transferred
    }
    /// <p>The number of physical bytes that DataSync transfers over the network after compression (if compression is possible). This number is typically less than <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_DescribeTaskExecution.html#DataSync-DescribeTaskExecution-response-BytesTransferred">BytesTransferred</a> unless the data isn't compressible.</p>
    pub fn bytes_compressed(mut self, input: i64) -> Self {
        self.bytes_compressed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of physical bytes that DataSync transfers over the network after compression (if compression is possible). This number is typically less than <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_DescribeTaskExecution.html#DataSync-DescribeTaskExecution-response-BytesTransferred">BytesTransferred</a> unless the data isn't compressible.</p>
    pub fn set_bytes_compressed(mut self, input: ::std::option::Option<i64>) -> Self {
        self.bytes_compressed = input;
        self
    }
    /// <p>The number of physical bytes that DataSync transfers over the network after compression (if compression is possible). This number is typically less than <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_DescribeTaskExecution.html#DataSync-DescribeTaskExecution-response-BytesTransferred">BytesTransferred</a> unless the data isn't compressible.</p>
    pub fn get_bytes_compressed(&self) -> &::std::option::Option<i64> {
        &self.bytes_compressed
    }
    /// <p>The result of the task execution.</p>
    pub fn result(mut self, input: crate::types::TaskExecutionResultDetail) -> Self {
        self.result = ::std::option::Option::Some(input);
        self
    }
    /// <p>The result of the task execution.</p>
    pub fn set_result(mut self, input: ::std::option::Option<crate::types::TaskExecutionResultDetail>) -> Self {
        self.result = input;
        self
    }
    /// <p>The result of the task execution.</p>
    pub fn get_result(&self) -> &::std::option::Option<crate::types::TaskExecutionResultDetail> {
        &self.result
    }
    /// <p>The configuration of your task report, which provides detailed information about for your DataSync transfer. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/task-reports.html">Creating a task report</a>.</p>
    pub fn task_report_config(mut self, input: crate::types::TaskReportConfig) -> Self {
        self.task_report_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of your task report, which provides detailed information about for your DataSync transfer. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/task-reports.html">Creating a task report</a>.</p>
    pub fn set_task_report_config(mut self, input: ::std::option::Option<crate::types::TaskReportConfig>) -> Self {
        self.task_report_config = input;
        self
    }
    /// <p>The configuration of your task report, which provides detailed information about for your DataSync transfer. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/task-reports.html">Creating a task report</a>.</p>
    pub fn get_task_report_config(&self) -> &::std::option::Option<crate::types::TaskReportConfig> {
        &self.task_report_config
    }
    /// <p>The number of files, objects, and directories that DataSync actually deletes in your destination location. If you don't configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html">delete data in the destination that isn't in the source</a>, the value is always <code>0</code>.</p>
    pub fn files_deleted(mut self, input: i64) -> Self {
        self.files_deleted = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of files, objects, and directories that DataSync actually deletes in your destination location. If you don't configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html">delete data in the destination that isn't in the source</a>, the value is always <code>0</code>.</p>
    pub fn set_files_deleted(mut self, input: ::std::option::Option<i64>) -> Self {
        self.files_deleted = input;
        self
    }
    /// <p>The number of files, objects, and directories that DataSync actually deletes in your destination location. If you don't configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html">delete data in the destination that isn't in the source</a>, the value is always <code>0</code>.</p>
    pub fn get_files_deleted(&self) -> &::std::option::Option<i64> {
        &self.files_deleted
    }
    /// <p>The number of files, objects, and directories that DataSync skips during your transfer.</p>
    pub fn files_skipped(mut self, input: i64) -> Self {
        self.files_skipped = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of files, objects, and directories that DataSync skips during your transfer.</p>
    pub fn set_files_skipped(mut self, input: ::std::option::Option<i64>) -> Self {
        self.files_skipped = input;
        self
    }
    /// <p>The number of files, objects, and directories that DataSync skips during your transfer.</p>
    pub fn get_files_skipped(&self) -> &::std::option::Option<i64> {
        &self.files_skipped
    }
    /// <p>The number of files, objects, and directories that DataSync verifies during your transfer.</p><note>
    /// <p>When you configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-data-verification-options.html">verify only the data that's transferred</a>, DataSync doesn't verify directories in some situations or files that fail to transfer.</p>
    /// </note>
    pub fn files_verified(mut self, input: i64) -> Self {
        self.files_verified = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of files, objects, and directories that DataSync verifies during your transfer.</p><note>
    /// <p>When you configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-data-verification-options.html">verify only the data that's transferred</a>, DataSync doesn't verify directories in some situations or files that fail to transfer.</p>
    /// </note>
    pub fn set_files_verified(mut self, input: ::std::option::Option<i64>) -> Self {
        self.files_verified = input;
        self
    }
    /// <p>The number of files, objects, and directories that DataSync verifies during your transfer.</p><note>
    /// <p>When you configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-data-verification-options.html">verify only the data that's transferred</a>, DataSync doesn't verify directories in some situations or files that fail to transfer.</p>
    /// </note>
    pub fn get_files_verified(&self) -> &::std::option::Option<i64> {
        &self.files_verified
    }
    /// <p>Indicates whether DataSync generated a complete <a href="https://docs.aws.amazon.com/datasync/latest/userguide/task-reports.html">task report</a> for your transfer.</p>
    pub fn report_result(mut self, input: crate::types::ReportResult) -> Self {
        self.report_result = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether DataSync generated a complete <a href="https://docs.aws.amazon.com/datasync/latest/userguide/task-reports.html">task report</a> for your transfer.</p>
    pub fn set_report_result(mut self, input: ::std::option::Option<crate::types::ReportResult>) -> Self {
        self.report_result = input;
        self
    }
    /// <p>Indicates whether DataSync generated a complete <a href="https://docs.aws.amazon.com/datasync/latest/userguide/task-reports.html">task report</a> for your transfer.</p>
    pub fn get_report_result(&self) -> &::std::option::Option<crate::types::ReportResult> {
        &self.report_result
    }
    /// <p>The number of files, objects, and directories that DataSync expects to delete in your destination location. If you don't configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html">delete data in the destination that isn't in the source</a>, the value is always <code>0</code>.</p>
    pub fn estimated_files_to_delete(mut self, input: i64) -> Self {
        self.estimated_files_to_delete = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of files, objects, and directories that DataSync expects to delete in your destination location. If you don't configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html">delete data in the destination that isn't in the source</a>, the value is always <code>0</code>.</p>
    pub fn set_estimated_files_to_delete(mut self, input: ::std::option::Option<i64>) -> Self {
        self.estimated_files_to_delete = input;
        self
    }
    /// <p>The number of files, objects, and directories that DataSync expects to delete in your destination location. If you don't configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html">delete data in the destination that isn't in the source</a>, the value is always <code>0</code>.</p>
    pub fn get_estimated_files_to_delete(&self) -> &::std::option::Option<i64> {
        &self.estimated_files_to_delete
    }
    /// <p>The task mode that you're using. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choosing-task-mode.html">Choosing a task mode for your data transfer</a>.</p>
    pub fn task_mode(mut self, input: crate::types::TaskMode) -> Self {
        self.task_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The task mode that you're using. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choosing-task-mode.html">Choosing a task mode for your data transfer</a>.</p>
    pub fn set_task_mode(mut self, input: ::std::option::Option<crate::types::TaskMode>) -> Self {
        self.task_mode = input;
        self
    }
    /// <p>The task mode that you're using. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choosing-task-mode.html">Choosing a task mode for your data transfer</a>.</p>
    pub fn get_task_mode(&self) -> &::std::option::Option<crate::types::TaskMode> {
        &self.task_mode
    }
    /// <p>The number of objects that DataSync will attempt to transfer after comparing your source and destination locations.</p><note>
    /// <p>Applies only to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choosing-task-mode.html">Enhanced mode tasks</a>.</p>
    /// </note>
    /// <p>This counter isn't applicable if you configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html#task-option-transfer-mode">transfer all data</a>. In that scenario, DataSync copies everything from the source to the destination without comparing differences between the locations.</p>
    pub fn files_prepared(mut self, input: i64) -> Self {
        self.files_prepared = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of objects that DataSync will attempt to transfer after comparing your source and destination locations.</p><note>
    /// <p>Applies only to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choosing-task-mode.html">Enhanced mode tasks</a>.</p>
    /// </note>
    /// <p>This counter isn't applicable if you configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html#task-option-transfer-mode">transfer all data</a>. In that scenario, DataSync copies everything from the source to the destination without comparing differences between the locations.</p>
    pub fn set_files_prepared(mut self, input: ::std::option::Option<i64>) -> Self {
        self.files_prepared = input;
        self
    }
    /// <p>The number of objects that DataSync will attempt to transfer after comparing your source and destination locations.</p><note>
    /// <p>Applies only to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choosing-task-mode.html">Enhanced mode tasks</a>.</p>
    /// </note>
    /// <p>This counter isn't applicable if you configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html#task-option-transfer-mode">transfer all data</a>. In that scenario, DataSync copies everything from the source to the destination without comparing differences between the locations.</p>
    pub fn get_files_prepared(&self) -> &::std::option::Option<i64> {
        &self.files_prepared
    }
    /// <p>The number of objects that DataSync finds at your locations.</p><note>
    /// <p>Applies only to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choosing-task-mode.html">Enhanced mode tasks</a>.</p>
    /// </note>
    pub fn files_listed(mut self, input: crate::types::TaskExecutionFilesListedDetail) -> Self {
        self.files_listed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of objects that DataSync finds at your locations.</p><note>
    /// <p>Applies only to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choosing-task-mode.html">Enhanced mode tasks</a>.</p>
    /// </note>
    pub fn set_files_listed(mut self, input: ::std::option::Option<crate::types::TaskExecutionFilesListedDetail>) -> Self {
        self.files_listed = input;
        self
    }
    /// <p>The number of objects that DataSync finds at your locations.</p><note>
    /// <p>Applies only to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choosing-task-mode.html">Enhanced mode tasks</a>.</p>
    /// </note>
    pub fn get_files_listed(&self) -> &::std::option::Option<crate::types::TaskExecutionFilesListedDetail> {
        &self.files_listed
    }
    /// <p>The number of objects that DataSync fails to prepare, transfer, verify, and delete during your task execution.</p><note>
    /// <p>Applies only to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choosing-task-mode.html">Enhanced mode tasks</a>.</p>
    /// </note>
    pub fn files_failed(mut self, input: crate::types::TaskExecutionFilesFailedDetail) -> Self {
        self.files_failed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of objects that DataSync fails to prepare, transfer, verify, and delete during your task execution.</p><note>
    /// <p>Applies only to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choosing-task-mode.html">Enhanced mode tasks</a>.</p>
    /// </note>
    pub fn set_files_failed(mut self, input: ::std::option::Option<crate::types::TaskExecutionFilesFailedDetail>) -> Self {
        self.files_failed = input;
        self
    }
    /// <p>The number of objects that DataSync fails to prepare, transfer, verify, and delete during your task execution.</p><note>
    /// <p>Applies only to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choosing-task-mode.html">Enhanced mode tasks</a>.</p>
    /// </note>
    pub fn get_files_failed(&self) -> &::std::option::Option<crate::types::TaskExecutionFilesFailedDetail> {
        &self.files_failed
    }
    /// <p>The time that the task execution actually begins. For non-queued tasks, <code>LaunchTime</code> and <code>StartTime</code> are typically the same. For queued tasks, <code>LaunchTime</code> is typically later than <code>StartTime</code> because previously queued tasks must finish running before newer tasks can begin.</p>
    pub fn launch_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.launch_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the task execution actually begins. For non-queued tasks, <code>LaunchTime</code> and <code>StartTime</code> are typically the same. For queued tasks, <code>LaunchTime</code> is typically later than <code>StartTime</code> because previously queued tasks must finish running before newer tasks can begin.</p>
    pub fn set_launch_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.launch_time = input;
        self
    }
    /// <p>The time that the task execution actually begins. For non-queued tasks, <code>LaunchTime</code> and <code>StartTime</code> are typically the same. For queued tasks, <code>LaunchTime</code> is typically later than <code>StartTime</code> because previously queued tasks must finish running before newer tasks can begin.</p>
    pub fn get_launch_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.launch_time
    }
    /// <p>The time that the transfer task ends.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the transfer task ends.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The time that the transfer task ends.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeTaskExecutionOutput`](crate::operation::describe_task_execution::DescribeTaskExecutionOutput).
    pub fn build(self) -> crate::operation::describe_task_execution::DescribeTaskExecutionOutput {
        crate::operation::describe_task_execution::DescribeTaskExecutionOutput {
            task_execution_arn: self.task_execution_arn,
            status: self.status,
            options: self.options,
            excludes: self.excludes,
            includes: self.includes,
            manifest_config: self.manifest_config,
            start_time: self.start_time,
            estimated_files_to_transfer: self.estimated_files_to_transfer.unwrap_or_default(),
            estimated_bytes_to_transfer: self.estimated_bytes_to_transfer.unwrap_or_default(),
            files_transferred: self.files_transferred.unwrap_or_default(),
            bytes_written: self.bytes_written.unwrap_or_default(),
            bytes_transferred: self.bytes_transferred.unwrap_or_default(),
            bytes_compressed: self.bytes_compressed.unwrap_or_default(),
            result: self.result,
            task_report_config: self.task_report_config,
            files_deleted: self.files_deleted.unwrap_or_default(),
            files_skipped: self.files_skipped.unwrap_or_default(),
            files_verified: self.files_verified.unwrap_or_default(),
            report_result: self.report_result,
            estimated_files_to_delete: self.estimated_files_to_delete.unwrap_or_default(),
            task_mode: self.task_mode,
            files_prepared: self.files_prepared.unwrap_or_default(),
            files_listed: self.files_listed,
            files_failed: self.files_failed,
            launch_time: self.launch_time,
            end_time: self.end_time,
            _request_id: self._request_id,
        }
    }
}
