// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information for HTTP-based domain validation of certificates requested through Amazon CloudFront and issued by ACM. This field exists only when the certificate type is <code>AMAZON_ISSUED</code> and the validation method is <code>HTTP</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HttpRedirect {
    /// <p>The URL including the domain to be validated. The certificate authority sends <code>GET</code> requests here during validation.</p>
    pub redirect_from: ::std::option::Option<::std::string::String>,
    /// <p>The URL hosting the validation token. <code>RedirectFrom</code> must return this content or redirect here.</p>
    pub redirect_to: ::std::option::Option<::std::string::String>,
}
impl HttpRedirect {
    /// <p>The URL including the domain to be validated. The certificate authority sends <code>GET</code> requests here during validation.</p>
    pub fn redirect_from(&self) -> ::std::option::Option<&str> {
        self.redirect_from.as_deref()
    }
    /// <p>The URL hosting the validation token. <code>RedirectFrom</code> must return this content or redirect here.</p>
    pub fn redirect_to(&self) -> ::std::option::Option<&str> {
        self.redirect_to.as_deref()
    }
}
impl HttpRedirect {
    /// Creates a new builder-style object to manufacture [`HttpRedirect`](crate::types::HttpRedirect).
    pub fn builder() -> crate::types::builders::HttpRedirectBuilder {
        crate::types::builders::HttpRedirectBuilder::default()
    }
}

/// A builder for [`HttpRedirect`](crate::types::HttpRedirect).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct HttpRedirectBuilder {
    pub(crate) redirect_from: ::std::option::Option<::std::string::String>,
    pub(crate) redirect_to: ::std::option::Option<::std::string::String>,
}
impl HttpRedirectBuilder {
    /// <p>The URL including the domain to be validated. The certificate authority sends <code>GET</code> requests here during validation.</p>
    pub fn redirect_from(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.redirect_from = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL including the domain to be validated. The certificate authority sends <code>GET</code> requests here during validation.</p>
    pub fn set_redirect_from(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.redirect_from = input;
        self
    }
    /// <p>The URL including the domain to be validated. The certificate authority sends <code>GET</code> requests here during validation.</p>
    pub fn get_redirect_from(&self) -> &::std::option::Option<::std::string::String> {
        &self.redirect_from
    }
    /// <p>The URL hosting the validation token. <code>RedirectFrom</code> must return this content or redirect here.</p>
    pub fn redirect_to(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.redirect_to = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL hosting the validation token. <code>RedirectFrom</code> must return this content or redirect here.</p>
    pub fn set_redirect_to(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.redirect_to = input;
        self
    }
    /// <p>The URL hosting the validation token. <code>RedirectFrom</code> must return this content or redirect here.</p>
    pub fn get_redirect_to(&self) -> &::std::option::Option<::std::string::String> {
        &self.redirect_to
    }
    /// Consumes the builder and constructs a [`HttpRedirect`](crate::types::HttpRedirect).
    pub fn build(self) -> crate::types::HttpRedirect {
        crate::types::HttpRedirect {
            redirect_from: self.redirect_from,
            redirect_to: self.redirect_to,
        }
    }
}
