// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Key Usage X.509 v3 extension defines the purpose of the public key contained in the certificate.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KeyUsage {
    /// <p>A string value that contains a Key Usage extension name.</p>
    pub name: ::std::option::Option<crate::types::KeyUsageName>,
}
impl KeyUsage {
    /// <p>A string value that contains a Key Usage extension name.</p>
    pub fn name(&self) -> ::std::option::Option<&crate::types::KeyUsageName> {
        self.name.as_ref()
    }
}
impl KeyUsage {
    /// Creates a new builder-style object to manufacture [`KeyUsage`](crate::types::KeyUsage).
    pub fn builder() -> crate::types::builders::KeyUsageBuilder {
        crate::types::builders::KeyUsageBuilder::default()
    }
}

/// A builder for [`KeyUsage`](crate::types::KeyUsage).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct KeyUsageBuilder {
    pub(crate) name: ::std::option::Option<crate::types::KeyUsageName>,
}
impl KeyUsageBuilder {
    /// <p>A string value that contains a Key Usage extension name.</p>
    pub fn name(mut self, input: crate::types::KeyUsageName) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>A string value that contains a Key Usage extension name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::KeyUsageName>) -> Self {
        self.name = input;
        self
    }
    /// <p>A string value that contains a Key Usage extension name.</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::KeyUsageName> {
        &self.name
    }
    /// Consumes the builder and constructs a [`KeyUsage`](crate::types::KeyUsage).
    pub fn build(self) -> crate::types::KeyUsage {
        crate::types::KeyUsage { name: self.name }
    }
}
