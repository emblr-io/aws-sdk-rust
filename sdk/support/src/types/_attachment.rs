// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An attachment to a case communication. The attachment consists of the file name and the content of the file. Each attachment file size should not exceed 5 MB. File types that are supported include the following: pdf, jpeg,.doc, .log, .text</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Attachment {
    /// <p>The name of the attachment file.</p>
    pub file_name: ::std::option::Option<::std::string::String>,
    /// <p>The content of the attachment file.</p>
    pub data: ::std::option::Option<::aws_smithy_types::Blob>,
}
impl Attachment {
    /// <p>The name of the attachment file.</p>
    pub fn file_name(&self) -> ::std::option::Option<&str> {
        self.file_name.as_deref()
    }
    /// <p>The content of the attachment file.</p>
    pub fn data(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.data.as_ref()
    }
}
impl Attachment {
    /// Creates a new builder-style object to manufacture [`Attachment`](crate::types::Attachment).
    pub fn builder() -> crate::types::builders::AttachmentBuilder {
        crate::types::builders::AttachmentBuilder::default()
    }
}

/// A builder for [`Attachment`](crate::types::Attachment).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AttachmentBuilder {
    pub(crate) file_name: ::std::option::Option<::std::string::String>,
    pub(crate) data: ::std::option::Option<::aws_smithy_types::Blob>,
}
impl AttachmentBuilder {
    /// <p>The name of the attachment file.</p>
    pub fn file_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the attachment file.</p>
    pub fn set_file_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_name = input;
        self
    }
    /// <p>The name of the attachment file.</p>
    pub fn get_file_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_name
    }
    /// <p>The content of the attachment file.</p>
    pub fn data(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.data = ::std::option::Option::Some(input);
        self
    }
    /// <p>The content of the attachment file.</p>
    pub fn set_data(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.data = input;
        self
    }
    /// <p>The content of the attachment file.</p>
    pub fn get_data(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.data
    }
    /// Consumes the builder and constructs a [`Attachment`](crate::types::Attachment).
    pub fn build(self) -> crate::types::Attachment {
        crate::types::Attachment {
            file_name: self.file_name,
            data: self.data,
        }
    }
}
