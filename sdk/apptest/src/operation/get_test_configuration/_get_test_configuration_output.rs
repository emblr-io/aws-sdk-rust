// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTestConfigurationOutput {
    /// <p>The response test configuration ID.</p>
    pub test_configuration_id: ::std::string::String,
    /// <p>The test configuration name</p>
    pub name: ::std::string::String,
    /// <p>The test configuration Amazon Resource Name (ARN).</p>
    pub test_configuration_arn: ::std::string::String,
    /// <p>The latest version of the test configuration.</p>
    pub latest_version: ::std::option::Option<crate::types::TestConfigurationLatestVersion>,
    /// <p>The test configuration version.</p>
    pub test_configuration_version: i32,
    /// <p>The status of the test configuration.</p>
    pub status: crate::types::TestConfigurationLifecycle,
    /// <p>The status reason of the test configuration.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The creation time of the test configuration.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>The last update time of the test configuration.</p>
    pub last_update_time: ::aws_smithy_types::DateTime,
    /// <p>The description of the test configuration.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The resources of the test configuration.</p>
    pub resources: ::std::vec::Vec<crate::types::Resource>,
    /// <p>The properties of the test configuration.</p>
    pub properties: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    /// <p>The tags of the test configuration.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The service settings of the test configuration.</p>
    pub service_settings: ::std::option::Option<crate::types::ServiceSettings>,
    _request_id: Option<String>,
}
impl GetTestConfigurationOutput {
    /// <p>The response test configuration ID.</p>
    pub fn test_configuration_id(&self) -> &str {
        use std::ops::Deref;
        self.test_configuration_id.deref()
    }
    /// <p>The test configuration name</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The test configuration Amazon Resource Name (ARN).</p>
    pub fn test_configuration_arn(&self) -> &str {
        use std::ops::Deref;
        self.test_configuration_arn.deref()
    }
    /// <p>The latest version of the test configuration.</p>
    pub fn latest_version(&self) -> ::std::option::Option<&crate::types::TestConfigurationLatestVersion> {
        self.latest_version.as_ref()
    }
    /// <p>The test configuration version.</p>
    pub fn test_configuration_version(&self) -> i32 {
        self.test_configuration_version
    }
    /// <p>The status of the test configuration.</p>
    pub fn status(&self) -> &crate::types::TestConfigurationLifecycle {
        &self.status
    }
    /// <p>The status reason of the test configuration.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The creation time of the test configuration.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>The last update time of the test configuration.</p>
    pub fn last_update_time(&self) -> &::aws_smithy_types::DateTime {
        &self.last_update_time
    }
    /// <p>The description of the test configuration.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The resources of the test configuration.</p>
    pub fn resources(&self) -> &[crate::types::Resource] {
        use std::ops::Deref;
        self.resources.deref()
    }
    /// <p>The properties of the test configuration.</p>
    pub fn properties(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.properties
    }
    /// <p>The tags of the test configuration.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The service settings of the test configuration.</p>
    pub fn service_settings(&self) -> ::std::option::Option<&crate::types::ServiceSettings> {
        self.service_settings.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetTestConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTestConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetTestConfigurationOutput`](crate::operation::get_test_configuration::GetTestConfigurationOutput).
    pub fn builder() -> crate::operation::get_test_configuration::builders::GetTestConfigurationOutputBuilder {
        crate::operation::get_test_configuration::builders::GetTestConfigurationOutputBuilder::default()
    }
}

/// A builder for [`GetTestConfigurationOutput`](crate::operation::get_test_configuration::GetTestConfigurationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetTestConfigurationOutputBuilder {
    pub(crate) test_configuration_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) test_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) latest_version: ::std::option::Option<crate::types::TestConfigurationLatestVersion>,
    pub(crate) test_configuration_version: ::std::option::Option<i32>,
    pub(crate) status: ::std::option::Option<crate::types::TestConfigurationLifecycle>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) resources: ::std::option::Option<::std::vec::Vec<crate::types::Resource>>,
    pub(crate) properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) service_settings: ::std::option::Option<crate::types::ServiceSettings>,
    _request_id: Option<String>,
}
impl GetTestConfigurationOutputBuilder {
    /// <p>The response test configuration ID.</p>
    /// This field is required.
    pub fn test_configuration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_configuration_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The response test configuration ID.</p>
    pub fn set_test_configuration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_configuration_id = input;
        self
    }
    /// <p>The response test configuration ID.</p>
    pub fn get_test_configuration_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_configuration_id
    }
    /// <p>The test configuration name</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The test configuration name</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The test configuration name</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The test configuration Amazon Resource Name (ARN).</p>
    /// This field is required.
    pub fn test_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The test configuration Amazon Resource Name (ARN).</p>
    pub fn set_test_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_configuration_arn = input;
        self
    }
    /// <p>The test configuration Amazon Resource Name (ARN).</p>
    pub fn get_test_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_configuration_arn
    }
    /// <p>The latest version of the test configuration.</p>
    /// This field is required.
    pub fn latest_version(mut self, input: crate::types::TestConfigurationLatestVersion) -> Self {
        self.latest_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The latest version of the test configuration.</p>
    pub fn set_latest_version(mut self, input: ::std::option::Option<crate::types::TestConfigurationLatestVersion>) -> Self {
        self.latest_version = input;
        self
    }
    /// <p>The latest version of the test configuration.</p>
    pub fn get_latest_version(&self) -> &::std::option::Option<crate::types::TestConfigurationLatestVersion> {
        &self.latest_version
    }
    /// <p>The test configuration version.</p>
    /// This field is required.
    pub fn test_configuration_version(mut self, input: i32) -> Self {
        self.test_configuration_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The test configuration version.</p>
    pub fn set_test_configuration_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.test_configuration_version = input;
        self
    }
    /// <p>The test configuration version.</p>
    pub fn get_test_configuration_version(&self) -> &::std::option::Option<i32> {
        &self.test_configuration_version
    }
    /// <p>The status of the test configuration.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::TestConfigurationLifecycle) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the test configuration.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TestConfigurationLifecycle>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the test configuration.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TestConfigurationLifecycle> {
        &self.status
    }
    /// <p>The status reason of the test configuration.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status reason of the test configuration.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The status reason of the test configuration.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The creation time of the test configuration.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation time of the test configuration.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The creation time of the test configuration.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The last update time of the test configuration.</p>
    /// This field is required.
    pub fn last_update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last update time of the test configuration.</p>
    pub fn set_last_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_update_time = input;
        self
    }
    /// <p>The last update time of the test configuration.</p>
    pub fn get_last_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_update_time
    }
    /// <p>The description of the test configuration.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the test configuration.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the test configuration.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `resources`.
    ///
    /// To override the contents of this collection use [`set_resources`](Self::set_resources).
    ///
    /// <p>The resources of the test configuration.</p>
    pub fn resources(mut self, input: crate::types::Resource) -> Self {
        let mut v = self.resources.unwrap_or_default();
        v.push(input);
        self.resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>The resources of the test configuration.</p>
    pub fn set_resources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Resource>>) -> Self {
        self.resources = input;
        self
    }
    /// <p>The resources of the test configuration.</p>
    pub fn get_resources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Resource>> {
        &self.resources
    }
    /// Adds a key-value pair to `properties`.
    ///
    /// To override the contents of this collection use [`set_properties`](Self::set_properties).
    ///
    /// <p>The properties of the test configuration.</p>
    pub fn properties(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.properties.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The properties of the test configuration.</p>
    pub fn set_properties(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.properties = input;
        self
    }
    /// <p>The properties of the test configuration.</p>
    pub fn get_properties(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.properties
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags of the test configuration.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags of the test configuration.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags of the test configuration.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The service settings of the test configuration.</p>
    pub fn service_settings(mut self, input: crate::types::ServiceSettings) -> Self {
        self.service_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The service settings of the test configuration.</p>
    pub fn set_service_settings(mut self, input: ::std::option::Option<crate::types::ServiceSettings>) -> Self {
        self.service_settings = input;
        self
    }
    /// <p>The service settings of the test configuration.</p>
    pub fn get_service_settings(&self) -> &::std::option::Option<crate::types::ServiceSettings> {
        &self.service_settings
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetTestConfigurationOutput`](crate::operation::get_test_configuration::GetTestConfigurationOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`test_configuration_id`](crate::operation::get_test_configuration::builders::GetTestConfigurationOutputBuilder::test_configuration_id)
    /// - [`name`](crate::operation::get_test_configuration::builders::GetTestConfigurationOutputBuilder::name)
    /// - [`test_configuration_arn`](crate::operation::get_test_configuration::builders::GetTestConfigurationOutputBuilder::test_configuration_arn)
    /// - [`test_configuration_version`](crate::operation::get_test_configuration::builders::GetTestConfigurationOutputBuilder::test_configuration_version)
    /// - [`status`](crate::operation::get_test_configuration::builders::GetTestConfigurationOutputBuilder::status)
    /// - [`creation_time`](crate::operation::get_test_configuration::builders::GetTestConfigurationOutputBuilder::creation_time)
    /// - [`last_update_time`](crate::operation::get_test_configuration::builders::GetTestConfigurationOutputBuilder::last_update_time)
    /// - [`resources`](crate::operation::get_test_configuration::builders::GetTestConfigurationOutputBuilder::resources)
    /// - [`properties`](crate::operation::get_test_configuration::builders::GetTestConfigurationOutputBuilder::properties)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_test_configuration::GetTestConfigurationOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_test_configuration::GetTestConfigurationOutput {
            test_configuration_id: self.test_configuration_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "test_configuration_id",
                    "test_configuration_id was not specified but it is required when building GetTestConfigurationOutput",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GetTestConfigurationOutput",
                )
            })?,
            test_configuration_arn: self.test_configuration_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "test_configuration_arn",
                    "test_configuration_arn was not specified but it is required when building GetTestConfigurationOutput",
                )
            })?,
            latest_version: self.latest_version,
            test_configuration_version: self.test_configuration_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "test_configuration_version",
                    "test_configuration_version was not specified but it is required when building GetTestConfigurationOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetTestConfigurationOutput",
                )
            })?,
            status_reason: self.status_reason,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building GetTestConfigurationOutput",
                )
            })?,
            last_update_time: self.last_update_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_update_time",
                    "last_update_time was not specified but it is required when building GetTestConfigurationOutput",
                )
            })?,
            description: self.description,
            resources: self.resources.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "resources",
                    "resources was not specified but it is required when building GetTestConfigurationOutput",
                )
            })?,
            properties: self.properties.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "properties",
                    "properties was not specified but it is required when building GetTestConfigurationOutput",
                )
            })?,
            tags: self.tags,
            service_settings: self.service_settings,
            _request_id: self._request_id,
        })
    }
}
