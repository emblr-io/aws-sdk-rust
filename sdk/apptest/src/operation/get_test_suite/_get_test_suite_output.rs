// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTestSuiteOutput {
    /// <p>The response ID of the test suite.</p>
    pub test_suite_id: ::std::string::String,
    /// <p>The name of the test suite.</p>
    pub name: ::std::string::String,
    /// <p>The latest version of the test suite.</p>
    pub latest_version: ::std::option::Option<crate::types::TestSuiteLatestVersion>,
    /// <p>The version of the test suite.</p>
    pub test_suite_version: i32,
    /// <p>The status of the test suite.</p>
    pub status: ::std::option::Option<crate::types::TestSuiteLifecycle>,
    /// <p>The status reason of the test suite.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The test suite Amazon Resource Name (ARN).</p>
    pub test_suite_arn: ::std::string::String,
    /// <p>The creation time of the test suite.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>The last update time of the test suite.</p>
    pub last_update_time: ::aws_smithy_types::DateTime,
    /// <p>The description of the test suite.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The before steps of the test suite.</p>
    pub before_steps: ::std::vec::Vec<crate::types::Step>,
    /// <p>The after steps of the test suite.</p>
    pub after_steps: ::std::vec::Vec<crate::types::Step>,
    /// <p>The test cases of the test suite.</p>
    pub test_cases: ::std::option::Option<crate::types::TestCases>,
    /// <p>The tags of the test suite.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetTestSuiteOutput {
    /// <p>The response ID of the test suite.</p>
    pub fn test_suite_id(&self) -> &str {
        use std::ops::Deref;
        self.test_suite_id.deref()
    }
    /// <p>The name of the test suite.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The latest version of the test suite.</p>
    pub fn latest_version(&self) -> ::std::option::Option<&crate::types::TestSuiteLatestVersion> {
        self.latest_version.as_ref()
    }
    /// <p>The version of the test suite.</p>
    pub fn test_suite_version(&self) -> i32 {
        self.test_suite_version
    }
    /// <p>The status of the test suite.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::TestSuiteLifecycle> {
        self.status.as_ref()
    }
    /// <p>The status reason of the test suite.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The test suite Amazon Resource Name (ARN).</p>
    pub fn test_suite_arn(&self) -> &str {
        use std::ops::Deref;
        self.test_suite_arn.deref()
    }
    /// <p>The creation time of the test suite.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>The last update time of the test suite.</p>
    pub fn last_update_time(&self) -> &::aws_smithy_types::DateTime {
        &self.last_update_time
    }
    /// <p>The description of the test suite.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The before steps of the test suite.</p>
    pub fn before_steps(&self) -> &[crate::types::Step] {
        use std::ops::Deref;
        self.before_steps.deref()
    }
    /// <p>The after steps of the test suite.</p>
    pub fn after_steps(&self) -> &[crate::types::Step] {
        use std::ops::Deref;
        self.after_steps.deref()
    }
    /// <p>The test cases of the test suite.</p>
    pub fn test_cases(&self) -> ::std::option::Option<&crate::types::TestCases> {
        self.test_cases.as_ref()
    }
    /// <p>The tags of the test suite.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetTestSuiteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTestSuiteOutput {
    /// Creates a new builder-style object to manufacture [`GetTestSuiteOutput`](crate::operation::get_test_suite::GetTestSuiteOutput).
    pub fn builder() -> crate::operation::get_test_suite::builders::GetTestSuiteOutputBuilder {
        crate::operation::get_test_suite::builders::GetTestSuiteOutputBuilder::default()
    }
}

/// A builder for [`GetTestSuiteOutput`](crate::operation::get_test_suite::GetTestSuiteOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetTestSuiteOutputBuilder {
    pub(crate) test_suite_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) latest_version: ::std::option::Option<crate::types::TestSuiteLatestVersion>,
    pub(crate) test_suite_version: ::std::option::Option<i32>,
    pub(crate) status: ::std::option::Option<crate::types::TestSuiteLifecycle>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) test_suite_arn: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) before_steps: ::std::option::Option<::std::vec::Vec<crate::types::Step>>,
    pub(crate) after_steps: ::std::option::Option<::std::vec::Vec<crate::types::Step>>,
    pub(crate) test_cases: ::std::option::Option<crate::types::TestCases>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetTestSuiteOutputBuilder {
    /// <p>The response ID of the test suite.</p>
    /// This field is required.
    pub fn test_suite_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_suite_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The response ID of the test suite.</p>
    pub fn set_test_suite_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_suite_id = input;
        self
    }
    /// <p>The response ID of the test suite.</p>
    pub fn get_test_suite_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_suite_id
    }
    /// <p>The name of the test suite.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the test suite.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the test suite.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The latest version of the test suite.</p>
    /// This field is required.
    pub fn latest_version(mut self, input: crate::types::TestSuiteLatestVersion) -> Self {
        self.latest_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The latest version of the test suite.</p>
    pub fn set_latest_version(mut self, input: ::std::option::Option<crate::types::TestSuiteLatestVersion>) -> Self {
        self.latest_version = input;
        self
    }
    /// <p>The latest version of the test suite.</p>
    pub fn get_latest_version(&self) -> &::std::option::Option<crate::types::TestSuiteLatestVersion> {
        &self.latest_version
    }
    /// <p>The version of the test suite.</p>
    /// This field is required.
    pub fn test_suite_version(mut self, input: i32) -> Self {
        self.test_suite_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version of the test suite.</p>
    pub fn set_test_suite_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.test_suite_version = input;
        self
    }
    /// <p>The version of the test suite.</p>
    pub fn get_test_suite_version(&self) -> &::std::option::Option<i32> {
        &self.test_suite_version
    }
    /// <p>The status of the test suite.</p>
    pub fn status(mut self, input: crate::types::TestSuiteLifecycle) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the test suite.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TestSuiteLifecycle>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the test suite.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TestSuiteLifecycle> {
        &self.status
    }
    /// <p>The status reason of the test suite.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status reason of the test suite.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The status reason of the test suite.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The test suite Amazon Resource Name (ARN).</p>
    /// This field is required.
    pub fn test_suite_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_suite_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The test suite Amazon Resource Name (ARN).</p>
    pub fn set_test_suite_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_suite_arn = input;
        self
    }
    /// <p>The test suite Amazon Resource Name (ARN).</p>
    pub fn get_test_suite_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_suite_arn
    }
    /// <p>The creation time of the test suite.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation time of the test suite.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The creation time of the test suite.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The last update time of the test suite.</p>
    /// This field is required.
    pub fn last_update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last update time of the test suite.</p>
    pub fn set_last_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_update_time = input;
        self
    }
    /// <p>The last update time of the test suite.</p>
    pub fn get_last_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_update_time
    }
    /// <p>The description of the test suite.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the test suite.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the test suite.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `before_steps`.
    ///
    /// To override the contents of this collection use [`set_before_steps`](Self::set_before_steps).
    ///
    /// <p>The before steps of the test suite.</p>
    pub fn before_steps(mut self, input: crate::types::Step) -> Self {
        let mut v = self.before_steps.unwrap_or_default();
        v.push(input);
        self.before_steps = ::std::option::Option::Some(v);
        self
    }
    /// <p>The before steps of the test suite.</p>
    pub fn set_before_steps(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Step>>) -> Self {
        self.before_steps = input;
        self
    }
    /// <p>The before steps of the test suite.</p>
    pub fn get_before_steps(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Step>> {
        &self.before_steps
    }
    /// Appends an item to `after_steps`.
    ///
    /// To override the contents of this collection use [`set_after_steps`](Self::set_after_steps).
    ///
    /// <p>The after steps of the test suite.</p>
    pub fn after_steps(mut self, input: crate::types::Step) -> Self {
        let mut v = self.after_steps.unwrap_or_default();
        v.push(input);
        self.after_steps = ::std::option::Option::Some(v);
        self
    }
    /// <p>The after steps of the test suite.</p>
    pub fn set_after_steps(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Step>>) -> Self {
        self.after_steps = input;
        self
    }
    /// <p>The after steps of the test suite.</p>
    pub fn get_after_steps(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Step>> {
        &self.after_steps
    }
    /// <p>The test cases of the test suite.</p>
    /// This field is required.
    pub fn test_cases(mut self, input: crate::types::TestCases) -> Self {
        self.test_cases = ::std::option::Option::Some(input);
        self
    }
    /// <p>The test cases of the test suite.</p>
    pub fn set_test_cases(mut self, input: ::std::option::Option<crate::types::TestCases>) -> Self {
        self.test_cases = input;
        self
    }
    /// <p>The test cases of the test suite.</p>
    pub fn get_test_cases(&self) -> &::std::option::Option<crate::types::TestCases> {
        &self.test_cases
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags of the test suite.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags of the test suite.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags of the test suite.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetTestSuiteOutput`](crate::operation::get_test_suite::GetTestSuiteOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`test_suite_id`](crate::operation::get_test_suite::builders::GetTestSuiteOutputBuilder::test_suite_id)
    /// - [`name`](crate::operation::get_test_suite::builders::GetTestSuiteOutputBuilder::name)
    /// - [`test_suite_version`](crate::operation::get_test_suite::builders::GetTestSuiteOutputBuilder::test_suite_version)
    /// - [`test_suite_arn`](crate::operation::get_test_suite::builders::GetTestSuiteOutputBuilder::test_suite_arn)
    /// - [`creation_time`](crate::operation::get_test_suite::builders::GetTestSuiteOutputBuilder::creation_time)
    /// - [`last_update_time`](crate::operation::get_test_suite::builders::GetTestSuiteOutputBuilder::last_update_time)
    /// - [`before_steps`](crate::operation::get_test_suite::builders::GetTestSuiteOutputBuilder::before_steps)
    /// - [`after_steps`](crate::operation::get_test_suite::builders::GetTestSuiteOutputBuilder::after_steps)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_test_suite::GetTestSuiteOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_test_suite::GetTestSuiteOutput {
            test_suite_id: self.test_suite_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "test_suite_id",
                    "test_suite_id was not specified but it is required when building GetTestSuiteOutput",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GetTestSuiteOutput",
                )
            })?,
            latest_version: self.latest_version,
            test_suite_version: self.test_suite_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "test_suite_version",
                    "test_suite_version was not specified but it is required when building GetTestSuiteOutput",
                )
            })?,
            status: self.status,
            status_reason: self.status_reason,
            test_suite_arn: self.test_suite_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "test_suite_arn",
                    "test_suite_arn was not specified but it is required when building GetTestSuiteOutput",
                )
            })?,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building GetTestSuiteOutput",
                )
            })?,
            last_update_time: self.last_update_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_update_time",
                    "last_update_time was not specified but it is required when building GetTestSuiteOutput",
                )
            })?,
            description: self.description,
            before_steps: self.before_steps.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "before_steps",
                    "before_steps was not specified but it is required when building GetTestSuiteOutput",
                )
            })?,
            after_steps: self.after_steps.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "after_steps",
                    "after_steps was not specified but it is required when building GetTestSuiteOutput",
                )
            })?,
            test_cases: self.test_cases,
            tags: self.tags,
            _request_id: self._request_id,
        })
    }
}
