// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartTestRunOutput {
    /// <p>The test run ID of the test run.</p>
    pub test_run_id: ::std::string::String,
    /// <p>The test run status of the test run.</p>
    pub test_run_status: crate::types::TestRunStatus,
    _request_id: Option<String>,
}
impl StartTestRunOutput {
    /// <p>The test run ID of the test run.</p>
    pub fn test_run_id(&self) -> &str {
        use std::ops::Deref;
        self.test_run_id.deref()
    }
    /// <p>The test run status of the test run.</p>
    pub fn test_run_status(&self) -> &crate::types::TestRunStatus {
        &self.test_run_status
    }
}
impl ::aws_types::request_id::RequestId for StartTestRunOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartTestRunOutput {
    /// Creates a new builder-style object to manufacture [`StartTestRunOutput`](crate::operation::start_test_run::StartTestRunOutput).
    pub fn builder() -> crate::operation::start_test_run::builders::StartTestRunOutputBuilder {
        crate::operation::start_test_run::builders::StartTestRunOutputBuilder::default()
    }
}

/// A builder for [`StartTestRunOutput`](crate::operation::start_test_run::StartTestRunOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartTestRunOutputBuilder {
    pub(crate) test_run_id: ::std::option::Option<::std::string::String>,
    pub(crate) test_run_status: ::std::option::Option<crate::types::TestRunStatus>,
    _request_id: Option<String>,
}
impl StartTestRunOutputBuilder {
    /// <p>The test run ID of the test run.</p>
    /// This field is required.
    pub fn test_run_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_run_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The test run ID of the test run.</p>
    pub fn set_test_run_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_run_id = input;
        self
    }
    /// <p>The test run ID of the test run.</p>
    pub fn get_test_run_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_run_id
    }
    /// <p>The test run status of the test run.</p>
    /// This field is required.
    pub fn test_run_status(mut self, input: crate::types::TestRunStatus) -> Self {
        self.test_run_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The test run status of the test run.</p>
    pub fn set_test_run_status(mut self, input: ::std::option::Option<crate::types::TestRunStatus>) -> Self {
        self.test_run_status = input;
        self
    }
    /// <p>The test run status of the test run.</p>
    pub fn get_test_run_status(&self) -> &::std::option::Option<crate::types::TestRunStatus> {
        &self.test_run_status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartTestRunOutput`](crate::operation::start_test_run::StartTestRunOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`test_run_id`](crate::operation::start_test_run::builders::StartTestRunOutputBuilder::test_run_id)
    /// - [`test_run_status`](crate::operation::start_test_run::builders::StartTestRunOutputBuilder::test_run_status)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_test_run::StartTestRunOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_test_run::StartTestRunOutput {
            test_run_id: self.test_run_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "test_run_id",
                    "test_run_id was not specified but it is required when building StartTestRunOutput",
                )
            })?,
            test_run_status: self.test_run_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "test_run_status",
                    "test_run_status was not specified but it is required when building StartTestRunOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
