// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTestRunStepInput {
    /// <p>The test run ID of the test run step.</p>
    pub test_run_id: ::std::option::Option<::std::string::String>,
    /// <p>The step name of the test run step.</p>
    pub step_name: ::std::option::Option<::std::string::String>,
    /// <p>The test case ID of a test run step.</p>
    pub test_case_id: ::std::option::Option<::std::string::String>,
    /// <p>The test suite ID of a test run step.</p>
    pub test_suite_id: ::std::option::Option<::std::string::String>,
}
impl GetTestRunStepInput {
    /// <p>The test run ID of the test run step.</p>
    pub fn test_run_id(&self) -> ::std::option::Option<&str> {
        self.test_run_id.as_deref()
    }
    /// <p>The step name of the test run step.</p>
    pub fn step_name(&self) -> ::std::option::Option<&str> {
        self.step_name.as_deref()
    }
    /// <p>The test case ID of a test run step.</p>
    pub fn test_case_id(&self) -> ::std::option::Option<&str> {
        self.test_case_id.as_deref()
    }
    /// <p>The test suite ID of a test run step.</p>
    pub fn test_suite_id(&self) -> ::std::option::Option<&str> {
        self.test_suite_id.as_deref()
    }
}
impl GetTestRunStepInput {
    /// Creates a new builder-style object to manufacture [`GetTestRunStepInput`](crate::operation::get_test_run_step::GetTestRunStepInput).
    pub fn builder() -> crate::operation::get_test_run_step::builders::GetTestRunStepInputBuilder {
        crate::operation::get_test_run_step::builders::GetTestRunStepInputBuilder::default()
    }
}

/// A builder for [`GetTestRunStepInput`](crate::operation::get_test_run_step::GetTestRunStepInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetTestRunStepInputBuilder {
    pub(crate) test_run_id: ::std::option::Option<::std::string::String>,
    pub(crate) step_name: ::std::option::Option<::std::string::String>,
    pub(crate) test_case_id: ::std::option::Option<::std::string::String>,
    pub(crate) test_suite_id: ::std::option::Option<::std::string::String>,
}
impl GetTestRunStepInputBuilder {
    /// <p>The test run ID of the test run step.</p>
    /// This field is required.
    pub fn test_run_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_run_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The test run ID of the test run step.</p>
    pub fn set_test_run_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_run_id = input;
        self
    }
    /// <p>The test run ID of the test run step.</p>
    pub fn get_test_run_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_run_id
    }
    /// <p>The step name of the test run step.</p>
    /// This field is required.
    pub fn step_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.step_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The step name of the test run step.</p>
    pub fn set_step_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.step_name = input;
        self
    }
    /// <p>The step name of the test run step.</p>
    pub fn get_step_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.step_name
    }
    /// <p>The test case ID of a test run step.</p>
    pub fn test_case_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_case_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The test case ID of a test run step.</p>
    pub fn set_test_case_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_case_id = input;
        self
    }
    /// <p>The test case ID of a test run step.</p>
    pub fn get_test_case_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_case_id
    }
    /// <p>The test suite ID of a test run step.</p>
    pub fn test_suite_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_suite_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The test suite ID of a test run step.</p>
    pub fn set_test_suite_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_suite_id = input;
        self
    }
    /// <p>The test suite ID of a test run step.</p>
    pub fn get_test_suite_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_suite_id
    }
    /// Consumes the builder and constructs a [`GetTestRunStepInput`](crate::operation::get_test_run_step::GetTestRunStepInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_test_run_step::GetTestRunStepInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_test_run_step::GetTestRunStepInput {
            test_run_id: self.test_run_id,
            step_name: self.step_name,
            test_case_id: self.test_case_id,
            test_suite_id: self.test_suite_id,
        })
    }
}
