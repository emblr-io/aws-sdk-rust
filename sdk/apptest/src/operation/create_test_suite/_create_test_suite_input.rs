// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateTestSuiteInput {
    /// <p>The name of the test suite.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the test suite.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The before steps of the test suite.</p>
    pub before_steps: ::std::option::Option<::std::vec::Vec<crate::types::Step>>,
    /// <p>The after steps of the test suite.</p>
    pub after_steps: ::std::option::Option<::std::vec::Vec<crate::types::Step>>,
    /// <p>The test cases in the test suite.</p>
    pub test_cases: ::std::option::Option<crate::types::TestCases>,
    /// <p>The client token of the test suite.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The tags of the test suite.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateTestSuiteInput {
    /// <p>The name of the test suite.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the test suite.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The before steps of the test suite.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.before_steps.is_none()`.
    pub fn before_steps(&self) -> &[crate::types::Step] {
        self.before_steps.as_deref().unwrap_or_default()
    }
    /// <p>The after steps of the test suite.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.after_steps.is_none()`.
    pub fn after_steps(&self) -> &[crate::types::Step] {
        self.after_steps.as_deref().unwrap_or_default()
    }
    /// <p>The test cases in the test suite.</p>
    pub fn test_cases(&self) -> ::std::option::Option<&crate::types::TestCases> {
        self.test_cases.as_ref()
    }
    /// <p>The client token of the test suite.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The tags of the test suite.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateTestSuiteInput {
    /// Creates a new builder-style object to manufacture [`CreateTestSuiteInput`](crate::operation::create_test_suite::CreateTestSuiteInput).
    pub fn builder() -> crate::operation::create_test_suite::builders::CreateTestSuiteInputBuilder {
        crate::operation::create_test_suite::builders::CreateTestSuiteInputBuilder::default()
    }
}

/// A builder for [`CreateTestSuiteInput`](crate::operation::create_test_suite::CreateTestSuiteInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateTestSuiteInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) before_steps: ::std::option::Option<::std::vec::Vec<crate::types::Step>>,
    pub(crate) after_steps: ::std::option::Option<::std::vec::Vec<crate::types::Step>>,
    pub(crate) test_cases: ::std::option::Option<crate::types::TestCases>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateTestSuiteInputBuilder {
    /// <p>The name of the test suite.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the test suite.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the test suite.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the test suite.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the test suite.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the test suite.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `before_steps`.
    ///
    /// To override the contents of this collection use [`set_before_steps`](Self::set_before_steps).
    ///
    /// <p>The before steps of the test suite.</p>
    pub fn before_steps(mut self, input: crate::types::Step) -> Self {
        let mut v = self.before_steps.unwrap_or_default();
        v.push(input);
        self.before_steps = ::std::option::Option::Some(v);
        self
    }
    /// <p>The before steps of the test suite.</p>
    pub fn set_before_steps(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Step>>) -> Self {
        self.before_steps = input;
        self
    }
    /// <p>The before steps of the test suite.</p>
    pub fn get_before_steps(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Step>> {
        &self.before_steps
    }
    /// Appends an item to `after_steps`.
    ///
    /// To override the contents of this collection use [`set_after_steps`](Self::set_after_steps).
    ///
    /// <p>The after steps of the test suite.</p>
    pub fn after_steps(mut self, input: crate::types::Step) -> Self {
        let mut v = self.after_steps.unwrap_or_default();
        v.push(input);
        self.after_steps = ::std::option::Option::Some(v);
        self
    }
    /// <p>The after steps of the test suite.</p>
    pub fn set_after_steps(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Step>>) -> Self {
        self.after_steps = input;
        self
    }
    /// <p>The after steps of the test suite.</p>
    pub fn get_after_steps(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Step>> {
        &self.after_steps
    }
    /// <p>The test cases in the test suite.</p>
    /// This field is required.
    pub fn test_cases(mut self, input: crate::types::TestCases) -> Self {
        self.test_cases = ::std::option::Option::Some(input);
        self
    }
    /// <p>The test cases in the test suite.</p>
    pub fn set_test_cases(mut self, input: ::std::option::Option<crate::types::TestCases>) -> Self {
        self.test_cases = input;
        self
    }
    /// <p>The test cases in the test suite.</p>
    pub fn get_test_cases(&self) -> &::std::option::Option<crate::types::TestCases> {
        &self.test_cases
    }
    /// <p>The client token of the test suite.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The client token of the test suite.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The client token of the test suite.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags of the test suite.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags of the test suite.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags of the test suite.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateTestSuiteInput`](crate::operation::create_test_suite::CreateTestSuiteInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_test_suite::CreateTestSuiteInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_test_suite::CreateTestSuiteInput {
            name: self.name,
            description: self.description,
            before_steps: self.before_steps,
            after_steps: self.after_steps,
            test_cases: self.test_cases,
            client_token: self.client_token,
            tags: self.tags,
        })
    }
}
