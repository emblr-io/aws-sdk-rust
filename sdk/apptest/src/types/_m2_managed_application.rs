// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the AWS Mainframe Modernization managed application.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct M2ManagedApplication {
    /// <p>The application ID of the AWS Mainframe Modernization managed application.</p>
    pub application_id: ::std::string::String,
    /// <p>The runtime of the AWS Mainframe Modernization managed application.</p>
    pub runtime: crate::types::M2ManagedRuntime,
    /// <p>The VPC endpoint service name of the AWS Mainframe Modernization managed application.</p>
    pub vpc_endpoint_service_name: ::std::option::Option<::std::string::String>,
    /// <p>The listener port of the AWS Mainframe Modernization managed application.</p>
    pub listener_port: ::std::option::Option<::std::string::String>,
}
impl M2ManagedApplication {
    /// <p>The application ID of the AWS Mainframe Modernization managed application.</p>
    pub fn application_id(&self) -> &str {
        use std::ops::Deref;
        self.application_id.deref()
    }
    /// <p>The runtime of the AWS Mainframe Modernization managed application.</p>
    pub fn runtime(&self) -> &crate::types::M2ManagedRuntime {
        &self.runtime
    }
    /// <p>The VPC endpoint service name of the AWS Mainframe Modernization managed application.</p>
    pub fn vpc_endpoint_service_name(&self) -> ::std::option::Option<&str> {
        self.vpc_endpoint_service_name.as_deref()
    }
    /// <p>The listener port of the AWS Mainframe Modernization managed application.</p>
    pub fn listener_port(&self) -> ::std::option::Option<&str> {
        self.listener_port.as_deref()
    }
}
impl M2ManagedApplication {
    /// Creates a new builder-style object to manufacture [`M2ManagedApplication`](crate::types::M2ManagedApplication).
    pub fn builder() -> crate::types::builders::M2ManagedApplicationBuilder {
        crate::types::builders::M2ManagedApplicationBuilder::default()
    }
}

/// A builder for [`M2ManagedApplication`](crate::types::M2ManagedApplication).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct M2ManagedApplicationBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) runtime: ::std::option::Option<crate::types::M2ManagedRuntime>,
    pub(crate) vpc_endpoint_service_name: ::std::option::Option<::std::string::String>,
    pub(crate) listener_port: ::std::option::Option<::std::string::String>,
}
impl M2ManagedApplicationBuilder {
    /// <p>The application ID of the AWS Mainframe Modernization managed application.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The application ID of the AWS Mainframe Modernization managed application.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The application ID of the AWS Mainframe Modernization managed application.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The runtime of the AWS Mainframe Modernization managed application.</p>
    /// This field is required.
    pub fn runtime(mut self, input: crate::types::M2ManagedRuntime) -> Self {
        self.runtime = ::std::option::Option::Some(input);
        self
    }
    /// <p>The runtime of the AWS Mainframe Modernization managed application.</p>
    pub fn set_runtime(mut self, input: ::std::option::Option<crate::types::M2ManagedRuntime>) -> Self {
        self.runtime = input;
        self
    }
    /// <p>The runtime of the AWS Mainframe Modernization managed application.</p>
    pub fn get_runtime(&self) -> &::std::option::Option<crate::types::M2ManagedRuntime> {
        &self.runtime
    }
    /// <p>The VPC endpoint service name of the AWS Mainframe Modernization managed application.</p>
    pub fn vpc_endpoint_service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_endpoint_service_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The VPC endpoint service name of the AWS Mainframe Modernization managed application.</p>
    pub fn set_vpc_endpoint_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_endpoint_service_name = input;
        self
    }
    /// <p>The VPC endpoint service name of the AWS Mainframe Modernization managed application.</p>
    pub fn get_vpc_endpoint_service_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_endpoint_service_name
    }
    /// <p>The listener port of the AWS Mainframe Modernization managed application.</p>
    pub fn listener_port(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.listener_port = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The listener port of the AWS Mainframe Modernization managed application.</p>
    pub fn set_listener_port(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.listener_port = input;
        self
    }
    /// <p>The listener port of the AWS Mainframe Modernization managed application.</p>
    pub fn get_listener_port(&self) -> &::std::option::Option<::std::string::String> {
        &self.listener_port
    }
    /// Consumes the builder and constructs a [`M2ManagedApplication`](crate::types::M2ManagedApplication).
    /// This method will fail if any of the following fields are not set:
    /// - [`application_id`](crate::types::builders::M2ManagedApplicationBuilder::application_id)
    /// - [`runtime`](crate::types::builders::M2ManagedApplicationBuilder::runtime)
    pub fn build(self) -> ::std::result::Result<crate::types::M2ManagedApplication, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::M2ManagedApplication {
            application_id: self.application_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "application_id",
                    "application_id was not specified but it is required when building M2ManagedApplication",
                )
            })?,
            runtime: self.runtime.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "runtime",
                    "runtime was not specified but it is required when building M2ManagedApplication",
                )
            })?,
            vpc_endpoint_service_name: self.vpc_endpoint_service_name,
            listener_port: self.listener_port,
        })
    }
}
