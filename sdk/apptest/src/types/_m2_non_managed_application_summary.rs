// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the AWS Mainframe Modernization non-managed application summary.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct M2NonManagedApplicationSummary {
    /// <p>The VPC endpoint service name of the AWS Mainframe Modernization non-managed application summary.</p>
    pub vpc_endpoint_service_name: ::std::string::String,
    /// <p>The listener port of the AWS Mainframe Modernization non-managed application summary.</p>
    pub listener_port: i32,
    /// <p>The runtime of the AWS Mainframe Modernization non-managed application summary.</p>
    pub runtime: crate::types::M2NonManagedRuntime,
    /// <p>The web application name of the AWS Mainframe Modernization non-managed application summary.</p>
    pub web_app_name: ::std::option::Option<::std::string::String>,
}
impl M2NonManagedApplicationSummary {
    /// <p>The VPC endpoint service name of the AWS Mainframe Modernization non-managed application summary.</p>
    pub fn vpc_endpoint_service_name(&self) -> &str {
        use std::ops::Deref;
        self.vpc_endpoint_service_name.deref()
    }
    /// <p>The listener port of the AWS Mainframe Modernization non-managed application summary.</p>
    pub fn listener_port(&self) -> i32 {
        self.listener_port
    }
    /// <p>The runtime of the AWS Mainframe Modernization non-managed application summary.</p>
    pub fn runtime(&self) -> &crate::types::M2NonManagedRuntime {
        &self.runtime
    }
    /// <p>The web application name of the AWS Mainframe Modernization non-managed application summary.</p>
    pub fn web_app_name(&self) -> ::std::option::Option<&str> {
        self.web_app_name.as_deref()
    }
}
impl M2NonManagedApplicationSummary {
    /// Creates a new builder-style object to manufacture [`M2NonManagedApplicationSummary`](crate::types::M2NonManagedApplicationSummary).
    pub fn builder() -> crate::types::builders::M2NonManagedApplicationSummaryBuilder {
        crate::types::builders::M2NonManagedApplicationSummaryBuilder::default()
    }
}

/// A builder for [`M2NonManagedApplicationSummary`](crate::types::M2NonManagedApplicationSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct M2NonManagedApplicationSummaryBuilder {
    pub(crate) vpc_endpoint_service_name: ::std::option::Option<::std::string::String>,
    pub(crate) listener_port: ::std::option::Option<i32>,
    pub(crate) runtime: ::std::option::Option<crate::types::M2NonManagedRuntime>,
    pub(crate) web_app_name: ::std::option::Option<::std::string::String>,
}
impl M2NonManagedApplicationSummaryBuilder {
    /// <p>The VPC endpoint service name of the AWS Mainframe Modernization non-managed application summary.</p>
    /// This field is required.
    pub fn vpc_endpoint_service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_endpoint_service_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The VPC endpoint service name of the AWS Mainframe Modernization non-managed application summary.</p>
    pub fn set_vpc_endpoint_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_endpoint_service_name = input;
        self
    }
    /// <p>The VPC endpoint service name of the AWS Mainframe Modernization non-managed application summary.</p>
    pub fn get_vpc_endpoint_service_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_endpoint_service_name
    }
    /// <p>The listener port of the AWS Mainframe Modernization non-managed application summary.</p>
    /// This field is required.
    pub fn listener_port(mut self, input: i32) -> Self {
        self.listener_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The listener port of the AWS Mainframe Modernization non-managed application summary.</p>
    pub fn set_listener_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.listener_port = input;
        self
    }
    /// <p>The listener port of the AWS Mainframe Modernization non-managed application summary.</p>
    pub fn get_listener_port(&self) -> &::std::option::Option<i32> {
        &self.listener_port
    }
    /// <p>The runtime of the AWS Mainframe Modernization non-managed application summary.</p>
    /// This field is required.
    pub fn runtime(mut self, input: crate::types::M2NonManagedRuntime) -> Self {
        self.runtime = ::std::option::Option::Some(input);
        self
    }
    /// <p>The runtime of the AWS Mainframe Modernization non-managed application summary.</p>
    pub fn set_runtime(mut self, input: ::std::option::Option<crate::types::M2NonManagedRuntime>) -> Self {
        self.runtime = input;
        self
    }
    /// <p>The runtime of the AWS Mainframe Modernization non-managed application summary.</p>
    pub fn get_runtime(&self) -> &::std::option::Option<crate::types::M2NonManagedRuntime> {
        &self.runtime
    }
    /// <p>The web application name of the AWS Mainframe Modernization non-managed application summary.</p>
    pub fn web_app_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.web_app_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The web application name of the AWS Mainframe Modernization non-managed application summary.</p>
    pub fn set_web_app_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.web_app_name = input;
        self
    }
    /// <p>The web application name of the AWS Mainframe Modernization non-managed application summary.</p>
    pub fn get_web_app_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.web_app_name
    }
    /// Consumes the builder and constructs a [`M2NonManagedApplicationSummary`](crate::types::M2NonManagedApplicationSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`vpc_endpoint_service_name`](crate::types::builders::M2NonManagedApplicationSummaryBuilder::vpc_endpoint_service_name)
    /// - [`listener_port`](crate::types::builders::M2NonManagedApplicationSummaryBuilder::listener_port)
    /// - [`runtime`](crate::types::builders::M2NonManagedApplicationSummaryBuilder::runtime)
    pub fn build(self) -> ::std::result::Result<crate::types::M2NonManagedApplicationSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::M2NonManagedApplicationSummary {
            vpc_endpoint_service_name: self.vpc_endpoint_service_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "vpc_endpoint_service_name",
                    "vpc_endpoint_service_name was not specified but it is required when building M2NonManagedApplicationSummary",
                )
            })?,
            listener_port: self.listener_port.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "listener_port",
                    "listener_port was not specified but it is required when building M2NonManagedApplicationSummary",
                )
            })?,
            runtime: self.runtime.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "runtime",
                    "runtime was not specified but it is required when building M2NonManagedApplicationSummary",
                )
            })?,
            web_app_name: self.web_app_name,
        })
    }
}
