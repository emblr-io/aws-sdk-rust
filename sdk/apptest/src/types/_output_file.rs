// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies an output file.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OutputFile {
    /// <p>The file location of the output file.</p>
    pub file_location: ::std::option::Option<::std::string::String>,
}
impl OutputFile {
    /// <p>The file location of the output file.</p>
    pub fn file_location(&self) -> ::std::option::Option<&str> {
        self.file_location.as_deref()
    }
}
impl OutputFile {
    /// Creates a new builder-style object to manufacture [`OutputFile`](crate::types::OutputFile).
    pub fn builder() -> crate::types::builders::OutputFileBuilder {
        crate::types::builders::OutputFileBuilder::default()
    }
}

/// A builder for [`OutputFile`](crate::types::OutputFile).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OutputFileBuilder {
    pub(crate) file_location: ::std::option::Option<::std::string::String>,
}
impl OutputFileBuilder {
    /// <p>The file location of the output file.</p>
    pub fn file_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The file location of the output file.</p>
    pub fn set_file_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_location = input;
        self
    }
    /// <p>The file location of the output file.</p>
    pub fn get_file_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_location
    }
    /// Consumes the builder and constructs a [`OutputFile`](crate::types::OutputFile).
    pub fn build(self) -> crate::types::OutputFile {
        crate::types::OutputFile {
            file_location: self.file_location,
        }
    }
}
