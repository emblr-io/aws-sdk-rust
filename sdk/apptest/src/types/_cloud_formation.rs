// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the CloudFormation template and its parameters.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CloudFormation {
    /// <p>The template location of the CloudFormation template.</p>
    pub template_location: ::std::string::String,
    /// <p>The CloudFormation properties in the CloudFormation template.</p>
    pub parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CloudFormation {
    /// <p>The template location of the CloudFormation template.</p>
    pub fn template_location(&self) -> &str {
        use std::ops::Deref;
        self.template_location.deref()
    }
    /// <p>The CloudFormation properties in the CloudFormation template.</p>
    pub fn parameters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.parameters.as_ref()
    }
}
impl CloudFormation {
    /// Creates a new builder-style object to manufacture [`CloudFormation`](crate::types::CloudFormation).
    pub fn builder() -> crate::types::builders::CloudFormationBuilder {
        crate::types::builders::CloudFormationBuilder::default()
    }
}

/// A builder for [`CloudFormation`](crate::types::CloudFormation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CloudFormationBuilder {
    pub(crate) template_location: ::std::option::Option<::std::string::String>,
    pub(crate) parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CloudFormationBuilder {
    /// <p>The template location of the CloudFormation template.</p>
    /// This field is required.
    pub fn template_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The template location of the CloudFormation template.</p>
    pub fn set_template_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_location = input;
        self
    }
    /// <p>The template location of the CloudFormation template.</p>
    pub fn get_template_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_location
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>The CloudFormation properties in the CloudFormation template.</p>
    pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The CloudFormation properties in the CloudFormation template.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>The CloudFormation properties in the CloudFormation template.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.parameters
    }
    /// Consumes the builder and constructs a [`CloudFormation`](crate::types::CloudFormation).
    /// This method will fail if any of the following fields are not set:
    /// - [`template_location`](crate::types::builders::CloudFormationBuilder::template_location)
    pub fn build(self) -> ::std::result::Result<crate::types::CloudFormation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CloudFormation {
            template_location: self.template_location.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "template_location",
                    "template_location was not specified but it is required when building CloudFormation",
                )
            })?,
            parameters: self.parameters,
        })
    }
}
