// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the compare data sets step input.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CompareDataSetsStepInput {
    /// <p>The source location of the compare data sets step input location.</p>
    pub source_location: ::std::string::String,
    /// <p>The target location of the compare data sets step input location.</p>
    pub target_location: ::std::string::String,
    /// <p>The source data sets of the compare data sets step input location.</p>
    pub source_data_sets: ::std::vec::Vec<crate::types::DataSet>,
    /// <p>The target data sets of the compare data sets step input location.</p>
    pub target_data_sets: ::std::vec::Vec<crate::types::DataSet>,
}
impl CompareDataSetsStepInput {
    /// <p>The source location of the compare data sets step input location.</p>
    pub fn source_location(&self) -> &str {
        use std::ops::Deref;
        self.source_location.deref()
    }
    /// <p>The target location of the compare data sets step input location.</p>
    pub fn target_location(&self) -> &str {
        use std::ops::Deref;
        self.target_location.deref()
    }
    /// <p>The source data sets of the compare data sets step input location.</p>
    pub fn source_data_sets(&self) -> &[crate::types::DataSet] {
        use std::ops::Deref;
        self.source_data_sets.deref()
    }
    /// <p>The target data sets of the compare data sets step input location.</p>
    pub fn target_data_sets(&self) -> &[crate::types::DataSet] {
        use std::ops::Deref;
        self.target_data_sets.deref()
    }
}
impl CompareDataSetsStepInput {
    /// Creates a new builder-style object to manufacture [`CompareDataSetsStepInput`](crate::types::CompareDataSetsStepInput).
    pub fn builder() -> crate::types::builders::CompareDataSetsStepInputBuilder {
        crate::types::builders::CompareDataSetsStepInputBuilder::default()
    }
}

/// A builder for [`CompareDataSetsStepInput`](crate::types::CompareDataSetsStepInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CompareDataSetsStepInputBuilder {
    pub(crate) source_location: ::std::option::Option<::std::string::String>,
    pub(crate) target_location: ::std::option::Option<::std::string::String>,
    pub(crate) source_data_sets: ::std::option::Option<::std::vec::Vec<crate::types::DataSet>>,
    pub(crate) target_data_sets: ::std::option::Option<::std::vec::Vec<crate::types::DataSet>>,
}
impl CompareDataSetsStepInputBuilder {
    /// <p>The source location of the compare data sets step input location.</p>
    /// This field is required.
    pub fn source_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source location of the compare data sets step input location.</p>
    pub fn set_source_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_location = input;
        self
    }
    /// <p>The source location of the compare data sets step input location.</p>
    pub fn get_source_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_location
    }
    /// <p>The target location of the compare data sets step input location.</p>
    /// This field is required.
    pub fn target_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The target location of the compare data sets step input location.</p>
    pub fn set_target_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_location = input;
        self
    }
    /// <p>The target location of the compare data sets step input location.</p>
    pub fn get_target_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_location
    }
    /// Appends an item to `source_data_sets`.
    ///
    /// To override the contents of this collection use [`set_source_data_sets`](Self::set_source_data_sets).
    ///
    /// <p>The source data sets of the compare data sets step input location.</p>
    pub fn source_data_sets(mut self, input: crate::types::DataSet) -> Self {
        let mut v = self.source_data_sets.unwrap_or_default();
        v.push(input);
        self.source_data_sets = ::std::option::Option::Some(v);
        self
    }
    /// <p>The source data sets of the compare data sets step input location.</p>
    pub fn set_source_data_sets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DataSet>>) -> Self {
        self.source_data_sets = input;
        self
    }
    /// <p>The source data sets of the compare data sets step input location.</p>
    pub fn get_source_data_sets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DataSet>> {
        &self.source_data_sets
    }
    /// Appends an item to `target_data_sets`.
    ///
    /// To override the contents of this collection use [`set_target_data_sets`](Self::set_target_data_sets).
    ///
    /// <p>The target data sets of the compare data sets step input location.</p>
    pub fn target_data_sets(mut self, input: crate::types::DataSet) -> Self {
        let mut v = self.target_data_sets.unwrap_or_default();
        v.push(input);
        self.target_data_sets = ::std::option::Option::Some(v);
        self
    }
    /// <p>The target data sets of the compare data sets step input location.</p>
    pub fn set_target_data_sets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DataSet>>) -> Self {
        self.target_data_sets = input;
        self
    }
    /// <p>The target data sets of the compare data sets step input location.</p>
    pub fn get_target_data_sets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DataSet>> {
        &self.target_data_sets
    }
    /// Consumes the builder and constructs a [`CompareDataSetsStepInput`](crate::types::CompareDataSetsStepInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`source_location`](crate::types::builders::CompareDataSetsStepInputBuilder::source_location)
    /// - [`target_location`](crate::types::builders::CompareDataSetsStepInputBuilder::target_location)
    /// - [`source_data_sets`](crate::types::builders::CompareDataSetsStepInputBuilder::source_data_sets)
    /// - [`target_data_sets`](crate::types::builders::CompareDataSetsStepInputBuilder::target_data_sets)
    pub fn build(self) -> ::std::result::Result<crate::types::CompareDataSetsStepInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CompareDataSetsStepInput {
            source_location: self.source_location.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_location",
                    "source_location was not specified but it is required when building CompareDataSetsStepInput",
                )
            })?,
            target_location: self.target_location.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target_location",
                    "target_location was not specified but it is required when building CompareDataSetsStepInput",
                )
            })?,
            source_data_sets: self.source_data_sets.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_data_sets",
                    "source_data_sets was not specified but it is required when building CompareDataSetsStepInput",
                )
            })?,
            target_data_sets: self.target_data_sets.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target_data_sets",
                    "target_data_sets was not specified but it is required when building CompareDataSetsStepInput",
                )
            })?,
        })
    }
}
