// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a test configuration summary.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TestConfigurationSummary {
    /// <p>The test configuration ID of the test configuration summary.</p>
    pub test_configuration_id: ::std::string::String,
    /// <p>The name of the test configuration summary.</p>
    pub name: ::std::string::String,
    /// <p>The status reason of the test configuration summary.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The latest version of the test configuration summary.</p>
    pub latest_version: i32,
    /// <p>The test configuration ARN of the test configuration summary.</p>
    pub test_configuration_arn: ::std::string::String,
    /// <p>The status of the test configuration summary.</p>
    pub status: crate::types::TestConfigurationLifecycle,
    /// <p>The creation time of the test configuration summary.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>The last update time of the test configuration summary.</p>
    pub last_update_time: ::aws_smithy_types::DateTime,
}
impl TestConfigurationSummary {
    /// <p>The test configuration ID of the test configuration summary.</p>
    pub fn test_configuration_id(&self) -> &str {
        use std::ops::Deref;
        self.test_configuration_id.deref()
    }
    /// <p>The name of the test configuration summary.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The status reason of the test configuration summary.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The latest version of the test configuration summary.</p>
    pub fn latest_version(&self) -> i32 {
        self.latest_version
    }
    /// <p>The test configuration ARN of the test configuration summary.</p>
    pub fn test_configuration_arn(&self) -> &str {
        use std::ops::Deref;
        self.test_configuration_arn.deref()
    }
    /// <p>The status of the test configuration summary.</p>
    pub fn status(&self) -> &crate::types::TestConfigurationLifecycle {
        &self.status
    }
    /// <p>The creation time of the test configuration summary.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>The last update time of the test configuration summary.</p>
    pub fn last_update_time(&self) -> &::aws_smithy_types::DateTime {
        &self.last_update_time
    }
}
impl TestConfigurationSummary {
    /// Creates a new builder-style object to manufacture [`TestConfigurationSummary`](crate::types::TestConfigurationSummary).
    pub fn builder() -> crate::types::builders::TestConfigurationSummaryBuilder {
        crate::types::builders::TestConfigurationSummaryBuilder::default()
    }
}

/// A builder for [`TestConfigurationSummary`](crate::types::TestConfigurationSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TestConfigurationSummaryBuilder {
    pub(crate) test_configuration_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) latest_version: ::std::option::Option<i32>,
    pub(crate) test_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::TestConfigurationLifecycle>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl TestConfigurationSummaryBuilder {
    /// <p>The test configuration ID of the test configuration summary.</p>
    /// This field is required.
    pub fn test_configuration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_configuration_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The test configuration ID of the test configuration summary.</p>
    pub fn set_test_configuration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_configuration_id = input;
        self
    }
    /// <p>The test configuration ID of the test configuration summary.</p>
    pub fn get_test_configuration_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_configuration_id
    }
    /// <p>The name of the test configuration summary.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the test configuration summary.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the test configuration summary.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The status reason of the test configuration summary.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status reason of the test configuration summary.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The status reason of the test configuration summary.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The latest version of the test configuration summary.</p>
    /// This field is required.
    pub fn latest_version(mut self, input: i32) -> Self {
        self.latest_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The latest version of the test configuration summary.</p>
    pub fn set_latest_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.latest_version = input;
        self
    }
    /// <p>The latest version of the test configuration summary.</p>
    pub fn get_latest_version(&self) -> &::std::option::Option<i32> {
        &self.latest_version
    }
    /// <p>The test configuration ARN of the test configuration summary.</p>
    /// This field is required.
    pub fn test_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The test configuration ARN of the test configuration summary.</p>
    pub fn set_test_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_configuration_arn = input;
        self
    }
    /// <p>The test configuration ARN of the test configuration summary.</p>
    pub fn get_test_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_configuration_arn
    }
    /// <p>The status of the test configuration summary.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::TestConfigurationLifecycle) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the test configuration summary.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TestConfigurationLifecycle>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the test configuration summary.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TestConfigurationLifecycle> {
        &self.status
    }
    /// <p>The creation time of the test configuration summary.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation time of the test configuration summary.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The creation time of the test configuration summary.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The last update time of the test configuration summary.</p>
    /// This field is required.
    pub fn last_update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last update time of the test configuration summary.</p>
    pub fn set_last_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_update_time = input;
        self
    }
    /// <p>The last update time of the test configuration summary.</p>
    pub fn get_last_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_update_time
    }
    /// Consumes the builder and constructs a [`TestConfigurationSummary`](crate::types::TestConfigurationSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`test_configuration_id`](crate::types::builders::TestConfigurationSummaryBuilder::test_configuration_id)
    /// - [`name`](crate::types::builders::TestConfigurationSummaryBuilder::name)
    /// - [`latest_version`](crate::types::builders::TestConfigurationSummaryBuilder::latest_version)
    /// - [`test_configuration_arn`](crate::types::builders::TestConfigurationSummaryBuilder::test_configuration_arn)
    /// - [`status`](crate::types::builders::TestConfigurationSummaryBuilder::status)
    /// - [`creation_time`](crate::types::builders::TestConfigurationSummaryBuilder::creation_time)
    /// - [`last_update_time`](crate::types::builders::TestConfigurationSummaryBuilder::last_update_time)
    pub fn build(self) -> ::std::result::Result<crate::types::TestConfigurationSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TestConfigurationSummary {
            test_configuration_id: self.test_configuration_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "test_configuration_id",
                    "test_configuration_id was not specified but it is required when building TestConfigurationSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building TestConfigurationSummary",
                )
            })?,
            status_reason: self.status_reason,
            latest_version: self.latest_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "latest_version",
                    "latest_version was not specified but it is required when building TestConfigurationSummary",
                )
            })?,
            test_configuration_arn: self.test_configuration_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "test_configuration_arn",
                    "test_configuration_arn was not specified but it is required when building TestConfigurationSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building TestConfigurationSummary",
                )
            })?,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building TestConfigurationSummary",
                )
            })?,
            last_update_time: self.last_update_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_update_time",
                    "last_update_time was not specified but it is required when building TestConfigurationSummary",
                )
            })?,
        })
    }
}
