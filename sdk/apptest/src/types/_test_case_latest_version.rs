// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the latest version of a test case.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TestCaseLatestVersion {
    /// <p>The version of the test case latest version.</p>
    pub version: i32,
    /// <p>The status of the test case latest version.</p>
    pub status: crate::types::TestCaseLifecycle,
    /// <p>The status reason of the test case latest version.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
}
impl TestCaseLatestVersion {
    /// <p>The version of the test case latest version.</p>
    pub fn version(&self) -> i32 {
        self.version
    }
    /// <p>The status of the test case latest version.</p>
    pub fn status(&self) -> &crate::types::TestCaseLifecycle {
        &self.status
    }
    /// <p>The status reason of the test case latest version.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
}
impl TestCaseLatestVersion {
    /// Creates a new builder-style object to manufacture [`TestCaseLatestVersion`](crate::types::TestCaseLatestVersion).
    pub fn builder() -> crate::types::builders::TestCaseLatestVersionBuilder {
        crate::types::builders::TestCaseLatestVersionBuilder::default()
    }
}

/// A builder for [`TestCaseLatestVersion`](crate::types::TestCaseLatestVersion).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TestCaseLatestVersionBuilder {
    pub(crate) version: ::std::option::Option<i32>,
    pub(crate) status: ::std::option::Option<crate::types::TestCaseLifecycle>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
}
impl TestCaseLatestVersionBuilder {
    /// <p>The version of the test case latest version.</p>
    /// This field is required.
    pub fn version(mut self, input: i32) -> Self {
        self.version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version of the test case latest version.</p>
    pub fn set_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version of the test case latest version.</p>
    pub fn get_version(&self) -> &::std::option::Option<i32> {
        &self.version
    }
    /// <p>The status of the test case latest version.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::TestCaseLifecycle) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the test case latest version.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TestCaseLifecycle>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the test case latest version.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TestCaseLifecycle> {
        &self.status
    }
    /// <p>The status reason of the test case latest version.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status reason of the test case latest version.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The status reason of the test case latest version.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// Consumes the builder and constructs a [`TestCaseLatestVersion`](crate::types::TestCaseLatestVersion).
    /// This method will fail if any of the following fields are not set:
    /// - [`version`](crate::types::builders::TestCaseLatestVersionBuilder::version)
    /// - [`status`](crate::types::builders::TestCaseLatestVersionBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::TestCaseLatestVersion, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TestCaseLatestVersion {
            version: self.version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "version",
                    "version was not specified but it is required when building TestCaseLatestVersion",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building TestCaseLatestVersion",
                )
            })?,
            status_reason: self.status_reason,
        })
    }
}
