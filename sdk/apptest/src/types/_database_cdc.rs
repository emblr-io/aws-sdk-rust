// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the Change Data Capture (CDC) of the database.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DatabaseCdc {
    /// <p>The source metadata of the database CDC.</p>
    pub source_metadata: ::std::option::Option<crate::types::SourceDatabaseMetadata>,
    /// <p>The target metadata of the database CDC.</p>
    pub target_metadata: ::std::option::Option<crate::types::TargetDatabaseMetadata>,
}
impl DatabaseCdc {
    /// <p>The source metadata of the database CDC.</p>
    pub fn source_metadata(&self) -> ::std::option::Option<&crate::types::SourceDatabaseMetadata> {
        self.source_metadata.as_ref()
    }
    /// <p>The target metadata of the database CDC.</p>
    pub fn target_metadata(&self) -> ::std::option::Option<&crate::types::TargetDatabaseMetadata> {
        self.target_metadata.as_ref()
    }
}
impl DatabaseCdc {
    /// Creates a new builder-style object to manufacture [`DatabaseCdc`](crate::types::DatabaseCdc).
    pub fn builder() -> crate::types::builders::DatabaseCdcBuilder {
        crate::types::builders::DatabaseCdcBuilder::default()
    }
}

/// A builder for [`DatabaseCdc`](crate::types::DatabaseCdc).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DatabaseCdcBuilder {
    pub(crate) source_metadata: ::std::option::Option<crate::types::SourceDatabaseMetadata>,
    pub(crate) target_metadata: ::std::option::Option<crate::types::TargetDatabaseMetadata>,
}
impl DatabaseCdcBuilder {
    /// <p>The source metadata of the database CDC.</p>
    /// This field is required.
    pub fn source_metadata(mut self, input: crate::types::SourceDatabaseMetadata) -> Self {
        self.source_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source metadata of the database CDC.</p>
    pub fn set_source_metadata(mut self, input: ::std::option::Option<crate::types::SourceDatabaseMetadata>) -> Self {
        self.source_metadata = input;
        self
    }
    /// <p>The source metadata of the database CDC.</p>
    pub fn get_source_metadata(&self) -> &::std::option::Option<crate::types::SourceDatabaseMetadata> {
        &self.source_metadata
    }
    /// <p>The target metadata of the database CDC.</p>
    /// This field is required.
    pub fn target_metadata(mut self, input: crate::types::TargetDatabaseMetadata) -> Self {
        self.target_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target metadata of the database CDC.</p>
    pub fn set_target_metadata(mut self, input: ::std::option::Option<crate::types::TargetDatabaseMetadata>) -> Self {
        self.target_metadata = input;
        self
    }
    /// <p>The target metadata of the database CDC.</p>
    pub fn get_target_metadata(&self) -> &::std::option::Option<crate::types::TargetDatabaseMetadata> {
        &self.target_metadata
    }
    /// Consumes the builder and constructs a [`DatabaseCdc`](crate::types::DatabaseCdc).
    pub fn build(self) -> crate::types::DatabaseCdc {
        crate::types::DatabaseCdc {
            source_metadata: self.source_metadata,
            target_metadata: self.target_metadata,
        }
    }
}
