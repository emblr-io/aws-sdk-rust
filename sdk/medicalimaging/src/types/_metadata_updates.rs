// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains DICOMUpdates.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum MetadataUpdates {
    /// <p>The object containing <code>removableAttributes</code> and <code>updatableAttributes</code>.</p>
    DicomUpdates(crate::types::DicomUpdates),
    /// <p>Specifies the previous image set version ID to revert the current image set back to.</p><note>
    /// <p>You must provide either <code>revertToVersionId</code> or <code>DICOMUpdates</code> in your request. A <code>ValidationException</code> error is thrown if both parameters are provided at the same time.</p>
    /// </note>
    RevertToVersionId(::std::string::String),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl MetadataUpdates {
    /// Tries to convert the enum instance into [`DicomUpdates`](crate::types::MetadataUpdates::DicomUpdates), extracting the inner [`DicomUpdates`](crate::types::DicomUpdates).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_dicom_updates(&self) -> ::std::result::Result<&crate::types::DicomUpdates, &Self> {
        if let MetadataUpdates::DicomUpdates(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`DicomUpdates`](crate::types::MetadataUpdates::DicomUpdates).
    pub fn is_dicom_updates(&self) -> bool {
        self.as_dicom_updates().is_ok()
    }
    /// Tries to convert the enum instance into [`RevertToVersionId`](crate::types::MetadataUpdates::RevertToVersionId), extracting the inner [`String`](::std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_revert_to_version_id(&self) -> ::std::result::Result<&::std::string::String, &Self> {
        if let MetadataUpdates::RevertToVersionId(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`RevertToVersionId`](crate::types::MetadataUpdates::RevertToVersionId).
    pub fn is_revert_to_version_id(&self) -> bool {
        self.as_revert_to_version_id().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
