// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains copiable <code>Attributes</code> structure and wraps information related to specific copy use cases. For example, when copying subsets.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct MetadataCopies {
    /// <p>The JSON string used to specify a subset of SOP Instances to copy from source to destination image set.</p>
    pub copiable_attributes: ::std::string::String,
}
impl MetadataCopies {
    /// <p>The JSON string used to specify a subset of SOP Instances to copy from source to destination image set.</p>
    pub fn copiable_attributes(&self) -> &str {
        use std::ops::Deref;
        self.copiable_attributes.deref()
    }
}
impl ::std::fmt::Debug for MetadataCopies {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MetadataCopies");
        formatter.field("copiable_attributes", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl MetadataCopies {
    /// Creates a new builder-style object to manufacture [`MetadataCopies`](crate::types::MetadataCopies).
    pub fn builder() -> crate::types::builders::MetadataCopiesBuilder {
        crate::types::builders::MetadataCopiesBuilder::default()
    }
}

/// A builder for [`MetadataCopies`](crate::types::MetadataCopies).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct MetadataCopiesBuilder {
    pub(crate) copiable_attributes: ::std::option::Option<::std::string::String>,
}
impl MetadataCopiesBuilder {
    /// <p>The JSON string used to specify a subset of SOP Instances to copy from source to destination image set.</p>
    /// This field is required.
    pub fn copiable_attributes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.copiable_attributes = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The JSON string used to specify a subset of SOP Instances to copy from source to destination image set.</p>
    pub fn set_copiable_attributes(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.copiable_attributes = input;
        self
    }
    /// <p>The JSON string used to specify a subset of SOP Instances to copy from source to destination image set.</p>
    pub fn get_copiable_attributes(&self) -> &::std::option::Option<::std::string::String> {
        &self.copiable_attributes
    }
    /// Consumes the builder and constructs a [`MetadataCopies`](crate::types::MetadataCopies).
    /// This method will fail if any of the following fields are not set:
    /// - [`copiable_attributes`](crate::types::builders::MetadataCopiesBuilder::copiable_attributes)
    pub fn build(self) -> ::std::result::Result<crate::types::MetadataCopies, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MetadataCopies {
            copiable_attributes: self.copiable_attributes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "copiable_attributes",
                    "copiable_attributes was not specified but it is required when building MetadataCopies",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for MetadataCopiesBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MetadataCopiesBuilder");
        formatter.field("copiable_attributes", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
