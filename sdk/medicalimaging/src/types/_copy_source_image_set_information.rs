// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Copy source image set information.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CopySourceImageSetInformation {
    /// <p>The latest version identifier for the source image set.</p>
    pub latest_version_id: ::std::string::String,
    /// <p>Contains <code>MetadataCopies</code> structure and wraps information related to specific copy use cases. For example, when copying subsets.</p>
    pub dicom_copies: ::std::option::Option<crate::types::MetadataCopies>,
}
impl CopySourceImageSetInformation {
    /// <p>The latest version identifier for the source image set.</p>
    pub fn latest_version_id(&self) -> &str {
        use std::ops::Deref;
        self.latest_version_id.deref()
    }
    /// <p>Contains <code>MetadataCopies</code> structure and wraps information related to specific copy use cases. For example, when copying subsets.</p>
    pub fn dicom_copies(&self) -> ::std::option::Option<&crate::types::MetadataCopies> {
        self.dicom_copies.as_ref()
    }
}
impl CopySourceImageSetInformation {
    /// Creates a new builder-style object to manufacture [`CopySourceImageSetInformation`](crate::types::CopySourceImageSetInformation).
    pub fn builder() -> crate::types::builders::CopySourceImageSetInformationBuilder {
        crate::types::builders::CopySourceImageSetInformationBuilder::default()
    }
}

/// A builder for [`CopySourceImageSetInformation`](crate::types::CopySourceImageSetInformation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CopySourceImageSetInformationBuilder {
    pub(crate) latest_version_id: ::std::option::Option<::std::string::String>,
    pub(crate) dicom_copies: ::std::option::Option<crate::types::MetadataCopies>,
}
impl CopySourceImageSetInformationBuilder {
    /// <p>The latest version identifier for the source image set.</p>
    /// This field is required.
    pub fn latest_version_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.latest_version_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The latest version identifier for the source image set.</p>
    pub fn set_latest_version_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.latest_version_id = input;
        self
    }
    /// <p>The latest version identifier for the source image set.</p>
    pub fn get_latest_version_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.latest_version_id
    }
    /// <p>Contains <code>MetadataCopies</code> structure and wraps information related to specific copy use cases. For example, when copying subsets.</p>
    pub fn dicom_copies(mut self, input: crate::types::MetadataCopies) -> Self {
        self.dicom_copies = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains <code>MetadataCopies</code> structure and wraps information related to specific copy use cases. For example, when copying subsets.</p>
    pub fn set_dicom_copies(mut self, input: ::std::option::Option<crate::types::MetadataCopies>) -> Self {
        self.dicom_copies = input;
        self
    }
    /// <p>Contains <code>MetadataCopies</code> structure and wraps information related to specific copy use cases. For example, when copying subsets.</p>
    pub fn get_dicom_copies(&self) -> &::std::option::Option<crate::types::MetadataCopies> {
        &self.dicom_copies
    }
    /// Consumes the builder and constructs a [`CopySourceImageSetInformation`](crate::types::CopySourceImageSetInformation).
    /// This method will fail if any of the following fields are not set:
    /// - [`latest_version_id`](crate::types::builders::CopySourceImageSetInformationBuilder::latest_version_id)
    pub fn build(self) -> ::std::result::Result<crate::types::CopySourceImageSetInformation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CopySourceImageSetInformation {
            latest_version_id: self.latest_version_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "latest_version_id",
                    "latest_version_id was not specified but it is required when building CopySourceImageSetInformation",
                )
            })?,
            dicom_copies: self.dicom_copies,
        })
    }
}
