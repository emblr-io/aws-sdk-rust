// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The search criteria.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SearchCriteria {
    /// <p>The filters for the search criteria.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::SearchFilter>>,
    /// <p>The sort input for search criteria.</p>
    pub sort: ::std::option::Option<crate::types::Sort>,
}
impl SearchCriteria {
    /// <p>The filters for the search criteria.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::SearchFilter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>The sort input for search criteria.</p>
    pub fn sort(&self) -> ::std::option::Option<&crate::types::Sort> {
        self.sort.as_ref()
    }
}
impl ::std::fmt::Debug for SearchCriteria {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SearchCriteria");
        formatter.field("filters", &"*** Sensitive Data Redacted ***");
        formatter.field("sort", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl SearchCriteria {
    /// Creates a new builder-style object to manufacture [`SearchCriteria`](crate::types::SearchCriteria).
    pub fn builder() -> crate::types::builders::SearchCriteriaBuilder {
        crate::types::builders::SearchCriteriaBuilder::default()
    }
}

/// A builder for [`SearchCriteria`](crate::types::SearchCriteria).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct SearchCriteriaBuilder {
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::SearchFilter>>,
    pub(crate) sort: ::std::option::Option<crate::types::Sort>,
}
impl SearchCriteriaBuilder {
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filters for the search criteria.</p>
    pub fn filters(mut self, input: crate::types::SearchFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The filters for the search criteria.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SearchFilter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>The filters for the search criteria.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SearchFilter>> {
        &self.filters
    }
    /// <p>The sort input for search criteria.</p>
    pub fn sort(mut self, input: crate::types::Sort) -> Self {
        self.sort = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sort input for search criteria.</p>
    pub fn set_sort(mut self, input: ::std::option::Option<crate::types::Sort>) -> Self {
        self.sort = input;
        self
    }
    /// <p>The sort input for search criteria.</p>
    pub fn get_sort(&self) -> &::std::option::Option<crate::types::Sort> {
        &self.sort
    }
    /// Consumes the builder and constructs a [`SearchCriteria`](crate::types::SearchCriteria).
    pub fn build(self) -> crate::types::SearchCriteria {
        crate::types::SearchCriteria {
            filters: self.filters,
            sort: self.sort,
        }
    }
}
impl ::std::fmt::Debug for SearchCriteriaBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SearchCriteriaBuilder");
        formatter.field("filters", &"*** Sensitive Data Redacted ***");
        formatter.field("sort", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
