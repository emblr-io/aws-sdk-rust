// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetSpritesInput {
    /// <p><code>Sprites</code> API: The name of the sprite ﬁle to retrieve, following pattern <code>sprites(@2x)?\.(png|json)</code>.</p>
    /// <p>Example: <code>sprites.png</code></p>
    pub file_name: ::std::option::Option<::std::string::String>,
    /// <p>Style specifies the desired map style for the <code>Sprites</code> APIs.</p>
    pub style: ::std::option::Option<crate::types::MapStyle>,
    /// <p>Sets color tone for map such as dark and light for specific map styles. It applies to only vector map styles such as Standard and Monochrome.</p>
    /// <p>Example: <code>Light</code></p>
    /// <p>Default value: <code>Light</code></p><note>
    /// <p>Valid values for ColorScheme are case sensitive.</p>
    /// </note>
    pub color_scheme: ::std::option::Option<crate::types::ColorScheme>,
    /// <p>Optimizes map styles for specific use case or industry. You can choose allowed variant only with Standard map style.</p>
    /// <p>Example: <code>Default</code></p><note>
    /// <p>Valid values for Variant are case sensitive.</p>
    /// </note>
    pub variant: ::std::option::Option<crate::types::Variant>,
}
impl GetSpritesInput {
    /// <p><code>Sprites</code> API: The name of the sprite ﬁle to retrieve, following pattern <code>sprites(@2x)?\.(png|json)</code>.</p>
    /// <p>Example: <code>sprites.png</code></p>
    pub fn file_name(&self) -> ::std::option::Option<&str> {
        self.file_name.as_deref()
    }
    /// <p>Style specifies the desired map style for the <code>Sprites</code> APIs.</p>
    pub fn style(&self) -> ::std::option::Option<&crate::types::MapStyle> {
        self.style.as_ref()
    }
    /// <p>Sets color tone for map such as dark and light for specific map styles. It applies to only vector map styles such as Standard and Monochrome.</p>
    /// <p>Example: <code>Light</code></p>
    /// <p>Default value: <code>Light</code></p><note>
    /// <p>Valid values for ColorScheme are case sensitive.</p>
    /// </note>
    pub fn color_scheme(&self) -> ::std::option::Option<&crate::types::ColorScheme> {
        self.color_scheme.as_ref()
    }
    /// <p>Optimizes map styles for specific use case or industry. You can choose allowed variant only with Standard map style.</p>
    /// <p>Example: <code>Default</code></p><note>
    /// <p>Valid values for Variant are case sensitive.</p>
    /// </note>
    pub fn variant(&self) -> ::std::option::Option<&crate::types::Variant> {
        self.variant.as_ref()
    }
}
impl GetSpritesInput {
    /// Creates a new builder-style object to manufacture [`GetSpritesInput`](crate::operation::get_sprites::GetSpritesInput).
    pub fn builder() -> crate::operation::get_sprites::builders::GetSpritesInputBuilder {
        crate::operation::get_sprites::builders::GetSpritesInputBuilder::default()
    }
}

/// A builder for [`GetSpritesInput`](crate::operation::get_sprites::GetSpritesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetSpritesInputBuilder {
    pub(crate) file_name: ::std::option::Option<::std::string::String>,
    pub(crate) style: ::std::option::Option<crate::types::MapStyle>,
    pub(crate) color_scheme: ::std::option::Option<crate::types::ColorScheme>,
    pub(crate) variant: ::std::option::Option<crate::types::Variant>,
}
impl GetSpritesInputBuilder {
    /// <p><code>Sprites</code> API: The name of the sprite ﬁle to retrieve, following pattern <code>sprites(@2x)?\.(png|json)</code>.</p>
    /// <p>Example: <code>sprites.png</code></p>
    /// This field is required.
    pub fn file_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p><code>Sprites</code> API: The name of the sprite ﬁle to retrieve, following pattern <code>sprites(@2x)?\.(png|json)</code>.</p>
    /// <p>Example: <code>sprites.png</code></p>
    pub fn set_file_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_name = input;
        self
    }
    /// <p><code>Sprites</code> API: The name of the sprite ﬁle to retrieve, following pattern <code>sprites(@2x)?\.(png|json)</code>.</p>
    /// <p>Example: <code>sprites.png</code></p>
    pub fn get_file_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_name
    }
    /// <p>Style specifies the desired map style for the <code>Sprites</code> APIs.</p>
    /// This field is required.
    pub fn style(mut self, input: crate::types::MapStyle) -> Self {
        self.style = ::std::option::Option::Some(input);
        self
    }
    /// <p>Style specifies the desired map style for the <code>Sprites</code> APIs.</p>
    pub fn set_style(mut self, input: ::std::option::Option<crate::types::MapStyle>) -> Self {
        self.style = input;
        self
    }
    /// <p>Style specifies the desired map style for the <code>Sprites</code> APIs.</p>
    pub fn get_style(&self) -> &::std::option::Option<crate::types::MapStyle> {
        &self.style
    }
    /// <p>Sets color tone for map such as dark and light for specific map styles. It applies to only vector map styles such as Standard and Monochrome.</p>
    /// <p>Example: <code>Light</code></p>
    /// <p>Default value: <code>Light</code></p><note>
    /// <p>Valid values for ColorScheme are case sensitive.</p>
    /// </note>
    /// This field is required.
    pub fn color_scheme(mut self, input: crate::types::ColorScheme) -> Self {
        self.color_scheme = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sets color tone for map such as dark and light for specific map styles. It applies to only vector map styles such as Standard and Monochrome.</p>
    /// <p>Example: <code>Light</code></p>
    /// <p>Default value: <code>Light</code></p><note>
    /// <p>Valid values for ColorScheme are case sensitive.</p>
    /// </note>
    pub fn set_color_scheme(mut self, input: ::std::option::Option<crate::types::ColorScheme>) -> Self {
        self.color_scheme = input;
        self
    }
    /// <p>Sets color tone for map such as dark and light for specific map styles. It applies to only vector map styles such as Standard and Monochrome.</p>
    /// <p>Example: <code>Light</code></p>
    /// <p>Default value: <code>Light</code></p><note>
    /// <p>Valid values for ColorScheme are case sensitive.</p>
    /// </note>
    pub fn get_color_scheme(&self) -> &::std::option::Option<crate::types::ColorScheme> {
        &self.color_scheme
    }
    /// <p>Optimizes map styles for specific use case or industry. You can choose allowed variant only with Standard map style.</p>
    /// <p>Example: <code>Default</code></p><note>
    /// <p>Valid values for Variant are case sensitive.</p>
    /// </note>
    /// This field is required.
    pub fn variant(mut self, input: crate::types::Variant) -> Self {
        self.variant = ::std::option::Option::Some(input);
        self
    }
    /// <p>Optimizes map styles for specific use case or industry. You can choose allowed variant only with Standard map style.</p>
    /// <p>Example: <code>Default</code></p><note>
    /// <p>Valid values for Variant are case sensitive.</p>
    /// </note>
    pub fn set_variant(mut self, input: ::std::option::Option<crate::types::Variant>) -> Self {
        self.variant = input;
        self
    }
    /// <p>Optimizes map styles for specific use case or industry. You can choose allowed variant only with Standard map style.</p>
    /// <p>Example: <code>Default</code></p><note>
    /// <p>Valid values for Variant are case sensitive.</p>
    /// </note>
    pub fn get_variant(&self) -> &::std::option::Option<crate::types::Variant> {
        &self.variant
    }
    /// Consumes the builder and constructs a [`GetSpritesInput`](crate::operation::get_sprites::GetSpritesInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::get_sprites::GetSpritesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_sprites::GetSpritesInput {
            file_name: self.file_name,
            style: self.style,
            color_scheme: self.color_scheme,
            variant: self.variant,
        })
    }
}
