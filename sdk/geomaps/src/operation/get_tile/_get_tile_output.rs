// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTileOutput {
    /// <p>The blob represents a vector tile in <code>mvt</code> or a raster tile in an image format.</p>
    pub blob: ::std::option::Option<::aws_smithy_types::Blob>,
    /// <p>Header that represents the format of the response. The response returns the following as the HTTP body.</p>
    pub content_type: ::std::option::Option<::std::string::String>,
    /// <p>Header that instructs caching configuration for the client.</p>
    pub cache_control: ::std::option::Option<::std::string::String>,
    /// <p>The pricing bucket for which the request is charged at.</p>
    pub e_tag: ::std::option::Option<::std::string::String>,
    /// <p>The pricing bucket for which the request is charged at.</p>
    pub pricing_bucket: ::std::string::String,
    _request_id: Option<String>,
}
impl GetTileOutput {
    /// <p>The blob represents a vector tile in <code>mvt</code> or a raster tile in an image format.</p>
    pub fn blob(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.blob.as_ref()
    }
    /// <p>Header that represents the format of the response. The response returns the following as the HTTP body.</p>
    pub fn content_type(&self) -> ::std::option::Option<&str> {
        self.content_type.as_deref()
    }
    /// <p>Header that instructs caching configuration for the client.</p>
    pub fn cache_control(&self) -> ::std::option::Option<&str> {
        self.cache_control.as_deref()
    }
    /// <p>The pricing bucket for which the request is charged at.</p>
    pub fn e_tag(&self) -> ::std::option::Option<&str> {
        self.e_tag.as_deref()
    }
    /// <p>The pricing bucket for which the request is charged at.</p>
    pub fn pricing_bucket(&self) -> &str {
        use std::ops::Deref;
        self.pricing_bucket.deref()
    }
}
impl ::aws_types::request_id::RequestId for GetTileOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTileOutput {
    /// Creates a new builder-style object to manufacture [`GetTileOutput`](crate::operation::get_tile::GetTileOutput).
    pub fn builder() -> crate::operation::get_tile::builders::GetTileOutputBuilder {
        crate::operation::get_tile::builders::GetTileOutputBuilder::default()
    }
}

/// A builder for [`GetTileOutput`](crate::operation::get_tile::GetTileOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetTileOutputBuilder {
    pub(crate) blob: ::std::option::Option<::aws_smithy_types::Blob>,
    pub(crate) content_type: ::std::option::Option<::std::string::String>,
    pub(crate) cache_control: ::std::option::Option<::std::string::String>,
    pub(crate) e_tag: ::std::option::Option<::std::string::String>,
    pub(crate) pricing_bucket: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetTileOutputBuilder {
    /// <p>The blob represents a vector tile in <code>mvt</code> or a raster tile in an image format.</p>
    pub fn blob(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.blob = ::std::option::Option::Some(input);
        self
    }
    /// <p>The blob represents a vector tile in <code>mvt</code> or a raster tile in an image format.</p>
    pub fn set_blob(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.blob = input;
        self
    }
    /// <p>The blob represents a vector tile in <code>mvt</code> or a raster tile in an image format.</p>
    pub fn get_blob(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.blob
    }
    /// <p>Header that represents the format of the response. The response returns the following as the HTTP body.</p>
    pub fn content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Header that represents the format of the response. The response returns the following as the HTTP body.</p>
    pub fn set_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>Header that represents the format of the response. The response returns the following as the HTTP body.</p>
    pub fn get_content_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_type
    }
    /// <p>Header that instructs caching configuration for the client.</p>
    pub fn cache_control(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cache_control = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Header that instructs caching configuration for the client.</p>
    pub fn set_cache_control(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cache_control = input;
        self
    }
    /// <p>Header that instructs caching configuration for the client.</p>
    pub fn get_cache_control(&self) -> &::std::option::Option<::std::string::String> {
        &self.cache_control
    }
    /// <p>The pricing bucket for which the request is charged at.</p>
    pub fn e_tag(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.e_tag = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pricing bucket for which the request is charged at.</p>
    pub fn set_e_tag(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.e_tag = input;
        self
    }
    /// <p>The pricing bucket for which the request is charged at.</p>
    pub fn get_e_tag(&self) -> &::std::option::Option<::std::string::String> {
        &self.e_tag
    }
    /// <p>The pricing bucket for which the request is charged at.</p>
    /// This field is required.
    pub fn pricing_bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pricing_bucket = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pricing bucket for which the request is charged at.</p>
    pub fn set_pricing_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pricing_bucket = input;
        self
    }
    /// <p>The pricing bucket for which the request is charged at.</p>
    pub fn get_pricing_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.pricing_bucket
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetTileOutput`](crate::operation::get_tile::GetTileOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`pricing_bucket`](crate::operation::get_tile::builders::GetTileOutputBuilder::pricing_bucket)
    pub fn build(self) -> ::std::result::Result<crate::operation::get_tile::GetTileOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_tile::GetTileOutput {
            blob: self.blob,
            content_type: self.content_type,
            cache_control: self.cache_control,
            e_tag: self.e_tag,
            pricing_bucket: self.pricing_bucket.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "pricing_bucket",
                    "pricing_bucket was not specified but it is required when building GetTileOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
