// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListResourceTelemetryInput {
    /// <p>A string used to filter resources which have a <code>ResourceIdentifier</code> starting with the <code>ResourceIdentifierPrefix</code>.</p>
    pub resource_identifier_prefix: ::std::option::Option<::std::string::String>,
    /// <p>A list of resource types used to filter resources supported by telemetry config. If this parameter is provided, the resources will be returned in the same order used in the request.</p>
    pub resource_types: ::std::option::Option<::std::vec::Vec<crate::types::ResourceType>>,
    /// <p>A key-value pair to filter resources based on the telemetry type and the state of the telemetry configuration. The key is the telemetry type and the value is the state.</p>
    pub telemetry_configuration_state: ::std::option::Option<::std::collections::HashMap<crate::types::TelemetryType, crate::types::TelemetryState>>,
    /// <p>A key-value pair to filter resources based on tags associated with the resource. For more information about tags, see <a href="https://docs.aws.amazon.com/whitepapers/latest/tagging-best-practices/what-are-tags.html">What are tags?</a></p>
    pub resource_tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>A number field used to limit the number of results within the returned list.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The token for the next set of items to return. A previous call generates this token.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListResourceTelemetryInput {
    /// <p>A string used to filter resources which have a <code>ResourceIdentifier</code> starting with the <code>ResourceIdentifierPrefix</code>.</p>
    pub fn resource_identifier_prefix(&self) -> ::std::option::Option<&str> {
        self.resource_identifier_prefix.as_deref()
    }
    /// <p>A list of resource types used to filter resources supported by telemetry config. If this parameter is provided, the resources will be returned in the same order used in the request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_types.is_none()`.
    pub fn resource_types(&self) -> &[crate::types::ResourceType] {
        self.resource_types.as_deref().unwrap_or_default()
    }
    /// <p>A key-value pair to filter resources based on the telemetry type and the state of the telemetry configuration. The key is the telemetry type and the value is the state.</p>
    pub fn telemetry_configuration_state(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<crate::types::TelemetryType, crate::types::TelemetryState>> {
        self.telemetry_configuration_state.as_ref()
    }
    /// <p>A key-value pair to filter resources based on tags associated with the resource. For more information about tags, see <a href="https://docs.aws.amazon.com/whitepapers/latest/tagging-best-practices/what-are-tags.html">What are tags?</a></p>
    pub fn resource_tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.resource_tags.as_ref()
    }
    /// <p>A number field used to limit the number of results within the returned list.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token for the next set of items to return. A previous call generates this token.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListResourceTelemetryInput {
    /// Creates a new builder-style object to manufacture [`ListResourceTelemetryInput`](crate::operation::list_resource_telemetry::ListResourceTelemetryInput).
    pub fn builder() -> crate::operation::list_resource_telemetry::builders::ListResourceTelemetryInputBuilder {
        crate::operation::list_resource_telemetry::builders::ListResourceTelemetryInputBuilder::default()
    }
}

/// A builder for [`ListResourceTelemetryInput`](crate::operation::list_resource_telemetry::ListResourceTelemetryInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListResourceTelemetryInputBuilder {
    pub(crate) resource_identifier_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) resource_types: ::std::option::Option<::std::vec::Vec<crate::types::ResourceType>>,
    pub(crate) telemetry_configuration_state:
        ::std::option::Option<::std::collections::HashMap<crate::types::TelemetryType, crate::types::TelemetryState>>,
    pub(crate) resource_tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListResourceTelemetryInputBuilder {
    /// <p>A string used to filter resources which have a <code>ResourceIdentifier</code> starting with the <code>ResourceIdentifierPrefix</code>.</p>
    pub fn resource_identifier_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_identifier_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string used to filter resources which have a <code>ResourceIdentifier</code> starting with the <code>ResourceIdentifierPrefix</code>.</p>
    pub fn set_resource_identifier_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_identifier_prefix = input;
        self
    }
    /// <p>A string used to filter resources which have a <code>ResourceIdentifier</code> starting with the <code>ResourceIdentifierPrefix</code>.</p>
    pub fn get_resource_identifier_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_identifier_prefix
    }
    /// Appends an item to `resource_types`.
    ///
    /// To override the contents of this collection use [`set_resource_types`](Self::set_resource_types).
    ///
    /// <p>A list of resource types used to filter resources supported by telemetry config. If this parameter is provided, the resources will be returned in the same order used in the request.</p>
    pub fn resource_types(mut self, input: crate::types::ResourceType) -> Self {
        let mut v = self.resource_types.unwrap_or_default();
        v.push(input);
        self.resource_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of resource types used to filter resources supported by telemetry config. If this parameter is provided, the resources will be returned in the same order used in the request.</p>
    pub fn set_resource_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourceType>>) -> Self {
        self.resource_types = input;
        self
    }
    /// <p>A list of resource types used to filter resources supported by telemetry config. If this parameter is provided, the resources will be returned in the same order used in the request.</p>
    pub fn get_resource_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourceType>> {
        &self.resource_types
    }
    /// Adds a key-value pair to `telemetry_configuration_state`.
    ///
    /// To override the contents of this collection use [`set_telemetry_configuration_state`](Self::set_telemetry_configuration_state).
    ///
    /// <p>A key-value pair to filter resources based on the telemetry type and the state of the telemetry configuration. The key is the telemetry type and the value is the state.</p>
    pub fn telemetry_configuration_state(mut self, k: crate::types::TelemetryType, v: crate::types::TelemetryState) -> Self {
        let mut hash_map = self.telemetry_configuration_state.unwrap_or_default();
        hash_map.insert(k, v);
        self.telemetry_configuration_state = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A key-value pair to filter resources based on the telemetry type and the state of the telemetry configuration. The key is the telemetry type and the value is the state.</p>
    pub fn set_telemetry_configuration_state(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::TelemetryType, crate::types::TelemetryState>>,
    ) -> Self {
        self.telemetry_configuration_state = input;
        self
    }
    /// <p>A key-value pair to filter resources based on the telemetry type and the state of the telemetry configuration. The key is the telemetry type and the value is the state.</p>
    pub fn get_telemetry_configuration_state(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<crate::types::TelemetryType, crate::types::TelemetryState>> {
        &self.telemetry_configuration_state
    }
    /// Adds a key-value pair to `resource_tags`.
    ///
    /// To override the contents of this collection use [`set_resource_tags`](Self::set_resource_tags).
    ///
    /// <p>A key-value pair to filter resources based on tags associated with the resource. For more information about tags, see <a href="https://docs.aws.amazon.com/whitepapers/latest/tagging-best-practices/what-are-tags.html">What are tags?</a></p>
    pub fn resource_tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.resource_tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.resource_tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A key-value pair to filter resources based on tags associated with the resource. For more information about tags, see <a href="https://docs.aws.amazon.com/whitepapers/latest/tagging-best-practices/what-are-tags.html">What are tags?</a></p>
    pub fn set_resource_tags(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.resource_tags = input;
        self
    }
    /// <p>A key-value pair to filter resources based on tags associated with the resource. For more information about tags, see <a href="https://docs.aws.amazon.com/whitepapers/latest/tagging-best-practices/what-are-tags.html">What are tags?</a></p>
    pub fn get_resource_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.resource_tags
    }
    /// <p>A number field used to limit the number of results within the returned list.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>A number field used to limit the number of results within the returned list.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>A number field used to limit the number of results within the returned list.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The token for the next set of items to return. A previous call generates this token.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next set of items to return. A previous call generates this token.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next set of items to return. A previous call generates this token.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListResourceTelemetryInput`](crate::operation::list_resource_telemetry::ListResourceTelemetryInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_resource_telemetry::ListResourceTelemetryInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_resource_telemetry::ListResourceTelemetryInput {
            resource_identifier_prefix: self.resource_identifier_prefix,
            resource_types: self.resource_types,
            telemetry_configuration_state: self.telemetry_configuration_state,
            resource_tags: self.resource_tags,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
