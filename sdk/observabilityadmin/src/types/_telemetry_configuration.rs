// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A model representing the state of a resource within an account according to telemetry config.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TelemetryConfiguration {
    /// <p>The account ID which contains the resource managed in telemetry configuration. An example of a valid account ID is <code>012345678901</code>.</p>
    pub account_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The configuration state for the resource, for example <code>{ Logs: NotApplicable; Metrics: Enabled; Traces: NotApplicable; }</code>.</p>
    pub telemetry_configuration_state: ::std::option::Option<::std::collections::HashMap<crate::types::TelemetryType, crate::types::TelemetryState>>,
    /// <p>The type of resource, for example <code>AWS::EC2::Instance</code>.</p>
    pub resource_type: ::std::option::Option<crate::types::ResourceType>,
    /// <p>The identifier of the resource, for example <code>i-0b22a22eec53b9321</code>.</p>
    pub resource_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Tags associated with the resource, for example <code>{ Name: "ExampleInstance", Environment: "Development" }</code>.</p>
    pub resource_tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The timestamp of the last change to the telemetry configuration for the resource. For example, <code>1728679196318</code>.</p>
    pub last_update_time_stamp: ::std::option::Option<i64>,
}
impl TelemetryConfiguration {
    /// <p>The account ID which contains the resource managed in telemetry configuration. An example of a valid account ID is <code>012345678901</code>.</p>
    pub fn account_identifier(&self) -> ::std::option::Option<&str> {
        self.account_identifier.as_deref()
    }
    /// <p>The configuration state for the resource, for example <code>{ Logs: NotApplicable; Metrics: Enabled; Traces: NotApplicable; }</code>.</p>
    pub fn telemetry_configuration_state(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<crate::types::TelemetryType, crate::types::TelemetryState>> {
        self.telemetry_configuration_state.as_ref()
    }
    /// <p>The type of resource, for example <code>AWS::EC2::Instance</code>.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The identifier of the resource, for example <code>i-0b22a22eec53b9321</code>.</p>
    pub fn resource_identifier(&self) -> ::std::option::Option<&str> {
        self.resource_identifier.as_deref()
    }
    /// <p>Tags associated with the resource, for example <code>{ Name: "ExampleInstance", Environment: "Development" }</code>.</p>
    pub fn resource_tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.resource_tags.as_ref()
    }
    /// <p>The timestamp of the last change to the telemetry configuration for the resource. For example, <code>1728679196318</code>.</p>
    pub fn last_update_time_stamp(&self) -> ::std::option::Option<i64> {
        self.last_update_time_stamp
    }
}
impl TelemetryConfiguration {
    /// Creates a new builder-style object to manufacture [`TelemetryConfiguration`](crate::types::TelemetryConfiguration).
    pub fn builder() -> crate::types::builders::TelemetryConfigurationBuilder {
        crate::types::builders::TelemetryConfigurationBuilder::default()
    }
}

/// A builder for [`TelemetryConfiguration`](crate::types::TelemetryConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TelemetryConfigurationBuilder {
    pub(crate) account_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) telemetry_configuration_state:
        ::std::option::Option<::std::collections::HashMap<crate::types::TelemetryType, crate::types::TelemetryState>>,
    pub(crate) resource_type: ::std::option::Option<crate::types::ResourceType>,
    pub(crate) resource_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) resource_tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) last_update_time_stamp: ::std::option::Option<i64>,
}
impl TelemetryConfigurationBuilder {
    /// <p>The account ID which contains the resource managed in telemetry configuration. An example of a valid account ID is <code>012345678901</code>.</p>
    pub fn account_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account ID which contains the resource managed in telemetry configuration. An example of a valid account ID is <code>012345678901</code>.</p>
    pub fn set_account_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_identifier = input;
        self
    }
    /// <p>The account ID which contains the resource managed in telemetry configuration. An example of a valid account ID is <code>012345678901</code>.</p>
    pub fn get_account_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_identifier
    }
    /// Adds a key-value pair to `telemetry_configuration_state`.
    ///
    /// To override the contents of this collection use [`set_telemetry_configuration_state`](Self::set_telemetry_configuration_state).
    ///
    /// <p>The configuration state for the resource, for example <code>{ Logs: NotApplicable; Metrics: Enabled; Traces: NotApplicable; }</code>.</p>
    pub fn telemetry_configuration_state(mut self, k: crate::types::TelemetryType, v: crate::types::TelemetryState) -> Self {
        let mut hash_map = self.telemetry_configuration_state.unwrap_or_default();
        hash_map.insert(k, v);
        self.telemetry_configuration_state = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The configuration state for the resource, for example <code>{ Logs: NotApplicable; Metrics: Enabled; Traces: NotApplicable; }</code>.</p>
    pub fn set_telemetry_configuration_state(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::TelemetryType, crate::types::TelemetryState>>,
    ) -> Self {
        self.telemetry_configuration_state = input;
        self
    }
    /// <p>The configuration state for the resource, for example <code>{ Logs: NotApplicable; Metrics: Enabled; Traces: NotApplicable; }</code>.</p>
    pub fn get_telemetry_configuration_state(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<crate::types::TelemetryType, crate::types::TelemetryState>> {
        &self.telemetry_configuration_state
    }
    /// <p>The type of resource, for example <code>AWS::EC2::Instance</code>.</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of resource, for example <code>AWS::EC2::Instance</code>.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::ResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of resource, for example <code>AWS::EC2::Instance</code>.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::ResourceType> {
        &self.resource_type
    }
    /// <p>The identifier of the resource, for example <code>i-0b22a22eec53b9321</code>.</p>
    pub fn resource_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the resource, for example <code>i-0b22a22eec53b9321</code>.</p>
    pub fn set_resource_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_identifier = input;
        self
    }
    /// <p>The identifier of the resource, for example <code>i-0b22a22eec53b9321</code>.</p>
    pub fn get_resource_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_identifier
    }
    /// Adds a key-value pair to `resource_tags`.
    ///
    /// To override the contents of this collection use [`set_resource_tags`](Self::set_resource_tags).
    ///
    /// <p>Tags associated with the resource, for example <code>{ Name: "ExampleInstance", Environment: "Development" }</code>.</p>
    pub fn resource_tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.resource_tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.resource_tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Tags associated with the resource, for example <code>{ Name: "ExampleInstance", Environment: "Development" }</code>.</p>
    pub fn set_resource_tags(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.resource_tags = input;
        self
    }
    /// <p>Tags associated with the resource, for example <code>{ Name: "ExampleInstance", Environment: "Development" }</code>.</p>
    pub fn get_resource_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.resource_tags
    }
    /// <p>The timestamp of the last change to the telemetry configuration for the resource. For example, <code>1728679196318</code>.</p>
    pub fn last_update_time_stamp(mut self, input: i64) -> Self {
        self.last_update_time_stamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of the last change to the telemetry configuration for the resource. For example, <code>1728679196318</code>.</p>
    pub fn set_last_update_time_stamp(mut self, input: ::std::option::Option<i64>) -> Self {
        self.last_update_time_stamp = input;
        self
    }
    /// <p>The timestamp of the last change to the telemetry configuration for the resource. For example, <code>1728679196318</code>.</p>
    pub fn get_last_update_time_stamp(&self) -> &::std::option::Option<i64> {
        &self.last_update_time_stamp
    }
    /// Consumes the builder and constructs a [`TelemetryConfiguration`](crate::types::TelemetryConfiguration).
    pub fn build(self) -> crate::types::TelemetryConfiguration {
        crate::types::TelemetryConfiguration {
            account_identifier: self.account_identifier,
            telemetry_configuration_state: self.telemetry_configuration_state,
            resource_type: self.resource_type,
            resource_identifier: self.resource_identifier,
            resource_tags: self.resource_tags,
            last_update_time_stamp: self.last_update_time_stamp,
        }
    }
}
