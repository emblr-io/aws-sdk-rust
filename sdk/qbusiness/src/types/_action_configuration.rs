// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies an allowed action and its associated filter configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ActionConfiguration {
    /// <p>The Amazon Q Business action that is allowed.</p>
    pub action: ::std::string::String,
    /// <p>The filter configuration for the action, if any.</p>
    pub filter_configuration: ::std::option::Option<crate::types::ActionFilterConfiguration>,
}
impl ActionConfiguration {
    /// <p>The Amazon Q Business action that is allowed.</p>
    pub fn action(&self) -> &str {
        use std::ops::Deref;
        self.action.deref()
    }
    /// <p>The filter configuration for the action, if any.</p>
    pub fn filter_configuration(&self) -> ::std::option::Option<&crate::types::ActionFilterConfiguration> {
        self.filter_configuration.as_ref()
    }
}
impl ActionConfiguration {
    /// Creates a new builder-style object to manufacture [`ActionConfiguration`](crate::types::ActionConfiguration).
    pub fn builder() -> crate::types::builders::ActionConfigurationBuilder {
        crate::types::builders::ActionConfigurationBuilder::default()
    }
}

/// A builder for [`ActionConfiguration`](crate::types::ActionConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ActionConfigurationBuilder {
    pub(crate) action: ::std::option::Option<::std::string::String>,
    pub(crate) filter_configuration: ::std::option::Option<crate::types::ActionFilterConfiguration>,
}
impl ActionConfigurationBuilder {
    /// <p>The Amazon Q Business action that is allowed.</p>
    /// This field is required.
    pub fn action(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Q Business action that is allowed.</p>
    pub fn set_action(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action = input;
        self
    }
    /// <p>The Amazon Q Business action that is allowed.</p>
    pub fn get_action(&self) -> &::std::option::Option<::std::string::String> {
        &self.action
    }
    /// <p>The filter configuration for the action, if any.</p>
    pub fn filter_configuration(mut self, input: crate::types::ActionFilterConfiguration) -> Self {
        self.filter_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The filter configuration for the action, if any.</p>
    pub fn set_filter_configuration(mut self, input: ::std::option::Option<crate::types::ActionFilterConfiguration>) -> Self {
        self.filter_configuration = input;
        self
    }
    /// <p>The filter configuration for the action, if any.</p>
    pub fn get_filter_configuration(&self) -> &::std::option::Option<crate::types::ActionFilterConfiguration> {
        &self.filter_configuration
    }
    /// Consumes the builder and constructs a [`ActionConfiguration`](crate::types::ActionConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`action`](crate::types::builders::ActionConfigurationBuilder::action)
    pub fn build(self) -> ::std::result::Result<crate::types::ActionConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ActionConfiguration {
            action: self.action.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action",
                    "action was not specified but it is required when building ActionConfiguration",
                )
            })?,
            filter_configuration: self.filter_configuration,
        })
    }
}
