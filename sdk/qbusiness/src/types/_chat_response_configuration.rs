// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration details that define how Amazon Q Business generates and formats responses to user queries in chat interactions. This configuration allows administrators to customize response characteristics to meet specific organizational needs and communication standards.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ChatResponseConfiguration {
    /// <p>A unique identifier for your chat response configuration settings, used to reference and manage the configuration within the Amazon Q Business service.</p>
    pub chat_response_configuration_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the chat response configuration, which uniquely identifies the resource across all Amazon Web Services services and accounts.</p>
    pub chat_response_configuration_arn: ::std::string::String,
    /// <p>A human-readable name for the chat response configuration, making it easier to identify and manage multiple configurations within an organization.</p>
    pub display_name: ::std::string::String,
    /// <p>A summary of the response configuration settings, providing a concise overview of the key parameters that define how responses are generated and formatted.</p>
    pub response_configuration_summary: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the chat response configuration, indicating whether it is active, pending, or in another state that affects its availability for use in chat interactions.</p>
    pub status: crate::types::ChatResponseConfigurationStatus,
    /// <p>The timestamp indicating when the chat response configuration was initially created, useful for tracking the lifecycle of configuration resources.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp indicating when the chat response configuration was last modified, helping administrators track changes and maintain version awareness.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ChatResponseConfiguration {
    /// <p>A unique identifier for your chat response configuration settings, used to reference and manage the configuration within the Amazon Q Business service.</p>
    pub fn chat_response_configuration_id(&self) -> &str {
        use std::ops::Deref;
        self.chat_response_configuration_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the chat response configuration, which uniquely identifies the resource across all Amazon Web Services services and accounts.</p>
    pub fn chat_response_configuration_arn(&self) -> &str {
        use std::ops::Deref;
        self.chat_response_configuration_arn.deref()
    }
    /// <p>A human-readable name for the chat response configuration, making it easier to identify and manage multiple configurations within an organization.</p>
    pub fn display_name(&self) -> &str {
        use std::ops::Deref;
        self.display_name.deref()
    }
    /// <p>A summary of the response configuration settings, providing a concise overview of the key parameters that define how responses are generated and formatted.</p>
    pub fn response_configuration_summary(&self) -> ::std::option::Option<&str> {
        self.response_configuration_summary.as_deref()
    }
    /// <p>The current status of the chat response configuration, indicating whether it is active, pending, or in another state that affects its availability for use in chat interactions.</p>
    pub fn status(&self) -> &crate::types::ChatResponseConfigurationStatus {
        &self.status
    }
    /// <p>The timestamp indicating when the chat response configuration was initially created, useful for tracking the lifecycle of configuration resources.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp indicating when the chat response configuration was last modified, helping administrators track changes and maintain version awareness.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl ChatResponseConfiguration {
    /// Creates a new builder-style object to manufacture [`ChatResponseConfiguration`](crate::types::ChatResponseConfiguration).
    pub fn builder() -> crate::types::builders::ChatResponseConfigurationBuilder {
        crate::types::builders::ChatResponseConfigurationBuilder::default()
    }
}

/// A builder for [`ChatResponseConfiguration`](crate::types::ChatResponseConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ChatResponseConfigurationBuilder {
    pub(crate) chat_response_configuration_id: ::std::option::Option<::std::string::String>,
    pub(crate) chat_response_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) response_configuration_summary: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ChatResponseConfigurationStatus>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ChatResponseConfigurationBuilder {
    /// <p>A unique identifier for your chat response configuration settings, used to reference and manage the configuration within the Amazon Q Business service.</p>
    /// This field is required.
    pub fn chat_response_configuration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.chat_response_configuration_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for your chat response configuration settings, used to reference and manage the configuration within the Amazon Q Business service.</p>
    pub fn set_chat_response_configuration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.chat_response_configuration_id = input;
        self
    }
    /// <p>A unique identifier for your chat response configuration settings, used to reference and manage the configuration within the Amazon Q Business service.</p>
    pub fn get_chat_response_configuration_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.chat_response_configuration_id
    }
    /// <p>The Amazon Resource Name (ARN) of the chat response configuration, which uniquely identifies the resource across all Amazon Web Services services and accounts.</p>
    /// This field is required.
    pub fn chat_response_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.chat_response_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the chat response configuration, which uniquely identifies the resource across all Amazon Web Services services and accounts.</p>
    pub fn set_chat_response_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.chat_response_configuration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the chat response configuration, which uniquely identifies the resource across all Amazon Web Services services and accounts.</p>
    pub fn get_chat_response_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.chat_response_configuration_arn
    }
    /// <p>A human-readable name for the chat response configuration, making it easier to identify and manage multiple configurations within an organization.</p>
    /// This field is required.
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A human-readable name for the chat response configuration, making it easier to identify and manage multiple configurations within an organization.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>A human-readable name for the chat response configuration, making it easier to identify and manage multiple configurations within an organization.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>A summary of the response configuration settings, providing a concise overview of the key parameters that define how responses are generated and formatted.</p>
    pub fn response_configuration_summary(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.response_configuration_summary = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A summary of the response configuration settings, providing a concise overview of the key parameters that define how responses are generated and formatted.</p>
    pub fn set_response_configuration_summary(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.response_configuration_summary = input;
        self
    }
    /// <p>A summary of the response configuration settings, providing a concise overview of the key parameters that define how responses are generated and formatted.</p>
    pub fn get_response_configuration_summary(&self) -> &::std::option::Option<::std::string::String> {
        &self.response_configuration_summary
    }
    /// <p>The current status of the chat response configuration, indicating whether it is active, pending, or in another state that affects its availability for use in chat interactions.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ChatResponseConfigurationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the chat response configuration, indicating whether it is active, pending, or in another state that affects its availability for use in chat interactions.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ChatResponseConfigurationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the chat response configuration, indicating whether it is active, pending, or in another state that affects its availability for use in chat interactions.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ChatResponseConfigurationStatus> {
        &self.status
    }
    /// <p>The timestamp indicating when the chat response configuration was initially created, useful for tracking the lifecycle of configuration resources.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp indicating when the chat response configuration was initially created, useful for tracking the lifecycle of configuration resources.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp indicating when the chat response configuration was initially created, useful for tracking the lifecycle of configuration resources.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp indicating when the chat response configuration was last modified, helping administrators track changes and maintain version awareness.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp indicating when the chat response configuration was last modified, helping administrators track changes and maintain version awareness.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp indicating when the chat response configuration was last modified, helping administrators track changes and maintain version awareness.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Consumes the builder and constructs a [`ChatResponseConfiguration`](crate::types::ChatResponseConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`chat_response_configuration_id`](crate::types::builders::ChatResponseConfigurationBuilder::chat_response_configuration_id)
    /// - [`chat_response_configuration_arn`](crate::types::builders::ChatResponseConfigurationBuilder::chat_response_configuration_arn)
    /// - [`display_name`](crate::types::builders::ChatResponseConfigurationBuilder::display_name)
    /// - [`status`](crate::types::builders::ChatResponseConfigurationBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::ChatResponseConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ChatResponseConfiguration {
            chat_response_configuration_id: self.chat_response_configuration_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "chat_response_configuration_id",
                    "chat_response_configuration_id was not specified but it is required when building ChatResponseConfiguration",
                )
            })?,
            chat_response_configuration_arn: self.chat_response_configuration_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "chat_response_configuration_arn",
                    "chat_response_configuration_arn was not specified but it is required when building ChatResponseConfiguration",
                )
            })?,
            display_name: self.display_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "display_name",
                    "display_name was not specified but it is required when building ChatResponseConfiguration",
                )
            })?,
            response_configuration_summary: self.response_configuration_summary,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ChatResponseConfiguration",
                )
            })?,
            created_at: self.created_at,
            updated_at: self.updated_at,
        })
    }
}
