// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration information required to create a custom plugin.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomPluginConfiguration {
    /// <p>A description for your custom plugin configuration.</p>
    pub description: ::std::string::String,
    /// <p>The type of OpenAPI schema to use.</p>
    pub api_schema_type: crate::types::ApiSchemaType,
    /// <p>Contains either details about the S3 object containing the OpenAPI schema for the action group or the JSON or YAML-formatted payload defining the schema.</p>
    pub api_schema: ::std::option::Option<crate::types::ApiSchema>,
}
impl CustomPluginConfiguration {
    /// <p>A description for your custom plugin configuration.</p>
    pub fn description(&self) -> &str {
        use std::ops::Deref;
        self.description.deref()
    }
    /// <p>The type of OpenAPI schema to use.</p>
    pub fn api_schema_type(&self) -> &crate::types::ApiSchemaType {
        &self.api_schema_type
    }
    /// <p>Contains either details about the S3 object containing the OpenAPI schema for the action group or the JSON or YAML-formatted payload defining the schema.</p>
    pub fn api_schema(&self) -> ::std::option::Option<&crate::types::ApiSchema> {
        self.api_schema.as_ref()
    }
}
impl CustomPluginConfiguration {
    /// Creates a new builder-style object to manufacture [`CustomPluginConfiguration`](crate::types::CustomPluginConfiguration).
    pub fn builder() -> crate::types::builders::CustomPluginConfigurationBuilder {
        crate::types::builders::CustomPluginConfigurationBuilder::default()
    }
}

/// A builder for [`CustomPluginConfiguration`](crate::types::CustomPluginConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CustomPluginConfigurationBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) api_schema_type: ::std::option::Option<crate::types::ApiSchemaType>,
    pub(crate) api_schema: ::std::option::Option<crate::types::ApiSchema>,
}
impl CustomPluginConfigurationBuilder {
    /// <p>A description for your custom plugin configuration.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description for your custom plugin configuration.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description for your custom plugin configuration.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The type of OpenAPI schema to use.</p>
    /// This field is required.
    pub fn api_schema_type(mut self, input: crate::types::ApiSchemaType) -> Self {
        self.api_schema_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of OpenAPI schema to use.</p>
    pub fn set_api_schema_type(mut self, input: ::std::option::Option<crate::types::ApiSchemaType>) -> Self {
        self.api_schema_type = input;
        self
    }
    /// <p>The type of OpenAPI schema to use.</p>
    pub fn get_api_schema_type(&self) -> &::std::option::Option<crate::types::ApiSchemaType> {
        &self.api_schema_type
    }
    /// <p>Contains either details about the S3 object containing the OpenAPI schema for the action group or the JSON or YAML-formatted payload defining the schema.</p>
    pub fn api_schema(mut self, input: crate::types::ApiSchema) -> Self {
        self.api_schema = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains either details about the S3 object containing the OpenAPI schema for the action group or the JSON or YAML-formatted payload defining the schema.</p>
    pub fn set_api_schema(mut self, input: ::std::option::Option<crate::types::ApiSchema>) -> Self {
        self.api_schema = input;
        self
    }
    /// <p>Contains either details about the S3 object containing the OpenAPI schema for the action group or the JSON or YAML-formatted payload defining the schema.</p>
    pub fn get_api_schema(&self) -> &::std::option::Option<crate::types::ApiSchema> {
        &self.api_schema
    }
    /// Consumes the builder and constructs a [`CustomPluginConfiguration`](crate::types::CustomPluginConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`description`](crate::types::builders::CustomPluginConfigurationBuilder::description)
    /// - [`api_schema_type`](crate::types::builders::CustomPluginConfigurationBuilder::api_schema_type)
    pub fn build(self) -> ::std::result::Result<crate::types::CustomPluginConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CustomPluginConfiguration {
            description: self.description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "description",
                    "description was not specified but it is required when building CustomPluginConfiguration",
                )
            })?,
            api_schema_type: self.api_schema_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "api_schema_type",
                    "api_schema_type was not specified but it is required when building CustomPluginConfiguration",
                )
            })?,
            api_schema: self.api_schema,
        })
    }
}
