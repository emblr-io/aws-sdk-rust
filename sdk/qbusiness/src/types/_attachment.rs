// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An attachment in an Amazon Q Business conversation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Attachment {
    /// <p>The identifier of the Amazon Q Business attachment.</p>
    pub attachment_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the Amazon Q Business conversation the attachment is associated with.</p>
    pub conversation_id: ::std::option::Option<::std::string::String>,
    /// <p>Filename of the Amazon Q Business attachment.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A CopyFromSource containing a reference to the original source of the Amazon Q Business attachment.</p>
    pub copy_from: ::std::option::Option<crate::types::CopyFromSource>,
    /// <p>Filetype of the Amazon Q Business attachment.</p>
    pub file_type: ::std::option::Option<::std::string::String>,
    /// <p>Size in bytes of the Amazon Q Business attachment.</p>
    pub file_size: ::std::option::Option<i32>,
    /// <p>MD5 checksum of the Amazon Q Business attachment contents.</p>
    pub md5_chksum: ::std::option::Option<::std::string::String>,
    /// <p>The Unix timestamp when the Amazon Q Business attachment was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>AttachmentStatus of the Amazon Q Business attachment.</p>
    pub status: ::std::option::Option<crate::types::AttachmentStatus>,
    /// <p>ErrorDetail providing information about a Amazon Q Business attachment error.</p>
    pub error: ::std::option::Option<crate::types::ErrorDetail>,
}
impl Attachment {
    /// <p>The identifier of the Amazon Q Business attachment.</p>
    pub fn attachment_id(&self) -> ::std::option::Option<&str> {
        self.attachment_id.as_deref()
    }
    /// <p>The identifier of the Amazon Q Business conversation the attachment is associated with.</p>
    pub fn conversation_id(&self) -> ::std::option::Option<&str> {
        self.conversation_id.as_deref()
    }
    /// <p>Filename of the Amazon Q Business attachment.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A CopyFromSource containing a reference to the original source of the Amazon Q Business attachment.</p>
    pub fn copy_from(&self) -> ::std::option::Option<&crate::types::CopyFromSource> {
        self.copy_from.as_ref()
    }
    /// <p>Filetype of the Amazon Q Business attachment.</p>
    pub fn file_type(&self) -> ::std::option::Option<&str> {
        self.file_type.as_deref()
    }
    /// <p>Size in bytes of the Amazon Q Business attachment.</p>
    pub fn file_size(&self) -> ::std::option::Option<i32> {
        self.file_size
    }
    /// <p>MD5 checksum of the Amazon Q Business attachment contents.</p>
    pub fn md5_chksum(&self) -> ::std::option::Option<&str> {
        self.md5_chksum.as_deref()
    }
    /// <p>The Unix timestamp when the Amazon Q Business attachment was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>AttachmentStatus of the Amazon Q Business attachment.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::AttachmentStatus> {
        self.status.as_ref()
    }
    /// <p>ErrorDetail providing information about a Amazon Q Business attachment error.</p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::ErrorDetail> {
        self.error.as_ref()
    }
}
impl Attachment {
    /// Creates a new builder-style object to manufacture [`Attachment`](crate::types::Attachment).
    pub fn builder() -> crate::types::builders::AttachmentBuilder {
        crate::types::builders::AttachmentBuilder::default()
    }
}

/// A builder for [`Attachment`](crate::types::Attachment).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AttachmentBuilder {
    pub(crate) attachment_id: ::std::option::Option<::std::string::String>,
    pub(crate) conversation_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) copy_from: ::std::option::Option<crate::types::CopyFromSource>,
    pub(crate) file_type: ::std::option::Option<::std::string::String>,
    pub(crate) file_size: ::std::option::Option<i32>,
    pub(crate) md5_chksum: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::AttachmentStatus>,
    pub(crate) error: ::std::option::Option<crate::types::ErrorDetail>,
}
impl AttachmentBuilder {
    /// <p>The identifier of the Amazon Q Business attachment.</p>
    pub fn attachment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attachment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q Business attachment.</p>
    pub fn set_attachment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attachment_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q Business attachment.</p>
    pub fn get_attachment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.attachment_id
    }
    /// <p>The identifier of the Amazon Q Business conversation the attachment is associated with.</p>
    pub fn conversation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.conversation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q Business conversation the attachment is associated with.</p>
    pub fn set_conversation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.conversation_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q Business conversation the attachment is associated with.</p>
    pub fn get_conversation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.conversation_id
    }
    /// <p>Filename of the Amazon Q Business attachment.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filename of the Amazon Q Business attachment.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Filename of the Amazon Q Business attachment.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A CopyFromSource containing a reference to the original source of the Amazon Q Business attachment.</p>
    pub fn copy_from(mut self, input: crate::types::CopyFromSource) -> Self {
        self.copy_from = ::std::option::Option::Some(input);
        self
    }
    /// <p>A CopyFromSource containing a reference to the original source of the Amazon Q Business attachment.</p>
    pub fn set_copy_from(mut self, input: ::std::option::Option<crate::types::CopyFromSource>) -> Self {
        self.copy_from = input;
        self
    }
    /// <p>A CopyFromSource containing a reference to the original source of the Amazon Q Business attachment.</p>
    pub fn get_copy_from(&self) -> &::std::option::Option<crate::types::CopyFromSource> {
        &self.copy_from
    }
    /// <p>Filetype of the Amazon Q Business attachment.</p>
    pub fn file_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filetype of the Amazon Q Business attachment.</p>
    pub fn set_file_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_type = input;
        self
    }
    /// <p>Filetype of the Amazon Q Business attachment.</p>
    pub fn get_file_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_type
    }
    /// <p>Size in bytes of the Amazon Q Business attachment.</p>
    pub fn file_size(mut self, input: i32) -> Self {
        self.file_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>Size in bytes of the Amazon Q Business attachment.</p>
    pub fn set_file_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.file_size = input;
        self
    }
    /// <p>Size in bytes of the Amazon Q Business attachment.</p>
    pub fn get_file_size(&self) -> &::std::option::Option<i32> {
        &self.file_size
    }
    /// <p>MD5 checksum of the Amazon Q Business attachment contents.</p>
    pub fn md5_chksum(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.md5_chksum = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>MD5 checksum of the Amazon Q Business attachment contents.</p>
    pub fn set_md5_chksum(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.md5_chksum = input;
        self
    }
    /// <p>MD5 checksum of the Amazon Q Business attachment contents.</p>
    pub fn get_md5_chksum(&self) -> &::std::option::Option<::std::string::String> {
        &self.md5_chksum
    }
    /// <p>The Unix timestamp when the Amazon Q Business attachment was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp when the Amazon Q Business attachment was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The Unix timestamp when the Amazon Q Business attachment was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>AttachmentStatus of the Amazon Q Business attachment.</p>
    pub fn status(mut self, input: crate::types::AttachmentStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>AttachmentStatus of the Amazon Q Business attachment.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AttachmentStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>AttachmentStatus of the Amazon Q Business attachment.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AttachmentStatus> {
        &self.status
    }
    /// <p>ErrorDetail providing information about a Amazon Q Business attachment error.</p>
    pub fn error(mut self, input: crate::types::ErrorDetail) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>ErrorDetail providing information about a Amazon Q Business attachment error.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::ErrorDetail>) -> Self {
        self.error = input;
        self
    }
    /// <p>ErrorDetail providing information about a Amazon Q Business attachment error.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::ErrorDetail> {
        &self.error
    }
    /// Consumes the builder and constructs a [`Attachment`](crate::types::Attachment).
    pub fn build(self) -> crate::types::Attachment {
        crate::types::Attachment {
            attachment_id: self.attachment_id,
            conversation_id: self.conversation_id,
            name: self.name,
            copy_from: self.copy_from,
            file_type: self.file_type,
            file_size: self.file_size,
            md5_chksum: self.md5_chksum,
            created_at: self.created_at,
            status: self.status,
            error: self.error,
        }
    }
}
