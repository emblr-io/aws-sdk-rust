// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The container for browser extension configuration for an Amazon Q Business web experience.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BrowserExtensionConfiguration {
    /// <p>Specify the browser extensions allowed for your Amazon Q web experience.</p>
    /// <ul>
    /// <li>
    /// <p><code>CHROME</code> — Enables the extension for Chromium-based browsers (Google Chrome, Microsoft Edge, Opera, etc.).</p></li>
    /// <li>
    /// <p><code>FIREFOX</code> — Enables the extension for Mozilla Firefox.</p></li>
    /// <li>
    /// <p><code>CHROME</code> and <code>FIREFOX</code> — Enable the extension for Chromium-based browsers and Mozilla Firefox.</p></li>
    /// </ul>
    pub enabled_browser_extensions: ::std::vec::Vec<crate::types::BrowserExtension>,
}
impl BrowserExtensionConfiguration {
    /// <p>Specify the browser extensions allowed for your Amazon Q web experience.</p>
    /// <ul>
    /// <li>
    /// <p><code>CHROME</code> — Enables the extension for Chromium-based browsers (Google Chrome, Microsoft Edge, Opera, etc.).</p></li>
    /// <li>
    /// <p><code>FIREFOX</code> — Enables the extension for Mozilla Firefox.</p></li>
    /// <li>
    /// <p><code>CHROME</code> and <code>FIREFOX</code> — Enable the extension for Chromium-based browsers and Mozilla Firefox.</p></li>
    /// </ul>
    pub fn enabled_browser_extensions(&self) -> &[crate::types::BrowserExtension] {
        use std::ops::Deref;
        self.enabled_browser_extensions.deref()
    }
}
impl BrowserExtensionConfiguration {
    /// Creates a new builder-style object to manufacture [`BrowserExtensionConfiguration`](crate::types::BrowserExtensionConfiguration).
    pub fn builder() -> crate::types::builders::BrowserExtensionConfigurationBuilder {
        crate::types::builders::BrowserExtensionConfigurationBuilder::default()
    }
}

/// A builder for [`BrowserExtensionConfiguration`](crate::types::BrowserExtensionConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BrowserExtensionConfigurationBuilder {
    pub(crate) enabled_browser_extensions: ::std::option::Option<::std::vec::Vec<crate::types::BrowserExtension>>,
}
impl BrowserExtensionConfigurationBuilder {
    /// Appends an item to `enabled_browser_extensions`.
    ///
    /// To override the contents of this collection use [`set_enabled_browser_extensions`](Self::set_enabled_browser_extensions).
    ///
    /// <p>Specify the browser extensions allowed for your Amazon Q web experience.</p>
    /// <ul>
    /// <li>
    /// <p><code>CHROME</code> — Enables the extension for Chromium-based browsers (Google Chrome, Microsoft Edge, Opera, etc.).</p></li>
    /// <li>
    /// <p><code>FIREFOX</code> — Enables the extension for Mozilla Firefox.</p></li>
    /// <li>
    /// <p><code>CHROME</code> and <code>FIREFOX</code> — Enable the extension for Chromium-based browsers and Mozilla Firefox.</p></li>
    /// </ul>
    pub fn enabled_browser_extensions(mut self, input: crate::types::BrowserExtension) -> Self {
        let mut v = self.enabled_browser_extensions.unwrap_or_default();
        v.push(input);
        self.enabled_browser_extensions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specify the browser extensions allowed for your Amazon Q web experience.</p>
    /// <ul>
    /// <li>
    /// <p><code>CHROME</code> — Enables the extension for Chromium-based browsers (Google Chrome, Microsoft Edge, Opera, etc.).</p></li>
    /// <li>
    /// <p><code>FIREFOX</code> — Enables the extension for Mozilla Firefox.</p></li>
    /// <li>
    /// <p><code>CHROME</code> and <code>FIREFOX</code> — Enable the extension for Chromium-based browsers and Mozilla Firefox.</p></li>
    /// </ul>
    pub fn set_enabled_browser_extensions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BrowserExtension>>) -> Self {
        self.enabled_browser_extensions = input;
        self
    }
    /// <p>Specify the browser extensions allowed for your Amazon Q web experience.</p>
    /// <ul>
    /// <li>
    /// <p><code>CHROME</code> — Enables the extension for Chromium-based browsers (Google Chrome, Microsoft Edge, Opera, etc.).</p></li>
    /// <li>
    /// <p><code>FIREFOX</code> — Enables the extension for Mozilla Firefox.</p></li>
    /// <li>
    /// <p><code>CHROME</code> and <code>FIREFOX</code> — Enable the extension for Chromium-based browsers and Mozilla Firefox.</p></li>
    /// </ul>
    pub fn get_enabled_browser_extensions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BrowserExtension>> {
        &self.enabled_browser_extensions
    }
    /// Consumes the builder and constructs a [`BrowserExtensionConfiguration`](crate::types::BrowserExtensionConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`enabled_browser_extensions`](crate::types::builders::BrowserExtensionConfigurationBuilder::enabled_browser_extensions)
    pub fn build(self) -> ::std::result::Result<crate::types::BrowserExtensionConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BrowserExtensionConfiguration {
            enabled_browser_extensions: self.enabled_browser_extensions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "enabled_browser_extensions",
                    "enabled_browser_extensions was not specified but it is required when building BrowserExtensionConfiguration",
                )
            })?,
        })
    }
}
