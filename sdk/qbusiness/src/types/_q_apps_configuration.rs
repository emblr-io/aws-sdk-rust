// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration information about Amazon Q Apps.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QAppsConfiguration {
    /// <p>Status information about whether end users can create and use Amazon Q Apps in the web experience.</p>
    pub q_apps_control_mode: crate::types::QAppsControlMode,
}
impl QAppsConfiguration {
    /// <p>Status information about whether end users can create and use Amazon Q Apps in the web experience.</p>
    pub fn q_apps_control_mode(&self) -> &crate::types::QAppsControlMode {
        &self.q_apps_control_mode
    }
}
impl QAppsConfiguration {
    /// Creates a new builder-style object to manufacture [`QAppsConfiguration`](crate::types::QAppsConfiguration).
    pub fn builder() -> crate::types::builders::QAppsConfigurationBuilder {
        crate::types::builders::QAppsConfigurationBuilder::default()
    }
}

/// A builder for [`QAppsConfiguration`](crate::types::QAppsConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QAppsConfigurationBuilder {
    pub(crate) q_apps_control_mode: ::std::option::Option<crate::types::QAppsControlMode>,
}
impl QAppsConfigurationBuilder {
    /// <p>Status information about whether end users can create and use Amazon Q Apps in the web experience.</p>
    /// This field is required.
    pub fn q_apps_control_mode(mut self, input: crate::types::QAppsControlMode) -> Self {
        self.q_apps_control_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status information about whether end users can create and use Amazon Q Apps in the web experience.</p>
    pub fn set_q_apps_control_mode(mut self, input: ::std::option::Option<crate::types::QAppsControlMode>) -> Self {
        self.q_apps_control_mode = input;
        self
    }
    /// <p>Status information about whether end users can create and use Amazon Q Apps in the web experience.</p>
    pub fn get_q_apps_control_mode(&self) -> &::std::option::Option<crate::types::QAppsControlMode> {
        &self.q_apps_control_mode
    }
    /// Consumes the builder and constructs a [`QAppsConfiguration`](crate::types::QAppsConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`q_apps_control_mode`](crate::types::builders::QAppsConfigurationBuilder::q_apps_control_mode)
    pub fn build(self) -> ::std::result::Result<crate::types::QAppsConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::QAppsConfiguration {
            q_apps_control_mode: self.q_apps_control_mode.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "q_apps_control_mode",
                    "q_apps_control_mode was not specified but it is required when building QAppsConfiguration",
                )
            })?,
        })
    }
}
