// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a condition in the document's ACL, specifying access rules for users and groups.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DocumentAclCondition {
    /// <p>The logical relation between members in the condition, determining how multiple user or group conditions are combined.</p>
    pub member_relation: ::std::option::Option<crate::types::MemberRelation>,
    /// <p>An array of user identifiers that this condition applies to. Users listed here are subject to the access rule defined by this condition.</p>
    pub users: ::std::option::Option<::std::vec::Vec<crate::types::DocumentAclUser>>,
    /// <p>An array of group identifiers that this condition applies to. Groups listed here are subject to the access rule defined by this condition.</p>
    pub groups: ::std::option::Option<::std::vec::Vec<crate::types::DocumentAclGroup>>,
}
impl DocumentAclCondition {
    /// <p>The logical relation between members in the condition, determining how multiple user or group conditions are combined.</p>
    pub fn member_relation(&self) -> ::std::option::Option<&crate::types::MemberRelation> {
        self.member_relation.as_ref()
    }
    /// <p>An array of user identifiers that this condition applies to. Users listed here are subject to the access rule defined by this condition.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.users.is_none()`.
    pub fn users(&self) -> &[crate::types::DocumentAclUser] {
        self.users.as_deref().unwrap_or_default()
    }
    /// <p>An array of group identifiers that this condition applies to. Groups listed here are subject to the access rule defined by this condition.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.groups.is_none()`.
    pub fn groups(&self) -> &[crate::types::DocumentAclGroup] {
        self.groups.as_deref().unwrap_or_default()
    }
}
impl DocumentAclCondition {
    /// Creates a new builder-style object to manufacture [`DocumentAclCondition`](crate::types::DocumentAclCondition).
    pub fn builder() -> crate::types::builders::DocumentAclConditionBuilder {
        crate::types::builders::DocumentAclConditionBuilder::default()
    }
}

/// A builder for [`DocumentAclCondition`](crate::types::DocumentAclCondition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DocumentAclConditionBuilder {
    pub(crate) member_relation: ::std::option::Option<crate::types::MemberRelation>,
    pub(crate) users: ::std::option::Option<::std::vec::Vec<crate::types::DocumentAclUser>>,
    pub(crate) groups: ::std::option::Option<::std::vec::Vec<crate::types::DocumentAclGroup>>,
}
impl DocumentAclConditionBuilder {
    /// <p>The logical relation between members in the condition, determining how multiple user or group conditions are combined.</p>
    pub fn member_relation(mut self, input: crate::types::MemberRelation) -> Self {
        self.member_relation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The logical relation between members in the condition, determining how multiple user or group conditions are combined.</p>
    pub fn set_member_relation(mut self, input: ::std::option::Option<crate::types::MemberRelation>) -> Self {
        self.member_relation = input;
        self
    }
    /// <p>The logical relation between members in the condition, determining how multiple user or group conditions are combined.</p>
    pub fn get_member_relation(&self) -> &::std::option::Option<crate::types::MemberRelation> {
        &self.member_relation
    }
    /// Appends an item to `users`.
    ///
    /// To override the contents of this collection use [`set_users`](Self::set_users).
    ///
    /// <p>An array of user identifiers that this condition applies to. Users listed here are subject to the access rule defined by this condition.</p>
    pub fn users(mut self, input: crate::types::DocumentAclUser) -> Self {
        let mut v = self.users.unwrap_or_default();
        v.push(input);
        self.users = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of user identifiers that this condition applies to. Users listed here are subject to the access rule defined by this condition.</p>
    pub fn set_users(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DocumentAclUser>>) -> Self {
        self.users = input;
        self
    }
    /// <p>An array of user identifiers that this condition applies to. Users listed here are subject to the access rule defined by this condition.</p>
    pub fn get_users(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DocumentAclUser>> {
        &self.users
    }
    /// Appends an item to `groups`.
    ///
    /// To override the contents of this collection use [`set_groups`](Self::set_groups).
    ///
    /// <p>An array of group identifiers that this condition applies to. Groups listed here are subject to the access rule defined by this condition.</p>
    pub fn groups(mut self, input: crate::types::DocumentAclGroup) -> Self {
        let mut v = self.groups.unwrap_or_default();
        v.push(input);
        self.groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of group identifiers that this condition applies to. Groups listed here are subject to the access rule defined by this condition.</p>
    pub fn set_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DocumentAclGroup>>) -> Self {
        self.groups = input;
        self
    }
    /// <p>An array of group identifiers that this condition applies to. Groups listed here are subject to the access rule defined by this condition.</p>
    pub fn get_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DocumentAclGroup>> {
        &self.groups
    }
    /// Consumes the builder and constructs a [`DocumentAclCondition`](crate::types::DocumentAclCondition).
    pub fn build(self) -> crate::types::DocumentAclCondition {
        crate::types::DocumentAclCondition {
            member_relation: self.member_relation,
            users: self.users,
            groups: self.groups,
        }
    }
}
