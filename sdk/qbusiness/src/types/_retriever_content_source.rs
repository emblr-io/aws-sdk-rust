// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a retriever as the content source for a search.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RetrieverContentSource {
    /// <p>The unique identifier of the retriever to use as the content source.</p>
    pub retriever_id: ::std::string::String,
}
impl RetrieverContentSource {
    /// <p>The unique identifier of the retriever to use as the content source.</p>
    pub fn retriever_id(&self) -> &str {
        use std::ops::Deref;
        self.retriever_id.deref()
    }
}
impl RetrieverContentSource {
    /// Creates a new builder-style object to manufacture [`RetrieverContentSource`](crate::types::RetrieverContentSource).
    pub fn builder() -> crate::types::builders::RetrieverContentSourceBuilder {
        crate::types::builders::RetrieverContentSourceBuilder::default()
    }
}

/// A builder for [`RetrieverContentSource`](crate::types::RetrieverContentSource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RetrieverContentSourceBuilder {
    pub(crate) retriever_id: ::std::option::Option<::std::string::String>,
}
impl RetrieverContentSourceBuilder {
    /// <p>The unique identifier of the retriever to use as the content source.</p>
    /// This field is required.
    pub fn retriever_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.retriever_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the retriever to use as the content source.</p>
    pub fn set_retriever_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.retriever_id = input;
        self
    }
    /// <p>The unique identifier of the retriever to use as the content source.</p>
    pub fn get_retriever_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.retriever_id
    }
    /// Consumes the builder and constructs a [`RetrieverContentSource`](crate::types::RetrieverContentSource).
    /// This method will fail if any of the following fields are not set:
    /// - [`retriever_id`](crate::types::builders::RetrieverContentSourceBuilder::retriever_id)
    pub fn build(self) -> ::std::result::Result<crate::types::RetrieverContentSource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RetrieverContentSource {
            retriever_id: self.retriever_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "retriever_id",
                    "retriever_id was not specified but it is required when building RetrieverContentSource",
                )
            })?,
        })
    }
}
