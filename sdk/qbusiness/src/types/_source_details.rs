// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for details about different types of media sources (image, audio, or video).</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum SourceDetails {
    /// <p>Details specific to audio content within the source.</p>
    AudioSourceDetails(crate::types::AudioSourceDetails),
    /// <p>Details specific to image content within the source.</p>
    ImageSourceDetails(crate::types::ImageSourceDetails),
    /// <p>Details specific to video content within the source.</p>
    VideoSourceDetails(crate::types::VideoSourceDetails),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl SourceDetails {
    /// Tries to convert the enum instance into [`AudioSourceDetails`](crate::types::SourceDetails::AudioSourceDetails), extracting the inner [`AudioSourceDetails`](crate::types::AudioSourceDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_audio_source_details(&self) -> ::std::result::Result<&crate::types::AudioSourceDetails, &Self> {
        if let SourceDetails::AudioSourceDetails(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AudioSourceDetails`](crate::types::SourceDetails::AudioSourceDetails).
    pub fn is_audio_source_details(&self) -> bool {
        self.as_audio_source_details().is_ok()
    }
    /// Tries to convert the enum instance into [`ImageSourceDetails`](crate::types::SourceDetails::ImageSourceDetails), extracting the inner [`ImageSourceDetails`](crate::types::ImageSourceDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_image_source_details(&self) -> ::std::result::Result<&crate::types::ImageSourceDetails, &Self> {
        if let SourceDetails::ImageSourceDetails(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ImageSourceDetails`](crate::types::SourceDetails::ImageSourceDetails).
    pub fn is_image_source_details(&self) -> bool {
        self.as_image_source_details().is_ok()
    }
    /// Tries to convert the enum instance into [`VideoSourceDetails`](crate::types::SourceDetails::VideoSourceDetails), extracting the inner [`VideoSourceDetails`](crate::types::VideoSourceDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_video_source_details(&self) -> ::std::result::Result<&crate::types::VideoSourceDetails, &Self> {
        if let SourceDetails::VideoSourceDetails(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`VideoSourceDetails`](crate::types::SourceDetails::VideoSourceDetails).
    pub fn is_video_source_details(&self) -> bool {
        self.as_video_source_details().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
