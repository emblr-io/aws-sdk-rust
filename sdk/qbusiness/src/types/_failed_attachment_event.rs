// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A failed file upload during web experience chat.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FailedAttachmentEvent {
    /// <p>The identifier of the conversation associated with the failed file upload.</p>
    pub conversation_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the end user chat message associated with the file upload.</p>
    pub user_message_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the AI-generated message associated with the file upload.</p>
    pub system_message_id: ::std::option::Option<::std::string::String>,
    /// <p>The details of a file uploaded during chat.</p>
    pub attachment: ::std::option::Option<crate::types::AttachmentOutput>,
}
impl FailedAttachmentEvent {
    /// <p>The identifier of the conversation associated with the failed file upload.</p>
    pub fn conversation_id(&self) -> ::std::option::Option<&str> {
        self.conversation_id.as_deref()
    }
    /// <p>The identifier of the end user chat message associated with the file upload.</p>
    pub fn user_message_id(&self) -> ::std::option::Option<&str> {
        self.user_message_id.as_deref()
    }
    /// <p>The identifier of the AI-generated message associated with the file upload.</p>
    pub fn system_message_id(&self) -> ::std::option::Option<&str> {
        self.system_message_id.as_deref()
    }
    /// <p>The details of a file uploaded during chat.</p>
    pub fn attachment(&self) -> ::std::option::Option<&crate::types::AttachmentOutput> {
        self.attachment.as_ref()
    }
}
impl FailedAttachmentEvent {
    /// Creates a new builder-style object to manufacture [`FailedAttachmentEvent`](crate::types::FailedAttachmentEvent).
    pub fn builder() -> crate::types::builders::FailedAttachmentEventBuilder {
        crate::types::builders::FailedAttachmentEventBuilder::default()
    }
}

/// A builder for [`FailedAttachmentEvent`](crate::types::FailedAttachmentEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FailedAttachmentEventBuilder {
    pub(crate) conversation_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_message_id: ::std::option::Option<::std::string::String>,
    pub(crate) system_message_id: ::std::option::Option<::std::string::String>,
    pub(crate) attachment: ::std::option::Option<crate::types::AttachmentOutput>,
}
impl FailedAttachmentEventBuilder {
    /// <p>The identifier of the conversation associated with the failed file upload.</p>
    pub fn conversation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.conversation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the conversation associated with the failed file upload.</p>
    pub fn set_conversation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.conversation_id = input;
        self
    }
    /// <p>The identifier of the conversation associated with the failed file upload.</p>
    pub fn get_conversation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.conversation_id
    }
    /// <p>The identifier of the end user chat message associated with the file upload.</p>
    pub fn user_message_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_message_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the end user chat message associated with the file upload.</p>
    pub fn set_user_message_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_message_id = input;
        self
    }
    /// <p>The identifier of the end user chat message associated with the file upload.</p>
    pub fn get_user_message_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_message_id
    }
    /// <p>The identifier of the AI-generated message associated with the file upload.</p>
    pub fn system_message_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.system_message_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the AI-generated message associated with the file upload.</p>
    pub fn set_system_message_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.system_message_id = input;
        self
    }
    /// <p>The identifier of the AI-generated message associated with the file upload.</p>
    pub fn get_system_message_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.system_message_id
    }
    /// <p>The details of a file uploaded during chat.</p>
    pub fn attachment(mut self, input: crate::types::AttachmentOutput) -> Self {
        self.attachment = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of a file uploaded during chat.</p>
    pub fn set_attachment(mut self, input: ::std::option::Option<crate::types::AttachmentOutput>) -> Self {
        self.attachment = input;
        self
    }
    /// <p>The details of a file uploaded during chat.</p>
    pub fn get_attachment(&self) -> &::std::option::Option<crate::types::AttachmentOutput> {
        &self.attachment
    }
    /// Consumes the builder and constructs a [`FailedAttachmentEvent`](crate::types::FailedAttachmentEvent).
    pub fn build(self) -> crate::types::FailedAttachmentEvent {
        crate::types::FailedAttachmentEvent {
            conversation_id: self.conversation_id,
            user_message_id: self.user_message_id,
            system_message_id: self.system_message_id,
            attachment: self.attachment,
        }
    }
}
