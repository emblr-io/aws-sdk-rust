// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a group associated with a given user in the access control system.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociatedGroup {
    /// <p>The name of the group associated with the user. This is used to identify the group in access control decisions.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The type of the associated group. This indicates the scope of the group's applicability.</p>
    pub r#type: ::std::option::Option<crate::types::MembershipType>,
}
impl AssociatedGroup {
    /// <p>The name of the group associated with the user. This is used to identify the group in access control decisions.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of the associated group. This indicates the scope of the group's applicability.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::MembershipType> {
        self.r#type.as_ref()
    }
}
impl AssociatedGroup {
    /// Creates a new builder-style object to manufacture [`AssociatedGroup`](crate::types::AssociatedGroup).
    pub fn builder() -> crate::types::builders::AssociatedGroupBuilder {
        crate::types::builders::AssociatedGroupBuilder::default()
    }
}

/// A builder for [`AssociatedGroup`](crate::types::AssociatedGroup).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssociatedGroupBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::MembershipType>,
}
impl AssociatedGroupBuilder {
    /// <p>The name of the group associated with the user. This is used to identify the group in access control decisions.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the group associated with the user. This is used to identify the group in access control decisions.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the group associated with the user. This is used to identify the group in access control decisions.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of the associated group. This indicates the scope of the group's applicability.</p>
    pub fn r#type(mut self, input: crate::types::MembershipType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the associated group. This indicates the scope of the group's applicability.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::MembershipType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the associated group. This indicates the scope of the group's applicability.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::MembershipType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`AssociatedGroup`](crate::types::AssociatedGroup).
    pub fn build(self) -> crate::types::AssociatedGroup {
        crate::types::AssociatedGroup {
            name: self.name,
            r#type: self.r#type,
        }
    }
}
