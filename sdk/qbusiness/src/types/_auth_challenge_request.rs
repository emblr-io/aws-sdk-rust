// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A request made by Amazon Q Business to a third paty authentication server to authenticate a custom plugin user.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuthChallengeRequest {
    /// <p>The URL sent by Amazon Q Business to the third party authentication server to authenticate a custom plugin user through an OAuth protocol.</p>
    pub authorization_url: ::std::string::String,
}
impl AuthChallengeRequest {
    /// <p>The URL sent by Amazon Q Business to the third party authentication server to authenticate a custom plugin user through an OAuth protocol.</p>
    pub fn authorization_url(&self) -> &str {
        use std::ops::Deref;
        self.authorization_url.deref()
    }
}
impl AuthChallengeRequest {
    /// Creates a new builder-style object to manufacture [`AuthChallengeRequest`](crate::types::AuthChallengeRequest).
    pub fn builder() -> crate::types::builders::AuthChallengeRequestBuilder {
        crate::types::builders::AuthChallengeRequestBuilder::default()
    }
}

/// A builder for [`AuthChallengeRequest`](crate::types::AuthChallengeRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AuthChallengeRequestBuilder {
    pub(crate) authorization_url: ::std::option::Option<::std::string::String>,
}
impl AuthChallengeRequestBuilder {
    /// <p>The URL sent by Amazon Q Business to the third party authentication server to authenticate a custom plugin user through an OAuth protocol.</p>
    /// This field is required.
    pub fn authorization_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authorization_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL sent by Amazon Q Business to the third party authentication server to authenticate a custom plugin user through an OAuth protocol.</p>
    pub fn set_authorization_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authorization_url = input;
        self
    }
    /// <p>The URL sent by Amazon Q Business to the third party authentication server to authenticate a custom plugin user through an OAuth protocol.</p>
    pub fn get_authorization_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.authorization_url
    }
    /// Consumes the builder and constructs a [`AuthChallengeRequest`](crate::types::AuthChallengeRequest).
    /// This method will fail if any of the following fields are not set:
    /// - [`authorization_url`](crate::types::builders::AuthChallengeRequestBuilder::authorization_url)
    pub fn build(self) -> ::std::result::Result<crate::types::AuthChallengeRequest, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AuthChallengeRequest {
            authorization_url: self.authorization_url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "authorization_url",
                    "authorization_url was not specified but it is required when building AuthChallengeRequest",
                )
            })?,
        })
    }
}
