// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents membership rules in the document's ACL, defining how users or groups are associated with access permissions.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DocumentAclMembership {
    /// <p>The logical relation between members in the membership rule, determining how multiple conditions are combined.</p>
    pub member_relation: ::std::option::Option<crate::types::MemberRelation>,
    /// <p>An array of conditions that define the membership rules. Each condition specifies criteria for users or groups to be included in this membership.</p>
    pub conditions: ::std::option::Option<::std::vec::Vec<crate::types::DocumentAclCondition>>,
}
impl DocumentAclMembership {
    /// <p>The logical relation between members in the membership rule, determining how multiple conditions are combined.</p>
    pub fn member_relation(&self) -> ::std::option::Option<&crate::types::MemberRelation> {
        self.member_relation.as_ref()
    }
    /// <p>An array of conditions that define the membership rules. Each condition specifies criteria for users or groups to be included in this membership.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.conditions.is_none()`.
    pub fn conditions(&self) -> &[crate::types::DocumentAclCondition] {
        self.conditions.as_deref().unwrap_or_default()
    }
}
impl DocumentAclMembership {
    /// Creates a new builder-style object to manufacture [`DocumentAclMembership`](crate::types::DocumentAclMembership).
    pub fn builder() -> crate::types::builders::DocumentAclMembershipBuilder {
        crate::types::builders::DocumentAclMembershipBuilder::default()
    }
}

/// A builder for [`DocumentAclMembership`](crate::types::DocumentAclMembership).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DocumentAclMembershipBuilder {
    pub(crate) member_relation: ::std::option::Option<crate::types::MemberRelation>,
    pub(crate) conditions: ::std::option::Option<::std::vec::Vec<crate::types::DocumentAclCondition>>,
}
impl DocumentAclMembershipBuilder {
    /// <p>The logical relation between members in the membership rule, determining how multiple conditions are combined.</p>
    pub fn member_relation(mut self, input: crate::types::MemberRelation) -> Self {
        self.member_relation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The logical relation between members in the membership rule, determining how multiple conditions are combined.</p>
    pub fn set_member_relation(mut self, input: ::std::option::Option<crate::types::MemberRelation>) -> Self {
        self.member_relation = input;
        self
    }
    /// <p>The logical relation between members in the membership rule, determining how multiple conditions are combined.</p>
    pub fn get_member_relation(&self) -> &::std::option::Option<crate::types::MemberRelation> {
        &self.member_relation
    }
    /// Appends an item to `conditions`.
    ///
    /// To override the contents of this collection use [`set_conditions`](Self::set_conditions).
    ///
    /// <p>An array of conditions that define the membership rules. Each condition specifies criteria for users or groups to be included in this membership.</p>
    pub fn conditions(mut self, input: crate::types::DocumentAclCondition) -> Self {
        let mut v = self.conditions.unwrap_or_default();
        v.push(input);
        self.conditions = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of conditions that define the membership rules. Each condition specifies criteria for users or groups to be included in this membership.</p>
    pub fn set_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DocumentAclCondition>>) -> Self {
        self.conditions = input;
        self
    }
    /// <p>An array of conditions that define the membership rules. Each condition specifies criteria for users or groups to be included in this membership.</p>
    pub fn get_conditions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DocumentAclCondition>> {
        &self.conditions
    }
    /// Consumes the builder and constructs a [`DocumentAclMembership`](crate::types::DocumentAclMembership).
    pub fn build(self) -> crate::types::DocumentAclMembership {
        crate::types::DocumentAclMembership {
            member_relation: self.member_relation,
            conditions: self.conditions,
        }
    }
}
