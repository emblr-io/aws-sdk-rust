// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This is either a file directly uploaded into a web experience chat or a reference to an existing attachment that is part of a web experience chat.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AttachmentInput {
    /// <p>The contents of the attachment.</p>
    pub data: ::std::option::Option<::aws_smithy_types::Blob>,
    /// <p>The filename of the attachment.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A reference to an existing attachment.</p>
    pub copy_from: ::std::option::Option<crate::types::CopyFromSource>,
}
impl AttachmentInput {
    /// <p>The contents of the attachment.</p>
    pub fn data(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.data.as_ref()
    }
    /// <p>The filename of the attachment.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A reference to an existing attachment.</p>
    pub fn copy_from(&self) -> ::std::option::Option<&crate::types::CopyFromSource> {
        self.copy_from.as_ref()
    }
}
impl AttachmentInput {
    /// Creates a new builder-style object to manufacture [`AttachmentInput`](crate::types::AttachmentInput).
    pub fn builder() -> crate::types::builders::AttachmentInputBuilder {
        crate::types::builders::AttachmentInputBuilder::default()
    }
}

/// A builder for [`AttachmentInput`](crate::types::AttachmentInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AttachmentInputBuilder {
    pub(crate) data: ::std::option::Option<::aws_smithy_types::Blob>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) copy_from: ::std::option::Option<crate::types::CopyFromSource>,
}
impl AttachmentInputBuilder {
    /// <p>The contents of the attachment.</p>
    pub fn data(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.data = ::std::option::Option::Some(input);
        self
    }
    /// <p>The contents of the attachment.</p>
    pub fn set_data(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.data = input;
        self
    }
    /// <p>The contents of the attachment.</p>
    pub fn get_data(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.data
    }
    /// <p>The filename of the attachment.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The filename of the attachment.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The filename of the attachment.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A reference to an existing attachment.</p>
    pub fn copy_from(mut self, input: crate::types::CopyFromSource) -> Self {
        self.copy_from = ::std::option::Option::Some(input);
        self
    }
    /// <p>A reference to an existing attachment.</p>
    pub fn set_copy_from(mut self, input: ::std::option::Option<crate::types::CopyFromSource>) -> Self {
        self.copy_from = input;
        self
    }
    /// <p>A reference to an existing attachment.</p>
    pub fn get_copy_from(&self) -> &::std::option::Option<crate::types::CopyFromSource> {
        &self.copy_from
    }
    /// Consumes the builder and constructs a [`AttachmentInput`](crate::types::AttachmentInput).
    pub fn build(self) -> crate::types::AttachmentInput {
        crate::types::AttachmentInput {
            data: self.data,
            name: self.name,
            copy_from: self.copy_from,
        }
    }
}
