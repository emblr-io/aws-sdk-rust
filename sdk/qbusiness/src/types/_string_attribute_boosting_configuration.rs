// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information on boosting <code>STRING</code> type document attributes.</p><note>
/// <p>For <code>STRING</code> and <code>STRING_LIST</code> type document attributes to be used for boosting on the console and the API, they must be enabled for search using the <a href="https://docs.aws.amazon.com/amazonq/latest/api-reference/API_DocumentAttributeConfiguration.html">DocumentAttributeConfiguration</a> object of the <a href="https://docs.aws.amazon.com/amazonq/latest/api-reference/API_UpdateIndex.html">UpdateIndex</a> API. If you haven't enabled searching on these attributes, you can't boost attributes of these data types on either the console or the API.</p>
/// </note>
/// <p>For more information on how boosting document attributes work in Amazon Q Business, see <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/metadata-boosting.html">Boosting using document attributes</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StringAttributeBoostingConfiguration {
    /// <p>Specifies the priority tier ranking of boosting applied to document attributes. For version 2, this parameter indicates the relative ranking between boosted fields (ONE being highest priority, TWO being second highest, etc.) and determines the order in which attributes influence document ranking in search results. For version 1, this parameter specifies the boosting intensity. For version 2, boosting intensity (VERY HIGH, HIGH, MEDIUM, LOW, NONE) are not supported. Note that in version 2, you are not allowed to boost on only one field and make this value TWO.</p>
    pub boosting_level: crate::types::DocumentAttributeBoostingLevel,
    /// <p>Specifies specific values of a <code>STRING</code> type document attribute being boosted. When using <code>NativeIndexConfiguration</code> version 2, you can specify up to five values in order of priority.</p>
    pub attribute_value_boosting:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::StringAttributeValueBoostingLevel>>,
}
impl StringAttributeBoostingConfiguration {
    /// <p>Specifies the priority tier ranking of boosting applied to document attributes. For version 2, this parameter indicates the relative ranking between boosted fields (ONE being highest priority, TWO being second highest, etc.) and determines the order in which attributes influence document ranking in search results. For version 1, this parameter specifies the boosting intensity. For version 2, boosting intensity (VERY HIGH, HIGH, MEDIUM, LOW, NONE) are not supported. Note that in version 2, you are not allowed to boost on only one field and make this value TWO.</p>
    pub fn boosting_level(&self) -> &crate::types::DocumentAttributeBoostingLevel {
        &self.boosting_level
    }
    /// <p>Specifies specific values of a <code>STRING</code> type document attribute being boosted. When using <code>NativeIndexConfiguration</code> version 2, you can specify up to five values in order of priority.</p>
    pub fn attribute_value_boosting(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::StringAttributeValueBoostingLevel>> {
        self.attribute_value_boosting.as_ref()
    }
}
impl StringAttributeBoostingConfiguration {
    /// Creates a new builder-style object to manufacture [`StringAttributeBoostingConfiguration`](crate::types::StringAttributeBoostingConfiguration).
    pub fn builder() -> crate::types::builders::StringAttributeBoostingConfigurationBuilder {
        crate::types::builders::StringAttributeBoostingConfigurationBuilder::default()
    }
}

/// A builder for [`StringAttributeBoostingConfiguration`](crate::types::StringAttributeBoostingConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StringAttributeBoostingConfigurationBuilder {
    pub(crate) boosting_level: ::std::option::Option<crate::types::DocumentAttributeBoostingLevel>,
    pub(crate) attribute_value_boosting:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::StringAttributeValueBoostingLevel>>,
}
impl StringAttributeBoostingConfigurationBuilder {
    /// <p>Specifies the priority tier ranking of boosting applied to document attributes. For version 2, this parameter indicates the relative ranking between boosted fields (ONE being highest priority, TWO being second highest, etc.) and determines the order in which attributes influence document ranking in search results. For version 1, this parameter specifies the boosting intensity. For version 2, boosting intensity (VERY HIGH, HIGH, MEDIUM, LOW, NONE) are not supported. Note that in version 2, you are not allowed to boost on only one field and make this value TWO.</p>
    /// This field is required.
    pub fn boosting_level(mut self, input: crate::types::DocumentAttributeBoostingLevel) -> Self {
        self.boosting_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the priority tier ranking of boosting applied to document attributes. For version 2, this parameter indicates the relative ranking between boosted fields (ONE being highest priority, TWO being second highest, etc.) and determines the order in which attributes influence document ranking in search results. For version 1, this parameter specifies the boosting intensity. For version 2, boosting intensity (VERY HIGH, HIGH, MEDIUM, LOW, NONE) are not supported. Note that in version 2, you are not allowed to boost on only one field and make this value TWO.</p>
    pub fn set_boosting_level(mut self, input: ::std::option::Option<crate::types::DocumentAttributeBoostingLevel>) -> Self {
        self.boosting_level = input;
        self
    }
    /// <p>Specifies the priority tier ranking of boosting applied to document attributes. For version 2, this parameter indicates the relative ranking between boosted fields (ONE being highest priority, TWO being second highest, etc.) and determines the order in which attributes influence document ranking in search results. For version 1, this parameter specifies the boosting intensity. For version 2, boosting intensity (VERY HIGH, HIGH, MEDIUM, LOW, NONE) are not supported. Note that in version 2, you are not allowed to boost on only one field and make this value TWO.</p>
    pub fn get_boosting_level(&self) -> &::std::option::Option<crate::types::DocumentAttributeBoostingLevel> {
        &self.boosting_level
    }
    /// Adds a key-value pair to `attribute_value_boosting`.
    ///
    /// To override the contents of this collection use [`set_attribute_value_boosting`](Self::set_attribute_value_boosting).
    ///
    /// <p>Specifies specific values of a <code>STRING</code> type document attribute being boosted. When using <code>NativeIndexConfiguration</code> version 2, you can specify up to five values in order of priority.</p>
    pub fn attribute_value_boosting(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: crate::types::StringAttributeValueBoostingLevel,
    ) -> Self {
        let mut hash_map = self.attribute_value_boosting.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.attribute_value_boosting = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Specifies specific values of a <code>STRING</code> type document attribute being boosted. When using <code>NativeIndexConfiguration</code> version 2, you can specify up to five values in order of priority.</p>
    pub fn set_attribute_value_boosting(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::StringAttributeValueBoostingLevel>>,
    ) -> Self {
        self.attribute_value_boosting = input;
        self
    }
    /// <p>Specifies specific values of a <code>STRING</code> type document attribute being boosted. When using <code>NativeIndexConfiguration</code> version 2, you can specify up to five values in order of priority.</p>
    pub fn get_attribute_value_boosting(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::StringAttributeValueBoostingLevel>> {
        &self.attribute_value_boosting
    }
    /// Consumes the builder and constructs a [`StringAttributeBoostingConfiguration`](crate::types::StringAttributeBoostingConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`boosting_level`](crate::types::builders::StringAttributeBoostingConfigurationBuilder::boosting_level)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::StringAttributeBoostingConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::StringAttributeBoostingConfiguration {
            boosting_level: self.boosting_level.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "boosting_level",
                    "boosting_level was not specified but it is required when building StringAttributeBoostingConfiguration",
                )
            })?,
            attribute_value_boosting: self.attribute_value_boosting,
        })
    }
}
