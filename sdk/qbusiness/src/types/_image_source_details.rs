// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about an image source, including its identifier and format.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImageSourceDetails {
    /// <p>Unique identifier for the image file.</p>
    pub media_id: ::std::option::Option<::std::string::String>,
    /// <p>The MIME type of the image file.</p>
    pub media_mime_type: ::std::option::Option<::std::string::String>,
}
impl ImageSourceDetails {
    /// <p>Unique identifier for the image file.</p>
    pub fn media_id(&self) -> ::std::option::Option<&str> {
        self.media_id.as_deref()
    }
    /// <p>The MIME type of the image file.</p>
    pub fn media_mime_type(&self) -> ::std::option::Option<&str> {
        self.media_mime_type.as_deref()
    }
}
impl ImageSourceDetails {
    /// Creates a new builder-style object to manufacture [`ImageSourceDetails`](crate::types::ImageSourceDetails).
    pub fn builder() -> crate::types::builders::ImageSourceDetailsBuilder {
        crate::types::builders::ImageSourceDetailsBuilder::default()
    }
}

/// A builder for [`ImageSourceDetails`](crate::types::ImageSourceDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ImageSourceDetailsBuilder {
    pub(crate) media_id: ::std::option::Option<::std::string::String>,
    pub(crate) media_mime_type: ::std::option::Option<::std::string::String>,
}
impl ImageSourceDetailsBuilder {
    /// <p>Unique identifier for the image file.</p>
    pub fn media_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.media_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier for the image file.</p>
    pub fn set_media_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.media_id = input;
        self
    }
    /// <p>Unique identifier for the image file.</p>
    pub fn get_media_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.media_id
    }
    /// <p>The MIME type of the image file.</p>
    pub fn media_mime_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.media_mime_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The MIME type of the image file.</p>
    pub fn set_media_mime_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.media_mime_type = input;
        self
    }
    /// <p>The MIME type of the image file.</p>
    pub fn get_media_mime_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.media_mime_type
    }
    /// Consumes the builder and constructs a [`ImageSourceDetails`](crate::types::ImageSourceDetails).
    pub fn build(self) -> crate::types::ImageSourceDetails {
        crate::types::ImageSourceDetails {
            media_id: self.media_id,
            media_mime_type: self.media_mime_type,
        }
    }
}
