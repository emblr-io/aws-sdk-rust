// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a piece of content that is relevant to a search query.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RelevantContent {
    /// <p>The actual content of the relevant item.</p>
    pub content: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the document containing the relevant content.</p>
    pub document_id: ::std::option::Option<::std::string::String>,
    /// <p>The title of the document containing the relevant content.</p>
    pub document_title: ::std::option::Option<::std::string::String>,
    /// <p>The URI of the document containing the relevant content.</p>
    pub document_uri: ::std::option::Option<::std::string::String>,
    /// <p>Additional attributes of the document containing the relevant content.</p>
    pub document_attributes: ::std::option::Option<::std::vec::Vec<crate::types::DocumentAttribute>>,
    /// <p>Attributes related to the relevance score of the content.</p>
    pub score_attributes: ::std::option::Option<crate::types::ScoreAttributes>,
}
impl RelevantContent {
    /// <p>The actual content of the relevant item.</p>
    pub fn content(&self) -> ::std::option::Option<&str> {
        self.content.as_deref()
    }
    /// <p>The unique identifier of the document containing the relevant content.</p>
    pub fn document_id(&self) -> ::std::option::Option<&str> {
        self.document_id.as_deref()
    }
    /// <p>The title of the document containing the relevant content.</p>
    pub fn document_title(&self) -> ::std::option::Option<&str> {
        self.document_title.as_deref()
    }
    /// <p>The URI of the document containing the relevant content.</p>
    pub fn document_uri(&self) -> ::std::option::Option<&str> {
        self.document_uri.as_deref()
    }
    /// <p>Additional attributes of the document containing the relevant content.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.document_attributes.is_none()`.
    pub fn document_attributes(&self) -> &[crate::types::DocumentAttribute] {
        self.document_attributes.as_deref().unwrap_or_default()
    }
    /// <p>Attributes related to the relevance score of the content.</p>
    pub fn score_attributes(&self) -> ::std::option::Option<&crate::types::ScoreAttributes> {
        self.score_attributes.as_ref()
    }
}
impl RelevantContent {
    /// Creates a new builder-style object to manufacture [`RelevantContent`](crate::types::RelevantContent).
    pub fn builder() -> crate::types::builders::RelevantContentBuilder {
        crate::types::builders::RelevantContentBuilder::default()
    }
}

/// A builder for [`RelevantContent`](crate::types::RelevantContent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RelevantContentBuilder {
    pub(crate) content: ::std::option::Option<::std::string::String>,
    pub(crate) document_id: ::std::option::Option<::std::string::String>,
    pub(crate) document_title: ::std::option::Option<::std::string::String>,
    pub(crate) document_uri: ::std::option::Option<::std::string::String>,
    pub(crate) document_attributes: ::std::option::Option<::std::vec::Vec<crate::types::DocumentAttribute>>,
    pub(crate) score_attributes: ::std::option::Option<crate::types::ScoreAttributes>,
}
impl RelevantContentBuilder {
    /// <p>The actual content of the relevant item.</p>
    pub fn content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The actual content of the relevant item.</p>
    pub fn set_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// <p>The actual content of the relevant item.</p>
    pub fn get_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.content
    }
    /// <p>The unique identifier of the document containing the relevant content.</p>
    pub fn document_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.document_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the document containing the relevant content.</p>
    pub fn set_document_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.document_id = input;
        self
    }
    /// <p>The unique identifier of the document containing the relevant content.</p>
    pub fn get_document_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.document_id
    }
    /// <p>The title of the document containing the relevant content.</p>
    pub fn document_title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.document_title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of the document containing the relevant content.</p>
    pub fn set_document_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.document_title = input;
        self
    }
    /// <p>The title of the document containing the relevant content.</p>
    pub fn get_document_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.document_title
    }
    /// <p>The URI of the document containing the relevant content.</p>
    pub fn document_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.document_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URI of the document containing the relevant content.</p>
    pub fn set_document_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.document_uri = input;
        self
    }
    /// <p>The URI of the document containing the relevant content.</p>
    pub fn get_document_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.document_uri
    }
    /// Appends an item to `document_attributes`.
    ///
    /// To override the contents of this collection use [`set_document_attributes`](Self::set_document_attributes).
    ///
    /// <p>Additional attributes of the document containing the relevant content.</p>
    pub fn document_attributes(mut self, input: crate::types::DocumentAttribute) -> Self {
        let mut v = self.document_attributes.unwrap_or_default();
        v.push(input);
        self.document_attributes = ::std::option::Option::Some(v);
        self
    }
    /// <p>Additional attributes of the document containing the relevant content.</p>
    pub fn set_document_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DocumentAttribute>>) -> Self {
        self.document_attributes = input;
        self
    }
    /// <p>Additional attributes of the document containing the relevant content.</p>
    pub fn get_document_attributes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DocumentAttribute>> {
        &self.document_attributes
    }
    /// <p>Attributes related to the relevance score of the content.</p>
    pub fn score_attributes(mut self, input: crate::types::ScoreAttributes) -> Self {
        self.score_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Attributes related to the relevance score of the content.</p>
    pub fn set_score_attributes(mut self, input: ::std::option::Option<crate::types::ScoreAttributes>) -> Self {
        self.score_attributes = input;
        self
    }
    /// <p>Attributes related to the relevance score of the content.</p>
    pub fn get_score_attributes(&self) -> &::std::option::Option<crate::types::ScoreAttributes> {
        &self.score_attributes
    }
    /// Consumes the builder and constructs a [`RelevantContent`](crate::types::RelevantContent).
    pub fn build(self) -> crate::types::RelevantContent {
        crate::types::RelevantContent {
            content: self.content,
            document_id: self.document_id,
            document_title: self.document_title,
            document_uri: self.document_uri,
            document_attributes: self.document_attributes,
            score_attributes: self.score_attributes,
        }
    }
}
