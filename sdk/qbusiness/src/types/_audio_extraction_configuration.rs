// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration settings for audio content extraction and processing.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AudioExtractionConfiguration {
    /// <p>The status of audio extraction (ENABLED or DISABLED) for processing audio content from files.</p>
    pub audio_extraction_status: crate::types::AudioExtractionStatus,
}
impl AudioExtractionConfiguration {
    /// <p>The status of audio extraction (ENABLED or DISABLED) for processing audio content from files.</p>
    pub fn audio_extraction_status(&self) -> &crate::types::AudioExtractionStatus {
        &self.audio_extraction_status
    }
}
impl AudioExtractionConfiguration {
    /// Creates a new builder-style object to manufacture [`AudioExtractionConfiguration`](crate::types::AudioExtractionConfiguration).
    pub fn builder() -> crate::types::builders::AudioExtractionConfigurationBuilder {
        crate::types::builders::AudioExtractionConfigurationBuilder::default()
    }
}

/// A builder for [`AudioExtractionConfiguration`](crate::types::AudioExtractionConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AudioExtractionConfigurationBuilder {
    pub(crate) audio_extraction_status: ::std::option::Option<crate::types::AudioExtractionStatus>,
}
impl AudioExtractionConfigurationBuilder {
    /// <p>The status of audio extraction (ENABLED or DISABLED) for processing audio content from files.</p>
    /// This field is required.
    pub fn audio_extraction_status(mut self, input: crate::types::AudioExtractionStatus) -> Self {
        self.audio_extraction_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of audio extraction (ENABLED or DISABLED) for processing audio content from files.</p>
    pub fn set_audio_extraction_status(mut self, input: ::std::option::Option<crate::types::AudioExtractionStatus>) -> Self {
        self.audio_extraction_status = input;
        self
    }
    /// <p>The status of audio extraction (ENABLED or DISABLED) for processing audio content from files.</p>
    pub fn get_audio_extraction_status(&self) -> &::std::option::Option<crate::types::AudioExtractionStatus> {
        &self.audio_extraction_status
    }
    /// Consumes the builder and constructs a [`AudioExtractionConfiguration`](crate::types::AudioExtractionConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`audio_extraction_status`](crate::types::builders::AudioExtractionConfigurationBuilder::audio_extraction_status)
    pub fn build(self) -> ::std::result::Result<crate::types::AudioExtractionConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AudioExtractionConfiguration {
            audio_extraction_status: self.audio_extraction_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "audio_extraction_status",
                    "audio_extraction_status was not specified but it is required when building AudioExtractionConfiguration",
                )
            })?,
        })
    }
}
