// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A configuration event activated by an end user request to select a specific chat mode.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfigurationEvent {
    /// <p>The chat modes available to an Amazon Q Business end user.</p>
    /// <ul>
    /// <li>
    /// <p><code>RETRIEVAL_MODE</code> - The default chat mode for an Amazon Q Business application. When this mode is enabled, Amazon Q Business generates responses only from data sources connected to an Amazon Q Business application.</p></li>
    /// <li>
    /// <p><code>CREATOR_MODE</code> - By selecting this mode, users can choose to generate responses only from the LLM knowledge, without consulting connected data sources, for a chat request.</p></li>
    /// <li>
    /// <p><code>PLUGIN_MODE</code> - By selecting this mode, users can choose to use plugins in chat.</p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/guardrails.html">Admin controls and guardrails</a>, <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/plugins.html">Plugins</a>, and <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/using-web-experience.html#chat-source-scope">Conversation settings</a>.</p>
    pub chat_mode: ::std::option::Option<crate::types::ChatMode>,
    /// <p>Configuration information for Amazon Q Business conversation modes.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/guardrails.html">Admin controls and guardrails</a> and <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/using-web-experience.html#chat-source-scope">Conversation settings</a>.</p>
    pub chat_mode_configuration: ::std::option::Option<crate::types::ChatModeConfiguration>,
    /// <p>Enables filtering of responses based on document attributes or metadata fields.</p>
    pub attribute_filter: ::std::option::Option<crate::types::AttributeFilter>,
}
impl ConfigurationEvent {
    /// <p>The chat modes available to an Amazon Q Business end user.</p>
    /// <ul>
    /// <li>
    /// <p><code>RETRIEVAL_MODE</code> - The default chat mode for an Amazon Q Business application. When this mode is enabled, Amazon Q Business generates responses only from data sources connected to an Amazon Q Business application.</p></li>
    /// <li>
    /// <p><code>CREATOR_MODE</code> - By selecting this mode, users can choose to generate responses only from the LLM knowledge, without consulting connected data sources, for a chat request.</p></li>
    /// <li>
    /// <p><code>PLUGIN_MODE</code> - By selecting this mode, users can choose to use plugins in chat.</p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/guardrails.html">Admin controls and guardrails</a>, <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/plugins.html">Plugins</a>, and <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/using-web-experience.html#chat-source-scope">Conversation settings</a>.</p>
    pub fn chat_mode(&self) -> ::std::option::Option<&crate::types::ChatMode> {
        self.chat_mode.as_ref()
    }
    /// <p>Configuration information for Amazon Q Business conversation modes.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/guardrails.html">Admin controls and guardrails</a> and <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/using-web-experience.html#chat-source-scope">Conversation settings</a>.</p>
    pub fn chat_mode_configuration(&self) -> ::std::option::Option<&crate::types::ChatModeConfiguration> {
        self.chat_mode_configuration.as_ref()
    }
    /// <p>Enables filtering of responses based on document attributes or metadata fields.</p>
    pub fn attribute_filter(&self) -> ::std::option::Option<&crate::types::AttributeFilter> {
        self.attribute_filter.as_ref()
    }
}
impl ConfigurationEvent {
    /// Creates a new builder-style object to manufacture [`ConfigurationEvent`](crate::types::ConfigurationEvent).
    pub fn builder() -> crate::types::builders::ConfigurationEventBuilder {
        crate::types::builders::ConfigurationEventBuilder::default()
    }
}

/// A builder for [`ConfigurationEvent`](crate::types::ConfigurationEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConfigurationEventBuilder {
    pub(crate) chat_mode: ::std::option::Option<crate::types::ChatMode>,
    pub(crate) chat_mode_configuration: ::std::option::Option<crate::types::ChatModeConfiguration>,
    pub(crate) attribute_filter: ::std::option::Option<crate::types::AttributeFilter>,
}
impl ConfigurationEventBuilder {
    /// <p>The chat modes available to an Amazon Q Business end user.</p>
    /// <ul>
    /// <li>
    /// <p><code>RETRIEVAL_MODE</code> - The default chat mode for an Amazon Q Business application. When this mode is enabled, Amazon Q Business generates responses only from data sources connected to an Amazon Q Business application.</p></li>
    /// <li>
    /// <p><code>CREATOR_MODE</code> - By selecting this mode, users can choose to generate responses only from the LLM knowledge, without consulting connected data sources, for a chat request.</p></li>
    /// <li>
    /// <p><code>PLUGIN_MODE</code> - By selecting this mode, users can choose to use plugins in chat.</p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/guardrails.html">Admin controls and guardrails</a>, <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/plugins.html">Plugins</a>, and <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/using-web-experience.html#chat-source-scope">Conversation settings</a>.</p>
    pub fn chat_mode(mut self, input: crate::types::ChatMode) -> Self {
        self.chat_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The chat modes available to an Amazon Q Business end user.</p>
    /// <ul>
    /// <li>
    /// <p><code>RETRIEVAL_MODE</code> - The default chat mode for an Amazon Q Business application. When this mode is enabled, Amazon Q Business generates responses only from data sources connected to an Amazon Q Business application.</p></li>
    /// <li>
    /// <p><code>CREATOR_MODE</code> - By selecting this mode, users can choose to generate responses only from the LLM knowledge, without consulting connected data sources, for a chat request.</p></li>
    /// <li>
    /// <p><code>PLUGIN_MODE</code> - By selecting this mode, users can choose to use plugins in chat.</p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/guardrails.html">Admin controls and guardrails</a>, <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/plugins.html">Plugins</a>, and <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/using-web-experience.html#chat-source-scope">Conversation settings</a>.</p>
    pub fn set_chat_mode(mut self, input: ::std::option::Option<crate::types::ChatMode>) -> Self {
        self.chat_mode = input;
        self
    }
    /// <p>The chat modes available to an Amazon Q Business end user.</p>
    /// <ul>
    /// <li>
    /// <p><code>RETRIEVAL_MODE</code> - The default chat mode for an Amazon Q Business application. When this mode is enabled, Amazon Q Business generates responses only from data sources connected to an Amazon Q Business application.</p></li>
    /// <li>
    /// <p><code>CREATOR_MODE</code> - By selecting this mode, users can choose to generate responses only from the LLM knowledge, without consulting connected data sources, for a chat request.</p></li>
    /// <li>
    /// <p><code>PLUGIN_MODE</code> - By selecting this mode, users can choose to use plugins in chat.</p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/guardrails.html">Admin controls and guardrails</a>, <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/plugins.html">Plugins</a>, and <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/using-web-experience.html#chat-source-scope">Conversation settings</a>.</p>
    pub fn get_chat_mode(&self) -> &::std::option::Option<crate::types::ChatMode> {
        &self.chat_mode
    }
    /// <p>Configuration information for Amazon Q Business conversation modes.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/guardrails.html">Admin controls and guardrails</a> and <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/using-web-experience.html#chat-source-scope">Conversation settings</a>.</p>
    pub fn chat_mode_configuration(mut self, input: crate::types::ChatModeConfiguration) -> Self {
        self.chat_mode_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration information for Amazon Q Business conversation modes.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/guardrails.html">Admin controls and guardrails</a> and <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/using-web-experience.html#chat-source-scope">Conversation settings</a>.</p>
    pub fn set_chat_mode_configuration(mut self, input: ::std::option::Option<crate::types::ChatModeConfiguration>) -> Self {
        self.chat_mode_configuration = input;
        self
    }
    /// <p>Configuration information for Amazon Q Business conversation modes.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/guardrails.html">Admin controls and guardrails</a> and <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/using-web-experience.html#chat-source-scope">Conversation settings</a>.</p>
    pub fn get_chat_mode_configuration(&self) -> &::std::option::Option<crate::types::ChatModeConfiguration> {
        &self.chat_mode_configuration
    }
    /// <p>Enables filtering of responses based on document attributes or metadata fields.</p>
    pub fn attribute_filter(mut self, input: crate::types::AttributeFilter) -> Self {
        self.attribute_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables filtering of responses based on document attributes or metadata fields.</p>
    pub fn set_attribute_filter(mut self, input: ::std::option::Option<crate::types::AttributeFilter>) -> Self {
        self.attribute_filter = input;
        self
    }
    /// <p>Enables filtering of responses based on document attributes or metadata fields.</p>
    pub fn get_attribute_filter(&self) -> &::std::option::Option<crate::types::AttributeFilter> {
        &self.attribute_filter
    }
    /// Consumes the builder and constructs a [`ConfigurationEvent`](crate::types::ConfigurationEvent).
    pub fn build(self) -> crate::types::ConfigurationEvent {
        crate::types::ConfigurationEvent {
            chat_mode: self.chat_mode,
            chat_mode_configuration: self.chat_mode_configuration,
            attribute_filter: self.attribute_filter,
        }
    }
}
