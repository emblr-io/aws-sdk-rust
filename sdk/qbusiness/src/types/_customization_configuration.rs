// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the configuration information to customize the logo, font, and color of an Amazon Q Business web experience with individual files for each property or a CSS file for them all.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomizationConfiguration {
    /// <p>Provides the URL where the custom CSS file is hosted for an Amazon Q web experience.</p>
    pub custom_css_url: ::std::option::Option<::std::string::String>,
    /// <p>Provides the URL where the custom logo file is hosted for an Amazon Q web experience.</p>
    pub logo_url: ::std::option::Option<::std::string::String>,
    /// <p>Provides the URL where the custom font file is hosted for an Amazon Q web experience.</p>
    pub font_url: ::std::option::Option<::std::string::String>,
    /// <p>Provides the URL where the custom favicon file is hosted for an Amazon Q web experience.</p>
    pub favicon_url: ::std::option::Option<::std::string::String>,
}
impl CustomizationConfiguration {
    /// <p>Provides the URL where the custom CSS file is hosted for an Amazon Q web experience.</p>
    pub fn custom_css_url(&self) -> ::std::option::Option<&str> {
        self.custom_css_url.as_deref()
    }
    /// <p>Provides the URL where the custom logo file is hosted for an Amazon Q web experience.</p>
    pub fn logo_url(&self) -> ::std::option::Option<&str> {
        self.logo_url.as_deref()
    }
    /// <p>Provides the URL where the custom font file is hosted for an Amazon Q web experience.</p>
    pub fn font_url(&self) -> ::std::option::Option<&str> {
        self.font_url.as_deref()
    }
    /// <p>Provides the URL where the custom favicon file is hosted for an Amazon Q web experience.</p>
    pub fn favicon_url(&self) -> ::std::option::Option<&str> {
        self.favicon_url.as_deref()
    }
}
impl CustomizationConfiguration {
    /// Creates a new builder-style object to manufacture [`CustomizationConfiguration`](crate::types::CustomizationConfiguration).
    pub fn builder() -> crate::types::builders::CustomizationConfigurationBuilder {
        crate::types::builders::CustomizationConfigurationBuilder::default()
    }
}

/// A builder for [`CustomizationConfiguration`](crate::types::CustomizationConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CustomizationConfigurationBuilder {
    pub(crate) custom_css_url: ::std::option::Option<::std::string::String>,
    pub(crate) logo_url: ::std::option::Option<::std::string::String>,
    pub(crate) font_url: ::std::option::Option<::std::string::String>,
    pub(crate) favicon_url: ::std::option::Option<::std::string::String>,
}
impl CustomizationConfigurationBuilder {
    /// <p>Provides the URL where the custom CSS file is hosted for an Amazon Q web experience.</p>
    pub fn custom_css_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.custom_css_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provides the URL where the custom CSS file is hosted for an Amazon Q web experience.</p>
    pub fn set_custom_css_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.custom_css_url = input;
        self
    }
    /// <p>Provides the URL where the custom CSS file is hosted for an Amazon Q web experience.</p>
    pub fn get_custom_css_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.custom_css_url
    }
    /// <p>Provides the URL where the custom logo file is hosted for an Amazon Q web experience.</p>
    pub fn logo_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.logo_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provides the URL where the custom logo file is hosted for an Amazon Q web experience.</p>
    pub fn set_logo_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.logo_url = input;
        self
    }
    /// <p>Provides the URL where the custom logo file is hosted for an Amazon Q web experience.</p>
    pub fn get_logo_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.logo_url
    }
    /// <p>Provides the URL where the custom font file is hosted for an Amazon Q web experience.</p>
    pub fn font_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.font_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provides the URL where the custom font file is hosted for an Amazon Q web experience.</p>
    pub fn set_font_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.font_url = input;
        self
    }
    /// <p>Provides the URL where the custom font file is hosted for an Amazon Q web experience.</p>
    pub fn get_font_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.font_url
    }
    /// <p>Provides the URL where the custom favicon file is hosted for an Amazon Q web experience.</p>
    pub fn favicon_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.favicon_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provides the URL where the custom favicon file is hosted for an Amazon Q web experience.</p>
    pub fn set_favicon_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.favicon_url = input;
        self
    }
    /// <p>Provides the URL where the custom favicon file is hosted for an Amazon Q web experience.</p>
    pub fn get_favicon_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.favicon_url
    }
    /// Consumes the builder and constructs a [`CustomizationConfiguration`](crate::types::CustomizationConfiguration).
    pub fn build(self) -> crate::types::CustomizationConfiguration {
        crate::types::CustomizationConfiguration {
            custom_css_url: self.custom_css_url,
            logo_url: self.logo_url,
            font_url: self.font_url,
            favicon_url: self.favicon_url,
        }
    }
}
