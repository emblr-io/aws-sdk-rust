// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detailed information about a chat response configuration, including comprehensive settings and parameters that define how Amazon Q Business generates and formats responses.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ChatResponseConfigurationDetail {
    /// <p>A collection of specific response configuration settings that collectively define how responses are generated, formatted, and presented to users in chat interactions.</p>
    pub response_configurations:
        ::std::option::Option<::std::collections::HashMap<crate::types::ResponseConfigurationType, crate::types::ResponseConfiguration>>,
    /// <p>A summary of the response configuration details, providing a concise overview of the key parameters and settings that define the response generation behavior.</p>
    pub response_configuration_summary: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the chat response configuration, indicating whether it is active, pending, or in another state that affects its availability for use.</p>
    pub status: ::std::option::Option<crate::types::ChatResponseConfigurationStatus>,
    /// <p>Provides information about a Amazon Q Business request error.</p>
    pub error: ::std::option::Option<crate::types::ErrorDetail>,
    /// <p>The timestamp indicating when the detailed chat response configuration was last modified, helping administrators track changes and maintain version awareness.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ChatResponseConfigurationDetail {
    /// <p>A collection of specific response configuration settings that collectively define how responses are generated, formatted, and presented to users in chat interactions.</p>
    pub fn response_configurations(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<crate::types::ResponseConfigurationType, crate::types::ResponseConfiguration>> {
        self.response_configurations.as_ref()
    }
    /// <p>A summary of the response configuration details, providing a concise overview of the key parameters and settings that define the response generation behavior.</p>
    pub fn response_configuration_summary(&self) -> ::std::option::Option<&str> {
        self.response_configuration_summary.as_deref()
    }
    /// <p>The current status of the chat response configuration, indicating whether it is active, pending, or in another state that affects its availability for use.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ChatResponseConfigurationStatus> {
        self.status.as_ref()
    }
    /// <p>Provides information about a Amazon Q Business request error.</p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::ErrorDetail> {
        self.error.as_ref()
    }
    /// <p>The timestamp indicating when the detailed chat response configuration was last modified, helping administrators track changes and maintain version awareness.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl ChatResponseConfigurationDetail {
    /// Creates a new builder-style object to manufacture [`ChatResponseConfigurationDetail`](crate::types::ChatResponseConfigurationDetail).
    pub fn builder() -> crate::types::builders::ChatResponseConfigurationDetailBuilder {
        crate::types::builders::ChatResponseConfigurationDetailBuilder::default()
    }
}

/// A builder for [`ChatResponseConfigurationDetail`](crate::types::ChatResponseConfigurationDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ChatResponseConfigurationDetailBuilder {
    pub(crate) response_configurations:
        ::std::option::Option<::std::collections::HashMap<crate::types::ResponseConfigurationType, crate::types::ResponseConfiguration>>,
    pub(crate) response_configuration_summary: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ChatResponseConfigurationStatus>,
    pub(crate) error: ::std::option::Option<crate::types::ErrorDetail>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ChatResponseConfigurationDetailBuilder {
    /// Adds a key-value pair to `response_configurations`.
    ///
    /// To override the contents of this collection use [`set_response_configurations`](Self::set_response_configurations).
    ///
    /// <p>A collection of specific response configuration settings that collectively define how responses are generated, formatted, and presented to users in chat interactions.</p>
    pub fn response_configurations(mut self, k: crate::types::ResponseConfigurationType, v: crate::types::ResponseConfiguration) -> Self {
        let mut hash_map = self.response_configurations.unwrap_or_default();
        hash_map.insert(k, v);
        self.response_configurations = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A collection of specific response configuration settings that collectively define how responses are generated, formatted, and presented to users in chat interactions.</p>
    pub fn set_response_configurations(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::ResponseConfigurationType, crate::types::ResponseConfiguration>>,
    ) -> Self {
        self.response_configurations = input;
        self
    }
    /// <p>A collection of specific response configuration settings that collectively define how responses are generated, formatted, and presented to users in chat interactions.</p>
    pub fn get_response_configurations(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<crate::types::ResponseConfigurationType, crate::types::ResponseConfiguration>> {
        &self.response_configurations
    }
    /// <p>A summary of the response configuration details, providing a concise overview of the key parameters and settings that define the response generation behavior.</p>
    pub fn response_configuration_summary(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.response_configuration_summary = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A summary of the response configuration details, providing a concise overview of the key parameters and settings that define the response generation behavior.</p>
    pub fn set_response_configuration_summary(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.response_configuration_summary = input;
        self
    }
    /// <p>A summary of the response configuration details, providing a concise overview of the key parameters and settings that define the response generation behavior.</p>
    pub fn get_response_configuration_summary(&self) -> &::std::option::Option<::std::string::String> {
        &self.response_configuration_summary
    }
    /// <p>The current status of the chat response configuration, indicating whether it is active, pending, or in another state that affects its availability for use.</p>
    pub fn status(mut self, input: crate::types::ChatResponseConfigurationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the chat response configuration, indicating whether it is active, pending, or in another state that affects its availability for use.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ChatResponseConfigurationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the chat response configuration, indicating whether it is active, pending, or in another state that affects its availability for use.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ChatResponseConfigurationStatus> {
        &self.status
    }
    /// <p>Provides information about a Amazon Q Business request error.</p>
    pub fn error(mut self, input: crate::types::ErrorDetail) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides information about a Amazon Q Business request error.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::ErrorDetail>) -> Self {
        self.error = input;
        self
    }
    /// <p>Provides information about a Amazon Q Business request error.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::ErrorDetail> {
        &self.error
    }
    /// <p>The timestamp indicating when the detailed chat response configuration was last modified, helping administrators track changes and maintain version awareness.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp indicating when the detailed chat response configuration was last modified, helping administrators track changes and maintain version awareness.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp indicating when the detailed chat response configuration was last modified, helping administrators track changes and maintain version awareness.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Consumes the builder and constructs a [`ChatResponseConfigurationDetail`](crate::types::ChatResponseConfigurationDetail).
    pub fn build(self) -> crate::types::ChatResponseConfigurationDetail {
        crate::types::ChatResponseConfigurationDetail {
            response_configurations: self.response_configurations,
            response_configuration_summary: self.response_configuration_summary,
            status: self.status,
            error: self.error,
            updated_at: self.updated_at,
        }
    }
}
