// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about an audio source, including its identifier, format, and time information.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AudioSourceDetails {
    /// <p>Unique identifier for the audio media file.</p>
    pub media_id: ::std::option::Option<::std::string::String>,
    /// <p>The MIME type of the audio file (e.g., audio/mp3, audio/wav).</p>
    pub media_mime_type: ::std::option::Option<::std::string::String>,
    /// <p>The starting timestamp in milliseconds for the relevant audio segment.</p>
    pub start_time_milliseconds: ::std::option::Option<i64>,
    /// <p>The ending timestamp in milliseconds for the relevant audio segment.</p>
    pub end_time_milliseconds: ::std::option::Option<i64>,
    /// <p>The type of audio extraction performed on the content.</p>
    pub audio_extraction_type: ::std::option::Option<crate::types::AudioExtractionType>,
}
impl AudioSourceDetails {
    /// <p>Unique identifier for the audio media file.</p>
    pub fn media_id(&self) -> ::std::option::Option<&str> {
        self.media_id.as_deref()
    }
    /// <p>The MIME type of the audio file (e.g., audio/mp3, audio/wav).</p>
    pub fn media_mime_type(&self) -> ::std::option::Option<&str> {
        self.media_mime_type.as_deref()
    }
    /// <p>The starting timestamp in milliseconds for the relevant audio segment.</p>
    pub fn start_time_milliseconds(&self) -> ::std::option::Option<i64> {
        self.start_time_milliseconds
    }
    /// <p>The ending timestamp in milliseconds for the relevant audio segment.</p>
    pub fn end_time_milliseconds(&self) -> ::std::option::Option<i64> {
        self.end_time_milliseconds
    }
    /// <p>The type of audio extraction performed on the content.</p>
    pub fn audio_extraction_type(&self) -> ::std::option::Option<&crate::types::AudioExtractionType> {
        self.audio_extraction_type.as_ref()
    }
}
impl AudioSourceDetails {
    /// Creates a new builder-style object to manufacture [`AudioSourceDetails`](crate::types::AudioSourceDetails).
    pub fn builder() -> crate::types::builders::AudioSourceDetailsBuilder {
        crate::types::builders::AudioSourceDetailsBuilder::default()
    }
}

/// A builder for [`AudioSourceDetails`](crate::types::AudioSourceDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AudioSourceDetailsBuilder {
    pub(crate) media_id: ::std::option::Option<::std::string::String>,
    pub(crate) media_mime_type: ::std::option::Option<::std::string::String>,
    pub(crate) start_time_milliseconds: ::std::option::Option<i64>,
    pub(crate) end_time_milliseconds: ::std::option::Option<i64>,
    pub(crate) audio_extraction_type: ::std::option::Option<crate::types::AudioExtractionType>,
}
impl AudioSourceDetailsBuilder {
    /// <p>Unique identifier for the audio media file.</p>
    pub fn media_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.media_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier for the audio media file.</p>
    pub fn set_media_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.media_id = input;
        self
    }
    /// <p>Unique identifier for the audio media file.</p>
    pub fn get_media_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.media_id
    }
    /// <p>The MIME type of the audio file (e.g., audio/mp3, audio/wav).</p>
    pub fn media_mime_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.media_mime_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The MIME type of the audio file (e.g., audio/mp3, audio/wav).</p>
    pub fn set_media_mime_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.media_mime_type = input;
        self
    }
    /// <p>The MIME type of the audio file (e.g., audio/mp3, audio/wav).</p>
    pub fn get_media_mime_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.media_mime_type
    }
    /// <p>The starting timestamp in milliseconds for the relevant audio segment.</p>
    pub fn start_time_milliseconds(mut self, input: i64) -> Self {
        self.start_time_milliseconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The starting timestamp in milliseconds for the relevant audio segment.</p>
    pub fn set_start_time_milliseconds(mut self, input: ::std::option::Option<i64>) -> Self {
        self.start_time_milliseconds = input;
        self
    }
    /// <p>The starting timestamp in milliseconds for the relevant audio segment.</p>
    pub fn get_start_time_milliseconds(&self) -> &::std::option::Option<i64> {
        &self.start_time_milliseconds
    }
    /// <p>The ending timestamp in milliseconds for the relevant audio segment.</p>
    pub fn end_time_milliseconds(mut self, input: i64) -> Self {
        self.end_time_milliseconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ending timestamp in milliseconds for the relevant audio segment.</p>
    pub fn set_end_time_milliseconds(mut self, input: ::std::option::Option<i64>) -> Self {
        self.end_time_milliseconds = input;
        self
    }
    /// <p>The ending timestamp in milliseconds for the relevant audio segment.</p>
    pub fn get_end_time_milliseconds(&self) -> &::std::option::Option<i64> {
        &self.end_time_milliseconds
    }
    /// <p>The type of audio extraction performed on the content.</p>
    pub fn audio_extraction_type(mut self, input: crate::types::AudioExtractionType) -> Self {
        self.audio_extraction_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of audio extraction performed on the content.</p>
    pub fn set_audio_extraction_type(mut self, input: ::std::option::Option<crate::types::AudioExtractionType>) -> Self {
        self.audio_extraction_type = input;
        self
    }
    /// <p>The type of audio extraction performed on the content.</p>
    pub fn get_audio_extraction_type(&self) -> &::std::option::Option<crate::types::AudioExtractionType> {
        &self.audio_extraction_type
    }
    /// Consumes the builder and constructs a [`AudioSourceDetails`](crate::types::AudioSourceDetails).
    pub fn build(self) -> crate::types::AudioSourceDetails {
        crate::types::AudioSourceDetails {
            media_id: self.media_id,
            media_mime_type: self.media_mime_type,
            start_time_milliseconds: self.start_time_milliseconds,
            end_time_milliseconds: self.end_time_milliseconds,
            audio_extraction_type: self.audio_extraction_type,
        }
    }
}
