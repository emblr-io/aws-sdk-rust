// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary metadata information for a Amazon Q Business plugin.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PluginTypeMetadataSummary {
    /// <p>The type of the plugin.</p>
    pub r#type: ::std::option::Option<crate::types::PluginType>,
    /// <p>The category of the plugin type.</p>
    pub category: ::std::option::Option<crate::types::PluginTypeCategory>,
    /// <p>The description assigned by Amazon Q Business to a plugin. You can't modify this value.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl PluginTypeMetadataSummary {
    /// <p>The type of the plugin.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::PluginType> {
        self.r#type.as_ref()
    }
    /// <p>The category of the plugin type.</p>
    pub fn category(&self) -> ::std::option::Option<&crate::types::PluginTypeCategory> {
        self.category.as_ref()
    }
    /// <p>The description assigned by Amazon Q Business to a plugin. You can't modify this value.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl PluginTypeMetadataSummary {
    /// Creates a new builder-style object to manufacture [`PluginTypeMetadataSummary`](crate::types::PluginTypeMetadataSummary).
    pub fn builder() -> crate::types::builders::PluginTypeMetadataSummaryBuilder {
        crate::types::builders::PluginTypeMetadataSummaryBuilder::default()
    }
}

/// A builder for [`PluginTypeMetadataSummary`](crate::types::PluginTypeMetadataSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PluginTypeMetadataSummaryBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::PluginType>,
    pub(crate) category: ::std::option::Option<crate::types::PluginTypeCategory>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl PluginTypeMetadataSummaryBuilder {
    /// <p>The type of the plugin.</p>
    pub fn r#type(mut self, input: crate::types::PluginType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the plugin.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::PluginType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the plugin.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::PluginType> {
        &self.r#type
    }
    /// <p>The category of the plugin type.</p>
    pub fn category(mut self, input: crate::types::PluginTypeCategory) -> Self {
        self.category = ::std::option::Option::Some(input);
        self
    }
    /// <p>The category of the plugin type.</p>
    pub fn set_category(mut self, input: ::std::option::Option<crate::types::PluginTypeCategory>) -> Self {
        self.category = input;
        self
    }
    /// <p>The category of the plugin type.</p>
    pub fn get_category(&self) -> &::std::option::Option<crate::types::PluginTypeCategory> {
        &self.category
    }
    /// <p>The description assigned by Amazon Q Business to a plugin. You can't modify this value.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description assigned by Amazon Q Business to a plugin. You can't modify this value.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description assigned by Amazon Q Business to a plugin. You can't modify this value.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`PluginTypeMetadataSummary`](crate::types::PluginTypeMetadataSummary).
    pub fn build(self) -> crate::types::PluginTypeMetadataSummary {
        crate::types::PluginTypeMetadataSummary {
            r#type: self.r#type,
            category: self.category,
            description: self.description,
        }
    }
}
