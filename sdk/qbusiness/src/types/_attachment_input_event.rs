// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A file input event activated by a end user request to upload files into their web experience chat.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AttachmentInputEvent {
    /// <p>This is either a file directly uploaded into a web experience chat or a reference to an existing attachment that is part of a web experience chat.</p>
    pub attachment: ::std::option::Option<crate::types::AttachmentInput>,
}
impl AttachmentInputEvent {
    /// <p>This is either a file directly uploaded into a web experience chat or a reference to an existing attachment that is part of a web experience chat.</p>
    pub fn attachment(&self) -> ::std::option::Option<&crate::types::AttachmentInput> {
        self.attachment.as_ref()
    }
}
impl AttachmentInputEvent {
    /// Creates a new builder-style object to manufacture [`AttachmentInputEvent`](crate::types::AttachmentInputEvent).
    pub fn builder() -> crate::types::builders::AttachmentInputEventBuilder {
        crate::types::builders::AttachmentInputEventBuilder::default()
    }
}

/// A builder for [`AttachmentInputEvent`](crate::types::AttachmentInputEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AttachmentInputEventBuilder {
    pub(crate) attachment: ::std::option::Option<crate::types::AttachmentInput>,
}
impl AttachmentInputEventBuilder {
    /// <p>This is either a file directly uploaded into a web experience chat or a reference to an existing attachment that is part of a web experience chat.</p>
    pub fn attachment(mut self, input: crate::types::AttachmentInput) -> Self {
        self.attachment = ::std::option::Option::Some(input);
        self
    }
    /// <p>This is either a file directly uploaded into a web experience chat or a reference to an existing attachment that is part of a web experience chat.</p>
    pub fn set_attachment(mut self, input: ::std::option::Option<crate::types::AttachmentInput>) -> Self {
        self.attachment = input;
        self
    }
    /// <p>This is either a file directly uploaded into a web experience chat or a reference to an existing attachment that is part of a web experience chat.</p>
    pub fn get_attachment(&self) -> &::std::option::Option<crate::types::AttachmentInput> {
        &self.attachment
    }
    /// Consumes the builder and constructs a [`AttachmentInputEvent`](crate::types::AttachmentInputEvent).
    pub fn build(self) -> crate::types::AttachmentInputEvent {
        crate::types::AttachmentInputEvent { attachment: self.attachment }
    }
}
