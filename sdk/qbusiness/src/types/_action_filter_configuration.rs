// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies filters to apply to an allowed action.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ActionFilterConfiguration {
    /// <p>Enables filtering of responses based on document attributes or metadata fields.</p>
    pub document_attribute_filter: ::std::option::Option<crate::types::AttributeFilter>,
}
impl ActionFilterConfiguration {
    /// <p>Enables filtering of responses based on document attributes or metadata fields.</p>
    pub fn document_attribute_filter(&self) -> ::std::option::Option<&crate::types::AttributeFilter> {
        self.document_attribute_filter.as_ref()
    }
}
impl ActionFilterConfiguration {
    /// Creates a new builder-style object to manufacture [`ActionFilterConfiguration`](crate::types::ActionFilterConfiguration).
    pub fn builder() -> crate::types::builders::ActionFilterConfigurationBuilder {
        crate::types::builders::ActionFilterConfigurationBuilder::default()
    }
}

/// A builder for [`ActionFilterConfiguration`](crate::types::ActionFilterConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ActionFilterConfigurationBuilder {
    pub(crate) document_attribute_filter: ::std::option::Option<crate::types::AttributeFilter>,
}
impl ActionFilterConfigurationBuilder {
    /// <p>Enables filtering of responses based on document attributes or metadata fields.</p>
    /// This field is required.
    pub fn document_attribute_filter(mut self, input: crate::types::AttributeFilter) -> Self {
        self.document_attribute_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables filtering of responses based on document attributes or metadata fields.</p>
    pub fn set_document_attribute_filter(mut self, input: ::std::option::Option<crate::types::AttributeFilter>) -> Self {
        self.document_attribute_filter = input;
        self
    }
    /// <p>Enables filtering of responses based on document attributes or metadata fields.</p>
    pub fn get_document_attribute_filter(&self) -> &::std::option::Option<crate::types::AttributeFilter> {
        &self.document_attribute_filter
    }
    /// Consumes the builder and constructs a [`ActionFilterConfiguration`](crate::types::ActionFilterConfiguration).
    pub fn build(self) -> crate::types::ActionFilterConfiguration {
        crate::types::ActionFilterConfiguration {
            document_attribute_filter: self.document_attribute_filter,
        }
    }
}
