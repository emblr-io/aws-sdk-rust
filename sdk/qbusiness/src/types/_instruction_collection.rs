// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A set of instructions that define how Amazon Q Business should generate and format responses to user queries. This collection includes parameters for controlling response characteristics such as length, audience targeting, perspective, style, identity, tone, and custom instructions.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InstructionCollection {
    /// <p>Specifies the desired length of responses generated by Amazon Q Business. This parameter allows administrators to control whether responses are concise and brief or more detailed and comprehensive.</p>
    pub response_length: ::std::option::Option<::std::string::String>,
    /// <p>Defines the intended audience for the responses, allowing Amazon Q Business to tailor its language, terminology, and explanations appropriately. This could range from technical experts to general users with varying levels of domain knowledge.</p>
    pub target_audience: ::std::option::Option<::std::string::String>,
    /// <p>Determines the point of view or perspective from which Amazon Q Business generates responses, such as first-person, second-person, or third-person perspective, affecting how information is presented to users.</p>
    pub perspective: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the formatting and structural style of responses, such as bullet points, paragraphs, step-by-step instructions, or other organizational formats that enhance readability and comprehension.</p>
    pub output_style: ::std::option::Option<::std::string::String>,
    /// <p>Defines the persona or identity that Amazon Q Business should adopt when responding to users, allowing for customization of the assistant's character, role, or representation within an organization.</p>
    pub identity: ::std::option::Option<::std::string::String>,
    /// <p>Controls the emotional tone and communication style of responses, such as formal, casual, technical, friendly, or professional, to align with organizational communication standards and user expectations.</p>
    pub tone: ::std::option::Option<::std::string::String>,
    /// <p>Allows administrators to provide specific, custom instructions that guide how Amazon Q Business should respond in particular scenarios or to certain types of queries, enabling fine-grained control over response generation.</p>
    pub custom_instructions: ::std::option::Option<::std::string::String>,
    /// <p>Provides sample responses or templates that Amazon Q Business can reference when generating responses, helping to establish consistent patterns and formats for different types of user queries.</p>
    pub examples: ::std::option::Option<::std::string::String>,
}
impl InstructionCollection {
    /// <p>Specifies the desired length of responses generated by Amazon Q Business. This parameter allows administrators to control whether responses are concise and brief or more detailed and comprehensive.</p>
    pub fn response_length(&self) -> ::std::option::Option<&str> {
        self.response_length.as_deref()
    }
    /// <p>Defines the intended audience for the responses, allowing Amazon Q Business to tailor its language, terminology, and explanations appropriately. This could range from technical experts to general users with varying levels of domain knowledge.</p>
    pub fn target_audience(&self) -> ::std::option::Option<&str> {
        self.target_audience.as_deref()
    }
    /// <p>Determines the point of view or perspective from which Amazon Q Business generates responses, such as first-person, second-person, or third-person perspective, affecting how information is presented to users.</p>
    pub fn perspective(&self) -> ::std::option::Option<&str> {
        self.perspective.as_deref()
    }
    /// <p>Specifies the formatting and structural style of responses, such as bullet points, paragraphs, step-by-step instructions, or other organizational formats that enhance readability and comprehension.</p>
    pub fn output_style(&self) -> ::std::option::Option<&str> {
        self.output_style.as_deref()
    }
    /// <p>Defines the persona or identity that Amazon Q Business should adopt when responding to users, allowing for customization of the assistant's character, role, or representation within an organization.</p>
    pub fn identity(&self) -> ::std::option::Option<&str> {
        self.identity.as_deref()
    }
    /// <p>Controls the emotional tone and communication style of responses, such as formal, casual, technical, friendly, or professional, to align with organizational communication standards and user expectations.</p>
    pub fn tone(&self) -> ::std::option::Option<&str> {
        self.tone.as_deref()
    }
    /// <p>Allows administrators to provide specific, custom instructions that guide how Amazon Q Business should respond in particular scenarios or to certain types of queries, enabling fine-grained control over response generation.</p>
    pub fn custom_instructions(&self) -> ::std::option::Option<&str> {
        self.custom_instructions.as_deref()
    }
    /// <p>Provides sample responses or templates that Amazon Q Business can reference when generating responses, helping to establish consistent patterns and formats for different types of user queries.</p>
    pub fn examples(&self) -> ::std::option::Option<&str> {
        self.examples.as_deref()
    }
}
impl InstructionCollection {
    /// Creates a new builder-style object to manufacture [`InstructionCollection`](crate::types::InstructionCollection).
    pub fn builder() -> crate::types::builders::InstructionCollectionBuilder {
        crate::types::builders::InstructionCollectionBuilder::default()
    }
}

/// A builder for [`InstructionCollection`](crate::types::InstructionCollection).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InstructionCollectionBuilder {
    pub(crate) response_length: ::std::option::Option<::std::string::String>,
    pub(crate) target_audience: ::std::option::Option<::std::string::String>,
    pub(crate) perspective: ::std::option::Option<::std::string::String>,
    pub(crate) output_style: ::std::option::Option<::std::string::String>,
    pub(crate) identity: ::std::option::Option<::std::string::String>,
    pub(crate) tone: ::std::option::Option<::std::string::String>,
    pub(crate) custom_instructions: ::std::option::Option<::std::string::String>,
    pub(crate) examples: ::std::option::Option<::std::string::String>,
}
impl InstructionCollectionBuilder {
    /// <p>Specifies the desired length of responses generated by Amazon Q Business. This parameter allows administrators to control whether responses are concise and brief or more detailed and comprehensive.</p>
    pub fn response_length(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.response_length = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the desired length of responses generated by Amazon Q Business. This parameter allows administrators to control whether responses are concise and brief or more detailed and comprehensive.</p>
    pub fn set_response_length(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.response_length = input;
        self
    }
    /// <p>Specifies the desired length of responses generated by Amazon Q Business. This parameter allows administrators to control whether responses are concise and brief or more detailed and comprehensive.</p>
    pub fn get_response_length(&self) -> &::std::option::Option<::std::string::String> {
        &self.response_length
    }
    /// <p>Defines the intended audience for the responses, allowing Amazon Q Business to tailor its language, terminology, and explanations appropriately. This could range from technical experts to general users with varying levels of domain knowledge.</p>
    pub fn target_audience(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_audience = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Defines the intended audience for the responses, allowing Amazon Q Business to tailor its language, terminology, and explanations appropriately. This could range from technical experts to general users with varying levels of domain knowledge.</p>
    pub fn set_target_audience(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_audience = input;
        self
    }
    /// <p>Defines the intended audience for the responses, allowing Amazon Q Business to tailor its language, terminology, and explanations appropriately. This could range from technical experts to general users with varying levels of domain knowledge.</p>
    pub fn get_target_audience(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_audience
    }
    /// <p>Determines the point of view or perspective from which Amazon Q Business generates responses, such as first-person, second-person, or third-person perspective, affecting how information is presented to users.</p>
    pub fn perspective(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.perspective = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Determines the point of view or perspective from which Amazon Q Business generates responses, such as first-person, second-person, or third-person perspective, affecting how information is presented to users.</p>
    pub fn set_perspective(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.perspective = input;
        self
    }
    /// <p>Determines the point of view or perspective from which Amazon Q Business generates responses, such as first-person, second-person, or third-person perspective, affecting how information is presented to users.</p>
    pub fn get_perspective(&self) -> &::std::option::Option<::std::string::String> {
        &self.perspective
    }
    /// <p>Specifies the formatting and structural style of responses, such as bullet points, paragraphs, step-by-step instructions, or other organizational formats that enhance readability and comprehension.</p>
    pub fn output_style(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.output_style = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the formatting and structural style of responses, such as bullet points, paragraphs, step-by-step instructions, or other organizational formats that enhance readability and comprehension.</p>
    pub fn set_output_style(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.output_style = input;
        self
    }
    /// <p>Specifies the formatting and structural style of responses, such as bullet points, paragraphs, step-by-step instructions, or other organizational formats that enhance readability and comprehension.</p>
    pub fn get_output_style(&self) -> &::std::option::Option<::std::string::String> {
        &self.output_style
    }
    /// <p>Defines the persona or identity that Amazon Q Business should adopt when responding to users, allowing for customization of the assistant's character, role, or representation within an organization.</p>
    pub fn identity(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Defines the persona or identity that Amazon Q Business should adopt when responding to users, allowing for customization of the assistant's character, role, or representation within an organization.</p>
    pub fn set_identity(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity = input;
        self
    }
    /// <p>Defines the persona or identity that Amazon Q Business should adopt when responding to users, allowing for customization of the assistant's character, role, or representation within an organization.</p>
    pub fn get_identity(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity
    }
    /// <p>Controls the emotional tone and communication style of responses, such as formal, casual, technical, friendly, or professional, to align with organizational communication standards and user expectations.</p>
    pub fn tone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Controls the emotional tone and communication style of responses, such as formal, casual, technical, friendly, or professional, to align with organizational communication standards and user expectations.</p>
    pub fn set_tone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tone = input;
        self
    }
    /// <p>Controls the emotional tone and communication style of responses, such as formal, casual, technical, friendly, or professional, to align with organizational communication standards and user expectations.</p>
    pub fn get_tone(&self) -> &::std::option::Option<::std::string::String> {
        &self.tone
    }
    /// <p>Allows administrators to provide specific, custom instructions that guide how Amazon Q Business should respond in particular scenarios or to certain types of queries, enabling fine-grained control over response generation.</p>
    pub fn custom_instructions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.custom_instructions = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Allows administrators to provide specific, custom instructions that guide how Amazon Q Business should respond in particular scenarios or to certain types of queries, enabling fine-grained control over response generation.</p>
    pub fn set_custom_instructions(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.custom_instructions = input;
        self
    }
    /// <p>Allows administrators to provide specific, custom instructions that guide how Amazon Q Business should respond in particular scenarios or to certain types of queries, enabling fine-grained control over response generation.</p>
    pub fn get_custom_instructions(&self) -> &::std::option::Option<::std::string::String> {
        &self.custom_instructions
    }
    /// <p>Provides sample responses or templates that Amazon Q Business can reference when generating responses, helping to establish consistent patterns and formats for different types of user queries.</p>
    pub fn examples(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.examples = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provides sample responses or templates that Amazon Q Business can reference when generating responses, helping to establish consistent patterns and formats for different types of user queries.</p>
    pub fn set_examples(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.examples = input;
        self
    }
    /// <p>Provides sample responses or templates that Amazon Q Business can reference when generating responses, helping to establish consistent patterns and formats for different types of user queries.</p>
    pub fn get_examples(&self) -> &::std::option::Option<::std::string::String> {
        &self.examples
    }
    /// Consumes the builder and constructs a [`InstructionCollection`](crate::types::InstructionCollection).
    pub fn build(self) -> crate::types::InstructionCollection {
        crate::types::InstructionCollection {
            response_length: self.response_length,
            target_audience: self.target_audience,
            perspective: self.perspective,
            output_style: self.output_style,
            identity: self.identity,
            tone: self.tone,
            custom_instructions: self.custom_instructions,
            examples: self.examples,
        }
    }
}
