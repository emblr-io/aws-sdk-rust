// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of an Amazon Q Business subscription.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SubscriptionDetails {
    /// <p>The type of an Amazon Q Business subscription.</p>
    pub r#type: ::std::option::Option<crate::types::SubscriptionType>,
}
impl SubscriptionDetails {
    /// <p>The type of an Amazon Q Business subscription.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::SubscriptionType> {
        self.r#type.as_ref()
    }
}
impl SubscriptionDetails {
    /// Creates a new builder-style object to manufacture [`SubscriptionDetails`](crate::types::SubscriptionDetails).
    pub fn builder() -> crate::types::builders::SubscriptionDetailsBuilder {
        crate::types::builders::SubscriptionDetailsBuilder::default()
    }
}

/// A builder for [`SubscriptionDetails`](crate::types::SubscriptionDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SubscriptionDetailsBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::SubscriptionType>,
}
impl SubscriptionDetailsBuilder {
    /// <p>The type of an Amazon Q Business subscription.</p>
    pub fn r#type(mut self, input: crate::types::SubscriptionType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of an Amazon Q Business subscription.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::SubscriptionType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of an Amazon Q Business subscription.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::SubscriptionType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`SubscriptionDetails`](crate::types::SubscriptionDetails).
    pub fn build(self) -> crate::types::SubscriptionDetails {
        crate::types::SubscriptionDetails { r#type: self.r#type }
    }
}
