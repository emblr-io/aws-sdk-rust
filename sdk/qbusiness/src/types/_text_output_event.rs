// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An output event for an AI-generated response in an Amazon Q Business web experience.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TextOutputEvent {
    /// <p>The type of AI-generated message in a <code>TextOutputEvent</code>. Amazon Q Business currently supports two types of messages:</p>
    /// <ul>
    /// <li>
    /// <p><code>RESPONSE</code> - The Amazon Q Business system response.</p></li>
    /// <li>
    /// <p><code>GROUNDED_RESPONSE</code> - The corrected, hallucination-reduced, response returned by Amazon Q Business. Available only if hallucination reduction is supported and configured for the application and detected in the end user chat query by Amazon Q Business.</p></li>
    /// </ul>
    pub system_message_type: ::std::option::Option<crate::types::SystemMessageType>,
    /// <p>The identifier of the conversation with which the text output event is associated.</p>
    pub conversation_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of an end user message in a <code>TextOutputEvent</code>.</p>
    pub user_message_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of an AI-generated message in a <code>TextOutputEvent</code>.</p>
    pub system_message_id: ::std::option::Option<::std::string::String>,
    /// <p>An AI-generated message in a <code>TextOutputEvent</code>.</p>
    pub system_message: ::std::option::Option<::std::string::String>,
}
impl TextOutputEvent {
    /// <p>The type of AI-generated message in a <code>TextOutputEvent</code>. Amazon Q Business currently supports two types of messages:</p>
    /// <ul>
    /// <li>
    /// <p><code>RESPONSE</code> - The Amazon Q Business system response.</p></li>
    /// <li>
    /// <p><code>GROUNDED_RESPONSE</code> - The corrected, hallucination-reduced, response returned by Amazon Q Business. Available only if hallucination reduction is supported and configured for the application and detected in the end user chat query by Amazon Q Business.</p></li>
    /// </ul>
    pub fn system_message_type(&self) -> ::std::option::Option<&crate::types::SystemMessageType> {
        self.system_message_type.as_ref()
    }
    /// <p>The identifier of the conversation with which the text output event is associated.</p>
    pub fn conversation_id(&self) -> ::std::option::Option<&str> {
        self.conversation_id.as_deref()
    }
    /// <p>The identifier of an end user message in a <code>TextOutputEvent</code>.</p>
    pub fn user_message_id(&self) -> ::std::option::Option<&str> {
        self.user_message_id.as_deref()
    }
    /// <p>The identifier of an AI-generated message in a <code>TextOutputEvent</code>.</p>
    pub fn system_message_id(&self) -> ::std::option::Option<&str> {
        self.system_message_id.as_deref()
    }
    /// <p>An AI-generated message in a <code>TextOutputEvent</code>.</p>
    pub fn system_message(&self) -> ::std::option::Option<&str> {
        self.system_message.as_deref()
    }
}
impl TextOutputEvent {
    /// Creates a new builder-style object to manufacture [`TextOutputEvent`](crate::types::TextOutputEvent).
    pub fn builder() -> crate::types::builders::TextOutputEventBuilder {
        crate::types::builders::TextOutputEventBuilder::default()
    }
}

/// A builder for [`TextOutputEvent`](crate::types::TextOutputEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TextOutputEventBuilder {
    pub(crate) system_message_type: ::std::option::Option<crate::types::SystemMessageType>,
    pub(crate) conversation_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_message_id: ::std::option::Option<::std::string::String>,
    pub(crate) system_message_id: ::std::option::Option<::std::string::String>,
    pub(crate) system_message: ::std::option::Option<::std::string::String>,
}
impl TextOutputEventBuilder {
    /// <p>The type of AI-generated message in a <code>TextOutputEvent</code>. Amazon Q Business currently supports two types of messages:</p>
    /// <ul>
    /// <li>
    /// <p><code>RESPONSE</code> - The Amazon Q Business system response.</p></li>
    /// <li>
    /// <p><code>GROUNDED_RESPONSE</code> - The corrected, hallucination-reduced, response returned by Amazon Q Business. Available only if hallucination reduction is supported and configured for the application and detected in the end user chat query by Amazon Q Business.</p></li>
    /// </ul>
    pub fn system_message_type(mut self, input: crate::types::SystemMessageType) -> Self {
        self.system_message_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of AI-generated message in a <code>TextOutputEvent</code>. Amazon Q Business currently supports two types of messages:</p>
    /// <ul>
    /// <li>
    /// <p><code>RESPONSE</code> - The Amazon Q Business system response.</p></li>
    /// <li>
    /// <p><code>GROUNDED_RESPONSE</code> - The corrected, hallucination-reduced, response returned by Amazon Q Business. Available only if hallucination reduction is supported and configured for the application and detected in the end user chat query by Amazon Q Business.</p></li>
    /// </ul>
    pub fn set_system_message_type(mut self, input: ::std::option::Option<crate::types::SystemMessageType>) -> Self {
        self.system_message_type = input;
        self
    }
    /// <p>The type of AI-generated message in a <code>TextOutputEvent</code>. Amazon Q Business currently supports two types of messages:</p>
    /// <ul>
    /// <li>
    /// <p><code>RESPONSE</code> - The Amazon Q Business system response.</p></li>
    /// <li>
    /// <p><code>GROUNDED_RESPONSE</code> - The corrected, hallucination-reduced, response returned by Amazon Q Business. Available only if hallucination reduction is supported and configured for the application and detected in the end user chat query by Amazon Q Business.</p></li>
    /// </ul>
    pub fn get_system_message_type(&self) -> &::std::option::Option<crate::types::SystemMessageType> {
        &self.system_message_type
    }
    /// <p>The identifier of the conversation with which the text output event is associated.</p>
    pub fn conversation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.conversation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the conversation with which the text output event is associated.</p>
    pub fn set_conversation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.conversation_id = input;
        self
    }
    /// <p>The identifier of the conversation with which the text output event is associated.</p>
    pub fn get_conversation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.conversation_id
    }
    /// <p>The identifier of an end user message in a <code>TextOutputEvent</code>.</p>
    pub fn user_message_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_message_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of an end user message in a <code>TextOutputEvent</code>.</p>
    pub fn set_user_message_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_message_id = input;
        self
    }
    /// <p>The identifier of an end user message in a <code>TextOutputEvent</code>.</p>
    pub fn get_user_message_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_message_id
    }
    /// <p>The identifier of an AI-generated message in a <code>TextOutputEvent</code>.</p>
    pub fn system_message_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.system_message_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of an AI-generated message in a <code>TextOutputEvent</code>.</p>
    pub fn set_system_message_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.system_message_id = input;
        self
    }
    /// <p>The identifier of an AI-generated message in a <code>TextOutputEvent</code>.</p>
    pub fn get_system_message_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.system_message_id
    }
    /// <p>An AI-generated message in a <code>TextOutputEvent</code>.</p>
    pub fn system_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.system_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An AI-generated message in a <code>TextOutputEvent</code>.</p>
    pub fn set_system_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.system_message = input;
        self
    }
    /// <p>An AI-generated message in a <code>TextOutputEvent</code>.</p>
    pub fn get_system_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.system_message
    }
    /// Consumes the builder and constructs a [`TextOutputEvent`](crate::types::TextOutputEvent).
    pub fn build(self) -> crate::types::TextOutputEvent {
        crate::types::TextOutputEvent {
            system_message_type: self.system_message_type,
            conversation_id: self.conversation_id,
            user_message_id: self.user_message_id,
            system_message_id: self.system_message_id,
            system_message: self.system_message,
        }
    }
}
