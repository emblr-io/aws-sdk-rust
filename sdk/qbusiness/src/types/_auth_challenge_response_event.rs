// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An authentication verification event response by a third party authentication server to Amazon Q Business.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuthChallengeResponseEvent {
    /// <p>The mapping of key-value pairs in an authentication challenge response.</p>
    pub response_map: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl AuthChallengeResponseEvent {
    /// <p>The mapping of key-value pairs in an authentication challenge response.</p>
    pub fn response_map(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.response_map
    }
}
impl AuthChallengeResponseEvent {
    /// Creates a new builder-style object to manufacture [`AuthChallengeResponseEvent`](crate::types::AuthChallengeResponseEvent).
    pub fn builder() -> crate::types::builders::AuthChallengeResponseEventBuilder {
        crate::types::builders::AuthChallengeResponseEventBuilder::default()
    }
}

/// A builder for [`AuthChallengeResponseEvent`](crate::types::AuthChallengeResponseEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AuthChallengeResponseEventBuilder {
    pub(crate) response_map: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl AuthChallengeResponseEventBuilder {
    /// Adds a key-value pair to `response_map`.
    ///
    /// To override the contents of this collection use [`set_response_map`](Self::set_response_map).
    ///
    /// <p>The mapping of key-value pairs in an authentication challenge response.</p>
    pub fn response_map(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.response_map.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.response_map = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The mapping of key-value pairs in an authentication challenge response.</p>
    pub fn set_response_map(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.response_map = input;
        self
    }
    /// <p>The mapping of key-value pairs in an authentication challenge response.</p>
    pub fn get_response_map(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.response_map
    }
    /// Consumes the builder and constructs a [`AuthChallengeResponseEvent`](crate::types::AuthChallengeResponseEvent).
    /// This method will fail if any of the following fields are not set:
    /// - [`response_map`](crate::types::builders::AuthChallengeResponseEventBuilder::response_map)
    pub fn build(self) -> ::std::result::Result<crate::types::AuthChallengeResponseEvent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AuthChallengeResponseEvent {
            response_map: self.response_map.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "response_map",
                    "response_map was not specified but it is required when building AuthChallengeResponseEvent",
                )
            })?,
        })
    }
}
