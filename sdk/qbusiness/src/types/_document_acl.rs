// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the Access Control List (ACL) for a document, containing both allowlist and denylist conditions.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DocumentAcl {
    /// <p>The allowlist conditions for the document. Users or groups matching these conditions are granted access to the document.</p>
    pub allowlist: ::std::option::Option<crate::types::DocumentAclMembership>,
    /// <p>The denylist conditions for the document. Users or groups matching these conditions are denied access to the document, overriding allowlist permissions.</p>
    pub deny_list: ::std::option::Option<crate::types::DocumentAclMembership>,
}
impl DocumentAcl {
    /// <p>The allowlist conditions for the document. Users or groups matching these conditions are granted access to the document.</p>
    pub fn allowlist(&self) -> ::std::option::Option<&crate::types::DocumentAclMembership> {
        self.allowlist.as_ref()
    }
    /// <p>The denylist conditions for the document. Users or groups matching these conditions are denied access to the document, overriding allowlist permissions.</p>
    pub fn deny_list(&self) -> ::std::option::Option<&crate::types::DocumentAclMembership> {
        self.deny_list.as_ref()
    }
}
impl DocumentAcl {
    /// Creates a new builder-style object to manufacture [`DocumentAcl`](crate::types::DocumentAcl).
    pub fn builder() -> crate::types::builders::DocumentAclBuilder {
        crate::types::builders::DocumentAclBuilder::default()
    }
}

/// A builder for [`DocumentAcl`](crate::types::DocumentAcl).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DocumentAclBuilder {
    pub(crate) allowlist: ::std::option::Option<crate::types::DocumentAclMembership>,
    pub(crate) deny_list: ::std::option::Option<crate::types::DocumentAclMembership>,
}
impl DocumentAclBuilder {
    /// <p>The allowlist conditions for the document. Users or groups matching these conditions are granted access to the document.</p>
    pub fn allowlist(mut self, input: crate::types::DocumentAclMembership) -> Self {
        self.allowlist = ::std::option::Option::Some(input);
        self
    }
    /// <p>The allowlist conditions for the document. Users or groups matching these conditions are granted access to the document.</p>
    pub fn set_allowlist(mut self, input: ::std::option::Option<crate::types::DocumentAclMembership>) -> Self {
        self.allowlist = input;
        self
    }
    /// <p>The allowlist conditions for the document. Users or groups matching these conditions are granted access to the document.</p>
    pub fn get_allowlist(&self) -> &::std::option::Option<crate::types::DocumentAclMembership> {
        &self.allowlist
    }
    /// <p>The denylist conditions for the document. Users or groups matching these conditions are denied access to the document, overriding allowlist permissions.</p>
    pub fn deny_list(mut self, input: crate::types::DocumentAclMembership) -> Self {
        self.deny_list = ::std::option::Option::Some(input);
        self
    }
    /// <p>The denylist conditions for the document. Users or groups matching these conditions are denied access to the document, overriding allowlist permissions.</p>
    pub fn set_deny_list(mut self, input: ::std::option::Option<crate::types::DocumentAclMembership>) -> Self {
        self.deny_list = input;
        self
    }
    /// <p>The denylist conditions for the document. Users or groups matching these conditions are denied access to the document, overriding allowlist permissions.</p>
    pub fn get_deny_list(&self) -> &::std::option::Option<crate::types::DocumentAclMembership> {
        &self.deny_list
    }
    /// Consumes the builder and constructs a [`DocumentAcl`](crate::types::DocumentAcl).
    pub fn build(self) -> crate::types::DocumentAcl {
        crate::types::DocumentAcl {
            allowlist: self.allowlist,
            deny_list: self.deny_list,
        }
    }
}
