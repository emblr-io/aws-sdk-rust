// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A metadata event for a AI-generated text output message in a Amazon Q Business conversation, containing associated metadata generated.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetadataEvent {
    /// <p>The identifier of the conversation with which the generated metadata is associated.</p>
    pub conversation_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of an Amazon Q Business end user text input message within the conversation.</p>
    pub user_message_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of an Amazon Q Business AI generated message within the conversation.</p>
    pub system_message_id: ::std::option::Option<::std::string::String>,
    /// <p>The source documents used to generate the conversation response.</p>
    pub source_attributions: ::std::option::Option<::std::vec::Vec<::std::option::Option<crate::types::SourceAttribution>>>,
    /// <p>The final text output message generated by the system.</p>
    pub final_text_message: ::std::option::Option<::std::string::String>,
}
impl MetadataEvent {
    /// <p>The identifier of the conversation with which the generated metadata is associated.</p>
    pub fn conversation_id(&self) -> ::std::option::Option<&str> {
        self.conversation_id.as_deref()
    }
    /// <p>The identifier of an Amazon Q Business end user text input message within the conversation.</p>
    pub fn user_message_id(&self) -> ::std::option::Option<&str> {
        self.user_message_id.as_deref()
    }
    /// <p>The identifier of an Amazon Q Business AI generated message within the conversation.</p>
    pub fn system_message_id(&self) -> ::std::option::Option<&str> {
        self.system_message_id.as_deref()
    }
    /// <p>The source documents used to generate the conversation response.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.source_attributions.is_none()`.
    pub fn source_attributions(&self) -> &[::std::option::Option<crate::types::SourceAttribution>] {
        self.source_attributions.as_deref().unwrap_or_default()
    }
    /// <p>The final text output message generated by the system.</p>
    pub fn final_text_message(&self) -> ::std::option::Option<&str> {
        self.final_text_message.as_deref()
    }
}
impl MetadataEvent {
    /// Creates a new builder-style object to manufacture [`MetadataEvent`](crate::types::MetadataEvent).
    pub fn builder() -> crate::types::builders::MetadataEventBuilder {
        crate::types::builders::MetadataEventBuilder::default()
    }
}

/// A builder for [`MetadataEvent`](crate::types::MetadataEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MetadataEventBuilder {
    pub(crate) conversation_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_message_id: ::std::option::Option<::std::string::String>,
    pub(crate) system_message_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_attributions: ::std::option::Option<::std::vec::Vec<::std::option::Option<crate::types::SourceAttribution>>>,
    pub(crate) final_text_message: ::std::option::Option<::std::string::String>,
}
impl MetadataEventBuilder {
    /// <p>The identifier of the conversation with which the generated metadata is associated.</p>
    pub fn conversation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.conversation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the conversation with which the generated metadata is associated.</p>
    pub fn set_conversation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.conversation_id = input;
        self
    }
    /// <p>The identifier of the conversation with which the generated metadata is associated.</p>
    pub fn get_conversation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.conversation_id
    }
    /// <p>The identifier of an Amazon Q Business end user text input message within the conversation.</p>
    pub fn user_message_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_message_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of an Amazon Q Business end user text input message within the conversation.</p>
    pub fn set_user_message_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_message_id = input;
        self
    }
    /// <p>The identifier of an Amazon Q Business end user text input message within the conversation.</p>
    pub fn get_user_message_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_message_id
    }
    /// <p>The identifier of an Amazon Q Business AI generated message within the conversation.</p>
    pub fn system_message_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.system_message_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of an Amazon Q Business AI generated message within the conversation.</p>
    pub fn set_system_message_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.system_message_id = input;
        self
    }
    /// <p>The identifier of an Amazon Q Business AI generated message within the conversation.</p>
    pub fn get_system_message_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.system_message_id
    }
    /// Appends an item to `source_attributions`.
    ///
    /// To override the contents of this collection use [`set_source_attributions`](Self::set_source_attributions).
    ///
    /// <p>The source documents used to generate the conversation response.</p>
    pub fn source_attributions(mut self, input: ::std::option::Option<crate::types::SourceAttribution>) -> Self {
        let mut v = self.source_attributions.unwrap_or_default();
        v.push(input);
        self.source_attributions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The source documents used to generate the conversation response.</p>
    pub fn set_source_attributions(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<::std::option::Option<crate::types::SourceAttribution>>>,
    ) -> Self {
        self.source_attributions = input;
        self
    }
    /// <p>The source documents used to generate the conversation response.</p>
    pub fn get_source_attributions(&self) -> &::std::option::Option<::std::vec::Vec<::std::option::Option<crate::types::SourceAttribution>>> {
        &self.source_attributions
    }
    /// <p>The final text output message generated by the system.</p>
    pub fn final_text_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.final_text_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The final text output message generated by the system.</p>
    pub fn set_final_text_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.final_text_message = input;
        self
    }
    /// <p>The final text output message generated by the system.</p>
    pub fn get_final_text_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.final_text_message
    }
    /// Consumes the builder and constructs a [`MetadataEvent`](crate::types::MetadataEvent).
    pub fn build(self) -> crate::types::MetadataEvent {
        crate::types::MetadataEvent {
            conversation_id: self.conversation_id,
            user_message_id: self.user_message_id,
            system_message_id: self.system_message_id,
            source_attributions: self.source_attributions,
            final_text_message: self.final_text_message,
        }
    }
}
