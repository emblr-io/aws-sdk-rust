// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an Amazon Q Business subscription.</p>
/// <p>Subscriptions are used to provide access for an IAM Identity Center user or a group to an Amazon Q Business application.</p>
/// <p>Amazon Q Business offers two subscription tiers: <code>Q_LITE</code> and <code>Q_BUSINESS</code>. Subscription tier determines feature access for the user. For more information on subscriptions and pricing tiers, see <a href="https://aws.amazon.com/q/business/pricing/">Amazon Q Business pricing</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Subscription {
    /// <p>The identifier of the Amazon Q Business subscription to be updated.</p>
    pub subscription_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q Business subscription that was updated.</p>
    pub subscription_arn: ::std::option::Option<::std::string::String>,
    /// <p>The IAM Identity Center <code>UserId</code> or <code>GroupId</code> of a user or group in the IAM Identity Center instance connected to the Amazon Q Business application.</p>
    pub principal: ::std::option::Option<crate::types::SubscriptionPrincipal>,
    /// <p>The type of your current Amazon Q Business subscription.</p>
    pub current_subscription: ::std::option::Option<crate::types::SubscriptionDetails>,
    /// <p>The type of the Amazon Q Business subscription for the next month.</p>
    pub next_subscription: ::std::option::Option<crate::types::SubscriptionDetails>,
}
impl Subscription {
    /// <p>The identifier of the Amazon Q Business subscription to be updated.</p>
    pub fn subscription_id(&self) -> ::std::option::Option<&str> {
        self.subscription_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q Business subscription that was updated.</p>
    pub fn subscription_arn(&self) -> ::std::option::Option<&str> {
        self.subscription_arn.as_deref()
    }
    /// <p>The IAM Identity Center <code>UserId</code> or <code>GroupId</code> of a user or group in the IAM Identity Center instance connected to the Amazon Q Business application.</p>
    pub fn principal(&self) -> ::std::option::Option<&crate::types::SubscriptionPrincipal> {
        self.principal.as_ref()
    }
    /// <p>The type of your current Amazon Q Business subscription.</p>
    pub fn current_subscription(&self) -> ::std::option::Option<&crate::types::SubscriptionDetails> {
        self.current_subscription.as_ref()
    }
    /// <p>The type of the Amazon Q Business subscription for the next month.</p>
    pub fn next_subscription(&self) -> ::std::option::Option<&crate::types::SubscriptionDetails> {
        self.next_subscription.as_ref()
    }
}
impl Subscription {
    /// Creates a new builder-style object to manufacture [`Subscription`](crate::types::Subscription).
    pub fn builder() -> crate::types::builders::SubscriptionBuilder {
        crate::types::builders::SubscriptionBuilder::default()
    }
}

/// A builder for [`Subscription`](crate::types::Subscription).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SubscriptionBuilder {
    pub(crate) subscription_id: ::std::option::Option<::std::string::String>,
    pub(crate) subscription_arn: ::std::option::Option<::std::string::String>,
    pub(crate) principal: ::std::option::Option<crate::types::SubscriptionPrincipal>,
    pub(crate) current_subscription: ::std::option::Option<crate::types::SubscriptionDetails>,
    pub(crate) next_subscription: ::std::option::Option<crate::types::SubscriptionDetails>,
}
impl SubscriptionBuilder {
    /// <p>The identifier of the Amazon Q Business subscription to be updated.</p>
    pub fn subscription_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subscription_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q Business subscription to be updated.</p>
    pub fn set_subscription_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subscription_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q Business subscription to be updated.</p>
    pub fn get_subscription_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subscription_id
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q Business subscription that was updated.</p>
    pub fn subscription_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subscription_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q Business subscription that was updated.</p>
    pub fn set_subscription_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subscription_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q Business subscription that was updated.</p>
    pub fn get_subscription_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.subscription_arn
    }
    /// <p>The IAM Identity Center <code>UserId</code> or <code>GroupId</code> of a user or group in the IAM Identity Center instance connected to the Amazon Q Business application.</p>
    pub fn principal(mut self, input: crate::types::SubscriptionPrincipal) -> Self {
        self.principal = ::std::option::Option::Some(input);
        self
    }
    /// <p>The IAM Identity Center <code>UserId</code> or <code>GroupId</code> of a user or group in the IAM Identity Center instance connected to the Amazon Q Business application.</p>
    pub fn set_principal(mut self, input: ::std::option::Option<crate::types::SubscriptionPrincipal>) -> Self {
        self.principal = input;
        self
    }
    /// <p>The IAM Identity Center <code>UserId</code> or <code>GroupId</code> of a user or group in the IAM Identity Center instance connected to the Amazon Q Business application.</p>
    pub fn get_principal(&self) -> &::std::option::Option<crate::types::SubscriptionPrincipal> {
        &self.principal
    }
    /// <p>The type of your current Amazon Q Business subscription.</p>
    pub fn current_subscription(mut self, input: crate::types::SubscriptionDetails) -> Self {
        self.current_subscription = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of your current Amazon Q Business subscription.</p>
    pub fn set_current_subscription(mut self, input: ::std::option::Option<crate::types::SubscriptionDetails>) -> Self {
        self.current_subscription = input;
        self
    }
    /// <p>The type of your current Amazon Q Business subscription.</p>
    pub fn get_current_subscription(&self) -> &::std::option::Option<crate::types::SubscriptionDetails> {
        &self.current_subscription
    }
    /// <p>The type of the Amazon Q Business subscription for the next month.</p>
    pub fn next_subscription(mut self, input: crate::types::SubscriptionDetails) -> Self {
        self.next_subscription = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the Amazon Q Business subscription for the next month.</p>
    pub fn set_next_subscription(mut self, input: ::std::option::Option<crate::types::SubscriptionDetails>) -> Self {
        self.next_subscription = input;
        self
    }
    /// <p>The type of the Amazon Q Business subscription for the next month.</p>
    pub fn get_next_subscription(&self) -> &::std::option::Option<crate::types::SubscriptionDetails> {
        &self.next_subscription
    }
    /// Consumes the builder and constructs a [`Subscription`](crate::types::Subscription).
    pub fn build(self) -> crate::types::Subscription {
        crate::types::Subscription {
            subscription_id: self.subscription_id,
            subscription_arn: self.subscription_arn,
            principal: self.principal,
            current_subscription: self.current_subscription,
            next_subscription: self.next_subscription,
        }
    }
}
