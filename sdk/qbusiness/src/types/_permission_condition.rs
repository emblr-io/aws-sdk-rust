// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a condition that restricts when a permission is effective. Conditions allow you to control access based on specific attributes of the request.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PermissionCondition {
    /// <p>The operator to use for the condition evaluation. This determines how the condition values are compared.</p>
    pub condition_operator: crate::types::PermissionConditionOperator,
    /// <p>The key for the condition. This identifies the attribute that the condition applies to.</p>
    pub condition_key: ::std::string::String,
    /// <p>The values to compare against using the specified condition operator.</p>
    pub condition_values: ::std::vec::Vec<::std::string::String>,
}
impl PermissionCondition {
    /// <p>The operator to use for the condition evaluation. This determines how the condition values are compared.</p>
    pub fn condition_operator(&self) -> &crate::types::PermissionConditionOperator {
        &self.condition_operator
    }
    /// <p>The key for the condition. This identifies the attribute that the condition applies to.</p>
    pub fn condition_key(&self) -> &str {
        use std::ops::Deref;
        self.condition_key.deref()
    }
    /// <p>The values to compare against using the specified condition operator.</p>
    pub fn condition_values(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.condition_values.deref()
    }
}
impl PermissionCondition {
    /// Creates a new builder-style object to manufacture [`PermissionCondition`](crate::types::PermissionCondition).
    pub fn builder() -> crate::types::builders::PermissionConditionBuilder {
        crate::types::builders::PermissionConditionBuilder::default()
    }
}

/// A builder for [`PermissionCondition`](crate::types::PermissionCondition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PermissionConditionBuilder {
    pub(crate) condition_operator: ::std::option::Option<crate::types::PermissionConditionOperator>,
    pub(crate) condition_key: ::std::option::Option<::std::string::String>,
    pub(crate) condition_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PermissionConditionBuilder {
    /// <p>The operator to use for the condition evaluation. This determines how the condition values are compared.</p>
    /// This field is required.
    pub fn condition_operator(mut self, input: crate::types::PermissionConditionOperator) -> Self {
        self.condition_operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operator to use for the condition evaluation. This determines how the condition values are compared.</p>
    pub fn set_condition_operator(mut self, input: ::std::option::Option<crate::types::PermissionConditionOperator>) -> Self {
        self.condition_operator = input;
        self
    }
    /// <p>The operator to use for the condition evaluation. This determines how the condition values are compared.</p>
    pub fn get_condition_operator(&self) -> &::std::option::Option<crate::types::PermissionConditionOperator> {
        &self.condition_operator
    }
    /// <p>The key for the condition. This identifies the attribute that the condition applies to.</p>
    /// This field is required.
    pub fn condition_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.condition_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key for the condition. This identifies the attribute that the condition applies to.</p>
    pub fn set_condition_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.condition_key = input;
        self
    }
    /// <p>The key for the condition. This identifies the attribute that the condition applies to.</p>
    pub fn get_condition_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.condition_key
    }
    /// Appends an item to `condition_values`.
    ///
    /// To override the contents of this collection use [`set_condition_values`](Self::set_condition_values).
    ///
    /// <p>The values to compare against using the specified condition operator.</p>
    pub fn condition_values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.condition_values.unwrap_or_default();
        v.push(input.into());
        self.condition_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The values to compare against using the specified condition operator.</p>
    pub fn set_condition_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.condition_values = input;
        self
    }
    /// <p>The values to compare against using the specified condition operator.</p>
    pub fn get_condition_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.condition_values
    }
    /// Consumes the builder and constructs a [`PermissionCondition`](crate::types::PermissionCondition).
    /// This method will fail if any of the following fields are not set:
    /// - [`condition_operator`](crate::types::builders::PermissionConditionBuilder::condition_operator)
    /// - [`condition_key`](crate::types::builders::PermissionConditionBuilder::condition_key)
    /// - [`condition_values`](crate::types::builders::PermissionConditionBuilder::condition_values)
    pub fn build(self) -> ::std::result::Result<crate::types::PermissionCondition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PermissionCondition {
            condition_operator: self.condition_operator.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "condition_operator",
                    "condition_operator was not specified but it is required when building PermissionCondition",
                )
            })?,
            condition_key: self.condition_key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "condition_key",
                    "condition_key was not specified but it is required when building PermissionCondition",
                )
            })?,
            condition_values: self.condition_values.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "condition_values",
                    "condition_values was not specified but it is required when building PermissionCondition",
                )
            })?,
        })
    }
}
