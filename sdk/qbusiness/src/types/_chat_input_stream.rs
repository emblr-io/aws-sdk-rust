// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The streaming input for the <code>Chat</code> API.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum ChatInputStream {
    /// <p>A request from an end user to perform an Amazon Q Business plugin action.</p>
    ActionExecutionEvent(crate::types::ActionExecutionEvent),
    /// <p>A request by an end user to upload a file during chat.</p>
    AttachmentEvent(crate::types::AttachmentInputEvent),
    /// <p>An authentication verification event response by a third party authentication server to Amazon Q Business.</p>
    AuthChallengeResponseEvent(crate::types::AuthChallengeResponseEvent),
    /// <p>A configuration event activated by an end user request to select a specific chat mode.</p>
    ConfigurationEvent(crate::types::ConfigurationEvent),
    /// <p>The end of the streaming input for the <code>Chat</code> API.</p>
    EndOfInputEvent(crate::types::EndOfInputEvent),
    /// <p>Information about the payload of the <code>ChatInputStream</code> event containing the end user message input.</p>
    TextEvent(crate::types::TextInputEvent),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ChatInputStream {
    /// Tries to convert the enum instance into [`ActionExecutionEvent`](crate::types::ChatInputStream::ActionExecutionEvent), extracting the inner [`ActionExecutionEvent`](crate::types::ActionExecutionEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_action_execution_event(&self) -> ::std::result::Result<&crate::types::ActionExecutionEvent, &Self> {
        if let ChatInputStream::ActionExecutionEvent(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ActionExecutionEvent`](crate::types::ChatInputStream::ActionExecutionEvent).
    pub fn is_action_execution_event(&self) -> bool {
        self.as_action_execution_event().is_ok()
    }
    /// Tries to convert the enum instance into [`AttachmentEvent`](crate::types::ChatInputStream::AttachmentEvent), extracting the inner [`AttachmentInputEvent`](crate::types::AttachmentInputEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_attachment_event(&self) -> ::std::result::Result<&crate::types::AttachmentInputEvent, &Self> {
        if let ChatInputStream::AttachmentEvent(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AttachmentEvent`](crate::types::ChatInputStream::AttachmentEvent).
    pub fn is_attachment_event(&self) -> bool {
        self.as_attachment_event().is_ok()
    }
    /// Tries to convert the enum instance into [`AuthChallengeResponseEvent`](crate::types::ChatInputStream::AuthChallengeResponseEvent), extracting the inner [`AuthChallengeResponseEvent`](crate::types::AuthChallengeResponseEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_auth_challenge_response_event(&self) -> ::std::result::Result<&crate::types::AuthChallengeResponseEvent, &Self> {
        if let ChatInputStream::AuthChallengeResponseEvent(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AuthChallengeResponseEvent`](crate::types::ChatInputStream::AuthChallengeResponseEvent).
    pub fn is_auth_challenge_response_event(&self) -> bool {
        self.as_auth_challenge_response_event().is_ok()
    }
    /// Tries to convert the enum instance into [`ConfigurationEvent`](crate::types::ChatInputStream::ConfigurationEvent), extracting the inner [`ConfigurationEvent`](crate::types::ConfigurationEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_configuration_event(&self) -> ::std::result::Result<&crate::types::ConfigurationEvent, &Self> {
        if let ChatInputStream::ConfigurationEvent(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ConfigurationEvent`](crate::types::ChatInputStream::ConfigurationEvent).
    pub fn is_configuration_event(&self) -> bool {
        self.as_configuration_event().is_ok()
    }
    /// Tries to convert the enum instance into [`EndOfInputEvent`](crate::types::ChatInputStream::EndOfInputEvent), extracting the inner [`EndOfInputEvent`](crate::types::EndOfInputEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_end_of_input_event(&self) -> ::std::result::Result<&crate::types::EndOfInputEvent, &Self> {
        if let ChatInputStream::EndOfInputEvent(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`EndOfInputEvent`](crate::types::ChatInputStream::EndOfInputEvent).
    pub fn is_end_of_input_event(&self) -> bool {
        self.as_end_of_input_event().is_ok()
    }
    /// Tries to convert the enum instance into [`TextEvent`](crate::types::ChatInputStream::TextEvent), extracting the inner [`TextInputEvent`](crate::types::TextInputEvent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_text_event(&self) -> ::std::result::Result<&crate::types::TextInputEvent, &Self> {
        if let ChatInputStream::TextEvent(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`TextEvent`](crate::types::ChatInputStream::TextEvent).
    pub fn is_text_event(&self) -> bool {
        self.as_text_event().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
