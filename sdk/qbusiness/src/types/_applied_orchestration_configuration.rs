// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The chat orchestration specific admin controls configured for an Amazon Q Business application. Determines whether Amazon Q Business automatically routes chat requests across configured plugins and data sources in your Amazon Q Business application.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/guardrails-global-controls.html#guardrails-global-orchestration">Chat orchestration settings</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AppliedOrchestrationConfiguration {
    /// <p>Information about whether chat orchestration is enabled or disabled for an Amazon Q Business application.</p>
    pub control: crate::types::OrchestrationControl,
}
impl AppliedOrchestrationConfiguration {
    /// <p>Information about whether chat orchestration is enabled or disabled for an Amazon Q Business application.</p>
    pub fn control(&self) -> &crate::types::OrchestrationControl {
        &self.control
    }
}
impl AppliedOrchestrationConfiguration {
    /// Creates a new builder-style object to manufacture [`AppliedOrchestrationConfiguration`](crate::types::AppliedOrchestrationConfiguration).
    pub fn builder() -> crate::types::builders::AppliedOrchestrationConfigurationBuilder {
        crate::types::builders::AppliedOrchestrationConfigurationBuilder::default()
    }
}

/// A builder for [`AppliedOrchestrationConfiguration`](crate::types::AppliedOrchestrationConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AppliedOrchestrationConfigurationBuilder {
    pub(crate) control: ::std::option::Option<crate::types::OrchestrationControl>,
}
impl AppliedOrchestrationConfigurationBuilder {
    /// <p>Information about whether chat orchestration is enabled or disabled for an Amazon Q Business application.</p>
    /// This field is required.
    pub fn control(mut self, input: crate::types::OrchestrationControl) -> Self {
        self.control = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about whether chat orchestration is enabled or disabled for an Amazon Q Business application.</p>
    pub fn set_control(mut self, input: ::std::option::Option<crate::types::OrchestrationControl>) -> Self {
        self.control = input;
        self
    }
    /// <p>Information about whether chat orchestration is enabled or disabled for an Amazon Q Business application.</p>
    pub fn get_control(&self) -> &::std::option::Option<crate::types::OrchestrationControl> {
        &self.control
    }
    /// Consumes the builder and constructs a [`AppliedOrchestrationConfiguration`](crate::types::AppliedOrchestrationConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`control`](crate::types::builders::AppliedOrchestrationConfigurationBuilder::control)
    pub fn build(self) -> ::std::result::Result<crate::types::AppliedOrchestrationConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AppliedOrchestrationConfiguration {
            control: self.control.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "control",
                    "control was not specified but it is required when building AppliedOrchestrationConfiguration",
                )
            })?,
        })
    }
}
