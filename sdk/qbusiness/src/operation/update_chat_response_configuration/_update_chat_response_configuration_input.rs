// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateChatResponseConfigurationInput {
    /// <p>The unique identifier of the Amazon Q Business application containing the chat response configuration to update.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the chat response configuration to update within the specified application.</p>
    pub chat_response_configuration_id: ::std::option::Option<::std::string::String>,
    /// <p>The new human-readable name to assign to the chat response configuration, making it easier to identify among multiple configurations.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The updated collection of response configuration settings that define how Amazon Q Business generates and formats responses to user queries.</p>
    pub response_configurations:
        ::std::option::Option<::std::collections::HashMap<crate::types::ResponseConfigurationType, crate::types::ResponseConfiguration>>,
    /// <p>A unique, case-sensitive identifier to ensure idempotency of the request. This helps prevent the same update from being processed multiple times if retries occur.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateChatResponseConfigurationInput {
    /// <p>The unique identifier of the Amazon Q Business application containing the chat response configuration to update.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The unique identifier of the chat response configuration to update within the specified application.</p>
    pub fn chat_response_configuration_id(&self) -> ::std::option::Option<&str> {
        self.chat_response_configuration_id.as_deref()
    }
    /// <p>The new human-readable name to assign to the chat response configuration, making it easier to identify among multiple configurations.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The updated collection of response configuration settings that define how Amazon Q Business generates and formats responses to user queries.</p>
    pub fn response_configurations(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<crate::types::ResponseConfigurationType, crate::types::ResponseConfiguration>> {
        self.response_configurations.as_ref()
    }
    /// <p>A unique, case-sensitive identifier to ensure idempotency of the request. This helps prevent the same update from being processed multiple times if retries occur.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl UpdateChatResponseConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateChatResponseConfigurationInput`](crate::operation::update_chat_response_configuration::UpdateChatResponseConfigurationInput).
    pub fn builder() -> crate::operation::update_chat_response_configuration::builders::UpdateChatResponseConfigurationInputBuilder {
        crate::operation::update_chat_response_configuration::builders::UpdateChatResponseConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateChatResponseConfigurationInput`](crate::operation::update_chat_response_configuration::UpdateChatResponseConfigurationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateChatResponseConfigurationInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) chat_response_configuration_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) response_configurations:
        ::std::option::Option<::std::collections::HashMap<crate::types::ResponseConfigurationType, crate::types::ResponseConfiguration>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateChatResponseConfigurationInputBuilder {
    /// <p>The unique identifier of the Amazon Q Business application containing the chat response configuration to update.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Amazon Q Business application containing the chat response configuration to update.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier of the Amazon Q Business application containing the chat response configuration to update.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The unique identifier of the chat response configuration to update within the specified application.</p>
    /// This field is required.
    pub fn chat_response_configuration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.chat_response_configuration_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the chat response configuration to update within the specified application.</p>
    pub fn set_chat_response_configuration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.chat_response_configuration_id = input;
        self
    }
    /// <p>The unique identifier of the chat response configuration to update within the specified application.</p>
    pub fn get_chat_response_configuration_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.chat_response_configuration_id
    }
    /// <p>The new human-readable name to assign to the chat response configuration, making it easier to identify among multiple configurations.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new human-readable name to assign to the chat response configuration, making it easier to identify among multiple configurations.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The new human-readable name to assign to the chat response configuration, making it easier to identify among multiple configurations.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// Adds a key-value pair to `response_configurations`.
    ///
    /// To override the contents of this collection use [`set_response_configurations`](Self::set_response_configurations).
    ///
    /// <p>The updated collection of response configuration settings that define how Amazon Q Business generates and formats responses to user queries.</p>
    pub fn response_configurations(mut self, k: crate::types::ResponseConfigurationType, v: crate::types::ResponseConfiguration) -> Self {
        let mut hash_map = self.response_configurations.unwrap_or_default();
        hash_map.insert(k, v);
        self.response_configurations = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The updated collection of response configuration settings that define how Amazon Q Business generates and formats responses to user queries.</p>
    pub fn set_response_configurations(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::ResponseConfigurationType, crate::types::ResponseConfiguration>>,
    ) -> Self {
        self.response_configurations = input;
        self
    }
    /// <p>The updated collection of response configuration settings that define how Amazon Q Business generates and formats responses to user queries.</p>
    pub fn get_response_configurations(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<crate::types::ResponseConfigurationType, crate::types::ResponseConfiguration>> {
        &self.response_configurations
    }
    /// <p>A unique, case-sensitive identifier to ensure idempotency of the request. This helps prevent the same update from being processed multiple times if retries occur.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure idempotency of the request. This helps prevent the same update from being processed multiple times if retries occur.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure idempotency of the request. This helps prevent the same update from being processed multiple times if retries occur.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`UpdateChatResponseConfigurationInput`](crate::operation::update_chat_response_configuration::UpdateChatResponseConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_chat_response_configuration::UpdateChatResponseConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_chat_response_configuration::UpdateChatResponseConfigurationInput {
                application_id: self.application_id,
                chat_response_configuration_id: self.chat_response_configuration_id,
                display_name: self.display_name,
                response_configurations: self.response_configurations,
                client_token: self.client_token,
            },
        )
    }
}
