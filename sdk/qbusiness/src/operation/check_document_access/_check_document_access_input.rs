// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CheckDocumentAccessInput {
    /// <p>The unique identifier of the application. This is required to identify the specific Amazon Q Business application context for the document access check.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the index. Used to locate the correct index within the application where the document is stored.</p>
    pub index_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the user. Used to check the access permissions for this specific user against the document's ACL.</p>
    pub user_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the document. Specifies which document's access permissions are being checked.</p>
    pub document_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the data source. Identifies the specific data source from which the document originates. Should not be used when a document is uploaded directly with BatchPutDocument, as no dataSourceId is available or necessary.</p>
    pub data_source_id: ::std::option::Option<::std::string::String>,
}
impl CheckDocumentAccessInput {
    /// <p>The unique identifier of the application. This is required to identify the specific Amazon Q Business application context for the document access check.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The unique identifier of the index. Used to locate the correct index within the application where the document is stored.</p>
    pub fn index_id(&self) -> ::std::option::Option<&str> {
        self.index_id.as_deref()
    }
    /// <p>The unique identifier of the user. Used to check the access permissions for this specific user against the document's ACL.</p>
    pub fn user_id(&self) -> ::std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>The unique identifier of the document. Specifies which document's access permissions are being checked.</p>
    pub fn document_id(&self) -> ::std::option::Option<&str> {
        self.document_id.as_deref()
    }
    /// <p>The unique identifier of the data source. Identifies the specific data source from which the document originates. Should not be used when a document is uploaded directly with BatchPutDocument, as no dataSourceId is available or necessary.</p>
    pub fn data_source_id(&self) -> ::std::option::Option<&str> {
        self.data_source_id.as_deref()
    }
}
impl CheckDocumentAccessInput {
    /// Creates a new builder-style object to manufacture [`CheckDocumentAccessInput`](crate::operation::check_document_access::CheckDocumentAccessInput).
    pub fn builder() -> crate::operation::check_document_access::builders::CheckDocumentAccessInputBuilder {
        crate::operation::check_document_access::builders::CheckDocumentAccessInputBuilder::default()
    }
}

/// A builder for [`CheckDocumentAccessInput`](crate::operation::check_document_access::CheckDocumentAccessInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CheckDocumentAccessInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) index_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
    pub(crate) document_id: ::std::option::Option<::std::string::String>,
    pub(crate) data_source_id: ::std::option::Option<::std::string::String>,
}
impl CheckDocumentAccessInputBuilder {
    /// <p>The unique identifier of the application. This is required to identify the specific Amazon Q Business application context for the document access check.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the application. This is required to identify the specific Amazon Q Business application context for the document access check.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier of the application. This is required to identify the specific Amazon Q Business application context for the document access check.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The unique identifier of the index. Used to locate the correct index within the application where the document is stored.</p>
    /// This field is required.
    pub fn index_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.index_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the index. Used to locate the correct index within the application where the document is stored.</p>
    pub fn set_index_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.index_id = input;
        self
    }
    /// <p>The unique identifier of the index. Used to locate the correct index within the application where the document is stored.</p>
    pub fn get_index_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.index_id
    }
    /// <p>The unique identifier of the user. Used to check the access permissions for this specific user against the document's ACL.</p>
    /// This field is required.
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the user. Used to check the access permissions for this specific user against the document's ACL.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The unique identifier of the user. Used to check the access permissions for this specific user against the document's ACL.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// <p>The unique identifier of the document. Specifies which document's access permissions are being checked.</p>
    /// This field is required.
    pub fn document_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.document_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the document. Specifies which document's access permissions are being checked.</p>
    pub fn set_document_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.document_id = input;
        self
    }
    /// <p>The unique identifier of the document. Specifies which document's access permissions are being checked.</p>
    pub fn get_document_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.document_id
    }
    /// <p>The unique identifier of the data source. Identifies the specific data source from which the document originates. Should not be used when a document is uploaded directly with BatchPutDocument, as no dataSourceId is available or necessary.</p>
    pub fn data_source_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_source_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the data source. Identifies the specific data source from which the document originates. Should not be used when a document is uploaded directly with BatchPutDocument, as no dataSourceId is available or necessary.</p>
    pub fn set_data_source_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_source_id = input;
        self
    }
    /// <p>The unique identifier of the data source. Identifies the specific data source from which the document originates. Should not be used when a document is uploaded directly with BatchPutDocument, as no dataSourceId is available or necessary.</p>
    pub fn get_data_source_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_source_id
    }
    /// Consumes the builder and constructs a [`CheckDocumentAccessInput`](crate::operation::check_document_access::CheckDocumentAccessInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::check_document_access::CheckDocumentAccessInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::check_document_access::CheckDocumentAccessInput {
            application_id: self.application_id,
            index_id: self.index_id,
            user_id: self.user_id,
            document_id: self.document_id,
            data_source_id: self.data_source_id,
        })
    }
}
