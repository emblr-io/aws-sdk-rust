// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CheckDocumentAccessOutput {
    /// <p>An array of groups the user is part of for the specified data source. Each group has a name and type.</p>
    pub user_groups: ::std::option::Option<::std::vec::Vec<crate::types::AssociatedGroup>>,
    /// <p>An array of aliases associated with the user. This includes both global and local aliases, each with a name and type.</p>
    pub user_aliases: ::std::option::Option<::std::vec::Vec<crate::types::AssociatedUser>>,
    /// <p>A boolean value indicating whether the specified user has access to the document, either direct access or transitive access via groups and aliases attached to the document.</p>
    pub has_access: ::std::option::Option<bool>,
    /// <p>The Access Control List (ACL) associated with the document. Includes allowlist and denylist conditions that determine user access.</p>
    pub document_acl: ::std::option::Option<crate::types::DocumentAcl>,
    _request_id: Option<String>,
}
impl CheckDocumentAccessOutput {
    /// <p>An array of groups the user is part of for the specified data source. Each group has a name and type.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_groups.is_none()`.
    pub fn user_groups(&self) -> &[crate::types::AssociatedGroup] {
        self.user_groups.as_deref().unwrap_or_default()
    }
    /// <p>An array of aliases associated with the user. This includes both global and local aliases, each with a name and type.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_aliases.is_none()`.
    pub fn user_aliases(&self) -> &[crate::types::AssociatedUser] {
        self.user_aliases.as_deref().unwrap_or_default()
    }
    /// <p>A boolean value indicating whether the specified user has access to the document, either direct access or transitive access via groups and aliases attached to the document.</p>
    pub fn has_access(&self) -> ::std::option::Option<bool> {
        self.has_access
    }
    /// <p>The Access Control List (ACL) associated with the document. Includes allowlist and denylist conditions that determine user access.</p>
    pub fn document_acl(&self) -> ::std::option::Option<&crate::types::DocumentAcl> {
        self.document_acl.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for CheckDocumentAccessOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CheckDocumentAccessOutput {
    /// Creates a new builder-style object to manufacture [`CheckDocumentAccessOutput`](crate::operation::check_document_access::CheckDocumentAccessOutput).
    pub fn builder() -> crate::operation::check_document_access::builders::CheckDocumentAccessOutputBuilder {
        crate::operation::check_document_access::builders::CheckDocumentAccessOutputBuilder::default()
    }
}

/// A builder for [`CheckDocumentAccessOutput`](crate::operation::check_document_access::CheckDocumentAccessOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CheckDocumentAccessOutputBuilder {
    pub(crate) user_groups: ::std::option::Option<::std::vec::Vec<crate::types::AssociatedGroup>>,
    pub(crate) user_aliases: ::std::option::Option<::std::vec::Vec<crate::types::AssociatedUser>>,
    pub(crate) has_access: ::std::option::Option<bool>,
    pub(crate) document_acl: ::std::option::Option<crate::types::DocumentAcl>,
    _request_id: Option<String>,
}
impl CheckDocumentAccessOutputBuilder {
    /// Appends an item to `user_groups`.
    ///
    /// To override the contents of this collection use [`set_user_groups`](Self::set_user_groups).
    ///
    /// <p>An array of groups the user is part of for the specified data source. Each group has a name and type.</p>
    pub fn user_groups(mut self, input: crate::types::AssociatedGroup) -> Self {
        let mut v = self.user_groups.unwrap_or_default();
        v.push(input);
        self.user_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of groups the user is part of for the specified data source. Each group has a name and type.</p>
    pub fn set_user_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AssociatedGroup>>) -> Self {
        self.user_groups = input;
        self
    }
    /// <p>An array of groups the user is part of for the specified data source. Each group has a name and type.</p>
    pub fn get_user_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AssociatedGroup>> {
        &self.user_groups
    }
    /// Appends an item to `user_aliases`.
    ///
    /// To override the contents of this collection use [`set_user_aliases`](Self::set_user_aliases).
    ///
    /// <p>An array of aliases associated with the user. This includes both global and local aliases, each with a name and type.</p>
    pub fn user_aliases(mut self, input: crate::types::AssociatedUser) -> Self {
        let mut v = self.user_aliases.unwrap_or_default();
        v.push(input);
        self.user_aliases = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of aliases associated with the user. This includes both global and local aliases, each with a name and type.</p>
    pub fn set_user_aliases(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AssociatedUser>>) -> Self {
        self.user_aliases = input;
        self
    }
    /// <p>An array of aliases associated with the user. This includes both global and local aliases, each with a name and type.</p>
    pub fn get_user_aliases(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AssociatedUser>> {
        &self.user_aliases
    }
    /// <p>A boolean value indicating whether the specified user has access to the document, either direct access or transitive access via groups and aliases attached to the document.</p>
    pub fn has_access(mut self, input: bool) -> Self {
        self.has_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>A boolean value indicating whether the specified user has access to the document, either direct access or transitive access via groups and aliases attached to the document.</p>
    pub fn set_has_access(mut self, input: ::std::option::Option<bool>) -> Self {
        self.has_access = input;
        self
    }
    /// <p>A boolean value indicating whether the specified user has access to the document, either direct access or transitive access via groups and aliases attached to the document.</p>
    pub fn get_has_access(&self) -> &::std::option::Option<bool> {
        &self.has_access
    }
    /// <p>The Access Control List (ACL) associated with the document. Includes allowlist and denylist conditions that determine user access.</p>
    pub fn document_acl(mut self, input: crate::types::DocumentAcl) -> Self {
        self.document_acl = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Access Control List (ACL) associated with the document. Includes allowlist and denylist conditions that determine user access.</p>
    pub fn set_document_acl(mut self, input: ::std::option::Option<crate::types::DocumentAcl>) -> Self {
        self.document_acl = input;
        self
    }
    /// <p>The Access Control List (ACL) associated with the document. Includes allowlist and denylist conditions that determine user access.</p>
    pub fn get_document_acl(&self) -> &::std::option::Option<crate::types::DocumentAcl> {
        &self.document_acl
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CheckDocumentAccessOutput`](crate::operation::check_document_access::CheckDocumentAccessOutput).
    pub fn build(self) -> crate::operation::check_document_access::CheckDocumentAccessOutput {
        crate::operation::check_document_access::CheckDocumentAccessOutput {
            user_groups: self.user_groups,
            user_aliases: self.user_aliases,
            has_access: self.has_access,
            document_acl: self.document_acl,
            _request_id: self._request_id,
        }
    }
}
