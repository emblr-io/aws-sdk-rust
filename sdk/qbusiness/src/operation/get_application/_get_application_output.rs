// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetApplicationOutput {
    /// <p>The name of the Amazon Q Business application.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the Amazon Q Business application.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q Business application.</p>
    pub application_arn: ::std::option::Option<::std::string::String>,
    /// <p>The authentication type being used by a Amazon Q Business application.</p>
    pub identity_type: ::std::option::Option<crate::types::IdentityType>,
    /// <p>The Amazon Resource Name (ARN) of an identity provider being used by an Amazon Q Business application.</p>
    pub iam_identity_provider_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the AWS IAM Identity Center instance attached to your Amazon Q Business application.</p>
    pub identity_center_application_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM with permissions to access your CloudWatch logs and metrics.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the Amazon Q Business application.</p>
    pub status: ::std::option::Option<crate::types::ApplicationStatus>,
    /// <p>A description for the Amazon Q Business application.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the Amazon Web Services KMS key that is used to encrypt your data. Amazon Q Business doesn't support asymmetric keys.</p>
    pub encryption_configuration: ::std::option::Option<crate::types::EncryptionConfiguration>,
    /// <p>The Unix timestamp when the Amazon Q Business application was last updated.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Unix timestamp when the Amazon Q Business application was last updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>If the <code>Status</code> field is set to <code>ERROR</code>, the <code>ErrorMessage</code> field contains a description of the error that caused the synchronization to fail.</p>
    pub error: ::std::option::Option<crate::types::ErrorDetail>,
    /// <p>Settings for whether end users can upload files directly during chat.</p>
    pub attachments_configuration: ::std::option::Option<crate::types::AppliedAttachmentsConfiguration>,
    /// <p>Settings for whether end users can create and use Amazon Q Apps in the web experience.</p>
    pub q_apps_configuration: ::std::option::Option<crate::types::QAppsConfiguration>,
    /// <p>Configuration information about chat response personalization. For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/personalizing-chat-responses.html">Personalizing chat responses</a>.</p>
    pub personalization_configuration: ::std::option::Option<crate::types::PersonalizationConfiguration>,
    /// <p>Settings for auto-subscription behavior for this application. This is only applicable to SAML and OIDC applications.</p>
    pub auto_subscription_configuration: ::std::option::Option<crate::types::AutoSubscriptionConfiguration>,
    /// <p>The OIDC client ID for a Amazon Q Business application.</p>
    pub client_ids_for_oidc: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The Amazon QuickSight authentication configuration for the Amazon Q Business application.</p>
    pub quick_sight_configuration: ::std::option::Option<crate::types::QuickSightConfiguration>,
    _request_id: Option<String>,
}
impl GetApplicationOutput {
    /// <p>The name of the Amazon Q Business application.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The identifier of the Amazon Q Business application.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q Business application.</p>
    pub fn application_arn(&self) -> ::std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>The authentication type being used by a Amazon Q Business application.</p>
    pub fn identity_type(&self) -> ::std::option::Option<&crate::types::IdentityType> {
        self.identity_type.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of an identity provider being used by an Amazon Q Business application.</p>
    pub fn iam_identity_provider_arn(&self) -> ::std::option::Option<&str> {
        self.iam_identity_provider_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the AWS IAM Identity Center instance attached to your Amazon Q Business application.</p>
    pub fn identity_center_application_arn(&self) -> ::std::option::Option<&str> {
        self.identity_center_application_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM with permissions to access your CloudWatch logs and metrics.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The status of the Amazon Q Business application.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ApplicationStatus> {
        self.status.as_ref()
    }
    /// <p>A description for the Amazon Q Business application.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The identifier of the Amazon Web Services KMS key that is used to encrypt your data. Amazon Q Business doesn't support asymmetric keys.</p>
    pub fn encryption_configuration(&self) -> ::std::option::Option<&crate::types::EncryptionConfiguration> {
        self.encryption_configuration.as_ref()
    }
    /// <p>The Unix timestamp when the Amazon Q Business application was last updated.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The Unix timestamp when the Amazon Q Business application was last updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>If the <code>Status</code> field is set to <code>ERROR</code>, the <code>ErrorMessage</code> field contains a description of the error that caused the synchronization to fail.</p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::ErrorDetail> {
        self.error.as_ref()
    }
    /// <p>Settings for whether end users can upload files directly during chat.</p>
    pub fn attachments_configuration(&self) -> ::std::option::Option<&crate::types::AppliedAttachmentsConfiguration> {
        self.attachments_configuration.as_ref()
    }
    /// <p>Settings for whether end users can create and use Amazon Q Apps in the web experience.</p>
    pub fn q_apps_configuration(&self) -> ::std::option::Option<&crate::types::QAppsConfiguration> {
        self.q_apps_configuration.as_ref()
    }
    /// <p>Configuration information about chat response personalization. For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/personalizing-chat-responses.html">Personalizing chat responses</a>.</p>
    pub fn personalization_configuration(&self) -> ::std::option::Option<&crate::types::PersonalizationConfiguration> {
        self.personalization_configuration.as_ref()
    }
    /// <p>Settings for auto-subscription behavior for this application. This is only applicable to SAML and OIDC applications.</p>
    pub fn auto_subscription_configuration(&self) -> ::std::option::Option<&crate::types::AutoSubscriptionConfiguration> {
        self.auto_subscription_configuration.as_ref()
    }
    /// <p>The OIDC client ID for a Amazon Q Business application.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.client_ids_for_oidc.is_none()`.
    pub fn client_ids_for_oidc(&self) -> &[::std::string::String] {
        self.client_ids_for_oidc.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon QuickSight authentication configuration for the Amazon Q Business application.</p>
    pub fn quick_sight_configuration(&self) -> ::std::option::Option<&crate::types::QuickSightConfiguration> {
        self.quick_sight_configuration.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetApplicationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetApplicationOutput {
    /// Creates a new builder-style object to manufacture [`GetApplicationOutput`](crate::operation::get_application::GetApplicationOutput).
    pub fn builder() -> crate::operation::get_application::builders::GetApplicationOutputBuilder {
        crate::operation::get_application::builders::GetApplicationOutputBuilder::default()
    }
}

/// A builder for [`GetApplicationOutput`](crate::operation::get_application::GetApplicationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetApplicationOutputBuilder {
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) application_arn: ::std::option::Option<::std::string::String>,
    pub(crate) identity_type: ::std::option::Option<crate::types::IdentityType>,
    pub(crate) iam_identity_provider_arn: ::std::option::Option<::std::string::String>,
    pub(crate) identity_center_application_arn: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ApplicationStatus>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_configuration: ::std::option::Option<crate::types::EncryptionConfiguration>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) error: ::std::option::Option<crate::types::ErrorDetail>,
    pub(crate) attachments_configuration: ::std::option::Option<crate::types::AppliedAttachmentsConfiguration>,
    pub(crate) q_apps_configuration: ::std::option::Option<crate::types::QAppsConfiguration>,
    pub(crate) personalization_configuration: ::std::option::Option<crate::types::PersonalizationConfiguration>,
    pub(crate) auto_subscription_configuration: ::std::option::Option<crate::types::AutoSubscriptionConfiguration>,
    pub(crate) client_ids_for_oidc: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) quick_sight_configuration: ::std::option::Option<crate::types::QuickSightConfiguration>,
    _request_id: Option<String>,
}
impl GetApplicationOutputBuilder {
    /// <p>The name of the Amazon Q Business application.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon Q Business application.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The name of the Amazon Q Business application.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The identifier of the Amazon Q Business application.</p>
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q Business application.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q Business application.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q Business application.</p>
    pub fn application_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q Business application.</p>
    pub fn set_application_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q Business application.</p>
    pub fn get_application_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_arn
    }
    /// <p>The authentication type being used by a Amazon Q Business application.</p>
    pub fn identity_type(mut self, input: crate::types::IdentityType) -> Self {
        self.identity_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication type being used by a Amazon Q Business application.</p>
    pub fn set_identity_type(mut self, input: ::std::option::Option<crate::types::IdentityType>) -> Self {
        self.identity_type = input;
        self
    }
    /// <p>The authentication type being used by a Amazon Q Business application.</p>
    pub fn get_identity_type(&self) -> &::std::option::Option<crate::types::IdentityType> {
        &self.identity_type
    }
    /// <p>The Amazon Resource Name (ARN) of an identity provider being used by an Amazon Q Business application.</p>
    pub fn iam_identity_provider_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_identity_provider_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an identity provider being used by an Amazon Q Business application.</p>
    pub fn set_iam_identity_provider_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_identity_provider_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an identity provider being used by an Amazon Q Business application.</p>
    pub fn get_iam_identity_provider_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_identity_provider_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the AWS IAM Identity Center instance attached to your Amazon Q Business application.</p>
    pub fn identity_center_application_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity_center_application_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AWS IAM Identity Center instance attached to your Amazon Q Business application.</p>
    pub fn set_identity_center_application_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity_center_application_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AWS IAM Identity Center instance attached to your Amazon Q Business application.</p>
    pub fn get_identity_center_application_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity_center_application_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM with permissions to access your CloudWatch logs and metrics.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM with permissions to access your CloudWatch logs and metrics.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM with permissions to access your CloudWatch logs and metrics.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The status of the Amazon Q Business application.</p>
    pub fn status(mut self, input: crate::types::ApplicationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the Amazon Q Business application.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ApplicationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the Amazon Q Business application.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ApplicationStatus> {
        &self.status
    }
    /// <p>A description for the Amazon Q Business application.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description for the Amazon Q Business application.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description for the Amazon Q Business application.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The identifier of the Amazon Web Services KMS key that is used to encrypt your data. Amazon Q Business doesn't support asymmetric keys.</p>
    pub fn encryption_configuration(mut self, input: crate::types::EncryptionConfiguration) -> Self {
        self.encryption_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The identifier of the Amazon Web Services KMS key that is used to encrypt your data. Amazon Q Business doesn't support asymmetric keys.</p>
    pub fn set_encryption_configuration(mut self, input: ::std::option::Option<crate::types::EncryptionConfiguration>) -> Self {
        self.encryption_configuration = input;
        self
    }
    /// <p>The identifier of the Amazon Web Services KMS key that is used to encrypt your data. Amazon Q Business doesn't support asymmetric keys.</p>
    pub fn get_encryption_configuration(&self) -> &::std::option::Option<crate::types::EncryptionConfiguration> {
        &self.encryption_configuration
    }
    /// <p>The Unix timestamp when the Amazon Q Business application was last updated.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp when the Amazon Q Business application was last updated.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The Unix timestamp when the Amazon Q Business application was last updated.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The Unix timestamp when the Amazon Q Business application was last updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp when the Amazon Q Business application was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The Unix timestamp when the Amazon Q Business application was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>If the <code>Status</code> field is set to <code>ERROR</code>, the <code>ErrorMessage</code> field contains a description of the error that caused the synchronization to fail.</p>
    pub fn error(mut self, input: crate::types::ErrorDetail) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the <code>Status</code> field is set to <code>ERROR</code>, the <code>ErrorMessage</code> field contains a description of the error that caused the synchronization to fail.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::ErrorDetail>) -> Self {
        self.error = input;
        self
    }
    /// <p>If the <code>Status</code> field is set to <code>ERROR</code>, the <code>ErrorMessage</code> field contains a description of the error that caused the synchronization to fail.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::ErrorDetail> {
        &self.error
    }
    /// <p>Settings for whether end users can upload files directly during chat.</p>
    pub fn attachments_configuration(mut self, input: crate::types::AppliedAttachmentsConfiguration) -> Self {
        self.attachments_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Settings for whether end users can upload files directly during chat.</p>
    pub fn set_attachments_configuration(mut self, input: ::std::option::Option<crate::types::AppliedAttachmentsConfiguration>) -> Self {
        self.attachments_configuration = input;
        self
    }
    /// <p>Settings for whether end users can upload files directly during chat.</p>
    pub fn get_attachments_configuration(&self) -> &::std::option::Option<crate::types::AppliedAttachmentsConfiguration> {
        &self.attachments_configuration
    }
    /// <p>Settings for whether end users can create and use Amazon Q Apps in the web experience.</p>
    pub fn q_apps_configuration(mut self, input: crate::types::QAppsConfiguration) -> Self {
        self.q_apps_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Settings for whether end users can create and use Amazon Q Apps in the web experience.</p>
    pub fn set_q_apps_configuration(mut self, input: ::std::option::Option<crate::types::QAppsConfiguration>) -> Self {
        self.q_apps_configuration = input;
        self
    }
    /// <p>Settings for whether end users can create and use Amazon Q Apps in the web experience.</p>
    pub fn get_q_apps_configuration(&self) -> &::std::option::Option<crate::types::QAppsConfiguration> {
        &self.q_apps_configuration
    }
    /// <p>Configuration information about chat response personalization. For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/personalizing-chat-responses.html">Personalizing chat responses</a>.</p>
    pub fn personalization_configuration(mut self, input: crate::types::PersonalizationConfiguration) -> Self {
        self.personalization_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration information about chat response personalization. For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/personalizing-chat-responses.html">Personalizing chat responses</a>.</p>
    pub fn set_personalization_configuration(mut self, input: ::std::option::Option<crate::types::PersonalizationConfiguration>) -> Self {
        self.personalization_configuration = input;
        self
    }
    /// <p>Configuration information about chat response personalization. For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/personalizing-chat-responses.html">Personalizing chat responses</a>.</p>
    pub fn get_personalization_configuration(&self) -> &::std::option::Option<crate::types::PersonalizationConfiguration> {
        &self.personalization_configuration
    }
    /// <p>Settings for auto-subscription behavior for this application. This is only applicable to SAML and OIDC applications.</p>
    pub fn auto_subscription_configuration(mut self, input: crate::types::AutoSubscriptionConfiguration) -> Self {
        self.auto_subscription_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Settings for auto-subscription behavior for this application. This is only applicable to SAML and OIDC applications.</p>
    pub fn set_auto_subscription_configuration(mut self, input: ::std::option::Option<crate::types::AutoSubscriptionConfiguration>) -> Self {
        self.auto_subscription_configuration = input;
        self
    }
    /// <p>Settings for auto-subscription behavior for this application. This is only applicable to SAML and OIDC applications.</p>
    pub fn get_auto_subscription_configuration(&self) -> &::std::option::Option<crate::types::AutoSubscriptionConfiguration> {
        &self.auto_subscription_configuration
    }
    /// Appends an item to `client_ids_for_oidc`.
    ///
    /// To override the contents of this collection use [`set_client_ids_for_oidc`](Self::set_client_ids_for_oidc).
    ///
    /// <p>The OIDC client ID for a Amazon Q Business application.</p>
    pub fn client_ids_for_oidc(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.client_ids_for_oidc.unwrap_or_default();
        v.push(input.into());
        self.client_ids_for_oidc = ::std::option::Option::Some(v);
        self
    }
    /// <p>The OIDC client ID for a Amazon Q Business application.</p>
    pub fn set_client_ids_for_oidc(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.client_ids_for_oidc = input;
        self
    }
    /// <p>The OIDC client ID for a Amazon Q Business application.</p>
    pub fn get_client_ids_for_oidc(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.client_ids_for_oidc
    }
    /// <p>The Amazon QuickSight authentication configuration for the Amazon Q Business application.</p>
    pub fn quick_sight_configuration(mut self, input: crate::types::QuickSightConfiguration) -> Self {
        self.quick_sight_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon QuickSight authentication configuration for the Amazon Q Business application.</p>
    pub fn set_quick_sight_configuration(mut self, input: ::std::option::Option<crate::types::QuickSightConfiguration>) -> Self {
        self.quick_sight_configuration = input;
        self
    }
    /// <p>The Amazon QuickSight authentication configuration for the Amazon Q Business application.</p>
    pub fn get_quick_sight_configuration(&self) -> &::std::option::Option<crate::types::QuickSightConfiguration> {
        &self.quick_sight_configuration
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetApplicationOutput`](crate::operation::get_application::GetApplicationOutput).
    pub fn build(self) -> crate::operation::get_application::GetApplicationOutput {
        crate::operation::get_application::GetApplicationOutput {
            display_name: self.display_name,
            application_id: self.application_id,
            application_arn: self.application_arn,
            identity_type: self.identity_type,
            iam_identity_provider_arn: self.iam_identity_provider_arn,
            identity_center_application_arn: self.identity_center_application_arn,
            role_arn: self.role_arn,
            status: self.status,
            description: self.description,
            encryption_configuration: self.encryption_configuration,
            created_at: self.created_at,
            updated_at: self.updated_at,
            error: self.error,
            attachments_configuration: self.attachments_configuration,
            q_apps_configuration: self.q_apps_configuration,
            personalization_configuration: self.personalization_configuration,
            auto_subscription_configuration: self.auto_subscription_configuration,
            client_ids_for_oidc: self.client_ids_for_oidc,
            quick_sight_configuration: self.quick_sight_configuration,
            _request_id: self._request_id,
        }
    }
}
