// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::fmt::Debug)]
pub struct ChatOutput {
    /// <p>The streaming output for the <code>Chat</code> API.</p>
    #[cfg_attr(any(feature = "serde-serialize", feature = "serde-deserialize"), serde(skip))]
    pub output_stream: crate::event_receiver::EventReceiver<crate::types::ChatOutputStream, crate::types::error::ChatOutputStreamError>,
    _request_id: Option<String>,
}
impl ChatOutput {
    /// <p>The streaming output for the <code>Chat</code> API.</p>
    pub fn output_stream(&self) -> &crate::event_receiver::EventReceiver<crate::types::ChatOutputStream, crate::types::error::ChatOutputStreamError> {
        &self.output_stream
    }
}
impl ::aws_types::request_id::RequestId for ChatOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ChatOutput {
    /// Creates a new builder-style object to manufacture [`ChatOutput`](crate::operation::chat::ChatOutput).
    pub fn builder() -> crate::operation::chat::builders::ChatOutputBuilder {
        crate::operation::chat::builders::ChatOutputBuilder::default()
    }
}

/// A builder for [`ChatOutput`](crate::operation::chat::ChatOutput).
#[derive(::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ChatOutputBuilder {
    pub(crate) output_stream:
        ::std::option::Option<crate::event_receiver::EventReceiver<crate::types::ChatOutputStream, crate::types::error::ChatOutputStreamError>>,
    _request_id: Option<String>,
}
impl ChatOutputBuilder {
    /// <p>The streaming output for the <code>Chat</code> API.</p>
    pub fn output_stream(
        mut self,
        input: crate::event_receiver::EventReceiver<crate::types::ChatOutputStream, crate::types::error::ChatOutputStreamError>,
    ) -> Self {
        self.output_stream = ::std::option::Option::Some(input);
        self
    }
    /// <p>The streaming output for the <code>Chat</code> API.</p>
    pub fn set_output_stream(
        mut self,
        input: ::std::option::Option<
            crate::event_receiver::EventReceiver<crate::types::ChatOutputStream, crate::types::error::ChatOutputStreamError>,
        >,
    ) -> Self {
        self.output_stream = input;
        self
    }
    /// <p>The streaming output for the <code>Chat</code> API.</p>
    pub fn get_output_stream(
        &self,
    ) -> &::std::option::Option<crate::event_receiver::EventReceiver<crate::types::ChatOutputStream, crate::types::error::ChatOutputStreamError>>
    {
        &self.output_stream
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ChatOutput`](crate::operation::chat::ChatOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`output_stream`](crate::operation::chat::builders::ChatOutputBuilder::output_stream)
    pub fn build(self) -> ::std::result::Result<crate::operation::chat::ChatOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::chat::ChatOutput {
            output_stream: self.output_stream.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "output_stream",
                    "output_stream was not specified but it is required when building ChatOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
