// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[derive(::std::fmt::Debug)]
pub struct ChatInput {
    /// <p>The identifier of the Amazon Q Business application linked to a streaming Amazon Q Business conversation.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the user attached to the chat input.</p>
    pub user_id: ::std::option::Option<::std::string::String>,
    /// <p>The group names that a user associated with the chat input belongs to.</p>
    pub user_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The identifier of the Amazon Q Business conversation.</p>
    pub conversation_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier used to associate a user message with a AI generated response.</p>
    pub parent_message_id: ::std::option::Option<::std::string::String>,
    /// <p>A token that you provide to identify the chat input.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The streaming input for the <code>Chat</code> API.</p>
    #[cfg_attr(any(feature = "serde-serialize", feature = "serde-deserialize"), serde(skip))]
    pub input_stream: ::aws_smithy_http::event_stream::EventStreamSender<crate::types::ChatInputStream, crate::types::error::ChatInputStreamError>,
}
impl ChatInput {
    /// <p>The identifier of the Amazon Q Business application linked to a streaming Amazon Q Business conversation.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The identifier of the user attached to the chat input.</p>
    pub fn user_id(&self) -> ::std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>The group names that a user associated with the chat input belongs to.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_groups.is_none()`.
    pub fn user_groups(&self) -> &[::std::string::String] {
        self.user_groups.as_deref().unwrap_or_default()
    }
    /// <p>The identifier of the Amazon Q Business conversation.</p>
    pub fn conversation_id(&self) -> ::std::option::Option<&str> {
        self.conversation_id.as_deref()
    }
    /// <p>The identifier used to associate a user message with a AI generated response.</p>
    pub fn parent_message_id(&self) -> ::std::option::Option<&str> {
        self.parent_message_id.as_deref()
    }
    /// <p>A token that you provide to identify the chat input.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The streaming input for the <code>Chat</code> API.</p>
    pub fn input_stream(
        &self,
    ) -> &::aws_smithy_http::event_stream::EventStreamSender<crate::types::ChatInputStream, crate::types::error::ChatInputStreamError> {
        &self.input_stream
    }
}
impl ChatInput {
    /// Creates a new builder-style object to manufacture [`ChatInput`](crate::operation::chat::ChatInput).
    pub fn builder() -> crate::operation::chat::builders::ChatInputBuilder {
        crate::operation::chat::builders::ChatInputBuilder::default()
    }
}

/// A builder for [`ChatInput`](crate::operation::chat::ChatInput).
#[derive(::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ChatInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) conversation_id: ::std::option::Option<::std::string::String>,
    pub(crate) parent_message_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) input_stream: ::std::option::Option<
        ::aws_smithy_http::event_stream::EventStreamSender<crate::types::ChatInputStream, crate::types::error::ChatInputStreamError>,
    >,
}
impl ChatInputBuilder {
    /// <p>The identifier of the Amazon Q Business application linked to a streaming Amazon Q Business conversation.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q Business application linked to a streaming Amazon Q Business conversation.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q Business application linked to a streaming Amazon Q Business conversation.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The identifier of the user attached to the chat input.</p>
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the user attached to the chat input.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The identifier of the user attached to the chat input.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// Appends an item to `user_groups`.
    ///
    /// To override the contents of this collection use [`set_user_groups`](Self::set_user_groups).
    ///
    /// <p>The group names that a user associated with the chat input belongs to.</p>
    pub fn user_groups(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.user_groups.unwrap_or_default();
        v.push(input.into());
        self.user_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>The group names that a user associated with the chat input belongs to.</p>
    pub fn set_user_groups(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.user_groups = input;
        self
    }
    /// <p>The group names that a user associated with the chat input belongs to.</p>
    pub fn get_user_groups(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.user_groups
    }
    /// <p>The identifier of the Amazon Q Business conversation.</p>
    pub fn conversation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.conversation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q Business conversation.</p>
    pub fn set_conversation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.conversation_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q Business conversation.</p>
    pub fn get_conversation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.conversation_id
    }
    /// <p>The identifier used to associate a user message with a AI generated response.</p>
    pub fn parent_message_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parent_message_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier used to associate a user message with a AI generated response.</p>
    pub fn set_parent_message_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parent_message_id = input;
        self
    }
    /// <p>The identifier used to associate a user message with a AI generated response.</p>
    pub fn get_parent_message_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.parent_message_id
    }
    /// <p>A token that you provide to identify the chat input.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that you provide to identify the chat input.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A token that you provide to identify the chat input.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The streaming input for the <code>Chat</code> API.</p>
    pub fn input_stream(
        mut self,
        input: ::aws_smithy_http::event_stream::EventStreamSender<crate::types::ChatInputStream, crate::types::error::ChatInputStreamError>,
    ) -> Self {
        self.input_stream = ::std::option::Option::Some(input);
        self
    }
    /// <p>The streaming input for the <code>Chat</code> API.</p>
    pub fn set_input_stream(
        mut self,
        input: ::std::option::Option<
            ::aws_smithy_http::event_stream::EventStreamSender<crate::types::ChatInputStream, crate::types::error::ChatInputStreamError>,
        >,
    ) -> Self {
        self.input_stream = input;
        self
    }
    /// <p>The streaming input for the <code>Chat</code> API.</p>
    pub fn get_input_stream(
        &self,
    ) -> &::std::option::Option<
        ::aws_smithy_http::event_stream::EventStreamSender<crate::types::ChatInputStream, crate::types::error::ChatInputStreamError>,
    > {
        &self.input_stream
    }
    /// Consumes the builder and constructs a [`ChatInput`](crate::operation::chat::ChatInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`input_stream`](crate::operation::chat::builders::ChatInputBuilder::input_stream)
    pub fn build(self) -> ::std::result::Result<crate::operation::chat::ChatInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::chat::ChatInput {
            application_id: self.application_id,
            user_id: self.user_id,
            user_groups: self.user_groups,
            conversation_id: self.conversation_id,
            parent_message_id: self.parent_message_id,
            client_token: self.client_token,
            input_stream: self.input_stream.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "input_stream",
                    "input_stream was not specified but it is required when building ChatInput",
                )
            })?,
        })
    }
}
