// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreatePluginOutput {
    /// <p>The identifier of the plugin created.</p>
    pub plugin_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of a plugin.</p>
    pub plugin_arn: ::std::option::Option<::std::string::String>,
    /// <p>The current status of a plugin. A plugin is modified asynchronously.</p>
    pub build_status: ::std::option::Option<crate::types::PluginBuildStatus>,
    _request_id: Option<String>,
}
impl CreatePluginOutput {
    /// <p>The identifier of the plugin created.</p>
    pub fn plugin_id(&self) -> ::std::option::Option<&str> {
        self.plugin_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of a plugin.</p>
    pub fn plugin_arn(&self) -> ::std::option::Option<&str> {
        self.plugin_arn.as_deref()
    }
    /// <p>The current status of a plugin. A plugin is modified asynchronously.</p>
    pub fn build_status(&self) -> ::std::option::Option<&crate::types::PluginBuildStatus> {
        self.build_status.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for CreatePluginOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreatePluginOutput {
    /// Creates a new builder-style object to manufacture [`CreatePluginOutput`](crate::operation::create_plugin::CreatePluginOutput).
    pub fn builder() -> crate::operation::create_plugin::builders::CreatePluginOutputBuilder {
        crate::operation::create_plugin::builders::CreatePluginOutputBuilder::default()
    }
}

/// A builder for [`CreatePluginOutput`](crate::operation::create_plugin::CreatePluginOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreatePluginOutputBuilder {
    pub(crate) plugin_id: ::std::option::Option<::std::string::String>,
    pub(crate) plugin_arn: ::std::option::Option<::std::string::String>,
    pub(crate) build_status: ::std::option::Option<crate::types::PluginBuildStatus>,
    _request_id: Option<String>,
}
impl CreatePluginOutputBuilder {
    /// <p>The identifier of the plugin created.</p>
    pub fn plugin_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.plugin_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the plugin created.</p>
    pub fn set_plugin_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.plugin_id = input;
        self
    }
    /// <p>The identifier of the plugin created.</p>
    pub fn get_plugin_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.plugin_id
    }
    /// <p>The Amazon Resource Name (ARN) of a plugin.</p>
    pub fn plugin_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.plugin_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a plugin.</p>
    pub fn set_plugin_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.plugin_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a plugin.</p>
    pub fn get_plugin_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.plugin_arn
    }
    /// <p>The current status of a plugin. A plugin is modified asynchronously.</p>
    pub fn build_status(mut self, input: crate::types::PluginBuildStatus) -> Self {
        self.build_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of a plugin. A plugin is modified asynchronously.</p>
    pub fn set_build_status(mut self, input: ::std::option::Option<crate::types::PluginBuildStatus>) -> Self {
        self.build_status = input;
        self
    }
    /// <p>The current status of a plugin. A plugin is modified asynchronously.</p>
    pub fn get_build_status(&self) -> &::std::option::Option<crate::types::PluginBuildStatus> {
        &self.build_status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreatePluginOutput`](crate::operation::create_plugin::CreatePluginOutput).
    pub fn build(self) -> crate::operation::create_plugin::CreatePluginOutput {
        crate::operation::create_plugin::CreatePluginOutput {
            plugin_id: self.plugin_id,
            plugin_arn: self.plugin_arn,
            build_status: self.build_status,
            _request_id: self._request_id,
        }
    }
}
