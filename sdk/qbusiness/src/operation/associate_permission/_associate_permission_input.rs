// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociatePermissionInput {
    /// <p>The unique identifier of the Amazon Q Business application.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for the policy statement.</p>
    pub statement_id: ::std::option::Option<::std::string::String>,
    /// <p>The list of Amazon Q Business actions that the ISV is allowed to perform.</p>
    pub actions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The conditions that restrict when the permission is effective. These conditions can be used to limit the permission based on specific attributes of the request.</p>
    pub conditions: ::std::option::Option<::std::vec::Vec<crate::types::PermissionCondition>>,
    /// <p>The Amazon Resource Name of the IAM role for the ISV that is being granted permission.</p>
    pub principal: ::std::option::Option<::std::string::String>,
}
impl AssociatePermissionInput {
    /// <p>The unique identifier of the Amazon Q Business application.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>A unique identifier for the policy statement.</p>
    pub fn statement_id(&self) -> ::std::option::Option<&str> {
        self.statement_id.as_deref()
    }
    /// <p>The list of Amazon Q Business actions that the ISV is allowed to perform.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.actions.is_none()`.
    pub fn actions(&self) -> &[::std::string::String] {
        self.actions.as_deref().unwrap_or_default()
    }
    /// <p>The conditions that restrict when the permission is effective. These conditions can be used to limit the permission based on specific attributes of the request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.conditions.is_none()`.
    pub fn conditions(&self) -> &[crate::types::PermissionCondition] {
        self.conditions.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Resource Name of the IAM role for the ISV that is being granted permission.</p>
    pub fn principal(&self) -> ::std::option::Option<&str> {
        self.principal.as_deref()
    }
}
impl AssociatePermissionInput {
    /// Creates a new builder-style object to manufacture [`AssociatePermissionInput`](crate::operation::associate_permission::AssociatePermissionInput).
    pub fn builder() -> crate::operation::associate_permission::builders::AssociatePermissionInputBuilder {
        crate::operation::associate_permission::builders::AssociatePermissionInputBuilder::default()
    }
}

/// A builder for [`AssociatePermissionInput`](crate::operation::associate_permission::AssociatePermissionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssociatePermissionInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) statement_id: ::std::option::Option<::std::string::String>,
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) conditions: ::std::option::Option<::std::vec::Vec<crate::types::PermissionCondition>>,
    pub(crate) principal: ::std::option::Option<::std::string::String>,
}
impl AssociatePermissionInputBuilder {
    /// <p>The unique identifier of the Amazon Q Business application.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Amazon Q Business application.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier of the Amazon Q Business application.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>A unique identifier for the policy statement.</p>
    /// This field is required.
    pub fn statement_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.statement_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the policy statement.</p>
    pub fn set_statement_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.statement_id = input;
        self
    }
    /// <p>A unique identifier for the policy statement.</p>
    pub fn get_statement_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.statement_id
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The list of Amazon Q Business actions that the ISV is allowed to perform.</p>
    pub fn actions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input.into());
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of Amazon Q Business actions that the ISV is allowed to perform.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>The list of Amazon Q Business actions that the ISV is allowed to perform.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.actions
    }
    /// Appends an item to `conditions`.
    ///
    /// To override the contents of this collection use [`set_conditions`](Self::set_conditions).
    ///
    /// <p>The conditions that restrict when the permission is effective. These conditions can be used to limit the permission based on specific attributes of the request.</p>
    pub fn conditions(mut self, input: crate::types::PermissionCondition) -> Self {
        let mut v = self.conditions.unwrap_or_default();
        v.push(input);
        self.conditions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The conditions that restrict when the permission is effective. These conditions can be used to limit the permission based on specific attributes of the request.</p>
    pub fn set_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PermissionCondition>>) -> Self {
        self.conditions = input;
        self
    }
    /// <p>The conditions that restrict when the permission is effective. These conditions can be used to limit the permission based on specific attributes of the request.</p>
    pub fn get_conditions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PermissionCondition>> {
        &self.conditions
    }
    /// <p>The Amazon Resource Name of the IAM role for the ISV that is being granted permission.</p>
    /// This field is required.
    pub fn principal(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name of the IAM role for the ISV that is being granted permission.</p>
    pub fn set_principal(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal = input;
        self
    }
    /// <p>The Amazon Resource Name of the IAM role for the ISV that is being granted permission.</p>
    pub fn get_principal(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal
    }
    /// Consumes the builder and constructs a [`AssociatePermissionInput`](crate::operation::associate_permission::AssociatePermissionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::associate_permission::AssociatePermissionInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::associate_permission::AssociatePermissionInput {
            application_id: self.application_id,
            statement_id: self.statement_id,
            actions: self.actions,
            conditions: self.conditions,
            principal: self.principal,
        })
    }
}
