// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListChatResponseConfigurationsOutput {
    /// <p>A list of chat response configuration summaries, each containing key information about an available configuration in the specified application.</p>
    pub chat_response_configurations: ::std::option::Option<::std::vec::Vec<crate::types::ChatResponseConfiguration>>,
    /// <p>A pagination token that can be used in a subsequent request to retrieve additional chat response configurations if the results were truncated due to the <code>maxResults</code> parameter.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListChatResponseConfigurationsOutput {
    /// <p>A list of chat response configuration summaries, each containing key information about an available configuration in the specified application.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.chat_response_configurations.is_none()`.
    pub fn chat_response_configurations(&self) -> &[crate::types::ChatResponseConfiguration] {
        self.chat_response_configurations.as_deref().unwrap_or_default()
    }
    /// <p>A pagination token that can be used in a subsequent request to retrieve additional chat response configurations if the results were truncated due to the <code>maxResults</code> parameter.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListChatResponseConfigurationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListChatResponseConfigurationsOutput {
    /// Creates a new builder-style object to manufacture [`ListChatResponseConfigurationsOutput`](crate::operation::list_chat_response_configurations::ListChatResponseConfigurationsOutput).
    pub fn builder() -> crate::operation::list_chat_response_configurations::builders::ListChatResponseConfigurationsOutputBuilder {
        crate::operation::list_chat_response_configurations::builders::ListChatResponseConfigurationsOutputBuilder::default()
    }
}

/// A builder for [`ListChatResponseConfigurationsOutput`](crate::operation::list_chat_response_configurations::ListChatResponseConfigurationsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListChatResponseConfigurationsOutputBuilder {
    pub(crate) chat_response_configurations: ::std::option::Option<::std::vec::Vec<crate::types::ChatResponseConfiguration>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListChatResponseConfigurationsOutputBuilder {
    /// Appends an item to `chat_response_configurations`.
    ///
    /// To override the contents of this collection use [`set_chat_response_configurations`](Self::set_chat_response_configurations).
    ///
    /// <p>A list of chat response configuration summaries, each containing key information about an available configuration in the specified application.</p>
    pub fn chat_response_configurations(mut self, input: crate::types::ChatResponseConfiguration) -> Self {
        let mut v = self.chat_response_configurations.unwrap_or_default();
        v.push(input);
        self.chat_response_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of chat response configuration summaries, each containing key information about an available configuration in the specified application.</p>
    pub fn set_chat_response_configurations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ChatResponseConfiguration>>,
    ) -> Self {
        self.chat_response_configurations = input;
        self
    }
    /// <p>A list of chat response configuration summaries, each containing key information about an available configuration in the specified application.</p>
    pub fn get_chat_response_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ChatResponseConfiguration>> {
        &self.chat_response_configurations
    }
    /// <p>A pagination token that can be used in a subsequent request to retrieve additional chat response configurations if the results were truncated due to the <code>maxResults</code> parameter.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A pagination token that can be used in a subsequent request to retrieve additional chat response configurations if the results were truncated due to the <code>maxResults</code> parameter.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A pagination token that can be used in a subsequent request to retrieve additional chat response configurations if the results were truncated due to the <code>maxResults</code> parameter.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListChatResponseConfigurationsOutput`](crate::operation::list_chat_response_configurations::ListChatResponseConfigurationsOutput).
    pub fn build(self) -> crate::operation::list_chat_response_configurations::ListChatResponseConfigurationsOutput {
        crate::operation::list_chat_response_configurations::ListChatResponseConfigurationsOutput {
            chat_response_configurations: self.chat_response_configurations,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
