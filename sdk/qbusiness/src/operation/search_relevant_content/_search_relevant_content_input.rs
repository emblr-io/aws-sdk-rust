// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchRelevantContentInput {
    /// <p>The unique identifier of the Amazon Q Business application to search.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The text to search for.</p>
    pub query_text: ::std::option::Option<::std::string::String>,
    /// <p>The source of content to search in.</p>
    pub content_source: ::std::option::Option<crate::types::ContentSource>,
    /// <p>Enables filtering of responses based on document attributes or metadata fields.</p>
    pub attribute_filter: ::std::option::Option<crate::types::AttributeFilter>,
    /// <p>The maximum number of results to return.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The token for the next set of results. (You received this token from a previous call.)</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl SearchRelevantContentInput {
    /// <p>The unique identifier of the Amazon Q Business application to search.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The text to search for.</p>
    pub fn query_text(&self) -> ::std::option::Option<&str> {
        self.query_text.as_deref()
    }
    /// <p>The source of content to search in.</p>
    pub fn content_source(&self) -> ::std::option::Option<&crate::types::ContentSource> {
        self.content_source.as_ref()
    }
    /// <p>Enables filtering of responses based on document attributes or metadata fields.</p>
    pub fn attribute_filter(&self) -> ::std::option::Option<&crate::types::AttributeFilter> {
        self.attribute_filter.as_ref()
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token for the next set of results. (You received this token from a previous call.)</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl SearchRelevantContentInput {
    /// Creates a new builder-style object to manufacture [`SearchRelevantContentInput`](crate::operation::search_relevant_content::SearchRelevantContentInput).
    pub fn builder() -> crate::operation::search_relevant_content::builders::SearchRelevantContentInputBuilder {
        crate::operation::search_relevant_content::builders::SearchRelevantContentInputBuilder::default()
    }
}

/// A builder for [`SearchRelevantContentInput`](crate::operation::search_relevant_content::SearchRelevantContentInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SearchRelevantContentInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) query_text: ::std::option::Option<::std::string::String>,
    pub(crate) content_source: ::std::option::Option<crate::types::ContentSource>,
    pub(crate) attribute_filter: ::std::option::Option<crate::types::AttributeFilter>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl SearchRelevantContentInputBuilder {
    /// <p>The unique identifier of the Amazon Q Business application to search.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Amazon Q Business application to search.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier of the Amazon Q Business application to search.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The text to search for.</p>
    /// This field is required.
    pub fn query_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query_text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text to search for.</p>
    pub fn set_query_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query_text = input;
        self
    }
    /// <p>The text to search for.</p>
    pub fn get_query_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.query_text
    }
    /// <p>The source of content to search in.</p>
    /// This field is required.
    pub fn content_source(mut self, input: crate::types::ContentSource) -> Self {
        self.content_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source of content to search in.</p>
    pub fn set_content_source(mut self, input: ::std::option::Option<crate::types::ContentSource>) -> Self {
        self.content_source = input;
        self
    }
    /// <p>The source of content to search in.</p>
    pub fn get_content_source(&self) -> &::std::option::Option<crate::types::ContentSource> {
        &self.content_source
    }
    /// <p>Enables filtering of responses based on document attributes or metadata fields.</p>
    pub fn attribute_filter(mut self, input: crate::types::AttributeFilter) -> Self {
        self.attribute_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables filtering of responses based on document attributes or metadata fields.</p>
    pub fn set_attribute_filter(mut self, input: ::std::option::Option<crate::types::AttributeFilter>) -> Self {
        self.attribute_filter = input;
        self
    }
    /// <p>Enables filtering of responses based on document attributes or metadata fields.</p>
    pub fn get_attribute_filter(&self) -> &::std::option::Option<crate::types::AttributeFilter> {
        &self.attribute_filter
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The token for the next set of results. (You received this token from a previous call.)</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next set of results. (You received this token from a previous call.)</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next set of results. (You received this token from a previous call.)</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`SearchRelevantContentInput`](crate::operation::search_relevant_content::SearchRelevantContentInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::search_relevant_content::SearchRelevantContentInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::search_relevant_content::SearchRelevantContentInput {
            application_id: self.application_id,
            query_text: self.query_text,
            content_source: self.content_source,
            attribute_filter: self.attribute_filter,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
