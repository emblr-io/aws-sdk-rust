// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetDataAccessorOutput {
    /// <p>The friendly name of the data accessor.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the data accessor.</p>
    pub data_accessor_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the data accessor.</p>
    pub data_accessor_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the Amazon Q Business application associated with this data accessor.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM Identity Center application associated with this data accessor.</p>
    pub idc_application_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role for the ISV associated with this data accessor.</p>
    pub principal: ::std::option::Option<::std::string::String>,
    /// <p>The list of action configurations specifying the allowed actions and any associated filters.</p>
    pub action_configurations: ::std::option::Option<::std::vec::Vec<crate::types::ActionConfiguration>>,
    /// <p>The authentication configuration details for the data accessor. This specifies how the ISV authenticates when accessing data through this data accessor.</p>
    pub authentication_detail: ::std::option::Option<crate::types::DataAccessorAuthenticationDetail>,
    /// <p>The timestamp when the data accessor was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the data accessor was last updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetDataAccessorOutput {
    /// <p>The friendly name of the data accessor.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The unique identifier of the data accessor.</p>
    pub fn data_accessor_id(&self) -> ::std::option::Option<&str> {
        self.data_accessor_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the data accessor.</p>
    pub fn data_accessor_arn(&self) -> ::std::option::Option<&str> {
        self.data_accessor_arn.as_deref()
    }
    /// <p>The unique identifier of the Amazon Q Business application associated with this data accessor.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM Identity Center application associated with this data accessor.</p>
    pub fn idc_application_arn(&self) -> ::std::option::Option<&str> {
        self.idc_application_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role for the ISV associated with this data accessor.</p>
    pub fn principal(&self) -> ::std::option::Option<&str> {
        self.principal.as_deref()
    }
    /// <p>The list of action configurations specifying the allowed actions and any associated filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.action_configurations.is_none()`.
    pub fn action_configurations(&self) -> &[crate::types::ActionConfiguration] {
        self.action_configurations.as_deref().unwrap_or_default()
    }
    /// <p>The authentication configuration details for the data accessor. This specifies how the ISV authenticates when accessing data through this data accessor.</p>
    pub fn authentication_detail(&self) -> ::std::option::Option<&crate::types::DataAccessorAuthenticationDetail> {
        self.authentication_detail.as_ref()
    }
    /// <p>The timestamp when the data accessor was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp when the data accessor was last updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl ::std::fmt::Debug for GetDataAccessorOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetDataAccessorOutput");
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("data_accessor_id", &self.data_accessor_id);
        formatter.field("data_accessor_arn", &self.data_accessor_arn);
        formatter.field("application_id", &self.application_id);
        formatter.field("idc_application_arn", &self.idc_application_arn);
        formatter.field("principal", &self.principal);
        formatter.field("action_configurations", &self.action_configurations);
        formatter.field("authentication_detail", &self.authentication_detail);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetDataAccessorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDataAccessorOutput {
    /// Creates a new builder-style object to manufacture [`GetDataAccessorOutput`](crate::operation::get_data_accessor::GetDataAccessorOutput).
    pub fn builder() -> crate::operation::get_data_accessor::builders::GetDataAccessorOutputBuilder {
        crate::operation::get_data_accessor::builders::GetDataAccessorOutputBuilder::default()
    }
}

/// A builder for [`GetDataAccessorOutput`](crate::operation::get_data_accessor::GetDataAccessorOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetDataAccessorOutputBuilder {
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) data_accessor_id: ::std::option::Option<::std::string::String>,
    pub(crate) data_accessor_arn: ::std::option::Option<::std::string::String>,
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) idc_application_arn: ::std::option::Option<::std::string::String>,
    pub(crate) principal: ::std::option::Option<::std::string::String>,
    pub(crate) action_configurations: ::std::option::Option<::std::vec::Vec<crate::types::ActionConfiguration>>,
    pub(crate) authentication_detail: ::std::option::Option<crate::types::DataAccessorAuthenticationDetail>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetDataAccessorOutputBuilder {
    /// <p>The friendly name of the data accessor.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The friendly name of the data accessor.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The friendly name of the data accessor.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The unique identifier of the data accessor.</p>
    pub fn data_accessor_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_accessor_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the data accessor.</p>
    pub fn set_data_accessor_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_accessor_id = input;
        self
    }
    /// <p>The unique identifier of the data accessor.</p>
    pub fn get_data_accessor_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_accessor_id
    }
    /// <p>The Amazon Resource Name (ARN) of the data accessor.</p>
    pub fn data_accessor_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_accessor_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the data accessor.</p>
    pub fn set_data_accessor_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_accessor_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the data accessor.</p>
    pub fn get_data_accessor_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_accessor_arn
    }
    /// <p>The unique identifier of the Amazon Q Business application associated with this data accessor.</p>
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Amazon Q Business application associated with this data accessor.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier of the Amazon Q Business application associated with this data accessor.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM Identity Center application associated with this data accessor.</p>
    pub fn idc_application_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.idc_application_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM Identity Center application associated with this data accessor.</p>
    pub fn set_idc_application_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.idc_application_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM Identity Center application associated with this data accessor.</p>
    pub fn get_idc_application_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.idc_application_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role for the ISV associated with this data accessor.</p>
    pub fn principal(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role for the ISV associated with this data accessor.</p>
    pub fn set_principal(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role for the ISV associated with this data accessor.</p>
    pub fn get_principal(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal
    }
    /// Appends an item to `action_configurations`.
    ///
    /// To override the contents of this collection use [`set_action_configurations`](Self::set_action_configurations).
    ///
    /// <p>The list of action configurations specifying the allowed actions and any associated filters.</p>
    pub fn action_configurations(mut self, input: crate::types::ActionConfiguration) -> Self {
        let mut v = self.action_configurations.unwrap_or_default();
        v.push(input);
        self.action_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of action configurations specifying the allowed actions and any associated filters.</p>
    pub fn set_action_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ActionConfiguration>>) -> Self {
        self.action_configurations = input;
        self
    }
    /// <p>The list of action configurations specifying the allowed actions and any associated filters.</p>
    pub fn get_action_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ActionConfiguration>> {
        &self.action_configurations
    }
    /// <p>The authentication configuration details for the data accessor. This specifies how the ISV authenticates when accessing data through this data accessor.</p>
    pub fn authentication_detail(mut self, input: crate::types::DataAccessorAuthenticationDetail) -> Self {
        self.authentication_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication configuration details for the data accessor. This specifies how the ISV authenticates when accessing data through this data accessor.</p>
    pub fn set_authentication_detail(mut self, input: ::std::option::Option<crate::types::DataAccessorAuthenticationDetail>) -> Self {
        self.authentication_detail = input;
        self
    }
    /// <p>The authentication configuration details for the data accessor. This specifies how the ISV authenticates when accessing data through this data accessor.</p>
    pub fn get_authentication_detail(&self) -> &::std::option::Option<crate::types::DataAccessorAuthenticationDetail> {
        &self.authentication_detail
    }
    /// <p>The timestamp when the data accessor was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the data accessor was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the data accessor was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when the data accessor was last updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the data accessor was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp when the data accessor was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDataAccessorOutput`](crate::operation::get_data_accessor::GetDataAccessorOutput).
    pub fn build(self) -> crate::operation::get_data_accessor::GetDataAccessorOutput {
        crate::operation::get_data_accessor::GetDataAccessorOutput {
            display_name: self.display_name,
            data_accessor_id: self.data_accessor_id,
            data_accessor_arn: self.data_accessor_arn,
            application_id: self.application_id,
            idc_application_arn: self.idc_application_arn,
            principal: self.principal,
            action_configurations: self.action_configurations,
            authentication_detail: self.authentication_detail,
            created_at: self.created_at,
            updated_at: self.updated_at,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for GetDataAccessorOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetDataAccessorOutputBuilder");
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("data_accessor_id", &self.data_accessor_id);
        formatter.field("data_accessor_arn", &self.data_accessor_arn);
        formatter.field("application_id", &self.application_id);
        formatter.field("idc_application_arn", &self.idc_application_arn);
        formatter.field("principal", &self.principal);
        formatter.field("action_configurations", &self.action_configurations);
        formatter.field("authentication_detail", &self.authentication_detail);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
