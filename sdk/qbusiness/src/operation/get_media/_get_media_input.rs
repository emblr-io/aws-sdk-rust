// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetMediaInput {
    /// <p>The identifier of the Amazon Q Business which contains the media object.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the Amazon Q Business conversation.</p>
    pub conversation_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the Amazon Q Business message.</p>
    pub message_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the media object. You can find this in the <code>sourceAttributions</code> returned by the <code>Chat</code>, <code>ChatSync</code>, and <code>ListMessages</code> API responses.</p>
    pub media_id: ::std::option::Option<::std::string::String>,
}
impl GetMediaInput {
    /// <p>The identifier of the Amazon Q Business which contains the media object.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The identifier of the Amazon Q Business conversation.</p>
    pub fn conversation_id(&self) -> ::std::option::Option<&str> {
        self.conversation_id.as_deref()
    }
    /// <p>The identifier of the Amazon Q Business message.</p>
    pub fn message_id(&self) -> ::std::option::Option<&str> {
        self.message_id.as_deref()
    }
    /// <p>The identifier of the media object. You can find this in the <code>sourceAttributions</code> returned by the <code>Chat</code>, <code>ChatSync</code>, and <code>ListMessages</code> API responses.</p>
    pub fn media_id(&self) -> ::std::option::Option<&str> {
        self.media_id.as_deref()
    }
}
impl GetMediaInput {
    /// Creates a new builder-style object to manufacture [`GetMediaInput`](crate::operation::get_media::GetMediaInput).
    pub fn builder() -> crate::operation::get_media::builders::GetMediaInputBuilder {
        crate::operation::get_media::builders::GetMediaInputBuilder::default()
    }
}

/// A builder for [`GetMediaInput`](crate::operation::get_media::GetMediaInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetMediaInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) conversation_id: ::std::option::Option<::std::string::String>,
    pub(crate) message_id: ::std::option::Option<::std::string::String>,
    pub(crate) media_id: ::std::option::Option<::std::string::String>,
}
impl GetMediaInputBuilder {
    /// <p>The identifier of the Amazon Q Business which contains the media object.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q Business which contains the media object.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q Business which contains the media object.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The identifier of the Amazon Q Business conversation.</p>
    /// This field is required.
    pub fn conversation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.conversation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q Business conversation.</p>
    pub fn set_conversation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.conversation_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q Business conversation.</p>
    pub fn get_conversation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.conversation_id
    }
    /// <p>The identifier of the Amazon Q Business message.</p>
    /// This field is required.
    pub fn message_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q Business message.</p>
    pub fn set_message_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q Business message.</p>
    pub fn get_message_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_id
    }
    /// <p>The identifier of the media object. You can find this in the <code>sourceAttributions</code> returned by the <code>Chat</code>, <code>ChatSync</code>, and <code>ListMessages</code> API responses.</p>
    /// This field is required.
    pub fn media_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.media_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the media object. You can find this in the <code>sourceAttributions</code> returned by the <code>Chat</code>, <code>ChatSync</code>, and <code>ListMessages</code> API responses.</p>
    pub fn set_media_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.media_id = input;
        self
    }
    /// <p>The identifier of the media object. You can find this in the <code>sourceAttributions</code> returned by the <code>Chat</code>, <code>ChatSync</code>, and <code>ListMessages</code> API responses.</p>
    pub fn get_media_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.media_id
    }
    /// Consumes the builder and constructs a [`GetMediaInput`](crate::operation::get_media::GetMediaInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::get_media::GetMediaInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_media::GetMediaInput {
            application_id: self.application_id,
            conversation_id: self.conversation_id,
            message_id: self.message_id,
            media_id: self.media_id,
        })
    }
}
