// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateSubscriptionInput {
    /// <p>The identifier of the Amazon Q Business application the subscription should be added to.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The IAM Identity Center <code>UserId</code> or <code>GroupId</code> of a user or group in the IAM Identity Center instance connected to the Amazon Q Business application.</p>
    pub principal: ::std::option::Option<crate::types::SubscriptionPrincipal>,
    /// <p>The type of Amazon Q Business subscription you want to create.</p>
    pub r#type: ::std::option::Option<crate::types::SubscriptionType>,
    /// <p>A token that you provide to identify the request to create a subscription for your Amazon Q Business application.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateSubscriptionInput {
    /// <p>The identifier of the Amazon Q Business application the subscription should be added to.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The IAM Identity Center <code>UserId</code> or <code>GroupId</code> of a user or group in the IAM Identity Center instance connected to the Amazon Q Business application.</p>
    pub fn principal(&self) -> ::std::option::Option<&crate::types::SubscriptionPrincipal> {
        self.principal.as_ref()
    }
    /// <p>The type of Amazon Q Business subscription you want to create.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::SubscriptionType> {
        self.r#type.as_ref()
    }
    /// <p>A token that you provide to identify the request to create a subscription for your Amazon Q Business application.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateSubscriptionInput {
    /// Creates a new builder-style object to manufacture [`CreateSubscriptionInput`](crate::operation::create_subscription::CreateSubscriptionInput).
    pub fn builder() -> crate::operation::create_subscription::builders::CreateSubscriptionInputBuilder {
        crate::operation::create_subscription::builders::CreateSubscriptionInputBuilder::default()
    }
}

/// A builder for [`CreateSubscriptionInput`](crate::operation::create_subscription::CreateSubscriptionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateSubscriptionInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) principal: ::std::option::Option<crate::types::SubscriptionPrincipal>,
    pub(crate) r#type: ::std::option::Option<crate::types::SubscriptionType>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateSubscriptionInputBuilder {
    /// <p>The identifier of the Amazon Q Business application the subscription should be added to.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q Business application the subscription should be added to.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q Business application the subscription should be added to.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The IAM Identity Center <code>UserId</code> or <code>GroupId</code> of a user or group in the IAM Identity Center instance connected to the Amazon Q Business application.</p>
    /// This field is required.
    pub fn principal(mut self, input: crate::types::SubscriptionPrincipal) -> Self {
        self.principal = ::std::option::Option::Some(input);
        self
    }
    /// <p>The IAM Identity Center <code>UserId</code> or <code>GroupId</code> of a user or group in the IAM Identity Center instance connected to the Amazon Q Business application.</p>
    pub fn set_principal(mut self, input: ::std::option::Option<crate::types::SubscriptionPrincipal>) -> Self {
        self.principal = input;
        self
    }
    /// <p>The IAM Identity Center <code>UserId</code> or <code>GroupId</code> of a user or group in the IAM Identity Center instance connected to the Amazon Q Business application.</p>
    pub fn get_principal(&self) -> &::std::option::Option<crate::types::SubscriptionPrincipal> {
        &self.principal
    }
    /// <p>The type of Amazon Q Business subscription you want to create.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::SubscriptionType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of Amazon Q Business subscription you want to create.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::SubscriptionType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of Amazon Q Business subscription you want to create.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::SubscriptionType> {
        &self.r#type
    }
    /// <p>A token that you provide to identify the request to create a subscription for your Amazon Q Business application.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that you provide to identify the request to create a subscription for your Amazon Q Business application.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A token that you provide to identify the request to create a subscription for your Amazon Q Business application.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateSubscriptionInput`](crate::operation::create_subscription::CreateSubscriptionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_subscription::CreateSubscriptionInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_subscription::CreateSubscriptionInput {
            application_id: self.application_id,
            principal: self.principal,
            r#type: self.r#type,
            client_token: self.client_token,
        })
    }
}
