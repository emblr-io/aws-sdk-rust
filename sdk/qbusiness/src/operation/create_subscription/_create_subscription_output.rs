// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateSubscriptionOutput {
    /// <p>The identifier of the Amazon Q Business subscription created.</p>
    pub subscription_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q Business subscription created.</p>
    pub subscription_arn: ::std::option::Option<::std::string::String>,
    /// <p>The type of your current Amazon Q Business subscription.</p>
    pub current_subscription: ::std::option::Option<crate::types::SubscriptionDetails>,
    /// <p>The type of the Amazon Q Business subscription for the next month.</p>
    pub next_subscription: ::std::option::Option<crate::types::SubscriptionDetails>,
    _request_id: Option<String>,
}
impl CreateSubscriptionOutput {
    /// <p>The identifier of the Amazon Q Business subscription created.</p>
    pub fn subscription_id(&self) -> ::std::option::Option<&str> {
        self.subscription_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q Business subscription created.</p>
    pub fn subscription_arn(&self) -> ::std::option::Option<&str> {
        self.subscription_arn.as_deref()
    }
    /// <p>The type of your current Amazon Q Business subscription.</p>
    pub fn current_subscription(&self) -> ::std::option::Option<&crate::types::SubscriptionDetails> {
        self.current_subscription.as_ref()
    }
    /// <p>The type of the Amazon Q Business subscription for the next month.</p>
    pub fn next_subscription(&self) -> ::std::option::Option<&crate::types::SubscriptionDetails> {
        self.next_subscription.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for CreateSubscriptionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`CreateSubscriptionOutput`](crate::operation::create_subscription::CreateSubscriptionOutput).
    pub fn builder() -> crate::operation::create_subscription::builders::CreateSubscriptionOutputBuilder {
        crate::operation::create_subscription::builders::CreateSubscriptionOutputBuilder::default()
    }
}

/// A builder for [`CreateSubscriptionOutput`](crate::operation::create_subscription::CreateSubscriptionOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateSubscriptionOutputBuilder {
    pub(crate) subscription_id: ::std::option::Option<::std::string::String>,
    pub(crate) subscription_arn: ::std::option::Option<::std::string::String>,
    pub(crate) current_subscription: ::std::option::Option<crate::types::SubscriptionDetails>,
    pub(crate) next_subscription: ::std::option::Option<crate::types::SubscriptionDetails>,
    _request_id: Option<String>,
}
impl CreateSubscriptionOutputBuilder {
    /// <p>The identifier of the Amazon Q Business subscription created.</p>
    pub fn subscription_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subscription_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q Business subscription created.</p>
    pub fn set_subscription_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subscription_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q Business subscription created.</p>
    pub fn get_subscription_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subscription_id
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q Business subscription created.</p>
    pub fn subscription_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subscription_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q Business subscription created.</p>
    pub fn set_subscription_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subscription_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Q Business subscription created.</p>
    pub fn get_subscription_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.subscription_arn
    }
    /// <p>The type of your current Amazon Q Business subscription.</p>
    pub fn current_subscription(mut self, input: crate::types::SubscriptionDetails) -> Self {
        self.current_subscription = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of your current Amazon Q Business subscription.</p>
    pub fn set_current_subscription(mut self, input: ::std::option::Option<crate::types::SubscriptionDetails>) -> Self {
        self.current_subscription = input;
        self
    }
    /// <p>The type of your current Amazon Q Business subscription.</p>
    pub fn get_current_subscription(&self) -> &::std::option::Option<crate::types::SubscriptionDetails> {
        &self.current_subscription
    }
    /// <p>The type of the Amazon Q Business subscription for the next month.</p>
    pub fn next_subscription(mut self, input: crate::types::SubscriptionDetails) -> Self {
        self.next_subscription = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the Amazon Q Business subscription for the next month.</p>
    pub fn set_next_subscription(mut self, input: ::std::option::Option<crate::types::SubscriptionDetails>) -> Self {
        self.next_subscription = input;
        self
    }
    /// <p>The type of the Amazon Q Business subscription for the next month.</p>
    pub fn get_next_subscription(&self) -> &::std::option::Option<crate::types::SubscriptionDetails> {
        &self.next_subscription
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateSubscriptionOutput`](crate::operation::create_subscription::CreateSubscriptionOutput).
    pub fn build(self) -> crate::operation::create_subscription::CreateSubscriptionOutput {
        crate::operation::create_subscription::CreateSubscriptionOutput {
            subscription_id: self.subscription_id,
            subscription_arn: self.subscription_arn,
            current_subscription: self.current_subscription,
            next_subscription: self.next_subscription,
            _request_id: self._request_id,
        }
    }
}
