// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateDataAccessorInput {
    /// <p>The unique identifier of the Amazon Q Business application.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role for the ISV that will be accessing the data.</p>
    pub principal: ::std::option::Option<::std::string::String>,
    /// <p>A list of action configurations specifying the allowed actions and any associated filters.</p>
    pub action_configurations: ::std::option::Option<::std::vec::Vec<crate::types::ActionConfiguration>>,
    /// <p>A unique, case-sensitive identifier you provide to ensure idempotency of the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>A friendly name for the data accessor.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The authentication configuration details for the data accessor. This specifies how the ISV will authenticate when accessing data through this data accessor.</p>
    pub authentication_detail: ::std::option::Option<crate::types::DataAccessorAuthenticationDetail>,
    /// <p>The tags to associate with the data accessor.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateDataAccessorInput {
    /// <p>The unique identifier of the Amazon Q Business application.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role for the ISV that will be accessing the data.</p>
    pub fn principal(&self) -> ::std::option::Option<&str> {
        self.principal.as_deref()
    }
    /// <p>A list of action configurations specifying the allowed actions and any associated filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.action_configurations.is_none()`.
    pub fn action_configurations(&self) -> &[crate::types::ActionConfiguration] {
        self.action_configurations.as_deref().unwrap_or_default()
    }
    /// <p>A unique, case-sensitive identifier you provide to ensure idempotency of the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>A friendly name for the data accessor.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The authentication configuration details for the data accessor. This specifies how the ISV will authenticate when accessing data through this data accessor.</p>
    pub fn authentication_detail(&self) -> ::std::option::Option<&crate::types::DataAccessorAuthenticationDetail> {
        self.authentication_detail.as_ref()
    }
    /// <p>The tags to associate with the data accessor.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for CreateDataAccessorInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDataAccessorInput");
        formatter.field("application_id", &self.application_id);
        formatter.field("principal", &self.principal);
        formatter.field("action_configurations", &self.action_configurations);
        formatter.field("client_token", &self.client_token);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("authentication_detail", &self.authentication_detail);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl CreateDataAccessorInput {
    /// Creates a new builder-style object to manufacture [`CreateDataAccessorInput`](crate::operation::create_data_accessor::CreateDataAccessorInput).
    pub fn builder() -> crate::operation::create_data_accessor::builders::CreateDataAccessorInputBuilder {
        crate::operation::create_data_accessor::builders::CreateDataAccessorInputBuilder::default()
    }
}

/// A builder for [`CreateDataAccessorInput`](crate::operation::create_data_accessor::CreateDataAccessorInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateDataAccessorInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) principal: ::std::option::Option<::std::string::String>,
    pub(crate) action_configurations: ::std::option::Option<::std::vec::Vec<crate::types::ActionConfiguration>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) authentication_detail: ::std::option::Option<crate::types::DataAccessorAuthenticationDetail>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateDataAccessorInputBuilder {
    /// <p>The unique identifier of the Amazon Q Business application.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Amazon Q Business application.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier of the Amazon Q Business application.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role for the ISV that will be accessing the data.</p>
    /// This field is required.
    pub fn principal(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role for the ISV that will be accessing the data.</p>
    pub fn set_principal(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role for the ISV that will be accessing the data.</p>
    pub fn get_principal(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal
    }
    /// Appends an item to `action_configurations`.
    ///
    /// To override the contents of this collection use [`set_action_configurations`](Self::set_action_configurations).
    ///
    /// <p>A list of action configurations specifying the allowed actions and any associated filters.</p>
    pub fn action_configurations(mut self, input: crate::types::ActionConfiguration) -> Self {
        let mut v = self.action_configurations.unwrap_or_default();
        v.push(input);
        self.action_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of action configurations specifying the allowed actions and any associated filters.</p>
    pub fn set_action_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ActionConfiguration>>) -> Self {
        self.action_configurations = input;
        self
    }
    /// <p>A list of action configurations specifying the allowed actions and any associated filters.</p>
    pub fn get_action_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ActionConfiguration>> {
        &self.action_configurations
    }
    /// <p>A unique, case-sensitive identifier you provide to ensure idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier you provide to ensure idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier you provide to ensure idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>A friendly name for the data accessor.</p>
    /// This field is required.
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A friendly name for the data accessor.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>A friendly name for the data accessor.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The authentication configuration details for the data accessor. This specifies how the ISV will authenticate when accessing data through this data accessor.</p>
    pub fn authentication_detail(mut self, input: crate::types::DataAccessorAuthenticationDetail) -> Self {
        self.authentication_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication configuration details for the data accessor. This specifies how the ISV will authenticate when accessing data through this data accessor.</p>
    pub fn set_authentication_detail(mut self, input: ::std::option::Option<crate::types::DataAccessorAuthenticationDetail>) -> Self {
        self.authentication_detail = input;
        self
    }
    /// <p>The authentication configuration details for the data accessor. This specifies how the ISV will authenticate when accessing data through this data accessor.</p>
    pub fn get_authentication_detail(&self) -> &::std::option::Option<crate::types::DataAccessorAuthenticationDetail> {
        &self.authentication_detail
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to associate with the data accessor.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags to associate with the data accessor.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags to associate with the data accessor.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateDataAccessorInput`](crate::operation::create_data_accessor::CreateDataAccessorInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_data_accessor::CreateDataAccessorInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_data_accessor::CreateDataAccessorInput {
            application_id: self.application_id,
            principal: self.principal,
            action_configurations: self.action_configurations,
            client_token: self.client_token,
            display_name: self.display_name,
            authentication_detail: self.authentication_detail,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for CreateDataAccessorInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDataAccessorInputBuilder");
        formatter.field("application_id", &self.application_id);
        formatter.field("principal", &self.principal);
        formatter.field("action_configurations", &self.action_configurations);
        formatter.field("client_token", &self.client_token);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("authentication_detail", &self.authentication_detail);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
