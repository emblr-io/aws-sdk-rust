// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteAttachmentInput {
    /// <p>The unique identifier for the Amazon Q Business application environment.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the conversation.</p>
    pub conversation_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the attachment.</p>
    pub attachment_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the user involved in the conversation.</p>
    pub user_id: ::std::option::Option<::std::string::String>,
}
impl DeleteAttachmentInput {
    /// <p>The unique identifier for the Amazon Q Business application environment.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The unique identifier of the conversation.</p>
    pub fn conversation_id(&self) -> ::std::option::Option<&str> {
        self.conversation_id.as_deref()
    }
    /// <p>The unique identifier for the attachment.</p>
    pub fn attachment_id(&self) -> ::std::option::Option<&str> {
        self.attachment_id.as_deref()
    }
    /// <p>The unique identifier of the user involved in the conversation.</p>
    pub fn user_id(&self) -> ::std::option::Option<&str> {
        self.user_id.as_deref()
    }
}
impl DeleteAttachmentInput {
    /// Creates a new builder-style object to manufacture [`DeleteAttachmentInput`](crate::operation::delete_attachment::DeleteAttachmentInput).
    pub fn builder() -> crate::operation::delete_attachment::builders::DeleteAttachmentInputBuilder {
        crate::operation::delete_attachment::builders::DeleteAttachmentInputBuilder::default()
    }
}

/// A builder for [`DeleteAttachmentInput`](crate::operation::delete_attachment::DeleteAttachmentInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeleteAttachmentInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) conversation_id: ::std::option::Option<::std::string::String>,
    pub(crate) attachment_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
}
impl DeleteAttachmentInputBuilder {
    /// <p>The unique identifier for the Amazon Q Business application environment.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the Amazon Q Business application environment.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier for the Amazon Q Business application environment.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The unique identifier of the conversation.</p>
    /// This field is required.
    pub fn conversation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.conversation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the conversation.</p>
    pub fn set_conversation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.conversation_id = input;
        self
    }
    /// <p>The unique identifier of the conversation.</p>
    pub fn get_conversation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.conversation_id
    }
    /// <p>The unique identifier for the attachment.</p>
    /// This field is required.
    pub fn attachment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attachment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the attachment.</p>
    pub fn set_attachment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attachment_id = input;
        self
    }
    /// <p>The unique identifier for the attachment.</p>
    pub fn get_attachment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.attachment_id
    }
    /// <p>The unique identifier of the user involved in the conversation.</p>
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the user involved in the conversation.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The unique identifier of the user involved in the conversation.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// Consumes the builder and constructs a [`DeleteAttachmentInput`](crate::operation::delete_attachment::DeleteAttachmentInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::delete_attachment::DeleteAttachmentInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::delete_attachment::DeleteAttachmentInput {
            application_id: self.application_id,
            conversation_id: self.conversation_id,
            attachment_id: self.attachment_id,
            user_id: self.user_id,
        })
    }
}
