// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchAssociateCodeSecurityScanConfigurationOutput {
    /// <p>Details of any code repositories that failed to be associated with the scan configuration.</p>
    pub failed_associations: ::std::option::Option<::std::vec::Vec<crate::types::FailedAssociationResult>>,
    /// <p>Details of code repositories that were successfully associated with the scan configuration.</p>
    pub successful_associations: ::std::option::Option<::std::vec::Vec<crate::types::SuccessfulAssociationResult>>,
    _request_id: Option<String>,
}
impl BatchAssociateCodeSecurityScanConfigurationOutput {
    /// <p>Details of any code repositories that failed to be associated with the scan configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.failed_associations.is_none()`.
    pub fn failed_associations(&self) -> &[crate::types::FailedAssociationResult] {
        self.failed_associations.as_deref().unwrap_or_default()
    }
    /// <p>Details of code repositories that were successfully associated with the scan configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.successful_associations.is_none()`.
    pub fn successful_associations(&self) -> &[crate::types::SuccessfulAssociationResult] {
        self.successful_associations.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for BatchAssociateCodeSecurityScanConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchAssociateCodeSecurityScanConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`BatchAssociateCodeSecurityScanConfigurationOutput`](crate::operation::batch_associate_code_security_scan_configuration::BatchAssociateCodeSecurityScanConfigurationOutput).
    pub fn builder(
    ) -> crate::operation::batch_associate_code_security_scan_configuration::builders::BatchAssociateCodeSecurityScanConfigurationOutputBuilder {
        crate::operation::batch_associate_code_security_scan_configuration::builders::BatchAssociateCodeSecurityScanConfigurationOutputBuilder::default()
    }
}

/// A builder for [`BatchAssociateCodeSecurityScanConfigurationOutput`](crate::operation::batch_associate_code_security_scan_configuration::BatchAssociateCodeSecurityScanConfigurationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchAssociateCodeSecurityScanConfigurationOutputBuilder {
    pub(crate) failed_associations: ::std::option::Option<::std::vec::Vec<crate::types::FailedAssociationResult>>,
    pub(crate) successful_associations: ::std::option::Option<::std::vec::Vec<crate::types::SuccessfulAssociationResult>>,
    _request_id: Option<String>,
}
impl BatchAssociateCodeSecurityScanConfigurationOutputBuilder {
    /// Appends an item to `failed_associations`.
    ///
    /// To override the contents of this collection use [`set_failed_associations`](Self::set_failed_associations).
    ///
    /// <p>Details of any code repositories that failed to be associated with the scan configuration.</p>
    pub fn failed_associations(mut self, input: crate::types::FailedAssociationResult) -> Self {
        let mut v = self.failed_associations.unwrap_or_default();
        v.push(input);
        self.failed_associations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Details of any code repositories that failed to be associated with the scan configuration.</p>
    pub fn set_failed_associations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FailedAssociationResult>>) -> Self {
        self.failed_associations = input;
        self
    }
    /// <p>Details of any code repositories that failed to be associated with the scan configuration.</p>
    pub fn get_failed_associations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FailedAssociationResult>> {
        &self.failed_associations
    }
    /// Appends an item to `successful_associations`.
    ///
    /// To override the contents of this collection use [`set_successful_associations`](Self::set_successful_associations).
    ///
    /// <p>Details of code repositories that were successfully associated with the scan configuration.</p>
    pub fn successful_associations(mut self, input: crate::types::SuccessfulAssociationResult) -> Self {
        let mut v = self.successful_associations.unwrap_or_default();
        v.push(input);
        self.successful_associations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Details of code repositories that were successfully associated with the scan configuration.</p>
    pub fn set_successful_associations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SuccessfulAssociationResult>>) -> Self {
        self.successful_associations = input;
        self
    }
    /// <p>Details of code repositories that were successfully associated with the scan configuration.</p>
    pub fn get_successful_associations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SuccessfulAssociationResult>> {
        &self.successful_associations
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchAssociateCodeSecurityScanConfigurationOutput`](crate::operation::batch_associate_code_security_scan_configuration::BatchAssociateCodeSecurityScanConfigurationOutput).
    pub fn build(self) -> crate::operation::batch_associate_code_security_scan_configuration::BatchAssociateCodeSecurityScanConfigurationOutput {
        crate::operation::batch_associate_code_security_scan_configuration::BatchAssociateCodeSecurityScanConfigurationOutput {
            failed_associations: self.failed_associations,
            successful_associations: self.successful_associations,
            _request_id: self._request_id,
        }
    }
}
