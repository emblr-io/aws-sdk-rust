// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetCodeSecurityScanOutput {
    /// <p>The unique identifier of the scan.</p>
    pub scan_id: ::std::option::Option<::std::string::String>,
    /// <p>The resource identifier for the code repository that was scanned.</p>
    pub resource: ::std::option::Option<crate::types::CodeSecurityResource>,
    /// <p>The Amazon Web Services account ID associated with the scan.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the scan.</p>
    pub status: ::std::option::Option<crate::types::CodeScanStatus>,
    /// <p>The reason for the current status of the scan.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the scan was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the scan was last updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The identifier of the last commit that was scanned. This is only returned if the scan was successful or skipped.</p>
    pub last_commit_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetCodeSecurityScanOutput {
    /// <p>The unique identifier of the scan.</p>
    pub fn scan_id(&self) -> ::std::option::Option<&str> {
        self.scan_id.as_deref()
    }
    /// <p>The resource identifier for the code repository that was scanned.</p>
    pub fn resource(&self) -> ::std::option::Option<&crate::types::CodeSecurityResource> {
        self.resource.as_ref()
    }
    /// <p>The Amazon Web Services account ID associated with the scan.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The current status of the scan.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::CodeScanStatus> {
        self.status.as_ref()
    }
    /// <p>The reason for the current status of the scan.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The timestamp when the scan was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp when the scan was last updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The identifier of the last commit that was scanned. This is only returned if the scan was successful or skipped.</p>
    pub fn last_commit_id(&self) -> ::std::option::Option<&str> {
        self.last_commit_id.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetCodeSecurityScanOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetCodeSecurityScanOutput {
    /// Creates a new builder-style object to manufacture [`GetCodeSecurityScanOutput`](crate::operation::get_code_security_scan::GetCodeSecurityScanOutput).
    pub fn builder() -> crate::operation::get_code_security_scan::builders::GetCodeSecurityScanOutputBuilder {
        crate::operation::get_code_security_scan::builders::GetCodeSecurityScanOutputBuilder::default()
    }
}

/// A builder for [`GetCodeSecurityScanOutput`](crate::operation::get_code_security_scan::GetCodeSecurityScanOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetCodeSecurityScanOutputBuilder {
    pub(crate) scan_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource: ::std::option::Option<crate::types::CodeSecurityResource>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::CodeScanStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_commit_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetCodeSecurityScanOutputBuilder {
    /// <p>The unique identifier of the scan.</p>
    pub fn scan_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scan_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the scan.</p>
    pub fn set_scan_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scan_id = input;
        self
    }
    /// <p>The unique identifier of the scan.</p>
    pub fn get_scan_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.scan_id
    }
    /// <p>The resource identifier for the code repository that was scanned.</p>
    pub fn resource(mut self, input: crate::types::CodeSecurityResource) -> Self {
        self.resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>The resource identifier for the code repository that was scanned.</p>
    pub fn set_resource(mut self, input: ::std::option::Option<crate::types::CodeSecurityResource>) -> Self {
        self.resource = input;
        self
    }
    /// <p>The resource identifier for the code repository that was scanned.</p>
    pub fn get_resource(&self) -> &::std::option::Option<crate::types::CodeSecurityResource> {
        &self.resource
    }
    /// <p>The Amazon Web Services account ID associated with the scan.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID associated with the scan.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID associated with the scan.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The current status of the scan.</p>
    pub fn status(mut self, input: crate::types::CodeScanStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the scan.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::CodeScanStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the scan.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::CodeScanStatus> {
        &self.status
    }
    /// <p>The reason for the current status of the scan.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the current status of the scan.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The reason for the current status of the scan.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The timestamp when the scan was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the scan was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the scan was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when the scan was last updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the scan was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp when the scan was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The identifier of the last commit that was scanned. This is only returned if the scan was successful or skipped.</p>
    pub fn last_commit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_commit_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the last commit that was scanned. This is only returned if the scan was successful or skipped.</p>
    pub fn set_last_commit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_commit_id = input;
        self
    }
    /// <p>The identifier of the last commit that was scanned. This is only returned if the scan was successful or skipped.</p>
    pub fn get_last_commit_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_commit_id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetCodeSecurityScanOutput`](crate::operation::get_code_security_scan::GetCodeSecurityScanOutput).
    pub fn build(self) -> crate::operation::get_code_security_scan::GetCodeSecurityScanOutput {
        crate::operation::get_code_security_scan::GetCodeSecurityScanOutput {
            scan_id: self.scan_id,
            resource: self.resource,
            account_id: self.account_id,
            status: self.status,
            status_reason: self.status_reason,
            created_at: self.created_at,
            updated_at: self.updated_at,
            last_commit_id: self.last_commit_id,
            _request_id: self._request_id,
        }
    }
}
