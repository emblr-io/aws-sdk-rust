// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetCisScanReportInput {
    /// <p>The scan ARN.</p>
    pub scan_arn: ::std::option::Option<::std::string::String>,
    /// <p>The target accounts.</p>
    pub target_accounts: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The format of the report. Valid values are <code>PDF</code> and <code>CSV</code>. If no value is specified, the report format defaults to <code>PDF</code>.</p>
    pub report_format: ::std::option::Option<crate::types::CisReportFormat>,
}
impl GetCisScanReportInput {
    /// <p>The scan ARN.</p>
    pub fn scan_arn(&self) -> ::std::option::Option<&str> {
        self.scan_arn.as_deref()
    }
    /// <p>The target accounts.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.target_accounts.is_none()`.
    pub fn target_accounts(&self) -> &[::std::string::String] {
        self.target_accounts.as_deref().unwrap_or_default()
    }
    /// <p>The format of the report. Valid values are <code>PDF</code> and <code>CSV</code>. If no value is specified, the report format defaults to <code>PDF</code>.</p>
    pub fn report_format(&self) -> ::std::option::Option<&crate::types::CisReportFormat> {
        self.report_format.as_ref()
    }
}
impl GetCisScanReportInput {
    /// Creates a new builder-style object to manufacture [`GetCisScanReportInput`](crate::operation::get_cis_scan_report::GetCisScanReportInput).
    pub fn builder() -> crate::operation::get_cis_scan_report::builders::GetCisScanReportInputBuilder {
        crate::operation::get_cis_scan_report::builders::GetCisScanReportInputBuilder::default()
    }
}

/// A builder for [`GetCisScanReportInput`](crate::operation::get_cis_scan_report::GetCisScanReportInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetCisScanReportInputBuilder {
    pub(crate) scan_arn: ::std::option::Option<::std::string::String>,
    pub(crate) target_accounts: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) report_format: ::std::option::Option<crate::types::CisReportFormat>,
}
impl GetCisScanReportInputBuilder {
    /// <p>The scan ARN.</p>
    /// This field is required.
    pub fn scan_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scan_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The scan ARN.</p>
    pub fn set_scan_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scan_arn = input;
        self
    }
    /// <p>The scan ARN.</p>
    pub fn get_scan_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.scan_arn
    }
    /// Appends an item to `target_accounts`.
    ///
    /// To override the contents of this collection use [`set_target_accounts`](Self::set_target_accounts).
    ///
    /// <p>The target accounts.</p>
    pub fn target_accounts(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.target_accounts.unwrap_or_default();
        v.push(input.into());
        self.target_accounts = ::std::option::Option::Some(v);
        self
    }
    /// <p>The target accounts.</p>
    pub fn set_target_accounts(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.target_accounts = input;
        self
    }
    /// <p>The target accounts.</p>
    pub fn get_target_accounts(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.target_accounts
    }
    /// <p>The format of the report. Valid values are <code>PDF</code> and <code>CSV</code>. If no value is specified, the report format defaults to <code>PDF</code>.</p>
    pub fn report_format(mut self, input: crate::types::CisReportFormat) -> Self {
        self.report_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format of the report. Valid values are <code>PDF</code> and <code>CSV</code>. If no value is specified, the report format defaults to <code>PDF</code>.</p>
    pub fn set_report_format(mut self, input: ::std::option::Option<crate::types::CisReportFormat>) -> Self {
        self.report_format = input;
        self
    }
    /// <p>The format of the report. Valid values are <code>PDF</code> and <code>CSV</code>. If no value is specified, the report format defaults to <code>PDF</code>.</p>
    pub fn get_report_format(&self) -> &::std::option::Option<crate::types::CisReportFormat> {
        &self.report_format
    }
    /// Consumes the builder and constructs a [`GetCisScanReportInput`](crate::operation::get_cis_scan_report::GetCisScanReportInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_cis_scan_report::GetCisScanReportInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_cis_scan_report::GetCisScanReportInput {
            scan_arn: self.scan_arn,
            target_accounts: self.target_accounts,
            report_format: self.report_format,
        })
    }
}
