// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a failed attempt to associate or disassociate a code repository with a scan configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FailedAssociationResult {
    /// <p>The Amazon Resource Name (ARN) of the scan configuration that failed to be associated or disassociated.</p>
    pub scan_configuration_arn: ::std::option::Option<::std::string::String>,
    /// <p>Identifies a specific resource in a code repository that will be scanned.</p>
    pub resource: ::std::option::Option<crate::types::CodeSecurityResource>,
    /// <p>The status code indicating why the association or disassociation failed.</p>
    pub status_code: ::std::option::Option<crate::types::AssociationResultStatusCode>,
    /// <p>A message explaining why the association or disassociation failed.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
}
impl FailedAssociationResult {
    /// <p>The Amazon Resource Name (ARN) of the scan configuration that failed to be associated or disassociated.</p>
    pub fn scan_configuration_arn(&self) -> ::std::option::Option<&str> {
        self.scan_configuration_arn.as_deref()
    }
    /// <p>Identifies a specific resource in a code repository that will be scanned.</p>
    pub fn resource(&self) -> ::std::option::Option<&crate::types::CodeSecurityResource> {
        self.resource.as_ref()
    }
    /// <p>The status code indicating why the association or disassociation failed.</p>
    pub fn status_code(&self) -> ::std::option::Option<&crate::types::AssociationResultStatusCode> {
        self.status_code.as_ref()
    }
    /// <p>A message explaining why the association or disassociation failed.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
}
impl FailedAssociationResult {
    /// Creates a new builder-style object to manufacture [`FailedAssociationResult`](crate::types::FailedAssociationResult).
    pub fn builder() -> crate::types::builders::FailedAssociationResultBuilder {
        crate::types::builders::FailedAssociationResultBuilder::default()
    }
}

/// A builder for [`FailedAssociationResult`](crate::types::FailedAssociationResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FailedAssociationResultBuilder {
    pub(crate) scan_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) resource: ::std::option::Option<crate::types::CodeSecurityResource>,
    pub(crate) status_code: ::std::option::Option<crate::types::AssociationResultStatusCode>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
}
impl FailedAssociationResultBuilder {
    /// <p>The Amazon Resource Name (ARN) of the scan configuration that failed to be associated or disassociated.</p>
    pub fn scan_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scan_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the scan configuration that failed to be associated or disassociated.</p>
    pub fn set_scan_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scan_configuration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the scan configuration that failed to be associated or disassociated.</p>
    pub fn get_scan_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.scan_configuration_arn
    }
    /// <p>Identifies a specific resource in a code repository that will be scanned.</p>
    pub fn resource(mut self, input: crate::types::CodeSecurityResource) -> Self {
        self.resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies a specific resource in a code repository that will be scanned.</p>
    pub fn set_resource(mut self, input: ::std::option::Option<crate::types::CodeSecurityResource>) -> Self {
        self.resource = input;
        self
    }
    /// <p>Identifies a specific resource in a code repository that will be scanned.</p>
    pub fn get_resource(&self) -> &::std::option::Option<crate::types::CodeSecurityResource> {
        &self.resource
    }
    /// <p>The status code indicating why the association or disassociation failed.</p>
    pub fn status_code(mut self, input: crate::types::AssociationResultStatusCode) -> Self {
        self.status_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status code indicating why the association or disassociation failed.</p>
    pub fn set_status_code(mut self, input: ::std::option::Option<crate::types::AssociationResultStatusCode>) -> Self {
        self.status_code = input;
        self
    }
    /// <p>The status code indicating why the association or disassociation failed.</p>
    pub fn get_status_code(&self) -> &::std::option::Option<crate::types::AssociationResultStatusCode> {
        &self.status_code
    }
    /// <p>A message explaining why the association or disassociation failed.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message explaining why the association or disassociation failed.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>A message explaining why the association or disassociation failed.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// Consumes the builder and constructs a [`FailedAssociationResult`](crate::types::FailedAssociationResult).
    pub fn build(self) -> crate::types::FailedAssociationResult {
        crate::types::FailedAssociationResult {
            scan_configuration_arn: self.scan_configuration_arn,
            resource: self.resource,
            status_code: self.status_code,
            status_message: self.status_message,
        }
    }
}
