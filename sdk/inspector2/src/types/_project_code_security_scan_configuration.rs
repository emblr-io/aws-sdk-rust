// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the scan configuration settings applied to a specific project in a code repository.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProjectCodeSecurityScanConfiguration {
    /// <p>The periodic scan configurations applied to the project.</p>
    pub periodic_scan_configurations: ::std::option::Option<::std::vec::Vec<crate::types::ProjectPeriodicScanConfiguration>>,
    /// <p>The continuous integration scan configurations applied to the project.</p>
    pub continuous_integration_scan_configurations:
        ::std::option::Option<::std::vec::Vec<crate::types::ProjectContinuousIntegrationScanConfiguration>>,
}
impl ProjectCodeSecurityScanConfiguration {
    /// <p>The periodic scan configurations applied to the project.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.periodic_scan_configurations.is_none()`.
    pub fn periodic_scan_configurations(&self) -> &[crate::types::ProjectPeriodicScanConfiguration] {
        self.periodic_scan_configurations.as_deref().unwrap_or_default()
    }
    /// <p>The continuous integration scan configurations applied to the project.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.continuous_integration_scan_configurations.is_none()`.
    pub fn continuous_integration_scan_configurations(&self) -> &[crate::types::ProjectContinuousIntegrationScanConfiguration] {
        self.continuous_integration_scan_configurations.as_deref().unwrap_or_default()
    }
}
impl ProjectCodeSecurityScanConfiguration {
    /// Creates a new builder-style object to manufacture [`ProjectCodeSecurityScanConfiguration`](crate::types::ProjectCodeSecurityScanConfiguration).
    pub fn builder() -> crate::types::builders::ProjectCodeSecurityScanConfigurationBuilder {
        crate::types::builders::ProjectCodeSecurityScanConfigurationBuilder::default()
    }
}

/// A builder for [`ProjectCodeSecurityScanConfiguration`](crate::types::ProjectCodeSecurityScanConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProjectCodeSecurityScanConfigurationBuilder {
    pub(crate) periodic_scan_configurations: ::std::option::Option<::std::vec::Vec<crate::types::ProjectPeriodicScanConfiguration>>,
    pub(crate) continuous_integration_scan_configurations:
        ::std::option::Option<::std::vec::Vec<crate::types::ProjectContinuousIntegrationScanConfiguration>>,
}
impl ProjectCodeSecurityScanConfigurationBuilder {
    /// Appends an item to `periodic_scan_configurations`.
    ///
    /// To override the contents of this collection use [`set_periodic_scan_configurations`](Self::set_periodic_scan_configurations).
    ///
    /// <p>The periodic scan configurations applied to the project.</p>
    pub fn periodic_scan_configurations(mut self, input: crate::types::ProjectPeriodicScanConfiguration) -> Self {
        let mut v = self.periodic_scan_configurations.unwrap_or_default();
        v.push(input);
        self.periodic_scan_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The periodic scan configurations applied to the project.</p>
    pub fn set_periodic_scan_configurations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ProjectPeriodicScanConfiguration>>,
    ) -> Self {
        self.periodic_scan_configurations = input;
        self
    }
    /// <p>The periodic scan configurations applied to the project.</p>
    pub fn get_periodic_scan_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProjectPeriodicScanConfiguration>> {
        &self.periodic_scan_configurations
    }
    /// Appends an item to `continuous_integration_scan_configurations`.
    ///
    /// To override the contents of this collection use [`set_continuous_integration_scan_configurations`](Self::set_continuous_integration_scan_configurations).
    ///
    /// <p>The continuous integration scan configurations applied to the project.</p>
    pub fn continuous_integration_scan_configurations(mut self, input: crate::types::ProjectContinuousIntegrationScanConfiguration) -> Self {
        let mut v = self.continuous_integration_scan_configurations.unwrap_or_default();
        v.push(input);
        self.continuous_integration_scan_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The continuous integration scan configurations applied to the project.</p>
    pub fn set_continuous_integration_scan_configurations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ProjectContinuousIntegrationScanConfiguration>>,
    ) -> Self {
        self.continuous_integration_scan_configurations = input;
        self
    }
    /// <p>The continuous integration scan configurations applied to the project.</p>
    pub fn get_continuous_integration_scan_configurations(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::ProjectContinuousIntegrationScanConfiguration>> {
        &self.continuous_integration_scan_configurations
    }
    /// Consumes the builder and constructs a [`ProjectCodeSecurityScanConfiguration`](crate::types::ProjectCodeSecurityScanConfiguration).
    pub fn build(self) -> crate::types::ProjectCodeSecurityScanConfiguration {
        crate::types::ProjectCodeSecurityScanConfiguration {
            periodic_scan_configurations: self.periodic_scan_configurations,
            continuous_integration_scan_configurations: self.continuous_integration_scan_configurations,
        }
    }
}
