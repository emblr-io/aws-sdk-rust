// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details that define an aggregation based on code repositories.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeRepositoryAggregation {
    /// <p>The project names to include in the aggregation results.</p>
    pub project_names: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The repository provider types to include in the aggregation results.</p>
    pub provider_types: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    /// <p>The order to sort results by (ascending or descending) in the code repository aggregation.</p>
    pub sort_order: ::std::option::Option<crate::types::SortOrder>,
    /// <p>The value to sort results by in the code repository aggregation.</p>
    pub sort_by: ::std::option::Option<crate::types::CodeRepositorySortBy>,
    /// <p>The resource IDs to include in the aggregation results.</p>
    pub resource_ids: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
}
impl CodeRepositoryAggregation {
    /// <p>The project names to include in the aggregation results.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.project_names.is_none()`.
    pub fn project_names(&self) -> &[crate::types::StringFilter] {
        self.project_names.as_deref().unwrap_or_default()
    }
    /// <p>The repository provider types to include in the aggregation results.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.provider_types.is_none()`.
    pub fn provider_types(&self) -> &[crate::types::StringFilter] {
        self.provider_types.as_deref().unwrap_or_default()
    }
    /// <p>The order to sort results by (ascending or descending) in the code repository aggregation.</p>
    pub fn sort_order(&self) -> ::std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
    /// <p>The value to sort results by in the code repository aggregation.</p>
    pub fn sort_by(&self) -> ::std::option::Option<&crate::types::CodeRepositorySortBy> {
        self.sort_by.as_ref()
    }
    /// <p>The resource IDs to include in the aggregation results.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_ids.is_none()`.
    pub fn resource_ids(&self) -> &[crate::types::StringFilter] {
        self.resource_ids.as_deref().unwrap_or_default()
    }
}
impl CodeRepositoryAggregation {
    /// Creates a new builder-style object to manufacture [`CodeRepositoryAggregation`](crate::types::CodeRepositoryAggregation).
    pub fn builder() -> crate::types::builders::CodeRepositoryAggregationBuilder {
        crate::types::builders::CodeRepositoryAggregationBuilder::default()
    }
}

/// A builder for [`CodeRepositoryAggregation`](crate::types::CodeRepositoryAggregation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CodeRepositoryAggregationBuilder {
    pub(crate) project_names: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) provider_types: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
    pub(crate) sort_order: ::std::option::Option<crate::types::SortOrder>,
    pub(crate) sort_by: ::std::option::Option<crate::types::CodeRepositorySortBy>,
    pub(crate) resource_ids: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>,
}
impl CodeRepositoryAggregationBuilder {
    /// Appends an item to `project_names`.
    ///
    /// To override the contents of this collection use [`set_project_names`](Self::set_project_names).
    ///
    /// <p>The project names to include in the aggregation results.</p>
    pub fn project_names(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.project_names.unwrap_or_default();
        v.push(input);
        self.project_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>The project names to include in the aggregation results.</p>
    pub fn set_project_names(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.project_names = input;
        self
    }
    /// <p>The project names to include in the aggregation results.</p>
    pub fn get_project_names(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.project_names
    }
    /// Appends an item to `provider_types`.
    ///
    /// To override the contents of this collection use [`set_provider_types`](Self::set_provider_types).
    ///
    /// <p>The repository provider types to include in the aggregation results.</p>
    pub fn provider_types(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.provider_types.unwrap_or_default();
        v.push(input);
        self.provider_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The repository provider types to include in the aggregation results.</p>
    pub fn set_provider_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.provider_types = input;
        self
    }
    /// <p>The repository provider types to include in the aggregation results.</p>
    pub fn get_provider_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.provider_types
    }
    /// <p>The order to sort results by (ascending or descending) in the code repository aggregation.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>The order to sort results by (ascending or descending) in the code repository aggregation.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The order to sort results by (ascending or descending) in the code repository aggregation.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortOrder> {
        &self.sort_order
    }
    /// <p>The value to sort results by in the code repository aggregation.</p>
    pub fn sort_by(mut self, input: crate::types::CodeRepositorySortBy) -> Self {
        self.sort_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value to sort results by in the code repository aggregation.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::CodeRepositorySortBy>) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>The value to sort results by in the code repository aggregation.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::CodeRepositorySortBy> {
        &self.sort_by
    }
    /// Appends an item to `resource_ids`.
    ///
    /// To override the contents of this collection use [`set_resource_ids`](Self::set_resource_ids).
    ///
    /// <p>The resource IDs to include in the aggregation results.</p>
    pub fn resource_ids(mut self, input: crate::types::StringFilter) -> Self {
        let mut v = self.resource_ids.unwrap_or_default();
        v.push(input);
        self.resource_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The resource IDs to include in the aggregation results.</p>
    pub fn set_resource_ids(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StringFilter>>) -> Self {
        self.resource_ids = input;
        self
    }
    /// <p>The resource IDs to include in the aggregation results.</p>
    pub fn get_resource_ids(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StringFilter>> {
        &self.resource_ids
    }
    /// Consumes the builder and constructs a [`CodeRepositoryAggregation`](crate::types::CodeRepositoryAggregation).
    pub fn build(self) -> crate::types::CodeRepositoryAggregation {
        crate::types::CodeRepositoryAggregation {
            project_names: self.project_names,
            provider_types: self.provider_types,
            sort_order: self.sort_order,
            sort_by: self.sort_by,
            resource_ids: self.resource_ids,
        }
    }
}
