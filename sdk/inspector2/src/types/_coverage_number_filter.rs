// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The coverage number to be used in the filter.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CoverageNumberFilter {
    /// <p>The upper inclusive for the coverage number.&gt;</p>
    pub upper_inclusive: ::std::option::Option<i64>,
    /// <p>The lower inclusive for the coverage number.</p>
    pub lower_inclusive: ::std::option::Option<i64>,
}
impl CoverageNumberFilter {
    /// <p>The upper inclusive for the coverage number.&gt;</p>
    pub fn upper_inclusive(&self) -> ::std::option::Option<i64> {
        self.upper_inclusive
    }
    /// <p>The lower inclusive for the coverage number.</p>
    pub fn lower_inclusive(&self) -> ::std::option::Option<i64> {
        self.lower_inclusive
    }
}
impl CoverageNumberFilter {
    /// Creates a new builder-style object to manufacture [`CoverageNumberFilter`](crate::types::CoverageNumberFilter).
    pub fn builder() -> crate::types::builders::CoverageNumberFilterBuilder {
        crate::types::builders::CoverageNumberFilterBuilder::default()
    }
}

/// A builder for [`CoverageNumberFilter`](crate::types::CoverageNumberFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CoverageNumberFilterBuilder {
    pub(crate) upper_inclusive: ::std::option::Option<i64>,
    pub(crate) lower_inclusive: ::std::option::Option<i64>,
}
impl CoverageNumberFilterBuilder {
    /// <p>The upper inclusive for the coverage number.&gt;</p>
    pub fn upper_inclusive(mut self, input: i64) -> Self {
        self.upper_inclusive = ::std::option::Option::Some(input);
        self
    }
    /// <p>The upper inclusive for the coverage number.&gt;</p>
    pub fn set_upper_inclusive(mut self, input: ::std::option::Option<i64>) -> Self {
        self.upper_inclusive = input;
        self
    }
    /// <p>The upper inclusive for the coverage number.&gt;</p>
    pub fn get_upper_inclusive(&self) -> &::std::option::Option<i64> {
        &self.upper_inclusive
    }
    /// <p>The lower inclusive for the coverage number.</p>
    pub fn lower_inclusive(mut self, input: i64) -> Self {
        self.lower_inclusive = ::std::option::Option::Some(input);
        self
    }
    /// <p>The lower inclusive for the coverage number.</p>
    pub fn set_lower_inclusive(mut self, input: ::std::option::Option<i64>) -> Self {
        self.lower_inclusive = input;
        self
    }
    /// <p>The lower inclusive for the coverage number.</p>
    pub fn get_lower_inclusive(&self) -> &::std::option::Option<i64> {
        &self.lower_inclusive
    }
    /// Consumes the builder and constructs a [`CoverageNumberFilter`](crate::types::CoverageNumberFilter).
    pub fn build(self) -> crate::types::CoverageNumberFilter {
        crate::types::CoverageNumberFilter {
            upper_inclusive: self.upper_inclusive,
            lower_inclusive: self.lower_inclusive,
        }
    }
}
