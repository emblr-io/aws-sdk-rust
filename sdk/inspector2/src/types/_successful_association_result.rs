// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a successful association or disassociation between a code repository and a scan configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SuccessfulAssociationResult {
    /// <p>The Amazon Resource Name (ARN) of the scan configuration that was successfully associated or disassociated.</p>
    pub scan_configuration_arn: ::std::option::Option<::std::string::String>,
    /// <p>Identifies a specific resource in a code repository that will be scanned.</p>
    pub resource: ::std::option::Option<crate::types::CodeSecurityResource>,
}
impl SuccessfulAssociationResult {
    /// <p>The Amazon Resource Name (ARN) of the scan configuration that was successfully associated or disassociated.</p>
    pub fn scan_configuration_arn(&self) -> ::std::option::Option<&str> {
        self.scan_configuration_arn.as_deref()
    }
    /// <p>Identifies a specific resource in a code repository that will be scanned.</p>
    pub fn resource(&self) -> ::std::option::Option<&crate::types::CodeSecurityResource> {
        self.resource.as_ref()
    }
}
impl SuccessfulAssociationResult {
    /// Creates a new builder-style object to manufacture [`SuccessfulAssociationResult`](crate::types::SuccessfulAssociationResult).
    pub fn builder() -> crate::types::builders::SuccessfulAssociationResultBuilder {
        crate::types::builders::SuccessfulAssociationResultBuilder::default()
    }
}

/// A builder for [`SuccessfulAssociationResult`](crate::types::SuccessfulAssociationResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SuccessfulAssociationResultBuilder {
    pub(crate) scan_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) resource: ::std::option::Option<crate::types::CodeSecurityResource>,
}
impl SuccessfulAssociationResultBuilder {
    /// <p>The Amazon Resource Name (ARN) of the scan configuration that was successfully associated or disassociated.</p>
    pub fn scan_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scan_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the scan configuration that was successfully associated or disassociated.</p>
    pub fn set_scan_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scan_configuration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the scan configuration that was successfully associated or disassociated.</p>
    pub fn get_scan_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.scan_configuration_arn
    }
    /// <p>Identifies a specific resource in a code repository that will be scanned.</p>
    pub fn resource(mut self, input: crate::types::CodeSecurityResource) -> Self {
        self.resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies a specific resource in a code repository that will be scanned.</p>
    pub fn set_resource(mut self, input: ::std::option::Option<crate::types::CodeSecurityResource>) -> Self {
        self.resource = input;
        self
    }
    /// <p>Identifies a specific resource in a code repository that will be scanned.</p>
    pub fn get_resource(&self) -> &::std::option::Option<crate::types::CodeSecurityResource> {
        &self.resource
    }
    /// Consumes the builder and constructs a [`SuccessfulAssociationResult`](crate::types::SuccessfulAssociationResult).
    pub fn build(self) -> crate::types::SuccessfulAssociationResult {
        crate::types::SuccessfulAssociationResult {
            scan_configuration_arn: self.scan_configuration_arn,
            resource: self.resource,
        }
    }
}
