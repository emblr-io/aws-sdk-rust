// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of information about a code security integration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeSecurityIntegrationSummary {
    /// <p>The Amazon Resource Name (ARN) of the code security integration.</p>
    pub integration_arn: ::std::string::String,
    /// <p>The name of the code security integration.</p>
    pub name: ::std::string::String,
    /// <p>The type of repository provider for the integration.</p>
    pub r#type: crate::types::IntegrationType,
    /// <p>The current status of the code security integration.</p>
    pub status: crate::types::IntegrationStatus,
    /// <p>The reason for the current status of the code security integration.</p>
    pub status_reason: ::std::string::String,
    /// <p>The timestamp when the code security integration was created.</p>
    pub created_on: ::aws_smithy_types::DateTime,
    /// <p>The timestamp when the code security integration was last updated.</p>
    pub last_update_on: ::aws_smithy_types::DateTime,
    /// <p>The tags associated with the code security integration.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CodeSecurityIntegrationSummary {
    /// <p>The Amazon Resource Name (ARN) of the code security integration.</p>
    pub fn integration_arn(&self) -> &str {
        use std::ops::Deref;
        self.integration_arn.deref()
    }
    /// <p>The name of the code security integration.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The type of repository provider for the integration.</p>
    pub fn r#type(&self) -> &crate::types::IntegrationType {
        &self.r#type
    }
    /// <p>The current status of the code security integration.</p>
    pub fn status(&self) -> &crate::types::IntegrationStatus {
        &self.status
    }
    /// <p>The reason for the current status of the code security integration.</p>
    pub fn status_reason(&self) -> &str {
        use std::ops::Deref;
        self.status_reason.deref()
    }
    /// <p>The timestamp when the code security integration was created.</p>
    pub fn created_on(&self) -> &::aws_smithy_types::DateTime {
        &self.created_on
    }
    /// <p>The timestamp when the code security integration was last updated.</p>
    pub fn last_update_on(&self) -> &::aws_smithy_types::DateTime {
        &self.last_update_on
    }
    /// <p>The tags associated with the code security integration.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CodeSecurityIntegrationSummary {
    /// Creates a new builder-style object to manufacture [`CodeSecurityIntegrationSummary`](crate::types::CodeSecurityIntegrationSummary).
    pub fn builder() -> crate::types::builders::CodeSecurityIntegrationSummaryBuilder {
        crate::types::builders::CodeSecurityIntegrationSummaryBuilder::default()
    }
}

/// A builder for [`CodeSecurityIntegrationSummary`](crate::types::CodeSecurityIntegrationSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CodeSecurityIntegrationSummaryBuilder {
    pub(crate) integration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::IntegrationType>,
    pub(crate) status: ::std::option::Option<crate::types::IntegrationStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) created_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_update_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CodeSecurityIntegrationSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the code security integration.</p>
    /// This field is required.
    pub fn integration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.integration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the code security integration.</p>
    pub fn set_integration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.integration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the code security integration.</p>
    pub fn get_integration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.integration_arn
    }
    /// <p>The name of the code security integration.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the code security integration.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the code security integration.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of repository provider for the integration.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::IntegrationType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of repository provider for the integration.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::IntegrationType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of repository provider for the integration.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::IntegrationType> {
        &self.r#type
    }
    /// <p>The current status of the code security integration.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::IntegrationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the code security integration.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::IntegrationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the code security integration.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::IntegrationStatus> {
        &self.status
    }
    /// <p>The reason for the current status of the code security integration.</p>
    /// This field is required.
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the current status of the code security integration.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The reason for the current status of the code security integration.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The timestamp when the code security integration was created.</p>
    /// This field is required.
    pub fn created_on(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_on = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the code security integration was created.</p>
    pub fn set_created_on(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_on = input;
        self
    }
    /// <p>The timestamp when the code security integration was created.</p>
    pub fn get_created_on(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_on
    }
    /// <p>The timestamp when the code security integration was last updated.</p>
    /// This field is required.
    pub fn last_update_on(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_update_on = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the code security integration was last updated.</p>
    pub fn set_last_update_on(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_update_on = input;
        self
    }
    /// <p>The timestamp when the code security integration was last updated.</p>
    pub fn get_last_update_on(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_update_on
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with the code security integration.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags associated with the code security integration.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags associated with the code security integration.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CodeSecurityIntegrationSummary`](crate::types::CodeSecurityIntegrationSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`integration_arn`](crate::types::builders::CodeSecurityIntegrationSummaryBuilder::integration_arn)
    /// - [`name`](crate::types::builders::CodeSecurityIntegrationSummaryBuilder::name)
    /// - [`r#type`](crate::types::builders::CodeSecurityIntegrationSummaryBuilder::type)
    /// - [`status`](crate::types::builders::CodeSecurityIntegrationSummaryBuilder::status)
    /// - [`status_reason`](crate::types::builders::CodeSecurityIntegrationSummaryBuilder::status_reason)
    /// - [`created_on`](crate::types::builders::CodeSecurityIntegrationSummaryBuilder::created_on)
    /// - [`last_update_on`](crate::types::builders::CodeSecurityIntegrationSummaryBuilder::last_update_on)
    pub fn build(self) -> ::std::result::Result<crate::types::CodeSecurityIntegrationSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CodeSecurityIntegrationSummary {
            integration_arn: self.integration_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "integration_arn",
                    "integration_arn was not specified but it is required when building CodeSecurityIntegrationSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CodeSecurityIntegrationSummary",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building CodeSecurityIntegrationSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building CodeSecurityIntegrationSummary",
                )
            })?,
            status_reason: self.status_reason.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status_reason",
                    "status_reason was not specified but it is required when building CodeSecurityIntegrationSummary",
                )
            })?,
            created_on: self.created_on.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_on",
                    "created_on was not specified but it is required when building CodeSecurityIntegrationSummary",
                )
            })?,
            last_update_on: self.last_update_on.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_update_on",
                    "last_update_on was not specified but it is required when building CodeSecurityIntegrationSummary",
                )
            })?,
            tags: self.tags,
        })
    }
}
