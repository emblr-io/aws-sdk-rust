// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the resource involved in the finding.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceDetails {
    /// <p>An object that contains details about the Amazon EC2 instance involved in the finding.</p>
    pub aws_ec2_instance: ::std::option::Option<crate::types::AwsEc2InstanceDetails>,
    /// <p>An object that contains details about the Amazon ECR container image involved in the finding.</p>
    pub aws_ecr_container_image: ::std::option::Option<crate::types::AwsEcrContainerImageDetails>,
    /// <p>A summary of the information about an Amazon Web Services Lambda function affected by a finding.</p>
    pub aws_lambda_function: ::std::option::Option<crate::types::AwsLambdaFunctionDetails>,
    /// <p>Contains details about a code repository resource associated with a finding.</p>
    pub code_repository: ::std::option::Option<crate::types::CodeRepositoryDetails>,
}
impl ResourceDetails {
    /// <p>An object that contains details about the Amazon EC2 instance involved in the finding.</p>
    pub fn aws_ec2_instance(&self) -> ::std::option::Option<&crate::types::AwsEc2InstanceDetails> {
        self.aws_ec2_instance.as_ref()
    }
    /// <p>An object that contains details about the Amazon ECR container image involved in the finding.</p>
    pub fn aws_ecr_container_image(&self) -> ::std::option::Option<&crate::types::AwsEcrContainerImageDetails> {
        self.aws_ecr_container_image.as_ref()
    }
    /// <p>A summary of the information about an Amazon Web Services Lambda function affected by a finding.</p>
    pub fn aws_lambda_function(&self) -> ::std::option::Option<&crate::types::AwsLambdaFunctionDetails> {
        self.aws_lambda_function.as_ref()
    }
    /// <p>Contains details about a code repository resource associated with a finding.</p>
    pub fn code_repository(&self) -> ::std::option::Option<&crate::types::CodeRepositoryDetails> {
        self.code_repository.as_ref()
    }
}
impl ResourceDetails {
    /// Creates a new builder-style object to manufacture [`ResourceDetails`](crate::types::ResourceDetails).
    pub fn builder() -> crate::types::builders::ResourceDetailsBuilder {
        crate::types::builders::ResourceDetailsBuilder::default()
    }
}

/// A builder for [`ResourceDetails`](crate::types::ResourceDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ResourceDetailsBuilder {
    pub(crate) aws_ec2_instance: ::std::option::Option<crate::types::AwsEc2InstanceDetails>,
    pub(crate) aws_ecr_container_image: ::std::option::Option<crate::types::AwsEcrContainerImageDetails>,
    pub(crate) aws_lambda_function: ::std::option::Option<crate::types::AwsLambdaFunctionDetails>,
    pub(crate) code_repository: ::std::option::Option<crate::types::CodeRepositoryDetails>,
}
impl ResourceDetailsBuilder {
    /// <p>An object that contains details about the Amazon EC2 instance involved in the finding.</p>
    pub fn aws_ec2_instance(mut self, input: crate::types::AwsEc2InstanceDetails) -> Self {
        self.aws_ec2_instance = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains details about the Amazon EC2 instance involved in the finding.</p>
    pub fn set_aws_ec2_instance(mut self, input: ::std::option::Option<crate::types::AwsEc2InstanceDetails>) -> Self {
        self.aws_ec2_instance = input;
        self
    }
    /// <p>An object that contains details about the Amazon EC2 instance involved in the finding.</p>
    pub fn get_aws_ec2_instance(&self) -> &::std::option::Option<crate::types::AwsEc2InstanceDetails> {
        &self.aws_ec2_instance
    }
    /// <p>An object that contains details about the Amazon ECR container image involved in the finding.</p>
    pub fn aws_ecr_container_image(mut self, input: crate::types::AwsEcrContainerImageDetails) -> Self {
        self.aws_ecr_container_image = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains details about the Amazon ECR container image involved in the finding.</p>
    pub fn set_aws_ecr_container_image(mut self, input: ::std::option::Option<crate::types::AwsEcrContainerImageDetails>) -> Self {
        self.aws_ecr_container_image = input;
        self
    }
    /// <p>An object that contains details about the Amazon ECR container image involved in the finding.</p>
    pub fn get_aws_ecr_container_image(&self) -> &::std::option::Option<crate::types::AwsEcrContainerImageDetails> {
        &self.aws_ecr_container_image
    }
    /// <p>A summary of the information about an Amazon Web Services Lambda function affected by a finding.</p>
    pub fn aws_lambda_function(mut self, input: crate::types::AwsLambdaFunctionDetails) -> Self {
        self.aws_lambda_function = ::std::option::Option::Some(input);
        self
    }
    /// <p>A summary of the information about an Amazon Web Services Lambda function affected by a finding.</p>
    pub fn set_aws_lambda_function(mut self, input: ::std::option::Option<crate::types::AwsLambdaFunctionDetails>) -> Self {
        self.aws_lambda_function = input;
        self
    }
    /// <p>A summary of the information about an Amazon Web Services Lambda function affected by a finding.</p>
    pub fn get_aws_lambda_function(&self) -> &::std::option::Option<crate::types::AwsLambdaFunctionDetails> {
        &self.aws_lambda_function
    }
    /// <p>Contains details about a code repository resource associated with a finding.</p>
    pub fn code_repository(mut self, input: crate::types::CodeRepositoryDetails) -> Self {
        self.code_repository = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about a code repository resource associated with a finding.</p>
    pub fn set_code_repository(mut self, input: ::std::option::Option<crate::types::CodeRepositoryDetails>) -> Self {
        self.code_repository = input;
        self
    }
    /// <p>Contains details about a code repository resource associated with a finding.</p>
    pub fn get_code_repository(&self) -> &::std::option::Option<crate::types::CodeRepositoryDetails> {
        &self.code_repository
    }
    /// Consumes the builder and constructs a [`ResourceDetails`](crate::types::ResourceDetails).
    pub fn build(self) -> crate::types::ResourceDetails {
        crate::types::ResourceDetails {
            aws_ec2_instance: self.aws_ec2_instance,
            aws_ecr_container_image: self.aws_ecr_container_image,
            aws_lambda_function: self.aws_lambda_function,
            code_repository: self.code_repository,
        }
    }
}
