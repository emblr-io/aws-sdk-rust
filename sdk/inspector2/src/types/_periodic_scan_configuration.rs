// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration settings for periodic scans that run on a scheduled basis.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PeriodicScanConfiguration {
    /// <p>The frequency at which periodic scans are performed (such as weekly or monthly).</p>
    /// <p>If you don't provide the <code>frequencyExpression</code> Amazon Inspector chooses day for the scan to run. If you provide the <code>frequencyExpression</code>, the schedule must match the specified <code>frequency</code>.</p>
    pub frequency: ::std::option::Option<crate::types::PeriodicScanFrequency>,
    /// <p>The schedule expression for periodic scans, in cron format.</p>
    pub frequency_expression: ::std::option::Option<::std::string::String>,
}
impl PeriodicScanConfiguration {
    /// <p>The frequency at which periodic scans are performed (such as weekly or monthly).</p>
    /// <p>If you don't provide the <code>frequencyExpression</code> Amazon Inspector chooses day for the scan to run. If you provide the <code>frequencyExpression</code>, the schedule must match the specified <code>frequency</code>.</p>
    pub fn frequency(&self) -> ::std::option::Option<&crate::types::PeriodicScanFrequency> {
        self.frequency.as_ref()
    }
    /// <p>The schedule expression for periodic scans, in cron format.</p>
    pub fn frequency_expression(&self) -> ::std::option::Option<&str> {
        self.frequency_expression.as_deref()
    }
}
impl PeriodicScanConfiguration {
    /// Creates a new builder-style object to manufacture [`PeriodicScanConfiguration`](crate::types::PeriodicScanConfiguration).
    pub fn builder() -> crate::types::builders::PeriodicScanConfigurationBuilder {
        crate::types::builders::PeriodicScanConfigurationBuilder::default()
    }
}

/// A builder for [`PeriodicScanConfiguration`](crate::types::PeriodicScanConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PeriodicScanConfigurationBuilder {
    pub(crate) frequency: ::std::option::Option<crate::types::PeriodicScanFrequency>,
    pub(crate) frequency_expression: ::std::option::Option<::std::string::String>,
}
impl PeriodicScanConfigurationBuilder {
    /// <p>The frequency at which periodic scans are performed (such as weekly or monthly).</p>
    /// <p>If you don't provide the <code>frequencyExpression</code> Amazon Inspector chooses day for the scan to run. If you provide the <code>frequencyExpression</code>, the schedule must match the specified <code>frequency</code>.</p>
    pub fn frequency(mut self, input: crate::types::PeriodicScanFrequency) -> Self {
        self.frequency = ::std::option::Option::Some(input);
        self
    }
    /// <p>The frequency at which periodic scans are performed (such as weekly or monthly).</p>
    /// <p>If you don't provide the <code>frequencyExpression</code> Amazon Inspector chooses day for the scan to run. If you provide the <code>frequencyExpression</code>, the schedule must match the specified <code>frequency</code>.</p>
    pub fn set_frequency(mut self, input: ::std::option::Option<crate::types::PeriodicScanFrequency>) -> Self {
        self.frequency = input;
        self
    }
    /// <p>The frequency at which periodic scans are performed (such as weekly or monthly).</p>
    /// <p>If you don't provide the <code>frequencyExpression</code> Amazon Inspector chooses day for the scan to run. If you provide the <code>frequencyExpression</code>, the schedule must match the specified <code>frequency</code>.</p>
    pub fn get_frequency(&self) -> &::std::option::Option<crate::types::PeriodicScanFrequency> {
        &self.frequency
    }
    /// <p>The schedule expression for periodic scans, in cron format.</p>
    pub fn frequency_expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.frequency_expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The schedule expression for periodic scans, in cron format.</p>
    pub fn set_frequency_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.frequency_expression = input;
        self
    }
    /// <p>The schedule expression for periodic scans, in cron format.</p>
    pub fn get_frequency_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.frequency_expression
    }
    /// Consumes the builder and constructs a [`PeriodicScanConfiguration`](crate::types::PeriodicScanConfiguration).
    pub fn build(self) -> crate::types::PeriodicScanConfiguration {
        crate::types::PeriodicScanConfiguration {
            frequency: self.frequency,
            frequency_expression: self.frequency_expression,
        }
    }
}
