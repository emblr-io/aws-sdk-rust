// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details required to create an integration with a self-managed GitLab instance.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateGitLabSelfManagedIntegrationDetail {
    /// <p>The URL of the self-managed GitLab instance.</p>
    pub instance_url: ::std::string::String,
    /// <p>The personal access token used to authenticate with the self-managed GitLab instance.</p>
    pub access_token: ::std::string::String,
}
impl CreateGitLabSelfManagedIntegrationDetail {
    /// <p>The URL of the self-managed GitLab instance.</p>
    pub fn instance_url(&self) -> &str {
        use std::ops::Deref;
        self.instance_url.deref()
    }
    /// <p>The personal access token used to authenticate with the self-managed GitLab instance.</p>
    pub fn access_token(&self) -> &str {
        use std::ops::Deref;
        self.access_token.deref()
    }
}
impl ::std::fmt::Debug for CreateGitLabSelfManagedIntegrationDetail {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateGitLabSelfManagedIntegrationDetail");
        formatter.field("instance_url", &"*** Sensitive Data Redacted ***");
        formatter.field("access_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CreateGitLabSelfManagedIntegrationDetail {
    /// Creates a new builder-style object to manufacture [`CreateGitLabSelfManagedIntegrationDetail`](crate::types::CreateGitLabSelfManagedIntegrationDetail).
    pub fn builder() -> crate::types::builders::CreateGitLabSelfManagedIntegrationDetailBuilder {
        crate::types::builders::CreateGitLabSelfManagedIntegrationDetailBuilder::default()
    }
}

/// A builder for [`CreateGitLabSelfManagedIntegrationDetail`](crate::types::CreateGitLabSelfManagedIntegrationDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateGitLabSelfManagedIntegrationDetailBuilder {
    pub(crate) instance_url: ::std::option::Option<::std::string::String>,
    pub(crate) access_token: ::std::option::Option<::std::string::String>,
}
impl CreateGitLabSelfManagedIntegrationDetailBuilder {
    /// <p>The URL of the self-managed GitLab instance.</p>
    /// This field is required.
    pub fn instance_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of the self-managed GitLab instance.</p>
    pub fn set_instance_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_url = input;
        self
    }
    /// <p>The URL of the self-managed GitLab instance.</p>
    pub fn get_instance_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_url
    }
    /// <p>The personal access token used to authenticate with the self-managed GitLab instance.</p>
    /// This field is required.
    pub fn access_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The personal access token used to authenticate with the self-managed GitLab instance.</p>
    pub fn set_access_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_token = input;
        self
    }
    /// <p>The personal access token used to authenticate with the self-managed GitLab instance.</p>
    pub fn get_access_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_token
    }
    /// Consumes the builder and constructs a [`CreateGitLabSelfManagedIntegrationDetail`](crate::types::CreateGitLabSelfManagedIntegrationDetail).
    /// This method will fail if any of the following fields are not set:
    /// - [`instance_url`](crate::types::builders::CreateGitLabSelfManagedIntegrationDetailBuilder::instance_url)
    /// - [`access_token`](crate::types::builders::CreateGitLabSelfManagedIntegrationDetailBuilder::access_token)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::CreateGitLabSelfManagedIntegrationDetail, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CreateGitLabSelfManagedIntegrationDetail {
            instance_url: self.instance_url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "instance_url",
                    "instance_url was not specified but it is required when building CreateGitLabSelfManagedIntegrationDetail",
                )
            })?,
            access_token: self.access_token.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "access_token",
                    "access_token was not specified but it is required when building CreateGitLabSelfManagedIntegrationDetail",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for CreateGitLabSelfManagedIntegrationDetailBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateGitLabSelfManagedIntegrationDetailBuilder");
        formatter.field("instance_url", &"*** Sensitive Data Redacted ***");
        formatter.field("access_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
