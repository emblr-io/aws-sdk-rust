// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about a code repository associated with a finding.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeRepositoryDetails {
    /// <p>The name of the project in the code repository.</p>
    pub project_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the code security integration associated with the repository.</p>
    pub integration_arn: ::std::option::Option<::std::string::String>,
    /// <p>The type of repository provider (such as GitHub, GitLab, etc.).</p>
    pub provider_type: ::std::option::Option<crate::types::CodeRepositoryProviderType>,
}
impl CodeRepositoryDetails {
    /// <p>The name of the project in the code repository.</p>
    pub fn project_name(&self) -> ::std::option::Option<&str> {
        self.project_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the code security integration associated with the repository.</p>
    pub fn integration_arn(&self) -> ::std::option::Option<&str> {
        self.integration_arn.as_deref()
    }
    /// <p>The type of repository provider (such as GitHub, GitLab, etc.).</p>
    pub fn provider_type(&self) -> ::std::option::Option<&crate::types::CodeRepositoryProviderType> {
        self.provider_type.as_ref()
    }
}
impl CodeRepositoryDetails {
    /// Creates a new builder-style object to manufacture [`CodeRepositoryDetails`](crate::types::CodeRepositoryDetails).
    pub fn builder() -> crate::types::builders::CodeRepositoryDetailsBuilder {
        crate::types::builders::CodeRepositoryDetailsBuilder::default()
    }
}

/// A builder for [`CodeRepositoryDetails`](crate::types::CodeRepositoryDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CodeRepositoryDetailsBuilder {
    pub(crate) project_name: ::std::option::Option<::std::string::String>,
    pub(crate) integration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) provider_type: ::std::option::Option<crate::types::CodeRepositoryProviderType>,
}
impl CodeRepositoryDetailsBuilder {
    /// <p>The name of the project in the code repository.</p>
    pub fn project_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the project in the code repository.</p>
    pub fn set_project_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// <p>The name of the project in the code repository.</p>
    pub fn get_project_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_name
    }
    /// <p>The Amazon Resource Name (ARN) of the code security integration associated with the repository.</p>
    pub fn integration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.integration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the code security integration associated with the repository.</p>
    pub fn set_integration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.integration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the code security integration associated with the repository.</p>
    pub fn get_integration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.integration_arn
    }
    /// <p>The type of repository provider (such as GitHub, GitLab, etc.).</p>
    pub fn provider_type(mut self, input: crate::types::CodeRepositoryProviderType) -> Self {
        self.provider_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of repository provider (such as GitHub, GitLab, etc.).</p>
    pub fn set_provider_type(mut self, input: ::std::option::Option<crate::types::CodeRepositoryProviderType>) -> Self {
        self.provider_type = input;
        self
    }
    /// <p>The type of repository provider (such as GitHub, GitLab, etc.).</p>
    pub fn get_provider_type(&self) -> &::std::option::Option<crate::types::CodeRepositoryProviderType> {
        &self.provider_type
    }
    /// Consumes the builder and constructs a [`CodeRepositoryDetails`](crate::types::CodeRepositoryDetails).
    pub fn build(self) -> crate::types::CodeRepositoryDetails {
        crate::types::CodeRepositoryDetails {
            project_name: self.project_name,
            integration_arn: self.integration_arn,
            provider_type: self.provider_type,
        }
    }
}
