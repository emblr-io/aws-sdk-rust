// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about on-demand scans performed on a code repository.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeRepositoryOnDemandScan {
    /// <p>The ID of the last commit that was scanned during an on-demand scan.</p>
    pub last_scanned_commit_id: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the last on-demand scan was performed.</p>
    pub last_scan_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The status of the scan.</p>
    pub scan_status: ::std::option::Option<crate::types::ScanStatus>,
}
impl CodeRepositoryOnDemandScan {
    /// <p>The ID of the last commit that was scanned during an on-demand scan.</p>
    pub fn last_scanned_commit_id(&self) -> ::std::option::Option<&str> {
        self.last_scanned_commit_id.as_deref()
    }
    /// <p>The timestamp when the last on-demand scan was performed.</p>
    pub fn last_scan_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_scan_at.as_ref()
    }
    /// <p>The status of the scan.</p>
    pub fn scan_status(&self) -> ::std::option::Option<&crate::types::ScanStatus> {
        self.scan_status.as_ref()
    }
}
impl CodeRepositoryOnDemandScan {
    /// Creates a new builder-style object to manufacture [`CodeRepositoryOnDemandScan`](crate::types::CodeRepositoryOnDemandScan).
    pub fn builder() -> crate::types::builders::CodeRepositoryOnDemandScanBuilder {
        crate::types::builders::CodeRepositoryOnDemandScanBuilder::default()
    }
}

/// A builder for [`CodeRepositoryOnDemandScan`](crate::types::CodeRepositoryOnDemandScan).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CodeRepositoryOnDemandScanBuilder {
    pub(crate) last_scanned_commit_id: ::std::option::Option<::std::string::String>,
    pub(crate) last_scan_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) scan_status: ::std::option::Option<crate::types::ScanStatus>,
}
impl CodeRepositoryOnDemandScanBuilder {
    /// <p>The ID of the last commit that was scanned during an on-demand scan.</p>
    pub fn last_scanned_commit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_scanned_commit_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the last commit that was scanned during an on-demand scan.</p>
    pub fn set_last_scanned_commit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_scanned_commit_id = input;
        self
    }
    /// <p>The ID of the last commit that was scanned during an on-demand scan.</p>
    pub fn get_last_scanned_commit_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_scanned_commit_id
    }
    /// <p>The timestamp when the last on-demand scan was performed.</p>
    pub fn last_scan_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_scan_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the last on-demand scan was performed.</p>
    pub fn set_last_scan_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_scan_at = input;
        self
    }
    /// <p>The timestamp when the last on-demand scan was performed.</p>
    pub fn get_last_scan_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_scan_at
    }
    /// <p>The status of the scan.</p>
    pub fn scan_status(mut self, input: crate::types::ScanStatus) -> Self {
        self.scan_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the scan.</p>
    pub fn set_scan_status(mut self, input: ::std::option::Option<crate::types::ScanStatus>) -> Self {
        self.scan_status = input;
        self
    }
    /// <p>The status of the scan.</p>
    pub fn get_scan_status(&self) -> &::std::option::Option<crate::types::ScanStatus> {
        &self.scan_status
    }
    /// Consumes the builder and constructs a [`CodeRepositoryOnDemandScan`](crate::types::CodeRepositoryOnDemandScan).
    pub fn build(self) -> crate::types::CodeRepositoryOnDemandScan {
        crate::types::CodeRepositoryOnDemandScan {
            last_scanned_commit_id: self.last_scanned_commit_id,
            last_scan_at: self.last_scan_at,
            scan_status: self.scan_status,
        }
    }
}
