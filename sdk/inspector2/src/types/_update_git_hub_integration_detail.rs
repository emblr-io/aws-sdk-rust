// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details required to update an integration with GitHub.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateGitHubIntegrationDetail {
    /// <p>The authorization code received from GitHub to update the integration.</p>
    pub code: ::std::string::String,
    /// <p>The installation ID of the GitHub App associated with the integration.</p>
    pub installation_id: ::std::string::String,
}
impl UpdateGitHubIntegrationDetail {
    /// <p>The authorization code received from GitHub to update the integration.</p>
    pub fn code(&self) -> &str {
        use std::ops::Deref;
        self.code.deref()
    }
    /// <p>The installation ID of the GitHub App associated with the integration.</p>
    pub fn installation_id(&self) -> &str {
        use std::ops::Deref;
        self.installation_id.deref()
    }
}
impl ::std::fmt::Debug for UpdateGitHubIntegrationDetail {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateGitHubIntegrationDetail");
        formatter.field("code", &"*** Sensitive Data Redacted ***");
        formatter.field("installation_id", &self.installation_id);
        formatter.finish()
    }
}
impl UpdateGitHubIntegrationDetail {
    /// Creates a new builder-style object to manufacture [`UpdateGitHubIntegrationDetail`](crate::types::UpdateGitHubIntegrationDetail).
    pub fn builder() -> crate::types::builders::UpdateGitHubIntegrationDetailBuilder {
        crate::types::builders::UpdateGitHubIntegrationDetailBuilder::default()
    }
}

/// A builder for [`UpdateGitHubIntegrationDetail`](crate::types::UpdateGitHubIntegrationDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateGitHubIntegrationDetailBuilder {
    pub(crate) code: ::std::option::Option<::std::string::String>,
    pub(crate) installation_id: ::std::option::Option<::std::string::String>,
}
impl UpdateGitHubIntegrationDetailBuilder {
    /// <p>The authorization code received from GitHub to update the integration.</p>
    /// This field is required.
    pub fn code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The authorization code received from GitHub to update the integration.</p>
    pub fn set_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>The authorization code received from GitHub to update the integration.</p>
    pub fn get_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.code
    }
    /// <p>The installation ID of the GitHub App associated with the integration.</p>
    /// This field is required.
    pub fn installation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.installation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The installation ID of the GitHub App associated with the integration.</p>
    pub fn set_installation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.installation_id = input;
        self
    }
    /// <p>The installation ID of the GitHub App associated with the integration.</p>
    pub fn get_installation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.installation_id
    }
    /// Consumes the builder and constructs a [`UpdateGitHubIntegrationDetail`](crate::types::UpdateGitHubIntegrationDetail).
    /// This method will fail if any of the following fields are not set:
    /// - [`code`](crate::types::builders::UpdateGitHubIntegrationDetailBuilder::code)
    /// - [`installation_id`](crate::types::builders::UpdateGitHubIntegrationDetailBuilder::installation_id)
    pub fn build(self) -> ::std::result::Result<crate::types::UpdateGitHubIntegrationDetail, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UpdateGitHubIntegrationDetail {
            code: self.code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "code",
                    "code was not specified but it is required when building UpdateGitHubIntegrationDetail",
                )
            })?,
            installation_id: self.installation_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "installation_id",
                    "installation_id was not specified but it is required when building UpdateGitHubIntegrationDetail",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for UpdateGitHubIntegrationDetailBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateGitHubIntegrationDetailBuilder");
        formatter.field("code", &"*** Sensitive Data Redacted ***");
        formatter.field("installation_id", &self.installation_id);
        formatter.finish()
    }
}
