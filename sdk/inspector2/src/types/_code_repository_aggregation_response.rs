// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A response that contains the results of a finding aggregation by code repository.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeRepositoryAggregationResponse {
    /// <p>The names of the projects associated with the code repository.</p>
    pub project_names: ::std::string::String,
    /// <p>The type of repository provider for the code repository.</p>
    pub provider_type: ::std::option::Option<::std::string::String>,
    /// <p>An object that contains the counts of aggregated finding per severity.</p>
    pub severity_counts: ::std::option::Option<crate::types::SeverityCounts>,
    /// <p>The number of active findings that have an exploit available for the code repository.</p>
    pub exploit_available_active_findings_count: ::std::option::Option<i64>,
    /// <p>The number of active findings that have a fix available for the code repository.</p>
    pub fix_available_active_findings_count: ::std::option::Option<i64>,
    /// <p>The Amazon Web Services account ID associated with the code repository.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The resource ID of the code repository.</p>
    pub resource_id: ::std::option::Option<::std::string::String>,
}
impl CodeRepositoryAggregationResponse {
    /// <p>The names of the projects associated with the code repository.</p>
    pub fn project_names(&self) -> &str {
        use std::ops::Deref;
        self.project_names.deref()
    }
    /// <p>The type of repository provider for the code repository.</p>
    pub fn provider_type(&self) -> ::std::option::Option<&str> {
        self.provider_type.as_deref()
    }
    /// <p>An object that contains the counts of aggregated finding per severity.</p>
    pub fn severity_counts(&self) -> ::std::option::Option<&crate::types::SeverityCounts> {
        self.severity_counts.as_ref()
    }
    /// <p>The number of active findings that have an exploit available for the code repository.</p>
    pub fn exploit_available_active_findings_count(&self) -> ::std::option::Option<i64> {
        self.exploit_available_active_findings_count
    }
    /// <p>The number of active findings that have a fix available for the code repository.</p>
    pub fn fix_available_active_findings_count(&self) -> ::std::option::Option<i64> {
        self.fix_available_active_findings_count
    }
    /// <p>The Amazon Web Services account ID associated with the code repository.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The resource ID of the code repository.</p>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
}
impl CodeRepositoryAggregationResponse {
    /// Creates a new builder-style object to manufacture [`CodeRepositoryAggregationResponse`](crate::types::CodeRepositoryAggregationResponse).
    pub fn builder() -> crate::types::builders::CodeRepositoryAggregationResponseBuilder {
        crate::types::builders::CodeRepositoryAggregationResponseBuilder::default()
    }
}

/// A builder for [`CodeRepositoryAggregationResponse`](crate::types::CodeRepositoryAggregationResponse).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CodeRepositoryAggregationResponseBuilder {
    pub(crate) project_names: ::std::option::Option<::std::string::String>,
    pub(crate) provider_type: ::std::option::Option<::std::string::String>,
    pub(crate) severity_counts: ::std::option::Option<crate::types::SeverityCounts>,
    pub(crate) exploit_available_active_findings_count: ::std::option::Option<i64>,
    pub(crate) fix_available_active_findings_count: ::std::option::Option<i64>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
}
impl CodeRepositoryAggregationResponseBuilder {
    /// <p>The names of the projects associated with the code repository.</p>
    /// This field is required.
    pub fn project_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_names = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The names of the projects associated with the code repository.</p>
    pub fn set_project_names(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_names = input;
        self
    }
    /// <p>The names of the projects associated with the code repository.</p>
    pub fn get_project_names(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_names
    }
    /// <p>The type of repository provider for the code repository.</p>
    pub fn provider_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provider_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of repository provider for the code repository.</p>
    pub fn set_provider_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provider_type = input;
        self
    }
    /// <p>The type of repository provider for the code repository.</p>
    pub fn get_provider_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.provider_type
    }
    /// <p>An object that contains the counts of aggregated finding per severity.</p>
    pub fn severity_counts(mut self, input: crate::types::SeverityCounts) -> Self {
        self.severity_counts = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains the counts of aggregated finding per severity.</p>
    pub fn set_severity_counts(mut self, input: ::std::option::Option<crate::types::SeverityCounts>) -> Self {
        self.severity_counts = input;
        self
    }
    /// <p>An object that contains the counts of aggregated finding per severity.</p>
    pub fn get_severity_counts(&self) -> &::std::option::Option<crate::types::SeverityCounts> {
        &self.severity_counts
    }
    /// <p>The number of active findings that have an exploit available for the code repository.</p>
    pub fn exploit_available_active_findings_count(mut self, input: i64) -> Self {
        self.exploit_available_active_findings_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of active findings that have an exploit available for the code repository.</p>
    pub fn set_exploit_available_active_findings_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.exploit_available_active_findings_count = input;
        self
    }
    /// <p>The number of active findings that have an exploit available for the code repository.</p>
    pub fn get_exploit_available_active_findings_count(&self) -> &::std::option::Option<i64> {
        &self.exploit_available_active_findings_count
    }
    /// <p>The number of active findings that have a fix available for the code repository.</p>
    pub fn fix_available_active_findings_count(mut self, input: i64) -> Self {
        self.fix_available_active_findings_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of active findings that have a fix available for the code repository.</p>
    pub fn set_fix_available_active_findings_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.fix_available_active_findings_count = input;
        self
    }
    /// <p>The number of active findings that have a fix available for the code repository.</p>
    pub fn get_fix_available_active_findings_count(&self) -> &::std::option::Option<i64> {
        &self.fix_available_active_findings_count
    }
    /// <p>The Amazon Web Services account ID associated with the code repository.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID associated with the code repository.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID associated with the code repository.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The resource ID of the code repository.</p>
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource ID of the code repository.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The resource ID of the code repository.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// Consumes the builder and constructs a [`CodeRepositoryAggregationResponse`](crate::types::CodeRepositoryAggregationResponse).
    /// This method will fail if any of the following fields are not set:
    /// - [`project_names`](crate::types::builders::CodeRepositoryAggregationResponseBuilder::project_names)
    pub fn build(self) -> ::std::result::Result<crate::types::CodeRepositoryAggregationResponse, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CodeRepositoryAggregationResponse {
            project_names: self.project_names.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "project_names",
                    "project_names was not specified but it is required when building CodeRepositoryAggregationResponse",
                )
            })?,
            provider_type: self.provider_type,
            severity_counts: self.severity_counts,
            exploit_available_active_findings_count: self.exploit_available_active_findings_count,
            fix_available_active_findings_count: self.fix_available_active_findings_count,
            account_id: self.account_id,
            resource_id: self.resource_id,
        })
    }
}
