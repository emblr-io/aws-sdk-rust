// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of information about a code security scan configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeSecurityScanConfigurationSummary {
    /// <p>The Amazon Resource Name (ARN) of the scan configuration.</p>
    pub scan_configuration_arn: ::std::string::String,
    /// <p>The name of the scan configuration.</p>
    pub name: ::std::string::String,
    /// <p>The Amazon Web Services account ID that owns the scan configuration.</p>
    pub owner_account_id: ::std::string::String,
    /// <p>The frequency at which periodic scans are performed.</p>
    pub periodic_scan_frequency: ::std::option::Option<crate::types::PeriodicScanFrequency>,
    /// <p>The schedule expression for periodic scans, in cron format.</p>
    pub frequency_expression: ::std::option::Option<::std::string::String>,
    /// <p>The repository events that trigger continuous integration scans.</p>
    pub continuous_integration_scan_supported_events: ::std::option::Option<::std::vec::Vec<crate::types::ContinuousIntegrationScanEvent>>,
    /// <p>The categories of security rules applied during the scan.</p>
    pub rule_set_categories: ::std::vec::Vec<crate::types::RuleSetCategory>,
    /// <p>The scope settings that define which repositories will be scanned. If the <code>ScopeSetting</code> parameter is <code>ALL</code> the scan configuration applies to all existing and future projects imported into Amazon Inspector.</p>
    pub scope_settings: ::std::option::Option<crate::types::ScopeSettings>,
    /// <p>The tags associated with the scan configuration.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CodeSecurityScanConfigurationSummary {
    /// <p>The Amazon Resource Name (ARN) of the scan configuration.</p>
    pub fn scan_configuration_arn(&self) -> &str {
        use std::ops::Deref;
        self.scan_configuration_arn.deref()
    }
    /// <p>The name of the scan configuration.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The Amazon Web Services account ID that owns the scan configuration.</p>
    pub fn owner_account_id(&self) -> &str {
        use std::ops::Deref;
        self.owner_account_id.deref()
    }
    /// <p>The frequency at which periodic scans are performed.</p>
    pub fn periodic_scan_frequency(&self) -> ::std::option::Option<&crate::types::PeriodicScanFrequency> {
        self.periodic_scan_frequency.as_ref()
    }
    /// <p>The schedule expression for periodic scans, in cron format.</p>
    pub fn frequency_expression(&self) -> ::std::option::Option<&str> {
        self.frequency_expression.as_deref()
    }
    /// <p>The repository events that trigger continuous integration scans.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.continuous_integration_scan_supported_events.is_none()`.
    pub fn continuous_integration_scan_supported_events(&self) -> &[crate::types::ContinuousIntegrationScanEvent] {
        self.continuous_integration_scan_supported_events.as_deref().unwrap_or_default()
    }
    /// <p>The categories of security rules applied during the scan.</p>
    pub fn rule_set_categories(&self) -> &[crate::types::RuleSetCategory] {
        use std::ops::Deref;
        self.rule_set_categories.deref()
    }
    /// <p>The scope settings that define which repositories will be scanned. If the <code>ScopeSetting</code> parameter is <code>ALL</code> the scan configuration applies to all existing and future projects imported into Amazon Inspector.</p>
    pub fn scope_settings(&self) -> ::std::option::Option<&crate::types::ScopeSettings> {
        self.scope_settings.as_ref()
    }
    /// <p>The tags associated with the scan configuration.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CodeSecurityScanConfigurationSummary {
    /// Creates a new builder-style object to manufacture [`CodeSecurityScanConfigurationSummary`](crate::types::CodeSecurityScanConfigurationSummary).
    pub fn builder() -> crate::types::builders::CodeSecurityScanConfigurationSummaryBuilder {
        crate::types::builders::CodeSecurityScanConfigurationSummaryBuilder::default()
    }
}

/// A builder for [`CodeSecurityScanConfigurationSummary`](crate::types::CodeSecurityScanConfigurationSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CodeSecurityScanConfigurationSummaryBuilder {
    pub(crate) scan_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) owner_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) periodic_scan_frequency: ::std::option::Option<crate::types::PeriodicScanFrequency>,
    pub(crate) frequency_expression: ::std::option::Option<::std::string::String>,
    pub(crate) continuous_integration_scan_supported_events: ::std::option::Option<::std::vec::Vec<crate::types::ContinuousIntegrationScanEvent>>,
    pub(crate) rule_set_categories: ::std::option::Option<::std::vec::Vec<crate::types::RuleSetCategory>>,
    pub(crate) scope_settings: ::std::option::Option<crate::types::ScopeSettings>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CodeSecurityScanConfigurationSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the scan configuration.</p>
    /// This field is required.
    pub fn scan_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scan_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the scan configuration.</p>
    pub fn set_scan_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scan_configuration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the scan configuration.</p>
    pub fn get_scan_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.scan_configuration_arn
    }
    /// <p>The name of the scan configuration.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the scan configuration.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the scan configuration.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Web Services account ID that owns the scan configuration.</p>
    /// This field is required.
    pub fn owner_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID that owns the scan configuration.</p>
    pub fn set_owner_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID that owns the scan configuration.</p>
    pub fn get_owner_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_account_id
    }
    /// <p>The frequency at which periodic scans are performed.</p>
    pub fn periodic_scan_frequency(mut self, input: crate::types::PeriodicScanFrequency) -> Self {
        self.periodic_scan_frequency = ::std::option::Option::Some(input);
        self
    }
    /// <p>The frequency at which periodic scans are performed.</p>
    pub fn set_periodic_scan_frequency(mut self, input: ::std::option::Option<crate::types::PeriodicScanFrequency>) -> Self {
        self.periodic_scan_frequency = input;
        self
    }
    /// <p>The frequency at which periodic scans are performed.</p>
    pub fn get_periodic_scan_frequency(&self) -> &::std::option::Option<crate::types::PeriodicScanFrequency> {
        &self.periodic_scan_frequency
    }
    /// <p>The schedule expression for periodic scans, in cron format.</p>
    pub fn frequency_expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.frequency_expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The schedule expression for periodic scans, in cron format.</p>
    pub fn set_frequency_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.frequency_expression = input;
        self
    }
    /// <p>The schedule expression for periodic scans, in cron format.</p>
    pub fn get_frequency_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.frequency_expression
    }
    /// Appends an item to `continuous_integration_scan_supported_events`.
    ///
    /// To override the contents of this collection use [`set_continuous_integration_scan_supported_events`](Self::set_continuous_integration_scan_supported_events).
    ///
    /// <p>The repository events that trigger continuous integration scans.</p>
    pub fn continuous_integration_scan_supported_events(mut self, input: crate::types::ContinuousIntegrationScanEvent) -> Self {
        let mut v = self.continuous_integration_scan_supported_events.unwrap_or_default();
        v.push(input);
        self.continuous_integration_scan_supported_events = ::std::option::Option::Some(v);
        self
    }
    /// <p>The repository events that trigger continuous integration scans.</p>
    pub fn set_continuous_integration_scan_supported_events(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ContinuousIntegrationScanEvent>>,
    ) -> Self {
        self.continuous_integration_scan_supported_events = input;
        self
    }
    /// <p>The repository events that trigger continuous integration scans.</p>
    pub fn get_continuous_integration_scan_supported_events(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::ContinuousIntegrationScanEvent>> {
        &self.continuous_integration_scan_supported_events
    }
    /// Appends an item to `rule_set_categories`.
    ///
    /// To override the contents of this collection use [`set_rule_set_categories`](Self::set_rule_set_categories).
    ///
    /// <p>The categories of security rules applied during the scan.</p>
    pub fn rule_set_categories(mut self, input: crate::types::RuleSetCategory) -> Self {
        let mut v = self.rule_set_categories.unwrap_or_default();
        v.push(input);
        self.rule_set_categories = ::std::option::Option::Some(v);
        self
    }
    /// <p>The categories of security rules applied during the scan.</p>
    pub fn set_rule_set_categories(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RuleSetCategory>>) -> Self {
        self.rule_set_categories = input;
        self
    }
    /// <p>The categories of security rules applied during the scan.</p>
    pub fn get_rule_set_categories(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RuleSetCategory>> {
        &self.rule_set_categories
    }
    /// <p>The scope settings that define which repositories will be scanned. If the <code>ScopeSetting</code> parameter is <code>ALL</code> the scan configuration applies to all existing and future projects imported into Amazon Inspector.</p>
    pub fn scope_settings(mut self, input: crate::types::ScopeSettings) -> Self {
        self.scope_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scope settings that define which repositories will be scanned. If the <code>ScopeSetting</code> parameter is <code>ALL</code> the scan configuration applies to all existing and future projects imported into Amazon Inspector.</p>
    pub fn set_scope_settings(mut self, input: ::std::option::Option<crate::types::ScopeSettings>) -> Self {
        self.scope_settings = input;
        self
    }
    /// <p>The scope settings that define which repositories will be scanned. If the <code>ScopeSetting</code> parameter is <code>ALL</code> the scan configuration applies to all existing and future projects imported into Amazon Inspector.</p>
    pub fn get_scope_settings(&self) -> &::std::option::Option<crate::types::ScopeSettings> {
        &self.scope_settings
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with the scan configuration.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags associated with the scan configuration.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags associated with the scan configuration.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CodeSecurityScanConfigurationSummary`](crate::types::CodeSecurityScanConfigurationSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`scan_configuration_arn`](crate::types::builders::CodeSecurityScanConfigurationSummaryBuilder::scan_configuration_arn)
    /// - [`name`](crate::types::builders::CodeSecurityScanConfigurationSummaryBuilder::name)
    /// - [`owner_account_id`](crate::types::builders::CodeSecurityScanConfigurationSummaryBuilder::owner_account_id)
    /// - [`rule_set_categories`](crate::types::builders::CodeSecurityScanConfigurationSummaryBuilder::rule_set_categories)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::CodeSecurityScanConfigurationSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CodeSecurityScanConfigurationSummary {
            scan_configuration_arn: self.scan_configuration_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "scan_configuration_arn",
                    "scan_configuration_arn was not specified but it is required when building CodeSecurityScanConfigurationSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CodeSecurityScanConfigurationSummary",
                )
            })?,
            owner_account_id: self.owner_account_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "owner_account_id",
                    "owner_account_id was not specified but it is required when building CodeSecurityScanConfigurationSummary",
                )
            })?,
            periodic_scan_frequency: self.periodic_scan_frequency,
            frequency_expression: self.frequency_expression,
            continuous_integration_scan_supported_events: self.continuous_integration_scan_supported_events,
            rule_set_categories: self.rule_set_categories.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rule_set_categories",
                    "rule_set_categories was not specified but it is required when building CodeSecurityScanConfigurationSummary",
                )
            })?,
            scope_settings: self.scope_settings,
            tags: self.tags,
        })
    }
}
