// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the continuous integration scan configuration settings applied to a specific project.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProjectContinuousIntegrationScanConfiguration {
    /// <p>The repository event that triggers continuous integration scans for the project.</p>
    pub supported_event: ::std::option::Option<crate::types::ContinuousIntegrationScanEvent>,
    /// <p>The categories of security rules applied during continuous integration scans for the project.</p>
    pub rule_set_categories: ::std::option::Option<::std::vec::Vec<crate::types::RuleSetCategory>>,
}
impl ProjectContinuousIntegrationScanConfiguration {
    /// <p>The repository event that triggers continuous integration scans for the project.</p>
    pub fn supported_event(&self) -> ::std::option::Option<&crate::types::ContinuousIntegrationScanEvent> {
        self.supported_event.as_ref()
    }
    /// <p>The categories of security rules applied during continuous integration scans for the project.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rule_set_categories.is_none()`.
    pub fn rule_set_categories(&self) -> &[crate::types::RuleSetCategory] {
        self.rule_set_categories.as_deref().unwrap_or_default()
    }
}
impl ProjectContinuousIntegrationScanConfiguration {
    /// Creates a new builder-style object to manufacture [`ProjectContinuousIntegrationScanConfiguration`](crate::types::ProjectContinuousIntegrationScanConfiguration).
    pub fn builder() -> crate::types::builders::ProjectContinuousIntegrationScanConfigurationBuilder {
        crate::types::builders::ProjectContinuousIntegrationScanConfigurationBuilder::default()
    }
}

/// A builder for [`ProjectContinuousIntegrationScanConfiguration`](crate::types::ProjectContinuousIntegrationScanConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProjectContinuousIntegrationScanConfigurationBuilder {
    pub(crate) supported_event: ::std::option::Option<crate::types::ContinuousIntegrationScanEvent>,
    pub(crate) rule_set_categories: ::std::option::Option<::std::vec::Vec<crate::types::RuleSetCategory>>,
}
impl ProjectContinuousIntegrationScanConfigurationBuilder {
    /// <p>The repository event that triggers continuous integration scans for the project.</p>
    pub fn supported_event(mut self, input: crate::types::ContinuousIntegrationScanEvent) -> Self {
        self.supported_event = ::std::option::Option::Some(input);
        self
    }
    /// <p>The repository event that triggers continuous integration scans for the project.</p>
    pub fn set_supported_event(mut self, input: ::std::option::Option<crate::types::ContinuousIntegrationScanEvent>) -> Self {
        self.supported_event = input;
        self
    }
    /// <p>The repository event that triggers continuous integration scans for the project.</p>
    pub fn get_supported_event(&self) -> &::std::option::Option<crate::types::ContinuousIntegrationScanEvent> {
        &self.supported_event
    }
    /// Appends an item to `rule_set_categories`.
    ///
    /// To override the contents of this collection use [`set_rule_set_categories`](Self::set_rule_set_categories).
    ///
    /// <p>The categories of security rules applied during continuous integration scans for the project.</p>
    pub fn rule_set_categories(mut self, input: crate::types::RuleSetCategory) -> Self {
        let mut v = self.rule_set_categories.unwrap_or_default();
        v.push(input);
        self.rule_set_categories = ::std::option::Option::Some(v);
        self
    }
    /// <p>The categories of security rules applied during continuous integration scans for the project.</p>
    pub fn set_rule_set_categories(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RuleSetCategory>>) -> Self {
        self.rule_set_categories = input;
        self
    }
    /// <p>The categories of security rules applied during continuous integration scans for the project.</p>
    pub fn get_rule_set_categories(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RuleSetCategory>> {
        &self.rule_set_categories
    }
    /// Consumes the builder and constructs a [`ProjectContinuousIntegrationScanConfiguration`](crate::types::ProjectContinuousIntegrationScanConfiguration).
    pub fn build(self) -> crate::types::ProjectContinuousIntegrationScanConfiguration {
        crate::types::ProjectContinuousIntegrationScanConfiguration {
            supported_event: self.supported_event,
            rule_set_categories: self.rule_set_categories,
        }
    }
}
