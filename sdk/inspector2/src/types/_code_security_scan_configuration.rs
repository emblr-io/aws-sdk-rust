// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the configuration settings for code security scans.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeSecurityScanConfiguration {
    /// <p>Configuration settings for periodic scans that run on a scheduled basis.</p>
    pub periodic_scan_configuration: ::std::option::Option<crate::types::PeriodicScanConfiguration>,
    /// <p>Configuration settings for continuous integration scans that run automatically when code changes are made.</p>
    pub continuous_integration_scan_configuration: ::std::option::Option<crate::types::ContinuousIntegrationScanConfiguration>,
    /// <p>The categories of security rules to be applied during the scan.</p>
    pub rule_set_categories: ::std::vec::Vec<crate::types::RuleSetCategory>,
}
impl CodeSecurityScanConfiguration {
    /// <p>Configuration settings for periodic scans that run on a scheduled basis.</p>
    pub fn periodic_scan_configuration(&self) -> ::std::option::Option<&crate::types::PeriodicScanConfiguration> {
        self.periodic_scan_configuration.as_ref()
    }
    /// <p>Configuration settings for continuous integration scans that run automatically when code changes are made.</p>
    pub fn continuous_integration_scan_configuration(&self) -> ::std::option::Option<&crate::types::ContinuousIntegrationScanConfiguration> {
        self.continuous_integration_scan_configuration.as_ref()
    }
    /// <p>The categories of security rules to be applied during the scan.</p>
    pub fn rule_set_categories(&self) -> &[crate::types::RuleSetCategory] {
        use std::ops::Deref;
        self.rule_set_categories.deref()
    }
}
impl CodeSecurityScanConfiguration {
    /// Creates a new builder-style object to manufacture [`CodeSecurityScanConfiguration`](crate::types::CodeSecurityScanConfiguration).
    pub fn builder() -> crate::types::builders::CodeSecurityScanConfigurationBuilder {
        crate::types::builders::CodeSecurityScanConfigurationBuilder::default()
    }
}

/// A builder for [`CodeSecurityScanConfiguration`](crate::types::CodeSecurityScanConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CodeSecurityScanConfigurationBuilder {
    pub(crate) periodic_scan_configuration: ::std::option::Option<crate::types::PeriodicScanConfiguration>,
    pub(crate) continuous_integration_scan_configuration: ::std::option::Option<crate::types::ContinuousIntegrationScanConfiguration>,
    pub(crate) rule_set_categories: ::std::option::Option<::std::vec::Vec<crate::types::RuleSetCategory>>,
}
impl CodeSecurityScanConfigurationBuilder {
    /// <p>Configuration settings for periodic scans that run on a scheduled basis.</p>
    pub fn periodic_scan_configuration(mut self, input: crate::types::PeriodicScanConfiguration) -> Self {
        self.periodic_scan_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration settings for periodic scans that run on a scheduled basis.</p>
    pub fn set_periodic_scan_configuration(mut self, input: ::std::option::Option<crate::types::PeriodicScanConfiguration>) -> Self {
        self.periodic_scan_configuration = input;
        self
    }
    /// <p>Configuration settings for periodic scans that run on a scheduled basis.</p>
    pub fn get_periodic_scan_configuration(&self) -> &::std::option::Option<crate::types::PeriodicScanConfiguration> {
        &self.periodic_scan_configuration
    }
    /// <p>Configuration settings for continuous integration scans that run automatically when code changes are made.</p>
    pub fn continuous_integration_scan_configuration(mut self, input: crate::types::ContinuousIntegrationScanConfiguration) -> Self {
        self.continuous_integration_scan_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration settings for continuous integration scans that run automatically when code changes are made.</p>
    pub fn set_continuous_integration_scan_configuration(
        mut self,
        input: ::std::option::Option<crate::types::ContinuousIntegrationScanConfiguration>,
    ) -> Self {
        self.continuous_integration_scan_configuration = input;
        self
    }
    /// <p>Configuration settings for continuous integration scans that run automatically when code changes are made.</p>
    pub fn get_continuous_integration_scan_configuration(&self) -> &::std::option::Option<crate::types::ContinuousIntegrationScanConfiguration> {
        &self.continuous_integration_scan_configuration
    }
    /// Appends an item to `rule_set_categories`.
    ///
    /// To override the contents of this collection use [`set_rule_set_categories`](Self::set_rule_set_categories).
    ///
    /// <p>The categories of security rules to be applied during the scan.</p>
    pub fn rule_set_categories(mut self, input: crate::types::RuleSetCategory) -> Self {
        let mut v = self.rule_set_categories.unwrap_or_default();
        v.push(input);
        self.rule_set_categories = ::std::option::Option::Some(v);
        self
    }
    /// <p>The categories of security rules to be applied during the scan.</p>
    pub fn set_rule_set_categories(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RuleSetCategory>>) -> Self {
        self.rule_set_categories = input;
        self
    }
    /// <p>The categories of security rules to be applied during the scan.</p>
    pub fn get_rule_set_categories(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RuleSetCategory>> {
        &self.rule_set_categories
    }
    /// Consumes the builder and constructs a [`CodeSecurityScanConfiguration`](crate::types::CodeSecurityScanConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`rule_set_categories`](crate::types::builders::CodeSecurityScanConfigurationBuilder::rule_set_categories)
    pub fn build(self) -> ::std::result::Result<crate::types::CodeSecurityScanConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CodeSecurityScanConfiguration {
            periodic_scan_configuration: self.periodic_scan_configuration,
            continuous_integration_scan_configuration: self.continuous_integration_scan_configuration,
            rule_set_categories: self.rule_set_categories.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rule_set_categories",
                    "rule_set_categories was not specified but it is required when building CodeSecurityScanConfiguration",
                )
            })?,
        })
    }
}
