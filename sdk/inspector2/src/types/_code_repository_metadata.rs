// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains metadata information about a code repository that is being scanned by Amazon Inspector.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeRepositoryMetadata {
    /// <p>The name of the project in the code repository.</p>
    pub project_name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the code security integration associated with the repository.</p>
    pub integration_arn: ::std::option::Option<::std::string::String>,
    /// <p>The type of repository provider (such as GitHub, GitLab, etc.).</p>
    pub provider_type: ::std::string::String,
    /// <p>The visibility setting of the repository (public or private).</p>
    pub provider_type_visibility: ::std::string::String,
    /// <p>The ID of the last commit that was scanned in the repository.</p>
    pub last_scanned_commit_id: ::std::option::Option<::std::string::String>,
    /// <p>The scan configuration settings applied to the code repository.</p>
    pub scan_configuration: ::std::option::Option<crate::types::ProjectCodeSecurityScanConfiguration>,
    /// <p>Information about on-demand scans performed on the repository.</p>
    pub on_demand_scan: ::std::option::Option<crate::types::CodeRepositoryOnDemandScan>,
}
impl CodeRepositoryMetadata {
    /// <p>The name of the project in the code repository.</p>
    pub fn project_name(&self) -> &str {
        use std::ops::Deref;
        self.project_name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the code security integration associated with the repository.</p>
    pub fn integration_arn(&self) -> ::std::option::Option<&str> {
        self.integration_arn.as_deref()
    }
    /// <p>The type of repository provider (such as GitHub, GitLab, etc.).</p>
    pub fn provider_type(&self) -> &str {
        use std::ops::Deref;
        self.provider_type.deref()
    }
    /// <p>The visibility setting of the repository (public or private).</p>
    pub fn provider_type_visibility(&self) -> &str {
        use std::ops::Deref;
        self.provider_type_visibility.deref()
    }
    /// <p>The ID of the last commit that was scanned in the repository.</p>
    pub fn last_scanned_commit_id(&self) -> ::std::option::Option<&str> {
        self.last_scanned_commit_id.as_deref()
    }
    /// <p>The scan configuration settings applied to the code repository.</p>
    pub fn scan_configuration(&self) -> ::std::option::Option<&crate::types::ProjectCodeSecurityScanConfiguration> {
        self.scan_configuration.as_ref()
    }
    /// <p>Information about on-demand scans performed on the repository.</p>
    pub fn on_demand_scan(&self) -> ::std::option::Option<&crate::types::CodeRepositoryOnDemandScan> {
        self.on_demand_scan.as_ref()
    }
}
impl CodeRepositoryMetadata {
    /// Creates a new builder-style object to manufacture [`CodeRepositoryMetadata`](crate::types::CodeRepositoryMetadata).
    pub fn builder() -> crate::types::builders::CodeRepositoryMetadataBuilder {
        crate::types::builders::CodeRepositoryMetadataBuilder::default()
    }
}

/// A builder for [`CodeRepositoryMetadata`](crate::types::CodeRepositoryMetadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CodeRepositoryMetadataBuilder {
    pub(crate) project_name: ::std::option::Option<::std::string::String>,
    pub(crate) integration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) provider_type: ::std::option::Option<::std::string::String>,
    pub(crate) provider_type_visibility: ::std::option::Option<::std::string::String>,
    pub(crate) last_scanned_commit_id: ::std::option::Option<::std::string::String>,
    pub(crate) scan_configuration: ::std::option::Option<crate::types::ProjectCodeSecurityScanConfiguration>,
    pub(crate) on_demand_scan: ::std::option::Option<crate::types::CodeRepositoryOnDemandScan>,
}
impl CodeRepositoryMetadataBuilder {
    /// <p>The name of the project in the code repository.</p>
    /// This field is required.
    pub fn project_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the project in the code repository.</p>
    pub fn set_project_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// <p>The name of the project in the code repository.</p>
    pub fn get_project_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_name
    }
    /// <p>The Amazon Resource Name (ARN) of the code security integration associated with the repository.</p>
    pub fn integration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.integration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the code security integration associated with the repository.</p>
    pub fn set_integration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.integration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the code security integration associated with the repository.</p>
    pub fn get_integration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.integration_arn
    }
    /// <p>The type of repository provider (such as GitHub, GitLab, etc.).</p>
    /// This field is required.
    pub fn provider_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provider_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of repository provider (such as GitHub, GitLab, etc.).</p>
    pub fn set_provider_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provider_type = input;
        self
    }
    /// <p>The type of repository provider (such as GitHub, GitLab, etc.).</p>
    pub fn get_provider_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.provider_type
    }
    /// <p>The visibility setting of the repository (public or private).</p>
    /// This field is required.
    pub fn provider_type_visibility(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provider_type_visibility = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The visibility setting of the repository (public or private).</p>
    pub fn set_provider_type_visibility(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provider_type_visibility = input;
        self
    }
    /// <p>The visibility setting of the repository (public or private).</p>
    pub fn get_provider_type_visibility(&self) -> &::std::option::Option<::std::string::String> {
        &self.provider_type_visibility
    }
    /// <p>The ID of the last commit that was scanned in the repository.</p>
    pub fn last_scanned_commit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_scanned_commit_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the last commit that was scanned in the repository.</p>
    pub fn set_last_scanned_commit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_scanned_commit_id = input;
        self
    }
    /// <p>The ID of the last commit that was scanned in the repository.</p>
    pub fn get_last_scanned_commit_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_scanned_commit_id
    }
    /// <p>The scan configuration settings applied to the code repository.</p>
    pub fn scan_configuration(mut self, input: crate::types::ProjectCodeSecurityScanConfiguration) -> Self {
        self.scan_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scan configuration settings applied to the code repository.</p>
    pub fn set_scan_configuration(mut self, input: ::std::option::Option<crate::types::ProjectCodeSecurityScanConfiguration>) -> Self {
        self.scan_configuration = input;
        self
    }
    /// <p>The scan configuration settings applied to the code repository.</p>
    pub fn get_scan_configuration(&self) -> &::std::option::Option<crate::types::ProjectCodeSecurityScanConfiguration> {
        &self.scan_configuration
    }
    /// <p>Information about on-demand scans performed on the repository.</p>
    pub fn on_demand_scan(mut self, input: crate::types::CodeRepositoryOnDemandScan) -> Self {
        self.on_demand_scan = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about on-demand scans performed on the repository.</p>
    pub fn set_on_demand_scan(mut self, input: ::std::option::Option<crate::types::CodeRepositoryOnDemandScan>) -> Self {
        self.on_demand_scan = input;
        self
    }
    /// <p>Information about on-demand scans performed on the repository.</p>
    pub fn get_on_demand_scan(&self) -> &::std::option::Option<crate::types::CodeRepositoryOnDemandScan> {
        &self.on_demand_scan
    }
    /// Consumes the builder and constructs a [`CodeRepositoryMetadata`](crate::types::CodeRepositoryMetadata).
    /// This method will fail if any of the following fields are not set:
    /// - [`project_name`](crate::types::builders::CodeRepositoryMetadataBuilder::project_name)
    /// - [`provider_type`](crate::types::builders::CodeRepositoryMetadataBuilder::provider_type)
    /// - [`provider_type_visibility`](crate::types::builders::CodeRepositoryMetadataBuilder::provider_type_visibility)
    pub fn build(self) -> ::std::result::Result<crate::types::CodeRepositoryMetadata, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CodeRepositoryMetadata {
            project_name: self.project_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "project_name",
                    "project_name was not specified but it is required when building CodeRepositoryMetadata",
                )
            })?,
            integration_arn: self.integration_arn,
            provider_type: self.provider_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "provider_type",
                    "provider_type was not specified but it is required when building CodeRepositoryMetadata",
                )
            })?,
            provider_type_visibility: self.provider_type_visibility.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "provider_type_visibility",
                    "provider_type_visibility was not specified but it is required when building CodeRepositoryMetadata",
                )
            })?,
            last_scanned_commit_id: self.last_scanned_commit_id,
            scan_configuration: self.scan_configuration,
            on_demand_scan: self.on_demand_scan,
        })
    }
}
