// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the scope of repositories to be included in code security scans.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScopeSettings {
    /// <p>The scope of projects to be selected for scanning within the integrated repositories. Setting the value to <code>ALL</code> applies the scope settings to all existing and future projects imported into Amazon Inspector.</p>
    pub project_selection_scope: ::std::option::Option<crate::types::ProjectSelectionScope>,
}
impl ScopeSettings {
    /// <p>The scope of projects to be selected for scanning within the integrated repositories. Setting the value to <code>ALL</code> applies the scope settings to all existing and future projects imported into Amazon Inspector.</p>
    pub fn project_selection_scope(&self) -> ::std::option::Option<&crate::types::ProjectSelectionScope> {
        self.project_selection_scope.as_ref()
    }
}
impl ScopeSettings {
    /// Creates a new builder-style object to manufacture [`ScopeSettings`](crate::types::ScopeSettings).
    pub fn builder() -> crate::types::builders::ScopeSettingsBuilder {
        crate::types::builders::ScopeSettingsBuilder::default()
    }
}

/// A builder for [`ScopeSettings`](crate::types::ScopeSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ScopeSettingsBuilder {
    pub(crate) project_selection_scope: ::std::option::Option<crate::types::ProjectSelectionScope>,
}
impl ScopeSettingsBuilder {
    /// <p>The scope of projects to be selected for scanning within the integrated repositories. Setting the value to <code>ALL</code> applies the scope settings to all existing and future projects imported into Amazon Inspector.</p>
    pub fn project_selection_scope(mut self, input: crate::types::ProjectSelectionScope) -> Self {
        self.project_selection_scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scope of projects to be selected for scanning within the integrated repositories. Setting the value to <code>ALL</code> applies the scope settings to all existing and future projects imported into Amazon Inspector.</p>
    pub fn set_project_selection_scope(mut self, input: ::std::option::Option<crate::types::ProjectSelectionScope>) -> Self {
        self.project_selection_scope = input;
        self
    }
    /// <p>The scope of projects to be selected for scanning within the integrated repositories. Setting the value to <code>ALL</code> applies the scope settings to all existing and future projects imported into Amazon Inspector.</p>
    pub fn get_project_selection_scope(&self) -> &::std::option::Option<crate::types::ProjectSelectionScope> {
        &self.project_selection_scope
    }
    /// Consumes the builder and constructs a [`ScopeSettings`](crate::types::ScopeSettings).
    pub fn build(self) -> crate::types::ScopeSettings {
        crate::types::ScopeSettings {
            project_selection_scope: self.project_selection_scope,
        }
    }
}
