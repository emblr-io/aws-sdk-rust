// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration settings for continuous integration scans that run automatically when code changes are made.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContinuousIntegrationScanConfiguration {
    /// <p>The repository events that trigger continuous integration scans, such as pull requests or commits.</p>
    pub supported_events: ::std::vec::Vec<crate::types::ContinuousIntegrationScanEvent>,
}
impl ContinuousIntegrationScanConfiguration {
    /// <p>The repository events that trigger continuous integration scans, such as pull requests or commits.</p>
    pub fn supported_events(&self) -> &[crate::types::ContinuousIntegrationScanEvent] {
        use std::ops::Deref;
        self.supported_events.deref()
    }
}
impl ContinuousIntegrationScanConfiguration {
    /// Creates a new builder-style object to manufacture [`ContinuousIntegrationScanConfiguration`](crate::types::ContinuousIntegrationScanConfiguration).
    pub fn builder() -> crate::types::builders::ContinuousIntegrationScanConfigurationBuilder {
        crate::types::builders::ContinuousIntegrationScanConfigurationBuilder::default()
    }
}

/// A builder for [`ContinuousIntegrationScanConfiguration`](crate::types::ContinuousIntegrationScanConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContinuousIntegrationScanConfigurationBuilder {
    pub(crate) supported_events: ::std::option::Option<::std::vec::Vec<crate::types::ContinuousIntegrationScanEvent>>,
}
impl ContinuousIntegrationScanConfigurationBuilder {
    /// Appends an item to `supported_events`.
    ///
    /// To override the contents of this collection use [`set_supported_events`](Self::set_supported_events).
    ///
    /// <p>The repository events that trigger continuous integration scans, such as pull requests or commits.</p>
    pub fn supported_events(mut self, input: crate::types::ContinuousIntegrationScanEvent) -> Self {
        let mut v = self.supported_events.unwrap_or_default();
        v.push(input);
        self.supported_events = ::std::option::Option::Some(v);
        self
    }
    /// <p>The repository events that trigger continuous integration scans, such as pull requests or commits.</p>
    pub fn set_supported_events(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContinuousIntegrationScanEvent>>) -> Self {
        self.supported_events = input;
        self
    }
    /// <p>The repository events that trigger continuous integration scans, such as pull requests or commits.</p>
    pub fn get_supported_events(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContinuousIntegrationScanEvent>> {
        &self.supported_events
    }
    /// Consumes the builder and constructs a [`ContinuousIntegrationScanConfiguration`](crate::types::ContinuousIntegrationScanConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`supported_events`](crate::types::builders::ContinuousIntegrationScanConfigurationBuilder::supported_events)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ContinuousIntegrationScanConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ContinuousIntegrationScanConfiguration {
            supported_events: self.supported_events.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "supported_events",
                    "supported_events was not specified but it is required when building ContinuousIntegrationScanConfiguration",
                )
            })?,
        })
    }
}
