// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the step associated with a finding.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Step {
    /// <p>The component ID.</p>
    pub component_id: ::std::string::String,
    /// <p>The component type.</p>
    pub component_type: ::std::string::String,
    /// <p>The component ARN. The ARN can be null and is not displayed in the Amazon Web Services console.</p>
    pub component_arn: ::std::option::Option<::std::string::String>,
}
impl Step {
    /// <p>The component ID.</p>
    pub fn component_id(&self) -> &str {
        use std::ops::Deref;
        self.component_id.deref()
    }
    /// <p>The component type.</p>
    pub fn component_type(&self) -> &str {
        use std::ops::Deref;
        self.component_type.deref()
    }
    /// <p>The component ARN. The ARN can be null and is not displayed in the Amazon Web Services console.</p>
    pub fn component_arn(&self) -> ::std::option::Option<&str> {
        self.component_arn.as_deref()
    }
}
impl Step {
    /// Creates a new builder-style object to manufacture [`Step`](crate::types::Step).
    pub fn builder() -> crate::types::builders::StepBuilder {
        crate::types::builders::StepBuilder::default()
    }
}

/// A builder for [`Step`](crate::types::Step).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StepBuilder {
    pub(crate) component_id: ::std::option::Option<::std::string::String>,
    pub(crate) component_type: ::std::option::Option<::std::string::String>,
    pub(crate) component_arn: ::std::option::Option<::std::string::String>,
}
impl StepBuilder {
    /// <p>The component ID.</p>
    /// This field is required.
    pub fn component_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.component_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The component ID.</p>
    pub fn set_component_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.component_id = input;
        self
    }
    /// <p>The component ID.</p>
    pub fn get_component_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.component_id
    }
    /// <p>The component type.</p>
    /// This field is required.
    pub fn component_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.component_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The component type.</p>
    pub fn set_component_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.component_type = input;
        self
    }
    /// <p>The component type.</p>
    pub fn get_component_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.component_type
    }
    /// <p>The component ARN. The ARN can be null and is not displayed in the Amazon Web Services console.</p>
    pub fn component_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.component_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The component ARN. The ARN can be null and is not displayed in the Amazon Web Services console.</p>
    pub fn set_component_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.component_arn = input;
        self
    }
    /// <p>The component ARN. The ARN can be null and is not displayed in the Amazon Web Services console.</p>
    pub fn get_component_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.component_arn
    }
    /// Consumes the builder and constructs a [`Step`](crate::types::Step).
    /// This method will fail if any of the following fields are not set:
    /// - [`component_id`](crate::types::builders::StepBuilder::component_id)
    /// - [`component_type`](crate::types::builders::StepBuilder::component_type)
    pub fn build(self) -> ::std::result::Result<crate::types::Step, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Step {
            component_id: self.component_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "component_id",
                    "component_id was not specified but it is required when building Step",
                )
            })?,
            component_type: self.component_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "component_type",
                    "component_type was not specified but it is required when building Step",
                )
            })?,
            component_arn: self.component_arn,
        })
    }
}
