// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metadata for an Amazon EKS pod where an Amazon ECR image is in use.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsEksMetadataDetails {
    /// <p>The namespace for an Amazon EKS cluster.</p>
    pub namespace: ::std::option::Option<::std::string::String>,
    /// <p>The list of workloads.</p>
    pub workload_info_list: ::std::option::Option<::std::vec::Vec<crate::types::AwsEksWorkloadInfo>>,
}
impl AwsEksMetadataDetails {
    /// <p>The namespace for an Amazon EKS cluster.</p>
    pub fn namespace(&self) -> ::std::option::Option<&str> {
        self.namespace.as_deref()
    }
    /// <p>The list of workloads.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.workload_info_list.is_none()`.
    pub fn workload_info_list(&self) -> &[crate::types::AwsEksWorkloadInfo] {
        self.workload_info_list.as_deref().unwrap_or_default()
    }
}
impl AwsEksMetadataDetails {
    /// Creates a new builder-style object to manufacture [`AwsEksMetadataDetails`](crate::types::AwsEksMetadataDetails).
    pub fn builder() -> crate::types::builders::AwsEksMetadataDetailsBuilder {
        crate::types::builders::AwsEksMetadataDetailsBuilder::default()
    }
}

/// A builder for [`AwsEksMetadataDetails`](crate::types::AwsEksMetadataDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AwsEksMetadataDetailsBuilder {
    pub(crate) namespace: ::std::option::Option<::std::string::String>,
    pub(crate) workload_info_list: ::std::option::Option<::std::vec::Vec<crate::types::AwsEksWorkloadInfo>>,
}
impl AwsEksMetadataDetailsBuilder {
    /// <p>The namespace for an Amazon EKS cluster.</p>
    pub fn namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.namespace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The namespace for an Amazon EKS cluster.</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The namespace for an Amazon EKS cluster.</p>
    pub fn get_namespace(&self) -> &::std::option::Option<::std::string::String> {
        &self.namespace
    }
    /// Appends an item to `workload_info_list`.
    ///
    /// To override the contents of this collection use [`set_workload_info_list`](Self::set_workload_info_list).
    ///
    /// <p>The list of workloads.</p>
    pub fn workload_info_list(mut self, input: crate::types::AwsEksWorkloadInfo) -> Self {
        let mut v = self.workload_info_list.unwrap_or_default();
        v.push(input);
        self.workload_info_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of workloads.</p>
    pub fn set_workload_info_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AwsEksWorkloadInfo>>) -> Self {
        self.workload_info_list = input;
        self
    }
    /// <p>The list of workloads.</p>
    pub fn get_workload_info_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsEksWorkloadInfo>> {
        &self.workload_info_list
    }
    /// Consumes the builder and constructs a [`AwsEksMetadataDetails`](crate::types::AwsEksMetadataDetails).
    pub fn build(self) -> crate::types::AwsEksMetadataDetails {
        crate::types::AwsEksMetadataDetails {
            namespace: self.namespace,
            workload_info_list: self.workload_info_list,
        }
    }
}
