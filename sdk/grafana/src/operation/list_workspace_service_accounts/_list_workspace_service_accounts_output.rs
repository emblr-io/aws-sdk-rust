// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListWorkspaceServiceAccountsOutput {
    /// <p>The token to use when requesting the next set of service accounts.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>An array of structures containing information about the service accounts.</p>
    pub service_accounts: ::std::vec::Vec<crate::types::ServiceAccountSummary>,
    /// <p>The workspace to which the service accounts are associated.</p>
    pub workspace_id: ::std::string::String,
    _request_id: Option<String>,
}
impl ListWorkspaceServiceAccountsOutput {
    /// <p>The token to use when requesting the next set of service accounts.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>An array of structures containing information about the service accounts.</p>
    pub fn service_accounts(&self) -> &[crate::types::ServiceAccountSummary] {
        use std::ops::Deref;
        self.service_accounts.deref()
    }
    /// <p>The workspace to which the service accounts are associated.</p>
    pub fn workspace_id(&self) -> &str {
        use std::ops::Deref;
        self.workspace_id.deref()
    }
}
impl ::aws_types::request_id::RequestId for ListWorkspaceServiceAccountsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListWorkspaceServiceAccountsOutput {
    /// Creates a new builder-style object to manufacture [`ListWorkspaceServiceAccountsOutput`](crate::operation::list_workspace_service_accounts::ListWorkspaceServiceAccountsOutput).
    pub fn builder() -> crate::operation::list_workspace_service_accounts::builders::ListWorkspaceServiceAccountsOutputBuilder {
        crate::operation::list_workspace_service_accounts::builders::ListWorkspaceServiceAccountsOutputBuilder::default()
    }
}

/// A builder for [`ListWorkspaceServiceAccountsOutput`](crate::operation::list_workspace_service_accounts::ListWorkspaceServiceAccountsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListWorkspaceServiceAccountsOutputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) service_accounts: ::std::option::Option<::std::vec::Vec<crate::types::ServiceAccountSummary>>,
    pub(crate) workspace_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListWorkspaceServiceAccountsOutputBuilder {
    /// <p>The token to use when requesting the next set of service accounts.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to use when requesting the next set of service accounts.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token to use when requesting the next set of service accounts.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `service_accounts`.
    ///
    /// To override the contents of this collection use [`set_service_accounts`](Self::set_service_accounts).
    ///
    /// <p>An array of structures containing information about the service accounts.</p>
    pub fn service_accounts(mut self, input: crate::types::ServiceAccountSummary) -> Self {
        let mut v = self.service_accounts.unwrap_or_default();
        v.push(input);
        self.service_accounts = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of structures containing information about the service accounts.</p>
    pub fn set_service_accounts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ServiceAccountSummary>>) -> Self {
        self.service_accounts = input;
        self
    }
    /// <p>An array of structures containing information about the service accounts.</p>
    pub fn get_service_accounts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ServiceAccountSummary>> {
        &self.service_accounts
    }
    /// <p>The workspace to which the service accounts are associated.</p>
    /// This field is required.
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The workspace to which the service accounts are associated.</p>
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_id = input;
        self
    }
    /// <p>The workspace to which the service accounts are associated.</p>
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListWorkspaceServiceAccountsOutput`](crate::operation::list_workspace_service_accounts::ListWorkspaceServiceAccountsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`service_accounts`](crate::operation::list_workspace_service_accounts::builders::ListWorkspaceServiceAccountsOutputBuilder::service_accounts)
    /// - [`workspace_id`](crate::operation::list_workspace_service_accounts::builders::ListWorkspaceServiceAccountsOutputBuilder::workspace_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_workspace_service_accounts::ListWorkspaceServiceAccountsOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_workspace_service_accounts::ListWorkspaceServiceAccountsOutput {
            next_token: self.next_token,
            service_accounts: self.service_accounts.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "service_accounts",
                    "service_accounts was not specified but it is required when building ListWorkspaceServiceAccountsOutput",
                )
            })?,
            workspace_id: self.workspace_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "workspace_id",
                    "workspace_id was not specified but it is required when building ListWorkspaceServiceAccountsOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
