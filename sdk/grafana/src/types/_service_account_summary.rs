// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains the information about one service account.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceAccountSummary {
    /// <p>The unique ID of the service account.</p>
    pub id: ::std::string::String,
    /// <p>The name of the service account.</p>
    pub name: ::std::string::String,
    /// <p>Returns true if the service account is disabled. Service accounts can be disabled and enabled in the Amazon Managed Grafana console.</p>
    pub is_disabled: ::std::string::String,
    /// <p>The role of the service account, which sets the permission level used when calling Grafana APIs.</p>
    pub grafana_role: crate::types::Role,
}
impl ServiceAccountSummary {
    /// <p>The unique ID of the service account.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The name of the service account.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Returns true if the service account is disabled. Service accounts can be disabled and enabled in the Amazon Managed Grafana console.</p>
    pub fn is_disabled(&self) -> &str {
        use std::ops::Deref;
        self.is_disabled.deref()
    }
    /// <p>The role of the service account, which sets the permission level used when calling Grafana APIs.</p>
    pub fn grafana_role(&self) -> &crate::types::Role {
        &self.grafana_role
    }
}
impl ServiceAccountSummary {
    /// Creates a new builder-style object to manufacture [`ServiceAccountSummary`](crate::types::ServiceAccountSummary).
    pub fn builder() -> crate::types::builders::ServiceAccountSummaryBuilder {
        crate::types::builders::ServiceAccountSummaryBuilder::default()
    }
}

/// A builder for [`ServiceAccountSummary`](crate::types::ServiceAccountSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceAccountSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) is_disabled: ::std::option::Option<::std::string::String>,
    pub(crate) grafana_role: ::std::option::Option<crate::types::Role>,
}
impl ServiceAccountSummaryBuilder {
    /// <p>The unique ID of the service account.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the service account.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique ID of the service account.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the service account.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the service account.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the service account.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Returns true if the service account is disabled. Service accounts can be disabled and enabled in the Amazon Managed Grafana console.</p>
    /// This field is required.
    pub fn is_disabled(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.is_disabled = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Returns true if the service account is disabled. Service accounts can be disabled and enabled in the Amazon Managed Grafana console.</p>
    pub fn set_is_disabled(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.is_disabled = input;
        self
    }
    /// <p>Returns true if the service account is disabled. Service accounts can be disabled and enabled in the Amazon Managed Grafana console.</p>
    pub fn get_is_disabled(&self) -> &::std::option::Option<::std::string::String> {
        &self.is_disabled
    }
    /// <p>The role of the service account, which sets the permission level used when calling Grafana APIs.</p>
    /// This field is required.
    pub fn grafana_role(mut self, input: crate::types::Role) -> Self {
        self.grafana_role = ::std::option::Option::Some(input);
        self
    }
    /// <p>The role of the service account, which sets the permission level used when calling Grafana APIs.</p>
    pub fn set_grafana_role(mut self, input: ::std::option::Option<crate::types::Role>) -> Self {
        self.grafana_role = input;
        self
    }
    /// <p>The role of the service account, which sets the permission level used when calling Grafana APIs.</p>
    pub fn get_grafana_role(&self) -> &::std::option::Option<crate::types::Role> {
        &self.grafana_role
    }
    /// Consumes the builder and constructs a [`ServiceAccountSummary`](crate::types::ServiceAccountSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::ServiceAccountSummaryBuilder::id)
    /// - [`name`](crate::types::builders::ServiceAccountSummaryBuilder::name)
    /// - [`is_disabled`](crate::types::builders::ServiceAccountSummaryBuilder::is_disabled)
    /// - [`grafana_role`](crate::types::builders::ServiceAccountSummaryBuilder::grafana_role)
    pub fn build(self) -> ::std::result::Result<crate::types::ServiceAccountSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ServiceAccountSummary {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building ServiceAccountSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building ServiceAccountSummary",
                )
            })?,
            is_disabled: self.is_disabled.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "is_disabled",
                    "is_disabled was not specified but it is required when building ServiceAccountSummary",
                )
            })?,
            grafana_role: self.grafana_role.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "grafana_role",
                    "grafana_role was not specified but it is required when building ServiceAccountSummary",
                )
            })?,
        })
    }
}
