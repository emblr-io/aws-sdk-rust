// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains the information about a service account token.</p>
/// <p>This structure is returned when creating the token. It is important to store the <code>key</code> that is returned, as it is not retrievable at a later time.</p>
/// <p>If you lose the key, you can delete and recreate the token, which will create a new key.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ServiceAccountTokenSummaryWithKey {
    /// <p>The unique ID of the service account token.</p>
    pub id: ::std::string::String,
    /// <p>The name of the service account token.</p>
    pub name: ::std::string::String,
    /// <p>The key for the service account token. Used when making calls to the Grafana HTTP APIs to authenticate and authorize the requests.</p>
    pub key: ::std::string::String,
}
impl ServiceAccountTokenSummaryWithKey {
    /// <p>The unique ID of the service account token.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The name of the service account token.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The key for the service account token. Used when making calls to the Grafana HTTP APIs to authenticate and authorize the requests.</p>
    pub fn key(&self) -> &str {
        use std::ops::Deref;
        self.key.deref()
    }
}
impl ::std::fmt::Debug for ServiceAccountTokenSummaryWithKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceAccountTokenSummaryWithKey");
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("key", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ServiceAccountTokenSummaryWithKey {
    /// Creates a new builder-style object to manufacture [`ServiceAccountTokenSummaryWithKey`](crate::types::ServiceAccountTokenSummaryWithKey).
    pub fn builder() -> crate::types::builders::ServiceAccountTokenSummaryWithKeyBuilder {
        crate::types::builders::ServiceAccountTokenSummaryWithKeyBuilder::default()
    }
}

/// A builder for [`ServiceAccountTokenSummaryWithKey`](crate::types::ServiceAccountTokenSummaryWithKey).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ServiceAccountTokenSummaryWithKeyBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
}
impl ServiceAccountTokenSummaryWithKeyBuilder {
    /// <p>The unique ID of the service account token.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the service account token.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique ID of the service account token.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the service account token.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the service account token.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the service account token.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The key for the service account token. Used when making calls to the Grafana HTTP APIs to authenticate and authorize the requests.</p>
    /// This field is required.
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key for the service account token. Used when making calls to the Grafana HTTP APIs to authenticate and authorize the requests.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The key for the service account token. Used when making calls to the Grafana HTTP APIs to authenticate and authorize the requests.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// Consumes the builder and constructs a [`ServiceAccountTokenSummaryWithKey`](crate::types::ServiceAccountTokenSummaryWithKey).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::ServiceAccountTokenSummaryWithKeyBuilder::id)
    /// - [`name`](crate::types::builders::ServiceAccountTokenSummaryWithKeyBuilder::name)
    /// - [`key`](crate::types::builders::ServiceAccountTokenSummaryWithKeyBuilder::key)
    pub fn build(self) -> ::std::result::Result<crate::types::ServiceAccountTokenSummaryWithKey, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ServiceAccountTokenSummaryWithKey {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building ServiceAccountTokenSummaryWithKey",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building ServiceAccountTokenSummaryWithKey",
                )
            })?,
            key: self.key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key",
                    "key was not specified but it is required when building ServiceAccountTokenSummaryWithKey",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for ServiceAccountTokenSummaryWithKeyBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceAccountTokenSummaryWithKeyBuilder");
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("key", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
