// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Retrieves the details of maintenance actions that are pending.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PendingMaintenanceActionDetails {
    /// <p>Displays the specific action of a pending maintenance action.</p>
    pub action: ::std::string::String,
    /// <p>Displays the date of the maintenance window when the action is applied. The maintenance action is applied to the resource during its first maintenance window after this date. If this date is specified, any <code>NEXT_MAINTENANCE</code> <code>optInType</code> requests are ignored.</p>
    pub auto_applied_after_date: ::std::option::Option<::std::string::String>,
    /// <p>Displays the date when the maintenance action is automatically applied. The maintenance action is applied to the resource on this date regardless of the maintenance window for the resource. If this date is specified, any <code>IMMEDIATE</code> <code>optInType</code> requests are ignored.</p>
    pub forced_apply_date: ::std::option::Option<::std::string::String>,
    /// <p>Displays the type of <code>optInType</code> request that has been received for the resource.</p>
    pub opt_in_status: ::std::option::Option<::std::string::String>,
    /// <p>Displays the effective date when the pending maintenance action is applied to the resource.</p>
    pub current_apply_date: ::std::option::Option<::std::string::String>,
    /// <p>Displays a description providing more detail about the maintenance action.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl PendingMaintenanceActionDetails {
    /// <p>Displays the specific action of a pending maintenance action.</p>
    pub fn action(&self) -> &str {
        use std::ops::Deref;
        self.action.deref()
    }
    /// <p>Displays the date of the maintenance window when the action is applied. The maintenance action is applied to the resource during its first maintenance window after this date. If this date is specified, any <code>NEXT_MAINTENANCE</code> <code>optInType</code> requests are ignored.</p>
    pub fn auto_applied_after_date(&self) -> ::std::option::Option<&str> {
        self.auto_applied_after_date.as_deref()
    }
    /// <p>Displays the date when the maintenance action is automatically applied. The maintenance action is applied to the resource on this date regardless of the maintenance window for the resource. If this date is specified, any <code>IMMEDIATE</code> <code>optInType</code> requests are ignored.</p>
    pub fn forced_apply_date(&self) -> ::std::option::Option<&str> {
        self.forced_apply_date.as_deref()
    }
    /// <p>Displays the type of <code>optInType</code> request that has been received for the resource.</p>
    pub fn opt_in_status(&self) -> ::std::option::Option<&str> {
        self.opt_in_status.as_deref()
    }
    /// <p>Displays the effective date when the pending maintenance action is applied to the resource.</p>
    pub fn current_apply_date(&self) -> ::std::option::Option<&str> {
        self.current_apply_date.as_deref()
    }
    /// <p>Displays a description providing more detail about the maintenance action.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl PendingMaintenanceActionDetails {
    /// Creates a new builder-style object to manufacture [`PendingMaintenanceActionDetails`](crate::types::PendingMaintenanceActionDetails).
    pub fn builder() -> crate::types::builders::PendingMaintenanceActionDetailsBuilder {
        crate::types::builders::PendingMaintenanceActionDetailsBuilder::default()
    }
}

/// A builder for [`PendingMaintenanceActionDetails`](crate::types::PendingMaintenanceActionDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PendingMaintenanceActionDetailsBuilder {
    pub(crate) action: ::std::option::Option<::std::string::String>,
    pub(crate) auto_applied_after_date: ::std::option::Option<::std::string::String>,
    pub(crate) forced_apply_date: ::std::option::Option<::std::string::String>,
    pub(crate) opt_in_status: ::std::option::Option<::std::string::String>,
    pub(crate) current_apply_date: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl PendingMaintenanceActionDetailsBuilder {
    /// <p>Displays the specific action of a pending maintenance action.</p>
    /// This field is required.
    pub fn action(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Displays the specific action of a pending maintenance action.</p>
    pub fn set_action(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action = input;
        self
    }
    /// <p>Displays the specific action of a pending maintenance action.</p>
    pub fn get_action(&self) -> &::std::option::Option<::std::string::String> {
        &self.action
    }
    /// <p>Displays the date of the maintenance window when the action is applied. The maintenance action is applied to the resource during its first maintenance window after this date. If this date is specified, any <code>NEXT_MAINTENANCE</code> <code>optInType</code> requests are ignored.</p>
    pub fn auto_applied_after_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.auto_applied_after_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Displays the date of the maintenance window when the action is applied. The maintenance action is applied to the resource during its first maintenance window after this date. If this date is specified, any <code>NEXT_MAINTENANCE</code> <code>optInType</code> requests are ignored.</p>
    pub fn set_auto_applied_after_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.auto_applied_after_date = input;
        self
    }
    /// <p>Displays the date of the maintenance window when the action is applied. The maintenance action is applied to the resource during its first maintenance window after this date. If this date is specified, any <code>NEXT_MAINTENANCE</code> <code>optInType</code> requests are ignored.</p>
    pub fn get_auto_applied_after_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.auto_applied_after_date
    }
    /// <p>Displays the date when the maintenance action is automatically applied. The maintenance action is applied to the resource on this date regardless of the maintenance window for the resource. If this date is specified, any <code>IMMEDIATE</code> <code>optInType</code> requests are ignored.</p>
    pub fn forced_apply_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.forced_apply_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Displays the date when the maintenance action is automatically applied. The maintenance action is applied to the resource on this date regardless of the maintenance window for the resource. If this date is specified, any <code>IMMEDIATE</code> <code>optInType</code> requests are ignored.</p>
    pub fn set_forced_apply_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.forced_apply_date = input;
        self
    }
    /// <p>Displays the date when the maintenance action is automatically applied. The maintenance action is applied to the resource on this date regardless of the maintenance window for the resource. If this date is specified, any <code>IMMEDIATE</code> <code>optInType</code> requests are ignored.</p>
    pub fn get_forced_apply_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.forced_apply_date
    }
    /// <p>Displays the type of <code>optInType</code> request that has been received for the resource.</p>
    pub fn opt_in_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.opt_in_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Displays the type of <code>optInType</code> request that has been received for the resource.</p>
    pub fn set_opt_in_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.opt_in_status = input;
        self
    }
    /// <p>Displays the type of <code>optInType</code> request that has been received for the resource.</p>
    pub fn get_opt_in_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.opt_in_status
    }
    /// <p>Displays the effective date when the pending maintenance action is applied to the resource.</p>
    pub fn current_apply_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_apply_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Displays the effective date when the pending maintenance action is applied to the resource.</p>
    pub fn set_current_apply_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_apply_date = input;
        self
    }
    /// <p>Displays the effective date when the pending maintenance action is applied to the resource.</p>
    pub fn get_current_apply_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_apply_date
    }
    /// <p>Displays a description providing more detail about the maintenance action.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Displays a description providing more detail about the maintenance action.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Displays a description providing more detail about the maintenance action.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`PendingMaintenanceActionDetails`](crate::types::PendingMaintenanceActionDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`action`](crate::types::builders::PendingMaintenanceActionDetailsBuilder::action)
    pub fn build(self) -> ::std::result::Result<crate::types::PendingMaintenanceActionDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PendingMaintenanceActionDetails {
            action: self.action.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action",
                    "action was not specified but it is required when building PendingMaintenanceActionDetails",
                )
            })?,
            auto_applied_after_date: self.auto_applied_after_date,
            forced_apply_date: self.forced_apply_date,
            opt_in_status: self.opt_in_status,
            current_apply_date: self.current_apply_date,
            description: self.description,
        })
    }
}
