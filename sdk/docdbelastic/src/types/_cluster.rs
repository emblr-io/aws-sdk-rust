// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns information about a specific elastic cluster.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Cluster {
    /// <p>The name of the elastic cluster.</p>
    pub cluster_name: ::std::string::String,
    /// <p>The ARN identifier of the elastic cluster.</p>
    pub cluster_arn: ::std::string::String,
    /// <p>The status of the elastic cluster.</p>
    pub status: crate::types::Status,
    /// <p>The URL used to connect to the elastic cluster.</p>
    pub cluster_endpoint: ::std::string::String,
    /// <p>The time when the elastic cluster was created in Universal Coordinated Time (UTC).</p>
    pub create_time: ::std::string::String,
    /// <p>The name of the elastic cluster administrator.</p>
    pub admin_user_name: ::std::string::String,
    /// <p>The authentication type for the elastic cluster.</p>
    pub auth_type: crate::types::Auth,
    /// <p>The number of vCPUs assigned to each elastic cluster shard. Maximum is 64. Allowed values are 2, 4, 8, 16, 32, 64.</p>
    pub shard_capacity: i32,
    /// <p>The number of shards assigned to the elastic cluster. Maximum is 32.</p>
    pub shard_count: i32,
    /// <p>A list of EC2 VPC security groups associated with thie elastic cluster.</p>
    pub vpc_security_group_ids: ::std::vec::Vec<::std::string::String>,
    /// <p>The Amazon EC2 subnet IDs for the elastic cluster.</p>
    pub subnet_ids: ::std::vec::Vec<::std::string::String>,
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p><i>Format</i>: <code>ddd:hh24:mi-ddd:hh24:mi</code></p>
    pub preferred_maintenance_window: ::std::string::String,
    /// <p>The KMS key identifier to use to encrypt the elastic cluster.</p>
    pub kms_key_id: ::std::string::String,
    /// <p>The total number of shards in the cluster.</p>
    pub shards: ::std::option::Option<::std::vec::Vec<crate::types::Shard>>,
    /// <p>The number of days for which automatic snapshots are retained.</p>
    pub backup_retention_period: ::std::option::Option<i32>,
    /// <p>The daily time range during which automated backups are created if automated backups are enabled, as determined by <code>backupRetentionPeriod</code>.</p>
    pub preferred_backup_window: ::std::option::Option<::std::string::String>,
    /// <p>The number of replica instances applying to all shards in the cluster. A <code>shardInstanceCount</code> value of 1 means there is one writer instance, and any additional instances are replicas that can be used for reads and to improve availability.</p>
    pub shard_instance_count: ::std::option::Option<i32>,
}
impl Cluster {
    /// <p>The name of the elastic cluster.</p>
    pub fn cluster_name(&self) -> &str {
        use std::ops::Deref;
        self.cluster_name.deref()
    }
    /// <p>The ARN identifier of the elastic cluster.</p>
    pub fn cluster_arn(&self) -> &str {
        use std::ops::Deref;
        self.cluster_arn.deref()
    }
    /// <p>The status of the elastic cluster.</p>
    pub fn status(&self) -> &crate::types::Status {
        &self.status
    }
    /// <p>The URL used to connect to the elastic cluster.</p>
    pub fn cluster_endpoint(&self) -> &str {
        use std::ops::Deref;
        self.cluster_endpoint.deref()
    }
    /// <p>The time when the elastic cluster was created in Universal Coordinated Time (UTC).</p>
    pub fn create_time(&self) -> &str {
        use std::ops::Deref;
        self.create_time.deref()
    }
    /// <p>The name of the elastic cluster administrator.</p>
    pub fn admin_user_name(&self) -> &str {
        use std::ops::Deref;
        self.admin_user_name.deref()
    }
    /// <p>The authentication type for the elastic cluster.</p>
    pub fn auth_type(&self) -> &crate::types::Auth {
        &self.auth_type
    }
    /// <p>The number of vCPUs assigned to each elastic cluster shard. Maximum is 64. Allowed values are 2, 4, 8, 16, 32, 64.</p>
    pub fn shard_capacity(&self) -> i32 {
        self.shard_capacity
    }
    /// <p>The number of shards assigned to the elastic cluster. Maximum is 32.</p>
    pub fn shard_count(&self) -> i32 {
        self.shard_count
    }
    /// <p>A list of EC2 VPC security groups associated with thie elastic cluster.</p>
    pub fn vpc_security_group_ids(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.vpc_security_group_ids.deref()
    }
    /// <p>The Amazon EC2 subnet IDs for the elastic cluster.</p>
    pub fn subnet_ids(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.subnet_ids.deref()
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p><i>Format</i>: <code>ddd:hh24:mi-ddd:hh24:mi</code></p>
    pub fn preferred_maintenance_window(&self) -> &str {
        use std::ops::Deref;
        self.preferred_maintenance_window.deref()
    }
    /// <p>The KMS key identifier to use to encrypt the elastic cluster.</p>
    pub fn kms_key_id(&self) -> &str {
        use std::ops::Deref;
        self.kms_key_id.deref()
    }
    /// <p>The total number of shards in the cluster.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.shards.is_none()`.
    pub fn shards(&self) -> &[crate::types::Shard] {
        self.shards.as_deref().unwrap_or_default()
    }
    /// <p>The number of days for which automatic snapshots are retained.</p>
    pub fn backup_retention_period(&self) -> ::std::option::Option<i32> {
        self.backup_retention_period
    }
    /// <p>The daily time range during which automated backups are created if automated backups are enabled, as determined by <code>backupRetentionPeriod</code>.</p>
    pub fn preferred_backup_window(&self) -> ::std::option::Option<&str> {
        self.preferred_backup_window.as_deref()
    }
    /// <p>The number of replica instances applying to all shards in the cluster. A <code>shardInstanceCount</code> value of 1 means there is one writer instance, and any additional instances are replicas that can be used for reads and to improve availability.</p>
    pub fn shard_instance_count(&self) -> ::std::option::Option<i32> {
        self.shard_instance_count
    }
}
impl Cluster {
    /// Creates a new builder-style object to manufacture [`Cluster`](crate::types::Cluster).
    pub fn builder() -> crate::types::builders::ClusterBuilder {
        crate::types::builders::ClusterBuilder::default()
    }
}

/// A builder for [`Cluster`](crate::types::Cluster).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ClusterBuilder {
    pub(crate) cluster_name: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::Status>,
    pub(crate) cluster_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) create_time: ::std::option::Option<::std::string::String>,
    pub(crate) admin_user_name: ::std::option::Option<::std::string::String>,
    pub(crate) auth_type: ::std::option::Option<crate::types::Auth>,
    pub(crate) shard_capacity: ::std::option::Option<i32>,
    pub(crate) shard_count: ::std::option::Option<i32>,
    pub(crate) vpc_security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) subnet_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) preferred_maintenance_window: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) shards: ::std::option::Option<::std::vec::Vec<crate::types::Shard>>,
    pub(crate) backup_retention_period: ::std::option::Option<i32>,
    pub(crate) preferred_backup_window: ::std::option::Option<::std::string::String>,
    pub(crate) shard_instance_count: ::std::option::Option<i32>,
}
impl ClusterBuilder {
    /// <p>The name of the elastic cluster.</p>
    /// This field is required.
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the elastic cluster.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>The name of the elastic cluster.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_name
    }
    /// <p>The ARN identifier of the elastic cluster.</p>
    /// This field is required.
    pub fn cluster_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN identifier of the elastic cluster.</p>
    pub fn set_cluster_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_arn = input;
        self
    }
    /// <p>The ARN identifier of the elastic cluster.</p>
    pub fn get_cluster_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_arn
    }
    /// <p>The status of the elastic cluster.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the elastic cluster.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the elastic cluster.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::Status> {
        &self.status
    }
    /// <p>The URL used to connect to the elastic cluster.</p>
    /// This field is required.
    pub fn cluster_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL used to connect to the elastic cluster.</p>
    pub fn set_cluster_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_endpoint = input;
        self
    }
    /// <p>The URL used to connect to the elastic cluster.</p>
    pub fn get_cluster_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_endpoint
    }
    /// <p>The time when the elastic cluster was created in Universal Coordinated Time (UTC).</p>
    /// This field is required.
    pub fn create_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.create_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time when the elastic cluster was created in Universal Coordinated Time (UTC).</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time when the elastic cluster was created in Universal Coordinated Time (UTC).</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.create_time
    }
    /// <p>The name of the elastic cluster administrator.</p>
    /// This field is required.
    pub fn admin_user_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.admin_user_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the elastic cluster administrator.</p>
    pub fn set_admin_user_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.admin_user_name = input;
        self
    }
    /// <p>The name of the elastic cluster administrator.</p>
    pub fn get_admin_user_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.admin_user_name
    }
    /// <p>The authentication type for the elastic cluster.</p>
    /// This field is required.
    pub fn auth_type(mut self, input: crate::types::Auth) -> Self {
        self.auth_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication type for the elastic cluster.</p>
    pub fn set_auth_type(mut self, input: ::std::option::Option<crate::types::Auth>) -> Self {
        self.auth_type = input;
        self
    }
    /// <p>The authentication type for the elastic cluster.</p>
    pub fn get_auth_type(&self) -> &::std::option::Option<crate::types::Auth> {
        &self.auth_type
    }
    /// <p>The number of vCPUs assigned to each elastic cluster shard. Maximum is 64. Allowed values are 2, 4, 8, 16, 32, 64.</p>
    /// This field is required.
    pub fn shard_capacity(mut self, input: i32) -> Self {
        self.shard_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of vCPUs assigned to each elastic cluster shard. Maximum is 64. Allowed values are 2, 4, 8, 16, 32, 64.</p>
    pub fn set_shard_capacity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.shard_capacity = input;
        self
    }
    /// <p>The number of vCPUs assigned to each elastic cluster shard. Maximum is 64. Allowed values are 2, 4, 8, 16, 32, 64.</p>
    pub fn get_shard_capacity(&self) -> &::std::option::Option<i32> {
        &self.shard_capacity
    }
    /// <p>The number of shards assigned to the elastic cluster. Maximum is 32.</p>
    /// This field is required.
    pub fn shard_count(mut self, input: i32) -> Self {
        self.shard_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of shards assigned to the elastic cluster. Maximum is 32.</p>
    pub fn set_shard_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.shard_count = input;
        self
    }
    /// <p>The number of shards assigned to the elastic cluster. Maximum is 32.</p>
    pub fn get_shard_count(&self) -> &::std::option::Option<i32> {
        &self.shard_count
    }
    /// Appends an item to `vpc_security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_vpc_security_group_ids`](Self::set_vpc_security_group_ids).
    ///
    /// <p>A list of EC2 VPC security groups associated with thie elastic cluster.</p>
    pub fn vpc_security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.vpc_security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.vpc_security_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of EC2 VPC security groups associated with thie elastic cluster.</p>
    pub fn set_vpc_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.vpc_security_group_ids = input;
        self
    }
    /// <p>A list of EC2 VPC security groups associated with thie elastic cluster.</p>
    pub fn get_vpc_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.vpc_security_group_ids
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>The Amazon EC2 subnet IDs for the elastic cluster.</p>
    pub fn subnet_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon EC2 subnet IDs for the elastic cluster.</p>
    pub fn set_subnet_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.subnet_ids = input;
        self
    }
    /// <p>The Amazon EC2 subnet IDs for the elastic cluster.</p>
    pub fn get_subnet_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.subnet_ids
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p><i>Format</i>: <code>ddd:hh24:mi-ddd:hh24:mi</code></p>
    /// This field is required.
    pub fn preferred_maintenance_window(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.preferred_maintenance_window = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p><i>Format</i>: <code>ddd:hh24:mi-ddd:hh24:mi</code></p>
    pub fn set_preferred_maintenance_window(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.preferred_maintenance_window = input;
        self
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p><i>Format</i>: <code>ddd:hh24:mi-ddd:hh24:mi</code></p>
    pub fn get_preferred_maintenance_window(&self) -> &::std::option::Option<::std::string::String> {
        &self.preferred_maintenance_window
    }
    /// <p>The KMS key identifier to use to encrypt the elastic cluster.</p>
    /// This field is required.
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The KMS key identifier to use to encrypt the elastic cluster.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The KMS key identifier to use to encrypt the elastic cluster.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// Appends an item to `shards`.
    ///
    /// To override the contents of this collection use [`set_shards`](Self::set_shards).
    ///
    /// <p>The total number of shards in the cluster.</p>
    pub fn shards(mut self, input: crate::types::Shard) -> Self {
        let mut v = self.shards.unwrap_or_default();
        v.push(input);
        self.shards = ::std::option::Option::Some(v);
        self
    }
    /// <p>The total number of shards in the cluster.</p>
    pub fn set_shards(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Shard>>) -> Self {
        self.shards = input;
        self
    }
    /// <p>The total number of shards in the cluster.</p>
    pub fn get_shards(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Shard>> {
        &self.shards
    }
    /// <p>The number of days for which automatic snapshots are retained.</p>
    pub fn backup_retention_period(mut self, input: i32) -> Self {
        self.backup_retention_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of days for which automatic snapshots are retained.</p>
    pub fn set_backup_retention_period(mut self, input: ::std::option::Option<i32>) -> Self {
        self.backup_retention_period = input;
        self
    }
    /// <p>The number of days for which automatic snapshots are retained.</p>
    pub fn get_backup_retention_period(&self) -> &::std::option::Option<i32> {
        &self.backup_retention_period
    }
    /// <p>The daily time range during which automated backups are created if automated backups are enabled, as determined by <code>backupRetentionPeriod</code>.</p>
    pub fn preferred_backup_window(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.preferred_backup_window = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The daily time range during which automated backups are created if automated backups are enabled, as determined by <code>backupRetentionPeriod</code>.</p>
    pub fn set_preferred_backup_window(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.preferred_backup_window = input;
        self
    }
    /// <p>The daily time range during which automated backups are created if automated backups are enabled, as determined by <code>backupRetentionPeriod</code>.</p>
    pub fn get_preferred_backup_window(&self) -> &::std::option::Option<::std::string::String> {
        &self.preferred_backup_window
    }
    /// <p>The number of replica instances applying to all shards in the cluster. A <code>shardInstanceCount</code> value of 1 means there is one writer instance, and any additional instances are replicas that can be used for reads and to improve availability.</p>
    pub fn shard_instance_count(mut self, input: i32) -> Self {
        self.shard_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of replica instances applying to all shards in the cluster. A <code>shardInstanceCount</code> value of 1 means there is one writer instance, and any additional instances are replicas that can be used for reads and to improve availability.</p>
    pub fn set_shard_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.shard_instance_count = input;
        self
    }
    /// <p>The number of replica instances applying to all shards in the cluster. A <code>shardInstanceCount</code> value of 1 means there is one writer instance, and any additional instances are replicas that can be used for reads and to improve availability.</p>
    pub fn get_shard_instance_count(&self) -> &::std::option::Option<i32> {
        &self.shard_instance_count
    }
    /// Consumes the builder and constructs a [`Cluster`](crate::types::Cluster).
    /// This method will fail if any of the following fields are not set:
    /// - [`cluster_name`](crate::types::builders::ClusterBuilder::cluster_name)
    /// - [`cluster_arn`](crate::types::builders::ClusterBuilder::cluster_arn)
    /// - [`status`](crate::types::builders::ClusterBuilder::status)
    /// - [`cluster_endpoint`](crate::types::builders::ClusterBuilder::cluster_endpoint)
    /// - [`create_time`](crate::types::builders::ClusterBuilder::create_time)
    /// - [`admin_user_name`](crate::types::builders::ClusterBuilder::admin_user_name)
    /// - [`auth_type`](crate::types::builders::ClusterBuilder::auth_type)
    /// - [`shard_capacity`](crate::types::builders::ClusterBuilder::shard_capacity)
    /// - [`shard_count`](crate::types::builders::ClusterBuilder::shard_count)
    /// - [`vpc_security_group_ids`](crate::types::builders::ClusterBuilder::vpc_security_group_ids)
    /// - [`subnet_ids`](crate::types::builders::ClusterBuilder::subnet_ids)
    /// - [`preferred_maintenance_window`](crate::types::builders::ClusterBuilder::preferred_maintenance_window)
    /// - [`kms_key_id`](crate::types::builders::ClusterBuilder::kms_key_id)
    pub fn build(self) -> ::std::result::Result<crate::types::Cluster, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Cluster {
            cluster_name: self.cluster_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cluster_name",
                    "cluster_name was not specified but it is required when building Cluster",
                )
            })?,
            cluster_arn: self.cluster_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cluster_arn",
                    "cluster_arn was not specified but it is required when building Cluster",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building Cluster",
                )
            })?,
            cluster_endpoint: self.cluster_endpoint.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cluster_endpoint",
                    "cluster_endpoint was not specified but it is required when building Cluster",
                )
            })?,
            create_time: self.create_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_time",
                    "create_time was not specified but it is required when building Cluster",
                )
            })?,
            admin_user_name: self.admin_user_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "admin_user_name",
                    "admin_user_name was not specified but it is required when building Cluster",
                )
            })?,
            auth_type: self.auth_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "auth_type",
                    "auth_type was not specified but it is required when building Cluster",
                )
            })?,
            shard_capacity: self.shard_capacity.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "shard_capacity",
                    "shard_capacity was not specified but it is required when building Cluster",
                )
            })?,
            shard_count: self.shard_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "shard_count",
                    "shard_count was not specified but it is required when building Cluster",
                )
            })?,
            vpc_security_group_ids: self.vpc_security_group_ids.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "vpc_security_group_ids",
                    "vpc_security_group_ids was not specified but it is required when building Cluster",
                )
            })?,
            subnet_ids: self.subnet_ids.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "subnet_ids",
                    "subnet_ids was not specified but it is required when building Cluster",
                )
            })?,
            preferred_maintenance_window: self.preferred_maintenance_window.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "preferred_maintenance_window",
                    "preferred_maintenance_window was not specified but it is required when building Cluster",
                )
            })?,
            kms_key_id: self.kms_key_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "kms_key_id",
                    "kms_key_id was not specified but it is required when building Cluster",
                )
            })?,
            shards: self.shards,
            backup_retention_period: self.backup_retention_period,
            preferred_backup_window: self.preferred_backup_window,
            shard_instance_count: self.shard_instance_count,
        })
    }
}
