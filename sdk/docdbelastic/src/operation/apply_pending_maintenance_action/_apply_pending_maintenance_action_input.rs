// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApplyPendingMaintenanceActionInput {
    /// <p>The Amazon DocumentDB Amazon Resource Name (ARN) of the resource to which the pending maintenance action applies.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The pending maintenance action to apply to the resource.</p>
    /// <p>Valid actions are:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENGINE_UPDATE<i></i> </code></p></li>
    /// <li>
    /// <p><code>ENGINE_UPGRADE</code></p></li>
    /// <li>
    /// <p><code>SECURITY_UPDATE</code></p></li>
    /// <li>
    /// <p><code>OS_UPDATE</code></p></li>
    /// <li>
    /// <p><code>MASTER_USER_PASSWORD_UPDATE</code></p></li>
    /// </ul>
    pub apply_action: ::std::option::Option<::std::string::String>,
    /// <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>IMMEDIATE</code> can't be undone.</p>
    pub opt_in_type: ::std::option::Option<crate::types::OptInType>,
    /// <p>A specific date to apply the pending maintenance action. Required if opt-in-type is <code>APPLY_ON</code>. Format: <code>yyyy/MM/dd HH:mm-yyyy/MM/dd HH:mm</code></p>
    pub apply_on: ::std::option::Option<::std::string::String>,
}
impl ApplyPendingMaintenanceActionInput {
    /// <p>The Amazon DocumentDB Amazon Resource Name (ARN) of the resource to which the pending maintenance action applies.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The pending maintenance action to apply to the resource.</p>
    /// <p>Valid actions are:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENGINE_UPDATE<i></i> </code></p></li>
    /// <li>
    /// <p><code>ENGINE_UPGRADE</code></p></li>
    /// <li>
    /// <p><code>SECURITY_UPDATE</code></p></li>
    /// <li>
    /// <p><code>OS_UPDATE</code></p></li>
    /// <li>
    /// <p><code>MASTER_USER_PASSWORD_UPDATE</code></p></li>
    /// </ul>
    pub fn apply_action(&self) -> ::std::option::Option<&str> {
        self.apply_action.as_deref()
    }
    /// <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>IMMEDIATE</code> can't be undone.</p>
    pub fn opt_in_type(&self) -> ::std::option::Option<&crate::types::OptInType> {
        self.opt_in_type.as_ref()
    }
    /// <p>A specific date to apply the pending maintenance action. Required if opt-in-type is <code>APPLY_ON</code>. Format: <code>yyyy/MM/dd HH:mm-yyyy/MM/dd HH:mm</code></p>
    pub fn apply_on(&self) -> ::std::option::Option<&str> {
        self.apply_on.as_deref()
    }
}
impl ApplyPendingMaintenanceActionInput {
    /// Creates a new builder-style object to manufacture [`ApplyPendingMaintenanceActionInput`](crate::operation::apply_pending_maintenance_action::ApplyPendingMaintenanceActionInput).
    pub fn builder() -> crate::operation::apply_pending_maintenance_action::builders::ApplyPendingMaintenanceActionInputBuilder {
        crate::operation::apply_pending_maintenance_action::builders::ApplyPendingMaintenanceActionInputBuilder::default()
    }
}

/// A builder for [`ApplyPendingMaintenanceActionInput`](crate::operation::apply_pending_maintenance_action::ApplyPendingMaintenanceActionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ApplyPendingMaintenanceActionInputBuilder {
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) apply_action: ::std::option::Option<::std::string::String>,
    pub(crate) opt_in_type: ::std::option::Option<crate::types::OptInType>,
    pub(crate) apply_on: ::std::option::Option<::std::string::String>,
}
impl ApplyPendingMaintenanceActionInputBuilder {
    /// <p>The Amazon DocumentDB Amazon Resource Name (ARN) of the resource to which the pending maintenance action applies.</p>
    /// This field is required.
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon DocumentDB Amazon Resource Name (ARN) of the resource to which the pending maintenance action applies.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The Amazon DocumentDB Amazon Resource Name (ARN) of the resource to which the pending maintenance action applies.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p>The pending maintenance action to apply to the resource.</p>
    /// <p>Valid actions are:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENGINE_UPDATE<i></i> </code></p></li>
    /// <li>
    /// <p><code>ENGINE_UPGRADE</code></p></li>
    /// <li>
    /// <p><code>SECURITY_UPDATE</code></p></li>
    /// <li>
    /// <p><code>OS_UPDATE</code></p></li>
    /// <li>
    /// <p><code>MASTER_USER_PASSWORD_UPDATE</code></p></li>
    /// </ul>
    /// This field is required.
    pub fn apply_action(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.apply_action = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pending maintenance action to apply to the resource.</p>
    /// <p>Valid actions are:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENGINE_UPDATE<i></i> </code></p></li>
    /// <li>
    /// <p><code>ENGINE_UPGRADE</code></p></li>
    /// <li>
    /// <p><code>SECURITY_UPDATE</code></p></li>
    /// <li>
    /// <p><code>OS_UPDATE</code></p></li>
    /// <li>
    /// <p><code>MASTER_USER_PASSWORD_UPDATE</code></p></li>
    /// </ul>
    pub fn set_apply_action(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.apply_action = input;
        self
    }
    /// <p>The pending maintenance action to apply to the resource.</p>
    /// <p>Valid actions are:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENGINE_UPDATE<i></i> </code></p></li>
    /// <li>
    /// <p><code>ENGINE_UPGRADE</code></p></li>
    /// <li>
    /// <p><code>SECURITY_UPDATE</code></p></li>
    /// <li>
    /// <p><code>OS_UPDATE</code></p></li>
    /// <li>
    /// <p><code>MASTER_USER_PASSWORD_UPDATE</code></p></li>
    /// </ul>
    pub fn get_apply_action(&self) -> &::std::option::Option<::std::string::String> {
        &self.apply_action
    }
    /// <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>IMMEDIATE</code> can't be undone.</p>
    /// This field is required.
    pub fn opt_in_type(mut self, input: crate::types::OptInType) -> Self {
        self.opt_in_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>IMMEDIATE</code> can't be undone.</p>
    pub fn set_opt_in_type(mut self, input: ::std::option::Option<crate::types::OptInType>) -> Self {
        self.opt_in_type = input;
        self
    }
    /// <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>IMMEDIATE</code> can't be undone.</p>
    pub fn get_opt_in_type(&self) -> &::std::option::Option<crate::types::OptInType> {
        &self.opt_in_type
    }
    /// <p>A specific date to apply the pending maintenance action. Required if opt-in-type is <code>APPLY_ON</code>. Format: <code>yyyy/MM/dd HH:mm-yyyy/MM/dd HH:mm</code></p>
    pub fn apply_on(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.apply_on = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A specific date to apply the pending maintenance action. Required if opt-in-type is <code>APPLY_ON</code>. Format: <code>yyyy/MM/dd HH:mm-yyyy/MM/dd HH:mm</code></p>
    pub fn set_apply_on(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.apply_on = input;
        self
    }
    /// <p>A specific date to apply the pending maintenance action. Required if opt-in-type is <code>APPLY_ON</code>. Format: <code>yyyy/MM/dd HH:mm-yyyy/MM/dd HH:mm</code></p>
    pub fn get_apply_on(&self) -> &::std::option::Option<::std::string::String> {
        &self.apply_on
    }
    /// Consumes the builder and constructs a [`ApplyPendingMaintenanceActionInput`](crate::operation::apply_pending_maintenance_action::ApplyPendingMaintenanceActionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::apply_pending_maintenance_action::ApplyPendingMaintenanceActionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::apply_pending_maintenance_action::ApplyPendingMaintenanceActionInput {
            resource_arn: self.resource_arn,
            apply_action: self.apply_action,
            opt_in_type: self.opt_in_type,
            apply_on: self.apply_on,
        })
    }
}
