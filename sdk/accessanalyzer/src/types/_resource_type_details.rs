// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the total number of active cross-account and public findings for a resource type of an external access analyzer.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceTypeDetails {
    /// <p>The total number of active public findings for the resource type.</p>
    pub total_active_public: ::std::option::Option<i32>,
    /// <p>The total number of active cross-account findings for the resource type.</p>
    pub total_active_cross_account: ::std::option::Option<i32>,
}
impl ResourceTypeDetails {
    /// <p>The total number of active public findings for the resource type.</p>
    pub fn total_active_public(&self) -> ::std::option::Option<i32> {
        self.total_active_public
    }
    /// <p>The total number of active cross-account findings for the resource type.</p>
    pub fn total_active_cross_account(&self) -> ::std::option::Option<i32> {
        self.total_active_cross_account
    }
}
impl ResourceTypeDetails {
    /// Creates a new builder-style object to manufacture [`ResourceTypeDetails`](crate::types::ResourceTypeDetails).
    pub fn builder() -> crate::types::builders::ResourceTypeDetailsBuilder {
        crate::types::builders::ResourceTypeDetailsBuilder::default()
    }
}

/// A builder for [`ResourceTypeDetails`](crate::types::ResourceTypeDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ResourceTypeDetailsBuilder {
    pub(crate) total_active_public: ::std::option::Option<i32>,
    pub(crate) total_active_cross_account: ::std::option::Option<i32>,
}
impl ResourceTypeDetailsBuilder {
    /// <p>The total number of active public findings for the resource type.</p>
    pub fn total_active_public(mut self, input: i32) -> Self {
        self.total_active_public = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of active public findings for the resource type.</p>
    pub fn set_total_active_public(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_active_public = input;
        self
    }
    /// <p>The total number of active public findings for the resource type.</p>
    pub fn get_total_active_public(&self) -> &::std::option::Option<i32> {
        &self.total_active_public
    }
    /// <p>The total number of active cross-account findings for the resource type.</p>
    pub fn total_active_cross_account(mut self, input: i32) -> Self {
        self.total_active_cross_account = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of active cross-account findings for the resource type.</p>
    pub fn set_total_active_cross_account(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_active_cross_account = input;
        self
    }
    /// <p>The total number of active cross-account findings for the resource type.</p>
    pub fn get_total_active_cross_account(&self) -> &::std::option::Option<i32> {
        &self.total_active_cross_account
    }
    /// Consumes the builder and constructs a [`ResourceTypeDetails`](crate::types::ResourceTypeDetails).
    pub fn build(self) -> crate::types::ResourceTypeDetails {
        crate::types::ResourceTypeDetails {
            total_active_public: self.total_active_public,
            total_active_cross_account: self.total_active_cross_account,
        }
    }
}
