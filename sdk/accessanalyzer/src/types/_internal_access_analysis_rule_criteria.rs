// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The criteria for an analysis rule for an internal access analyzer.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InternalAccessAnalysisRuleCriteria {
    /// <p>A list of Amazon Web Services account IDs to apply to the internal access analysis rule criteria. Account IDs can only be applied to the analysis rule criteria for organization-level analyzers.</p>
    pub account_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of resource types to apply to the internal access analysis rule criteria. The analyzer will only generate findings for resources of these types. These resource types are currently supported for internal access analyzers:</p>
    /// <ul>
    /// <li>
    /// <p><code>AWS::S3::Bucket</code></p></li>
    /// <li>
    /// <p><code>AWS::RDS::DBSnapshot</code></p></li>
    /// <li>
    /// <p><code>AWS::RDS::DBClusterSnapshot</code></p></li>
    /// <li>
    /// <p><code>AWS::S3Express::DirectoryBucket</code></p></li>
    /// <li>
    /// <p><code>AWS::DynamoDB::Table</code></p></li>
    /// <li>
    /// <p><code>AWS::DynamoDB::Stream</code></p></li>
    /// </ul>
    pub resource_types: ::std::option::Option<::std::vec::Vec<crate::types::ResourceType>>,
    /// <p>A list of resource ARNs to apply to the internal access analysis rule criteria. The analyzer will only generate findings for resources that match these ARNs.</p>
    pub resource_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl InternalAccessAnalysisRuleCriteria {
    /// <p>A list of Amazon Web Services account IDs to apply to the internal access analysis rule criteria. Account IDs can only be applied to the analysis rule criteria for organization-level analyzers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.account_ids.is_none()`.
    pub fn account_ids(&self) -> &[::std::string::String] {
        self.account_ids.as_deref().unwrap_or_default()
    }
    /// <p>A list of resource types to apply to the internal access analysis rule criteria. The analyzer will only generate findings for resources of these types. These resource types are currently supported for internal access analyzers:</p>
    /// <ul>
    /// <li>
    /// <p><code>AWS::S3::Bucket</code></p></li>
    /// <li>
    /// <p><code>AWS::RDS::DBSnapshot</code></p></li>
    /// <li>
    /// <p><code>AWS::RDS::DBClusterSnapshot</code></p></li>
    /// <li>
    /// <p><code>AWS::S3Express::DirectoryBucket</code></p></li>
    /// <li>
    /// <p><code>AWS::DynamoDB::Table</code></p></li>
    /// <li>
    /// <p><code>AWS::DynamoDB::Stream</code></p></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_types.is_none()`.
    pub fn resource_types(&self) -> &[crate::types::ResourceType] {
        self.resource_types.as_deref().unwrap_or_default()
    }
    /// <p>A list of resource ARNs to apply to the internal access analysis rule criteria. The analyzer will only generate findings for resources that match these ARNs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_arns.is_none()`.
    pub fn resource_arns(&self) -> &[::std::string::String] {
        self.resource_arns.as_deref().unwrap_or_default()
    }
}
impl InternalAccessAnalysisRuleCriteria {
    /// Creates a new builder-style object to manufacture [`InternalAccessAnalysisRuleCriteria`](crate::types::InternalAccessAnalysisRuleCriteria).
    pub fn builder() -> crate::types::builders::InternalAccessAnalysisRuleCriteriaBuilder {
        crate::types::builders::InternalAccessAnalysisRuleCriteriaBuilder::default()
    }
}

/// A builder for [`InternalAccessAnalysisRuleCriteria`](crate::types::InternalAccessAnalysisRuleCriteria).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InternalAccessAnalysisRuleCriteriaBuilder {
    pub(crate) account_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) resource_types: ::std::option::Option<::std::vec::Vec<crate::types::ResourceType>>,
    pub(crate) resource_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl InternalAccessAnalysisRuleCriteriaBuilder {
    /// Appends an item to `account_ids`.
    ///
    /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
    ///
    /// <p>A list of Amazon Web Services account IDs to apply to the internal access analysis rule criteria. Account IDs can only be applied to the analysis rule criteria for organization-level analyzers.</p>
    pub fn account_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.account_ids.unwrap_or_default();
        v.push(input.into());
        self.account_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Amazon Web Services account IDs to apply to the internal access analysis rule criteria. Account IDs can only be applied to the analysis rule criteria for organization-level analyzers.</p>
    pub fn set_account_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.account_ids = input;
        self
    }
    /// <p>A list of Amazon Web Services account IDs to apply to the internal access analysis rule criteria. Account IDs can only be applied to the analysis rule criteria for organization-level analyzers.</p>
    pub fn get_account_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.account_ids
    }
    /// Appends an item to `resource_types`.
    ///
    /// To override the contents of this collection use [`set_resource_types`](Self::set_resource_types).
    ///
    /// <p>A list of resource types to apply to the internal access analysis rule criteria. The analyzer will only generate findings for resources of these types. These resource types are currently supported for internal access analyzers:</p>
    /// <ul>
    /// <li>
    /// <p><code>AWS::S3::Bucket</code></p></li>
    /// <li>
    /// <p><code>AWS::RDS::DBSnapshot</code></p></li>
    /// <li>
    /// <p><code>AWS::RDS::DBClusterSnapshot</code></p></li>
    /// <li>
    /// <p><code>AWS::S3Express::DirectoryBucket</code></p></li>
    /// <li>
    /// <p><code>AWS::DynamoDB::Table</code></p></li>
    /// <li>
    /// <p><code>AWS::DynamoDB::Stream</code></p></li>
    /// </ul>
    pub fn resource_types(mut self, input: crate::types::ResourceType) -> Self {
        let mut v = self.resource_types.unwrap_or_default();
        v.push(input);
        self.resource_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of resource types to apply to the internal access analysis rule criteria. The analyzer will only generate findings for resources of these types. These resource types are currently supported for internal access analyzers:</p>
    /// <ul>
    /// <li>
    /// <p><code>AWS::S3::Bucket</code></p></li>
    /// <li>
    /// <p><code>AWS::RDS::DBSnapshot</code></p></li>
    /// <li>
    /// <p><code>AWS::RDS::DBClusterSnapshot</code></p></li>
    /// <li>
    /// <p><code>AWS::S3Express::DirectoryBucket</code></p></li>
    /// <li>
    /// <p><code>AWS::DynamoDB::Table</code></p></li>
    /// <li>
    /// <p><code>AWS::DynamoDB::Stream</code></p></li>
    /// </ul>
    pub fn set_resource_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourceType>>) -> Self {
        self.resource_types = input;
        self
    }
    /// <p>A list of resource types to apply to the internal access analysis rule criteria. The analyzer will only generate findings for resources of these types. These resource types are currently supported for internal access analyzers:</p>
    /// <ul>
    /// <li>
    /// <p><code>AWS::S3::Bucket</code></p></li>
    /// <li>
    /// <p><code>AWS::RDS::DBSnapshot</code></p></li>
    /// <li>
    /// <p><code>AWS::RDS::DBClusterSnapshot</code></p></li>
    /// <li>
    /// <p><code>AWS::S3Express::DirectoryBucket</code></p></li>
    /// <li>
    /// <p><code>AWS::DynamoDB::Table</code></p></li>
    /// <li>
    /// <p><code>AWS::DynamoDB::Stream</code></p></li>
    /// </ul>
    pub fn get_resource_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourceType>> {
        &self.resource_types
    }
    /// Appends an item to `resource_arns`.
    ///
    /// To override the contents of this collection use [`set_resource_arns`](Self::set_resource_arns).
    ///
    /// <p>A list of resource ARNs to apply to the internal access analysis rule criteria. The analyzer will only generate findings for resources that match these ARNs.</p>
    pub fn resource_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.resource_arns.unwrap_or_default();
        v.push(input.into());
        self.resource_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of resource ARNs to apply to the internal access analysis rule criteria. The analyzer will only generate findings for resources that match these ARNs.</p>
    pub fn set_resource_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.resource_arns = input;
        self
    }
    /// <p>A list of resource ARNs to apply to the internal access analysis rule criteria. The analyzer will only generate findings for resources that match these ARNs.</p>
    pub fn get_resource_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.resource_arns
    }
    /// Consumes the builder and constructs a [`InternalAccessAnalysisRuleCriteria`](crate::types::InternalAccessAnalysisRuleCriteria).
    pub fn build(self) -> crate::types::InternalAccessAnalysisRuleCriteria {
        crate::types::InternalAccessAnalysisRuleCriteria {
            account_ids: self.account_ids,
            resource_types: self.resource_types,
            resource_arns: self.resource_arns,
        }
    }
}
