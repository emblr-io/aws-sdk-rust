// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The proposed access control configuration for a DynamoDB table or index. You can propose a configuration for a new DynamoDB table or index or an existing DynamoDB table or index that you own by specifying the policy for the DynamoDB table or index. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutResourcePolicy.html">PutResourcePolicy</a>.</p>
/// <ul>
/// <li>
/// <p>If the configuration is for an existing DynamoDB table or index and you do not specify the DynamoDB policy, then the access preview uses the existing DynamoDB policy for the table or index.</p></li>
/// <li>
/// <p>If the access preview is for a new resource and you do not specify the policy, then the access preview assumes a DynamoDB table without a policy.</p></li>
/// <li>
/// <p>To propose deletion of an existing DynamoDB table or index policy, you can specify an empty string for the DynamoDB policy.</p></li>
/// </ul>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DynamodbTableConfiguration {
    /// <p>The proposed resource policy defining who can access or manage the DynamoDB table.</p>
    pub table_policy: ::std::option::Option<::std::string::String>,
}
impl DynamodbTableConfiguration {
    /// <p>The proposed resource policy defining who can access or manage the DynamoDB table.</p>
    pub fn table_policy(&self) -> ::std::option::Option<&str> {
        self.table_policy.as_deref()
    }
}
impl DynamodbTableConfiguration {
    /// Creates a new builder-style object to manufacture [`DynamodbTableConfiguration`](crate::types::DynamodbTableConfiguration).
    pub fn builder() -> crate::types::builders::DynamodbTableConfigurationBuilder {
        crate::types::builders::DynamodbTableConfigurationBuilder::default()
    }
}

/// A builder for [`DynamodbTableConfiguration`](crate::types::DynamodbTableConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DynamodbTableConfigurationBuilder {
    pub(crate) table_policy: ::std::option::Option<::std::string::String>,
}
impl DynamodbTableConfigurationBuilder {
    /// <p>The proposed resource policy defining who can access or manage the DynamoDB table.</p>
    pub fn table_policy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_policy = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The proposed resource policy defining who can access or manage the DynamoDB table.</p>
    pub fn set_table_policy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_policy = input;
        self
    }
    /// <p>The proposed resource policy defining who can access or manage the DynamoDB table.</p>
    pub fn get_table_policy(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_policy
    }
    /// Consumes the builder and constructs a [`DynamodbTableConfiguration`](crate::types::DynamodbTableConfiguration).
    pub fn build(self) -> crate::types::DynamodbTableConfiguration {
        crate::types::DynamodbTableConfiguration {
            table_policy: self.table_policy,
        }
    }
}
