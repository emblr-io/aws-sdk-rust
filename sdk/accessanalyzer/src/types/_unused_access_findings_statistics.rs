// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides aggregate statistics about the findings for the specified unused access analyzer.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UnusedAccessFindingsStatistics {
    /// <p>A list of details about the total number of findings for each type of unused access for the analyzer.</p>
    pub unused_access_type_statistics: ::std::option::Option<::std::vec::Vec<crate::types::UnusedAccessTypeStatistics>>,
    /// <p>A list of one to ten Amazon Web Services accounts that have the most active findings for the unused access analyzer.</p>
    pub top_accounts: ::std::option::Option<::std::vec::Vec<crate::types::FindingAggregationAccountDetails>>,
    /// <p>The total number of active findings for the unused access analyzer.</p>
    pub total_active_findings: ::std::option::Option<i32>,
    /// <p>The total number of archived findings for the unused access analyzer.</p>
    pub total_archived_findings: ::std::option::Option<i32>,
    /// <p>The total number of resolved findings for the unused access analyzer.</p>
    pub total_resolved_findings: ::std::option::Option<i32>,
}
impl UnusedAccessFindingsStatistics {
    /// <p>A list of details about the total number of findings for each type of unused access for the analyzer.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.unused_access_type_statistics.is_none()`.
    pub fn unused_access_type_statistics(&self) -> &[crate::types::UnusedAccessTypeStatistics] {
        self.unused_access_type_statistics.as_deref().unwrap_or_default()
    }
    /// <p>A list of one to ten Amazon Web Services accounts that have the most active findings for the unused access analyzer.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.top_accounts.is_none()`.
    pub fn top_accounts(&self) -> &[crate::types::FindingAggregationAccountDetails] {
        self.top_accounts.as_deref().unwrap_or_default()
    }
    /// <p>The total number of active findings for the unused access analyzer.</p>
    pub fn total_active_findings(&self) -> ::std::option::Option<i32> {
        self.total_active_findings
    }
    /// <p>The total number of archived findings for the unused access analyzer.</p>
    pub fn total_archived_findings(&self) -> ::std::option::Option<i32> {
        self.total_archived_findings
    }
    /// <p>The total number of resolved findings for the unused access analyzer.</p>
    pub fn total_resolved_findings(&self) -> ::std::option::Option<i32> {
        self.total_resolved_findings
    }
}
impl UnusedAccessFindingsStatistics {
    /// Creates a new builder-style object to manufacture [`UnusedAccessFindingsStatistics`](crate::types::UnusedAccessFindingsStatistics).
    pub fn builder() -> crate::types::builders::UnusedAccessFindingsStatisticsBuilder {
        crate::types::builders::UnusedAccessFindingsStatisticsBuilder::default()
    }
}

/// A builder for [`UnusedAccessFindingsStatistics`](crate::types::UnusedAccessFindingsStatistics).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UnusedAccessFindingsStatisticsBuilder {
    pub(crate) unused_access_type_statistics: ::std::option::Option<::std::vec::Vec<crate::types::UnusedAccessTypeStatistics>>,
    pub(crate) top_accounts: ::std::option::Option<::std::vec::Vec<crate::types::FindingAggregationAccountDetails>>,
    pub(crate) total_active_findings: ::std::option::Option<i32>,
    pub(crate) total_archived_findings: ::std::option::Option<i32>,
    pub(crate) total_resolved_findings: ::std::option::Option<i32>,
}
impl UnusedAccessFindingsStatisticsBuilder {
    /// Appends an item to `unused_access_type_statistics`.
    ///
    /// To override the contents of this collection use [`set_unused_access_type_statistics`](Self::set_unused_access_type_statistics).
    ///
    /// <p>A list of details about the total number of findings for each type of unused access for the analyzer.</p>
    pub fn unused_access_type_statistics(mut self, input: crate::types::UnusedAccessTypeStatistics) -> Self {
        let mut v = self.unused_access_type_statistics.unwrap_or_default();
        v.push(input);
        self.unused_access_type_statistics = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of details about the total number of findings for each type of unused access for the analyzer.</p>
    pub fn set_unused_access_type_statistics(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::UnusedAccessTypeStatistics>>,
    ) -> Self {
        self.unused_access_type_statistics = input;
        self
    }
    /// <p>A list of details about the total number of findings for each type of unused access for the analyzer.</p>
    pub fn get_unused_access_type_statistics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UnusedAccessTypeStatistics>> {
        &self.unused_access_type_statistics
    }
    /// Appends an item to `top_accounts`.
    ///
    /// To override the contents of this collection use [`set_top_accounts`](Self::set_top_accounts).
    ///
    /// <p>A list of one to ten Amazon Web Services accounts that have the most active findings for the unused access analyzer.</p>
    pub fn top_accounts(mut self, input: crate::types::FindingAggregationAccountDetails) -> Self {
        let mut v = self.top_accounts.unwrap_or_default();
        v.push(input);
        self.top_accounts = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of one to ten Amazon Web Services accounts that have the most active findings for the unused access analyzer.</p>
    pub fn set_top_accounts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FindingAggregationAccountDetails>>) -> Self {
        self.top_accounts = input;
        self
    }
    /// <p>A list of one to ten Amazon Web Services accounts that have the most active findings for the unused access analyzer.</p>
    pub fn get_top_accounts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FindingAggregationAccountDetails>> {
        &self.top_accounts
    }
    /// <p>The total number of active findings for the unused access analyzer.</p>
    pub fn total_active_findings(mut self, input: i32) -> Self {
        self.total_active_findings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of active findings for the unused access analyzer.</p>
    pub fn set_total_active_findings(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_active_findings = input;
        self
    }
    /// <p>The total number of active findings for the unused access analyzer.</p>
    pub fn get_total_active_findings(&self) -> &::std::option::Option<i32> {
        &self.total_active_findings
    }
    /// <p>The total number of archived findings for the unused access analyzer.</p>
    pub fn total_archived_findings(mut self, input: i32) -> Self {
        self.total_archived_findings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of archived findings for the unused access analyzer.</p>
    pub fn set_total_archived_findings(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_archived_findings = input;
        self
    }
    /// <p>The total number of archived findings for the unused access analyzer.</p>
    pub fn get_total_archived_findings(&self) -> &::std::option::Option<i32> {
        &self.total_archived_findings
    }
    /// <p>The total number of resolved findings for the unused access analyzer.</p>
    pub fn total_resolved_findings(mut self, input: i32) -> Self {
        self.total_resolved_findings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of resolved findings for the unused access analyzer.</p>
    pub fn set_total_resolved_findings(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_resolved_findings = input;
        self
    }
    /// <p>The total number of resolved findings for the unused access analyzer.</p>
    pub fn get_total_resolved_findings(&self) -> &::std::option::Option<i32> {
        &self.total_resolved_findings
    }
    /// Consumes the builder and constructs a [`UnusedAccessFindingsStatistics`](crate::types::UnusedAccessFindingsStatistics).
    pub fn build(self) -> crate::types::UnusedAccessFindingsStatistics {
        crate::types::UnusedAccessFindingsStatistics {
            unused_access_type_statistics: self.unused_access_type_statistics,
            top_accounts: self.top_accounts,
            total_active_findings: self.total_active_findings,
            total_archived_findings: self.total_archived_findings,
            total_resolved_findings: self.total_resolved_findings,
        }
    }
}
