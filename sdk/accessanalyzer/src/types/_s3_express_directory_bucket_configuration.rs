// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Proposed access control configuration for an Amazon S3 directory bucket. You can propose a configuration for a new Amazon S3 directory bucket or an existing Amazon S3 directory bucket that you own by specifying the Amazon S3 bucket policy. If the configuration is for an existing Amazon S3 directory bucket and you do not specify the Amazon S3 bucket policy, the access preview uses the existing policy attached to the directory bucket. If the access preview is for a new resource and you do not specify the Amazon S3 bucket policy, the access preview assumes an directory bucket without a policy. To propose deletion of an existing bucket policy, you can specify an empty string. For more information about Amazon S3 directory bucket policies, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-security-iam-example-bucket-policies.html">Example bucket policies for directory buckets</a> in the Amazon Simple Storage Service User Guide.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3ExpressDirectoryBucketConfiguration {
    /// <p>The proposed bucket policy for the Amazon S3 directory bucket.</p>
    pub bucket_policy: ::std::option::Option<::std::string::String>,
    /// <p>The proposed access points for the Amazon S3 directory bucket.</p>
    pub access_points:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::S3ExpressDirectoryAccessPointConfiguration>>,
}
impl S3ExpressDirectoryBucketConfiguration {
    /// <p>The proposed bucket policy for the Amazon S3 directory bucket.</p>
    pub fn bucket_policy(&self) -> ::std::option::Option<&str> {
        self.bucket_policy.as_deref()
    }
    /// <p>The proposed access points for the Amazon S3 directory bucket.</p>
    pub fn access_points(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::S3ExpressDirectoryAccessPointConfiguration>> {
        self.access_points.as_ref()
    }
}
impl S3ExpressDirectoryBucketConfiguration {
    /// Creates a new builder-style object to manufacture [`S3ExpressDirectoryBucketConfiguration`](crate::types::S3ExpressDirectoryBucketConfiguration).
    pub fn builder() -> crate::types::builders::S3ExpressDirectoryBucketConfigurationBuilder {
        crate::types::builders::S3ExpressDirectoryBucketConfigurationBuilder::default()
    }
}

/// A builder for [`S3ExpressDirectoryBucketConfiguration`](crate::types::S3ExpressDirectoryBucketConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct S3ExpressDirectoryBucketConfigurationBuilder {
    pub(crate) bucket_policy: ::std::option::Option<::std::string::String>,
    pub(crate) access_points:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::S3ExpressDirectoryAccessPointConfiguration>>,
}
impl S3ExpressDirectoryBucketConfigurationBuilder {
    /// <p>The proposed bucket policy for the Amazon S3 directory bucket.</p>
    pub fn bucket_policy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_policy = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The proposed bucket policy for the Amazon S3 directory bucket.</p>
    pub fn set_bucket_policy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_policy = input;
        self
    }
    /// <p>The proposed bucket policy for the Amazon S3 directory bucket.</p>
    pub fn get_bucket_policy(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_policy
    }
    /// Adds a key-value pair to `access_points`.
    ///
    /// To override the contents of this collection use [`set_access_points`](Self::set_access_points).
    ///
    /// <p>The proposed access points for the Amazon S3 directory bucket.</p>
    pub fn access_points(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: crate::types::S3ExpressDirectoryAccessPointConfiguration,
    ) -> Self {
        let mut hash_map = self.access_points.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.access_points = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The proposed access points for the Amazon S3 directory bucket.</p>
    pub fn set_access_points(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::S3ExpressDirectoryAccessPointConfiguration>>,
    ) -> Self {
        self.access_points = input;
        self
    }
    /// <p>The proposed access points for the Amazon S3 directory bucket.</p>
    pub fn get_access_points(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::S3ExpressDirectoryAccessPointConfiguration>> {
        &self.access_points
    }
    /// Consumes the builder and constructs a [`S3ExpressDirectoryBucketConfiguration`](crate::types::S3ExpressDirectoryBucketConfiguration).
    pub fn build(self) -> crate::types::S3ExpressDirectoryBucketConfiguration {
        crate::types::S3ExpressDirectoryBucketConfiguration {
            bucket_policy: self.bucket_policy,
            access_points: self.access_points,
        }
    }
}
