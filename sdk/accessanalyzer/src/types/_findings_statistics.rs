// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the aggregate statistics for an external or unused access analyzer. Only one parameter can be used in a <code>FindingsStatistics</code> object.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum FindingsStatistics {
    /// <p>The aggregate statistics for an external access analyzer.</p>
    ExternalAccessFindingsStatistics(crate::types::ExternalAccessFindingsStatistics),
    /// <p>The aggregate statistics for an internal access analyzer. This includes information about active, archived, and resolved findings related to internal access within your Amazon Web Services organization or account.</p>
    InternalAccessFindingsStatistics(crate::types::InternalAccessFindingsStatistics),
    /// <p>The aggregate statistics for an unused access analyzer.</p>
    UnusedAccessFindingsStatistics(crate::types::UnusedAccessFindingsStatistics),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl FindingsStatistics {
    /// Tries to convert the enum instance into [`ExternalAccessFindingsStatistics`](crate::types::FindingsStatistics::ExternalAccessFindingsStatistics), extracting the inner [`ExternalAccessFindingsStatistics`](crate::types::ExternalAccessFindingsStatistics).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_external_access_findings_statistics(&self) -> ::std::result::Result<&crate::types::ExternalAccessFindingsStatistics, &Self> {
        if let FindingsStatistics::ExternalAccessFindingsStatistics(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ExternalAccessFindingsStatistics`](crate::types::FindingsStatistics::ExternalAccessFindingsStatistics).
    pub fn is_external_access_findings_statistics(&self) -> bool {
        self.as_external_access_findings_statistics().is_ok()
    }
    /// Tries to convert the enum instance into [`InternalAccessFindingsStatistics`](crate::types::FindingsStatistics::InternalAccessFindingsStatistics), extracting the inner [`InternalAccessFindingsStatistics`](crate::types::InternalAccessFindingsStatistics).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_internal_access_findings_statistics(&self) -> ::std::result::Result<&crate::types::InternalAccessFindingsStatistics, &Self> {
        if let FindingsStatistics::InternalAccessFindingsStatistics(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`InternalAccessFindingsStatistics`](crate::types::FindingsStatistics::InternalAccessFindingsStatistics).
    pub fn is_internal_access_findings_statistics(&self) -> bool {
        self.as_internal_access_findings_statistics().is_ok()
    }
    /// Tries to convert the enum instance into [`UnusedAccessFindingsStatistics`](crate::types::FindingsStatistics::UnusedAccessFindingsStatistics), extracting the inner [`UnusedAccessFindingsStatistics`](crate::types::UnusedAccessFindingsStatistics).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_unused_access_findings_statistics(&self) -> ::std::result::Result<&crate::types::UnusedAccessFindingsStatistics, &Self> {
        if let FindingsStatistics::UnusedAccessFindingsStatistics(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`UnusedAccessFindingsStatistics`](crate::types::FindingsStatistics::UnusedAccessFindingsStatistics).
    pub fn is_unused_access_findings_statistics(&self) -> bool {
        self.as_unused_access_findings_statistics().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
