// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an internal access finding. This includes details about the access that was identified within your Amazon Web Services organization or account.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InternalAccessDetails {
    /// <p>The action in the analyzed policy statement that has internal access permission to use.</p>
    pub action: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The condition in the analyzed policy statement that resulted in an internal access finding.</p>
    pub condition: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The principal that has access to a resource within the internal environment.</p>
    pub principal: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The Amazon Web Services account ID that owns the principal identified in the internal access finding.</p>
    pub principal_owner_account: ::std::option::Option<::std::string::String>,
    /// <p>The type of internal access identified in the finding. This indicates how the access is granted within your Amazon Web Services environment.</p>
    pub access_type: ::std::option::Option<crate::types::InternalAccessType>,
    /// <p>The type of principal identified in the internal access finding, such as IAM role or IAM user.</p>
    pub principal_type: ::std::option::Option<crate::types::PrincipalType>,
    /// <p>The sources of the internal access finding. This indicates how the access that generated the finding is granted within your Amazon Web Services environment.</p>
    pub sources: ::std::option::Option<::std::vec::Vec<crate::types::FindingSource>>,
    /// <p>The type of restriction applied to the finding by the resource owner with an Organizations resource control policy (RCP).</p>
    /// <ul>
    /// <li>
    /// <p><code>APPLICABLE</code>: There is an RCP present in the organization but IAM Access Analyzer does not include it in the evaluation of effective permissions. For example, if <code>s3:DeleteObject</code> is blocked by the RCP and the restriction is <code>APPLICABLE</code>, then <code>s3:DeleteObject</code> would still be included in the list of actions for the finding. Only applicable to internal access findings with the account as the zone of trust.</p></li>
    /// <li>
    /// <p><code>FAILED_TO_EVALUATE_RCP</code>: There was an error evaluating the RCP.</p></li>
    /// <li>
    /// <p><code>NOT_APPLICABLE</code>: There was no RCP present in the organization. For internal access findings with the account as the zone of trust, <code>NOT_APPLICABLE</code> could also indicate that there was no RCP applicable to the resource.</p></li>
    /// <li>
    /// <p><code>APPLIED</code>: An RCP is present in the organization and IAM Access Analyzer included it in the evaluation of effective permissions. For example, if <code>s3:DeleteObject</code> is blocked by the RCP and the restriction is <code>APPLIED</code>, then <code>s3:DeleteObject</code> would not be included in the list of actions for the finding. Only applicable to internal access findings with the organization as the zone of trust.</p></li>
    /// </ul>
    pub resource_control_policy_restriction: ::std::option::Option<crate::types::ResourceControlPolicyRestriction>,
    /// <p>The type of restriction applied to the finding by an Organizations service control policy (SCP).</p>
    /// <ul>
    /// <li>
    /// <p><code>APPLICABLE</code>: There is an SCP present in the organization but IAM Access Analyzer does not include it in the evaluation of effective permissions. Only applicable to internal access findings with the account as the zone of trust.</p></li>
    /// <li>
    /// <p><code>FAILED_TO_EVALUATE_SCP</code>: There was an error evaluating the SCP.</p></li>
    /// <li>
    /// <p><code>NOT_APPLICABLE</code>: There was no SCP present in the organization. For internal access findings with the account as the zone of trust, <code>NOT_APPLICABLE</code> could also indicate that there was no SCP applicable to the principal.</p></li>
    /// <li>
    /// <p><code>APPLIED</code>: An SCP is present in the organization and IAM Access Analyzer included it in the evaluation of effective permissions. Only applicable to internal access findings with the organization as the zone of trust.</p></li>
    /// </ul>
    pub service_control_policy_restriction: ::std::option::Option<crate::types::ServiceControlPolicyRestriction>,
}
impl InternalAccessDetails {
    /// <p>The action in the analyzed policy statement that has internal access permission to use.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.action.is_none()`.
    pub fn action(&self) -> &[::std::string::String] {
        self.action.as_deref().unwrap_or_default()
    }
    /// <p>The condition in the analyzed policy statement that resulted in an internal access finding.</p>
    pub fn condition(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.condition.as_ref()
    }
    /// <p>The principal that has access to a resource within the internal environment.</p>
    pub fn principal(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.principal.as_ref()
    }
    /// <p>The Amazon Web Services account ID that owns the principal identified in the internal access finding.</p>
    pub fn principal_owner_account(&self) -> ::std::option::Option<&str> {
        self.principal_owner_account.as_deref()
    }
    /// <p>The type of internal access identified in the finding. This indicates how the access is granted within your Amazon Web Services environment.</p>
    pub fn access_type(&self) -> ::std::option::Option<&crate::types::InternalAccessType> {
        self.access_type.as_ref()
    }
    /// <p>The type of principal identified in the internal access finding, such as IAM role or IAM user.</p>
    pub fn principal_type(&self) -> ::std::option::Option<&crate::types::PrincipalType> {
        self.principal_type.as_ref()
    }
    /// <p>The sources of the internal access finding. This indicates how the access that generated the finding is granted within your Amazon Web Services environment.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sources.is_none()`.
    pub fn sources(&self) -> &[crate::types::FindingSource] {
        self.sources.as_deref().unwrap_or_default()
    }
    /// <p>The type of restriction applied to the finding by the resource owner with an Organizations resource control policy (RCP).</p>
    /// <ul>
    /// <li>
    /// <p><code>APPLICABLE</code>: There is an RCP present in the organization but IAM Access Analyzer does not include it in the evaluation of effective permissions. For example, if <code>s3:DeleteObject</code> is blocked by the RCP and the restriction is <code>APPLICABLE</code>, then <code>s3:DeleteObject</code> would still be included in the list of actions for the finding. Only applicable to internal access findings with the account as the zone of trust.</p></li>
    /// <li>
    /// <p><code>FAILED_TO_EVALUATE_RCP</code>: There was an error evaluating the RCP.</p></li>
    /// <li>
    /// <p><code>NOT_APPLICABLE</code>: There was no RCP present in the organization. For internal access findings with the account as the zone of trust, <code>NOT_APPLICABLE</code> could also indicate that there was no RCP applicable to the resource.</p></li>
    /// <li>
    /// <p><code>APPLIED</code>: An RCP is present in the organization and IAM Access Analyzer included it in the evaluation of effective permissions. For example, if <code>s3:DeleteObject</code> is blocked by the RCP and the restriction is <code>APPLIED</code>, then <code>s3:DeleteObject</code> would not be included in the list of actions for the finding. Only applicable to internal access findings with the organization as the zone of trust.</p></li>
    /// </ul>
    pub fn resource_control_policy_restriction(&self) -> ::std::option::Option<&crate::types::ResourceControlPolicyRestriction> {
        self.resource_control_policy_restriction.as_ref()
    }
    /// <p>The type of restriction applied to the finding by an Organizations service control policy (SCP).</p>
    /// <ul>
    /// <li>
    /// <p><code>APPLICABLE</code>: There is an SCP present in the organization but IAM Access Analyzer does not include it in the evaluation of effective permissions. Only applicable to internal access findings with the account as the zone of trust.</p></li>
    /// <li>
    /// <p><code>FAILED_TO_EVALUATE_SCP</code>: There was an error evaluating the SCP.</p></li>
    /// <li>
    /// <p><code>NOT_APPLICABLE</code>: There was no SCP present in the organization. For internal access findings with the account as the zone of trust, <code>NOT_APPLICABLE</code> could also indicate that there was no SCP applicable to the principal.</p></li>
    /// <li>
    /// <p><code>APPLIED</code>: An SCP is present in the organization and IAM Access Analyzer included it in the evaluation of effective permissions. Only applicable to internal access findings with the organization as the zone of trust.</p></li>
    /// </ul>
    pub fn service_control_policy_restriction(&self) -> ::std::option::Option<&crate::types::ServiceControlPolicyRestriction> {
        self.service_control_policy_restriction.as_ref()
    }
}
impl InternalAccessDetails {
    /// Creates a new builder-style object to manufacture [`InternalAccessDetails`](crate::types::InternalAccessDetails).
    pub fn builder() -> crate::types::builders::InternalAccessDetailsBuilder {
        crate::types::builders::InternalAccessDetailsBuilder::default()
    }
}

/// A builder for [`InternalAccessDetails`](crate::types::InternalAccessDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InternalAccessDetailsBuilder {
    pub(crate) action: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) condition: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) principal: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) principal_owner_account: ::std::option::Option<::std::string::String>,
    pub(crate) access_type: ::std::option::Option<crate::types::InternalAccessType>,
    pub(crate) principal_type: ::std::option::Option<crate::types::PrincipalType>,
    pub(crate) sources: ::std::option::Option<::std::vec::Vec<crate::types::FindingSource>>,
    pub(crate) resource_control_policy_restriction: ::std::option::Option<crate::types::ResourceControlPolicyRestriction>,
    pub(crate) service_control_policy_restriction: ::std::option::Option<crate::types::ServiceControlPolicyRestriction>,
}
impl InternalAccessDetailsBuilder {
    /// Appends an item to `action`.
    ///
    /// To override the contents of this collection use [`set_action`](Self::set_action).
    ///
    /// <p>The action in the analyzed policy statement that has internal access permission to use.</p>
    pub fn action(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.action.unwrap_or_default();
        v.push(input.into());
        self.action = ::std::option::Option::Some(v);
        self
    }
    /// <p>The action in the analyzed policy statement that has internal access permission to use.</p>
    pub fn set_action(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action in the analyzed policy statement that has internal access permission to use.</p>
    pub fn get_action(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.action
    }
    /// Adds a key-value pair to `condition`.
    ///
    /// To override the contents of this collection use [`set_condition`](Self::set_condition).
    ///
    /// <p>The condition in the analyzed policy statement that resulted in an internal access finding.</p>
    pub fn condition(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.condition.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.condition = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The condition in the analyzed policy statement that resulted in an internal access finding.</p>
    pub fn set_condition(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.condition = input;
        self
    }
    /// <p>The condition in the analyzed policy statement that resulted in an internal access finding.</p>
    pub fn get_condition(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.condition
    }
    /// Adds a key-value pair to `principal`.
    ///
    /// To override the contents of this collection use [`set_principal`](Self::set_principal).
    ///
    /// <p>The principal that has access to a resource within the internal environment.</p>
    pub fn principal(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.principal.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.principal = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The principal that has access to a resource within the internal environment.</p>
    pub fn set_principal(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.principal = input;
        self
    }
    /// <p>The principal that has access to a resource within the internal environment.</p>
    pub fn get_principal(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.principal
    }
    /// <p>The Amazon Web Services account ID that owns the principal identified in the internal access finding.</p>
    pub fn principal_owner_account(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal_owner_account = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID that owns the principal identified in the internal access finding.</p>
    pub fn set_principal_owner_account(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal_owner_account = input;
        self
    }
    /// <p>The Amazon Web Services account ID that owns the principal identified in the internal access finding.</p>
    pub fn get_principal_owner_account(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal_owner_account
    }
    /// <p>The type of internal access identified in the finding. This indicates how the access is granted within your Amazon Web Services environment.</p>
    pub fn access_type(mut self, input: crate::types::InternalAccessType) -> Self {
        self.access_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of internal access identified in the finding. This indicates how the access is granted within your Amazon Web Services environment.</p>
    pub fn set_access_type(mut self, input: ::std::option::Option<crate::types::InternalAccessType>) -> Self {
        self.access_type = input;
        self
    }
    /// <p>The type of internal access identified in the finding. This indicates how the access is granted within your Amazon Web Services environment.</p>
    pub fn get_access_type(&self) -> &::std::option::Option<crate::types::InternalAccessType> {
        &self.access_type
    }
    /// <p>The type of principal identified in the internal access finding, such as IAM role or IAM user.</p>
    pub fn principal_type(mut self, input: crate::types::PrincipalType) -> Self {
        self.principal_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of principal identified in the internal access finding, such as IAM role or IAM user.</p>
    pub fn set_principal_type(mut self, input: ::std::option::Option<crate::types::PrincipalType>) -> Self {
        self.principal_type = input;
        self
    }
    /// <p>The type of principal identified in the internal access finding, such as IAM role or IAM user.</p>
    pub fn get_principal_type(&self) -> &::std::option::Option<crate::types::PrincipalType> {
        &self.principal_type
    }
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>The sources of the internal access finding. This indicates how the access that generated the finding is granted within your Amazon Web Services environment.</p>
    pub fn sources(mut self, input: crate::types::FindingSource) -> Self {
        let mut v = self.sources.unwrap_or_default();
        v.push(input);
        self.sources = ::std::option::Option::Some(v);
        self
    }
    /// <p>The sources of the internal access finding. This indicates how the access that generated the finding is granted within your Amazon Web Services environment.</p>
    pub fn set_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FindingSource>>) -> Self {
        self.sources = input;
        self
    }
    /// <p>The sources of the internal access finding. This indicates how the access that generated the finding is granted within your Amazon Web Services environment.</p>
    pub fn get_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FindingSource>> {
        &self.sources
    }
    /// <p>The type of restriction applied to the finding by the resource owner with an Organizations resource control policy (RCP).</p>
    /// <ul>
    /// <li>
    /// <p><code>APPLICABLE</code>: There is an RCP present in the organization but IAM Access Analyzer does not include it in the evaluation of effective permissions. For example, if <code>s3:DeleteObject</code> is blocked by the RCP and the restriction is <code>APPLICABLE</code>, then <code>s3:DeleteObject</code> would still be included in the list of actions for the finding. Only applicable to internal access findings with the account as the zone of trust.</p></li>
    /// <li>
    /// <p><code>FAILED_TO_EVALUATE_RCP</code>: There was an error evaluating the RCP.</p></li>
    /// <li>
    /// <p><code>NOT_APPLICABLE</code>: There was no RCP present in the organization. For internal access findings with the account as the zone of trust, <code>NOT_APPLICABLE</code> could also indicate that there was no RCP applicable to the resource.</p></li>
    /// <li>
    /// <p><code>APPLIED</code>: An RCP is present in the organization and IAM Access Analyzer included it in the evaluation of effective permissions. For example, if <code>s3:DeleteObject</code> is blocked by the RCP and the restriction is <code>APPLIED</code>, then <code>s3:DeleteObject</code> would not be included in the list of actions for the finding. Only applicable to internal access findings with the organization as the zone of trust.</p></li>
    /// </ul>
    pub fn resource_control_policy_restriction(mut self, input: crate::types::ResourceControlPolicyRestriction) -> Self {
        self.resource_control_policy_restriction = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of restriction applied to the finding by the resource owner with an Organizations resource control policy (RCP).</p>
    /// <ul>
    /// <li>
    /// <p><code>APPLICABLE</code>: There is an RCP present in the organization but IAM Access Analyzer does not include it in the evaluation of effective permissions. For example, if <code>s3:DeleteObject</code> is blocked by the RCP and the restriction is <code>APPLICABLE</code>, then <code>s3:DeleteObject</code> would still be included in the list of actions for the finding. Only applicable to internal access findings with the account as the zone of trust.</p></li>
    /// <li>
    /// <p><code>FAILED_TO_EVALUATE_RCP</code>: There was an error evaluating the RCP.</p></li>
    /// <li>
    /// <p><code>NOT_APPLICABLE</code>: There was no RCP present in the organization. For internal access findings with the account as the zone of trust, <code>NOT_APPLICABLE</code> could also indicate that there was no RCP applicable to the resource.</p></li>
    /// <li>
    /// <p><code>APPLIED</code>: An RCP is present in the organization and IAM Access Analyzer included it in the evaluation of effective permissions. For example, if <code>s3:DeleteObject</code> is blocked by the RCP and the restriction is <code>APPLIED</code>, then <code>s3:DeleteObject</code> would not be included in the list of actions for the finding. Only applicable to internal access findings with the organization as the zone of trust.</p></li>
    /// </ul>
    pub fn set_resource_control_policy_restriction(mut self, input: ::std::option::Option<crate::types::ResourceControlPolicyRestriction>) -> Self {
        self.resource_control_policy_restriction = input;
        self
    }
    /// <p>The type of restriction applied to the finding by the resource owner with an Organizations resource control policy (RCP).</p>
    /// <ul>
    /// <li>
    /// <p><code>APPLICABLE</code>: There is an RCP present in the organization but IAM Access Analyzer does not include it in the evaluation of effective permissions. For example, if <code>s3:DeleteObject</code> is blocked by the RCP and the restriction is <code>APPLICABLE</code>, then <code>s3:DeleteObject</code> would still be included in the list of actions for the finding. Only applicable to internal access findings with the account as the zone of trust.</p></li>
    /// <li>
    /// <p><code>FAILED_TO_EVALUATE_RCP</code>: There was an error evaluating the RCP.</p></li>
    /// <li>
    /// <p><code>NOT_APPLICABLE</code>: There was no RCP present in the organization. For internal access findings with the account as the zone of trust, <code>NOT_APPLICABLE</code> could also indicate that there was no RCP applicable to the resource.</p></li>
    /// <li>
    /// <p><code>APPLIED</code>: An RCP is present in the organization and IAM Access Analyzer included it in the evaluation of effective permissions. For example, if <code>s3:DeleteObject</code> is blocked by the RCP and the restriction is <code>APPLIED</code>, then <code>s3:DeleteObject</code> would not be included in the list of actions for the finding. Only applicable to internal access findings with the organization as the zone of trust.</p></li>
    /// </ul>
    pub fn get_resource_control_policy_restriction(&self) -> &::std::option::Option<crate::types::ResourceControlPolicyRestriction> {
        &self.resource_control_policy_restriction
    }
    /// <p>The type of restriction applied to the finding by an Organizations service control policy (SCP).</p>
    /// <ul>
    /// <li>
    /// <p><code>APPLICABLE</code>: There is an SCP present in the organization but IAM Access Analyzer does not include it in the evaluation of effective permissions. Only applicable to internal access findings with the account as the zone of trust.</p></li>
    /// <li>
    /// <p><code>FAILED_TO_EVALUATE_SCP</code>: There was an error evaluating the SCP.</p></li>
    /// <li>
    /// <p><code>NOT_APPLICABLE</code>: There was no SCP present in the organization. For internal access findings with the account as the zone of trust, <code>NOT_APPLICABLE</code> could also indicate that there was no SCP applicable to the principal.</p></li>
    /// <li>
    /// <p><code>APPLIED</code>: An SCP is present in the organization and IAM Access Analyzer included it in the evaluation of effective permissions. Only applicable to internal access findings with the organization as the zone of trust.</p></li>
    /// </ul>
    pub fn service_control_policy_restriction(mut self, input: crate::types::ServiceControlPolicyRestriction) -> Self {
        self.service_control_policy_restriction = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of restriction applied to the finding by an Organizations service control policy (SCP).</p>
    /// <ul>
    /// <li>
    /// <p><code>APPLICABLE</code>: There is an SCP present in the organization but IAM Access Analyzer does not include it in the evaluation of effective permissions. Only applicable to internal access findings with the account as the zone of trust.</p></li>
    /// <li>
    /// <p><code>FAILED_TO_EVALUATE_SCP</code>: There was an error evaluating the SCP.</p></li>
    /// <li>
    /// <p><code>NOT_APPLICABLE</code>: There was no SCP present in the organization. For internal access findings with the account as the zone of trust, <code>NOT_APPLICABLE</code> could also indicate that there was no SCP applicable to the principal.</p></li>
    /// <li>
    /// <p><code>APPLIED</code>: An SCP is present in the organization and IAM Access Analyzer included it in the evaluation of effective permissions. Only applicable to internal access findings with the organization as the zone of trust.</p></li>
    /// </ul>
    pub fn set_service_control_policy_restriction(mut self, input: ::std::option::Option<crate::types::ServiceControlPolicyRestriction>) -> Self {
        self.service_control_policy_restriction = input;
        self
    }
    /// <p>The type of restriction applied to the finding by an Organizations service control policy (SCP).</p>
    /// <ul>
    /// <li>
    /// <p><code>APPLICABLE</code>: There is an SCP present in the organization but IAM Access Analyzer does not include it in the evaluation of effective permissions. Only applicable to internal access findings with the account as the zone of trust.</p></li>
    /// <li>
    /// <p><code>FAILED_TO_EVALUATE_SCP</code>: There was an error evaluating the SCP.</p></li>
    /// <li>
    /// <p><code>NOT_APPLICABLE</code>: There was no SCP present in the organization. For internal access findings with the account as the zone of trust, <code>NOT_APPLICABLE</code> could also indicate that there was no SCP applicable to the principal.</p></li>
    /// <li>
    /// <p><code>APPLIED</code>: An SCP is present in the organization and IAM Access Analyzer included it in the evaluation of effective permissions. Only applicable to internal access findings with the organization as the zone of trust.</p></li>
    /// </ul>
    pub fn get_service_control_policy_restriction(&self) -> &::std::option::Option<crate::types::ServiceControlPolicyRestriction> {
        &self.service_control_policy_restriction
    }
    /// Consumes the builder and constructs a [`InternalAccessDetails`](crate::types::InternalAccessDetails).
    pub fn build(self) -> crate::types::InternalAccessDetails {
        crate::types::InternalAccessDetails {
            action: self.action,
            condition: self.condition,
            principal: self.principal,
            principal_owner_account: self.principal_owner_account,
            access_type: self.access_type,
            principal_type: self.principal_type,
            sources: self.sources,
            resource_control_policy_restriction: self.resource_control_policy_restriction,
            service_control_policy_restriction: self.service_control_policy_restriction,
        }
    }
}
