// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about analysis rules for the internal access analyzer. Analysis rules determine which entities will generate findings based on the criteria you define when you create the rule.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InternalAccessAnalysisRule {
    /// <p>A list of rules for the internal access analyzer containing criteria to include in analysis. Only resources that meet the rule criteria will generate findings.</p>
    pub inclusions: ::std::option::Option<::std::vec::Vec<crate::types::InternalAccessAnalysisRuleCriteria>>,
}
impl InternalAccessAnalysisRule {
    /// <p>A list of rules for the internal access analyzer containing criteria to include in analysis. Only resources that meet the rule criteria will generate findings.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.inclusions.is_none()`.
    pub fn inclusions(&self) -> &[crate::types::InternalAccessAnalysisRuleCriteria] {
        self.inclusions.as_deref().unwrap_or_default()
    }
}
impl InternalAccessAnalysisRule {
    /// Creates a new builder-style object to manufacture [`InternalAccessAnalysisRule`](crate::types::InternalAccessAnalysisRule).
    pub fn builder() -> crate::types::builders::InternalAccessAnalysisRuleBuilder {
        crate::types::builders::InternalAccessAnalysisRuleBuilder::default()
    }
}

/// A builder for [`InternalAccessAnalysisRule`](crate::types::InternalAccessAnalysisRule).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InternalAccessAnalysisRuleBuilder {
    pub(crate) inclusions: ::std::option::Option<::std::vec::Vec<crate::types::InternalAccessAnalysisRuleCriteria>>,
}
impl InternalAccessAnalysisRuleBuilder {
    /// Appends an item to `inclusions`.
    ///
    /// To override the contents of this collection use [`set_inclusions`](Self::set_inclusions).
    ///
    /// <p>A list of rules for the internal access analyzer containing criteria to include in analysis. Only resources that meet the rule criteria will generate findings.</p>
    pub fn inclusions(mut self, input: crate::types::InternalAccessAnalysisRuleCriteria) -> Self {
        let mut v = self.inclusions.unwrap_or_default();
        v.push(input);
        self.inclusions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of rules for the internal access analyzer containing criteria to include in analysis. Only resources that meet the rule criteria will generate findings.</p>
    pub fn set_inclusions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InternalAccessAnalysisRuleCriteria>>) -> Self {
        self.inclusions = input;
        self
    }
    /// <p>A list of rules for the internal access analyzer containing criteria to include in analysis. Only resources that meet the rule criteria will generate findings.</p>
    pub fn get_inclusions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InternalAccessAnalysisRuleCriteria>> {
        &self.inclusions
    }
    /// Consumes the builder and constructs a [`InternalAccessAnalysisRule`](crate::types::InternalAccessAnalysisRule).
    pub fn build(self) -> crate::types::InternalAccessAnalysisRule {
        crate::types::InternalAccessAnalysisRule { inclusions: self.inclusions }
    }
}
