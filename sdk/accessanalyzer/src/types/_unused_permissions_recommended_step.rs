// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the action to take for a policy in an unused permissions finding.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UnusedPermissionsRecommendedStep {
    /// <p>The time at which the existing policy for the unused permissions finding was last updated.</p>
    pub policy_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A recommendation of whether to create or detach a policy for an unused permissions finding.</p>
    pub recommended_action: crate::types::RecommendedRemediationAction,
    /// <p>If the recommended action for the unused permissions finding is to replace the existing policy, the contents of the recommended policy to replace the policy specified in the <code>existingPolicyId</code> field.</p>
    pub recommended_policy: ::std::option::Option<::std::string::String>,
    /// <p>If the recommended action for the unused permissions finding is to detach a policy, the ID of an existing policy to be detached.</p>
    pub existing_policy_id: ::std::option::Option<::std::string::String>,
}
impl UnusedPermissionsRecommendedStep {
    /// <p>The time at which the existing policy for the unused permissions finding was last updated.</p>
    pub fn policy_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.policy_updated_at.as_ref()
    }
    /// <p>A recommendation of whether to create or detach a policy for an unused permissions finding.</p>
    pub fn recommended_action(&self) -> &crate::types::RecommendedRemediationAction {
        &self.recommended_action
    }
    /// <p>If the recommended action for the unused permissions finding is to replace the existing policy, the contents of the recommended policy to replace the policy specified in the <code>existingPolicyId</code> field.</p>
    pub fn recommended_policy(&self) -> ::std::option::Option<&str> {
        self.recommended_policy.as_deref()
    }
    /// <p>If the recommended action for the unused permissions finding is to detach a policy, the ID of an existing policy to be detached.</p>
    pub fn existing_policy_id(&self) -> ::std::option::Option<&str> {
        self.existing_policy_id.as_deref()
    }
}
impl UnusedPermissionsRecommendedStep {
    /// Creates a new builder-style object to manufacture [`UnusedPermissionsRecommendedStep`](crate::types::UnusedPermissionsRecommendedStep).
    pub fn builder() -> crate::types::builders::UnusedPermissionsRecommendedStepBuilder {
        crate::types::builders::UnusedPermissionsRecommendedStepBuilder::default()
    }
}

/// A builder for [`UnusedPermissionsRecommendedStep`](crate::types::UnusedPermissionsRecommendedStep).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UnusedPermissionsRecommendedStepBuilder {
    pub(crate) policy_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) recommended_action: ::std::option::Option<crate::types::RecommendedRemediationAction>,
    pub(crate) recommended_policy: ::std::option::Option<::std::string::String>,
    pub(crate) existing_policy_id: ::std::option::Option<::std::string::String>,
}
impl UnusedPermissionsRecommendedStepBuilder {
    /// <p>The time at which the existing policy for the unused permissions finding was last updated.</p>
    pub fn policy_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.policy_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the existing policy for the unused permissions finding was last updated.</p>
    pub fn set_policy_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.policy_updated_at = input;
        self
    }
    /// <p>The time at which the existing policy for the unused permissions finding was last updated.</p>
    pub fn get_policy_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.policy_updated_at
    }
    /// <p>A recommendation of whether to create or detach a policy for an unused permissions finding.</p>
    /// This field is required.
    pub fn recommended_action(mut self, input: crate::types::RecommendedRemediationAction) -> Self {
        self.recommended_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>A recommendation of whether to create or detach a policy for an unused permissions finding.</p>
    pub fn set_recommended_action(mut self, input: ::std::option::Option<crate::types::RecommendedRemediationAction>) -> Self {
        self.recommended_action = input;
        self
    }
    /// <p>A recommendation of whether to create or detach a policy for an unused permissions finding.</p>
    pub fn get_recommended_action(&self) -> &::std::option::Option<crate::types::RecommendedRemediationAction> {
        &self.recommended_action
    }
    /// <p>If the recommended action for the unused permissions finding is to replace the existing policy, the contents of the recommended policy to replace the policy specified in the <code>existingPolicyId</code> field.</p>
    pub fn recommended_policy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recommended_policy = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the recommended action for the unused permissions finding is to replace the existing policy, the contents of the recommended policy to replace the policy specified in the <code>existingPolicyId</code> field.</p>
    pub fn set_recommended_policy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recommended_policy = input;
        self
    }
    /// <p>If the recommended action for the unused permissions finding is to replace the existing policy, the contents of the recommended policy to replace the policy specified in the <code>existingPolicyId</code> field.</p>
    pub fn get_recommended_policy(&self) -> &::std::option::Option<::std::string::String> {
        &self.recommended_policy
    }
    /// <p>If the recommended action for the unused permissions finding is to detach a policy, the ID of an existing policy to be detached.</p>
    pub fn existing_policy_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.existing_policy_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the recommended action for the unused permissions finding is to detach a policy, the ID of an existing policy to be detached.</p>
    pub fn set_existing_policy_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.existing_policy_id = input;
        self
    }
    /// <p>If the recommended action for the unused permissions finding is to detach a policy, the ID of an existing policy to be detached.</p>
    pub fn get_existing_policy_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.existing_policy_id
    }
    /// Consumes the builder and constructs a [`UnusedPermissionsRecommendedStep`](crate::types::UnusedPermissionsRecommendedStep).
    /// This method will fail if any of the following fields are not set:
    /// - [`recommended_action`](crate::types::builders::UnusedPermissionsRecommendedStepBuilder::recommended_action)
    pub fn build(self) -> ::std::result::Result<crate::types::UnusedPermissionsRecommendedStep, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UnusedPermissionsRecommendedStep {
            policy_updated_at: self.policy_updated_at,
            recommended_action: self.recommended_action.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "recommended_action",
                    "recommended_action was not specified but it is required when building UnusedPermissionsRecommendedStep",
                )
            })?,
            recommended_policy: self.recommended_policy,
            existing_policy_id: self.existing_policy_id,
        })
    }
}
