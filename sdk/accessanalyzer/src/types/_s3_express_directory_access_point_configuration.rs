// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Proposed configuration for an access point attached to an Amazon S3 directory bucket. You can propose up to 10 access points per bucket. If the proposed access point configuration is for an existing Amazon S3 directory bucket, the access preview uses the proposed access point configuration in place of the existing access points. To propose an access point without a policy, you can provide an empty string as the access point policy. For more information about access points for Amazon S3 directory buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points-directory-buckets.html">Managing access to directory buckets with access points</a> in the Amazon Simple Storage Service User Guide.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3ExpressDirectoryAccessPointConfiguration {
    /// <p>The proposed access point policy for an Amazon S3 directory bucket access point.</p>
    pub access_point_policy: ::std::option::Option<::std::string::String>,
    /// <p>The proposed <code>InternetConfiguration</code> or <code>VpcConfiguration</code> to apply to the Amazon S3 access point. You can make the access point accessible from the internet, or you can specify that all requests made through that access point must originate from a specific virtual private cloud (VPC). You can specify only one type of network configuration. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/creating-access-points.html">Creating access points</a>.</p>
    pub network_origin: ::std::option::Option<crate::types::NetworkOriginConfiguration>,
}
impl S3ExpressDirectoryAccessPointConfiguration {
    /// <p>The proposed access point policy for an Amazon S3 directory bucket access point.</p>
    pub fn access_point_policy(&self) -> ::std::option::Option<&str> {
        self.access_point_policy.as_deref()
    }
    /// <p>The proposed <code>InternetConfiguration</code> or <code>VpcConfiguration</code> to apply to the Amazon S3 access point. You can make the access point accessible from the internet, or you can specify that all requests made through that access point must originate from a specific virtual private cloud (VPC). You can specify only one type of network configuration. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/creating-access-points.html">Creating access points</a>.</p>
    pub fn network_origin(&self) -> ::std::option::Option<&crate::types::NetworkOriginConfiguration> {
        self.network_origin.as_ref()
    }
}
impl S3ExpressDirectoryAccessPointConfiguration {
    /// Creates a new builder-style object to manufacture [`S3ExpressDirectoryAccessPointConfiguration`](crate::types::S3ExpressDirectoryAccessPointConfiguration).
    pub fn builder() -> crate::types::builders::S3ExpressDirectoryAccessPointConfigurationBuilder {
        crate::types::builders::S3ExpressDirectoryAccessPointConfigurationBuilder::default()
    }
}

/// A builder for [`S3ExpressDirectoryAccessPointConfiguration`](crate::types::S3ExpressDirectoryAccessPointConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct S3ExpressDirectoryAccessPointConfigurationBuilder {
    pub(crate) access_point_policy: ::std::option::Option<::std::string::String>,
    pub(crate) network_origin: ::std::option::Option<crate::types::NetworkOriginConfiguration>,
}
impl S3ExpressDirectoryAccessPointConfigurationBuilder {
    /// <p>The proposed access point policy for an Amazon S3 directory bucket access point.</p>
    pub fn access_point_policy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_point_policy = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The proposed access point policy for an Amazon S3 directory bucket access point.</p>
    pub fn set_access_point_policy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_point_policy = input;
        self
    }
    /// <p>The proposed access point policy for an Amazon S3 directory bucket access point.</p>
    pub fn get_access_point_policy(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_point_policy
    }
    /// <p>The proposed <code>InternetConfiguration</code> or <code>VpcConfiguration</code> to apply to the Amazon S3 access point. You can make the access point accessible from the internet, or you can specify that all requests made through that access point must originate from a specific virtual private cloud (VPC). You can specify only one type of network configuration. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/creating-access-points.html">Creating access points</a>.</p>
    pub fn network_origin(mut self, input: crate::types::NetworkOriginConfiguration) -> Self {
        self.network_origin = ::std::option::Option::Some(input);
        self
    }
    /// <p>The proposed <code>InternetConfiguration</code> or <code>VpcConfiguration</code> to apply to the Amazon S3 access point. You can make the access point accessible from the internet, or you can specify that all requests made through that access point must originate from a specific virtual private cloud (VPC). You can specify only one type of network configuration. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/creating-access-points.html">Creating access points</a>.</p>
    pub fn set_network_origin(mut self, input: ::std::option::Option<crate::types::NetworkOriginConfiguration>) -> Self {
        self.network_origin = input;
        self
    }
    /// <p>The proposed <code>InternetConfiguration</code> or <code>VpcConfiguration</code> to apply to the Amazon S3 access point. You can make the access point accessible from the internet, or you can specify that all requests made through that access point must originate from a specific virtual private cloud (VPC). You can specify only one type of network configuration. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/creating-access-points.html">Creating access points</a>.</p>
    pub fn get_network_origin(&self) -> &::std::option::Option<crate::types::NetworkOriginConfiguration> {
        &self.network_origin
    }
    /// Consumes the builder and constructs a [`S3ExpressDirectoryAccessPointConfiguration`](crate::types::S3ExpressDirectoryAccessPointConfiguration).
    pub fn build(self) -> crate::types::S3ExpressDirectoryAccessPointConfiguration {
        crate::types::S3ExpressDirectoryAccessPointConfiguration {
            access_point_policy: self.access_point_policy,
            network_origin: self.network_origin,
        }
    }
}
