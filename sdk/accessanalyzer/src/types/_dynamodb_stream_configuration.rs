// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The proposed access control configuration for a DynamoDB stream. You can propose a configuration for a new DynamoDB stream or an existing DynamoDB stream that you own by specifying the policy for the DynamoDB stream. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutResourcePolicy.html">PutResourcePolicy</a>.</p>
/// <ul>
/// <li>
/// <p>If the configuration is for an existing DynamoDB stream and you do not specify the DynamoDB policy, then the access preview uses the existing DynamoDB policy for the stream.</p></li>
/// <li>
/// <p>If the access preview is for a new resource and you do not specify the policy, then the access preview assumes a DynamoDB stream without a policy.</p></li>
/// <li>
/// <p>To propose deletion of an existing DynamoDB stream policy, you can specify an empty string for the DynamoDB policy.</p></li>
/// </ul>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DynamodbStreamConfiguration {
    /// <p>The proposed resource policy defining who can access or manage the DynamoDB stream.</p>
    pub stream_policy: ::std::option::Option<::std::string::String>,
}
impl DynamodbStreamConfiguration {
    /// <p>The proposed resource policy defining who can access or manage the DynamoDB stream.</p>
    pub fn stream_policy(&self) -> ::std::option::Option<&str> {
        self.stream_policy.as_deref()
    }
}
impl DynamodbStreamConfiguration {
    /// Creates a new builder-style object to manufacture [`DynamodbStreamConfiguration`](crate::types::DynamodbStreamConfiguration).
    pub fn builder() -> crate::types::builders::DynamodbStreamConfigurationBuilder {
        crate::types::builders::DynamodbStreamConfigurationBuilder::default()
    }
}

/// A builder for [`DynamodbStreamConfiguration`](crate::types::DynamodbStreamConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DynamodbStreamConfigurationBuilder {
    pub(crate) stream_policy: ::std::option::Option<::std::string::String>,
}
impl DynamodbStreamConfigurationBuilder {
    /// <p>The proposed resource policy defining who can access or manage the DynamoDB stream.</p>
    pub fn stream_policy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stream_policy = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The proposed resource policy defining who can access or manage the DynamoDB stream.</p>
    pub fn set_stream_policy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stream_policy = input;
        self
    }
    /// <p>The proposed resource policy defining who can access or manage the DynamoDB stream.</p>
    pub fn get_stream_policy(&self) -> &::std::option::Option<::std::string::String> {
        &self.stream_policy
    }
    /// Consumes the builder and constructs a [`DynamodbStreamConfiguration`](crate::types::DynamodbStreamConfiguration).
    pub fn build(self) -> crate::types::DynamodbStreamConfiguration {
        crate::types::DynamodbStreamConfiguration {
            stream_policy: self.stream_policy,
        }
    }
}
