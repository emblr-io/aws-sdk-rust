// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the findings for an Amazon Web Services account in an organization unused access analyzer.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FindingAggregationAccountDetails {
    /// <p>The ID of the Amazon Web Services account for which unused access finding details are provided.</p>
    pub account: ::std::option::Option<::std::string::String>,
    /// <p>The number of active unused access findings for the specified Amazon Web Services account.</p>
    pub number_of_active_findings: ::std::option::Option<i32>,
    /// <p>Provides the number of active findings for each type of unused access for the specified Amazon Web Services account.</p>
    pub details: ::std::option::Option<::std::collections::HashMap<::std::string::String, i32>>,
}
impl FindingAggregationAccountDetails {
    /// <p>The ID of the Amazon Web Services account for which unused access finding details are provided.</p>
    pub fn account(&self) -> ::std::option::Option<&str> {
        self.account.as_deref()
    }
    /// <p>The number of active unused access findings for the specified Amazon Web Services account.</p>
    pub fn number_of_active_findings(&self) -> ::std::option::Option<i32> {
        self.number_of_active_findings
    }
    /// <p>Provides the number of active findings for each type of unused access for the specified Amazon Web Services account.</p>
    pub fn details(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, i32>> {
        self.details.as_ref()
    }
}
impl FindingAggregationAccountDetails {
    /// Creates a new builder-style object to manufacture [`FindingAggregationAccountDetails`](crate::types::FindingAggregationAccountDetails).
    pub fn builder() -> crate::types::builders::FindingAggregationAccountDetailsBuilder {
        crate::types::builders::FindingAggregationAccountDetailsBuilder::default()
    }
}

/// A builder for [`FindingAggregationAccountDetails`](crate::types::FindingAggregationAccountDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FindingAggregationAccountDetailsBuilder {
    pub(crate) account: ::std::option::Option<::std::string::String>,
    pub(crate) number_of_active_findings: ::std::option::Option<i32>,
    pub(crate) details: ::std::option::Option<::std::collections::HashMap<::std::string::String, i32>>,
}
impl FindingAggregationAccountDetailsBuilder {
    /// <p>The ID of the Amazon Web Services account for which unused access finding details are provided.</p>
    pub fn account(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account for which unused access finding details are provided.</p>
    pub fn set_account(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account for which unused access finding details are provided.</p>
    pub fn get_account(&self) -> &::std::option::Option<::std::string::String> {
        &self.account
    }
    /// <p>The number of active unused access findings for the specified Amazon Web Services account.</p>
    pub fn number_of_active_findings(mut self, input: i32) -> Self {
        self.number_of_active_findings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of active unused access findings for the specified Amazon Web Services account.</p>
    pub fn set_number_of_active_findings(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_active_findings = input;
        self
    }
    /// <p>The number of active unused access findings for the specified Amazon Web Services account.</p>
    pub fn get_number_of_active_findings(&self) -> &::std::option::Option<i32> {
        &self.number_of_active_findings
    }
    /// Adds a key-value pair to `details`.
    ///
    /// To override the contents of this collection use [`set_details`](Self::set_details).
    ///
    /// <p>Provides the number of active findings for each type of unused access for the specified Amazon Web Services account.</p>
    pub fn details(mut self, k: impl ::std::convert::Into<::std::string::String>, v: i32) -> Self {
        let mut hash_map = self.details.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.details = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Provides the number of active findings for each type of unused access for the specified Amazon Web Services account.</p>
    pub fn set_details(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, i32>>) -> Self {
        self.details = input;
        self
    }
    /// <p>Provides the number of active findings for each type of unused access for the specified Amazon Web Services account.</p>
    pub fn get_details(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, i32>> {
        &self.details
    }
    /// Consumes the builder and constructs a [`FindingAggregationAccountDetails`](crate::types::FindingAggregationAccountDetails).
    pub fn build(self) -> crate::types::FindingAggregationAccountDetails {
        crate::types::FindingAggregationAccountDetails {
            account: self.account,
            number_of_active_findings: self.number_of_active_findings,
            details: self.details,
        }
    }
}
