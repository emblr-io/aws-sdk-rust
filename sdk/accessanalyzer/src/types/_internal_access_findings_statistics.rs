// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides aggregate statistics about the findings for the specified internal access analyzer. This includes counts of active, archived, and resolved findings.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InternalAccessFindingsStatistics {
    /// <p>The total number of active findings for each resource type of the specified internal access analyzer.</p>
    pub resource_type_statistics:
        ::std::option::Option<::std::collections::HashMap<crate::types::ResourceType, crate::types::InternalAccessResourceTypeDetails>>,
    /// <p>The number of active findings for the specified internal access analyzer.</p>
    pub total_active_findings: ::std::option::Option<i32>,
    /// <p>The number of archived findings for the specified internal access analyzer.</p>
    pub total_archived_findings: ::std::option::Option<i32>,
    /// <p>The number of resolved findings for the specified internal access analyzer.</p>
    pub total_resolved_findings: ::std::option::Option<i32>,
}
impl InternalAccessFindingsStatistics {
    /// <p>The total number of active findings for each resource type of the specified internal access analyzer.</p>
    pub fn resource_type_statistics(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<crate::types::ResourceType, crate::types::InternalAccessResourceTypeDetails>> {
        self.resource_type_statistics.as_ref()
    }
    /// <p>The number of active findings for the specified internal access analyzer.</p>
    pub fn total_active_findings(&self) -> ::std::option::Option<i32> {
        self.total_active_findings
    }
    /// <p>The number of archived findings for the specified internal access analyzer.</p>
    pub fn total_archived_findings(&self) -> ::std::option::Option<i32> {
        self.total_archived_findings
    }
    /// <p>The number of resolved findings for the specified internal access analyzer.</p>
    pub fn total_resolved_findings(&self) -> ::std::option::Option<i32> {
        self.total_resolved_findings
    }
}
impl InternalAccessFindingsStatistics {
    /// Creates a new builder-style object to manufacture [`InternalAccessFindingsStatistics`](crate::types::InternalAccessFindingsStatistics).
    pub fn builder() -> crate::types::builders::InternalAccessFindingsStatisticsBuilder {
        crate::types::builders::InternalAccessFindingsStatisticsBuilder::default()
    }
}

/// A builder for [`InternalAccessFindingsStatistics`](crate::types::InternalAccessFindingsStatistics).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InternalAccessFindingsStatisticsBuilder {
    pub(crate) resource_type_statistics:
        ::std::option::Option<::std::collections::HashMap<crate::types::ResourceType, crate::types::InternalAccessResourceTypeDetails>>,
    pub(crate) total_active_findings: ::std::option::Option<i32>,
    pub(crate) total_archived_findings: ::std::option::Option<i32>,
    pub(crate) total_resolved_findings: ::std::option::Option<i32>,
}
impl InternalAccessFindingsStatisticsBuilder {
    /// Adds a key-value pair to `resource_type_statistics`.
    ///
    /// To override the contents of this collection use [`set_resource_type_statistics`](Self::set_resource_type_statistics).
    ///
    /// <p>The total number of active findings for each resource type of the specified internal access analyzer.</p>
    pub fn resource_type_statistics(mut self, k: crate::types::ResourceType, v: crate::types::InternalAccessResourceTypeDetails) -> Self {
        let mut hash_map = self.resource_type_statistics.unwrap_or_default();
        hash_map.insert(k, v);
        self.resource_type_statistics = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The total number of active findings for each resource type of the specified internal access analyzer.</p>
    pub fn set_resource_type_statistics(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::ResourceType, crate::types::InternalAccessResourceTypeDetails>>,
    ) -> Self {
        self.resource_type_statistics = input;
        self
    }
    /// <p>The total number of active findings for each resource type of the specified internal access analyzer.</p>
    pub fn get_resource_type_statistics(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<crate::types::ResourceType, crate::types::InternalAccessResourceTypeDetails>> {
        &self.resource_type_statistics
    }
    /// <p>The number of active findings for the specified internal access analyzer.</p>
    pub fn total_active_findings(mut self, input: i32) -> Self {
        self.total_active_findings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of active findings for the specified internal access analyzer.</p>
    pub fn set_total_active_findings(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_active_findings = input;
        self
    }
    /// <p>The number of active findings for the specified internal access analyzer.</p>
    pub fn get_total_active_findings(&self) -> &::std::option::Option<i32> {
        &self.total_active_findings
    }
    /// <p>The number of archived findings for the specified internal access analyzer.</p>
    pub fn total_archived_findings(mut self, input: i32) -> Self {
        self.total_archived_findings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of archived findings for the specified internal access analyzer.</p>
    pub fn set_total_archived_findings(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_archived_findings = input;
        self
    }
    /// <p>The number of archived findings for the specified internal access analyzer.</p>
    pub fn get_total_archived_findings(&self) -> &::std::option::Option<i32> {
        &self.total_archived_findings
    }
    /// <p>The number of resolved findings for the specified internal access analyzer.</p>
    pub fn total_resolved_findings(mut self, input: i32) -> Self {
        self.total_resolved_findings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of resolved findings for the specified internal access analyzer.</p>
    pub fn set_total_resolved_findings(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_resolved_findings = input;
        self
    }
    /// <p>The number of resolved findings for the specified internal access analyzer.</p>
    pub fn get_total_resolved_findings(&self) -> &::std::option::Option<i32> {
        &self.total_resolved_findings
    }
    /// Consumes the builder and constructs a [`InternalAccessFindingsStatistics`](crate::types::InternalAccessFindingsStatistics).
    pub fn build(self) -> crate::types::InternalAccessFindingsStatistics {
        crate::types::InternalAccessFindingsStatistics {
            resource_type_statistics: self.resource_type_statistics,
            total_active_findings: self.total_active_findings,
            total_archived_findings: self.total_archived_findings,
            total_resolved_findings: self.total_resolved_findings,
        }
    }
}
