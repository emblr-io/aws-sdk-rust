// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about analysis rules for the analyzer. Analysis rules determine which entities will generate findings based on the criteria you define when you create the rule.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalysisRule {
    /// <p>A list of rules for the analyzer containing criteria to exclude from analysis. Entities that meet the rule criteria will not generate findings.</p>
    pub exclusions: ::std::option::Option<::std::vec::Vec<crate::types::AnalysisRuleCriteria>>,
}
impl AnalysisRule {
    /// <p>A list of rules for the analyzer containing criteria to exclude from analysis. Entities that meet the rule criteria will not generate findings.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.exclusions.is_none()`.
    pub fn exclusions(&self) -> &[crate::types::AnalysisRuleCriteria] {
        self.exclusions.as_deref().unwrap_or_default()
    }
}
impl AnalysisRule {
    /// Creates a new builder-style object to manufacture [`AnalysisRule`](crate::types::AnalysisRule).
    pub fn builder() -> crate::types::builders::AnalysisRuleBuilder {
        crate::types::builders::AnalysisRuleBuilder::default()
    }
}

/// A builder for [`AnalysisRule`](crate::types::AnalysisRule).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AnalysisRuleBuilder {
    pub(crate) exclusions: ::std::option::Option<::std::vec::Vec<crate::types::AnalysisRuleCriteria>>,
}
impl AnalysisRuleBuilder {
    /// Appends an item to `exclusions`.
    ///
    /// To override the contents of this collection use [`set_exclusions`](Self::set_exclusions).
    ///
    /// <p>A list of rules for the analyzer containing criteria to exclude from analysis. Entities that meet the rule criteria will not generate findings.</p>
    pub fn exclusions(mut self, input: crate::types::AnalysisRuleCriteria) -> Self {
        let mut v = self.exclusions.unwrap_or_default();
        v.push(input);
        self.exclusions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of rules for the analyzer containing criteria to exclude from analysis. Entities that meet the rule criteria will not generate findings.</p>
    pub fn set_exclusions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AnalysisRuleCriteria>>) -> Self {
        self.exclusions = input;
        self
    }
    /// <p>A list of rules for the analyzer containing criteria to exclude from analysis. Entities that meet the rule criteria will not generate findings.</p>
    pub fn get_exclusions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AnalysisRuleCriteria>> {
        &self.exclusions
    }
    /// Consumes the builder and constructs a [`AnalysisRule`](crate::types::AnalysisRule).
    pub fn build(self) -> crate::types::AnalysisRule {
        crate::types::AnalysisRule { exclusions: self.exclusions }
    }
}
