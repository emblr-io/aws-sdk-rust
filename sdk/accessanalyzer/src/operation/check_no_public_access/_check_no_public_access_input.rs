// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CheckNoPublicAccessInput {
    /// <p>The JSON policy document to evaluate for public access.</p>
    pub policy_document: ::std::option::Option<::std::string::String>,
    /// <p>The type of resource to evaluate for public access. For example, to check for public access to Amazon S3 buckets, you can choose <code>AWS::S3::Bucket</code> for the resource type.</p>
    /// <p>For resource types not supported as valid values, IAM Access Analyzer will return an error.</p>
    pub resource_type: ::std::option::Option<crate::types::AccessCheckResourceType>,
}
impl CheckNoPublicAccessInput {
    /// <p>The JSON policy document to evaluate for public access.</p>
    pub fn policy_document(&self) -> ::std::option::Option<&str> {
        self.policy_document.as_deref()
    }
    /// <p>The type of resource to evaluate for public access. For example, to check for public access to Amazon S3 buckets, you can choose <code>AWS::S3::Bucket</code> for the resource type.</p>
    /// <p>For resource types not supported as valid values, IAM Access Analyzer will return an error.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::AccessCheckResourceType> {
        self.resource_type.as_ref()
    }
}
impl ::std::fmt::Debug for CheckNoPublicAccessInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CheckNoPublicAccessInput");
        formatter.field("policy_document", &"*** Sensitive Data Redacted ***");
        formatter.field("resource_type", &self.resource_type);
        formatter.finish()
    }
}
impl CheckNoPublicAccessInput {
    /// Creates a new builder-style object to manufacture [`CheckNoPublicAccessInput`](crate::operation::check_no_public_access::CheckNoPublicAccessInput).
    pub fn builder() -> crate::operation::check_no_public_access::builders::CheckNoPublicAccessInputBuilder {
        crate::operation::check_no_public_access::builders::CheckNoPublicAccessInputBuilder::default()
    }
}

/// A builder for [`CheckNoPublicAccessInput`](crate::operation::check_no_public_access::CheckNoPublicAccessInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CheckNoPublicAccessInputBuilder {
    pub(crate) policy_document: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<crate::types::AccessCheckResourceType>,
}
impl CheckNoPublicAccessInputBuilder {
    /// <p>The JSON policy document to evaluate for public access.</p>
    /// This field is required.
    pub fn policy_document(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_document = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The JSON policy document to evaluate for public access.</p>
    pub fn set_policy_document(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_document = input;
        self
    }
    /// <p>The JSON policy document to evaluate for public access.</p>
    pub fn get_policy_document(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_document
    }
    /// <p>The type of resource to evaluate for public access. For example, to check for public access to Amazon S3 buckets, you can choose <code>AWS::S3::Bucket</code> for the resource type.</p>
    /// <p>For resource types not supported as valid values, IAM Access Analyzer will return an error.</p>
    /// This field is required.
    pub fn resource_type(mut self, input: crate::types::AccessCheckResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of resource to evaluate for public access. For example, to check for public access to Amazon S3 buckets, you can choose <code>AWS::S3::Bucket</code> for the resource type.</p>
    /// <p>For resource types not supported as valid values, IAM Access Analyzer will return an error.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::AccessCheckResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of resource to evaluate for public access. For example, to check for public access to Amazon S3 buckets, you can choose <code>AWS::S3::Bucket</code> for the resource type.</p>
    /// <p>For resource types not supported as valid values, IAM Access Analyzer will return an error.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::AccessCheckResourceType> {
        &self.resource_type
    }
    /// Consumes the builder and constructs a [`CheckNoPublicAccessInput`](crate::operation::check_no_public_access::CheckNoPublicAccessInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::check_no_public_access::CheckNoPublicAccessInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::check_no_public_access::CheckNoPublicAccessInput {
            policy_document: self.policy_document,
            resource_type: self.resource_type,
        })
    }
}
impl ::std::fmt::Debug for CheckNoPublicAccessInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CheckNoPublicAccessInputBuilder");
        formatter.field("policy_document", &"*** Sensitive Data Redacted ***");
        formatter.field("resource_type", &self.resource_type);
        formatter.finish()
    }
}
