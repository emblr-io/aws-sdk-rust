// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filter for related items of type <code>SLA</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SlaFilter {
    /// <p>Name of an SLA.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Status of an SLA.</p>
    pub status: ::std::option::Option<crate::types::SlaStatus>,
}
impl SlaFilter {
    /// <p>Name of an SLA.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Status of an SLA.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::SlaStatus> {
        self.status.as_ref()
    }
}
impl ::std::fmt::Debug for SlaFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SlaFilter");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
impl SlaFilter {
    /// Creates a new builder-style object to manufacture [`SlaFilter`](crate::types::SlaFilter).
    pub fn builder() -> crate::types::builders::SlaFilterBuilder {
        crate::types::builders::SlaFilterBuilder::default()
    }
}

/// A builder for [`SlaFilter`](crate::types::SlaFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct SlaFilterBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::SlaStatus>,
}
impl SlaFilterBuilder {
    /// <p>Name of an SLA.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of an SLA.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of an SLA.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Status of an SLA.</p>
    pub fn status(mut self, input: crate::types::SlaStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of an SLA.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SlaStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Status of an SLA.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SlaStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`SlaFilter`](crate::types::SlaFilter).
    pub fn build(self) -> crate::types::SlaFilter {
        crate::types::SlaFilter {
            name: self.name,
            status: self.status,
        }
    }
}
impl ::std::fmt::Debug for SlaFilterBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SlaFilterBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
