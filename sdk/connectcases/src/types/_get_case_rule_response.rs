// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detailed case rule information. In the Amazon Connect admin website, case rules are known as <i>case field conditions</i>. For more information about case field conditions, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/case-field-conditions.html">Add case field conditions to a case template</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetCaseRuleResponse {
    /// <p>Unique identifier of a case rule.</p>
    pub case_rule_id: ::std::string::String,
    /// <p>Name of the case rule.</p>
    pub name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the case rule.</p>
    pub case_rule_arn: ::std::string::String,
    /// <p>Represents what rule type should take place, under what conditions.</p>
    pub rule: ::std::option::Option<crate::types::CaseRuleDetails>,
    /// <p>Description of a case rule.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the resource has been deleted.</p>
    pub deleted: bool,
    /// <p>Timestamp when the resource was created.</p>
    pub created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Timestamp when the resource was created or last modified.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A map of of key-value pairs that represent tags on a resource. Tags are used to organize, track, or control access for this resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::option::Option<::std::string::String>>>,
}
impl GetCaseRuleResponse {
    /// <p>Unique identifier of a case rule.</p>
    pub fn case_rule_id(&self) -> &str {
        use std::ops::Deref;
        self.case_rule_id.deref()
    }
    /// <p>Name of the case rule.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the case rule.</p>
    pub fn case_rule_arn(&self) -> &str {
        use std::ops::Deref;
        self.case_rule_arn.deref()
    }
    /// <p>Represents what rule type should take place, under what conditions.</p>
    pub fn rule(&self) -> ::std::option::Option<&crate::types::CaseRuleDetails> {
        self.rule.as_ref()
    }
    /// <p>Description of a case rule.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Indicates whether the resource has been deleted.</p>
    pub fn deleted(&self) -> bool {
        self.deleted
    }
    /// <p>Timestamp when the resource was created.</p>
    pub fn created_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>Timestamp when the resource was created or last modified.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>A map of of key-value pairs that represent tags on a resource. Tags are used to organize, track, or control access for this resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::option::Option<::std::string::String>>> {
        self.tags.as_ref()
    }
}
impl GetCaseRuleResponse {
    /// Creates a new builder-style object to manufacture [`GetCaseRuleResponse`](crate::types::GetCaseRuleResponse).
    pub fn builder() -> crate::types::builders::GetCaseRuleResponseBuilder {
        crate::types::builders::GetCaseRuleResponseBuilder::default()
    }
}

/// A builder for [`GetCaseRuleResponse`](crate::types::GetCaseRuleResponse).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetCaseRuleResponseBuilder {
    pub(crate) case_rule_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) case_rule_arn: ::std::option::Option<::std::string::String>,
    pub(crate) rule: ::std::option::Option<crate::types::CaseRuleDetails>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) deleted: ::std::option::Option<bool>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::option::Option<::std::string::String>>>,
}
impl GetCaseRuleResponseBuilder {
    /// <p>Unique identifier of a case rule.</p>
    /// This field is required.
    pub fn case_rule_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.case_rule_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier of a case rule.</p>
    pub fn set_case_rule_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.case_rule_id = input;
        self
    }
    /// <p>Unique identifier of a case rule.</p>
    pub fn get_case_rule_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.case_rule_id
    }
    /// <p>Name of the case rule.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the case rule.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the case rule.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the case rule.</p>
    /// This field is required.
    pub fn case_rule_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.case_rule_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the case rule.</p>
    pub fn set_case_rule_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.case_rule_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the case rule.</p>
    pub fn get_case_rule_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.case_rule_arn
    }
    /// <p>Represents what rule type should take place, under what conditions.</p>
    /// This field is required.
    pub fn rule(mut self, input: crate::types::CaseRuleDetails) -> Self {
        self.rule = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents what rule type should take place, under what conditions.</p>
    pub fn set_rule(mut self, input: ::std::option::Option<crate::types::CaseRuleDetails>) -> Self {
        self.rule = input;
        self
    }
    /// <p>Represents what rule type should take place, under what conditions.</p>
    pub fn get_rule(&self) -> &::std::option::Option<crate::types::CaseRuleDetails> {
        &self.rule
    }
    /// <p>Description of a case rule.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Description of a case rule.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Description of a case rule.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Indicates whether the resource has been deleted.</p>
    pub fn deleted(mut self, input: bool) -> Self {
        self.deleted = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the resource has been deleted.</p>
    pub fn set_deleted(mut self, input: ::std::option::Option<bool>) -> Self {
        self.deleted = input;
        self
    }
    /// <p>Indicates whether the resource has been deleted.</p>
    pub fn get_deleted(&self) -> &::std::option::Option<bool> {
        &self.deleted
    }
    /// <p>Timestamp when the resource was created.</p>
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp when the resource was created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>Timestamp when the resource was created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>Timestamp when the resource was created or last modified.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp when the resource was created or last modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>Timestamp when the resource was created or last modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map of of key-value pairs that represent tags on a resource. Tags are used to organize, track, or control access for this resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: ::std::option::Option<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of of key-value pairs that represent tags on a resource. Tags are used to organize, track, or control access for this resource.</p>
    pub fn set_tags(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::option::Option<::std::string::String>>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>A map of of key-value pairs that represent tags on a resource. Tags are used to organize, track, or control access for this resource.</p>
    pub fn get_tags(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::option::Option<::std::string::String>>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`GetCaseRuleResponse`](crate::types::GetCaseRuleResponse).
    /// This method will fail if any of the following fields are not set:
    /// - [`case_rule_id`](crate::types::builders::GetCaseRuleResponseBuilder::case_rule_id)
    /// - [`name`](crate::types::builders::GetCaseRuleResponseBuilder::name)
    /// - [`case_rule_arn`](crate::types::builders::GetCaseRuleResponseBuilder::case_rule_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::GetCaseRuleResponse, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GetCaseRuleResponse {
            case_rule_id: self.case_rule_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "case_rule_id",
                    "case_rule_id was not specified but it is required when building GetCaseRuleResponse",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GetCaseRuleResponse",
                )
            })?,
            case_rule_arn: self.case_rule_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "case_rule_arn",
                    "case_rule_arn was not specified but it is required when building GetCaseRuleResponse",
                )
            })?,
            rule: self.rule,
            description: self.description,
            deleted: self.deleted.unwrap_or_default(),
            created_time: self.created_time,
            last_modified_time: self.last_modified_time,
            tags: self.tags,
        })
    }
}
