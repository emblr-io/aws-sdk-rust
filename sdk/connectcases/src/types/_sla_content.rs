// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the content of an SLA to be returned to agents.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SlaContent {
    /// <p>Represents an SLA configuration.</p>
    pub sla_configuration: ::std::option::Option<crate::types::SlaConfiguration>,
}
impl SlaContent {
    /// <p>Represents an SLA configuration.</p>
    pub fn sla_configuration(&self) -> ::std::option::Option<&crate::types::SlaConfiguration> {
        self.sla_configuration.as_ref()
    }
}
impl SlaContent {
    /// Creates a new builder-style object to manufacture [`SlaContent`](crate::types::SlaContent).
    pub fn builder() -> crate::types::builders::SlaContentBuilder {
        crate::types::builders::SlaContentBuilder::default()
    }
}

/// A builder for [`SlaContent`](crate::types::SlaContent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SlaContentBuilder {
    pub(crate) sla_configuration: ::std::option::Option<crate::types::SlaConfiguration>,
}
impl SlaContentBuilder {
    /// <p>Represents an SLA configuration.</p>
    /// This field is required.
    pub fn sla_configuration(mut self, input: crate::types::SlaConfiguration) -> Self {
        self.sla_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents an SLA configuration.</p>
    pub fn set_sla_configuration(mut self, input: ::std::option::Option<crate::types::SlaConfiguration>) -> Self {
        self.sla_configuration = input;
        self
    }
    /// <p>Represents an SLA configuration.</p>
    pub fn get_sla_configuration(&self) -> &::std::option::Option<crate::types::SlaConfiguration> {
        &self.sla_configuration
    }
    /// Consumes the builder and constructs a [`SlaContent`](crate::types::SlaContent).
    pub fn build(self) -> crate::types::SlaContent {
        crate::types::SlaContent {
            sla_configuration: self.sla_configuration,
        }
    }
}
