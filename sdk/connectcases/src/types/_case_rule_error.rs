// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Error for batch describe case rules API failure. In the Amazon Connect admin website, case rules are known as <i>case field conditions</i>. For more information about case field conditions, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/case-field-conditions.html">Add case field conditions to a case template</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CaseRuleError {
    /// <p>The case rule identifier that caused the error.</p>
    pub id: ::std::string::String,
    /// <p>Error code from getting a case rule.</p>
    pub error_code: ::std::string::String,
    /// <p>Error message from getting a case rule.</p>
    pub message: ::std::option::Option<::std::string::String>,
}
impl CaseRuleError {
    /// <p>The case rule identifier that caused the error.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>Error code from getting a case rule.</p>
    pub fn error_code(&self) -> &str {
        use std::ops::Deref;
        self.error_code.deref()
    }
    /// <p>Error message from getting a case rule.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl CaseRuleError {
    /// Creates a new builder-style object to manufacture [`CaseRuleError`](crate::types::CaseRuleError).
    pub fn builder() -> crate::types::builders::CaseRuleErrorBuilder {
        crate::types::builders::CaseRuleErrorBuilder::default()
    }
}

/// A builder for [`CaseRuleError`](crate::types::CaseRuleError).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CaseRuleErrorBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) error_code: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl CaseRuleErrorBuilder {
    /// <p>The case rule identifier that caused the error.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The case rule identifier that caused the error.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The case rule identifier that caused the error.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Error code from getting a case rule.</p>
    /// This field is required.
    pub fn error_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Error code from getting a case rule.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>Error code from getting a case rule.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_code
    }
    /// <p>Error message from getting a case rule.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Error message from getting a case rule.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>Error message from getting a case rule.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Consumes the builder and constructs a [`CaseRuleError`](crate::types::CaseRuleError).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::CaseRuleErrorBuilder::id)
    /// - [`error_code`](crate::types::builders::CaseRuleErrorBuilder::error_code)
    pub fn build(self) -> ::std::result::Result<crate::types::CaseRuleError, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CaseRuleError {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building CaseRuleError",
                )
            })?,
            error_code: self.error_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "error_code",
                    "error_code was not specified but it is required when building CaseRuleError",
                )
            })?,
            message: self.message,
        })
    }
}
