// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Boolean operands for a condition. In the Amazon Connect admin website, case rules are known as <i>case field conditions</i>. For more information about case field conditions, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/case-field-conditions.html">Add case field conditions to a case template</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BooleanOperands {
    /// <p>Represents the left hand operand in the condition.</p>
    pub operand_one: ::std::option::Option<crate::types::OperandOne>,
    /// <p>Represents the right hand operand in the condition.</p>
    pub operand_two: ::std::option::Option<crate::types::OperandTwo>,
    /// <p>The value of the outer rule if the condition evaluates to true.</p>
    pub result: bool,
}
impl BooleanOperands {
    /// <p>Represents the left hand operand in the condition.</p>
    pub fn operand_one(&self) -> ::std::option::Option<&crate::types::OperandOne> {
        self.operand_one.as_ref()
    }
    /// <p>Represents the right hand operand in the condition.</p>
    pub fn operand_two(&self) -> ::std::option::Option<&crate::types::OperandTwo> {
        self.operand_two.as_ref()
    }
    /// <p>The value of the outer rule if the condition evaluates to true.</p>
    pub fn result(&self) -> bool {
        self.result
    }
}
impl BooleanOperands {
    /// Creates a new builder-style object to manufacture [`BooleanOperands`](crate::types::BooleanOperands).
    pub fn builder() -> crate::types::builders::BooleanOperandsBuilder {
        crate::types::builders::BooleanOperandsBuilder::default()
    }
}

/// A builder for [`BooleanOperands`](crate::types::BooleanOperands).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BooleanOperandsBuilder {
    pub(crate) operand_one: ::std::option::Option<crate::types::OperandOne>,
    pub(crate) operand_two: ::std::option::Option<crate::types::OperandTwo>,
    pub(crate) result: ::std::option::Option<bool>,
}
impl BooleanOperandsBuilder {
    /// <p>Represents the left hand operand in the condition.</p>
    /// This field is required.
    pub fn operand_one(mut self, input: crate::types::OperandOne) -> Self {
        self.operand_one = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the left hand operand in the condition.</p>
    pub fn set_operand_one(mut self, input: ::std::option::Option<crate::types::OperandOne>) -> Self {
        self.operand_one = input;
        self
    }
    /// <p>Represents the left hand operand in the condition.</p>
    pub fn get_operand_one(&self) -> &::std::option::Option<crate::types::OperandOne> {
        &self.operand_one
    }
    /// <p>Represents the right hand operand in the condition.</p>
    /// This field is required.
    pub fn operand_two(mut self, input: crate::types::OperandTwo) -> Self {
        self.operand_two = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the right hand operand in the condition.</p>
    pub fn set_operand_two(mut self, input: ::std::option::Option<crate::types::OperandTwo>) -> Self {
        self.operand_two = input;
        self
    }
    /// <p>Represents the right hand operand in the condition.</p>
    pub fn get_operand_two(&self) -> &::std::option::Option<crate::types::OperandTwo> {
        &self.operand_two
    }
    /// <p>The value of the outer rule if the condition evaluates to true.</p>
    /// This field is required.
    pub fn result(mut self, input: bool) -> Self {
        self.result = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of the outer rule if the condition evaluates to true.</p>
    pub fn set_result(mut self, input: ::std::option::Option<bool>) -> Self {
        self.result = input;
        self
    }
    /// <p>The value of the outer rule if the condition evaluates to true.</p>
    pub fn get_result(&self) -> &::std::option::Option<bool> {
        &self.result
    }
    /// Consumes the builder and constructs a [`BooleanOperands`](crate::types::BooleanOperands).
    /// This method will fail if any of the following fields are not set:
    /// - [`result`](crate::types::builders::BooleanOperandsBuilder::result)
    pub fn build(self) -> ::std::result::Result<crate::types::BooleanOperands, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BooleanOperands {
            operand_one: self.operand_one,
            operand_two: self.operand_two,
            result: self.result.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "result",
                    "result was not specified but it is required when building BooleanOperands",
                )
            })?,
        })
    }
}
