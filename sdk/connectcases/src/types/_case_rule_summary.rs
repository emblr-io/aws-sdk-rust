// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information of this case rule. In the Amazon Connect admin website, case rules are known as <i>case field conditions</i>. For more information about case field conditions, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/case-field-conditions.html">Add case field conditions to a case template</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CaseRuleSummary {
    /// <p>Unique identifier of a case rule.</p>
    pub case_rule_id: ::std::string::String,
    /// <p>Name of the case rule.</p>
    pub name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the case rule.</p>
    pub case_rule_arn: ::std::string::String,
    /// <p>Possible types for a rule.</p>
    pub rule_type: crate::types::RuleType,
    /// <p>Description of a case rule.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl CaseRuleSummary {
    /// <p>Unique identifier of a case rule.</p>
    pub fn case_rule_id(&self) -> &str {
        use std::ops::Deref;
        self.case_rule_id.deref()
    }
    /// <p>Name of the case rule.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the case rule.</p>
    pub fn case_rule_arn(&self) -> &str {
        use std::ops::Deref;
        self.case_rule_arn.deref()
    }
    /// <p>Possible types for a rule.</p>
    pub fn rule_type(&self) -> &crate::types::RuleType {
        &self.rule_type
    }
    /// <p>Description of a case rule.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl CaseRuleSummary {
    /// Creates a new builder-style object to manufacture [`CaseRuleSummary`](crate::types::CaseRuleSummary).
    pub fn builder() -> crate::types::builders::CaseRuleSummaryBuilder {
        crate::types::builders::CaseRuleSummaryBuilder::default()
    }
}

/// A builder for [`CaseRuleSummary`](crate::types::CaseRuleSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CaseRuleSummaryBuilder {
    pub(crate) case_rule_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) case_rule_arn: ::std::option::Option<::std::string::String>,
    pub(crate) rule_type: ::std::option::Option<crate::types::RuleType>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl CaseRuleSummaryBuilder {
    /// <p>Unique identifier of a case rule.</p>
    /// This field is required.
    pub fn case_rule_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.case_rule_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier of a case rule.</p>
    pub fn set_case_rule_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.case_rule_id = input;
        self
    }
    /// <p>Unique identifier of a case rule.</p>
    pub fn get_case_rule_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.case_rule_id
    }
    /// <p>Name of the case rule.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the case rule.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the case rule.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the case rule.</p>
    /// This field is required.
    pub fn case_rule_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.case_rule_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the case rule.</p>
    pub fn set_case_rule_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.case_rule_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the case rule.</p>
    pub fn get_case_rule_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.case_rule_arn
    }
    /// <p>Possible types for a rule.</p>
    /// This field is required.
    pub fn rule_type(mut self, input: crate::types::RuleType) -> Self {
        self.rule_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Possible types for a rule.</p>
    pub fn set_rule_type(mut self, input: ::std::option::Option<crate::types::RuleType>) -> Self {
        self.rule_type = input;
        self
    }
    /// <p>Possible types for a rule.</p>
    pub fn get_rule_type(&self) -> &::std::option::Option<crate::types::RuleType> {
        &self.rule_type
    }
    /// <p>Description of a case rule.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Description of a case rule.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Description of a case rule.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`CaseRuleSummary`](crate::types::CaseRuleSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`case_rule_id`](crate::types::builders::CaseRuleSummaryBuilder::case_rule_id)
    /// - [`name`](crate::types::builders::CaseRuleSummaryBuilder::name)
    /// - [`case_rule_arn`](crate::types::builders::CaseRuleSummaryBuilder::case_rule_arn)
    /// - [`rule_type`](crate::types::builders::CaseRuleSummaryBuilder::rule_type)
    pub fn build(self) -> ::std::result::Result<crate::types::CaseRuleSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CaseRuleSummary {
            case_rule_id: self.case_rule_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "case_rule_id",
                    "case_rule_id was not specified but it is required when building CaseRuleSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CaseRuleSummary",
                )
            })?,
            case_rule_arn: self.case_rule_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "case_rule_arn",
                    "case_rule_arn was not specified but it is required when building CaseRuleSummary",
                )
            })?,
            rule_type: self.rule_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rule_type",
                    "rule_type was not specified but it is required when building CaseRuleSummary",
                )
            })?,
            description: self.description,
        })
    }
}
