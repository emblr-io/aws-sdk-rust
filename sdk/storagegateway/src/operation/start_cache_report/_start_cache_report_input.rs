// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartCacheReportInput {
    /// <p>The Amazon Resource Name (ARN) of the file share.</p>
    pub file_share_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the IAM role used when saving the cache report to Amazon S3.</p>
    pub role: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the Amazon S3 bucket where you want to save the cache report.</p><note>
    /// <p>We do not recommend saving the cache report to the same Amazon S3 bucket for which you are generating the report.</p>
    /// <p>This field does not accept access point ARNs.</p>
    /// </note>
    pub location_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region of the Amazon S3 bucket where you want to save the cache report.</p>
    pub bucket_region: ::std::option::Option<::std::string::String>,
    /// <p>The DNS name of the VPC endpoint associated with the Amazon S3 where you want to save the cache report. Optional.</p>
    pub vpc_endpoint_dns_name: ::std::option::Option<::std::string::String>,
    /// <p>The list of filters and parameters that determine which files are included in the report. You must specify at least one value for <code>InclusionFilters</code> or <code>ExclusionFilters</code> in a <code>StartCacheReport</code> request.</p>
    pub inclusion_filters: ::std::option::Option<::std::vec::Vec<crate::types::CacheReportFilter>>,
    /// <p>The list of filters and parameters that determine which files are excluded from the report. You must specify at least one value for <code>InclusionFilters</code> or <code>ExclusionFilters</code> in a <code>StartCacheReport</code> request.</p>
    pub exclusion_filters: ::std::option::Option<::std::vec::Vec<crate::types::CacheReportFilter>>,
    /// <p>A unique identifier that you use to ensure idempotent report generation if you need to retry an unsuccessful <code>StartCacheReport</code> request. If you retry a request, use the same <code>ClientToken</code> you specified in the initial request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>A list of up to 50 key/value tags that you can assign to the cache report. Using tags can help you categorize your reports and more easily locate them in search results.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl StartCacheReportInput {
    /// <p>The Amazon Resource Name (ARN) of the file share.</p>
    pub fn file_share_arn(&self) -> ::std::option::Option<&str> {
        self.file_share_arn.as_deref()
    }
    /// <p>The ARN of the IAM role used when saving the cache report to Amazon S3.</p>
    pub fn role(&self) -> ::std::option::Option<&str> {
        self.role.as_deref()
    }
    /// <p>The ARN of the Amazon S3 bucket where you want to save the cache report.</p><note>
    /// <p>We do not recommend saving the cache report to the same Amazon S3 bucket for which you are generating the report.</p>
    /// <p>This field does not accept access point ARNs.</p>
    /// </note>
    pub fn location_arn(&self) -> ::std::option::Option<&str> {
        self.location_arn.as_deref()
    }
    /// <p>The Amazon Web Services Region of the Amazon S3 bucket where you want to save the cache report.</p>
    pub fn bucket_region(&self) -> ::std::option::Option<&str> {
        self.bucket_region.as_deref()
    }
    /// <p>The DNS name of the VPC endpoint associated with the Amazon S3 where you want to save the cache report. Optional.</p>
    pub fn vpc_endpoint_dns_name(&self) -> ::std::option::Option<&str> {
        self.vpc_endpoint_dns_name.as_deref()
    }
    /// <p>The list of filters and parameters that determine which files are included in the report. You must specify at least one value for <code>InclusionFilters</code> or <code>ExclusionFilters</code> in a <code>StartCacheReport</code> request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.inclusion_filters.is_none()`.
    pub fn inclusion_filters(&self) -> &[crate::types::CacheReportFilter] {
        self.inclusion_filters.as_deref().unwrap_or_default()
    }
    /// <p>The list of filters and parameters that determine which files are excluded from the report. You must specify at least one value for <code>InclusionFilters</code> or <code>ExclusionFilters</code> in a <code>StartCacheReport</code> request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.exclusion_filters.is_none()`.
    pub fn exclusion_filters(&self) -> &[crate::types::CacheReportFilter] {
        self.exclusion_filters.as_deref().unwrap_or_default()
    }
    /// <p>A unique identifier that you use to ensure idempotent report generation if you need to retry an unsuccessful <code>StartCacheReport</code> request. If you retry a request, use the same <code>ClientToken</code> you specified in the initial request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>A list of up to 50 key/value tags that you can assign to the cache report. Using tags can help you categorize your reports and more easily locate them in search results.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl StartCacheReportInput {
    /// Creates a new builder-style object to manufacture [`StartCacheReportInput`](crate::operation::start_cache_report::StartCacheReportInput).
    pub fn builder() -> crate::operation::start_cache_report::builders::StartCacheReportInputBuilder {
        crate::operation::start_cache_report::builders::StartCacheReportInputBuilder::default()
    }
}

/// A builder for [`StartCacheReportInput`](crate::operation::start_cache_report::StartCacheReportInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartCacheReportInputBuilder {
    pub(crate) file_share_arn: ::std::option::Option<::std::string::String>,
    pub(crate) role: ::std::option::Option<::std::string::String>,
    pub(crate) location_arn: ::std::option::Option<::std::string::String>,
    pub(crate) bucket_region: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_endpoint_dns_name: ::std::option::Option<::std::string::String>,
    pub(crate) inclusion_filters: ::std::option::Option<::std::vec::Vec<crate::types::CacheReportFilter>>,
    pub(crate) exclusion_filters: ::std::option::Option<::std::vec::Vec<crate::types::CacheReportFilter>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl StartCacheReportInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the file share.</p>
    /// This field is required.
    pub fn file_share_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_share_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the file share.</p>
    pub fn set_file_share_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_share_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the file share.</p>
    pub fn get_file_share_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_share_arn
    }
    /// <p>The ARN of the IAM role used when saving the cache report to Amazon S3.</p>
    /// This field is required.
    pub fn role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role used when saving the cache report to Amazon S3.</p>
    pub fn set_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role = input;
        self
    }
    /// <p>The ARN of the IAM role used when saving the cache report to Amazon S3.</p>
    pub fn get_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.role
    }
    /// <p>The ARN of the Amazon S3 bucket where you want to save the cache report.</p><note>
    /// <p>We do not recommend saving the cache report to the same Amazon S3 bucket for which you are generating the report.</p>
    /// <p>This field does not accept access point ARNs.</p>
    /// </note>
    /// This field is required.
    pub fn location_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Amazon S3 bucket where you want to save the cache report.</p><note>
    /// <p>We do not recommend saving the cache report to the same Amazon S3 bucket for which you are generating the report.</p>
    /// <p>This field does not accept access point ARNs.</p>
    /// </note>
    pub fn set_location_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location_arn = input;
        self
    }
    /// <p>The ARN of the Amazon S3 bucket where you want to save the cache report.</p><note>
    /// <p>We do not recommend saving the cache report to the same Amazon S3 bucket for which you are generating the report.</p>
    /// <p>This field does not accept access point ARNs.</p>
    /// </note>
    pub fn get_location_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.location_arn
    }
    /// <p>The Amazon Web Services Region of the Amazon S3 bucket where you want to save the cache report.</p>
    /// This field is required.
    pub fn bucket_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region of the Amazon S3 bucket where you want to save the cache report.</p>
    pub fn set_bucket_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_region = input;
        self
    }
    /// <p>The Amazon Web Services Region of the Amazon S3 bucket where you want to save the cache report.</p>
    pub fn get_bucket_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_region
    }
    /// <p>The DNS name of the VPC endpoint associated with the Amazon S3 where you want to save the cache report. Optional.</p>
    pub fn vpc_endpoint_dns_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_endpoint_dns_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DNS name of the VPC endpoint associated with the Amazon S3 where you want to save the cache report. Optional.</p>
    pub fn set_vpc_endpoint_dns_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_endpoint_dns_name = input;
        self
    }
    /// <p>The DNS name of the VPC endpoint associated with the Amazon S3 where you want to save the cache report. Optional.</p>
    pub fn get_vpc_endpoint_dns_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_endpoint_dns_name
    }
    /// Appends an item to `inclusion_filters`.
    ///
    /// To override the contents of this collection use [`set_inclusion_filters`](Self::set_inclusion_filters).
    ///
    /// <p>The list of filters and parameters that determine which files are included in the report. You must specify at least one value for <code>InclusionFilters</code> or <code>ExclusionFilters</code> in a <code>StartCacheReport</code> request.</p>
    pub fn inclusion_filters(mut self, input: crate::types::CacheReportFilter) -> Self {
        let mut v = self.inclusion_filters.unwrap_or_default();
        v.push(input);
        self.inclusion_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of filters and parameters that determine which files are included in the report. You must specify at least one value for <code>InclusionFilters</code> or <code>ExclusionFilters</code> in a <code>StartCacheReport</code> request.</p>
    pub fn set_inclusion_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CacheReportFilter>>) -> Self {
        self.inclusion_filters = input;
        self
    }
    /// <p>The list of filters and parameters that determine which files are included in the report. You must specify at least one value for <code>InclusionFilters</code> or <code>ExclusionFilters</code> in a <code>StartCacheReport</code> request.</p>
    pub fn get_inclusion_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CacheReportFilter>> {
        &self.inclusion_filters
    }
    /// Appends an item to `exclusion_filters`.
    ///
    /// To override the contents of this collection use [`set_exclusion_filters`](Self::set_exclusion_filters).
    ///
    /// <p>The list of filters and parameters that determine which files are excluded from the report. You must specify at least one value for <code>InclusionFilters</code> or <code>ExclusionFilters</code> in a <code>StartCacheReport</code> request.</p>
    pub fn exclusion_filters(mut self, input: crate::types::CacheReportFilter) -> Self {
        let mut v = self.exclusion_filters.unwrap_or_default();
        v.push(input);
        self.exclusion_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of filters and parameters that determine which files are excluded from the report. You must specify at least one value for <code>InclusionFilters</code> or <code>ExclusionFilters</code> in a <code>StartCacheReport</code> request.</p>
    pub fn set_exclusion_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CacheReportFilter>>) -> Self {
        self.exclusion_filters = input;
        self
    }
    /// <p>The list of filters and parameters that determine which files are excluded from the report. You must specify at least one value for <code>InclusionFilters</code> or <code>ExclusionFilters</code> in a <code>StartCacheReport</code> request.</p>
    pub fn get_exclusion_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CacheReportFilter>> {
        &self.exclusion_filters
    }
    /// <p>A unique identifier that you use to ensure idempotent report generation if you need to retry an unsuccessful <code>StartCacheReport</code> request. If you retry a request, use the same <code>ClientToken</code> you specified in the initial request.</p>
    /// This field is required.
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier that you use to ensure idempotent report generation if you need to retry an unsuccessful <code>StartCacheReport</code> request. If you retry a request, use the same <code>ClientToken</code> you specified in the initial request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique identifier that you use to ensure idempotent report generation if you need to retry an unsuccessful <code>StartCacheReport</code> request. If you retry a request, use the same <code>ClientToken</code> you specified in the initial request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of up to 50 key/value tags that you can assign to the cache report. Using tags can help you categorize your reports and more easily locate them in search results.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of up to 50 key/value tags that you can assign to the cache report. Using tags can help you categorize your reports and more easily locate them in search results.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of up to 50 key/value tags that you can assign to the cache report. Using tags can help you categorize your reports and more easily locate them in search results.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`StartCacheReportInput`](crate::operation::start_cache_report::StartCacheReportInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_cache_report::StartCacheReportInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_cache_report::StartCacheReportInput {
            file_share_arn: self.file_share_arn,
            role: self.role,
            location_arn: self.location_arn,
            bucket_region: self.bucket_region,
            vpc_endpoint_dns_name: self.vpc_endpoint_dns_name,
            inclusion_filters: self.inclusion_filters,
            exclusion_filters: self.exclusion_filters,
            client_token: self.client_token,
            tags: self.tags,
        })
    }
}
