// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EvictFilesFailingUploadInput {
    /// <p>The Amazon Resource Name (ARN) of the file share for which you want to start the cache clean operation.</p>
    pub file_share_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether cache entries with full or partial file data currently stored on the gateway will be forcibly removed by the cache clean operation.</p>
    /// <p>Valid arguments:</p>
    /// <ul>
    /// <li>
    /// <p><code>False</code> - The cache clean operation skips cache entries failing upload if they are associated with data currently stored on the gateway. This preserves the cached data.</p></li>
    /// <li>
    /// <p><code>True</code> - The cache clean operation removes cache entries failing upload even if they are associated with data currently stored on the gateway. This deletes the cached data.</p><important>
    /// <p>If <code>ForceRemove</code> is set to <code>True</code>, the cache clean operation will delete file data from the gateway which might otherwise be recoverable.</p>
    /// </important></li>
    /// </ul>
    pub force_remove: ::std::option::Option<bool>,
}
impl EvictFilesFailingUploadInput {
    /// <p>The Amazon Resource Name (ARN) of the file share for which you want to start the cache clean operation.</p>
    pub fn file_share_arn(&self) -> ::std::option::Option<&str> {
        self.file_share_arn.as_deref()
    }
    /// <p>Specifies whether cache entries with full or partial file data currently stored on the gateway will be forcibly removed by the cache clean operation.</p>
    /// <p>Valid arguments:</p>
    /// <ul>
    /// <li>
    /// <p><code>False</code> - The cache clean operation skips cache entries failing upload if they are associated with data currently stored on the gateway. This preserves the cached data.</p></li>
    /// <li>
    /// <p><code>True</code> - The cache clean operation removes cache entries failing upload even if they are associated with data currently stored on the gateway. This deletes the cached data.</p><important>
    /// <p>If <code>ForceRemove</code> is set to <code>True</code>, the cache clean operation will delete file data from the gateway which might otherwise be recoverable.</p>
    /// </important></li>
    /// </ul>
    pub fn force_remove(&self) -> ::std::option::Option<bool> {
        self.force_remove
    }
}
impl EvictFilesFailingUploadInput {
    /// Creates a new builder-style object to manufacture [`EvictFilesFailingUploadInput`](crate::operation::evict_files_failing_upload::EvictFilesFailingUploadInput).
    pub fn builder() -> crate::operation::evict_files_failing_upload::builders::EvictFilesFailingUploadInputBuilder {
        crate::operation::evict_files_failing_upload::builders::EvictFilesFailingUploadInputBuilder::default()
    }
}

/// A builder for [`EvictFilesFailingUploadInput`](crate::operation::evict_files_failing_upload::EvictFilesFailingUploadInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EvictFilesFailingUploadInputBuilder {
    pub(crate) file_share_arn: ::std::option::Option<::std::string::String>,
    pub(crate) force_remove: ::std::option::Option<bool>,
}
impl EvictFilesFailingUploadInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the file share for which you want to start the cache clean operation.</p>
    /// This field is required.
    pub fn file_share_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_share_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the file share for which you want to start the cache clean operation.</p>
    pub fn set_file_share_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_share_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the file share for which you want to start the cache clean operation.</p>
    pub fn get_file_share_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_share_arn
    }
    /// <p>Specifies whether cache entries with full or partial file data currently stored on the gateway will be forcibly removed by the cache clean operation.</p>
    /// <p>Valid arguments:</p>
    /// <ul>
    /// <li>
    /// <p><code>False</code> - The cache clean operation skips cache entries failing upload if they are associated with data currently stored on the gateway. This preserves the cached data.</p></li>
    /// <li>
    /// <p><code>True</code> - The cache clean operation removes cache entries failing upload even if they are associated with data currently stored on the gateway. This deletes the cached data.</p><important>
    /// <p>If <code>ForceRemove</code> is set to <code>True</code>, the cache clean operation will delete file data from the gateway which might otherwise be recoverable.</p>
    /// </important></li>
    /// </ul>
    pub fn force_remove(mut self, input: bool) -> Self {
        self.force_remove = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether cache entries with full or partial file data currently stored on the gateway will be forcibly removed by the cache clean operation.</p>
    /// <p>Valid arguments:</p>
    /// <ul>
    /// <li>
    /// <p><code>False</code> - The cache clean operation skips cache entries failing upload if they are associated with data currently stored on the gateway. This preserves the cached data.</p></li>
    /// <li>
    /// <p><code>True</code> - The cache clean operation removes cache entries failing upload even if they are associated with data currently stored on the gateway. This deletes the cached data.</p><important>
    /// <p>If <code>ForceRemove</code> is set to <code>True</code>, the cache clean operation will delete file data from the gateway which might otherwise be recoverable.</p>
    /// </important></li>
    /// </ul>
    pub fn set_force_remove(mut self, input: ::std::option::Option<bool>) -> Self {
        self.force_remove = input;
        self
    }
    /// <p>Specifies whether cache entries with full or partial file data currently stored on the gateway will be forcibly removed by the cache clean operation.</p>
    /// <p>Valid arguments:</p>
    /// <ul>
    /// <li>
    /// <p><code>False</code> - The cache clean operation skips cache entries failing upload if they are associated with data currently stored on the gateway. This preserves the cached data.</p></li>
    /// <li>
    /// <p><code>True</code> - The cache clean operation removes cache entries failing upload even if they are associated with data currently stored on the gateway. This deletes the cached data.</p><important>
    /// <p>If <code>ForceRemove</code> is set to <code>True</code>, the cache clean operation will delete file data from the gateway which might otherwise be recoverable.</p>
    /// </important></li>
    /// </ul>
    pub fn get_force_remove(&self) -> &::std::option::Option<bool> {
        &self.force_remove
    }
    /// Consumes the builder and constructs a [`EvictFilesFailingUploadInput`](crate::operation::evict_files_failing_upload::EvictFilesFailingUploadInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::evict_files_failing_upload::EvictFilesFailingUploadInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::evict_files_failing_upload::EvictFilesFailingUploadInput {
            file_share_arn: self.file_share_arn,
            force_remove: self.force_remove,
        })
    }
}
