// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeCacheReportOutput {
    /// <p>Contains all informational fields associated with a cache report. Includes name, ARN, tags, status, progress, filters, start time, and end time.</p>
    pub cache_report_info: ::std::option::Option<crate::types::CacheReportInfo>,
    _request_id: Option<String>,
}
impl DescribeCacheReportOutput {
    /// <p>Contains all informational fields associated with a cache report. Includes name, ARN, tags, status, progress, filters, start time, and end time.</p>
    pub fn cache_report_info(&self) -> ::std::option::Option<&crate::types::CacheReportInfo> {
        self.cache_report_info.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeCacheReportOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeCacheReportOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCacheReportOutput`](crate::operation::describe_cache_report::DescribeCacheReportOutput).
    pub fn builder() -> crate::operation::describe_cache_report::builders::DescribeCacheReportOutputBuilder {
        crate::operation::describe_cache_report::builders::DescribeCacheReportOutputBuilder::default()
    }
}

/// A builder for [`DescribeCacheReportOutput`](crate::operation::describe_cache_report::DescribeCacheReportOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeCacheReportOutputBuilder {
    pub(crate) cache_report_info: ::std::option::Option<crate::types::CacheReportInfo>,
    _request_id: Option<String>,
}
impl DescribeCacheReportOutputBuilder {
    /// <p>Contains all informational fields associated with a cache report. Includes name, ARN, tags, status, progress, filters, start time, and end time.</p>
    pub fn cache_report_info(mut self, input: crate::types::CacheReportInfo) -> Self {
        self.cache_report_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains all informational fields associated with a cache report. Includes name, ARN, tags, status, progress, filters, start time, and end time.</p>
    pub fn set_cache_report_info(mut self, input: ::std::option::Option<crate::types::CacheReportInfo>) -> Self {
        self.cache_report_info = input;
        self
    }
    /// <p>Contains all informational fields associated with a cache report. Includes name, ARN, tags, status, progress, filters, start time, and end time.</p>
    pub fn get_cache_report_info(&self) -> &::std::option::Option<crate::types::CacheReportInfo> {
        &self.cache_report_info
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeCacheReportOutput`](crate::operation::describe_cache_report::DescribeCacheReportOutput).
    pub fn build(self) -> crate::operation::describe_cache_report::DescribeCacheReportOutput {
        crate::operation::describe_cache_report::DescribeCacheReportOutput {
            cache_report_info: self.cache_report_info,
            _request_id: self._request_id,
        }
    }
}
