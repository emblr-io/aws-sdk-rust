// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListCacheReportsOutput {
    /// <p>A list of existing cache reports for all file shares associated with your Amazon Web Services account. This list includes all information provided by the <code>DescribeCacheReport</code> action, such as report status, completion progress, start time, end time, filters, and tags.</p>
    pub cache_report_list: ::std::option::Option<::std::vec::Vec<crate::types::CacheReportInfo>>,
    /// <p>If the request includes <code>Marker</code>, the response returns that value in this field.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListCacheReportsOutput {
    /// <p>A list of existing cache reports for all file shares associated with your Amazon Web Services account. This list includes all information provided by the <code>DescribeCacheReport</code> action, such as report status, completion progress, start time, end time, filters, and tags.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cache_report_list.is_none()`.
    pub fn cache_report_list(&self) -> &[crate::types::CacheReportInfo] {
        self.cache_report_list.as_deref().unwrap_or_default()
    }
    /// <p>If the request includes <code>Marker</code>, the response returns that value in this field.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListCacheReportsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListCacheReportsOutput {
    /// Creates a new builder-style object to manufacture [`ListCacheReportsOutput`](crate::operation::list_cache_reports::ListCacheReportsOutput).
    pub fn builder() -> crate::operation::list_cache_reports::builders::ListCacheReportsOutputBuilder {
        crate::operation::list_cache_reports::builders::ListCacheReportsOutputBuilder::default()
    }
}

/// A builder for [`ListCacheReportsOutput`](crate::operation::list_cache_reports::ListCacheReportsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListCacheReportsOutputBuilder {
    pub(crate) cache_report_list: ::std::option::Option<::std::vec::Vec<crate::types::CacheReportInfo>>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListCacheReportsOutputBuilder {
    /// Appends an item to `cache_report_list`.
    ///
    /// To override the contents of this collection use [`set_cache_report_list`](Self::set_cache_report_list).
    ///
    /// <p>A list of existing cache reports for all file shares associated with your Amazon Web Services account. This list includes all information provided by the <code>DescribeCacheReport</code> action, such as report status, completion progress, start time, end time, filters, and tags.</p>
    pub fn cache_report_list(mut self, input: crate::types::CacheReportInfo) -> Self {
        let mut v = self.cache_report_list.unwrap_or_default();
        v.push(input);
        self.cache_report_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of existing cache reports for all file shares associated with your Amazon Web Services account. This list includes all information provided by the <code>DescribeCacheReport</code> action, such as report status, completion progress, start time, end time, filters, and tags.</p>
    pub fn set_cache_report_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CacheReportInfo>>) -> Self {
        self.cache_report_list = input;
        self
    }
    /// <p>A list of existing cache reports for all file shares associated with your Amazon Web Services account. This list includes all information provided by the <code>DescribeCacheReport</code> action, such as report status, completion progress, start time, end time, filters, and tags.</p>
    pub fn get_cache_report_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CacheReportInfo>> {
        &self.cache_report_list
    }
    /// <p>If the request includes <code>Marker</code>, the response returns that value in this field.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the request includes <code>Marker</code>, the response returns that value in this field.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>If the request includes <code>Marker</code>, the response returns that value in this field.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListCacheReportsOutput`](crate::operation::list_cache_reports::ListCacheReportsOutput).
    pub fn build(self) -> crate::operation::list_cache_reports::ListCacheReportsOutput {
        crate::operation::list_cache_reports::ListCacheReportsOutput {
            cache_report_list: self.cache_report_list,
            marker: self.marker,
            _request_id: self._request_id,
        }
    }
}
