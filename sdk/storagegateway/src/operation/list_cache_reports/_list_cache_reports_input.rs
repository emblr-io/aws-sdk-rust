// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListCacheReportsInput {
    /// <p>Opaque pagination token returned from a previous <code>ListCacheReports</code> operation. If present, <code>Marker</code> specifies where to continue the list from after a previous call to <code>ListCacheReports</code>. Optional.</p>
    pub marker: ::std::option::Option<::std::string::String>,
}
impl ListCacheReportsInput {
    /// <p>Opaque pagination token returned from a previous <code>ListCacheReports</code> operation. If present, <code>Marker</code> specifies where to continue the list from after a previous call to <code>ListCacheReports</code>. Optional.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl ListCacheReportsInput {
    /// Creates a new builder-style object to manufacture [`ListCacheReportsInput`](crate::operation::list_cache_reports::ListCacheReportsInput).
    pub fn builder() -> crate::operation::list_cache_reports::builders::ListCacheReportsInputBuilder {
        crate::operation::list_cache_reports::builders::ListCacheReportsInputBuilder::default()
    }
}

/// A builder for [`ListCacheReportsInput`](crate::operation::list_cache_reports::ListCacheReportsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListCacheReportsInputBuilder {
    pub(crate) marker: ::std::option::Option<::std::string::String>,
}
impl ListCacheReportsInputBuilder {
    /// <p>Opaque pagination token returned from a previous <code>ListCacheReports</code> operation. If present, <code>Marker</code> specifies where to continue the list from after a previous call to <code>ListCacheReports</code>. Optional.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Opaque pagination token returned from a previous <code>ListCacheReports</code> operation. If present, <code>Marker</code> specifies where to continue the list from after a previous call to <code>ListCacheReports</code>. Optional.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>Opaque pagination token returned from a previous <code>ListCacheReports</code> operation. If present, <code>Marker</code> specifies where to continue the list from after a previous call to <code>ListCacheReports</code>. Optional.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// Consumes the builder and constructs a [`ListCacheReportsInput`](crate::operation::list_cache_reports::ListCacheReportsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_cache_reports::ListCacheReportsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_cache_reports::ListCacheReportsInput { marker: self.marker })
    }
}
