// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains all informational fields associated with a cache report. Includes name, ARN, tags, status, progress, filters, start time, and end time.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CacheReportInfo {
    /// <p>The Amazon Resource Name (ARN) of the cache report you want to describe.</p>
    pub cache_report_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the specified cache report.</p>
    pub cache_report_status: ::std::option::Option<crate::types::CacheReportStatus>,
    /// <p>The percentage of the report generation process that has been completed at time of inquiry.</p>
    pub report_completion_percent: ::std::option::Option<i32>,
    /// <p>The time at which the gateway stopped generating the cache report.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The ARN of the IAM role that an S3 File Gateway assumes when it accesses the underlying storage.</p>
    pub role: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the file share.</p>
    pub file_share_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the Amazon S3 bucket location where the cache report is saved.</p>
    pub location_arn: ::std::option::Option<::std::string::String>,
    /// <p>The time at which the gateway started generating the cache report.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The list of filters and parameters that determine which files are included in the report.</p>
    pub inclusion_filters: ::std::option::Option<::std::vec::Vec<crate::types::CacheReportFilter>>,
    /// <p>The list of filters and parameters that determine which files are excluded from the report.</p>
    pub exclusion_filters: ::std::option::Option<::std::vec::Vec<crate::types::CacheReportFilter>>,
    /// <p>The file name of the completed cache report object stored in Amazon S3.</p>
    pub report_name: ::std::option::Option<::std::string::String>,
    /// <p>The list of key/value tags associated with the report.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CacheReportInfo {
    /// <p>The Amazon Resource Name (ARN) of the cache report you want to describe.</p>
    pub fn cache_report_arn(&self) -> ::std::option::Option<&str> {
        self.cache_report_arn.as_deref()
    }
    /// <p>The status of the specified cache report.</p>
    pub fn cache_report_status(&self) -> ::std::option::Option<&crate::types::CacheReportStatus> {
        self.cache_report_status.as_ref()
    }
    /// <p>The percentage of the report generation process that has been completed at time of inquiry.</p>
    pub fn report_completion_percent(&self) -> ::std::option::Option<i32> {
        self.report_completion_percent
    }
    /// <p>The time at which the gateway stopped generating the cache report.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The ARN of the IAM role that an S3 File Gateway assumes when it accesses the underlying storage.</p>
    pub fn role(&self) -> ::std::option::Option<&str> {
        self.role.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the file share.</p>
    pub fn file_share_arn(&self) -> ::std::option::Option<&str> {
        self.file_share_arn.as_deref()
    }
    /// <p>The ARN of the Amazon S3 bucket location where the cache report is saved.</p>
    pub fn location_arn(&self) -> ::std::option::Option<&str> {
        self.location_arn.as_deref()
    }
    /// <p>The time at which the gateway started generating the cache report.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The list of filters and parameters that determine which files are included in the report.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.inclusion_filters.is_none()`.
    pub fn inclusion_filters(&self) -> &[crate::types::CacheReportFilter] {
        self.inclusion_filters.as_deref().unwrap_or_default()
    }
    /// <p>The list of filters and parameters that determine which files are excluded from the report.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.exclusion_filters.is_none()`.
    pub fn exclusion_filters(&self) -> &[crate::types::CacheReportFilter] {
        self.exclusion_filters.as_deref().unwrap_or_default()
    }
    /// <p>The file name of the completed cache report object stored in Amazon S3.</p>
    pub fn report_name(&self) -> ::std::option::Option<&str> {
        self.report_name.as_deref()
    }
    /// <p>The list of key/value tags associated with the report.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CacheReportInfo {
    /// Creates a new builder-style object to manufacture [`CacheReportInfo`](crate::types::CacheReportInfo).
    pub fn builder() -> crate::types::builders::CacheReportInfoBuilder {
        crate::types::builders::CacheReportInfoBuilder::default()
    }
}

/// A builder for [`CacheReportInfo`](crate::types::CacheReportInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CacheReportInfoBuilder {
    pub(crate) cache_report_arn: ::std::option::Option<::std::string::String>,
    pub(crate) cache_report_status: ::std::option::Option<crate::types::CacheReportStatus>,
    pub(crate) report_completion_percent: ::std::option::Option<i32>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) role: ::std::option::Option<::std::string::String>,
    pub(crate) file_share_arn: ::std::option::Option<::std::string::String>,
    pub(crate) location_arn: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) inclusion_filters: ::std::option::Option<::std::vec::Vec<crate::types::CacheReportFilter>>,
    pub(crate) exclusion_filters: ::std::option::Option<::std::vec::Vec<crate::types::CacheReportFilter>>,
    pub(crate) report_name: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CacheReportInfoBuilder {
    /// <p>The Amazon Resource Name (ARN) of the cache report you want to describe.</p>
    pub fn cache_report_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cache_report_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the cache report you want to describe.</p>
    pub fn set_cache_report_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cache_report_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the cache report you want to describe.</p>
    pub fn get_cache_report_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.cache_report_arn
    }
    /// <p>The status of the specified cache report.</p>
    pub fn cache_report_status(mut self, input: crate::types::CacheReportStatus) -> Self {
        self.cache_report_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the specified cache report.</p>
    pub fn set_cache_report_status(mut self, input: ::std::option::Option<crate::types::CacheReportStatus>) -> Self {
        self.cache_report_status = input;
        self
    }
    /// <p>The status of the specified cache report.</p>
    pub fn get_cache_report_status(&self) -> &::std::option::Option<crate::types::CacheReportStatus> {
        &self.cache_report_status
    }
    /// <p>The percentage of the report generation process that has been completed at time of inquiry.</p>
    pub fn report_completion_percent(mut self, input: i32) -> Self {
        self.report_completion_percent = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage of the report generation process that has been completed at time of inquiry.</p>
    pub fn set_report_completion_percent(mut self, input: ::std::option::Option<i32>) -> Self {
        self.report_completion_percent = input;
        self
    }
    /// <p>The percentage of the report generation process that has been completed at time of inquiry.</p>
    pub fn get_report_completion_percent(&self) -> &::std::option::Option<i32> {
        &self.report_completion_percent
    }
    /// <p>The time at which the gateway stopped generating the cache report.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the gateway stopped generating the cache report.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The time at which the gateway stopped generating the cache report.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The ARN of the IAM role that an S3 File Gateway assumes when it accesses the underlying storage.</p>
    pub fn role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that an S3 File Gateway assumes when it accesses the underlying storage.</p>
    pub fn set_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role = input;
        self
    }
    /// <p>The ARN of the IAM role that an S3 File Gateway assumes when it accesses the underlying storage.</p>
    pub fn get_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.role
    }
    /// <p>The Amazon Resource Name (ARN) of the file share.</p>
    pub fn file_share_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_share_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the file share.</p>
    pub fn set_file_share_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_share_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the file share.</p>
    pub fn get_file_share_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_share_arn
    }
    /// <p>The ARN of the Amazon S3 bucket location where the cache report is saved.</p>
    pub fn location_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Amazon S3 bucket location where the cache report is saved.</p>
    pub fn set_location_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location_arn = input;
        self
    }
    /// <p>The ARN of the Amazon S3 bucket location where the cache report is saved.</p>
    pub fn get_location_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.location_arn
    }
    /// <p>The time at which the gateway started generating the cache report.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the gateway started generating the cache report.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time at which the gateway started generating the cache report.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// Appends an item to `inclusion_filters`.
    ///
    /// To override the contents of this collection use [`set_inclusion_filters`](Self::set_inclusion_filters).
    ///
    /// <p>The list of filters and parameters that determine which files are included in the report.</p>
    pub fn inclusion_filters(mut self, input: crate::types::CacheReportFilter) -> Self {
        let mut v = self.inclusion_filters.unwrap_or_default();
        v.push(input);
        self.inclusion_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of filters and parameters that determine which files are included in the report.</p>
    pub fn set_inclusion_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CacheReportFilter>>) -> Self {
        self.inclusion_filters = input;
        self
    }
    /// <p>The list of filters and parameters that determine which files are included in the report.</p>
    pub fn get_inclusion_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CacheReportFilter>> {
        &self.inclusion_filters
    }
    /// Appends an item to `exclusion_filters`.
    ///
    /// To override the contents of this collection use [`set_exclusion_filters`](Self::set_exclusion_filters).
    ///
    /// <p>The list of filters and parameters that determine which files are excluded from the report.</p>
    pub fn exclusion_filters(mut self, input: crate::types::CacheReportFilter) -> Self {
        let mut v = self.exclusion_filters.unwrap_or_default();
        v.push(input);
        self.exclusion_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of filters and parameters that determine which files are excluded from the report.</p>
    pub fn set_exclusion_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CacheReportFilter>>) -> Self {
        self.exclusion_filters = input;
        self
    }
    /// <p>The list of filters and parameters that determine which files are excluded from the report.</p>
    pub fn get_exclusion_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CacheReportFilter>> {
        &self.exclusion_filters
    }
    /// <p>The file name of the completed cache report object stored in Amazon S3.</p>
    pub fn report_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.report_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The file name of the completed cache report object stored in Amazon S3.</p>
    pub fn set_report_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.report_name = input;
        self
    }
    /// <p>The file name of the completed cache report object stored in Amazon S3.</p>
    pub fn get_report_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.report_name
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of key/value tags associated with the report.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of key/value tags associated with the report.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The list of key/value tags associated with the report.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CacheReportInfo`](crate::types::CacheReportInfo).
    pub fn build(self) -> crate::types::CacheReportInfo {
        crate::types::CacheReportInfo {
            cache_report_arn: self.cache_report_arn,
            cache_report_status: self.cache_report_status,
            report_completion_percent: self.report_completion_percent,
            end_time: self.end_time,
            role: self.role,
            file_share_arn: self.file_share_arn,
            location_arn: self.location_arn,
            start_time: self.start_time,
            inclusion_filters: self.inclusion_filters,
            exclusion_filters: self.exclusion_filters,
            report_name: self.report_name,
            tags: self.tags,
        }
    }
}
