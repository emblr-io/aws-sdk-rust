// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The IORM settings of the Exadata DB system.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExadataIormConfig {
    /// <p>An array of IORM settings for all the database in the Exadata DB system.</p>
    pub db_plans: ::std::option::Option<::std::vec::Vec<crate::types::DbIormConfig>>,
    /// <p>Additional information about the current lifecycleState.</p>
    pub lifecycle_details: ::std::option::Option<::std::string::String>,
    /// <p>The current state of IORM configuration for the Exadata DB system.</p>
    pub lifecycle_state: ::std::option::Option<crate::types::IormLifecycleState>,
    /// <p>The current value for the IORM objective. The default is AUTO.</p>
    pub objective: ::std::option::Option<crate::types::Objective>,
}
impl ExadataIormConfig {
    /// <p>An array of IORM settings for all the database in the Exadata DB system.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.db_plans.is_none()`.
    pub fn db_plans(&self) -> &[crate::types::DbIormConfig] {
        self.db_plans.as_deref().unwrap_or_default()
    }
    /// <p>Additional information about the current lifecycleState.</p>
    pub fn lifecycle_details(&self) -> ::std::option::Option<&str> {
        self.lifecycle_details.as_deref()
    }
    /// <p>The current state of IORM configuration for the Exadata DB system.</p>
    pub fn lifecycle_state(&self) -> ::std::option::Option<&crate::types::IormLifecycleState> {
        self.lifecycle_state.as_ref()
    }
    /// <p>The current value for the IORM objective. The default is AUTO.</p>
    pub fn objective(&self) -> ::std::option::Option<&crate::types::Objective> {
        self.objective.as_ref()
    }
}
impl ExadataIormConfig {
    /// Creates a new builder-style object to manufacture [`ExadataIormConfig`](crate::types::ExadataIormConfig).
    pub fn builder() -> crate::types::builders::ExadataIormConfigBuilder {
        crate::types::builders::ExadataIormConfigBuilder::default()
    }
}

/// A builder for [`ExadataIormConfig`](crate::types::ExadataIormConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ExadataIormConfigBuilder {
    pub(crate) db_plans: ::std::option::Option<::std::vec::Vec<crate::types::DbIormConfig>>,
    pub(crate) lifecycle_details: ::std::option::Option<::std::string::String>,
    pub(crate) lifecycle_state: ::std::option::Option<crate::types::IormLifecycleState>,
    pub(crate) objective: ::std::option::Option<crate::types::Objective>,
}
impl ExadataIormConfigBuilder {
    /// Appends an item to `db_plans`.
    ///
    /// To override the contents of this collection use [`set_db_plans`](Self::set_db_plans).
    ///
    /// <p>An array of IORM settings for all the database in the Exadata DB system.</p>
    pub fn db_plans(mut self, input: crate::types::DbIormConfig) -> Self {
        let mut v = self.db_plans.unwrap_or_default();
        v.push(input);
        self.db_plans = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of IORM settings for all the database in the Exadata DB system.</p>
    pub fn set_db_plans(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DbIormConfig>>) -> Self {
        self.db_plans = input;
        self
    }
    /// <p>An array of IORM settings for all the database in the Exadata DB system.</p>
    pub fn get_db_plans(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DbIormConfig>> {
        &self.db_plans
    }
    /// <p>Additional information about the current lifecycleState.</p>
    pub fn lifecycle_details(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lifecycle_details = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Additional information about the current lifecycleState.</p>
    pub fn set_lifecycle_details(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lifecycle_details = input;
        self
    }
    /// <p>Additional information about the current lifecycleState.</p>
    pub fn get_lifecycle_details(&self) -> &::std::option::Option<::std::string::String> {
        &self.lifecycle_details
    }
    /// <p>The current state of IORM configuration for the Exadata DB system.</p>
    pub fn lifecycle_state(mut self, input: crate::types::IormLifecycleState) -> Self {
        self.lifecycle_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of IORM configuration for the Exadata DB system.</p>
    pub fn set_lifecycle_state(mut self, input: ::std::option::Option<crate::types::IormLifecycleState>) -> Self {
        self.lifecycle_state = input;
        self
    }
    /// <p>The current state of IORM configuration for the Exadata DB system.</p>
    pub fn get_lifecycle_state(&self) -> &::std::option::Option<crate::types::IormLifecycleState> {
        &self.lifecycle_state
    }
    /// <p>The current value for the IORM objective. The default is AUTO.</p>
    pub fn objective(mut self, input: crate::types::Objective) -> Self {
        self.objective = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current value for the IORM objective. The default is AUTO.</p>
    pub fn set_objective(mut self, input: ::std::option::Option<crate::types::Objective>) -> Self {
        self.objective = input;
        self
    }
    /// <p>The current value for the IORM objective. The default is AUTO.</p>
    pub fn get_objective(&self) -> &::std::option::Option<crate::types::Objective> {
        &self.objective
    }
    /// Consumes the builder and constructs a [`ExadataIormConfig`](crate::types::ExadataIormConfig).
    pub fn build(self) -> crate::types::ExadataIormConfig {
        crate::types::ExadataIormConfig {
            db_plans: self.db_plans,
            lifecycle_details: self.lifecycle_details,
            lifecycle_state: self.lifecycle_state,
            objective: self.objective,
        }
    }
}
