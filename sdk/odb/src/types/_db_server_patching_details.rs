// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DbServerPatchingDetails {
    /// <p>Estimated time, in minutes, to patch one database server.</p>
    pub estimated_patch_duration: ::std::option::Option<i32>,
    /// <p>The status of the patching operation. Possible values are <code>SCHEDULED</code>, <code>MAINTENANCE_IN_PROGRESS</code>, <code>FAILED</code>, and <code>COMPLETE</code>.</p>
    pub patching_status: ::std::option::Option<crate::types::DbServerPatchingStatus>,
    /// <p>The time when the patching operation ended.</p>
    pub time_patching_ended: ::std::option::Option<::std::string::String>,
    /// <p>The time when the patching operation started.</p>
    pub time_patching_started: ::std::option::Option<::std::string::String>,
}
impl DbServerPatchingDetails {
    /// <p>Estimated time, in minutes, to patch one database server.</p>
    pub fn estimated_patch_duration(&self) -> ::std::option::Option<i32> {
        self.estimated_patch_duration
    }
    /// <p>The status of the patching operation. Possible values are <code>SCHEDULED</code>, <code>MAINTENANCE_IN_PROGRESS</code>, <code>FAILED</code>, and <code>COMPLETE</code>.</p>
    pub fn patching_status(&self) -> ::std::option::Option<&crate::types::DbServerPatchingStatus> {
        self.patching_status.as_ref()
    }
    /// <p>The time when the patching operation ended.</p>
    pub fn time_patching_ended(&self) -> ::std::option::Option<&str> {
        self.time_patching_ended.as_deref()
    }
    /// <p>The time when the patching operation started.</p>
    pub fn time_patching_started(&self) -> ::std::option::Option<&str> {
        self.time_patching_started.as_deref()
    }
}
impl DbServerPatchingDetails {
    /// Creates a new builder-style object to manufacture [`DbServerPatchingDetails`](crate::types::DbServerPatchingDetails).
    pub fn builder() -> crate::types::builders::DbServerPatchingDetailsBuilder {
        crate::types::builders::DbServerPatchingDetailsBuilder::default()
    }
}

/// A builder for [`DbServerPatchingDetails`](crate::types::DbServerPatchingDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DbServerPatchingDetailsBuilder {
    pub(crate) estimated_patch_duration: ::std::option::Option<i32>,
    pub(crate) patching_status: ::std::option::Option<crate::types::DbServerPatchingStatus>,
    pub(crate) time_patching_ended: ::std::option::Option<::std::string::String>,
    pub(crate) time_patching_started: ::std::option::Option<::std::string::String>,
}
impl DbServerPatchingDetailsBuilder {
    /// <p>Estimated time, in minutes, to patch one database server.</p>
    pub fn estimated_patch_duration(mut self, input: i32) -> Self {
        self.estimated_patch_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Estimated time, in minutes, to patch one database server.</p>
    pub fn set_estimated_patch_duration(mut self, input: ::std::option::Option<i32>) -> Self {
        self.estimated_patch_duration = input;
        self
    }
    /// <p>Estimated time, in minutes, to patch one database server.</p>
    pub fn get_estimated_patch_duration(&self) -> &::std::option::Option<i32> {
        &self.estimated_patch_duration
    }
    /// <p>The status of the patching operation. Possible values are <code>SCHEDULED</code>, <code>MAINTENANCE_IN_PROGRESS</code>, <code>FAILED</code>, and <code>COMPLETE</code>.</p>
    pub fn patching_status(mut self, input: crate::types::DbServerPatchingStatus) -> Self {
        self.patching_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the patching operation. Possible values are <code>SCHEDULED</code>, <code>MAINTENANCE_IN_PROGRESS</code>, <code>FAILED</code>, and <code>COMPLETE</code>.</p>
    pub fn set_patching_status(mut self, input: ::std::option::Option<crate::types::DbServerPatchingStatus>) -> Self {
        self.patching_status = input;
        self
    }
    /// <p>The status of the patching operation. Possible values are <code>SCHEDULED</code>, <code>MAINTENANCE_IN_PROGRESS</code>, <code>FAILED</code>, and <code>COMPLETE</code>.</p>
    pub fn get_patching_status(&self) -> &::std::option::Option<crate::types::DbServerPatchingStatus> {
        &self.patching_status
    }
    /// <p>The time when the patching operation ended.</p>
    pub fn time_patching_ended(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.time_patching_ended = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time when the patching operation ended.</p>
    pub fn set_time_patching_ended(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.time_patching_ended = input;
        self
    }
    /// <p>The time when the patching operation ended.</p>
    pub fn get_time_patching_ended(&self) -> &::std::option::Option<::std::string::String> {
        &self.time_patching_ended
    }
    /// <p>The time when the patching operation started.</p>
    pub fn time_patching_started(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.time_patching_started = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time when the patching operation started.</p>
    pub fn set_time_patching_started(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.time_patching_started = input;
        self
    }
    /// <p>The time when the patching operation started.</p>
    pub fn get_time_patching_started(&self) -> &::std::option::Option<::std::string::String> {
        &self.time_patching_started
    }
    /// Consumes the builder and constructs a [`DbServerPatchingDetails`](crate::types::DbServerPatchingDetails).
    pub fn build(self) -> crate::types::DbServerPatchingDetails {
        crate::types::DbServerPatchingDetails {
            estimated_patch_duration: self.estimated_patch_duration,
            patching_status: self.patching_status,
            time_patching_ended: self.time_patching_ended,
            time_patching_started: self.time_patching_started,
        }
    }
}
