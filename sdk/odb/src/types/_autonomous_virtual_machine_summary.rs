// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of an Autonomous Virtual Machine (VM) within an Autonomous VM cluster.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutonomousVirtualMachineSummary {
    /// <p>The unique identifier of the Autonomous VM.</p>
    pub autonomous_virtual_machine_id: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the Autonomous VM.</p>
    pub status: ::std::option::Option<crate::types::ResourceStatus>,
    /// <p>Additional information about the current status of the Autonomous VM, if applicable.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Autonomous VM.</p>
    pub vm_name: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the database server hosting this Autonomous VM.</p>
    pub db_server_id: ::std::option::Option<::std::string::String>,
    /// <p>The display name of the database server hosting this Autonomous VM.</p>
    pub db_server_display_name: ::std::option::Option<::std::string::String>,
    /// <p>The number of CPU cores allocated to this Autonomous VM.</p>
    pub cpu_core_count: ::std::option::Option<i32>,
    /// <p>The amount of memory allocated to this Autonomous VM, in gigabytes (GB).</p>
    pub memory_size_in_gbs: ::std::option::Option<i32>,
    /// <p>The amount of storage allocated to this Autonomous Virtual Machine, in gigabytes (GB).</p>
    pub db_node_storage_size_in_gbs: ::std::option::Option<i32>,
    /// <p>The IP address used by clients to connect to this Autonomous VM.</p>
    pub client_ip_address: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the Autonomous VM cluster containing this Autonomous VM.</p>
    pub cloud_autonomous_vm_cluster_id: ::std::option::Option<::std::string::String>,
    /// <p>The Oracle Cloud Identifier (OCID) of the Autonomous VM.</p>
    pub ocid: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Oracle Cloud Infrastructure (OCI) resource anchor associated with this Autonomous VM.</p>
    pub oci_resource_anchor_name: ::std::option::Option<::std::string::String>,
}
impl AutonomousVirtualMachineSummary {
    /// <p>The unique identifier of the Autonomous VM.</p>
    pub fn autonomous_virtual_machine_id(&self) -> ::std::option::Option<&str> {
        self.autonomous_virtual_machine_id.as_deref()
    }
    /// <p>The current status of the Autonomous VM.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ResourceStatus> {
        self.status.as_ref()
    }
    /// <p>Additional information about the current status of the Autonomous VM, if applicable.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The name of the Autonomous VM.</p>
    pub fn vm_name(&self) -> ::std::option::Option<&str> {
        self.vm_name.as_deref()
    }
    /// <p>The unique identifier of the database server hosting this Autonomous VM.</p>
    pub fn db_server_id(&self) -> ::std::option::Option<&str> {
        self.db_server_id.as_deref()
    }
    /// <p>The display name of the database server hosting this Autonomous VM.</p>
    pub fn db_server_display_name(&self) -> ::std::option::Option<&str> {
        self.db_server_display_name.as_deref()
    }
    /// <p>The number of CPU cores allocated to this Autonomous VM.</p>
    pub fn cpu_core_count(&self) -> ::std::option::Option<i32> {
        self.cpu_core_count
    }
    /// <p>The amount of memory allocated to this Autonomous VM, in gigabytes (GB).</p>
    pub fn memory_size_in_gbs(&self) -> ::std::option::Option<i32> {
        self.memory_size_in_gbs
    }
    /// <p>The amount of storage allocated to this Autonomous Virtual Machine, in gigabytes (GB).</p>
    pub fn db_node_storage_size_in_gbs(&self) -> ::std::option::Option<i32> {
        self.db_node_storage_size_in_gbs
    }
    /// <p>The IP address used by clients to connect to this Autonomous VM.</p>
    pub fn client_ip_address(&self) -> ::std::option::Option<&str> {
        self.client_ip_address.as_deref()
    }
    /// <p>The unique identifier of the Autonomous VM cluster containing this Autonomous VM.</p>
    pub fn cloud_autonomous_vm_cluster_id(&self) -> ::std::option::Option<&str> {
        self.cloud_autonomous_vm_cluster_id.as_deref()
    }
    /// <p>The Oracle Cloud Identifier (OCID) of the Autonomous VM.</p>
    pub fn ocid(&self) -> ::std::option::Option<&str> {
        self.ocid.as_deref()
    }
    /// <p>The name of the Oracle Cloud Infrastructure (OCI) resource anchor associated with this Autonomous VM.</p>
    pub fn oci_resource_anchor_name(&self) -> ::std::option::Option<&str> {
        self.oci_resource_anchor_name.as_deref()
    }
}
impl AutonomousVirtualMachineSummary {
    /// Creates a new builder-style object to manufacture [`AutonomousVirtualMachineSummary`](crate::types::AutonomousVirtualMachineSummary).
    pub fn builder() -> crate::types::builders::AutonomousVirtualMachineSummaryBuilder {
        crate::types::builders::AutonomousVirtualMachineSummaryBuilder::default()
    }
}

/// A builder for [`AutonomousVirtualMachineSummary`](crate::types::AutonomousVirtualMachineSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutonomousVirtualMachineSummaryBuilder {
    pub(crate) autonomous_virtual_machine_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ResourceStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) vm_name: ::std::option::Option<::std::string::String>,
    pub(crate) db_server_id: ::std::option::Option<::std::string::String>,
    pub(crate) db_server_display_name: ::std::option::Option<::std::string::String>,
    pub(crate) cpu_core_count: ::std::option::Option<i32>,
    pub(crate) memory_size_in_gbs: ::std::option::Option<i32>,
    pub(crate) db_node_storage_size_in_gbs: ::std::option::Option<i32>,
    pub(crate) client_ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) cloud_autonomous_vm_cluster_id: ::std::option::Option<::std::string::String>,
    pub(crate) ocid: ::std::option::Option<::std::string::String>,
    pub(crate) oci_resource_anchor_name: ::std::option::Option<::std::string::String>,
}
impl AutonomousVirtualMachineSummaryBuilder {
    /// <p>The unique identifier of the Autonomous VM.</p>
    pub fn autonomous_virtual_machine_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.autonomous_virtual_machine_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Autonomous VM.</p>
    pub fn set_autonomous_virtual_machine_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.autonomous_virtual_machine_id = input;
        self
    }
    /// <p>The unique identifier of the Autonomous VM.</p>
    pub fn get_autonomous_virtual_machine_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.autonomous_virtual_machine_id
    }
    /// <p>The current status of the Autonomous VM.</p>
    pub fn status(mut self, input: crate::types::ResourceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the Autonomous VM.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ResourceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the Autonomous VM.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ResourceStatus> {
        &self.status
    }
    /// <p>Additional information about the current status of the Autonomous VM, if applicable.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Additional information about the current status of the Autonomous VM, if applicable.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>Additional information about the current status of the Autonomous VM, if applicable.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The name of the Autonomous VM.</p>
    pub fn vm_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vm_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Autonomous VM.</p>
    pub fn set_vm_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vm_name = input;
        self
    }
    /// <p>The name of the Autonomous VM.</p>
    pub fn get_vm_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vm_name
    }
    /// <p>The unique identifier of the database server hosting this Autonomous VM.</p>
    pub fn db_server_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_server_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the database server hosting this Autonomous VM.</p>
    pub fn set_db_server_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_server_id = input;
        self
    }
    /// <p>The unique identifier of the database server hosting this Autonomous VM.</p>
    pub fn get_db_server_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_server_id
    }
    /// <p>The display name of the database server hosting this Autonomous VM.</p>
    pub fn db_server_display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_server_display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the database server hosting this Autonomous VM.</p>
    pub fn set_db_server_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_server_display_name = input;
        self
    }
    /// <p>The display name of the database server hosting this Autonomous VM.</p>
    pub fn get_db_server_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_server_display_name
    }
    /// <p>The number of CPU cores allocated to this Autonomous VM.</p>
    pub fn cpu_core_count(mut self, input: i32) -> Self {
        self.cpu_core_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of CPU cores allocated to this Autonomous VM.</p>
    pub fn set_cpu_core_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.cpu_core_count = input;
        self
    }
    /// <p>The number of CPU cores allocated to this Autonomous VM.</p>
    pub fn get_cpu_core_count(&self) -> &::std::option::Option<i32> {
        &self.cpu_core_count
    }
    /// <p>The amount of memory allocated to this Autonomous VM, in gigabytes (GB).</p>
    pub fn memory_size_in_gbs(mut self, input: i32) -> Self {
        self.memory_size_in_gbs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of memory allocated to this Autonomous VM, in gigabytes (GB).</p>
    pub fn set_memory_size_in_gbs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.memory_size_in_gbs = input;
        self
    }
    /// <p>The amount of memory allocated to this Autonomous VM, in gigabytes (GB).</p>
    pub fn get_memory_size_in_gbs(&self) -> &::std::option::Option<i32> {
        &self.memory_size_in_gbs
    }
    /// <p>The amount of storage allocated to this Autonomous Virtual Machine, in gigabytes (GB).</p>
    pub fn db_node_storage_size_in_gbs(mut self, input: i32) -> Self {
        self.db_node_storage_size_in_gbs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of storage allocated to this Autonomous Virtual Machine, in gigabytes (GB).</p>
    pub fn set_db_node_storage_size_in_gbs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.db_node_storage_size_in_gbs = input;
        self
    }
    /// <p>The amount of storage allocated to this Autonomous Virtual Machine, in gigabytes (GB).</p>
    pub fn get_db_node_storage_size_in_gbs(&self) -> &::std::option::Option<i32> {
        &self.db_node_storage_size_in_gbs
    }
    /// <p>The IP address used by clients to connect to this Autonomous VM.</p>
    pub fn client_ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address used by clients to connect to this Autonomous VM.</p>
    pub fn set_client_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_ip_address = input;
        self
    }
    /// <p>The IP address used by clients to connect to this Autonomous VM.</p>
    pub fn get_client_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_ip_address
    }
    /// <p>The unique identifier of the Autonomous VM cluster containing this Autonomous VM.</p>
    pub fn cloud_autonomous_vm_cluster_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloud_autonomous_vm_cluster_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Autonomous VM cluster containing this Autonomous VM.</p>
    pub fn set_cloud_autonomous_vm_cluster_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloud_autonomous_vm_cluster_id = input;
        self
    }
    /// <p>The unique identifier of the Autonomous VM cluster containing this Autonomous VM.</p>
    pub fn get_cloud_autonomous_vm_cluster_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloud_autonomous_vm_cluster_id
    }
    /// <p>The Oracle Cloud Identifier (OCID) of the Autonomous VM.</p>
    pub fn ocid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ocid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Oracle Cloud Identifier (OCID) of the Autonomous VM.</p>
    pub fn set_ocid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ocid = input;
        self
    }
    /// <p>The Oracle Cloud Identifier (OCID) of the Autonomous VM.</p>
    pub fn get_ocid(&self) -> &::std::option::Option<::std::string::String> {
        &self.ocid
    }
    /// <p>The name of the Oracle Cloud Infrastructure (OCI) resource anchor associated with this Autonomous VM.</p>
    pub fn oci_resource_anchor_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.oci_resource_anchor_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Oracle Cloud Infrastructure (OCI) resource anchor associated with this Autonomous VM.</p>
    pub fn set_oci_resource_anchor_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.oci_resource_anchor_name = input;
        self
    }
    /// <p>The name of the Oracle Cloud Infrastructure (OCI) resource anchor associated with this Autonomous VM.</p>
    pub fn get_oci_resource_anchor_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.oci_resource_anchor_name
    }
    /// Consumes the builder and constructs a [`AutonomousVirtualMachineSummary`](crate::types::AutonomousVirtualMachineSummary).
    pub fn build(self) -> crate::types::AutonomousVirtualMachineSummary {
        crate::types::AutonomousVirtualMachineSummary {
            autonomous_virtual_machine_id: self.autonomous_virtual_machine_id,
            status: self.status,
            status_reason: self.status_reason,
            vm_name: self.vm_name,
            db_server_id: self.db_server_id,
            db_server_display_name: self.db_server_display_name,
            cpu_core_count: self.cpu_core_count,
            memory_size_in_gbs: self.memory_size_in_gbs,
            db_node_storage_size_in_gbs: self.db_node_storage_size_in_gbs,
            client_ip_address: self.client_ip_address,
            cloud_autonomous_vm_cluster_id: self.cloud_autonomous_vm_cluster_id,
            ocid: self.ocid,
            oci_resource_anchor_name: self.oci_resource_anchor_name,
        }
    }
}
