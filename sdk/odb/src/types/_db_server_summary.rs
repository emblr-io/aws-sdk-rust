// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a database server.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DbServerSummary {
    /// <p>The unique identifier of the database server.</p>
    pub db_server_id: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the database server.</p>
    pub status: ::std::option::Option<crate::types::ResourceStatus>,
    /// <p>Additional information about the status of the database server.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The number of CPU cores enabled on the database server.</p>
    pub cpu_core_count: ::std::option::Option<i32>,
    /// <p>The amount of local node storage, in gigabytes (GB), that's allocated on the database server.</p>
    pub db_node_storage_size_in_gbs: ::std::option::Option<i32>,
    /// <p>The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.</p>
    pub db_server_patching_details: ::std::option::Option<crate::types::DbServerPatchingDetails>,
    /// <p>The user-friendly name of the database server. The name doesn't need to be unique.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Exadata infrastructure that hosts the database server.</p>
    pub exadata_infrastructure_id: ::std::option::Option<::std::string::String>,
    /// <p>The OCID of the database server.</p>
    pub ocid: ::std::option::Option<::std::string::String>,
    /// <p>The name of the OCI resource anchor for the database server.</p>
    pub oci_resource_anchor_name: ::std::option::Option<::std::string::String>,
    /// <p>The total number of CPU cores available on the database server.</p>
    pub max_cpu_count: ::std::option::Option<i32>,
    /// <p>The total amount of local node storage, in gigabytes (GB), that's available on the database server.</p>
    pub max_db_node_storage_in_gbs: ::std::option::Option<i32>,
    /// <p>The total amount of memory, in gigabytes (GB), that's available on the database server.</p>
    pub max_memory_in_gbs: ::std::option::Option<i32>,
    /// <p>The amount of memory, in gigabytes (GB), that's allocated on the database server.</p>
    pub memory_size_in_gbs: ::std::option::Option<i32>,
    /// <p>The hardware system model of the Exadata infrastructure that the database server is hosted on. The shape determines the amount of CPU, storage, and memory resources available.</p>
    pub shape: ::std::option::Option<::std::string::String>,
    /// <p>The date and time when the database server was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The IDs of the VM clusters that are associated with the database server.</p>
    pub vm_cluster_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.</p>
    pub compute_model: ::std::option::Option<crate::types::ComputeModel>,
    /// <p>A list of identifiers for the Autonomous VM clusters.</p>
    pub autonomous_vm_cluster_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of unique identifiers for the Autonomous VMs.</p>
    pub autonomous_virtual_machine_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DbServerSummary {
    /// <p>The unique identifier of the database server.</p>
    pub fn db_server_id(&self) -> ::std::option::Option<&str> {
        self.db_server_id.as_deref()
    }
    /// <p>The current status of the database server.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ResourceStatus> {
        self.status.as_ref()
    }
    /// <p>Additional information about the status of the database server.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The number of CPU cores enabled on the database server.</p>
    pub fn cpu_core_count(&self) -> ::std::option::Option<i32> {
        self.cpu_core_count
    }
    /// <p>The amount of local node storage, in gigabytes (GB), that's allocated on the database server.</p>
    pub fn db_node_storage_size_in_gbs(&self) -> ::std::option::Option<i32> {
        self.db_node_storage_size_in_gbs
    }
    /// <p>The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.</p>
    pub fn db_server_patching_details(&self) -> ::std::option::Option<&crate::types::DbServerPatchingDetails> {
        self.db_server_patching_details.as_ref()
    }
    /// <p>The user-friendly name of the database server. The name doesn't need to be unique.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The ID of the Exadata infrastructure that hosts the database server.</p>
    pub fn exadata_infrastructure_id(&self) -> ::std::option::Option<&str> {
        self.exadata_infrastructure_id.as_deref()
    }
    /// <p>The OCID of the database server.</p>
    pub fn ocid(&self) -> ::std::option::Option<&str> {
        self.ocid.as_deref()
    }
    /// <p>The name of the OCI resource anchor for the database server.</p>
    pub fn oci_resource_anchor_name(&self) -> ::std::option::Option<&str> {
        self.oci_resource_anchor_name.as_deref()
    }
    /// <p>The total number of CPU cores available on the database server.</p>
    pub fn max_cpu_count(&self) -> ::std::option::Option<i32> {
        self.max_cpu_count
    }
    /// <p>The total amount of local node storage, in gigabytes (GB), that's available on the database server.</p>
    pub fn max_db_node_storage_in_gbs(&self) -> ::std::option::Option<i32> {
        self.max_db_node_storage_in_gbs
    }
    /// <p>The total amount of memory, in gigabytes (GB), that's available on the database server.</p>
    pub fn max_memory_in_gbs(&self) -> ::std::option::Option<i32> {
        self.max_memory_in_gbs
    }
    /// <p>The amount of memory, in gigabytes (GB), that's allocated on the database server.</p>
    pub fn memory_size_in_gbs(&self) -> ::std::option::Option<i32> {
        self.memory_size_in_gbs
    }
    /// <p>The hardware system model of the Exadata infrastructure that the database server is hosted on. The shape determines the amount of CPU, storage, and memory resources available.</p>
    pub fn shape(&self) -> ::std::option::Option<&str> {
        self.shape.as_deref()
    }
    /// <p>The date and time when the database server was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The IDs of the VM clusters that are associated with the database server.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.vm_cluster_ids.is_none()`.
    pub fn vm_cluster_ids(&self) -> &[::std::string::String] {
        self.vm_cluster_ids.as_deref().unwrap_or_default()
    }
    /// <p>The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.</p>
    pub fn compute_model(&self) -> ::std::option::Option<&crate::types::ComputeModel> {
        self.compute_model.as_ref()
    }
    /// <p>A list of identifiers for the Autonomous VM clusters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.autonomous_vm_cluster_ids.is_none()`.
    pub fn autonomous_vm_cluster_ids(&self) -> &[::std::string::String] {
        self.autonomous_vm_cluster_ids.as_deref().unwrap_or_default()
    }
    /// <p>A list of unique identifiers for the Autonomous VMs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.autonomous_virtual_machine_ids.is_none()`.
    pub fn autonomous_virtual_machine_ids(&self) -> &[::std::string::String] {
        self.autonomous_virtual_machine_ids.as_deref().unwrap_or_default()
    }
}
impl DbServerSummary {
    /// Creates a new builder-style object to manufacture [`DbServerSummary`](crate::types::DbServerSummary).
    pub fn builder() -> crate::types::builders::DbServerSummaryBuilder {
        crate::types::builders::DbServerSummaryBuilder::default()
    }
}

/// A builder for [`DbServerSummary`](crate::types::DbServerSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DbServerSummaryBuilder {
    pub(crate) db_server_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ResourceStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) cpu_core_count: ::std::option::Option<i32>,
    pub(crate) db_node_storage_size_in_gbs: ::std::option::Option<i32>,
    pub(crate) db_server_patching_details: ::std::option::Option<crate::types::DbServerPatchingDetails>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) exadata_infrastructure_id: ::std::option::Option<::std::string::String>,
    pub(crate) ocid: ::std::option::Option<::std::string::String>,
    pub(crate) oci_resource_anchor_name: ::std::option::Option<::std::string::String>,
    pub(crate) max_cpu_count: ::std::option::Option<i32>,
    pub(crate) max_db_node_storage_in_gbs: ::std::option::Option<i32>,
    pub(crate) max_memory_in_gbs: ::std::option::Option<i32>,
    pub(crate) memory_size_in_gbs: ::std::option::Option<i32>,
    pub(crate) shape: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) vm_cluster_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) compute_model: ::std::option::Option<crate::types::ComputeModel>,
    pub(crate) autonomous_vm_cluster_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) autonomous_virtual_machine_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DbServerSummaryBuilder {
    /// <p>The unique identifier of the database server.</p>
    pub fn db_server_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_server_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the database server.</p>
    pub fn set_db_server_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_server_id = input;
        self
    }
    /// <p>The unique identifier of the database server.</p>
    pub fn get_db_server_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_server_id
    }
    /// <p>The current status of the database server.</p>
    pub fn status(mut self, input: crate::types::ResourceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the database server.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ResourceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the database server.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ResourceStatus> {
        &self.status
    }
    /// <p>Additional information about the status of the database server.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Additional information about the status of the database server.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>Additional information about the status of the database server.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The number of CPU cores enabled on the database server.</p>
    pub fn cpu_core_count(mut self, input: i32) -> Self {
        self.cpu_core_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of CPU cores enabled on the database server.</p>
    pub fn set_cpu_core_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.cpu_core_count = input;
        self
    }
    /// <p>The number of CPU cores enabled on the database server.</p>
    pub fn get_cpu_core_count(&self) -> &::std::option::Option<i32> {
        &self.cpu_core_count
    }
    /// <p>The amount of local node storage, in gigabytes (GB), that's allocated on the database server.</p>
    pub fn db_node_storage_size_in_gbs(mut self, input: i32) -> Self {
        self.db_node_storage_size_in_gbs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of local node storage, in gigabytes (GB), that's allocated on the database server.</p>
    pub fn set_db_node_storage_size_in_gbs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.db_node_storage_size_in_gbs = input;
        self
    }
    /// <p>The amount of local node storage, in gigabytes (GB), that's allocated on the database server.</p>
    pub fn get_db_node_storage_size_in_gbs(&self) -> &::std::option::Option<i32> {
        &self.db_node_storage_size_in_gbs
    }
    /// <p>The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.</p>
    pub fn db_server_patching_details(mut self, input: crate::types::DbServerPatchingDetails) -> Self {
        self.db_server_patching_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.</p>
    pub fn set_db_server_patching_details(mut self, input: ::std::option::Option<crate::types::DbServerPatchingDetails>) -> Self {
        self.db_server_patching_details = input;
        self
    }
    /// <p>The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.</p>
    pub fn get_db_server_patching_details(&self) -> &::std::option::Option<crate::types::DbServerPatchingDetails> {
        &self.db_server_patching_details
    }
    /// <p>The user-friendly name of the database server. The name doesn't need to be unique.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user-friendly name of the database server. The name doesn't need to be unique.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The user-friendly name of the database server. The name doesn't need to be unique.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The ID of the Exadata infrastructure that hosts the database server.</p>
    pub fn exadata_infrastructure_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.exadata_infrastructure_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Exadata infrastructure that hosts the database server.</p>
    pub fn set_exadata_infrastructure_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.exadata_infrastructure_id = input;
        self
    }
    /// <p>The ID of the Exadata infrastructure that hosts the database server.</p>
    pub fn get_exadata_infrastructure_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.exadata_infrastructure_id
    }
    /// <p>The OCID of the database server.</p>
    pub fn ocid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ocid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The OCID of the database server.</p>
    pub fn set_ocid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ocid = input;
        self
    }
    /// <p>The OCID of the database server.</p>
    pub fn get_ocid(&self) -> &::std::option::Option<::std::string::String> {
        &self.ocid
    }
    /// <p>The name of the OCI resource anchor for the database server.</p>
    pub fn oci_resource_anchor_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.oci_resource_anchor_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the OCI resource anchor for the database server.</p>
    pub fn set_oci_resource_anchor_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.oci_resource_anchor_name = input;
        self
    }
    /// <p>The name of the OCI resource anchor for the database server.</p>
    pub fn get_oci_resource_anchor_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.oci_resource_anchor_name
    }
    /// <p>The total number of CPU cores available on the database server.</p>
    pub fn max_cpu_count(mut self, input: i32) -> Self {
        self.max_cpu_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of CPU cores available on the database server.</p>
    pub fn set_max_cpu_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_cpu_count = input;
        self
    }
    /// <p>The total number of CPU cores available on the database server.</p>
    pub fn get_max_cpu_count(&self) -> &::std::option::Option<i32> {
        &self.max_cpu_count
    }
    /// <p>The total amount of local node storage, in gigabytes (GB), that's available on the database server.</p>
    pub fn max_db_node_storage_in_gbs(mut self, input: i32) -> Self {
        self.max_db_node_storage_in_gbs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total amount of local node storage, in gigabytes (GB), that's available on the database server.</p>
    pub fn set_max_db_node_storage_in_gbs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_db_node_storage_in_gbs = input;
        self
    }
    /// <p>The total amount of local node storage, in gigabytes (GB), that's available on the database server.</p>
    pub fn get_max_db_node_storage_in_gbs(&self) -> &::std::option::Option<i32> {
        &self.max_db_node_storage_in_gbs
    }
    /// <p>The total amount of memory, in gigabytes (GB), that's available on the database server.</p>
    pub fn max_memory_in_gbs(mut self, input: i32) -> Self {
        self.max_memory_in_gbs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total amount of memory, in gigabytes (GB), that's available on the database server.</p>
    pub fn set_max_memory_in_gbs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_memory_in_gbs = input;
        self
    }
    /// <p>The total amount of memory, in gigabytes (GB), that's available on the database server.</p>
    pub fn get_max_memory_in_gbs(&self) -> &::std::option::Option<i32> {
        &self.max_memory_in_gbs
    }
    /// <p>The amount of memory, in gigabytes (GB), that's allocated on the database server.</p>
    pub fn memory_size_in_gbs(mut self, input: i32) -> Self {
        self.memory_size_in_gbs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of memory, in gigabytes (GB), that's allocated on the database server.</p>
    pub fn set_memory_size_in_gbs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.memory_size_in_gbs = input;
        self
    }
    /// <p>The amount of memory, in gigabytes (GB), that's allocated on the database server.</p>
    pub fn get_memory_size_in_gbs(&self) -> &::std::option::Option<i32> {
        &self.memory_size_in_gbs
    }
    /// <p>The hardware system model of the Exadata infrastructure that the database server is hosted on. The shape determines the amount of CPU, storage, and memory resources available.</p>
    pub fn shape(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.shape = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hardware system model of the Exadata infrastructure that the database server is hosted on. The shape determines the amount of CPU, storage, and memory resources available.</p>
    pub fn set_shape(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.shape = input;
        self
    }
    /// <p>The hardware system model of the Exadata infrastructure that the database server is hosted on. The shape determines the amount of CPU, storage, and memory resources available.</p>
    pub fn get_shape(&self) -> &::std::option::Option<::std::string::String> {
        &self.shape
    }
    /// <p>The date and time when the database server was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the database server was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time when the database server was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// Appends an item to `vm_cluster_ids`.
    ///
    /// To override the contents of this collection use [`set_vm_cluster_ids`](Self::set_vm_cluster_ids).
    ///
    /// <p>The IDs of the VM clusters that are associated with the database server.</p>
    pub fn vm_cluster_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.vm_cluster_ids.unwrap_or_default();
        v.push(input.into());
        self.vm_cluster_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IDs of the VM clusters that are associated with the database server.</p>
    pub fn set_vm_cluster_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.vm_cluster_ids = input;
        self
    }
    /// <p>The IDs of the VM clusters that are associated with the database server.</p>
    pub fn get_vm_cluster_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.vm_cluster_ids
    }
    /// <p>The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.</p>
    pub fn compute_model(mut self, input: crate::types::ComputeModel) -> Self {
        self.compute_model = ::std::option::Option::Some(input);
        self
    }
    /// <p>The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.</p>
    pub fn set_compute_model(mut self, input: ::std::option::Option<crate::types::ComputeModel>) -> Self {
        self.compute_model = input;
        self
    }
    /// <p>The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.</p>
    pub fn get_compute_model(&self) -> &::std::option::Option<crate::types::ComputeModel> {
        &self.compute_model
    }
    /// Appends an item to `autonomous_vm_cluster_ids`.
    ///
    /// To override the contents of this collection use [`set_autonomous_vm_cluster_ids`](Self::set_autonomous_vm_cluster_ids).
    ///
    /// <p>A list of identifiers for the Autonomous VM clusters.</p>
    pub fn autonomous_vm_cluster_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.autonomous_vm_cluster_ids.unwrap_or_default();
        v.push(input.into());
        self.autonomous_vm_cluster_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of identifiers for the Autonomous VM clusters.</p>
    pub fn set_autonomous_vm_cluster_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.autonomous_vm_cluster_ids = input;
        self
    }
    /// <p>A list of identifiers for the Autonomous VM clusters.</p>
    pub fn get_autonomous_vm_cluster_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.autonomous_vm_cluster_ids
    }
    /// Appends an item to `autonomous_virtual_machine_ids`.
    ///
    /// To override the contents of this collection use [`set_autonomous_virtual_machine_ids`](Self::set_autonomous_virtual_machine_ids).
    ///
    /// <p>A list of unique identifiers for the Autonomous VMs.</p>
    pub fn autonomous_virtual_machine_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.autonomous_virtual_machine_ids.unwrap_or_default();
        v.push(input.into());
        self.autonomous_virtual_machine_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of unique identifiers for the Autonomous VMs.</p>
    pub fn set_autonomous_virtual_machine_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.autonomous_virtual_machine_ids = input;
        self
    }
    /// <p>A list of unique identifiers for the Autonomous VMs.</p>
    pub fn get_autonomous_virtual_machine_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.autonomous_virtual_machine_ids
    }
    /// Consumes the builder and constructs a [`DbServerSummary`](crate::types::DbServerSummary).
    pub fn build(self) -> crate::types::DbServerSummary {
        crate::types::DbServerSummary {
            db_server_id: self.db_server_id,
            status: self.status,
            status_reason: self.status_reason,
            cpu_core_count: self.cpu_core_count,
            db_node_storage_size_in_gbs: self.db_node_storage_size_in_gbs,
            db_server_patching_details: self.db_server_patching_details,
            display_name: self.display_name,
            exadata_infrastructure_id: self.exadata_infrastructure_id,
            ocid: self.ocid,
            oci_resource_anchor_name: self.oci_resource_anchor_name,
            max_cpu_count: self.max_cpu_count,
            max_db_node_storage_in_gbs: self.max_db_node_storage_in_gbs,
            max_memory_in_gbs: self.max_memory_in_gbs,
            memory_size_in_gbs: self.memory_size_in_gbs,
            shape: self.shape,
            created_at: self.created_at,
            vm_cluster_ids: self.vm_cluster_ids,
            compute_model: self.compute_model,
            autonomous_vm_cluster_ids: self.autonomous_vm_cluster_ids,
            autonomous_virtual_machine_ids: self.autonomous_virtual_machine_ids,
        }
    }
}
