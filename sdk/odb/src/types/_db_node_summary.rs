// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a DB node.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DbNodeSummary {
    /// <p>The unique identifier of the DB node.</p>
    pub db_node_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the DB node.</p>
    pub db_node_arn: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the DB node.</p>
    pub status: ::std::option::Option<crate::types::DbNodeResourceStatus>,
    /// <p>Additional information about the status of the DB node.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>Additional information about the planned maintenance.</p>
    pub additional_details: ::std::option::Option<::std::string::String>,
    /// <p>The Oracle Cloud ID (OCID) of the backup IP address that's associated with the DB node.</p>
    pub backup_ip_id: ::std::option::Option<::std::string::String>,
    /// <p>The OCID of the second backup virtual network interface card (VNIC) for the DB node.</p>
    pub backup_vnic2_id: ::std::option::Option<::std::string::String>,
    /// <p>The OCID of the backup VNIC for the DB node.</p>
    pub backup_vnic_id: ::std::option::Option<::std::string::String>,
    /// <p>The number of CPU cores enabled on the DB node.</p>
    pub cpu_core_count: ::std::option::Option<i32>,
    /// <p>The amount of local node storage, in gigabytes (GB), that's allocated on the DB node.</p>
    pub db_node_storage_size_in_gbs: ::std::option::Option<i32>,
    /// <p>The unique identifier of the database server that's associated with the DB node.</p>
    pub db_server_id: ::std::option::Option<::std::string::String>,
    /// <p>The OCID of the DB system.</p>
    pub db_system_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the fault domain where the DB node is located.</p>
    pub fault_domain: ::std::option::Option<::std::string::String>,
    /// <p>The OCID of the host IP address that's associated with the DB node.</p>
    pub host_ip_id: ::std::option::Option<::std::string::String>,
    /// <p>The host name for the DB node.</p>
    pub hostname: ::std::option::Option<::std::string::String>,
    /// <p>The OCID of the DB node.</p>
    pub ocid: ::std::option::Option<::std::string::String>,
    /// <p>The name of the OCI resource anchor for the DB node.</p>
    pub oci_resource_anchor_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of maintenance the DB node.</p>
    pub maintenance_type: ::std::option::Option<crate::types::DbNodeMaintenanceType>,
    /// <p>The amount of memory, in gigabytes (GB), that allocated on the DB node.</p>
    pub memory_size_in_gbs: ::std::option::Option<i32>,
    /// <p>The size of the block storage volume, in gigabytes (GB), that's allocated for the DB system. This attribute applies only for virtual machine DB systems.</p>
    pub software_storage_size_in_gb: ::std::option::Option<i32>,
    /// <p>The date and time when the DB node was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The end date and time of the maintenance window.</p>
    pub time_maintenance_window_end: ::std::option::Option<::std::string::String>,
    /// <p>The start date and time of the maintenance window.</p>
    pub time_maintenance_window_start: ::std::option::Option<::std::string::String>,
    /// <p>The total number of CPU cores reserved on the DB node.</p>
    pub total_cpu_core_count: ::std::option::Option<i32>,
    /// <p>The OCID of the second VNIC.</p>
    pub vnic2_id: ::std::option::Option<::std::string::String>,
    /// <p>The OCID of the VNIC.</p>
    pub vnic_id: ::std::option::Option<::std::string::String>,
}
impl DbNodeSummary {
    /// <p>The unique identifier of the DB node.</p>
    pub fn db_node_id(&self) -> ::std::option::Option<&str> {
        self.db_node_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the DB node.</p>
    pub fn db_node_arn(&self) -> ::std::option::Option<&str> {
        self.db_node_arn.as_deref()
    }
    /// <p>The current status of the DB node.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::DbNodeResourceStatus> {
        self.status.as_ref()
    }
    /// <p>Additional information about the status of the DB node.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>Additional information about the planned maintenance.</p>
    pub fn additional_details(&self) -> ::std::option::Option<&str> {
        self.additional_details.as_deref()
    }
    /// <p>The Oracle Cloud ID (OCID) of the backup IP address that's associated with the DB node.</p>
    pub fn backup_ip_id(&self) -> ::std::option::Option<&str> {
        self.backup_ip_id.as_deref()
    }
    /// <p>The OCID of the second backup virtual network interface card (VNIC) for the DB node.</p>
    pub fn backup_vnic2_id(&self) -> ::std::option::Option<&str> {
        self.backup_vnic2_id.as_deref()
    }
    /// <p>The OCID of the backup VNIC for the DB node.</p>
    pub fn backup_vnic_id(&self) -> ::std::option::Option<&str> {
        self.backup_vnic_id.as_deref()
    }
    /// <p>The number of CPU cores enabled on the DB node.</p>
    pub fn cpu_core_count(&self) -> ::std::option::Option<i32> {
        self.cpu_core_count
    }
    /// <p>The amount of local node storage, in gigabytes (GB), that's allocated on the DB node.</p>
    pub fn db_node_storage_size_in_gbs(&self) -> ::std::option::Option<i32> {
        self.db_node_storage_size_in_gbs
    }
    /// <p>The unique identifier of the database server that's associated with the DB node.</p>
    pub fn db_server_id(&self) -> ::std::option::Option<&str> {
        self.db_server_id.as_deref()
    }
    /// <p>The OCID of the DB system.</p>
    pub fn db_system_id(&self) -> ::std::option::Option<&str> {
        self.db_system_id.as_deref()
    }
    /// <p>The name of the fault domain where the DB node is located.</p>
    pub fn fault_domain(&self) -> ::std::option::Option<&str> {
        self.fault_domain.as_deref()
    }
    /// <p>The OCID of the host IP address that's associated with the DB node.</p>
    pub fn host_ip_id(&self) -> ::std::option::Option<&str> {
        self.host_ip_id.as_deref()
    }
    /// <p>The host name for the DB node.</p>
    pub fn hostname(&self) -> ::std::option::Option<&str> {
        self.hostname.as_deref()
    }
    /// <p>The OCID of the DB node.</p>
    pub fn ocid(&self) -> ::std::option::Option<&str> {
        self.ocid.as_deref()
    }
    /// <p>The name of the OCI resource anchor for the DB node.</p>
    pub fn oci_resource_anchor_name(&self) -> ::std::option::Option<&str> {
        self.oci_resource_anchor_name.as_deref()
    }
    /// <p>The type of maintenance the DB node.</p>
    pub fn maintenance_type(&self) -> ::std::option::Option<&crate::types::DbNodeMaintenanceType> {
        self.maintenance_type.as_ref()
    }
    /// <p>The amount of memory, in gigabytes (GB), that allocated on the DB node.</p>
    pub fn memory_size_in_gbs(&self) -> ::std::option::Option<i32> {
        self.memory_size_in_gbs
    }
    /// <p>The size of the block storage volume, in gigabytes (GB), that's allocated for the DB system. This attribute applies only for virtual machine DB systems.</p>
    pub fn software_storage_size_in_gb(&self) -> ::std::option::Option<i32> {
        self.software_storage_size_in_gb
    }
    /// <p>The date and time when the DB node was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The end date and time of the maintenance window.</p>
    pub fn time_maintenance_window_end(&self) -> ::std::option::Option<&str> {
        self.time_maintenance_window_end.as_deref()
    }
    /// <p>The start date and time of the maintenance window.</p>
    pub fn time_maintenance_window_start(&self) -> ::std::option::Option<&str> {
        self.time_maintenance_window_start.as_deref()
    }
    /// <p>The total number of CPU cores reserved on the DB node.</p>
    pub fn total_cpu_core_count(&self) -> ::std::option::Option<i32> {
        self.total_cpu_core_count
    }
    /// <p>The OCID of the second VNIC.</p>
    pub fn vnic2_id(&self) -> ::std::option::Option<&str> {
        self.vnic2_id.as_deref()
    }
    /// <p>The OCID of the VNIC.</p>
    pub fn vnic_id(&self) -> ::std::option::Option<&str> {
        self.vnic_id.as_deref()
    }
}
impl DbNodeSummary {
    /// Creates a new builder-style object to manufacture [`DbNodeSummary`](crate::types::DbNodeSummary).
    pub fn builder() -> crate::types::builders::DbNodeSummaryBuilder {
        crate::types::builders::DbNodeSummaryBuilder::default()
    }
}

/// A builder for [`DbNodeSummary`](crate::types::DbNodeSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DbNodeSummaryBuilder {
    pub(crate) db_node_id: ::std::option::Option<::std::string::String>,
    pub(crate) db_node_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::DbNodeResourceStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) additional_details: ::std::option::Option<::std::string::String>,
    pub(crate) backup_ip_id: ::std::option::Option<::std::string::String>,
    pub(crate) backup_vnic2_id: ::std::option::Option<::std::string::String>,
    pub(crate) backup_vnic_id: ::std::option::Option<::std::string::String>,
    pub(crate) cpu_core_count: ::std::option::Option<i32>,
    pub(crate) db_node_storage_size_in_gbs: ::std::option::Option<i32>,
    pub(crate) db_server_id: ::std::option::Option<::std::string::String>,
    pub(crate) db_system_id: ::std::option::Option<::std::string::String>,
    pub(crate) fault_domain: ::std::option::Option<::std::string::String>,
    pub(crate) host_ip_id: ::std::option::Option<::std::string::String>,
    pub(crate) hostname: ::std::option::Option<::std::string::String>,
    pub(crate) ocid: ::std::option::Option<::std::string::String>,
    pub(crate) oci_resource_anchor_name: ::std::option::Option<::std::string::String>,
    pub(crate) maintenance_type: ::std::option::Option<crate::types::DbNodeMaintenanceType>,
    pub(crate) memory_size_in_gbs: ::std::option::Option<i32>,
    pub(crate) software_storage_size_in_gb: ::std::option::Option<i32>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) time_maintenance_window_end: ::std::option::Option<::std::string::String>,
    pub(crate) time_maintenance_window_start: ::std::option::Option<::std::string::String>,
    pub(crate) total_cpu_core_count: ::std::option::Option<i32>,
    pub(crate) vnic2_id: ::std::option::Option<::std::string::String>,
    pub(crate) vnic_id: ::std::option::Option<::std::string::String>,
}
impl DbNodeSummaryBuilder {
    /// <p>The unique identifier of the DB node.</p>
    pub fn db_node_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_node_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the DB node.</p>
    pub fn set_db_node_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_node_id = input;
        self
    }
    /// <p>The unique identifier of the DB node.</p>
    pub fn get_db_node_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_node_id
    }
    /// <p>The Amazon Resource Name (ARN) of the DB node.</p>
    pub fn db_node_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_node_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the DB node.</p>
    pub fn set_db_node_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_node_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the DB node.</p>
    pub fn get_db_node_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_node_arn
    }
    /// <p>The current status of the DB node.</p>
    pub fn status(mut self, input: crate::types::DbNodeResourceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the DB node.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DbNodeResourceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the DB node.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DbNodeResourceStatus> {
        &self.status
    }
    /// <p>Additional information about the status of the DB node.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Additional information about the status of the DB node.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>Additional information about the status of the DB node.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>Additional information about the planned maintenance.</p>
    pub fn additional_details(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.additional_details = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Additional information about the planned maintenance.</p>
    pub fn set_additional_details(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.additional_details = input;
        self
    }
    /// <p>Additional information about the planned maintenance.</p>
    pub fn get_additional_details(&self) -> &::std::option::Option<::std::string::String> {
        &self.additional_details
    }
    /// <p>The Oracle Cloud ID (OCID) of the backup IP address that's associated with the DB node.</p>
    pub fn backup_ip_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_ip_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Oracle Cloud ID (OCID) of the backup IP address that's associated with the DB node.</p>
    pub fn set_backup_ip_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_ip_id = input;
        self
    }
    /// <p>The Oracle Cloud ID (OCID) of the backup IP address that's associated with the DB node.</p>
    pub fn get_backup_ip_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_ip_id
    }
    /// <p>The OCID of the second backup virtual network interface card (VNIC) for the DB node.</p>
    pub fn backup_vnic2_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_vnic2_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The OCID of the second backup virtual network interface card (VNIC) for the DB node.</p>
    pub fn set_backup_vnic2_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_vnic2_id = input;
        self
    }
    /// <p>The OCID of the second backup virtual network interface card (VNIC) for the DB node.</p>
    pub fn get_backup_vnic2_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_vnic2_id
    }
    /// <p>The OCID of the backup VNIC for the DB node.</p>
    pub fn backup_vnic_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_vnic_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The OCID of the backup VNIC for the DB node.</p>
    pub fn set_backup_vnic_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_vnic_id = input;
        self
    }
    /// <p>The OCID of the backup VNIC for the DB node.</p>
    pub fn get_backup_vnic_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_vnic_id
    }
    /// <p>The number of CPU cores enabled on the DB node.</p>
    pub fn cpu_core_count(mut self, input: i32) -> Self {
        self.cpu_core_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of CPU cores enabled on the DB node.</p>
    pub fn set_cpu_core_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.cpu_core_count = input;
        self
    }
    /// <p>The number of CPU cores enabled on the DB node.</p>
    pub fn get_cpu_core_count(&self) -> &::std::option::Option<i32> {
        &self.cpu_core_count
    }
    /// <p>The amount of local node storage, in gigabytes (GB), that's allocated on the DB node.</p>
    pub fn db_node_storage_size_in_gbs(mut self, input: i32) -> Self {
        self.db_node_storage_size_in_gbs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of local node storage, in gigabytes (GB), that's allocated on the DB node.</p>
    pub fn set_db_node_storage_size_in_gbs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.db_node_storage_size_in_gbs = input;
        self
    }
    /// <p>The amount of local node storage, in gigabytes (GB), that's allocated on the DB node.</p>
    pub fn get_db_node_storage_size_in_gbs(&self) -> &::std::option::Option<i32> {
        &self.db_node_storage_size_in_gbs
    }
    /// <p>The unique identifier of the database server that's associated with the DB node.</p>
    pub fn db_server_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_server_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the database server that's associated with the DB node.</p>
    pub fn set_db_server_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_server_id = input;
        self
    }
    /// <p>The unique identifier of the database server that's associated with the DB node.</p>
    pub fn get_db_server_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_server_id
    }
    /// <p>The OCID of the DB system.</p>
    pub fn db_system_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_system_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The OCID of the DB system.</p>
    pub fn set_db_system_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_system_id = input;
        self
    }
    /// <p>The OCID of the DB system.</p>
    pub fn get_db_system_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_system_id
    }
    /// <p>The name of the fault domain where the DB node is located.</p>
    pub fn fault_domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fault_domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the fault domain where the DB node is located.</p>
    pub fn set_fault_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fault_domain = input;
        self
    }
    /// <p>The name of the fault domain where the DB node is located.</p>
    pub fn get_fault_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.fault_domain
    }
    /// <p>The OCID of the host IP address that's associated with the DB node.</p>
    pub fn host_ip_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.host_ip_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The OCID of the host IP address that's associated with the DB node.</p>
    pub fn set_host_ip_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.host_ip_id = input;
        self
    }
    /// <p>The OCID of the host IP address that's associated with the DB node.</p>
    pub fn get_host_ip_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.host_ip_id
    }
    /// <p>The host name for the DB node.</p>
    pub fn hostname(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hostname = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The host name for the DB node.</p>
    pub fn set_hostname(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hostname = input;
        self
    }
    /// <p>The host name for the DB node.</p>
    pub fn get_hostname(&self) -> &::std::option::Option<::std::string::String> {
        &self.hostname
    }
    /// <p>The OCID of the DB node.</p>
    pub fn ocid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ocid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The OCID of the DB node.</p>
    pub fn set_ocid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ocid = input;
        self
    }
    /// <p>The OCID of the DB node.</p>
    pub fn get_ocid(&self) -> &::std::option::Option<::std::string::String> {
        &self.ocid
    }
    /// <p>The name of the OCI resource anchor for the DB node.</p>
    pub fn oci_resource_anchor_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.oci_resource_anchor_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the OCI resource anchor for the DB node.</p>
    pub fn set_oci_resource_anchor_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.oci_resource_anchor_name = input;
        self
    }
    /// <p>The name of the OCI resource anchor for the DB node.</p>
    pub fn get_oci_resource_anchor_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.oci_resource_anchor_name
    }
    /// <p>The type of maintenance the DB node.</p>
    pub fn maintenance_type(mut self, input: crate::types::DbNodeMaintenanceType) -> Self {
        self.maintenance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of maintenance the DB node.</p>
    pub fn set_maintenance_type(mut self, input: ::std::option::Option<crate::types::DbNodeMaintenanceType>) -> Self {
        self.maintenance_type = input;
        self
    }
    /// <p>The type of maintenance the DB node.</p>
    pub fn get_maintenance_type(&self) -> &::std::option::Option<crate::types::DbNodeMaintenanceType> {
        &self.maintenance_type
    }
    /// <p>The amount of memory, in gigabytes (GB), that allocated on the DB node.</p>
    pub fn memory_size_in_gbs(mut self, input: i32) -> Self {
        self.memory_size_in_gbs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of memory, in gigabytes (GB), that allocated on the DB node.</p>
    pub fn set_memory_size_in_gbs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.memory_size_in_gbs = input;
        self
    }
    /// <p>The amount of memory, in gigabytes (GB), that allocated on the DB node.</p>
    pub fn get_memory_size_in_gbs(&self) -> &::std::option::Option<i32> {
        &self.memory_size_in_gbs
    }
    /// <p>The size of the block storage volume, in gigabytes (GB), that's allocated for the DB system. This attribute applies only for virtual machine DB systems.</p>
    pub fn software_storage_size_in_gb(mut self, input: i32) -> Self {
        self.software_storage_size_in_gb = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the block storage volume, in gigabytes (GB), that's allocated for the DB system. This attribute applies only for virtual machine DB systems.</p>
    pub fn set_software_storage_size_in_gb(mut self, input: ::std::option::Option<i32>) -> Self {
        self.software_storage_size_in_gb = input;
        self
    }
    /// <p>The size of the block storage volume, in gigabytes (GB), that's allocated for the DB system. This attribute applies only for virtual machine DB systems.</p>
    pub fn get_software_storage_size_in_gb(&self) -> &::std::option::Option<i32> {
        &self.software_storage_size_in_gb
    }
    /// <p>The date and time when the DB node was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the DB node was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time when the DB node was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The end date and time of the maintenance window.</p>
    pub fn time_maintenance_window_end(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.time_maintenance_window_end = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The end date and time of the maintenance window.</p>
    pub fn set_time_maintenance_window_end(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.time_maintenance_window_end = input;
        self
    }
    /// <p>The end date and time of the maintenance window.</p>
    pub fn get_time_maintenance_window_end(&self) -> &::std::option::Option<::std::string::String> {
        &self.time_maintenance_window_end
    }
    /// <p>The start date and time of the maintenance window.</p>
    pub fn time_maintenance_window_start(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.time_maintenance_window_start = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The start date and time of the maintenance window.</p>
    pub fn set_time_maintenance_window_start(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.time_maintenance_window_start = input;
        self
    }
    /// <p>The start date and time of the maintenance window.</p>
    pub fn get_time_maintenance_window_start(&self) -> &::std::option::Option<::std::string::String> {
        &self.time_maintenance_window_start
    }
    /// <p>The total number of CPU cores reserved on the DB node.</p>
    pub fn total_cpu_core_count(mut self, input: i32) -> Self {
        self.total_cpu_core_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of CPU cores reserved on the DB node.</p>
    pub fn set_total_cpu_core_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_cpu_core_count = input;
        self
    }
    /// <p>The total number of CPU cores reserved on the DB node.</p>
    pub fn get_total_cpu_core_count(&self) -> &::std::option::Option<i32> {
        &self.total_cpu_core_count
    }
    /// <p>The OCID of the second VNIC.</p>
    pub fn vnic2_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vnic2_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The OCID of the second VNIC.</p>
    pub fn set_vnic2_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vnic2_id = input;
        self
    }
    /// <p>The OCID of the second VNIC.</p>
    pub fn get_vnic2_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vnic2_id
    }
    /// <p>The OCID of the VNIC.</p>
    pub fn vnic_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vnic_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The OCID of the VNIC.</p>
    pub fn set_vnic_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vnic_id = input;
        self
    }
    /// <p>The OCID of the VNIC.</p>
    pub fn get_vnic_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vnic_id
    }
    /// Consumes the builder and constructs a [`DbNodeSummary`](crate::types::DbNodeSummary).
    pub fn build(self) -> crate::types::DbNodeSummary {
        crate::types::DbNodeSummary {
            db_node_id: self.db_node_id,
            db_node_arn: self.db_node_arn,
            status: self.status,
            status_reason: self.status_reason,
            additional_details: self.additional_details,
            backup_ip_id: self.backup_ip_id,
            backup_vnic2_id: self.backup_vnic2_id,
            backup_vnic_id: self.backup_vnic_id,
            cpu_core_count: self.cpu_core_count,
            db_node_storage_size_in_gbs: self.db_node_storage_size_in_gbs,
            db_server_id: self.db_server_id,
            db_system_id: self.db_system_id,
            fault_domain: self.fault_domain,
            host_ip_id: self.host_ip_id,
            hostname: self.hostname,
            ocid: self.ocid,
            oci_resource_anchor_name: self.oci_resource_anchor_name,
            maintenance_type: self.maintenance_type,
            memory_size_in_gbs: self.memory_size_in_gbs,
            software_storage_size_in_gb: self.software_storage_size_in_gb,
            created_at: self.created_at,
            time_maintenance_window_end: self.time_maintenance_window_end,
            time_maintenance_window_start: self.time_maintenance_window_start,
            total_cpu_core_count: self.total_cpu_core_count,
            vnic2_id: self.vnic2_id,
            vnic_id: self.vnic_id,
        }
    }
}
