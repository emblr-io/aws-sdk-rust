// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>DNS configuration to forward DNS resolver endpoints to your OCI Private Zone.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OciDnsForwardingConfig {
    /// <p>Domain name to which DNS resolver forwards to.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>OCI DNS listener IP for custom DNS setup.</p>
    pub oci_dns_listener_ip: ::std::option::Option<::std::string::String>,
}
impl OciDnsForwardingConfig {
    /// <p>Domain name to which DNS resolver forwards to.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>OCI DNS listener IP for custom DNS setup.</p>
    pub fn oci_dns_listener_ip(&self) -> ::std::option::Option<&str> {
        self.oci_dns_listener_ip.as_deref()
    }
}
impl OciDnsForwardingConfig {
    /// Creates a new builder-style object to manufacture [`OciDnsForwardingConfig`](crate::types::OciDnsForwardingConfig).
    pub fn builder() -> crate::types::builders::OciDnsForwardingConfigBuilder {
        crate::types::builders::OciDnsForwardingConfigBuilder::default()
    }
}

/// A builder for [`OciDnsForwardingConfig`](crate::types::OciDnsForwardingConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OciDnsForwardingConfigBuilder {
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) oci_dns_listener_ip: ::std::option::Option<::std::string::String>,
}
impl OciDnsForwardingConfigBuilder {
    /// <p>Domain name to which DNS resolver forwards to.</p>
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Domain name to which DNS resolver forwards to.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>Domain name to which DNS resolver forwards to.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>OCI DNS listener IP for custom DNS setup.</p>
    pub fn oci_dns_listener_ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.oci_dns_listener_ip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>OCI DNS listener IP for custom DNS setup.</p>
    pub fn set_oci_dns_listener_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.oci_dns_listener_ip = input;
        self
    }
    /// <p>OCI DNS listener IP for custom DNS setup.</p>
    pub fn get_oci_dns_listener_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.oci_dns_listener_ip
    }
    /// Consumes the builder and constructs a [`OciDnsForwardingConfig`](crate::types::OciDnsForwardingConfig).
    pub fn build(self) -> crate::types::OciDnsForwardingConfig {
        crate::types::OciDnsForwardingConfig {
            domain_name: self.domain_name,
            oci_dns_listener_ip: self.oci_dns_listener_ip,
        }
    }
}
