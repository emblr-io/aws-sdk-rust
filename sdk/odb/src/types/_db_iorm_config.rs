// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The IORM configuration settings for the database.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DbIormConfig {
    /// <p>The database name. For the default DbPlan, the dbName is <code>default</code>.</p>
    pub db_name: ::std::option::Option<::std::string::String>,
    /// <p>The flash cache limit for this database. This value is internally configured based on the share value assigned to the database.</p>
    pub flash_cache_limit: ::std::option::Option<::std::string::String>,
    /// <p>The relative priority of this database.</p>
    pub share: ::std::option::Option<i32>,
}
impl DbIormConfig {
    /// <p>The database name. For the default DbPlan, the dbName is <code>default</code>.</p>
    pub fn db_name(&self) -> ::std::option::Option<&str> {
        self.db_name.as_deref()
    }
    /// <p>The flash cache limit for this database. This value is internally configured based on the share value assigned to the database.</p>
    pub fn flash_cache_limit(&self) -> ::std::option::Option<&str> {
        self.flash_cache_limit.as_deref()
    }
    /// <p>The relative priority of this database.</p>
    pub fn share(&self) -> ::std::option::Option<i32> {
        self.share
    }
}
impl DbIormConfig {
    /// Creates a new builder-style object to manufacture [`DbIormConfig`](crate::types::DbIormConfig).
    pub fn builder() -> crate::types::builders::DbIormConfigBuilder {
        crate::types::builders::DbIormConfigBuilder::default()
    }
}

/// A builder for [`DbIormConfig`](crate::types::DbIormConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DbIormConfigBuilder {
    pub(crate) db_name: ::std::option::Option<::std::string::String>,
    pub(crate) flash_cache_limit: ::std::option::Option<::std::string::String>,
    pub(crate) share: ::std::option::Option<i32>,
}
impl DbIormConfigBuilder {
    /// <p>The database name. For the default DbPlan, the dbName is <code>default</code>.</p>
    pub fn db_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database name. For the default DbPlan, the dbName is <code>default</code>.</p>
    pub fn set_db_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_name = input;
        self
    }
    /// <p>The database name. For the default DbPlan, the dbName is <code>default</code>.</p>
    pub fn get_db_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_name
    }
    /// <p>The flash cache limit for this database. This value is internally configured based on the share value assigned to the database.</p>
    pub fn flash_cache_limit(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.flash_cache_limit = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The flash cache limit for this database. This value is internally configured based on the share value assigned to the database.</p>
    pub fn set_flash_cache_limit(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.flash_cache_limit = input;
        self
    }
    /// <p>The flash cache limit for this database. This value is internally configured based on the share value assigned to the database.</p>
    pub fn get_flash_cache_limit(&self) -> &::std::option::Option<::std::string::String> {
        &self.flash_cache_limit
    }
    /// <p>The relative priority of this database.</p>
    pub fn share(mut self, input: i32) -> Self {
        self.share = ::std::option::Option::Some(input);
        self
    }
    /// <p>The relative priority of this database.</p>
    pub fn set_share(mut self, input: ::std::option::Option<i32>) -> Self {
        self.share = input;
        self
    }
    /// <p>The relative priority of this database.</p>
    pub fn get_share(&self) -> &::std::option::Option<i32> {
        &self.share
    }
    /// Consumes the builder and constructs a [`DbIormConfig`](crate::types::DbIormConfig).
    pub fn build(self) -> crate::types::DbIormConfig {
        crate::types::DbIormConfig {
            db_name: self.db_name,
            flash_cache_limit: self.flash_cache_limit,
            share: self.share,
        }
    }
}
