// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A contact to receive notification from Oracle about maintenance updates for a specific Exadata infrastructure.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CustomerContact {
    /// <p>The email address of the contact.</p>
    pub email: ::std::option::Option<::std::string::String>,
}
impl CustomerContact {
    /// <p>The email address of the contact.</p>
    pub fn email(&self) -> ::std::option::Option<&str> {
        self.email.as_deref()
    }
}
impl ::std::fmt::Debug for CustomerContact {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CustomerContact");
        formatter.field("email", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CustomerContact {
    /// Creates a new builder-style object to manufacture [`CustomerContact`](crate::types::CustomerContact).
    pub fn builder() -> crate::types::builders::CustomerContactBuilder {
        crate::types::builders::CustomerContactBuilder::default()
    }
}

/// A builder for [`CustomerContact`](crate::types::CustomerContact).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CustomerContactBuilder {
    pub(crate) email: ::std::option::Option<::std::string::String>,
}
impl CustomerContactBuilder {
    /// <p>The email address of the contact.</p>
    pub fn email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address of the contact.</p>
    pub fn set_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email = input;
        self
    }
    /// <p>The email address of the contact.</p>
    pub fn get_email(&self) -> &::std::option::Option<::std::string::String> {
        &self.email
    }
    /// Consumes the builder and constructs a [`CustomerContact`](crate::types::CustomerContact).
    pub fn build(self) -> crate::types::CustomerContact {
        crate::types::CustomerContact { email: self.email }
    }
}
impl ::std::fmt::Debug for CustomerContactBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CustomerContactBuilder");
        formatter.field("email", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
