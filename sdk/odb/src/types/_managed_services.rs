// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The managed services configuration for the ODB network.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ManagedServices {
    /// <p>The Amazon Resource Name (ARN) of the service network.</p>
    pub service_network_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the resource gateway.</p>
    pub resource_gateway_arn: ::std::option::Option<::std::string::String>,
    /// <p>The IPv4 CIDR blocks for the managed services.</p>
    pub managed_services_ipv4_cidrs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The service network endpoint configuration.</p>
    pub service_network_endpoint: ::std::option::Option<crate::types::ServiceNetworkEndpoint>,
    /// <p>The managed Amazon S3 backup access configuration.</p>
    pub managed_s3_backup_access: ::std::option::Option<crate::types::ManagedS3BackupAccess>,
    /// <p>The Zero-ETL access configuration.</p>
    pub zero_etl_access: ::std::option::Option<crate::types::ZeroEtlAccess>,
    /// <p>The Amazon S3 access configuration.</p>
    pub s3_access: ::std::option::Option<crate::types::S3Access>,
}
impl ManagedServices {
    /// <p>The Amazon Resource Name (ARN) of the service network.</p>
    pub fn service_network_arn(&self) -> ::std::option::Option<&str> {
        self.service_network_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the resource gateway.</p>
    pub fn resource_gateway_arn(&self) -> ::std::option::Option<&str> {
        self.resource_gateway_arn.as_deref()
    }
    /// <p>The IPv4 CIDR blocks for the managed services.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.managed_services_ipv4_cidrs.is_none()`.
    pub fn managed_services_ipv4_cidrs(&self) -> &[::std::string::String] {
        self.managed_services_ipv4_cidrs.as_deref().unwrap_or_default()
    }
    /// <p>The service network endpoint configuration.</p>
    pub fn service_network_endpoint(&self) -> ::std::option::Option<&crate::types::ServiceNetworkEndpoint> {
        self.service_network_endpoint.as_ref()
    }
    /// <p>The managed Amazon S3 backup access configuration.</p>
    pub fn managed_s3_backup_access(&self) -> ::std::option::Option<&crate::types::ManagedS3BackupAccess> {
        self.managed_s3_backup_access.as_ref()
    }
    /// <p>The Zero-ETL access configuration.</p>
    pub fn zero_etl_access(&self) -> ::std::option::Option<&crate::types::ZeroEtlAccess> {
        self.zero_etl_access.as_ref()
    }
    /// <p>The Amazon S3 access configuration.</p>
    pub fn s3_access(&self) -> ::std::option::Option<&crate::types::S3Access> {
        self.s3_access.as_ref()
    }
}
impl ManagedServices {
    /// Creates a new builder-style object to manufacture [`ManagedServices`](crate::types::ManagedServices).
    pub fn builder() -> crate::types::builders::ManagedServicesBuilder {
        crate::types::builders::ManagedServicesBuilder::default()
    }
}

/// A builder for [`ManagedServices`](crate::types::ManagedServices).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ManagedServicesBuilder {
    pub(crate) service_network_arn: ::std::option::Option<::std::string::String>,
    pub(crate) resource_gateway_arn: ::std::option::Option<::std::string::String>,
    pub(crate) managed_services_ipv4_cidrs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) service_network_endpoint: ::std::option::Option<crate::types::ServiceNetworkEndpoint>,
    pub(crate) managed_s3_backup_access: ::std::option::Option<crate::types::ManagedS3BackupAccess>,
    pub(crate) zero_etl_access: ::std::option::Option<crate::types::ZeroEtlAccess>,
    pub(crate) s3_access: ::std::option::Option<crate::types::S3Access>,
}
impl ManagedServicesBuilder {
    /// <p>The Amazon Resource Name (ARN) of the service network.</p>
    pub fn service_network_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_network_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the service network.</p>
    pub fn set_service_network_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_network_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the service network.</p>
    pub fn get_service_network_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_network_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the resource gateway.</p>
    pub fn resource_gateway_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_gateway_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource gateway.</p>
    pub fn set_resource_gateway_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_gateway_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource gateway.</p>
    pub fn get_resource_gateway_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_gateway_arn
    }
    /// Appends an item to `managed_services_ipv4_cidrs`.
    ///
    /// To override the contents of this collection use [`set_managed_services_ipv4_cidrs`](Self::set_managed_services_ipv4_cidrs).
    ///
    /// <p>The IPv4 CIDR blocks for the managed services.</p>
    pub fn managed_services_ipv4_cidrs(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.managed_services_ipv4_cidrs.unwrap_or_default();
        v.push(input.into());
        self.managed_services_ipv4_cidrs = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IPv4 CIDR blocks for the managed services.</p>
    pub fn set_managed_services_ipv4_cidrs(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.managed_services_ipv4_cidrs = input;
        self
    }
    /// <p>The IPv4 CIDR blocks for the managed services.</p>
    pub fn get_managed_services_ipv4_cidrs(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.managed_services_ipv4_cidrs
    }
    /// <p>The service network endpoint configuration.</p>
    pub fn service_network_endpoint(mut self, input: crate::types::ServiceNetworkEndpoint) -> Self {
        self.service_network_endpoint = ::std::option::Option::Some(input);
        self
    }
    /// <p>The service network endpoint configuration.</p>
    pub fn set_service_network_endpoint(mut self, input: ::std::option::Option<crate::types::ServiceNetworkEndpoint>) -> Self {
        self.service_network_endpoint = input;
        self
    }
    /// <p>The service network endpoint configuration.</p>
    pub fn get_service_network_endpoint(&self) -> &::std::option::Option<crate::types::ServiceNetworkEndpoint> {
        &self.service_network_endpoint
    }
    /// <p>The managed Amazon S3 backup access configuration.</p>
    pub fn managed_s3_backup_access(mut self, input: crate::types::ManagedS3BackupAccess) -> Self {
        self.managed_s3_backup_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>The managed Amazon S3 backup access configuration.</p>
    pub fn set_managed_s3_backup_access(mut self, input: ::std::option::Option<crate::types::ManagedS3BackupAccess>) -> Self {
        self.managed_s3_backup_access = input;
        self
    }
    /// <p>The managed Amazon S3 backup access configuration.</p>
    pub fn get_managed_s3_backup_access(&self) -> &::std::option::Option<crate::types::ManagedS3BackupAccess> {
        &self.managed_s3_backup_access
    }
    /// <p>The Zero-ETL access configuration.</p>
    pub fn zero_etl_access(mut self, input: crate::types::ZeroEtlAccess) -> Self {
        self.zero_etl_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Zero-ETL access configuration.</p>
    pub fn set_zero_etl_access(mut self, input: ::std::option::Option<crate::types::ZeroEtlAccess>) -> Self {
        self.zero_etl_access = input;
        self
    }
    /// <p>The Zero-ETL access configuration.</p>
    pub fn get_zero_etl_access(&self) -> &::std::option::Option<crate::types::ZeroEtlAccess> {
        &self.zero_etl_access
    }
    /// <p>The Amazon S3 access configuration.</p>
    pub fn s3_access(mut self, input: crate::types::S3Access) -> Self {
        self.s3_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon S3 access configuration.</p>
    pub fn set_s3_access(mut self, input: ::std::option::Option<crate::types::S3Access>) -> Self {
        self.s3_access = input;
        self
    }
    /// <p>The Amazon S3 access configuration.</p>
    pub fn get_s3_access(&self) -> &::std::option::Option<crate::types::S3Access> {
        &self.s3_access
    }
    /// Consumes the builder and constructs a [`ManagedServices`](crate::types::ManagedServices).
    pub fn build(self) -> crate::types::ManagedServices {
        crate::types::ManagedServices {
            service_network_arn: self.service_network_arn,
            resource_gateway_arn: self.resource_gateway_arn,
            managed_services_ipv4_cidrs: self.managed_services_ipv4_cidrs,
            service_network_endpoint: self.service_network_endpoint,
            managed_s3_backup_access: self.managed_s3_backup_access,
            zero_etl_access: self.zero_etl_access,
            s3_access: self.s3_access,
        }
    }
}
