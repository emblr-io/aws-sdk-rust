// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about unallocated resources in the Cloud Exadata infrastructure.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CloudExadataInfrastructureUnallocatedResources {
    /// <p>A list of Autonomous VM clusters associated with this Cloud Exadata Infrastructure.</p>
    pub cloud_autonomous_vm_clusters: ::std::option::Option<::std::vec::Vec<crate::types::CloudAutonomousVmClusterResourceDetails>>,
    /// <p>The display name of the Cloud Exadata infrastructure.</p>
    pub cloud_exadata_infrastructure_display_name: ::std::option::Option<::std::string::String>,
    /// <p>The amount of unallocated Exadata storage available, in terabytes (TB).</p>
    pub exadata_storage_in_tbs: ::std::option::Option<f64>,
    /// <p>The unique identifier of the Cloud Exadata infrastructure.</p>
    pub cloud_exadata_infrastructure_id: ::std::option::Option<::std::string::String>,
    /// <p>The amount of unallocated local storage available, in gigabytes (GB).</p>
    pub local_storage_in_gbs: ::std::option::Option<i32>,
    /// <p>The amount of unallocated memory available, in gigabytes (GB).</p>
    pub memory_in_gbs: ::std::option::Option<i32>,
    /// <p>The number of unallocated Oracle CPU Units (OCPUs) available.</p>
    pub ocpus: ::std::option::Option<i32>,
}
impl CloudExadataInfrastructureUnallocatedResources {
    /// <p>A list of Autonomous VM clusters associated with this Cloud Exadata Infrastructure.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cloud_autonomous_vm_clusters.is_none()`.
    pub fn cloud_autonomous_vm_clusters(&self) -> &[crate::types::CloudAutonomousVmClusterResourceDetails] {
        self.cloud_autonomous_vm_clusters.as_deref().unwrap_or_default()
    }
    /// <p>The display name of the Cloud Exadata infrastructure.</p>
    pub fn cloud_exadata_infrastructure_display_name(&self) -> ::std::option::Option<&str> {
        self.cloud_exadata_infrastructure_display_name.as_deref()
    }
    /// <p>The amount of unallocated Exadata storage available, in terabytes (TB).</p>
    pub fn exadata_storage_in_tbs(&self) -> ::std::option::Option<f64> {
        self.exadata_storage_in_tbs
    }
    /// <p>The unique identifier of the Cloud Exadata infrastructure.</p>
    pub fn cloud_exadata_infrastructure_id(&self) -> ::std::option::Option<&str> {
        self.cloud_exadata_infrastructure_id.as_deref()
    }
    /// <p>The amount of unallocated local storage available, in gigabytes (GB).</p>
    pub fn local_storage_in_gbs(&self) -> ::std::option::Option<i32> {
        self.local_storage_in_gbs
    }
    /// <p>The amount of unallocated memory available, in gigabytes (GB).</p>
    pub fn memory_in_gbs(&self) -> ::std::option::Option<i32> {
        self.memory_in_gbs
    }
    /// <p>The number of unallocated Oracle CPU Units (OCPUs) available.</p>
    pub fn ocpus(&self) -> ::std::option::Option<i32> {
        self.ocpus
    }
}
impl CloudExadataInfrastructureUnallocatedResources {
    /// Creates a new builder-style object to manufacture [`CloudExadataInfrastructureUnallocatedResources`](crate::types::CloudExadataInfrastructureUnallocatedResources).
    pub fn builder() -> crate::types::builders::CloudExadataInfrastructureUnallocatedResourcesBuilder {
        crate::types::builders::CloudExadataInfrastructureUnallocatedResourcesBuilder::default()
    }
}

/// A builder for [`CloudExadataInfrastructureUnallocatedResources`](crate::types::CloudExadataInfrastructureUnallocatedResources).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CloudExadataInfrastructureUnallocatedResourcesBuilder {
    pub(crate) cloud_autonomous_vm_clusters: ::std::option::Option<::std::vec::Vec<crate::types::CloudAutonomousVmClusterResourceDetails>>,
    pub(crate) cloud_exadata_infrastructure_display_name: ::std::option::Option<::std::string::String>,
    pub(crate) exadata_storage_in_tbs: ::std::option::Option<f64>,
    pub(crate) cloud_exadata_infrastructure_id: ::std::option::Option<::std::string::String>,
    pub(crate) local_storage_in_gbs: ::std::option::Option<i32>,
    pub(crate) memory_in_gbs: ::std::option::Option<i32>,
    pub(crate) ocpus: ::std::option::Option<i32>,
}
impl CloudExadataInfrastructureUnallocatedResourcesBuilder {
    /// Appends an item to `cloud_autonomous_vm_clusters`.
    ///
    /// To override the contents of this collection use [`set_cloud_autonomous_vm_clusters`](Self::set_cloud_autonomous_vm_clusters).
    ///
    /// <p>A list of Autonomous VM clusters associated with this Cloud Exadata Infrastructure.</p>
    pub fn cloud_autonomous_vm_clusters(mut self, input: crate::types::CloudAutonomousVmClusterResourceDetails) -> Self {
        let mut v = self.cloud_autonomous_vm_clusters.unwrap_or_default();
        v.push(input);
        self.cloud_autonomous_vm_clusters = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Autonomous VM clusters associated with this Cloud Exadata Infrastructure.</p>
    pub fn set_cloud_autonomous_vm_clusters(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::CloudAutonomousVmClusterResourceDetails>>,
    ) -> Self {
        self.cloud_autonomous_vm_clusters = input;
        self
    }
    /// <p>A list of Autonomous VM clusters associated with this Cloud Exadata Infrastructure.</p>
    pub fn get_cloud_autonomous_vm_clusters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CloudAutonomousVmClusterResourceDetails>> {
        &self.cloud_autonomous_vm_clusters
    }
    /// <p>The display name of the Cloud Exadata infrastructure.</p>
    pub fn cloud_exadata_infrastructure_display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloud_exadata_infrastructure_display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the Cloud Exadata infrastructure.</p>
    pub fn set_cloud_exadata_infrastructure_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloud_exadata_infrastructure_display_name = input;
        self
    }
    /// <p>The display name of the Cloud Exadata infrastructure.</p>
    pub fn get_cloud_exadata_infrastructure_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloud_exadata_infrastructure_display_name
    }
    /// <p>The amount of unallocated Exadata storage available, in terabytes (TB).</p>
    pub fn exadata_storage_in_tbs(mut self, input: f64) -> Self {
        self.exadata_storage_in_tbs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of unallocated Exadata storage available, in terabytes (TB).</p>
    pub fn set_exadata_storage_in_tbs(mut self, input: ::std::option::Option<f64>) -> Self {
        self.exadata_storage_in_tbs = input;
        self
    }
    /// <p>The amount of unallocated Exadata storage available, in terabytes (TB).</p>
    pub fn get_exadata_storage_in_tbs(&self) -> &::std::option::Option<f64> {
        &self.exadata_storage_in_tbs
    }
    /// <p>The unique identifier of the Cloud Exadata infrastructure.</p>
    pub fn cloud_exadata_infrastructure_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloud_exadata_infrastructure_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Cloud Exadata infrastructure.</p>
    pub fn set_cloud_exadata_infrastructure_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloud_exadata_infrastructure_id = input;
        self
    }
    /// <p>The unique identifier of the Cloud Exadata infrastructure.</p>
    pub fn get_cloud_exadata_infrastructure_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloud_exadata_infrastructure_id
    }
    /// <p>The amount of unallocated local storage available, in gigabytes (GB).</p>
    pub fn local_storage_in_gbs(mut self, input: i32) -> Self {
        self.local_storage_in_gbs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of unallocated local storage available, in gigabytes (GB).</p>
    pub fn set_local_storage_in_gbs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.local_storage_in_gbs = input;
        self
    }
    /// <p>The amount of unallocated local storage available, in gigabytes (GB).</p>
    pub fn get_local_storage_in_gbs(&self) -> &::std::option::Option<i32> {
        &self.local_storage_in_gbs
    }
    /// <p>The amount of unallocated memory available, in gigabytes (GB).</p>
    pub fn memory_in_gbs(mut self, input: i32) -> Self {
        self.memory_in_gbs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of unallocated memory available, in gigabytes (GB).</p>
    pub fn set_memory_in_gbs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.memory_in_gbs = input;
        self
    }
    /// <p>The amount of unallocated memory available, in gigabytes (GB).</p>
    pub fn get_memory_in_gbs(&self) -> &::std::option::Option<i32> {
        &self.memory_in_gbs
    }
    /// <p>The number of unallocated Oracle CPU Units (OCPUs) available.</p>
    pub fn ocpus(mut self, input: i32) -> Self {
        self.ocpus = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of unallocated Oracle CPU Units (OCPUs) available.</p>
    pub fn set_ocpus(mut self, input: ::std::option::Option<i32>) -> Self {
        self.ocpus = input;
        self
    }
    /// <p>The number of unallocated Oracle CPU Units (OCPUs) available.</p>
    pub fn get_ocpus(&self) -> &::std::option::Option<i32> {
        &self.ocpus
    }
    /// Consumes the builder and constructs a [`CloudExadataInfrastructureUnallocatedResources`](crate::types::CloudExadataInfrastructureUnallocatedResources).
    pub fn build(self) -> crate::types::CloudExadataInfrastructureUnallocatedResources {
        crate::types::CloudExadataInfrastructureUnallocatedResources {
            cloud_autonomous_vm_clusters: self.cloud_autonomous_vm_clusters,
            cloud_exadata_infrastructure_display_name: self.cloud_exadata_infrastructure_display_name,
            exadata_storage_in_tbs: self.exadata_storage_in_tbs,
            cloud_exadata_infrastructure_id: self.cloud_exadata_infrastructure_id,
            local_storage_in_gbs: self.local_storage_in_gbs,
            memory_in_gbs: self.memory_in_gbs,
            ocpus: self.ocpus,
        }
    }
}
