// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the compatible system versions that can be used with a specific Exadata shape and Grid Infrastructure (GI) version.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SystemVersionSummary {
    /// <p>The version of GI software.</p>
    pub gi_version: ::std::option::Option<::std::string::String>,
    /// <p>The Exadata hardware model.</p>
    pub shape: ::std::option::Option<::std::string::String>,
    /// <p>The Exadata system versions that are compatible with the specified Exadata shape and GI version.</p>
    pub system_versions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SystemVersionSummary {
    /// <p>The version of GI software.</p>
    pub fn gi_version(&self) -> ::std::option::Option<&str> {
        self.gi_version.as_deref()
    }
    /// <p>The Exadata hardware model.</p>
    pub fn shape(&self) -> ::std::option::Option<&str> {
        self.shape.as_deref()
    }
    /// <p>The Exadata system versions that are compatible with the specified Exadata shape and GI version.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.system_versions.is_none()`.
    pub fn system_versions(&self) -> &[::std::string::String] {
        self.system_versions.as_deref().unwrap_or_default()
    }
}
impl SystemVersionSummary {
    /// Creates a new builder-style object to manufacture [`SystemVersionSummary`](crate::types::SystemVersionSummary).
    pub fn builder() -> crate::types::builders::SystemVersionSummaryBuilder {
        crate::types::builders::SystemVersionSummaryBuilder::default()
    }
}

/// A builder for [`SystemVersionSummary`](crate::types::SystemVersionSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SystemVersionSummaryBuilder {
    pub(crate) gi_version: ::std::option::Option<::std::string::String>,
    pub(crate) shape: ::std::option::Option<::std::string::String>,
    pub(crate) system_versions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SystemVersionSummaryBuilder {
    /// <p>The version of GI software.</p>
    pub fn gi_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.gi_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of GI software.</p>
    pub fn set_gi_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.gi_version = input;
        self
    }
    /// <p>The version of GI software.</p>
    pub fn get_gi_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.gi_version
    }
    /// <p>The Exadata hardware model.</p>
    pub fn shape(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.shape = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Exadata hardware model.</p>
    pub fn set_shape(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.shape = input;
        self
    }
    /// <p>The Exadata hardware model.</p>
    pub fn get_shape(&self) -> &::std::option::Option<::std::string::String> {
        &self.shape
    }
    /// Appends an item to `system_versions`.
    ///
    /// To override the contents of this collection use [`set_system_versions`](Self::set_system_versions).
    ///
    /// <p>The Exadata system versions that are compatible with the specified Exadata shape and GI version.</p>
    pub fn system_versions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.system_versions.unwrap_or_default();
        v.push(input.into());
        self.system_versions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Exadata system versions that are compatible with the specified Exadata shape and GI version.</p>
    pub fn set_system_versions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.system_versions = input;
        self
    }
    /// <p>The Exadata system versions that are compatible with the specified Exadata shape and GI version.</p>
    pub fn get_system_versions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.system_versions
    }
    /// Consumes the builder and constructs a [`SystemVersionSummary`](crate::types::SystemVersionSummary).
    pub fn build(self) -> crate::types::SystemVersionSummary {
        crate::types::SystemVersionSummary {
            gi_version: self.gi_version,
            shape: self.shape,
            system_versions: self.system_versions,
        }
    }
}
