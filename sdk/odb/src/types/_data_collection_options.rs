// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the data collection options enabled for a VM cluster.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataCollectionOptions {
    /// <p>Indicates whether diagnostic collection is enabled for the VM cluster.</p>
    pub is_diagnostics_events_enabled: ::std::option::Option<bool>,
    /// <p>Indicates whether health monitoring is enabled for the VM cluster.</p>
    pub is_health_monitoring_enabled: ::std::option::Option<bool>,
    /// <p>Indicates whether incident logs are enabled for the cloud VM cluster.</p>
    pub is_incident_logs_enabled: ::std::option::Option<bool>,
}
impl DataCollectionOptions {
    /// <p>Indicates whether diagnostic collection is enabled for the VM cluster.</p>
    pub fn is_diagnostics_events_enabled(&self) -> ::std::option::Option<bool> {
        self.is_diagnostics_events_enabled
    }
    /// <p>Indicates whether health monitoring is enabled for the VM cluster.</p>
    pub fn is_health_monitoring_enabled(&self) -> ::std::option::Option<bool> {
        self.is_health_monitoring_enabled
    }
    /// <p>Indicates whether incident logs are enabled for the cloud VM cluster.</p>
    pub fn is_incident_logs_enabled(&self) -> ::std::option::Option<bool> {
        self.is_incident_logs_enabled
    }
}
impl DataCollectionOptions {
    /// Creates a new builder-style object to manufacture [`DataCollectionOptions`](crate::types::DataCollectionOptions).
    pub fn builder() -> crate::types::builders::DataCollectionOptionsBuilder {
        crate::types::builders::DataCollectionOptionsBuilder::default()
    }
}

/// A builder for [`DataCollectionOptions`](crate::types::DataCollectionOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataCollectionOptionsBuilder {
    pub(crate) is_diagnostics_events_enabled: ::std::option::Option<bool>,
    pub(crate) is_health_monitoring_enabled: ::std::option::Option<bool>,
    pub(crate) is_incident_logs_enabled: ::std::option::Option<bool>,
}
impl DataCollectionOptionsBuilder {
    /// <p>Indicates whether diagnostic collection is enabled for the VM cluster.</p>
    pub fn is_diagnostics_events_enabled(mut self, input: bool) -> Self {
        self.is_diagnostics_events_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether diagnostic collection is enabled for the VM cluster.</p>
    pub fn set_is_diagnostics_events_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_diagnostics_events_enabled = input;
        self
    }
    /// <p>Indicates whether diagnostic collection is enabled for the VM cluster.</p>
    pub fn get_is_diagnostics_events_enabled(&self) -> &::std::option::Option<bool> {
        &self.is_diagnostics_events_enabled
    }
    /// <p>Indicates whether health monitoring is enabled for the VM cluster.</p>
    pub fn is_health_monitoring_enabled(mut self, input: bool) -> Self {
        self.is_health_monitoring_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether health monitoring is enabled for the VM cluster.</p>
    pub fn set_is_health_monitoring_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_health_monitoring_enabled = input;
        self
    }
    /// <p>Indicates whether health monitoring is enabled for the VM cluster.</p>
    pub fn get_is_health_monitoring_enabled(&self) -> &::std::option::Option<bool> {
        &self.is_health_monitoring_enabled
    }
    /// <p>Indicates whether incident logs are enabled for the cloud VM cluster.</p>
    pub fn is_incident_logs_enabled(mut self, input: bool) -> Self {
        self.is_incident_logs_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether incident logs are enabled for the cloud VM cluster.</p>
    pub fn set_is_incident_logs_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_incident_logs_enabled = input;
        self
    }
    /// <p>Indicates whether incident logs are enabled for the cloud VM cluster.</p>
    pub fn get_is_incident_logs_enabled(&self) -> &::std::option::Option<bool> {
        &self.is_incident_logs_enabled
    }
    /// Consumes the builder and constructs a [`DataCollectionOptions`](crate::types::DataCollectionOptions).
    pub fn build(self) -> crate::types::DataCollectionOptions {
        crate::types::DataCollectionOptions {
            is_diagnostics_events_enabled: self.is_diagnostics_events_enabled,
            is_health_monitoring_enabled: self.is_health_monitoring_enabled,
            is_incident_logs_enabled: self.is_incident_logs_enabled,
        }
    }
}
