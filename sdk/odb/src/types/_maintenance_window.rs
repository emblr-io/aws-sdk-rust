// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MaintenanceWindow {
    /// <p>The custom action timeout in minutes for the maintenance window.</p>
    pub custom_action_timeout_in_mins: ::std::option::Option<i32>,
    /// <p>The days of the week when maintenance can be performed.</p>
    pub days_of_week: ::std::option::Option<::std::vec::Vec<crate::types::DayOfWeek>>,
    /// <p>The hours of the day when maintenance can be performed.</p>
    pub hours_of_day: ::std::option::Option<::std::vec::Vec<i32>>,
    /// <p>Indicates whether custom action timeout is enabled for the maintenance window.</p>
    pub is_custom_action_timeout_enabled: ::std::option::Option<bool>,
    /// <p>The lead time in weeks before the maintenance window.</p>
    pub lead_time_in_weeks: ::std::option::Option<i32>,
    /// <p>The months when maintenance can be performed.</p>
    pub months: ::std::option::Option<::std::vec::Vec<crate::types::Month>>,
    /// <p>The patching mode for the maintenance window.</p>
    pub patching_mode: ::std::option::Option<crate::types::PatchingModeType>,
    /// <p>The preference for the maintenance window scheduling.</p>
    pub preference: ::std::option::Option<crate::types::PreferenceType>,
    /// <p>Indicates whether to skip release updates during maintenance.</p>
    pub skip_ru: ::std::option::Option<bool>,
    /// <p>The weeks of the month when maintenance can be performed.</p>
    pub weeks_of_month: ::std::option::Option<::std::vec::Vec<i32>>,
}
impl MaintenanceWindow {
    /// <p>The custom action timeout in minutes for the maintenance window.</p>
    pub fn custom_action_timeout_in_mins(&self) -> ::std::option::Option<i32> {
        self.custom_action_timeout_in_mins
    }
    /// <p>The days of the week when maintenance can be performed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.days_of_week.is_none()`.
    pub fn days_of_week(&self) -> &[crate::types::DayOfWeek] {
        self.days_of_week.as_deref().unwrap_or_default()
    }
    /// <p>The hours of the day when maintenance can be performed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.hours_of_day.is_none()`.
    pub fn hours_of_day(&self) -> &[i32] {
        self.hours_of_day.as_deref().unwrap_or_default()
    }
    /// <p>Indicates whether custom action timeout is enabled for the maintenance window.</p>
    pub fn is_custom_action_timeout_enabled(&self) -> ::std::option::Option<bool> {
        self.is_custom_action_timeout_enabled
    }
    /// <p>The lead time in weeks before the maintenance window.</p>
    pub fn lead_time_in_weeks(&self) -> ::std::option::Option<i32> {
        self.lead_time_in_weeks
    }
    /// <p>The months when maintenance can be performed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.months.is_none()`.
    pub fn months(&self) -> &[crate::types::Month] {
        self.months.as_deref().unwrap_or_default()
    }
    /// <p>The patching mode for the maintenance window.</p>
    pub fn patching_mode(&self) -> ::std::option::Option<&crate::types::PatchingModeType> {
        self.patching_mode.as_ref()
    }
    /// <p>The preference for the maintenance window scheduling.</p>
    pub fn preference(&self) -> ::std::option::Option<&crate::types::PreferenceType> {
        self.preference.as_ref()
    }
    /// <p>Indicates whether to skip release updates during maintenance.</p>
    pub fn skip_ru(&self) -> ::std::option::Option<bool> {
        self.skip_ru
    }
    /// <p>The weeks of the month when maintenance can be performed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.weeks_of_month.is_none()`.
    pub fn weeks_of_month(&self) -> &[i32] {
        self.weeks_of_month.as_deref().unwrap_or_default()
    }
}
impl MaintenanceWindow {
    /// Creates a new builder-style object to manufacture [`MaintenanceWindow`](crate::types::MaintenanceWindow).
    pub fn builder() -> crate::types::builders::MaintenanceWindowBuilder {
        crate::types::builders::MaintenanceWindowBuilder::default()
    }
}

/// A builder for [`MaintenanceWindow`](crate::types::MaintenanceWindow).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MaintenanceWindowBuilder {
    pub(crate) custom_action_timeout_in_mins: ::std::option::Option<i32>,
    pub(crate) days_of_week: ::std::option::Option<::std::vec::Vec<crate::types::DayOfWeek>>,
    pub(crate) hours_of_day: ::std::option::Option<::std::vec::Vec<i32>>,
    pub(crate) is_custom_action_timeout_enabled: ::std::option::Option<bool>,
    pub(crate) lead_time_in_weeks: ::std::option::Option<i32>,
    pub(crate) months: ::std::option::Option<::std::vec::Vec<crate::types::Month>>,
    pub(crate) patching_mode: ::std::option::Option<crate::types::PatchingModeType>,
    pub(crate) preference: ::std::option::Option<crate::types::PreferenceType>,
    pub(crate) skip_ru: ::std::option::Option<bool>,
    pub(crate) weeks_of_month: ::std::option::Option<::std::vec::Vec<i32>>,
}
impl MaintenanceWindowBuilder {
    /// <p>The custom action timeout in minutes for the maintenance window.</p>
    pub fn custom_action_timeout_in_mins(mut self, input: i32) -> Self {
        self.custom_action_timeout_in_mins = ::std::option::Option::Some(input);
        self
    }
    /// <p>The custom action timeout in minutes for the maintenance window.</p>
    pub fn set_custom_action_timeout_in_mins(mut self, input: ::std::option::Option<i32>) -> Self {
        self.custom_action_timeout_in_mins = input;
        self
    }
    /// <p>The custom action timeout in minutes for the maintenance window.</p>
    pub fn get_custom_action_timeout_in_mins(&self) -> &::std::option::Option<i32> {
        &self.custom_action_timeout_in_mins
    }
    /// Appends an item to `days_of_week`.
    ///
    /// To override the contents of this collection use [`set_days_of_week`](Self::set_days_of_week).
    ///
    /// <p>The days of the week when maintenance can be performed.</p>
    pub fn days_of_week(mut self, input: crate::types::DayOfWeek) -> Self {
        let mut v = self.days_of_week.unwrap_or_default();
        v.push(input);
        self.days_of_week = ::std::option::Option::Some(v);
        self
    }
    /// <p>The days of the week when maintenance can be performed.</p>
    pub fn set_days_of_week(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DayOfWeek>>) -> Self {
        self.days_of_week = input;
        self
    }
    /// <p>The days of the week when maintenance can be performed.</p>
    pub fn get_days_of_week(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DayOfWeek>> {
        &self.days_of_week
    }
    /// Appends an item to `hours_of_day`.
    ///
    /// To override the contents of this collection use [`set_hours_of_day`](Self::set_hours_of_day).
    ///
    /// <p>The hours of the day when maintenance can be performed.</p>
    pub fn hours_of_day(mut self, input: i32) -> Self {
        let mut v = self.hours_of_day.unwrap_or_default();
        v.push(input);
        self.hours_of_day = ::std::option::Option::Some(v);
        self
    }
    /// <p>The hours of the day when maintenance can be performed.</p>
    pub fn set_hours_of_day(mut self, input: ::std::option::Option<::std::vec::Vec<i32>>) -> Self {
        self.hours_of_day = input;
        self
    }
    /// <p>The hours of the day when maintenance can be performed.</p>
    pub fn get_hours_of_day(&self) -> &::std::option::Option<::std::vec::Vec<i32>> {
        &self.hours_of_day
    }
    /// <p>Indicates whether custom action timeout is enabled for the maintenance window.</p>
    pub fn is_custom_action_timeout_enabled(mut self, input: bool) -> Self {
        self.is_custom_action_timeout_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether custom action timeout is enabled for the maintenance window.</p>
    pub fn set_is_custom_action_timeout_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_custom_action_timeout_enabled = input;
        self
    }
    /// <p>Indicates whether custom action timeout is enabled for the maintenance window.</p>
    pub fn get_is_custom_action_timeout_enabled(&self) -> &::std::option::Option<bool> {
        &self.is_custom_action_timeout_enabled
    }
    /// <p>The lead time in weeks before the maintenance window.</p>
    pub fn lead_time_in_weeks(mut self, input: i32) -> Self {
        self.lead_time_in_weeks = ::std::option::Option::Some(input);
        self
    }
    /// <p>The lead time in weeks before the maintenance window.</p>
    pub fn set_lead_time_in_weeks(mut self, input: ::std::option::Option<i32>) -> Self {
        self.lead_time_in_weeks = input;
        self
    }
    /// <p>The lead time in weeks before the maintenance window.</p>
    pub fn get_lead_time_in_weeks(&self) -> &::std::option::Option<i32> {
        &self.lead_time_in_weeks
    }
    /// Appends an item to `months`.
    ///
    /// To override the contents of this collection use [`set_months`](Self::set_months).
    ///
    /// <p>The months when maintenance can be performed.</p>
    pub fn months(mut self, input: crate::types::Month) -> Self {
        let mut v = self.months.unwrap_or_default();
        v.push(input);
        self.months = ::std::option::Option::Some(v);
        self
    }
    /// <p>The months when maintenance can be performed.</p>
    pub fn set_months(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Month>>) -> Self {
        self.months = input;
        self
    }
    /// <p>The months when maintenance can be performed.</p>
    pub fn get_months(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Month>> {
        &self.months
    }
    /// <p>The patching mode for the maintenance window.</p>
    pub fn patching_mode(mut self, input: crate::types::PatchingModeType) -> Self {
        self.patching_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The patching mode for the maintenance window.</p>
    pub fn set_patching_mode(mut self, input: ::std::option::Option<crate::types::PatchingModeType>) -> Self {
        self.patching_mode = input;
        self
    }
    /// <p>The patching mode for the maintenance window.</p>
    pub fn get_patching_mode(&self) -> &::std::option::Option<crate::types::PatchingModeType> {
        &self.patching_mode
    }
    /// <p>The preference for the maintenance window scheduling.</p>
    pub fn preference(mut self, input: crate::types::PreferenceType) -> Self {
        self.preference = ::std::option::Option::Some(input);
        self
    }
    /// <p>The preference for the maintenance window scheduling.</p>
    pub fn set_preference(mut self, input: ::std::option::Option<crate::types::PreferenceType>) -> Self {
        self.preference = input;
        self
    }
    /// <p>The preference for the maintenance window scheduling.</p>
    pub fn get_preference(&self) -> &::std::option::Option<crate::types::PreferenceType> {
        &self.preference
    }
    /// <p>Indicates whether to skip release updates during maintenance.</p>
    pub fn skip_ru(mut self, input: bool) -> Self {
        self.skip_ru = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether to skip release updates during maintenance.</p>
    pub fn set_skip_ru(mut self, input: ::std::option::Option<bool>) -> Self {
        self.skip_ru = input;
        self
    }
    /// <p>Indicates whether to skip release updates during maintenance.</p>
    pub fn get_skip_ru(&self) -> &::std::option::Option<bool> {
        &self.skip_ru
    }
    /// Appends an item to `weeks_of_month`.
    ///
    /// To override the contents of this collection use [`set_weeks_of_month`](Self::set_weeks_of_month).
    ///
    /// <p>The weeks of the month when maintenance can be performed.</p>
    pub fn weeks_of_month(mut self, input: i32) -> Self {
        let mut v = self.weeks_of_month.unwrap_or_default();
        v.push(input);
        self.weeks_of_month = ::std::option::Option::Some(v);
        self
    }
    /// <p>The weeks of the month when maintenance can be performed.</p>
    pub fn set_weeks_of_month(mut self, input: ::std::option::Option<::std::vec::Vec<i32>>) -> Self {
        self.weeks_of_month = input;
        self
    }
    /// <p>The weeks of the month when maintenance can be performed.</p>
    pub fn get_weeks_of_month(&self) -> &::std::option::Option<::std::vec::Vec<i32>> {
        &self.weeks_of_month
    }
    /// Consumes the builder and constructs a [`MaintenanceWindow`](crate::types::MaintenanceWindow).
    pub fn build(self) -> crate::types::MaintenanceWindow {
        crate::types::MaintenanceWindow {
            custom_action_timeout_in_mins: self.custom_action_timeout_in_mins,
            days_of_week: self.days_of_week,
            hours_of_day: self.hours_of_day,
            is_custom_action_timeout_enabled: self.is_custom_action_timeout_enabled,
            lead_time_in_weeks: self.lead_time_in_weeks,
            months: self.months,
            patching_mode: self.patching_mode,
            preference: self.preference,
            skip_ru: self.skip_ru,
            weeks_of_month: self.weeks_of_month,
        }
    }
}
