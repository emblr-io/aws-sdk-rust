// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an ODB network.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OdbNetwork {
    /// <p>The unique identifier of the ODB network.</p>
    pub odb_network_id: ::std::string::String,
    /// <p>The user-friendly name of the ODB network.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the ODB network.</p>
    pub status: ::std::option::Option<crate::types::ResourceStatus>,
    /// <p>Additional information about the current status of the ODB network.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the ODB network.</p>
    pub odb_network_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Availability Zone (AZ) where the ODB network is located.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The AZ ID of the AZ where the ODB network is located.</p>
    pub availability_zone_id: ::std::option::Option<::std::string::String>,
    /// <p>The CIDR range of the client subnet in the ODB network.</p>
    pub client_subnet_cidr: ::std::option::Option<::std::string::String>,
    /// <p>The CIDR range of the backup subnet in the ODB network.</p>
    pub backup_subnet_cidr: ::std::option::Option<::std::string::String>,
    /// <p>The domain name for the resources in the ODB network.</p>
    pub custom_domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The DNS prefix to the default DNS domain name. The default DNS domain name is oraclevcn.com.</p>
    pub default_dns_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The list of CIDR ranges from the peered VPC that are allowed access to the ODB network.</p>
    pub peered_cidrs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The unique identifier of the OCI network anchor for the ODB network.</p>
    pub oci_network_anchor_id: ::std::option::Option<::std::string::String>,
    /// <p>The URL of the OCI network anchor for the ODB network.</p>
    pub oci_network_anchor_url: ::std::option::Option<::std::string::String>,
    /// <p>The name of the OCI resource anchor that's associated with the ODB network.</p>
    pub oci_resource_anchor_name: ::std::option::Option<::std::string::String>,
    /// <p>The Oracle Cloud ID (OCID) for the Virtual Cloud Network (VCN) that's associated with the ODB network.</p>
    pub oci_vcn_id: ::std::option::Option<::std::string::String>,
    /// <p>The URL for the VCN that's associated with the ODB network.</p>
    pub oci_vcn_url: ::std::option::Option<::std::string::String>,
    /// <p>The DNS resolver endpoint in OCI for forwarding DNS queries for the ociPrivateZone domain.</p>
    pub oci_dns_forwarding_configs: ::std::option::Option<::std::vec::Vec<crate::types::OciDnsForwardingConfig>>,
    /// <p>The date and time when the ODB network was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The amount of progress made on the current operation on the ODB network, expressed as a percentage.</p>
    pub percent_progress: ::std::option::Option<f32>,
    /// <p>The managed services configuration for the ODB network.</p>
    pub managed_services: ::std::option::Option<crate::types::ManagedServices>,
}
impl OdbNetwork {
    /// <p>The unique identifier of the ODB network.</p>
    pub fn odb_network_id(&self) -> &str {
        use std::ops::Deref;
        self.odb_network_id.deref()
    }
    /// <p>The user-friendly name of the ODB network.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The current status of the ODB network.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ResourceStatus> {
        self.status.as_ref()
    }
    /// <p>Additional information about the current status of the ODB network.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the ODB network.</p>
    pub fn odb_network_arn(&self) -> ::std::option::Option<&str> {
        self.odb_network_arn.as_deref()
    }
    /// <p>The Amazon Web Services Availability Zone (AZ) where the ODB network is located.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The AZ ID of the AZ where the ODB network is located.</p>
    pub fn availability_zone_id(&self) -> ::std::option::Option<&str> {
        self.availability_zone_id.as_deref()
    }
    /// <p>The CIDR range of the client subnet in the ODB network.</p>
    pub fn client_subnet_cidr(&self) -> ::std::option::Option<&str> {
        self.client_subnet_cidr.as_deref()
    }
    /// <p>The CIDR range of the backup subnet in the ODB network.</p>
    pub fn backup_subnet_cidr(&self) -> ::std::option::Option<&str> {
        self.backup_subnet_cidr.as_deref()
    }
    /// <p>The domain name for the resources in the ODB network.</p>
    pub fn custom_domain_name(&self) -> ::std::option::Option<&str> {
        self.custom_domain_name.as_deref()
    }
    /// <p>The DNS prefix to the default DNS domain name. The default DNS domain name is oraclevcn.com.</p>
    pub fn default_dns_prefix(&self) -> ::std::option::Option<&str> {
        self.default_dns_prefix.as_deref()
    }
    /// <p>The list of CIDR ranges from the peered VPC that are allowed access to the ODB network.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.peered_cidrs.is_none()`.
    pub fn peered_cidrs(&self) -> &[::std::string::String] {
        self.peered_cidrs.as_deref().unwrap_or_default()
    }
    /// <p>The unique identifier of the OCI network anchor for the ODB network.</p>
    pub fn oci_network_anchor_id(&self) -> ::std::option::Option<&str> {
        self.oci_network_anchor_id.as_deref()
    }
    /// <p>The URL of the OCI network anchor for the ODB network.</p>
    pub fn oci_network_anchor_url(&self) -> ::std::option::Option<&str> {
        self.oci_network_anchor_url.as_deref()
    }
    /// <p>The name of the OCI resource anchor that's associated with the ODB network.</p>
    pub fn oci_resource_anchor_name(&self) -> ::std::option::Option<&str> {
        self.oci_resource_anchor_name.as_deref()
    }
    /// <p>The Oracle Cloud ID (OCID) for the Virtual Cloud Network (VCN) that's associated with the ODB network.</p>
    pub fn oci_vcn_id(&self) -> ::std::option::Option<&str> {
        self.oci_vcn_id.as_deref()
    }
    /// <p>The URL for the VCN that's associated with the ODB network.</p>
    pub fn oci_vcn_url(&self) -> ::std::option::Option<&str> {
        self.oci_vcn_url.as_deref()
    }
    /// <p>The DNS resolver endpoint in OCI for forwarding DNS queries for the ociPrivateZone domain.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.oci_dns_forwarding_configs.is_none()`.
    pub fn oci_dns_forwarding_configs(&self) -> &[crate::types::OciDnsForwardingConfig] {
        self.oci_dns_forwarding_configs.as_deref().unwrap_or_default()
    }
    /// <p>The date and time when the ODB network was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The amount of progress made on the current operation on the ODB network, expressed as a percentage.</p>
    pub fn percent_progress(&self) -> ::std::option::Option<f32> {
        self.percent_progress
    }
    /// <p>The managed services configuration for the ODB network.</p>
    pub fn managed_services(&self) -> ::std::option::Option<&crate::types::ManagedServices> {
        self.managed_services.as_ref()
    }
}
impl OdbNetwork {
    /// Creates a new builder-style object to manufacture [`OdbNetwork`](crate::types::OdbNetwork).
    pub fn builder() -> crate::types::builders::OdbNetworkBuilder {
        crate::types::builders::OdbNetworkBuilder::default()
    }
}

/// A builder for [`OdbNetwork`](crate::types::OdbNetwork).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OdbNetworkBuilder {
    pub(crate) odb_network_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ResourceStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) odb_network_arn: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_subnet_cidr: ::std::option::Option<::std::string::String>,
    pub(crate) backup_subnet_cidr: ::std::option::Option<::std::string::String>,
    pub(crate) custom_domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) default_dns_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) peered_cidrs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) oci_network_anchor_id: ::std::option::Option<::std::string::String>,
    pub(crate) oci_network_anchor_url: ::std::option::Option<::std::string::String>,
    pub(crate) oci_resource_anchor_name: ::std::option::Option<::std::string::String>,
    pub(crate) oci_vcn_id: ::std::option::Option<::std::string::String>,
    pub(crate) oci_vcn_url: ::std::option::Option<::std::string::String>,
    pub(crate) oci_dns_forwarding_configs: ::std::option::Option<::std::vec::Vec<crate::types::OciDnsForwardingConfig>>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) percent_progress: ::std::option::Option<f32>,
    pub(crate) managed_services: ::std::option::Option<crate::types::ManagedServices>,
}
impl OdbNetworkBuilder {
    /// <p>The unique identifier of the ODB network.</p>
    /// This field is required.
    pub fn odb_network_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.odb_network_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the ODB network.</p>
    pub fn set_odb_network_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.odb_network_id = input;
        self
    }
    /// <p>The unique identifier of the ODB network.</p>
    pub fn get_odb_network_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.odb_network_id
    }
    /// <p>The user-friendly name of the ODB network.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user-friendly name of the ODB network.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The user-friendly name of the ODB network.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The current status of the ODB network.</p>
    pub fn status(mut self, input: crate::types::ResourceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the ODB network.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ResourceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the ODB network.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ResourceStatus> {
        &self.status
    }
    /// <p>Additional information about the current status of the ODB network.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Additional information about the current status of the ODB network.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>Additional information about the current status of the ODB network.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The Amazon Resource Name (ARN) of the ODB network.</p>
    pub fn odb_network_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.odb_network_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ODB network.</p>
    pub fn set_odb_network_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.odb_network_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ODB network.</p>
    pub fn get_odb_network_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.odb_network_arn
    }
    /// <p>The Amazon Web Services Availability Zone (AZ) where the ODB network is located.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Availability Zone (AZ) where the ODB network is located.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The Amazon Web Services Availability Zone (AZ) where the ODB network is located.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The AZ ID of the AZ where the ODB network is located.</p>
    pub fn availability_zone_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AZ ID of the AZ where the ODB network is located.</p>
    pub fn set_availability_zone_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone_id = input;
        self
    }
    /// <p>The AZ ID of the AZ where the ODB network is located.</p>
    pub fn get_availability_zone_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone_id
    }
    /// <p>The CIDR range of the client subnet in the ODB network.</p>
    pub fn client_subnet_cidr(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_subnet_cidr = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CIDR range of the client subnet in the ODB network.</p>
    pub fn set_client_subnet_cidr(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_subnet_cidr = input;
        self
    }
    /// <p>The CIDR range of the client subnet in the ODB network.</p>
    pub fn get_client_subnet_cidr(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_subnet_cidr
    }
    /// <p>The CIDR range of the backup subnet in the ODB network.</p>
    pub fn backup_subnet_cidr(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_subnet_cidr = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CIDR range of the backup subnet in the ODB network.</p>
    pub fn set_backup_subnet_cidr(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_subnet_cidr = input;
        self
    }
    /// <p>The CIDR range of the backup subnet in the ODB network.</p>
    pub fn get_backup_subnet_cidr(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_subnet_cidr
    }
    /// <p>The domain name for the resources in the ODB network.</p>
    pub fn custom_domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.custom_domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name for the resources in the ODB network.</p>
    pub fn set_custom_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.custom_domain_name = input;
        self
    }
    /// <p>The domain name for the resources in the ODB network.</p>
    pub fn get_custom_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.custom_domain_name
    }
    /// <p>The DNS prefix to the default DNS domain name. The default DNS domain name is oraclevcn.com.</p>
    pub fn default_dns_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_dns_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DNS prefix to the default DNS domain name. The default DNS domain name is oraclevcn.com.</p>
    pub fn set_default_dns_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_dns_prefix = input;
        self
    }
    /// <p>The DNS prefix to the default DNS domain name. The default DNS domain name is oraclevcn.com.</p>
    pub fn get_default_dns_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_dns_prefix
    }
    /// Appends an item to `peered_cidrs`.
    ///
    /// To override the contents of this collection use [`set_peered_cidrs`](Self::set_peered_cidrs).
    ///
    /// <p>The list of CIDR ranges from the peered VPC that are allowed access to the ODB network.</p>
    pub fn peered_cidrs(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.peered_cidrs.unwrap_or_default();
        v.push(input.into());
        self.peered_cidrs = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of CIDR ranges from the peered VPC that are allowed access to the ODB network.</p>
    pub fn set_peered_cidrs(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.peered_cidrs = input;
        self
    }
    /// <p>The list of CIDR ranges from the peered VPC that are allowed access to the ODB network.</p>
    pub fn get_peered_cidrs(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.peered_cidrs
    }
    /// <p>The unique identifier of the OCI network anchor for the ODB network.</p>
    pub fn oci_network_anchor_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.oci_network_anchor_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the OCI network anchor for the ODB network.</p>
    pub fn set_oci_network_anchor_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.oci_network_anchor_id = input;
        self
    }
    /// <p>The unique identifier of the OCI network anchor for the ODB network.</p>
    pub fn get_oci_network_anchor_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.oci_network_anchor_id
    }
    /// <p>The URL of the OCI network anchor for the ODB network.</p>
    pub fn oci_network_anchor_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.oci_network_anchor_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of the OCI network anchor for the ODB network.</p>
    pub fn set_oci_network_anchor_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.oci_network_anchor_url = input;
        self
    }
    /// <p>The URL of the OCI network anchor for the ODB network.</p>
    pub fn get_oci_network_anchor_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.oci_network_anchor_url
    }
    /// <p>The name of the OCI resource anchor that's associated with the ODB network.</p>
    pub fn oci_resource_anchor_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.oci_resource_anchor_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the OCI resource anchor that's associated with the ODB network.</p>
    pub fn set_oci_resource_anchor_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.oci_resource_anchor_name = input;
        self
    }
    /// <p>The name of the OCI resource anchor that's associated with the ODB network.</p>
    pub fn get_oci_resource_anchor_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.oci_resource_anchor_name
    }
    /// <p>The Oracle Cloud ID (OCID) for the Virtual Cloud Network (VCN) that's associated with the ODB network.</p>
    pub fn oci_vcn_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.oci_vcn_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Oracle Cloud ID (OCID) for the Virtual Cloud Network (VCN) that's associated with the ODB network.</p>
    pub fn set_oci_vcn_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.oci_vcn_id = input;
        self
    }
    /// <p>The Oracle Cloud ID (OCID) for the Virtual Cloud Network (VCN) that's associated with the ODB network.</p>
    pub fn get_oci_vcn_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.oci_vcn_id
    }
    /// <p>The URL for the VCN that's associated with the ODB network.</p>
    pub fn oci_vcn_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.oci_vcn_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL for the VCN that's associated with the ODB network.</p>
    pub fn set_oci_vcn_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.oci_vcn_url = input;
        self
    }
    /// <p>The URL for the VCN that's associated with the ODB network.</p>
    pub fn get_oci_vcn_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.oci_vcn_url
    }
    /// Appends an item to `oci_dns_forwarding_configs`.
    ///
    /// To override the contents of this collection use [`set_oci_dns_forwarding_configs`](Self::set_oci_dns_forwarding_configs).
    ///
    /// <p>The DNS resolver endpoint in OCI for forwarding DNS queries for the ociPrivateZone domain.</p>
    pub fn oci_dns_forwarding_configs(mut self, input: crate::types::OciDnsForwardingConfig) -> Self {
        let mut v = self.oci_dns_forwarding_configs.unwrap_or_default();
        v.push(input);
        self.oci_dns_forwarding_configs = ::std::option::Option::Some(v);
        self
    }
    /// <p>The DNS resolver endpoint in OCI for forwarding DNS queries for the ociPrivateZone domain.</p>
    pub fn set_oci_dns_forwarding_configs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OciDnsForwardingConfig>>) -> Self {
        self.oci_dns_forwarding_configs = input;
        self
    }
    /// <p>The DNS resolver endpoint in OCI for forwarding DNS queries for the ociPrivateZone domain.</p>
    pub fn get_oci_dns_forwarding_configs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OciDnsForwardingConfig>> {
        &self.oci_dns_forwarding_configs
    }
    /// <p>The date and time when the ODB network was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the ODB network was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time when the ODB network was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The amount of progress made on the current operation on the ODB network, expressed as a percentage.</p>
    pub fn percent_progress(mut self, input: f32) -> Self {
        self.percent_progress = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of progress made on the current operation on the ODB network, expressed as a percentage.</p>
    pub fn set_percent_progress(mut self, input: ::std::option::Option<f32>) -> Self {
        self.percent_progress = input;
        self
    }
    /// <p>The amount of progress made on the current operation on the ODB network, expressed as a percentage.</p>
    pub fn get_percent_progress(&self) -> &::std::option::Option<f32> {
        &self.percent_progress
    }
    /// <p>The managed services configuration for the ODB network.</p>
    pub fn managed_services(mut self, input: crate::types::ManagedServices) -> Self {
        self.managed_services = ::std::option::Option::Some(input);
        self
    }
    /// <p>The managed services configuration for the ODB network.</p>
    pub fn set_managed_services(mut self, input: ::std::option::Option<crate::types::ManagedServices>) -> Self {
        self.managed_services = input;
        self
    }
    /// <p>The managed services configuration for the ODB network.</p>
    pub fn get_managed_services(&self) -> &::std::option::Option<crate::types::ManagedServices> {
        &self.managed_services
    }
    /// Consumes the builder and constructs a [`OdbNetwork`](crate::types::OdbNetwork).
    /// This method will fail if any of the following fields are not set:
    /// - [`odb_network_id`](crate::types::builders::OdbNetworkBuilder::odb_network_id)
    pub fn build(self) -> ::std::result::Result<crate::types::OdbNetwork, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OdbNetwork {
            odb_network_id: self.odb_network_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "odb_network_id",
                    "odb_network_id was not specified but it is required when building OdbNetwork",
                )
            })?,
            display_name: self.display_name,
            status: self.status,
            status_reason: self.status_reason,
            odb_network_arn: self.odb_network_arn,
            availability_zone: self.availability_zone,
            availability_zone_id: self.availability_zone_id,
            client_subnet_cidr: self.client_subnet_cidr,
            backup_subnet_cidr: self.backup_subnet_cidr,
            custom_domain_name: self.custom_domain_name,
            default_dns_prefix: self.default_dns_prefix,
            peered_cidrs: self.peered_cidrs,
            oci_network_anchor_id: self.oci_network_anchor_id,
            oci_network_anchor_url: self.oci_network_anchor_url,
            oci_resource_anchor_name: self.oci_resource_anchor_name,
            oci_vcn_id: self.oci_vcn_id,
            oci_vcn_url: self.oci_vcn_url,
            oci_dns_forwarding_configs: self.oci_dns_forwarding_configs,
            created_at: self.created_at,
            percent_progress: self.percent_progress,
            managed_services: self.managed_services,
        })
    }
}
