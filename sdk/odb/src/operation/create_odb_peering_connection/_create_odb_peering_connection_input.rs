// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateOdbPeeringConnectionInput {
    /// <p>The unique identifier of the ODB network that initiates the peering connection.</p>
    pub odb_network_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the peer network. This can be either a VPC ID or another ODB network ID.</p>
    pub peer_network_id: ::std::option::Option<::std::string::String>,
    /// <p>The display name for the ODB peering connection.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The client token for the ODB peering connection request.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be unique for each request.</p></li>
    /// </ul>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The tags to assign to the ODB peering connection.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateOdbPeeringConnectionInput {
    /// <p>The unique identifier of the ODB network that initiates the peering connection.</p>
    pub fn odb_network_id(&self) -> ::std::option::Option<&str> {
        self.odb_network_id.as_deref()
    }
    /// <p>The unique identifier of the peer network. This can be either a VPC ID or another ODB network ID.</p>
    pub fn peer_network_id(&self) -> ::std::option::Option<&str> {
        self.peer_network_id.as_deref()
    }
    /// <p>The display name for the ODB peering connection.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The client token for the ODB peering connection request.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be unique for each request.</p></li>
    /// </ul>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The tags to assign to the ODB peering connection.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateOdbPeeringConnectionInput {
    /// Creates a new builder-style object to manufacture [`CreateOdbPeeringConnectionInput`](crate::operation::create_odb_peering_connection::CreateOdbPeeringConnectionInput).
    pub fn builder() -> crate::operation::create_odb_peering_connection::builders::CreateOdbPeeringConnectionInputBuilder {
        crate::operation::create_odb_peering_connection::builders::CreateOdbPeeringConnectionInputBuilder::default()
    }
}

/// A builder for [`CreateOdbPeeringConnectionInput`](crate::operation::create_odb_peering_connection::CreateOdbPeeringConnectionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateOdbPeeringConnectionInputBuilder {
    pub(crate) odb_network_id: ::std::option::Option<::std::string::String>,
    pub(crate) peer_network_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateOdbPeeringConnectionInputBuilder {
    /// <p>The unique identifier of the ODB network that initiates the peering connection.</p>
    /// This field is required.
    pub fn odb_network_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.odb_network_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the ODB network that initiates the peering connection.</p>
    pub fn set_odb_network_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.odb_network_id = input;
        self
    }
    /// <p>The unique identifier of the ODB network that initiates the peering connection.</p>
    pub fn get_odb_network_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.odb_network_id
    }
    /// <p>The unique identifier of the peer network. This can be either a VPC ID or another ODB network ID.</p>
    /// This field is required.
    pub fn peer_network_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.peer_network_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the peer network. This can be either a VPC ID or another ODB network ID.</p>
    pub fn set_peer_network_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.peer_network_id = input;
        self
    }
    /// <p>The unique identifier of the peer network. This can be either a VPC ID or another ODB network ID.</p>
    pub fn get_peer_network_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.peer_network_id
    }
    /// <p>The display name for the ODB peering connection.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name for the ODB peering connection.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name for the ODB peering connection.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The client token for the ODB peering connection request.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be unique for each request.</p></li>
    /// </ul>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The client token for the ODB peering connection request.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be unique for each request.</p></li>
    /// </ul>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The client token for the ODB peering connection request.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be unique for each request.</p></li>
    /// </ul>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to assign to the ODB peering connection.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags to assign to the ODB peering connection.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags to assign to the ODB peering connection.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateOdbPeeringConnectionInput`](crate::operation::create_odb_peering_connection::CreateOdbPeeringConnectionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_odb_peering_connection::CreateOdbPeeringConnectionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_odb_peering_connection::CreateOdbPeeringConnectionInput {
            odb_network_id: self.odb_network_id,
            peer_network_id: self.peer_network_id,
            display_name: self.display_name,
            client_token: self.client_token,
            tags: self.tags,
        })
    }
}
