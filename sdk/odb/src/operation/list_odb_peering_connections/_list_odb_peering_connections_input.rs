// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListOdbPeeringConnectionsInput {
    /// <p>The maximum number of ODB peering connections to return in the response.</p>
    /// <p>Default: <code>20</code></p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be between 1 and 100.</p></li>
    /// </ul>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The pagination token for the next page of ODB peering connections.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the ODB network to list peering connections for.</p>
    /// <p>If not specified, lists all ODB peering connections in the account.</p>
    pub odb_network_id: ::std::option::Option<::std::string::String>,
}
impl ListOdbPeeringConnectionsInput {
    /// <p>The maximum number of ODB peering connections to return in the response.</p>
    /// <p>Default: <code>20</code></p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be between 1 and 100.</p></li>
    /// </ul>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The pagination token for the next page of ODB peering connections.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The identifier of the ODB network to list peering connections for.</p>
    /// <p>If not specified, lists all ODB peering connections in the account.</p>
    pub fn odb_network_id(&self) -> ::std::option::Option<&str> {
        self.odb_network_id.as_deref()
    }
}
impl ListOdbPeeringConnectionsInput {
    /// Creates a new builder-style object to manufacture [`ListOdbPeeringConnectionsInput`](crate::operation::list_odb_peering_connections::ListOdbPeeringConnectionsInput).
    pub fn builder() -> crate::operation::list_odb_peering_connections::builders::ListOdbPeeringConnectionsInputBuilder {
        crate::operation::list_odb_peering_connections::builders::ListOdbPeeringConnectionsInputBuilder::default()
    }
}

/// A builder for [`ListOdbPeeringConnectionsInput`](crate::operation::list_odb_peering_connections::ListOdbPeeringConnectionsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListOdbPeeringConnectionsInputBuilder {
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) odb_network_id: ::std::option::Option<::std::string::String>,
}
impl ListOdbPeeringConnectionsInputBuilder {
    /// <p>The maximum number of ODB peering connections to return in the response.</p>
    /// <p>Default: <code>20</code></p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be between 1 and 100.</p></li>
    /// </ul>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of ODB peering connections to return in the response.</p>
    /// <p>Default: <code>20</code></p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be between 1 and 100.</p></li>
    /// </ul>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of ODB peering connections to return in the response.</p>
    /// <p>Default: <code>20</code></p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be between 1 and 100.</p></li>
    /// </ul>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The pagination token for the next page of ODB peering connections.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token for the next page of ODB peering connections.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token for the next page of ODB peering connections.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The identifier of the ODB network to list peering connections for.</p>
    /// <p>If not specified, lists all ODB peering connections in the account.</p>
    pub fn odb_network_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.odb_network_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the ODB network to list peering connections for.</p>
    /// <p>If not specified, lists all ODB peering connections in the account.</p>
    pub fn set_odb_network_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.odb_network_id = input;
        self
    }
    /// <p>The identifier of the ODB network to list peering connections for.</p>
    /// <p>If not specified, lists all ODB peering connections in the account.</p>
    pub fn get_odb_network_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.odb_network_id
    }
    /// Consumes the builder and constructs a [`ListOdbPeeringConnectionsInput`](crate::operation::list_odb_peering_connections::ListOdbPeeringConnectionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_odb_peering_connections::ListOdbPeeringConnectionsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_odb_peering_connections::ListOdbPeeringConnectionsInput {
            max_results: self.max_results,
            next_token: self.next_token,
            odb_network_id: self.odb_network_id,
        })
    }
}
