// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateOdbNetworkOutput {
    /// <p>The user-friendly name of the ODB network.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the ODB network.</p>
    pub status: ::std::option::Option<crate::types::ResourceStatus>,
    /// <p>Additional information about the status of the ODB network.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the ODB network.</p>
    pub odb_network_id: ::std::string::String,
    _request_id: Option<String>,
}
impl UpdateOdbNetworkOutput {
    /// <p>The user-friendly name of the ODB network.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The current status of the ODB network.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ResourceStatus> {
        self.status.as_ref()
    }
    /// <p>Additional information about the status of the ODB network.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The unique identifier of the ODB network.</p>
    pub fn odb_network_id(&self) -> &str {
        use std::ops::Deref;
        self.odb_network_id.deref()
    }
}
impl ::aws_types::request_id::RequestId for UpdateOdbNetworkOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateOdbNetworkOutput {
    /// Creates a new builder-style object to manufacture [`UpdateOdbNetworkOutput`](crate::operation::update_odb_network::UpdateOdbNetworkOutput).
    pub fn builder() -> crate::operation::update_odb_network::builders::UpdateOdbNetworkOutputBuilder {
        crate::operation::update_odb_network::builders::UpdateOdbNetworkOutputBuilder::default()
    }
}

/// A builder for [`UpdateOdbNetworkOutput`](crate::operation::update_odb_network::UpdateOdbNetworkOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateOdbNetworkOutputBuilder {
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ResourceStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) odb_network_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl UpdateOdbNetworkOutputBuilder {
    /// <p>The user-friendly name of the ODB network.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user-friendly name of the ODB network.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The user-friendly name of the ODB network.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The current status of the ODB network.</p>
    pub fn status(mut self, input: crate::types::ResourceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the ODB network.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ResourceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the ODB network.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ResourceStatus> {
        &self.status
    }
    /// <p>Additional information about the status of the ODB network.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Additional information about the status of the ODB network.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>Additional information about the status of the ODB network.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The unique identifier of the ODB network.</p>
    /// This field is required.
    pub fn odb_network_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.odb_network_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the ODB network.</p>
    pub fn set_odb_network_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.odb_network_id = input;
        self
    }
    /// <p>The unique identifier of the ODB network.</p>
    pub fn get_odb_network_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.odb_network_id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateOdbNetworkOutput`](crate::operation::update_odb_network::UpdateOdbNetworkOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`odb_network_id`](crate::operation::update_odb_network::builders::UpdateOdbNetworkOutputBuilder::odb_network_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_odb_network::UpdateOdbNetworkOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_odb_network::UpdateOdbNetworkOutput {
            display_name: self.display_name,
            status: self.status,
            status_reason: self.status_reason,
            odb_network_id: self.odb_network_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "odb_network_id",
                    "odb_network_id was not specified but it is required when building UpdateOdbNetworkOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
