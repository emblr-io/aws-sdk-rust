// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateOdbNetworkInput {
    /// <p>The unique identifier of the ODB network to update.</p>
    pub odb_network_id: ::std::option::Option<::std::string::String>,
    /// <p>The new user-friendly name of the ODB network.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The list of CIDR ranges from the peered VPC that allow access to the ODB network.</p>
    pub peered_cidrs_to_be_added: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The list of CIDR ranges from the peered VPC to remove from the ODB network.</p>
    pub peered_cidrs_to_be_removed: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies the updated configuration for Amazon S3 access from the ODB network.</p>
    pub s3_access: ::std::option::Option<crate::types::Access>,
    /// <p>Specifies the updated configuration for Zero-ETL access from the ODB network.</p>
    pub zero_etl_access: ::std::option::Option<crate::types::Access>,
    /// <p>Specifies the updated endpoint policy for Amazon S3 access from the ODB network.</p>
    pub s3_policy_document: ::std::option::Option<::std::string::String>,
}
impl UpdateOdbNetworkInput {
    /// <p>The unique identifier of the ODB network to update.</p>
    pub fn odb_network_id(&self) -> ::std::option::Option<&str> {
        self.odb_network_id.as_deref()
    }
    /// <p>The new user-friendly name of the ODB network.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The list of CIDR ranges from the peered VPC that allow access to the ODB network.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.peered_cidrs_to_be_added.is_none()`.
    pub fn peered_cidrs_to_be_added(&self) -> &[::std::string::String] {
        self.peered_cidrs_to_be_added.as_deref().unwrap_or_default()
    }
    /// <p>The list of CIDR ranges from the peered VPC to remove from the ODB network.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.peered_cidrs_to_be_removed.is_none()`.
    pub fn peered_cidrs_to_be_removed(&self) -> &[::std::string::String] {
        self.peered_cidrs_to_be_removed.as_deref().unwrap_or_default()
    }
    /// <p>Specifies the updated configuration for Amazon S3 access from the ODB network.</p>
    pub fn s3_access(&self) -> ::std::option::Option<&crate::types::Access> {
        self.s3_access.as_ref()
    }
    /// <p>Specifies the updated configuration for Zero-ETL access from the ODB network.</p>
    pub fn zero_etl_access(&self) -> ::std::option::Option<&crate::types::Access> {
        self.zero_etl_access.as_ref()
    }
    /// <p>Specifies the updated endpoint policy for Amazon S3 access from the ODB network.</p>
    pub fn s3_policy_document(&self) -> ::std::option::Option<&str> {
        self.s3_policy_document.as_deref()
    }
}
impl UpdateOdbNetworkInput {
    /// Creates a new builder-style object to manufacture [`UpdateOdbNetworkInput`](crate::operation::update_odb_network::UpdateOdbNetworkInput).
    pub fn builder() -> crate::operation::update_odb_network::builders::UpdateOdbNetworkInputBuilder {
        crate::operation::update_odb_network::builders::UpdateOdbNetworkInputBuilder::default()
    }
}

/// A builder for [`UpdateOdbNetworkInput`](crate::operation::update_odb_network::UpdateOdbNetworkInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateOdbNetworkInputBuilder {
    pub(crate) odb_network_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) peered_cidrs_to_be_added: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) peered_cidrs_to_be_removed: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) s3_access: ::std::option::Option<crate::types::Access>,
    pub(crate) zero_etl_access: ::std::option::Option<crate::types::Access>,
    pub(crate) s3_policy_document: ::std::option::Option<::std::string::String>,
}
impl UpdateOdbNetworkInputBuilder {
    /// <p>The unique identifier of the ODB network to update.</p>
    /// This field is required.
    pub fn odb_network_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.odb_network_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the ODB network to update.</p>
    pub fn set_odb_network_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.odb_network_id = input;
        self
    }
    /// <p>The unique identifier of the ODB network to update.</p>
    pub fn get_odb_network_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.odb_network_id
    }
    /// <p>The new user-friendly name of the ODB network.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new user-friendly name of the ODB network.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The new user-friendly name of the ODB network.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// Appends an item to `peered_cidrs_to_be_added`.
    ///
    /// To override the contents of this collection use [`set_peered_cidrs_to_be_added`](Self::set_peered_cidrs_to_be_added).
    ///
    /// <p>The list of CIDR ranges from the peered VPC that allow access to the ODB network.</p>
    pub fn peered_cidrs_to_be_added(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.peered_cidrs_to_be_added.unwrap_or_default();
        v.push(input.into());
        self.peered_cidrs_to_be_added = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of CIDR ranges from the peered VPC that allow access to the ODB network.</p>
    pub fn set_peered_cidrs_to_be_added(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.peered_cidrs_to_be_added = input;
        self
    }
    /// <p>The list of CIDR ranges from the peered VPC that allow access to the ODB network.</p>
    pub fn get_peered_cidrs_to_be_added(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.peered_cidrs_to_be_added
    }
    /// Appends an item to `peered_cidrs_to_be_removed`.
    ///
    /// To override the contents of this collection use [`set_peered_cidrs_to_be_removed`](Self::set_peered_cidrs_to_be_removed).
    ///
    /// <p>The list of CIDR ranges from the peered VPC to remove from the ODB network.</p>
    pub fn peered_cidrs_to_be_removed(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.peered_cidrs_to_be_removed.unwrap_or_default();
        v.push(input.into());
        self.peered_cidrs_to_be_removed = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of CIDR ranges from the peered VPC to remove from the ODB network.</p>
    pub fn set_peered_cidrs_to_be_removed(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.peered_cidrs_to_be_removed = input;
        self
    }
    /// <p>The list of CIDR ranges from the peered VPC to remove from the ODB network.</p>
    pub fn get_peered_cidrs_to_be_removed(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.peered_cidrs_to_be_removed
    }
    /// <p>Specifies the updated configuration for Amazon S3 access from the ODB network.</p>
    pub fn s3_access(mut self, input: crate::types::Access) -> Self {
        self.s3_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the updated configuration for Amazon S3 access from the ODB network.</p>
    pub fn set_s3_access(mut self, input: ::std::option::Option<crate::types::Access>) -> Self {
        self.s3_access = input;
        self
    }
    /// <p>Specifies the updated configuration for Amazon S3 access from the ODB network.</p>
    pub fn get_s3_access(&self) -> &::std::option::Option<crate::types::Access> {
        &self.s3_access
    }
    /// <p>Specifies the updated configuration for Zero-ETL access from the ODB network.</p>
    pub fn zero_etl_access(mut self, input: crate::types::Access) -> Self {
        self.zero_etl_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the updated configuration for Zero-ETL access from the ODB network.</p>
    pub fn set_zero_etl_access(mut self, input: ::std::option::Option<crate::types::Access>) -> Self {
        self.zero_etl_access = input;
        self
    }
    /// <p>Specifies the updated configuration for Zero-ETL access from the ODB network.</p>
    pub fn get_zero_etl_access(&self) -> &::std::option::Option<crate::types::Access> {
        &self.zero_etl_access
    }
    /// <p>Specifies the updated endpoint policy for Amazon S3 access from the ODB network.</p>
    pub fn s3_policy_document(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_policy_document = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the updated endpoint policy for Amazon S3 access from the ODB network.</p>
    pub fn set_s3_policy_document(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_policy_document = input;
        self
    }
    /// <p>Specifies the updated endpoint policy for Amazon S3 access from the ODB network.</p>
    pub fn get_s3_policy_document(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_policy_document
    }
    /// Consumes the builder and constructs a [`UpdateOdbNetworkInput`](crate::operation::update_odb_network::UpdateOdbNetworkInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_odb_network::UpdateOdbNetworkInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_odb_network::UpdateOdbNetworkInput {
            odb_network_id: self.odb_network_id,
            display_name: self.display_name,
            peered_cidrs_to_be_added: self.peered_cidrs_to_be_added,
            peered_cidrs_to_be_removed: self.peered_cidrs_to_be_removed,
            s3_access: self.s3_access,
            zero_etl_access: self.zero_etl_access,
            s3_policy_document: self.s3_policy_document,
        })
    }
}
