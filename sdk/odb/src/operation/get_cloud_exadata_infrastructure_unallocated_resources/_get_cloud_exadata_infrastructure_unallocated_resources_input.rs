// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetCloudExadataInfrastructureUnallocatedResourcesInput {
    /// <p>The unique identifier of the Cloud Exadata infrastructure for which to retrieve unallocated resources.</p>
    pub cloud_exadata_infrastructure_id: ::std::option::Option<::std::string::String>,
    /// <p>The database servers to include in the unallocated resources query.</p>
    pub db_servers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl GetCloudExadataInfrastructureUnallocatedResourcesInput {
    /// <p>The unique identifier of the Cloud Exadata infrastructure for which to retrieve unallocated resources.</p>
    pub fn cloud_exadata_infrastructure_id(&self) -> ::std::option::Option<&str> {
        self.cloud_exadata_infrastructure_id.as_deref()
    }
    /// <p>The database servers to include in the unallocated resources query.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.db_servers.is_none()`.
    pub fn db_servers(&self) -> &[::std::string::String] {
        self.db_servers.as_deref().unwrap_or_default()
    }
}
impl GetCloudExadataInfrastructureUnallocatedResourcesInput {
    /// Creates a new builder-style object to manufacture [`GetCloudExadataInfrastructureUnallocatedResourcesInput`](crate::operation::get_cloud_exadata_infrastructure_unallocated_resources::GetCloudExadataInfrastructureUnallocatedResourcesInput).
    pub fn builder() -> crate::operation::get_cloud_exadata_infrastructure_unallocated_resources::builders::GetCloudExadataInfrastructureUnallocatedResourcesInputBuilder{
        crate::operation::get_cloud_exadata_infrastructure_unallocated_resources::builders::GetCloudExadataInfrastructureUnallocatedResourcesInputBuilder::default()
    }
}

/// A builder for [`GetCloudExadataInfrastructureUnallocatedResourcesInput`](crate::operation::get_cloud_exadata_infrastructure_unallocated_resources::GetCloudExadataInfrastructureUnallocatedResourcesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetCloudExadataInfrastructureUnallocatedResourcesInputBuilder {
    pub(crate) cloud_exadata_infrastructure_id: ::std::option::Option<::std::string::String>,
    pub(crate) db_servers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl GetCloudExadataInfrastructureUnallocatedResourcesInputBuilder {
    /// <p>The unique identifier of the Cloud Exadata infrastructure for which to retrieve unallocated resources.</p>
    /// This field is required.
    pub fn cloud_exadata_infrastructure_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloud_exadata_infrastructure_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Cloud Exadata infrastructure for which to retrieve unallocated resources.</p>
    pub fn set_cloud_exadata_infrastructure_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloud_exadata_infrastructure_id = input;
        self
    }
    /// <p>The unique identifier of the Cloud Exadata infrastructure for which to retrieve unallocated resources.</p>
    pub fn get_cloud_exadata_infrastructure_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloud_exadata_infrastructure_id
    }
    /// Appends an item to `db_servers`.
    ///
    /// To override the contents of this collection use [`set_db_servers`](Self::set_db_servers).
    ///
    /// <p>The database servers to include in the unallocated resources query.</p>
    pub fn db_servers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.db_servers.unwrap_or_default();
        v.push(input.into());
        self.db_servers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The database servers to include in the unallocated resources query.</p>
    pub fn set_db_servers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.db_servers = input;
        self
    }
    /// <p>The database servers to include in the unallocated resources query.</p>
    pub fn get_db_servers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.db_servers
    }
    /// Consumes the builder and constructs a [`GetCloudExadataInfrastructureUnallocatedResourcesInput`](crate::operation::get_cloud_exadata_infrastructure_unallocated_resources::GetCloudExadataInfrastructureUnallocatedResourcesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_cloud_exadata_infrastructure_unallocated_resources::GetCloudExadataInfrastructureUnallocatedResourcesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::get_cloud_exadata_infrastructure_unallocated_resources::GetCloudExadataInfrastructureUnallocatedResourcesInput {
                cloud_exadata_infrastructure_id: self.cloud_exadata_infrastructure_id,
                db_servers: self.db_servers,
            },
        )
    }
}
