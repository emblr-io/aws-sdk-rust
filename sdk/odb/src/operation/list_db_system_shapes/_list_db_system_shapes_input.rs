// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListDbSystemShapesInput {
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.</p>
    /// <p>Default: <code>10</code></p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The logical name of the AZ, for example, us-east-1a. This name varies depending on the account.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The physical ID of the AZ, for example, use1-az4. This ID persists across accounts.</p>
    pub availability_zone_id: ::std::option::Option<::std::string::String>,
}
impl ListDbSystemShapesInput {
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.</p>
    /// <p>Default: <code>10</code></p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The logical name of the AZ, for example, us-east-1a. This name varies depending on the account.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The physical ID of the AZ, for example, use1-az4. This ID persists across accounts.</p>
    pub fn availability_zone_id(&self) -> ::std::option::Option<&str> {
        self.availability_zone_id.as_deref()
    }
}
impl ListDbSystemShapesInput {
    /// Creates a new builder-style object to manufacture [`ListDbSystemShapesInput`](crate::operation::list_db_system_shapes::ListDbSystemShapesInput).
    pub fn builder() -> crate::operation::list_db_system_shapes::builders::ListDbSystemShapesInputBuilder {
        crate::operation::list_db_system_shapes::builders::ListDbSystemShapesInputBuilder::default()
    }
}

/// A builder for [`ListDbSystemShapesInput`](crate::operation::list_db_system_shapes::ListDbSystemShapesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListDbSystemShapesInputBuilder {
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone_id: ::std::option::Option<::std::string::String>,
}
impl ListDbSystemShapesInputBuilder {
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.</p>
    /// <p>Default: <code>10</code></p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.</p>
    /// <p>Default: <code>10</code></p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.</p>
    /// <p>Default: <code>10</code></p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The logical name of the AZ, for example, us-east-1a. This name varies depending on the account.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The logical name of the AZ, for example, us-east-1a. This name varies depending on the account.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The logical name of the AZ, for example, us-east-1a. This name varies depending on the account.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The physical ID of the AZ, for example, use1-az4. This ID persists across accounts.</p>
    pub fn availability_zone_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The physical ID of the AZ, for example, use1-az4. This ID persists across accounts.</p>
    pub fn set_availability_zone_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone_id = input;
        self
    }
    /// <p>The physical ID of the AZ, for example, use1-az4. This ID persists across accounts.</p>
    pub fn get_availability_zone_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone_id
    }
    /// Consumes the builder and constructs a [`ListDbSystemShapesInput`](crate::operation::list_db_system_shapes::ListDbSystemShapesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_db_system_shapes::ListDbSystemShapesInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_db_system_shapes::ListDbSystemShapesInput {
            max_results: self.max_results,
            next_token: self.next_token,
            availability_zone: self.availability_zone,
            availability_zone_id: self.availability_zone_id,
        })
    }
}
