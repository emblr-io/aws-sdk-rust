// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartDbNodeOutput {
    /// <p>The unique identifier of the DB node that was started.</p>
    pub db_node_id: ::std::string::String,
    /// <p>The current status of the DB node after the start operation.</p>
    pub status: ::std::option::Option<crate::types::DbNodeResourceStatus>,
    /// <p>Additional information about the status of the DB node after the start operation.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl StartDbNodeOutput {
    /// <p>The unique identifier of the DB node that was started.</p>
    pub fn db_node_id(&self) -> &str {
        use std::ops::Deref;
        self.db_node_id.deref()
    }
    /// <p>The current status of the DB node after the start operation.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::DbNodeResourceStatus> {
        self.status.as_ref()
    }
    /// <p>Additional information about the status of the DB node after the start operation.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for StartDbNodeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartDbNodeOutput {
    /// Creates a new builder-style object to manufacture [`StartDbNodeOutput`](crate::operation::start_db_node::StartDbNodeOutput).
    pub fn builder() -> crate::operation::start_db_node::builders::StartDbNodeOutputBuilder {
        crate::operation::start_db_node::builders::StartDbNodeOutputBuilder::default()
    }
}

/// A builder for [`StartDbNodeOutput`](crate::operation::start_db_node::StartDbNodeOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartDbNodeOutputBuilder {
    pub(crate) db_node_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::DbNodeResourceStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl StartDbNodeOutputBuilder {
    /// <p>The unique identifier of the DB node that was started.</p>
    /// This field is required.
    pub fn db_node_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_node_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the DB node that was started.</p>
    pub fn set_db_node_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_node_id = input;
        self
    }
    /// <p>The unique identifier of the DB node that was started.</p>
    pub fn get_db_node_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_node_id
    }
    /// <p>The current status of the DB node after the start operation.</p>
    pub fn status(mut self, input: crate::types::DbNodeResourceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the DB node after the start operation.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DbNodeResourceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the DB node after the start operation.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DbNodeResourceStatus> {
        &self.status
    }
    /// <p>Additional information about the status of the DB node after the start operation.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Additional information about the status of the DB node after the start operation.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>Additional information about the status of the DB node after the start operation.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartDbNodeOutput`](crate::operation::start_db_node::StartDbNodeOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`db_node_id`](crate::operation::start_db_node::builders::StartDbNodeOutputBuilder::db_node_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_db_node::StartDbNodeOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_db_node::StartDbNodeOutput {
            db_node_id: self.db_node_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "db_node_id",
                    "db_node_id was not specified but it is required when building StartDbNodeOutput",
                )
            })?,
            status: self.status,
            status_reason: self.status_reason,
            _request_id: self._request_id,
        })
    }
}
