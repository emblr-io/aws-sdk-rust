// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartDbNodeInput {
    /// <p>The unique identifier of the VM cluster that contains the DB node to start.</p>
    pub cloud_vm_cluster_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the DB node to start.</p>
    pub db_node_id: ::std::option::Option<::std::string::String>,
}
impl StartDbNodeInput {
    /// <p>The unique identifier of the VM cluster that contains the DB node to start.</p>
    pub fn cloud_vm_cluster_id(&self) -> ::std::option::Option<&str> {
        self.cloud_vm_cluster_id.as_deref()
    }
    /// <p>The unique identifier of the DB node to start.</p>
    pub fn db_node_id(&self) -> ::std::option::Option<&str> {
        self.db_node_id.as_deref()
    }
}
impl StartDbNodeInput {
    /// Creates a new builder-style object to manufacture [`StartDbNodeInput`](crate::operation::start_db_node::StartDbNodeInput).
    pub fn builder() -> crate::operation::start_db_node::builders::StartDbNodeInputBuilder {
        crate::operation::start_db_node::builders::StartDbNodeInputBuilder::default()
    }
}

/// A builder for [`StartDbNodeInput`](crate::operation::start_db_node::StartDbNodeInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartDbNodeInputBuilder {
    pub(crate) cloud_vm_cluster_id: ::std::option::Option<::std::string::String>,
    pub(crate) db_node_id: ::std::option::Option<::std::string::String>,
}
impl StartDbNodeInputBuilder {
    /// <p>The unique identifier of the VM cluster that contains the DB node to start.</p>
    /// This field is required.
    pub fn cloud_vm_cluster_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloud_vm_cluster_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the VM cluster that contains the DB node to start.</p>
    pub fn set_cloud_vm_cluster_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloud_vm_cluster_id = input;
        self
    }
    /// <p>The unique identifier of the VM cluster that contains the DB node to start.</p>
    pub fn get_cloud_vm_cluster_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloud_vm_cluster_id
    }
    /// <p>The unique identifier of the DB node to start.</p>
    /// This field is required.
    pub fn db_node_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_node_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the DB node to start.</p>
    pub fn set_db_node_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_node_id = input;
        self
    }
    /// <p>The unique identifier of the DB node to start.</p>
    pub fn get_db_node_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_node_id
    }
    /// Consumes the builder and constructs a [`StartDbNodeInput`](crate::operation::start_db_node::StartDbNodeInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::start_db_node::StartDbNodeInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_db_node::StartDbNodeInput {
            cloud_vm_cluster_id: self.cloud_vm_cluster_id,
            db_node_id: self.db_node_id,
        })
    }
}
