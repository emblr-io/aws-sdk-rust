// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateCloudExadataInfrastructureInput {
    /// <p>The unique identifier of the Exadata infrastructure to update.</p>
    pub cloud_exadata_infrastructure_id: ::std::option::Option<::std::string::String>,
    /// <p>The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.</p>
    pub maintenance_window: ::std::option::Option<crate::types::MaintenanceWindow>,
}
impl UpdateCloudExadataInfrastructureInput {
    /// <p>The unique identifier of the Exadata infrastructure to update.</p>
    pub fn cloud_exadata_infrastructure_id(&self) -> ::std::option::Option<&str> {
        self.cloud_exadata_infrastructure_id.as_deref()
    }
    /// <p>The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.</p>
    pub fn maintenance_window(&self) -> ::std::option::Option<&crate::types::MaintenanceWindow> {
        self.maintenance_window.as_ref()
    }
}
impl UpdateCloudExadataInfrastructureInput {
    /// Creates a new builder-style object to manufacture [`UpdateCloudExadataInfrastructureInput`](crate::operation::update_cloud_exadata_infrastructure::UpdateCloudExadataInfrastructureInput).
    pub fn builder() -> crate::operation::update_cloud_exadata_infrastructure::builders::UpdateCloudExadataInfrastructureInputBuilder {
        crate::operation::update_cloud_exadata_infrastructure::builders::UpdateCloudExadataInfrastructureInputBuilder::default()
    }
}

/// A builder for [`UpdateCloudExadataInfrastructureInput`](crate::operation::update_cloud_exadata_infrastructure::UpdateCloudExadataInfrastructureInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateCloudExadataInfrastructureInputBuilder {
    pub(crate) cloud_exadata_infrastructure_id: ::std::option::Option<::std::string::String>,
    pub(crate) maintenance_window: ::std::option::Option<crate::types::MaintenanceWindow>,
}
impl UpdateCloudExadataInfrastructureInputBuilder {
    /// <p>The unique identifier of the Exadata infrastructure to update.</p>
    /// This field is required.
    pub fn cloud_exadata_infrastructure_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloud_exadata_infrastructure_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Exadata infrastructure to update.</p>
    pub fn set_cloud_exadata_infrastructure_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloud_exadata_infrastructure_id = input;
        self
    }
    /// <p>The unique identifier of the Exadata infrastructure to update.</p>
    pub fn get_cloud_exadata_infrastructure_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloud_exadata_infrastructure_id
    }
    /// <p>The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.</p>
    pub fn maintenance_window(mut self, input: crate::types::MaintenanceWindow) -> Self {
        self.maintenance_window = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.</p>
    pub fn set_maintenance_window(mut self, input: ::std::option::Option<crate::types::MaintenanceWindow>) -> Self {
        self.maintenance_window = input;
        self
    }
    /// <p>The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.</p>
    pub fn get_maintenance_window(&self) -> &::std::option::Option<crate::types::MaintenanceWindow> {
        &self.maintenance_window
    }
    /// Consumes the builder and constructs a [`UpdateCloudExadataInfrastructureInput`](crate::operation::update_cloud_exadata_infrastructure::UpdateCloudExadataInfrastructureInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_cloud_exadata_infrastructure::UpdateCloudExadataInfrastructureInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_cloud_exadata_infrastructure::UpdateCloudExadataInfrastructureInput {
                cloud_exadata_infrastructure_id: self.cloud_exadata_infrastructure_id,
                maintenance_window: self.maintenance_window,
            },
        )
    }
}
