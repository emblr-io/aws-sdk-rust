// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateCloudVmClusterInput {
    /// <p>The unique identifier of the Exadata infrastructure for this VM cluster.</p>
    pub cloud_exadata_infrastructure_id: ::std::option::Option<::std::string::String>,
    /// <p>The number of CPU cores to enable on the VM cluster.</p>
    pub cpu_core_count: ::std::option::Option<i32>,
    /// <p>A user-friendly name for the VM cluster.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>A valid software version of Oracle Grid Infrastructure (GI). To get the list of valid values, use the <code>ListGiVersions</code> operation and specify the shape of the Exadata infrastructure.</p>
    /// <p>Example: <code>19.0.0.0</code></p>
    pub gi_version: ::std::option::Option<::std::string::String>,
    /// <p>The host name for the VM cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be "localhost" or "hostname".</p></li>
    /// <li>
    /// <p>Can't contain "-version".</p></li>
    /// <li>
    /// <p>The maximum length of the combined hostname and domain is 63 characters.</p></li>
    /// <li>
    /// <p>The hostname must be unique within the subnet.</p></li>
    /// </ul>
    pub hostname: ::std::option::Option<::std::string::String>,
    /// <p>The public key portion of one or more key pairs used for SSH access to the VM cluster.</p>
    pub ssh_public_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The unique identifier of the ODB network for the VM cluster.</p>
    pub odb_network_id: ::std::option::Option<::std::string::String>,
    /// <p>A name for the Grid Infrastructure cluster. The name isn't case sensitive.</p>
    pub cluster_name: ::std::option::Option<::std::string::String>,
    /// <p>The set of preferences for the various diagnostic collection options for the VM cluster.</p>
    pub data_collection_options: ::std::option::Option<crate::types::DataCollectionOptions>,
    /// <p>The size of the data disk group, in terabytes (TBs), to allocate for the VM cluster.</p>
    pub data_storage_size_in_tbs: ::std::option::Option<f64>,
    /// <p>The amount of local node storage, in gigabytes (GBs), to allocate for the VM cluster.</p>
    pub db_node_storage_size_in_gbs: ::std::option::Option<i32>,
    /// <p>The list of database servers for the VM cluster.</p>
    pub db_servers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The list of resource tags to apply to the VM cluster.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Specifies whether to enable database backups to local Exadata storage for the VM cluster.</p>
    pub is_local_backup_enabled: ::std::option::Option<bool>,
    /// <p>Specifies whether to create a sparse disk group for the VM cluster.</p>
    pub is_sparse_diskgroup_enabled: ::std::option::Option<bool>,
    /// <p>The Oracle license model to apply to the VM cluster.</p>
    /// <p>Default: <code>LICENSE_INCLUDED</code></p>
    pub license_model: ::std::option::Option<crate::types::LicenseModel>,
    /// <p>The amount of memory, in gigabytes (GBs), to allocate for the VM cluster.</p>
    pub memory_size_in_gbs: ::std::option::Option<i32>,
    /// <p>The version of the operating system of the image for the VM cluster.</p>
    pub system_version: ::std::option::Option<::std::string::String>,
    /// <p>The time zone for the VM cluster. For a list of valid values for time zone, you can check the options in the console.</p>
    /// <p>Default: UTC</p>
    pub time_zone: ::std::option::Option<::std::string::String>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency. The client token is valid for up to 24 hours after it's first used.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The port number for TCP connections to the single client access name (SCAN) listener.</p>
    /// <p>Valid values: <code>1024â€“8999</code> with the following exceptions: <code>2484</code>, <code>6100</code>, <code>6200</code>, <code>7060</code>, <code>7070</code>, <code>7085</code>, and <code>7879</code></p>
    /// <p>Default: <code>1521</code></p>
    pub scan_listener_port_tcp: ::std::option::Option<i32>,
}
impl CreateCloudVmClusterInput {
    /// <p>The unique identifier of the Exadata infrastructure for this VM cluster.</p>
    pub fn cloud_exadata_infrastructure_id(&self) -> ::std::option::Option<&str> {
        self.cloud_exadata_infrastructure_id.as_deref()
    }
    /// <p>The number of CPU cores to enable on the VM cluster.</p>
    pub fn cpu_core_count(&self) -> ::std::option::Option<i32> {
        self.cpu_core_count
    }
    /// <p>A user-friendly name for the VM cluster.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>A valid software version of Oracle Grid Infrastructure (GI). To get the list of valid values, use the <code>ListGiVersions</code> operation and specify the shape of the Exadata infrastructure.</p>
    /// <p>Example: <code>19.0.0.0</code></p>
    pub fn gi_version(&self) -> ::std::option::Option<&str> {
        self.gi_version.as_deref()
    }
    /// <p>The host name for the VM cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be "localhost" or "hostname".</p></li>
    /// <li>
    /// <p>Can't contain "-version".</p></li>
    /// <li>
    /// <p>The maximum length of the combined hostname and domain is 63 characters.</p></li>
    /// <li>
    /// <p>The hostname must be unique within the subnet.</p></li>
    /// </ul>
    pub fn hostname(&self) -> ::std::option::Option<&str> {
        self.hostname.as_deref()
    }
    /// <p>The public key portion of one or more key pairs used for SSH access to the VM cluster.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ssh_public_keys.is_none()`.
    pub fn ssh_public_keys(&self) -> &[::std::string::String] {
        self.ssh_public_keys.as_deref().unwrap_or_default()
    }
    /// <p>The unique identifier of the ODB network for the VM cluster.</p>
    pub fn odb_network_id(&self) -> ::std::option::Option<&str> {
        self.odb_network_id.as_deref()
    }
    /// <p>A name for the Grid Infrastructure cluster. The name isn't case sensitive.</p>
    pub fn cluster_name(&self) -> ::std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>The set of preferences for the various diagnostic collection options for the VM cluster.</p>
    pub fn data_collection_options(&self) -> ::std::option::Option<&crate::types::DataCollectionOptions> {
        self.data_collection_options.as_ref()
    }
    /// <p>The size of the data disk group, in terabytes (TBs), to allocate for the VM cluster.</p>
    pub fn data_storage_size_in_tbs(&self) -> ::std::option::Option<f64> {
        self.data_storage_size_in_tbs
    }
    /// <p>The amount of local node storage, in gigabytes (GBs), to allocate for the VM cluster.</p>
    pub fn db_node_storage_size_in_gbs(&self) -> ::std::option::Option<i32> {
        self.db_node_storage_size_in_gbs
    }
    /// <p>The list of database servers for the VM cluster.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.db_servers.is_none()`.
    pub fn db_servers(&self) -> &[::std::string::String] {
        self.db_servers.as_deref().unwrap_or_default()
    }
    /// <p>The list of resource tags to apply to the VM cluster.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>Specifies whether to enable database backups to local Exadata storage for the VM cluster.</p>
    pub fn is_local_backup_enabled(&self) -> ::std::option::Option<bool> {
        self.is_local_backup_enabled
    }
    /// <p>Specifies whether to create a sparse disk group for the VM cluster.</p>
    pub fn is_sparse_diskgroup_enabled(&self) -> ::std::option::Option<bool> {
        self.is_sparse_diskgroup_enabled
    }
    /// <p>The Oracle license model to apply to the VM cluster.</p>
    /// <p>Default: <code>LICENSE_INCLUDED</code></p>
    pub fn license_model(&self) -> ::std::option::Option<&crate::types::LicenseModel> {
        self.license_model.as_ref()
    }
    /// <p>The amount of memory, in gigabytes (GBs), to allocate for the VM cluster.</p>
    pub fn memory_size_in_gbs(&self) -> ::std::option::Option<i32> {
        self.memory_size_in_gbs
    }
    /// <p>The version of the operating system of the image for the VM cluster.</p>
    pub fn system_version(&self) -> ::std::option::Option<&str> {
        self.system_version.as_deref()
    }
    /// <p>The time zone for the VM cluster. For a list of valid values for time zone, you can check the options in the console.</p>
    /// <p>Default: UTC</p>
    pub fn time_zone(&self) -> ::std::option::Option<&str> {
        self.time_zone.as_deref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency. The client token is valid for up to 24 hours after it's first used.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The port number for TCP connections to the single client access name (SCAN) listener.</p>
    /// <p>Valid values: <code>1024â€“8999</code> with the following exceptions: <code>2484</code>, <code>6100</code>, <code>6200</code>, <code>7060</code>, <code>7070</code>, <code>7085</code>, and <code>7879</code></p>
    /// <p>Default: <code>1521</code></p>
    pub fn scan_listener_port_tcp(&self) -> ::std::option::Option<i32> {
        self.scan_listener_port_tcp
    }
}
impl CreateCloudVmClusterInput {
    /// Creates a new builder-style object to manufacture [`CreateCloudVmClusterInput`](crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterInput).
    pub fn builder() -> crate::operation::create_cloud_vm_cluster::builders::CreateCloudVmClusterInputBuilder {
        crate::operation::create_cloud_vm_cluster::builders::CreateCloudVmClusterInputBuilder::default()
    }
}

/// A builder for [`CreateCloudVmClusterInput`](crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateCloudVmClusterInputBuilder {
    pub(crate) cloud_exadata_infrastructure_id: ::std::option::Option<::std::string::String>,
    pub(crate) cpu_core_count: ::std::option::Option<i32>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) gi_version: ::std::option::Option<::std::string::String>,
    pub(crate) hostname: ::std::option::Option<::std::string::String>,
    pub(crate) ssh_public_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) odb_network_id: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_name: ::std::option::Option<::std::string::String>,
    pub(crate) data_collection_options: ::std::option::Option<crate::types::DataCollectionOptions>,
    pub(crate) data_storage_size_in_tbs: ::std::option::Option<f64>,
    pub(crate) db_node_storage_size_in_gbs: ::std::option::Option<i32>,
    pub(crate) db_servers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) is_local_backup_enabled: ::std::option::Option<bool>,
    pub(crate) is_sparse_diskgroup_enabled: ::std::option::Option<bool>,
    pub(crate) license_model: ::std::option::Option<crate::types::LicenseModel>,
    pub(crate) memory_size_in_gbs: ::std::option::Option<i32>,
    pub(crate) system_version: ::std::option::Option<::std::string::String>,
    pub(crate) time_zone: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) scan_listener_port_tcp: ::std::option::Option<i32>,
}
impl CreateCloudVmClusterInputBuilder {
    /// <p>The unique identifier of the Exadata infrastructure for this VM cluster.</p>
    /// This field is required.
    pub fn cloud_exadata_infrastructure_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloud_exadata_infrastructure_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Exadata infrastructure for this VM cluster.</p>
    pub fn set_cloud_exadata_infrastructure_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloud_exadata_infrastructure_id = input;
        self
    }
    /// <p>The unique identifier of the Exadata infrastructure for this VM cluster.</p>
    pub fn get_cloud_exadata_infrastructure_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloud_exadata_infrastructure_id
    }
    /// <p>The number of CPU cores to enable on the VM cluster.</p>
    /// This field is required.
    pub fn cpu_core_count(mut self, input: i32) -> Self {
        self.cpu_core_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of CPU cores to enable on the VM cluster.</p>
    pub fn set_cpu_core_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.cpu_core_count = input;
        self
    }
    /// <p>The number of CPU cores to enable on the VM cluster.</p>
    pub fn get_cpu_core_count(&self) -> &::std::option::Option<i32> {
        &self.cpu_core_count
    }
    /// <p>A user-friendly name for the VM cluster.</p>
    /// This field is required.
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user-friendly name for the VM cluster.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>A user-friendly name for the VM cluster.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>A valid software version of Oracle Grid Infrastructure (GI). To get the list of valid values, use the <code>ListGiVersions</code> operation and specify the shape of the Exadata infrastructure.</p>
    /// <p>Example: <code>19.0.0.0</code></p>
    /// This field is required.
    pub fn gi_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.gi_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A valid software version of Oracle Grid Infrastructure (GI). To get the list of valid values, use the <code>ListGiVersions</code> operation and specify the shape of the Exadata infrastructure.</p>
    /// <p>Example: <code>19.0.0.0</code></p>
    pub fn set_gi_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.gi_version = input;
        self
    }
    /// <p>A valid software version of Oracle Grid Infrastructure (GI). To get the list of valid values, use the <code>ListGiVersions</code> operation and specify the shape of the Exadata infrastructure.</p>
    /// <p>Example: <code>19.0.0.0</code></p>
    pub fn get_gi_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.gi_version
    }
    /// <p>The host name for the VM cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be "localhost" or "hostname".</p></li>
    /// <li>
    /// <p>Can't contain "-version".</p></li>
    /// <li>
    /// <p>The maximum length of the combined hostname and domain is 63 characters.</p></li>
    /// <li>
    /// <p>The hostname must be unique within the subnet.</p></li>
    /// </ul>
    /// This field is required.
    pub fn hostname(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hostname = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The host name for the VM cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be "localhost" or "hostname".</p></li>
    /// <li>
    /// <p>Can't contain "-version".</p></li>
    /// <li>
    /// <p>The maximum length of the combined hostname and domain is 63 characters.</p></li>
    /// <li>
    /// <p>The hostname must be unique within the subnet.</p></li>
    /// </ul>
    pub fn set_hostname(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hostname = input;
        self
    }
    /// <p>The host name for the VM cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be "localhost" or "hostname".</p></li>
    /// <li>
    /// <p>Can't contain "-version".</p></li>
    /// <li>
    /// <p>The maximum length of the combined hostname and domain is 63 characters.</p></li>
    /// <li>
    /// <p>The hostname must be unique within the subnet.</p></li>
    /// </ul>
    pub fn get_hostname(&self) -> &::std::option::Option<::std::string::String> {
        &self.hostname
    }
    /// Appends an item to `ssh_public_keys`.
    ///
    /// To override the contents of this collection use [`set_ssh_public_keys`](Self::set_ssh_public_keys).
    ///
    /// <p>The public key portion of one or more key pairs used for SSH access to the VM cluster.</p>
    pub fn ssh_public_keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.ssh_public_keys.unwrap_or_default();
        v.push(input.into());
        self.ssh_public_keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>The public key portion of one or more key pairs used for SSH access to the VM cluster.</p>
    pub fn set_ssh_public_keys(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.ssh_public_keys = input;
        self
    }
    /// <p>The public key portion of one or more key pairs used for SSH access to the VM cluster.</p>
    pub fn get_ssh_public_keys(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.ssh_public_keys
    }
    /// <p>The unique identifier of the ODB network for the VM cluster.</p>
    /// This field is required.
    pub fn odb_network_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.odb_network_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the ODB network for the VM cluster.</p>
    pub fn set_odb_network_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.odb_network_id = input;
        self
    }
    /// <p>The unique identifier of the ODB network for the VM cluster.</p>
    pub fn get_odb_network_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.odb_network_id
    }
    /// <p>A name for the Grid Infrastructure cluster. The name isn't case sensitive.</p>
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the Grid Infrastructure cluster. The name isn't case sensitive.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>A name for the Grid Infrastructure cluster. The name isn't case sensitive.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_name
    }
    /// <p>The set of preferences for the various diagnostic collection options for the VM cluster.</p>
    pub fn data_collection_options(mut self, input: crate::types::DataCollectionOptions) -> Self {
        self.data_collection_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The set of preferences for the various diagnostic collection options for the VM cluster.</p>
    pub fn set_data_collection_options(mut self, input: ::std::option::Option<crate::types::DataCollectionOptions>) -> Self {
        self.data_collection_options = input;
        self
    }
    /// <p>The set of preferences for the various diagnostic collection options for the VM cluster.</p>
    pub fn get_data_collection_options(&self) -> &::std::option::Option<crate::types::DataCollectionOptions> {
        &self.data_collection_options
    }
    /// <p>The size of the data disk group, in terabytes (TBs), to allocate for the VM cluster.</p>
    pub fn data_storage_size_in_tbs(mut self, input: f64) -> Self {
        self.data_storage_size_in_tbs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the data disk group, in terabytes (TBs), to allocate for the VM cluster.</p>
    pub fn set_data_storage_size_in_tbs(mut self, input: ::std::option::Option<f64>) -> Self {
        self.data_storage_size_in_tbs = input;
        self
    }
    /// <p>The size of the data disk group, in terabytes (TBs), to allocate for the VM cluster.</p>
    pub fn get_data_storage_size_in_tbs(&self) -> &::std::option::Option<f64> {
        &self.data_storage_size_in_tbs
    }
    /// <p>The amount of local node storage, in gigabytes (GBs), to allocate for the VM cluster.</p>
    pub fn db_node_storage_size_in_gbs(mut self, input: i32) -> Self {
        self.db_node_storage_size_in_gbs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of local node storage, in gigabytes (GBs), to allocate for the VM cluster.</p>
    pub fn set_db_node_storage_size_in_gbs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.db_node_storage_size_in_gbs = input;
        self
    }
    /// <p>The amount of local node storage, in gigabytes (GBs), to allocate for the VM cluster.</p>
    pub fn get_db_node_storage_size_in_gbs(&self) -> &::std::option::Option<i32> {
        &self.db_node_storage_size_in_gbs
    }
    /// Appends an item to `db_servers`.
    ///
    /// To override the contents of this collection use [`set_db_servers`](Self::set_db_servers).
    ///
    /// <p>The list of database servers for the VM cluster.</p>
    pub fn db_servers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.db_servers.unwrap_or_default();
        v.push(input.into());
        self.db_servers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of database servers for the VM cluster.</p>
    pub fn set_db_servers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.db_servers = input;
        self
    }
    /// <p>The list of database servers for the VM cluster.</p>
    pub fn get_db_servers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.db_servers
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of resource tags to apply to the VM cluster.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The list of resource tags to apply to the VM cluster.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The list of resource tags to apply to the VM cluster.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>Specifies whether to enable database backups to local Exadata storage for the VM cluster.</p>
    pub fn is_local_backup_enabled(mut self, input: bool) -> Self {
        self.is_local_backup_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to enable database backups to local Exadata storage for the VM cluster.</p>
    pub fn set_is_local_backup_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_local_backup_enabled = input;
        self
    }
    /// <p>Specifies whether to enable database backups to local Exadata storage for the VM cluster.</p>
    pub fn get_is_local_backup_enabled(&self) -> &::std::option::Option<bool> {
        &self.is_local_backup_enabled
    }
    /// <p>Specifies whether to create a sparse disk group for the VM cluster.</p>
    pub fn is_sparse_diskgroup_enabled(mut self, input: bool) -> Self {
        self.is_sparse_diskgroup_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to create a sparse disk group for the VM cluster.</p>
    pub fn set_is_sparse_diskgroup_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_sparse_diskgroup_enabled = input;
        self
    }
    /// <p>Specifies whether to create a sparse disk group for the VM cluster.</p>
    pub fn get_is_sparse_diskgroup_enabled(&self) -> &::std::option::Option<bool> {
        &self.is_sparse_diskgroup_enabled
    }
    /// <p>The Oracle license model to apply to the VM cluster.</p>
    /// <p>Default: <code>LICENSE_INCLUDED</code></p>
    pub fn license_model(mut self, input: crate::types::LicenseModel) -> Self {
        self.license_model = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Oracle license model to apply to the VM cluster.</p>
    /// <p>Default: <code>LICENSE_INCLUDED</code></p>
    pub fn set_license_model(mut self, input: ::std::option::Option<crate::types::LicenseModel>) -> Self {
        self.license_model = input;
        self
    }
    /// <p>The Oracle license model to apply to the VM cluster.</p>
    /// <p>Default: <code>LICENSE_INCLUDED</code></p>
    pub fn get_license_model(&self) -> &::std::option::Option<crate::types::LicenseModel> {
        &self.license_model
    }
    /// <p>The amount of memory, in gigabytes (GBs), to allocate for the VM cluster.</p>
    pub fn memory_size_in_gbs(mut self, input: i32) -> Self {
        self.memory_size_in_gbs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of memory, in gigabytes (GBs), to allocate for the VM cluster.</p>
    pub fn set_memory_size_in_gbs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.memory_size_in_gbs = input;
        self
    }
    /// <p>The amount of memory, in gigabytes (GBs), to allocate for the VM cluster.</p>
    pub fn get_memory_size_in_gbs(&self) -> &::std::option::Option<i32> {
        &self.memory_size_in_gbs
    }
    /// <p>The version of the operating system of the image for the VM cluster.</p>
    pub fn system_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.system_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the operating system of the image for the VM cluster.</p>
    pub fn set_system_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.system_version = input;
        self
    }
    /// <p>The version of the operating system of the image for the VM cluster.</p>
    pub fn get_system_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.system_version
    }
    /// <p>The time zone for the VM cluster. For a list of valid values for time zone, you can check the options in the console.</p>
    /// <p>Default: UTC</p>
    pub fn time_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.time_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time zone for the VM cluster. For a list of valid values for time zone, you can check the options in the console.</p>
    /// <p>Default: UTC</p>
    pub fn set_time_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.time_zone = input;
        self
    }
    /// <p>The time zone for the VM cluster. For a list of valid values for time zone, you can check the options in the console.</p>
    /// <p>Default: UTC</p>
    pub fn get_time_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.time_zone
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency. The client token is valid for up to 24 hours after it's first used.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency. The client token is valid for up to 24 hours after it's first used.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency. The client token is valid for up to 24 hours after it's first used.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The port number for TCP connections to the single client access name (SCAN) listener.</p>
    /// <p>Valid values: <code>1024â€“8999</code> with the following exceptions: <code>2484</code>, <code>6100</code>, <code>6200</code>, <code>7060</code>, <code>7070</code>, <code>7085</code>, and <code>7879</code></p>
    /// <p>Default: <code>1521</code></p>
    pub fn scan_listener_port_tcp(mut self, input: i32) -> Self {
        self.scan_listener_port_tcp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port number for TCP connections to the single client access name (SCAN) listener.</p>
    /// <p>Valid values: <code>1024â€“8999</code> with the following exceptions: <code>2484</code>, <code>6100</code>, <code>6200</code>, <code>7060</code>, <code>7070</code>, <code>7085</code>, and <code>7879</code></p>
    /// <p>Default: <code>1521</code></p>
    pub fn set_scan_listener_port_tcp(mut self, input: ::std::option::Option<i32>) -> Self {
        self.scan_listener_port_tcp = input;
        self
    }
    /// <p>The port number for TCP connections to the single client access name (SCAN) listener.</p>
    /// <p>Valid values: <code>1024â€“8999</code> with the following exceptions: <code>2484</code>, <code>6100</code>, <code>6200</code>, <code>7060</code>, <code>7070</code>, <code>7085</code>, and <code>7879</code></p>
    /// <p>Default: <code>1521</code></p>
    pub fn get_scan_listener_port_tcp(&self) -> &::std::option::Option<i32> {
        &self.scan_listener_port_tcp
    }
    /// Consumes the builder and constructs a [`CreateCloudVmClusterInput`](crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterInput {
            cloud_exadata_infrastructure_id: self.cloud_exadata_infrastructure_id,
            cpu_core_count: self.cpu_core_count,
            display_name: self.display_name,
            gi_version: self.gi_version,
            hostname: self.hostname,
            ssh_public_keys: self.ssh_public_keys,
            odb_network_id: self.odb_network_id,
            cluster_name: self.cluster_name,
            data_collection_options: self.data_collection_options,
            data_storage_size_in_tbs: self.data_storage_size_in_tbs,
            db_node_storage_size_in_gbs: self.db_node_storage_size_in_gbs,
            db_servers: self.db_servers,
            tags: self.tags,
            is_local_backup_enabled: self.is_local_backup_enabled,
            is_sparse_diskgroup_enabled: self.is_sparse_diskgroup_enabled,
            license_model: self.license_model,
            memory_size_in_gbs: self.memory_size_in_gbs,
            system_version: self.system_version,
            time_zone: self.time_zone,
            client_token: self.client_token,
            scan_listener_port_tcp: self.scan_listener_port_tcp,
        })
    }
}
