// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateCloudAutonomousVmClusterInput {
    /// <p>The unique identifier of the Exadata infrastructure where the VM cluster will be created.</p>
    pub cloud_exadata_infrastructure_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the ODB network to be used for the VM cluster.</p>
    pub odb_network_id: ::std::option::Option<::std::string::String>,
    /// <p>The display name for the Autonomous VM cluster. The name does not need to be unique.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>A client-provided token to ensure idempotency of the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The data disk group size to be allocated for Autonomous Databases, in terabytes (TB).</p>
    pub autonomous_data_storage_size_in_tbs: ::std::option::Option<f64>,
    /// <p>The number of CPU cores to be enabled per VM cluster node.</p>
    pub cpu_core_count_per_node: ::std::option::Option<i32>,
    /// <p>The list of database servers to be used for the Autonomous VM cluster.</p>
    pub db_servers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A user-provided description of the Autonomous VM cluster.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether to enable mutual TLS (mTLS) authentication for the Autonomous VM cluster.</p>
    pub is_mtls_enabled_vm_cluster: ::std::option::Option<bool>,
    /// <p>The Oracle license model to apply to the Autonomous VM cluster.</p>
    pub license_model: ::std::option::Option<crate::types::LicenseModel>,
    /// <p>The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.</p>
    pub maintenance_window: ::std::option::Option<crate::types::MaintenanceWindow>,
    /// <p>The amount of memory to be allocated per OCPU, in GB.</p>
    pub memory_per_oracle_compute_unit_in_gbs: ::std::option::Option<i32>,
    /// <p>The SCAN listener port for non-TLS (TCP) protocol.</p>
    pub scan_listener_port_non_tls: ::std::option::Option<i32>,
    /// <p>The SCAN listener port for TLS (TCP) protocol.</p>
    pub scan_listener_port_tls: ::std::option::Option<i32>,
    /// <p>Free-form tags for this resource. Each tag is a key-value pair with no predefined name, type, or namespace.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The time zone to use for the Autonomous VM cluster.</p>
    pub time_zone: ::std::option::Option<::std::string::String>,
    /// <p>The total number of Autonomous CDBs that you can create in the Autonomous VM cluster.</p>
    pub total_container_databases: ::std::option::Option<i32>,
}
impl CreateCloudAutonomousVmClusterInput {
    /// <p>The unique identifier of the Exadata infrastructure where the VM cluster will be created.</p>
    pub fn cloud_exadata_infrastructure_id(&self) -> ::std::option::Option<&str> {
        self.cloud_exadata_infrastructure_id.as_deref()
    }
    /// <p>The unique identifier of the ODB network to be used for the VM cluster.</p>
    pub fn odb_network_id(&self) -> ::std::option::Option<&str> {
        self.odb_network_id.as_deref()
    }
    /// <p>The display name for the Autonomous VM cluster. The name does not need to be unique.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>A client-provided token to ensure idempotency of the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The data disk group size to be allocated for Autonomous Databases, in terabytes (TB).</p>
    pub fn autonomous_data_storage_size_in_tbs(&self) -> ::std::option::Option<f64> {
        self.autonomous_data_storage_size_in_tbs
    }
    /// <p>The number of CPU cores to be enabled per VM cluster node.</p>
    pub fn cpu_core_count_per_node(&self) -> ::std::option::Option<i32> {
        self.cpu_core_count_per_node
    }
    /// <p>The list of database servers to be used for the Autonomous VM cluster.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.db_servers.is_none()`.
    pub fn db_servers(&self) -> &[::std::string::String] {
        self.db_servers.as_deref().unwrap_or_default()
    }
    /// <p>A user-provided description of the Autonomous VM cluster.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Specifies whether to enable mutual TLS (mTLS) authentication for the Autonomous VM cluster.</p>
    pub fn is_mtls_enabled_vm_cluster(&self) -> ::std::option::Option<bool> {
        self.is_mtls_enabled_vm_cluster
    }
    /// <p>The Oracle license model to apply to the Autonomous VM cluster.</p>
    pub fn license_model(&self) -> ::std::option::Option<&crate::types::LicenseModel> {
        self.license_model.as_ref()
    }
    /// <p>The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.</p>
    pub fn maintenance_window(&self) -> ::std::option::Option<&crate::types::MaintenanceWindow> {
        self.maintenance_window.as_ref()
    }
    /// <p>The amount of memory to be allocated per OCPU, in GB.</p>
    pub fn memory_per_oracle_compute_unit_in_gbs(&self) -> ::std::option::Option<i32> {
        self.memory_per_oracle_compute_unit_in_gbs
    }
    /// <p>The SCAN listener port for non-TLS (TCP) protocol.</p>
    pub fn scan_listener_port_non_tls(&self) -> ::std::option::Option<i32> {
        self.scan_listener_port_non_tls
    }
    /// <p>The SCAN listener port for TLS (TCP) protocol.</p>
    pub fn scan_listener_port_tls(&self) -> ::std::option::Option<i32> {
        self.scan_listener_port_tls
    }
    /// <p>Free-form tags for this resource. Each tag is a key-value pair with no predefined name, type, or namespace.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The time zone to use for the Autonomous VM cluster.</p>
    pub fn time_zone(&self) -> ::std::option::Option<&str> {
        self.time_zone.as_deref()
    }
    /// <p>The total number of Autonomous CDBs that you can create in the Autonomous VM cluster.</p>
    pub fn total_container_databases(&self) -> ::std::option::Option<i32> {
        self.total_container_databases
    }
}
impl CreateCloudAutonomousVmClusterInput {
    /// Creates a new builder-style object to manufacture [`CreateCloudAutonomousVmClusterInput`](crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterInput).
    pub fn builder() -> crate::operation::create_cloud_autonomous_vm_cluster::builders::CreateCloudAutonomousVmClusterInputBuilder {
        crate::operation::create_cloud_autonomous_vm_cluster::builders::CreateCloudAutonomousVmClusterInputBuilder::default()
    }
}

/// A builder for [`CreateCloudAutonomousVmClusterInput`](crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateCloudAutonomousVmClusterInputBuilder {
    pub(crate) cloud_exadata_infrastructure_id: ::std::option::Option<::std::string::String>,
    pub(crate) odb_network_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) autonomous_data_storage_size_in_tbs: ::std::option::Option<f64>,
    pub(crate) cpu_core_count_per_node: ::std::option::Option<i32>,
    pub(crate) db_servers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) is_mtls_enabled_vm_cluster: ::std::option::Option<bool>,
    pub(crate) license_model: ::std::option::Option<crate::types::LicenseModel>,
    pub(crate) maintenance_window: ::std::option::Option<crate::types::MaintenanceWindow>,
    pub(crate) memory_per_oracle_compute_unit_in_gbs: ::std::option::Option<i32>,
    pub(crate) scan_listener_port_non_tls: ::std::option::Option<i32>,
    pub(crate) scan_listener_port_tls: ::std::option::Option<i32>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) time_zone: ::std::option::Option<::std::string::String>,
    pub(crate) total_container_databases: ::std::option::Option<i32>,
}
impl CreateCloudAutonomousVmClusterInputBuilder {
    /// <p>The unique identifier of the Exadata infrastructure where the VM cluster will be created.</p>
    /// This field is required.
    pub fn cloud_exadata_infrastructure_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloud_exadata_infrastructure_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Exadata infrastructure where the VM cluster will be created.</p>
    pub fn set_cloud_exadata_infrastructure_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloud_exadata_infrastructure_id = input;
        self
    }
    /// <p>The unique identifier of the Exadata infrastructure where the VM cluster will be created.</p>
    pub fn get_cloud_exadata_infrastructure_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloud_exadata_infrastructure_id
    }
    /// <p>The unique identifier of the ODB network to be used for the VM cluster.</p>
    /// This field is required.
    pub fn odb_network_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.odb_network_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the ODB network to be used for the VM cluster.</p>
    pub fn set_odb_network_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.odb_network_id = input;
        self
    }
    /// <p>The unique identifier of the ODB network to be used for the VM cluster.</p>
    pub fn get_odb_network_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.odb_network_id
    }
    /// <p>The display name for the Autonomous VM cluster. The name does not need to be unique.</p>
    /// This field is required.
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name for the Autonomous VM cluster. The name does not need to be unique.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name for the Autonomous VM cluster. The name does not need to be unique.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>A client-provided token to ensure idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A client-provided token to ensure idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A client-provided token to ensure idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The data disk group size to be allocated for Autonomous Databases, in terabytes (TB).</p>
    /// This field is required.
    pub fn autonomous_data_storage_size_in_tbs(mut self, input: f64) -> Self {
        self.autonomous_data_storage_size_in_tbs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data disk group size to be allocated for Autonomous Databases, in terabytes (TB).</p>
    pub fn set_autonomous_data_storage_size_in_tbs(mut self, input: ::std::option::Option<f64>) -> Self {
        self.autonomous_data_storage_size_in_tbs = input;
        self
    }
    /// <p>The data disk group size to be allocated for Autonomous Databases, in terabytes (TB).</p>
    pub fn get_autonomous_data_storage_size_in_tbs(&self) -> &::std::option::Option<f64> {
        &self.autonomous_data_storage_size_in_tbs
    }
    /// <p>The number of CPU cores to be enabled per VM cluster node.</p>
    /// This field is required.
    pub fn cpu_core_count_per_node(mut self, input: i32) -> Self {
        self.cpu_core_count_per_node = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of CPU cores to be enabled per VM cluster node.</p>
    pub fn set_cpu_core_count_per_node(mut self, input: ::std::option::Option<i32>) -> Self {
        self.cpu_core_count_per_node = input;
        self
    }
    /// <p>The number of CPU cores to be enabled per VM cluster node.</p>
    pub fn get_cpu_core_count_per_node(&self) -> &::std::option::Option<i32> {
        &self.cpu_core_count_per_node
    }
    /// Appends an item to `db_servers`.
    ///
    /// To override the contents of this collection use [`set_db_servers`](Self::set_db_servers).
    ///
    /// <p>The list of database servers to be used for the Autonomous VM cluster.</p>
    pub fn db_servers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.db_servers.unwrap_or_default();
        v.push(input.into());
        self.db_servers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of database servers to be used for the Autonomous VM cluster.</p>
    pub fn set_db_servers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.db_servers = input;
        self
    }
    /// <p>The list of database servers to be used for the Autonomous VM cluster.</p>
    pub fn get_db_servers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.db_servers
    }
    /// <p>A user-provided description of the Autonomous VM cluster.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user-provided description of the Autonomous VM cluster.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A user-provided description of the Autonomous VM cluster.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Specifies whether to enable mutual TLS (mTLS) authentication for the Autonomous VM cluster.</p>
    pub fn is_mtls_enabled_vm_cluster(mut self, input: bool) -> Self {
        self.is_mtls_enabled_vm_cluster = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to enable mutual TLS (mTLS) authentication for the Autonomous VM cluster.</p>
    pub fn set_is_mtls_enabled_vm_cluster(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_mtls_enabled_vm_cluster = input;
        self
    }
    /// <p>Specifies whether to enable mutual TLS (mTLS) authentication for the Autonomous VM cluster.</p>
    pub fn get_is_mtls_enabled_vm_cluster(&self) -> &::std::option::Option<bool> {
        &self.is_mtls_enabled_vm_cluster
    }
    /// <p>The Oracle license model to apply to the Autonomous VM cluster.</p>
    pub fn license_model(mut self, input: crate::types::LicenseModel) -> Self {
        self.license_model = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Oracle license model to apply to the Autonomous VM cluster.</p>
    pub fn set_license_model(mut self, input: ::std::option::Option<crate::types::LicenseModel>) -> Self {
        self.license_model = input;
        self
    }
    /// <p>The Oracle license model to apply to the Autonomous VM cluster.</p>
    pub fn get_license_model(&self) -> &::std::option::Option<crate::types::LicenseModel> {
        &self.license_model
    }
    /// <p>The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.</p>
    pub fn maintenance_window(mut self, input: crate::types::MaintenanceWindow) -> Self {
        self.maintenance_window = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.</p>
    pub fn set_maintenance_window(mut self, input: ::std::option::Option<crate::types::MaintenanceWindow>) -> Self {
        self.maintenance_window = input;
        self
    }
    /// <p>The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.</p>
    pub fn get_maintenance_window(&self) -> &::std::option::Option<crate::types::MaintenanceWindow> {
        &self.maintenance_window
    }
    /// <p>The amount of memory to be allocated per OCPU, in GB.</p>
    /// This field is required.
    pub fn memory_per_oracle_compute_unit_in_gbs(mut self, input: i32) -> Self {
        self.memory_per_oracle_compute_unit_in_gbs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of memory to be allocated per OCPU, in GB.</p>
    pub fn set_memory_per_oracle_compute_unit_in_gbs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.memory_per_oracle_compute_unit_in_gbs = input;
        self
    }
    /// <p>The amount of memory to be allocated per OCPU, in GB.</p>
    pub fn get_memory_per_oracle_compute_unit_in_gbs(&self) -> &::std::option::Option<i32> {
        &self.memory_per_oracle_compute_unit_in_gbs
    }
    /// <p>The SCAN listener port for non-TLS (TCP) protocol.</p>
    pub fn scan_listener_port_non_tls(mut self, input: i32) -> Self {
        self.scan_listener_port_non_tls = ::std::option::Option::Some(input);
        self
    }
    /// <p>The SCAN listener port for non-TLS (TCP) protocol.</p>
    pub fn set_scan_listener_port_non_tls(mut self, input: ::std::option::Option<i32>) -> Self {
        self.scan_listener_port_non_tls = input;
        self
    }
    /// <p>The SCAN listener port for non-TLS (TCP) protocol.</p>
    pub fn get_scan_listener_port_non_tls(&self) -> &::std::option::Option<i32> {
        &self.scan_listener_port_non_tls
    }
    /// <p>The SCAN listener port for TLS (TCP) protocol.</p>
    pub fn scan_listener_port_tls(mut self, input: i32) -> Self {
        self.scan_listener_port_tls = ::std::option::Option::Some(input);
        self
    }
    /// <p>The SCAN listener port for TLS (TCP) protocol.</p>
    pub fn set_scan_listener_port_tls(mut self, input: ::std::option::Option<i32>) -> Self {
        self.scan_listener_port_tls = input;
        self
    }
    /// <p>The SCAN listener port for TLS (TCP) protocol.</p>
    pub fn get_scan_listener_port_tls(&self) -> &::std::option::Option<i32> {
        &self.scan_listener_port_tls
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Free-form tags for this resource. Each tag is a key-value pair with no predefined name, type, or namespace.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Free-form tags for this resource. Each tag is a key-value pair with no predefined name, type, or namespace.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Free-form tags for this resource. Each tag is a key-value pair with no predefined name, type, or namespace.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The time zone to use for the Autonomous VM cluster.</p>
    pub fn time_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.time_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time zone to use for the Autonomous VM cluster.</p>
    pub fn set_time_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.time_zone = input;
        self
    }
    /// <p>The time zone to use for the Autonomous VM cluster.</p>
    pub fn get_time_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.time_zone
    }
    /// <p>The total number of Autonomous CDBs that you can create in the Autonomous VM cluster.</p>
    /// This field is required.
    pub fn total_container_databases(mut self, input: i32) -> Self {
        self.total_container_databases = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of Autonomous CDBs that you can create in the Autonomous VM cluster.</p>
    pub fn set_total_container_databases(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_container_databases = input;
        self
    }
    /// <p>The total number of Autonomous CDBs that you can create in the Autonomous VM cluster.</p>
    pub fn get_total_container_databases(&self) -> &::std::option::Option<i32> {
        &self.total_container_databases
    }
    /// Consumes the builder and constructs a [`CreateCloudAutonomousVmClusterInput`](crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterInput {
                cloud_exadata_infrastructure_id: self.cloud_exadata_infrastructure_id,
                odb_network_id: self.odb_network_id,
                display_name: self.display_name,
                client_token: self.client_token,
                autonomous_data_storage_size_in_tbs: self.autonomous_data_storage_size_in_tbs,
                cpu_core_count_per_node: self.cpu_core_count_per_node,
                db_servers: self.db_servers,
                description: self.description,
                is_mtls_enabled_vm_cluster: self.is_mtls_enabled_vm_cluster,
                license_model: self.license_model,
                maintenance_window: self.maintenance_window,
                memory_per_oracle_compute_unit_in_gbs: self.memory_per_oracle_compute_unit_in_gbs,
                scan_listener_port_non_tls: self.scan_listener_port_non_tls,
                scan_listener_port_tls: self.scan_listener_port_tls,
                tags: self.tags,
                time_zone: self.time_zone,
                total_container_databases: self.total_container_databases,
            },
        )
    }
}
