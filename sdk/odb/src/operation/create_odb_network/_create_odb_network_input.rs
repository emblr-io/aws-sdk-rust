// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateOdbNetworkInput {
    /// <p>A user-friendly name for the ODB network.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Availability Zone (AZ) where the ODB network is located.</p>
    /// <p>This operation requires that you specify a value for either <code>availabilityZone</code> or <code>availabilityZoneId</code>.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The AZ ID of the AZ where the ODB network is located.</p>
    /// <p>This operation requires that you specify a value for either <code>availabilityZone</code> or <code>availabilityZoneId</code>.</p>
    pub availability_zone_id: ::std::option::Option<::std::string::String>,
    /// <p>The CIDR range of the client subnet for the ODB network.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must not overlap with the CIDR range of the backup subnet.</p></li>
    /// <li>
    /// <p>Must not overlap with the CIDR ranges of the VPCs that are connected to the ODB network.</p></li>
    /// <li>
    /// <p>Must not use the following CIDR ranges that are reserved by OCI:</p>
    /// <ul>
    /// <li>
    /// <p><code>100.106.0.0/16</code> and <code>100.107.0.0/16</code></p></li>
    /// <li>
    /// <p><code>169.254.0.0/16</code></p></li>
    /// <li>
    /// <p><code>224.0.0.0 - 239.255.255.255</code></p></li>
    /// <li>
    /// <p><code>240.0.0.0 - 255.255.255.255</code></p></li>
    /// </ul></li>
    /// </ul>
    pub client_subnet_cidr: ::std::option::Option<::std::string::String>,
    /// <p>The CIDR range of the backup subnet for the ODB network.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must not overlap with the CIDR range of the client subnet.</p></li>
    /// <li>
    /// <p>Must not overlap with the CIDR ranges of the VPCs that are connected to the ODB network.</p></li>
    /// <li>
    /// <p>Must not use the following CIDR ranges that are reserved by OCI:</p>
    /// <ul>
    /// <li>
    /// <p><code>100.106.0.0/16</code> and <code>100.107.0.0/16</code></p></li>
    /// <li>
    /// <p><code>169.254.0.0/16</code></p></li>
    /// <li>
    /// <p><code>224.0.0.0 - 239.255.255.255</code></p></li>
    /// <li>
    /// <p><code>240.0.0.0 - 255.255.255.255</code></p></li>
    /// </ul></li>
    /// </ul>
    pub backup_subnet_cidr: ::std::option::Option<::std::string::String>,
    /// <p>The domain name to use for the resources in the ODB network.</p>
    pub custom_domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The DNS prefix to the default DNS domain name. The default DNS domain name is oraclevcn.com.</p>
    pub default_dns_prefix: ::std::option::Option<::std::string::String>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency. The client token is valid for up to 24 hours after it's first used.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the configuration for Amazon S3 access from the ODB network.</p>
    pub s3_access: ::std::option::Option<crate::types::Access>,
    /// <p>Specifies the configuration for Zero-ETL access from the ODB network.</p>
    pub zero_etl_access: ::std::option::Option<crate::types::Access>,
    /// <p>Specifies the endpoint policy for Amazon S3 access from the ODB network.</p>
    pub s3_policy_document: ::std::option::Option<::std::string::String>,
    /// <p>The list of resource tags to apply to the ODB network.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateOdbNetworkInput {
    /// <p>A user-friendly name for the ODB network.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The Amazon Web Services Availability Zone (AZ) where the ODB network is located.</p>
    /// <p>This operation requires that you specify a value for either <code>availabilityZone</code> or <code>availabilityZoneId</code>.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The AZ ID of the AZ where the ODB network is located.</p>
    /// <p>This operation requires that you specify a value for either <code>availabilityZone</code> or <code>availabilityZoneId</code>.</p>
    pub fn availability_zone_id(&self) -> ::std::option::Option<&str> {
        self.availability_zone_id.as_deref()
    }
    /// <p>The CIDR range of the client subnet for the ODB network.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must not overlap with the CIDR range of the backup subnet.</p></li>
    /// <li>
    /// <p>Must not overlap with the CIDR ranges of the VPCs that are connected to the ODB network.</p></li>
    /// <li>
    /// <p>Must not use the following CIDR ranges that are reserved by OCI:</p>
    /// <ul>
    /// <li>
    /// <p><code>100.106.0.0/16</code> and <code>100.107.0.0/16</code></p></li>
    /// <li>
    /// <p><code>169.254.0.0/16</code></p></li>
    /// <li>
    /// <p><code>224.0.0.0 - 239.255.255.255</code></p></li>
    /// <li>
    /// <p><code>240.0.0.0 - 255.255.255.255</code></p></li>
    /// </ul></li>
    /// </ul>
    pub fn client_subnet_cidr(&self) -> ::std::option::Option<&str> {
        self.client_subnet_cidr.as_deref()
    }
    /// <p>The CIDR range of the backup subnet for the ODB network.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must not overlap with the CIDR range of the client subnet.</p></li>
    /// <li>
    /// <p>Must not overlap with the CIDR ranges of the VPCs that are connected to the ODB network.</p></li>
    /// <li>
    /// <p>Must not use the following CIDR ranges that are reserved by OCI:</p>
    /// <ul>
    /// <li>
    /// <p><code>100.106.0.0/16</code> and <code>100.107.0.0/16</code></p></li>
    /// <li>
    /// <p><code>169.254.0.0/16</code></p></li>
    /// <li>
    /// <p><code>224.0.0.0 - 239.255.255.255</code></p></li>
    /// <li>
    /// <p><code>240.0.0.0 - 255.255.255.255</code></p></li>
    /// </ul></li>
    /// </ul>
    pub fn backup_subnet_cidr(&self) -> ::std::option::Option<&str> {
        self.backup_subnet_cidr.as_deref()
    }
    /// <p>The domain name to use for the resources in the ODB network.</p>
    pub fn custom_domain_name(&self) -> ::std::option::Option<&str> {
        self.custom_domain_name.as_deref()
    }
    /// <p>The DNS prefix to the default DNS domain name. The default DNS domain name is oraclevcn.com.</p>
    pub fn default_dns_prefix(&self) -> ::std::option::Option<&str> {
        self.default_dns_prefix.as_deref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency. The client token is valid for up to 24 hours after it's first used.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Specifies the configuration for Amazon S3 access from the ODB network.</p>
    pub fn s3_access(&self) -> ::std::option::Option<&crate::types::Access> {
        self.s3_access.as_ref()
    }
    /// <p>Specifies the configuration for Zero-ETL access from the ODB network.</p>
    pub fn zero_etl_access(&self) -> ::std::option::Option<&crate::types::Access> {
        self.zero_etl_access.as_ref()
    }
    /// <p>Specifies the endpoint policy for Amazon S3 access from the ODB network.</p>
    pub fn s3_policy_document(&self) -> ::std::option::Option<&str> {
        self.s3_policy_document.as_deref()
    }
    /// <p>The list of resource tags to apply to the ODB network.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateOdbNetworkInput {
    /// Creates a new builder-style object to manufacture [`CreateOdbNetworkInput`](crate::operation::create_odb_network::CreateOdbNetworkInput).
    pub fn builder() -> crate::operation::create_odb_network::builders::CreateOdbNetworkInputBuilder {
        crate::operation::create_odb_network::builders::CreateOdbNetworkInputBuilder::default()
    }
}

/// A builder for [`CreateOdbNetworkInput`](crate::operation::create_odb_network::CreateOdbNetworkInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateOdbNetworkInputBuilder {
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_subnet_cidr: ::std::option::Option<::std::string::String>,
    pub(crate) backup_subnet_cidr: ::std::option::Option<::std::string::String>,
    pub(crate) custom_domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) default_dns_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) s3_access: ::std::option::Option<crate::types::Access>,
    pub(crate) zero_etl_access: ::std::option::Option<crate::types::Access>,
    pub(crate) s3_policy_document: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateOdbNetworkInputBuilder {
    /// <p>A user-friendly name for the ODB network.</p>
    /// This field is required.
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user-friendly name for the ODB network.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>A user-friendly name for the ODB network.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The Amazon Web Services Availability Zone (AZ) where the ODB network is located.</p>
    /// <p>This operation requires that you specify a value for either <code>availabilityZone</code> or <code>availabilityZoneId</code>.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Availability Zone (AZ) where the ODB network is located.</p>
    /// <p>This operation requires that you specify a value for either <code>availabilityZone</code> or <code>availabilityZoneId</code>.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The Amazon Web Services Availability Zone (AZ) where the ODB network is located.</p>
    /// <p>This operation requires that you specify a value for either <code>availabilityZone</code> or <code>availabilityZoneId</code>.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The AZ ID of the AZ where the ODB network is located.</p>
    /// <p>This operation requires that you specify a value for either <code>availabilityZone</code> or <code>availabilityZoneId</code>.</p>
    pub fn availability_zone_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AZ ID of the AZ where the ODB network is located.</p>
    /// <p>This operation requires that you specify a value for either <code>availabilityZone</code> or <code>availabilityZoneId</code>.</p>
    pub fn set_availability_zone_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone_id = input;
        self
    }
    /// <p>The AZ ID of the AZ where the ODB network is located.</p>
    /// <p>This operation requires that you specify a value for either <code>availabilityZone</code> or <code>availabilityZoneId</code>.</p>
    pub fn get_availability_zone_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone_id
    }
    /// <p>The CIDR range of the client subnet for the ODB network.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must not overlap with the CIDR range of the backup subnet.</p></li>
    /// <li>
    /// <p>Must not overlap with the CIDR ranges of the VPCs that are connected to the ODB network.</p></li>
    /// <li>
    /// <p>Must not use the following CIDR ranges that are reserved by OCI:</p>
    /// <ul>
    /// <li>
    /// <p><code>100.106.0.0/16</code> and <code>100.107.0.0/16</code></p></li>
    /// <li>
    /// <p><code>169.254.0.0/16</code></p></li>
    /// <li>
    /// <p><code>224.0.0.0 - 239.255.255.255</code></p></li>
    /// <li>
    /// <p><code>240.0.0.0 - 255.255.255.255</code></p></li>
    /// </ul></li>
    /// </ul>
    /// This field is required.
    pub fn client_subnet_cidr(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_subnet_cidr = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CIDR range of the client subnet for the ODB network.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must not overlap with the CIDR range of the backup subnet.</p></li>
    /// <li>
    /// <p>Must not overlap with the CIDR ranges of the VPCs that are connected to the ODB network.</p></li>
    /// <li>
    /// <p>Must not use the following CIDR ranges that are reserved by OCI:</p>
    /// <ul>
    /// <li>
    /// <p><code>100.106.0.0/16</code> and <code>100.107.0.0/16</code></p></li>
    /// <li>
    /// <p><code>169.254.0.0/16</code></p></li>
    /// <li>
    /// <p><code>224.0.0.0 - 239.255.255.255</code></p></li>
    /// <li>
    /// <p><code>240.0.0.0 - 255.255.255.255</code></p></li>
    /// </ul></li>
    /// </ul>
    pub fn set_client_subnet_cidr(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_subnet_cidr = input;
        self
    }
    /// <p>The CIDR range of the client subnet for the ODB network.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must not overlap with the CIDR range of the backup subnet.</p></li>
    /// <li>
    /// <p>Must not overlap with the CIDR ranges of the VPCs that are connected to the ODB network.</p></li>
    /// <li>
    /// <p>Must not use the following CIDR ranges that are reserved by OCI:</p>
    /// <ul>
    /// <li>
    /// <p><code>100.106.0.0/16</code> and <code>100.107.0.0/16</code></p></li>
    /// <li>
    /// <p><code>169.254.0.0/16</code></p></li>
    /// <li>
    /// <p><code>224.0.0.0 - 239.255.255.255</code></p></li>
    /// <li>
    /// <p><code>240.0.0.0 - 255.255.255.255</code></p></li>
    /// </ul></li>
    /// </ul>
    pub fn get_client_subnet_cidr(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_subnet_cidr
    }
    /// <p>The CIDR range of the backup subnet for the ODB network.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must not overlap with the CIDR range of the client subnet.</p></li>
    /// <li>
    /// <p>Must not overlap with the CIDR ranges of the VPCs that are connected to the ODB network.</p></li>
    /// <li>
    /// <p>Must not use the following CIDR ranges that are reserved by OCI:</p>
    /// <ul>
    /// <li>
    /// <p><code>100.106.0.0/16</code> and <code>100.107.0.0/16</code></p></li>
    /// <li>
    /// <p><code>169.254.0.0/16</code></p></li>
    /// <li>
    /// <p><code>224.0.0.0 - 239.255.255.255</code></p></li>
    /// <li>
    /// <p><code>240.0.0.0 - 255.255.255.255</code></p></li>
    /// </ul></li>
    /// </ul>
    pub fn backup_subnet_cidr(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_subnet_cidr = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CIDR range of the backup subnet for the ODB network.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must not overlap with the CIDR range of the client subnet.</p></li>
    /// <li>
    /// <p>Must not overlap with the CIDR ranges of the VPCs that are connected to the ODB network.</p></li>
    /// <li>
    /// <p>Must not use the following CIDR ranges that are reserved by OCI:</p>
    /// <ul>
    /// <li>
    /// <p><code>100.106.0.0/16</code> and <code>100.107.0.0/16</code></p></li>
    /// <li>
    /// <p><code>169.254.0.0/16</code></p></li>
    /// <li>
    /// <p><code>224.0.0.0 - 239.255.255.255</code></p></li>
    /// <li>
    /// <p><code>240.0.0.0 - 255.255.255.255</code></p></li>
    /// </ul></li>
    /// </ul>
    pub fn set_backup_subnet_cidr(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_subnet_cidr = input;
        self
    }
    /// <p>The CIDR range of the backup subnet for the ODB network.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must not overlap with the CIDR range of the client subnet.</p></li>
    /// <li>
    /// <p>Must not overlap with the CIDR ranges of the VPCs that are connected to the ODB network.</p></li>
    /// <li>
    /// <p>Must not use the following CIDR ranges that are reserved by OCI:</p>
    /// <ul>
    /// <li>
    /// <p><code>100.106.0.0/16</code> and <code>100.107.0.0/16</code></p></li>
    /// <li>
    /// <p><code>169.254.0.0/16</code></p></li>
    /// <li>
    /// <p><code>224.0.0.0 - 239.255.255.255</code></p></li>
    /// <li>
    /// <p><code>240.0.0.0 - 255.255.255.255</code></p></li>
    /// </ul></li>
    /// </ul>
    pub fn get_backup_subnet_cidr(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_subnet_cidr
    }
    /// <p>The domain name to use for the resources in the ODB network.</p>
    pub fn custom_domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.custom_domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name to use for the resources in the ODB network.</p>
    pub fn set_custom_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.custom_domain_name = input;
        self
    }
    /// <p>The domain name to use for the resources in the ODB network.</p>
    pub fn get_custom_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.custom_domain_name
    }
    /// <p>The DNS prefix to the default DNS domain name. The default DNS domain name is oraclevcn.com.</p>
    pub fn default_dns_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_dns_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DNS prefix to the default DNS domain name. The default DNS domain name is oraclevcn.com.</p>
    pub fn set_default_dns_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_dns_prefix = input;
        self
    }
    /// <p>The DNS prefix to the default DNS domain name. The default DNS domain name is oraclevcn.com.</p>
    pub fn get_default_dns_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_dns_prefix
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency. The client token is valid for up to 24 hours after it's first used.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency. The client token is valid for up to 24 hours after it's first used.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency. The client token is valid for up to 24 hours after it's first used.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>Specifies the configuration for Amazon S3 access from the ODB network.</p>
    pub fn s3_access(mut self, input: crate::types::Access) -> Self {
        self.s3_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the configuration for Amazon S3 access from the ODB network.</p>
    pub fn set_s3_access(mut self, input: ::std::option::Option<crate::types::Access>) -> Self {
        self.s3_access = input;
        self
    }
    /// <p>Specifies the configuration for Amazon S3 access from the ODB network.</p>
    pub fn get_s3_access(&self) -> &::std::option::Option<crate::types::Access> {
        &self.s3_access
    }
    /// <p>Specifies the configuration for Zero-ETL access from the ODB network.</p>
    pub fn zero_etl_access(mut self, input: crate::types::Access) -> Self {
        self.zero_etl_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the configuration for Zero-ETL access from the ODB network.</p>
    pub fn set_zero_etl_access(mut self, input: ::std::option::Option<crate::types::Access>) -> Self {
        self.zero_etl_access = input;
        self
    }
    /// <p>Specifies the configuration for Zero-ETL access from the ODB network.</p>
    pub fn get_zero_etl_access(&self) -> &::std::option::Option<crate::types::Access> {
        &self.zero_etl_access
    }
    /// <p>Specifies the endpoint policy for Amazon S3 access from the ODB network.</p>
    pub fn s3_policy_document(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_policy_document = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the endpoint policy for Amazon S3 access from the ODB network.</p>
    pub fn set_s3_policy_document(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_policy_document = input;
        self
    }
    /// <p>Specifies the endpoint policy for Amazon S3 access from the ODB network.</p>
    pub fn get_s3_policy_document(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_policy_document
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of resource tags to apply to the ODB network.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The list of resource tags to apply to the ODB network.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The list of resource tags to apply to the ODB network.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateOdbNetworkInput`](crate::operation::create_odb_network::CreateOdbNetworkInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_odb_network::CreateOdbNetworkInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_odb_network::CreateOdbNetworkInput {
            display_name: self.display_name,
            availability_zone: self.availability_zone,
            availability_zone_id: self.availability_zone_id,
            client_subnet_cidr: self.client_subnet_cidr,
            backup_subnet_cidr: self.backup_subnet_cidr,
            custom_domain_name: self.custom_domain_name,
            default_dns_prefix: self.default_dns_prefix,
            client_token: self.client_token,
            s3_access: self.s3_access,
            zero_etl_access: self.zero_etl_access,
            s3_policy_document: self.s3_policy_document,
            tags: self.tags,
        })
    }
}
