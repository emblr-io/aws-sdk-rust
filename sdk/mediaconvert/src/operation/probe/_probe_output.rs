// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProbeOutput {
    /// Probe results for your media file.
    pub probe_results: ::std::option::Option<::std::vec::Vec<crate::types::ProbeResult>>,
    _request_id: Option<String>,
}
impl ProbeOutput {
    /// Probe results for your media file.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.probe_results.is_none()`.
    pub fn probe_results(&self) -> &[crate::types::ProbeResult] {
        self.probe_results.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for ProbeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ProbeOutput {
    /// Creates a new builder-style object to manufacture [`ProbeOutput`](crate::operation::probe::ProbeOutput).
    pub fn builder() -> crate::operation::probe::builders::ProbeOutputBuilder {
        crate::operation::probe::builders::ProbeOutputBuilder::default()
    }
}

/// A builder for [`ProbeOutput`](crate::operation::probe::ProbeOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProbeOutputBuilder {
    pub(crate) probe_results: ::std::option::Option<::std::vec::Vec<crate::types::ProbeResult>>,
    _request_id: Option<String>,
}
impl ProbeOutputBuilder {
    /// Appends an item to `probe_results`.
    ///
    /// To override the contents of this collection use [`set_probe_results`](Self::set_probe_results).
    ///
    /// Probe results for your media file.
    pub fn probe_results(mut self, input: crate::types::ProbeResult) -> Self {
        let mut v = self.probe_results.unwrap_or_default();
        v.push(input);
        self.probe_results = ::std::option::Option::Some(v);
        self
    }
    /// Probe results for your media file.
    pub fn set_probe_results(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ProbeResult>>) -> Self {
        self.probe_results = input;
        self
    }
    /// Probe results for your media file.
    pub fn get_probe_results(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProbeResult>> {
        &self.probe_results
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ProbeOutput`](crate::operation::probe::ProbeOutput).
    pub fn build(self) -> crate::operation::probe::ProbeOutput {
        crate::operation::probe::ProbeOutput {
            probe_results: self.probe_results,
            _request_id: self._request_id,
        }
    }
}
