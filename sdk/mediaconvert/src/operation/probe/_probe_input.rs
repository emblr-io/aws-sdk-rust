// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProbeInput {
    /// Specify a media file to probe.
    pub input_files: ::std::option::Option<::std::vec::Vec<crate::types::ProbeInputFile>>,
}
impl ProbeInput {
    /// Specify a media file to probe.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.input_files.is_none()`.
    pub fn input_files(&self) -> &[crate::types::ProbeInputFile] {
        self.input_files.as_deref().unwrap_or_default()
    }
}
impl ProbeInput {
    /// Creates a new builder-style object to manufacture [`ProbeInput`](crate::operation::probe::ProbeInput).
    pub fn builder() -> crate::operation::probe::builders::ProbeInputBuilder {
        crate::operation::probe::builders::ProbeInputBuilder::default()
    }
}

/// A builder for [`ProbeInput`](crate::operation::probe::ProbeInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProbeInputBuilder {
    pub(crate) input_files: ::std::option::Option<::std::vec::Vec<crate::types::ProbeInputFile>>,
}
impl ProbeInputBuilder {
    /// Appends an item to `input_files`.
    ///
    /// To override the contents of this collection use [`set_input_files`](Self::set_input_files).
    ///
    /// Specify a media file to probe.
    pub fn input_files(mut self, input: crate::types::ProbeInputFile) -> Self {
        let mut v = self.input_files.unwrap_or_default();
        v.push(input);
        self.input_files = ::std::option::Option::Some(v);
        self
    }
    /// Specify a media file to probe.
    pub fn set_input_files(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ProbeInputFile>>) -> Self {
        self.input_files = input;
        self
    }
    /// Specify a media file to probe.
    pub fn get_input_files(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProbeInputFile>> {
        &self.input_files
    }
    /// Consumes the builder and constructs a [`ProbeInput`](crate::operation::probe::ProbeInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::probe::ProbeInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::probe::ProbeInput {
            input_files: self.input_files,
        })
    }
}
