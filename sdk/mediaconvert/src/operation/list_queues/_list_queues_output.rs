// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListQueuesOutput {
    /// Use this string to request the next batch of queues.
    pub next_token: ::std::option::Option<::std::string::String>,
    /// List of queues.
    pub queues: ::std::option::Option<::std::vec::Vec<crate::types::Queue>>,
    /// The maximum number of jobs that MediaConvert can process at one time, across all of your on-demand queues in the current AWS Region.
    pub total_concurrent_jobs: ::std::option::Option<i32>,
    /// The remaining number of concurrent jobs that are not associated with a queue and are available to allocate to a queue. You can allocate these jobs when you create or update a queue.
    pub unallocated_concurrent_jobs: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl ListQueuesOutput {
    /// Use this string to request the next batch of queues.
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// List of queues.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.queues.is_none()`.
    pub fn queues(&self) -> &[crate::types::Queue] {
        self.queues.as_deref().unwrap_or_default()
    }
    /// The maximum number of jobs that MediaConvert can process at one time, across all of your on-demand queues in the current AWS Region.
    pub fn total_concurrent_jobs(&self) -> ::std::option::Option<i32> {
        self.total_concurrent_jobs
    }
    /// The remaining number of concurrent jobs that are not associated with a queue and are available to allocate to a queue. You can allocate these jobs when you create or update a queue.
    pub fn unallocated_concurrent_jobs(&self) -> ::std::option::Option<i32> {
        self.unallocated_concurrent_jobs
    }
}
impl ::aws_types::request_id::RequestId for ListQueuesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListQueuesOutput {
    /// Creates a new builder-style object to manufacture [`ListQueuesOutput`](crate::operation::list_queues::ListQueuesOutput).
    pub fn builder() -> crate::operation::list_queues::builders::ListQueuesOutputBuilder {
        crate::operation::list_queues::builders::ListQueuesOutputBuilder::default()
    }
}

/// A builder for [`ListQueuesOutput`](crate::operation::list_queues::ListQueuesOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListQueuesOutputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) queues: ::std::option::Option<::std::vec::Vec<crate::types::Queue>>,
    pub(crate) total_concurrent_jobs: ::std::option::Option<i32>,
    pub(crate) unallocated_concurrent_jobs: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl ListQueuesOutputBuilder {
    /// Use this string to request the next batch of queues.
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// Use this string to request the next batch of queues.
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Use this string to request the next batch of queues.
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `queues`.
    ///
    /// To override the contents of this collection use [`set_queues`](Self::set_queues).
    ///
    /// List of queues.
    pub fn queues(mut self, input: crate::types::Queue) -> Self {
        let mut v = self.queues.unwrap_or_default();
        v.push(input);
        self.queues = ::std::option::Option::Some(v);
        self
    }
    /// List of queues.
    pub fn set_queues(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Queue>>) -> Self {
        self.queues = input;
        self
    }
    /// List of queues.
    pub fn get_queues(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Queue>> {
        &self.queues
    }
    /// The maximum number of jobs that MediaConvert can process at one time, across all of your on-demand queues in the current AWS Region.
    pub fn total_concurrent_jobs(mut self, input: i32) -> Self {
        self.total_concurrent_jobs = ::std::option::Option::Some(input);
        self
    }
    /// The maximum number of jobs that MediaConvert can process at one time, across all of your on-demand queues in the current AWS Region.
    pub fn set_total_concurrent_jobs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_concurrent_jobs = input;
        self
    }
    /// The maximum number of jobs that MediaConvert can process at one time, across all of your on-demand queues in the current AWS Region.
    pub fn get_total_concurrent_jobs(&self) -> &::std::option::Option<i32> {
        &self.total_concurrent_jobs
    }
    /// The remaining number of concurrent jobs that are not associated with a queue and are available to allocate to a queue. You can allocate these jobs when you create or update a queue.
    pub fn unallocated_concurrent_jobs(mut self, input: i32) -> Self {
        self.unallocated_concurrent_jobs = ::std::option::Option::Some(input);
        self
    }
    /// The remaining number of concurrent jobs that are not associated with a queue and are available to allocate to a queue. You can allocate these jobs when you create or update a queue.
    pub fn set_unallocated_concurrent_jobs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.unallocated_concurrent_jobs = input;
        self
    }
    /// The remaining number of concurrent jobs that are not associated with a queue and are available to allocate to a queue. You can allocate these jobs when you create or update a queue.
    pub fn get_unallocated_concurrent_jobs(&self) -> &::std::option::Option<i32> {
        &self.unallocated_concurrent_jobs
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListQueuesOutput`](crate::operation::list_queues::ListQueuesOutput).
    pub fn build(self) -> crate::operation::list_queues::ListQueuesOutput {
        crate::operation::list_queues::ListQueuesOutput {
            next_token: self.next_token,
            queues: self.queues,
            total_concurrent_jobs: self.total_concurrent_jobs,
            unallocated_concurrent_jobs: self.unallocated_concurrent_jobs,
            _request_id: self._request_id,
        }
    }
}
