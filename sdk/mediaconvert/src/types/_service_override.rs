// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A service override applied by MediaConvert to the settings that you have configured. If you see any overrides, we recommend that you contact AWS Support.
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceOverride {
    /// Details about the service override that MediaConvert has applied.
    pub message: ::std::option::Option<::std::string::String>,
    /// The name of the setting that MediaConvert has applied an override to.
    pub name: ::std::option::Option<::std::string::String>,
    /// The current value of the service override that MediaConvert has applied.
    pub override_value: ::std::option::Option<::std::string::String>,
    /// The value of the setting that you configured, prior to any overrides that MediaConvert has applied.
    pub value: ::std::option::Option<::std::string::String>,
}
impl ServiceOverride {
    /// Details about the service override that MediaConvert has applied.
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// The name of the setting that MediaConvert has applied an override to.
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// The current value of the service override that MediaConvert has applied.
    pub fn override_value(&self) -> ::std::option::Option<&str> {
        self.override_value.as_deref()
    }
    /// The value of the setting that you configured, prior to any overrides that MediaConvert has applied.
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl ServiceOverride {
    /// Creates a new builder-style object to manufacture [`ServiceOverride`](crate::types::ServiceOverride).
    pub fn builder() -> crate::types::builders::ServiceOverrideBuilder {
        crate::types::builders::ServiceOverrideBuilder::default()
    }
}

/// A builder for [`ServiceOverride`](crate::types::ServiceOverride).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceOverrideBuilder {
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) override_value: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl ServiceOverrideBuilder {
    /// Details about the service override that MediaConvert has applied.
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// Details about the service override that MediaConvert has applied.
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// Details about the service override that MediaConvert has applied.
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// The name of the setting that MediaConvert has applied an override to.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// The name of the setting that MediaConvert has applied an override to.
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// The name of the setting that MediaConvert has applied an override to.
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// The current value of the service override that MediaConvert has applied.
    pub fn override_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.override_value = ::std::option::Option::Some(input.into());
        self
    }
    /// The current value of the service override that MediaConvert has applied.
    pub fn set_override_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.override_value = input;
        self
    }
    /// The current value of the service override that MediaConvert has applied.
    pub fn get_override_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.override_value
    }
    /// The value of the setting that you configured, prior to any overrides that MediaConvert has applied.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// The value of the setting that you configured, prior to any overrides that MediaConvert has applied.
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// The value of the setting that you configured, prior to any overrides that MediaConvert has applied.
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`ServiceOverride`](crate::types::ServiceOverride).
    pub fn build(self) -> crate::types::ServiceOverride {
        crate::types::ServiceOverride {
            message: self.message,
            name: self.name,
            override_value: self.override_value,
            value: self.value,
        }
    }
}
