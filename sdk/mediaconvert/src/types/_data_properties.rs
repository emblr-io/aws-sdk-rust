// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Details about the media file's data track.
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataProperties {
    /// The language code of the data track, in three character ISO 639-3 format.
    pub language_code: ::std::option::Option<::std::string::String>,
}
impl DataProperties {
    /// The language code of the data track, in three character ISO 639-3 format.
    pub fn language_code(&self) -> ::std::option::Option<&str> {
        self.language_code.as_deref()
    }
}
impl DataProperties {
    /// Creates a new builder-style object to manufacture [`DataProperties`](crate::types::DataProperties).
    pub fn builder() -> crate::types::builders::DataPropertiesBuilder {
        crate::types::builders::DataPropertiesBuilder::default()
    }
}

/// A builder for [`DataProperties`](crate::types::DataProperties).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataPropertiesBuilder {
    pub(crate) language_code: ::std::option::Option<::std::string::String>,
}
impl DataPropertiesBuilder {
    /// The language code of the data track, in three character ISO 639-3 format.
    pub fn language_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.language_code = ::std::option::Option::Some(input.into());
        self
    }
    /// The language code of the data track, in three character ISO 639-3 format.
    pub fn set_language_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.language_code = input;
        self
    }
    /// The language code of the data track, in three character ISO 639-3 format.
    pub fn get_language_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.language_code
    }
    /// Consumes the builder and constructs a [`DataProperties`](crate::types::DataProperties).
    pub fn build(self) -> crate::types::DataProperties {
        crate::types::DataProperties {
            language_code: self.language_code,
        }
    }
}
