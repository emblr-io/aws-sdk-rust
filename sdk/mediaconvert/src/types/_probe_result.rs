// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Probe results for your media file.
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProbeResult {
    /// The container of your media file. This information helps you understand the overall structure and details of your media, including format, duration, and track layout.
    pub container: ::std::option::Option<crate::types::Container>,
    /// Metadata and other file information.
    pub metadata: ::std::option::Option<crate::types::Metadata>,
    /// An array containing track mapping information.
    pub track_mappings: ::std::option::Option<::std::vec::Vec<crate::types::TrackMapping>>,
}
impl ProbeResult {
    /// The container of your media file. This information helps you understand the overall structure and details of your media, including format, duration, and track layout.
    pub fn container(&self) -> ::std::option::Option<&crate::types::Container> {
        self.container.as_ref()
    }
    /// Metadata and other file information.
    pub fn metadata(&self) -> ::std::option::Option<&crate::types::Metadata> {
        self.metadata.as_ref()
    }
    /// An array containing track mapping information.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.track_mappings.is_none()`.
    pub fn track_mappings(&self) -> &[crate::types::TrackMapping] {
        self.track_mappings.as_deref().unwrap_or_default()
    }
}
impl ProbeResult {
    /// Creates a new builder-style object to manufacture [`ProbeResult`](crate::types::ProbeResult).
    pub fn builder() -> crate::types::builders::ProbeResultBuilder {
        crate::types::builders::ProbeResultBuilder::default()
    }
}

/// A builder for [`ProbeResult`](crate::types::ProbeResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProbeResultBuilder {
    pub(crate) container: ::std::option::Option<crate::types::Container>,
    pub(crate) metadata: ::std::option::Option<crate::types::Metadata>,
    pub(crate) track_mappings: ::std::option::Option<::std::vec::Vec<crate::types::TrackMapping>>,
}
impl ProbeResultBuilder {
    /// The container of your media file. This information helps you understand the overall structure and details of your media, including format, duration, and track layout.
    pub fn container(mut self, input: crate::types::Container) -> Self {
        self.container = ::std::option::Option::Some(input);
        self
    }
    /// The container of your media file. This information helps you understand the overall structure and details of your media, including format, duration, and track layout.
    pub fn set_container(mut self, input: ::std::option::Option<crate::types::Container>) -> Self {
        self.container = input;
        self
    }
    /// The container of your media file. This information helps you understand the overall structure and details of your media, including format, duration, and track layout.
    pub fn get_container(&self) -> &::std::option::Option<crate::types::Container> {
        &self.container
    }
    /// Metadata and other file information.
    pub fn metadata(mut self, input: crate::types::Metadata) -> Self {
        self.metadata = ::std::option::Option::Some(input);
        self
    }
    /// Metadata and other file information.
    pub fn set_metadata(mut self, input: ::std::option::Option<crate::types::Metadata>) -> Self {
        self.metadata = input;
        self
    }
    /// Metadata and other file information.
    pub fn get_metadata(&self) -> &::std::option::Option<crate::types::Metadata> {
        &self.metadata
    }
    /// Appends an item to `track_mappings`.
    ///
    /// To override the contents of this collection use [`set_track_mappings`](Self::set_track_mappings).
    ///
    /// An array containing track mapping information.
    pub fn track_mappings(mut self, input: crate::types::TrackMapping) -> Self {
        let mut v = self.track_mappings.unwrap_or_default();
        v.push(input);
        self.track_mappings = ::std::option::Option::Some(v);
        self
    }
    /// An array containing track mapping information.
    pub fn set_track_mappings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TrackMapping>>) -> Self {
        self.track_mappings = input;
        self
    }
    /// An array containing track mapping information.
    pub fn get_track_mappings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TrackMapping>> {
        &self.track_mappings
    }
    /// Consumes the builder and constructs a [`ProbeResult`](crate::types::ProbeResult).
    pub fn build(self) -> crate::types::ProbeResult {
        crate::types::ProbeResult {
            container: self.container,
            metadata: self.metadata,
            track_mappings: self.track_mappings,
        }
    }
}
