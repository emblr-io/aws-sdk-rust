// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the workloads on a component.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Workload {
    /// <p>The ID of the workload.</p>
    pub workload_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the component.</p>
    pub component_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the workload.</p>
    pub workload_name: ::std::option::Option<::std::string::String>,
    /// <p>The tier of the workload.</p>
    pub tier: ::std::option::Option<crate::types::Tier>,
    /// <p>If logging is supported for the resource type, shows whether the component has configured logs to be monitored.</p>
    pub workload_remarks: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether all of the component configurations required to monitor a workload were provided.</p>
    pub missing_workload_config: ::std::option::Option<bool>,
}
impl Workload {
    /// <p>The ID of the workload.</p>
    pub fn workload_id(&self) -> ::std::option::Option<&str> {
        self.workload_id.as_deref()
    }
    /// <p>The name of the component.</p>
    pub fn component_name(&self) -> ::std::option::Option<&str> {
        self.component_name.as_deref()
    }
    /// <p>The name of the workload.</p>
    pub fn workload_name(&self) -> ::std::option::Option<&str> {
        self.workload_name.as_deref()
    }
    /// <p>The tier of the workload.</p>
    pub fn tier(&self) -> ::std::option::Option<&crate::types::Tier> {
        self.tier.as_ref()
    }
    /// <p>If logging is supported for the resource type, shows whether the component has configured logs to be monitored.</p>
    pub fn workload_remarks(&self) -> ::std::option::Option<&str> {
        self.workload_remarks.as_deref()
    }
    /// <p>Indicates whether all of the component configurations required to monitor a workload were provided.</p>
    pub fn missing_workload_config(&self) -> ::std::option::Option<bool> {
        self.missing_workload_config
    }
}
impl Workload {
    /// Creates a new builder-style object to manufacture [`Workload`](crate::types::Workload).
    pub fn builder() -> crate::types::builders::WorkloadBuilder {
        crate::types::builders::WorkloadBuilder::default()
    }
}

/// A builder for [`Workload`](crate::types::Workload).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WorkloadBuilder {
    pub(crate) workload_id: ::std::option::Option<::std::string::String>,
    pub(crate) component_name: ::std::option::Option<::std::string::String>,
    pub(crate) workload_name: ::std::option::Option<::std::string::String>,
    pub(crate) tier: ::std::option::Option<crate::types::Tier>,
    pub(crate) workload_remarks: ::std::option::Option<::std::string::String>,
    pub(crate) missing_workload_config: ::std::option::Option<bool>,
}
impl WorkloadBuilder {
    /// <p>The ID of the workload.</p>
    pub fn workload_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workload_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the workload.</p>
    pub fn set_workload_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workload_id = input;
        self
    }
    /// <p>The ID of the workload.</p>
    pub fn get_workload_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workload_id
    }
    /// <p>The name of the component.</p>
    pub fn component_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.component_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the component.</p>
    pub fn set_component_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.component_name = input;
        self
    }
    /// <p>The name of the component.</p>
    pub fn get_component_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.component_name
    }
    /// <p>The name of the workload.</p>
    pub fn workload_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workload_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the workload.</p>
    pub fn set_workload_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workload_name = input;
        self
    }
    /// <p>The name of the workload.</p>
    pub fn get_workload_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.workload_name
    }
    /// <p>The tier of the workload.</p>
    pub fn tier(mut self, input: crate::types::Tier) -> Self {
        self.tier = ::std::option::Option::Some(input);
        self
    }
    /// <p>The tier of the workload.</p>
    pub fn set_tier(mut self, input: ::std::option::Option<crate::types::Tier>) -> Self {
        self.tier = input;
        self
    }
    /// <p>The tier of the workload.</p>
    pub fn get_tier(&self) -> &::std::option::Option<crate::types::Tier> {
        &self.tier
    }
    /// <p>If logging is supported for the resource type, shows whether the component has configured logs to be monitored.</p>
    pub fn workload_remarks(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workload_remarks = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If logging is supported for the resource type, shows whether the component has configured logs to be monitored.</p>
    pub fn set_workload_remarks(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workload_remarks = input;
        self
    }
    /// <p>If logging is supported for the resource type, shows whether the component has configured logs to be monitored.</p>
    pub fn get_workload_remarks(&self) -> &::std::option::Option<::std::string::String> {
        &self.workload_remarks
    }
    /// <p>Indicates whether all of the component configurations required to monitor a workload were provided.</p>
    pub fn missing_workload_config(mut self, input: bool) -> Self {
        self.missing_workload_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether all of the component configurations required to monitor a workload were provided.</p>
    pub fn set_missing_workload_config(mut self, input: ::std::option::Option<bool>) -> Self {
        self.missing_workload_config = input;
        self
    }
    /// <p>Indicates whether all of the component configurations required to monitor a workload were provided.</p>
    pub fn get_missing_workload_config(&self) -> &::std::option::Option<bool> {
        &self.missing_workload_config
    }
    /// Consumes the builder and constructs a [`Workload`](crate::types::Workload).
    pub fn build(self) -> crate::types::Workload {
        crate::types::Workload {
            workload_id: self.workload_id,
            component_name: self.component_name,
            workload_name: self.workload_name,
            tier: self.tier,
            workload_remarks: self.workload_remarks,
            missing_workload_config: self.missing_workload_config,
        }
    }
}
