// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateTypeInput {
    /// <p>The name of the keyspace.</p>
    pub keyspace_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the user-defined type.</p>
    /// <p>UDT names must contain 48 characters or less, must begin with an alphabetic character, and can only contain alpha-numeric characters and underscores. Amazon Keyspaces converts upper case characters automatically into lower case characters.</p>
    /// <p>Alternatively, you can declare a UDT name in double quotes. When declaring a UDT name inside double quotes, Amazon Keyspaces preserves upper casing and allows special characters.</p>
    /// <p>You can also use double quotes as part of the name when you create the UDT, but you must escape each double quote character with an additional double quote character.</p>
    pub type_name: ::std::option::Option<::std::string::String>,
    /// <p>The field definitions, consisting of names and types, that define this type.</p>
    pub field_definitions: ::std::option::Option<::std::vec::Vec<crate::types::FieldDefinition>>,
}
impl CreateTypeInput {
    /// <p>The name of the keyspace.</p>
    pub fn keyspace_name(&self) -> ::std::option::Option<&str> {
        self.keyspace_name.as_deref()
    }
    /// <p>The name of the user-defined type.</p>
    /// <p>UDT names must contain 48 characters or less, must begin with an alphabetic character, and can only contain alpha-numeric characters and underscores. Amazon Keyspaces converts upper case characters automatically into lower case characters.</p>
    /// <p>Alternatively, you can declare a UDT name in double quotes. When declaring a UDT name inside double quotes, Amazon Keyspaces preserves upper casing and allows special characters.</p>
    /// <p>You can also use double quotes as part of the name when you create the UDT, but you must escape each double quote character with an additional double quote character.</p>
    pub fn type_name(&self) -> ::std::option::Option<&str> {
        self.type_name.as_deref()
    }
    /// <p>The field definitions, consisting of names and types, that define this type.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.field_definitions.is_none()`.
    pub fn field_definitions(&self) -> &[crate::types::FieldDefinition] {
        self.field_definitions.as_deref().unwrap_or_default()
    }
}
impl CreateTypeInput {
    /// Creates a new builder-style object to manufacture [`CreateTypeInput`](crate::operation::create_type::CreateTypeInput).
    pub fn builder() -> crate::operation::create_type::builders::CreateTypeInputBuilder {
        crate::operation::create_type::builders::CreateTypeInputBuilder::default()
    }
}

/// A builder for [`CreateTypeInput`](crate::operation::create_type::CreateTypeInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateTypeInputBuilder {
    pub(crate) keyspace_name: ::std::option::Option<::std::string::String>,
    pub(crate) type_name: ::std::option::Option<::std::string::String>,
    pub(crate) field_definitions: ::std::option::Option<::std::vec::Vec<crate::types::FieldDefinition>>,
}
impl CreateTypeInputBuilder {
    /// <p>The name of the keyspace.</p>
    /// This field is required.
    pub fn keyspace_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.keyspace_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the keyspace.</p>
    pub fn set_keyspace_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.keyspace_name = input;
        self
    }
    /// <p>The name of the keyspace.</p>
    pub fn get_keyspace_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.keyspace_name
    }
    /// <p>The name of the user-defined type.</p>
    /// <p>UDT names must contain 48 characters or less, must begin with an alphabetic character, and can only contain alpha-numeric characters and underscores. Amazon Keyspaces converts upper case characters automatically into lower case characters.</p>
    /// <p>Alternatively, you can declare a UDT name in double quotes. When declaring a UDT name inside double quotes, Amazon Keyspaces preserves upper casing and allows special characters.</p>
    /// <p>You can also use double quotes as part of the name when you create the UDT, but you must escape each double quote character with an additional double quote character.</p>
    /// This field is required.
    pub fn type_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the user-defined type.</p>
    /// <p>UDT names must contain 48 characters or less, must begin with an alphabetic character, and can only contain alpha-numeric characters and underscores. Amazon Keyspaces converts upper case characters automatically into lower case characters.</p>
    /// <p>Alternatively, you can declare a UDT name in double quotes. When declaring a UDT name inside double quotes, Amazon Keyspaces preserves upper casing and allows special characters.</p>
    /// <p>You can also use double quotes as part of the name when you create the UDT, but you must escape each double quote character with an additional double quote character.</p>
    pub fn set_type_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_name = input;
        self
    }
    /// <p>The name of the user-defined type.</p>
    /// <p>UDT names must contain 48 characters or less, must begin with an alphabetic character, and can only contain alpha-numeric characters and underscores. Amazon Keyspaces converts upper case characters automatically into lower case characters.</p>
    /// <p>Alternatively, you can declare a UDT name in double quotes. When declaring a UDT name inside double quotes, Amazon Keyspaces preserves upper casing and allows special characters.</p>
    /// <p>You can also use double quotes as part of the name when you create the UDT, but you must escape each double quote character with an additional double quote character.</p>
    pub fn get_type_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_name
    }
    /// Appends an item to `field_definitions`.
    ///
    /// To override the contents of this collection use [`set_field_definitions`](Self::set_field_definitions).
    ///
    /// <p>The field definitions, consisting of names and types, that define this type.</p>
    pub fn field_definitions(mut self, input: crate::types::FieldDefinition) -> Self {
        let mut v = self.field_definitions.unwrap_or_default();
        v.push(input);
        self.field_definitions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The field definitions, consisting of names and types, that define this type.</p>
    pub fn set_field_definitions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FieldDefinition>>) -> Self {
        self.field_definitions = input;
        self
    }
    /// <p>The field definitions, consisting of names and types, that define this type.</p>
    pub fn get_field_definitions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FieldDefinition>> {
        &self.field_definitions
    }
    /// Consumes the builder and constructs a [`CreateTypeInput`](crate::operation::create_type::CreateTypeInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::create_type::CreateTypeInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_type::CreateTypeInput {
            keyspace_name: self.keyspace_name,
            type_name: self.type_name,
            field_definitions: self.field_definitions,
        })
    }
}
