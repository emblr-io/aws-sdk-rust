// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTypeOutput {
    /// <p>The name of the keyspace that contains this type.</p>
    pub keyspace_name: ::std::string::String,
    /// <p>The name of the type.</p>
    pub type_name: ::std::string::String,
    /// <p>The names and types that define this type.</p>
    pub field_definitions: ::std::option::Option<::std::vec::Vec<crate::types::FieldDefinition>>,
    /// <p>The timestamp that shows when this type was last modified.</p>
    pub last_modified_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The status of this type.</p>
    pub status: ::std::option::Option<crate::types::TypeStatus>,
    /// <p>The tables that use this type.</p>
    pub direct_referring_tables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The types that use this type.</p>
    pub direct_parent_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The level of nesting implemented for this type.</p>
    pub max_nesting_depth: i32,
    /// <p>The unique identifier of the keyspace that contains this type in the format of an Amazon Resource Name (ARN).</p>
    pub keyspace_arn: ::std::string::String,
    _request_id: Option<String>,
}
impl GetTypeOutput {
    /// <p>The name of the keyspace that contains this type.</p>
    pub fn keyspace_name(&self) -> &str {
        use std::ops::Deref;
        self.keyspace_name.deref()
    }
    /// <p>The name of the type.</p>
    pub fn type_name(&self) -> &str {
        use std::ops::Deref;
        self.type_name.deref()
    }
    /// <p>The names and types that define this type.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.field_definitions.is_none()`.
    pub fn field_definitions(&self) -> &[crate::types::FieldDefinition] {
        self.field_definitions.as_deref().unwrap_or_default()
    }
    /// <p>The timestamp that shows when this type was last modified.</p>
    pub fn last_modified_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_timestamp.as_ref()
    }
    /// <p>The status of this type.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::TypeStatus> {
        self.status.as_ref()
    }
    /// <p>The tables that use this type.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.direct_referring_tables.is_none()`.
    pub fn direct_referring_tables(&self) -> &[::std::string::String] {
        self.direct_referring_tables.as_deref().unwrap_or_default()
    }
    /// <p>The types that use this type.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.direct_parent_types.is_none()`.
    pub fn direct_parent_types(&self) -> &[::std::string::String] {
        self.direct_parent_types.as_deref().unwrap_or_default()
    }
    /// <p>The level of nesting implemented for this type.</p>
    pub fn max_nesting_depth(&self) -> i32 {
        self.max_nesting_depth
    }
    /// <p>The unique identifier of the keyspace that contains this type in the format of an Amazon Resource Name (ARN).</p>
    pub fn keyspace_arn(&self) -> &str {
        use std::ops::Deref;
        self.keyspace_arn.deref()
    }
}
impl ::aws_types::request_id::RequestId for GetTypeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTypeOutput {
    /// Creates a new builder-style object to manufacture [`GetTypeOutput`](crate::operation::get_type::GetTypeOutput).
    pub fn builder() -> crate::operation::get_type::builders::GetTypeOutputBuilder {
        crate::operation::get_type::builders::GetTypeOutputBuilder::default()
    }
}

/// A builder for [`GetTypeOutput`](crate::operation::get_type::GetTypeOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetTypeOutputBuilder {
    pub(crate) keyspace_name: ::std::option::Option<::std::string::String>,
    pub(crate) type_name: ::std::option::Option<::std::string::String>,
    pub(crate) field_definitions: ::std::option::Option<::std::vec::Vec<crate::types::FieldDefinition>>,
    pub(crate) last_modified_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::TypeStatus>,
    pub(crate) direct_referring_tables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) direct_parent_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) max_nesting_depth: ::std::option::Option<i32>,
    pub(crate) keyspace_arn: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetTypeOutputBuilder {
    /// <p>The name of the keyspace that contains this type.</p>
    /// This field is required.
    pub fn keyspace_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.keyspace_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the keyspace that contains this type.</p>
    pub fn set_keyspace_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.keyspace_name = input;
        self
    }
    /// <p>The name of the keyspace that contains this type.</p>
    pub fn get_keyspace_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.keyspace_name
    }
    /// <p>The name of the type.</p>
    /// This field is required.
    pub fn type_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the type.</p>
    pub fn set_type_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_name = input;
        self
    }
    /// <p>The name of the type.</p>
    pub fn get_type_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_name
    }
    /// Appends an item to `field_definitions`.
    ///
    /// To override the contents of this collection use [`set_field_definitions`](Self::set_field_definitions).
    ///
    /// <p>The names and types that define this type.</p>
    pub fn field_definitions(mut self, input: crate::types::FieldDefinition) -> Self {
        let mut v = self.field_definitions.unwrap_or_default();
        v.push(input);
        self.field_definitions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The names and types that define this type.</p>
    pub fn set_field_definitions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FieldDefinition>>) -> Self {
        self.field_definitions = input;
        self
    }
    /// <p>The names and types that define this type.</p>
    pub fn get_field_definitions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FieldDefinition>> {
        &self.field_definitions
    }
    /// <p>The timestamp that shows when this type was last modified.</p>
    pub fn last_modified_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp that shows when this type was last modified.</p>
    pub fn set_last_modified_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_timestamp = input;
        self
    }
    /// <p>The timestamp that shows when this type was last modified.</p>
    pub fn get_last_modified_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_timestamp
    }
    /// <p>The status of this type.</p>
    pub fn status(mut self, input: crate::types::TypeStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of this type.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TypeStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of this type.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TypeStatus> {
        &self.status
    }
    /// Appends an item to `direct_referring_tables`.
    ///
    /// To override the contents of this collection use [`set_direct_referring_tables`](Self::set_direct_referring_tables).
    ///
    /// <p>The tables that use this type.</p>
    pub fn direct_referring_tables(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.direct_referring_tables.unwrap_or_default();
        v.push(input.into());
        self.direct_referring_tables = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tables that use this type.</p>
    pub fn set_direct_referring_tables(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.direct_referring_tables = input;
        self
    }
    /// <p>The tables that use this type.</p>
    pub fn get_direct_referring_tables(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.direct_referring_tables
    }
    /// Appends an item to `direct_parent_types`.
    ///
    /// To override the contents of this collection use [`set_direct_parent_types`](Self::set_direct_parent_types).
    ///
    /// <p>The types that use this type.</p>
    pub fn direct_parent_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.direct_parent_types.unwrap_or_default();
        v.push(input.into());
        self.direct_parent_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The types that use this type.</p>
    pub fn set_direct_parent_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.direct_parent_types = input;
        self
    }
    /// <p>The types that use this type.</p>
    pub fn get_direct_parent_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.direct_parent_types
    }
    /// <p>The level of nesting implemented for this type.</p>
    pub fn max_nesting_depth(mut self, input: i32) -> Self {
        self.max_nesting_depth = ::std::option::Option::Some(input);
        self
    }
    /// <p>The level of nesting implemented for this type.</p>
    pub fn set_max_nesting_depth(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_nesting_depth = input;
        self
    }
    /// <p>The level of nesting implemented for this type.</p>
    pub fn get_max_nesting_depth(&self) -> &::std::option::Option<i32> {
        &self.max_nesting_depth
    }
    /// <p>The unique identifier of the keyspace that contains this type in the format of an Amazon Resource Name (ARN).</p>
    /// This field is required.
    pub fn keyspace_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.keyspace_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the keyspace that contains this type in the format of an Amazon Resource Name (ARN).</p>
    pub fn set_keyspace_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.keyspace_arn = input;
        self
    }
    /// <p>The unique identifier of the keyspace that contains this type in the format of an Amazon Resource Name (ARN).</p>
    pub fn get_keyspace_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.keyspace_arn
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetTypeOutput`](crate::operation::get_type::GetTypeOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`keyspace_name`](crate::operation::get_type::builders::GetTypeOutputBuilder::keyspace_name)
    /// - [`type_name`](crate::operation::get_type::builders::GetTypeOutputBuilder::type_name)
    /// - [`keyspace_arn`](crate::operation::get_type::builders::GetTypeOutputBuilder::keyspace_arn)
    pub fn build(self) -> ::std::result::Result<crate::operation::get_type::GetTypeOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_type::GetTypeOutput {
            keyspace_name: self.keyspace_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "keyspace_name",
                    "keyspace_name was not specified but it is required when building GetTypeOutput",
                )
            })?,
            type_name: self.type_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "type_name",
                    "type_name was not specified but it is required when building GetTypeOutput",
                )
            })?,
            field_definitions: self.field_definitions,
            last_modified_timestamp: self.last_modified_timestamp,
            status: self.status,
            direct_referring_tables: self.direct_referring_tables,
            direct_parent_types: self.direct_parent_types,
            max_nesting_depth: self.max_nesting_depth.unwrap_or_default(),
            keyspace_arn: self.keyspace_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "keyspace_arn",
                    "keyspace_arn was not specified but it is required when building GetTypeOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
