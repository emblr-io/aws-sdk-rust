// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The settings of the CDC stream of the table. For more information about CDC streams, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/cdc.html">Working with change data capture (CDC) streams in Amazon Keyspaces</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CdcSpecificationSummary {
    /// <p>The status of the CDC stream. Specifies if the table has a CDC stream.</p>
    pub status: crate::types::CdcStatus,
    /// <p>The view type specifies the changes Amazon Keyspaces records for each changed row in the stream. This setting can't be changed, after the stream has been created.</p>
    /// <p>The options are:</p>
    /// <ul>
    /// <li>
    /// <p><code>NEW_AND_OLD_IMAGES</code> - both versions of the row, before and after the change. This is the default.</p></li>
    /// <li>
    /// <p><code>NEW_IMAGE</code> - the version of the row after the change.</p></li>
    /// <li>
    /// <p><code>OLD_IMAGE</code> - the version of the row before the change.</p></li>
    /// <li>
    /// <p><code>KEYS_ONLY</code> - the partition and clustering keys of the row that was changed.</p></li>
    /// </ul>
    pub view_type: ::std::option::Option<crate::types::ViewType>,
}
impl CdcSpecificationSummary {
    /// <p>The status of the CDC stream. Specifies if the table has a CDC stream.</p>
    pub fn status(&self) -> &crate::types::CdcStatus {
        &self.status
    }
    /// <p>The view type specifies the changes Amazon Keyspaces records for each changed row in the stream. This setting can't be changed, after the stream has been created.</p>
    /// <p>The options are:</p>
    /// <ul>
    /// <li>
    /// <p><code>NEW_AND_OLD_IMAGES</code> - both versions of the row, before and after the change. This is the default.</p></li>
    /// <li>
    /// <p><code>NEW_IMAGE</code> - the version of the row after the change.</p></li>
    /// <li>
    /// <p><code>OLD_IMAGE</code> - the version of the row before the change.</p></li>
    /// <li>
    /// <p><code>KEYS_ONLY</code> - the partition and clustering keys of the row that was changed.</p></li>
    /// </ul>
    pub fn view_type(&self) -> ::std::option::Option<&crate::types::ViewType> {
        self.view_type.as_ref()
    }
}
impl CdcSpecificationSummary {
    /// Creates a new builder-style object to manufacture [`CdcSpecificationSummary`](crate::types::CdcSpecificationSummary).
    pub fn builder() -> crate::types::builders::CdcSpecificationSummaryBuilder {
        crate::types::builders::CdcSpecificationSummaryBuilder::default()
    }
}

/// A builder for [`CdcSpecificationSummary`](crate::types::CdcSpecificationSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CdcSpecificationSummaryBuilder {
    pub(crate) status: ::std::option::Option<crate::types::CdcStatus>,
    pub(crate) view_type: ::std::option::Option<crate::types::ViewType>,
}
impl CdcSpecificationSummaryBuilder {
    /// <p>The status of the CDC stream. Specifies if the table has a CDC stream.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::CdcStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the CDC stream. Specifies if the table has a CDC stream.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::CdcStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the CDC stream. Specifies if the table has a CDC stream.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::CdcStatus> {
        &self.status
    }
    /// <p>The view type specifies the changes Amazon Keyspaces records for each changed row in the stream. This setting can't be changed, after the stream has been created.</p>
    /// <p>The options are:</p>
    /// <ul>
    /// <li>
    /// <p><code>NEW_AND_OLD_IMAGES</code> - both versions of the row, before and after the change. This is the default.</p></li>
    /// <li>
    /// <p><code>NEW_IMAGE</code> - the version of the row after the change.</p></li>
    /// <li>
    /// <p><code>OLD_IMAGE</code> - the version of the row before the change.</p></li>
    /// <li>
    /// <p><code>KEYS_ONLY</code> - the partition and clustering keys of the row that was changed.</p></li>
    /// </ul>
    pub fn view_type(mut self, input: crate::types::ViewType) -> Self {
        self.view_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The view type specifies the changes Amazon Keyspaces records for each changed row in the stream. This setting can't be changed, after the stream has been created.</p>
    /// <p>The options are:</p>
    /// <ul>
    /// <li>
    /// <p><code>NEW_AND_OLD_IMAGES</code> - both versions of the row, before and after the change. This is the default.</p></li>
    /// <li>
    /// <p><code>NEW_IMAGE</code> - the version of the row after the change.</p></li>
    /// <li>
    /// <p><code>OLD_IMAGE</code> - the version of the row before the change.</p></li>
    /// <li>
    /// <p><code>KEYS_ONLY</code> - the partition and clustering keys of the row that was changed.</p></li>
    /// </ul>
    pub fn set_view_type(mut self, input: ::std::option::Option<crate::types::ViewType>) -> Self {
        self.view_type = input;
        self
    }
    /// <p>The view type specifies the changes Amazon Keyspaces records for each changed row in the stream. This setting can't be changed, after the stream has been created.</p>
    /// <p>The options are:</p>
    /// <ul>
    /// <li>
    /// <p><code>NEW_AND_OLD_IMAGES</code> - both versions of the row, before and after the change. This is the default.</p></li>
    /// <li>
    /// <p><code>NEW_IMAGE</code> - the version of the row after the change.</p></li>
    /// <li>
    /// <p><code>OLD_IMAGE</code> - the version of the row before the change.</p></li>
    /// <li>
    /// <p><code>KEYS_ONLY</code> - the partition and clustering keys of the row that was changed.</p></li>
    /// </ul>
    pub fn get_view_type(&self) -> &::std::option::Option<crate::types::ViewType> {
        &self.view_type
    }
    /// Consumes the builder and constructs a [`CdcSpecificationSummary`](crate::types::CdcSpecificationSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::types::builders::CdcSpecificationSummaryBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::CdcSpecificationSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CdcSpecificationSummary {
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building CdcSpecificationSummary",
                )
            })?,
            view_type: self.view_type,
        })
    }
}
