// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The settings for the CDC stream of a table. For more information about CDC streams, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/cdc.html">Working with change data capture (CDC) streams in Amazon Keyspaces</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CdcSpecification {
    /// <p>The status of the CDC stream. You can enable or disable a stream for a table.</p>
    pub status: crate::types::CdcStatus,
    /// <p>The view type specifies the changes Amazon Keyspaces records for each changed row in the stream. After you create the stream, you can't make changes to this selection.</p>
    /// <p>The options are:</p>
    /// <ul>
    /// <li>
    /// <p><code>NEW_AND_OLD_IMAGES</code> - both versions of the row, before and after the change. This is the default.</p></li>
    /// <li>
    /// <p><code>NEW_IMAGE</code> - the version of the row after the change.</p></li>
    /// <li>
    /// <p><code>OLD_IMAGE</code> - the version of the row before the change.</p></li>
    /// <li>
    /// <p><code>KEYS_ONLY</code> - the partition and clustering keys of the row that was changed.</p></li>
    /// </ul>
    pub view_type: ::std::option::Option<crate::types::ViewType>,
    /// <p>The tags (key-value pairs) that you want to apply to the stream.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>Specifies that the stream inherits the tags from the table.</p>
    pub propagate_tags: ::std::option::Option<crate::types::CdcPropagateTags>,
}
impl CdcSpecification {
    /// <p>The status of the CDC stream. You can enable or disable a stream for a table.</p>
    pub fn status(&self) -> &crate::types::CdcStatus {
        &self.status
    }
    /// <p>The view type specifies the changes Amazon Keyspaces records for each changed row in the stream. After you create the stream, you can't make changes to this selection.</p>
    /// <p>The options are:</p>
    /// <ul>
    /// <li>
    /// <p><code>NEW_AND_OLD_IMAGES</code> - both versions of the row, before and after the change. This is the default.</p></li>
    /// <li>
    /// <p><code>NEW_IMAGE</code> - the version of the row after the change.</p></li>
    /// <li>
    /// <p><code>OLD_IMAGE</code> - the version of the row before the change.</p></li>
    /// <li>
    /// <p><code>KEYS_ONLY</code> - the partition and clustering keys of the row that was changed.</p></li>
    /// </ul>
    pub fn view_type(&self) -> ::std::option::Option<&crate::types::ViewType> {
        self.view_type.as_ref()
    }
    /// <p>The tags (key-value pairs) that you want to apply to the stream.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>Specifies that the stream inherits the tags from the table.</p>
    pub fn propagate_tags(&self) -> ::std::option::Option<&crate::types::CdcPropagateTags> {
        self.propagate_tags.as_ref()
    }
}
impl CdcSpecification {
    /// Creates a new builder-style object to manufacture [`CdcSpecification`](crate::types::CdcSpecification).
    pub fn builder() -> crate::types::builders::CdcSpecificationBuilder {
        crate::types::builders::CdcSpecificationBuilder::default()
    }
}

/// A builder for [`CdcSpecification`](crate::types::CdcSpecification).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CdcSpecificationBuilder {
    pub(crate) status: ::std::option::Option<crate::types::CdcStatus>,
    pub(crate) view_type: ::std::option::Option<crate::types::ViewType>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) propagate_tags: ::std::option::Option<crate::types::CdcPropagateTags>,
}
impl CdcSpecificationBuilder {
    /// <p>The status of the CDC stream. You can enable or disable a stream for a table.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::CdcStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the CDC stream. You can enable or disable a stream for a table.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::CdcStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the CDC stream. You can enable or disable a stream for a table.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::CdcStatus> {
        &self.status
    }
    /// <p>The view type specifies the changes Amazon Keyspaces records for each changed row in the stream. After you create the stream, you can't make changes to this selection.</p>
    /// <p>The options are:</p>
    /// <ul>
    /// <li>
    /// <p><code>NEW_AND_OLD_IMAGES</code> - both versions of the row, before and after the change. This is the default.</p></li>
    /// <li>
    /// <p><code>NEW_IMAGE</code> - the version of the row after the change.</p></li>
    /// <li>
    /// <p><code>OLD_IMAGE</code> - the version of the row before the change.</p></li>
    /// <li>
    /// <p><code>KEYS_ONLY</code> - the partition and clustering keys of the row that was changed.</p></li>
    /// </ul>
    pub fn view_type(mut self, input: crate::types::ViewType) -> Self {
        self.view_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The view type specifies the changes Amazon Keyspaces records for each changed row in the stream. After you create the stream, you can't make changes to this selection.</p>
    /// <p>The options are:</p>
    /// <ul>
    /// <li>
    /// <p><code>NEW_AND_OLD_IMAGES</code> - both versions of the row, before and after the change. This is the default.</p></li>
    /// <li>
    /// <p><code>NEW_IMAGE</code> - the version of the row after the change.</p></li>
    /// <li>
    /// <p><code>OLD_IMAGE</code> - the version of the row before the change.</p></li>
    /// <li>
    /// <p><code>KEYS_ONLY</code> - the partition and clustering keys of the row that was changed.</p></li>
    /// </ul>
    pub fn set_view_type(mut self, input: ::std::option::Option<crate::types::ViewType>) -> Self {
        self.view_type = input;
        self
    }
    /// <p>The view type specifies the changes Amazon Keyspaces records for each changed row in the stream. After you create the stream, you can't make changes to this selection.</p>
    /// <p>The options are:</p>
    /// <ul>
    /// <li>
    /// <p><code>NEW_AND_OLD_IMAGES</code> - both versions of the row, before and after the change. This is the default.</p></li>
    /// <li>
    /// <p><code>NEW_IMAGE</code> - the version of the row after the change.</p></li>
    /// <li>
    /// <p><code>OLD_IMAGE</code> - the version of the row before the change.</p></li>
    /// <li>
    /// <p><code>KEYS_ONLY</code> - the partition and clustering keys of the row that was changed.</p></li>
    /// </ul>
    pub fn get_view_type(&self) -> &::std::option::Option<crate::types::ViewType> {
        &self.view_type
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags (key-value pairs) that you want to apply to the stream.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags (key-value pairs) that you want to apply to the stream.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags (key-value pairs) that you want to apply to the stream.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>Specifies that the stream inherits the tags from the table.</p>
    pub fn propagate_tags(mut self, input: crate::types::CdcPropagateTags) -> Self {
        self.propagate_tags = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies that the stream inherits the tags from the table.</p>
    pub fn set_propagate_tags(mut self, input: ::std::option::Option<crate::types::CdcPropagateTags>) -> Self {
        self.propagate_tags = input;
        self
    }
    /// <p>Specifies that the stream inherits the tags from the table.</p>
    pub fn get_propagate_tags(&self) -> &::std::option::Option<crate::types::CdcPropagateTags> {
        &self.propagate_tags
    }
    /// Consumes the builder and constructs a [`CdcSpecification`](crate::types::CdcSpecification).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::types::builders::CdcSpecificationBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::CdcSpecification, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CdcSpecification {
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building CdcSpecification",
                )
            })?,
            view_type: self.view_type,
            tags: self.tags,
            propagate_tags: self.propagate_tags,
        })
    }
}
