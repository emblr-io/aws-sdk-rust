// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This shows the summary status of the keyspace after a new Amazon Web Services Region was added.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReplicationGroupStatus {
    /// <p>The name of the Region that was added to the keyspace.</p>
    pub region: ::std::string::String,
    /// <p>The status of the keyspace.</p>
    pub keyspace_status: crate::types::KeyspaceStatus,
    /// <p>This shows the replication progress of tables in the keyspace. The value is expressed as a percentage of the newly replicated tables with status <code>Active</code> compared to the total number of tables in the keyspace.</p>
    pub tables_replication_progress: ::std::option::Option<::std::string::String>,
}
impl ReplicationGroupStatus {
    /// <p>The name of the Region that was added to the keyspace.</p>
    pub fn region(&self) -> &str {
        use std::ops::Deref;
        self.region.deref()
    }
    /// <p>The status of the keyspace.</p>
    pub fn keyspace_status(&self) -> &crate::types::KeyspaceStatus {
        &self.keyspace_status
    }
    /// <p>This shows the replication progress of tables in the keyspace. The value is expressed as a percentage of the newly replicated tables with status <code>Active</code> compared to the total number of tables in the keyspace.</p>
    pub fn tables_replication_progress(&self) -> ::std::option::Option<&str> {
        self.tables_replication_progress.as_deref()
    }
}
impl ReplicationGroupStatus {
    /// Creates a new builder-style object to manufacture [`ReplicationGroupStatus`](crate::types::ReplicationGroupStatus).
    pub fn builder() -> crate::types::builders::ReplicationGroupStatusBuilder {
        crate::types::builders::ReplicationGroupStatusBuilder::default()
    }
}

/// A builder for [`ReplicationGroupStatus`](crate::types::ReplicationGroupStatus).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ReplicationGroupStatusBuilder {
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) keyspace_status: ::std::option::Option<crate::types::KeyspaceStatus>,
    pub(crate) tables_replication_progress: ::std::option::Option<::std::string::String>,
}
impl ReplicationGroupStatusBuilder {
    /// <p>The name of the Region that was added to the keyspace.</p>
    /// This field is required.
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Region that was added to the keyspace.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The name of the Region that was added to the keyspace.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The status of the keyspace.</p>
    /// This field is required.
    pub fn keyspace_status(mut self, input: crate::types::KeyspaceStatus) -> Self {
        self.keyspace_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the keyspace.</p>
    pub fn set_keyspace_status(mut self, input: ::std::option::Option<crate::types::KeyspaceStatus>) -> Self {
        self.keyspace_status = input;
        self
    }
    /// <p>The status of the keyspace.</p>
    pub fn get_keyspace_status(&self) -> &::std::option::Option<crate::types::KeyspaceStatus> {
        &self.keyspace_status
    }
    /// <p>This shows the replication progress of tables in the keyspace. The value is expressed as a percentage of the newly replicated tables with status <code>Active</code> compared to the total number of tables in the keyspace.</p>
    pub fn tables_replication_progress(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tables_replication_progress = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This shows the replication progress of tables in the keyspace. The value is expressed as a percentage of the newly replicated tables with status <code>Active</code> compared to the total number of tables in the keyspace.</p>
    pub fn set_tables_replication_progress(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tables_replication_progress = input;
        self
    }
    /// <p>This shows the replication progress of tables in the keyspace. The value is expressed as a percentage of the newly replicated tables with status <code>Active</code> compared to the total number of tables in the keyspace.</p>
    pub fn get_tables_replication_progress(&self) -> &::std::option::Option<::std::string::String> {
        &self.tables_replication_progress
    }
    /// Consumes the builder and constructs a [`ReplicationGroupStatus`](crate::types::ReplicationGroupStatus).
    /// This method will fail if any of the following fields are not set:
    /// - [`region`](crate::types::builders::ReplicationGroupStatusBuilder::region)
    /// - [`keyspace_status`](crate::types::builders::ReplicationGroupStatusBuilder::keyspace_status)
    pub fn build(self) -> ::std::result::Result<crate::types::ReplicationGroupStatus, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ReplicationGroupStatus {
            region: self.region.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "region",
                    "region was not specified but it is required when building ReplicationGroupStatus",
                )
            })?,
            keyspace_status: self.keyspace_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "keyspace_status",
                    "keyspace_status was not specified but it is required when building ReplicationGroupStatus",
                )
            })?,
            tables_replication_progress: self.tables_replication_progress,
        })
    }
}
