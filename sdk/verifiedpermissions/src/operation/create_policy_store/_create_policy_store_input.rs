// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreatePolicyStoreInput {
    /// <p>Specifies a unique, case-sensitive ID that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value.</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>ConflictException</code> error.</p>
    /// <p>Verified Permissions recognizes a <code>ClientToken</code> for eight hours. After eight hours, the next request with the same parameters performs the operation again regardless of the value of <code>ClientToken</code>.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the validation setting for this policy store.</p>
    /// <p>Currently, the only valid and required value is <code>Mode</code>.</p><important>
    /// <p>We recommend that you turn on <code>STRICT</code> mode only after you define a schema. If a schema doesn't exist, then <code>STRICT</code> mode causes any policy to fail validation, and Verified Permissions rejects the policy. You can turn off validation by using the <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore">UpdatePolicyStore</a>. Then, when you have a schema defined, use <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore">UpdatePolicyStore</a> again to turn validation back on.</p>
    /// </important>
    pub validation_settings: ::std::option::Option<crate::types::ValidationSettings>,
    /// <p>Descriptive text that you can provide to help with identification of the current policy store.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the policy store can be deleted. If enabled, the policy store can't be deleted.</p>
    /// <p>The default state is <code>DISABLED</code>.</p>
    pub deletion_protection: ::std::option::Option<crate::types::DeletionProtection>,
    /// <p>The list of key-value pairs to associate with the policy store.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreatePolicyStoreInput {
    /// <p>Specifies a unique, case-sensitive ID that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value.</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>ConflictException</code> error.</p>
    /// <p>Verified Permissions recognizes a <code>ClientToken</code> for eight hours. After eight hours, the next request with the same parameters performs the operation again regardless of the value of <code>ClientToken</code>.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Specifies the validation setting for this policy store.</p>
    /// <p>Currently, the only valid and required value is <code>Mode</code>.</p><important>
    /// <p>We recommend that you turn on <code>STRICT</code> mode only after you define a schema. If a schema doesn't exist, then <code>STRICT</code> mode causes any policy to fail validation, and Verified Permissions rejects the policy. You can turn off validation by using the <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore">UpdatePolicyStore</a>. Then, when you have a schema defined, use <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore">UpdatePolicyStore</a> again to turn validation back on.</p>
    /// </important>
    pub fn validation_settings(&self) -> ::std::option::Option<&crate::types::ValidationSettings> {
        self.validation_settings.as_ref()
    }
    /// <p>Descriptive text that you can provide to help with identification of the current policy store.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Specifies whether the policy store can be deleted. If enabled, the policy store can't be deleted.</p>
    /// <p>The default state is <code>DISABLED</code>.</p>
    pub fn deletion_protection(&self) -> ::std::option::Option<&crate::types::DeletionProtection> {
        self.deletion_protection.as_ref()
    }
    /// <p>The list of key-value pairs to associate with the policy store.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for CreatePolicyStoreInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreatePolicyStoreInput");
        formatter.field("client_token", &self.client_token);
        formatter.field("validation_settings", &self.validation_settings);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("deletion_protection", &self.deletion_protection);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl CreatePolicyStoreInput {
    /// Creates a new builder-style object to manufacture [`CreatePolicyStoreInput`](crate::operation::create_policy_store::CreatePolicyStoreInput).
    pub fn builder() -> crate::operation::create_policy_store::builders::CreatePolicyStoreInputBuilder {
        crate::operation::create_policy_store::builders::CreatePolicyStoreInputBuilder::default()
    }
}

/// A builder for [`CreatePolicyStoreInput`](crate::operation::create_policy_store::CreatePolicyStoreInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreatePolicyStoreInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) validation_settings: ::std::option::Option<crate::types::ValidationSettings>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) deletion_protection: ::std::option::Option<crate::types::DeletionProtection>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreatePolicyStoreInputBuilder {
    /// <p>Specifies a unique, case-sensitive ID that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value.</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>ConflictException</code> error.</p>
    /// <p>Verified Permissions recognizes a <code>ClientToken</code> for eight hours. After eight hours, the next request with the same parameters performs the operation again regardless of the value of <code>ClientToken</code>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a unique, case-sensitive ID that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value.</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>ConflictException</code> error.</p>
    /// <p>Verified Permissions recognizes a <code>ClientToken</code> for eight hours. After eight hours, the next request with the same parameters performs the operation again regardless of the value of <code>ClientToken</code>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Specifies a unique, case-sensitive ID that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value.</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>ConflictException</code> error.</p>
    /// <p>Verified Permissions recognizes a <code>ClientToken</code> for eight hours. After eight hours, the next request with the same parameters performs the operation again regardless of the value of <code>ClientToken</code>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>Specifies the validation setting for this policy store.</p>
    /// <p>Currently, the only valid and required value is <code>Mode</code>.</p><important>
    /// <p>We recommend that you turn on <code>STRICT</code> mode only after you define a schema. If a schema doesn't exist, then <code>STRICT</code> mode causes any policy to fail validation, and Verified Permissions rejects the policy. You can turn off validation by using the <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore">UpdatePolicyStore</a>. Then, when you have a schema defined, use <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore">UpdatePolicyStore</a> again to turn validation back on.</p>
    /// </important>
    /// This field is required.
    pub fn validation_settings(mut self, input: crate::types::ValidationSettings) -> Self {
        self.validation_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the validation setting for this policy store.</p>
    /// <p>Currently, the only valid and required value is <code>Mode</code>.</p><important>
    /// <p>We recommend that you turn on <code>STRICT</code> mode only after you define a schema. If a schema doesn't exist, then <code>STRICT</code> mode causes any policy to fail validation, and Verified Permissions rejects the policy. You can turn off validation by using the <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore">UpdatePolicyStore</a>. Then, when you have a schema defined, use <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore">UpdatePolicyStore</a> again to turn validation back on.</p>
    /// </important>
    pub fn set_validation_settings(mut self, input: ::std::option::Option<crate::types::ValidationSettings>) -> Self {
        self.validation_settings = input;
        self
    }
    /// <p>Specifies the validation setting for this policy store.</p>
    /// <p>Currently, the only valid and required value is <code>Mode</code>.</p><important>
    /// <p>We recommend that you turn on <code>STRICT</code> mode only after you define a schema. If a schema doesn't exist, then <code>STRICT</code> mode causes any policy to fail validation, and Verified Permissions rejects the policy. You can turn off validation by using the <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore">UpdatePolicyStore</a>. Then, when you have a schema defined, use <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore">UpdatePolicyStore</a> again to turn validation back on.</p>
    /// </important>
    pub fn get_validation_settings(&self) -> &::std::option::Option<crate::types::ValidationSettings> {
        &self.validation_settings
    }
    /// <p>Descriptive text that you can provide to help with identification of the current policy store.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Descriptive text that you can provide to help with identification of the current policy store.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Descriptive text that you can provide to help with identification of the current policy store.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Specifies whether the policy store can be deleted. If enabled, the policy store can't be deleted.</p>
    /// <p>The default state is <code>DISABLED</code>.</p>
    pub fn deletion_protection(mut self, input: crate::types::DeletionProtection) -> Self {
        self.deletion_protection = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the policy store can be deleted. If enabled, the policy store can't be deleted.</p>
    /// <p>The default state is <code>DISABLED</code>.</p>
    pub fn set_deletion_protection(mut self, input: ::std::option::Option<crate::types::DeletionProtection>) -> Self {
        self.deletion_protection = input;
        self
    }
    /// <p>Specifies whether the policy store can be deleted. If enabled, the policy store can't be deleted.</p>
    /// <p>The default state is <code>DISABLED</code>.</p>
    pub fn get_deletion_protection(&self) -> &::std::option::Option<crate::types::DeletionProtection> {
        &self.deletion_protection
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of key-value pairs to associate with the policy store.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The list of key-value pairs to associate with the policy store.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The list of key-value pairs to associate with the policy store.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreatePolicyStoreInput`](crate::operation::create_policy_store::CreatePolicyStoreInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_policy_store::CreatePolicyStoreInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_policy_store::CreatePolicyStoreInput {
            client_token: self.client_token,
            validation_settings: self.validation_settings,
            description: self.description,
            deletion_protection: self.deletion_protection,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for CreatePolicyStoreInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreatePolicyStoreInputBuilder");
        formatter.field("client_token", &self.client_token);
        formatter.field("validation_settings", &self.validation_settings);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("deletion_protection", &self.deletion_protection);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
