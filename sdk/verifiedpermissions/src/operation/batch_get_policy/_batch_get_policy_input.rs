// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetPolicyInput {
    /// <p>An array of up to 100 policies you want information about.</p>
    pub requests: ::std::option::Option<::std::vec::Vec<crate::types::BatchGetPolicyInputItem>>,
}
impl BatchGetPolicyInput {
    /// <p>An array of up to 100 policies you want information about.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.requests.is_none()`.
    pub fn requests(&self) -> &[crate::types::BatchGetPolicyInputItem] {
        self.requests.as_deref().unwrap_or_default()
    }
}
impl BatchGetPolicyInput {
    /// Creates a new builder-style object to manufacture [`BatchGetPolicyInput`](crate::operation::batch_get_policy::BatchGetPolicyInput).
    pub fn builder() -> crate::operation::batch_get_policy::builders::BatchGetPolicyInputBuilder {
        crate::operation::batch_get_policy::builders::BatchGetPolicyInputBuilder::default()
    }
}

/// A builder for [`BatchGetPolicyInput`](crate::operation::batch_get_policy::BatchGetPolicyInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchGetPolicyInputBuilder {
    pub(crate) requests: ::std::option::Option<::std::vec::Vec<crate::types::BatchGetPolicyInputItem>>,
}
impl BatchGetPolicyInputBuilder {
    /// Appends an item to `requests`.
    ///
    /// To override the contents of this collection use [`set_requests`](Self::set_requests).
    ///
    /// <p>An array of up to 100 policies you want information about.</p>
    pub fn requests(mut self, input: crate::types::BatchGetPolicyInputItem) -> Self {
        let mut v = self.requests.unwrap_or_default();
        v.push(input);
        self.requests = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of up to 100 policies you want information about.</p>
    pub fn set_requests(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BatchGetPolicyInputItem>>) -> Self {
        self.requests = input;
        self
    }
    /// <p>An array of up to 100 policies you want information about.</p>
    pub fn get_requests(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BatchGetPolicyInputItem>> {
        &self.requests
    }
    /// Consumes the builder and constructs a [`BatchGetPolicyInput`](crate::operation::batch_get_policy::BatchGetPolicyInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::batch_get_policy::BatchGetPolicyInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::batch_get_policy::BatchGetPolicyInput { requests: self.requests })
    }
}
