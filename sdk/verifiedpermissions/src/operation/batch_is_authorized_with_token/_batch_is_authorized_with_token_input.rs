// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct BatchIsAuthorizedWithTokenInput {
    /// <p>Specifies the ID of the policy store. Policies in this policy store will be used to make an authorization decision for the input.</p>
    pub policy_store_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies an identity (ID) token for the principal that you want to authorize in each request. This token is provided to you by the identity provider (IdP) associated with the specified identity source. You must specify either an <code>accessToken</code>, an <code>identityToken</code>, or both.</p>
    /// <p>Must be an ID token. Verified Permissions returns an error if the <code>token_use</code> claim in the submitted token isn't <code>id</code>.</p>
    pub identity_token: ::std::option::Option<::std::string::String>,
    /// <p>Specifies an access token for the principal that you want to authorize in each request. This token is provided to you by the identity provider (IdP) associated with the specified identity source. You must specify either an <code>accessToken</code>, an <code>identityToken</code>, or both.</p>
    /// <p>Must be an access token. Verified Permissions returns an error if the <code>token_use</code> claim in the submitted token isn't <code>access</code>.</p>
    pub access_token: ::std::option::Option<::std::string::String>,
    /// <p>(Optional) Specifies the list of resources and their associated attributes that Verified Permissions can examine when evaluating the policies. These additional entities and their attributes can be referenced and checked by conditional elements in the policies in the specified policy store.</p><important>
    /// <p>You can't include principals in this parameter, only resource and action entities. This parameter can't include any entities of a type that matches the user or group entity types that you defined in your identity source.</p>
    /// <ul>
    /// <li>
    /// <p>The <code>BatchIsAuthorizedWithToken</code> operation takes principal attributes from <b> <i>only</i> </b> the <code>identityToken</code> or <code>accessToken</code> passed to the operation.</p></li>
    /// <li>
    /// <p>For action entities, you can include only their <code>Identifier</code> and <code>EntityType</code>.</p></li>
    /// </ul>
    /// </important>
    pub entities: ::std::option::Option<crate::types::EntitiesDefinition>,
    /// <p>An array of up to 30 requests that you want Verified Permissions to evaluate.</p>
    pub requests: ::std::option::Option<::std::vec::Vec<crate::types::BatchIsAuthorizedWithTokenInputItem>>,
}
impl BatchIsAuthorizedWithTokenInput {
    /// <p>Specifies the ID of the policy store. Policies in this policy store will be used to make an authorization decision for the input.</p>
    pub fn policy_store_id(&self) -> ::std::option::Option<&str> {
        self.policy_store_id.as_deref()
    }
    /// <p>Specifies an identity (ID) token for the principal that you want to authorize in each request. This token is provided to you by the identity provider (IdP) associated with the specified identity source. You must specify either an <code>accessToken</code>, an <code>identityToken</code>, or both.</p>
    /// <p>Must be an ID token. Verified Permissions returns an error if the <code>token_use</code> claim in the submitted token isn't <code>id</code>.</p>
    pub fn identity_token(&self) -> ::std::option::Option<&str> {
        self.identity_token.as_deref()
    }
    /// <p>Specifies an access token for the principal that you want to authorize in each request. This token is provided to you by the identity provider (IdP) associated with the specified identity source. You must specify either an <code>accessToken</code>, an <code>identityToken</code>, or both.</p>
    /// <p>Must be an access token. Verified Permissions returns an error if the <code>token_use</code> claim in the submitted token isn't <code>access</code>.</p>
    pub fn access_token(&self) -> ::std::option::Option<&str> {
        self.access_token.as_deref()
    }
    /// <p>(Optional) Specifies the list of resources and their associated attributes that Verified Permissions can examine when evaluating the policies. These additional entities and their attributes can be referenced and checked by conditional elements in the policies in the specified policy store.</p><important>
    /// <p>You can't include principals in this parameter, only resource and action entities. This parameter can't include any entities of a type that matches the user or group entity types that you defined in your identity source.</p>
    /// <ul>
    /// <li>
    /// <p>The <code>BatchIsAuthorizedWithToken</code> operation takes principal attributes from <b> <i>only</i> </b> the <code>identityToken</code> or <code>accessToken</code> passed to the operation.</p></li>
    /// <li>
    /// <p>For action entities, you can include only their <code>Identifier</code> and <code>EntityType</code>.</p></li>
    /// </ul>
    /// </important>
    pub fn entities(&self) -> ::std::option::Option<&crate::types::EntitiesDefinition> {
        self.entities.as_ref()
    }
    /// <p>An array of up to 30 requests that you want Verified Permissions to evaluate.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.requests.is_none()`.
    pub fn requests(&self) -> &[crate::types::BatchIsAuthorizedWithTokenInputItem] {
        self.requests.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for BatchIsAuthorizedWithTokenInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BatchIsAuthorizedWithTokenInput");
        formatter.field("policy_store_id", &self.policy_store_id);
        formatter.field("identity_token", &"*** Sensitive Data Redacted ***");
        formatter.field("access_token", &"*** Sensitive Data Redacted ***");
        formatter.field("entities", &self.entities);
        formatter.field("requests", &self.requests);
        formatter.finish()
    }
}
impl BatchIsAuthorizedWithTokenInput {
    /// Creates a new builder-style object to manufacture [`BatchIsAuthorizedWithTokenInput`](crate::operation::batch_is_authorized_with_token::BatchIsAuthorizedWithTokenInput).
    pub fn builder() -> crate::operation::batch_is_authorized_with_token::builders::BatchIsAuthorizedWithTokenInputBuilder {
        crate::operation::batch_is_authorized_with_token::builders::BatchIsAuthorizedWithTokenInputBuilder::default()
    }
}

/// A builder for [`BatchIsAuthorizedWithTokenInput`](crate::operation::batch_is_authorized_with_token::BatchIsAuthorizedWithTokenInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct BatchIsAuthorizedWithTokenInputBuilder {
    pub(crate) policy_store_id: ::std::option::Option<::std::string::String>,
    pub(crate) identity_token: ::std::option::Option<::std::string::String>,
    pub(crate) access_token: ::std::option::Option<::std::string::String>,
    pub(crate) entities: ::std::option::Option<crate::types::EntitiesDefinition>,
    pub(crate) requests: ::std::option::Option<::std::vec::Vec<crate::types::BatchIsAuthorizedWithTokenInputItem>>,
}
impl BatchIsAuthorizedWithTokenInputBuilder {
    /// <p>Specifies the ID of the policy store. Policies in this policy store will be used to make an authorization decision for the input.</p>
    /// This field is required.
    pub fn policy_store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_store_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the ID of the policy store. Policies in this policy store will be used to make an authorization decision for the input.</p>
    pub fn set_policy_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_store_id = input;
        self
    }
    /// <p>Specifies the ID of the policy store. Policies in this policy store will be used to make an authorization decision for the input.</p>
    pub fn get_policy_store_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_store_id
    }
    /// <p>Specifies an identity (ID) token for the principal that you want to authorize in each request. This token is provided to you by the identity provider (IdP) associated with the specified identity source. You must specify either an <code>accessToken</code>, an <code>identityToken</code>, or both.</p>
    /// <p>Must be an ID token. Verified Permissions returns an error if the <code>token_use</code> claim in the submitted token isn't <code>id</code>.</p>
    pub fn identity_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies an identity (ID) token for the principal that you want to authorize in each request. This token is provided to you by the identity provider (IdP) associated with the specified identity source. You must specify either an <code>accessToken</code>, an <code>identityToken</code>, or both.</p>
    /// <p>Must be an ID token. Verified Permissions returns an error if the <code>token_use</code> claim in the submitted token isn't <code>id</code>.</p>
    pub fn set_identity_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity_token = input;
        self
    }
    /// <p>Specifies an identity (ID) token for the principal that you want to authorize in each request. This token is provided to you by the identity provider (IdP) associated with the specified identity source. You must specify either an <code>accessToken</code>, an <code>identityToken</code>, or both.</p>
    /// <p>Must be an ID token. Verified Permissions returns an error if the <code>token_use</code> claim in the submitted token isn't <code>id</code>.</p>
    pub fn get_identity_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity_token
    }
    /// <p>Specifies an access token for the principal that you want to authorize in each request. This token is provided to you by the identity provider (IdP) associated with the specified identity source. You must specify either an <code>accessToken</code>, an <code>identityToken</code>, or both.</p>
    /// <p>Must be an access token. Verified Permissions returns an error if the <code>token_use</code> claim in the submitted token isn't <code>access</code>.</p>
    pub fn access_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies an access token for the principal that you want to authorize in each request. This token is provided to you by the identity provider (IdP) associated with the specified identity source. You must specify either an <code>accessToken</code>, an <code>identityToken</code>, or both.</p>
    /// <p>Must be an access token. Verified Permissions returns an error if the <code>token_use</code> claim in the submitted token isn't <code>access</code>.</p>
    pub fn set_access_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_token = input;
        self
    }
    /// <p>Specifies an access token for the principal that you want to authorize in each request. This token is provided to you by the identity provider (IdP) associated with the specified identity source. You must specify either an <code>accessToken</code>, an <code>identityToken</code>, or both.</p>
    /// <p>Must be an access token. Verified Permissions returns an error if the <code>token_use</code> claim in the submitted token isn't <code>access</code>.</p>
    pub fn get_access_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_token
    }
    /// <p>(Optional) Specifies the list of resources and their associated attributes that Verified Permissions can examine when evaluating the policies. These additional entities and their attributes can be referenced and checked by conditional elements in the policies in the specified policy store.</p><important>
    /// <p>You can't include principals in this parameter, only resource and action entities. This parameter can't include any entities of a type that matches the user or group entity types that you defined in your identity source.</p>
    /// <ul>
    /// <li>
    /// <p>The <code>BatchIsAuthorizedWithToken</code> operation takes principal attributes from <b> <i>only</i> </b> the <code>identityToken</code> or <code>accessToken</code> passed to the operation.</p></li>
    /// <li>
    /// <p>For action entities, you can include only their <code>Identifier</code> and <code>EntityType</code>.</p></li>
    /// </ul>
    /// </important>
    pub fn entities(mut self, input: crate::types::EntitiesDefinition) -> Self {
        self.entities = ::std::option::Option::Some(input);
        self
    }
    /// <p>(Optional) Specifies the list of resources and their associated attributes that Verified Permissions can examine when evaluating the policies. These additional entities and their attributes can be referenced and checked by conditional elements in the policies in the specified policy store.</p><important>
    /// <p>You can't include principals in this parameter, only resource and action entities. This parameter can't include any entities of a type that matches the user or group entity types that you defined in your identity source.</p>
    /// <ul>
    /// <li>
    /// <p>The <code>BatchIsAuthorizedWithToken</code> operation takes principal attributes from <b> <i>only</i> </b> the <code>identityToken</code> or <code>accessToken</code> passed to the operation.</p></li>
    /// <li>
    /// <p>For action entities, you can include only their <code>Identifier</code> and <code>EntityType</code>.</p></li>
    /// </ul>
    /// </important>
    pub fn set_entities(mut self, input: ::std::option::Option<crate::types::EntitiesDefinition>) -> Self {
        self.entities = input;
        self
    }
    /// <p>(Optional) Specifies the list of resources and their associated attributes that Verified Permissions can examine when evaluating the policies. These additional entities and their attributes can be referenced and checked by conditional elements in the policies in the specified policy store.</p><important>
    /// <p>You can't include principals in this parameter, only resource and action entities. This parameter can't include any entities of a type that matches the user or group entity types that you defined in your identity source.</p>
    /// <ul>
    /// <li>
    /// <p>The <code>BatchIsAuthorizedWithToken</code> operation takes principal attributes from <b> <i>only</i> </b> the <code>identityToken</code> or <code>accessToken</code> passed to the operation.</p></li>
    /// <li>
    /// <p>For action entities, you can include only their <code>Identifier</code> and <code>EntityType</code>.</p></li>
    /// </ul>
    /// </important>
    pub fn get_entities(&self) -> &::std::option::Option<crate::types::EntitiesDefinition> {
        &self.entities
    }
    /// Appends an item to `requests`.
    ///
    /// To override the contents of this collection use [`set_requests`](Self::set_requests).
    ///
    /// <p>An array of up to 30 requests that you want Verified Permissions to evaluate.</p>
    pub fn requests(mut self, input: crate::types::BatchIsAuthorizedWithTokenInputItem) -> Self {
        let mut v = self.requests.unwrap_or_default();
        v.push(input);
        self.requests = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of up to 30 requests that you want Verified Permissions to evaluate.</p>
    pub fn set_requests(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BatchIsAuthorizedWithTokenInputItem>>) -> Self {
        self.requests = input;
        self
    }
    /// <p>An array of up to 30 requests that you want Verified Permissions to evaluate.</p>
    pub fn get_requests(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BatchIsAuthorizedWithTokenInputItem>> {
        &self.requests
    }
    /// Consumes the builder and constructs a [`BatchIsAuthorizedWithTokenInput`](crate::operation::batch_is_authorized_with_token::BatchIsAuthorizedWithTokenInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_is_authorized_with_token::BatchIsAuthorizedWithTokenInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::batch_is_authorized_with_token::BatchIsAuthorizedWithTokenInput {
            policy_store_id: self.policy_store_id,
            identity_token: self.identity_token,
            access_token: self.access_token,
            entities: self.entities,
            requests: self.requests,
        })
    }
}
impl ::std::fmt::Debug for BatchIsAuthorizedWithTokenInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BatchIsAuthorizedWithTokenInputBuilder");
        formatter.field("policy_store_id", &self.policy_store_id);
        formatter.field("identity_token", &"*** Sensitive Data Redacted ***");
        formatter.field("access_token", &"*** Sensitive Data Redacted ***");
        formatter.field("entities", &self.entities);
        formatter.field("requests", &self.requests);
        formatter.finish()
    }
}
