// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetPolicyStoreOutput {
    /// <p>The ID of the policy store;</p>
    pub policy_store_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the policy store.</p>
    pub arn: ::std::string::String,
    /// <p>The current validation settings for the policy store.</p>
    pub validation_settings: ::std::option::Option<crate::types::ValidationSettings>,
    /// <p>The date and time that the policy store was originally created.</p>
    pub created_date: ::aws_smithy_types::DateTime,
    /// <p>The date and time that the policy store was last updated.</p>
    pub last_updated_date: ::aws_smithy_types::DateTime,
    /// <p>Descriptive text that you can provide to help with identification of the current policy store.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the policy store can be deleted. If enabled, the policy store can't be deleted.</p>
    /// <p>The default state is <code>DISABLED</code>.</p>
    pub deletion_protection: ::std::option::Option<crate::types::DeletionProtection>,
    /// <p>The version of the Cedar language used with policies, policy templates, and schemas in this policy store. For more information, see <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/userguide/cedar4-faq.html">Amazon Verified Permissions upgrade to Cedar v4 FAQ</a>.</p>
    pub cedar_version: ::std::option::Option<crate::types::CedarVersion>,
    /// <p>The list of tags associated with the policy store.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetPolicyStoreOutput {
    /// <p>The ID of the policy store;</p>
    pub fn policy_store_id(&self) -> &str {
        use std::ops::Deref;
        self.policy_store_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the policy store.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The current validation settings for the policy store.</p>
    pub fn validation_settings(&self) -> ::std::option::Option<&crate::types::ValidationSettings> {
        self.validation_settings.as_ref()
    }
    /// <p>The date and time that the policy store was originally created.</p>
    pub fn created_date(&self) -> &::aws_smithy_types::DateTime {
        &self.created_date
    }
    /// <p>The date and time that the policy store was last updated.</p>
    pub fn last_updated_date(&self) -> &::aws_smithy_types::DateTime {
        &self.last_updated_date
    }
    /// <p>Descriptive text that you can provide to help with identification of the current policy store.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Specifies whether the policy store can be deleted. If enabled, the policy store can't be deleted.</p>
    /// <p>The default state is <code>DISABLED</code>.</p>
    pub fn deletion_protection(&self) -> ::std::option::Option<&crate::types::DeletionProtection> {
        self.deletion_protection.as_ref()
    }
    /// <p>The version of the Cedar language used with policies, policy templates, and schemas in this policy store. For more information, see <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/userguide/cedar4-faq.html">Amazon Verified Permissions upgrade to Cedar v4 FAQ</a>.</p>
    pub fn cedar_version(&self) -> ::std::option::Option<&crate::types::CedarVersion> {
        self.cedar_version.as_ref()
    }
    /// <p>The list of tags associated with the policy store.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for GetPolicyStoreOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetPolicyStoreOutput");
        formatter.field("policy_store_id", &self.policy_store_id);
        formatter.field("arn", &self.arn);
        formatter.field("validation_settings", &self.validation_settings);
        formatter.field("created_date", &self.created_date);
        formatter.field("last_updated_date", &self.last_updated_date);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("deletion_protection", &self.deletion_protection);
        formatter.field("cedar_version", &self.cedar_version);
        formatter.field("tags", &self.tags);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetPolicyStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPolicyStoreOutput {
    /// Creates a new builder-style object to manufacture [`GetPolicyStoreOutput`](crate::operation::get_policy_store::GetPolicyStoreOutput).
    pub fn builder() -> crate::operation::get_policy_store::builders::GetPolicyStoreOutputBuilder {
        crate::operation::get_policy_store::builders::GetPolicyStoreOutputBuilder::default()
    }
}

/// A builder for [`GetPolicyStoreOutput`](crate::operation::get_policy_store::GetPolicyStoreOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetPolicyStoreOutputBuilder {
    pub(crate) policy_store_id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) validation_settings: ::std::option::Option<crate::types::ValidationSettings>,
    pub(crate) created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) deletion_protection: ::std::option::Option<crate::types::DeletionProtection>,
    pub(crate) cedar_version: ::std::option::Option<crate::types::CedarVersion>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetPolicyStoreOutputBuilder {
    /// <p>The ID of the policy store;</p>
    /// This field is required.
    pub fn policy_store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_store_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the policy store;</p>
    pub fn set_policy_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_store_id = input;
        self
    }
    /// <p>The ID of the policy store;</p>
    pub fn get_policy_store_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_store_id
    }
    /// <p>The Amazon Resource Name (ARN) of the policy store.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the policy store.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the policy store.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The current validation settings for the policy store.</p>
    /// This field is required.
    pub fn validation_settings(mut self, input: crate::types::ValidationSettings) -> Self {
        self.validation_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current validation settings for the policy store.</p>
    pub fn set_validation_settings(mut self, input: ::std::option::Option<crate::types::ValidationSettings>) -> Self {
        self.validation_settings = input;
        self
    }
    /// <p>The current validation settings for the policy store.</p>
    pub fn get_validation_settings(&self) -> &::std::option::Option<crate::types::ValidationSettings> {
        &self.validation_settings
    }
    /// <p>The date and time that the policy store was originally created.</p>
    /// This field is required.
    pub fn created_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the policy store was originally created.</p>
    pub fn set_created_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_date = input;
        self
    }
    /// <p>The date and time that the policy store was originally created.</p>
    pub fn get_created_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_date
    }
    /// <p>The date and time that the policy store was last updated.</p>
    /// This field is required.
    pub fn last_updated_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the policy store was last updated.</p>
    pub fn set_last_updated_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_date = input;
        self
    }
    /// <p>The date and time that the policy store was last updated.</p>
    pub fn get_last_updated_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_date
    }
    /// <p>Descriptive text that you can provide to help with identification of the current policy store.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Descriptive text that you can provide to help with identification of the current policy store.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Descriptive text that you can provide to help with identification of the current policy store.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Specifies whether the policy store can be deleted. If enabled, the policy store can't be deleted.</p>
    /// <p>The default state is <code>DISABLED</code>.</p>
    pub fn deletion_protection(mut self, input: crate::types::DeletionProtection) -> Self {
        self.deletion_protection = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the policy store can be deleted. If enabled, the policy store can't be deleted.</p>
    /// <p>The default state is <code>DISABLED</code>.</p>
    pub fn set_deletion_protection(mut self, input: ::std::option::Option<crate::types::DeletionProtection>) -> Self {
        self.deletion_protection = input;
        self
    }
    /// <p>Specifies whether the policy store can be deleted. If enabled, the policy store can't be deleted.</p>
    /// <p>The default state is <code>DISABLED</code>.</p>
    pub fn get_deletion_protection(&self) -> &::std::option::Option<crate::types::DeletionProtection> {
        &self.deletion_protection
    }
    /// <p>The version of the Cedar language used with policies, policy templates, and schemas in this policy store. For more information, see <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/userguide/cedar4-faq.html">Amazon Verified Permissions upgrade to Cedar v4 FAQ</a>.</p>
    pub fn cedar_version(mut self, input: crate::types::CedarVersion) -> Self {
        self.cedar_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version of the Cedar language used with policies, policy templates, and schemas in this policy store. For more information, see <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/userguide/cedar4-faq.html">Amazon Verified Permissions upgrade to Cedar v4 FAQ</a>.</p>
    pub fn set_cedar_version(mut self, input: ::std::option::Option<crate::types::CedarVersion>) -> Self {
        self.cedar_version = input;
        self
    }
    /// <p>The version of the Cedar language used with policies, policy templates, and schemas in this policy store. For more information, see <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/userguide/cedar4-faq.html">Amazon Verified Permissions upgrade to Cedar v4 FAQ</a>.</p>
    pub fn get_cedar_version(&self) -> &::std::option::Option<crate::types::CedarVersion> {
        &self.cedar_version
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of tags associated with the policy store.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The list of tags associated with the policy store.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The list of tags associated with the policy store.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetPolicyStoreOutput`](crate::operation::get_policy_store::GetPolicyStoreOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`policy_store_id`](crate::operation::get_policy_store::builders::GetPolicyStoreOutputBuilder::policy_store_id)
    /// - [`arn`](crate::operation::get_policy_store::builders::GetPolicyStoreOutputBuilder::arn)
    /// - [`created_date`](crate::operation::get_policy_store::builders::GetPolicyStoreOutputBuilder::created_date)
    /// - [`last_updated_date`](crate::operation::get_policy_store::builders::GetPolicyStoreOutputBuilder::last_updated_date)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_policy_store::GetPolicyStoreOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_policy_store::GetPolicyStoreOutput {
            policy_store_id: self.policy_store_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "policy_store_id",
                    "policy_store_id was not specified but it is required when building GetPolicyStoreOutput",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building GetPolicyStoreOutput",
                )
            })?,
            validation_settings: self.validation_settings,
            created_date: self.created_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_date",
                    "created_date was not specified but it is required when building GetPolicyStoreOutput",
                )
            })?,
            last_updated_date: self.last_updated_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_updated_date",
                    "last_updated_date was not specified but it is required when building GetPolicyStoreOutput",
                )
            })?,
            description: self.description,
            deletion_protection: self.deletion_protection,
            cedar_version: self.cedar_version,
            tags: self.tags,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetPolicyStoreOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetPolicyStoreOutputBuilder");
        formatter.field("policy_store_id", &self.policy_store_id);
        formatter.field("arn", &self.arn);
        formatter.field("validation_settings", &self.validation_settings);
        formatter.field("created_date", &self.created_date);
        formatter.field("last_updated_date", &self.last_updated_date);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("deletion_protection", &self.deletion_protection);
        formatter.field("cedar_version", &self.cedar_version);
        formatter.field("tags", &self.tags);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
