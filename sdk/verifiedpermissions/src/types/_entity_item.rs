// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an entity that can be referenced in a Cedar policy.</p>
/// <p>This data type is used as one of the fields in the <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_EntitiesDefinition.html">EntitiesDefinition</a> structure.</p>
/// <p><code>{ "identifier": { "entityType": "Photo", "entityId": "VacationPhoto94.jpg" }, "attributes": {}, "parents": \[ { "entityType": "Album", "entityId": "alice_folder" } \] }</code></p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EntityItem {
    /// <p>The identifier of the entity.</p>
    pub identifier: ::std::option::Option<crate::types::EntityIdentifier>,
    /// <p>A list of attributes for the entity.</p>
    pub attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>>,
    /// <p>The parent entities in the hierarchy that contains the entity. A principal or resource entity can be defined with at most 99 <i>transitive parents</i> per authorization request.</p>
    /// <p>A transitive parent is an entity in the hierarchy of entities including all direct parents, and parents of parents. For example, a user can be a member of 91 groups if one of those groups is a member of eight groups, for a total of 100: one entity, 91 entity parents, and eight parents of parents.</p>
    pub parents: ::std::option::Option<::std::vec::Vec<crate::types::EntityIdentifier>>,
}
impl EntityItem {
    /// <p>The identifier of the entity.</p>
    pub fn identifier(&self) -> ::std::option::Option<&crate::types::EntityIdentifier> {
        self.identifier.as_ref()
    }
    /// <p>A list of attributes for the entity.</p>
    pub fn attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>> {
        self.attributes.as_ref()
    }
    /// <p>The parent entities in the hierarchy that contains the entity. A principal or resource entity can be defined with at most 99 <i>transitive parents</i> per authorization request.</p>
    /// <p>A transitive parent is an entity in the hierarchy of entities including all direct parents, and parents of parents. For example, a user can be a member of 91 groups if one of those groups is a member of eight groups, for a total of 100: one entity, 91 entity parents, and eight parents of parents.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.parents.is_none()`.
    pub fn parents(&self) -> &[crate::types::EntityIdentifier] {
        self.parents.as_deref().unwrap_or_default()
    }
}
impl EntityItem {
    /// Creates a new builder-style object to manufacture [`EntityItem`](crate::types::EntityItem).
    pub fn builder() -> crate::types::builders::EntityItemBuilder {
        crate::types::builders::EntityItemBuilder::default()
    }
}

/// A builder for [`EntityItem`](crate::types::EntityItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EntityItemBuilder {
    pub(crate) identifier: ::std::option::Option<crate::types::EntityIdentifier>,
    pub(crate) attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>>,
    pub(crate) parents: ::std::option::Option<::std::vec::Vec<crate::types::EntityIdentifier>>,
}
impl EntityItemBuilder {
    /// <p>The identifier of the entity.</p>
    /// This field is required.
    pub fn identifier(mut self, input: crate::types::EntityIdentifier) -> Self {
        self.identifier = ::std::option::Option::Some(input);
        self
    }
    /// <p>The identifier of the entity.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<crate::types::EntityIdentifier>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The identifier of the entity.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<crate::types::EntityIdentifier> {
        &self.identifier
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>A list of attributes for the entity.</p>
    pub fn attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::AttributeValue) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A list of attributes for the entity.</p>
    pub fn set_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>>,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// <p>A list of attributes for the entity.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AttributeValue>> {
        &self.attributes
    }
    /// Appends an item to `parents`.
    ///
    /// To override the contents of this collection use [`set_parents`](Self::set_parents).
    ///
    /// <p>The parent entities in the hierarchy that contains the entity. A principal or resource entity can be defined with at most 99 <i>transitive parents</i> per authorization request.</p>
    /// <p>A transitive parent is an entity in the hierarchy of entities including all direct parents, and parents of parents. For example, a user can be a member of 91 groups if one of those groups is a member of eight groups, for a total of 100: one entity, 91 entity parents, and eight parents of parents.</p>
    pub fn parents(mut self, input: crate::types::EntityIdentifier) -> Self {
        let mut v = self.parents.unwrap_or_default();
        v.push(input);
        self.parents = ::std::option::Option::Some(v);
        self
    }
    /// <p>The parent entities in the hierarchy that contains the entity. A principal or resource entity can be defined with at most 99 <i>transitive parents</i> per authorization request.</p>
    /// <p>A transitive parent is an entity in the hierarchy of entities including all direct parents, and parents of parents. For example, a user can be a member of 91 groups if one of those groups is a member of eight groups, for a total of 100: one entity, 91 entity parents, and eight parents of parents.</p>
    pub fn set_parents(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EntityIdentifier>>) -> Self {
        self.parents = input;
        self
    }
    /// <p>The parent entities in the hierarchy that contains the entity. A principal or resource entity can be defined with at most 99 <i>transitive parents</i> per authorization request.</p>
    /// <p>A transitive parent is an entity in the hierarchy of entities including all direct parents, and parents of parents. For example, a user can be a member of 91 groups if one of those groups is a member of eight groups, for a total of 100: one entity, 91 entity parents, and eight parents of parents.</p>
    pub fn get_parents(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EntityIdentifier>> {
        &self.parents
    }
    /// Consumes the builder and constructs a [`EntityItem`](crate::types::EntityItem).
    pub fn build(self) -> crate::types::EntityItem {
        crate::types::EntityItem {
            identifier: self.identifier,
            attributes: self.attributes,
            parents: self.parents,
        }
    }
}
