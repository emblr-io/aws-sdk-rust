// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of an OpenID Connect (OIDC) identity source for handling identity (ID) token claims. Contains the claim that you want to identify as the principal in an authorization request, and the values of the <code>aud</code> claim, or audiences, that you want to accept.</p>
/// <p>This data type is part of a <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_OpenIdConnectTokenSelectionItem.html">OpenIdConnectTokenSelectionItem</a> structure, which is a parameter of <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_ListIdentitySources.html">ListIdentitySources</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct OpenIdConnectIdentityTokenConfigurationItem {
    /// <p>The claim that determines the principal in OIDC access tokens. For example, <code>sub</code>.</p>
    pub principal_id_claim: ::std::string::String,
    /// <p>The ID token audience, or client ID, claim values that you want to accept in your policy store from an OIDC identity provider. For example, <code>1example23456789, 2example10111213</code>.</p>
    pub client_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl OpenIdConnectIdentityTokenConfigurationItem {
    /// <p>The claim that determines the principal in OIDC access tokens. For example, <code>sub</code>.</p>
    pub fn principal_id_claim(&self) -> &str {
        use std::ops::Deref;
        self.principal_id_claim.deref()
    }
    /// <p>The ID token audience, or client ID, claim values that you want to accept in your policy store from an OIDC identity provider. For example, <code>1example23456789, 2example10111213</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.client_ids.is_none()`.
    pub fn client_ids(&self) -> &[::std::string::String] {
        self.client_ids.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for OpenIdConnectIdentityTokenConfigurationItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("OpenIdConnectIdentityTokenConfigurationItem");
        formatter.field("principal_id_claim", &"*** Sensitive Data Redacted ***");
        formatter.field("client_ids", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl OpenIdConnectIdentityTokenConfigurationItem {
    /// Creates a new builder-style object to manufacture [`OpenIdConnectIdentityTokenConfigurationItem`](crate::types::OpenIdConnectIdentityTokenConfigurationItem).
    pub fn builder() -> crate::types::builders::OpenIdConnectIdentityTokenConfigurationItemBuilder {
        crate::types::builders::OpenIdConnectIdentityTokenConfigurationItemBuilder::default()
    }
}

/// A builder for [`OpenIdConnectIdentityTokenConfigurationItem`](crate::types::OpenIdConnectIdentityTokenConfigurationItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct OpenIdConnectIdentityTokenConfigurationItemBuilder {
    pub(crate) principal_id_claim: ::std::option::Option<::std::string::String>,
    pub(crate) client_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl OpenIdConnectIdentityTokenConfigurationItemBuilder {
    /// <p>The claim that determines the principal in OIDC access tokens. For example, <code>sub</code>.</p>
    pub fn principal_id_claim(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal_id_claim = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The claim that determines the principal in OIDC access tokens. For example, <code>sub</code>.</p>
    pub fn set_principal_id_claim(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal_id_claim = input;
        self
    }
    /// <p>The claim that determines the principal in OIDC access tokens. For example, <code>sub</code>.</p>
    pub fn get_principal_id_claim(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal_id_claim
    }
    /// Appends an item to `client_ids`.
    ///
    /// To override the contents of this collection use [`set_client_ids`](Self::set_client_ids).
    ///
    /// <p>The ID token audience, or client ID, claim values that you want to accept in your policy store from an OIDC identity provider. For example, <code>1example23456789, 2example10111213</code>.</p>
    pub fn client_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.client_ids.unwrap_or_default();
        v.push(input.into());
        self.client_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The ID token audience, or client ID, claim values that you want to accept in your policy store from an OIDC identity provider. For example, <code>1example23456789, 2example10111213</code>.</p>
    pub fn set_client_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.client_ids = input;
        self
    }
    /// <p>The ID token audience, or client ID, claim values that you want to accept in your policy store from an OIDC identity provider. For example, <code>1example23456789, 2example10111213</code>.</p>
    pub fn get_client_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.client_ids
    }
    /// Consumes the builder and constructs a [`OpenIdConnectIdentityTokenConfigurationItem`](crate::types::OpenIdConnectIdentityTokenConfigurationItem).
    pub fn build(self) -> crate::types::OpenIdConnectIdentityTokenConfigurationItem {
        crate::types::OpenIdConnectIdentityTokenConfigurationItem {
            principal_id_claim: self.principal_id_claim.unwrap_or_else(|| "sub".to_owned()),
            client_ids: self.client_ids,
        }
    }
}
impl ::std::fmt::Debug for OpenIdConnectIdentityTokenConfigurationItemBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("OpenIdConnectIdentityTokenConfigurationItemBuilder");
        formatter.field("principal_id_claim", &"*** Sensitive Data Redacted ***");
        formatter.field("client_ids", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
