// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for an identity source that represents a connection to an Amazon Cognito user pool used as an identity provider for Verified Permissions.</p>
/// <p>This data type is used as a field that is part of the <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_ConfigurationItem.html">ConfigurationItem</a> structure that is part of the response to <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_ListIdentitySources.html">ListIdentitySources</a>.</p>
/// <p>Example:<code>"CognitoUserPoolConfiguration":{"UserPoolArn":"arn:aws:cognito-idp:us-east-1:123456789012:userpool/us-east-1_1a2b3c4d5","ClientIds": \["a1b2c3d4e5f6g7h8i9j0kalbmc"\],"groupConfiguration": {"groupEntityType": "MyCorp::Group"}}</code></p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CognitoUserPoolConfigurationItem {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of the Amazon Cognito user pool that contains the identities to be authorized.</p>
    /// <p>Example: <code>"userPoolArn": "arn:aws:cognito-idp:us-east-1:123456789012:userpool/us-east-1_1a2b3c4d5"</code></p>
    pub user_pool_arn: ::std::string::String,
    /// <p>The unique application client IDs that are associated with the specified Amazon Cognito user pool.</p>
    /// <p>Example: <code>"clientIds": \["&amp;ExampleCogClientId;"\]</code></p>
    pub client_ids: ::std::vec::Vec<::std::string::String>,
    /// <p>The OpenID Connect (OIDC) <code>issuer</code> ID of the Amazon Cognito user pool that contains the identities to be authorized.</p>
    /// <p>Example: <code>"issuer": "https://cognito-idp.us-east-1.amazonaws.com/us-east-1_1a2b3c4d5"</code></p>
    pub issuer: ::std::string::String,
    /// <p>The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source.</p>
    pub group_configuration: ::std::option::Option<crate::types::CognitoGroupConfigurationItem>,
}
impl CognitoUserPoolConfigurationItem {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of the Amazon Cognito user pool that contains the identities to be authorized.</p>
    /// <p>Example: <code>"userPoolArn": "arn:aws:cognito-idp:us-east-1:123456789012:userpool/us-east-1_1a2b3c4d5"</code></p>
    pub fn user_pool_arn(&self) -> &str {
        use std::ops::Deref;
        self.user_pool_arn.deref()
    }
    /// <p>The unique application client IDs that are associated with the specified Amazon Cognito user pool.</p>
    /// <p>Example: <code>"clientIds": \["&amp;ExampleCogClientId;"\]</code></p>
    pub fn client_ids(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.client_ids.deref()
    }
    /// <p>The OpenID Connect (OIDC) <code>issuer</code> ID of the Amazon Cognito user pool that contains the identities to be authorized.</p>
    /// <p>Example: <code>"issuer": "https://cognito-idp.us-east-1.amazonaws.com/us-east-1_1a2b3c4d5"</code></p>
    pub fn issuer(&self) -> &str {
        use std::ops::Deref;
        self.issuer.deref()
    }
    /// <p>The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source.</p>
    pub fn group_configuration(&self) -> ::std::option::Option<&crate::types::CognitoGroupConfigurationItem> {
        self.group_configuration.as_ref()
    }
}
impl CognitoUserPoolConfigurationItem {
    /// Creates a new builder-style object to manufacture [`CognitoUserPoolConfigurationItem`](crate::types::CognitoUserPoolConfigurationItem).
    pub fn builder() -> crate::types::builders::CognitoUserPoolConfigurationItemBuilder {
        crate::types::builders::CognitoUserPoolConfigurationItemBuilder::default()
    }
}

/// A builder for [`CognitoUserPoolConfigurationItem`](crate::types::CognitoUserPoolConfigurationItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CognitoUserPoolConfigurationItemBuilder {
    pub(crate) user_pool_arn: ::std::option::Option<::std::string::String>,
    pub(crate) client_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) issuer: ::std::option::Option<::std::string::String>,
    pub(crate) group_configuration: ::std::option::Option<crate::types::CognitoGroupConfigurationItem>,
}
impl CognitoUserPoolConfigurationItemBuilder {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of the Amazon Cognito user pool that contains the identities to be authorized.</p>
    /// <p>Example: <code>"userPoolArn": "arn:aws:cognito-idp:us-east-1:123456789012:userpool/us-east-1_1a2b3c4d5"</code></p>
    /// This field is required.
    pub fn user_pool_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_pool_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of the Amazon Cognito user pool that contains the identities to be authorized.</p>
    /// <p>Example: <code>"userPoolArn": "arn:aws:cognito-idp:us-east-1:123456789012:userpool/us-east-1_1a2b3c4d5"</code></p>
    pub fn set_user_pool_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_pool_arn = input;
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of the Amazon Cognito user pool that contains the identities to be authorized.</p>
    /// <p>Example: <code>"userPoolArn": "arn:aws:cognito-idp:us-east-1:123456789012:userpool/us-east-1_1a2b3c4d5"</code></p>
    pub fn get_user_pool_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_pool_arn
    }
    /// Appends an item to `client_ids`.
    ///
    /// To override the contents of this collection use [`set_client_ids`](Self::set_client_ids).
    ///
    /// <p>The unique application client IDs that are associated with the specified Amazon Cognito user pool.</p>
    /// <p>Example: <code>"clientIds": \["&amp;ExampleCogClientId;"\]</code></p>
    pub fn client_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.client_ids.unwrap_or_default();
        v.push(input.into());
        self.client_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The unique application client IDs that are associated with the specified Amazon Cognito user pool.</p>
    /// <p>Example: <code>"clientIds": \["&amp;ExampleCogClientId;"\]</code></p>
    pub fn set_client_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.client_ids = input;
        self
    }
    /// <p>The unique application client IDs that are associated with the specified Amazon Cognito user pool.</p>
    /// <p>Example: <code>"clientIds": \["&amp;ExampleCogClientId;"\]</code></p>
    pub fn get_client_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.client_ids
    }
    /// <p>The OpenID Connect (OIDC) <code>issuer</code> ID of the Amazon Cognito user pool that contains the identities to be authorized.</p>
    /// <p>Example: <code>"issuer": "https://cognito-idp.us-east-1.amazonaws.com/us-east-1_1a2b3c4d5"</code></p>
    /// This field is required.
    pub fn issuer(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.issuer = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The OpenID Connect (OIDC) <code>issuer</code> ID of the Amazon Cognito user pool that contains the identities to be authorized.</p>
    /// <p>Example: <code>"issuer": "https://cognito-idp.us-east-1.amazonaws.com/us-east-1_1a2b3c4d5"</code></p>
    pub fn set_issuer(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.issuer = input;
        self
    }
    /// <p>The OpenID Connect (OIDC) <code>issuer</code> ID of the Amazon Cognito user pool that contains the identities to be authorized.</p>
    /// <p>Example: <code>"issuer": "https://cognito-idp.us-east-1.amazonaws.com/us-east-1_1a2b3c4d5"</code></p>
    pub fn get_issuer(&self) -> &::std::option::Option<::std::string::String> {
        &self.issuer
    }
    /// <p>The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source.</p>
    pub fn group_configuration(mut self, input: crate::types::CognitoGroupConfigurationItem) -> Self {
        self.group_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source.</p>
    pub fn set_group_configuration(mut self, input: ::std::option::Option<crate::types::CognitoGroupConfigurationItem>) -> Self {
        self.group_configuration = input;
        self
    }
    /// <p>The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source.</p>
    pub fn get_group_configuration(&self) -> &::std::option::Option<crate::types::CognitoGroupConfigurationItem> {
        &self.group_configuration
    }
    /// Consumes the builder and constructs a [`CognitoUserPoolConfigurationItem`](crate::types::CognitoUserPoolConfigurationItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`user_pool_arn`](crate::types::builders::CognitoUserPoolConfigurationItemBuilder::user_pool_arn)
    /// - [`client_ids`](crate::types::builders::CognitoUserPoolConfigurationItemBuilder::client_ids)
    /// - [`issuer`](crate::types::builders::CognitoUserPoolConfigurationItemBuilder::issuer)
    pub fn build(self) -> ::std::result::Result<crate::types::CognitoUserPoolConfigurationItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CognitoUserPoolConfigurationItem {
            user_pool_arn: self.user_pool_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "user_pool_arn",
                    "user_pool_arn was not specified but it is required when building CognitoUserPoolConfigurationItem",
                )
            })?,
            client_ids: self.client_ids.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "client_ids",
                    "client_ids was not specified but it is required when building CognitoUserPoolConfigurationItem",
                )
            })?,
            issuer: self.issuer.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "issuer",
                    "issuer was not specified but it is required when building CognitoUserPoolConfigurationItem",
                )
            })?,
            group_configuration: self.group_configuration,
        })
    }
}
