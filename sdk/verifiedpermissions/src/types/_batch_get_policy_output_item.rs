// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a policy returned from a <code>BatchGetPolicy</code> API request.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetPolicyOutputItem {
    /// <p>The identifier of the policy store where the policy you want information about is stored.</p>
    pub policy_store_id: ::std::string::String,
    /// <p>The identifier of the policy you want information about.</p>
    pub policy_id: ::std::string::String,
    /// <p>The type of the policy. This is one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>STATIC</code></p></li>
    /// <li>
    /// <p><code>TEMPLATE_LINKED</code></p></li>
    /// </ul>
    pub policy_type: crate::types::PolicyType,
    /// <p>The policy definition of an item in the list of policies returned.</p>
    pub definition: ::std::option::Option<crate::types::PolicyDefinitionDetail>,
    /// <p>The date and time the policy was created.</p>
    pub created_date: ::aws_smithy_types::DateTime,
    /// <p>The date and time the policy was most recently updated.</p>
    pub last_updated_date: ::aws_smithy_types::DateTime,
}
impl BatchGetPolicyOutputItem {
    /// <p>The identifier of the policy store where the policy you want information about is stored.</p>
    pub fn policy_store_id(&self) -> &str {
        use std::ops::Deref;
        self.policy_store_id.deref()
    }
    /// <p>The identifier of the policy you want information about.</p>
    pub fn policy_id(&self) -> &str {
        use std::ops::Deref;
        self.policy_id.deref()
    }
    /// <p>The type of the policy. This is one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>STATIC</code></p></li>
    /// <li>
    /// <p><code>TEMPLATE_LINKED</code></p></li>
    /// </ul>
    pub fn policy_type(&self) -> &crate::types::PolicyType {
        &self.policy_type
    }
    /// <p>The policy definition of an item in the list of policies returned.</p>
    pub fn definition(&self) -> ::std::option::Option<&crate::types::PolicyDefinitionDetail> {
        self.definition.as_ref()
    }
    /// <p>The date and time the policy was created.</p>
    pub fn created_date(&self) -> &::aws_smithy_types::DateTime {
        &self.created_date
    }
    /// <p>The date and time the policy was most recently updated.</p>
    pub fn last_updated_date(&self) -> &::aws_smithy_types::DateTime {
        &self.last_updated_date
    }
}
impl BatchGetPolicyOutputItem {
    /// Creates a new builder-style object to manufacture [`BatchGetPolicyOutputItem`](crate::types::BatchGetPolicyOutputItem).
    pub fn builder() -> crate::types::builders::BatchGetPolicyOutputItemBuilder {
        crate::types::builders::BatchGetPolicyOutputItemBuilder::default()
    }
}

/// A builder for [`BatchGetPolicyOutputItem`](crate::types::BatchGetPolicyOutputItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchGetPolicyOutputItemBuilder {
    pub(crate) policy_store_id: ::std::option::Option<::std::string::String>,
    pub(crate) policy_id: ::std::option::Option<::std::string::String>,
    pub(crate) policy_type: ::std::option::Option<crate::types::PolicyType>,
    pub(crate) definition: ::std::option::Option<crate::types::PolicyDefinitionDetail>,
    pub(crate) created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl BatchGetPolicyOutputItemBuilder {
    /// <p>The identifier of the policy store where the policy you want information about is stored.</p>
    /// This field is required.
    pub fn policy_store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_store_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the policy store where the policy you want information about is stored.</p>
    pub fn set_policy_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_store_id = input;
        self
    }
    /// <p>The identifier of the policy store where the policy you want information about is stored.</p>
    pub fn get_policy_store_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_store_id
    }
    /// <p>The identifier of the policy you want information about.</p>
    /// This field is required.
    pub fn policy_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the policy you want information about.</p>
    pub fn set_policy_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_id = input;
        self
    }
    /// <p>The identifier of the policy you want information about.</p>
    pub fn get_policy_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_id
    }
    /// <p>The type of the policy. This is one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>STATIC</code></p></li>
    /// <li>
    /// <p><code>TEMPLATE_LINKED</code></p></li>
    /// </ul>
    /// This field is required.
    pub fn policy_type(mut self, input: crate::types::PolicyType) -> Self {
        self.policy_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the policy. This is one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>STATIC</code></p></li>
    /// <li>
    /// <p><code>TEMPLATE_LINKED</code></p></li>
    /// </ul>
    pub fn set_policy_type(mut self, input: ::std::option::Option<crate::types::PolicyType>) -> Self {
        self.policy_type = input;
        self
    }
    /// <p>The type of the policy. This is one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>STATIC</code></p></li>
    /// <li>
    /// <p><code>TEMPLATE_LINKED</code></p></li>
    /// </ul>
    pub fn get_policy_type(&self) -> &::std::option::Option<crate::types::PolicyType> {
        &self.policy_type
    }
    /// <p>The policy definition of an item in the list of policies returned.</p>
    /// This field is required.
    pub fn definition(mut self, input: crate::types::PolicyDefinitionDetail) -> Self {
        self.definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The policy definition of an item in the list of policies returned.</p>
    pub fn set_definition(mut self, input: ::std::option::Option<crate::types::PolicyDefinitionDetail>) -> Self {
        self.definition = input;
        self
    }
    /// <p>The policy definition of an item in the list of policies returned.</p>
    pub fn get_definition(&self) -> &::std::option::Option<crate::types::PolicyDefinitionDetail> {
        &self.definition
    }
    /// <p>The date and time the policy was created.</p>
    /// This field is required.
    pub fn created_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the policy was created.</p>
    pub fn set_created_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_date = input;
        self
    }
    /// <p>The date and time the policy was created.</p>
    pub fn get_created_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_date
    }
    /// <p>The date and time the policy was most recently updated.</p>
    /// This field is required.
    pub fn last_updated_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the policy was most recently updated.</p>
    pub fn set_last_updated_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_date = input;
        self
    }
    /// <p>The date and time the policy was most recently updated.</p>
    pub fn get_last_updated_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_date
    }
    /// Consumes the builder and constructs a [`BatchGetPolicyOutputItem`](crate::types::BatchGetPolicyOutputItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`policy_store_id`](crate::types::builders::BatchGetPolicyOutputItemBuilder::policy_store_id)
    /// - [`policy_id`](crate::types::builders::BatchGetPolicyOutputItemBuilder::policy_id)
    /// - [`policy_type`](crate::types::builders::BatchGetPolicyOutputItemBuilder::policy_type)
    /// - [`created_date`](crate::types::builders::BatchGetPolicyOutputItemBuilder::created_date)
    /// - [`last_updated_date`](crate::types::builders::BatchGetPolicyOutputItemBuilder::last_updated_date)
    pub fn build(self) -> ::std::result::Result<crate::types::BatchGetPolicyOutputItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BatchGetPolicyOutputItem {
            policy_store_id: self.policy_store_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "policy_store_id",
                    "policy_store_id was not specified but it is required when building BatchGetPolicyOutputItem",
                )
            })?,
            policy_id: self.policy_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "policy_id",
                    "policy_id was not specified but it is required when building BatchGetPolicyOutputItem",
                )
            })?,
            policy_type: self.policy_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "policy_type",
                    "policy_type was not specified but it is required when building BatchGetPolicyOutputItem",
                )
            })?,
            definition: self.definition,
            created_date: self.created_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_date",
                    "created_date was not specified but it is required when building BatchGetPolicyOutputItem",
                )
            })?,
            last_updated_date: self.last_updated_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_updated_date",
                    "last_updated_date was not specified but it is required when building BatchGetPolicyOutputItem",
                )
            })?,
        })
    }
}
