// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The user group entities from an Amazon Cognito user pool identity source.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateCognitoGroupConfiguration {
    /// <p>The name of the schema entity type that's mapped to the user pool group. Defaults to <code>AWS::CognitoGroup</code>.</p>
    pub group_entity_type: ::std::string::String,
}
impl UpdateCognitoGroupConfiguration {
    /// <p>The name of the schema entity type that's mapped to the user pool group. Defaults to <code>AWS::CognitoGroup</code>.</p>
    pub fn group_entity_type(&self) -> &str {
        use std::ops::Deref;
        self.group_entity_type.deref()
    }
}
impl ::std::fmt::Debug for UpdateCognitoGroupConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateCognitoGroupConfiguration");
        formatter.field("group_entity_type", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl UpdateCognitoGroupConfiguration {
    /// Creates a new builder-style object to manufacture [`UpdateCognitoGroupConfiguration`](crate::types::UpdateCognitoGroupConfiguration).
    pub fn builder() -> crate::types::builders::UpdateCognitoGroupConfigurationBuilder {
        crate::types::builders::UpdateCognitoGroupConfigurationBuilder::default()
    }
}

/// A builder for [`UpdateCognitoGroupConfiguration`](crate::types::UpdateCognitoGroupConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateCognitoGroupConfigurationBuilder {
    pub(crate) group_entity_type: ::std::option::Option<::std::string::String>,
}
impl UpdateCognitoGroupConfigurationBuilder {
    /// <p>The name of the schema entity type that's mapped to the user pool group. Defaults to <code>AWS::CognitoGroup</code>.</p>
    /// This field is required.
    pub fn group_entity_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_entity_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the schema entity type that's mapped to the user pool group. Defaults to <code>AWS::CognitoGroup</code>.</p>
    pub fn set_group_entity_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_entity_type = input;
        self
    }
    /// <p>The name of the schema entity type that's mapped to the user pool group. Defaults to <code>AWS::CognitoGroup</code>.</p>
    pub fn get_group_entity_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_entity_type
    }
    /// Consumes the builder and constructs a [`UpdateCognitoGroupConfiguration`](crate::types::UpdateCognitoGroupConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`group_entity_type`](crate::types::builders::UpdateCognitoGroupConfigurationBuilder::group_entity_type)
    pub fn build(self) -> ::std::result::Result<crate::types::UpdateCognitoGroupConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UpdateCognitoGroupConfiguration {
            group_entity_type: self.group_entity_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "group_entity_type",
                    "group_entity_type was not specified but it is required when building UpdateCognitoGroupConfiguration",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for UpdateCognitoGroupConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateCognitoGroupConfigurationBuilder");
        formatter.field("group_entity_type", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
