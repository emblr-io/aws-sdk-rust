// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The token type that you want to process from your OIDC identity provider. Your policy store can process either identity (ID) or access tokens from a given OIDC identity source.</p>
/// <p>This data type is part of a <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdateOpenIdConnectConfiguration.html">UpdateOpenIdConnectConfiguration</a> structure, which is a parameter to <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdateIdentitySource.html">UpdateIdentitySource</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum UpdateOpenIdConnectTokenSelection {
    /// <p>The OIDC configuration for processing access tokens. Contains allowed audience claims, for example <code>https://auth.example.com</code>, and the claim that you want to map to the principal, for example <code>sub</code>.</p>
    AccessTokenOnly(crate::types::UpdateOpenIdConnectAccessTokenConfiguration),
    /// <p>The OIDC configuration for processing identity (ID) tokens. Contains allowed client ID claims, for example <code>1example23456789</code>, and the claim that you want to map to the principal, for example <code>sub</code>.</p>
    IdentityTokenOnly(crate::types::UpdateOpenIdConnectIdentityTokenConfiguration),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl UpdateOpenIdConnectTokenSelection {
    /// Tries to convert the enum instance into [`AccessTokenOnly`](crate::types::UpdateOpenIdConnectTokenSelection::AccessTokenOnly), extracting the inner [`UpdateOpenIdConnectAccessTokenConfiguration`](crate::types::UpdateOpenIdConnectAccessTokenConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_access_token_only(&self) -> ::std::result::Result<&crate::types::UpdateOpenIdConnectAccessTokenConfiguration, &Self> {
        if let UpdateOpenIdConnectTokenSelection::AccessTokenOnly(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AccessTokenOnly`](crate::types::UpdateOpenIdConnectTokenSelection::AccessTokenOnly).
    pub fn is_access_token_only(&self) -> bool {
        self.as_access_token_only().is_ok()
    }
    /// Tries to convert the enum instance into [`IdentityTokenOnly`](crate::types::UpdateOpenIdConnectTokenSelection::IdentityTokenOnly), extracting the inner [`UpdateOpenIdConnectIdentityTokenConfiguration`](crate::types::UpdateOpenIdConnectIdentityTokenConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_identity_token_only(&self) -> ::std::result::Result<&crate::types::UpdateOpenIdConnectIdentityTokenConfiguration, &Self> {
        if let UpdateOpenIdConnectTokenSelection::IdentityTokenOnly(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`IdentityTokenOnly`](crate::types::UpdateOpenIdConnectTokenSelection::IdentityTokenOnly).
    pub fn is_identity_token_only(&self) -> bool {
        self.as_identity_token_only().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
