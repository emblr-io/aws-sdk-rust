// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains an update to replace the configuration in an existing identity source.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum UpdateConfiguration {
    /// <p>Contains configuration details of a Amazon Cognito user pool.</p>
    CognitoUserPoolConfiguration(crate::types::UpdateCognitoUserPoolConfiguration),
    /// <p>Contains configuration details of an OpenID Connect (OIDC) identity provider, or identity source, that Verified Permissions can use to generate entities from authenticated identities. It specifies the issuer URL, token type that you want to use, and policy store entity details.</p>
    OpenIdConnectConfiguration(crate::types::UpdateOpenIdConnectConfiguration),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl UpdateConfiguration {
    /// Tries to convert the enum instance into [`CognitoUserPoolConfiguration`](crate::types::UpdateConfiguration::CognitoUserPoolConfiguration), extracting the inner [`UpdateCognitoUserPoolConfiguration`](crate::types::UpdateCognitoUserPoolConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_cognito_user_pool_configuration(&self) -> ::std::result::Result<&crate::types::UpdateCognitoUserPoolConfiguration, &Self> {
        if let UpdateConfiguration::CognitoUserPoolConfiguration(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`CognitoUserPoolConfiguration`](crate::types::UpdateConfiguration::CognitoUserPoolConfiguration).
    pub fn is_cognito_user_pool_configuration(&self) -> bool {
        self.as_cognito_user_pool_configuration().is_ok()
    }
    /// Tries to convert the enum instance into [`OpenIdConnectConfiguration`](crate::types::UpdateConfiguration::OpenIdConnectConfiguration), extracting the inner [`UpdateOpenIdConnectConfiguration`](crate::types::UpdateOpenIdConnectConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_open_id_connect_configuration(&self) -> ::std::result::Result<&crate::types::UpdateOpenIdConnectConfiguration, &Self> {
        if let UpdateConfiguration::OpenIdConnectConfiguration(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`OpenIdConnectConfiguration`](crate::types::UpdateConfiguration::OpenIdConnectConfiguration).
    pub fn is_open_id_connect_configuration(&self) -> bool {
        self.as_open_id_connect_configuration().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
