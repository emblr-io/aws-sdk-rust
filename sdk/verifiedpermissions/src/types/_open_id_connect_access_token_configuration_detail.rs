// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of an OpenID Connect (OIDC) identity source for handling access token claims. Contains the claim that you want to identify as the principal in an authorization request, and the values of the <code>aud</code> claim, or audiences, that you want to accept.</p>
/// <p>This data type is part of a <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_OpenIdConnectTokenSelectionDetail.html">OpenIdConnectTokenSelectionDetail</a> structure, which is a parameter of <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_GetIdentitySource.html">GetIdentitySource</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct OpenIdConnectAccessTokenConfigurationDetail {
    /// <p>The claim that determines the principal in OIDC access tokens. For example, <code>sub</code>.</p>
    pub principal_id_claim: ::std::string::String,
    /// <p>The access token <code>aud</code> claim values that you want to accept in your policy store. For example, <code>https://myapp.example.com, https://myapp2.example.com</code>.</p>
    pub audiences: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl OpenIdConnectAccessTokenConfigurationDetail {
    /// <p>The claim that determines the principal in OIDC access tokens. For example, <code>sub</code>.</p>
    pub fn principal_id_claim(&self) -> &str {
        use std::ops::Deref;
        self.principal_id_claim.deref()
    }
    /// <p>The access token <code>aud</code> claim values that you want to accept in your policy store. For example, <code>https://myapp.example.com, https://myapp2.example.com</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.audiences.is_none()`.
    pub fn audiences(&self) -> &[::std::string::String] {
        self.audiences.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for OpenIdConnectAccessTokenConfigurationDetail {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("OpenIdConnectAccessTokenConfigurationDetail");
        formatter.field("principal_id_claim", &"*** Sensitive Data Redacted ***");
        formatter.field("audiences", &self.audiences);
        formatter.finish()
    }
}
impl OpenIdConnectAccessTokenConfigurationDetail {
    /// Creates a new builder-style object to manufacture [`OpenIdConnectAccessTokenConfigurationDetail`](crate::types::OpenIdConnectAccessTokenConfigurationDetail).
    pub fn builder() -> crate::types::builders::OpenIdConnectAccessTokenConfigurationDetailBuilder {
        crate::types::builders::OpenIdConnectAccessTokenConfigurationDetailBuilder::default()
    }
}

/// A builder for [`OpenIdConnectAccessTokenConfigurationDetail`](crate::types::OpenIdConnectAccessTokenConfigurationDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct OpenIdConnectAccessTokenConfigurationDetailBuilder {
    pub(crate) principal_id_claim: ::std::option::Option<::std::string::String>,
    pub(crate) audiences: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl OpenIdConnectAccessTokenConfigurationDetailBuilder {
    /// <p>The claim that determines the principal in OIDC access tokens. For example, <code>sub</code>.</p>
    pub fn principal_id_claim(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal_id_claim = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The claim that determines the principal in OIDC access tokens. For example, <code>sub</code>.</p>
    pub fn set_principal_id_claim(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal_id_claim = input;
        self
    }
    /// <p>The claim that determines the principal in OIDC access tokens. For example, <code>sub</code>.</p>
    pub fn get_principal_id_claim(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal_id_claim
    }
    /// Appends an item to `audiences`.
    ///
    /// To override the contents of this collection use [`set_audiences`](Self::set_audiences).
    ///
    /// <p>The access token <code>aud</code> claim values that you want to accept in your policy store. For example, <code>https://myapp.example.com, https://myapp2.example.com</code>.</p>
    pub fn audiences(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.audiences.unwrap_or_default();
        v.push(input.into());
        self.audiences = ::std::option::Option::Some(v);
        self
    }
    /// <p>The access token <code>aud</code> claim values that you want to accept in your policy store. For example, <code>https://myapp.example.com, https://myapp2.example.com</code>.</p>
    pub fn set_audiences(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.audiences = input;
        self
    }
    /// <p>The access token <code>aud</code> claim values that you want to accept in your policy store. For example, <code>https://myapp.example.com, https://myapp2.example.com</code>.</p>
    pub fn get_audiences(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.audiences
    }
    /// Consumes the builder and constructs a [`OpenIdConnectAccessTokenConfigurationDetail`](crate::types::OpenIdConnectAccessTokenConfigurationDetail).
    pub fn build(self) -> crate::types::OpenIdConnectAccessTokenConfigurationDetail {
        crate::types::OpenIdConnectAccessTokenConfigurationDetail {
            principal_id_claim: self.principal_id_claim.unwrap_or_else(|| "sub".to_owned()),
            audiences: self.audiences,
        }
    }
}
impl ::std::fmt::Debug for OpenIdConnectAccessTokenConfigurationDetailBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("OpenIdConnectAccessTokenConfigurationDetailBuilder");
        formatter.field("principal_id_claim", &"*** Sensitive Data Redacted ***");
        formatter.field("audiences", &self.audiences);
        formatter.finish()
    }
}
