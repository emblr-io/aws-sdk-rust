// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source.</p>
/// <p>This data type is part of an <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_CognitoUserPoolConfigurationDetail.html">CognitoUserPoolConfigurationItem</a> structure and is a response parameter to <a href="http://forums.aws.amazon.com/verifiedpermissions/latest/apireference/API_ListIdentitySources.html">ListIdentitySources</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CognitoGroupConfigurationItem {
    /// <p>The name of the schema entity type that's mapped to the user pool group. Defaults to <code>AWS::CognitoGroup</code>.</p>
    pub group_entity_type: ::std::option::Option<::std::string::String>,
}
impl CognitoGroupConfigurationItem {
    /// <p>The name of the schema entity type that's mapped to the user pool group. Defaults to <code>AWS::CognitoGroup</code>.</p>
    pub fn group_entity_type(&self) -> ::std::option::Option<&str> {
        self.group_entity_type.as_deref()
    }
}
impl ::std::fmt::Debug for CognitoGroupConfigurationItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CognitoGroupConfigurationItem");
        formatter.field("group_entity_type", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CognitoGroupConfigurationItem {
    /// Creates a new builder-style object to manufacture [`CognitoGroupConfigurationItem`](crate::types::CognitoGroupConfigurationItem).
    pub fn builder() -> crate::types::builders::CognitoGroupConfigurationItemBuilder {
        crate::types::builders::CognitoGroupConfigurationItemBuilder::default()
    }
}

/// A builder for [`CognitoGroupConfigurationItem`](crate::types::CognitoGroupConfigurationItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CognitoGroupConfigurationItemBuilder {
    pub(crate) group_entity_type: ::std::option::Option<::std::string::String>,
}
impl CognitoGroupConfigurationItemBuilder {
    /// <p>The name of the schema entity type that's mapped to the user pool group. Defaults to <code>AWS::CognitoGroup</code>.</p>
    pub fn group_entity_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_entity_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the schema entity type that's mapped to the user pool group. Defaults to <code>AWS::CognitoGroup</code>.</p>
    pub fn set_group_entity_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_entity_type = input;
        self
    }
    /// <p>The name of the schema entity type that's mapped to the user pool group. Defaults to <code>AWS::CognitoGroup</code>.</p>
    pub fn get_group_entity_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_entity_type
    }
    /// Consumes the builder and constructs a [`CognitoGroupConfigurationItem`](crate::types::CognitoGroupConfigurationItem).
    pub fn build(self) -> crate::types::CognitoGroupConfigurationItem {
        crate::types::CognitoGroupConfigurationItem {
            group_entity_type: self.group_entity_type,
        }
    }
}
impl ::std::fmt::Debug for CognitoGroupConfigurationItemBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CognitoGroupConfigurationItemBuilder");
        formatter.field("group_entity_type", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
