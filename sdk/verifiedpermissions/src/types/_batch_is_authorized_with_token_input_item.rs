// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An authorization request that you include in a <code>BatchIsAuthorizedWithToken</code> API request.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchIsAuthorizedWithTokenInputItem {
    /// <p>Specifies the requested action to be authorized. For example, <code>PhotoFlash::ReadPhoto</code>.</p>
    pub action: ::std::option::Option<crate::types::ActionIdentifier>,
    /// <p>Specifies the resource that you want an authorization decision for. For example, <code>PhotoFlash::Photo</code>.</p>
    pub resource: ::std::option::Option<crate::types::EntityIdentifier>,
    /// <p>Specifies additional context that can be used to make more granular authorization decisions.</p>
    pub context: ::std::option::Option<crate::types::ContextDefinition>,
}
impl BatchIsAuthorizedWithTokenInputItem {
    /// <p>Specifies the requested action to be authorized. For example, <code>PhotoFlash::ReadPhoto</code>.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::ActionIdentifier> {
        self.action.as_ref()
    }
    /// <p>Specifies the resource that you want an authorization decision for. For example, <code>PhotoFlash::Photo</code>.</p>
    pub fn resource(&self) -> ::std::option::Option<&crate::types::EntityIdentifier> {
        self.resource.as_ref()
    }
    /// <p>Specifies additional context that can be used to make more granular authorization decisions.</p>
    pub fn context(&self) -> ::std::option::Option<&crate::types::ContextDefinition> {
        self.context.as_ref()
    }
}
impl BatchIsAuthorizedWithTokenInputItem {
    /// Creates a new builder-style object to manufacture [`BatchIsAuthorizedWithTokenInputItem`](crate::types::BatchIsAuthorizedWithTokenInputItem).
    pub fn builder() -> crate::types::builders::BatchIsAuthorizedWithTokenInputItemBuilder {
        crate::types::builders::BatchIsAuthorizedWithTokenInputItemBuilder::default()
    }
}

/// A builder for [`BatchIsAuthorizedWithTokenInputItem`](crate::types::BatchIsAuthorizedWithTokenInputItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchIsAuthorizedWithTokenInputItemBuilder {
    pub(crate) action: ::std::option::Option<crate::types::ActionIdentifier>,
    pub(crate) resource: ::std::option::Option<crate::types::EntityIdentifier>,
    pub(crate) context: ::std::option::Option<crate::types::ContextDefinition>,
}
impl BatchIsAuthorizedWithTokenInputItemBuilder {
    /// <p>Specifies the requested action to be authorized. For example, <code>PhotoFlash::ReadPhoto</code>.</p>
    pub fn action(mut self, input: crate::types::ActionIdentifier) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the requested action to be authorized. For example, <code>PhotoFlash::ReadPhoto</code>.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::ActionIdentifier>) -> Self {
        self.action = input;
        self
    }
    /// <p>Specifies the requested action to be authorized. For example, <code>PhotoFlash::ReadPhoto</code>.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::ActionIdentifier> {
        &self.action
    }
    /// <p>Specifies the resource that you want an authorization decision for. For example, <code>PhotoFlash::Photo</code>.</p>
    pub fn resource(mut self, input: crate::types::EntityIdentifier) -> Self {
        self.resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the resource that you want an authorization decision for. For example, <code>PhotoFlash::Photo</code>.</p>
    pub fn set_resource(mut self, input: ::std::option::Option<crate::types::EntityIdentifier>) -> Self {
        self.resource = input;
        self
    }
    /// <p>Specifies the resource that you want an authorization decision for. For example, <code>PhotoFlash::Photo</code>.</p>
    pub fn get_resource(&self) -> &::std::option::Option<crate::types::EntityIdentifier> {
        &self.resource
    }
    /// <p>Specifies additional context that can be used to make more granular authorization decisions.</p>
    pub fn context(mut self, input: crate::types::ContextDefinition) -> Self {
        self.context = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies additional context that can be used to make more granular authorization decisions.</p>
    pub fn set_context(mut self, input: ::std::option::Option<crate::types::ContextDefinition>) -> Self {
        self.context = input;
        self
    }
    /// <p>Specifies additional context that can be used to make more granular authorization decisions.</p>
    pub fn get_context(&self) -> &::std::option::Option<crate::types::ContextDefinition> {
        &self.context
    }
    /// Consumes the builder and constructs a [`BatchIsAuthorizedWithTokenInputItem`](crate::types::BatchIsAuthorizedWithTokenInputItem).
    pub fn build(self) -> crate::types::BatchIsAuthorizedWithTokenInputItem {
        crate::types::BatchIsAuthorizedWithTokenInputItem {
            action: self.action,
            resource: self.resource,
            context: self.context,
        }
    }
}
