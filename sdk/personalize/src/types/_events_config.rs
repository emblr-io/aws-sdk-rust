// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration of events, which are used in solution creation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EventsConfig {
    /// <p>A list of event parameters, which includes event types and their event value thresholds and weights.</p>
    pub event_parameters_list: ::std::option::Option<::std::vec::Vec<crate::types::EventParameters>>,
}
impl EventsConfig {
    /// <p>A list of event parameters, which includes event types and their event value thresholds and weights.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.event_parameters_list.is_none()`.
    pub fn event_parameters_list(&self) -> &[crate::types::EventParameters] {
        self.event_parameters_list.as_deref().unwrap_or_default()
    }
}
impl EventsConfig {
    /// Creates a new builder-style object to manufacture [`EventsConfig`](crate::types::EventsConfig).
    pub fn builder() -> crate::types::builders::EventsConfigBuilder {
        crate::types::builders::EventsConfigBuilder::default()
    }
}

/// A builder for [`EventsConfig`](crate::types::EventsConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EventsConfigBuilder {
    pub(crate) event_parameters_list: ::std::option::Option<::std::vec::Vec<crate::types::EventParameters>>,
}
impl EventsConfigBuilder {
    /// Appends an item to `event_parameters_list`.
    ///
    /// To override the contents of this collection use [`set_event_parameters_list`](Self::set_event_parameters_list).
    ///
    /// <p>A list of event parameters, which includes event types and their event value thresholds and weights.</p>
    pub fn event_parameters_list(mut self, input: crate::types::EventParameters) -> Self {
        let mut v = self.event_parameters_list.unwrap_or_default();
        v.push(input);
        self.event_parameters_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of event parameters, which includes event types and their event value thresholds and weights.</p>
    pub fn set_event_parameters_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EventParameters>>) -> Self {
        self.event_parameters_list = input;
        self
    }
    /// <p>A list of event parameters, which includes event types and their event value thresholds and weights.</p>
    pub fn get_event_parameters_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EventParameters>> {
        &self.event_parameters_list
    }
    /// Consumes the builder and constructs a [`EventsConfig`](crate::types::EventsConfig).
    pub fn build(self) -> crate::types::EventsConfig {
        crate::types::EventsConfig {
            event_parameters_list: self.event_parameters_list,
        }
    }
}
