// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the parameters of events, which are used in solution creation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EventParameters {
    /// <p>The name of the event type to be considered for solution creation.</p>
    pub event_type: ::std::option::Option<::std::string::String>,
    /// <p>The threshold of the event type. Only events with a value greater or equal to this threshold will be considered for solution creation.</p>
    pub event_value_threshold: ::std::option::Option<f64>,
    /// <p>The weight of the event type. A higher weight means higher importance of the event type for the created solution.</p>
    pub weight: ::std::option::Option<f64>,
}
impl EventParameters {
    /// <p>The name of the event type to be considered for solution creation.</p>
    pub fn event_type(&self) -> ::std::option::Option<&str> {
        self.event_type.as_deref()
    }
    /// <p>The threshold of the event type. Only events with a value greater or equal to this threshold will be considered for solution creation.</p>
    pub fn event_value_threshold(&self) -> ::std::option::Option<f64> {
        self.event_value_threshold
    }
    /// <p>The weight of the event type. A higher weight means higher importance of the event type for the created solution.</p>
    pub fn weight(&self) -> ::std::option::Option<f64> {
        self.weight
    }
}
impl EventParameters {
    /// Creates a new builder-style object to manufacture [`EventParameters`](crate::types::EventParameters).
    pub fn builder() -> crate::types::builders::EventParametersBuilder {
        crate::types::builders::EventParametersBuilder::default()
    }
}

/// A builder for [`EventParameters`](crate::types::EventParameters).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EventParametersBuilder {
    pub(crate) event_type: ::std::option::Option<::std::string::String>,
    pub(crate) event_value_threshold: ::std::option::Option<f64>,
    pub(crate) weight: ::std::option::Option<f64>,
}
impl EventParametersBuilder {
    /// <p>The name of the event type to be considered for solution creation.</p>
    pub fn event_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the event type to be considered for solution creation.</p>
    pub fn set_event_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_type = input;
        self
    }
    /// <p>The name of the event type to be considered for solution creation.</p>
    pub fn get_event_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_type
    }
    /// <p>The threshold of the event type. Only events with a value greater or equal to this threshold will be considered for solution creation.</p>
    pub fn event_value_threshold(mut self, input: f64) -> Self {
        self.event_value_threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>The threshold of the event type. Only events with a value greater or equal to this threshold will be considered for solution creation.</p>
    pub fn set_event_value_threshold(mut self, input: ::std::option::Option<f64>) -> Self {
        self.event_value_threshold = input;
        self
    }
    /// <p>The threshold of the event type. Only events with a value greater or equal to this threshold will be considered for solution creation.</p>
    pub fn get_event_value_threshold(&self) -> &::std::option::Option<f64> {
        &self.event_value_threshold
    }
    /// <p>The weight of the event type. A higher weight means higher importance of the event type for the created solution.</p>
    pub fn weight(mut self, input: f64) -> Self {
        self.weight = ::std::option::Option::Some(input);
        self
    }
    /// <p>The weight of the event type. A higher weight means higher importance of the event type for the created solution.</p>
    pub fn set_weight(mut self, input: ::std::option::Option<f64>) -> Self {
        self.weight = input;
        self
    }
    /// <p>The weight of the event type. A higher weight means higher importance of the event type for the created solution.</p>
    pub fn get_weight(&self) -> &::std::option::Option<f64> {
        &self.weight
    }
    /// Consumes the builder and constructs a [`EventParameters`](crate::types::EventParameters).
    pub fn build(self) -> crate::types::EventParameters {
        crate::types::EventParameters {
            event_type: self.event_type,
            event_value_threshold: self.event_value_threshold,
            weight: self.weight,
        }
    }
}
