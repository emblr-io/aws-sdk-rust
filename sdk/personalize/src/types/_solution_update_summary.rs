// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a summary of the properties of a solution update. For a complete listing, call the <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_DescribeSolution.html">DescribeSolution</a> API.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SolutionUpdateSummary {
    /// <p>The configuration details of the solution.</p>
    pub solution_update_config: ::std::option::Option<crate::types::SolutionUpdateConfig>,
    /// <p>The status of the solution update. A solution update can be in one of the following states:</p>
    /// <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>Whether the solution automatically creates solution versions.</p>
    pub perform_auto_training: ::std::option::Option<bool>,
    /// <p>The date and time (in Unix format) that the solution update was created.</p>
    pub creation_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time (in Unix time) that the solution update was last updated.</p>
    pub last_updated_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>If a solution update fails, the reason behind the failure.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
}
impl SolutionUpdateSummary {
    /// <p>The configuration details of the solution.</p>
    pub fn solution_update_config(&self) -> ::std::option::Option<&crate::types::SolutionUpdateConfig> {
        self.solution_update_config.as_ref()
    }
    /// <p>The status of the solution update. A solution update can be in one of the following states:</p>
    /// <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>Whether the solution automatically creates solution versions.</p>
    pub fn perform_auto_training(&self) -> ::std::option::Option<bool> {
        self.perform_auto_training
    }
    /// <p>The date and time (in Unix format) that the solution update was created.</p>
    pub fn creation_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
    /// <p>The date and time (in Unix time) that the solution update was last updated.</p>
    pub fn last_updated_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_date_time.as_ref()
    }
    /// <p>If a solution update fails, the reason behind the failure.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
}
impl SolutionUpdateSummary {
    /// Creates a new builder-style object to manufacture [`SolutionUpdateSummary`](crate::types::SolutionUpdateSummary).
    pub fn builder() -> crate::types::builders::SolutionUpdateSummaryBuilder {
        crate::types::builders::SolutionUpdateSummaryBuilder::default()
    }
}

/// A builder for [`SolutionUpdateSummary`](crate::types::SolutionUpdateSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SolutionUpdateSummaryBuilder {
    pub(crate) solution_update_config: ::std::option::Option<crate::types::SolutionUpdateConfig>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) perform_auto_training: ::std::option::Option<bool>,
    pub(crate) creation_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
}
impl SolutionUpdateSummaryBuilder {
    /// <p>The configuration details of the solution.</p>
    pub fn solution_update_config(mut self, input: crate::types::SolutionUpdateConfig) -> Self {
        self.solution_update_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration details of the solution.</p>
    pub fn set_solution_update_config(mut self, input: ::std::option::Option<crate::types::SolutionUpdateConfig>) -> Self {
        self.solution_update_config = input;
        self
    }
    /// <p>The configuration details of the solution.</p>
    pub fn get_solution_update_config(&self) -> &::std::option::Option<crate::types::SolutionUpdateConfig> {
        &self.solution_update_config
    }
    /// <p>The status of the solution update. A solution update can be in one of the following states:</p>
    /// <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the solution update. A solution update can be in one of the following states:</p>
    /// <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the solution update. A solution update can be in one of the following states:</p>
    /// <p>CREATE PENDING &gt; CREATE IN_PROGRESS &gt; ACTIVE -or- CREATE FAILED</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>Whether the solution automatically creates solution versions.</p>
    pub fn perform_auto_training(mut self, input: bool) -> Self {
        self.perform_auto_training = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the solution automatically creates solution versions.</p>
    pub fn set_perform_auto_training(mut self, input: ::std::option::Option<bool>) -> Self {
        self.perform_auto_training = input;
        self
    }
    /// <p>Whether the solution automatically creates solution versions.</p>
    pub fn get_perform_auto_training(&self) -> &::std::option::Option<bool> {
        &self.perform_auto_training
    }
    /// <p>The date and time (in Unix format) that the solution update was created.</p>
    pub fn creation_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time (in Unix format) that the solution update was created.</p>
    pub fn set_creation_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date_time = input;
        self
    }
    /// <p>The date and time (in Unix format) that the solution update was created.</p>
    pub fn get_creation_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date_time
    }
    /// <p>The date and time (in Unix time) that the solution update was last updated.</p>
    pub fn last_updated_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time (in Unix time) that the solution update was last updated.</p>
    pub fn set_last_updated_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_date_time = input;
        self
    }
    /// <p>The date and time (in Unix time) that the solution update was last updated.</p>
    pub fn get_last_updated_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_date_time
    }
    /// <p>If a solution update fails, the reason behind the failure.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If a solution update fails, the reason behind the failure.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>If a solution update fails, the reason behind the failure.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// Consumes the builder and constructs a [`SolutionUpdateSummary`](crate::types::SolutionUpdateSummary).
    pub fn build(self) -> crate::types::SolutionUpdateSummary {
        crate::types::SolutionUpdateSummary {
            solution_update_config: self.solution_update_config,
            status: self.status,
            perform_auto_training: self.perform_auto_training,
            creation_date_time: self.creation_date_time,
            last_updated_date_time: self.last_updated_date_time,
            failure_reason: self.failure_reason,
        }
    }
}
