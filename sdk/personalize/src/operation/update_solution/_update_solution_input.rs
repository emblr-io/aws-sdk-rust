// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateSolutionInput {
    /// <p>The Amazon Resource Name (ARN) of the solution to update.</p>
    pub solution_arn: ::std::option::Option<::std::string::String>,
    /// <p>Whether the solution uses automatic training to create new solution versions (trained models). You can change the training frequency by specifying a <code>schedulingExpression</code> in the <code>AutoTrainingConfig</code> as part of solution configuration.</p>
    /// <p>If you turn on automatic training, the first automatic training starts within one hour after the solution update completes. If you manually create a solution version within the hour, the solution skips the first automatic training. For more information about automatic training, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/solution-config-auto-training.html">Configuring automatic training</a>.</p>
    /// <p>After training starts, you can get the solution version's Amazon Resource Name (ARN) with the <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_ListSolutionVersions.html">ListSolutionVersions</a> API operation. To get its status, use the <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_DescribeSolutionVersion.html">DescribeSolutionVersion</a>.</p>
    pub perform_auto_training: ::std::option::Option<bool>,
    /// <p>The new configuration details of the solution.</p>
    pub solution_update_config: ::std::option::Option<crate::types::SolutionUpdateConfig>,
}
impl UpdateSolutionInput {
    /// <p>The Amazon Resource Name (ARN) of the solution to update.</p>
    pub fn solution_arn(&self) -> ::std::option::Option<&str> {
        self.solution_arn.as_deref()
    }
    /// <p>Whether the solution uses automatic training to create new solution versions (trained models). You can change the training frequency by specifying a <code>schedulingExpression</code> in the <code>AutoTrainingConfig</code> as part of solution configuration.</p>
    /// <p>If you turn on automatic training, the first automatic training starts within one hour after the solution update completes. If you manually create a solution version within the hour, the solution skips the first automatic training. For more information about automatic training, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/solution-config-auto-training.html">Configuring automatic training</a>.</p>
    /// <p>After training starts, you can get the solution version's Amazon Resource Name (ARN) with the <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_ListSolutionVersions.html">ListSolutionVersions</a> API operation. To get its status, use the <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_DescribeSolutionVersion.html">DescribeSolutionVersion</a>.</p>
    pub fn perform_auto_training(&self) -> ::std::option::Option<bool> {
        self.perform_auto_training
    }
    /// <p>The new configuration details of the solution.</p>
    pub fn solution_update_config(&self) -> ::std::option::Option<&crate::types::SolutionUpdateConfig> {
        self.solution_update_config.as_ref()
    }
}
impl UpdateSolutionInput {
    /// Creates a new builder-style object to manufacture [`UpdateSolutionInput`](crate::operation::update_solution::UpdateSolutionInput).
    pub fn builder() -> crate::operation::update_solution::builders::UpdateSolutionInputBuilder {
        crate::operation::update_solution::builders::UpdateSolutionInputBuilder::default()
    }
}

/// A builder for [`UpdateSolutionInput`](crate::operation::update_solution::UpdateSolutionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateSolutionInputBuilder {
    pub(crate) solution_arn: ::std::option::Option<::std::string::String>,
    pub(crate) perform_auto_training: ::std::option::Option<bool>,
    pub(crate) solution_update_config: ::std::option::Option<crate::types::SolutionUpdateConfig>,
}
impl UpdateSolutionInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the solution to update.</p>
    /// This field is required.
    pub fn solution_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.solution_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the solution to update.</p>
    pub fn set_solution_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.solution_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the solution to update.</p>
    pub fn get_solution_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.solution_arn
    }
    /// <p>Whether the solution uses automatic training to create new solution versions (trained models). You can change the training frequency by specifying a <code>schedulingExpression</code> in the <code>AutoTrainingConfig</code> as part of solution configuration.</p>
    /// <p>If you turn on automatic training, the first automatic training starts within one hour after the solution update completes. If you manually create a solution version within the hour, the solution skips the first automatic training. For more information about automatic training, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/solution-config-auto-training.html">Configuring automatic training</a>.</p>
    /// <p>After training starts, you can get the solution version's Amazon Resource Name (ARN) with the <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_ListSolutionVersions.html">ListSolutionVersions</a> API operation. To get its status, use the <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_DescribeSolutionVersion.html">DescribeSolutionVersion</a>.</p>
    pub fn perform_auto_training(mut self, input: bool) -> Self {
        self.perform_auto_training = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the solution uses automatic training to create new solution versions (trained models). You can change the training frequency by specifying a <code>schedulingExpression</code> in the <code>AutoTrainingConfig</code> as part of solution configuration.</p>
    /// <p>If you turn on automatic training, the first automatic training starts within one hour after the solution update completes. If you manually create a solution version within the hour, the solution skips the first automatic training. For more information about automatic training, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/solution-config-auto-training.html">Configuring automatic training</a>.</p>
    /// <p>After training starts, you can get the solution version's Amazon Resource Name (ARN) with the <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_ListSolutionVersions.html">ListSolutionVersions</a> API operation. To get its status, use the <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_DescribeSolutionVersion.html">DescribeSolutionVersion</a>.</p>
    pub fn set_perform_auto_training(mut self, input: ::std::option::Option<bool>) -> Self {
        self.perform_auto_training = input;
        self
    }
    /// <p>Whether the solution uses automatic training to create new solution versions (trained models). You can change the training frequency by specifying a <code>schedulingExpression</code> in the <code>AutoTrainingConfig</code> as part of solution configuration.</p>
    /// <p>If you turn on automatic training, the first automatic training starts within one hour after the solution update completes. If you manually create a solution version within the hour, the solution skips the first automatic training. For more information about automatic training, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/solution-config-auto-training.html">Configuring automatic training</a>.</p>
    /// <p>After training starts, you can get the solution version's Amazon Resource Name (ARN) with the <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_ListSolutionVersions.html">ListSolutionVersions</a> API operation. To get its status, use the <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_DescribeSolutionVersion.html">DescribeSolutionVersion</a>.</p>
    pub fn get_perform_auto_training(&self) -> &::std::option::Option<bool> {
        &self.perform_auto_training
    }
    /// <p>The new configuration details of the solution.</p>
    pub fn solution_update_config(mut self, input: crate::types::SolutionUpdateConfig) -> Self {
        self.solution_update_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The new configuration details of the solution.</p>
    pub fn set_solution_update_config(mut self, input: ::std::option::Option<crate::types::SolutionUpdateConfig>) -> Self {
        self.solution_update_config = input;
        self
    }
    /// <p>The new configuration details of the solution.</p>
    pub fn get_solution_update_config(&self) -> &::std::option::Option<crate::types::SolutionUpdateConfig> {
        &self.solution_update_config
    }
    /// Consumes the builder and constructs a [`UpdateSolutionInput`](crate::operation::update_solution::UpdateSolutionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_solution::UpdateSolutionInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_solution::UpdateSolutionInput {
            solution_arn: self.solution_arn,
            perform_auto_training: self.perform_auto_training,
            solution_update_config: self.solution_update_config,
        })
    }
}
