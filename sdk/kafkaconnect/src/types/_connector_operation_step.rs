// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of a step that is involved in a connector's operation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConnectorOperationStep {
    /// <p>The step type of the operation.</p>
    pub step_type: ::std::option::Option<crate::types::ConnectorOperationStepType>,
    /// <p>The step state of the operation.</p>
    pub step_state: ::std::option::Option<crate::types::ConnectorOperationStepState>,
}
impl ConnectorOperationStep {
    /// <p>The step type of the operation.</p>
    pub fn step_type(&self) -> ::std::option::Option<&crate::types::ConnectorOperationStepType> {
        self.step_type.as_ref()
    }
    /// <p>The step state of the operation.</p>
    pub fn step_state(&self) -> ::std::option::Option<&crate::types::ConnectorOperationStepState> {
        self.step_state.as_ref()
    }
}
impl ConnectorOperationStep {
    /// Creates a new builder-style object to manufacture [`ConnectorOperationStep`](crate::types::ConnectorOperationStep).
    pub fn builder() -> crate::types::builders::ConnectorOperationStepBuilder {
        crate::types::builders::ConnectorOperationStepBuilder::default()
    }
}

/// A builder for [`ConnectorOperationStep`](crate::types::ConnectorOperationStep).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConnectorOperationStepBuilder {
    pub(crate) step_type: ::std::option::Option<crate::types::ConnectorOperationStepType>,
    pub(crate) step_state: ::std::option::Option<crate::types::ConnectorOperationStepState>,
}
impl ConnectorOperationStepBuilder {
    /// <p>The step type of the operation.</p>
    pub fn step_type(mut self, input: crate::types::ConnectorOperationStepType) -> Self {
        self.step_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The step type of the operation.</p>
    pub fn set_step_type(mut self, input: ::std::option::Option<crate::types::ConnectorOperationStepType>) -> Self {
        self.step_type = input;
        self
    }
    /// <p>The step type of the operation.</p>
    pub fn get_step_type(&self) -> &::std::option::Option<crate::types::ConnectorOperationStepType> {
        &self.step_type
    }
    /// <p>The step state of the operation.</p>
    pub fn step_state(mut self, input: crate::types::ConnectorOperationStepState) -> Self {
        self.step_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The step state of the operation.</p>
    pub fn set_step_state(mut self, input: ::std::option::Option<crate::types::ConnectorOperationStepState>) -> Self {
        self.step_state = input;
        self
    }
    /// <p>The step state of the operation.</p>
    pub fn get_step_state(&self) -> &::std::option::Option<crate::types::ConnectorOperationStepState> {
        &self.step_state
    }
    /// Consumes the builder and constructs a [`ConnectorOperationStep`](crate::types::ConnectorOperationStep).
    pub fn build(self) -> crate::types::ConnectorOperationStep {
        crate::types::ConnectorOperationStep {
            step_type: self.step_type,
            step_state: self.step_state,
        }
    }
}
