// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DescribeConnectorOperationOutput {
    /// <p>The Amazon Resource Name (ARN) of the connector.</p>
    pub connector_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the connector operation.</p>
    pub connector_operation_arn: ::std::option::Option<::std::string::String>,
    /// <p>The state of the connector operation.</p>
    pub connector_operation_state: ::std::option::Option<crate::types::ConnectorOperationState>,
    /// <p>The type of connector operation performed.</p>
    pub connector_operation_type: ::std::option::Option<crate::types::ConnectorOperationType>,
    /// <p>The array of operation steps taken.</p>
    pub operation_steps: ::std::option::Option<::std::vec::Vec<crate::types::ConnectorOperationStep>>,
    /// <p>The origin worker setting.</p>
    pub origin_worker_setting: ::std::option::Option<crate::types::WorkerSetting>,
    /// <p>The origin connector configuration.</p>
    pub origin_connector_configuration: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The target worker setting.</p>
    pub target_worker_setting: ::std::option::Option<crate::types::WorkerSetting>,
    /// <p>The target connector configuration.</p>
    pub target_connector_configuration: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Details about the state of a resource.</p>
    pub error_info: ::std::option::Option<crate::types::StateDescription>,
    /// <p>The time when the operation was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time when the operation ended.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeConnectorOperationOutput {
    /// <p>The Amazon Resource Name (ARN) of the connector.</p>
    pub fn connector_arn(&self) -> ::std::option::Option<&str> {
        self.connector_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the connector operation.</p>
    pub fn connector_operation_arn(&self) -> ::std::option::Option<&str> {
        self.connector_operation_arn.as_deref()
    }
    /// <p>The state of the connector operation.</p>
    pub fn connector_operation_state(&self) -> ::std::option::Option<&crate::types::ConnectorOperationState> {
        self.connector_operation_state.as_ref()
    }
    /// <p>The type of connector operation performed.</p>
    pub fn connector_operation_type(&self) -> ::std::option::Option<&crate::types::ConnectorOperationType> {
        self.connector_operation_type.as_ref()
    }
    /// <p>The array of operation steps taken.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.operation_steps.is_none()`.
    pub fn operation_steps(&self) -> &[crate::types::ConnectorOperationStep] {
        self.operation_steps.as_deref().unwrap_or_default()
    }
    /// <p>The origin worker setting.</p>
    pub fn origin_worker_setting(&self) -> ::std::option::Option<&crate::types::WorkerSetting> {
        self.origin_worker_setting.as_ref()
    }
    /// <p>The origin connector configuration.</p>
    pub fn origin_connector_configuration(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.origin_connector_configuration.as_ref()
    }
    /// <p>The target worker setting.</p>
    pub fn target_worker_setting(&self) -> ::std::option::Option<&crate::types::WorkerSetting> {
        self.target_worker_setting.as_ref()
    }
    /// <p>The target connector configuration.</p>
    pub fn target_connector_configuration(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.target_connector_configuration.as_ref()
    }
    /// <p>Details about the state of a resource.</p>
    pub fn error_info(&self) -> ::std::option::Option<&crate::types::StateDescription> {
        self.error_info.as_ref()
    }
    /// <p>The time when the operation was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The time when the operation ended.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
}
impl ::std::fmt::Debug for DescribeConnectorOperationOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeConnectorOperationOutput");
        formatter.field("connector_arn", &self.connector_arn);
        formatter.field("connector_operation_arn", &self.connector_operation_arn);
        formatter.field("connector_operation_state", &self.connector_operation_state);
        formatter.field("connector_operation_type", &self.connector_operation_type);
        formatter.field("operation_steps", &self.operation_steps);
        formatter.field("origin_worker_setting", &self.origin_worker_setting);
        formatter.field("origin_connector_configuration", &"*** Sensitive Data Redacted ***");
        formatter.field("target_worker_setting", &self.target_worker_setting);
        formatter.field("target_connector_configuration", &"*** Sensitive Data Redacted ***");
        formatter.field("error_info", &self.error_info);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("end_time", &self.end_time);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for DescribeConnectorOperationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeConnectorOperationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeConnectorOperationOutput`](crate::operation::describe_connector_operation::DescribeConnectorOperationOutput).
    pub fn builder() -> crate::operation::describe_connector_operation::builders::DescribeConnectorOperationOutputBuilder {
        crate::operation::describe_connector_operation::builders::DescribeConnectorOperationOutputBuilder::default()
    }
}

/// A builder for [`DescribeConnectorOperationOutput`](crate::operation::describe_connector_operation::DescribeConnectorOperationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct DescribeConnectorOperationOutputBuilder {
    pub(crate) connector_arn: ::std::option::Option<::std::string::String>,
    pub(crate) connector_operation_arn: ::std::option::Option<::std::string::String>,
    pub(crate) connector_operation_state: ::std::option::Option<crate::types::ConnectorOperationState>,
    pub(crate) connector_operation_type: ::std::option::Option<crate::types::ConnectorOperationType>,
    pub(crate) operation_steps: ::std::option::Option<::std::vec::Vec<crate::types::ConnectorOperationStep>>,
    pub(crate) origin_worker_setting: ::std::option::Option<crate::types::WorkerSetting>,
    pub(crate) origin_connector_configuration: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) target_worker_setting: ::std::option::Option<crate::types::WorkerSetting>,
    pub(crate) target_connector_configuration: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) error_info: ::std::option::Option<crate::types::StateDescription>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeConnectorOperationOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the connector.</p>
    pub fn connector_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connector.</p>
    pub fn set_connector_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connector.</p>
    pub fn get_connector_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the connector operation.</p>
    pub fn connector_operation_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_operation_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connector operation.</p>
    pub fn set_connector_operation_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_operation_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connector operation.</p>
    pub fn get_connector_operation_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_operation_arn
    }
    /// <p>The state of the connector operation.</p>
    pub fn connector_operation_state(mut self, input: crate::types::ConnectorOperationState) -> Self {
        self.connector_operation_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the connector operation.</p>
    pub fn set_connector_operation_state(mut self, input: ::std::option::Option<crate::types::ConnectorOperationState>) -> Self {
        self.connector_operation_state = input;
        self
    }
    /// <p>The state of the connector operation.</p>
    pub fn get_connector_operation_state(&self) -> &::std::option::Option<crate::types::ConnectorOperationState> {
        &self.connector_operation_state
    }
    /// <p>The type of connector operation performed.</p>
    pub fn connector_operation_type(mut self, input: crate::types::ConnectorOperationType) -> Self {
        self.connector_operation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of connector operation performed.</p>
    pub fn set_connector_operation_type(mut self, input: ::std::option::Option<crate::types::ConnectorOperationType>) -> Self {
        self.connector_operation_type = input;
        self
    }
    /// <p>The type of connector operation performed.</p>
    pub fn get_connector_operation_type(&self) -> &::std::option::Option<crate::types::ConnectorOperationType> {
        &self.connector_operation_type
    }
    /// Appends an item to `operation_steps`.
    ///
    /// To override the contents of this collection use [`set_operation_steps`](Self::set_operation_steps).
    ///
    /// <p>The array of operation steps taken.</p>
    pub fn operation_steps(mut self, input: crate::types::ConnectorOperationStep) -> Self {
        let mut v = self.operation_steps.unwrap_or_default();
        v.push(input);
        self.operation_steps = ::std::option::Option::Some(v);
        self
    }
    /// <p>The array of operation steps taken.</p>
    pub fn set_operation_steps(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ConnectorOperationStep>>) -> Self {
        self.operation_steps = input;
        self
    }
    /// <p>The array of operation steps taken.</p>
    pub fn get_operation_steps(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ConnectorOperationStep>> {
        &self.operation_steps
    }
    /// <p>The origin worker setting.</p>
    pub fn origin_worker_setting(mut self, input: crate::types::WorkerSetting) -> Self {
        self.origin_worker_setting = ::std::option::Option::Some(input);
        self
    }
    /// <p>The origin worker setting.</p>
    pub fn set_origin_worker_setting(mut self, input: ::std::option::Option<crate::types::WorkerSetting>) -> Self {
        self.origin_worker_setting = input;
        self
    }
    /// <p>The origin worker setting.</p>
    pub fn get_origin_worker_setting(&self) -> &::std::option::Option<crate::types::WorkerSetting> {
        &self.origin_worker_setting
    }
    /// Adds a key-value pair to `origin_connector_configuration`.
    ///
    /// To override the contents of this collection use [`set_origin_connector_configuration`](Self::set_origin_connector_configuration).
    ///
    /// <p>The origin connector configuration.</p>
    pub fn origin_connector_configuration(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.origin_connector_configuration.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.origin_connector_configuration = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The origin connector configuration.</p>
    pub fn set_origin_connector_configuration(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.origin_connector_configuration = input;
        self
    }
    /// <p>The origin connector configuration.</p>
    pub fn get_origin_connector_configuration(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.origin_connector_configuration
    }
    /// <p>The target worker setting.</p>
    pub fn target_worker_setting(mut self, input: crate::types::WorkerSetting) -> Self {
        self.target_worker_setting = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target worker setting.</p>
    pub fn set_target_worker_setting(mut self, input: ::std::option::Option<crate::types::WorkerSetting>) -> Self {
        self.target_worker_setting = input;
        self
    }
    /// <p>The target worker setting.</p>
    pub fn get_target_worker_setting(&self) -> &::std::option::Option<crate::types::WorkerSetting> {
        &self.target_worker_setting
    }
    /// Adds a key-value pair to `target_connector_configuration`.
    ///
    /// To override the contents of this collection use [`set_target_connector_configuration`](Self::set_target_connector_configuration).
    ///
    /// <p>The target connector configuration.</p>
    pub fn target_connector_configuration(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.target_connector_configuration.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.target_connector_configuration = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The target connector configuration.</p>
    pub fn set_target_connector_configuration(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.target_connector_configuration = input;
        self
    }
    /// <p>The target connector configuration.</p>
    pub fn get_target_connector_configuration(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.target_connector_configuration
    }
    /// <p>Details about the state of a resource.</p>
    pub fn error_info(mut self, input: crate::types::StateDescription) -> Self {
        self.error_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the state of a resource.</p>
    pub fn set_error_info(mut self, input: ::std::option::Option<crate::types::StateDescription>) -> Self {
        self.error_info = input;
        self
    }
    /// <p>Details about the state of a resource.</p>
    pub fn get_error_info(&self) -> &::std::option::Option<crate::types::StateDescription> {
        &self.error_info
    }
    /// <p>The time when the operation was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the operation was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time when the operation was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The time when the operation ended.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the operation ended.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The time when the operation ended.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeConnectorOperationOutput`](crate::operation::describe_connector_operation::DescribeConnectorOperationOutput).
    pub fn build(self) -> crate::operation::describe_connector_operation::DescribeConnectorOperationOutput {
        crate::operation::describe_connector_operation::DescribeConnectorOperationOutput {
            connector_arn: self.connector_arn,
            connector_operation_arn: self.connector_operation_arn,
            connector_operation_state: self.connector_operation_state,
            connector_operation_type: self.connector_operation_type,
            operation_steps: self.operation_steps,
            origin_worker_setting: self.origin_worker_setting,
            origin_connector_configuration: self.origin_connector_configuration,
            target_worker_setting: self.target_worker_setting,
            target_connector_configuration: self.target_connector_configuration,
            error_info: self.error_info,
            creation_time: self.creation_time,
            end_time: self.end_time,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for DescribeConnectorOperationOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeConnectorOperationOutputBuilder");
        formatter.field("connector_arn", &self.connector_arn);
        formatter.field("connector_operation_arn", &self.connector_operation_arn);
        formatter.field("connector_operation_state", &self.connector_operation_state);
        formatter.field("connector_operation_type", &self.connector_operation_type);
        formatter.field("operation_steps", &self.operation_steps);
        formatter.field("origin_worker_setting", &self.origin_worker_setting);
        formatter.field("origin_connector_configuration", &"*** Sensitive Data Redacted ***");
        formatter.field("target_worker_setting", &self.target_worker_setting);
        formatter.field("target_connector_configuration", &"*** Sensitive Data Redacted ***");
        formatter.field("error_info", &self.error_info);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("end_time", &self.end_time);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
