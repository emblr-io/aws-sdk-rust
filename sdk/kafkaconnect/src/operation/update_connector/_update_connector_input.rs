// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateConnectorInput {
    /// <p>The target capacity.</p>
    pub capacity: ::std::option::Option<crate::types::CapacityUpdate>,
    /// <p>A map of keys to values that represent the configuration for the connector.</p>
    pub connector_configuration: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The Amazon Resource Name (ARN) of the connector that you want to update.</p>
    pub connector_arn: ::std::option::Option<::std::string::String>,
    /// <p>The current version of the connector that you want to update.</p>
    pub current_version: ::std::option::Option<::std::string::String>,
}
impl UpdateConnectorInput {
    /// <p>The target capacity.</p>
    pub fn capacity(&self) -> ::std::option::Option<&crate::types::CapacityUpdate> {
        self.capacity.as_ref()
    }
    /// <p>A map of keys to values that represent the configuration for the connector.</p>
    pub fn connector_configuration(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.connector_configuration.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the connector that you want to update.</p>
    pub fn connector_arn(&self) -> ::std::option::Option<&str> {
        self.connector_arn.as_deref()
    }
    /// <p>The current version of the connector that you want to update.</p>
    pub fn current_version(&self) -> ::std::option::Option<&str> {
        self.current_version.as_deref()
    }
}
impl ::std::fmt::Debug for UpdateConnectorInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateConnectorInput");
        formatter.field("capacity", &self.capacity);
        formatter.field("connector_configuration", &"*** Sensitive Data Redacted ***");
        formatter.field("connector_arn", &self.connector_arn);
        formatter.field("current_version", &self.current_version);
        formatter.finish()
    }
}
impl UpdateConnectorInput {
    /// Creates a new builder-style object to manufacture [`UpdateConnectorInput`](crate::operation::update_connector::UpdateConnectorInput).
    pub fn builder() -> crate::operation::update_connector::builders::UpdateConnectorInputBuilder {
        crate::operation::update_connector::builders::UpdateConnectorInputBuilder::default()
    }
}

/// A builder for [`UpdateConnectorInput`](crate::operation::update_connector::UpdateConnectorInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateConnectorInputBuilder {
    pub(crate) capacity: ::std::option::Option<crate::types::CapacityUpdate>,
    pub(crate) connector_configuration: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) connector_arn: ::std::option::Option<::std::string::String>,
    pub(crate) current_version: ::std::option::Option<::std::string::String>,
}
impl UpdateConnectorInputBuilder {
    /// <p>The target capacity.</p>
    pub fn capacity(mut self, input: crate::types::CapacityUpdate) -> Self {
        self.capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target capacity.</p>
    pub fn set_capacity(mut self, input: ::std::option::Option<crate::types::CapacityUpdate>) -> Self {
        self.capacity = input;
        self
    }
    /// <p>The target capacity.</p>
    pub fn get_capacity(&self) -> &::std::option::Option<crate::types::CapacityUpdate> {
        &self.capacity
    }
    /// Adds a key-value pair to `connector_configuration`.
    ///
    /// To override the contents of this collection use [`set_connector_configuration`](Self::set_connector_configuration).
    ///
    /// <p>A map of keys to values that represent the configuration for the connector.</p>
    pub fn connector_configuration(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.connector_configuration.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.connector_configuration = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of keys to values that represent the configuration for the connector.</p>
    pub fn set_connector_configuration(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.connector_configuration = input;
        self
    }
    /// <p>A map of keys to values that represent the configuration for the connector.</p>
    pub fn get_connector_configuration(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.connector_configuration
    }
    /// <p>The Amazon Resource Name (ARN) of the connector that you want to update.</p>
    /// This field is required.
    pub fn connector_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connector that you want to update.</p>
    pub fn set_connector_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connector that you want to update.</p>
    pub fn get_connector_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_arn
    }
    /// <p>The current version of the connector that you want to update.</p>
    /// This field is required.
    pub fn current_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current version of the connector that you want to update.</p>
    pub fn set_current_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_version = input;
        self
    }
    /// <p>The current version of the connector that you want to update.</p>
    pub fn get_current_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_version
    }
    /// Consumes the builder and constructs a [`UpdateConnectorInput`](crate::operation::update_connector::UpdateConnectorInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_connector::UpdateConnectorInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_connector::UpdateConnectorInput {
            capacity: self.capacity,
            connector_configuration: self.connector_configuration,
            connector_arn: self.connector_arn,
            current_version: self.current_version,
        })
    }
}
impl ::std::fmt::Debug for UpdateConnectorInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateConnectorInputBuilder");
        formatter.field("capacity", &self.capacity);
        formatter.field("connector_configuration", &"*** Sensitive Data Redacted ***");
        formatter.field("connector_arn", &self.connector_arn);
        formatter.field("current_version", &self.current_version);
        formatter.finish()
    }
}
