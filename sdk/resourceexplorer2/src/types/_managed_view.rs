// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An Amazon Web Services-managed view is how other Amazon Web Services services can access resource information indexed by Resource Explorer for your Amazon Web Services account or organization with your consent. For more information, see <a href="https://docs.aws.amazon.com/resource-explorer/latest/userguide/aws-managed-views.html">Managed views</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ManagedView {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon resource name (ARN)</a> of the managed view.</p>
    pub managed_view_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the managed view.</p>
    pub managed_view_name: ::std::option::Option<::std::string::String>,
    /// <p>The service principal of the Amazon Web Services service that created and manages the managed view.</p>
    pub trusted_service: ::std::option::Option<::std::string::String>,
    /// <p>The date and time when this managed view was last modified.</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Amazon Web Services account that owns this managed view.</p>
    pub owner: ::std::option::Option<::std::string::String>,
    /// <p>An <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon resource name (ARN)</a> of an Amazon Web Services account or organization that specifies whether this managed view includes resources from only the specified Amazon Web Services account or all accounts in the specified organization.</p>
    pub scope: ::std::option::Option<::std::string::String>,
    /// <p>A structure that contains additional information about the managed view.</p>
    pub included_properties: ::std::option::Option<::std::vec::Vec<crate::types::IncludedProperty>>,
    /// <p>A search filter defines which resources can be part of a search query result set.</p>
    pub filters: ::std::option::Option<crate::types::SearchFilter>,
    /// <p>The resource policy that defines access to the managed view. To learn more about this policy, review <a href="https://docs.aws.amazon.com/resource-explorer/latest/userguide/aws-managed-views.html">Managed views</a>.</p>
    pub resource_policy: ::std::option::Option<::std::string::String>,
    /// <p>The version of the managed view.</p>
    pub version: ::std::option::Option<::std::string::String>,
}
impl ManagedView {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon resource name (ARN)</a> of the managed view.</p>
    pub fn managed_view_arn(&self) -> ::std::option::Option<&str> {
        self.managed_view_arn.as_deref()
    }
    /// <p>The name of the managed view.</p>
    pub fn managed_view_name(&self) -> ::std::option::Option<&str> {
        self.managed_view_name.as_deref()
    }
    /// <p>The service principal of the Amazon Web Services service that created and manages the managed view.</p>
    pub fn trusted_service(&self) -> ::std::option::Option<&str> {
        self.trusted_service.as_deref()
    }
    /// <p>The date and time when this managed view was last modified.</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p>The Amazon Web Services account that owns this managed view.</p>
    pub fn owner(&self) -> ::std::option::Option<&str> {
        self.owner.as_deref()
    }
    /// <p>An <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon resource name (ARN)</a> of an Amazon Web Services account or organization that specifies whether this managed view includes resources from only the specified Amazon Web Services account or all accounts in the specified organization.</p>
    pub fn scope(&self) -> ::std::option::Option<&str> {
        self.scope.as_deref()
    }
    /// <p>A structure that contains additional information about the managed view.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.included_properties.is_none()`.
    pub fn included_properties(&self) -> &[crate::types::IncludedProperty] {
        self.included_properties.as_deref().unwrap_or_default()
    }
    /// <p>A search filter defines which resources can be part of a search query result set.</p>
    pub fn filters(&self) -> ::std::option::Option<&crate::types::SearchFilter> {
        self.filters.as_ref()
    }
    /// <p>The resource policy that defines access to the managed view. To learn more about this policy, review <a href="https://docs.aws.amazon.com/resource-explorer/latest/userguide/aws-managed-views.html">Managed views</a>.</p>
    pub fn resource_policy(&self) -> ::std::option::Option<&str> {
        self.resource_policy.as_deref()
    }
    /// <p>The version of the managed view.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl ::std::fmt::Debug for ManagedView {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ManagedView");
        formatter.field("managed_view_arn", &self.managed_view_arn);
        formatter.field("managed_view_name", &self.managed_view_name);
        formatter.field("trusted_service", &self.trusted_service);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.field("owner", &self.owner);
        formatter.field("scope", &self.scope);
        formatter.field("included_properties", &self.included_properties);
        formatter.field("filters", &"*** Sensitive Data Redacted ***");
        formatter.field("resource_policy", &self.resource_policy);
        formatter.field("version", &self.version);
        formatter.finish()
    }
}
impl ManagedView {
    /// Creates a new builder-style object to manufacture [`ManagedView`](crate::types::ManagedView).
    pub fn builder() -> crate::types::builders::ManagedViewBuilder {
        crate::types::builders::ManagedViewBuilder::default()
    }
}

/// A builder for [`ManagedView`](crate::types::ManagedView).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ManagedViewBuilder {
    pub(crate) managed_view_arn: ::std::option::Option<::std::string::String>,
    pub(crate) managed_view_name: ::std::option::Option<::std::string::String>,
    pub(crate) trusted_service: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) owner: ::std::option::Option<::std::string::String>,
    pub(crate) scope: ::std::option::Option<::std::string::String>,
    pub(crate) included_properties: ::std::option::Option<::std::vec::Vec<crate::types::IncludedProperty>>,
    pub(crate) filters: ::std::option::Option<crate::types::SearchFilter>,
    pub(crate) resource_policy: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
}
impl ManagedViewBuilder {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon resource name (ARN)</a> of the managed view.</p>
    pub fn managed_view_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.managed_view_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon resource name (ARN)</a> of the managed view.</p>
    pub fn set_managed_view_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.managed_view_arn = input;
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon resource name (ARN)</a> of the managed view.</p>
    pub fn get_managed_view_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.managed_view_arn
    }
    /// <p>The name of the managed view.</p>
    pub fn managed_view_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.managed_view_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the managed view.</p>
    pub fn set_managed_view_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.managed_view_name = input;
        self
    }
    /// <p>The name of the managed view.</p>
    pub fn get_managed_view_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.managed_view_name
    }
    /// <p>The service principal of the Amazon Web Services service that created and manages the managed view.</p>
    pub fn trusted_service(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trusted_service = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The service principal of the Amazon Web Services service that created and manages the managed view.</p>
    pub fn set_trusted_service(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trusted_service = input;
        self
    }
    /// <p>The service principal of the Amazon Web Services service that created and manages the managed view.</p>
    pub fn get_trusted_service(&self) -> &::std::option::Option<::std::string::String> {
        &self.trusted_service
    }
    /// <p>The date and time when this managed view was last modified.</p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when this managed view was last modified.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>The date and time when this managed view was last modified.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// <p>The Amazon Web Services account that owns this managed view.</p>
    pub fn owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account that owns this managed view.</p>
    pub fn set_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner = input;
        self
    }
    /// <p>The Amazon Web Services account that owns this managed view.</p>
    pub fn get_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner
    }
    /// <p>An <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon resource name (ARN)</a> of an Amazon Web Services account or organization that specifies whether this managed view includes resources from only the specified Amazon Web Services account or all accounts in the specified organization.</p>
    pub fn scope(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scope = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon resource name (ARN)</a> of an Amazon Web Services account or organization that specifies whether this managed view includes resources from only the specified Amazon Web Services account or all accounts in the specified organization.</p>
    pub fn set_scope(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scope = input;
        self
    }
    /// <p>An <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon resource name (ARN)</a> of an Amazon Web Services account or organization that specifies whether this managed view includes resources from only the specified Amazon Web Services account or all accounts in the specified organization.</p>
    pub fn get_scope(&self) -> &::std::option::Option<::std::string::String> {
        &self.scope
    }
    /// Appends an item to `included_properties`.
    ///
    /// To override the contents of this collection use [`set_included_properties`](Self::set_included_properties).
    ///
    /// <p>A structure that contains additional information about the managed view.</p>
    pub fn included_properties(mut self, input: crate::types::IncludedProperty) -> Self {
        let mut v = self.included_properties.unwrap_or_default();
        v.push(input);
        self.included_properties = ::std::option::Option::Some(v);
        self
    }
    /// <p>A structure that contains additional information about the managed view.</p>
    pub fn set_included_properties(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IncludedProperty>>) -> Self {
        self.included_properties = input;
        self
    }
    /// <p>A structure that contains additional information about the managed view.</p>
    pub fn get_included_properties(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IncludedProperty>> {
        &self.included_properties
    }
    /// <p>A search filter defines which resources can be part of a search query result set.</p>
    pub fn filters(mut self, input: crate::types::SearchFilter) -> Self {
        self.filters = ::std::option::Option::Some(input);
        self
    }
    /// <p>A search filter defines which resources can be part of a search query result set.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<crate::types::SearchFilter>) -> Self {
        self.filters = input;
        self
    }
    /// <p>A search filter defines which resources can be part of a search query result set.</p>
    pub fn get_filters(&self) -> &::std::option::Option<crate::types::SearchFilter> {
        &self.filters
    }
    /// <p>The resource policy that defines access to the managed view. To learn more about this policy, review <a href="https://docs.aws.amazon.com/resource-explorer/latest/userguide/aws-managed-views.html">Managed views</a>.</p>
    pub fn resource_policy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_policy = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource policy that defines access to the managed view. To learn more about this policy, review <a href="https://docs.aws.amazon.com/resource-explorer/latest/userguide/aws-managed-views.html">Managed views</a>.</p>
    pub fn set_resource_policy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_policy = input;
        self
    }
    /// <p>The resource policy that defines access to the managed view. To learn more about this policy, review <a href="https://docs.aws.amazon.com/resource-explorer/latest/userguide/aws-managed-views.html">Managed views</a>.</p>
    pub fn get_resource_policy(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_policy
    }
    /// <p>The version of the managed view.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the managed view.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version of the managed view.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// Consumes the builder and constructs a [`ManagedView`](crate::types::ManagedView).
    pub fn build(self) -> crate::types::ManagedView {
        crate::types::ManagedView {
            managed_view_arn: self.managed_view_arn,
            managed_view_name: self.managed_view_name,
            trusted_service: self.trusted_service,
            last_updated_at: self.last_updated_at,
            owner: self.owner,
            scope: self.scope,
            included_properties: self.included_properties,
            filters: self.filters,
            resource_policy: self.resource_policy,
            version: self.version,
        }
    }
}
impl ::std::fmt::Debug for ManagedViewBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ManagedViewBuilder");
        formatter.field("managed_view_arn", &self.managed_view_arn);
        formatter.field("managed_view_name", &self.managed_view_name);
        formatter.field("trusted_service", &self.trusted_service);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.field("owner", &self.owner);
        formatter.field("scope", &self.scope);
        formatter.field("included_properties", &self.included_properties);
        formatter.field("filters", &"*** Sensitive Data Redacted ***");
        formatter.field("resource_policy", &self.resource_policy);
        formatter.field("version", &self.version);
        formatter.finish()
    }
}
