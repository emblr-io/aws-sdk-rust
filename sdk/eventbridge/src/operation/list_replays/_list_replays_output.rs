// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListReplaysOutput {
    /// <p>An array of <code>Replay</code> objects that contain information about the replay.</p>
    pub replays: ::std::option::Option<::std::vec::Vec<crate::types::Replay>>,
    /// <p>A token indicating there are more results available. If there are no more results, no token is included in the response.</p>
    /// <p>The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page of results, make the call again using the returned token. Keep all other arguments unchanged.</p>
    /// <p>Using an expired pagination token results in an <code>HTTP 400 InvalidToken</code> error.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListReplaysOutput {
    /// <p>An array of <code>Replay</code> objects that contain information about the replay.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.replays.is_none()`.
    pub fn replays(&self) -> &[crate::types::Replay] {
        self.replays.as_deref().unwrap_or_default()
    }
    /// <p>A token indicating there are more results available. If there are no more results, no token is included in the response.</p>
    /// <p>The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page of results, make the call again using the returned token. Keep all other arguments unchanged.</p>
    /// <p>Using an expired pagination token results in an <code>HTTP 400 InvalidToken</code> error.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListReplaysOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListReplaysOutput {
    /// Creates a new builder-style object to manufacture [`ListReplaysOutput`](crate::operation::list_replays::ListReplaysOutput).
    pub fn builder() -> crate::operation::list_replays::builders::ListReplaysOutputBuilder {
        crate::operation::list_replays::builders::ListReplaysOutputBuilder::default()
    }
}

/// A builder for [`ListReplaysOutput`](crate::operation::list_replays::ListReplaysOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListReplaysOutputBuilder {
    pub(crate) replays: ::std::option::Option<::std::vec::Vec<crate::types::Replay>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListReplaysOutputBuilder {
    /// Appends an item to `replays`.
    ///
    /// To override the contents of this collection use [`set_replays`](Self::set_replays).
    ///
    /// <p>An array of <code>Replay</code> objects that contain information about the replay.</p>
    pub fn replays(mut self, input: crate::types::Replay) -> Self {
        let mut v = self.replays.unwrap_or_default();
        v.push(input);
        self.replays = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>Replay</code> objects that contain information about the replay.</p>
    pub fn set_replays(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Replay>>) -> Self {
        self.replays = input;
        self
    }
    /// <p>An array of <code>Replay</code> objects that contain information about the replay.</p>
    pub fn get_replays(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Replay>> {
        &self.replays
    }
    /// <p>A token indicating there are more results available. If there are no more results, no token is included in the response.</p>
    /// <p>The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page of results, make the call again using the returned token. Keep all other arguments unchanged.</p>
    /// <p>Using an expired pagination token results in an <code>HTTP 400 InvalidToken</code> error.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token indicating there are more results available. If there are no more results, no token is included in the response.</p>
    /// <p>The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page of results, make the call again using the returned token. Keep all other arguments unchanged.</p>
    /// <p>Using an expired pagination token results in an <code>HTTP 400 InvalidToken</code> error.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token indicating there are more results available. If there are no more results, no token is included in the response.</p>
    /// <p>The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page of results, make the call again using the returned token. Keep all other arguments unchanged.</p>
    /// <p>Using an expired pagination token results in an <code>HTTP 400 InvalidToken</code> error.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListReplaysOutput`](crate::operation::list_replays::ListReplaysOutput).
    pub fn build(self) -> crate::operation::list_replays::ListReplaysOutput {
        crate::operation::list_replays::ListReplaysOutput {
            replays: self.replays,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
