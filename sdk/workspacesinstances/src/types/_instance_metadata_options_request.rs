// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines instance metadata service configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InstanceMetadataOptionsRequest {
    /// <p>Enables or disables HTTP endpoint for instance metadata.</p>
    pub http_endpoint: ::std::option::Option<crate::types::HttpEndpointEnum>,
    /// <p>Configures IPv6 support for instance metadata HTTP protocol.</p>
    pub http_protocol_ipv6: ::std::option::Option<crate::types::HttpProtocolIpv6Enum>,
    /// <p>Sets maximum number of network hops for metadata PUT responses.</p>
    pub http_put_response_hop_limit: ::std::option::Option<i32>,
    /// <p>Configures token requirement for instance metadata retrieval.</p>
    pub http_tokens: ::std::option::Option<crate::types::HttpTokensEnum>,
    /// <p>Enables or disables instance metadata tags retrieval.</p>
    pub instance_metadata_tags: ::std::option::Option<crate::types::InstanceMetadataTagsEnum>,
}
impl InstanceMetadataOptionsRequest {
    /// <p>Enables or disables HTTP endpoint for instance metadata.</p>
    pub fn http_endpoint(&self) -> ::std::option::Option<&crate::types::HttpEndpointEnum> {
        self.http_endpoint.as_ref()
    }
    /// <p>Configures IPv6 support for instance metadata HTTP protocol.</p>
    pub fn http_protocol_ipv6(&self) -> ::std::option::Option<&crate::types::HttpProtocolIpv6Enum> {
        self.http_protocol_ipv6.as_ref()
    }
    /// <p>Sets maximum number of network hops for metadata PUT responses.</p>
    pub fn http_put_response_hop_limit(&self) -> ::std::option::Option<i32> {
        self.http_put_response_hop_limit
    }
    /// <p>Configures token requirement for instance metadata retrieval.</p>
    pub fn http_tokens(&self) -> ::std::option::Option<&crate::types::HttpTokensEnum> {
        self.http_tokens.as_ref()
    }
    /// <p>Enables or disables instance metadata tags retrieval.</p>
    pub fn instance_metadata_tags(&self) -> ::std::option::Option<&crate::types::InstanceMetadataTagsEnum> {
        self.instance_metadata_tags.as_ref()
    }
}
impl InstanceMetadataOptionsRequest {
    /// Creates a new builder-style object to manufacture [`InstanceMetadataOptionsRequest`](crate::types::InstanceMetadataOptionsRequest).
    pub fn builder() -> crate::types::builders::InstanceMetadataOptionsRequestBuilder {
        crate::types::builders::InstanceMetadataOptionsRequestBuilder::default()
    }
}

/// A builder for [`InstanceMetadataOptionsRequest`](crate::types::InstanceMetadataOptionsRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InstanceMetadataOptionsRequestBuilder {
    pub(crate) http_endpoint: ::std::option::Option<crate::types::HttpEndpointEnum>,
    pub(crate) http_protocol_ipv6: ::std::option::Option<crate::types::HttpProtocolIpv6Enum>,
    pub(crate) http_put_response_hop_limit: ::std::option::Option<i32>,
    pub(crate) http_tokens: ::std::option::Option<crate::types::HttpTokensEnum>,
    pub(crate) instance_metadata_tags: ::std::option::Option<crate::types::InstanceMetadataTagsEnum>,
}
impl InstanceMetadataOptionsRequestBuilder {
    /// <p>Enables or disables HTTP endpoint for instance metadata.</p>
    pub fn http_endpoint(mut self, input: crate::types::HttpEndpointEnum) -> Self {
        self.http_endpoint = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables or disables HTTP endpoint for instance metadata.</p>
    pub fn set_http_endpoint(mut self, input: ::std::option::Option<crate::types::HttpEndpointEnum>) -> Self {
        self.http_endpoint = input;
        self
    }
    /// <p>Enables or disables HTTP endpoint for instance metadata.</p>
    pub fn get_http_endpoint(&self) -> &::std::option::Option<crate::types::HttpEndpointEnum> {
        &self.http_endpoint
    }
    /// <p>Configures IPv6 support for instance metadata HTTP protocol.</p>
    pub fn http_protocol_ipv6(mut self, input: crate::types::HttpProtocolIpv6Enum) -> Self {
        self.http_protocol_ipv6 = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configures IPv6 support for instance metadata HTTP protocol.</p>
    pub fn set_http_protocol_ipv6(mut self, input: ::std::option::Option<crate::types::HttpProtocolIpv6Enum>) -> Self {
        self.http_protocol_ipv6 = input;
        self
    }
    /// <p>Configures IPv6 support for instance metadata HTTP protocol.</p>
    pub fn get_http_protocol_ipv6(&self) -> &::std::option::Option<crate::types::HttpProtocolIpv6Enum> {
        &self.http_protocol_ipv6
    }
    /// <p>Sets maximum number of network hops for metadata PUT responses.</p>
    pub fn http_put_response_hop_limit(mut self, input: i32) -> Self {
        self.http_put_response_hop_limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sets maximum number of network hops for metadata PUT responses.</p>
    pub fn set_http_put_response_hop_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.http_put_response_hop_limit = input;
        self
    }
    /// <p>Sets maximum number of network hops for metadata PUT responses.</p>
    pub fn get_http_put_response_hop_limit(&self) -> &::std::option::Option<i32> {
        &self.http_put_response_hop_limit
    }
    /// <p>Configures token requirement for instance metadata retrieval.</p>
    pub fn http_tokens(mut self, input: crate::types::HttpTokensEnum) -> Self {
        self.http_tokens = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configures token requirement for instance metadata retrieval.</p>
    pub fn set_http_tokens(mut self, input: ::std::option::Option<crate::types::HttpTokensEnum>) -> Self {
        self.http_tokens = input;
        self
    }
    /// <p>Configures token requirement for instance metadata retrieval.</p>
    pub fn get_http_tokens(&self) -> &::std::option::Option<crate::types::HttpTokensEnum> {
        &self.http_tokens
    }
    /// <p>Enables or disables instance metadata tags retrieval.</p>
    pub fn instance_metadata_tags(mut self, input: crate::types::InstanceMetadataTagsEnum) -> Self {
        self.instance_metadata_tags = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables or disables instance metadata tags retrieval.</p>
    pub fn set_instance_metadata_tags(mut self, input: ::std::option::Option<crate::types::InstanceMetadataTagsEnum>) -> Self {
        self.instance_metadata_tags = input;
        self
    }
    /// <p>Enables or disables instance metadata tags retrieval.</p>
    pub fn get_instance_metadata_tags(&self) -> &::std::option::Option<crate::types::InstanceMetadataTagsEnum> {
        &self.instance_metadata_tags
    }
    /// Consumes the builder and constructs a [`InstanceMetadataOptionsRequest`](crate::types::InstanceMetadataOptionsRequest).
    pub fn build(self) -> crate::types::InstanceMetadataOptionsRequest {
        crate::types::InstanceMetadataOptionsRequest {
            http_endpoint: self.http_endpoint,
            http_protocol_ipv6: self.http_protocol_ipv6,
            http_put_response_hop_limit: self.http_put_response_hop_limit,
            http_tokens: self.http_tokens,
            instance_metadata_tags: self.instance_metadata_tags,
        }
    }
}
