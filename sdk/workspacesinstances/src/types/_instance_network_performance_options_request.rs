// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configures network performance settings for WorkSpace Instance.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InstanceNetworkPerformanceOptionsRequest {
    /// <p>Defines bandwidth allocation strategy for network interfaces.</p>
    pub bandwidth_weighting: ::std::option::Option<crate::types::BandwidthWeightingEnum>,
}
impl InstanceNetworkPerformanceOptionsRequest {
    /// <p>Defines bandwidth allocation strategy for network interfaces.</p>
    pub fn bandwidth_weighting(&self) -> ::std::option::Option<&crate::types::BandwidthWeightingEnum> {
        self.bandwidth_weighting.as_ref()
    }
}
impl InstanceNetworkPerformanceOptionsRequest {
    /// Creates a new builder-style object to manufacture [`InstanceNetworkPerformanceOptionsRequest`](crate::types::InstanceNetworkPerformanceOptionsRequest).
    pub fn builder() -> crate::types::builders::InstanceNetworkPerformanceOptionsRequestBuilder {
        crate::types::builders::InstanceNetworkPerformanceOptionsRequestBuilder::default()
    }
}

/// A builder for [`InstanceNetworkPerformanceOptionsRequest`](crate::types::InstanceNetworkPerformanceOptionsRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InstanceNetworkPerformanceOptionsRequestBuilder {
    pub(crate) bandwidth_weighting: ::std::option::Option<crate::types::BandwidthWeightingEnum>,
}
impl InstanceNetworkPerformanceOptionsRequestBuilder {
    /// <p>Defines bandwidth allocation strategy for network interfaces.</p>
    pub fn bandwidth_weighting(mut self, input: crate::types::BandwidthWeightingEnum) -> Self {
        self.bandwidth_weighting = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines bandwidth allocation strategy for network interfaces.</p>
    pub fn set_bandwidth_weighting(mut self, input: ::std::option::Option<crate::types::BandwidthWeightingEnum>) -> Self {
        self.bandwidth_weighting = input;
        self
    }
    /// <p>Defines bandwidth allocation strategy for network interfaces.</p>
    pub fn get_bandwidth_weighting(&self) -> &::std::option::Option<crate::types::BandwidthWeightingEnum> {
        &self.bandwidth_weighting
    }
    /// Consumes the builder and constructs a [`InstanceNetworkPerformanceOptionsRequest`](crate::types::InstanceNetworkPerformanceOptionsRequest).
    pub fn build(self) -> crate::types::InstanceNetworkPerformanceOptionsRequest {
        crate::types::InstanceNetworkPerformanceOptionsRequest {
            bandwidth_weighting: self.bandwidth_weighting,
        }
    }
}
