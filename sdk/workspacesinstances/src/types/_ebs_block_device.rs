// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines configuration for an Elastic Block Store volume.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EbsBlockDevice {
    /// <p>Type of EBS volume (e.g., gp2, io1).</p>
    pub volume_type: ::std::option::Option<crate::types::VolumeTypeEnum>,
    /// <p>Indicates if the volume is encrypted.</p>
    pub encrypted: ::std::option::Option<bool>,
    /// <p>KMS key used for volume encryption.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>Input/output operations per second for the volume.</p>
    pub iops: ::std::option::Option<i32>,
    /// <p>Volume data transfer rate.</p>
    pub throughput: ::std::option::Option<i32>,
    /// <p>Size of the EBS volume in gigabytes.</p>
    pub volume_size: ::std::option::Option<i32>,
}
impl EbsBlockDevice {
    /// <p>Type of EBS volume (e.g., gp2, io1).</p>
    pub fn volume_type(&self) -> ::std::option::Option<&crate::types::VolumeTypeEnum> {
        self.volume_type.as_ref()
    }
    /// <p>Indicates if the volume is encrypted.</p>
    pub fn encrypted(&self) -> ::std::option::Option<bool> {
        self.encrypted
    }
    /// <p>KMS key used for volume encryption.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>Input/output operations per second for the volume.</p>
    pub fn iops(&self) -> ::std::option::Option<i32> {
        self.iops
    }
    /// <p>Volume data transfer rate.</p>
    pub fn throughput(&self) -> ::std::option::Option<i32> {
        self.throughput
    }
    /// <p>Size of the EBS volume in gigabytes.</p>
    pub fn volume_size(&self) -> ::std::option::Option<i32> {
        self.volume_size
    }
}
impl ::std::fmt::Debug for EbsBlockDevice {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EbsBlockDevice");
        formatter.field("volume_type", &self.volume_type);
        formatter.field("encrypted", &self.encrypted);
        formatter.field("kms_key_id", &"*** Sensitive Data Redacted ***");
        formatter.field("iops", &self.iops);
        formatter.field("throughput", &self.throughput);
        formatter.field("volume_size", &self.volume_size);
        formatter.finish()
    }
}
impl EbsBlockDevice {
    /// Creates a new builder-style object to manufacture [`EbsBlockDevice`](crate::types::EbsBlockDevice).
    pub fn builder() -> crate::types::builders::EbsBlockDeviceBuilder {
        crate::types::builders::EbsBlockDeviceBuilder::default()
    }
}

/// A builder for [`EbsBlockDevice`](crate::types::EbsBlockDevice).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct EbsBlockDeviceBuilder {
    pub(crate) volume_type: ::std::option::Option<crate::types::VolumeTypeEnum>,
    pub(crate) encrypted: ::std::option::Option<bool>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) iops: ::std::option::Option<i32>,
    pub(crate) throughput: ::std::option::Option<i32>,
    pub(crate) volume_size: ::std::option::Option<i32>,
}
impl EbsBlockDeviceBuilder {
    /// <p>Type of EBS volume (e.g., gp2, io1).</p>
    pub fn volume_type(mut self, input: crate::types::VolumeTypeEnum) -> Self {
        self.volume_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of EBS volume (e.g., gp2, io1).</p>
    pub fn set_volume_type(mut self, input: ::std::option::Option<crate::types::VolumeTypeEnum>) -> Self {
        self.volume_type = input;
        self
    }
    /// <p>Type of EBS volume (e.g., gp2, io1).</p>
    pub fn get_volume_type(&self) -> &::std::option::Option<crate::types::VolumeTypeEnum> {
        &self.volume_type
    }
    /// <p>Indicates if the volume is encrypted.</p>
    pub fn encrypted(mut self, input: bool) -> Self {
        self.encrypted = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates if the volume is encrypted.</p>
    pub fn set_encrypted(mut self, input: ::std::option::Option<bool>) -> Self {
        self.encrypted = input;
        self
    }
    /// <p>Indicates if the volume is encrypted.</p>
    pub fn get_encrypted(&self) -> &::std::option::Option<bool> {
        &self.encrypted
    }
    /// <p>KMS key used for volume encryption.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>KMS key used for volume encryption.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>KMS key used for volume encryption.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// <p>Input/output operations per second for the volume.</p>
    pub fn iops(mut self, input: i32) -> Self {
        self.iops = ::std::option::Option::Some(input);
        self
    }
    /// <p>Input/output operations per second for the volume.</p>
    pub fn set_iops(mut self, input: ::std::option::Option<i32>) -> Self {
        self.iops = input;
        self
    }
    /// <p>Input/output operations per second for the volume.</p>
    pub fn get_iops(&self) -> &::std::option::Option<i32> {
        &self.iops
    }
    /// <p>Volume data transfer rate.</p>
    pub fn throughput(mut self, input: i32) -> Self {
        self.throughput = ::std::option::Option::Some(input);
        self
    }
    /// <p>Volume data transfer rate.</p>
    pub fn set_throughput(mut self, input: ::std::option::Option<i32>) -> Self {
        self.throughput = input;
        self
    }
    /// <p>Volume data transfer rate.</p>
    pub fn get_throughput(&self) -> &::std::option::Option<i32> {
        &self.throughput
    }
    /// <p>Size of the EBS volume in gigabytes.</p>
    pub fn volume_size(mut self, input: i32) -> Self {
        self.volume_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>Size of the EBS volume in gigabytes.</p>
    pub fn set_volume_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.volume_size = input;
        self
    }
    /// <p>Size of the EBS volume in gigabytes.</p>
    pub fn get_volume_size(&self) -> &::std::option::Option<i32> {
        &self.volume_size
    }
    /// Consumes the builder and constructs a [`EbsBlockDevice`](crate::types::EbsBlockDevice).
    pub fn build(self) -> crate::types::EbsBlockDevice {
        crate::types::EbsBlockDevice {
            volume_type: self.volume_type,
            encrypted: self.encrypted,
            kms_key_id: self.kms_key_id,
            iops: self.iops,
            throughput: self.throughput,
            volume_size: self.volume_size,
        }
    }
}
impl ::std::fmt::Debug for EbsBlockDeviceBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EbsBlockDeviceBuilder");
        formatter.field("volume_type", &self.volume_type);
        formatter.field("encrypted", &self.encrypted);
        formatter.field("kms_key_id", &"*** Sensitive Data Redacted ***");
        formatter.field("iops", &self.iops);
        formatter.field("throughput", &self.throughput);
        formatter.field("volume_size", &self.volume_size);
        formatter.finish()
    }
}
