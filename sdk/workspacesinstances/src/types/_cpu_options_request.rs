// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configures CPU-specific settings for WorkSpace Instance.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CpuOptionsRequest {
    /// <p>AMD Secure Encrypted Virtualization configuration.</p>
    pub amd_sev_snp: ::std::option::Option<crate::types::AmdSevSnpEnum>,
    /// <p>Number of CPU cores to allocate.</p>
    pub core_count: ::std::option::Option<i32>,
    /// <p>Number of threads per CPU core.</p>
    pub threads_per_core: ::std::option::Option<i32>,
}
impl CpuOptionsRequest {
    /// <p>AMD Secure Encrypted Virtualization configuration.</p>
    pub fn amd_sev_snp(&self) -> ::std::option::Option<&crate::types::AmdSevSnpEnum> {
        self.amd_sev_snp.as_ref()
    }
    /// <p>Number of CPU cores to allocate.</p>
    pub fn core_count(&self) -> ::std::option::Option<i32> {
        self.core_count
    }
    /// <p>Number of threads per CPU core.</p>
    pub fn threads_per_core(&self) -> ::std::option::Option<i32> {
        self.threads_per_core
    }
}
impl CpuOptionsRequest {
    /// Creates a new builder-style object to manufacture [`CpuOptionsRequest`](crate::types::CpuOptionsRequest).
    pub fn builder() -> crate::types::builders::CpuOptionsRequestBuilder {
        crate::types::builders::CpuOptionsRequestBuilder::default()
    }
}

/// A builder for [`CpuOptionsRequest`](crate::types::CpuOptionsRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CpuOptionsRequestBuilder {
    pub(crate) amd_sev_snp: ::std::option::Option<crate::types::AmdSevSnpEnum>,
    pub(crate) core_count: ::std::option::Option<i32>,
    pub(crate) threads_per_core: ::std::option::Option<i32>,
}
impl CpuOptionsRequestBuilder {
    /// <p>AMD Secure Encrypted Virtualization configuration.</p>
    pub fn amd_sev_snp(mut self, input: crate::types::AmdSevSnpEnum) -> Self {
        self.amd_sev_snp = ::std::option::Option::Some(input);
        self
    }
    /// <p>AMD Secure Encrypted Virtualization configuration.</p>
    pub fn set_amd_sev_snp(mut self, input: ::std::option::Option<crate::types::AmdSevSnpEnum>) -> Self {
        self.amd_sev_snp = input;
        self
    }
    /// <p>AMD Secure Encrypted Virtualization configuration.</p>
    pub fn get_amd_sev_snp(&self) -> &::std::option::Option<crate::types::AmdSevSnpEnum> {
        &self.amd_sev_snp
    }
    /// <p>Number of CPU cores to allocate.</p>
    pub fn core_count(mut self, input: i32) -> Self {
        self.core_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of CPU cores to allocate.</p>
    pub fn set_core_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.core_count = input;
        self
    }
    /// <p>Number of CPU cores to allocate.</p>
    pub fn get_core_count(&self) -> &::std::option::Option<i32> {
        &self.core_count
    }
    /// <p>Number of threads per CPU core.</p>
    pub fn threads_per_core(mut self, input: i32) -> Self {
        self.threads_per_core = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of threads per CPU core.</p>
    pub fn set_threads_per_core(mut self, input: ::std::option::Option<i32>) -> Self {
        self.threads_per_core = input;
        self
    }
    /// <p>Number of threads per CPU core.</p>
    pub fn get_threads_per_core(&self) -> &::std::option::Option<i32> {
        &self.threads_per_core
    }
    /// Consumes the builder and constructs a [`CpuOptionsRequest`](crate::types::CpuOptionsRequest).
    pub fn build(self) -> crate::types::CpuOptionsRequest {
        crate::types::CpuOptionsRequest {
            amd_sev_snp: self.amd_sev_snp,
            core_count: self.core_count,
            threads_per_core: self.threads_per_core,
        }
    }
}
