// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configures marketplace-specific instance deployment options.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InstanceMarketOptionsRequest {
    /// <p>Specifies the type of marketplace for instance deployment.</p>
    pub market_type: ::std::option::Option<crate::types::MarketTypeEnum>,
    /// <p>Configuration options for spot instance deployment.</p>
    pub spot_options: ::std::option::Option<crate::types::SpotMarketOptions>,
}
impl InstanceMarketOptionsRequest {
    /// <p>Specifies the type of marketplace for instance deployment.</p>
    pub fn market_type(&self) -> ::std::option::Option<&crate::types::MarketTypeEnum> {
        self.market_type.as_ref()
    }
    /// <p>Configuration options for spot instance deployment.</p>
    pub fn spot_options(&self) -> ::std::option::Option<&crate::types::SpotMarketOptions> {
        self.spot_options.as_ref()
    }
}
impl InstanceMarketOptionsRequest {
    /// Creates a new builder-style object to manufacture [`InstanceMarketOptionsRequest`](crate::types::InstanceMarketOptionsRequest).
    pub fn builder() -> crate::types::builders::InstanceMarketOptionsRequestBuilder {
        crate::types::builders::InstanceMarketOptionsRequestBuilder::default()
    }
}

/// A builder for [`InstanceMarketOptionsRequest`](crate::types::InstanceMarketOptionsRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InstanceMarketOptionsRequestBuilder {
    pub(crate) market_type: ::std::option::Option<crate::types::MarketTypeEnum>,
    pub(crate) spot_options: ::std::option::Option<crate::types::SpotMarketOptions>,
}
impl InstanceMarketOptionsRequestBuilder {
    /// <p>Specifies the type of marketplace for instance deployment.</p>
    pub fn market_type(mut self, input: crate::types::MarketTypeEnum) -> Self {
        self.market_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of marketplace for instance deployment.</p>
    pub fn set_market_type(mut self, input: ::std::option::Option<crate::types::MarketTypeEnum>) -> Self {
        self.market_type = input;
        self
    }
    /// <p>Specifies the type of marketplace for instance deployment.</p>
    pub fn get_market_type(&self) -> &::std::option::Option<crate::types::MarketTypeEnum> {
        &self.market_type
    }
    /// <p>Configuration options for spot instance deployment.</p>
    pub fn spot_options(mut self, input: crate::types::SpotMarketOptions) -> Self {
        self.spot_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration options for spot instance deployment.</p>
    pub fn set_spot_options(mut self, input: ::std::option::Option<crate::types::SpotMarketOptions>) -> Self {
        self.spot_options = input;
        self
    }
    /// <p>Configuration options for spot instance deployment.</p>
    pub fn get_spot_options(&self) -> &::std::option::Option<crate::types::SpotMarketOptions> {
        &self.spot_options
    }
    /// Consumes the builder and constructs a [`InstanceMarketOptionsRequest`](crate::types::InstanceMarketOptionsRequest).
    pub fn build(self) -> crate::types::InstanceMarketOptionsRequest {
        crate::types::InstanceMarketOptionsRequest {
            market_type: self.market_type,
            spot_options: self.spot_options,
        }
    }
}
