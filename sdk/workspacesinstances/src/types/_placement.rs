// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines instance placement configuration for WorkSpace Instance.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Placement {
    /// <p>Specifies host affinity for dedicated instances.</p>
    pub affinity: ::std::option::Option<::std::string::String>,
    /// <p>Identifies the specific AWS availability zone.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>Unique identifier for placement group.</p>
    pub group_id: ::std::option::Option<::std::string::String>,
    /// <p>Name of the placement group.</p>
    pub group_name: ::std::option::Option<::std::string::String>,
    /// <p>Identifies the specific dedicated host.</p>
    pub host_id: ::std::option::Option<::std::string::String>,
    /// <p>ARN of the host resource group.</p>
    pub host_resource_group_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies partition number for partition placement groups.</p>
    pub partition_number: ::std::option::Option<i32>,
    /// <p>Defines instance tenancy configuration.</p>
    pub tenancy: ::std::option::Option<crate::types::TenancyEnum>,
}
impl Placement {
    /// <p>Specifies host affinity for dedicated instances.</p>
    pub fn affinity(&self) -> ::std::option::Option<&str> {
        self.affinity.as_deref()
    }
    /// <p>Identifies the specific AWS availability zone.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>Unique identifier for placement group.</p>
    pub fn group_id(&self) -> ::std::option::Option<&str> {
        self.group_id.as_deref()
    }
    /// <p>Name of the placement group.</p>
    pub fn group_name(&self) -> ::std::option::Option<&str> {
        self.group_name.as_deref()
    }
    /// <p>Identifies the specific dedicated host.</p>
    pub fn host_id(&self) -> ::std::option::Option<&str> {
        self.host_id.as_deref()
    }
    /// <p>ARN of the host resource group.</p>
    pub fn host_resource_group_arn(&self) -> ::std::option::Option<&str> {
        self.host_resource_group_arn.as_deref()
    }
    /// <p>Specifies partition number for partition placement groups.</p>
    pub fn partition_number(&self) -> ::std::option::Option<i32> {
        self.partition_number
    }
    /// <p>Defines instance tenancy configuration.</p>
    pub fn tenancy(&self) -> ::std::option::Option<&crate::types::TenancyEnum> {
        self.tenancy.as_ref()
    }
}
impl Placement {
    /// Creates a new builder-style object to manufacture [`Placement`](crate::types::Placement).
    pub fn builder() -> crate::types::builders::PlacementBuilder {
        crate::types::builders::PlacementBuilder::default()
    }
}

/// A builder for [`Placement`](crate::types::Placement).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PlacementBuilder {
    pub(crate) affinity: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) group_id: ::std::option::Option<::std::string::String>,
    pub(crate) group_name: ::std::option::Option<::std::string::String>,
    pub(crate) host_id: ::std::option::Option<::std::string::String>,
    pub(crate) host_resource_group_arn: ::std::option::Option<::std::string::String>,
    pub(crate) partition_number: ::std::option::Option<i32>,
    pub(crate) tenancy: ::std::option::Option<crate::types::TenancyEnum>,
}
impl PlacementBuilder {
    /// <p>Specifies host affinity for dedicated instances.</p>
    pub fn affinity(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.affinity = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies host affinity for dedicated instances.</p>
    pub fn set_affinity(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.affinity = input;
        self
    }
    /// <p>Specifies host affinity for dedicated instances.</p>
    pub fn get_affinity(&self) -> &::std::option::Option<::std::string::String> {
        &self.affinity
    }
    /// <p>Identifies the specific AWS availability zone.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifies the specific AWS availability zone.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>Identifies the specific AWS availability zone.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>Unique identifier for placement group.</p>
    pub fn group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier for placement group.</p>
    pub fn set_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_id = input;
        self
    }
    /// <p>Unique identifier for placement group.</p>
    pub fn get_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_id
    }
    /// <p>Name of the placement group.</p>
    pub fn group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the placement group.</p>
    pub fn set_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_name = input;
        self
    }
    /// <p>Name of the placement group.</p>
    pub fn get_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_name
    }
    /// <p>Identifies the specific dedicated host.</p>
    pub fn host_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.host_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifies the specific dedicated host.</p>
    pub fn set_host_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.host_id = input;
        self
    }
    /// <p>Identifies the specific dedicated host.</p>
    pub fn get_host_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.host_id
    }
    /// <p>ARN of the host resource group.</p>
    pub fn host_resource_group_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.host_resource_group_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the host resource group.</p>
    pub fn set_host_resource_group_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.host_resource_group_arn = input;
        self
    }
    /// <p>ARN of the host resource group.</p>
    pub fn get_host_resource_group_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.host_resource_group_arn
    }
    /// <p>Specifies partition number for partition placement groups.</p>
    pub fn partition_number(mut self, input: i32) -> Self {
        self.partition_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies partition number for partition placement groups.</p>
    pub fn set_partition_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.partition_number = input;
        self
    }
    /// <p>Specifies partition number for partition placement groups.</p>
    pub fn get_partition_number(&self) -> &::std::option::Option<i32> {
        &self.partition_number
    }
    /// <p>Defines instance tenancy configuration.</p>
    pub fn tenancy(mut self, input: crate::types::TenancyEnum) -> Self {
        self.tenancy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines instance tenancy configuration.</p>
    pub fn set_tenancy(mut self, input: ::std::option::Option<crate::types::TenancyEnum>) -> Self {
        self.tenancy = input;
        self
    }
    /// <p>Defines instance tenancy configuration.</p>
    pub fn get_tenancy(&self) -> &::std::option::Option<crate::types::TenancyEnum> {
        &self.tenancy
    }
    /// Consumes the builder and constructs a [`Placement`](crate::types::Placement).
    pub fn build(self) -> crate::types::Placement {
        crate::types::Placement {
            affinity: self.affinity,
            availability_zone: self.availability_zone,
            group_id: self.group_id,
            group_name: self.group_name,
            host_id: self.host_id,
            host_resource_group_arn: self.host_resource_group_arn,
            partition_number: self.partition_number,
            tenancy: self.tenancy,
        }
    }
}
