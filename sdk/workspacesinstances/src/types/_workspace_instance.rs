// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a single WorkSpace Instance.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkspaceInstance {
    /// <p>Current provisioning state of the WorkSpace Instance.</p>
    pub provision_state: ::std::option::Option<crate::types::ProvisionStateEnum>,
    /// <p>Unique identifier for the WorkSpace Instance.</p>
    pub workspace_instance_id: ::std::option::Option<::std::string::String>,
    /// <p>Details of the associated EC2 managed instance.</p>
    pub ec2_managed_instance: ::std::option::Option<crate::types::Ec2ManagedInstance>,
}
impl WorkspaceInstance {
    /// <p>Current provisioning state of the WorkSpace Instance.</p>
    pub fn provision_state(&self) -> ::std::option::Option<&crate::types::ProvisionStateEnum> {
        self.provision_state.as_ref()
    }
    /// <p>Unique identifier for the WorkSpace Instance.</p>
    pub fn workspace_instance_id(&self) -> ::std::option::Option<&str> {
        self.workspace_instance_id.as_deref()
    }
    /// <p>Details of the associated EC2 managed instance.</p>
    pub fn ec2_managed_instance(&self) -> ::std::option::Option<&crate::types::Ec2ManagedInstance> {
        self.ec2_managed_instance.as_ref()
    }
}
impl WorkspaceInstance {
    /// Creates a new builder-style object to manufacture [`WorkspaceInstance`](crate::types::WorkspaceInstance).
    pub fn builder() -> crate::types::builders::WorkspaceInstanceBuilder {
        crate::types::builders::WorkspaceInstanceBuilder::default()
    }
}

/// A builder for [`WorkspaceInstance`](crate::types::WorkspaceInstance).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WorkspaceInstanceBuilder {
    pub(crate) provision_state: ::std::option::Option<crate::types::ProvisionStateEnum>,
    pub(crate) workspace_instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) ec2_managed_instance: ::std::option::Option<crate::types::Ec2ManagedInstance>,
}
impl WorkspaceInstanceBuilder {
    /// <p>Current provisioning state of the WorkSpace Instance.</p>
    pub fn provision_state(mut self, input: crate::types::ProvisionStateEnum) -> Self {
        self.provision_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Current provisioning state of the WorkSpace Instance.</p>
    pub fn set_provision_state(mut self, input: ::std::option::Option<crate::types::ProvisionStateEnum>) -> Self {
        self.provision_state = input;
        self
    }
    /// <p>Current provisioning state of the WorkSpace Instance.</p>
    pub fn get_provision_state(&self) -> &::std::option::Option<crate::types::ProvisionStateEnum> {
        &self.provision_state
    }
    /// <p>Unique identifier for the WorkSpace Instance.</p>
    pub fn workspace_instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier for the WorkSpace Instance.</p>
    pub fn set_workspace_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_instance_id = input;
        self
    }
    /// <p>Unique identifier for the WorkSpace Instance.</p>
    pub fn get_workspace_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_instance_id
    }
    /// <p>Details of the associated EC2 managed instance.</p>
    pub fn ec2_managed_instance(mut self, input: crate::types::Ec2ManagedInstance) -> Self {
        self.ec2_managed_instance = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details of the associated EC2 managed instance.</p>
    pub fn set_ec2_managed_instance(mut self, input: ::std::option::Option<crate::types::Ec2ManagedInstance>) -> Self {
        self.ec2_managed_instance = input;
        self
    }
    /// <p>Details of the associated EC2 managed instance.</p>
    pub fn get_ec2_managed_instance(&self) -> &::std::option::Option<crate::types::Ec2ManagedInstance> {
        &self.ec2_managed_instance
    }
    /// Consumes the builder and constructs a [`WorkspaceInstance`](crate::types::WorkspaceInstance).
    pub fn build(self) -> crate::types::WorkspaceInstance {
        crate::types::WorkspaceInstance {
            provision_state: self.provision_state,
            workspace_instance_id: self.workspace_instance_id,
            ec2_managed_instance: self.ec2_managed_instance,
        }
    }
}
