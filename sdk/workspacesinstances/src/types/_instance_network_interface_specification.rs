// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines network interface configuration for WorkSpace Instance.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct InstanceNetworkInterfaceSpecification {
    /// <p>Enables carrier IP address association.</p>
    pub associate_carrier_ip_address: ::std::option::Option<bool>,
    /// <p>Enables public IP address assignment.</p>
    pub associate_public_ip_address: ::std::option::Option<bool>,
    /// <p>Configures network connection tracking parameters.</p>
    pub connection_tracking_specification: ::std::option::Option<crate::types::ConnectionTrackingSpecificationRequest>,
    /// <p>Descriptive text for the network interface.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Unique index for the network interface.</p>
    pub device_index: ::std::option::Option<i32>,
    /// <p>Configures Elastic Network Adapter Scalable Reliable Datagram settings.</p>
    pub ena_srd_specification: ::std::option::Option<crate::types::EnaSrdSpecificationRequest>,
    /// <p>Specifies the type of network interface.</p>
    pub interface_type: ::std::option::Option<crate::types::InterfaceTypeEnum>,
    /// <p>IPv4 prefix configurations for the interface.</p>
    pub ipv4_prefixes: ::std::option::Option<::std::vec::Vec<crate::types::Ipv4PrefixSpecificationRequest>>,
    /// <p>Number of IPv4 prefixes to assign.</p>
    pub ipv4_prefix_count: ::std::option::Option<i32>,
    /// <p>Number of IPv6 addresses to assign.</p>
    pub ipv6_address_count: ::std::option::Option<i32>,
    /// <p>Specific IPv6 addresses for the interface.</p>
    pub ipv6_addresses: ::std::option::Option<::std::vec::Vec<crate::types::InstanceIpv6Address>>,
    /// <p>IPv6 prefix configurations for the interface.</p>
    pub ipv6_prefixes: ::std::option::Option<::std::vec::Vec<crate::types::Ipv6PrefixSpecificationRequest>>,
    /// <p>Number of IPv6 prefixes to assign.</p>
    pub ipv6_prefix_count: ::std::option::Option<i32>,
    /// <p>Index of the network card for multiple network interfaces.</p>
    pub network_card_index: ::std::option::Option<i32>,
    /// <p>Unique identifier for the network interface.</p>
    pub network_interface_id: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the primary IPv6 configuration.</p>
    pub primary_ipv6: ::std::option::Option<bool>,
    /// <p>Primary private IP address for the interface.</p>
    pub private_ip_address: ::std::option::Option<::std::string::String>,
    /// <p>List of private IP addresses for the interface.</p>
    pub private_ip_addresses: ::std::option::Option<::std::vec::Vec<crate::types::PrivateIpAddressSpecification>>,
    /// <p>Number of additional private IP addresses to assign.</p>
    pub secondary_private_ip_address_count: ::std::option::Option<i32>,
    /// <p>Security groups associated with the network interface.</p>
    pub groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Subnet identifier for the network interface.</p>
    pub subnet_id: ::std::option::Option<::std::string::String>,
}
impl InstanceNetworkInterfaceSpecification {
    /// <p>Enables carrier IP address association.</p>
    pub fn associate_carrier_ip_address(&self) -> ::std::option::Option<bool> {
        self.associate_carrier_ip_address
    }
    /// <p>Enables public IP address assignment.</p>
    pub fn associate_public_ip_address(&self) -> ::std::option::Option<bool> {
        self.associate_public_ip_address
    }
    /// <p>Configures network connection tracking parameters.</p>
    pub fn connection_tracking_specification(&self) -> ::std::option::Option<&crate::types::ConnectionTrackingSpecificationRequest> {
        self.connection_tracking_specification.as_ref()
    }
    /// <p>Descriptive text for the network interface.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Unique index for the network interface.</p>
    pub fn device_index(&self) -> ::std::option::Option<i32> {
        self.device_index
    }
    /// <p>Configures Elastic Network Adapter Scalable Reliable Datagram settings.</p>
    pub fn ena_srd_specification(&self) -> ::std::option::Option<&crate::types::EnaSrdSpecificationRequest> {
        self.ena_srd_specification.as_ref()
    }
    /// <p>Specifies the type of network interface.</p>
    pub fn interface_type(&self) -> ::std::option::Option<&crate::types::InterfaceTypeEnum> {
        self.interface_type.as_ref()
    }
    /// <p>IPv4 prefix configurations for the interface.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ipv4_prefixes.is_none()`.
    pub fn ipv4_prefixes(&self) -> &[crate::types::Ipv4PrefixSpecificationRequest] {
        self.ipv4_prefixes.as_deref().unwrap_or_default()
    }
    /// <p>Number of IPv4 prefixes to assign.</p>
    pub fn ipv4_prefix_count(&self) -> ::std::option::Option<i32> {
        self.ipv4_prefix_count
    }
    /// <p>Number of IPv6 addresses to assign.</p>
    pub fn ipv6_address_count(&self) -> ::std::option::Option<i32> {
        self.ipv6_address_count
    }
    /// <p>Specific IPv6 addresses for the interface.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ipv6_addresses.is_none()`.
    pub fn ipv6_addresses(&self) -> &[crate::types::InstanceIpv6Address] {
        self.ipv6_addresses.as_deref().unwrap_or_default()
    }
    /// <p>IPv6 prefix configurations for the interface.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ipv6_prefixes.is_none()`.
    pub fn ipv6_prefixes(&self) -> &[crate::types::Ipv6PrefixSpecificationRequest] {
        self.ipv6_prefixes.as_deref().unwrap_or_default()
    }
    /// <p>Number of IPv6 prefixes to assign.</p>
    pub fn ipv6_prefix_count(&self) -> ::std::option::Option<i32> {
        self.ipv6_prefix_count
    }
    /// <p>Index of the network card for multiple network interfaces.</p>
    pub fn network_card_index(&self) -> ::std::option::Option<i32> {
        self.network_card_index
    }
    /// <p>Unique identifier for the network interface.</p>
    pub fn network_interface_id(&self) -> ::std::option::Option<&str> {
        self.network_interface_id.as_deref()
    }
    /// <p>Indicates the primary IPv6 configuration.</p>
    pub fn primary_ipv6(&self) -> ::std::option::Option<bool> {
        self.primary_ipv6
    }
    /// <p>Primary private IP address for the interface.</p>
    pub fn private_ip_address(&self) -> ::std::option::Option<&str> {
        self.private_ip_address.as_deref()
    }
    /// <p>List of private IP addresses for the interface.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.private_ip_addresses.is_none()`.
    pub fn private_ip_addresses(&self) -> &[crate::types::PrivateIpAddressSpecification] {
        self.private_ip_addresses.as_deref().unwrap_or_default()
    }
    /// <p>Number of additional private IP addresses to assign.</p>
    pub fn secondary_private_ip_address_count(&self) -> ::std::option::Option<i32> {
        self.secondary_private_ip_address_count
    }
    /// <p>Security groups associated with the network interface.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.groups.is_none()`.
    pub fn groups(&self) -> &[::std::string::String] {
        self.groups.as_deref().unwrap_or_default()
    }
    /// <p>Subnet identifier for the network interface.</p>
    pub fn subnet_id(&self) -> ::std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
}
impl ::std::fmt::Debug for InstanceNetworkInterfaceSpecification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InstanceNetworkInterfaceSpecification");
        formatter.field("associate_carrier_ip_address", &self.associate_carrier_ip_address);
        formatter.field("associate_public_ip_address", &self.associate_public_ip_address);
        formatter.field("connection_tracking_specification", &self.connection_tracking_specification);
        formatter.field("description", &self.description);
        formatter.field("device_index", &self.device_index);
        formatter.field("ena_srd_specification", &self.ena_srd_specification);
        formatter.field("interface_type", &self.interface_type);
        formatter.field("ipv4_prefixes", &self.ipv4_prefixes);
        formatter.field("ipv4_prefix_count", &self.ipv4_prefix_count);
        formatter.field("ipv6_address_count", &self.ipv6_address_count);
        formatter.field("ipv6_addresses", &self.ipv6_addresses);
        formatter.field("ipv6_prefixes", &self.ipv6_prefixes);
        formatter.field("ipv6_prefix_count", &self.ipv6_prefix_count);
        formatter.field("network_card_index", &self.network_card_index);
        formatter.field("network_interface_id", &self.network_interface_id);
        formatter.field("primary_ipv6", &self.primary_ipv6);
        formatter.field("private_ip_address", &"*** Sensitive Data Redacted ***");
        formatter.field("private_ip_addresses", &self.private_ip_addresses);
        formatter.field("secondary_private_ip_address_count", &self.secondary_private_ip_address_count);
        formatter.field("groups", &self.groups);
        formatter.field("subnet_id", &self.subnet_id);
        formatter.finish()
    }
}
impl InstanceNetworkInterfaceSpecification {
    /// Creates a new builder-style object to manufacture [`InstanceNetworkInterfaceSpecification`](crate::types::InstanceNetworkInterfaceSpecification).
    pub fn builder() -> crate::types::builders::InstanceNetworkInterfaceSpecificationBuilder {
        crate::types::builders::InstanceNetworkInterfaceSpecificationBuilder::default()
    }
}

/// A builder for [`InstanceNetworkInterfaceSpecification`](crate::types::InstanceNetworkInterfaceSpecification).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct InstanceNetworkInterfaceSpecificationBuilder {
    pub(crate) associate_carrier_ip_address: ::std::option::Option<bool>,
    pub(crate) associate_public_ip_address: ::std::option::Option<bool>,
    pub(crate) connection_tracking_specification: ::std::option::Option<crate::types::ConnectionTrackingSpecificationRequest>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) device_index: ::std::option::Option<i32>,
    pub(crate) ena_srd_specification: ::std::option::Option<crate::types::EnaSrdSpecificationRequest>,
    pub(crate) interface_type: ::std::option::Option<crate::types::InterfaceTypeEnum>,
    pub(crate) ipv4_prefixes: ::std::option::Option<::std::vec::Vec<crate::types::Ipv4PrefixSpecificationRequest>>,
    pub(crate) ipv4_prefix_count: ::std::option::Option<i32>,
    pub(crate) ipv6_address_count: ::std::option::Option<i32>,
    pub(crate) ipv6_addresses: ::std::option::Option<::std::vec::Vec<crate::types::InstanceIpv6Address>>,
    pub(crate) ipv6_prefixes: ::std::option::Option<::std::vec::Vec<crate::types::Ipv6PrefixSpecificationRequest>>,
    pub(crate) ipv6_prefix_count: ::std::option::Option<i32>,
    pub(crate) network_card_index: ::std::option::Option<i32>,
    pub(crate) network_interface_id: ::std::option::Option<::std::string::String>,
    pub(crate) primary_ipv6: ::std::option::Option<bool>,
    pub(crate) private_ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) private_ip_addresses: ::std::option::Option<::std::vec::Vec<crate::types::PrivateIpAddressSpecification>>,
    pub(crate) secondary_private_ip_address_count: ::std::option::Option<i32>,
    pub(crate) groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) subnet_id: ::std::option::Option<::std::string::String>,
}
impl InstanceNetworkInterfaceSpecificationBuilder {
    /// <p>Enables carrier IP address association.</p>
    pub fn associate_carrier_ip_address(mut self, input: bool) -> Self {
        self.associate_carrier_ip_address = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables carrier IP address association.</p>
    pub fn set_associate_carrier_ip_address(mut self, input: ::std::option::Option<bool>) -> Self {
        self.associate_carrier_ip_address = input;
        self
    }
    /// <p>Enables carrier IP address association.</p>
    pub fn get_associate_carrier_ip_address(&self) -> &::std::option::Option<bool> {
        &self.associate_carrier_ip_address
    }
    /// <p>Enables public IP address assignment.</p>
    pub fn associate_public_ip_address(mut self, input: bool) -> Self {
        self.associate_public_ip_address = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables public IP address assignment.</p>
    pub fn set_associate_public_ip_address(mut self, input: ::std::option::Option<bool>) -> Self {
        self.associate_public_ip_address = input;
        self
    }
    /// <p>Enables public IP address assignment.</p>
    pub fn get_associate_public_ip_address(&self) -> &::std::option::Option<bool> {
        &self.associate_public_ip_address
    }
    /// <p>Configures network connection tracking parameters.</p>
    pub fn connection_tracking_specification(mut self, input: crate::types::ConnectionTrackingSpecificationRequest) -> Self {
        self.connection_tracking_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configures network connection tracking parameters.</p>
    pub fn set_connection_tracking_specification(
        mut self,
        input: ::std::option::Option<crate::types::ConnectionTrackingSpecificationRequest>,
    ) -> Self {
        self.connection_tracking_specification = input;
        self
    }
    /// <p>Configures network connection tracking parameters.</p>
    pub fn get_connection_tracking_specification(&self) -> &::std::option::Option<crate::types::ConnectionTrackingSpecificationRequest> {
        &self.connection_tracking_specification
    }
    /// <p>Descriptive text for the network interface.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Descriptive text for the network interface.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Descriptive text for the network interface.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Unique index for the network interface.</p>
    pub fn device_index(mut self, input: i32) -> Self {
        self.device_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>Unique index for the network interface.</p>
    pub fn set_device_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.device_index = input;
        self
    }
    /// <p>Unique index for the network interface.</p>
    pub fn get_device_index(&self) -> &::std::option::Option<i32> {
        &self.device_index
    }
    /// <p>Configures Elastic Network Adapter Scalable Reliable Datagram settings.</p>
    pub fn ena_srd_specification(mut self, input: crate::types::EnaSrdSpecificationRequest) -> Self {
        self.ena_srd_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configures Elastic Network Adapter Scalable Reliable Datagram settings.</p>
    pub fn set_ena_srd_specification(mut self, input: ::std::option::Option<crate::types::EnaSrdSpecificationRequest>) -> Self {
        self.ena_srd_specification = input;
        self
    }
    /// <p>Configures Elastic Network Adapter Scalable Reliable Datagram settings.</p>
    pub fn get_ena_srd_specification(&self) -> &::std::option::Option<crate::types::EnaSrdSpecificationRequest> {
        &self.ena_srd_specification
    }
    /// <p>Specifies the type of network interface.</p>
    pub fn interface_type(mut self, input: crate::types::InterfaceTypeEnum) -> Self {
        self.interface_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of network interface.</p>
    pub fn set_interface_type(mut self, input: ::std::option::Option<crate::types::InterfaceTypeEnum>) -> Self {
        self.interface_type = input;
        self
    }
    /// <p>Specifies the type of network interface.</p>
    pub fn get_interface_type(&self) -> &::std::option::Option<crate::types::InterfaceTypeEnum> {
        &self.interface_type
    }
    /// Appends an item to `ipv4_prefixes`.
    ///
    /// To override the contents of this collection use [`set_ipv4_prefixes`](Self::set_ipv4_prefixes).
    ///
    /// <p>IPv4 prefix configurations for the interface.</p>
    pub fn ipv4_prefixes(mut self, input: crate::types::Ipv4PrefixSpecificationRequest) -> Self {
        let mut v = self.ipv4_prefixes.unwrap_or_default();
        v.push(input);
        self.ipv4_prefixes = ::std::option::Option::Some(v);
        self
    }
    /// <p>IPv4 prefix configurations for the interface.</p>
    pub fn set_ipv4_prefixes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Ipv4PrefixSpecificationRequest>>) -> Self {
        self.ipv4_prefixes = input;
        self
    }
    /// <p>IPv4 prefix configurations for the interface.</p>
    pub fn get_ipv4_prefixes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Ipv4PrefixSpecificationRequest>> {
        &self.ipv4_prefixes
    }
    /// <p>Number of IPv4 prefixes to assign.</p>
    pub fn ipv4_prefix_count(mut self, input: i32) -> Self {
        self.ipv4_prefix_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of IPv4 prefixes to assign.</p>
    pub fn set_ipv4_prefix_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.ipv4_prefix_count = input;
        self
    }
    /// <p>Number of IPv4 prefixes to assign.</p>
    pub fn get_ipv4_prefix_count(&self) -> &::std::option::Option<i32> {
        &self.ipv4_prefix_count
    }
    /// <p>Number of IPv6 addresses to assign.</p>
    pub fn ipv6_address_count(mut self, input: i32) -> Self {
        self.ipv6_address_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of IPv6 addresses to assign.</p>
    pub fn set_ipv6_address_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.ipv6_address_count = input;
        self
    }
    /// <p>Number of IPv6 addresses to assign.</p>
    pub fn get_ipv6_address_count(&self) -> &::std::option::Option<i32> {
        &self.ipv6_address_count
    }
    /// Appends an item to `ipv6_addresses`.
    ///
    /// To override the contents of this collection use [`set_ipv6_addresses`](Self::set_ipv6_addresses).
    ///
    /// <p>Specific IPv6 addresses for the interface.</p>
    pub fn ipv6_addresses(mut self, input: crate::types::InstanceIpv6Address) -> Self {
        let mut v = self.ipv6_addresses.unwrap_or_default();
        v.push(input);
        self.ipv6_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specific IPv6 addresses for the interface.</p>
    pub fn set_ipv6_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InstanceIpv6Address>>) -> Self {
        self.ipv6_addresses = input;
        self
    }
    /// <p>Specific IPv6 addresses for the interface.</p>
    pub fn get_ipv6_addresses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InstanceIpv6Address>> {
        &self.ipv6_addresses
    }
    /// Appends an item to `ipv6_prefixes`.
    ///
    /// To override the contents of this collection use [`set_ipv6_prefixes`](Self::set_ipv6_prefixes).
    ///
    /// <p>IPv6 prefix configurations for the interface.</p>
    pub fn ipv6_prefixes(mut self, input: crate::types::Ipv6PrefixSpecificationRequest) -> Self {
        let mut v = self.ipv6_prefixes.unwrap_or_default();
        v.push(input);
        self.ipv6_prefixes = ::std::option::Option::Some(v);
        self
    }
    /// <p>IPv6 prefix configurations for the interface.</p>
    pub fn set_ipv6_prefixes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Ipv6PrefixSpecificationRequest>>) -> Self {
        self.ipv6_prefixes = input;
        self
    }
    /// <p>IPv6 prefix configurations for the interface.</p>
    pub fn get_ipv6_prefixes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Ipv6PrefixSpecificationRequest>> {
        &self.ipv6_prefixes
    }
    /// <p>Number of IPv6 prefixes to assign.</p>
    pub fn ipv6_prefix_count(mut self, input: i32) -> Self {
        self.ipv6_prefix_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of IPv6 prefixes to assign.</p>
    pub fn set_ipv6_prefix_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.ipv6_prefix_count = input;
        self
    }
    /// <p>Number of IPv6 prefixes to assign.</p>
    pub fn get_ipv6_prefix_count(&self) -> &::std::option::Option<i32> {
        &self.ipv6_prefix_count
    }
    /// <p>Index of the network card for multiple network interfaces.</p>
    pub fn network_card_index(mut self, input: i32) -> Self {
        self.network_card_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>Index of the network card for multiple network interfaces.</p>
    pub fn set_network_card_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.network_card_index = input;
        self
    }
    /// <p>Index of the network card for multiple network interfaces.</p>
    pub fn get_network_card_index(&self) -> &::std::option::Option<i32> {
        &self.network_card_index
    }
    /// <p>Unique identifier for the network interface.</p>
    pub fn network_interface_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_interface_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier for the network interface.</p>
    pub fn set_network_interface_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_interface_id = input;
        self
    }
    /// <p>Unique identifier for the network interface.</p>
    pub fn get_network_interface_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_interface_id
    }
    /// <p>Indicates the primary IPv6 configuration.</p>
    pub fn primary_ipv6(mut self, input: bool) -> Self {
        self.primary_ipv6 = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the primary IPv6 configuration.</p>
    pub fn set_primary_ipv6(mut self, input: ::std::option::Option<bool>) -> Self {
        self.primary_ipv6 = input;
        self
    }
    /// <p>Indicates the primary IPv6 configuration.</p>
    pub fn get_primary_ipv6(&self) -> &::std::option::Option<bool> {
        &self.primary_ipv6
    }
    /// <p>Primary private IP address for the interface.</p>
    pub fn private_ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.private_ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Primary private IP address for the interface.</p>
    pub fn set_private_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.private_ip_address = input;
        self
    }
    /// <p>Primary private IP address for the interface.</p>
    pub fn get_private_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.private_ip_address
    }
    /// Appends an item to `private_ip_addresses`.
    ///
    /// To override the contents of this collection use [`set_private_ip_addresses`](Self::set_private_ip_addresses).
    ///
    /// <p>List of private IP addresses for the interface.</p>
    pub fn private_ip_addresses(mut self, input: crate::types::PrivateIpAddressSpecification) -> Self {
        let mut v = self.private_ip_addresses.unwrap_or_default();
        v.push(input);
        self.private_ip_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of private IP addresses for the interface.</p>
    pub fn set_private_ip_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PrivateIpAddressSpecification>>) -> Self {
        self.private_ip_addresses = input;
        self
    }
    /// <p>List of private IP addresses for the interface.</p>
    pub fn get_private_ip_addresses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PrivateIpAddressSpecification>> {
        &self.private_ip_addresses
    }
    /// <p>Number of additional private IP addresses to assign.</p>
    pub fn secondary_private_ip_address_count(mut self, input: i32) -> Self {
        self.secondary_private_ip_address_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of additional private IP addresses to assign.</p>
    pub fn set_secondary_private_ip_address_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.secondary_private_ip_address_count = input;
        self
    }
    /// <p>Number of additional private IP addresses to assign.</p>
    pub fn get_secondary_private_ip_address_count(&self) -> &::std::option::Option<i32> {
        &self.secondary_private_ip_address_count
    }
    /// Appends an item to `groups`.
    ///
    /// To override the contents of this collection use [`set_groups`](Self::set_groups).
    ///
    /// <p>Security groups associated with the network interface.</p>
    pub fn groups(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.groups.unwrap_or_default();
        v.push(input.into());
        self.groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>Security groups associated with the network interface.</p>
    pub fn set_groups(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.groups = input;
        self
    }
    /// <p>Security groups associated with the network interface.</p>
    pub fn get_groups(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.groups
    }
    /// <p>Subnet identifier for the network interface.</p>
    pub fn subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Subnet identifier for the network interface.</p>
    pub fn set_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>Subnet identifier for the network interface.</p>
    pub fn get_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_id
    }
    /// Consumes the builder and constructs a [`InstanceNetworkInterfaceSpecification`](crate::types::InstanceNetworkInterfaceSpecification).
    pub fn build(self) -> crate::types::InstanceNetworkInterfaceSpecification {
        crate::types::InstanceNetworkInterfaceSpecification {
            associate_carrier_ip_address: self.associate_carrier_ip_address,
            associate_public_ip_address: self.associate_public_ip_address,
            connection_tracking_specification: self.connection_tracking_specification,
            description: self.description,
            device_index: self.device_index,
            ena_srd_specification: self.ena_srd_specification,
            interface_type: self.interface_type,
            ipv4_prefixes: self.ipv4_prefixes,
            ipv4_prefix_count: self.ipv4_prefix_count,
            ipv6_address_count: self.ipv6_address_count,
            ipv6_addresses: self.ipv6_addresses,
            ipv6_prefixes: self.ipv6_prefixes,
            ipv6_prefix_count: self.ipv6_prefix_count,
            network_card_index: self.network_card_index,
            network_interface_id: self.network_interface_id,
            primary_ipv6: self.primary_ipv6,
            private_ip_address: self.private_ip_address,
            private_ip_addresses: self.private_ip_addresses,
            secondary_private_ip_address_count: self.secondary_private_ip_address_count,
            groups: self.groups,
            subnet_id: self.subnet_id,
        }
    }
}
impl ::std::fmt::Debug for InstanceNetworkInterfaceSpecificationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InstanceNetworkInterfaceSpecificationBuilder");
        formatter.field("associate_carrier_ip_address", &self.associate_carrier_ip_address);
        formatter.field("associate_public_ip_address", &self.associate_public_ip_address);
        formatter.field("connection_tracking_specification", &self.connection_tracking_specification);
        formatter.field("description", &self.description);
        formatter.field("device_index", &self.device_index);
        formatter.field("ena_srd_specification", &self.ena_srd_specification);
        formatter.field("interface_type", &self.interface_type);
        formatter.field("ipv4_prefixes", &self.ipv4_prefixes);
        formatter.field("ipv4_prefix_count", &self.ipv4_prefix_count);
        formatter.field("ipv6_address_count", &self.ipv6_address_count);
        formatter.field("ipv6_addresses", &self.ipv6_addresses);
        formatter.field("ipv6_prefixes", &self.ipv6_prefixes);
        formatter.field("ipv6_prefix_count", &self.ipv6_prefix_count);
        formatter.field("network_card_index", &self.network_card_index);
        formatter.field("network_interface_id", &self.network_interface_id);
        formatter.field("primary_ipv6", &self.primary_ipv6);
        formatter.field("private_ip_address", &"*** Sensitive Data Redacted ***");
        formatter.field("private_ip_addresses", &self.private_ip_addresses);
        formatter.field("secondary_private_ip_address_count", &self.secondary_private_ip_address_count);
        formatter.field("groups", &self.groups);
        formatter.field("subnet_id", &self.subnet_id);
        formatter.finish()
    }
}
