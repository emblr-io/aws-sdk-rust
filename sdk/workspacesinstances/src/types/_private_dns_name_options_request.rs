// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configures private DNS name settings for WorkSpace Instance.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PrivateDnsNameOptionsRequest {
    /// <p>Specifies the type of hostname configuration.</p>
    pub hostname_type: ::std::option::Option<crate::types::HostnameTypeEnum>,
    /// <p>Enables DNS A record for resource name resolution.</p>
    pub enable_resource_name_dns_a_record: ::std::option::Option<bool>,
    /// <p>Enables DNS AAAA record for resource name resolution.</p>
    pub enable_resource_name_dns_aaaa_record: ::std::option::Option<bool>,
}
impl PrivateDnsNameOptionsRequest {
    /// <p>Specifies the type of hostname configuration.</p>
    pub fn hostname_type(&self) -> ::std::option::Option<&crate::types::HostnameTypeEnum> {
        self.hostname_type.as_ref()
    }
    /// <p>Enables DNS A record for resource name resolution.</p>
    pub fn enable_resource_name_dns_a_record(&self) -> ::std::option::Option<bool> {
        self.enable_resource_name_dns_a_record
    }
    /// <p>Enables DNS AAAA record for resource name resolution.</p>
    pub fn enable_resource_name_dns_aaaa_record(&self) -> ::std::option::Option<bool> {
        self.enable_resource_name_dns_aaaa_record
    }
}
impl PrivateDnsNameOptionsRequest {
    /// Creates a new builder-style object to manufacture [`PrivateDnsNameOptionsRequest`](crate::types::PrivateDnsNameOptionsRequest).
    pub fn builder() -> crate::types::builders::PrivateDnsNameOptionsRequestBuilder {
        crate::types::builders::PrivateDnsNameOptionsRequestBuilder::default()
    }
}

/// A builder for [`PrivateDnsNameOptionsRequest`](crate::types::PrivateDnsNameOptionsRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PrivateDnsNameOptionsRequestBuilder {
    pub(crate) hostname_type: ::std::option::Option<crate::types::HostnameTypeEnum>,
    pub(crate) enable_resource_name_dns_a_record: ::std::option::Option<bool>,
    pub(crate) enable_resource_name_dns_aaaa_record: ::std::option::Option<bool>,
}
impl PrivateDnsNameOptionsRequestBuilder {
    /// <p>Specifies the type of hostname configuration.</p>
    pub fn hostname_type(mut self, input: crate::types::HostnameTypeEnum) -> Self {
        self.hostname_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of hostname configuration.</p>
    pub fn set_hostname_type(mut self, input: ::std::option::Option<crate::types::HostnameTypeEnum>) -> Self {
        self.hostname_type = input;
        self
    }
    /// <p>Specifies the type of hostname configuration.</p>
    pub fn get_hostname_type(&self) -> &::std::option::Option<crate::types::HostnameTypeEnum> {
        &self.hostname_type
    }
    /// <p>Enables DNS A record for resource name resolution.</p>
    pub fn enable_resource_name_dns_a_record(mut self, input: bool) -> Self {
        self.enable_resource_name_dns_a_record = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables DNS A record for resource name resolution.</p>
    pub fn set_enable_resource_name_dns_a_record(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_resource_name_dns_a_record = input;
        self
    }
    /// <p>Enables DNS A record for resource name resolution.</p>
    pub fn get_enable_resource_name_dns_a_record(&self) -> &::std::option::Option<bool> {
        &self.enable_resource_name_dns_a_record
    }
    /// <p>Enables DNS AAAA record for resource name resolution.</p>
    pub fn enable_resource_name_dns_aaaa_record(mut self, input: bool) -> Self {
        self.enable_resource_name_dns_aaaa_record = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables DNS AAAA record for resource name resolution.</p>
    pub fn set_enable_resource_name_dns_aaaa_record(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_resource_name_dns_aaaa_record = input;
        self
    }
    /// <p>Enables DNS AAAA record for resource name resolution.</p>
    pub fn get_enable_resource_name_dns_aaaa_record(&self) -> &::std::option::Option<bool> {
        &self.enable_resource_name_dns_aaaa_record
    }
    /// Consumes the builder and constructs a [`PrivateDnsNameOptionsRequest`](crate::types::PrivateDnsNameOptionsRequest).
    pub fn build(self) -> crate::types::PrivateDnsNameOptionsRequest {
        crate::types::PrivateDnsNameOptionsRequest {
            hostname_type: self.hostname_type,
            enable_resource_name_dns_a_record: self.enable_resource_name_dns_a_record,
            enable_resource_name_dns_aaaa_record: self.enable_resource_name_dns_aaaa_record,
        }
    }
}
