// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines private IP address configuration for network interface.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PrivateIpAddressSpecification {
    /// <p>Indicates if this is the primary private IP address.</p>
    pub primary: ::std::option::Option<bool>,
    /// <p>Specific private IP address for the network interface.</p>
    pub private_ip_address: ::std::option::Option<::std::string::String>,
}
impl PrivateIpAddressSpecification {
    /// <p>Indicates if this is the primary private IP address.</p>
    pub fn primary(&self) -> ::std::option::Option<bool> {
        self.primary
    }
    /// <p>Specific private IP address for the network interface.</p>
    pub fn private_ip_address(&self) -> ::std::option::Option<&str> {
        self.private_ip_address.as_deref()
    }
}
impl ::std::fmt::Debug for PrivateIpAddressSpecification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PrivateIpAddressSpecification");
        formatter.field("primary", &self.primary);
        formatter.field("private_ip_address", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl PrivateIpAddressSpecification {
    /// Creates a new builder-style object to manufacture [`PrivateIpAddressSpecification`](crate::types::PrivateIpAddressSpecification).
    pub fn builder() -> crate::types::builders::PrivateIpAddressSpecificationBuilder {
        crate::types::builders::PrivateIpAddressSpecificationBuilder::default()
    }
}

/// A builder for [`PrivateIpAddressSpecification`](crate::types::PrivateIpAddressSpecification).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct PrivateIpAddressSpecificationBuilder {
    pub(crate) primary: ::std::option::Option<bool>,
    pub(crate) private_ip_address: ::std::option::Option<::std::string::String>,
}
impl PrivateIpAddressSpecificationBuilder {
    /// <p>Indicates if this is the primary private IP address.</p>
    pub fn primary(mut self, input: bool) -> Self {
        self.primary = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates if this is the primary private IP address.</p>
    pub fn set_primary(mut self, input: ::std::option::Option<bool>) -> Self {
        self.primary = input;
        self
    }
    /// <p>Indicates if this is the primary private IP address.</p>
    pub fn get_primary(&self) -> &::std::option::Option<bool> {
        &self.primary
    }
    /// <p>Specific private IP address for the network interface.</p>
    pub fn private_ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.private_ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specific private IP address for the network interface.</p>
    pub fn set_private_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.private_ip_address = input;
        self
    }
    /// <p>Specific private IP address for the network interface.</p>
    pub fn get_private_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.private_ip_address
    }
    /// Consumes the builder and constructs a [`PrivateIpAddressSpecification`](crate::types::PrivateIpAddressSpecification).
    pub fn build(self) -> crate::types::PrivateIpAddressSpecification {
        crate::types::PrivateIpAddressSpecification {
            primary: self.primary,
            private_ip_address: self.private_ip_address,
        }
    }
}
impl ::std::fmt::Debug for PrivateIpAddressSpecificationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PrivateIpAddressSpecificationBuilder");
        formatter.field("primary", &self.primary);
        formatter.field("private_ip_address", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
