// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines configuration for spot instance deployment.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SpotMarketOptions {
    /// <p>Duration of spot instance block reservation.</p>
    pub block_duration_minutes: ::std::option::Option<i32>,
    /// <p>Specifies behavior when spot instance is interrupted.</p>
    pub instance_interruption_behavior: ::std::option::Option<crate::types::InstanceInterruptionBehaviorEnum>,
    /// <p>Maximum hourly price for spot instance.</p>
    pub max_price: ::std::option::Option<::std::string::String>,
    /// <p>Defines the type of spot instance request.</p>
    pub spot_instance_type: ::std::option::Option<crate::types::SpotInstanceTypeEnum>,
    /// <p>Timestamp until which spot instance request is valid.</p>
    pub valid_until_utc: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl SpotMarketOptions {
    /// <p>Duration of spot instance block reservation.</p>
    pub fn block_duration_minutes(&self) -> ::std::option::Option<i32> {
        self.block_duration_minutes
    }
    /// <p>Specifies behavior when spot instance is interrupted.</p>
    pub fn instance_interruption_behavior(&self) -> ::std::option::Option<&crate::types::InstanceInterruptionBehaviorEnum> {
        self.instance_interruption_behavior.as_ref()
    }
    /// <p>Maximum hourly price for spot instance.</p>
    pub fn max_price(&self) -> ::std::option::Option<&str> {
        self.max_price.as_deref()
    }
    /// <p>Defines the type of spot instance request.</p>
    pub fn spot_instance_type(&self) -> ::std::option::Option<&crate::types::SpotInstanceTypeEnum> {
        self.spot_instance_type.as_ref()
    }
    /// <p>Timestamp until which spot instance request is valid.</p>
    pub fn valid_until_utc(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.valid_until_utc.as_ref()
    }
}
impl SpotMarketOptions {
    /// Creates a new builder-style object to manufacture [`SpotMarketOptions`](crate::types::SpotMarketOptions).
    pub fn builder() -> crate::types::builders::SpotMarketOptionsBuilder {
        crate::types::builders::SpotMarketOptionsBuilder::default()
    }
}

/// A builder for [`SpotMarketOptions`](crate::types::SpotMarketOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SpotMarketOptionsBuilder {
    pub(crate) block_duration_minutes: ::std::option::Option<i32>,
    pub(crate) instance_interruption_behavior: ::std::option::Option<crate::types::InstanceInterruptionBehaviorEnum>,
    pub(crate) max_price: ::std::option::Option<::std::string::String>,
    pub(crate) spot_instance_type: ::std::option::Option<crate::types::SpotInstanceTypeEnum>,
    pub(crate) valid_until_utc: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl SpotMarketOptionsBuilder {
    /// <p>Duration of spot instance block reservation.</p>
    pub fn block_duration_minutes(mut self, input: i32) -> Self {
        self.block_duration_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Duration of spot instance block reservation.</p>
    pub fn set_block_duration_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.block_duration_minutes = input;
        self
    }
    /// <p>Duration of spot instance block reservation.</p>
    pub fn get_block_duration_minutes(&self) -> &::std::option::Option<i32> {
        &self.block_duration_minutes
    }
    /// <p>Specifies behavior when spot instance is interrupted.</p>
    pub fn instance_interruption_behavior(mut self, input: crate::types::InstanceInterruptionBehaviorEnum) -> Self {
        self.instance_interruption_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies behavior when spot instance is interrupted.</p>
    pub fn set_instance_interruption_behavior(mut self, input: ::std::option::Option<crate::types::InstanceInterruptionBehaviorEnum>) -> Self {
        self.instance_interruption_behavior = input;
        self
    }
    /// <p>Specifies behavior when spot instance is interrupted.</p>
    pub fn get_instance_interruption_behavior(&self) -> &::std::option::Option<crate::types::InstanceInterruptionBehaviorEnum> {
        &self.instance_interruption_behavior
    }
    /// <p>Maximum hourly price for spot instance.</p>
    pub fn max_price(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.max_price = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Maximum hourly price for spot instance.</p>
    pub fn set_max_price(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.max_price = input;
        self
    }
    /// <p>Maximum hourly price for spot instance.</p>
    pub fn get_max_price(&self) -> &::std::option::Option<::std::string::String> {
        &self.max_price
    }
    /// <p>Defines the type of spot instance request.</p>
    pub fn spot_instance_type(mut self, input: crate::types::SpotInstanceTypeEnum) -> Self {
        self.spot_instance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the type of spot instance request.</p>
    pub fn set_spot_instance_type(mut self, input: ::std::option::Option<crate::types::SpotInstanceTypeEnum>) -> Self {
        self.spot_instance_type = input;
        self
    }
    /// <p>Defines the type of spot instance request.</p>
    pub fn get_spot_instance_type(&self) -> &::std::option::Option<crate::types::SpotInstanceTypeEnum> {
        &self.spot_instance_type
    }
    /// <p>Timestamp until which spot instance request is valid.</p>
    pub fn valid_until_utc(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.valid_until_utc = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp until which spot instance request is valid.</p>
    pub fn set_valid_until_utc(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.valid_until_utc = input;
        self
    }
    /// <p>Timestamp until which spot instance request is valid.</p>
    pub fn get_valid_until_utc(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.valid_until_utc
    }
    /// Consumes the builder and constructs a [`SpotMarketOptions`](crate::types::SpotMarketOptions).
    pub fn build(self) -> crate::types::SpotMarketOptions {
        crate::types::SpotMarketOptions {
            block_duration_minutes: self.block_duration_minutes,
            instance_interruption_behavior: self.instance_interruption_behavior,
            max_price: self.max_price,
            spot_instance_type: self.spot_instance_type,
            valid_until_utc: self.valid_until_utc,
        }
    }
}
