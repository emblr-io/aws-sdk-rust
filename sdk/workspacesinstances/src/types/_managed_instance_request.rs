// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines comprehensive configuration for a managed WorkSpace Instance.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ManagedInstanceRequest {
    /// <p>Configures block device mappings for storage.</p>
    pub block_device_mappings: ::std::option::Option<::std::vec::Vec<crate::types::BlockDeviceMappingRequest>>,
    /// <p>Specifies capacity reservation preferences.</p>
    pub capacity_reservation_specification: ::std::option::Option<crate::types::CapacityReservationSpecification>,
    /// <p>Configures CPU-specific settings.</p>
    pub cpu_options: ::std::option::Option<crate::types::CpuOptionsRequest>,
    /// <p>Defines CPU credit configuration for burstable instances.</p>
    pub credit_specification: ::std::option::Option<crate::types::CreditSpecificationRequest>,
    /// <p>Prevents API-initiated instance stop.</p>
    pub disable_api_stop: ::std::option::Option<bool>,
    /// <p>Enables optimized EBS performance.</p>
    pub ebs_optimized: ::std::option::Option<bool>,
    /// <p>Enables primary IPv6 address configuration.</p>
    pub enable_primary_ipv6: ::std::option::Option<bool>,
    /// <p>Configures AWS Nitro Enclave settings.</p>
    pub enclave_options: ::std::option::Option<crate::types::EnclaveOptionsRequest>,
    /// <p>Configures instance hibernation capabilities.</p>
    pub hibernation_options: ::std::option::Option<crate::types::HibernationOptionsRequest>,
    /// <p>Specifies IAM instance profile configuration.</p>
    pub iam_instance_profile: ::std::option::Option<crate::types::IamInstanceProfileSpecification>,
    /// <p>Identifies the Amazon Machine Image (AMI) for the instance.</p>
    pub image_id: ::std::option::Option<::std::string::String>,
    /// <p>Configures marketplace-specific deployment options.</p>
    pub instance_market_options: ::std::option::Option<crate::types::InstanceMarketOptionsRequest>,
    /// <p>Specifies the WorkSpace Instance type.</p>
    pub instance_type: ::std::option::Option<::std::string::String>,
    /// <p>Configures specific IPv6 addresses.</p>
    pub ipv6_addresses: ::std::option::Option<::std::vec::Vec<crate::types::InstanceIpv6Address>>,
    /// <p>Specifies number of IPv6 addresses to assign.</p>
    pub ipv6_address_count: ::std::option::Option<i32>,
    /// <p>Identifies the kernel for the instance.</p>
    pub kernel_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the key pair for instance access.</p>
    pub key_name: ::std::option::Option<::std::string::String>,
    /// <p>Configures license-related settings.</p>
    pub license_specifications: ::std::option::Option<::std::vec::Vec<crate::types::LicenseConfigurationRequest>>,
    /// <p>Defines automatic maintenance settings.</p>
    pub maintenance_options: ::std::option::Option<crate::types::InstanceMaintenanceOptionsRequest>,
    /// <p>Configures instance metadata service settings.</p>
    pub metadata_options: ::std::option::Option<crate::types::InstanceMetadataOptionsRequest>,
    /// <p>Enables or disables detailed instance monitoring.</p>
    pub monitoring: ::std::option::Option<crate::types::RunInstancesMonitoringEnabled>,
    /// <p>Configures network interface settings.</p>
    pub network_interfaces: ::std::option::Option<::std::vec::Vec<crate::types::InstanceNetworkInterfaceSpecification>>,
    /// <p>Defines network performance configuration.</p>
    pub network_performance_options: ::std::option::Option<crate::types::InstanceNetworkPerformanceOptionsRequest>,
    /// <p>Specifies instance placement preferences.</p>
    pub placement: ::std::option::Option<crate::types::Placement>,
    /// <p>Configures private DNS name settings.</p>
    pub private_dns_name_options: ::std::option::Option<crate::types::PrivateDnsNameOptionsRequest>,
    /// <p>Specifies the primary private IP address.</p>
    pub private_ip_address: ::std::option::Option<::std::string::String>,
    /// <p>Identifies the ramdisk for the instance.</p>
    pub ramdisk_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies security group identifiers.</p>
    pub security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Configures security group settings.</p>
    pub security_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Identifies the subnet for the instance.</p>
    pub subnet_id: ::std::option::Option<::std::string::String>,
    /// <p>Configures resource tagging specifications.</p>
    pub tag_specifications: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>,
    /// <p>Provides custom initialization data for the instance.</p>
    pub user_data: ::std::option::Option<::std::string::String>,
}
impl ManagedInstanceRequest {
    /// <p>Configures block device mappings for storage.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.block_device_mappings.is_none()`.
    pub fn block_device_mappings(&self) -> &[crate::types::BlockDeviceMappingRequest] {
        self.block_device_mappings.as_deref().unwrap_or_default()
    }
    /// <p>Specifies capacity reservation preferences.</p>
    pub fn capacity_reservation_specification(&self) -> ::std::option::Option<&crate::types::CapacityReservationSpecification> {
        self.capacity_reservation_specification.as_ref()
    }
    /// <p>Configures CPU-specific settings.</p>
    pub fn cpu_options(&self) -> ::std::option::Option<&crate::types::CpuOptionsRequest> {
        self.cpu_options.as_ref()
    }
    /// <p>Defines CPU credit configuration for burstable instances.</p>
    pub fn credit_specification(&self) -> ::std::option::Option<&crate::types::CreditSpecificationRequest> {
        self.credit_specification.as_ref()
    }
    /// <p>Prevents API-initiated instance stop.</p>
    pub fn disable_api_stop(&self) -> ::std::option::Option<bool> {
        self.disable_api_stop
    }
    /// <p>Enables optimized EBS performance.</p>
    pub fn ebs_optimized(&self) -> ::std::option::Option<bool> {
        self.ebs_optimized
    }
    /// <p>Enables primary IPv6 address configuration.</p>
    pub fn enable_primary_ipv6(&self) -> ::std::option::Option<bool> {
        self.enable_primary_ipv6
    }
    /// <p>Configures AWS Nitro Enclave settings.</p>
    pub fn enclave_options(&self) -> ::std::option::Option<&crate::types::EnclaveOptionsRequest> {
        self.enclave_options.as_ref()
    }
    /// <p>Configures instance hibernation capabilities.</p>
    pub fn hibernation_options(&self) -> ::std::option::Option<&crate::types::HibernationOptionsRequest> {
        self.hibernation_options.as_ref()
    }
    /// <p>Specifies IAM instance profile configuration.</p>
    pub fn iam_instance_profile(&self) -> ::std::option::Option<&crate::types::IamInstanceProfileSpecification> {
        self.iam_instance_profile.as_ref()
    }
    /// <p>Identifies the Amazon Machine Image (AMI) for the instance.</p>
    pub fn image_id(&self) -> ::std::option::Option<&str> {
        self.image_id.as_deref()
    }
    /// <p>Configures marketplace-specific deployment options.</p>
    pub fn instance_market_options(&self) -> ::std::option::Option<&crate::types::InstanceMarketOptionsRequest> {
        self.instance_market_options.as_ref()
    }
    /// <p>Specifies the WorkSpace Instance type.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>Configures specific IPv6 addresses.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ipv6_addresses.is_none()`.
    pub fn ipv6_addresses(&self) -> &[crate::types::InstanceIpv6Address] {
        self.ipv6_addresses.as_deref().unwrap_or_default()
    }
    /// <p>Specifies number of IPv6 addresses to assign.</p>
    pub fn ipv6_address_count(&self) -> ::std::option::Option<i32> {
        self.ipv6_address_count
    }
    /// <p>Identifies the kernel for the instance.</p>
    pub fn kernel_id(&self) -> ::std::option::Option<&str> {
        self.kernel_id.as_deref()
    }
    /// <p>Specifies the key pair for instance access.</p>
    pub fn key_name(&self) -> ::std::option::Option<&str> {
        self.key_name.as_deref()
    }
    /// <p>Configures license-related settings.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.license_specifications.is_none()`.
    pub fn license_specifications(&self) -> &[crate::types::LicenseConfigurationRequest] {
        self.license_specifications.as_deref().unwrap_or_default()
    }
    /// <p>Defines automatic maintenance settings.</p>
    pub fn maintenance_options(&self) -> ::std::option::Option<&crate::types::InstanceMaintenanceOptionsRequest> {
        self.maintenance_options.as_ref()
    }
    /// <p>Configures instance metadata service settings.</p>
    pub fn metadata_options(&self) -> ::std::option::Option<&crate::types::InstanceMetadataOptionsRequest> {
        self.metadata_options.as_ref()
    }
    /// <p>Enables or disables detailed instance monitoring.</p>
    pub fn monitoring(&self) -> ::std::option::Option<&crate::types::RunInstancesMonitoringEnabled> {
        self.monitoring.as_ref()
    }
    /// <p>Configures network interface settings.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_interfaces.is_none()`.
    pub fn network_interfaces(&self) -> &[crate::types::InstanceNetworkInterfaceSpecification] {
        self.network_interfaces.as_deref().unwrap_or_default()
    }
    /// <p>Defines network performance configuration.</p>
    pub fn network_performance_options(&self) -> ::std::option::Option<&crate::types::InstanceNetworkPerformanceOptionsRequest> {
        self.network_performance_options.as_ref()
    }
    /// <p>Specifies instance placement preferences.</p>
    pub fn placement(&self) -> ::std::option::Option<&crate::types::Placement> {
        self.placement.as_ref()
    }
    /// <p>Configures private DNS name settings.</p>
    pub fn private_dns_name_options(&self) -> ::std::option::Option<&crate::types::PrivateDnsNameOptionsRequest> {
        self.private_dns_name_options.as_ref()
    }
    /// <p>Specifies the primary private IP address.</p>
    pub fn private_ip_address(&self) -> ::std::option::Option<&str> {
        self.private_ip_address.as_deref()
    }
    /// <p>Identifies the ramdisk for the instance.</p>
    pub fn ramdisk_id(&self) -> ::std::option::Option<&str> {
        self.ramdisk_id.as_deref()
    }
    /// <p>Specifies security group identifiers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_group_ids.is_none()`.
    pub fn security_group_ids(&self) -> &[::std::string::String] {
        self.security_group_ids.as_deref().unwrap_or_default()
    }
    /// <p>Configures security group settings.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_groups.is_none()`.
    pub fn security_groups(&self) -> &[::std::string::String] {
        self.security_groups.as_deref().unwrap_or_default()
    }
    /// <p>Identifies the subnet for the instance.</p>
    pub fn subnet_id(&self) -> ::std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>Configures resource tagging specifications.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tag_specifications.is_none()`.
    pub fn tag_specifications(&self) -> &[crate::types::TagSpecification] {
        self.tag_specifications.as_deref().unwrap_or_default()
    }
    /// <p>Provides custom initialization data for the instance.</p>
    pub fn user_data(&self) -> ::std::option::Option<&str> {
        self.user_data.as_deref()
    }
}
impl ::std::fmt::Debug for ManagedInstanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ManagedInstanceRequest");
        formatter.field("block_device_mappings", &self.block_device_mappings);
        formatter.field("capacity_reservation_specification", &self.capacity_reservation_specification);
        formatter.field("cpu_options", &self.cpu_options);
        formatter.field("credit_specification", &self.credit_specification);
        formatter.field("disable_api_stop", &self.disable_api_stop);
        formatter.field("ebs_optimized", &self.ebs_optimized);
        formatter.field("enable_primary_ipv6", &self.enable_primary_ipv6);
        formatter.field("enclave_options", &self.enclave_options);
        formatter.field("hibernation_options", &self.hibernation_options);
        formatter.field("iam_instance_profile", &self.iam_instance_profile);
        formatter.field("image_id", &self.image_id);
        formatter.field("instance_market_options", &self.instance_market_options);
        formatter.field("instance_type", &self.instance_type);
        formatter.field("ipv6_addresses", &self.ipv6_addresses);
        formatter.field("ipv6_address_count", &self.ipv6_address_count);
        formatter.field("kernel_id", &self.kernel_id);
        formatter.field("key_name", &self.key_name);
        formatter.field("license_specifications", &self.license_specifications);
        formatter.field("maintenance_options", &self.maintenance_options);
        formatter.field("metadata_options", &self.metadata_options);
        formatter.field("monitoring", &self.monitoring);
        formatter.field("network_interfaces", &self.network_interfaces);
        formatter.field("network_performance_options", &self.network_performance_options);
        formatter.field("placement", &self.placement);
        formatter.field("private_dns_name_options", &self.private_dns_name_options);
        formatter.field("private_ip_address", &"*** Sensitive Data Redacted ***");
        formatter.field("ramdisk_id", &self.ramdisk_id);
        formatter.field("security_group_ids", &self.security_group_ids);
        formatter.field("security_groups", &self.security_groups);
        formatter.field("subnet_id", &self.subnet_id);
        formatter.field("tag_specifications", &self.tag_specifications);
        formatter.field("user_data", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ManagedInstanceRequest {
    /// Creates a new builder-style object to manufacture [`ManagedInstanceRequest`](crate::types::ManagedInstanceRequest).
    pub fn builder() -> crate::types::builders::ManagedInstanceRequestBuilder {
        crate::types::builders::ManagedInstanceRequestBuilder::default()
    }
}

/// A builder for [`ManagedInstanceRequest`](crate::types::ManagedInstanceRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ManagedInstanceRequestBuilder {
    pub(crate) block_device_mappings: ::std::option::Option<::std::vec::Vec<crate::types::BlockDeviceMappingRequest>>,
    pub(crate) capacity_reservation_specification: ::std::option::Option<crate::types::CapacityReservationSpecification>,
    pub(crate) cpu_options: ::std::option::Option<crate::types::CpuOptionsRequest>,
    pub(crate) credit_specification: ::std::option::Option<crate::types::CreditSpecificationRequest>,
    pub(crate) disable_api_stop: ::std::option::Option<bool>,
    pub(crate) ebs_optimized: ::std::option::Option<bool>,
    pub(crate) enable_primary_ipv6: ::std::option::Option<bool>,
    pub(crate) enclave_options: ::std::option::Option<crate::types::EnclaveOptionsRequest>,
    pub(crate) hibernation_options: ::std::option::Option<crate::types::HibernationOptionsRequest>,
    pub(crate) iam_instance_profile: ::std::option::Option<crate::types::IamInstanceProfileSpecification>,
    pub(crate) image_id: ::std::option::Option<::std::string::String>,
    pub(crate) instance_market_options: ::std::option::Option<crate::types::InstanceMarketOptionsRequest>,
    pub(crate) instance_type: ::std::option::Option<::std::string::String>,
    pub(crate) ipv6_addresses: ::std::option::Option<::std::vec::Vec<crate::types::InstanceIpv6Address>>,
    pub(crate) ipv6_address_count: ::std::option::Option<i32>,
    pub(crate) kernel_id: ::std::option::Option<::std::string::String>,
    pub(crate) key_name: ::std::option::Option<::std::string::String>,
    pub(crate) license_specifications: ::std::option::Option<::std::vec::Vec<crate::types::LicenseConfigurationRequest>>,
    pub(crate) maintenance_options: ::std::option::Option<crate::types::InstanceMaintenanceOptionsRequest>,
    pub(crate) metadata_options: ::std::option::Option<crate::types::InstanceMetadataOptionsRequest>,
    pub(crate) monitoring: ::std::option::Option<crate::types::RunInstancesMonitoringEnabled>,
    pub(crate) network_interfaces: ::std::option::Option<::std::vec::Vec<crate::types::InstanceNetworkInterfaceSpecification>>,
    pub(crate) network_performance_options: ::std::option::Option<crate::types::InstanceNetworkPerformanceOptionsRequest>,
    pub(crate) placement: ::std::option::Option<crate::types::Placement>,
    pub(crate) private_dns_name_options: ::std::option::Option<crate::types::PrivateDnsNameOptionsRequest>,
    pub(crate) private_ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) ramdisk_id: ::std::option::Option<::std::string::String>,
    pub(crate) security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) security_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) subnet_id: ::std::option::Option<::std::string::String>,
    pub(crate) tag_specifications: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>,
    pub(crate) user_data: ::std::option::Option<::std::string::String>,
}
impl ManagedInstanceRequestBuilder {
    /// Appends an item to `block_device_mappings`.
    ///
    /// To override the contents of this collection use [`set_block_device_mappings`](Self::set_block_device_mappings).
    ///
    /// <p>Configures block device mappings for storage.</p>
    pub fn block_device_mappings(mut self, input: crate::types::BlockDeviceMappingRequest) -> Self {
        let mut v = self.block_device_mappings.unwrap_or_default();
        v.push(input);
        self.block_device_mappings = ::std::option::Option::Some(v);
        self
    }
    /// <p>Configures block device mappings for storage.</p>
    pub fn set_block_device_mappings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BlockDeviceMappingRequest>>) -> Self {
        self.block_device_mappings = input;
        self
    }
    /// <p>Configures block device mappings for storage.</p>
    pub fn get_block_device_mappings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BlockDeviceMappingRequest>> {
        &self.block_device_mappings
    }
    /// <p>Specifies capacity reservation preferences.</p>
    pub fn capacity_reservation_specification(mut self, input: crate::types::CapacityReservationSpecification) -> Self {
        self.capacity_reservation_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies capacity reservation preferences.</p>
    pub fn set_capacity_reservation_specification(mut self, input: ::std::option::Option<crate::types::CapacityReservationSpecification>) -> Self {
        self.capacity_reservation_specification = input;
        self
    }
    /// <p>Specifies capacity reservation preferences.</p>
    pub fn get_capacity_reservation_specification(&self) -> &::std::option::Option<crate::types::CapacityReservationSpecification> {
        &self.capacity_reservation_specification
    }
    /// <p>Configures CPU-specific settings.</p>
    pub fn cpu_options(mut self, input: crate::types::CpuOptionsRequest) -> Self {
        self.cpu_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configures CPU-specific settings.</p>
    pub fn set_cpu_options(mut self, input: ::std::option::Option<crate::types::CpuOptionsRequest>) -> Self {
        self.cpu_options = input;
        self
    }
    /// <p>Configures CPU-specific settings.</p>
    pub fn get_cpu_options(&self) -> &::std::option::Option<crate::types::CpuOptionsRequest> {
        &self.cpu_options
    }
    /// <p>Defines CPU credit configuration for burstable instances.</p>
    pub fn credit_specification(mut self, input: crate::types::CreditSpecificationRequest) -> Self {
        self.credit_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines CPU credit configuration for burstable instances.</p>
    pub fn set_credit_specification(mut self, input: ::std::option::Option<crate::types::CreditSpecificationRequest>) -> Self {
        self.credit_specification = input;
        self
    }
    /// <p>Defines CPU credit configuration for burstable instances.</p>
    pub fn get_credit_specification(&self) -> &::std::option::Option<crate::types::CreditSpecificationRequest> {
        &self.credit_specification
    }
    /// <p>Prevents API-initiated instance stop.</p>
    pub fn disable_api_stop(mut self, input: bool) -> Self {
        self.disable_api_stop = ::std::option::Option::Some(input);
        self
    }
    /// <p>Prevents API-initiated instance stop.</p>
    pub fn set_disable_api_stop(mut self, input: ::std::option::Option<bool>) -> Self {
        self.disable_api_stop = input;
        self
    }
    /// <p>Prevents API-initiated instance stop.</p>
    pub fn get_disable_api_stop(&self) -> &::std::option::Option<bool> {
        &self.disable_api_stop
    }
    /// <p>Enables optimized EBS performance.</p>
    pub fn ebs_optimized(mut self, input: bool) -> Self {
        self.ebs_optimized = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables optimized EBS performance.</p>
    pub fn set_ebs_optimized(mut self, input: ::std::option::Option<bool>) -> Self {
        self.ebs_optimized = input;
        self
    }
    /// <p>Enables optimized EBS performance.</p>
    pub fn get_ebs_optimized(&self) -> &::std::option::Option<bool> {
        &self.ebs_optimized
    }
    /// <p>Enables primary IPv6 address configuration.</p>
    pub fn enable_primary_ipv6(mut self, input: bool) -> Self {
        self.enable_primary_ipv6 = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables primary IPv6 address configuration.</p>
    pub fn set_enable_primary_ipv6(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_primary_ipv6 = input;
        self
    }
    /// <p>Enables primary IPv6 address configuration.</p>
    pub fn get_enable_primary_ipv6(&self) -> &::std::option::Option<bool> {
        &self.enable_primary_ipv6
    }
    /// <p>Configures AWS Nitro Enclave settings.</p>
    pub fn enclave_options(mut self, input: crate::types::EnclaveOptionsRequest) -> Self {
        self.enclave_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configures AWS Nitro Enclave settings.</p>
    pub fn set_enclave_options(mut self, input: ::std::option::Option<crate::types::EnclaveOptionsRequest>) -> Self {
        self.enclave_options = input;
        self
    }
    /// <p>Configures AWS Nitro Enclave settings.</p>
    pub fn get_enclave_options(&self) -> &::std::option::Option<crate::types::EnclaveOptionsRequest> {
        &self.enclave_options
    }
    /// <p>Configures instance hibernation capabilities.</p>
    pub fn hibernation_options(mut self, input: crate::types::HibernationOptionsRequest) -> Self {
        self.hibernation_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configures instance hibernation capabilities.</p>
    pub fn set_hibernation_options(mut self, input: ::std::option::Option<crate::types::HibernationOptionsRequest>) -> Self {
        self.hibernation_options = input;
        self
    }
    /// <p>Configures instance hibernation capabilities.</p>
    pub fn get_hibernation_options(&self) -> &::std::option::Option<crate::types::HibernationOptionsRequest> {
        &self.hibernation_options
    }
    /// <p>Specifies IAM instance profile configuration.</p>
    pub fn iam_instance_profile(mut self, input: crate::types::IamInstanceProfileSpecification) -> Self {
        self.iam_instance_profile = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies IAM instance profile configuration.</p>
    pub fn set_iam_instance_profile(mut self, input: ::std::option::Option<crate::types::IamInstanceProfileSpecification>) -> Self {
        self.iam_instance_profile = input;
        self
    }
    /// <p>Specifies IAM instance profile configuration.</p>
    pub fn get_iam_instance_profile(&self) -> &::std::option::Option<crate::types::IamInstanceProfileSpecification> {
        &self.iam_instance_profile
    }
    /// <p>Identifies the Amazon Machine Image (AMI) for the instance.</p>
    pub fn image_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifies the Amazon Machine Image (AMI) for the instance.</p>
    pub fn set_image_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_id = input;
        self
    }
    /// <p>Identifies the Amazon Machine Image (AMI) for the instance.</p>
    pub fn get_image_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_id
    }
    /// <p>Configures marketplace-specific deployment options.</p>
    pub fn instance_market_options(mut self, input: crate::types::InstanceMarketOptionsRequest) -> Self {
        self.instance_market_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configures marketplace-specific deployment options.</p>
    pub fn set_instance_market_options(mut self, input: ::std::option::Option<crate::types::InstanceMarketOptionsRequest>) -> Self {
        self.instance_market_options = input;
        self
    }
    /// <p>Configures marketplace-specific deployment options.</p>
    pub fn get_instance_market_options(&self) -> &::std::option::Option<crate::types::InstanceMarketOptionsRequest> {
        &self.instance_market_options
    }
    /// <p>Specifies the WorkSpace Instance type.</p>
    pub fn instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the WorkSpace Instance type.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>Specifies the WorkSpace Instance type.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_type
    }
    /// Appends an item to `ipv6_addresses`.
    ///
    /// To override the contents of this collection use [`set_ipv6_addresses`](Self::set_ipv6_addresses).
    ///
    /// <p>Configures specific IPv6 addresses.</p>
    pub fn ipv6_addresses(mut self, input: crate::types::InstanceIpv6Address) -> Self {
        let mut v = self.ipv6_addresses.unwrap_or_default();
        v.push(input);
        self.ipv6_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>Configures specific IPv6 addresses.</p>
    pub fn set_ipv6_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InstanceIpv6Address>>) -> Self {
        self.ipv6_addresses = input;
        self
    }
    /// <p>Configures specific IPv6 addresses.</p>
    pub fn get_ipv6_addresses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InstanceIpv6Address>> {
        &self.ipv6_addresses
    }
    /// <p>Specifies number of IPv6 addresses to assign.</p>
    pub fn ipv6_address_count(mut self, input: i32) -> Self {
        self.ipv6_address_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies number of IPv6 addresses to assign.</p>
    pub fn set_ipv6_address_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.ipv6_address_count = input;
        self
    }
    /// <p>Specifies number of IPv6 addresses to assign.</p>
    pub fn get_ipv6_address_count(&self) -> &::std::option::Option<i32> {
        &self.ipv6_address_count
    }
    /// <p>Identifies the kernel for the instance.</p>
    pub fn kernel_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kernel_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifies the kernel for the instance.</p>
    pub fn set_kernel_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kernel_id = input;
        self
    }
    /// <p>Identifies the kernel for the instance.</p>
    pub fn get_kernel_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kernel_id
    }
    /// <p>Specifies the key pair for instance access.</p>
    pub fn key_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the key pair for instance access.</p>
    pub fn set_key_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_name = input;
        self
    }
    /// <p>Specifies the key pair for instance access.</p>
    pub fn get_key_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_name
    }
    /// Appends an item to `license_specifications`.
    ///
    /// To override the contents of this collection use [`set_license_specifications`](Self::set_license_specifications).
    ///
    /// <p>Configures license-related settings.</p>
    pub fn license_specifications(mut self, input: crate::types::LicenseConfigurationRequest) -> Self {
        let mut v = self.license_specifications.unwrap_or_default();
        v.push(input);
        self.license_specifications = ::std::option::Option::Some(v);
        self
    }
    /// <p>Configures license-related settings.</p>
    pub fn set_license_specifications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LicenseConfigurationRequest>>) -> Self {
        self.license_specifications = input;
        self
    }
    /// <p>Configures license-related settings.</p>
    pub fn get_license_specifications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LicenseConfigurationRequest>> {
        &self.license_specifications
    }
    /// <p>Defines automatic maintenance settings.</p>
    pub fn maintenance_options(mut self, input: crate::types::InstanceMaintenanceOptionsRequest) -> Self {
        self.maintenance_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines automatic maintenance settings.</p>
    pub fn set_maintenance_options(mut self, input: ::std::option::Option<crate::types::InstanceMaintenanceOptionsRequest>) -> Self {
        self.maintenance_options = input;
        self
    }
    /// <p>Defines automatic maintenance settings.</p>
    pub fn get_maintenance_options(&self) -> &::std::option::Option<crate::types::InstanceMaintenanceOptionsRequest> {
        &self.maintenance_options
    }
    /// <p>Configures instance metadata service settings.</p>
    pub fn metadata_options(mut self, input: crate::types::InstanceMetadataOptionsRequest) -> Self {
        self.metadata_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configures instance metadata service settings.</p>
    pub fn set_metadata_options(mut self, input: ::std::option::Option<crate::types::InstanceMetadataOptionsRequest>) -> Self {
        self.metadata_options = input;
        self
    }
    /// <p>Configures instance metadata service settings.</p>
    pub fn get_metadata_options(&self) -> &::std::option::Option<crate::types::InstanceMetadataOptionsRequest> {
        &self.metadata_options
    }
    /// <p>Enables or disables detailed instance monitoring.</p>
    pub fn monitoring(mut self, input: crate::types::RunInstancesMonitoringEnabled) -> Self {
        self.monitoring = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables or disables detailed instance monitoring.</p>
    pub fn set_monitoring(mut self, input: ::std::option::Option<crate::types::RunInstancesMonitoringEnabled>) -> Self {
        self.monitoring = input;
        self
    }
    /// <p>Enables or disables detailed instance monitoring.</p>
    pub fn get_monitoring(&self) -> &::std::option::Option<crate::types::RunInstancesMonitoringEnabled> {
        &self.monitoring
    }
    /// Appends an item to `network_interfaces`.
    ///
    /// To override the contents of this collection use [`set_network_interfaces`](Self::set_network_interfaces).
    ///
    /// <p>Configures network interface settings.</p>
    pub fn network_interfaces(mut self, input: crate::types::InstanceNetworkInterfaceSpecification) -> Self {
        let mut v = self.network_interfaces.unwrap_or_default();
        v.push(input);
        self.network_interfaces = ::std::option::Option::Some(v);
        self
    }
    /// <p>Configures network interface settings.</p>
    pub fn set_network_interfaces(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::InstanceNetworkInterfaceSpecification>>,
    ) -> Self {
        self.network_interfaces = input;
        self
    }
    /// <p>Configures network interface settings.</p>
    pub fn get_network_interfaces(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InstanceNetworkInterfaceSpecification>> {
        &self.network_interfaces
    }
    /// <p>Defines network performance configuration.</p>
    pub fn network_performance_options(mut self, input: crate::types::InstanceNetworkPerformanceOptionsRequest) -> Self {
        self.network_performance_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines network performance configuration.</p>
    pub fn set_network_performance_options(mut self, input: ::std::option::Option<crate::types::InstanceNetworkPerformanceOptionsRequest>) -> Self {
        self.network_performance_options = input;
        self
    }
    /// <p>Defines network performance configuration.</p>
    pub fn get_network_performance_options(&self) -> &::std::option::Option<crate::types::InstanceNetworkPerformanceOptionsRequest> {
        &self.network_performance_options
    }
    /// <p>Specifies instance placement preferences.</p>
    pub fn placement(mut self, input: crate::types::Placement) -> Self {
        self.placement = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies instance placement preferences.</p>
    pub fn set_placement(mut self, input: ::std::option::Option<crate::types::Placement>) -> Self {
        self.placement = input;
        self
    }
    /// <p>Specifies instance placement preferences.</p>
    pub fn get_placement(&self) -> &::std::option::Option<crate::types::Placement> {
        &self.placement
    }
    /// <p>Configures private DNS name settings.</p>
    pub fn private_dns_name_options(mut self, input: crate::types::PrivateDnsNameOptionsRequest) -> Self {
        self.private_dns_name_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configures private DNS name settings.</p>
    pub fn set_private_dns_name_options(mut self, input: ::std::option::Option<crate::types::PrivateDnsNameOptionsRequest>) -> Self {
        self.private_dns_name_options = input;
        self
    }
    /// <p>Configures private DNS name settings.</p>
    pub fn get_private_dns_name_options(&self) -> &::std::option::Option<crate::types::PrivateDnsNameOptionsRequest> {
        &self.private_dns_name_options
    }
    /// <p>Specifies the primary private IP address.</p>
    pub fn private_ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.private_ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the primary private IP address.</p>
    pub fn set_private_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.private_ip_address = input;
        self
    }
    /// <p>Specifies the primary private IP address.</p>
    pub fn get_private_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.private_ip_address
    }
    /// <p>Identifies the ramdisk for the instance.</p>
    pub fn ramdisk_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ramdisk_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifies the ramdisk for the instance.</p>
    pub fn set_ramdisk_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ramdisk_id = input;
        self
    }
    /// <p>Identifies the ramdisk for the instance.</p>
    pub fn get_ramdisk_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ramdisk_id
    }
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>Specifies security group identifiers.</p>
    pub fn security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies security group identifiers.</p>
    pub fn set_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_group_ids = input;
        self
    }
    /// <p>Specifies security group identifiers.</p>
    pub fn get_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_group_ids
    }
    /// Appends an item to `security_groups`.
    ///
    /// To override the contents of this collection use [`set_security_groups`](Self::set_security_groups).
    ///
    /// <p>Configures security group settings.</p>
    pub fn security_groups(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_groups.unwrap_or_default();
        v.push(input.into());
        self.security_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>Configures security group settings.</p>
    pub fn set_security_groups(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_groups = input;
        self
    }
    /// <p>Configures security group settings.</p>
    pub fn get_security_groups(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_groups
    }
    /// <p>Identifies the subnet for the instance.</p>
    pub fn subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifies the subnet for the instance.</p>
    pub fn set_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>Identifies the subnet for the instance.</p>
    pub fn get_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_id
    }
    /// Appends an item to `tag_specifications`.
    ///
    /// To override the contents of this collection use [`set_tag_specifications`](Self::set_tag_specifications).
    ///
    /// <p>Configures resource tagging specifications.</p>
    pub fn tag_specifications(mut self, input: crate::types::TagSpecification) -> Self {
        let mut v = self.tag_specifications.unwrap_or_default();
        v.push(input);
        self.tag_specifications = ::std::option::Option::Some(v);
        self
    }
    /// <p>Configures resource tagging specifications.</p>
    pub fn set_tag_specifications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>) -> Self {
        self.tag_specifications = input;
        self
    }
    /// <p>Configures resource tagging specifications.</p>
    pub fn get_tag_specifications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>> {
        &self.tag_specifications
    }
    /// <p>Provides custom initialization data for the instance.</p>
    pub fn user_data(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_data = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provides custom initialization data for the instance.</p>
    pub fn set_user_data(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_data = input;
        self
    }
    /// <p>Provides custom initialization data for the instance.</p>
    pub fn get_user_data(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_data
    }
    /// Consumes the builder and constructs a [`ManagedInstanceRequest`](crate::types::ManagedInstanceRequest).
    pub fn build(self) -> crate::types::ManagedInstanceRequest {
        crate::types::ManagedInstanceRequest {
            block_device_mappings: self.block_device_mappings,
            capacity_reservation_specification: self.capacity_reservation_specification,
            cpu_options: self.cpu_options,
            credit_specification: self.credit_specification,
            disable_api_stop: self.disable_api_stop,
            ebs_optimized: self.ebs_optimized,
            enable_primary_ipv6: self.enable_primary_ipv6,
            enclave_options: self.enclave_options,
            hibernation_options: self.hibernation_options,
            iam_instance_profile: self.iam_instance_profile,
            image_id: self.image_id,
            instance_market_options: self.instance_market_options,
            instance_type: self.instance_type,
            ipv6_addresses: self.ipv6_addresses,
            ipv6_address_count: self.ipv6_address_count,
            kernel_id: self.kernel_id,
            key_name: self.key_name,
            license_specifications: self.license_specifications,
            maintenance_options: self.maintenance_options,
            metadata_options: self.metadata_options,
            monitoring: self.monitoring,
            network_interfaces: self.network_interfaces,
            network_performance_options: self.network_performance_options,
            placement: self.placement,
            private_dns_name_options: self.private_dns_name_options,
            private_ip_address: self.private_ip_address,
            ramdisk_id: self.ramdisk_id,
            security_group_ids: self.security_group_ids,
            security_groups: self.security_groups,
            subnet_id: self.subnet_id,
            tag_specifications: self.tag_specifications,
            user_data: self.user_data,
        }
    }
}
impl ::std::fmt::Debug for ManagedInstanceRequestBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ManagedInstanceRequestBuilder");
        formatter.field("block_device_mappings", &self.block_device_mappings);
        formatter.field("capacity_reservation_specification", &self.capacity_reservation_specification);
        formatter.field("cpu_options", &self.cpu_options);
        formatter.field("credit_specification", &self.credit_specification);
        formatter.field("disable_api_stop", &self.disable_api_stop);
        formatter.field("ebs_optimized", &self.ebs_optimized);
        formatter.field("enable_primary_ipv6", &self.enable_primary_ipv6);
        formatter.field("enclave_options", &self.enclave_options);
        formatter.field("hibernation_options", &self.hibernation_options);
        formatter.field("iam_instance_profile", &self.iam_instance_profile);
        formatter.field("image_id", &self.image_id);
        formatter.field("instance_market_options", &self.instance_market_options);
        formatter.field("instance_type", &self.instance_type);
        formatter.field("ipv6_addresses", &self.ipv6_addresses);
        formatter.field("ipv6_address_count", &self.ipv6_address_count);
        formatter.field("kernel_id", &self.kernel_id);
        formatter.field("key_name", &self.key_name);
        formatter.field("license_specifications", &self.license_specifications);
        formatter.field("maintenance_options", &self.maintenance_options);
        formatter.field("metadata_options", &self.metadata_options);
        formatter.field("monitoring", &self.monitoring);
        formatter.field("network_interfaces", &self.network_interfaces);
        formatter.field("network_performance_options", &self.network_performance_options);
        formatter.field("placement", &self.placement);
        formatter.field("private_dns_name_options", &self.private_dns_name_options);
        formatter.field("private_ip_address", &"*** Sensitive Data Redacted ***");
        formatter.field("ramdisk_id", &self.ramdisk_id);
        formatter.field("security_group_ids", &self.security_group_ids);
        formatter.field("security_groups", &self.security_groups);
        formatter.field("subnet_id", &self.subnet_id);
        formatter.field("tag_specifications", &self.tag_specifications);
        formatter.field("user_data", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
