// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Captures detailed error information for EC2 instance operations.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Ec2InstanceError {
    /// <p>Unique error code identifying the specific EC2 instance error.</p>
    pub ec2_error_code: ::std::option::Option<::std::string::String>,
    /// <p>Type of exception encountered during EC2 instance operation.</p>
    pub ec2_exception_type: ::std::option::Option<::std::string::String>,
    /// <p>Detailed description of the EC2 instance error.</p>
    pub ec2_error_message: ::std::option::Option<::std::string::String>,
}
impl Ec2InstanceError {
    /// <p>Unique error code identifying the specific EC2 instance error.</p>
    pub fn ec2_error_code(&self) -> ::std::option::Option<&str> {
        self.ec2_error_code.as_deref()
    }
    /// <p>Type of exception encountered during EC2 instance operation.</p>
    pub fn ec2_exception_type(&self) -> ::std::option::Option<&str> {
        self.ec2_exception_type.as_deref()
    }
    /// <p>Detailed description of the EC2 instance error.</p>
    pub fn ec2_error_message(&self) -> ::std::option::Option<&str> {
        self.ec2_error_message.as_deref()
    }
}
impl Ec2InstanceError {
    /// Creates a new builder-style object to manufacture [`Ec2InstanceError`](crate::types::Ec2InstanceError).
    pub fn builder() -> crate::types::builders::Ec2InstanceErrorBuilder {
        crate::types::builders::Ec2InstanceErrorBuilder::default()
    }
}

/// A builder for [`Ec2InstanceError`](crate::types::Ec2InstanceError).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct Ec2InstanceErrorBuilder {
    pub(crate) ec2_error_code: ::std::option::Option<::std::string::String>,
    pub(crate) ec2_exception_type: ::std::option::Option<::std::string::String>,
    pub(crate) ec2_error_message: ::std::option::Option<::std::string::String>,
}
impl Ec2InstanceErrorBuilder {
    /// <p>Unique error code identifying the specific EC2 instance error.</p>
    pub fn ec2_error_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ec2_error_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique error code identifying the specific EC2 instance error.</p>
    pub fn set_ec2_error_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ec2_error_code = input;
        self
    }
    /// <p>Unique error code identifying the specific EC2 instance error.</p>
    pub fn get_ec2_error_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.ec2_error_code
    }
    /// <p>Type of exception encountered during EC2 instance operation.</p>
    pub fn ec2_exception_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ec2_exception_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Type of exception encountered during EC2 instance operation.</p>
    pub fn set_ec2_exception_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ec2_exception_type = input;
        self
    }
    /// <p>Type of exception encountered during EC2 instance operation.</p>
    pub fn get_ec2_exception_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.ec2_exception_type
    }
    /// <p>Detailed description of the EC2 instance error.</p>
    pub fn ec2_error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ec2_error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Detailed description of the EC2 instance error.</p>
    pub fn set_ec2_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ec2_error_message = input;
        self
    }
    /// <p>Detailed description of the EC2 instance error.</p>
    pub fn get_ec2_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.ec2_error_message
    }
    /// Consumes the builder and constructs a [`Ec2InstanceError`](crate::types::Ec2InstanceError).
    pub fn build(self) -> crate::types::Ec2InstanceError {
        crate::types::Ec2InstanceError {
            ec2_error_code: self.ec2_error_code,
            ec2_exception_type: self.ec2_exception_type,
            ec2_error_message: self.ec2_error_message,
        }
    }
}
