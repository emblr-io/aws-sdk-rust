// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents an IPv6 address configuration for a WorkSpace Instance.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct InstanceIpv6Address {
    /// <p>Specific IPv6 address assigned to the instance.</p>
    pub ipv6_address: ::std::option::Option<::std::string::String>,
    /// <p>Indicates if this is the primary IPv6 address for the instance.</p>
    pub is_primary_ipv6: ::std::option::Option<bool>,
}
impl InstanceIpv6Address {
    /// <p>Specific IPv6 address assigned to the instance.</p>
    pub fn ipv6_address(&self) -> ::std::option::Option<&str> {
        self.ipv6_address.as_deref()
    }
    /// <p>Indicates if this is the primary IPv6 address for the instance.</p>
    pub fn is_primary_ipv6(&self) -> ::std::option::Option<bool> {
        self.is_primary_ipv6
    }
}
impl ::std::fmt::Debug for InstanceIpv6Address {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InstanceIpv6Address");
        formatter.field("ipv6_address", &"*** Sensitive Data Redacted ***");
        formatter.field("is_primary_ipv6", &self.is_primary_ipv6);
        formatter.finish()
    }
}
impl InstanceIpv6Address {
    /// Creates a new builder-style object to manufacture [`InstanceIpv6Address`](crate::types::InstanceIpv6Address).
    pub fn builder() -> crate::types::builders::InstanceIpv6AddressBuilder {
        crate::types::builders::InstanceIpv6AddressBuilder::default()
    }
}

/// A builder for [`InstanceIpv6Address`](crate::types::InstanceIpv6Address).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct InstanceIpv6AddressBuilder {
    pub(crate) ipv6_address: ::std::option::Option<::std::string::String>,
    pub(crate) is_primary_ipv6: ::std::option::Option<bool>,
}
impl InstanceIpv6AddressBuilder {
    /// <p>Specific IPv6 address assigned to the instance.</p>
    pub fn ipv6_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipv6_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specific IPv6 address assigned to the instance.</p>
    pub fn set_ipv6_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipv6_address = input;
        self
    }
    /// <p>Specific IPv6 address assigned to the instance.</p>
    pub fn get_ipv6_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipv6_address
    }
    /// <p>Indicates if this is the primary IPv6 address for the instance.</p>
    pub fn is_primary_ipv6(mut self, input: bool) -> Self {
        self.is_primary_ipv6 = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates if this is the primary IPv6 address for the instance.</p>
    pub fn set_is_primary_ipv6(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_primary_ipv6 = input;
        self
    }
    /// <p>Indicates if this is the primary IPv6 address for the instance.</p>
    pub fn get_is_primary_ipv6(&self) -> &::std::option::Option<bool> {
        &self.is_primary_ipv6
    }
    /// Consumes the builder and constructs a [`InstanceIpv6Address`](crate::types::InstanceIpv6Address).
    pub fn build(self) -> crate::types::InstanceIpv6Address {
        crate::types::InstanceIpv6Address {
            ipv6_address: self.ipv6_address,
            is_primary_ipv6: self.is_primary_ipv6,
        }
    }
}
impl ::std::fmt::Debug for InstanceIpv6AddressBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InstanceIpv6AddressBuilder");
        formatter.field("ipv6_address", &"*** Sensitive Data Redacted ***");
        formatter.field("is_primary_ipv6", &self.is_primary_ipv6);
        formatter.finish()
    }
}
