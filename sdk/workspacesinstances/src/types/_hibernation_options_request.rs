// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines hibernation configuration for the WorkSpace Instance.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HibernationOptionsRequest {
    /// <p>Enables or disables instance hibernation capability.</p>
    pub configured: ::std::option::Option<bool>,
}
impl HibernationOptionsRequest {
    /// <p>Enables or disables instance hibernation capability.</p>
    pub fn configured(&self) -> ::std::option::Option<bool> {
        self.configured
    }
}
impl HibernationOptionsRequest {
    /// Creates a new builder-style object to manufacture [`HibernationOptionsRequest`](crate::types::HibernationOptionsRequest).
    pub fn builder() -> crate::types::builders::HibernationOptionsRequestBuilder {
        crate::types::builders::HibernationOptionsRequestBuilder::default()
    }
}

/// A builder for [`HibernationOptionsRequest`](crate::types::HibernationOptionsRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct HibernationOptionsRequestBuilder {
    pub(crate) configured: ::std::option::Option<bool>,
}
impl HibernationOptionsRequestBuilder {
    /// <p>Enables or disables instance hibernation capability.</p>
    pub fn configured(mut self, input: bool) -> Self {
        self.configured = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables or disables instance hibernation capability.</p>
    pub fn set_configured(mut self, input: ::std::option::Option<bool>) -> Self {
        self.configured = input;
        self
    }
    /// <p>Enables or disables instance hibernation capability.</p>
    pub fn get_configured(&self) -> &::std::option::Option<bool> {
        &self.configured
    }
    /// Consumes the builder and constructs a [`HibernationOptionsRequest`](crate::types::HibernationOptionsRequest).
    pub fn build(self) -> crate::types::HibernationOptionsRequest {
        crate::types::HibernationOptionsRequest { configured: self.configured }
    }
}
