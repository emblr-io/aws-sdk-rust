// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the list of instance types supported by WorkSpaces Instances.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListInstanceTypesOutput {
    /// <p>Collection of supported instance types for WorkSpaces Instances.</p>
    pub instance_types: ::std::vec::Vec<crate::types::InstanceTypeInfo>,
    /// <p>Token for retrieving additional instance types if the result set is paginated.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListInstanceTypesOutput {
    /// <p>Collection of supported instance types for WorkSpaces Instances.</p>
    pub fn instance_types(&self) -> &[crate::types::InstanceTypeInfo] {
        use std::ops::Deref;
        self.instance_types.deref()
    }
    /// <p>Token for retrieving additional instance types if the result set is paginated.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::std::fmt::Debug for ListInstanceTypesOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListInstanceTypesOutput");
        formatter.field("instance_types", &self.instance_types);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for ListInstanceTypesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListInstanceTypesOutput {
    /// Creates a new builder-style object to manufacture [`ListInstanceTypesOutput`](crate::operation::list_instance_types::ListInstanceTypesOutput).
    pub fn builder() -> crate::operation::list_instance_types::builders::ListInstanceTypesOutputBuilder {
        crate::operation::list_instance_types::builders::ListInstanceTypesOutputBuilder::default()
    }
}

/// A builder for [`ListInstanceTypesOutput`](crate::operation::list_instance_types::ListInstanceTypesOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ListInstanceTypesOutputBuilder {
    pub(crate) instance_types: ::std::option::Option<::std::vec::Vec<crate::types::InstanceTypeInfo>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListInstanceTypesOutputBuilder {
    /// Appends an item to `instance_types`.
    ///
    /// To override the contents of this collection use [`set_instance_types`](Self::set_instance_types).
    ///
    /// <p>Collection of supported instance types for WorkSpaces Instances.</p>
    pub fn instance_types(mut self, input: crate::types::InstanceTypeInfo) -> Self {
        let mut v = self.instance_types.unwrap_or_default();
        v.push(input);
        self.instance_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>Collection of supported instance types for WorkSpaces Instances.</p>
    pub fn set_instance_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InstanceTypeInfo>>) -> Self {
        self.instance_types = input;
        self
    }
    /// <p>Collection of supported instance types for WorkSpaces Instances.</p>
    pub fn get_instance_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InstanceTypeInfo>> {
        &self.instance_types
    }
    /// <p>Token for retrieving additional instance types if the result set is paginated.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Token for retrieving additional instance types if the result set is paginated.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Token for retrieving additional instance types if the result set is paginated.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListInstanceTypesOutput`](crate::operation::list_instance_types::ListInstanceTypesOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`instance_types`](crate::operation::list_instance_types::builders::ListInstanceTypesOutputBuilder::instance_types)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_instance_types::ListInstanceTypesOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_instance_types::ListInstanceTypesOutput {
            instance_types: self.instance_types.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "instance_types",
                    "instance_types was not specified but it is required when building ListInstanceTypesOutput",
                )
            })?,
            next_token: self.next_token,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for ListInstanceTypesOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListInstanceTypesOutputBuilder");
        formatter.field("instance_types", &self.instance_types);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
