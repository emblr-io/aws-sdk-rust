// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the list of supported AWS regions for WorkSpaces Instances.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListRegionsOutput {
    /// <p>Collection of AWS regions supported by WorkSpaces Instances.</p>
    pub regions: ::std::vec::Vec<crate::types::Region>,
    /// <p>Token for retrieving additional regions if the result set is paginated.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListRegionsOutput {
    /// <p>Collection of AWS regions supported by WorkSpaces Instances.</p>
    pub fn regions(&self) -> &[crate::types::Region] {
        use std::ops::Deref;
        self.regions.deref()
    }
    /// <p>Token for retrieving additional regions if the result set is paginated.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::std::fmt::Debug for ListRegionsOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListRegionsOutput");
        formatter.field("regions", &self.regions);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for ListRegionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListRegionsOutput {
    /// Creates a new builder-style object to manufacture [`ListRegionsOutput`](crate::operation::list_regions::ListRegionsOutput).
    pub fn builder() -> crate::operation::list_regions::builders::ListRegionsOutputBuilder {
        crate::operation::list_regions::builders::ListRegionsOutputBuilder::default()
    }
}

/// A builder for [`ListRegionsOutput`](crate::operation::list_regions::ListRegionsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ListRegionsOutputBuilder {
    pub(crate) regions: ::std::option::Option<::std::vec::Vec<crate::types::Region>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListRegionsOutputBuilder {
    /// Appends an item to `regions`.
    ///
    /// To override the contents of this collection use [`set_regions`](Self::set_regions).
    ///
    /// <p>Collection of AWS regions supported by WorkSpaces Instances.</p>
    pub fn regions(mut self, input: crate::types::Region) -> Self {
        let mut v = self.regions.unwrap_or_default();
        v.push(input);
        self.regions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Collection of AWS regions supported by WorkSpaces Instances.</p>
    pub fn set_regions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Region>>) -> Self {
        self.regions = input;
        self
    }
    /// <p>Collection of AWS regions supported by WorkSpaces Instances.</p>
    pub fn get_regions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Region>> {
        &self.regions
    }
    /// <p>Token for retrieving additional regions if the result set is paginated.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Token for retrieving additional regions if the result set is paginated.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Token for retrieving additional regions if the result set is paginated.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListRegionsOutput`](crate::operation::list_regions::ListRegionsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`regions`](crate::operation::list_regions::builders::ListRegionsOutputBuilder::regions)
    pub fn build(self) -> ::std::result::Result<crate::operation::list_regions::ListRegionsOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_regions::ListRegionsOutput {
            regions: self.regions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "regions",
                    "regions was not specified but it is required when building ListRegionsOutput",
                )
            })?,
            next_token: self.next_token,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for ListRegionsOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListRegionsOutputBuilder");
        formatter.field("regions", &self.regions);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
