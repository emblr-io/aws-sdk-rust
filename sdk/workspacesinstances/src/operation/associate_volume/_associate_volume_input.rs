// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies volume attachment parameters.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociateVolumeInput {
    /// <p>WorkSpace Instance to attach volume to.</p>
    pub workspace_instance_id: ::std::option::Option<::std::string::String>,
    /// <p>Volume to be attached.</p>
    pub volume_id: ::std::option::Option<::std::string::String>,
    /// <p>Device path for volume attachment.</p>
    pub device: ::std::option::Option<::std::string::String>,
}
impl AssociateVolumeInput {
    /// <p>WorkSpace Instance to attach volume to.</p>
    pub fn workspace_instance_id(&self) -> ::std::option::Option<&str> {
        self.workspace_instance_id.as_deref()
    }
    /// <p>Volume to be attached.</p>
    pub fn volume_id(&self) -> ::std::option::Option<&str> {
        self.volume_id.as_deref()
    }
    /// <p>Device path for volume attachment.</p>
    pub fn device(&self) -> ::std::option::Option<&str> {
        self.device.as_deref()
    }
}
impl AssociateVolumeInput {
    /// Creates a new builder-style object to manufacture [`AssociateVolumeInput`](crate::operation::associate_volume::AssociateVolumeInput).
    pub fn builder() -> crate::operation::associate_volume::builders::AssociateVolumeInputBuilder {
        crate::operation::associate_volume::builders::AssociateVolumeInputBuilder::default()
    }
}

/// A builder for [`AssociateVolumeInput`](crate::operation::associate_volume::AssociateVolumeInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssociateVolumeInputBuilder {
    pub(crate) workspace_instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) volume_id: ::std::option::Option<::std::string::String>,
    pub(crate) device: ::std::option::Option<::std::string::String>,
}
impl AssociateVolumeInputBuilder {
    /// <p>WorkSpace Instance to attach volume to.</p>
    /// This field is required.
    pub fn workspace_instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>WorkSpace Instance to attach volume to.</p>
    pub fn set_workspace_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_instance_id = input;
        self
    }
    /// <p>WorkSpace Instance to attach volume to.</p>
    pub fn get_workspace_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_instance_id
    }
    /// <p>Volume to be attached.</p>
    /// This field is required.
    pub fn volume_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.volume_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Volume to be attached.</p>
    pub fn set_volume_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.volume_id = input;
        self
    }
    /// <p>Volume to be attached.</p>
    pub fn get_volume_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.volume_id
    }
    /// <p>Device path for volume attachment.</p>
    /// This field is required.
    pub fn device(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Device path for volume attachment.</p>
    pub fn set_device(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device = input;
        self
    }
    /// <p>Device path for volume attachment.</p>
    pub fn get_device(&self) -> &::std::option::Option<::std::string::String> {
        &self.device
    }
    /// Consumes the builder and constructs a [`AssociateVolumeInput`](crate::operation::associate_volume::AssociateVolumeInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::associate_volume::AssociateVolumeInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::associate_volume::AssociateVolumeInput {
            workspace_instance_id: self.workspace_instance_id,
            volume_id: self.volume_id,
            device: self.device,
        })
    }
}
