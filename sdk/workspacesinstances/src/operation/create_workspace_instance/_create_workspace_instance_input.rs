// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the configuration parameters for creating a new WorkSpaces Instance.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateWorkspaceInstanceInput {
    /// <p>Unique token to ensure idempotent instance creation, preventing duplicate workspace launches.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>Optional metadata tags for categorizing and managing WorkSpaces Instances.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>Comprehensive configuration settings for the WorkSpaces Instance, including network, compute, and storage parameters.</p>
    pub managed_instance: ::std::option::Option<crate::types::ManagedInstanceRequest>,
}
impl CreateWorkspaceInstanceInput {
    /// <p>Unique token to ensure idempotent instance creation, preventing duplicate workspace launches.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Optional metadata tags for categorizing and managing WorkSpaces Instances.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>Comprehensive configuration settings for the WorkSpaces Instance, including network, compute, and storage parameters.</p>
    pub fn managed_instance(&self) -> ::std::option::Option<&crate::types::ManagedInstanceRequest> {
        self.managed_instance.as_ref()
    }
}
impl ::std::fmt::Debug for CreateWorkspaceInstanceInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateWorkspaceInstanceInput");
        formatter.field("client_token", &"*** Sensitive Data Redacted ***");
        formatter.field("tags", &self.tags);
        formatter.field("managed_instance", &self.managed_instance);
        formatter.finish()
    }
}
impl CreateWorkspaceInstanceInput {
    /// Creates a new builder-style object to manufacture [`CreateWorkspaceInstanceInput`](crate::operation::create_workspace_instance::CreateWorkspaceInstanceInput).
    pub fn builder() -> crate::operation::create_workspace_instance::builders::CreateWorkspaceInstanceInputBuilder {
        crate::operation::create_workspace_instance::builders::CreateWorkspaceInstanceInputBuilder::default()
    }
}

/// A builder for [`CreateWorkspaceInstanceInput`](crate::operation::create_workspace_instance::CreateWorkspaceInstanceInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateWorkspaceInstanceInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) managed_instance: ::std::option::Option<crate::types::ManagedInstanceRequest>,
}
impl CreateWorkspaceInstanceInputBuilder {
    /// <p>Unique token to ensure idempotent instance creation, preventing duplicate workspace launches.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique token to ensure idempotent instance creation, preventing duplicate workspace launches.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Unique token to ensure idempotent instance creation, preventing duplicate workspace launches.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Optional metadata tags for categorizing and managing WorkSpaces Instances.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Optional metadata tags for categorizing and managing WorkSpaces Instances.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Optional metadata tags for categorizing and managing WorkSpaces Instances.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>Comprehensive configuration settings for the WorkSpaces Instance, including network, compute, and storage parameters.</p>
    /// This field is required.
    pub fn managed_instance(mut self, input: crate::types::ManagedInstanceRequest) -> Self {
        self.managed_instance = ::std::option::Option::Some(input);
        self
    }
    /// <p>Comprehensive configuration settings for the WorkSpaces Instance, including network, compute, and storage parameters.</p>
    pub fn set_managed_instance(mut self, input: ::std::option::Option<crate::types::ManagedInstanceRequest>) -> Self {
        self.managed_instance = input;
        self
    }
    /// <p>Comprehensive configuration settings for the WorkSpaces Instance, including network, compute, and storage parameters.</p>
    pub fn get_managed_instance(&self) -> &::std::option::Option<crate::types::ManagedInstanceRequest> {
        &self.managed_instance
    }
    /// Consumes the builder and constructs a [`CreateWorkspaceInstanceInput`](crate::operation::create_workspace_instance::CreateWorkspaceInstanceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_workspace_instance::CreateWorkspaceInstanceInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_workspace_instance::CreateWorkspaceInstanceInput {
            client_token: self.client_token,
            tags: self.tags,
            managed_instance: self.managed_instance,
        })
    }
}
impl ::std::fmt::Debug for CreateWorkspaceInstanceInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateWorkspaceInstanceInputBuilder");
        formatter.field("client_token", &"*** Sensitive Data Redacted ***");
        formatter.field("tags", &self.tags);
        formatter.field("managed_instance", &self.managed_instance);
        formatter.finish()
    }
}
