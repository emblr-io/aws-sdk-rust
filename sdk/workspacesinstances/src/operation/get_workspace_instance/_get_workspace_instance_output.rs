// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides comprehensive details about the requested WorkSpaces Instance.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetWorkspaceInstanceOutput {
    /// <p>Captures any errors specific to the WorkSpace Instance lifecycle.</p>
    pub workspace_instance_errors: ::std::option::Option<::std::vec::Vec<crate::types::WorkspaceInstanceError>>,
    /// <p>Includes any underlying EC2 instance errors encountered.</p>
    pub ec2_instance_errors: ::std::option::Option<::std::vec::Vec<crate::types::Ec2InstanceError>>,
    /// <p>Current provisioning state of the WorkSpaces Instance.</p>
    pub provision_state: ::std::option::Option<crate::types::ProvisionStateEnum>,
    /// <p>Unique identifier of the retrieved WorkSpaces Instance.</p>
    pub workspace_instance_id: ::std::option::Option<::std::string::String>,
    /// <p>Details of the associated EC2 managed instance.</p>
    pub ec2_managed_instance: ::std::option::Option<crate::types::Ec2ManagedInstance>,
    _request_id: Option<String>,
}
impl GetWorkspaceInstanceOutput {
    /// <p>Captures any errors specific to the WorkSpace Instance lifecycle.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.workspace_instance_errors.is_none()`.
    pub fn workspace_instance_errors(&self) -> &[crate::types::WorkspaceInstanceError] {
        self.workspace_instance_errors.as_deref().unwrap_or_default()
    }
    /// <p>Includes any underlying EC2 instance errors encountered.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ec2_instance_errors.is_none()`.
    pub fn ec2_instance_errors(&self) -> &[crate::types::Ec2InstanceError] {
        self.ec2_instance_errors.as_deref().unwrap_or_default()
    }
    /// <p>Current provisioning state of the WorkSpaces Instance.</p>
    pub fn provision_state(&self) -> ::std::option::Option<&crate::types::ProvisionStateEnum> {
        self.provision_state.as_ref()
    }
    /// <p>Unique identifier of the retrieved WorkSpaces Instance.</p>
    pub fn workspace_instance_id(&self) -> ::std::option::Option<&str> {
        self.workspace_instance_id.as_deref()
    }
    /// <p>Details of the associated EC2 managed instance.</p>
    pub fn ec2_managed_instance(&self) -> ::std::option::Option<&crate::types::Ec2ManagedInstance> {
        self.ec2_managed_instance.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetWorkspaceInstanceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetWorkspaceInstanceOutput {
    /// Creates a new builder-style object to manufacture [`GetWorkspaceInstanceOutput`](crate::operation::get_workspace_instance::GetWorkspaceInstanceOutput).
    pub fn builder() -> crate::operation::get_workspace_instance::builders::GetWorkspaceInstanceOutputBuilder {
        crate::operation::get_workspace_instance::builders::GetWorkspaceInstanceOutputBuilder::default()
    }
}

/// A builder for [`GetWorkspaceInstanceOutput`](crate::operation::get_workspace_instance::GetWorkspaceInstanceOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetWorkspaceInstanceOutputBuilder {
    pub(crate) workspace_instance_errors: ::std::option::Option<::std::vec::Vec<crate::types::WorkspaceInstanceError>>,
    pub(crate) ec2_instance_errors: ::std::option::Option<::std::vec::Vec<crate::types::Ec2InstanceError>>,
    pub(crate) provision_state: ::std::option::Option<crate::types::ProvisionStateEnum>,
    pub(crate) workspace_instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) ec2_managed_instance: ::std::option::Option<crate::types::Ec2ManagedInstance>,
    _request_id: Option<String>,
}
impl GetWorkspaceInstanceOutputBuilder {
    /// Appends an item to `workspace_instance_errors`.
    ///
    /// To override the contents of this collection use [`set_workspace_instance_errors`](Self::set_workspace_instance_errors).
    ///
    /// <p>Captures any errors specific to the WorkSpace Instance lifecycle.</p>
    pub fn workspace_instance_errors(mut self, input: crate::types::WorkspaceInstanceError) -> Self {
        let mut v = self.workspace_instance_errors.unwrap_or_default();
        v.push(input);
        self.workspace_instance_errors = ::std::option::Option::Some(v);
        self
    }
    /// <p>Captures any errors specific to the WorkSpace Instance lifecycle.</p>
    pub fn set_workspace_instance_errors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WorkspaceInstanceError>>) -> Self {
        self.workspace_instance_errors = input;
        self
    }
    /// <p>Captures any errors specific to the WorkSpace Instance lifecycle.</p>
    pub fn get_workspace_instance_errors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WorkspaceInstanceError>> {
        &self.workspace_instance_errors
    }
    /// Appends an item to `ec2_instance_errors`.
    ///
    /// To override the contents of this collection use [`set_ec2_instance_errors`](Self::set_ec2_instance_errors).
    ///
    /// <p>Includes any underlying EC2 instance errors encountered.</p>
    pub fn ec2_instance_errors(mut self, input: crate::types::Ec2InstanceError) -> Self {
        let mut v = self.ec2_instance_errors.unwrap_or_default();
        v.push(input);
        self.ec2_instance_errors = ::std::option::Option::Some(v);
        self
    }
    /// <p>Includes any underlying EC2 instance errors encountered.</p>
    pub fn set_ec2_instance_errors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Ec2InstanceError>>) -> Self {
        self.ec2_instance_errors = input;
        self
    }
    /// <p>Includes any underlying EC2 instance errors encountered.</p>
    pub fn get_ec2_instance_errors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Ec2InstanceError>> {
        &self.ec2_instance_errors
    }
    /// <p>Current provisioning state of the WorkSpaces Instance.</p>
    pub fn provision_state(mut self, input: crate::types::ProvisionStateEnum) -> Self {
        self.provision_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Current provisioning state of the WorkSpaces Instance.</p>
    pub fn set_provision_state(mut self, input: ::std::option::Option<crate::types::ProvisionStateEnum>) -> Self {
        self.provision_state = input;
        self
    }
    /// <p>Current provisioning state of the WorkSpaces Instance.</p>
    pub fn get_provision_state(&self) -> &::std::option::Option<crate::types::ProvisionStateEnum> {
        &self.provision_state
    }
    /// <p>Unique identifier of the retrieved WorkSpaces Instance.</p>
    pub fn workspace_instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier of the retrieved WorkSpaces Instance.</p>
    pub fn set_workspace_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_instance_id = input;
        self
    }
    /// <p>Unique identifier of the retrieved WorkSpaces Instance.</p>
    pub fn get_workspace_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_instance_id
    }
    /// <p>Details of the associated EC2 managed instance.</p>
    pub fn ec2_managed_instance(mut self, input: crate::types::Ec2ManagedInstance) -> Self {
        self.ec2_managed_instance = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details of the associated EC2 managed instance.</p>
    pub fn set_ec2_managed_instance(mut self, input: ::std::option::Option<crate::types::Ec2ManagedInstance>) -> Self {
        self.ec2_managed_instance = input;
        self
    }
    /// <p>Details of the associated EC2 managed instance.</p>
    pub fn get_ec2_managed_instance(&self) -> &::std::option::Option<crate::types::Ec2ManagedInstance> {
        &self.ec2_managed_instance
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetWorkspaceInstanceOutput`](crate::operation::get_workspace_instance::GetWorkspaceInstanceOutput).
    pub fn build(self) -> crate::operation::get_workspace_instance::GetWorkspaceInstanceOutput {
        crate::operation::get_workspace_instance::GetWorkspaceInstanceOutput {
            workspace_instance_errors: self.workspace_instance_errors,
            ec2_instance_errors: self.ec2_instance_errors,
            provision_state: self.provision_state,
            workspace_instance_id: self.workspace_instance_id,
            ec2_managed_instance: self.ec2_managed_instance,
            _request_id: self._request_id,
        }
    }
}
