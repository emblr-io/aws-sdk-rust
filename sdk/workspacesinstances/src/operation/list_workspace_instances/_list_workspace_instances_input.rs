// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines filters and pagination parameters for retrieving WorkSpaces Instances.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListWorkspaceInstancesInput {
    /// <p>Filter WorkSpaces Instances by their current provisioning states.</p>
    pub provision_states: ::std::option::Option<::std::vec::Vec<crate::types::ProvisionStateEnum>>,
    /// <p>Maximum number of WorkSpaces Instances to return in a single response.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Pagination token for retrieving subsequent pages of WorkSpaces Instances.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListWorkspaceInstancesInput {
    /// <p>Filter WorkSpaces Instances by their current provisioning states.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.provision_states.is_none()`.
    pub fn provision_states(&self) -> &[crate::types::ProvisionStateEnum] {
        self.provision_states.as_deref().unwrap_or_default()
    }
    /// <p>Maximum number of WorkSpaces Instances to return in a single response.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Pagination token for retrieving subsequent pages of WorkSpaces Instances.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::std::fmt::Debug for ListWorkspaceInstancesInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListWorkspaceInstancesInput");
        formatter.field("provision_states", &self.provision_states);
        formatter.field("max_results", &self.max_results);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ListWorkspaceInstancesInput {
    /// Creates a new builder-style object to manufacture [`ListWorkspaceInstancesInput`](crate::operation::list_workspace_instances::ListWorkspaceInstancesInput).
    pub fn builder() -> crate::operation::list_workspace_instances::builders::ListWorkspaceInstancesInputBuilder {
        crate::operation::list_workspace_instances::builders::ListWorkspaceInstancesInputBuilder::default()
    }
}

/// A builder for [`ListWorkspaceInstancesInput`](crate::operation::list_workspace_instances::ListWorkspaceInstancesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ListWorkspaceInstancesInputBuilder {
    pub(crate) provision_states: ::std::option::Option<::std::vec::Vec<crate::types::ProvisionStateEnum>>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListWorkspaceInstancesInputBuilder {
    /// Appends an item to `provision_states`.
    ///
    /// To override the contents of this collection use [`set_provision_states`](Self::set_provision_states).
    ///
    /// <p>Filter WorkSpaces Instances by their current provisioning states.</p>
    pub fn provision_states(mut self, input: crate::types::ProvisionStateEnum) -> Self {
        let mut v = self.provision_states.unwrap_or_default();
        v.push(input);
        self.provision_states = ::std::option::Option::Some(v);
        self
    }
    /// <p>Filter WorkSpaces Instances by their current provisioning states.</p>
    pub fn set_provision_states(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ProvisionStateEnum>>) -> Self {
        self.provision_states = input;
        self
    }
    /// <p>Filter WorkSpaces Instances by their current provisioning states.</p>
    pub fn get_provision_states(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProvisionStateEnum>> {
        &self.provision_states
    }
    /// <p>Maximum number of WorkSpaces Instances to return in a single response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maximum number of WorkSpaces Instances to return in a single response.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Maximum number of WorkSpaces Instances to return in a single response.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Pagination token for retrieving subsequent pages of WorkSpaces Instances.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Pagination token for retrieving subsequent pages of WorkSpaces Instances.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Pagination token for retrieving subsequent pages of WorkSpaces Instances.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListWorkspaceInstancesInput`](crate::operation::list_workspace_instances::ListWorkspaceInstancesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_workspace_instances::ListWorkspaceInstancesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_workspace_instances::ListWorkspaceInstancesInput {
            provision_states: self.provision_states,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
impl ::std::fmt::Debug for ListWorkspaceInstancesInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListWorkspaceInstancesInputBuilder");
        formatter.field("provision_states", &self.provision_states);
        formatter.field("max_results", &self.max_results);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
