// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the list of WorkSpaces Instances matching the specified criteria.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListWorkspaceInstancesOutput {
    /// <p>Collection of WorkSpaces Instances returned by the query.</p>
    pub workspace_instances: ::std::vec::Vec<crate::types::WorkspaceInstance>,
    /// <p>Token for retrieving additional WorkSpaces Instances if the result set is paginated.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListWorkspaceInstancesOutput {
    /// <p>Collection of WorkSpaces Instances returned by the query.</p>
    pub fn workspace_instances(&self) -> &[crate::types::WorkspaceInstance] {
        use std::ops::Deref;
        self.workspace_instances.deref()
    }
    /// <p>Token for retrieving additional WorkSpaces Instances if the result set is paginated.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::std::fmt::Debug for ListWorkspaceInstancesOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListWorkspaceInstancesOutput");
        formatter.field("workspace_instances", &self.workspace_instances);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for ListWorkspaceInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListWorkspaceInstancesOutput {
    /// Creates a new builder-style object to manufacture [`ListWorkspaceInstancesOutput`](crate::operation::list_workspace_instances::ListWorkspaceInstancesOutput).
    pub fn builder() -> crate::operation::list_workspace_instances::builders::ListWorkspaceInstancesOutputBuilder {
        crate::operation::list_workspace_instances::builders::ListWorkspaceInstancesOutputBuilder::default()
    }
}

/// A builder for [`ListWorkspaceInstancesOutput`](crate::operation::list_workspace_instances::ListWorkspaceInstancesOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ListWorkspaceInstancesOutputBuilder {
    pub(crate) workspace_instances: ::std::option::Option<::std::vec::Vec<crate::types::WorkspaceInstance>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListWorkspaceInstancesOutputBuilder {
    /// Appends an item to `workspace_instances`.
    ///
    /// To override the contents of this collection use [`set_workspace_instances`](Self::set_workspace_instances).
    ///
    /// <p>Collection of WorkSpaces Instances returned by the query.</p>
    pub fn workspace_instances(mut self, input: crate::types::WorkspaceInstance) -> Self {
        let mut v = self.workspace_instances.unwrap_or_default();
        v.push(input);
        self.workspace_instances = ::std::option::Option::Some(v);
        self
    }
    /// <p>Collection of WorkSpaces Instances returned by the query.</p>
    pub fn set_workspace_instances(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WorkspaceInstance>>) -> Self {
        self.workspace_instances = input;
        self
    }
    /// <p>Collection of WorkSpaces Instances returned by the query.</p>
    pub fn get_workspace_instances(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WorkspaceInstance>> {
        &self.workspace_instances
    }
    /// <p>Token for retrieving additional WorkSpaces Instances if the result set is paginated.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Token for retrieving additional WorkSpaces Instances if the result set is paginated.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Token for retrieving additional WorkSpaces Instances if the result set is paginated.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListWorkspaceInstancesOutput`](crate::operation::list_workspace_instances::ListWorkspaceInstancesOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`workspace_instances`](crate::operation::list_workspace_instances::builders::ListWorkspaceInstancesOutputBuilder::workspace_instances)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_workspace_instances::ListWorkspaceInstancesOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_workspace_instances::ListWorkspaceInstancesOutput {
            workspace_instances: self.workspace_instances.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "workspace_instances",
                    "workspace_instances was not specified but it is required when building ListWorkspaceInstancesOutput",
                )
            })?,
            next_token: self.next_token,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for ListWorkspaceInstancesOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListWorkspaceInstancesOutputBuilder");
        formatter.field("workspace_instances", &self.workspace_instances);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
