// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateStarterMappingTemplateInput {
    /// <p>Specify the location of the sample EDI file that is used to generate the mapping template.</p>
    pub output_sample_location: ::std::option::Option<crate::types::S3Location>,
    /// <p>Specify the format for the mapping template: either JSONATA or XSLT.</p>
    pub mapping_type: ::std::option::Option<crate::types::MappingType>,
    /// <p>Describes the details needed for generating the template. Specify the X12 transaction set and version for which the template is used: currently, we only support X12.</p>
    pub template_details: ::std::option::Option<crate::types::TemplateDetails>,
}
impl CreateStarterMappingTemplateInput {
    /// <p>Specify the location of the sample EDI file that is used to generate the mapping template.</p>
    pub fn output_sample_location(&self) -> ::std::option::Option<&crate::types::S3Location> {
        self.output_sample_location.as_ref()
    }
    /// <p>Specify the format for the mapping template: either JSONATA or XSLT.</p>
    pub fn mapping_type(&self) -> ::std::option::Option<&crate::types::MappingType> {
        self.mapping_type.as_ref()
    }
    /// <p>Describes the details needed for generating the template. Specify the X12 transaction set and version for which the template is used: currently, we only support X12.</p>
    pub fn template_details(&self) -> ::std::option::Option<&crate::types::TemplateDetails> {
        self.template_details.as_ref()
    }
}
impl CreateStarterMappingTemplateInput {
    /// Creates a new builder-style object to manufacture [`CreateStarterMappingTemplateInput`](crate::operation::create_starter_mapping_template::CreateStarterMappingTemplateInput).
    pub fn builder() -> crate::operation::create_starter_mapping_template::builders::CreateStarterMappingTemplateInputBuilder {
        crate::operation::create_starter_mapping_template::builders::CreateStarterMappingTemplateInputBuilder::default()
    }
}

/// A builder for [`CreateStarterMappingTemplateInput`](crate::operation::create_starter_mapping_template::CreateStarterMappingTemplateInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateStarterMappingTemplateInputBuilder {
    pub(crate) output_sample_location: ::std::option::Option<crate::types::S3Location>,
    pub(crate) mapping_type: ::std::option::Option<crate::types::MappingType>,
    pub(crate) template_details: ::std::option::Option<crate::types::TemplateDetails>,
}
impl CreateStarterMappingTemplateInputBuilder {
    /// <p>Specify the location of the sample EDI file that is used to generate the mapping template.</p>
    pub fn output_sample_location(mut self, input: crate::types::S3Location) -> Self {
        self.output_sample_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify the location of the sample EDI file that is used to generate the mapping template.</p>
    pub fn set_output_sample_location(mut self, input: ::std::option::Option<crate::types::S3Location>) -> Self {
        self.output_sample_location = input;
        self
    }
    /// <p>Specify the location of the sample EDI file that is used to generate the mapping template.</p>
    pub fn get_output_sample_location(&self) -> &::std::option::Option<crate::types::S3Location> {
        &self.output_sample_location
    }
    /// <p>Specify the format for the mapping template: either JSONATA or XSLT.</p>
    /// This field is required.
    pub fn mapping_type(mut self, input: crate::types::MappingType) -> Self {
        self.mapping_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify the format for the mapping template: either JSONATA or XSLT.</p>
    pub fn set_mapping_type(mut self, input: ::std::option::Option<crate::types::MappingType>) -> Self {
        self.mapping_type = input;
        self
    }
    /// <p>Specify the format for the mapping template: either JSONATA or XSLT.</p>
    pub fn get_mapping_type(&self) -> &::std::option::Option<crate::types::MappingType> {
        &self.mapping_type
    }
    /// <p>Describes the details needed for generating the template. Specify the X12 transaction set and version for which the template is used: currently, we only support X12.</p>
    /// This field is required.
    pub fn template_details(mut self, input: crate::types::TemplateDetails) -> Self {
        self.template_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the details needed for generating the template. Specify the X12 transaction set and version for which the template is used: currently, we only support X12.</p>
    pub fn set_template_details(mut self, input: ::std::option::Option<crate::types::TemplateDetails>) -> Self {
        self.template_details = input;
        self
    }
    /// <p>Describes the details needed for generating the template. Specify the X12 transaction set and version for which the template is used: currently, we only support X12.</p>
    pub fn get_template_details(&self) -> &::std::option::Option<crate::types::TemplateDetails> {
        &self.template_details
    }
    /// Consumes the builder and constructs a [`CreateStarterMappingTemplateInput`](crate::operation::create_starter_mapping_template::CreateStarterMappingTemplateInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_starter_mapping_template::CreateStarterMappingTemplateInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_starter_mapping_template::CreateStarterMappingTemplateInput {
            output_sample_location: self.output_sample_location,
            mapping_type: self.mapping_type,
            template_details: self.template_details,
        })
    }
}
