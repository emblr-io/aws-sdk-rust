// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TestConversionOutput {
    /// <p>Returns the converted file content.</p>
    pub converted_file_content: ::std::string::String,
    /// <p>Returns an array of strings, each containing a message that Amazon Web Services B2B Data Interchange generates during the conversion.</p>
    pub validation_messages: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl TestConversionOutput {
    /// <p>Returns the converted file content.</p>
    pub fn converted_file_content(&self) -> &str {
        use std::ops::Deref;
        self.converted_file_content.deref()
    }
    /// <p>Returns an array of strings, each containing a message that Amazon Web Services B2B Data Interchange generates during the conversion.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.validation_messages.is_none()`.
    pub fn validation_messages(&self) -> &[::std::string::String] {
        self.validation_messages.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for TestConversionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TestConversionOutput {
    /// Creates a new builder-style object to manufacture [`TestConversionOutput`](crate::operation::test_conversion::TestConversionOutput).
    pub fn builder() -> crate::operation::test_conversion::builders::TestConversionOutputBuilder {
        crate::operation::test_conversion::builders::TestConversionOutputBuilder::default()
    }
}

/// A builder for [`TestConversionOutput`](crate::operation::test_conversion::TestConversionOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TestConversionOutputBuilder {
    pub(crate) converted_file_content: ::std::option::Option<::std::string::String>,
    pub(crate) validation_messages: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl TestConversionOutputBuilder {
    /// <p>Returns the converted file content.</p>
    /// This field is required.
    pub fn converted_file_content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.converted_file_content = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Returns the converted file content.</p>
    pub fn set_converted_file_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.converted_file_content = input;
        self
    }
    /// <p>Returns the converted file content.</p>
    pub fn get_converted_file_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.converted_file_content
    }
    /// Appends an item to `validation_messages`.
    ///
    /// To override the contents of this collection use [`set_validation_messages`](Self::set_validation_messages).
    ///
    /// <p>Returns an array of strings, each containing a message that Amazon Web Services B2B Data Interchange generates during the conversion.</p>
    pub fn validation_messages(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.validation_messages.unwrap_or_default();
        v.push(input.into());
        self.validation_messages = ::std::option::Option::Some(v);
        self
    }
    /// <p>Returns an array of strings, each containing a message that Amazon Web Services B2B Data Interchange generates during the conversion.</p>
    pub fn set_validation_messages(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.validation_messages = input;
        self
    }
    /// <p>Returns an array of strings, each containing a message that Amazon Web Services B2B Data Interchange generates during the conversion.</p>
    pub fn get_validation_messages(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.validation_messages
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`TestConversionOutput`](crate::operation::test_conversion::TestConversionOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`converted_file_content`](crate::operation::test_conversion::builders::TestConversionOutputBuilder::converted_file_content)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::test_conversion::TestConversionOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::test_conversion::TestConversionOutput {
            converted_file_content: self.converted_file_content.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "converted_file_content",
                    "converted_file_content was not specified but it is required when building TestConversionOutput",
                )
            })?,
            validation_messages: self.validation_messages,
            _request_id: self._request_id,
        })
    }
}
