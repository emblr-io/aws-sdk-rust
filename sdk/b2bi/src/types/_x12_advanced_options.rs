// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains advanced options specific to X12 EDI processing, such as splitting large X12 files into smaller units.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct X12AdvancedOptions {
    /// <p>Specifies options for splitting X12 EDI files. These options control how large X12 files are divided into smaller, more manageable units.</p>
    pub split_options: ::std::option::Option<crate::types::X12SplitOptions>,
}
impl X12AdvancedOptions {
    /// <p>Specifies options for splitting X12 EDI files. These options control how large X12 files are divided into smaller, more manageable units.</p>
    pub fn split_options(&self) -> ::std::option::Option<&crate::types::X12SplitOptions> {
        self.split_options.as_ref()
    }
}
impl X12AdvancedOptions {
    /// Creates a new builder-style object to manufacture [`X12AdvancedOptions`](crate::types::X12AdvancedOptions).
    pub fn builder() -> crate::types::builders::X12AdvancedOptionsBuilder {
        crate::types::builders::X12AdvancedOptionsBuilder::default()
    }
}

/// A builder for [`X12AdvancedOptions`](crate::types::X12AdvancedOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct X12AdvancedOptionsBuilder {
    pub(crate) split_options: ::std::option::Option<crate::types::X12SplitOptions>,
}
impl X12AdvancedOptionsBuilder {
    /// <p>Specifies options for splitting X12 EDI files. These options control how large X12 files are divided into smaller, more manageable units.</p>
    pub fn split_options(mut self, input: crate::types::X12SplitOptions) -> Self {
        self.split_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies options for splitting X12 EDI files. These options control how large X12 files are divided into smaller, more manageable units.</p>
    pub fn set_split_options(mut self, input: ::std::option::Option<crate::types::X12SplitOptions>) -> Self {
        self.split_options = input;
        self
    }
    /// <p>Specifies options for splitting X12 EDI files. These options control how large X12 files are divided into smaller, more manageable units.</p>
    pub fn get_split_options(&self) -> &::std::option::Option<crate::types::X12SplitOptions> {
        &self.split_options
    }
    /// Consumes the builder and constructs a [`X12AdvancedOptions`](crate::types::X12AdvancedOptions).
    pub fn build(self) -> crate::types::X12AdvancedOptions {
        crate::types::X12AdvancedOptions {
            split_options: self.split_options,
        }
    }
}
