// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the formatting options for an outbound transformer (takes JSON or XML as input and converts it to an EDI document (currently only X12 format is supported).</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OutputConversion {
    /// <p>The format for the output from an outbound transformer: only X12 is currently supported.</p>
    pub to_format: crate::types::ToFormat,
    /// <p>A structure that contains the X12 transaction set and version for the transformer output.</p>
    pub format_options: ::std::option::Option<crate::types::FormatOptions>,
}
impl OutputConversion {
    /// <p>The format for the output from an outbound transformer: only X12 is currently supported.</p>
    pub fn to_format(&self) -> &crate::types::ToFormat {
        &self.to_format
    }
    /// <p>A structure that contains the X12 transaction set and version for the transformer output.</p>
    pub fn format_options(&self) -> ::std::option::Option<&crate::types::FormatOptions> {
        self.format_options.as_ref()
    }
}
impl OutputConversion {
    /// Creates a new builder-style object to manufacture [`OutputConversion`](crate::types::OutputConversion).
    pub fn builder() -> crate::types::builders::OutputConversionBuilder {
        crate::types::builders::OutputConversionBuilder::default()
    }
}

/// A builder for [`OutputConversion`](crate::types::OutputConversion).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OutputConversionBuilder {
    pub(crate) to_format: ::std::option::Option<crate::types::ToFormat>,
    pub(crate) format_options: ::std::option::Option<crate::types::FormatOptions>,
}
impl OutputConversionBuilder {
    /// <p>The format for the output from an outbound transformer: only X12 is currently supported.</p>
    /// This field is required.
    pub fn to_format(mut self, input: crate::types::ToFormat) -> Self {
        self.to_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format for the output from an outbound transformer: only X12 is currently supported.</p>
    pub fn set_to_format(mut self, input: ::std::option::Option<crate::types::ToFormat>) -> Self {
        self.to_format = input;
        self
    }
    /// <p>The format for the output from an outbound transformer: only X12 is currently supported.</p>
    pub fn get_to_format(&self) -> &::std::option::Option<crate::types::ToFormat> {
        &self.to_format
    }
    /// <p>A structure that contains the X12 transaction set and version for the transformer output.</p>
    pub fn format_options(mut self, input: crate::types::FormatOptions) -> Self {
        self.format_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that contains the X12 transaction set and version for the transformer output.</p>
    pub fn set_format_options(mut self, input: ::std::option::Option<crate::types::FormatOptions>) -> Self {
        self.format_options = input;
        self
    }
    /// <p>A structure that contains the X12 transaction set and version for the transformer output.</p>
    pub fn get_format_options(&self) -> &::std::option::Option<crate::types::FormatOptions> {
        &self.format_options
    }
    /// Consumes the builder and constructs a [`OutputConversion`](crate::types::OutputConversion).
    /// This method will fail if any of the following fields are not set:
    /// - [`to_format`](crate::types::builders::OutputConversionBuilder::to_format)
    pub fn build(self) -> ::std::result::Result<crate::types::OutputConversion, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OutputConversion {
            to_format: self.to_format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "to_format",
                    "to_format was not specified but it is required when building OutputConversion",
                )
            })?,
            format_options: self.format_options,
        })
    }
}
