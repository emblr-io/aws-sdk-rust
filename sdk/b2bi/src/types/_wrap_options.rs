// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains options for wrapping (line folding) in X12 EDI files. Wrapping controls how long lines are handled in the EDI output.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WrapOptions {
    /// <p>Specifies the method used for wrapping lines in the EDI output. Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>SEGMENT</code>: Wraps by segment.</p></li>
    /// <li>
    /// <p><code>ONE_LINE</code>: Indicates that the entire content is on a single line.</p><note>
    /// <p>When you specify <code>ONE_LINE</code>, do not provide either the line length nor the line terminator value.</p>
    /// </note></li>
    /// <li>
    /// <p><code>LINE_LENGTH</code>: Wraps by character count, as specified by <code>lineLength</code> value.</p></li>
    /// </ul>
    pub wrap_by: crate::types::WrapFormat,
    /// <p>Specifies the character sequence used to terminate lines when wrapping. Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>CRLF</code>: carriage return and line feed</p></li>
    /// <li>
    /// <p><code>LF</code>: line feed)</p></li>
    /// <li>
    /// <p><code>CR</code>: carriage return</p></li>
    /// </ul>
    pub line_terminator: ::std::option::Option<crate::types::LineTerminator>,
    /// <p>Specifies the maximum length of a line before wrapping occurs. This value is used when <code>wrapBy</code> is set to <code>LINE_LENGTH</code>.</p>
    pub line_length: ::std::option::Option<i32>,
}
impl WrapOptions {
    /// <p>Specifies the method used for wrapping lines in the EDI output. Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>SEGMENT</code>: Wraps by segment.</p></li>
    /// <li>
    /// <p><code>ONE_LINE</code>: Indicates that the entire content is on a single line.</p><note>
    /// <p>When you specify <code>ONE_LINE</code>, do not provide either the line length nor the line terminator value.</p>
    /// </note></li>
    /// <li>
    /// <p><code>LINE_LENGTH</code>: Wraps by character count, as specified by <code>lineLength</code> value.</p></li>
    /// </ul>
    pub fn wrap_by(&self) -> &crate::types::WrapFormat {
        &self.wrap_by
    }
    /// <p>Specifies the character sequence used to terminate lines when wrapping. Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>CRLF</code>: carriage return and line feed</p></li>
    /// <li>
    /// <p><code>LF</code>: line feed)</p></li>
    /// <li>
    /// <p><code>CR</code>: carriage return</p></li>
    /// </ul>
    pub fn line_terminator(&self) -> ::std::option::Option<&crate::types::LineTerminator> {
        self.line_terminator.as_ref()
    }
    /// <p>Specifies the maximum length of a line before wrapping occurs. This value is used when <code>wrapBy</code> is set to <code>LINE_LENGTH</code>.</p>
    pub fn line_length(&self) -> ::std::option::Option<i32> {
        self.line_length
    }
}
impl WrapOptions {
    /// Creates a new builder-style object to manufacture [`WrapOptions`](crate::types::WrapOptions).
    pub fn builder() -> crate::types::builders::WrapOptionsBuilder {
        crate::types::builders::WrapOptionsBuilder::default()
    }
}

/// A builder for [`WrapOptions`](crate::types::WrapOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WrapOptionsBuilder {
    pub(crate) wrap_by: ::std::option::Option<crate::types::WrapFormat>,
    pub(crate) line_terminator: ::std::option::Option<crate::types::LineTerminator>,
    pub(crate) line_length: ::std::option::Option<i32>,
}
impl WrapOptionsBuilder {
    /// <p>Specifies the method used for wrapping lines in the EDI output. Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>SEGMENT</code>: Wraps by segment.</p></li>
    /// <li>
    /// <p><code>ONE_LINE</code>: Indicates that the entire content is on a single line.</p><note>
    /// <p>When you specify <code>ONE_LINE</code>, do not provide either the line length nor the line terminator value.</p>
    /// </note></li>
    /// <li>
    /// <p><code>LINE_LENGTH</code>: Wraps by character count, as specified by <code>lineLength</code> value.</p></li>
    /// </ul>
    /// This field is required.
    pub fn wrap_by(mut self, input: crate::types::WrapFormat) -> Self {
        self.wrap_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the method used for wrapping lines in the EDI output. Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>SEGMENT</code>: Wraps by segment.</p></li>
    /// <li>
    /// <p><code>ONE_LINE</code>: Indicates that the entire content is on a single line.</p><note>
    /// <p>When you specify <code>ONE_LINE</code>, do not provide either the line length nor the line terminator value.</p>
    /// </note></li>
    /// <li>
    /// <p><code>LINE_LENGTH</code>: Wraps by character count, as specified by <code>lineLength</code> value.</p></li>
    /// </ul>
    pub fn set_wrap_by(mut self, input: ::std::option::Option<crate::types::WrapFormat>) -> Self {
        self.wrap_by = input;
        self
    }
    /// <p>Specifies the method used for wrapping lines in the EDI output. Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>SEGMENT</code>: Wraps by segment.</p></li>
    /// <li>
    /// <p><code>ONE_LINE</code>: Indicates that the entire content is on a single line.</p><note>
    /// <p>When you specify <code>ONE_LINE</code>, do not provide either the line length nor the line terminator value.</p>
    /// </note></li>
    /// <li>
    /// <p><code>LINE_LENGTH</code>: Wraps by character count, as specified by <code>lineLength</code> value.</p></li>
    /// </ul>
    pub fn get_wrap_by(&self) -> &::std::option::Option<crate::types::WrapFormat> {
        &self.wrap_by
    }
    /// <p>Specifies the character sequence used to terminate lines when wrapping. Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>CRLF</code>: carriage return and line feed</p></li>
    /// <li>
    /// <p><code>LF</code>: line feed)</p></li>
    /// <li>
    /// <p><code>CR</code>: carriage return</p></li>
    /// </ul>
    pub fn line_terminator(mut self, input: crate::types::LineTerminator) -> Self {
        self.line_terminator = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the character sequence used to terminate lines when wrapping. Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>CRLF</code>: carriage return and line feed</p></li>
    /// <li>
    /// <p><code>LF</code>: line feed)</p></li>
    /// <li>
    /// <p><code>CR</code>: carriage return</p></li>
    /// </ul>
    pub fn set_line_terminator(mut self, input: ::std::option::Option<crate::types::LineTerminator>) -> Self {
        self.line_terminator = input;
        self
    }
    /// <p>Specifies the character sequence used to terminate lines when wrapping. Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>CRLF</code>: carriage return and line feed</p></li>
    /// <li>
    /// <p><code>LF</code>: line feed)</p></li>
    /// <li>
    /// <p><code>CR</code>: carriage return</p></li>
    /// </ul>
    pub fn get_line_terminator(&self) -> &::std::option::Option<crate::types::LineTerminator> {
        &self.line_terminator
    }
    /// <p>Specifies the maximum length of a line before wrapping occurs. This value is used when <code>wrapBy</code> is set to <code>LINE_LENGTH</code>.</p>
    pub fn line_length(mut self, input: i32) -> Self {
        self.line_length = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the maximum length of a line before wrapping occurs. This value is used when <code>wrapBy</code> is set to <code>LINE_LENGTH</code>.</p>
    pub fn set_line_length(mut self, input: ::std::option::Option<i32>) -> Self {
        self.line_length = input;
        self
    }
    /// <p>Specifies the maximum length of a line before wrapping occurs. This value is used when <code>wrapBy</code> is set to <code>LINE_LENGTH</code>.</p>
    pub fn get_line_length(&self) -> &::std::option::Option<i32> {
        &self.line_length
    }
    /// Consumes the builder and constructs a [`WrapOptions`](crate::types::WrapOptions).
    /// This method will fail if any of the following fields are not set:
    /// - [`wrap_by`](crate::types::builders::WrapOptionsBuilder::wrap_by)
    pub fn build(self) -> ::std::result::Result<crate::types::WrapOptions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WrapOptions {
            wrap_by: self.wrap_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "wrap_by",
                    "wrap_by was not specified but it is required when building WrapOptions",
                )
            })?,
            line_terminator: self.line_terminator,
            line_length: self.line_length,
        })
    }
}
