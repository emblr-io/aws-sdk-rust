// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains a structure describing the X12 details for the conversion target.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum ConversionTargetFormatDetails {
    /// <p>A structure that contains the X12 transaction set and version. The X12 structure is used when the system transforms an EDI (electronic data interchange) file.</p><note>
    /// <p>If an EDI input file contains more than one transaction, each transaction must have the same transaction set and version, for example 214/4010. If not, the transformer cannot parse the file.</p>
    /// </note>
    X12(crate::types::X12Details),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ConversionTargetFormatDetails {
    #[allow(irrefutable_let_patterns)]
    /// Tries to convert the enum instance into [`X12`](crate::types::ConversionTargetFormatDetails::X12), extracting the inner [`X12Details`](crate::types::X12Details).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_x12(&self) -> ::std::result::Result<&crate::types::X12Details, &Self> {
        if let ConversionTargetFormatDetails::X12(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`X12`](crate::types::ConversionTargetFormatDetails::X12).
    pub fn is_x12(&self) -> bool {
        self.as_x12().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
