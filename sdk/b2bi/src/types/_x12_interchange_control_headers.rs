// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>In X12, the Interchange Control Header is the first segment of an EDI document and is part of the Interchange Envelope. It contains information about the sender and receiver, the date and time of transmission, and the X12 version being used. It also includes delivery information, such as the sender and receiver IDs.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct X12InterchangeControlHeaders {
    /// <p>Located at position ISA-05 in the header. Qualifier for the sender ID. Together, the ID and qualifier uniquely identify the sending trading partner.</p>
    pub sender_id_qualifier: ::std::option::Option<::std::string::String>,
    /// <p>Located at position ISA-06 in the header. This value (along with the <code>senderIdQualifier</code>) identifies the sender of the interchange.</p>
    pub sender_id: ::std::option::Option<::std::string::String>,
    /// <p>Located at position ISA-07 in the header. Qualifier for the receiver ID. Together, the ID and qualifier uniquely identify the receiving trading partner.</p>
    pub receiver_id_qualifier: ::std::option::Option<::std::string::String>,
    /// <p>Located at position ISA-08 in the header. This value (along with the <code>receiverIdQualifier</code>) identifies the intended recipient of the interchange.</p>
    pub receiver_id: ::std::option::Option<::std::string::String>,
    /// <p>Located at position ISA-11 in the header. This string makes it easier when you need to group similar adjacent element values together without using extra segments.</p><note>
    /// <p>This parameter is only honored for version greater than 401 (<code>VERSION_4010</code> and higher).</p>
    /// <p>For versions less than 401, this field is called <a href="https://www.stedi.com/edi/x12-004010/segment/ISA#ISA-11">StandardsId</a>, in which case our service sets the value to <code>U</code>.</p>
    /// </note>
    pub repetition_separator: ::std::option::Option<::std::string::String>,
    /// <p>Located at position ISA-14 in the header. The value "1" indicates that the sender is requesting an interchange acknowledgment at receipt of the interchange. The value "0" is used otherwise.</p>
    pub acknowledgment_requested_code: ::std::option::Option<::std::string::String>,
    /// <p>Located at position ISA-15 in the header. Specifies how this interchange is being used:</p>
    /// <ul>
    /// <li>
    /// <p><code>T</code> indicates this interchange is for testing.</p></li>
    /// <li>
    /// <p><code>P</code> indicates this interchange is for production.</p></li>
    /// <li>
    /// <p><code>I</code> indicates this interchange is informational.</p></li>
    /// </ul>
    pub usage_indicator_code: ::std::option::Option<::std::string::String>,
}
impl X12InterchangeControlHeaders {
    /// <p>Located at position ISA-05 in the header. Qualifier for the sender ID. Together, the ID and qualifier uniquely identify the sending trading partner.</p>
    pub fn sender_id_qualifier(&self) -> ::std::option::Option<&str> {
        self.sender_id_qualifier.as_deref()
    }
    /// <p>Located at position ISA-06 in the header. This value (along with the <code>senderIdQualifier</code>) identifies the sender of the interchange.</p>
    pub fn sender_id(&self) -> ::std::option::Option<&str> {
        self.sender_id.as_deref()
    }
    /// <p>Located at position ISA-07 in the header. Qualifier for the receiver ID. Together, the ID and qualifier uniquely identify the receiving trading partner.</p>
    pub fn receiver_id_qualifier(&self) -> ::std::option::Option<&str> {
        self.receiver_id_qualifier.as_deref()
    }
    /// <p>Located at position ISA-08 in the header. This value (along with the <code>receiverIdQualifier</code>) identifies the intended recipient of the interchange.</p>
    pub fn receiver_id(&self) -> ::std::option::Option<&str> {
        self.receiver_id.as_deref()
    }
    /// <p>Located at position ISA-11 in the header. This string makes it easier when you need to group similar adjacent element values together without using extra segments.</p><note>
    /// <p>This parameter is only honored for version greater than 401 (<code>VERSION_4010</code> and higher).</p>
    /// <p>For versions less than 401, this field is called <a href="https://www.stedi.com/edi/x12-004010/segment/ISA#ISA-11">StandardsId</a>, in which case our service sets the value to <code>U</code>.</p>
    /// </note>
    pub fn repetition_separator(&self) -> ::std::option::Option<&str> {
        self.repetition_separator.as_deref()
    }
    /// <p>Located at position ISA-14 in the header. The value "1" indicates that the sender is requesting an interchange acknowledgment at receipt of the interchange. The value "0" is used otherwise.</p>
    pub fn acknowledgment_requested_code(&self) -> ::std::option::Option<&str> {
        self.acknowledgment_requested_code.as_deref()
    }
    /// <p>Located at position ISA-15 in the header. Specifies how this interchange is being used:</p>
    /// <ul>
    /// <li>
    /// <p><code>T</code> indicates this interchange is for testing.</p></li>
    /// <li>
    /// <p><code>P</code> indicates this interchange is for production.</p></li>
    /// <li>
    /// <p><code>I</code> indicates this interchange is informational.</p></li>
    /// </ul>
    pub fn usage_indicator_code(&self) -> ::std::option::Option<&str> {
        self.usage_indicator_code.as_deref()
    }
}
impl X12InterchangeControlHeaders {
    /// Creates a new builder-style object to manufacture [`X12InterchangeControlHeaders`](crate::types::X12InterchangeControlHeaders).
    pub fn builder() -> crate::types::builders::X12InterchangeControlHeadersBuilder {
        crate::types::builders::X12InterchangeControlHeadersBuilder::default()
    }
}

/// A builder for [`X12InterchangeControlHeaders`](crate::types::X12InterchangeControlHeaders).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct X12InterchangeControlHeadersBuilder {
    pub(crate) sender_id_qualifier: ::std::option::Option<::std::string::String>,
    pub(crate) sender_id: ::std::option::Option<::std::string::String>,
    pub(crate) receiver_id_qualifier: ::std::option::Option<::std::string::String>,
    pub(crate) receiver_id: ::std::option::Option<::std::string::String>,
    pub(crate) repetition_separator: ::std::option::Option<::std::string::String>,
    pub(crate) acknowledgment_requested_code: ::std::option::Option<::std::string::String>,
    pub(crate) usage_indicator_code: ::std::option::Option<::std::string::String>,
}
impl X12InterchangeControlHeadersBuilder {
    /// <p>Located at position ISA-05 in the header. Qualifier for the sender ID. Together, the ID and qualifier uniquely identify the sending trading partner.</p>
    pub fn sender_id_qualifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sender_id_qualifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Located at position ISA-05 in the header. Qualifier for the sender ID. Together, the ID and qualifier uniquely identify the sending trading partner.</p>
    pub fn set_sender_id_qualifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sender_id_qualifier = input;
        self
    }
    /// <p>Located at position ISA-05 in the header. Qualifier for the sender ID. Together, the ID and qualifier uniquely identify the sending trading partner.</p>
    pub fn get_sender_id_qualifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.sender_id_qualifier
    }
    /// <p>Located at position ISA-06 in the header. This value (along with the <code>senderIdQualifier</code>) identifies the sender of the interchange.</p>
    pub fn sender_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sender_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Located at position ISA-06 in the header. This value (along with the <code>senderIdQualifier</code>) identifies the sender of the interchange.</p>
    pub fn set_sender_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sender_id = input;
        self
    }
    /// <p>Located at position ISA-06 in the header. This value (along with the <code>senderIdQualifier</code>) identifies the sender of the interchange.</p>
    pub fn get_sender_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sender_id
    }
    /// <p>Located at position ISA-07 in the header. Qualifier for the receiver ID. Together, the ID and qualifier uniquely identify the receiving trading partner.</p>
    pub fn receiver_id_qualifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.receiver_id_qualifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Located at position ISA-07 in the header. Qualifier for the receiver ID. Together, the ID and qualifier uniquely identify the receiving trading partner.</p>
    pub fn set_receiver_id_qualifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.receiver_id_qualifier = input;
        self
    }
    /// <p>Located at position ISA-07 in the header. Qualifier for the receiver ID. Together, the ID and qualifier uniquely identify the receiving trading partner.</p>
    pub fn get_receiver_id_qualifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.receiver_id_qualifier
    }
    /// <p>Located at position ISA-08 in the header. This value (along with the <code>receiverIdQualifier</code>) identifies the intended recipient of the interchange.</p>
    pub fn receiver_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.receiver_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Located at position ISA-08 in the header. This value (along with the <code>receiverIdQualifier</code>) identifies the intended recipient of the interchange.</p>
    pub fn set_receiver_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.receiver_id = input;
        self
    }
    /// <p>Located at position ISA-08 in the header. This value (along with the <code>receiverIdQualifier</code>) identifies the intended recipient of the interchange.</p>
    pub fn get_receiver_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.receiver_id
    }
    /// <p>Located at position ISA-11 in the header. This string makes it easier when you need to group similar adjacent element values together without using extra segments.</p><note>
    /// <p>This parameter is only honored for version greater than 401 (<code>VERSION_4010</code> and higher).</p>
    /// <p>For versions less than 401, this field is called <a href="https://www.stedi.com/edi/x12-004010/segment/ISA#ISA-11">StandardsId</a>, in which case our service sets the value to <code>U</code>.</p>
    /// </note>
    pub fn repetition_separator(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repetition_separator = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Located at position ISA-11 in the header. This string makes it easier when you need to group similar adjacent element values together without using extra segments.</p><note>
    /// <p>This parameter is only honored for version greater than 401 (<code>VERSION_4010</code> and higher).</p>
    /// <p>For versions less than 401, this field is called <a href="https://www.stedi.com/edi/x12-004010/segment/ISA#ISA-11">StandardsId</a>, in which case our service sets the value to <code>U</code>.</p>
    /// </note>
    pub fn set_repetition_separator(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repetition_separator = input;
        self
    }
    /// <p>Located at position ISA-11 in the header. This string makes it easier when you need to group similar adjacent element values together without using extra segments.</p><note>
    /// <p>This parameter is only honored for version greater than 401 (<code>VERSION_4010</code> and higher).</p>
    /// <p>For versions less than 401, this field is called <a href="https://www.stedi.com/edi/x12-004010/segment/ISA#ISA-11">StandardsId</a>, in which case our service sets the value to <code>U</code>.</p>
    /// </note>
    pub fn get_repetition_separator(&self) -> &::std::option::Option<::std::string::String> {
        &self.repetition_separator
    }
    /// <p>Located at position ISA-14 in the header. The value "1" indicates that the sender is requesting an interchange acknowledgment at receipt of the interchange. The value "0" is used otherwise.</p>
    pub fn acknowledgment_requested_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.acknowledgment_requested_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Located at position ISA-14 in the header. The value "1" indicates that the sender is requesting an interchange acknowledgment at receipt of the interchange. The value "0" is used otherwise.</p>
    pub fn set_acknowledgment_requested_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.acknowledgment_requested_code = input;
        self
    }
    /// <p>Located at position ISA-14 in the header. The value "1" indicates that the sender is requesting an interchange acknowledgment at receipt of the interchange. The value "0" is used otherwise.</p>
    pub fn get_acknowledgment_requested_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.acknowledgment_requested_code
    }
    /// <p>Located at position ISA-15 in the header. Specifies how this interchange is being used:</p>
    /// <ul>
    /// <li>
    /// <p><code>T</code> indicates this interchange is for testing.</p></li>
    /// <li>
    /// <p><code>P</code> indicates this interchange is for production.</p></li>
    /// <li>
    /// <p><code>I</code> indicates this interchange is informational.</p></li>
    /// </ul>
    pub fn usage_indicator_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.usage_indicator_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Located at position ISA-15 in the header. Specifies how this interchange is being used:</p>
    /// <ul>
    /// <li>
    /// <p><code>T</code> indicates this interchange is for testing.</p></li>
    /// <li>
    /// <p><code>P</code> indicates this interchange is for production.</p></li>
    /// <li>
    /// <p><code>I</code> indicates this interchange is informational.</p></li>
    /// </ul>
    pub fn set_usage_indicator_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.usage_indicator_code = input;
        self
    }
    /// <p>Located at position ISA-15 in the header. Specifies how this interchange is being used:</p>
    /// <ul>
    /// <li>
    /// <p><code>T</code> indicates this interchange is for testing.</p></li>
    /// <li>
    /// <p><code>P</code> indicates this interchange is for production.</p></li>
    /// <li>
    /// <p><code>I</code> indicates this interchange is informational.</p></li>
    /// </ul>
    pub fn get_usage_indicator_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.usage_indicator_code
    }
    /// Consumes the builder and constructs a [`X12InterchangeControlHeaders`](crate::types::X12InterchangeControlHeaders).
    pub fn build(self) -> crate::types::X12InterchangeControlHeaders {
        crate::types::X12InterchangeControlHeaders {
            sender_id_qualifier: self.sender_id_qualifier,
            sender_id: self.sender_id,
            receiver_id_qualifier: self.receiver_id_qualifier,
            receiver_id: self.receiver_id,
            repetition_separator: self.repetition_separator,
            acknowledgment_requested_code: self.acknowledgment_requested_code,
            usage_indicator_code: self.usage_indicator_code,
        }
    }
}
