// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains advanced options for EDI processing. Currently, only X12 advanced options are supported.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AdvancedOptions {
    /// <p>A structure that contains X12-specific advanced options, such as split options for processing X12 EDI files.</p>
    pub x12: ::std::option::Option<crate::types::X12AdvancedOptions>,
}
impl AdvancedOptions {
    /// <p>A structure that contains X12-specific advanced options, such as split options for processing X12 EDI files.</p>
    pub fn x12(&self) -> ::std::option::Option<&crate::types::X12AdvancedOptions> {
        self.x12.as_ref()
    }
}
impl AdvancedOptions {
    /// Creates a new builder-style object to manufacture [`AdvancedOptions`](crate::types::AdvancedOptions).
    pub fn builder() -> crate::types::builders::AdvancedOptionsBuilder {
        crate::types::builders::AdvancedOptionsBuilder::default()
    }
}

/// A builder for [`AdvancedOptions`](crate::types::AdvancedOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AdvancedOptionsBuilder {
    pub(crate) x12: ::std::option::Option<crate::types::X12AdvancedOptions>,
}
impl AdvancedOptionsBuilder {
    /// <p>A structure that contains X12-specific advanced options, such as split options for processing X12 EDI files.</p>
    pub fn x12(mut self, input: crate::types::X12AdvancedOptions) -> Self {
        self.x12 = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that contains X12-specific advanced options, such as split options for processing X12 EDI files.</p>
    pub fn set_x12(mut self, input: ::std::option::Option<crate::types::X12AdvancedOptions>) -> Self {
        self.x12 = input;
        self
    }
    /// <p>A structure that contains X12-specific advanced options, such as split options for processing X12 EDI files.</p>
    pub fn get_x12(&self) -> &::std::option::Option<crate::types::X12AdvancedOptions> {
        &self.x12
    }
    /// Consumes the builder and constructs a [`AdvancedOptions`](crate::types::AdvancedOptions).
    pub fn build(self) -> crate::types::AdvancedOptions {
        crate::types::AdvancedOptions { x12: self.x12 }
    }
}
