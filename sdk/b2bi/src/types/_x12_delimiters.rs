// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>In X12 EDI messages, delimiters are used to mark the end of segments or elements, and are defined in the interchange control header. The delimiters are part of the message's syntax and divide up its different elements.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct X12Delimiters {
    /// <p>The component, or sub-element, separator. The default value is <code>:</code> (colon).</p>
    pub component_separator: ::std::option::Option<::std::string::String>,
    /// <p>The data element separator. The default value is <code>*</code> (asterisk).</p>
    pub data_element_separator: ::std::option::Option<::std::string::String>,
    /// <p>The segment terminator. The default value is <code>~</code> (tilde).</p>
    pub segment_terminator: ::std::option::Option<::std::string::String>,
}
impl X12Delimiters {
    /// <p>The component, or sub-element, separator. The default value is <code>:</code> (colon).</p>
    pub fn component_separator(&self) -> ::std::option::Option<&str> {
        self.component_separator.as_deref()
    }
    /// <p>The data element separator. The default value is <code>*</code> (asterisk).</p>
    pub fn data_element_separator(&self) -> ::std::option::Option<&str> {
        self.data_element_separator.as_deref()
    }
    /// <p>The segment terminator. The default value is <code>~</code> (tilde).</p>
    pub fn segment_terminator(&self) -> ::std::option::Option<&str> {
        self.segment_terminator.as_deref()
    }
}
impl X12Delimiters {
    /// Creates a new builder-style object to manufacture [`X12Delimiters`](crate::types::X12Delimiters).
    pub fn builder() -> crate::types::builders::X12DelimitersBuilder {
        crate::types::builders::X12DelimitersBuilder::default()
    }
}

/// A builder for [`X12Delimiters`](crate::types::X12Delimiters).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct X12DelimitersBuilder {
    pub(crate) component_separator: ::std::option::Option<::std::string::String>,
    pub(crate) data_element_separator: ::std::option::Option<::std::string::String>,
    pub(crate) segment_terminator: ::std::option::Option<::std::string::String>,
}
impl X12DelimitersBuilder {
    /// <p>The component, or sub-element, separator. The default value is <code>:</code> (colon).</p>
    pub fn component_separator(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.component_separator = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The component, or sub-element, separator. The default value is <code>:</code> (colon).</p>
    pub fn set_component_separator(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.component_separator = input;
        self
    }
    /// <p>The component, or sub-element, separator. The default value is <code>:</code> (colon).</p>
    pub fn get_component_separator(&self) -> &::std::option::Option<::std::string::String> {
        &self.component_separator
    }
    /// <p>The data element separator. The default value is <code>*</code> (asterisk).</p>
    pub fn data_element_separator(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_element_separator = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data element separator. The default value is <code>*</code> (asterisk).</p>
    pub fn set_data_element_separator(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_element_separator = input;
        self
    }
    /// <p>The data element separator. The default value is <code>*</code> (asterisk).</p>
    pub fn get_data_element_separator(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_element_separator
    }
    /// <p>The segment terminator. The default value is <code>~</code> (tilde).</p>
    pub fn segment_terminator(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.segment_terminator = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The segment terminator. The default value is <code>~</code> (tilde).</p>
    pub fn set_segment_terminator(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.segment_terminator = input;
        self
    }
    /// <p>The segment terminator. The default value is <code>~</code> (tilde).</p>
    pub fn get_segment_terminator(&self) -> &::std::option::Option<::std::string::String> {
        &self.segment_terminator
    }
    /// Consumes the builder and constructs a [`X12Delimiters`](crate::types::X12Delimiters).
    pub fn build(self) -> crate::types::X12Delimiters {
        crate::types::X12Delimiters {
            component_separator: self.component_separator,
            data_element_separator: self.data_element_separator,
            segment_terminator: self.segment_terminator,
        }
    }
}
