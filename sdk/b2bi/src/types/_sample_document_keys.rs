// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An array of the Amazon S3 keys used to identify the location for your sample documents.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SampleDocumentKeys {
    /// <p>An array of keys for your input sample documents.</p>
    pub input: ::std::option::Option<::std::string::String>,
    /// <p>An array of keys for your output sample documents.</p>
    pub output: ::std::option::Option<::std::string::String>,
}
impl SampleDocumentKeys {
    /// <p>An array of keys for your input sample documents.</p>
    pub fn input(&self) -> ::std::option::Option<&str> {
        self.input.as_deref()
    }
    /// <p>An array of keys for your output sample documents.</p>
    pub fn output(&self) -> ::std::option::Option<&str> {
        self.output.as_deref()
    }
}
impl SampleDocumentKeys {
    /// Creates a new builder-style object to manufacture [`SampleDocumentKeys`](crate::types::SampleDocumentKeys).
    pub fn builder() -> crate::types::builders::SampleDocumentKeysBuilder {
        crate::types::builders::SampleDocumentKeysBuilder::default()
    }
}

/// A builder for [`SampleDocumentKeys`](crate::types::SampleDocumentKeys).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SampleDocumentKeysBuilder {
    pub(crate) input: ::std::option::Option<::std::string::String>,
    pub(crate) output: ::std::option::Option<::std::string::String>,
}
impl SampleDocumentKeysBuilder {
    /// <p>An array of keys for your input sample documents.</p>
    pub fn input(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An array of keys for your input sample documents.</p>
    pub fn set_input(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input = input;
        self
    }
    /// <p>An array of keys for your input sample documents.</p>
    pub fn get_input(&self) -> &::std::option::Option<::std::string::String> {
        &self.input
    }
    /// <p>An array of keys for your output sample documents.</p>
    pub fn output(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.output = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An array of keys for your output sample documents.</p>
    pub fn set_output(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.output = input;
        self
    }
    /// <p>An array of keys for your output sample documents.</p>
    pub fn get_output(&self) -> &::std::option::Option<::std::string::String> {
        &self.output
    }
    /// Consumes the builder and constructs a [`SampleDocumentKeys`](crate::types::SampleDocumentKeys).
    pub fn build(self) -> crate::types::SampleDocumentKeys {
        crate::types::SampleDocumentKeys {
            input: self.input,
            output: self.output,
        }
    }
}
