// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains options for splitting X12 EDI files into smaller units. This is useful for processing large EDI files more efficiently.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct X12SplitOptions {
    /// <p>Specifies the method used to split X12 EDI files. Valid values include <code>TRANSACTION</code> (split by individual transaction sets), or <code>NONE</code> (no splitting).</p>
    pub split_by: crate::types::X12SplitBy,
}
impl X12SplitOptions {
    /// <p>Specifies the method used to split X12 EDI files. Valid values include <code>TRANSACTION</code> (split by individual transaction sets), or <code>NONE</code> (no splitting).</p>
    pub fn split_by(&self) -> &crate::types::X12SplitBy {
        &self.split_by
    }
}
impl X12SplitOptions {
    /// Creates a new builder-style object to manufacture [`X12SplitOptions`](crate::types::X12SplitOptions).
    pub fn builder() -> crate::types::builders::X12SplitOptionsBuilder {
        crate::types::builders::X12SplitOptionsBuilder::default()
    }
}

/// A builder for [`X12SplitOptions`](crate::types::X12SplitOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct X12SplitOptionsBuilder {
    pub(crate) split_by: ::std::option::Option<crate::types::X12SplitBy>,
}
impl X12SplitOptionsBuilder {
    /// <p>Specifies the method used to split X12 EDI files. Valid values include <code>TRANSACTION</code> (split by individual transaction sets), or <code>NONE</code> (no splitting).</p>
    /// This field is required.
    pub fn split_by(mut self, input: crate::types::X12SplitBy) -> Self {
        self.split_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the method used to split X12 EDI files. Valid values include <code>TRANSACTION</code> (split by individual transaction sets), or <code>NONE</code> (no splitting).</p>
    pub fn set_split_by(mut self, input: ::std::option::Option<crate::types::X12SplitBy>) -> Self {
        self.split_by = input;
        self
    }
    /// <p>Specifies the method used to split X12 EDI files. Valid values include <code>TRANSACTION</code> (split by individual transaction sets), or <code>NONE</code> (no splitting).</p>
    pub fn get_split_by(&self) -> &::std::option::Option<crate::types::X12SplitBy> {
        &self.split_by
    }
    /// Consumes the builder and constructs a [`X12SplitOptions`](crate::types::X12SplitOptions).
    /// This method will fail if any of the following fields are not set:
    /// - [`split_by`](crate::types::builders::X12SplitOptionsBuilder::split_by)
    pub fn build(self) -> ::std::result::Result<crate::types::X12SplitOptions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::X12SplitOptions {
            split_by: self.split_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "split_by",
                    "split_by was not specified but it is required when building X12SplitOptions",
                )
            })?,
        })
    }
}
