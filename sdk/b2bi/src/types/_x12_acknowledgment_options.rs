// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains options for configuring X12 acknowledgments. These options control how functional and technical acknowledgments are handled.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct X12AcknowledgmentOptions {
    /// <p>Specifies whether functional acknowledgments (997/999) should be generated for incoming X12 transactions. Valid values are <code>DO_NOT_GENERATE</code>, <code>GENERATE_ALL_SEGMENTS</code> and <code>GENERATE_WITHOUT_TRANSACTION_SET_RESPONSE_LOOP</code>.</p>
    /// <p>If you choose <code>GENERATE_WITHOUT_TRANSACTION_SET_RESPONSE_LOOP</code>, Amazon Web Services B2B Data Interchange skips the AK2_Loop when generating an acknowledgment document.</p>
    pub functional_acknowledgment: crate::types::X12FunctionalAcknowledgment,
    /// <p>Specifies whether technical acknowledgments (TA1) should be generated for incoming X12 interchanges. Valid values are <code>DO_NOT_GENERATE</code> and <code>GENERATE_ALL_SEGMENTS</code> and.</p>
    pub technical_acknowledgment: crate::types::X12TechnicalAcknowledgment,
}
impl X12AcknowledgmentOptions {
    /// <p>Specifies whether functional acknowledgments (997/999) should be generated for incoming X12 transactions. Valid values are <code>DO_NOT_GENERATE</code>, <code>GENERATE_ALL_SEGMENTS</code> and <code>GENERATE_WITHOUT_TRANSACTION_SET_RESPONSE_LOOP</code>.</p>
    /// <p>If you choose <code>GENERATE_WITHOUT_TRANSACTION_SET_RESPONSE_LOOP</code>, Amazon Web Services B2B Data Interchange skips the AK2_Loop when generating an acknowledgment document.</p>
    pub fn functional_acknowledgment(&self) -> &crate::types::X12FunctionalAcknowledgment {
        &self.functional_acknowledgment
    }
    /// <p>Specifies whether technical acknowledgments (TA1) should be generated for incoming X12 interchanges. Valid values are <code>DO_NOT_GENERATE</code> and <code>GENERATE_ALL_SEGMENTS</code> and.</p>
    pub fn technical_acknowledgment(&self) -> &crate::types::X12TechnicalAcknowledgment {
        &self.technical_acknowledgment
    }
}
impl X12AcknowledgmentOptions {
    /// Creates a new builder-style object to manufacture [`X12AcknowledgmentOptions`](crate::types::X12AcknowledgmentOptions).
    pub fn builder() -> crate::types::builders::X12AcknowledgmentOptionsBuilder {
        crate::types::builders::X12AcknowledgmentOptionsBuilder::default()
    }
}

/// A builder for [`X12AcknowledgmentOptions`](crate::types::X12AcknowledgmentOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct X12AcknowledgmentOptionsBuilder {
    pub(crate) functional_acknowledgment: ::std::option::Option<crate::types::X12FunctionalAcknowledgment>,
    pub(crate) technical_acknowledgment: ::std::option::Option<crate::types::X12TechnicalAcknowledgment>,
}
impl X12AcknowledgmentOptionsBuilder {
    /// <p>Specifies whether functional acknowledgments (997/999) should be generated for incoming X12 transactions. Valid values are <code>DO_NOT_GENERATE</code>, <code>GENERATE_ALL_SEGMENTS</code> and <code>GENERATE_WITHOUT_TRANSACTION_SET_RESPONSE_LOOP</code>.</p>
    /// <p>If you choose <code>GENERATE_WITHOUT_TRANSACTION_SET_RESPONSE_LOOP</code>, Amazon Web Services B2B Data Interchange skips the AK2_Loop when generating an acknowledgment document.</p>
    /// This field is required.
    pub fn functional_acknowledgment(mut self, input: crate::types::X12FunctionalAcknowledgment) -> Self {
        self.functional_acknowledgment = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether functional acknowledgments (997/999) should be generated for incoming X12 transactions. Valid values are <code>DO_NOT_GENERATE</code>, <code>GENERATE_ALL_SEGMENTS</code> and <code>GENERATE_WITHOUT_TRANSACTION_SET_RESPONSE_LOOP</code>.</p>
    /// <p>If you choose <code>GENERATE_WITHOUT_TRANSACTION_SET_RESPONSE_LOOP</code>, Amazon Web Services B2B Data Interchange skips the AK2_Loop when generating an acknowledgment document.</p>
    pub fn set_functional_acknowledgment(mut self, input: ::std::option::Option<crate::types::X12FunctionalAcknowledgment>) -> Self {
        self.functional_acknowledgment = input;
        self
    }
    /// <p>Specifies whether functional acknowledgments (997/999) should be generated for incoming X12 transactions. Valid values are <code>DO_NOT_GENERATE</code>, <code>GENERATE_ALL_SEGMENTS</code> and <code>GENERATE_WITHOUT_TRANSACTION_SET_RESPONSE_LOOP</code>.</p>
    /// <p>If you choose <code>GENERATE_WITHOUT_TRANSACTION_SET_RESPONSE_LOOP</code>, Amazon Web Services B2B Data Interchange skips the AK2_Loop when generating an acknowledgment document.</p>
    pub fn get_functional_acknowledgment(&self) -> &::std::option::Option<crate::types::X12FunctionalAcknowledgment> {
        &self.functional_acknowledgment
    }
    /// <p>Specifies whether technical acknowledgments (TA1) should be generated for incoming X12 interchanges. Valid values are <code>DO_NOT_GENERATE</code> and <code>GENERATE_ALL_SEGMENTS</code> and.</p>
    /// This field is required.
    pub fn technical_acknowledgment(mut self, input: crate::types::X12TechnicalAcknowledgment) -> Self {
        self.technical_acknowledgment = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether technical acknowledgments (TA1) should be generated for incoming X12 interchanges. Valid values are <code>DO_NOT_GENERATE</code> and <code>GENERATE_ALL_SEGMENTS</code> and.</p>
    pub fn set_technical_acknowledgment(mut self, input: ::std::option::Option<crate::types::X12TechnicalAcknowledgment>) -> Self {
        self.technical_acknowledgment = input;
        self
    }
    /// <p>Specifies whether technical acknowledgments (TA1) should be generated for incoming X12 interchanges. Valid values are <code>DO_NOT_GENERATE</code> and <code>GENERATE_ALL_SEGMENTS</code> and.</p>
    pub fn get_technical_acknowledgment(&self) -> &::std::option::Option<crate::types::X12TechnicalAcknowledgment> {
        &self.technical_acknowledgment
    }
    /// Consumes the builder and constructs a [`X12AcknowledgmentOptions`](crate::types::X12AcknowledgmentOptions).
    /// This method will fail if any of the following fields are not set:
    /// - [`functional_acknowledgment`](crate::types::builders::X12AcknowledgmentOptionsBuilder::functional_acknowledgment)
    /// - [`technical_acknowledgment`](crate::types::builders::X12AcknowledgmentOptionsBuilder::technical_acknowledgment)
    pub fn build(self) -> ::std::result::Result<crate::types::X12AcknowledgmentOptions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::X12AcknowledgmentOptions {
            functional_acknowledgment: self.functional_acknowledgment.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "functional_acknowledgment",
                    "functional_acknowledgment was not specified but it is required when building X12AcknowledgmentOptions",
                )
            })?,
            technical_acknowledgment: self.technical_acknowledgment.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "technical_acknowledgment",
                    "technical_acknowledgment was not specified but it is required when building X12AcknowledgmentOptions",
                )
            })?,
        })
    }
}
