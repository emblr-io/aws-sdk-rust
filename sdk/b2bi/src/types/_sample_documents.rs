// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a structure that contains the Amazon S3 bucket and an array of the corresponding keys used to identify the location for your sample documents.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SampleDocuments {
    /// <p>Contains the Amazon S3 bucket that is used to hold your sample documents.</p>
    pub bucket_name: ::std::string::String,
    /// <p>Contains an array of the Amazon S3 keys used to identify the location for your sample documents.</p>
    pub keys: ::std::vec::Vec<crate::types::SampleDocumentKeys>,
}
impl SampleDocuments {
    /// <p>Contains the Amazon S3 bucket that is used to hold your sample documents.</p>
    pub fn bucket_name(&self) -> &str {
        use std::ops::Deref;
        self.bucket_name.deref()
    }
    /// <p>Contains an array of the Amazon S3 keys used to identify the location for your sample documents.</p>
    pub fn keys(&self) -> &[crate::types::SampleDocumentKeys] {
        use std::ops::Deref;
        self.keys.deref()
    }
}
impl SampleDocuments {
    /// Creates a new builder-style object to manufacture [`SampleDocuments`](crate::types::SampleDocuments).
    pub fn builder() -> crate::types::builders::SampleDocumentsBuilder {
        crate::types::builders::SampleDocumentsBuilder::default()
    }
}

/// A builder for [`SampleDocuments`](crate::types::SampleDocuments).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SampleDocumentsBuilder {
    pub(crate) bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) keys: ::std::option::Option<::std::vec::Vec<crate::types::SampleDocumentKeys>>,
}
impl SampleDocumentsBuilder {
    /// <p>Contains the Amazon S3 bucket that is used to hold your sample documents.</p>
    /// This field is required.
    pub fn bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Contains the Amazon S3 bucket that is used to hold your sample documents.</p>
    pub fn set_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_name = input;
        self
    }
    /// <p>Contains the Amazon S3 bucket that is used to hold your sample documents.</p>
    pub fn get_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_name
    }
    /// Appends an item to `keys`.
    ///
    /// To override the contents of this collection use [`set_keys`](Self::set_keys).
    ///
    /// <p>Contains an array of the Amazon S3 keys used to identify the location for your sample documents.</p>
    pub fn keys(mut self, input: crate::types::SampleDocumentKeys) -> Self {
        let mut v = self.keys.unwrap_or_default();
        v.push(input);
        self.keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains an array of the Amazon S3 keys used to identify the location for your sample documents.</p>
    pub fn set_keys(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SampleDocumentKeys>>) -> Self {
        self.keys = input;
        self
    }
    /// <p>Contains an array of the Amazon S3 keys used to identify the location for your sample documents.</p>
    pub fn get_keys(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SampleDocumentKeys>> {
        &self.keys
    }
    /// Consumes the builder and constructs a [`SampleDocuments`](crate::types::SampleDocuments).
    /// This method will fail if any of the following fields are not set:
    /// - [`bucket_name`](crate::types::builders::SampleDocumentsBuilder::bucket_name)
    /// - [`keys`](crate::types::builders::SampleDocumentsBuilder::keys)
    pub fn build(self) -> ::std::result::Result<crate::types::SampleDocuments, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SampleDocuments {
            bucket_name: self.bucket_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bucket_name",
                    "bucket_name was not specified but it is required when building SampleDocuments",
                )
            })?,
            keys: self.keys.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "keys",
                    "keys was not specified but it is required when building SampleDocuments",
                )
            })?,
        })
    }
}
