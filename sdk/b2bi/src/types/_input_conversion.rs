// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the input formatting options for an inbound transformer (takes an X12-formatted EDI document as input and converts it to JSON or XML.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InputConversion {
    /// <p>The format for the transformer input: currently on <code>X12</code> is supported.</p>
    pub from_format: crate::types::FromFormat,
    /// <p>A structure that contains the formatting options for an inbound transformer.</p>
    pub format_options: ::std::option::Option<crate::types::FormatOptions>,
    /// <p>Specifies advanced options for the input conversion process. These options provide additional control over how EDI files are processed during transformation.</p>
    pub advanced_options: ::std::option::Option<crate::types::AdvancedOptions>,
}
impl InputConversion {
    /// <p>The format for the transformer input: currently on <code>X12</code> is supported.</p>
    pub fn from_format(&self) -> &crate::types::FromFormat {
        &self.from_format
    }
    /// <p>A structure that contains the formatting options for an inbound transformer.</p>
    pub fn format_options(&self) -> ::std::option::Option<&crate::types::FormatOptions> {
        self.format_options.as_ref()
    }
    /// <p>Specifies advanced options for the input conversion process. These options provide additional control over how EDI files are processed during transformation.</p>
    pub fn advanced_options(&self) -> ::std::option::Option<&crate::types::AdvancedOptions> {
        self.advanced_options.as_ref()
    }
}
impl InputConversion {
    /// Creates a new builder-style object to manufacture [`InputConversion`](crate::types::InputConversion).
    pub fn builder() -> crate::types::builders::InputConversionBuilder {
        crate::types::builders::InputConversionBuilder::default()
    }
}

/// A builder for [`InputConversion`](crate::types::InputConversion).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InputConversionBuilder {
    pub(crate) from_format: ::std::option::Option<crate::types::FromFormat>,
    pub(crate) format_options: ::std::option::Option<crate::types::FormatOptions>,
    pub(crate) advanced_options: ::std::option::Option<crate::types::AdvancedOptions>,
}
impl InputConversionBuilder {
    /// <p>The format for the transformer input: currently on <code>X12</code> is supported.</p>
    /// This field is required.
    pub fn from_format(mut self, input: crate::types::FromFormat) -> Self {
        self.from_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format for the transformer input: currently on <code>X12</code> is supported.</p>
    pub fn set_from_format(mut self, input: ::std::option::Option<crate::types::FromFormat>) -> Self {
        self.from_format = input;
        self
    }
    /// <p>The format for the transformer input: currently on <code>X12</code> is supported.</p>
    pub fn get_from_format(&self) -> &::std::option::Option<crate::types::FromFormat> {
        &self.from_format
    }
    /// <p>A structure that contains the formatting options for an inbound transformer.</p>
    pub fn format_options(mut self, input: crate::types::FormatOptions) -> Self {
        self.format_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that contains the formatting options for an inbound transformer.</p>
    pub fn set_format_options(mut self, input: ::std::option::Option<crate::types::FormatOptions>) -> Self {
        self.format_options = input;
        self
    }
    /// <p>A structure that contains the formatting options for an inbound transformer.</p>
    pub fn get_format_options(&self) -> &::std::option::Option<crate::types::FormatOptions> {
        &self.format_options
    }
    /// <p>Specifies advanced options for the input conversion process. These options provide additional control over how EDI files are processed during transformation.</p>
    pub fn advanced_options(mut self, input: crate::types::AdvancedOptions) -> Self {
        self.advanced_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies advanced options for the input conversion process. These options provide additional control over how EDI files are processed during transformation.</p>
    pub fn set_advanced_options(mut self, input: ::std::option::Option<crate::types::AdvancedOptions>) -> Self {
        self.advanced_options = input;
        self
    }
    /// <p>Specifies advanced options for the input conversion process. These options provide additional control over how EDI files are processed during transformation.</p>
    pub fn get_advanced_options(&self) -> &::std::option::Option<crate::types::AdvancedOptions> {
        &self.advanced_options
    }
    /// Consumes the builder and constructs a [`InputConversion`](crate::types::InputConversion).
    /// This method will fail if any of the following fields are not set:
    /// - [`from_format`](crate::types::builders::InputConversionBuilder::from_format)
    pub fn build(self) -> ::std::result::Result<crate::types::InputConversion, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::InputConversion {
            from_format: self.from_format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "from_format",
                    "from_format was not specified but it is required when building InputConversion",
                )
            })?,
            format_options: self.format_options,
            advanced_options: self.advanced_options,
        })
    }
}
