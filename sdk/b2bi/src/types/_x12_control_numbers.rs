// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configuration for X12 control numbers used in X12 EDI generation. Control numbers are used to uniquely identify interchanges, functional groups, and transaction sets.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct X12ControlNumbers {
    /// <p>Specifies the starting interchange control number (ISA13) to use for X12 EDI generation. This number is incremented for each new interchange. For the ISA (interchange) envelope, Amazon Web Services B2B Data Interchange generates an interchange control number that is unique for the ISA05 and ISA06 (sender) &amp; ISA07 and ISA08 (receiver) combination.</p>
    pub starting_interchange_control_number: ::std::option::Option<i32>,
    /// <p>Specifies the starting functional group control number (GS06) to use for X12 EDI generation. This number is incremented for each new functional group. For the GS (functional group) envelope, Amazon Web Services B2B Data Interchange generates a functional group control number that is unique to the sender ID, receiver ID, and functional identifier code combination.</p>
    pub starting_functional_group_control_number: ::std::option::Option<i32>,
    /// <p>Specifies the starting transaction set control number (ST02) to use for X12 EDI generation. This number is incremented for each new transaction set.</p>
    pub starting_transaction_set_control_number: ::std::option::Option<i32>,
}
impl X12ControlNumbers {
    /// <p>Specifies the starting interchange control number (ISA13) to use for X12 EDI generation. This number is incremented for each new interchange. For the ISA (interchange) envelope, Amazon Web Services B2B Data Interchange generates an interchange control number that is unique for the ISA05 and ISA06 (sender) &amp; ISA07 and ISA08 (receiver) combination.</p>
    pub fn starting_interchange_control_number(&self) -> ::std::option::Option<i32> {
        self.starting_interchange_control_number
    }
    /// <p>Specifies the starting functional group control number (GS06) to use for X12 EDI generation. This number is incremented for each new functional group. For the GS (functional group) envelope, Amazon Web Services B2B Data Interchange generates a functional group control number that is unique to the sender ID, receiver ID, and functional identifier code combination.</p>
    pub fn starting_functional_group_control_number(&self) -> ::std::option::Option<i32> {
        self.starting_functional_group_control_number
    }
    /// <p>Specifies the starting transaction set control number (ST02) to use for X12 EDI generation. This number is incremented for each new transaction set.</p>
    pub fn starting_transaction_set_control_number(&self) -> ::std::option::Option<i32> {
        self.starting_transaction_set_control_number
    }
}
impl X12ControlNumbers {
    /// Creates a new builder-style object to manufacture [`X12ControlNumbers`](crate::types::X12ControlNumbers).
    pub fn builder() -> crate::types::builders::X12ControlNumbersBuilder {
        crate::types::builders::X12ControlNumbersBuilder::default()
    }
}

/// A builder for [`X12ControlNumbers`](crate::types::X12ControlNumbers).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct X12ControlNumbersBuilder {
    pub(crate) starting_interchange_control_number: ::std::option::Option<i32>,
    pub(crate) starting_functional_group_control_number: ::std::option::Option<i32>,
    pub(crate) starting_transaction_set_control_number: ::std::option::Option<i32>,
}
impl X12ControlNumbersBuilder {
    /// <p>Specifies the starting interchange control number (ISA13) to use for X12 EDI generation. This number is incremented for each new interchange. For the ISA (interchange) envelope, Amazon Web Services B2B Data Interchange generates an interchange control number that is unique for the ISA05 and ISA06 (sender) &amp; ISA07 and ISA08 (receiver) combination.</p>
    pub fn starting_interchange_control_number(mut self, input: i32) -> Self {
        self.starting_interchange_control_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the starting interchange control number (ISA13) to use for X12 EDI generation. This number is incremented for each new interchange. For the ISA (interchange) envelope, Amazon Web Services B2B Data Interchange generates an interchange control number that is unique for the ISA05 and ISA06 (sender) &amp; ISA07 and ISA08 (receiver) combination.</p>
    pub fn set_starting_interchange_control_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.starting_interchange_control_number = input;
        self
    }
    /// <p>Specifies the starting interchange control number (ISA13) to use for X12 EDI generation. This number is incremented for each new interchange. For the ISA (interchange) envelope, Amazon Web Services B2B Data Interchange generates an interchange control number that is unique for the ISA05 and ISA06 (sender) &amp; ISA07 and ISA08 (receiver) combination.</p>
    pub fn get_starting_interchange_control_number(&self) -> &::std::option::Option<i32> {
        &self.starting_interchange_control_number
    }
    /// <p>Specifies the starting functional group control number (GS06) to use for X12 EDI generation. This number is incremented for each new functional group. For the GS (functional group) envelope, Amazon Web Services B2B Data Interchange generates a functional group control number that is unique to the sender ID, receiver ID, and functional identifier code combination.</p>
    pub fn starting_functional_group_control_number(mut self, input: i32) -> Self {
        self.starting_functional_group_control_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the starting functional group control number (GS06) to use for X12 EDI generation. This number is incremented for each new functional group. For the GS (functional group) envelope, Amazon Web Services B2B Data Interchange generates a functional group control number that is unique to the sender ID, receiver ID, and functional identifier code combination.</p>
    pub fn set_starting_functional_group_control_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.starting_functional_group_control_number = input;
        self
    }
    /// <p>Specifies the starting functional group control number (GS06) to use for X12 EDI generation. This number is incremented for each new functional group. For the GS (functional group) envelope, Amazon Web Services B2B Data Interchange generates a functional group control number that is unique to the sender ID, receiver ID, and functional identifier code combination.</p>
    pub fn get_starting_functional_group_control_number(&self) -> &::std::option::Option<i32> {
        &self.starting_functional_group_control_number
    }
    /// <p>Specifies the starting transaction set control number (ST02) to use for X12 EDI generation. This number is incremented for each new transaction set.</p>
    pub fn starting_transaction_set_control_number(mut self, input: i32) -> Self {
        self.starting_transaction_set_control_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the starting transaction set control number (ST02) to use for X12 EDI generation. This number is incremented for each new transaction set.</p>
    pub fn set_starting_transaction_set_control_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.starting_transaction_set_control_number = input;
        self
    }
    /// <p>Specifies the starting transaction set control number (ST02) to use for X12 EDI generation. This number is incremented for each new transaction set.</p>
    pub fn get_starting_transaction_set_control_number(&self) -> &::std::option::Option<i32> {
        &self.starting_transaction_set_control_number
    }
    /// Consumes the builder and constructs a [`X12ControlNumbers`](crate::types::X12ControlNumbers).
    pub fn build(self) -> crate::types::X12ControlNumbers {
        crate::types::X12ControlNumbers {
            starting_interchange_control_number: self.starting_interchange_control_number,
            starting_functional_group_control_number: self.starting_functional_group_control_number,
            starting_transaction_set_control_number: self.starting_transaction_set_control_number,
        }
    }
}
