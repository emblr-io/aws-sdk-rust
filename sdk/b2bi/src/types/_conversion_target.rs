// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provide a sample of what the output of the transformation should look like.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConversionTarget {
    /// <p>Currently, only X12 format is supported.</p>
    pub file_format: crate::types::ConversionTargetFormat,
    /// <p>A structure that contains the formatting details for the conversion target.</p>
    pub format_details: ::std::option::Option<crate::types::ConversionTargetFormatDetails>,
    /// Customer uses this to provide a sample on what should file look like after conversion X12 EDI use case around this would be discovering the file syntax
    pub output_sample_file: ::std::option::Option<crate::types::OutputSampleFileSource>,
}
impl ConversionTarget {
    /// <p>Currently, only X12 format is supported.</p>
    pub fn file_format(&self) -> &crate::types::ConversionTargetFormat {
        &self.file_format
    }
    /// <p>A structure that contains the formatting details for the conversion target.</p>
    pub fn format_details(&self) -> ::std::option::Option<&crate::types::ConversionTargetFormatDetails> {
        self.format_details.as_ref()
    }
    /// Customer uses this to provide a sample on what should file look like after conversion X12 EDI use case around this would be discovering the file syntax
    pub fn output_sample_file(&self) -> ::std::option::Option<&crate::types::OutputSampleFileSource> {
        self.output_sample_file.as_ref()
    }
}
impl ConversionTarget {
    /// Creates a new builder-style object to manufacture [`ConversionTarget`](crate::types::ConversionTarget).
    pub fn builder() -> crate::types::builders::ConversionTargetBuilder {
        crate::types::builders::ConversionTargetBuilder::default()
    }
}

/// A builder for [`ConversionTarget`](crate::types::ConversionTarget).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConversionTargetBuilder {
    pub(crate) file_format: ::std::option::Option<crate::types::ConversionTargetFormat>,
    pub(crate) format_details: ::std::option::Option<crate::types::ConversionTargetFormatDetails>,
    pub(crate) output_sample_file: ::std::option::Option<crate::types::OutputSampleFileSource>,
}
impl ConversionTargetBuilder {
    /// <p>Currently, only X12 format is supported.</p>
    /// This field is required.
    pub fn file_format(mut self, input: crate::types::ConversionTargetFormat) -> Self {
        self.file_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>Currently, only X12 format is supported.</p>
    pub fn set_file_format(mut self, input: ::std::option::Option<crate::types::ConversionTargetFormat>) -> Self {
        self.file_format = input;
        self
    }
    /// <p>Currently, only X12 format is supported.</p>
    pub fn get_file_format(&self) -> &::std::option::Option<crate::types::ConversionTargetFormat> {
        &self.file_format
    }
    /// <p>A structure that contains the formatting details for the conversion target.</p>
    pub fn format_details(mut self, input: crate::types::ConversionTargetFormatDetails) -> Self {
        self.format_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that contains the formatting details for the conversion target.</p>
    pub fn set_format_details(mut self, input: ::std::option::Option<crate::types::ConversionTargetFormatDetails>) -> Self {
        self.format_details = input;
        self
    }
    /// <p>A structure that contains the formatting details for the conversion target.</p>
    pub fn get_format_details(&self) -> &::std::option::Option<crate::types::ConversionTargetFormatDetails> {
        &self.format_details
    }
    /// Customer uses this to provide a sample on what should file look like after conversion X12 EDI use case around this would be discovering the file syntax
    pub fn output_sample_file(mut self, input: crate::types::OutputSampleFileSource) -> Self {
        self.output_sample_file = ::std::option::Option::Some(input);
        self
    }
    /// Customer uses this to provide a sample on what should file look like after conversion X12 EDI use case around this would be discovering the file syntax
    pub fn set_output_sample_file(mut self, input: ::std::option::Option<crate::types::OutputSampleFileSource>) -> Self {
        self.output_sample_file = input;
        self
    }
    /// Customer uses this to provide a sample on what should file look like after conversion X12 EDI use case around this would be discovering the file syntax
    pub fn get_output_sample_file(&self) -> &::std::option::Option<crate::types::OutputSampleFileSource> {
        &self.output_sample_file
    }
    /// Consumes the builder and constructs a [`ConversionTarget`](crate::types::ConversionTarget).
    /// This method will fail if any of the following fields are not set:
    /// - [`file_format`](crate::types::builders::ConversionTargetBuilder::file_format)
    pub fn build(self) -> ::std::result::Result<crate::types::ConversionTarget, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConversionTarget {
            file_format: self.file_format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "file_format",
                    "file_format was not specified but it is required when building ConversionTarget",
                )
            })?,
            format_details: self.format_details,
            output_sample_file: self.output_sample_file,
        })
    }
}
