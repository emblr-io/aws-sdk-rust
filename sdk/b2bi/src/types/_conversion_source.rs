// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the input for an outbound transformation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConversionSource {
    /// <p>The format for the input file: either JSON or XML.</p>
    pub file_format: crate::types::ConversionSourceFormat,
    /// File to be converted
    pub input_file: ::std::option::Option<crate::types::InputFileSource>,
}
impl ConversionSource {
    /// <p>The format for the input file: either JSON or XML.</p>
    pub fn file_format(&self) -> &crate::types::ConversionSourceFormat {
        &self.file_format
    }
    /// File to be converted
    pub fn input_file(&self) -> ::std::option::Option<&crate::types::InputFileSource> {
        self.input_file.as_ref()
    }
}
impl ConversionSource {
    /// Creates a new builder-style object to manufacture [`ConversionSource`](crate::types::ConversionSource).
    pub fn builder() -> crate::types::builders::ConversionSourceBuilder {
        crate::types::builders::ConversionSourceBuilder::default()
    }
}

/// A builder for [`ConversionSource`](crate::types::ConversionSource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConversionSourceBuilder {
    pub(crate) file_format: ::std::option::Option<crate::types::ConversionSourceFormat>,
    pub(crate) input_file: ::std::option::Option<crate::types::InputFileSource>,
}
impl ConversionSourceBuilder {
    /// <p>The format for the input file: either JSON or XML.</p>
    /// This field is required.
    pub fn file_format(mut self, input: crate::types::ConversionSourceFormat) -> Self {
        self.file_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format for the input file: either JSON or XML.</p>
    pub fn set_file_format(mut self, input: ::std::option::Option<crate::types::ConversionSourceFormat>) -> Self {
        self.file_format = input;
        self
    }
    /// <p>The format for the input file: either JSON or XML.</p>
    pub fn get_file_format(&self) -> &::std::option::Option<crate::types::ConversionSourceFormat> {
        &self.file_format
    }
    /// File to be converted
    /// This field is required.
    pub fn input_file(mut self, input: crate::types::InputFileSource) -> Self {
        self.input_file = ::std::option::Option::Some(input);
        self
    }
    /// File to be converted
    pub fn set_input_file(mut self, input: ::std::option::Option<crate::types::InputFileSource>) -> Self {
        self.input_file = input;
        self
    }
    /// File to be converted
    pub fn get_input_file(&self) -> &::std::option::Option<crate::types::InputFileSource> {
        &self.input_file
    }
    /// Consumes the builder and constructs a [`ConversionSource`](crate::types::ConversionSource).
    /// This method will fail if any of the following fields are not set:
    /// - [`file_format`](crate::types::builders::ConversionSourceBuilder::file_format)
    pub fn build(self) -> ::std::result::Result<crate::types::ConversionSource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConversionSource {
            file_format: self.file_format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "file_format",
                    "file_format was not specified but it is required when building ConversionSource",
                )
            })?,
            input_file: self.input_file,
        })
    }
}
