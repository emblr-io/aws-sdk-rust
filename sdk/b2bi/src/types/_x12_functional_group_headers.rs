// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Part of the X12 message structure. These are the functional group headers for the X12 EDI object.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct X12FunctionalGroupHeaders {
    /// <p>A value representing the code used to identify the party transmitting a message, at position GS-02.</p>
    pub application_sender_code: ::std::option::Option<::std::string::String>,
    /// <p>A value representing the code used to identify the party receiving a message, at position GS-03.</p>
    pub application_receiver_code: ::std::option::Option<::std::string::String>,
    /// <p>A code that identifies the issuer of the standard, at position GS-07.</p>
    pub responsible_agency_code: ::std::option::Option<::std::string::String>,
}
impl X12FunctionalGroupHeaders {
    /// <p>A value representing the code used to identify the party transmitting a message, at position GS-02.</p>
    pub fn application_sender_code(&self) -> ::std::option::Option<&str> {
        self.application_sender_code.as_deref()
    }
    /// <p>A value representing the code used to identify the party receiving a message, at position GS-03.</p>
    pub fn application_receiver_code(&self) -> ::std::option::Option<&str> {
        self.application_receiver_code.as_deref()
    }
    /// <p>A code that identifies the issuer of the standard, at position GS-07.</p>
    pub fn responsible_agency_code(&self) -> ::std::option::Option<&str> {
        self.responsible_agency_code.as_deref()
    }
}
impl X12FunctionalGroupHeaders {
    /// Creates a new builder-style object to manufacture [`X12FunctionalGroupHeaders`](crate::types::X12FunctionalGroupHeaders).
    pub fn builder() -> crate::types::builders::X12FunctionalGroupHeadersBuilder {
        crate::types::builders::X12FunctionalGroupHeadersBuilder::default()
    }
}

/// A builder for [`X12FunctionalGroupHeaders`](crate::types::X12FunctionalGroupHeaders).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct X12FunctionalGroupHeadersBuilder {
    pub(crate) application_sender_code: ::std::option::Option<::std::string::String>,
    pub(crate) application_receiver_code: ::std::option::Option<::std::string::String>,
    pub(crate) responsible_agency_code: ::std::option::Option<::std::string::String>,
}
impl X12FunctionalGroupHeadersBuilder {
    /// <p>A value representing the code used to identify the party transmitting a message, at position GS-02.</p>
    pub fn application_sender_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_sender_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A value representing the code used to identify the party transmitting a message, at position GS-02.</p>
    pub fn set_application_sender_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_sender_code = input;
        self
    }
    /// <p>A value representing the code used to identify the party transmitting a message, at position GS-02.</p>
    pub fn get_application_sender_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_sender_code
    }
    /// <p>A value representing the code used to identify the party receiving a message, at position GS-03.</p>
    pub fn application_receiver_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_receiver_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A value representing the code used to identify the party receiving a message, at position GS-03.</p>
    pub fn set_application_receiver_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_receiver_code = input;
        self
    }
    /// <p>A value representing the code used to identify the party receiving a message, at position GS-03.</p>
    pub fn get_application_receiver_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_receiver_code
    }
    /// <p>A code that identifies the issuer of the standard, at position GS-07.</p>
    pub fn responsible_agency_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.responsible_agency_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A code that identifies the issuer of the standard, at position GS-07.</p>
    pub fn set_responsible_agency_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.responsible_agency_code = input;
        self
    }
    /// <p>A code that identifies the issuer of the standard, at position GS-07.</p>
    pub fn get_responsible_agency_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.responsible_agency_code
    }
    /// Consumes the builder and constructs a [`X12FunctionalGroupHeaders`](crate::types::X12FunctionalGroupHeaders).
    pub fn build(self) -> crate::types::X12FunctionalGroupHeaders {
        crate::types::X12FunctionalGroupHeaders {
            application_sender_code: self.application_sender_code,
            application_receiver_code: self.application_receiver_code,
            responsible_agency_code: self.responsible_agency_code,
        }
    }
}
