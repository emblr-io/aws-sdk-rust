// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A wrapper structure for an X12 definition object.</p>
/// <p>the X12 envelope ensures the integrity of the data and the efficiency of the information exchange. The X12 message structure has hierarchical levels. From highest to the lowest, they are:</p>
/// <ul>
/// <li>
/// <p>Interchange Envelope</p></li>
/// <li>
/// <p>Functional Group</p></li>
/// <li>
/// <p>Transaction Set</p></li>
/// </ul>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct X12Envelope {
    /// <p>A container for the X12 outbound EDI headers.</p>
    pub common: ::std::option::Option<crate::types::X12OutboundEdiHeaders>,
    /// <p>Contains options for wrapping (line folding) in X12 EDI files. Wrapping controls how long lines are handled in the EDI output.</p>
    pub wrap_options: ::std::option::Option<crate::types::WrapOptions>,
}
impl X12Envelope {
    /// <p>A container for the X12 outbound EDI headers.</p>
    pub fn common(&self) -> ::std::option::Option<&crate::types::X12OutboundEdiHeaders> {
        self.common.as_ref()
    }
    /// <p>Contains options for wrapping (line folding) in X12 EDI files. Wrapping controls how long lines are handled in the EDI output.</p>
    pub fn wrap_options(&self) -> ::std::option::Option<&crate::types::WrapOptions> {
        self.wrap_options.as_ref()
    }
}
impl X12Envelope {
    /// Creates a new builder-style object to manufacture [`X12Envelope`](crate::types::X12Envelope).
    pub fn builder() -> crate::types::builders::X12EnvelopeBuilder {
        crate::types::builders::X12EnvelopeBuilder::default()
    }
}

/// A builder for [`X12Envelope`](crate::types::X12Envelope).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct X12EnvelopeBuilder {
    pub(crate) common: ::std::option::Option<crate::types::X12OutboundEdiHeaders>,
    pub(crate) wrap_options: ::std::option::Option<crate::types::WrapOptions>,
}
impl X12EnvelopeBuilder {
    /// <p>A container for the X12 outbound EDI headers.</p>
    pub fn common(mut self, input: crate::types::X12OutboundEdiHeaders) -> Self {
        self.common = ::std::option::Option::Some(input);
        self
    }
    /// <p>A container for the X12 outbound EDI headers.</p>
    pub fn set_common(mut self, input: ::std::option::Option<crate::types::X12OutboundEdiHeaders>) -> Self {
        self.common = input;
        self
    }
    /// <p>A container for the X12 outbound EDI headers.</p>
    pub fn get_common(&self) -> &::std::option::Option<crate::types::X12OutboundEdiHeaders> {
        &self.common
    }
    /// <p>Contains options for wrapping (line folding) in X12 EDI files. Wrapping controls how long lines are handled in the EDI output.</p>
    pub fn wrap_options(mut self, input: crate::types::WrapOptions) -> Self {
        self.wrap_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains options for wrapping (line folding) in X12 EDI files. Wrapping controls how long lines are handled in the EDI output.</p>
    pub fn set_wrap_options(mut self, input: ::std::option::Option<crate::types::WrapOptions>) -> Self {
        self.wrap_options = input;
        self
    }
    /// <p>Contains options for wrapping (line folding) in X12 EDI files. Wrapping controls how long lines are handled in the EDI output.</p>
    pub fn get_wrap_options(&self) -> &::std::option::Option<crate::types::WrapOptions> {
        &self.wrap_options
    }
    /// Consumes the builder and constructs a [`X12Envelope`](crate::types::X12Envelope).
    pub fn build(self) -> crate::types::X12Envelope {
        crate::types::X12Envelope {
            common: self.common,
            wrap_options: self.wrap_options,
        }
    }
}
