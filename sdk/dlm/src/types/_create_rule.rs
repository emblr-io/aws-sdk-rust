// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p><b>\[Custom snapshot and AMI policies only\]</b> Specifies when the policy should create snapshots or AMIs.</p><note>
/// <ul>
/// <li>
/// <p>You must specify either <b>CronExpression</b>, or <b>Interval</b>, <b>IntervalUnit</b>, and <b>Times</b>.</p></li>
/// <li>
/// <p>If you need to specify an <a href="https://docs.aws.amazon.com/dlm/latest/APIReference/API_ArchiveRule.html">ArchiveRule</a> for the schedule, then you must specify a creation frequency of at least 28 days.</p></li>
/// </ul>
/// </note>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateRule {
    /// <p><b>\[Custom snapshot policies only\]</b> Specifies the destination for snapshots created by the policy. The allowed destinations depend on the location of the targeted resources.</p>
    /// <ul>
    /// <li>
    /// <p>If the policy targets resources in a Region, then you must create snapshots in the same Region as the source resource.</p></li>
    /// <li>
    /// <p>If the policy targets resources in a Local Zone, you can create snapshots in the same Local Zone or in its parent Region.</p></li>
    /// <li>
    /// <p>If the policy targets resources on an Outpost, then you can create snapshots on the same Outpost or in its parent Region.</p></li>
    /// </ul>
    /// <p>Specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p>To create snapshots in the same Region as the source resource, specify <code>CLOUD</code>.</p></li>
    /// <li>
    /// <p>To create snapshots in the same Local Zone as the source resource, specify <code>LOCAL_ZONE</code>.</p></li>
    /// <li>
    /// <p>To create snapshots on the same Outpost as the source resource, specify <code>OUTPOST_LOCAL</code>.</p></li>
    /// </ul>
    /// <p>Default: <code>CLOUD</code></p>
    pub location: ::std::option::Option<crate::types::LocationValues>,
    /// <p>The interval between snapshots. The supported values are 1, 2, 3, 4, 6, 8, 12, and 24.</p>
    pub interval: ::std::option::Option<i32>,
    /// <p>The interval unit.</p>
    pub interval_unit: ::std::option::Option<crate::types::IntervalUnitValues>,
    /// <p>The time, in UTC, to start the operation. The supported format is hh:mm.</p>
    /// <p>The operation occurs within a one-hour window following the specified time. If you do not specify a time, Amazon Data Lifecycle Manager selects a time within the next 24 hours.</p>
    pub times: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The schedule, as a Cron expression. The schedule interval must be between 1 hour and 1 year. For more information, see the <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-cron-expressions.html">Cron expressions reference</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    pub cron_expression: ::std::option::Option<::std::string::String>,
    /// <p><b>\[Custom snapshot policies that target instances only\]</b> Specifies pre and/or post scripts for a snapshot lifecycle policy that targets instances. This is useful for creating application-consistent snapshots, or for performing specific administrative tasks before or after Amazon Data Lifecycle Manager initiates snapshot creation.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/automate-app-consistent-backups.html">Automating application-consistent snapshots with pre and post scripts</a>.</p>
    pub scripts: ::std::option::Option<::std::vec::Vec<crate::types::Script>>,
}
impl CreateRule {
    /// <p><b>\[Custom snapshot policies only\]</b> Specifies the destination for snapshots created by the policy. The allowed destinations depend on the location of the targeted resources.</p>
    /// <ul>
    /// <li>
    /// <p>If the policy targets resources in a Region, then you must create snapshots in the same Region as the source resource.</p></li>
    /// <li>
    /// <p>If the policy targets resources in a Local Zone, you can create snapshots in the same Local Zone or in its parent Region.</p></li>
    /// <li>
    /// <p>If the policy targets resources on an Outpost, then you can create snapshots on the same Outpost or in its parent Region.</p></li>
    /// </ul>
    /// <p>Specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p>To create snapshots in the same Region as the source resource, specify <code>CLOUD</code>.</p></li>
    /// <li>
    /// <p>To create snapshots in the same Local Zone as the source resource, specify <code>LOCAL_ZONE</code>.</p></li>
    /// <li>
    /// <p>To create snapshots on the same Outpost as the source resource, specify <code>OUTPOST_LOCAL</code>.</p></li>
    /// </ul>
    /// <p>Default: <code>CLOUD</code></p>
    pub fn location(&self) -> ::std::option::Option<&crate::types::LocationValues> {
        self.location.as_ref()
    }
    /// <p>The interval between snapshots. The supported values are 1, 2, 3, 4, 6, 8, 12, and 24.</p>
    pub fn interval(&self) -> ::std::option::Option<i32> {
        self.interval
    }
    /// <p>The interval unit.</p>
    pub fn interval_unit(&self) -> ::std::option::Option<&crate::types::IntervalUnitValues> {
        self.interval_unit.as_ref()
    }
    /// <p>The time, in UTC, to start the operation. The supported format is hh:mm.</p>
    /// <p>The operation occurs within a one-hour window following the specified time. If you do not specify a time, Amazon Data Lifecycle Manager selects a time within the next 24 hours.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.times.is_none()`.
    pub fn times(&self) -> &[::std::string::String] {
        self.times.as_deref().unwrap_or_default()
    }
    /// <p>The schedule, as a Cron expression. The schedule interval must be between 1 hour and 1 year. For more information, see the <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-cron-expressions.html">Cron expressions reference</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    pub fn cron_expression(&self) -> ::std::option::Option<&str> {
        self.cron_expression.as_deref()
    }
    /// <p><b>\[Custom snapshot policies that target instances only\]</b> Specifies pre and/or post scripts for a snapshot lifecycle policy that targets instances. This is useful for creating application-consistent snapshots, or for performing specific administrative tasks before or after Amazon Data Lifecycle Manager initiates snapshot creation.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/automate-app-consistent-backups.html">Automating application-consistent snapshots with pre and post scripts</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.scripts.is_none()`.
    pub fn scripts(&self) -> &[crate::types::Script] {
        self.scripts.as_deref().unwrap_or_default()
    }
}
impl CreateRule {
    /// Creates a new builder-style object to manufacture [`CreateRule`](crate::types::CreateRule).
    pub fn builder() -> crate::types::builders::CreateRuleBuilder {
        crate::types::builders::CreateRuleBuilder::default()
    }
}

/// A builder for [`CreateRule`](crate::types::CreateRule).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateRuleBuilder {
    pub(crate) location: ::std::option::Option<crate::types::LocationValues>,
    pub(crate) interval: ::std::option::Option<i32>,
    pub(crate) interval_unit: ::std::option::Option<crate::types::IntervalUnitValues>,
    pub(crate) times: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) cron_expression: ::std::option::Option<::std::string::String>,
    pub(crate) scripts: ::std::option::Option<::std::vec::Vec<crate::types::Script>>,
}
impl CreateRuleBuilder {
    /// <p><b>\[Custom snapshot policies only\]</b> Specifies the destination for snapshots created by the policy. The allowed destinations depend on the location of the targeted resources.</p>
    /// <ul>
    /// <li>
    /// <p>If the policy targets resources in a Region, then you must create snapshots in the same Region as the source resource.</p></li>
    /// <li>
    /// <p>If the policy targets resources in a Local Zone, you can create snapshots in the same Local Zone or in its parent Region.</p></li>
    /// <li>
    /// <p>If the policy targets resources on an Outpost, then you can create snapshots on the same Outpost or in its parent Region.</p></li>
    /// </ul>
    /// <p>Specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p>To create snapshots in the same Region as the source resource, specify <code>CLOUD</code>.</p></li>
    /// <li>
    /// <p>To create snapshots in the same Local Zone as the source resource, specify <code>LOCAL_ZONE</code>.</p></li>
    /// <li>
    /// <p>To create snapshots on the same Outpost as the source resource, specify <code>OUTPOST_LOCAL</code>.</p></li>
    /// </ul>
    /// <p>Default: <code>CLOUD</code></p>
    pub fn location(mut self, input: crate::types::LocationValues) -> Self {
        self.location = ::std::option::Option::Some(input);
        self
    }
    /// <p><b>\[Custom snapshot policies only\]</b> Specifies the destination for snapshots created by the policy. The allowed destinations depend on the location of the targeted resources.</p>
    /// <ul>
    /// <li>
    /// <p>If the policy targets resources in a Region, then you must create snapshots in the same Region as the source resource.</p></li>
    /// <li>
    /// <p>If the policy targets resources in a Local Zone, you can create snapshots in the same Local Zone or in its parent Region.</p></li>
    /// <li>
    /// <p>If the policy targets resources on an Outpost, then you can create snapshots on the same Outpost or in its parent Region.</p></li>
    /// </ul>
    /// <p>Specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p>To create snapshots in the same Region as the source resource, specify <code>CLOUD</code>.</p></li>
    /// <li>
    /// <p>To create snapshots in the same Local Zone as the source resource, specify <code>LOCAL_ZONE</code>.</p></li>
    /// <li>
    /// <p>To create snapshots on the same Outpost as the source resource, specify <code>OUTPOST_LOCAL</code>.</p></li>
    /// </ul>
    /// <p>Default: <code>CLOUD</code></p>
    pub fn set_location(mut self, input: ::std::option::Option<crate::types::LocationValues>) -> Self {
        self.location = input;
        self
    }
    /// <p><b>\[Custom snapshot policies only\]</b> Specifies the destination for snapshots created by the policy. The allowed destinations depend on the location of the targeted resources.</p>
    /// <ul>
    /// <li>
    /// <p>If the policy targets resources in a Region, then you must create snapshots in the same Region as the source resource.</p></li>
    /// <li>
    /// <p>If the policy targets resources in a Local Zone, you can create snapshots in the same Local Zone or in its parent Region.</p></li>
    /// <li>
    /// <p>If the policy targets resources on an Outpost, then you can create snapshots on the same Outpost or in its parent Region.</p></li>
    /// </ul>
    /// <p>Specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p>To create snapshots in the same Region as the source resource, specify <code>CLOUD</code>.</p></li>
    /// <li>
    /// <p>To create snapshots in the same Local Zone as the source resource, specify <code>LOCAL_ZONE</code>.</p></li>
    /// <li>
    /// <p>To create snapshots on the same Outpost as the source resource, specify <code>OUTPOST_LOCAL</code>.</p></li>
    /// </ul>
    /// <p>Default: <code>CLOUD</code></p>
    pub fn get_location(&self) -> &::std::option::Option<crate::types::LocationValues> {
        &self.location
    }
    /// <p>The interval between snapshots. The supported values are 1, 2, 3, 4, 6, 8, 12, and 24.</p>
    pub fn interval(mut self, input: i32) -> Self {
        self.interval = ::std::option::Option::Some(input);
        self
    }
    /// <p>The interval between snapshots. The supported values are 1, 2, 3, 4, 6, 8, 12, and 24.</p>
    pub fn set_interval(mut self, input: ::std::option::Option<i32>) -> Self {
        self.interval = input;
        self
    }
    /// <p>The interval between snapshots. The supported values are 1, 2, 3, 4, 6, 8, 12, and 24.</p>
    pub fn get_interval(&self) -> &::std::option::Option<i32> {
        &self.interval
    }
    /// <p>The interval unit.</p>
    pub fn interval_unit(mut self, input: crate::types::IntervalUnitValues) -> Self {
        self.interval_unit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The interval unit.</p>
    pub fn set_interval_unit(mut self, input: ::std::option::Option<crate::types::IntervalUnitValues>) -> Self {
        self.interval_unit = input;
        self
    }
    /// <p>The interval unit.</p>
    pub fn get_interval_unit(&self) -> &::std::option::Option<crate::types::IntervalUnitValues> {
        &self.interval_unit
    }
    /// Appends an item to `times`.
    ///
    /// To override the contents of this collection use [`set_times`](Self::set_times).
    ///
    /// <p>The time, in UTC, to start the operation. The supported format is hh:mm.</p>
    /// <p>The operation occurs within a one-hour window following the specified time. If you do not specify a time, Amazon Data Lifecycle Manager selects a time within the next 24 hours.</p>
    pub fn times(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.times.unwrap_or_default();
        v.push(input.into());
        self.times = ::std::option::Option::Some(v);
        self
    }
    /// <p>The time, in UTC, to start the operation. The supported format is hh:mm.</p>
    /// <p>The operation occurs within a one-hour window following the specified time. If you do not specify a time, Amazon Data Lifecycle Manager selects a time within the next 24 hours.</p>
    pub fn set_times(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.times = input;
        self
    }
    /// <p>The time, in UTC, to start the operation. The supported format is hh:mm.</p>
    /// <p>The operation occurs within a one-hour window following the specified time. If you do not specify a time, Amazon Data Lifecycle Manager selects a time within the next 24 hours.</p>
    pub fn get_times(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.times
    }
    /// <p>The schedule, as a Cron expression. The schedule interval must be between 1 hour and 1 year. For more information, see the <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-cron-expressions.html">Cron expressions reference</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    pub fn cron_expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cron_expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The schedule, as a Cron expression. The schedule interval must be between 1 hour and 1 year. For more information, see the <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-cron-expressions.html">Cron expressions reference</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    pub fn set_cron_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cron_expression = input;
        self
    }
    /// <p>The schedule, as a Cron expression. The schedule interval must be between 1 hour and 1 year. For more information, see the <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-cron-expressions.html">Cron expressions reference</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    pub fn get_cron_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.cron_expression
    }
    /// Appends an item to `scripts`.
    ///
    /// To override the contents of this collection use [`set_scripts`](Self::set_scripts).
    ///
    /// <p><b>\[Custom snapshot policies that target instances only\]</b> Specifies pre and/or post scripts for a snapshot lifecycle policy that targets instances. This is useful for creating application-consistent snapshots, or for performing specific administrative tasks before or after Amazon Data Lifecycle Manager initiates snapshot creation.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/automate-app-consistent-backups.html">Automating application-consistent snapshots with pre and post scripts</a>.</p>
    pub fn scripts(mut self, input: crate::types::Script) -> Self {
        let mut v = self.scripts.unwrap_or_default();
        v.push(input);
        self.scripts = ::std::option::Option::Some(v);
        self
    }
    /// <p><b>\[Custom snapshot policies that target instances only\]</b> Specifies pre and/or post scripts for a snapshot lifecycle policy that targets instances. This is useful for creating application-consistent snapshots, or for performing specific administrative tasks before or after Amazon Data Lifecycle Manager initiates snapshot creation.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/automate-app-consistent-backups.html">Automating application-consistent snapshots with pre and post scripts</a>.</p>
    pub fn set_scripts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Script>>) -> Self {
        self.scripts = input;
        self
    }
    /// <p><b>\[Custom snapshot policies that target instances only\]</b> Specifies pre and/or post scripts for a snapshot lifecycle policy that targets instances. This is useful for creating application-consistent snapshots, or for performing specific administrative tasks before or after Amazon Data Lifecycle Manager initiates snapshot creation.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/automate-app-consistent-backups.html">Automating application-consistent snapshots with pre and post scripts</a>.</p>
    pub fn get_scripts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Script>> {
        &self.scripts
    }
    /// Consumes the builder and constructs a [`CreateRule`](crate::types::CreateRule).
    pub fn build(self) -> crate::types::CreateRule {
        crate::types::CreateRule {
            location: self.location,
            interval: self.interval,
            interval_unit: self.interval_unit,
            times: self.times,
            cron_expression: self.cron_expression,
            scripts: self.scripts,
        }
    }
}
