// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a connector that enables persistent storage for users.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StorageConnector {
    /// <p>The type of storage connector.</p>
    pub connector_type: ::std::option::Option<crate::types::StorageConnectorType>,
    /// <p>The ARN of the storage connector.</p>
    pub resource_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The names of the domains for the account.</p>
    pub domains: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The OneDrive for Business domains where you require admin consent when users try to link their OneDrive account to AppStream 2.0. The attribute can only be specified when ConnectorType=ONE_DRIVE.</p>
    pub domains_require_admin_consent: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl StorageConnector {
    /// <p>The type of storage connector.</p>
    pub fn connector_type(&self) -> ::std::option::Option<&crate::types::StorageConnectorType> {
        self.connector_type.as_ref()
    }
    /// <p>The ARN of the storage connector.</p>
    pub fn resource_identifier(&self) -> ::std::option::Option<&str> {
        self.resource_identifier.as_deref()
    }
    /// <p>The names of the domains for the account.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.domains.is_none()`.
    pub fn domains(&self) -> &[::std::string::String] {
        self.domains.as_deref().unwrap_or_default()
    }
    /// <p>The OneDrive for Business domains where you require admin consent when users try to link their OneDrive account to AppStream 2.0. The attribute can only be specified when ConnectorType=ONE_DRIVE.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.domains_require_admin_consent.is_none()`.
    pub fn domains_require_admin_consent(&self) -> &[::std::string::String] {
        self.domains_require_admin_consent.as_deref().unwrap_or_default()
    }
}
impl StorageConnector {
    /// Creates a new builder-style object to manufacture [`StorageConnector`](crate::types::StorageConnector).
    pub fn builder() -> crate::types::builders::StorageConnectorBuilder {
        crate::types::builders::StorageConnectorBuilder::default()
    }
}

/// A builder for [`StorageConnector`](crate::types::StorageConnector).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StorageConnectorBuilder {
    pub(crate) connector_type: ::std::option::Option<crate::types::StorageConnectorType>,
    pub(crate) resource_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) domains: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) domains_require_admin_consent: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl StorageConnectorBuilder {
    /// <p>The type of storage connector.</p>
    /// This field is required.
    pub fn connector_type(mut self, input: crate::types::StorageConnectorType) -> Self {
        self.connector_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of storage connector.</p>
    pub fn set_connector_type(mut self, input: ::std::option::Option<crate::types::StorageConnectorType>) -> Self {
        self.connector_type = input;
        self
    }
    /// <p>The type of storage connector.</p>
    pub fn get_connector_type(&self) -> &::std::option::Option<crate::types::StorageConnectorType> {
        &self.connector_type
    }
    /// <p>The ARN of the storage connector.</p>
    pub fn resource_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the storage connector.</p>
    pub fn set_resource_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_identifier = input;
        self
    }
    /// <p>The ARN of the storage connector.</p>
    pub fn get_resource_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_identifier
    }
    /// Appends an item to `domains`.
    ///
    /// To override the contents of this collection use [`set_domains`](Self::set_domains).
    ///
    /// <p>The names of the domains for the account.</p>
    pub fn domains(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.domains.unwrap_or_default();
        v.push(input.into());
        self.domains = ::std::option::Option::Some(v);
        self
    }
    /// <p>The names of the domains for the account.</p>
    pub fn set_domains(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.domains = input;
        self
    }
    /// <p>The names of the domains for the account.</p>
    pub fn get_domains(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.domains
    }
    /// Appends an item to `domains_require_admin_consent`.
    ///
    /// To override the contents of this collection use [`set_domains_require_admin_consent`](Self::set_domains_require_admin_consent).
    ///
    /// <p>The OneDrive for Business domains where you require admin consent when users try to link their OneDrive account to AppStream 2.0. The attribute can only be specified when ConnectorType=ONE_DRIVE.</p>
    pub fn domains_require_admin_consent(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.domains_require_admin_consent.unwrap_or_default();
        v.push(input.into());
        self.domains_require_admin_consent = ::std::option::Option::Some(v);
        self
    }
    /// <p>The OneDrive for Business domains where you require admin consent when users try to link their OneDrive account to AppStream 2.0. The attribute can only be specified when ConnectorType=ONE_DRIVE.</p>
    pub fn set_domains_require_admin_consent(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.domains_require_admin_consent = input;
        self
    }
    /// <p>The OneDrive for Business domains where you require admin consent when users try to link their OneDrive account to AppStream 2.0. The attribute can only be specified when ConnectorType=ONE_DRIVE.</p>
    pub fn get_domains_require_admin_consent(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.domains_require_admin_consent
    }
    /// Consumes the builder and constructs a [`StorageConnector`](crate::types::StorageConnector).
    pub fn build(self) -> crate::types::StorageConnector {
        crate::types::StorageConnector {
            connector_type: self.connector_type,
            resource_identifier: self.resource_identifier,
            domains: self.domains,
            domains_require_admin_consent: self.domains_require_admin_consent,
        }
    }
}
