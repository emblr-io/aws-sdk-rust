// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateThemeForStackInput {
    /// <p>The name of the stack for the theme.</p>
    pub stack_name: ::std::option::Option<::std::string::String>,
    /// <p>The links that are displayed in the footer of the streaming application catalog page. These links are helpful resources for users, such as the organization's IT support and product marketing sites.</p>
    pub footer_links: ::std::option::Option<::std::vec::Vec<crate::types::ThemeFooterLink>>,
    /// <p>The title that is displayed at the top of the browser tab during users' application streaming sessions.</p>
    pub title_text: ::std::option::Option<::std::string::String>,
    /// <p>The color theme that is applied to website links, text, and buttons. These colors are also applied as accents in the background for the streaming application catalog page.</p>
    pub theme_styling: ::std::option::Option<crate::types::ThemeStyling>,
    /// <p>The organization logo that appears on the streaming application catalog page.</p>
    pub organization_logo_s3_location: ::std::option::Option<crate::types::S3Location>,
    /// <p>The S3 location of the favicon. The favicon enables users to recognize their application streaming site in a browser full of tabs or bookmarks. It is displayed at the top of the browser tab for the application streaming site during users' streaming sessions.</p>
    pub favicon_s3_location: ::std::option::Option<crate::types::S3Location>,
}
impl CreateThemeForStackInput {
    /// <p>The name of the stack for the theme.</p>
    pub fn stack_name(&self) -> ::std::option::Option<&str> {
        self.stack_name.as_deref()
    }
    /// <p>The links that are displayed in the footer of the streaming application catalog page. These links are helpful resources for users, such as the organization's IT support and product marketing sites.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.footer_links.is_none()`.
    pub fn footer_links(&self) -> &[crate::types::ThemeFooterLink] {
        self.footer_links.as_deref().unwrap_or_default()
    }
    /// <p>The title that is displayed at the top of the browser tab during users' application streaming sessions.</p>
    pub fn title_text(&self) -> ::std::option::Option<&str> {
        self.title_text.as_deref()
    }
    /// <p>The color theme that is applied to website links, text, and buttons. These colors are also applied as accents in the background for the streaming application catalog page.</p>
    pub fn theme_styling(&self) -> ::std::option::Option<&crate::types::ThemeStyling> {
        self.theme_styling.as_ref()
    }
    /// <p>The organization logo that appears on the streaming application catalog page.</p>
    pub fn organization_logo_s3_location(&self) -> ::std::option::Option<&crate::types::S3Location> {
        self.organization_logo_s3_location.as_ref()
    }
    /// <p>The S3 location of the favicon. The favicon enables users to recognize their application streaming site in a browser full of tabs or bookmarks. It is displayed at the top of the browser tab for the application streaming site during users' streaming sessions.</p>
    pub fn favicon_s3_location(&self) -> ::std::option::Option<&crate::types::S3Location> {
        self.favicon_s3_location.as_ref()
    }
}
impl CreateThemeForStackInput {
    /// Creates a new builder-style object to manufacture [`CreateThemeForStackInput`](crate::operation::create_theme_for_stack::CreateThemeForStackInput).
    pub fn builder() -> crate::operation::create_theme_for_stack::builders::CreateThemeForStackInputBuilder {
        crate::operation::create_theme_for_stack::builders::CreateThemeForStackInputBuilder::default()
    }
}

/// A builder for [`CreateThemeForStackInput`](crate::operation::create_theme_for_stack::CreateThemeForStackInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateThemeForStackInputBuilder {
    pub(crate) stack_name: ::std::option::Option<::std::string::String>,
    pub(crate) footer_links: ::std::option::Option<::std::vec::Vec<crate::types::ThemeFooterLink>>,
    pub(crate) title_text: ::std::option::Option<::std::string::String>,
    pub(crate) theme_styling: ::std::option::Option<crate::types::ThemeStyling>,
    pub(crate) organization_logo_s3_location: ::std::option::Option<crate::types::S3Location>,
    pub(crate) favicon_s3_location: ::std::option::Option<crate::types::S3Location>,
}
impl CreateThemeForStackInputBuilder {
    /// <p>The name of the stack for the theme.</p>
    /// This field is required.
    pub fn stack_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the stack for the theme.</p>
    pub fn set_stack_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_name = input;
        self
    }
    /// <p>The name of the stack for the theme.</p>
    pub fn get_stack_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_name
    }
    /// Appends an item to `footer_links`.
    ///
    /// To override the contents of this collection use [`set_footer_links`](Self::set_footer_links).
    ///
    /// <p>The links that are displayed in the footer of the streaming application catalog page. These links are helpful resources for users, such as the organization's IT support and product marketing sites.</p>
    pub fn footer_links(mut self, input: crate::types::ThemeFooterLink) -> Self {
        let mut v = self.footer_links.unwrap_or_default();
        v.push(input);
        self.footer_links = ::std::option::Option::Some(v);
        self
    }
    /// <p>The links that are displayed in the footer of the streaming application catalog page. These links are helpful resources for users, such as the organization's IT support and product marketing sites.</p>
    pub fn set_footer_links(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ThemeFooterLink>>) -> Self {
        self.footer_links = input;
        self
    }
    /// <p>The links that are displayed in the footer of the streaming application catalog page. These links are helpful resources for users, such as the organization's IT support and product marketing sites.</p>
    pub fn get_footer_links(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ThemeFooterLink>> {
        &self.footer_links
    }
    /// <p>The title that is displayed at the top of the browser tab during users' application streaming sessions.</p>
    /// This field is required.
    pub fn title_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title_text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title that is displayed at the top of the browser tab during users' application streaming sessions.</p>
    pub fn set_title_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title_text = input;
        self
    }
    /// <p>The title that is displayed at the top of the browser tab during users' application streaming sessions.</p>
    pub fn get_title_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.title_text
    }
    /// <p>The color theme that is applied to website links, text, and buttons. These colors are also applied as accents in the background for the streaming application catalog page.</p>
    /// This field is required.
    pub fn theme_styling(mut self, input: crate::types::ThemeStyling) -> Self {
        self.theme_styling = ::std::option::Option::Some(input);
        self
    }
    /// <p>The color theme that is applied to website links, text, and buttons. These colors are also applied as accents in the background for the streaming application catalog page.</p>
    pub fn set_theme_styling(mut self, input: ::std::option::Option<crate::types::ThemeStyling>) -> Self {
        self.theme_styling = input;
        self
    }
    /// <p>The color theme that is applied to website links, text, and buttons. These colors are also applied as accents in the background for the streaming application catalog page.</p>
    pub fn get_theme_styling(&self) -> &::std::option::Option<crate::types::ThemeStyling> {
        &self.theme_styling
    }
    /// <p>The organization logo that appears on the streaming application catalog page.</p>
    /// This field is required.
    pub fn organization_logo_s3_location(mut self, input: crate::types::S3Location) -> Self {
        self.organization_logo_s3_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The organization logo that appears on the streaming application catalog page.</p>
    pub fn set_organization_logo_s3_location(mut self, input: ::std::option::Option<crate::types::S3Location>) -> Self {
        self.organization_logo_s3_location = input;
        self
    }
    /// <p>The organization logo that appears on the streaming application catalog page.</p>
    pub fn get_organization_logo_s3_location(&self) -> &::std::option::Option<crate::types::S3Location> {
        &self.organization_logo_s3_location
    }
    /// <p>The S3 location of the favicon. The favicon enables users to recognize their application streaming site in a browser full of tabs or bookmarks. It is displayed at the top of the browser tab for the application streaming site during users' streaming sessions.</p>
    /// This field is required.
    pub fn favicon_s3_location(mut self, input: crate::types::S3Location) -> Self {
        self.favicon_s3_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The S3 location of the favicon. The favicon enables users to recognize their application streaming site in a browser full of tabs or bookmarks. It is displayed at the top of the browser tab for the application streaming site during users' streaming sessions.</p>
    pub fn set_favicon_s3_location(mut self, input: ::std::option::Option<crate::types::S3Location>) -> Self {
        self.favicon_s3_location = input;
        self
    }
    /// <p>The S3 location of the favicon. The favicon enables users to recognize their application streaming site in a browser full of tabs or bookmarks. It is displayed at the top of the browser tab for the application streaming site during users' streaming sessions.</p>
    pub fn get_favicon_s3_location(&self) -> &::std::option::Option<crate::types::S3Location> {
        &self.favicon_s3_location
    }
    /// Consumes the builder and constructs a [`CreateThemeForStackInput`](crate::operation::create_theme_for_stack::CreateThemeForStackInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_theme_for_stack::CreateThemeForStackInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_theme_for_stack::CreateThemeForStackInput {
            stack_name: self.stack_name,
            footer_links: self.footer_links,
            title_text: self.title_text,
            theme_styling: self.theme_styling,
            organization_logo_s3_location: self.organization_logo_s3_location,
            favicon_s3_location: self.favicon_s3_location,
        })
    }
}
