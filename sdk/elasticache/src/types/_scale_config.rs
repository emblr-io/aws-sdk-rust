// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration settings for horizontal or vertical scaling operations on Memcached clusters.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScaleConfig {
    /// <p>The percentage by which to scale the Memcached cluster, either horizontally by adding nodes or vertically by increasing resources.</p>
    pub scale_percentage: ::std::option::Option<i32>,
    /// <p>The time interval in seconds between scaling operations when performing gradual scaling for a Memcached cluster.</p>
    pub scale_interval_minutes: ::std::option::Option<i32>,
}
impl ScaleConfig {
    /// <p>The percentage by which to scale the Memcached cluster, either horizontally by adding nodes or vertically by increasing resources.</p>
    pub fn scale_percentage(&self) -> ::std::option::Option<i32> {
        self.scale_percentage
    }
    /// <p>The time interval in seconds between scaling operations when performing gradual scaling for a Memcached cluster.</p>
    pub fn scale_interval_minutes(&self) -> ::std::option::Option<i32> {
        self.scale_interval_minutes
    }
}
impl ScaleConfig {
    /// Creates a new builder-style object to manufacture [`ScaleConfig`](crate::types::ScaleConfig).
    pub fn builder() -> crate::types::builders::ScaleConfigBuilder {
        crate::types::builders::ScaleConfigBuilder::default()
    }
}

/// A builder for [`ScaleConfig`](crate::types::ScaleConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ScaleConfigBuilder {
    pub(crate) scale_percentage: ::std::option::Option<i32>,
    pub(crate) scale_interval_minutes: ::std::option::Option<i32>,
}
impl ScaleConfigBuilder {
    /// <p>The percentage by which to scale the Memcached cluster, either horizontally by adding nodes or vertically by increasing resources.</p>
    pub fn scale_percentage(mut self, input: i32) -> Self {
        self.scale_percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage by which to scale the Memcached cluster, either horizontally by adding nodes or vertically by increasing resources.</p>
    pub fn set_scale_percentage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.scale_percentage = input;
        self
    }
    /// <p>The percentage by which to scale the Memcached cluster, either horizontally by adding nodes or vertically by increasing resources.</p>
    pub fn get_scale_percentage(&self) -> &::std::option::Option<i32> {
        &self.scale_percentage
    }
    /// <p>The time interval in seconds between scaling operations when performing gradual scaling for a Memcached cluster.</p>
    pub fn scale_interval_minutes(mut self, input: i32) -> Self {
        self.scale_interval_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time interval in seconds between scaling operations when performing gradual scaling for a Memcached cluster.</p>
    pub fn set_scale_interval_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.scale_interval_minutes = input;
        self
    }
    /// <p>The time interval in seconds between scaling operations when performing gradual scaling for a Memcached cluster.</p>
    pub fn get_scale_interval_minutes(&self) -> &::std::option::Option<i32> {
        &self.scale_interval_minutes
    }
    /// Consumes the builder and constructs a [`ScaleConfig`](crate::types::ScaleConfig).
    pub fn build(self) -> crate::types::ScaleConfig {
        crate::types::ScaleConfig {
            scale_percentage: self.scale_percentage,
            scale_interval_minutes: self.scale_interval_minutes,
        }
    }
}
