// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for the number of ElastiCache Processing Units (ECPU) the cache can consume per second.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EcpuPerSecond {
    /// <p>The configuration for the maximum number of ECPUs the cache can consume per second.</p>
    pub maximum: ::std::option::Option<i32>,
    /// <p>The configuration for the minimum number of ECPUs the cache should be able consume per second.</p>
    pub minimum: ::std::option::Option<i32>,
}
impl EcpuPerSecond {
    /// <p>The configuration for the maximum number of ECPUs the cache can consume per second.</p>
    pub fn maximum(&self) -> ::std::option::Option<i32> {
        self.maximum
    }
    /// <p>The configuration for the minimum number of ECPUs the cache should be able consume per second.</p>
    pub fn minimum(&self) -> ::std::option::Option<i32> {
        self.minimum
    }
}
impl EcpuPerSecond {
    /// Creates a new builder-style object to manufacture [`EcpuPerSecond`](crate::types::EcpuPerSecond).
    pub fn builder() -> crate::types::builders::EcpuPerSecondBuilder {
        crate::types::builders::EcpuPerSecondBuilder::default()
    }
}

/// A builder for [`EcpuPerSecond`](crate::types::EcpuPerSecond).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EcpuPerSecondBuilder {
    pub(crate) maximum: ::std::option::Option<i32>,
    pub(crate) minimum: ::std::option::Option<i32>,
}
impl EcpuPerSecondBuilder {
    /// <p>The configuration for the maximum number of ECPUs the cache can consume per second.</p>
    pub fn maximum(mut self, input: i32) -> Self {
        self.maximum = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for the maximum number of ECPUs the cache can consume per second.</p>
    pub fn set_maximum(mut self, input: ::std::option::Option<i32>) -> Self {
        self.maximum = input;
        self
    }
    /// <p>The configuration for the maximum number of ECPUs the cache can consume per second.</p>
    pub fn get_maximum(&self) -> &::std::option::Option<i32> {
        &self.maximum
    }
    /// <p>The configuration for the minimum number of ECPUs the cache should be able consume per second.</p>
    pub fn minimum(mut self, input: i32) -> Self {
        self.minimum = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for the minimum number of ECPUs the cache should be able consume per second.</p>
    pub fn set_minimum(mut self, input: ::std::option::Option<i32>) -> Self {
        self.minimum = input;
        self
    }
    /// <p>The configuration for the minimum number of ECPUs the cache should be able consume per second.</p>
    pub fn get_minimum(&self) -> &::std::option::Option<i32> {
        &self.minimum
    }
    /// Consumes the builder and constructs a [`EcpuPerSecond`](crate::types::EcpuPerSecond).
    pub fn build(self) -> crate::types::EcpuPerSecond {
        crate::types::EcpuPerSecond {
            maximum: self.maximum,
            minimum: self.minimum,
        }
    }
}
