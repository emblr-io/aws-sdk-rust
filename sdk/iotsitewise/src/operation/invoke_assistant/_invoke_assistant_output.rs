// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::fmt::Debug)]
pub struct InvokeAssistantOutput {
    /// <p>Contains the response, citation, and trace from the SiteWise Assistant.</p>
    #[cfg_attr(any(feature = "serde-serialize", feature = "serde-deserialize"), serde(skip))]
    pub body: crate::event_receiver::EventReceiver<crate::types::ResponseStream, crate::types::error::ResponseStreamError>,
    /// <p>The ID of the conversation, in UUID format. This ID uniquely identifies the conversation within IoT SiteWise.</p>
    pub conversation_id: ::std::string::String,
    _request_id: Option<String>,
}
impl InvokeAssistantOutput {
    /// <p>Contains the response, citation, and trace from the SiteWise Assistant.</p>
    pub fn body(&self) -> &crate::event_receiver::EventReceiver<crate::types::ResponseStream, crate::types::error::ResponseStreamError> {
        &self.body
    }
    /// <p>The ID of the conversation, in UUID format. This ID uniquely identifies the conversation within IoT SiteWise.</p>
    pub fn conversation_id(&self) -> &str {
        use std::ops::Deref;
        self.conversation_id.deref()
    }
}
impl ::aws_types::request_id::RequestId for InvokeAssistantOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl InvokeAssistantOutput {
    /// Creates a new builder-style object to manufacture [`InvokeAssistantOutput`](crate::operation::invoke_assistant::InvokeAssistantOutput).
    pub fn builder() -> crate::operation::invoke_assistant::builders::InvokeAssistantOutputBuilder {
        crate::operation::invoke_assistant::builders::InvokeAssistantOutputBuilder::default()
    }
}

/// A builder for [`InvokeAssistantOutput`](crate::operation::invoke_assistant::InvokeAssistantOutput).
#[derive(::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InvokeAssistantOutputBuilder {
    pub(crate) body:
        ::std::option::Option<crate::event_receiver::EventReceiver<crate::types::ResponseStream, crate::types::error::ResponseStreamError>>,
    pub(crate) conversation_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl InvokeAssistantOutputBuilder {
    /// <p>Contains the response, citation, and trace from the SiteWise Assistant.</p>
    /// This field is required.
    pub fn body(
        mut self,
        input: crate::event_receiver::EventReceiver<crate::types::ResponseStream, crate::types::error::ResponseStreamError>,
    ) -> Self {
        self.body = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the response, citation, and trace from the SiteWise Assistant.</p>
    pub fn set_body(
        mut self,
        input: ::std::option::Option<crate::event_receiver::EventReceiver<crate::types::ResponseStream, crate::types::error::ResponseStreamError>>,
    ) -> Self {
        self.body = input;
        self
    }
    /// <p>Contains the response, citation, and trace from the SiteWise Assistant.</p>
    pub fn get_body(
        &self,
    ) -> &::std::option::Option<crate::event_receiver::EventReceiver<crate::types::ResponseStream, crate::types::error::ResponseStreamError>> {
        &self.body
    }
    /// <p>The ID of the conversation, in UUID format. This ID uniquely identifies the conversation within IoT SiteWise.</p>
    /// This field is required.
    pub fn conversation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.conversation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the conversation, in UUID format. This ID uniquely identifies the conversation within IoT SiteWise.</p>
    pub fn set_conversation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.conversation_id = input;
        self
    }
    /// <p>The ID of the conversation, in UUID format. This ID uniquely identifies the conversation within IoT SiteWise.</p>
    pub fn get_conversation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.conversation_id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`InvokeAssistantOutput`](crate::operation::invoke_assistant::InvokeAssistantOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`body`](crate::operation::invoke_assistant::builders::InvokeAssistantOutputBuilder::body)
    /// - [`conversation_id`](crate::operation::invoke_assistant::builders::InvokeAssistantOutputBuilder::conversation_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::invoke_assistant::InvokeAssistantOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::invoke_assistant::InvokeAssistantOutput {
            body: self.body.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "body",
                    "body was not specified but it is required when building InvokeAssistantOutput",
                )
            })?,
            conversation_id: self.conversation_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "conversation_id",
                    "conversation_id was not specified but it is required when building InvokeAssistantOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
