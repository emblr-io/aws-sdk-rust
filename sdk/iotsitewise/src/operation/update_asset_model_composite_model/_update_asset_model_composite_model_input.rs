// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateAssetModelCompositeModelInput {
    /// <p>The ID of the asset model, in UUID format.</p>
    pub asset_model_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of a composite model on this asset model.</p>
    pub asset_model_composite_model_id: ::std::option::Option<::std::string::String>,
    /// <p>An external ID to assign to the asset model. You can only set the external ID of the asset model if it wasn't set when it was created, or you're setting it to the exact same thing as when it was created.</p>
    pub asset_model_composite_model_external_id: ::std::option::Option<::std::string::String>,
    /// <p>A description for the composite model.</p>
    pub asset_model_composite_model_description: ::std::option::Option<::std::string::String>,
    /// <p>A unique name for the composite model.</p>
    pub asset_model_composite_model_name: ::std::option::Option<::std::string::String>,
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The property definitions of the composite model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/custom-composite-models.html#inline-composite-models"> Inline custom composite models</a> in the <i>IoT SiteWise User Guide</i>.</p>
    /// <p>You can specify up to 200 properties per composite model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub asset_model_composite_model_properties: ::std::option::Option<::std::vec::Vec<crate::types::AssetModelProperty>>,
    /// <p>The expected current entity tag (ETag) for the asset model’s latest or active version (specified using <code>matchForVersionType</code>). The update request is rejected if the tag does not match the latest or active version's current entity tag. See <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/opt-locking-for-model.html">Optimistic locking for asset model writes</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub if_match: ::std::option::Option<::std::string::String>,
    /// <p>Accepts <b>*</b> to reject the update request if an active version (specified using <code>matchForVersionType</code> as <code>ACTIVE</code>) already exists for the asset model.</p>
    pub if_none_match: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the asset model version type (<code>LATEST</code> or <code>ACTIVE</code>) used in conjunction with <code>If-Match</code> or <code>If-None-Match</code> headers to determine the target ETag for the update operation.</p>
    pub match_for_version_type: ::std::option::Option<crate::types::AssetModelVersionType>,
}
impl UpdateAssetModelCompositeModelInput {
    /// <p>The ID of the asset model, in UUID format.</p>
    pub fn asset_model_id(&self) -> ::std::option::Option<&str> {
        self.asset_model_id.as_deref()
    }
    /// <p>The ID of a composite model on this asset model.</p>
    pub fn asset_model_composite_model_id(&self) -> ::std::option::Option<&str> {
        self.asset_model_composite_model_id.as_deref()
    }
    /// <p>An external ID to assign to the asset model. You can only set the external ID of the asset model if it wasn't set when it was created, or you're setting it to the exact same thing as when it was created.</p>
    pub fn asset_model_composite_model_external_id(&self) -> ::std::option::Option<&str> {
        self.asset_model_composite_model_external_id.as_deref()
    }
    /// <p>A description for the composite model.</p>
    pub fn asset_model_composite_model_description(&self) -> ::std::option::Option<&str> {
        self.asset_model_composite_model_description.as_deref()
    }
    /// <p>A unique name for the composite model.</p>
    pub fn asset_model_composite_model_name(&self) -> ::std::option::Option<&str> {
        self.asset_model_composite_model_name.as_deref()
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The property definitions of the composite model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/custom-composite-models.html#inline-composite-models"> Inline custom composite models</a> in the <i>IoT SiteWise User Guide</i>.</p>
    /// <p>You can specify up to 200 properties per composite model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.asset_model_composite_model_properties.is_none()`.
    pub fn asset_model_composite_model_properties(&self) -> &[crate::types::AssetModelProperty] {
        self.asset_model_composite_model_properties.as_deref().unwrap_or_default()
    }
    /// <p>The expected current entity tag (ETag) for the asset model’s latest or active version (specified using <code>matchForVersionType</code>). The update request is rejected if the tag does not match the latest or active version's current entity tag. See <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/opt-locking-for-model.html">Optimistic locking for asset model writes</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn if_match(&self) -> ::std::option::Option<&str> {
        self.if_match.as_deref()
    }
    /// <p>Accepts <b>*</b> to reject the update request if an active version (specified using <code>matchForVersionType</code> as <code>ACTIVE</code>) already exists for the asset model.</p>
    pub fn if_none_match(&self) -> ::std::option::Option<&str> {
        self.if_none_match.as_deref()
    }
    /// <p>Specifies the asset model version type (<code>LATEST</code> or <code>ACTIVE</code>) used in conjunction with <code>If-Match</code> or <code>If-None-Match</code> headers to determine the target ETag for the update operation.</p>
    pub fn match_for_version_type(&self) -> ::std::option::Option<&crate::types::AssetModelVersionType> {
        self.match_for_version_type.as_ref()
    }
}
impl UpdateAssetModelCompositeModelInput {
    /// Creates a new builder-style object to manufacture [`UpdateAssetModelCompositeModelInput`](crate::operation::update_asset_model_composite_model::UpdateAssetModelCompositeModelInput).
    pub fn builder() -> crate::operation::update_asset_model_composite_model::builders::UpdateAssetModelCompositeModelInputBuilder {
        crate::operation::update_asset_model_composite_model::builders::UpdateAssetModelCompositeModelInputBuilder::default()
    }
}

/// A builder for [`UpdateAssetModelCompositeModelInput`](crate::operation::update_asset_model_composite_model::UpdateAssetModelCompositeModelInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateAssetModelCompositeModelInputBuilder {
    pub(crate) asset_model_id: ::std::option::Option<::std::string::String>,
    pub(crate) asset_model_composite_model_id: ::std::option::Option<::std::string::String>,
    pub(crate) asset_model_composite_model_external_id: ::std::option::Option<::std::string::String>,
    pub(crate) asset_model_composite_model_description: ::std::option::Option<::std::string::String>,
    pub(crate) asset_model_composite_model_name: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) asset_model_composite_model_properties: ::std::option::Option<::std::vec::Vec<crate::types::AssetModelProperty>>,
    pub(crate) if_match: ::std::option::Option<::std::string::String>,
    pub(crate) if_none_match: ::std::option::Option<::std::string::String>,
    pub(crate) match_for_version_type: ::std::option::Option<crate::types::AssetModelVersionType>,
}
impl UpdateAssetModelCompositeModelInputBuilder {
    /// <p>The ID of the asset model, in UUID format.</p>
    /// This field is required.
    pub fn asset_model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_model_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the asset model, in UUID format.</p>
    pub fn set_asset_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_model_id = input;
        self
    }
    /// <p>The ID of the asset model, in UUID format.</p>
    pub fn get_asset_model_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_model_id
    }
    /// <p>The ID of a composite model on this asset model.</p>
    /// This field is required.
    pub fn asset_model_composite_model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_model_composite_model_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of a composite model on this asset model.</p>
    pub fn set_asset_model_composite_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_model_composite_model_id = input;
        self
    }
    /// <p>The ID of a composite model on this asset model.</p>
    pub fn get_asset_model_composite_model_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_model_composite_model_id
    }
    /// <p>An external ID to assign to the asset model. You can only set the external ID of the asset model if it wasn't set when it was created, or you're setting it to the exact same thing as when it was created.</p>
    pub fn asset_model_composite_model_external_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_model_composite_model_external_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An external ID to assign to the asset model. You can only set the external ID of the asset model if it wasn't set when it was created, or you're setting it to the exact same thing as when it was created.</p>
    pub fn set_asset_model_composite_model_external_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_model_composite_model_external_id = input;
        self
    }
    /// <p>An external ID to assign to the asset model. You can only set the external ID of the asset model if it wasn't set when it was created, or you're setting it to the exact same thing as when it was created.</p>
    pub fn get_asset_model_composite_model_external_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_model_composite_model_external_id
    }
    /// <p>A description for the composite model.</p>
    pub fn asset_model_composite_model_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_model_composite_model_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description for the composite model.</p>
    pub fn set_asset_model_composite_model_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_model_composite_model_description = input;
        self
    }
    /// <p>A description for the composite model.</p>
    pub fn get_asset_model_composite_model_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_model_composite_model_description
    }
    /// <p>A unique name for the composite model.</p>
    /// This field is required.
    pub fn asset_model_composite_model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_model_composite_model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique name for the composite model.</p>
    pub fn set_asset_model_composite_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_model_composite_model_name = input;
        self
    }
    /// <p>A unique name for the composite model.</p>
    pub fn get_asset_model_composite_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_model_composite_model_name
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Appends an item to `asset_model_composite_model_properties`.
    ///
    /// To override the contents of this collection use [`set_asset_model_composite_model_properties`](Self::set_asset_model_composite_model_properties).
    ///
    /// <p>The property definitions of the composite model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/custom-composite-models.html#inline-composite-models"> Inline custom composite models</a> in the <i>IoT SiteWise User Guide</i>.</p>
    /// <p>You can specify up to 200 properties per composite model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn asset_model_composite_model_properties(mut self, input: crate::types::AssetModelProperty) -> Self {
        let mut v = self.asset_model_composite_model_properties.unwrap_or_default();
        v.push(input);
        self.asset_model_composite_model_properties = ::std::option::Option::Some(v);
        self
    }
    /// <p>The property definitions of the composite model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/custom-composite-models.html#inline-composite-models"> Inline custom composite models</a> in the <i>IoT SiteWise User Guide</i>.</p>
    /// <p>You can specify up to 200 properties per composite model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn set_asset_model_composite_model_properties(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AssetModelProperty>>,
    ) -> Self {
        self.asset_model_composite_model_properties = input;
        self
    }
    /// <p>The property definitions of the composite model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/custom-composite-models.html#inline-composite-models"> Inline custom composite models</a> in the <i>IoT SiteWise User Guide</i>.</p>
    /// <p>You can specify up to 200 properties per composite model. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn get_asset_model_composite_model_properties(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AssetModelProperty>> {
        &self.asset_model_composite_model_properties
    }
    /// <p>The expected current entity tag (ETag) for the asset model’s latest or active version (specified using <code>matchForVersionType</code>). The update request is rejected if the tag does not match the latest or active version's current entity tag. See <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/opt-locking-for-model.html">Optimistic locking for asset model writes</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn if_match(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.if_match = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The expected current entity tag (ETag) for the asset model’s latest or active version (specified using <code>matchForVersionType</code>). The update request is rejected if the tag does not match the latest or active version's current entity tag. See <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/opt-locking-for-model.html">Optimistic locking for asset model writes</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn set_if_match(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.if_match = input;
        self
    }
    /// <p>The expected current entity tag (ETag) for the asset model’s latest or active version (specified using <code>matchForVersionType</code>). The update request is rejected if the tag does not match the latest or active version's current entity tag. See <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/opt-locking-for-model.html">Optimistic locking for asset model writes</a> in the <i>IoT SiteWise User Guide</i>.</p>
    pub fn get_if_match(&self) -> &::std::option::Option<::std::string::String> {
        &self.if_match
    }
    /// <p>Accepts <b>*</b> to reject the update request if an active version (specified using <code>matchForVersionType</code> as <code>ACTIVE</code>) already exists for the asset model.</p>
    pub fn if_none_match(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.if_none_match = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Accepts <b>*</b> to reject the update request if an active version (specified using <code>matchForVersionType</code> as <code>ACTIVE</code>) already exists for the asset model.</p>
    pub fn set_if_none_match(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.if_none_match = input;
        self
    }
    /// <p>Accepts <b>*</b> to reject the update request if an active version (specified using <code>matchForVersionType</code> as <code>ACTIVE</code>) already exists for the asset model.</p>
    pub fn get_if_none_match(&self) -> &::std::option::Option<::std::string::String> {
        &self.if_none_match
    }
    /// <p>Specifies the asset model version type (<code>LATEST</code> or <code>ACTIVE</code>) used in conjunction with <code>If-Match</code> or <code>If-None-Match</code> headers to determine the target ETag for the update operation.</p>
    pub fn match_for_version_type(mut self, input: crate::types::AssetModelVersionType) -> Self {
        self.match_for_version_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the asset model version type (<code>LATEST</code> or <code>ACTIVE</code>) used in conjunction with <code>If-Match</code> or <code>If-None-Match</code> headers to determine the target ETag for the update operation.</p>
    pub fn set_match_for_version_type(mut self, input: ::std::option::Option<crate::types::AssetModelVersionType>) -> Self {
        self.match_for_version_type = input;
        self
    }
    /// <p>Specifies the asset model version type (<code>LATEST</code> or <code>ACTIVE</code>) used in conjunction with <code>If-Match</code> or <code>If-None-Match</code> headers to determine the target ETag for the update operation.</p>
    pub fn get_match_for_version_type(&self) -> &::std::option::Option<crate::types::AssetModelVersionType> {
        &self.match_for_version_type
    }
    /// Consumes the builder and constructs a [`UpdateAssetModelCompositeModelInput`](crate::operation::update_asset_model_composite_model::UpdateAssetModelCompositeModelInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_asset_model_composite_model::UpdateAssetModelCompositeModelInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_asset_model_composite_model::UpdateAssetModelCompositeModelInput {
                asset_model_id: self.asset_model_id,
                asset_model_composite_model_id: self.asset_model_composite_model_id,
                asset_model_composite_model_external_id: self.asset_model_composite_model_external_id,
                asset_model_composite_model_description: self.asset_model_composite_model_description,
                asset_model_composite_model_name: self.asset_model_composite_model_name,
                client_token: self.client_token,
                asset_model_composite_model_properties: self.asset_model_composite_model_properties,
                if_match: self.if_match,
                if_none_match: self.if_none_match,
                match_for_version_type: self.match_for_version_type,
            },
        )
    }
}
