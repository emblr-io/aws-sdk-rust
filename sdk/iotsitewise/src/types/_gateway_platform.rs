// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains a gateway's platform information.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GatewayPlatform {
    /// <p>A gateway that runs on IoT Greengrass.</p>
    pub greengrass: ::std::option::Option<crate::types::Greengrass>,
    /// <p>A gateway that runs on IoT Greengrass V2.</p>
    pub greengrass_v2: ::std::option::Option<crate::types::GreengrassV2>,
    /// <p>A SiteWise Edge gateway that runs on a Siemens Industrial Edge Device.</p>
    pub siemens_ie: ::std::option::Option<crate::types::SiemensIe>,
}
impl GatewayPlatform {
    /// <p>A gateway that runs on IoT Greengrass.</p>
    pub fn greengrass(&self) -> ::std::option::Option<&crate::types::Greengrass> {
        self.greengrass.as_ref()
    }
    /// <p>A gateway that runs on IoT Greengrass V2.</p>
    pub fn greengrass_v2(&self) -> ::std::option::Option<&crate::types::GreengrassV2> {
        self.greengrass_v2.as_ref()
    }
    /// <p>A SiteWise Edge gateway that runs on a Siemens Industrial Edge Device.</p>
    pub fn siemens_ie(&self) -> ::std::option::Option<&crate::types::SiemensIe> {
        self.siemens_ie.as_ref()
    }
}
impl GatewayPlatform {
    /// Creates a new builder-style object to manufacture [`GatewayPlatform`](crate::types::GatewayPlatform).
    pub fn builder() -> crate::types::builders::GatewayPlatformBuilder {
        crate::types::builders::GatewayPlatformBuilder::default()
    }
}

/// A builder for [`GatewayPlatform`](crate::types::GatewayPlatform).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GatewayPlatformBuilder {
    pub(crate) greengrass: ::std::option::Option<crate::types::Greengrass>,
    pub(crate) greengrass_v2: ::std::option::Option<crate::types::GreengrassV2>,
    pub(crate) siemens_ie: ::std::option::Option<crate::types::SiemensIe>,
}
impl GatewayPlatformBuilder {
    /// <p>A gateway that runs on IoT Greengrass.</p>
    pub fn greengrass(mut self, input: crate::types::Greengrass) -> Self {
        self.greengrass = ::std::option::Option::Some(input);
        self
    }
    /// <p>A gateway that runs on IoT Greengrass.</p>
    pub fn set_greengrass(mut self, input: ::std::option::Option<crate::types::Greengrass>) -> Self {
        self.greengrass = input;
        self
    }
    /// <p>A gateway that runs on IoT Greengrass.</p>
    pub fn get_greengrass(&self) -> &::std::option::Option<crate::types::Greengrass> {
        &self.greengrass
    }
    /// <p>A gateway that runs on IoT Greengrass V2.</p>
    pub fn greengrass_v2(mut self, input: crate::types::GreengrassV2) -> Self {
        self.greengrass_v2 = ::std::option::Option::Some(input);
        self
    }
    /// <p>A gateway that runs on IoT Greengrass V2.</p>
    pub fn set_greengrass_v2(mut self, input: ::std::option::Option<crate::types::GreengrassV2>) -> Self {
        self.greengrass_v2 = input;
        self
    }
    /// <p>A gateway that runs on IoT Greengrass V2.</p>
    pub fn get_greengrass_v2(&self) -> &::std::option::Option<crate::types::GreengrassV2> {
        &self.greengrass_v2
    }
    /// <p>A SiteWise Edge gateway that runs on a Siemens Industrial Edge Device.</p>
    pub fn siemens_ie(mut self, input: crate::types::SiemensIe) -> Self {
        self.siemens_ie = ::std::option::Option::Some(input);
        self
    }
    /// <p>A SiteWise Edge gateway that runs on a Siemens Industrial Edge Device.</p>
    pub fn set_siemens_ie(mut self, input: ::std::option::Option<crate::types::SiemensIe>) -> Self {
        self.siemens_ie = input;
        self
    }
    /// <p>A SiteWise Edge gateway that runs on a Siemens Industrial Edge Device.</p>
    pub fn get_siemens_ie(&self) -> &::std::option::Option<crate::types::SiemensIe> {
        &self.siemens_ie
    }
    /// Consumes the builder and constructs a [`GatewayPlatform`](crate::types::GatewayPlatform).
    pub fn build(self) -> crate::types::GatewayPlatform {
        crate::types::GatewayPlatform {
            greengrass: self.greengrass,
            greengrass_v2: self.greengrass_v2,
            siemens_ie: self.siemens_ie,
        }
    }
}
