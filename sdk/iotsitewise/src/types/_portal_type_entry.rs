// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration entry associated with the specific portal type. The <code>portalTypeConfiguration</code> is a map of the <code>portalTypeKey</code> to the <code>PortalTypeEntry</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PortalTypeEntry {
    /// <p>The array of tools associated with the specified portal type. The possible values are <code>ASSISTANT</code> and <code>DASHBOARD</code>.</p>
    pub portal_tools: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PortalTypeEntry {
    /// <p>The array of tools associated with the specified portal type. The possible values are <code>ASSISTANT</code> and <code>DASHBOARD</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.portal_tools.is_none()`.
    pub fn portal_tools(&self) -> &[::std::string::String] {
        self.portal_tools.as_deref().unwrap_or_default()
    }
}
impl PortalTypeEntry {
    /// Creates a new builder-style object to manufacture [`PortalTypeEntry`](crate::types::PortalTypeEntry).
    pub fn builder() -> crate::types::builders::PortalTypeEntryBuilder {
        crate::types::builders::PortalTypeEntryBuilder::default()
    }
}

/// A builder for [`PortalTypeEntry`](crate::types::PortalTypeEntry).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PortalTypeEntryBuilder {
    pub(crate) portal_tools: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PortalTypeEntryBuilder {
    /// Appends an item to `portal_tools`.
    ///
    /// To override the contents of this collection use [`set_portal_tools`](Self::set_portal_tools).
    ///
    /// <p>The array of tools associated with the specified portal type. The possible values are <code>ASSISTANT</code> and <code>DASHBOARD</code>.</p>
    pub fn portal_tools(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.portal_tools.unwrap_or_default();
        v.push(input.into());
        self.portal_tools = ::std::option::Option::Some(v);
        self
    }
    /// <p>The array of tools associated with the specified portal type. The possible values are <code>ASSISTANT</code> and <code>DASHBOARD</code>.</p>
    pub fn set_portal_tools(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.portal_tools = input;
        self
    }
    /// <p>The array of tools associated with the specified portal type. The possible values are <code>ASSISTANT</code> and <code>DASHBOARD</code>.</p>
    pub fn get_portal_tools(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.portal_tools
    }
    /// Consumes the builder and constructs a [`PortalTypeEntry`](crate::types::PortalTypeEntry).
    pub fn build(self) -> crate::types::PortalTypeEntry {
        crate::types::PortalTypeEntry {
            portal_tools: self.portal_tools,
        }
    }
}
