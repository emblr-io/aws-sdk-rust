// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains an asset property value (of a single type only).</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Variant {
    /// <p>Asset property data of type string (sequence of characters). The allowed pattern: "^$|\[^\u0000-\u001F\u007F\]+". The max length is 1024.</p>
    pub string_value: ::std::option::Option<::std::string::String>,
    /// <p>Asset property data of type integer (whole number).</p>
    pub integer_value: ::std::option::Option<i32>,
    /// <p>Asset property data of type double (floating point number). The min value is -10^10. The max value is 10^10. Double.NaN is allowed.</p>
    pub double_value: ::std::option::Option<f64>,
    /// <p>Asset property data of type Boolean (true or false).</p>
    pub boolean_value: ::std::option::Option<bool>,
    /// <p>The type of null asset property data with BAD and UNCERTAIN qualities.</p>
    pub null_value: ::std::option::Option<crate::types::PropertyValueNullValue>,
}
impl Variant {
    /// <p>Asset property data of type string (sequence of characters). The allowed pattern: "^$|\[^\u0000-\u001F\u007F\]+". The max length is 1024.</p>
    pub fn string_value(&self) -> ::std::option::Option<&str> {
        self.string_value.as_deref()
    }
    /// <p>Asset property data of type integer (whole number).</p>
    pub fn integer_value(&self) -> ::std::option::Option<i32> {
        self.integer_value
    }
    /// <p>Asset property data of type double (floating point number). The min value is -10^10. The max value is 10^10. Double.NaN is allowed.</p>
    pub fn double_value(&self) -> ::std::option::Option<f64> {
        self.double_value
    }
    /// <p>Asset property data of type Boolean (true or false).</p>
    pub fn boolean_value(&self) -> ::std::option::Option<bool> {
        self.boolean_value
    }
    /// <p>The type of null asset property data with BAD and UNCERTAIN qualities.</p>
    pub fn null_value(&self) -> ::std::option::Option<&crate::types::PropertyValueNullValue> {
        self.null_value.as_ref()
    }
}
impl Variant {
    /// Creates a new builder-style object to manufacture [`Variant`](crate::types::Variant).
    pub fn builder() -> crate::types::builders::VariantBuilder {
        crate::types::builders::VariantBuilder::default()
    }
}

/// A builder for [`Variant`](crate::types::Variant).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VariantBuilder {
    pub(crate) string_value: ::std::option::Option<::std::string::String>,
    pub(crate) integer_value: ::std::option::Option<i32>,
    pub(crate) double_value: ::std::option::Option<f64>,
    pub(crate) boolean_value: ::std::option::Option<bool>,
    pub(crate) null_value: ::std::option::Option<crate::types::PropertyValueNullValue>,
}
impl VariantBuilder {
    /// <p>Asset property data of type string (sequence of characters). The allowed pattern: "^$|\[^\u0000-\u001F\u007F\]+". The max length is 1024.</p>
    pub fn string_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.string_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Asset property data of type string (sequence of characters). The allowed pattern: "^$|\[^\u0000-\u001F\u007F\]+". The max length is 1024.</p>
    pub fn set_string_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.string_value = input;
        self
    }
    /// <p>Asset property data of type string (sequence of characters). The allowed pattern: "^$|\[^\u0000-\u001F\u007F\]+". The max length is 1024.</p>
    pub fn get_string_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.string_value
    }
    /// <p>Asset property data of type integer (whole number).</p>
    pub fn integer_value(mut self, input: i32) -> Self {
        self.integer_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>Asset property data of type integer (whole number).</p>
    pub fn set_integer_value(mut self, input: ::std::option::Option<i32>) -> Self {
        self.integer_value = input;
        self
    }
    /// <p>Asset property data of type integer (whole number).</p>
    pub fn get_integer_value(&self) -> &::std::option::Option<i32> {
        &self.integer_value
    }
    /// <p>Asset property data of type double (floating point number). The min value is -10^10. The max value is 10^10. Double.NaN is allowed.</p>
    pub fn double_value(mut self, input: f64) -> Self {
        self.double_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>Asset property data of type double (floating point number). The min value is -10^10. The max value is 10^10. Double.NaN is allowed.</p>
    pub fn set_double_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.double_value = input;
        self
    }
    /// <p>Asset property data of type double (floating point number). The min value is -10^10. The max value is 10^10. Double.NaN is allowed.</p>
    pub fn get_double_value(&self) -> &::std::option::Option<f64> {
        &self.double_value
    }
    /// <p>Asset property data of type Boolean (true or false).</p>
    pub fn boolean_value(mut self, input: bool) -> Self {
        self.boolean_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>Asset property data of type Boolean (true or false).</p>
    pub fn set_boolean_value(mut self, input: ::std::option::Option<bool>) -> Self {
        self.boolean_value = input;
        self
    }
    /// <p>Asset property data of type Boolean (true or false).</p>
    pub fn get_boolean_value(&self) -> &::std::option::Option<bool> {
        &self.boolean_value
    }
    /// <p>The type of null asset property data with BAD and UNCERTAIN qualities.</p>
    pub fn null_value(mut self, input: crate::types::PropertyValueNullValue) -> Self {
        self.null_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of null asset property data with BAD and UNCERTAIN qualities.</p>
    pub fn set_null_value(mut self, input: ::std::option::Option<crate::types::PropertyValueNullValue>) -> Self {
        self.null_value = input;
        self
    }
    /// <p>The type of null asset property data with BAD and UNCERTAIN qualities.</p>
    pub fn get_null_value(&self) -> &::std::option::Option<crate::types::PropertyValueNullValue> {
        &self.null_value
    }
    /// Consumes the builder and constructs a [`Variant`](crate::types::Variant).
    pub fn build(self) -> crate::types::Variant {
        crate::types::Variant {
            string_value: self.string_value,
            integer_value: self.integer_value,
            double_value: self.double_value,
            boolean_value: self.boolean_value,
            null_value: self.null_value,
        }
    }
}
