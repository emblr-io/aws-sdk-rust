// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains text content to which the SiteWise Assistant refers to, and generate the final response. It also contains information about the source.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Citation {
    /// <p>Contains information about the data source.</p>
    pub reference: ::std::option::Option<crate::types::Reference>,
    /// <p>Contains the cited text from the data source.</p>
    pub content: ::std::option::Option<crate::types::Content>,
}
impl Citation {
    /// <p>Contains information about the data source.</p>
    pub fn reference(&self) -> ::std::option::Option<&crate::types::Reference> {
        self.reference.as_ref()
    }
    /// <p>Contains the cited text from the data source.</p>
    pub fn content(&self) -> ::std::option::Option<&crate::types::Content> {
        self.content.as_ref()
    }
}
impl Citation {
    /// Creates a new builder-style object to manufacture [`Citation`](crate::types::Citation).
    pub fn builder() -> crate::types::builders::CitationBuilder {
        crate::types::builders::CitationBuilder::default()
    }
}

/// A builder for [`Citation`](crate::types::Citation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CitationBuilder {
    pub(crate) reference: ::std::option::Option<crate::types::Reference>,
    pub(crate) content: ::std::option::Option<crate::types::Content>,
}
impl CitationBuilder {
    /// <p>Contains information about the data source.</p>
    pub fn reference(mut self, input: crate::types::Reference) -> Self {
        self.reference = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the data source.</p>
    pub fn set_reference(mut self, input: ::std::option::Option<crate::types::Reference>) -> Self {
        self.reference = input;
        self
    }
    /// <p>Contains information about the data source.</p>
    pub fn get_reference(&self) -> &::std::option::Option<crate::types::Reference> {
        &self.reference
    }
    /// <p>Contains the cited text from the data source.</p>
    pub fn content(mut self, input: crate::types::Content) -> Self {
        self.content = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the cited text from the data source.</p>
    pub fn set_content(mut self, input: ::std::option::Option<crate::types::Content>) -> Self {
        self.content = input;
        self
    }
    /// <p>Contains the cited text from the data source.</p>
    pub fn get_content(&self) -> &::std::option::Option<crate::types::Content> {
        &self.content
    }
    /// Consumes the builder and constructs a [`Citation`](crate::types::Citation).
    pub fn build(self) -> crate::types::Citation {
        crate::types::Citation {
            reference: self.reference,
            content: self.content,
        }
    }
}
