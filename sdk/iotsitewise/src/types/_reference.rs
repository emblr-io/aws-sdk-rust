// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the reference information.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Reference {
    /// <p>Contains the dataset reference information.</p>
    pub dataset: ::std::option::Option<crate::types::DataSetReference>,
}
impl Reference {
    /// <p>Contains the dataset reference information.</p>
    pub fn dataset(&self) -> ::std::option::Option<&crate::types::DataSetReference> {
        self.dataset.as_ref()
    }
}
impl Reference {
    /// Creates a new builder-style object to manufacture [`Reference`](crate::types::Reference).
    pub fn builder() -> crate::types::builders::ReferenceBuilder {
        crate::types::builders::ReferenceBuilder::default()
    }
}

/// A builder for [`Reference`](crate::types::Reference).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ReferenceBuilder {
    pub(crate) dataset: ::std::option::Option<crate::types::DataSetReference>,
}
impl ReferenceBuilder {
    /// <p>Contains the dataset reference information.</p>
    pub fn dataset(mut self, input: crate::types::DataSetReference) -> Self {
        self.dataset = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the dataset reference information.</p>
    pub fn set_dataset(mut self, input: ::std::option::Option<crate::types::DataSetReference>) -> Self {
        self.dataset = input;
        self
    }
    /// <p>Contains the dataset reference information.</p>
    pub fn get_dataset(&self) -> &::std::option::Option<crate::types::DataSetReference> {
        &self.dataset
    }
    /// Consumes the builder and constructs a [`Reference`](crate::types::Reference).
    pub fn build(self) -> crate::types::Reference {
        crate::types::Reference { dataset: self.dataset }
    }
}
