// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The data source for the dataset.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DatasetSource {
    /// <p>The type of data source for the dataset.</p>
    pub source_type: crate::types::DatasetSourceType,
    /// <p>The format of the dataset source associated with the dataset.</p>
    pub source_format: crate::types::DatasetSourceFormat,
    /// <p>The details of the dataset source associated with the dataset.</p>
    pub source_detail: ::std::option::Option<crate::types::SourceDetail>,
}
impl DatasetSource {
    /// <p>The type of data source for the dataset.</p>
    pub fn source_type(&self) -> &crate::types::DatasetSourceType {
        &self.source_type
    }
    /// <p>The format of the dataset source associated with the dataset.</p>
    pub fn source_format(&self) -> &crate::types::DatasetSourceFormat {
        &self.source_format
    }
    /// <p>The details of the dataset source associated with the dataset.</p>
    pub fn source_detail(&self) -> ::std::option::Option<&crate::types::SourceDetail> {
        self.source_detail.as_ref()
    }
}
impl DatasetSource {
    /// Creates a new builder-style object to manufacture [`DatasetSource`](crate::types::DatasetSource).
    pub fn builder() -> crate::types::builders::DatasetSourceBuilder {
        crate::types::builders::DatasetSourceBuilder::default()
    }
}

/// A builder for [`DatasetSource`](crate::types::DatasetSource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DatasetSourceBuilder {
    pub(crate) source_type: ::std::option::Option<crate::types::DatasetSourceType>,
    pub(crate) source_format: ::std::option::Option<crate::types::DatasetSourceFormat>,
    pub(crate) source_detail: ::std::option::Option<crate::types::SourceDetail>,
}
impl DatasetSourceBuilder {
    /// <p>The type of data source for the dataset.</p>
    /// This field is required.
    pub fn source_type(mut self, input: crate::types::DatasetSourceType) -> Self {
        self.source_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of data source for the dataset.</p>
    pub fn set_source_type(mut self, input: ::std::option::Option<crate::types::DatasetSourceType>) -> Self {
        self.source_type = input;
        self
    }
    /// <p>The type of data source for the dataset.</p>
    pub fn get_source_type(&self) -> &::std::option::Option<crate::types::DatasetSourceType> {
        &self.source_type
    }
    /// <p>The format of the dataset source associated with the dataset.</p>
    /// This field is required.
    pub fn source_format(mut self, input: crate::types::DatasetSourceFormat) -> Self {
        self.source_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format of the dataset source associated with the dataset.</p>
    pub fn set_source_format(mut self, input: ::std::option::Option<crate::types::DatasetSourceFormat>) -> Self {
        self.source_format = input;
        self
    }
    /// <p>The format of the dataset source associated with the dataset.</p>
    pub fn get_source_format(&self) -> &::std::option::Option<crate::types::DatasetSourceFormat> {
        &self.source_format
    }
    /// <p>The details of the dataset source associated with the dataset.</p>
    pub fn source_detail(mut self, input: crate::types::SourceDetail) -> Self {
        self.source_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the dataset source associated with the dataset.</p>
    pub fn set_source_detail(mut self, input: ::std::option::Option<crate::types::SourceDetail>) -> Self {
        self.source_detail = input;
        self
    }
    /// <p>The details of the dataset source associated with the dataset.</p>
    pub fn get_source_detail(&self) -> &::std::option::Option<crate::types::SourceDetail> {
        &self.source_detail
    }
    /// Consumes the builder and constructs a [`DatasetSource`](crate::types::DatasetSource).
    /// This method will fail if any of the following fields are not set:
    /// - [`source_type`](crate::types::builders::DatasetSourceBuilder::source_type)
    /// - [`source_format`](crate::types::builders::DatasetSourceBuilder::source_format)
    pub fn build(self) -> ::std::result::Result<crate::types::DatasetSource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DatasetSource {
            source_type: self.source_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_type",
                    "source_type was not specified but it is required when building DatasetSource",
                )
            })?,
            source_format: self.source_format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_format",
                    "source_format was not specified but it is required when building DatasetSource",
                )
            })?,
            source_detail: self.source_detail,
        })
    }
}
