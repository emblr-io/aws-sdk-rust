// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the cited text from the data source.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Content {
    /// <p>The cited text from the data source.</p>
    pub text: ::std::option::Option<::std::string::String>,
}
impl Content {
    /// <p>The cited text from the data source.</p>
    pub fn text(&self) -> ::std::option::Option<&str> {
        self.text.as_deref()
    }
}
impl Content {
    /// Creates a new builder-style object to manufacture [`Content`](crate::types::Content).
    pub fn builder() -> crate::types::builders::ContentBuilder {
        crate::types::builders::ContentBuilder::default()
    }
}

/// A builder for [`Content`](crate::types::Content).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContentBuilder {
    pub(crate) text: ::std::option::Option<::std::string::String>,
}
impl ContentBuilder {
    /// <p>The cited text from the data source.</p>
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cited text from the data source.</p>
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>The cited text from the data source.</p>
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }
    /// Consumes the builder and constructs a [`Content`](crate::types::Content).
    pub fn build(self) -> crate::types::Content {
        crate::types::Content { text: self.text }
    }
}
