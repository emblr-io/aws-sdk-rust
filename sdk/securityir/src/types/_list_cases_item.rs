// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListCasesItem {
    /// <p></p>
    pub case_id: ::std::string::String,
    /// <p></p>
    pub last_updated_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p></p>
    pub title: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub case_arn: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub engagement_type: ::std::option::Option<crate::types::EngagementType>,
    /// <p></p>
    pub case_status: ::std::option::Option<crate::types::CaseStatus>,
    /// <p></p>
    pub created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p></p>
    pub closed_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p></p>
    pub resolver_type: ::std::option::Option<crate::types::ResolverType>,
    /// <p></p>
    pub pending_action: ::std::option::Option<crate::types::PendingAction>,
}
impl ListCasesItem {
    /// <p></p>
    pub fn case_id(&self) -> &str {
        use std::ops::Deref;
        self.case_id.deref()
    }
    /// <p></p>
    pub fn last_updated_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_date.as_ref()
    }
    /// <p></p>
    pub fn title(&self) -> ::std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p></p>
    pub fn case_arn(&self) -> ::std::option::Option<&str> {
        self.case_arn.as_deref()
    }
    /// <p></p>
    pub fn engagement_type(&self) -> ::std::option::Option<&crate::types::EngagementType> {
        self.engagement_type.as_ref()
    }
    /// <p></p>
    pub fn case_status(&self) -> ::std::option::Option<&crate::types::CaseStatus> {
        self.case_status.as_ref()
    }
    /// <p></p>
    pub fn created_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_date.as_ref()
    }
    /// <p></p>
    pub fn closed_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.closed_date.as_ref()
    }
    /// <p></p>
    pub fn resolver_type(&self) -> ::std::option::Option<&crate::types::ResolverType> {
        self.resolver_type.as_ref()
    }
    /// <p></p>
    pub fn pending_action(&self) -> ::std::option::Option<&crate::types::PendingAction> {
        self.pending_action.as_ref()
    }
}
impl ::std::fmt::Debug for ListCasesItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListCasesItem");
        formatter.field("case_id", &self.case_id);
        formatter.field("last_updated_date", &self.last_updated_date);
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("case_arn", &self.case_arn);
        formatter.field("engagement_type", &self.engagement_type);
        formatter.field("case_status", &self.case_status);
        formatter.field("created_date", &self.created_date);
        formatter.field("closed_date", &self.closed_date);
        formatter.field("resolver_type", &self.resolver_type);
        formatter.field("pending_action", &self.pending_action);
        formatter.finish()
    }
}
impl ListCasesItem {
    /// Creates a new builder-style object to manufacture [`ListCasesItem`](crate::types::ListCasesItem).
    pub fn builder() -> crate::types::builders::ListCasesItemBuilder {
        crate::types::builders::ListCasesItemBuilder::default()
    }
}

/// A builder for [`ListCasesItem`](crate::types::ListCasesItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ListCasesItemBuilder {
    pub(crate) case_id: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) case_arn: ::std::option::Option<::std::string::String>,
    pub(crate) engagement_type: ::std::option::Option<crate::types::EngagementType>,
    pub(crate) case_status: ::std::option::Option<crate::types::CaseStatus>,
    pub(crate) created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) closed_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) resolver_type: ::std::option::Option<crate::types::ResolverType>,
    pub(crate) pending_action: ::std::option::Option<crate::types::PendingAction>,
}
impl ListCasesItemBuilder {
    /// <p></p>
    /// This field is required.
    pub fn case_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.case_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_case_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.case_id = input;
        self
    }
    /// <p></p>
    pub fn get_case_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.case_id
    }
    /// <p></p>
    pub fn last_updated_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_date = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_last_updated_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_date = input;
        self
    }
    /// <p></p>
    pub fn get_last_updated_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_date
    }
    /// <p></p>
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p></p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p></p>
    pub fn case_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.case_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_case_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.case_arn = input;
        self
    }
    /// <p></p>
    pub fn get_case_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.case_arn
    }
    /// <p></p>
    pub fn engagement_type(mut self, input: crate::types::EngagementType) -> Self {
        self.engagement_type = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_engagement_type(mut self, input: ::std::option::Option<crate::types::EngagementType>) -> Self {
        self.engagement_type = input;
        self
    }
    /// <p></p>
    pub fn get_engagement_type(&self) -> &::std::option::Option<crate::types::EngagementType> {
        &self.engagement_type
    }
    /// <p></p>
    pub fn case_status(mut self, input: crate::types::CaseStatus) -> Self {
        self.case_status = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_case_status(mut self, input: ::std::option::Option<crate::types::CaseStatus>) -> Self {
        self.case_status = input;
        self
    }
    /// <p></p>
    pub fn get_case_status(&self) -> &::std::option::Option<crate::types::CaseStatus> {
        &self.case_status
    }
    /// <p></p>
    pub fn created_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_date = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_created_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_date = input;
        self
    }
    /// <p></p>
    pub fn get_created_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_date
    }
    /// <p></p>
    pub fn closed_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.closed_date = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_closed_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.closed_date = input;
        self
    }
    /// <p></p>
    pub fn get_closed_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.closed_date
    }
    /// <p></p>
    pub fn resolver_type(mut self, input: crate::types::ResolverType) -> Self {
        self.resolver_type = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_resolver_type(mut self, input: ::std::option::Option<crate::types::ResolverType>) -> Self {
        self.resolver_type = input;
        self
    }
    /// <p></p>
    pub fn get_resolver_type(&self) -> &::std::option::Option<crate::types::ResolverType> {
        &self.resolver_type
    }
    /// <p></p>
    pub fn pending_action(mut self, input: crate::types::PendingAction) -> Self {
        self.pending_action = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_pending_action(mut self, input: ::std::option::Option<crate::types::PendingAction>) -> Self {
        self.pending_action = input;
        self
    }
    /// <p></p>
    pub fn get_pending_action(&self) -> &::std::option::Option<crate::types::PendingAction> {
        &self.pending_action
    }
    /// Consumes the builder and constructs a [`ListCasesItem`](crate::types::ListCasesItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`case_id`](crate::types::builders::ListCasesItemBuilder::case_id)
    pub fn build(self) -> ::std::result::Result<crate::types::ListCasesItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ListCasesItem {
            case_id: self.case_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "case_id",
                    "case_id was not specified but it is required when building ListCasesItem",
                )
            })?,
            last_updated_date: self.last_updated_date,
            title: self.title,
            case_arn: self.case_arn,
            engagement_type: self.engagement_type,
            case_status: self.case_status,
            created_date: self.created_date,
            closed_date: self.closed_date,
            resolver_type: self.resolver_type,
            pending_action: self.pending_action,
        })
    }
}
impl ::std::fmt::Debug for ListCasesItemBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListCasesItemBuilder");
        formatter.field("case_id", &self.case_id);
        formatter.field("last_updated_date", &self.last_updated_date);
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("case_arn", &self.case_arn);
        formatter.field("engagement_type", &self.engagement_type);
        formatter.field("case_status", &self.case_status);
        formatter.field("created_date", &self.created_date);
        formatter.field("closed_date", &self.closed_date);
        formatter.field("resolver_type", &self.resolver_type);
        formatter.field("pending_action", &self.pending_action);
        formatter.finish()
    }
}
