// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CaseEditItem {
    /// <p></p>
    pub event_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p></p>
    pub principal: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub action: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub message: ::std::option::Option<::std::string::String>,
}
impl CaseEditItem {
    /// <p></p>
    pub fn event_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.event_timestamp.as_ref()
    }
    /// <p></p>
    pub fn principal(&self) -> ::std::option::Option<&str> {
        self.principal.as_deref()
    }
    /// <p></p>
    pub fn action(&self) -> ::std::option::Option<&str> {
        self.action.as_deref()
    }
    /// <p></p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl CaseEditItem {
    /// Creates a new builder-style object to manufacture [`CaseEditItem`](crate::types::CaseEditItem).
    pub fn builder() -> crate::types::builders::CaseEditItemBuilder {
        crate::types::builders::CaseEditItemBuilder::default()
    }
}

/// A builder for [`CaseEditItem`](crate::types::CaseEditItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CaseEditItemBuilder {
    pub(crate) event_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) principal: ::std::option::Option<::std::string::String>,
    pub(crate) action: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl CaseEditItemBuilder {
    /// <p></p>
    pub fn event_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.event_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_event_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.event_timestamp = input;
        self
    }
    /// <p></p>
    pub fn get_event_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.event_timestamp
    }
    /// <p></p>
    pub fn principal(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_principal(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal = input;
        self
    }
    /// <p></p>
    pub fn get_principal(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal
    }
    /// <p></p>
    pub fn action(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_action(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action = input;
        self
    }
    /// <p></p>
    pub fn get_action(&self) -> &::std::option::Option<::std::string::String> {
        &self.action
    }
    /// <p></p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p></p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Consumes the builder and constructs a [`CaseEditItem`](crate::types::CaseEditItem).
    pub fn build(self) -> crate::types::CaseEditItem {
        crate::types::CaseEditItem {
            event_timestamp: self.event_timestamp,
            principal: self.principal,
            action: self.action,
            message: self.message,
        }
    }
}
