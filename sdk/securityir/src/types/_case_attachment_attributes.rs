// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CaseAttachmentAttributes {
    /// <p></p>
    pub attachment_id: ::std::string::String,
    /// <p></p>
    pub file_name: ::std::string::String,
    /// <p></p>
    pub attachment_status: crate::types::CaseAttachmentStatus,
    /// <p></p>
    pub creator: ::std::string::String,
    /// <p></p>
    pub created_date: ::aws_smithy_types::DateTime,
}
impl CaseAttachmentAttributes {
    /// <p></p>
    pub fn attachment_id(&self) -> &str {
        use std::ops::Deref;
        self.attachment_id.deref()
    }
    /// <p></p>
    pub fn file_name(&self) -> &str {
        use std::ops::Deref;
        self.file_name.deref()
    }
    /// <p></p>
    pub fn attachment_status(&self) -> &crate::types::CaseAttachmentStatus {
        &self.attachment_status
    }
    /// <p></p>
    pub fn creator(&self) -> &str {
        use std::ops::Deref;
        self.creator.deref()
    }
    /// <p></p>
    pub fn created_date(&self) -> &::aws_smithy_types::DateTime {
        &self.created_date
    }
}
impl ::std::fmt::Debug for CaseAttachmentAttributes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CaseAttachmentAttributes");
        formatter.field("attachment_id", &self.attachment_id);
        formatter.field("file_name", &"*** Sensitive Data Redacted ***");
        formatter.field("attachment_status", &self.attachment_status);
        formatter.field("creator", &self.creator);
        formatter.field("created_date", &self.created_date);
        formatter.finish()
    }
}
impl CaseAttachmentAttributes {
    /// Creates a new builder-style object to manufacture [`CaseAttachmentAttributes`](crate::types::CaseAttachmentAttributes).
    pub fn builder() -> crate::types::builders::CaseAttachmentAttributesBuilder {
        crate::types::builders::CaseAttachmentAttributesBuilder::default()
    }
}

/// A builder for [`CaseAttachmentAttributes`](crate::types::CaseAttachmentAttributes).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CaseAttachmentAttributesBuilder {
    pub(crate) attachment_id: ::std::option::Option<::std::string::String>,
    pub(crate) file_name: ::std::option::Option<::std::string::String>,
    pub(crate) attachment_status: ::std::option::Option<crate::types::CaseAttachmentStatus>,
    pub(crate) creator: ::std::option::Option<::std::string::String>,
    pub(crate) created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl CaseAttachmentAttributesBuilder {
    /// <p></p>
    /// This field is required.
    pub fn attachment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attachment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_attachment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attachment_id = input;
        self
    }
    /// <p></p>
    pub fn get_attachment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.attachment_id
    }
    /// <p></p>
    /// This field is required.
    pub fn file_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_file_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_name = input;
        self
    }
    /// <p></p>
    pub fn get_file_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_name
    }
    /// <p></p>
    /// This field is required.
    pub fn attachment_status(mut self, input: crate::types::CaseAttachmentStatus) -> Self {
        self.attachment_status = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_attachment_status(mut self, input: ::std::option::Option<crate::types::CaseAttachmentStatus>) -> Self {
        self.attachment_status = input;
        self
    }
    /// <p></p>
    pub fn get_attachment_status(&self) -> &::std::option::Option<crate::types::CaseAttachmentStatus> {
        &self.attachment_status
    }
    /// <p></p>
    /// This field is required.
    pub fn creator(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creator = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_creator(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creator = input;
        self
    }
    /// <p></p>
    pub fn get_creator(&self) -> &::std::option::Option<::std::string::String> {
        &self.creator
    }
    /// <p></p>
    /// This field is required.
    pub fn created_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_date = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_created_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_date = input;
        self
    }
    /// <p></p>
    pub fn get_created_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_date
    }
    /// Consumes the builder and constructs a [`CaseAttachmentAttributes`](crate::types::CaseAttachmentAttributes).
    /// This method will fail if any of the following fields are not set:
    /// - [`attachment_id`](crate::types::builders::CaseAttachmentAttributesBuilder::attachment_id)
    /// - [`file_name`](crate::types::builders::CaseAttachmentAttributesBuilder::file_name)
    /// - [`attachment_status`](crate::types::builders::CaseAttachmentAttributesBuilder::attachment_status)
    /// - [`creator`](crate::types::builders::CaseAttachmentAttributesBuilder::creator)
    /// - [`created_date`](crate::types::builders::CaseAttachmentAttributesBuilder::created_date)
    pub fn build(self) -> ::std::result::Result<crate::types::CaseAttachmentAttributes, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CaseAttachmentAttributes {
            attachment_id: self.attachment_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "attachment_id",
                    "attachment_id was not specified but it is required when building CaseAttachmentAttributes",
                )
            })?,
            file_name: self.file_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "file_name",
                    "file_name was not specified but it is required when building CaseAttachmentAttributes",
                )
            })?,
            attachment_status: self.attachment_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "attachment_status",
                    "attachment_status was not specified but it is required when building CaseAttachmentAttributes",
                )
            })?,
            creator: self.creator.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creator",
                    "creator was not specified but it is required when building CaseAttachmentAttributes",
                )
            })?,
            created_date: self.created_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_date",
                    "created_date was not specified but it is required when building CaseAttachmentAttributes",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for CaseAttachmentAttributesBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CaseAttachmentAttributesBuilder");
        formatter.field("attachment_id", &self.attachment_id);
        formatter.field("file_name", &"*** Sensitive Data Redacted ***");
        formatter.field("attachment_status", &self.attachment_status);
        formatter.field("creator", &self.creator);
        formatter.field("created_date", &self.created_date);
        formatter.finish()
    }
}
