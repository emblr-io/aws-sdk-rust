// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListCommentsItem {
    /// <p></p>
    pub comment_id: ::std::string::String,
    /// <p></p>
    pub created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p></p>
    pub last_updated_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p></p>
    pub creator: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub last_updated_by: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub body: ::std::option::Option<::std::string::String>,
}
impl ListCommentsItem {
    /// <p></p>
    pub fn comment_id(&self) -> &str {
        use std::ops::Deref;
        self.comment_id.deref()
    }
    /// <p></p>
    pub fn created_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_date.as_ref()
    }
    /// <p></p>
    pub fn last_updated_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_date.as_ref()
    }
    /// <p></p>
    pub fn creator(&self) -> ::std::option::Option<&str> {
        self.creator.as_deref()
    }
    /// <p></p>
    pub fn last_updated_by(&self) -> ::std::option::Option<&str> {
        self.last_updated_by.as_deref()
    }
    /// <p></p>
    pub fn body(&self) -> ::std::option::Option<&str> {
        self.body.as_deref()
    }
}
impl ::std::fmt::Debug for ListCommentsItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListCommentsItem");
        formatter.field("comment_id", &self.comment_id);
        formatter.field("created_date", &self.created_date);
        formatter.field("last_updated_date", &self.last_updated_date);
        formatter.field("creator", &self.creator);
        formatter.field("last_updated_by", &self.last_updated_by);
        formatter.field("body", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ListCommentsItem {
    /// Creates a new builder-style object to manufacture [`ListCommentsItem`](crate::types::ListCommentsItem).
    pub fn builder() -> crate::types::builders::ListCommentsItemBuilder {
        crate::types::builders::ListCommentsItemBuilder::default()
    }
}

/// A builder for [`ListCommentsItem`](crate::types::ListCommentsItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ListCommentsItemBuilder {
    pub(crate) comment_id: ::std::option::Option<::std::string::String>,
    pub(crate) created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) creator: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_by: ::std::option::Option<::std::string::String>,
    pub(crate) body: ::std::option::Option<::std::string::String>,
}
impl ListCommentsItemBuilder {
    /// <p></p>
    /// This field is required.
    pub fn comment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.comment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_comment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.comment_id = input;
        self
    }
    /// <p></p>
    pub fn get_comment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.comment_id
    }
    /// <p></p>
    pub fn created_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_date = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_created_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_date = input;
        self
    }
    /// <p></p>
    pub fn get_created_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_date
    }
    /// <p></p>
    pub fn last_updated_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_date = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_last_updated_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_date = input;
        self
    }
    /// <p></p>
    pub fn get_last_updated_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_date
    }
    /// <p></p>
    pub fn creator(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creator = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_creator(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creator = input;
        self
    }
    /// <p></p>
    pub fn get_creator(&self) -> &::std::option::Option<::std::string::String> {
        &self.creator
    }
    /// <p></p>
    pub fn last_updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_last_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_updated_by = input;
        self
    }
    /// <p></p>
    pub fn get_last_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_updated_by
    }
    /// <p></p>
    pub fn body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// <p></p>
    pub fn get_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.body
    }
    /// Consumes the builder and constructs a [`ListCommentsItem`](crate::types::ListCommentsItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`comment_id`](crate::types::builders::ListCommentsItemBuilder::comment_id)
    pub fn build(self) -> ::std::result::Result<crate::types::ListCommentsItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ListCommentsItem {
            comment_id: self.comment_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "comment_id",
                    "comment_id was not specified but it is required when building ListCommentsItem",
                )
            })?,
            created_date: self.created_date,
            last_updated_date: self.last_updated_date,
            creator: self.creator,
            last_updated_by: self.last_updated_by,
            body: self.body,
        })
    }
}
impl ::std::fmt::Debug for ListCommentsItemBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListCommentsItemBuilder");
        formatter.field("comment_id", &self.comment_id);
        formatter.field("created_date", &self.created_date);
        formatter.field("last_updated_date", &self.last_updated_date);
        formatter.field("creator", &self.creator);
        formatter.field("last_updated_by", &self.last_updated_by);
        formatter.field("body", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
