// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateCaseInput {
    /// <p>Required element used in combination with CreateCase.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>Required element used in combination with CreateCase to identify the resolver type. Available resolvers include self-supported | aws-supported.</p>
    pub resolver_type: ::std::option::Option<crate::types::ResolverType>,
    /// <p>Required element used in combination with CreateCase to provide a title for the new case.</p>
    pub title: ::std::option::Option<::std::string::String>,
    /// <p>Required element used in combination with CreateCase to provide a description for the new case.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Required element used in combination with CreateCase to provide an engagement type for the new cases. Available engagement types include Security Incident | Investigation</p>
    pub engagement_type: ::std::option::Option<crate::types::EngagementType>,
    /// <p>Required element used in combination with CreateCase to provide an initial start date for the unauthorized activity.</p>
    pub reported_incident_start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Required element used in combination with CreateCase to provide a list of impacted accounts.</p>
    pub impacted_accounts: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Required element used in combination with CreateCase to provide a list of entities to receive notifications for case updates.</p>
    pub watchers: ::std::option::Option<::std::vec::Vec<crate::types::Watcher>>,
    /// <p>An optional element used in combination with CreateCase to provide a list of suspicious internet protocol addresses associated with unauthorized activity.</p>
    pub threat_actor_ip_addresses: ::std::option::Option<::std::vec::Vec<crate::types::ThreatActorIp>>,
    /// <p>An optional element used in combination with CreateCase to provide a list of services impacted.</p>
    pub impacted_services: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>An optional element used in combination with CreateCase to provide a list of impacted regions.</p>
    pub impacted_aws_regions: ::std::option::Option<::std::vec::Vec<crate::types::ImpactedAwsRegion>>,
    /// <p>An optional element used in combination with CreateCase to add customer specified tags to a case.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateCaseInput {
    /// <p>Required element used in combination with CreateCase.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Required element used in combination with CreateCase to identify the resolver type. Available resolvers include self-supported | aws-supported.</p>
    pub fn resolver_type(&self) -> ::std::option::Option<&crate::types::ResolverType> {
        self.resolver_type.as_ref()
    }
    /// <p>Required element used in combination with CreateCase to provide a title for the new case.</p>
    pub fn title(&self) -> ::std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>Required element used in combination with CreateCase to provide a description for the new case.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Required element used in combination with CreateCase to provide an engagement type for the new cases. Available engagement types include Security Incident | Investigation</p>
    pub fn engagement_type(&self) -> ::std::option::Option<&crate::types::EngagementType> {
        self.engagement_type.as_ref()
    }
    /// <p>Required element used in combination with CreateCase to provide an initial start date for the unauthorized activity.</p>
    pub fn reported_incident_start_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.reported_incident_start_date.as_ref()
    }
    /// <p>Required element used in combination with CreateCase to provide a list of impacted accounts.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.impacted_accounts.is_none()`.
    pub fn impacted_accounts(&self) -> &[::std::string::String] {
        self.impacted_accounts.as_deref().unwrap_or_default()
    }
    /// <p>Required element used in combination with CreateCase to provide a list of entities to receive notifications for case updates.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.watchers.is_none()`.
    pub fn watchers(&self) -> &[crate::types::Watcher] {
        self.watchers.as_deref().unwrap_or_default()
    }
    /// <p>An optional element used in combination with CreateCase to provide a list of suspicious internet protocol addresses associated with unauthorized activity.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.threat_actor_ip_addresses.is_none()`.
    pub fn threat_actor_ip_addresses(&self) -> &[crate::types::ThreatActorIp] {
        self.threat_actor_ip_addresses.as_deref().unwrap_or_default()
    }
    /// <p>An optional element used in combination with CreateCase to provide a list of services impacted.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.impacted_services.is_none()`.
    pub fn impacted_services(&self) -> &[::std::string::String] {
        self.impacted_services.as_deref().unwrap_or_default()
    }
    /// <p>An optional element used in combination with CreateCase to provide a list of impacted regions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.impacted_aws_regions.is_none()`.
    pub fn impacted_aws_regions(&self) -> &[crate::types::ImpactedAwsRegion] {
        self.impacted_aws_regions.as_deref().unwrap_or_default()
    }
    /// <p>An optional element used in combination with CreateCase to add customer specified tags to a case.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for CreateCaseInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateCaseInput");
        formatter.field("client_token", &self.client_token);
        formatter.field("resolver_type", &self.resolver_type);
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("engagement_type", &self.engagement_type);
        formatter.field("reported_incident_start_date", &self.reported_incident_start_date);
        formatter.field("impacted_accounts", &self.impacted_accounts);
        formatter.field("watchers", &self.watchers);
        formatter.field("threat_actor_ip_addresses", &self.threat_actor_ip_addresses);
        formatter.field("impacted_services", &self.impacted_services);
        formatter.field("impacted_aws_regions", &self.impacted_aws_regions);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl CreateCaseInput {
    /// Creates a new builder-style object to manufacture [`CreateCaseInput`](crate::operation::create_case::CreateCaseInput).
    pub fn builder() -> crate::operation::create_case::builders::CreateCaseInputBuilder {
        crate::operation::create_case::builders::CreateCaseInputBuilder::default()
    }
}

/// A builder for [`CreateCaseInput`](crate::operation::create_case::CreateCaseInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateCaseInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) resolver_type: ::std::option::Option<crate::types::ResolverType>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) engagement_type: ::std::option::Option<crate::types::EngagementType>,
    pub(crate) reported_incident_start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) impacted_accounts: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) watchers: ::std::option::Option<::std::vec::Vec<crate::types::Watcher>>,
    pub(crate) threat_actor_ip_addresses: ::std::option::Option<::std::vec::Vec<crate::types::ThreatActorIp>>,
    pub(crate) impacted_services: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) impacted_aws_regions: ::std::option::Option<::std::vec::Vec<crate::types::ImpactedAwsRegion>>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateCaseInputBuilder {
    /// <p>Required element used in combination with CreateCase.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Required element used in combination with CreateCase.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Required element used in combination with CreateCase.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>Required element used in combination with CreateCase to identify the resolver type. Available resolvers include self-supported | aws-supported.</p>
    /// This field is required.
    pub fn resolver_type(mut self, input: crate::types::ResolverType) -> Self {
        self.resolver_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Required element used in combination with CreateCase to identify the resolver type. Available resolvers include self-supported | aws-supported.</p>
    pub fn set_resolver_type(mut self, input: ::std::option::Option<crate::types::ResolverType>) -> Self {
        self.resolver_type = input;
        self
    }
    /// <p>Required element used in combination with CreateCase to identify the resolver type. Available resolvers include self-supported | aws-supported.</p>
    pub fn get_resolver_type(&self) -> &::std::option::Option<crate::types::ResolverType> {
        &self.resolver_type
    }
    /// <p>Required element used in combination with CreateCase to provide a title for the new case.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Required element used in combination with CreateCase to provide a title for the new case.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>Required element used in combination with CreateCase to provide a title for the new case.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>Required element used in combination with CreateCase to provide a description for the new case.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Required element used in combination with CreateCase to provide a description for the new case.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Required element used in combination with CreateCase to provide a description for the new case.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Required element used in combination with CreateCase to provide an engagement type for the new cases. Available engagement types include Security Incident | Investigation</p>
    /// This field is required.
    pub fn engagement_type(mut self, input: crate::types::EngagementType) -> Self {
        self.engagement_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Required element used in combination with CreateCase to provide an engagement type for the new cases. Available engagement types include Security Incident | Investigation</p>
    pub fn set_engagement_type(mut self, input: ::std::option::Option<crate::types::EngagementType>) -> Self {
        self.engagement_type = input;
        self
    }
    /// <p>Required element used in combination with CreateCase to provide an engagement type for the new cases. Available engagement types include Security Incident | Investigation</p>
    pub fn get_engagement_type(&self) -> &::std::option::Option<crate::types::EngagementType> {
        &self.engagement_type
    }
    /// <p>Required element used in combination with CreateCase to provide an initial start date for the unauthorized activity.</p>
    /// This field is required.
    pub fn reported_incident_start_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.reported_incident_start_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Required element used in combination with CreateCase to provide an initial start date for the unauthorized activity.</p>
    pub fn set_reported_incident_start_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.reported_incident_start_date = input;
        self
    }
    /// <p>Required element used in combination with CreateCase to provide an initial start date for the unauthorized activity.</p>
    pub fn get_reported_incident_start_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.reported_incident_start_date
    }
    /// Appends an item to `impacted_accounts`.
    ///
    /// To override the contents of this collection use [`set_impacted_accounts`](Self::set_impacted_accounts).
    ///
    /// <p>Required element used in combination with CreateCase to provide a list of impacted accounts.</p>
    pub fn impacted_accounts(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.impacted_accounts.unwrap_or_default();
        v.push(input.into());
        self.impacted_accounts = ::std::option::Option::Some(v);
        self
    }
    /// <p>Required element used in combination with CreateCase to provide a list of impacted accounts.</p>
    pub fn set_impacted_accounts(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.impacted_accounts = input;
        self
    }
    /// <p>Required element used in combination with CreateCase to provide a list of impacted accounts.</p>
    pub fn get_impacted_accounts(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.impacted_accounts
    }
    /// Appends an item to `watchers`.
    ///
    /// To override the contents of this collection use [`set_watchers`](Self::set_watchers).
    ///
    /// <p>Required element used in combination with CreateCase to provide a list of entities to receive notifications for case updates.</p>
    pub fn watchers(mut self, input: crate::types::Watcher) -> Self {
        let mut v = self.watchers.unwrap_or_default();
        v.push(input);
        self.watchers = ::std::option::Option::Some(v);
        self
    }
    /// <p>Required element used in combination with CreateCase to provide a list of entities to receive notifications for case updates.</p>
    pub fn set_watchers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Watcher>>) -> Self {
        self.watchers = input;
        self
    }
    /// <p>Required element used in combination with CreateCase to provide a list of entities to receive notifications for case updates.</p>
    pub fn get_watchers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Watcher>> {
        &self.watchers
    }
    /// Appends an item to `threat_actor_ip_addresses`.
    ///
    /// To override the contents of this collection use [`set_threat_actor_ip_addresses`](Self::set_threat_actor_ip_addresses).
    ///
    /// <p>An optional element used in combination with CreateCase to provide a list of suspicious internet protocol addresses associated with unauthorized activity.</p>
    pub fn threat_actor_ip_addresses(mut self, input: crate::types::ThreatActorIp) -> Self {
        let mut v = self.threat_actor_ip_addresses.unwrap_or_default();
        v.push(input);
        self.threat_actor_ip_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>An optional element used in combination with CreateCase to provide a list of suspicious internet protocol addresses associated with unauthorized activity.</p>
    pub fn set_threat_actor_ip_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ThreatActorIp>>) -> Self {
        self.threat_actor_ip_addresses = input;
        self
    }
    /// <p>An optional element used in combination with CreateCase to provide a list of suspicious internet protocol addresses associated with unauthorized activity.</p>
    pub fn get_threat_actor_ip_addresses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ThreatActorIp>> {
        &self.threat_actor_ip_addresses
    }
    /// Appends an item to `impacted_services`.
    ///
    /// To override the contents of this collection use [`set_impacted_services`](Self::set_impacted_services).
    ///
    /// <p>An optional element used in combination with CreateCase to provide a list of services impacted.</p>
    pub fn impacted_services(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.impacted_services.unwrap_or_default();
        v.push(input.into());
        self.impacted_services = ::std::option::Option::Some(v);
        self
    }
    /// <p>An optional element used in combination with CreateCase to provide a list of services impacted.</p>
    pub fn set_impacted_services(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.impacted_services = input;
        self
    }
    /// <p>An optional element used in combination with CreateCase to provide a list of services impacted.</p>
    pub fn get_impacted_services(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.impacted_services
    }
    /// Appends an item to `impacted_aws_regions`.
    ///
    /// To override the contents of this collection use [`set_impacted_aws_regions`](Self::set_impacted_aws_regions).
    ///
    /// <p>An optional element used in combination with CreateCase to provide a list of impacted regions.</p>
    pub fn impacted_aws_regions(mut self, input: crate::types::ImpactedAwsRegion) -> Self {
        let mut v = self.impacted_aws_regions.unwrap_or_default();
        v.push(input);
        self.impacted_aws_regions = ::std::option::Option::Some(v);
        self
    }
    /// <p>An optional element used in combination with CreateCase to provide a list of impacted regions.</p>
    pub fn set_impacted_aws_regions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ImpactedAwsRegion>>) -> Self {
        self.impacted_aws_regions = input;
        self
    }
    /// <p>An optional element used in combination with CreateCase to provide a list of impacted regions.</p>
    pub fn get_impacted_aws_regions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ImpactedAwsRegion>> {
        &self.impacted_aws_regions
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An optional element used in combination with CreateCase to add customer specified tags to a case.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>An optional element used in combination with CreateCase to add customer specified tags to a case.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>An optional element used in combination with CreateCase to add customer specified tags to a case.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateCaseInput`](crate::operation::create_case::CreateCaseInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::create_case::CreateCaseInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_case::CreateCaseInput {
            client_token: self.client_token,
            resolver_type: self.resolver_type,
            title: self.title,
            description: self.description,
            engagement_type: self.engagement_type,
            reported_incident_start_date: self.reported_incident_start_date,
            impacted_accounts: self.impacted_accounts,
            watchers: self.watchers,
            threat_actor_ip_addresses: self.threat_actor_ip_addresses,
            impacted_services: self.impacted_services,
            impacted_aws_regions: self.impacted_aws_regions,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for CreateCaseInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateCaseInputBuilder");
        formatter.field("client_token", &self.client_token);
        formatter.field("resolver_type", &self.resolver_type);
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("engagement_type", &self.engagement_type);
        formatter.field("reported_incident_start_date", &self.reported_incident_start_date);
        formatter.field("impacted_accounts", &self.impacted_accounts);
        formatter.field("watchers", &self.watchers);
        formatter.field("threat_actor_ip_addresses", &self.threat_actor_ip_addresses);
        formatter.field("impacted_services", &self.impacted_services);
        formatter.field("impacted_aws_regions", &self.impacted_aws_regions);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
