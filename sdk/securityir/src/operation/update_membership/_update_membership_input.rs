// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateMembershipInput {
    /// <p>Required element for UpdateMembership to identify the membership to update.</p>
    pub membership_id: ::std::option::Option<::std::string::String>,
    /// <p>Optional element for UpdateMembership to update the membership name.</p>
    pub membership_name: ::std::option::Option<::std::string::String>,
    /// <p>Optional element for UpdateMembership to update the membership name.</p>
    pub incident_response_team: ::std::option::Option<::std::vec::Vec<crate::types::IncidentResponder>>,
    /// <p>Optional element for UpdateMembership to enable or disable opt-in features for the service.</p>
    pub opt_in_features: ::std::option::Option<::std::vec::Vec<crate::types::OptInFeature>>,
}
impl UpdateMembershipInput {
    /// <p>Required element for UpdateMembership to identify the membership to update.</p>
    pub fn membership_id(&self) -> ::std::option::Option<&str> {
        self.membership_id.as_deref()
    }
    /// <p>Optional element for UpdateMembership to update the membership name.</p>
    pub fn membership_name(&self) -> ::std::option::Option<&str> {
        self.membership_name.as_deref()
    }
    /// <p>Optional element for UpdateMembership to update the membership name.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.incident_response_team.is_none()`.
    pub fn incident_response_team(&self) -> &[crate::types::IncidentResponder] {
        self.incident_response_team.as_deref().unwrap_or_default()
    }
    /// <p>Optional element for UpdateMembership to enable or disable opt-in features for the service.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.opt_in_features.is_none()`.
    pub fn opt_in_features(&self) -> &[crate::types::OptInFeature] {
        self.opt_in_features.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for UpdateMembershipInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateMembershipInput");
        formatter.field("membership_id", &self.membership_id);
        formatter.field("membership_name", &"*** Sensitive Data Redacted ***");
        formatter.field("incident_response_team", &self.incident_response_team);
        formatter.field("opt_in_features", &self.opt_in_features);
        formatter.finish()
    }
}
impl UpdateMembershipInput {
    /// Creates a new builder-style object to manufacture [`UpdateMembershipInput`](crate::operation::update_membership::UpdateMembershipInput).
    pub fn builder() -> crate::operation::update_membership::builders::UpdateMembershipInputBuilder {
        crate::operation::update_membership::builders::UpdateMembershipInputBuilder::default()
    }
}

/// A builder for [`UpdateMembershipInput`](crate::operation::update_membership::UpdateMembershipInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateMembershipInputBuilder {
    pub(crate) membership_id: ::std::option::Option<::std::string::String>,
    pub(crate) membership_name: ::std::option::Option<::std::string::String>,
    pub(crate) incident_response_team: ::std::option::Option<::std::vec::Vec<crate::types::IncidentResponder>>,
    pub(crate) opt_in_features: ::std::option::Option<::std::vec::Vec<crate::types::OptInFeature>>,
}
impl UpdateMembershipInputBuilder {
    /// <p>Required element for UpdateMembership to identify the membership to update.</p>
    /// This field is required.
    pub fn membership_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Required element for UpdateMembership to identify the membership to update.</p>
    pub fn set_membership_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_id = input;
        self
    }
    /// <p>Required element for UpdateMembership to identify the membership to update.</p>
    pub fn get_membership_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_id
    }
    /// <p>Optional element for UpdateMembership to update the membership name.</p>
    pub fn membership_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional element for UpdateMembership to update the membership name.</p>
    pub fn set_membership_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_name = input;
        self
    }
    /// <p>Optional element for UpdateMembership to update the membership name.</p>
    pub fn get_membership_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_name
    }
    /// Appends an item to `incident_response_team`.
    ///
    /// To override the contents of this collection use [`set_incident_response_team`](Self::set_incident_response_team).
    ///
    /// <p>Optional element for UpdateMembership to update the membership name.</p>
    pub fn incident_response_team(mut self, input: crate::types::IncidentResponder) -> Self {
        let mut v = self.incident_response_team.unwrap_or_default();
        v.push(input);
        self.incident_response_team = ::std::option::Option::Some(v);
        self
    }
    /// <p>Optional element for UpdateMembership to update the membership name.</p>
    pub fn set_incident_response_team(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IncidentResponder>>) -> Self {
        self.incident_response_team = input;
        self
    }
    /// <p>Optional element for UpdateMembership to update the membership name.</p>
    pub fn get_incident_response_team(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IncidentResponder>> {
        &self.incident_response_team
    }
    /// Appends an item to `opt_in_features`.
    ///
    /// To override the contents of this collection use [`set_opt_in_features`](Self::set_opt_in_features).
    ///
    /// <p>Optional element for UpdateMembership to enable or disable opt-in features for the service.</p>
    pub fn opt_in_features(mut self, input: crate::types::OptInFeature) -> Self {
        let mut v = self.opt_in_features.unwrap_or_default();
        v.push(input);
        self.opt_in_features = ::std::option::Option::Some(v);
        self
    }
    /// <p>Optional element for UpdateMembership to enable or disable opt-in features for the service.</p>
    pub fn set_opt_in_features(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OptInFeature>>) -> Self {
        self.opt_in_features = input;
        self
    }
    /// <p>Optional element for UpdateMembership to enable or disable opt-in features for the service.</p>
    pub fn get_opt_in_features(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OptInFeature>> {
        &self.opt_in_features
    }
    /// Consumes the builder and constructs a [`UpdateMembershipInput`](crate::operation::update_membership::UpdateMembershipInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_membership::UpdateMembershipInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_membership::UpdateMembershipInput {
            membership_id: self.membership_id,
            membership_name: self.membership_name,
            incident_response_team: self.incident_response_team,
            opt_in_features: self.opt_in_features,
        })
    }
}
impl ::std::fmt::Debug for UpdateMembershipInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateMembershipInputBuilder");
        formatter.field("membership_id", &self.membership_id);
        formatter.field("membership_name", &"*** Sensitive Data Redacted ***");
        formatter.field("incident_response_team", &self.incident_response_team);
        formatter.field("opt_in_features", &self.opt_in_features);
        formatter.finish()
    }
}
