// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateCaseCommentInput {
    /// <p>Required element used in combination with CreateCaseComment to specify a case ID.</p>
    pub case_id: ::std::option::Option<::std::string::String>,
    /// <p>An optional element used in combination with CreateCaseComment.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>Required element used in combination with CreateCaseComment to add content for the new comment.</p>
    pub body: ::std::option::Option<::std::string::String>,
}
impl CreateCaseCommentInput {
    /// <p>Required element used in combination with CreateCaseComment to specify a case ID.</p>
    pub fn case_id(&self) -> ::std::option::Option<&str> {
        self.case_id.as_deref()
    }
    /// <p>An optional element used in combination with CreateCaseComment.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Required element used in combination with CreateCaseComment to add content for the new comment.</p>
    pub fn body(&self) -> ::std::option::Option<&str> {
        self.body.as_deref()
    }
}
impl ::std::fmt::Debug for CreateCaseCommentInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateCaseCommentInput");
        formatter.field("case_id", &self.case_id);
        formatter.field("client_token", &self.client_token);
        formatter.field("body", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CreateCaseCommentInput {
    /// Creates a new builder-style object to manufacture [`CreateCaseCommentInput`](crate::operation::create_case_comment::CreateCaseCommentInput).
    pub fn builder() -> crate::operation::create_case_comment::builders::CreateCaseCommentInputBuilder {
        crate::operation::create_case_comment::builders::CreateCaseCommentInputBuilder::default()
    }
}

/// A builder for [`CreateCaseCommentInput`](crate::operation::create_case_comment::CreateCaseCommentInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateCaseCommentInputBuilder {
    pub(crate) case_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) body: ::std::option::Option<::std::string::String>,
}
impl CreateCaseCommentInputBuilder {
    /// <p>Required element used in combination with CreateCaseComment to specify a case ID.</p>
    /// This field is required.
    pub fn case_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.case_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Required element used in combination with CreateCaseComment to specify a case ID.</p>
    pub fn set_case_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.case_id = input;
        self
    }
    /// <p>Required element used in combination with CreateCaseComment to specify a case ID.</p>
    pub fn get_case_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.case_id
    }
    /// <p>An optional element used in combination with CreateCaseComment.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional element used in combination with CreateCaseComment.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>An optional element used in combination with CreateCaseComment.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>Required element used in combination with CreateCaseComment to add content for the new comment.</p>
    /// This field is required.
    pub fn body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Required element used in combination with CreateCaseComment to add content for the new comment.</p>
    pub fn set_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// <p>Required element used in combination with CreateCaseComment to add content for the new comment.</p>
    pub fn get_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.body
    }
    /// Consumes the builder and constructs a [`CreateCaseCommentInput`](crate::operation::create_case_comment::CreateCaseCommentInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_case_comment::CreateCaseCommentInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_case_comment::CreateCaseCommentInput {
            case_id: self.case_id,
            client_token: self.client_token,
            body: self.body,
        })
    }
}
impl ::std::fmt::Debug for CreateCaseCommentInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateCaseCommentInputBuilder");
        formatter.field("case_id", &self.case_id);
        formatter.field("client_token", &self.client_token);
        formatter.field("body", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
