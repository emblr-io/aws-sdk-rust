// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateMembershipInput {
    /// <p>An optional element used in combination with CreateMembership.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>Required element use in combination with CreateMembership to create a name for the membership.</p>
    pub membership_name: ::std::option::Option<::std::string::String>,
    /// <p>Required element use in combination with CreateMembership to add customer incident response team members and trusted partners to the membership.</p>
    pub incident_response_team: ::std::option::Option<::std::vec::Vec<crate::types::IncidentResponder>>,
    /// <p>Optional element to enable the monitoring and investigation opt-in features for the service.</p>
    pub opt_in_features: ::std::option::Option<::std::vec::Vec<crate::types::OptInFeature>>,
    /// <p>Optional element for customer configured tags.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateMembershipInput {
    /// <p>An optional element used in combination with CreateMembership.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Required element use in combination with CreateMembership to create a name for the membership.</p>
    pub fn membership_name(&self) -> ::std::option::Option<&str> {
        self.membership_name.as_deref()
    }
    /// <p>Required element use in combination with CreateMembership to add customer incident response team members and trusted partners to the membership.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.incident_response_team.is_none()`.
    pub fn incident_response_team(&self) -> &[crate::types::IncidentResponder] {
        self.incident_response_team.as_deref().unwrap_or_default()
    }
    /// <p>Optional element to enable the monitoring and investigation opt-in features for the service.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.opt_in_features.is_none()`.
    pub fn opt_in_features(&self) -> &[crate::types::OptInFeature] {
        self.opt_in_features.as_deref().unwrap_or_default()
    }
    /// <p>Optional element for customer configured tags.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for CreateMembershipInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateMembershipInput");
        formatter.field("client_token", &self.client_token);
        formatter.field("membership_name", &"*** Sensitive Data Redacted ***");
        formatter.field("incident_response_team", &self.incident_response_team);
        formatter.field("opt_in_features", &self.opt_in_features);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl CreateMembershipInput {
    /// Creates a new builder-style object to manufacture [`CreateMembershipInput`](crate::operation::create_membership::CreateMembershipInput).
    pub fn builder() -> crate::operation::create_membership::builders::CreateMembershipInputBuilder {
        crate::operation::create_membership::builders::CreateMembershipInputBuilder::default()
    }
}

/// A builder for [`CreateMembershipInput`](crate::operation::create_membership::CreateMembershipInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateMembershipInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) membership_name: ::std::option::Option<::std::string::String>,
    pub(crate) incident_response_team: ::std::option::Option<::std::vec::Vec<crate::types::IncidentResponder>>,
    pub(crate) opt_in_features: ::std::option::Option<::std::vec::Vec<crate::types::OptInFeature>>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateMembershipInputBuilder {
    /// <p>An optional element used in combination with CreateMembership.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional element used in combination with CreateMembership.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>An optional element used in combination with CreateMembership.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>Required element use in combination with CreateMembership to create a name for the membership.</p>
    /// This field is required.
    pub fn membership_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Required element use in combination with CreateMembership to create a name for the membership.</p>
    pub fn set_membership_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_name = input;
        self
    }
    /// <p>Required element use in combination with CreateMembership to create a name for the membership.</p>
    pub fn get_membership_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_name
    }
    /// Appends an item to `incident_response_team`.
    ///
    /// To override the contents of this collection use [`set_incident_response_team`](Self::set_incident_response_team).
    ///
    /// <p>Required element use in combination with CreateMembership to add customer incident response team members and trusted partners to the membership.</p>
    pub fn incident_response_team(mut self, input: crate::types::IncidentResponder) -> Self {
        let mut v = self.incident_response_team.unwrap_or_default();
        v.push(input);
        self.incident_response_team = ::std::option::Option::Some(v);
        self
    }
    /// <p>Required element use in combination with CreateMembership to add customer incident response team members and trusted partners to the membership.</p>
    pub fn set_incident_response_team(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IncidentResponder>>) -> Self {
        self.incident_response_team = input;
        self
    }
    /// <p>Required element use in combination with CreateMembership to add customer incident response team members and trusted partners to the membership.</p>
    pub fn get_incident_response_team(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IncidentResponder>> {
        &self.incident_response_team
    }
    /// Appends an item to `opt_in_features`.
    ///
    /// To override the contents of this collection use [`set_opt_in_features`](Self::set_opt_in_features).
    ///
    /// <p>Optional element to enable the monitoring and investigation opt-in features for the service.</p>
    pub fn opt_in_features(mut self, input: crate::types::OptInFeature) -> Self {
        let mut v = self.opt_in_features.unwrap_or_default();
        v.push(input);
        self.opt_in_features = ::std::option::Option::Some(v);
        self
    }
    /// <p>Optional element to enable the monitoring and investigation opt-in features for the service.</p>
    pub fn set_opt_in_features(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OptInFeature>>) -> Self {
        self.opt_in_features = input;
        self
    }
    /// <p>Optional element to enable the monitoring and investigation opt-in features for the service.</p>
    pub fn get_opt_in_features(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OptInFeature>> {
        &self.opt_in_features
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Optional element for customer configured tags.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Optional element for customer configured tags.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Optional element for customer configured tags.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateMembershipInput`](crate::operation::create_membership::CreateMembershipInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_membership::CreateMembershipInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_membership::CreateMembershipInput {
            client_token: self.client_token,
            membership_name: self.membership_name,
            incident_response_team: self.incident_response_team,
            opt_in_features: self.opt_in_features,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for CreateMembershipInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateMembershipInputBuilder");
        formatter.field("client_token", &self.client_token);
        formatter.field("membership_name", &"*** Sensitive Data Redacted ***");
        formatter.field("incident_response_team", &self.incident_response_team);
        formatter.field("opt_in_features", &self.opt_in_features);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
