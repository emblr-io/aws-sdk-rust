// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateResolverTypeInput {
    /// <p>Required element for UpdateResolverType to identify the case to update.</p>
    pub case_id: ::std::option::Option<::std::string::String>,
    /// <p>Required element for UpdateResolverType to identify the new resolver.</p>
    pub resolver_type: ::std::option::Option<crate::types::ResolverType>,
}
impl UpdateResolverTypeInput {
    /// <p>Required element for UpdateResolverType to identify the case to update.</p>
    pub fn case_id(&self) -> ::std::option::Option<&str> {
        self.case_id.as_deref()
    }
    /// <p>Required element for UpdateResolverType to identify the new resolver.</p>
    pub fn resolver_type(&self) -> ::std::option::Option<&crate::types::ResolverType> {
        self.resolver_type.as_ref()
    }
}
impl UpdateResolverTypeInput {
    /// Creates a new builder-style object to manufacture [`UpdateResolverTypeInput`](crate::operation::update_resolver_type::UpdateResolverTypeInput).
    pub fn builder() -> crate::operation::update_resolver_type::builders::UpdateResolverTypeInputBuilder {
        crate::operation::update_resolver_type::builders::UpdateResolverTypeInputBuilder::default()
    }
}

/// A builder for [`UpdateResolverTypeInput`](crate::operation::update_resolver_type::UpdateResolverTypeInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateResolverTypeInputBuilder {
    pub(crate) case_id: ::std::option::Option<::std::string::String>,
    pub(crate) resolver_type: ::std::option::Option<crate::types::ResolverType>,
}
impl UpdateResolverTypeInputBuilder {
    /// <p>Required element for UpdateResolverType to identify the case to update.</p>
    /// This field is required.
    pub fn case_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.case_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Required element for UpdateResolverType to identify the case to update.</p>
    pub fn set_case_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.case_id = input;
        self
    }
    /// <p>Required element for UpdateResolverType to identify the case to update.</p>
    pub fn get_case_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.case_id
    }
    /// <p>Required element for UpdateResolverType to identify the new resolver.</p>
    /// This field is required.
    pub fn resolver_type(mut self, input: crate::types::ResolverType) -> Self {
        self.resolver_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Required element for UpdateResolverType to identify the new resolver.</p>
    pub fn set_resolver_type(mut self, input: ::std::option::Option<crate::types::ResolverType>) -> Self {
        self.resolver_type = input;
        self
    }
    /// <p>Required element for UpdateResolverType to identify the new resolver.</p>
    pub fn get_resolver_type(&self) -> &::std::option::Option<crate::types::ResolverType> {
        &self.resolver_type
    }
    /// Consumes the builder and constructs a [`UpdateResolverTypeInput`](crate::operation::update_resolver_type::UpdateResolverTypeInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_resolver_type::UpdateResolverTypeInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_resolver_type::UpdateResolverTypeInput {
            case_id: self.case_id,
            resolver_type: self.resolver_type,
        })
    }
}
