// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetCaseOutput {
    /// <p>Response element for GetCase that provides the case title.</p>
    pub title: ::std::option::Option<::std::string::String>,
    /// <p>Response element for GetCase that provides the case ARN</p>
    pub case_arn: ::std::option::Option<::std::string::String>,
    /// <p>Response element for GetCase that provides contents of the case description.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Response element for GetCase that provides the case status. Options for statuses include <code>Submitted | Detection and Analysis | Eradication, Containment and Recovery | Post-Incident Activities | Closed </code></p>
    pub case_status: ::std::option::Option<crate::types::CaseStatus>,
    /// <p>Response element for GetCase that provides the engagement type. Options for engagement type include <code>Active Security Event | Investigations</code></p>
    pub engagement_type: ::std::option::Option<crate::types::EngagementType>,
    /// <p>Response element for GetCase that provides the customer provided incident start date.</p>
    pub reported_incident_start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Response element for GetCase that provides the actual incident start date as identified by data analysis during the investigation.</p>
    pub actual_incident_start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Response element for GetCase that provides the impacted regions.</p>
    pub impacted_aws_regions: ::std::option::Option<::std::vec::Vec<crate::types::ImpactedAwsRegion>>,
    /// <p>Response element for GetCase that provides a list of suspicious IP addresses associated with unauthorized activity.</p>
    pub threat_actor_ip_addresses: ::std::option::Option<::std::vec::Vec<crate::types::ThreatActorIp>>,
    /// <p>Response element for GetCase that provides identifies the case is waiting on customer input.</p>
    pub pending_action: ::std::option::Option<crate::types::PendingAction>,
    /// <p>Response element for GetCase that provides a list of impacted accounts.</p>
    pub impacted_accounts: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Response element for GetCase that provides a list of Watchers added to the case.</p>
    pub watchers: ::std::option::Option<::std::vec::Vec<crate::types::Watcher>>,
    /// <p>Response element for GetCase that provides the date the case was created.</p>
    pub created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Response element for GetCase that provides the date a case was last modified.</p>
    pub last_updated_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Response element for GetCase that provides the summary code for why a case was closed.</p>
    pub closure_code: ::std::option::Option<crate::types::ClosureCode>,
    /// <p>Response element for GetCase that provides the current resolver types. Options include <code> self-supported | AWS-supported</code>.</p>
    pub resolver_type: ::std::option::Option<crate::types::ResolverType>,
    /// <p>Response element for GetCase that provides a list of impacted services.</p>
    pub impacted_services: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Response element for GetCase that provides a list of current case attachments.</p>
    pub case_attachments: ::std::option::Option<::std::vec::Vec<crate::types::CaseAttachmentAttributes>>,
    /// <p>Response element for GetCase that provides the date a specified case was closed.</p>
    pub closed_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetCaseOutput {
    /// <p>Response element for GetCase that provides the case title.</p>
    pub fn title(&self) -> ::std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>Response element for GetCase that provides the case ARN</p>
    pub fn case_arn(&self) -> ::std::option::Option<&str> {
        self.case_arn.as_deref()
    }
    /// <p>Response element for GetCase that provides contents of the case description.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Response element for GetCase that provides the case status. Options for statuses include <code>Submitted | Detection and Analysis | Eradication, Containment and Recovery | Post-Incident Activities | Closed </code></p>
    pub fn case_status(&self) -> ::std::option::Option<&crate::types::CaseStatus> {
        self.case_status.as_ref()
    }
    /// <p>Response element for GetCase that provides the engagement type. Options for engagement type include <code>Active Security Event | Investigations</code></p>
    pub fn engagement_type(&self) -> ::std::option::Option<&crate::types::EngagementType> {
        self.engagement_type.as_ref()
    }
    /// <p>Response element for GetCase that provides the customer provided incident start date.</p>
    pub fn reported_incident_start_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.reported_incident_start_date.as_ref()
    }
    /// <p>Response element for GetCase that provides the actual incident start date as identified by data analysis during the investigation.</p>
    pub fn actual_incident_start_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.actual_incident_start_date.as_ref()
    }
    /// <p>Response element for GetCase that provides the impacted regions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.impacted_aws_regions.is_none()`.
    pub fn impacted_aws_regions(&self) -> &[crate::types::ImpactedAwsRegion] {
        self.impacted_aws_regions.as_deref().unwrap_or_default()
    }
    /// <p>Response element for GetCase that provides a list of suspicious IP addresses associated with unauthorized activity.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.threat_actor_ip_addresses.is_none()`.
    pub fn threat_actor_ip_addresses(&self) -> &[crate::types::ThreatActorIp] {
        self.threat_actor_ip_addresses.as_deref().unwrap_or_default()
    }
    /// <p>Response element for GetCase that provides identifies the case is waiting on customer input.</p>
    pub fn pending_action(&self) -> ::std::option::Option<&crate::types::PendingAction> {
        self.pending_action.as_ref()
    }
    /// <p>Response element for GetCase that provides a list of impacted accounts.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.impacted_accounts.is_none()`.
    pub fn impacted_accounts(&self) -> &[::std::string::String] {
        self.impacted_accounts.as_deref().unwrap_or_default()
    }
    /// <p>Response element for GetCase that provides a list of Watchers added to the case.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.watchers.is_none()`.
    pub fn watchers(&self) -> &[crate::types::Watcher] {
        self.watchers.as_deref().unwrap_or_default()
    }
    /// <p>Response element for GetCase that provides the date the case was created.</p>
    pub fn created_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_date.as_ref()
    }
    /// <p>Response element for GetCase that provides the date a case was last modified.</p>
    pub fn last_updated_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_date.as_ref()
    }
    /// <p>Response element for GetCase that provides the summary code for why a case was closed.</p>
    pub fn closure_code(&self) -> ::std::option::Option<&crate::types::ClosureCode> {
        self.closure_code.as_ref()
    }
    /// <p>Response element for GetCase that provides the current resolver types. Options include <code> self-supported | AWS-supported</code>.</p>
    pub fn resolver_type(&self) -> ::std::option::Option<&crate::types::ResolverType> {
        self.resolver_type.as_ref()
    }
    /// <p>Response element for GetCase that provides a list of impacted services.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.impacted_services.is_none()`.
    pub fn impacted_services(&self) -> &[::std::string::String] {
        self.impacted_services.as_deref().unwrap_or_default()
    }
    /// <p>Response element for GetCase that provides a list of current case attachments.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.case_attachments.is_none()`.
    pub fn case_attachments(&self) -> &[crate::types::CaseAttachmentAttributes] {
        self.case_attachments.as_deref().unwrap_or_default()
    }
    /// <p>Response element for GetCase that provides the date a specified case was closed.</p>
    pub fn closed_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.closed_date.as_ref()
    }
}
impl ::std::fmt::Debug for GetCaseOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetCaseOutput");
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("case_arn", &self.case_arn);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("case_status", &self.case_status);
        formatter.field("engagement_type", &self.engagement_type);
        formatter.field("reported_incident_start_date", &self.reported_incident_start_date);
        formatter.field("actual_incident_start_date", &self.actual_incident_start_date);
        formatter.field("impacted_aws_regions", &self.impacted_aws_regions);
        formatter.field("threat_actor_ip_addresses", &self.threat_actor_ip_addresses);
        formatter.field("pending_action", &self.pending_action);
        formatter.field("impacted_accounts", &self.impacted_accounts);
        formatter.field("watchers", &self.watchers);
        formatter.field("created_date", &self.created_date);
        formatter.field("last_updated_date", &self.last_updated_date);
        formatter.field("closure_code", &self.closure_code);
        formatter.field("resolver_type", &self.resolver_type);
        formatter.field("impacted_services", &self.impacted_services);
        formatter.field("case_attachments", &self.case_attachments);
        formatter.field("closed_date", &self.closed_date);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetCaseOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetCaseOutput {
    /// Creates a new builder-style object to manufacture [`GetCaseOutput`](crate::operation::get_case::GetCaseOutput).
    pub fn builder() -> crate::operation::get_case::builders::GetCaseOutputBuilder {
        crate::operation::get_case::builders::GetCaseOutputBuilder::default()
    }
}

/// A builder for [`GetCaseOutput`](crate::operation::get_case::GetCaseOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetCaseOutputBuilder {
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) case_arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) case_status: ::std::option::Option<crate::types::CaseStatus>,
    pub(crate) engagement_type: ::std::option::Option<crate::types::EngagementType>,
    pub(crate) reported_incident_start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) actual_incident_start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) impacted_aws_regions: ::std::option::Option<::std::vec::Vec<crate::types::ImpactedAwsRegion>>,
    pub(crate) threat_actor_ip_addresses: ::std::option::Option<::std::vec::Vec<crate::types::ThreatActorIp>>,
    pub(crate) pending_action: ::std::option::Option<crate::types::PendingAction>,
    pub(crate) impacted_accounts: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) watchers: ::std::option::Option<::std::vec::Vec<crate::types::Watcher>>,
    pub(crate) created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) closure_code: ::std::option::Option<crate::types::ClosureCode>,
    pub(crate) resolver_type: ::std::option::Option<crate::types::ResolverType>,
    pub(crate) impacted_services: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) case_attachments: ::std::option::Option<::std::vec::Vec<crate::types::CaseAttachmentAttributes>>,
    pub(crate) closed_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetCaseOutputBuilder {
    /// <p>Response element for GetCase that provides the case title.</p>
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Response element for GetCase that provides the case title.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>Response element for GetCase that provides the case title.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>Response element for GetCase that provides the case ARN</p>
    pub fn case_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.case_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Response element for GetCase that provides the case ARN</p>
    pub fn set_case_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.case_arn = input;
        self
    }
    /// <p>Response element for GetCase that provides the case ARN</p>
    pub fn get_case_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.case_arn
    }
    /// <p>Response element for GetCase that provides contents of the case description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Response element for GetCase that provides contents of the case description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Response element for GetCase that provides contents of the case description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Response element for GetCase that provides the case status. Options for statuses include <code>Submitted | Detection and Analysis | Eradication, Containment and Recovery | Post-Incident Activities | Closed </code></p>
    pub fn case_status(mut self, input: crate::types::CaseStatus) -> Self {
        self.case_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Response element for GetCase that provides the case status. Options for statuses include <code>Submitted | Detection and Analysis | Eradication, Containment and Recovery | Post-Incident Activities | Closed </code></p>
    pub fn set_case_status(mut self, input: ::std::option::Option<crate::types::CaseStatus>) -> Self {
        self.case_status = input;
        self
    }
    /// <p>Response element for GetCase that provides the case status. Options for statuses include <code>Submitted | Detection and Analysis | Eradication, Containment and Recovery | Post-Incident Activities | Closed </code></p>
    pub fn get_case_status(&self) -> &::std::option::Option<crate::types::CaseStatus> {
        &self.case_status
    }
    /// <p>Response element for GetCase that provides the engagement type. Options for engagement type include <code>Active Security Event | Investigations</code></p>
    pub fn engagement_type(mut self, input: crate::types::EngagementType) -> Self {
        self.engagement_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Response element for GetCase that provides the engagement type. Options for engagement type include <code>Active Security Event | Investigations</code></p>
    pub fn set_engagement_type(mut self, input: ::std::option::Option<crate::types::EngagementType>) -> Self {
        self.engagement_type = input;
        self
    }
    /// <p>Response element for GetCase that provides the engagement type. Options for engagement type include <code>Active Security Event | Investigations</code></p>
    pub fn get_engagement_type(&self) -> &::std::option::Option<crate::types::EngagementType> {
        &self.engagement_type
    }
    /// <p>Response element for GetCase that provides the customer provided incident start date.</p>
    pub fn reported_incident_start_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.reported_incident_start_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Response element for GetCase that provides the customer provided incident start date.</p>
    pub fn set_reported_incident_start_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.reported_incident_start_date = input;
        self
    }
    /// <p>Response element for GetCase that provides the customer provided incident start date.</p>
    pub fn get_reported_incident_start_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.reported_incident_start_date
    }
    /// <p>Response element for GetCase that provides the actual incident start date as identified by data analysis during the investigation.</p>
    pub fn actual_incident_start_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.actual_incident_start_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Response element for GetCase that provides the actual incident start date as identified by data analysis during the investigation.</p>
    pub fn set_actual_incident_start_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.actual_incident_start_date = input;
        self
    }
    /// <p>Response element for GetCase that provides the actual incident start date as identified by data analysis during the investigation.</p>
    pub fn get_actual_incident_start_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.actual_incident_start_date
    }
    /// Appends an item to `impacted_aws_regions`.
    ///
    /// To override the contents of this collection use [`set_impacted_aws_regions`](Self::set_impacted_aws_regions).
    ///
    /// <p>Response element for GetCase that provides the impacted regions.</p>
    pub fn impacted_aws_regions(mut self, input: crate::types::ImpactedAwsRegion) -> Self {
        let mut v = self.impacted_aws_regions.unwrap_or_default();
        v.push(input);
        self.impacted_aws_regions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Response element for GetCase that provides the impacted regions.</p>
    pub fn set_impacted_aws_regions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ImpactedAwsRegion>>) -> Self {
        self.impacted_aws_regions = input;
        self
    }
    /// <p>Response element for GetCase that provides the impacted regions.</p>
    pub fn get_impacted_aws_regions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ImpactedAwsRegion>> {
        &self.impacted_aws_regions
    }
    /// Appends an item to `threat_actor_ip_addresses`.
    ///
    /// To override the contents of this collection use [`set_threat_actor_ip_addresses`](Self::set_threat_actor_ip_addresses).
    ///
    /// <p>Response element for GetCase that provides a list of suspicious IP addresses associated with unauthorized activity.</p>
    pub fn threat_actor_ip_addresses(mut self, input: crate::types::ThreatActorIp) -> Self {
        let mut v = self.threat_actor_ip_addresses.unwrap_or_default();
        v.push(input);
        self.threat_actor_ip_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>Response element for GetCase that provides a list of suspicious IP addresses associated with unauthorized activity.</p>
    pub fn set_threat_actor_ip_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ThreatActorIp>>) -> Self {
        self.threat_actor_ip_addresses = input;
        self
    }
    /// <p>Response element for GetCase that provides a list of suspicious IP addresses associated with unauthorized activity.</p>
    pub fn get_threat_actor_ip_addresses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ThreatActorIp>> {
        &self.threat_actor_ip_addresses
    }
    /// <p>Response element for GetCase that provides identifies the case is waiting on customer input.</p>
    pub fn pending_action(mut self, input: crate::types::PendingAction) -> Self {
        self.pending_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Response element for GetCase that provides identifies the case is waiting on customer input.</p>
    pub fn set_pending_action(mut self, input: ::std::option::Option<crate::types::PendingAction>) -> Self {
        self.pending_action = input;
        self
    }
    /// <p>Response element for GetCase that provides identifies the case is waiting on customer input.</p>
    pub fn get_pending_action(&self) -> &::std::option::Option<crate::types::PendingAction> {
        &self.pending_action
    }
    /// Appends an item to `impacted_accounts`.
    ///
    /// To override the contents of this collection use [`set_impacted_accounts`](Self::set_impacted_accounts).
    ///
    /// <p>Response element for GetCase that provides a list of impacted accounts.</p>
    pub fn impacted_accounts(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.impacted_accounts.unwrap_or_default();
        v.push(input.into());
        self.impacted_accounts = ::std::option::Option::Some(v);
        self
    }
    /// <p>Response element for GetCase that provides a list of impacted accounts.</p>
    pub fn set_impacted_accounts(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.impacted_accounts = input;
        self
    }
    /// <p>Response element for GetCase that provides a list of impacted accounts.</p>
    pub fn get_impacted_accounts(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.impacted_accounts
    }
    /// Appends an item to `watchers`.
    ///
    /// To override the contents of this collection use [`set_watchers`](Self::set_watchers).
    ///
    /// <p>Response element for GetCase that provides a list of Watchers added to the case.</p>
    pub fn watchers(mut self, input: crate::types::Watcher) -> Self {
        let mut v = self.watchers.unwrap_or_default();
        v.push(input);
        self.watchers = ::std::option::Option::Some(v);
        self
    }
    /// <p>Response element for GetCase that provides a list of Watchers added to the case.</p>
    pub fn set_watchers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Watcher>>) -> Self {
        self.watchers = input;
        self
    }
    /// <p>Response element for GetCase that provides a list of Watchers added to the case.</p>
    pub fn get_watchers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Watcher>> {
        &self.watchers
    }
    /// <p>Response element for GetCase that provides the date the case was created.</p>
    pub fn created_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Response element for GetCase that provides the date the case was created.</p>
    pub fn set_created_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_date = input;
        self
    }
    /// <p>Response element for GetCase that provides the date the case was created.</p>
    pub fn get_created_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_date
    }
    /// <p>Response element for GetCase that provides the date a case was last modified.</p>
    pub fn last_updated_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Response element for GetCase that provides the date a case was last modified.</p>
    pub fn set_last_updated_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_date = input;
        self
    }
    /// <p>Response element for GetCase that provides the date a case was last modified.</p>
    pub fn get_last_updated_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_date
    }
    /// <p>Response element for GetCase that provides the summary code for why a case was closed.</p>
    pub fn closure_code(mut self, input: crate::types::ClosureCode) -> Self {
        self.closure_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>Response element for GetCase that provides the summary code for why a case was closed.</p>
    pub fn set_closure_code(mut self, input: ::std::option::Option<crate::types::ClosureCode>) -> Self {
        self.closure_code = input;
        self
    }
    /// <p>Response element for GetCase that provides the summary code for why a case was closed.</p>
    pub fn get_closure_code(&self) -> &::std::option::Option<crate::types::ClosureCode> {
        &self.closure_code
    }
    /// <p>Response element for GetCase that provides the current resolver types. Options include <code> self-supported | AWS-supported</code>.</p>
    pub fn resolver_type(mut self, input: crate::types::ResolverType) -> Self {
        self.resolver_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Response element for GetCase that provides the current resolver types. Options include <code> self-supported | AWS-supported</code>.</p>
    pub fn set_resolver_type(mut self, input: ::std::option::Option<crate::types::ResolverType>) -> Self {
        self.resolver_type = input;
        self
    }
    /// <p>Response element for GetCase that provides the current resolver types. Options include <code> self-supported | AWS-supported</code>.</p>
    pub fn get_resolver_type(&self) -> &::std::option::Option<crate::types::ResolverType> {
        &self.resolver_type
    }
    /// Appends an item to `impacted_services`.
    ///
    /// To override the contents of this collection use [`set_impacted_services`](Self::set_impacted_services).
    ///
    /// <p>Response element for GetCase that provides a list of impacted services.</p>
    pub fn impacted_services(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.impacted_services.unwrap_or_default();
        v.push(input.into());
        self.impacted_services = ::std::option::Option::Some(v);
        self
    }
    /// <p>Response element for GetCase that provides a list of impacted services.</p>
    pub fn set_impacted_services(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.impacted_services = input;
        self
    }
    /// <p>Response element for GetCase that provides a list of impacted services.</p>
    pub fn get_impacted_services(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.impacted_services
    }
    /// Appends an item to `case_attachments`.
    ///
    /// To override the contents of this collection use [`set_case_attachments`](Self::set_case_attachments).
    ///
    /// <p>Response element for GetCase that provides a list of current case attachments.</p>
    pub fn case_attachments(mut self, input: crate::types::CaseAttachmentAttributes) -> Self {
        let mut v = self.case_attachments.unwrap_or_default();
        v.push(input);
        self.case_attachments = ::std::option::Option::Some(v);
        self
    }
    /// <p>Response element for GetCase that provides a list of current case attachments.</p>
    pub fn set_case_attachments(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CaseAttachmentAttributes>>) -> Self {
        self.case_attachments = input;
        self
    }
    /// <p>Response element for GetCase that provides a list of current case attachments.</p>
    pub fn get_case_attachments(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CaseAttachmentAttributes>> {
        &self.case_attachments
    }
    /// <p>Response element for GetCase that provides the date a specified case was closed.</p>
    pub fn closed_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.closed_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Response element for GetCase that provides the date a specified case was closed.</p>
    pub fn set_closed_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.closed_date = input;
        self
    }
    /// <p>Response element for GetCase that provides the date a specified case was closed.</p>
    pub fn get_closed_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.closed_date
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetCaseOutput`](crate::operation::get_case::GetCaseOutput).
    pub fn build(self) -> crate::operation::get_case::GetCaseOutput {
        crate::operation::get_case::GetCaseOutput {
            title: self.title,
            case_arn: self.case_arn,
            description: self.description,
            case_status: self.case_status,
            engagement_type: self.engagement_type,
            reported_incident_start_date: self.reported_incident_start_date,
            actual_incident_start_date: self.actual_incident_start_date,
            impacted_aws_regions: self.impacted_aws_regions,
            threat_actor_ip_addresses: self.threat_actor_ip_addresses,
            pending_action: self.pending_action,
            impacted_accounts: self.impacted_accounts,
            watchers: self.watchers,
            created_date: self.created_date,
            last_updated_date: self.last_updated_date,
            closure_code: self.closure_code,
            resolver_type: self.resolver_type,
            impacted_services: self.impacted_services,
            case_attachments: self.case_attachments,
            closed_date: self.closed_date,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for GetCaseOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetCaseOutputBuilder");
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("case_arn", &self.case_arn);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("case_status", &self.case_status);
        formatter.field("engagement_type", &self.engagement_type);
        formatter.field("reported_incident_start_date", &self.reported_incident_start_date);
        formatter.field("actual_incident_start_date", &self.actual_incident_start_date);
        formatter.field("impacted_aws_regions", &self.impacted_aws_regions);
        formatter.field("threat_actor_ip_addresses", &self.threat_actor_ip_addresses);
        formatter.field("pending_action", &self.pending_action);
        formatter.field("impacted_accounts", &self.impacted_accounts);
        formatter.field("watchers", &self.watchers);
        formatter.field("created_date", &self.created_date);
        formatter.field("last_updated_date", &self.last_updated_date);
        formatter.field("closure_code", &self.closure_code);
        formatter.field("resolver_type", &self.resolver_type);
        formatter.field("impacted_services", &self.impacted_services);
        formatter.field("case_attachments", &self.case_attachments);
        formatter.field("closed_date", &self.closed_date);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
