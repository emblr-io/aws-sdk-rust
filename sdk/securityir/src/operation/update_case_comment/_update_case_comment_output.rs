// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateCaseCommentOutput {
    /// <p>Response element for UpdateCaseComment providing the updated comment ID.</p>
    pub comment_id: ::std::string::String,
    /// <p>Response element for UpdateCaseComment providing the updated comment content.</p>
    pub body: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl UpdateCaseCommentOutput {
    /// <p>Response element for UpdateCaseComment providing the updated comment ID.</p>
    pub fn comment_id(&self) -> &str {
        use std::ops::Deref;
        self.comment_id.deref()
    }
    /// <p>Response element for UpdateCaseComment providing the updated comment content.</p>
    pub fn body(&self) -> ::std::option::Option<&str> {
        self.body.as_deref()
    }
}
impl ::std::fmt::Debug for UpdateCaseCommentOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateCaseCommentOutput");
        formatter.field("comment_id", &self.comment_id);
        formatter.field("body", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for UpdateCaseCommentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateCaseCommentOutput {
    /// Creates a new builder-style object to manufacture [`UpdateCaseCommentOutput`](crate::operation::update_case_comment::UpdateCaseCommentOutput).
    pub fn builder() -> crate::operation::update_case_comment::builders::UpdateCaseCommentOutputBuilder {
        crate::operation::update_case_comment::builders::UpdateCaseCommentOutputBuilder::default()
    }
}

/// A builder for [`UpdateCaseCommentOutput`](crate::operation::update_case_comment::UpdateCaseCommentOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateCaseCommentOutputBuilder {
    pub(crate) comment_id: ::std::option::Option<::std::string::String>,
    pub(crate) body: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl UpdateCaseCommentOutputBuilder {
    /// <p>Response element for UpdateCaseComment providing the updated comment ID.</p>
    /// This field is required.
    pub fn comment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.comment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Response element for UpdateCaseComment providing the updated comment ID.</p>
    pub fn set_comment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.comment_id = input;
        self
    }
    /// <p>Response element for UpdateCaseComment providing the updated comment ID.</p>
    pub fn get_comment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.comment_id
    }
    /// <p>Response element for UpdateCaseComment providing the updated comment content.</p>
    pub fn body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Response element for UpdateCaseComment providing the updated comment content.</p>
    pub fn set_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// <p>Response element for UpdateCaseComment providing the updated comment content.</p>
    pub fn get_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.body
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateCaseCommentOutput`](crate::operation::update_case_comment::UpdateCaseCommentOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`comment_id`](crate::operation::update_case_comment::builders::UpdateCaseCommentOutputBuilder::comment_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_case_comment::UpdateCaseCommentOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_case_comment::UpdateCaseCommentOutput {
            comment_id: self.comment_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "comment_id",
                    "comment_id was not specified but it is required when building UpdateCaseCommentOutput",
                )
            })?,
            body: self.body,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for UpdateCaseCommentOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateCaseCommentOutputBuilder");
        formatter.field("comment_id", &self.comment_id);
        formatter.field("body", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
