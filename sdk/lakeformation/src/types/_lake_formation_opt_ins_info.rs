// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A single principal-resource pair that has Lake Formation permissins enforced.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LakeFormationOptInsInfo {
    /// <p>A structure for the resource.</p>
    pub resource: ::std::option::Option<crate::types::Resource>,
    /// <p>The Lake Formation principal. Supported principals are IAM users or IAM roles.</p>
    pub principal: ::std::option::Option<crate::types::DataLakePrincipal>,
    /// <p>A Lake Formation condition, which applies to permissions and opt-ins that contain an expression.</p>
    pub condition: ::std::option::Option<crate::types::Condition>,
    /// <p>The last modified date and time of the record.</p>
    pub last_modified: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The user who updated the record.</p>
    pub last_updated_by: ::std::option::Option<::std::string::String>,
}
impl LakeFormationOptInsInfo {
    /// <p>A structure for the resource.</p>
    pub fn resource(&self) -> ::std::option::Option<&crate::types::Resource> {
        self.resource.as_ref()
    }
    /// <p>The Lake Formation principal. Supported principals are IAM users or IAM roles.</p>
    pub fn principal(&self) -> ::std::option::Option<&crate::types::DataLakePrincipal> {
        self.principal.as_ref()
    }
    /// <p>A Lake Formation condition, which applies to permissions and opt-ins that contain an expression.</p>
    pub fn condition(&self) -> ::std::option::Option<&crate::types::Condition> {
        self.condition.as_ref()
    }
    /// <p>The last modified date and time of the record.</p>
    pub fn last_modified(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified.as_ref()
    }
    /// <p>The user who updated the record.</p>
    pub fn last_updated_by(&self) -> ::std::option::Option<&str> {
        self.last_updated_by.as_deref()
    }
}
impl LakeFormationOptInsInfo {
    /// Creates a new builder-style object to manufacture [`LakeFormationOptInsInfo`](crate::types::LakeFormationOptInsInfo).
    pub fn builder() -> crate::types::builders::LakeFormationOptInsInfoBuilder {
        crate::types::builders::LakeFormationOptInsInfoBuilder::default()
    }
}

/// A builder for [`LakeFormationOptInsInfo`](crate::types::LakeFormationOptInsInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LakeFormationOptInsInfoBuilder {
    pub(crate) resource: ::std::option::Option<crate::types::Resource>,
    pub(crate) principal: ::std::option::Option<crate::types::DataLakePrincipal>,
    pub(crate) condition: ::std::option::Option<crate::types::Condition>,
    pub(crate) last_modified: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_by: ::std::option::Option<::std::string::String>,
}
impl LakeFormationOptInsInfoBuilder {
    /// <p>A structure for the resource.</p>
    pub fn resource(mut self, input: crate::types::Resource) -> Self {
        self.resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure for the resource.</p>
    pub fn set_resource(mut self, input: ::std::option::Option<crate::types::Resource>) -> Self {
        self.resource = input;
        self
    }
    /// <p>A structure for the resource.</p>
    pub fn get_resource(&self) -> &::std::option::Option<crate::types::Resource> {
        &self.resource
    }
    /// <p>The Lake Formation principal. Supported principals are IAM users or IAM roles.</p>
    pub fn principal(mut self, input: crate::types::DataLakePrincipal) -> Self {
        self.principal = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Lake Formation principal. Supported principals are IAM users or IAM roles.</p>
    pub fn set_principal(mut self, input: ::std::option::Option<crate::types::DataLakePrincipal>) -> Self {
        self.principal = input;
        self
    }
    /// <p>The Lake Formation principal. Supported principals are IAM users or IAM roles.</p>
    pub fn get_principal(&self) -> &::std::option::Option<crate::types::DataLakePrincipal> {
        &self.principal
    }
    /// <p>A Lake Formation condition, which applies to permissions and opt-ins that contain an expression.</p>
    pub fn condition(mut self, input: crate::types::Condition) -> Self {
        self.condition = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Lake Formation condition, which applies to permissions and opt-ins that contain an expression.</p>
    pub fn set_condition(mut self, input: ::std::option::Option<crate::types::Condition>) -> Self {
        self.condition = input;
        self
    }
    /// <p>A Lake Formation condition, which applies to permissions and opt-ins that contain an expression.</p>
    pub fn get_condition(&self) -> &::std::option::Option<crate::types::Condition> {
        &self.condition
    }
    /// <p>The last modified date and time of the record.</p>
    pub fn last_modified(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last modified date and time of the record.</p>
    pub fn set_last_modified(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified = input;
        self
    }
    /// <p>The last modified date and time of the record.</p>
    pub fn get_last_modified(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified
    }
    /// <p>The user who updated the record.</p>
    pub fn last_updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user who updated the record.</p>
    pub fn set_last_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_updated_by = input;
        self
    }
    /// <p>The user who updated the record.</p>
    pub fn get_last_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_updated_by
    }
    /// Consumes the builder and constructs a [`LakeFormationOptInsInfo`](crate::types::LakeFormationOptInsInfo).
    pub fn build(self) -> crate::types::LakeFormationOptInsInfo {
        crate::types::LakeFormationOptInsInfo {
            resource: self.resource,
            principal: self.principal,
            condition: self.condition,
            last_modified: self.last_modified,
            last_updated_by: self.last_updated_by,
        }
    }
}
