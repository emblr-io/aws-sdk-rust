// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteLakeFormationOptInInput {
    /// <p>The Lake Formation principal. Supported principals are IAM users or IAM roles.</p>
    pub principal: ::std::option::Option<crate::types::DataLakePrincipal>,
    /// <p>A structure for the resource.</p>
    pub resource: ::std::option::Option<crate::types::Resource>,
    /// <p>A Lake Formation condition, which applies to permissions and opt-ins that contain an expression.</p>
    pub condition: ::std::option::Option<crate::types::Condition>,
}
impl DeleteLakeFormationOptInInput {
    /// <p>The Lake Formation principal. Supported principals are IAM users or IAM roles.</p>
    pub fn principal(&self) -> ::std::option::Option<&crate::types::DataLakePrincipal> {
        self.principal.as_ref()
    }
    /// <p>A structure for the resource.</p>
    pub fn resource(&self) -> ::std::option::Option<&crate::types::Resource> {
        self.resource.as_ref()
    }
    /// <p>A Lake Formation condition, which applies to permissions and opt-ins that contain an expression.</p>
    pub fn condition(&self) -> ::std::option::Option<&crate::types::Condition> {
        self.condition.as_ref()
    }
}
impl DeleteLakeFormationOptInInput {
    /// Creates a new builder-style object to manufacture [`DeleteLakeFormationOptInInput`](crate::operation::delete_lake_formation_opt_in::DeleteLakeFormationOptInInput).
    pub fn builder() -> crate::operation::delete_lake_formation_opt_in::builders::DeleteLakeFormationOptInInputBuilder {
        crate::operation::delete_lake_formation_opt_in::builders::DeleteLakeFormationOptInInputBuilder::default()
    }
}

/// A builder for [`DeleteLakeFormationOptInInput`](crate::operation::delete_lake_formation_opt_in::DeleteLakeFormationOptInInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeleteLakeFormationOptInInputBuilder {
    pub(crate) principal: ::std::option::Option<crate::types::DataLakePrincipal>,
    pub(crate) resource: ::std::option::Option<crate::types::Resource>,
    pub(crate) condition: ::std::option::Option<crate::types::Condition>,
}
impl DeleteLakeFormationOptInInputBuilder {
    /// <p>The Lake Formation principal. Supported principals are IAM users or IAM roles.</p>
    /// This field is required.
    pub fn principal(mut self, input: crate::types::DataLakePrincipal) -> Self {
        self.principal = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Lake Formation principal. Supported principals are IAM users or IAM roles.</p>
    pub fn set_principal(mut self, input: ::std::option::Option<crate::types::DataLakePrincipal>) -> Self {
        self.principal = input;
        self
    }
    /// <p>The Lake Formation principal. Supported principals are IAM users or IAM roles.</p>
    pub fn get_principal(&self) -> &::std::option::Option<crate::types::DataLakePrincipal> {
        &self.principal
    }
    /// <p>A structure for the resource.</p>
    /// This field is required.
    pub fn resource(mut self, input: crate::types::Resource) -> Self {
        self.resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure for the resource.</p>
    pub fn set_resource(mut self, input: ::std::option::Option<crate::types::Resource>) -> Self {
        self.resource = input;
        self
    }
    /// <p>A structure for the resource.</p>
    pub fn get_resource(&self) -> &::std::option::Option<crate::types::Resource> {
        &self.resource
    }
    /// <p>A Lake Formation condition, which applies to permissions and opt-ins that contain an expression.</p>
    pub fn condition(mut self, input: crate::types::Condition) -> Self {
        self.condition = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Lake Formation condition, which applies to permissions and opt-ins that contain an expression.</p>
    pub fn set_condition(mut self, input: ::std::option::Option<crate::types::Condition>) -> Self {
        self.condition = input;
        self
    }
    /// <p>A Lake Formation condition, which applies to permissions and opt-ins that contain an expression.</p>
    pub fn get_condition(&self) -> &::std::option::Option<crate::types::Condition> {
        &self.condition
    }
    /// Consumes the builder and constructs a [`DeleteLakeFormationOptInInput`](crate::operation::delete_lake_formation_opt_in::DeleteLakeFormationOptInInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_lake_formation_opt_in::DeleteLakeFormationOptInInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::delete_lake_formation_opt_in::DeleteLakeFormationOptInInput {
            principal: self.principal,
            resource: self.resource,
            condition: self.condition,
        })
    }
}
