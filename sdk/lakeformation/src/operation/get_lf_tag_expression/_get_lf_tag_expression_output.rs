// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetLfTagExpressionOutput {
    /// <p>The name for the LF-Tag expression.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description with information about the LF-Tag expression.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The identifier for the Data Catalog. By default, the account ID in which the LF-Tag expression is saved.</p>
    pub catalog_id: ::std::option::Option<::std::string::String>,
    /// <p>The body of the LF-Tag expression. It is composed of one or more LF-Tag key-value pairs.</p>
    pub expression: ::std::option::Option<::std::vec::Vec<crate::types::LfTag>>,
    _request_id: Option<String>,
}
impl GetLfTagExpressionOutput {
    /// <p>The name for the LF-Tag expression.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description with information about the LF-Tag expression.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID in which the LF-Tag expression is saved.</p>
    pub fn catalog_id(&self) -> ::std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>The body of the LF-Tag expression. It is composed of one or more LF-Tag key-value pairs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.expression.is_none()`.
    pub fn expression(&self) -> &[crate::types::LfTag] {
        self.expression.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for GetLfTagExpressionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetLfTagExpressionOutput {
    /// Creates a new builder-style object to manufacture [`GetLfTagExpressionOutput`](crate::operation::get_lf_tag_expression::GetLfTagExpressionOutput).
    pub fn builder() -> crate::operation::get_lf_tag_expression::builders::GetLfTagExpressionOutputBuilder {
        crate::operation::get_lf_tag_expression::builders::GetLfTagExpressionOutputBuilder::default()
    }
}

/// A builder for [`GetLfTagExpressionOutput`](crate::operation::get_lf_tag_expression::GetLfTagExpressionOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetLfTagExpressionOutputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) expression: ::std::option::Option<::std::vec::Vec<crate::types::LfTag>>,
    _request_id: Option<String>,
}
impl GetLfTagExpressionOutputBuilder {
    /// <p>The name for the LF-Tag expression.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for the LF-Tag expression.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name for the LF-Tag expression.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description with information about the LF-Tag expression.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description with information about the LF-Tag expression.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description with information about the LF-Tag expression.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID in which the LF-Tag expression is saved.</p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID in which the LF-Tag expression is saved.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID in which the LF-Tag expression is saved.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_id
    }
    /// Appends an item to `expression`.
    ///
    /// To override the contents of this collection use [`set_expression`](Self::set_expression).
    ///
    /// <p>The body of the LF-Tag expression. It is composed of one or more LF-Tag key-value pairs.</p>
    pub fn expression(mut self, input: crate::types::LfTag) -> Self {
        let mut v = self.expression.unwrap_or_default();
        v.push(input);
        self.expression = ::std::option::Option::Some(v);
        self
    }
    /// <p>The body of the LF-Tag expression. It is composed of one or more LF-Tag key-value pairs.</p>
    pub fn set_expression(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LfTag>>) -> Self {
        self.expression = input;
        self
    }
    /// <p>The body of the LF-Tag expression. It is composed of one or more LF-Tag key-value pairs.</p>
    pub fn get_expression(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LfTag>> {
        &self.expression
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetLfTagExpressionOutput`](crate::operation::get_lf_tag_expression::GetLfTagExpressionOutput).
    pub fn build(self) -> crate::operation::get_lf_tag_expression::GetLfTagExpressionOutput {
        crate::operation::get_lf_tag_expression::GetLfTagExpressionOutput {
            name: self.name,
            description: self.description,
            catalog_id: self.catalog_id,
            expression: self.expression,
            _request_id: self._request_id,
        }
    }
}
