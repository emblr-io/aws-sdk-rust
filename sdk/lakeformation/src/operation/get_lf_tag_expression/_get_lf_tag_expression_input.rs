// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetLfTagExpressionInput {
    /// <p>The name for the LF-Tag expression</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The identifier for the Data Catalog. By default, the account ID.</p>
    pub catalog_id: ::std::option::Option<::std::string::String>,
}
impl GetLfTagExpressionInput {
    /// <p>The name for the LF-Tag expression</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID.</p>
    pub fn catalog_id(&self) -> ::std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
}
impl GetLfTagExpressionInput {
    /// Creates a new builder-style object to manufacture [`GetLfTagExpressionInput`](crate::operation::get_lf_tag_expression::GetLfTagExpressionInput).
    pub fn builder() -> crate::operation::get_lf_tag_expression::builders::GetLfTagExpressionInputBuilder {
        crate::operation::get_lf_tag_expression::builders::GetLfTagExpressionInputBuilder::default()
    }
}

/// A builder for [`GetLfTagExpressionInput`](crate::operation::get_lf_tag_expression::GetLfTagExpressionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetLfTagExpressionInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) catalog_id: ::std::option::Option<::std::string::String>,
}
impl GetLfTagExpressionInputBuilder {
    /// <p>The name for the LF-Tag expression</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for the LF-Tag expression</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name for the LF-Tag expression</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID.</p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_id
    }
    /// Consumes the builder and constructs a [`GetLfTagExpressionInput`](crate::operation::get_lf_tag_expression::GetLfTagExpressionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_lf_tag_expression::GetLfTagExpressionInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_lf_tag_expression::GetLfTagExpressionInput {
            name: self.name,
            catalog_id: self.catalog_id,
        })
    }
}
