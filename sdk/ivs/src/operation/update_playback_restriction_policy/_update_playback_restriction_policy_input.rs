// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdatePlaybackRestrictionPolicyInput {
    /// <p>ARN of the playback-restriction-policy to be updated.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>A list of country codes that control geoblocking restriction. Allowed values are the officially assigned <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> codes. Default: All countries (an empty array).</p>
    pub allowed_countries: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of origin sites that control CORS restriction. Allowed values are the same as valid values of the Origin header defined at <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin</a>. Default: All origins (an empty array).</p>
    pub allowed_origins: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Whether channel playback is constrained by origin site. Default: <code>false</code>.</p>
    pub enable_strict_origin_enforcement: ::std::option::Option<bool>,
    /// <p>Playback-restriction-policy name. The value does not need to be unique.</p>
    pub name: ::std::option::Option<::std::string::String>,
}
impl UpdatePlaybackRestrictionPolicyInput {
    /// <p>ARN of the playback-restriction-policy to be updated.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A list of country codes that control geoblocking restriction. Allowed values are the officially assigned <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> codes. Default: All countries (an empty array).</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_countries.is_none()`.
    pub fn allowed_countries(&self) -> &[::std::string::String] {
        self.allowed_countries.as_deref().unwrap_or_default()
    }
    /// <p>A list of origin sites that control CORS restriction. Allowed values are the same as valid values of the Origin header defined at <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin</a>. Default: All origins (an empty array).</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_origins.is_none()`.
    pub fn allowed_origins(&self) -> &[::std::string::String] {
        self.allowed_origins.as_deref().unwrap_or_default()
    }
    /// <p>Whether channel playback is constrained by origin site. Default: <code>false</code>.</p>
    pub fn enable_strict_origin_enforcement(&self) -> ::std::option::Option<bool> {
        self.enable_strict_origin_enforcement
    }
    /// <p>Playback-restriction-policy name. The value does not need to be unique.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl UpdatePlaybackRestrictionPolicyInput {
    /// Creates a new builder-style object to manufacture [`UpdatePlaybackRestrictionPolicyInput`](crate::operation::update_playback_restriction_policy::UpdatePlaybackRestrictionPolicyInput).
    pub fn builder() -> crate::operation::update_playback_restriction_policy::builders::UpdatePlaybackRestrictionPolicyInputBuilder {
        crate::operation::update_playback_restriction_policy::builders::UpdatePlaybackRestrictionPolicyInputBuilder::default()
    }
}

/// A builder for [`UpdatePlaybackRestrictionPolicyInput`](crate::operation::update_playback_restriction_policy::UpdatePlaybackRestrictionPolicyInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdatePlaybackRestrictionPolicyInputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) allowed_countries: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) allowed_origins: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) enable_strict_origin_enforcement: ::std::option::Option<bool>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
}
impl UpdatePlaybackRestrictionPolicyInputBuilder {
    /// <p>ARN of the playback-restriction-policy to be updated.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the playback-restriction-policy to be updated.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>ARN of the playback-restriction-policy to be updated.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Appends an item to `allowed_countries`.
    ///
    /// To override the contents of this collection use [`set_allowed_countries`](Self::set_allowed_countries).
    ///
    /// <p>A list of country codes that control geoblocking restriction. Allowed values are the officially assigned <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> codes. Default: All countries (an empty array).</p>
    pub fn allowed_countries(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_countries.unwrap_or_default();
        v.push(input.into());
        self.allowed_countries = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of country codes that control geoblocking restriction. Allowed values are the officially assigned <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> codes. Default: All countries (an empty array).</p>
    pub fn set_allowed_countries(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allowed_countries = input;
        self
    }
    /// <p>A list of country codes that control geoblocking restriction. Allowed values are the officially assigned <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> codes. Default: All countries (an empty array).</p>
    pub fn get_allowed_countries(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allowed_countries
    }
    /// Appends an item to `allowed_origins`.
    ///
    /// To override the contents of this collection use [`set_allowed_origins`](Self::set_allowed_origins).
    ///
    /// <p>A list of origin sites that control CORS restriction. Allowed values are the same as valid values of the Origin header defined at <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin</a>. Default: All origins (an empty array).</p>
    pub fn allowed_origins(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_origins.unwrap_or_default();
        v.push(input.into());
        self.allowed_origins = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of origin sites that control CORS restriction. Allowed values are the same as valid values of the Origin header defined at <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin</a>. Default: All origins (an empty array).</p>
    pub fn set_allowed_origins(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allowed_origins = input;
        self
    }
    /// <p>A list of origin sites that control CORS restriction. Allowed values are the same as valid values of the Origin header defined at <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin</a>. Default: All origins (an empty array).</p>
    pub fn get_allowed_origins(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allowed_origins
    }
    /// <p>Whether channel playback is constrained by origin site. Default: <code>false</code>.</p>
    pub fn enable_strict_origin_enforcement(mut self, input: bool) -> Self {
        self.enable_strict_origin_enforcement = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether channel playback is constrained by origin site. Default: <code>false</code>.</p>
    pub fn set_enable_strict_origin_enforcement(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_strict_origin_enforcement = input;
        self
    }
    /// <p>Whether channel playback is constrained by origin site. Default: <code>false</code>.</p>
    pub fn get_enable_strict_origin_enforcement(&self) -> &::std::option::Option<bool> {
        &self.enable_strict_origin_enforcement
    }
    /// <p>Playback-restriction-policy name. The value does not need to be unique.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Playback-restriction-policy name. The value does not need to be unique.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Playback-restriction-policy name. The value does not need to be unique.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Consumes the builder and constructs a [`UpdatePlaybackRestrictionPolicyInput`](crate::operation::update_playback_restriction_policy::UpdatePlaybackRestrictionPolicyInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_playback_restriction_policy::UpdatePlaybackRestrictionPolicyInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_playback_restriction_policy::UpdatePlaybackRestrictionPolicyInput {
                arn: self.arn,
                allowed_countries: self.allowed_countries,
                allowed_origins: self.allowed_origins,
                enable_strict_origin_enforcement: self.enable_strict_origin_enforcement,
                name: self.name,
            },
        )
    }
}
