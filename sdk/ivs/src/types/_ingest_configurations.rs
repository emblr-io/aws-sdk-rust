// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object specifying the ingest configuration set up by the broadcaster, usually in an encoder.</p>
/// <p><b>Note:</b> Use IngestConfigurations instead of <code>IngestConfiguration</code> (which is deprecated). If multitrack is not enabled, IngestConfiguration and IngestConfigurations contain the same data, namely information about track0 (the sole track). If multitrack is enabled, IngestConfiguration contains data for only the first track (track0) and IngestConfigurations contains data for all tracks.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IngestConfigurations {
    /// <p>Encoder settings for video</p>
    pub video_configurations: ::std::vec::Vec<crate::types::VideoConfiguration>,
    /// <p>Encoder settings for audio.</p>
    pub audio_configurations: ::std::vec::Vec<crate::types::AudioConfiguration>,
}
impl IngestConfigurations {
    /// <p>Encoder settings for video</p>
    pub fn video_configurations(&self) -> &[crate::types::VideoConfiguration] {
        use std::ops::Deref;
        self.video_configurations.deref()
    }
    /// <p>Encoder settings for audio.</p>
    pub fn audio_configurations(&self) -> &[crate::types::AudioConfiguration] {
        use std::ops::Deref;
        self.audio_configurations.deref()
    }
}
impl IngestConfigurations {
    /// Creates a new builder-style object to manufacture [`IngestConfigurations`](crate::types::IngestConfigurations).
    pub fn builder() -> crate::types::builders::IngestConfigurationsBuilder {
        crate::types::builders::IngestConfigurationsBuilder::default()
    }
}

/// A builder for [`IngestConfigurations`](crate::types::IngestConfigurations).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IngestConfigurationsBuilder {
    pub(crate) video_configurations: ::std::option::Option<::std::vec::Vec<crate::types::VideoConfiguration>>,
    pub(crate) audio_configurations: ::std::option::Option<::std::vec::Vec<crate::types::AudioConfiguration>>,
}
impl IngestConfigurationsBuilder {
    /// Appends an item to `video_configurations`.
    ///
    /// To override the contents of this collection use [`set_video_configurations`](Self::set_video_configurations).
    ///
    /// <p>Encoder settings for video</p>
    pub fn video_configurations(mut self, input: crate::types::VideoConfiguration) -> Self {
        let mut v = self.video_configurations.unwrap_or_default();
        v.push(input);
        self.video_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Encoder settings for video</p>
    pub fn set_video_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::VideoConfiguration>>) -> Self {
        self.video_configurations = input;
        self
    }
    /// <p>Encoder settings for video</p>
    pub fn get_video_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VideoConfiguration>> {
        &self.video_configurations
    }
    /// Appends an item to `audio_configurations`.
    ///
    /// To override the contents of this collection use [`set_audio_configurations`](Self::set_audio_configurations).
    ///
    /// <p>Encoder settings for audio.</p>
    pub fn audio_configurations(mut self, input: crate::types::AudioConfiguration) -> Self {
        let mut v = self.audio_configurations.unwrap_or_default();
        v.push(input);
        self.audio_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Encoder settings for audio.</p>
    pub fn set_audio_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AudioConfiguration>>) -> Self {
        self.audio_configurations = input;
        self
    }
    /// <p>Encoder settings for audio.</p>
    pub fn get_audio_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AudioConfiguration>> {
        &self.audio_configurations
    }
    /// Consumes the builder and constructs a [`IngestConfigurations`](crate::types::IngestConfigurations).
    /// This method will fail if any of the following fields are not set:
    /// - [`video_configurations`](crate::types::builders::IngestConfigurationsBuilder::video_configurations)
    /// - [`audio_configurations`](crate::types::builders::IngestConfigurationsBuilder::audio_configurations)
    pub fn build(self) -> ::std::result::Result<crate::types::IngestConfigurations, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IngestConfigurations {
            video_configurations: self.video_configurations.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "video_configurations",
                    "video_configurations was not specified but it is required when building IngestConfigurations",
                )
            })?,
            audio_configurations: self.audio_configurations.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "audio_configurations",
                    "audio_configurations was not specified but it is required when building IngestConfigurations",
                )
            })?,
        })
    }
}
