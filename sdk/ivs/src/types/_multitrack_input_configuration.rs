// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that specifies multitrack input configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MultitrackInputConfiguration {
    /// <p>Indicates whether multitrack input is enabled. Can be set to <code>true</code> only if channel type is <code>STANDARD</code>. Setting <code>enabled</code> to <code>true</code> with any other channel type will cause an exception. If <code>true</code>, then <code>policy</code>, <code>maximumResolution</code>, and <code>containerFormat</code> are required, and <code>containerFormat</code> must be set to <code>FRAGMENTED_MP4</code>. Default: <code>false</code>.</p>
    pub enabled: bool,
    /// <p>Indicates whether multitrack input is allowed or required. Required if <code>enabled</code> is <code>true</code>.</p>
    pub policy: ::std::option::Option<crate::types::MultitrackPolicy>,
    /// <p>Maximum resolution for multitrack input. Required if <code>enabled</code> is <code>true</code>.</p>
    pub maximum_resolution: ::std::option::Option<crate::types::MultitrackMaximumResolution>,
}
impl MultitrackInputConfiguration {
    /// <p>Indicates whether multitrack input is enabled. Can be set to <code>true</code> only if channel type is <code>STANDARD</code>. Setting <code>enabled</code> to <code>true</code> with any other channel type will cause an exception. If <code>true</code>, then <code>policy</code>, <code>maximumResolution</code>, and <code>containerFormat</code> are required, and <code>containerFormat</code> must be set to <code>FRAGMENTED_MP4</code>. Default: <code>false</code>.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>Indicates whether multitrack input is allowed or required. Required if <code>enabled</code> is <code>true</code>.</p>
    pub fn policy(&self) -> ::std::option::Option<&crate::types::MultitrackPolicy> {
        self.policy.as_ref()
    }
    /// <p>Maximum resolution for multitrack input. Required if <code>enabled</code> is <code>true</code>.</p>
    pub fn maximum_resolution(&self) -> ::std::option::Option<&crate::types::MultitrackMaximumResolution> {
        self.maximum_resolution.as_ref()
    }
}
impl MultitrackInputConfiguration {
    /// Creates a new builder-style object to manufacture [`MultitrackInputConfiguration`](crate::types::MultitrackInputConfiguration).
    pub fn builder() -> crate::types::builders::MultitrackInputConfigurationBuilder {
        crate::types::builders::MultitrackInputConfigurationBuilder::default()
    }
}

/// A builder for [`MultitrackInputConfiguration`](crate::types::MultitrackInputConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MultitrackInputConfigurationBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) policy: ::std::option::Option<crate::types::MultitrackPolicy>,
    pub(crate) maximum_resolution: ::std::option::Option<crate::types::MultitrackMaximumResolution>,
}
impl MultitrackInputConfigurationBuilder {
    /// <p>Indicates whether multitrack input is enabled. Can be set to <code>true</code> only if channel type is <code>STANDARD</code>. Setting <code>enabled</code> to <code>true</code> with any other channel type will cause an exception. If <code>true</code>, then <code>policy</code>, <code>maximumResolution</code>, and <code>containerFormat</code> are required, and <code>containerFormat</code> must be set to <code>FRAGMENTED_MP4</code>. Default: <code>false</code>.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether multitrack input is enabled. Can be set to <code>true</code> only if channel type is <code>STANDARD</code>. Setting <code>enabled</code> to <code>true</code> with any other channel type will cause an exception. If <code>true</code>, then <code>policy</code>, <code>maximumResolution</code>, and <code>containerFormat</code> are required, and <code>containerFormat</code> must be set to <code>FRAGMENTED_MP4</code>. Default: <code>false</code>.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Indicates whether multitrack input is enabled. Can be set to <code>true</code> only if channel type is <code>STANDARD</code>. Setting <code>enabled</code> to <code>true</code> with any other channel type will cause an exception. If <code>true</code>, then <code>policy</code>, <code>maximumResolution</code>, and <code>containerFormat</code> are required, and <code>containerFormat</code> must be set to <code>FRAGMENTED_MP4</code>. Default: <code>false</code>.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>Indicates whether multitrack input is allowed or required. Required if <code>enabled</code> is <code>true</code>.</p>
    pub fn policy(mut self, input: crate::types::MultitrackPolicy) -> Self {
        self.policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether multitrack input is allowed or required. Required if <code>enabled</code> is <code>true</code>.</p>
    pub fn set_policy(mut self, input: ::std::option::Option<crate::types::MultitrackPolicy>) -> Self {
        self.policy = input;
        self
    }
    /// <p>Indicates whether multitrack input is allowed or required. Required if <code>enabled</code> is <code>true</code>.</p>
    pub fn get_policy(&self) -> &::std::option::Option<crate::types::MultitrackPolicy> {
        &self.policy
    }
    /// <p>Maximum resolution for multitrack input. Required if <code>enabled</code> is <code>true</code>.</p>
    pub fn maximum_resolution(mut self, input: crate::types::MultitrackMaximumResolution) -> Self {
        self.maximum_resolution = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maximum resolution for multitrack input. Required if <code>enabled</code> is <code>true</code>.</p>
    pub fn set_maximum_resolution(mut self, input: ::std::option::Option<crate::types::MultitrackMaximumResolution>) -> Self {
        self.maximum_resolution = input;
        self
    }
    /// <p>Maximum resolution for multitrack input. Required if <code>enabled</code> is <code>true</code>.</p>
    pub fn get_maximum_resolution(&self) -> &::std::option::Option<crate::types::MultitrackMaximumResolution> {
        &self.maximum_resolution
    }
    /// Consumes the builder and constructs a [`MultitrackInputConfiguration`](crate::types::MultitrackInputConfiguration).
    pub fn build(self) -> crate::types::MultitrackInputConfiguration {
        crate::types::MultitrackInputConfiguration {
            enabled: self.enabled.unwrap_or_default(),
            policy: self.policy,
            maximum_resolution: self.maximum_resolution,
        }
    }
}
