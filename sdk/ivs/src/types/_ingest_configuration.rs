// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object specifying the ingest configuration set up by the broadcaster, usually in an encoder.</p>
/// <p><b>Note:</b> IngestConfiguration is deprecated in favor of <code>IngestConfigurations</code> but retained to ensure backward compatibility. If multitrack is not enabled, IngestConfiguration and IngestConfigurations contain the same data, namely information about track0 (the sole track). If multitrack is enabled, IngestConfiguration contains data for only the first track (track0) and IngestConfigurations contains data for all tracks.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IngestConfiguration {
    /// <p>Encoder settings for video.</p>
    pub video: ::std::option::Option<crate::types::VideoConfiguration>,
    /// <p>Encoder settings for audio.</p>
    pub audio: ::std::option::Option<crate::types::AudioConfiguration>,
}
impl IngestConfiguration {
    /// <p>Encoder settings for video.</p>
    pub fn video(&self) -> ::std::option::Option<&crate::types::VideoConfiguration> {
        self.video.as_ref()
    }
    /// <p>Encoder settings for audio.</p>
    pub fn audio(&self) -> ::std::option::Option<&crate::types::AudioConfiguration> {
        self.audio.as_ref()
    }
}
impl IngestConfiguration {
    /// Creates a new builder-style object to manufacture [`IngestConfiguration`](crate::types::IngestConfiguration).
    pub fn builder() -> crate::types::builders::IngestConfigurationBuilder {
        crate::types::builders::IngestConfigurationBuilder::default()
    }
}

/// A builder for [`IngestConfiguration`](crate::types::IngestConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IngestConfigurationBuilder {
    pub(crate) video: ::std::option::Option<crate::types::VideoConfiguration>,
    pub(crate) audio: ::std::option::Option<crate::types::AudioConfiguration>,
}
impl IngestConfigurationBuilder {
    /// <p>Encoder settings for video.</p>
    pub fn video(mut self, input: crate::types::VideoConfiguration) -> Self {
        self.video = ::std::option::Option::Some(input);
        self
    }
    /// <p>Encoder settings for video.</p>
    pub fn set_video(mut self, input: ::std::option::Option<crate::types::VideoConfiguration>) -> Self {
        self.video = input;
        self
    }
    /// <p>Encoder settings for video.</p>
    pub fn get_video(&self) -> &::std::option::Option<crate::types::VideoConfiguration> {
        &self.video
    }
    /// <p>Encoder settings for audio.</p>
    pub fn audio(mut self, input: crate::types::AudioConfiguration) -> Self {
        self.audio = ::std::option::Option::Some(input);
        self
    }
    /// <p>Encoder settings for audio.</p>
    pub fn set_audio(mut self, input: ::std::option::Option<crate::types::AudioConfiguration>) -> Self {
        self.audio = input;
        self
    }
    /// <p>Encoder settings for audio.</p>
    pub fn get_audio(&self) -> &::std::option::Option<crate::types::AudioConfiguration> {
        &self.audio
    }
    /// Consumes the builder and constructs a [`IngestConfiguration`](crate::types::IngestConfiguration).
    pub fn build(self) -> crate::types::IngestConfiguration {
        crate::types::IngestConfiguration {
            video: self.video,
            audio: self.audio,
        }
    }
}
