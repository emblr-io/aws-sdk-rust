// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes potential issues found during state machine validation. Rather than raise an exception, validation will return a list of <b>diagnostic elements</b> containing diagnostic information.</p><note>
/// <p>The <a href="https://docs.aws.amazon.com/step-functions/latest/apireference/API_ValidateStateMachineDefinition.html">ValidateStateMachineDefinitionlAPI</a> might add new diagnostics in the future, adjust diagnostic codes, or change the message wording. Your automated processes should only rely on the value of the <b>result</b> field value (OK, FAIL). Do <b>not</b> rely on the exact order, count, or wording of diagnostic messages.</p>
/// </note>
/// <p><b>List of warning codes</b></p>
/// <dl>
/// <dt>
/// NO_DOLLAR
/// </dt>
/// <dd>
/// <p>No <code>.$</code> on a field that appears to be a JSONPath or Intrinsic Function.</p>
/// </dd>
/// <dt>
/// NO_PATH
/// </dt>
/// <dd>
/// <p>Field value looks like a path, but field name does not end with 'Path'.</p>
/// </dd>
/// <dt>
/// PASS_RESULT_IS_STATIC
/// </dt>
/// <dd>
/// <p>Attempt to use a path in the result of a pass state.</p>
/// </dd>
/// </dl>
/// <p><b>List of error codes</b></p>
/// <dl>
/// <dt>
/// INVALID_JSON_DESCRIPTION
/// </dt>
/// <dd>
/// <p>JSON syntax problem found.</p>
/// </dd>
/// <dt>
/// MISSING_DESCRIPTION
/// </dt>
/// <dd>
/// <p>Received a null or empty workflow input.</p>
/// </dd>
/// <dt>
/// SCHEMA_VALIDATION_FAILED
/// </dt>
/// <dd>
/// <p>Schema validation reported errors.</p>
/// </dd>
/// <dt>
/// INVALID_RESOURCE
/// </dt>
/// <dd>
/// <p>The value of a Task-state resource field is invalid.</p>
/// </dd>
/// <dt>
/// MISSING_END_STATE
/// </dt>
/// <dd>
/// <p>The workflow does not have a terminal state.</p>
/// </dd>
/// <dt>
/// DUPLICATE_STATE_NAME
/// </dt>
/// <dd>
/// <p>The same state name appears more than once.</p>
/// </dd>
/// <dt>
/// INVALID_STATE_NAME
/// </dt>
/// <dd>
/// <p>The state name does not follow the naming convention.</p>
/// </dd>
/// <dt>
/// STATE_MACHINE_NAME_EMPTY
/// </dt>
/// <dd>
/// <p>The state machine name has not been specified.</p>
/// </dd>
/// <dt>
/// STATE_MACHINE_NAME_INVALID
/// </dt>
/// <dd>
/// <p>The state machine name does not follow the naming convention.</p>
/// </dd>
/// <dt>
/// STATE_MACHINE_NAME_TOO_LONG
/// </dt>
/// <dd>
/// <p>The state name exceeds the allowed length.</p>
/// </dd>
/// <dt>
/// STATE_MACHINE_NAME_ALREADY_EXISTS
/// </dt>
/// <dd>
/// <p>The state name already exists.</p>
/// </dd>
/// <dt>
/// DUPLICATE_LABEL_NAME
/// </dt>
/// <dd>
/// <p>A label name appears more than once.</p>
/// </dd>
/// <dt>
/// INVALID_LABEL_NAME
/// </dt>
/// <dd>
/// <p>You have provided an invalid label name.</p>
/// </dd>
/// <dt>
/// MISSING_TRANSITION_TARGET
/// </dt>
/// <dd>
/// <p>The value of "Next" field doesn't match a known state name.</p>
/// </dd>
/// <dt>
/// TOO_DEEPLY_NESTED
/// </dt>
/// <dd>
/// <p>The states are too deeply nested.</p>
/// </dd>
/// </dl>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ValidateStateMachineDefinitionDiagnostic {
    /// <p>A value of <code>ERROR</code> means that you cannot create or update a state machine with this definition.</p>
    /// <p><code>WARNING</code> level diagnostics alert you to potential issues, but they will not prevent you from creating or updating your state machine.</p>
    pub severity: crate::types::ValidateStateMachineDefinitionSeverity,
    /// <p>Identifying code for the diagnostic.</p>
    pub code: ::std::string::String,
    /// <p>Message describing the diagnostic condition.</p>
    pub message: ::std::string::String,
    /// <p>Location of the issue in the state machine, if available.</p>
    /// <p>For errors specific to a field, the location could be in the format: <code>/States/<statename>
    /// /
    /// <fieldname></fieldname>
    /// </statename></code>, for example: <code>/States/FailState/ErrorPath</code>.</p>
    pub location: ::std::option::Option<::std::string::String>,
}
impl ValidateStateMachineDefinitionDiagnostic {
    /// <p>A value of <code>ERROR</code> means that you cannot create or update a state machine with this definition.</p>
    /// <p><code>WARNING</code> level diagnostics alert you to potential issues, but they will not prevent you from creating or updating your state machine.</p>
    pub fn severity(&self) -> &crate::types::ValidateStateMachineDefinitionSeverity {
        &self.severity
    }
    /// <p>Identifying code for the diagnostic.</p>
    pub fn code(&self) -> &str {
        use std::ops::Deref;
        self.code.deref()
    }
    /// <p>Message describing the diagnostic condition.</p>
    pub fn message(&self) -> &str {
        use std::ops::Deref;
        self.message.deref()
    }
    /// <p>Location of the issue in the state machine, if available.</p>
    /// <p>For errors specific to a field, the location could be in the format: <code>/States/<statename>
    /// /
    /// <fieldname></fieldname>
    /// </statename></code>, for example: <code>/States/FailState/ErrorPath</code>.</p>
    pub fn location(&self) -> ::std::option::Option<&str> {
        self.location.as_deref()
    }
}
impl ::std::fmt::Debug for ValidateStateMachineDefinitionDiagnostic {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ValidateStateMachineDefinitionDiagnostic");
        formatter.field("severity", &self.severity);
        formatter.field("code", &"*** Sensitive Data Redacted ***");
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.field("location", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ValidateStateMachineDefinitionDiagnostic {
    /// Creates a new builder-style object to manufacture [`ValidateStateMachineDefinitionDiagnostic`](crate::types::ValidateStateMachineDefinitionDiagnostic).
    pub fn builder() -> crate::types::builders::ValidateStateMachineDefinitionDiagnosticBuilder {
        crate::types::builders::ValidateStateMachineDefinitionDiagnosticBuilder::default()
    }
}

/// A builder for [`ValidateStateMachineDefinitionDiagnostic`](crate::types::ValidateStateMachineDefinitionDiagnostic).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ValidateStateMachineDefinitionDiagnosticBuilder {
    pub(crate) severity: ::std::option::Option<crate::types::ValidateStateMachineDefinitionSeverity>,
    pub(crate) code: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) location: ::std::option::Option<::std::string::String>,
}
impl ValidateStateMachineDefinitionDiagnosticBuilder {
    /// <p>A value of <code>ERROR</code> means that you cannot create or update a state machine with this definition.</p>
    /// <p><code>WARNING</code> level diagnostics alert you to potential issues, but they will not prevent you from creating or updating your state machine.</p>
    /// This field is required.
    pub fn severity(mut self, input: crate::types::ValidateStateMachineDefinitionSeverity) -> Self {
        self.severity = ::std::option::Option::Some(input);
        self
    }
    /// <p>A value of <code>ERROR</code> means that you cannot create or update a state machine with this definition.</p>
    /// <p><code>WARNING</code> level diagnostics alert you to potential issues, but they will not prevent you from creating or updating your state machine.</p>
    pub fn set_severity(mut self, input: ::std::option::Option<crate::types::ValidateStateMachineDefinitionSeverity>) -> Self {
        self.severity = input;
        self
    }
    /// <p>A value of <code>ERROR</code> means that you cannot create or update a state machine with this definition.</p>
    /// <p><code>WARNING</code> level diagnostics alert you to potential issues, but they will not prevent you from creating or updating your state machine.</p>
    pub fn get_severity(&self) -> &::std::option::Option<crate::types::ValidateStateMachineDefinitionSeverity> {
        &self.severity
    }
    /// <p>Identifying code for the diagnostic.</p>
    /// This field is required.
    pub fn code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifying code for the diagnostic.</p>
    pub fn set_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>Identifying code for the diagnostic.</p>
    pub fn get_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.code
    }
    /// <p>Message describing the diagnostic condition.</p>
    /// This field is required.
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Message describing the diagnostic condition.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>Message describing the diagnostic condition.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>Location of the issue in the state machine, if available.</p>
    /// <p>For errors specific to a field, the location could be in the format: <code>/States/<statename>
    /// /
    /// <fieldname></fieldname>
    /// </statename></code>, for example: <code>/States/FailState/ErrorPath</code>.</p>
    pub fn location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Location of the issue in the state machine, if available.</p>
    /// <p>For errors specific to a field, the location could be in the format: <code>/States/<statename>
    /// /
    /// <fieldname></fieldname>
    /// </statename></code>, for example: <code>/States/FailState/ErrorPath</code>.</p>
    pub fn set_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>Location of the issue in the state machine, if available.</p>
    /// <p>For errors specific to a field, the location could be in the format: <code>/States/<statename>
    /// /
    /// <fieldname></fieldname>
    /// </statename></code>, for example: <code>/States/FailState/ErrorPath</code>.</p>
    pub fn get_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.location
    }
    /// Consumes the builder and constructs a [`ValidateStateMachineDefinitionDiagnostic`](crate::types::ValidateStateMachineDefinitionDiagnostic).
    /// This method will fail if any of the following fields are not set:
    /// - [`severity`](crate::types::builders::ValidateStateMachineDefinitionDiagnosticBuilder::severity)
    /// - [`code`](crate::types::builders::ValidateStateMachineDefinitionDiagnosticBuilder::code)
    /// - [`message`](crate::types::builders::ValidateStateMachineDefinitionDiagnosticBuilder::message)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ValidateStateMachineDefinitionDiagnostic, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ValidateStateMachineDefinitionDiagnostic {
            severity: self.severity.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "severity",
                    "severity was not specified but it is required when building ValidateStateMachineDefinitionDiagnostic",
                )
            })?,
            code: self.code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "code",
                    "code was not specified but it is required when building ValidateStateMachineDefinitionDiagnostic",
                )
            })?,
            message: self.message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message",
                    "message was not specified but it is required when building ValidateStateMachineDefinitionDiagnostic",
                )
            })?,
            location: self.location,
        })
    }
}
impl ::std::fmt::Debug for ValidateStateMachineDefinitionDiagnosticBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ValidateStateMachineDefinitionDiagnosticBuilder");
        formatter.field("severity", &self.severity);
        formatter.field("code", &"*** Sensitive Data Redacted ***");
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.field("location", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
