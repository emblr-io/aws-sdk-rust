// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about an evaluation failure that occurred while processing a state, for example, when a JSONata expression throws an error. This event will only be present in state machines that have <b> QueryLanguage</b> set to JSONata, or individual states set to JSONata.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EvaluationFailedEventDetails {
    /// <p>The error code of the failure.</p>
    pub error: ::std::option::Option<::std::string::String>,
    /// <p>A more detailed explanation of the cause of the failure.</p>
    pub cause: ::std::option::Option<::std::string::String>,
    /// <p>The location of the field in the state in which the evaluation error occurred.</p>
    pub location: ::std::option::Option<::std::string::String>,
    /// <p>The name of the state in which the evaluation error occurred.</p>
    pub state: ::std::string::String,
}
impl EvaluationFailedEventDetails {
    /// <p>The error code of the failure.</p>
    pub fn error(&self) -> ::std::option::Option<&str> {
        self.error.as_deref()
    }
    /// <p>A more detailed explanation of the cause of the failure.</p>
    pub fn cause(&self) -> ::std::option::Option<&str> {
        self.cause.as_deref()
    }
    /// <p>The location of the field in the state in which the evaluation error occurred.</p>
    pub fn location(&self) -> ::std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>The name of the state in which the evaluation error occurred.</p>
    pub fn state(&self) -> &str {
        use std::ops::Deref;
        self.state.deref()
    }
}
impl ::std::fmt::Debug for EvaluationFailedEventDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EvaluationFailedEventDetails");
        formatter.field("error", &"*** Sensitive Data Redacted ***");
        formatter.field("cause", &"*** Sensitive Data Redacted ***");
        formatter.field("location", &"*** Sensitive Data Redacted ***");
        formatter.field("state", &self.state);
        formatter.finish()
    }
}
impl EvaluationFailedEventDetails {
    /// Creates a new builder-style object to manufacture [`EvaluationFailedEventDetails`](crate::types::EvaluationFailedEventDetails).
    pub fn builder() -> crate::types::builders::EvaluationFailedEventDetailsBuilder {
        crate::types::builders::EvaluationFailedEventDetailsBuilder::default()
    }
}

/// A builder for [`EvaluationFailedEventDetails`](crate::types::EvaluationFailedEventDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct EvaluationFailedEventDetailsBuilder {
    pub(crate) error: ::std::option::Option<::std::string::String>,
    pub(crate) cause: ::std::option::Option<::std::string::String>,
    pub(crate) location: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<::std::string::String>,
}
impl EvaluationFailedEventDetailsBuilder {
    /// <p>The error code of the failure.</p>
    pub fn error(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error code of the failure.</p>
    pub fn set_error(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error = input;
        self
    }
    /// <p>The error code of the failure.</p>
    pub fn get_error(&self) -> &::std::option::Option<::std::string::String> {
        &self.error
    }
    /// <p>A more detailed explanation of the cause of the failure.</p>
    pub fn cause(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cause = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A more detailed explanation of the cause of the failure.</p>
    pub fn set_cause(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cause = input;
        self
    }
    /// <p>A more detailed explanation of the cause of the failure.</p>
    pub fn get_cause(&self) -> &::std::option::Option<::std::string::String> {
        &self.cause
    }
    /// <p>The location of the field in the state in which the evaluation error occurred.</p>
    pub fn location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The location of the field in the state in which the evaluation error occurred.</p>
    pub fn set_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>The location of the field in the state in which the evaluation error occurred.</p>
    pub fn get_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.location
    }
    /// <p>The name of the state in which the evaluation error occurred.</p>
    /// This field is required.
    pub fn state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the state in which the evaluation error occurred.</p>
    pub fn set_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>The name of the state in which the evaluation error occurred.</p>
    pub fn get_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.state
    }
    /// Consumes the builder and constructs a [`EvaluationFailedEventDetails`](crate::types::EvaluationFailedEventDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`state`](crate::types::builders::EvaluationFailedEventDetailsBuilder::state)
    pub fn build(self) -> ::std::result::Result<crate::types::EvaluationFailedEventDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EvaluationFailedEventDetails {
            error: self.error,
            cause: self.cause,
            location: self.location,
            state: self.state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "state",
                    "state was not specified but it is required when building EvaluationFailedEventDetails",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for EvaluationFailedEventDetailsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EvaluationFailedEventDetailsBuilder");
        formatter.field("error", &"*** Sensitive Data Redacted ***");
        formatter.field("cause", &"*** Sensitive Data Redacted ***");
        formatter.field("location", &"*** Sensitive Data Redacted ***");
        formatter.field("state", &self.state);
        formatter.finish()
    }
}
