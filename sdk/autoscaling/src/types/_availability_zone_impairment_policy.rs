// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an Availability Zone impairment policy.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AvailabilityZoneImpairmentPolicy {
    /// <p>If <code>true</code>, enable zonal shift for your Auto Scaling group.</p>
    pub zonal_shift_enabled: ::std::option::Option<bool>,
    /// <p>Specifies the health check behavior for the impaired Availability Zone in an active zonal shift. If you select <code>Replace unhealthy</code>, instances that appear unhealthy will be replaced in all Availability Zones. If you select <code>Ignore unhealthy</code>, instances will not be replaced in the Availability Zone with the active zonal shift. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-zonal-shift.html">Auto Scaling group zonal shift</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub impaired_zone_health_check_behavior: ::std::option::Option<crate::types::ImpairedZoneHealthCheckBehavior>,
}
impl AvailabilityZoneImpairmentPolicy {
    /// <p>If <code>true</code>, enable zonal shift for your Auto Scaling group.</p>
    pub fn zonal_shift_enabled(&self) -> ::std::option::Option<bool> {
        self.zonal_shift_enabled
    }
    /// <p>Specifies the health check behavior for the impaired Availability Zone in an active zonal shift. If you select <code>Replace unhealthy</code>, instances that appear unhealthy will be replaced in all Availability Zones. If you select <code>Ignore unhealthy</code>, instances will not be replaced in the Availability Zone with the active zonal shift. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-zonal-shift.html">Auto Scaling group zonal shift</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn impaired_zone_health_check_behavior(&self) -> ::std::option::Option<&crate::types::ImpairedZoneHealthCheckBehavior> {
        self.impaired_zone_health_check_behavior.as_ref()
    }
}
impl AvailabilityZoneImpairmentPolicy {
    /// Creates a new builder-style object to manufacture [`AvailabilityZoneImpairmentPolicy`](crate::types::AvailabilityZoneImpairmentPolicy).
    pub fn builder() -> crate::types::builders::AvailabilityZoneImpairmentPolicyBuilder {
        crate::types::builders::AvailabilityZoneImpairmentPolicyBuilder::default()
    }
}

/// A builder for [`AvailabilityZoneImpairmentPolicy`](crate::types::AvailabilityZoneImpairmentPolicy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AvailabilityZoneImpairmentPolicyBuilder {
    pub(crate) zonal_shift_enabled: ::std::option::Option<bool>,
    pub(crate) impaired_zone_health_check_behavior: ::std::option::Option<crate::types::ImpairedZoneHealthCheckBehavior>,
}
impl AvailabilityZoneImpairmentPolicyBuilder {
    /// <p>If <code>true</code>, enable zonal shift for your Auto Scaling group.</p>
    pub fn zonal_shift_enabled(mut self, input: bool) -> Self {
        self.zonal_shift_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>If <code>true</code>, enable zonal shift for your Auto Scaling group.</p>
    pub fn set_zonal_shift_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.zonal_shift_enabled = input;
        self
    }
    /// <p>If <code>true</code>, enable zonal shift for your Auto Scaling group.</p>
    pub fn get_zonal_shift_enabled(&self) -> &::std::option::Option<bool> {
        &self.zonal_shift_enabled
    }
    /// <p>Specifies the health check behavior for the impaired Availability Zone in an active zonal shift. If you select <code>Replace unhealthy</code>, instances that appear unhealthy will be replaced in all Availability Zones. If you select <code>Ignore unhealthy</code>, instances will not be replaced in the Availability Zone with the active zonal shift. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-zonal-shift.html">Auto Scaling group zonal shift</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn impaired_zone_health_check_behavior(mut self, input: crate::types::ImpairedZoneHealthCheckBehavior) -> Self {
        self.impaired_zone_health_check_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the health check behavior for the impaired Availability Zone in an active zonal shift. If you select <code>Replace unhealthy</code>, instances that appear unhealthy will be replaced in all Availability Zones. If you select <code>Ignore unhealthy</code>, instances will not be replaced in the Availability Zone with the active zonal shift. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-zonal-shift.html">Auto Scaling group zonal shift</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn set_impaired_zone_health_check_behavior(mut self, input: ::std::option::Option<crate::types::ImpairedZoneHealthCheckBehavior>) -> Self {
        self.impaired_zone_health_check_behavior = input;
        self
    }
    /// <p>Specifies the health check behavior for the impaired Availability Zone in an active zonal shift. If you select <code>Replace unhealthy</code>, instances that appear unhealthy will be replaced in all Availability Zones. If you select <code>Ignore unhealthy</code>, instances will not be replaced in the Availability Zone with the active zonal shift. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-zonal-shift.html">Auto Scaling group zonal shift</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn get_impaired_zone_health_check_behavior(&self) -> &::std::option::Option<crate::types::ImpairedZoneHealthCheckBehavior> {
        &self.impaired_zone_health_check_behavior
    }
    /// Consumes the builder and constructs a [`AvailabilityZoneImpairmentPolicy`](crate::types::AvailabilityZoneImpairmentPolicy).
    pub fn build(self) -> crate::types::AvailabilityZoneImpairmentPolicy {
        crate::types::AvailabilityZoneImpairmentPolicy {
            zonal_shift_enabled: self.zonal_shift_enabled,
            impaired_zone_health_check_behavior: self.impaired_zone_health_check_behavior,
        }
    }
}
