// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The target for the Capacity Reservation. Specify Capacity Reservations IDs or Capacity Reservation resource group ARNs.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CapacityReservationTarget {
    /// <p>The Capacity Reservation IDs to launch instances into.</p>
    pub capacity_reservation_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The resource group ARNs of the Capacity Reservation to launch instances into.</p>
    pub capacity_reservation_resource_group_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CapacityReservationTarget {
    /// <p>The Capacity Reservation IDs to launch instances into.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.capacity_reservation_ids.is_none()`.
    pub fn capacity_reservation_ids(&self) -> &[::std::string::String] {
        self.capacity_reservation_ids.as_deref().unwrap_or_default()
    }
    /// <p>The resource group ARNs of the Capacity Reservation to launch instances into.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.capacity_reservation_resource_group_arns.is_none()`.
    pub fn capacity_reservation_resource_group_arns(&self) -> &[::std::string::String] {
        self.capacity_reservation_resource_group_arns.as_deref().unwrap_or_default()
    }
}
impl CapacityReservationTarget {
    /// Creates a new builder-style object to manufacture [`CapacityReservationTarget`](crate::types::CapacityReservationTarget).
    pub fn builder() -> crate::types::builders::CapacityReservationTargetBuilder {
        crate::types::builders::CapacityReservationTargetBuilder::default()
    }
}

/// A builder for [`CapacityReservationTarget`](crate::types::CapacityReservationTarget).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CapacityReservationTargetBuilder {
    pub(crate) capacity_reservation_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) capacity_reservation_resource_group_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CapacityReservationTargetBuilder {
    /// Appends an item to `capacity_reservation_ids`.
    ///
    /// To override the contents of this collection use [`set_capacity_reservation_ids`](Self::set_capacity_reservation_ids).
    ///
    /// <p>The Capacity Reservation IDs to launch instances into.</p>
    pub fn capacity_reservation_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.capacity_reservation_ids.unwrap_or_default();
        v.push(input.into());
        self.capacity_reservation_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Capacity Reservation IDs to launch instances into.</p>
    pub fn set_capacity_reservation_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.capacity_reservation_ids = input;
        self
    }
    /// <p>The Capacity Reservation IDs to launch instances into.</p>
    pub fn get_capacity_reservation_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.capacity_reservation_ids
    }
    /// Appends an item to `capacity_reservation_resource_group_arns`.
    ///
    /// To override the contents of this collection use [`set_capacity_reservation_resource_group_arns`](Self::set_capacity_reservation_resource_group_arns).
    ///
    /// <p>The resource group ARNs of the Capacity Reservation to launch instances into.</p>
    pub fn capacity_reservation_resource_group_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.capacity_reservation_resource_group_arns.unwrap_or_default();
        v.push(input.into());
        self.capacity_reservation_resource_group_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The resource group ARNs of the Capacity Reservation to launch instances into.</p>
    pub fn set_capacity_reservation_resource_group_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.capacity_reservation_resource_group_arns = input;
        self
    }
    /// <p>The resource group ARNs of the Capacity Reservation to launch instances into.</p>
    pub fn get_capacity_reservation_resource_group_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.capacity_reservation_resource_group_arns
    }
    /// Consumes the builder and constructs a [`CapacityReservationTarget`](crate::types::CapacityReservationTarget).
    pub fn build(self) -> crate::types::CapacityReservationTarget {
        crate::types::CapacityReservationTarget {
            capacity_reservation_ids: self.capacity_reservation_ids,
            capacity_reservation_resource_group_arns: self.capacity_reservation_resource_group_arns,
        }
    }
}
