// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an Availability Zone distribution.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AvailabilityZoneDistribution {
    /// <p>If launches fail in an Availability Zone, the following strategies are available. The default is <code>balanced-best-effort</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>balanced-only</code> - If launches fail in an Availability Zone, Auto Scaling will continue to attempt to launch in the unhealthy zone to preserve a balanced distribution.</p></li>
    /// <li>
    /// <p><code>balanced-best-effort</code> - If launches fail in an Availability Zone, Auto Scaling will attempt to launch in another healthy Availability Zone instead.</p></li>
    /// </ul>
    pub capacity_distribution_strategy: ::std::option::Option<crate::types::CapacityDistributionStrategy>,
}
impl AvailabilityZoneDistribution {
    /// <p>If launches fail in an Availability Zone, the following strategies are available. The default is <code>balanced-best-effort</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>balanced-only</code> - If launches fail in an Availability Zone, Auto Scaling will continue to attempt to launch in the unhealthy zone to preserve a balanced distribution.</p></li>
    /// <li>
    /// <p><code>balanced-best-effort</code> - If launches fail in an Availability Zone, Auto Scaling will attempt to launch in another healthy Availability Zone instead.</p></li>
    /// </ul>
    pub fn capacity_distribution_strategy(&self) -> ::std::option::Option<&crate::types::CapacityDistributionStrategy> {
        self.capacity_distribution_strategy.as_ref()
    }
}
impl AvailabilityZoneDistribution {
    /// Creates a new builder-style object to manufacture [`AvailabilityZoneDistribution`](crate::types::AvailabilityZoneDistribution).
    pub fn builder() -> crate::types::builders::AvailabilityZoneDistributionBuilder {
        crate::types::builders::AvailabilityZoneDistributionBuilder::default()
    }
}

/// A builder for [`AvailabilityZoneDistribution`](crate::types::AvailabilityZoneDistribution).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AvailabilityZoneDistributionBuilder {
    pub(crate) capacity_distribution_strategy: ::std::option::Option<crate::types::CapacityDistributionStrategy>,
}
impl AvailabilityZoneDistributionBuilder {
    /// <p>If launches fail in an Availability Zone, the following strategies are available. The default is <code>balanced-best-effort</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>balanced-only</code> - If launches fail in an Availability Zone, Auto Scaling will continue to attempt to launch in the unhealthy zone to preserve a balanced distribution.</p></li>
    /// <li>
    /// <p><code>balanced-best-effort</code> - If launches fail in an Availability Zone, Auto Scaling will attempt to launch in another healthy Availability Zone instead.</p></li>
    /// </ul>
    pub fn capacity_distribution_strategy(mut self, input: crate::types::CapacityDistributionStrategy) -> Self {
        self.capacity_distribution_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>If launches fail in an Availability Zone, the following strategies are available. The default is <code>balanced-best-effort</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>balanced-only</code> - If launches fail in an Availability Zone, Auto Scaling will continue to attempt to launch in the unhealthy zone to preserve a balanced distribution.</p></li>
    /// <li>
    /// <p><code>balanced-best-effort</code> - If launches fail in an Availability Zone, Auto Scaling will attempt to launch in another healthy Availability Zone instead.</p></li>
    /// </ul>
    pub fn set_capacity_distribution_strategy(mut self, input: ::std::option::Option<crate::types::CapacityDistributionStrategy>) -> Self {
        self.capacity_distribution_strategy = input;
        self
    }
    /// <p>If launches fail in an Availability Zone, the following strategies are available. The default is <code>balanced-best-effort</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>balanced-only</code> - If launches fail in an Availability Zone, Auto Scaling will continue to attempt to launch in the unhealthy zone to preserve a balanced distribution.</p></li>
    /// <li>
    /// <p><code>balanced-best-effort</code> - If launches fail in an Availability Zone, Auto Scaling will attempt to launch in another healthy Availability Zone instead.</p></li>
    /// </ul>
    pub fn get_capacity_distribution_strategy(&self) -> &::std::option::Option<crate::types::CapacityDistributionStrategy> {
        &self.capacity_distribution_strategy
    }
    /// Consumes the builder and constructs a [`AvailabilityZoneDistribution`](crate::types::AvailabilityZoneDistribution).
    pub fn build(self) -> crate::types::AvailabilityZoneDistribution {
        crate::types::AvailabilityZoneDistribution {
            capacity_distribution_strategy: self.capacity_distribution_strategy,
        }
    }
}
