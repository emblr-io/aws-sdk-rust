// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that describes the context for a resource-level quota. For resource-level quotas, such as <code>Instances per OpenSearch Service Domain</code>, you can apply the quota value at the resource-level for each OpenSearch Service Domain in your Amazon Web Services account. Together the attributes of this structure help you understand how the quota is implemented by Amazon Web Services and how you can manage it. For quotas such as <code>Amazon OpenSearch Service Domains</code> which can be managed at the account-level for each Amazon Web Services Region, the <code>QuotaContext</code> field is absent. See the attribute descriptions below to further understand how to use them.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QuotaContextInfo {
    /// <p>Specifies the scope to which the quota value is applied. If the scope is <code>RESOURCE</code>, the quota value is applied to each resource in the Amazon Web Services account. If the scope is <code>ACCOUNT</code>, the quota value is applied to the Amazon Web Services account.</p>
    pub context_scope: ::std::option::Option<crate::types::QuotaContextScope>,
    /// <p>Specifies the resource type to which the quota can be applied.</p>
    pub context_scope_type: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the resource, or resources, to which the quota applies. The value for this field is either an Amazon Resource Name (ARN) or *. If the value is an ARN, the quota value applies to that resource. If the value is *, then the quota value applies to all resources listed in the <code>ContextScopeType</code> field. The quota value applies to all resources for which you haven’t previously applied a quota value, and any new resources you create in your Amazon Web Services account.</p>
    pub context_id: ::std::option::Option<::std::string::String>,
}
impl QuotaContextInfo {
    /// <p>Specifies the scope to which the quota value is applied. If the scope is <code>RESOURCE</code>, the quota value is applied to each resource in the Amazon Web Services account. If the scope is <code>ACCOUNT</code>, the quota value is applied to the Amazon Web Services account.</p>
    pub fn context_scope(&self) -> ::std::option::Option<&crate::types::QuotaContextScope> {
        self.context_scope.as_ref()
    }
    /// <p>Specifies the resource type to which the quota can be applied.</p>
    pub fn context_scope_type(&self) -> ::std::option::Option<&str> {
        self.context_scope_type.as_deref()
    }
    /// <p>Specifies the resource, or resources, to which the quota applies. The value for this field is either an Amazon Resource Name (ARN) or *. If the value is an ARN, the quota value applies to that resource. If the value is *, then the quota value applies to all resources listed in the <code>ContextScopeType</code> field. The quota value applies to all resources for which you haven’t previously applied a quota value, and any new resources you create in your Amazon Web Services account.</p>
    pub fn context_id(&self) -> ::std::option::Option<&str> {
        self.context_id.as_deref()
    }
}
impl QuotaContextInfo {
    /// Creates a new builder-style object to manufacture [`QuotaContextInfo`](crate::types::QuotaContextInfo).
    pub fn builder() -> crate::types::builders::QuotaContextInfoBuilder {
        crate::types::builders::QuotaContextInfoBuilder::default()
    }
}

/// A builder for [`QuotaContextInfo`](crate::types::QuotaContextInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QuotaContextInfoBuilder {
    pub(crate) context_scope: ::std::option::Option<crate::types::QuotaContextScope>,
    pub(crate) context_scope_type: ::std::option::Option<::std::string::String>,
    pub(crate) context_id: ::std::option::Option<::std::string::String>,
}
impl QuotaContextInfoBuilder {
    /// <p>Specifies the scope to which the quota value is applied. If the scope is <code>RESOURCE</code>, the quota value is applied to each resource in the Amazon Web Services account. If the scope is <code>ACCOUNT</code>, the quota value is applied to the Amazon Web Services account.</p>
    pub fn context_scope(mut self, input: crate::types::QuotaContextScope) -> Self {
        self.context_scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the scope to which the quota value is applied. If the scope is <code>RESOURCE</code>, the quota value is applied to each resource in the Amazon Web Services account. If the scope is <code>ACCOUNT</code>, the quota value is applied to the Amazon Web Services account.</p>
    pub fn set_context_scope(mut self, input: ::std::option::Option<crate::types::QuotaContextScope>) -> Self {
        self.context_scope = input;
        self
    }
    /// <p>Specifies the scope to which the quota value is applied. If the scope is <code>RESOURCE</code>, the quota value is applied to each resource in the Amazon Web Services account. If the scope is <code>ACCOUNT</code>, the quota value is applied to the Amazon Web Services account.</p>
    pub fn get_context_scope(&self) -> &::std::option::Option<crate::types::QuotaContextScope> {
        &self.context_scope
    }
    /// <p>Specifies the resource type to which the quota can be applied.</p>
    pub fn context_scope_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.context_scope_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the resource type to which the quota can be applied.</p>
    pub fn set_context_scope_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.context_scope_type = input;
        self
    }
    /// <p>Specifies the resource type to which the quota can be applied.</p>
    pub fn get_context_scope_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.context_scope_type
    }
    /// <p>Specifies the resource, or resources, to which the quota applies. The value for this field is either an Amazon Resource Name (ARN) or *. If the value is an ARN, the quota value applies to that resource. If the value is *, then the quota value applies to all resources listed in the <code>ContextScopeType</code> field. The quota value applies to all resources for which you haven’t previously applied a quota value, and any new resources you create in your Amazon Web Services account.</p>
    pub fn context_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.context_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the resource, or resources, to which the quota applies. The value for this field is either an Amazon Resource Name (ARN) or *. If the value is an ARN, the quota value applies to that resource. If the value is *, then the quota value applies to all resources listed in the <code>ContextScopeType</code> field. The quota value applies to all resources for which you haven’t previously applied a quota value, and any new resources you create in your Amazon Web Services account.</p>
    pub fn set_context_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.context_id = input;
        self
    }
    /// <p>Specifies the resource, or resources, to which the quota applies. The value for this field is either an Amazon Resource Name (ARN) or *. If the value is an ARN, the quota value applies to that resource. If the value is *, then the quota value applies to all resources listed in the <code>ContextScopeType</code> field. The quota value applies to all resources for which you haven’t previously applied a quota value, and any new resources you create in your Amazon Web Services account.</p>
    pub fn get_context_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.context_id
    }
    /// Consumes the builder and constructs a [`QuotaContextInfo`](crate::types::QuotaContextInfo).
    pub fn build(self) -> crate::types::QuotaContextInfo {
        crate::types::QuotaContextInfo {
            context_scope: self.context_scope,
            context_scope_type: self.context_scope_type,
            context_id: self.context_id,
        }
    }
}
