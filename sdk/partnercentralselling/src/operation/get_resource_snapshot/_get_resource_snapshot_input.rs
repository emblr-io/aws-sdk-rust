// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetResourceSnapshotInput {
    /// <p>Specifies the catalog related to the request. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p>AWS: Retrieves the snapshot from the production AWS environment.</p></li>
    /// <li>
    /// <p>Sandbox: Retrieves the snapshot from a sandbox environment used for testing or development purposes.</p></li>
    /// </ul>
    pub catalog: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the engagement associated with the snapshot. This field links the snapshot to a specific engagement context.</p>
    pub engagement_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the type of resource that was snapshotted. This field determines the structure and content of the snapshot payload. Valid value includes:<code>Opportunity</code>: For opportunity-related data.</p>
    pub resource_type: ::std::option::Option<crate::types::ResourceType>,
    /// <p>The unique identifier of the specific resource that was snapshotted. The format and constraints of this identifier depend on the ResourceType specified. For <code>Opportunity</code> type, it will be an <code>opportunity ID</code></p>
    pub resource_identifier: ::std::option::Option<::std::string::String>,
    /// <p>he name of the template that defines the schema for the snapshot. This template determines which subset of the resource data is included in the snapshot and must correspond to an existing and valid template for the specified <code>ResourceType</code>.</p>
    pub resource_snapshot_template_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Specifies which revision of the snapshot to retrieve. If omitted returns the latest revision.</p>
    pub revision: ::std::option::Option<i32>,
}
impl GetResourceSnapshotInput {
    /// <p>Specifies the catalog related to the request. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p>AWS: Retrieves the snapshot from the production AWS environment.</p></li>
    /// <li>
    /// <p>Sandbox: Retrieves the snapshot from a sandbox environment used for testing or development purposes.</p></li>
    /// </ul>
    pub fn catalog(&self) -> ::std::option::Option<&str> {
        self.catalog.as_deref()
    }
    /// <p>The unique identifier of the engagement associated with the snapshot. This field links the snapshot to a specific engagement context.</p>
    pub fn engagement_identifier(&self) -> ::std::option::Option<&str> {
        self.engagement_identifier.as_deref()
    }
    /// <p>Specifies the type of resource that was snapshotted. This field determines the structure and content of the snapshot payload. Valid value includes:<code>Opportunity</code>: For opportunity-related data.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The unique identifier of the specific resource that was snapshotted. The format and constraints of this identifier depend on the ResourceType specified. For <code>Opportunity</code> type, it will be an <code>opportunity ID</code></p>
    pub fn resource_identifier(&self) -> ::std::option::Option<&str> {
        self.resource_identifier.as_deref()
    }
    /// <p>he name of the template that defines the schema for the snapshot. This template determines which subset of the resource data is included in the snapshot and must correspond to an existing and valid template for the specified <code>ResourceType</code>.</p>
    pub fn resource_snapshot_template_identifier(&self) -> ::std::option::Option<&str> {
        self.resource_snapshot_template_identifier.as_deref()
    }
    /// <p>Specifies which revision of the snapshot to retrieve. If omitted returns the latest revision.</p>
    pub fn revision(&self) -> ::std::option::Option<i32> {
        self.revision
    }
}
impl GetResourceSnapshotInput {
    /// Creates a new builder-style object to manufacture [`GetResourceSnapshotInput`](crate::operation::get_resource_snapshot::GetResourceSnapshotInput).
    pub fn builder() -> crate::operation::get_resource_snapshot::builders::GetResourceSnapshotInputBuilder {
        crate::operation::get_resource_snapshot::builders::GetResourceSnapshotInputBuilder::default()
    }
}

/// A builder for [`GetResourceSnapshotInput`](crate::operation::get_resource_snapshot::GetResourceSnapshotInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetResourceSnapshotInputBuilder {
    pub(crate) catalog: ::std::option::Option<::std::string::String>,
    pub(crate) engagement_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<crate::types::ResourceType>,
    pub(crate) resource_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) resource_snapshot_template_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) revision: ::std::option::Option<i32>,
}
impl GetResourceSnapshotInputBuilder {
    /// <p>Specifies the catalog related to the request. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p>AWS: Retrieves the snapshot from the production AWS environment.</p></li>
    /// <li>
    /// <p>Sandbox: Retrieves the snapshot from a sandbox environment used for testing or development purposes.</p></li>
    /// </ul>
    /// This field is required.
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the catalog related to the request. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p>AWS: Retrieves the snapshot from the production AWS environment.</p></li>
    /// <li>
    /// <p>Sandbox: Retrieves the snapshot from a sandbox environment used for testing or development purposes.</p></li>
    /// </ul>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>Specifies the catalog related to the request. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p>AWS: Retrieves the snapshot from the production AWS environment.</p></li>
    /// <li>
    /// <p>Sandbox: Retrieves the snapshot from a sandbox environment used for testing or development purposes.</p></li>
    /// </ul>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog
    }
    /// <p>The unique identifier of the engagement associated with the snapshot. This field links the snapshot to a specific engagement context.</p>
    /// This field is required.
    pub fn engagement_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engagement_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the engagement associated with the snapshot. This field links the snapshot to a specific engagement context.</p>
    pub fn set_engagement_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engagement_identifier = input;
        self
    }
    /// <p>The unique identifier of the engagement associated with the snapshot. This field links the snapshot to a specific engagement context.</p>
    pub fn get_engagement_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.engagement_identifier
    }
    /// <p>Specifies the type of resource that was snapshotted. This field determines the structure and content of the snapshot payload. Valid value includes:<code>Opportunity</code>: For opportunity-related data.</p>
    /// This field is required.
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of resource that was snapshotted. This field determines the structure and content of the snapshot payload. Valid value includes:<code>Opportunity</code>: For opportunity-related data.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::ResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>Specifies the type of resource that was snapshotted. This field determines the structure and content of the snapshot payload. Valid value includes:<code>Opportunity</code>: For opportunity-related data.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::ResourceType> {
        &self.resource_type
    }
    /// <p>The unique identifier of the specific resource that was snapshotted. The format and constraints of this identifier depend on the ResourceType specified. For <code>Opportunity</code> type, it will be an <code>opportunity ID</code></p>
    /// This field is required.
    pub fn resource_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the specific resource that was snapshotted. The format and constraints of this identifier depend on the ResourceType specified. For <code>Opportunity</code> type, it will be an <code>opportunity ID</code></p>
    pub fn set_resource_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_identifier = input;
        self
    }
    /// <p>The unique identifier of the specific resource that was snapshotted. The format and constraints of this identifier depend on the ResourceType specified. For <code>Opportunity</code> type, it will be an <code>opportunity ID</code></p>
    pub fn get_resource_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_identifier
    }
    /// <p>he name of the template that defines the schema for the snapshot. This template determines which subset of the resource data is included in the snapshot and must correspond to an existing and valid template for the specified <code>ResourceType</code>.</p>
    /// This field is required.
    pub fn resource_snapshot_template_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_snapshot_template_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>he name of the template that defines the schema for the snapshot. This template determines which subset of the resource data is included in the snapshot and must correspond to an existing and valid template for the specified <code>ResourceType</code>.</p>
    pub fn set_resource_snapshot_template_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_snapshot_template_identifier = input;
        self
    }
    /// <p>he name of the template that defines the schema for the snapshot. This template determines which subset of the resource data is included in the snapshot and must correspond to an existing and valid template for the specified <code>ResourceType</code>.</p>
    pub fn get_resource_snapshot_template_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_snapshot_template_identifier
    }
    /// <p>Specifies which revision of the snapshot to retrieve. If omitted returns the latest revision.</p>
    pub fn revision(mut self, input: i32) -> Self {
        self.revision = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies which revision of the snapshot to retrieve. If omitted returns the latest revision.</p>
    pub fn set_revision(mut self, input: ::std::option::Option<i32>) -> Self {
        self.revision = input;
        self
    }
    /// <p>Specifies which revision of the snapshot to retrieve. If omitted returns the latest revision.</p>
    pub fn get_revision(&self) -> &::std::option::Option<i32> {
        &self.revision
    }
    /// Consumes the builder and constructs a [`GetResourceSnapshotInput`](crate::operation::get_resource_snapshot::GetResourceSnapshotInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_resource_snapshot::GetResourceSnapshotInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_resource_snapshot::GetResourceSnapshotInput {
            catalog: self.catalog,
            engagement_identifier: self.engagement_identifier,
            resource_type: self.resource_type,
            resource_identifier: self.resource_identifier,
            resource_snapshot_template_identifier: self.resource_snapshot_template_identifier,
            revision: self.revision,
        })
    }
}
