// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetResourceSnapshotOutput {
    /// <p>The catalog in which the snapshot was created. Matches the Catalog specified in the request.</p>
    pub catalog: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the resource snapshot.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The AWS account ID of the principal (user or role) who created the snapshot. This helps in tracking the origin of the snapshot.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the snapshot was created, in ISO 8601 format (e.g., "2023-06-01T14:30:00Z"). This allows for precise tracking of when the snapshot was taken.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The identifier of the engagement associated with this snapshot. Matches the EngagementIdentifier specified in the request.</p>
    pub engagement_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of the resource that was snapshotted. Matches the ResourceType specified in the request.</p>
    pub resource_type: ::std::option::Option<crate::types::ResourceType>,
    /// <p>The identifier of the specific resource that was snapshotted. Matches the ResourceIdentifier specified in the request.</p>
    pub resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the view used for this snapshot. This is the same as the template name.</p>
    pub resource_snapshot_template_name: ::std::option::Option<::std::string::String>,
    /// <p>The revision number of this snapshot. This is a positive integer that is sequential and unique within the context of a resource view.</p>
    pub revision: ::std::option::Option<i32>,
    /// <p>Represents the payload of a resource snapshot. This structure is designed to accommodate different types of resource snapshots, currently supporting opportunity summaries.</p>
    pub payload: ::std::option::Option<crate::types::ResourceSnapshotPayload>,
    _request_id: Option<String>,
}
impl GetResourceSnapshotOutput {
    /// <p>The catalog in which the snapshot was created. Matches the Catalog specified in the request.</p>
    pub fn catalog(&self) -> &str {
        use std::ops::Deref;
        self.catalog.deref()
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the resource snapshot.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The AWS account ID of the principal (user or role) who created the snapshot. This helps in tracking the origin of the snapshot.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The timestamp when the snapshot was created, in ISO 8601 format (e.g., "2023-06-01T14:30:00Z"). This allows for precise tracking of when the snapshot was taken.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The identifier of the engagement associated with this snapshot. Matches the EngagementIdentifier specified in the request.</p>
    pub fn engagement_id(&self) -> ::std::option::Option<&str> {
        self.engagement_id.as_deref()
    }
    /// <p>The type of the resource that was snapshotted. Matches the ResourceType specified in the request.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The identifier of the specific resource that was snapshotted. Matches the ResourceIdentifier specified in the request.</p>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The name of the view used for this snapshot. This is the same as the template name.</p>
    pub fn resource_snapshot_template_name(&self) -> ::std::option::Option<&str> {
        self.resource_snapshot_template_name.as_deref()
    }
    /// <p>The revision number of this snapshot. This is a positive integer that is sequential and unique within the context of a resource view.</p>
    pub fn revision(&self) -> ::std::option::Option<i32> {
        self.revision
    }
    /// <p>Represents the payload of a resource snapshot. This structure is designed to accommodate different types of resource snapshots, currently supporting opportunity summaries.</p>
    pub fn payload(&self) -> ::std::option::Option<&crate::types::ResourceSnapshotPayload> {
        self.payload.as_ref()
    }
}
impl ::std::fmt::Debug for GetResourceSnapshotOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetResourceSnapshotOutput");
        formatter.field("catalog", &self.catalog);
        formatter.field("arn", &self.arn);
        formatter.field("created_by", &"*** Sensitive Data Redacted ***");
        formatter.field("created_at", &self.created_at);
        formatter.field("engagement_id", &self.engagement_id);
        formatter.field("resource_type", &self.resource_type);
        formatter.field("resource_id", &self.resource_id);
        formatter.field("resource_snapshot_template_name", &self.resource_snapshot_template_name);
        formatter.field("revision", &self.revision);
        formatter.field("payload", &self.payload);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetResourceSnapshotOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetResourceSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`GetResourceSnapshotOutput`](crate::operation::get_resource_snapshot::GetResourceSnapshotOutput).
    pub fn builder() -> crate::operation::get_resource_snapshot::builders::GetResourceSnapshotOutputBuilder {
        crate::operation::get_resource_snapshot::builders::GetResourceSnapshotOutputBuilder::default()
    }
}

/// A builder for [`GetResourceSnapshotOutput`](crate::operation::get_resource_snapshot::GetResourceSnapshotOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetResourceSnapshotOutputBuilder {
    pub(crate) catalog: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) engagement_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<crate::types::ResourceType>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_snapshot_template_name: ::std::option::Option<::std::string::String>,
    pub(crate) revision: ::std::option::Option<i32>,
    pub(crate) payload: ::std::option::Option<crate::types::ResourceSnapshotPayload>,
    _request_id: Option<String>,
}
impl GetResourceSnapshotOutputBuilder {
    /// <p>The catalog in which the snapshot was created. Matches the Catalog specified in the request.</p>
    /// This field is required.
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The catalog in which the snapshot was created. Matches the Catalog specified in the request.</p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>The catalog in which the snapshot was created. Matches the Catalog specified in the request.</p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the resource snapshot.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the resource snapshot.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the resource snapshot.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The AWS account ID of the principal (user or role) who created the snapshot. This helps in tracking the origin of the snapshot.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS account ID of the principal (user or role) who created the snapshot. This helps in tracking the origin of the snapshot.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The AWS account ID of the principal (user or role) who created the snapshot. This helps in tracking the origin of the snapshot.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The timestamp when the snapshot was created, in ISO 8601 format (e.g., "2023-06-01T14:30:00Z"). This allows for precise tracking of when the snapshot was taken.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the snapshot was created, in ISO 8601 format (e.g., "2023-06-01T14:30:00Z"). This allows for precise tracking of when the snapshot was taken.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the snapshot was created, in ISO 8601 format (e.g., "2023-06-01T14:30:00Z"). This allows for precise tracking of when the snapshot was taken.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The identifier of the engagement associated with this snapshot. Matches the EngagementIdentifier specified in the request.</p>
    pub fn engagement_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engagement_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the engagement associated with this snapshot. Matches the EngagementIdentifier specified in the request.</p>
    pub fn set_engagement_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engagement_id = input;
        self
    }
    /// <p>The identifier of the engagement associated with this snapshot. Matches the EngagementIdentifier specified in the request.</p>
    pub fn get_engagement_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.engagement_id
    }
    /// <p>The type of the resource that was snapshotted. Matches the ResourceType specified in the request.</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the resource that was snapshotted. Matches the ResourceType specified in the request.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::ResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of the resource that was snapshotted. Matches the ResourceType specified in the request.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::ResourceType> {
        &self.resource_type
    }
    /// <p>The identifier of the specific resource that was snapshotted. Matches the ResourceIdentifier specified in the request.</p>
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the specific resource that was snapshotted. Matches the ResourceIdentifier specified in the request.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The identifier of the specific resource that was snapshotted. Matches the ResourceIdentifier specified in the request.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>The name of the view used for this snapshot. This is the same as the template name.</p>
    pub fn resource_snapshot_template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_snapshot_template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the view used for this snapshot. This is the same as the template name.</p>
    pub fn set_resource_snapshot_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_snapshot_template_name = input;
        self
    }
    /// <p>The name of the view used for this snapshot. This is the same as the template name.</p>
    pub fn get_resource_snapshot_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_snapshot_template_name
    }
    /// <p>The revision number of this snapshot. This is a positive integer that is sequential and unique within the context of a resource view.</p>
    pub fn revision(mut self, input: i32) -> Self {
        self.revision = ::std::option::Option::Some(input);
        self
    }
    /// <p>The revision number of this snapshot. This is a positive integer that is sequential and unique within the context of a resource view.</p>
    pub fn set_revision(mut self, input: ::std::option::Option<i32>) -> Self {
        self.revision = input;
        self
    }
    /// <p>The revision number of this snapshot. This is a positive integer that is sequential and unique within the context of a resource view.</p>
    pub fn get_revision(&self) -> &::std::option::Option<i32> {
        &self.revision
    }
    /// <p>Represents the payload of a resource snapshot. This structure is designed to accommodate different types of resource snapshots, currently supporting opportunity summaries.</p>
    pub fn payload(mut self, input: crate::types::ResourceSnapshotPayload) -> Self {
        self.payload = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the payload of a resource snapshot. This structure is designed to accommodate different types of resource snapshots, currently supporting opportunity summaries.</p>
    pub fn set_payload(mut self, input: ::std::option::Option<crate::types::ResourceSnapshotPayload>) -> Self {
        self.payload = input;
        self
    }
    /// <p>Represents the payload of a resource snapshot. This structure is designed to accommodate different types of resource snapshots, currently supporting opportunity summaries.</p>
    pub fn get_payload(&self) -> &::std::option::Option<crate::types::ResourceSnapshotPayload> {
        &self.payload
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetResourceSnapshotOutput`](crate::operation::get_resource_snapshot::GetResourceSnapshotOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`catalog`](crate::operation::get_resource_snapshot::builders::GetResourceSnapshotOutputBuilder::catalog)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_resource_snapshot::GetResourceSnapshotOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_resource_snapshot::GetResourceSnapshotOutput {
            catalog: self.catalog.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "catalog",
                    "catalog was not specified but it is required when building GetResourceSnapshotOutput",
                )
            })?,
            arn: self.arn,
            created_by: self.created_by,
            created_at: self.created_at,
            engagement_id: self.engagement_id,
            resource_type: self.resource_type,
            resource_id: self.resource_id,
            resource_snapshot_template_name: self.resource_snapshot_template_name,
            revision: self.revision,
            payload: self.payload,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetResourceSnapshotOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetResourceSnapshotOutputBuilder");
        formatter.field("catalog", &self.catalog);
        formatter.field("arn", &self.arn);
        formatter.field("created_by", &"*** Sensitive Data Redacted ***");
        formatter.field("created_at", &self.created_at);
        formatter.field("engagement_id", &self.engagement_id);
        formatter.field("resource_type", &self.resource_type);
        formatter.field("resource_id", &self.resource_id);
        formatter.field("resource_snapshot_template_name", &self.resource_snapshot_template_name);
        formatter.field("revision", &self.revision);
        formatter.field("payload", &self.payload);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
