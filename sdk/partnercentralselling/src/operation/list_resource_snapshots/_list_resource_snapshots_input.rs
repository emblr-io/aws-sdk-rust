// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListResourceSnapshotsInput {
    /// <p>Specifies the catalog related to the request.</p>
    pub catalog: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return in a single call.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The token for the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the engagement associated with the snapshots.</p>
    pub engagement_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Filters the response to include only snapshots of the specified resource type.</p>
    pub resource_type: ::std::option::Option<crate::types::ResourceType>,
    /// <p>Filters the response to include only snapshots of the specified resource.</p>
    pub resource_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Filters the response to include only snapshots created using the specified template.</p>
    pub resource_snapshot_template_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Filters the response to include only snapshots of resources owned by the specified AWS account.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
}
impl ListResourceSnapshotsInput {
    /// <p>Specifies the catalog related to the request.</p>
    pub fn catalog(&self) -> ::std::option::Option<&str> {
        self.catalog.as_deref()
    }
    /// <p>The maximum number of results to return in a single call.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token for the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The unique identifier of the engagement associated with the snapshots.</p>
    pub fn engagement_identifier(&self) -> ::std::option::Option<&str> {
        self.engagement_identifier.as_deref()
    }
    /// <p>Filters the response to include only snapshots of the specified resource type.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>Filters the response to include only snapshots of the specified resource.</p>
    pub fn resource_identifier(&self) -> ::std::option::Option<&str> {
        self.resource_identifier.as_deref()
    }
    /// <p>Filters the response to include only snapshots created using the specified template.</p>
    pub fn resource_snapshot_template_identifier(&self) -> ::std::option::Option<&str> {
        self.resource_snapshot_template_identifier.as_deref()
    }
    /// <p>Filters the response to include only snapshots of resources owned by the specified AWS account.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
}
impl ::std::fmt::Debug for ListResourceSnapshotsInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListResourceSnapshotsInput");
        formatter.field("catalog", &self.catalog);
        formatter.field("max_results", &self.max_results);
        formatter.field("next_token", &self.next_token);
        formatter.field("engagement_identifier", &self.engagement_identifier);
        formatter.field("resource_type", &self.resource_type);
        formatter.field("resource_identifier", &self.resource_identifier);
        formatter.field("resource_snapshot_template_identifier", &self.resource_snapshot_template_identifier);
        formatter.field("created_by", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ListResourceSnapshotsInput {
    /// Creates a new builder-style object to manufacture [`ListResourceSnapshotsInput`](crate::operation::list_resource_snapshots::ListResourceSnapshotsInput).
    pub fn builder() -> crate::operation::list_resource_snapshots::builders::ListResourceSnapshotsInputBuilder {
        crate::operation::list_resource_snapshots::builders::ListResourceSnapshotsInputBuilder::default()
    }
}

/// A builder for [`ListResourceSnapshotsInput`](crate::operation::list_resource_snapshots::ListResourceSnapshotsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ListResourceSnapshotsInputBuilder {
    pub(crate) catalog: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) engagement_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<crate::types::ResourceType>,
    pub(crate) resource_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) resource_snapshot_template_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
}
impl ListResourceSnapshotsInputBuilder {
    /// <p>Specifies the catalog related to the request.</p>
    /// This field is required.
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the catalog related to the request.</p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>Specifies the catalog related to the request.</p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog
    }
    /// <p>The maximum number of results to return in a single call.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return in a single call.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return in a single call.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The token for the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The unique identifier of the engagement associated with the snapshots.</p>
    /// This field is required.
    pub fn engagement_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engagement_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the engagement associated with the snapshots.</p>
    pub fn set_engagement_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engagement_identifier = input;
        self
    }
    /// <p>The unique identifier of the engagement associated with the snapshots.</p>
    pub fn get_engagement_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.engagement_identifier
    }
    /// <p>Filters the response to include only snapshots of the specified resource type.</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filters the response to include only snapshots of the specified resource type.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::ResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>Filters the response to include only snapshots of the specified resource type.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::ResourceType> {
        &self.resource_type
    }
    /// <p>Filters the response to include only snapshots of the specified resource.</p>
    pub fn resource_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filters the response to include only snapshots of the specified resource.</p>
    pub fn set_resource_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_identifier = input;
        self
    }
    /// <p>Filters the response to include only snapshots of the specified resource.</p>
    pub fn get_resource_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_identifier
    }
    /// <p>Filters the response to include only snapshots created using the specified template.</p>
    pub fn resource_snapshot_template_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_snapshot_template_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filters the response to include only snapshots created using the specified template.</p>
    pub fn set_resource_snapshot_template_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_snapshot_template_identifier = input;
        self
    }
    /// <p>Filters the response to include only snapshots created using the specified template.</p>
    pub fn get_resource_snapshot_template_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_snapshot_template_identifier
    }
    /// <p>Filters the response to include only snapshots of resources owned by the specified AWS account.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filters the response to include only snapshots of resources owned by the specified AWS account.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>Filters the response to include only snapshots of resources owned by the specified AWS account.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// Consumes the builder and constructs a [`ListResourceSnapshotsInput`](crate::operation::list_resource_snapshots::ListResourceSnapshotsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_resource_snapshots::ListResourceSnapshotsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_resource_snapshots::ListResourceSnapshotsInput {
            catalog: self.catalog,
            max_results: self.max_results,
            next_token: self.next_token,
            engagement_identifier: self.engagement_identifier,
            resource_type: self.resource_type,
            resource_identifier: self.resource_identifier,
            resource_snapshot_template_identifier: self.resource_snapshot_template_identifier,
            created_by: self.created_by,
        })
    }
}
impl ::std::fmt::Debug for ListResourceSnapshotsInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListResourceSnapshotsInputBuilder");
        formatter.field("catalog", &self.catalog);
        formatter.field("max_results", &self.max_results);
        formatter.field("next_token", &self.next_token);
        formatter.field("engagement_identifier", &self.engagement_identifier);
        formatter.field("resource_type", &self.resource_type);
        formatter.field("resource_identifier", &self.resource_identifier);
        formatter.field("resource_snapshot_template_identifier", &self.resource_snapshot_template_identifier);
        formatter.field("created_by", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
