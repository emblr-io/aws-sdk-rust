// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetOpportunityOutput {
    /// <p>Specifies the catalog associated with the request. This field takes a string value from a predefined list: <code>AWS</code> or <code>Sandbox</code>. The catalog determines which environment the opportunity information is retrieved from. Use <code>AWS</code> to retrieve opportunities in the Amazon Web Services catalog, and <code>Sandbox</code> to retrieve opportunities in a secure and isolated testing environment.</p>
    pub catalog: ::std::string::String,
    /// <p>Identifies the type of support the partner needs from Amazon Web Services.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p>Cosell—Architectural Validation: Confirmation from Amazon Web Services that the partner's proposed solution architecture is aligned with Amazon Web Services best practices and poses minimal architectural risks.</p></li>
    /// <li>
    /// <p>Cosell—Business Presentation: Request Amazon Web Services seller's participation in a joint customer presentation.</p></li>
    /// <li>
    /// <p>Cosell—Competitive Information: Access to Amazon Web Services competitive resources and support for the partner's proposed solution.</p></li>
    /// <li>
    /// <p>Cosell—Pricing Assistance: Connect with an Amazon Web Services seller for support situations where a partner may be receiving an upfront discount on a service (for example: EDP deals).</p></li>
    /// <li>
    /// <p>Cosell—Technical Consultation: Connect with an Amazon Web Services Solutions Architect to address the partner's questions about the proposed solution.</p></li>
    /// <li>
    /// <p>Cosell—Total Cost of Ownership Evaluation: Assistance with quoting different cost savings of proposed solutions on Amazon Web Services versus on-premises or a traditional hosting environment.</p></li>
    /// <li>
    /// <p>Cosell—Deal Support: Request Amazon Web Services seller's support to progress the opportunity (for example: joint customer call, strategic positioning).</p></li>
    /// <li>
    /// <p>Cosell—Support for Public Tender/RFx: Opportunity related to the public sector where the partner needs Amazon Web Services RFx support.</p></li>
    /// </ul>
    pub primary_needs_from_aws: ::std::option::Option<::std::vec::Vec<crate::types::PrimaryNeedFromAws>>,
    /// <p>Indicates whether the <code>Opportunity</code> pertains to a national security project. This field must be set to <code>true</code> only when the customer's industry is <i>Government</i>. Additional privacy and security measures apply during the review and management process for opportunities marked as <code>NationalSecurity</code>.</p>
    pub national_security: ::std::option::Option<crate::types::NationalSecurity>,
    /// <p>Specifies the opportunity's unique identifier in the partner's CRM system. This value is essential to track and reconcile because it's included in the outbound payload sent back to the partner.</p>
    pub partner_opportunity_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Specifies details of the customer associated with the <code>Opportunity</code>.</p>
    pub customer: ::std::option::Option<crate::types::Customer>,
    /// <p>An object that contains project details summary for the <code>Opportunity</code>.</p>
    pub project: ::std::option::Option<crate::types::Project>,
    /// <p>Specifies the opportunity type as renewal, new, or expansion.</p>
    /// <p>Opportunity types:</p>
    /// <ul>
    /// <li>
    /// <p>New opportunity: Represents a new business opportunity with a potential customer that's not previously engaged with your solutions or services.</p></li>
    /// <li>
    /// <p>Renewal opportunity: Represents an opportunity to renew an existing contract or subscription with a current customer, which helps to ensure service continuity.</p></li>
    /// <li>
    /// <p>Expansion opportunity: Represents an opportunity to expand the scope of a customer's contract or subscription, either by adding new services or increasing the volume of existing services.</p></li>
    /// </ul>
    pub opportunity_type: ::std::option::Option<crate::types::OpportunityType>,
    /// <p>An object that contains marketing details for the <code>Opportunity</code>.</p>
    pub marketing: ::std::option::Option<crate::types::Marketing>,
    /// <p>Specifies details of a customer's procurement terms. Required only for partners in eligible programs.</p>
    pub software_revenue: ::std::option::Option<crate::types::SoftwareRevenue>,
    /// <p>Read-only, system generated <code>Opportunity</code> unique identifier.</p>
    pub id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the opportunity.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p><code>DateTime</code> when the opportunity was last modified.</p>
    pub last_modified_date: ::aws_smithy_types::DateTime,
    /// <p><code>DateTime</code> when the <code>Opportunity</code> was last created.</p>
    pub created_date: ::aws_smithy_types::DateTime,
    /// <p>Provides information about the associations of other entities with the opportunity. These entities include identifiers for <code>AWSProducts</code>, <code>Partner Solutions</code>, and <code>AWSMarketplaceOffers</code>.</p>
    pub related_entity_identifiers: ::std::option::Option<crate::types::RelatedEntityIdentifiers>,
    /// <p>An object that contains lifecycle details for the <code>Opportunity</code>.</p>
    pub life_cycle: ::std::option::Option<crate::types::LifeCycle>,
    /// <p>Represents the internal team handling the opportunity. Specify the members involved in collaborating on this opportunity within the partner's organization.</p>
    pub opportunity_team: ::std::option::Option<::std::vec::Vec<crate::types::Contact>>,
    _request_id: Option<String>,
}
impl GetOpportunityOutput {
    /// <p>Specifies the catalog associated with the request. This field takes a string value from a predefined list: <code>AWS</code> or <code>Sandbox</code>. The catalog determines which environment the opportunity information is retrieved from. Use <code>AWS</code> to retrieve opportunities in the Amazon Web Services catalog, and <code>Sandbox</code> to retrieve opportunities in a secure and isolated testing environment.</p>
    pub fn catalog(&self) -> &str {
        use std::ops::Deref;
        self.catalog.deref()
    }
    /// <p>Identifies the type of support the partner needs from Amazon Web Services.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p>Cosell—Architectural Validation: Confirmation from Amazon Web Services that the partner's proposed solution architecture is aligned with Amazon Web Services best practices and poses minimal architectural risks.</p></li>
    /// <li>
    /// <p>Cosell—Business Presentation: Request Amazon Web Services seller's participation in a joint customer presentation.</p></li>
    /// <li>
    /// <p>Cosell—Competitive Information: Access to Amazon Web Services competitive resources and support for the partner's proposed solution.</p></li>
    /// <li>
    /// <p>Cosell—Pricing Assistance: Connect with an Amazon Web Services seller for support situations where a partner may be receiving an upfront discount on a service (for example: EDP deals).</p></li>
    /// <li>
    /// <p>Cosell—Technical Consultation: Connect with an Amazon Web Services Solutions Architect to address the partner's questions about the proposed solution.</p></li>
    /// <li>
    /// <p>Cosell—Total Cost of Ownership Evaluation: Assistance with quoting different cost savings of proposed solutions on Amazon Web Services versus on-premises or a traditional hosting environment.</p></li>
    /// <li>
    /// <p>Cosell—Deal Support: Request Amazon Web Services seller's support to progress the opportunity (for example: joint customer call, strategic positioning).</p></li>
    /// <li>
    /// <p>Cosell—Support for Public Tender/RFx: Opportunity related to the public sector where the partner needs Amazon Web Services RFx support.</p></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.primary_needs_from_aws.is_none()`.
    pub fn primary_needs_from_aws(&self) -> &[crate::types::PrimaryNeedFromAws] {
        self.primary_needs_from_aws.as_deref().unwrap_or_default()
    }
    /// <p>Indicates whether the <code>Opportunity</code> pertains to a national security project. This field must be set to <code>true</code> only when the customer's industry is <i>Government</i>. Additional privacy and security measures apply during the review and management process for opportunities marked as <code>NationalSecurity</code>.</p>
    pub fn national_security(&self) -> ::std::option::Option<&crate::types::NationalSecurity> {
        self.national_security.as_ref()
    }
    /// <p>Specifies the opportunity's unique identifier in the partner's CRM system. This value is essential to track and reconcile because it's included in the outbound payload sent back to the partner.</p>
    pub fn partner_opportunity_identifier(&self) -> ::std::option::Option<&str> {
        self.partner_opportunity_identifier.as_deref()
    }
    /// <p>Specifies details of the customer associated with the <code>Opportunity</code>.</p>
    pub fn customer(&self) -> ::std::option::Option<&crate::types::Customer> {
        self.customer.as_ref()
    }
    /// <p>An object that contains project details summary for the <code>Opportunity</code>.</p>
    pub fn project(&self) -> ::std::option::Option<&crate::types::Project> {
        self.project.as_ref()
    }
    /// <p>Specifies the opportunity type as renewal, new, or expansion.</p>
    /// <p>Opportunity types:</p>
    /// <ul>
    /// <li>
    /// <p>New opportunity: Represents a new business opportunity with a potential customer that's not previously engaged with your solutions or services.</p></li>
    /// <li>
    /// <p>Renewal opportunity: Represents an opportunity to renew an existing contract or subscription with a current customer, which helps to ensure service continuity.</p></li>
    /// <li>
    /// <p>Expansion opportunity: Represents an opportunity to expand the scope of a customer's contract or subscription, either by adding new services or increasing the volume of existing services.</p></li>
    /// </ul>
    pub fn opportunity_type(&self) -> ::std::option::Option<&crate::types::OpportunityType> {
        self.opportunity_type.as_ref()
    }
    /// <p>An object that contains marketing details for the <code>Opportunity</code>.</p>
    pub fn marketing(&self) -> ::std::option::Option<&crate::types::Marketing> {
        self.marketing.as_ref()
    }
    /// <p>Specifies details of a customer's procurement terms. Required only for partners in eligible programs.</p>
    pub fn software_revenue(&self) -> ::std::option::Option<&crate::types::SoftwareRevenue> {
        self.software_revenue.as_ref()
    }
    /// <p>Read-only, system generated <code>Opportunity</code> unique identifier.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the opportunity.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p><code>DateTime</code> when the opportunity was last modified.</p>
    pub fn last_modified_date(&self) -> &::aws_smithy_types::DateTime {
        &self.last_modified_date
    }
    /// <p><code>DateTime</code> when the <code>Opportunity</code> was last created.</p>
    pub fn created_date(&self) -> &::aws_smithy_types::DateTime {
        &self.created_date
    }
    /// <p>Provides information about the associations of other entities with the opportunity. These entities include identifiers for <code>AWSProducts</code>, <code>Partner Solutions</code>, and <code>AWSMarketplaceOffers</code>.</p>
    pub fn related_entity_identifiers(&self) -> ::std::option::Option<&crate::types::RelatedEntityIdentifiers> {
        self.related_entity_identifiers.as_ref()
    }
    /// <p>An object that contains lifecycle details for the <code>Opportunity</code>.</p>
    pub fn life_cycle(&self) -> ::std::option::Option<&crate::types::LifeCycle> {
        self.life_cycle.as_ref()
    }
    /// <p>Represents the internal team handling the opportunity. Specify the members involved in collaborating on this opportunity within the partner's organization.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.opportunity_team.is_none()`.
    pub fn opportunity_team(&self) -> &[crate::types::Contact] {
        self.opportunity_team.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for GetOpportunityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetOpportunityOutput {
    /// Creates a new builder-style object to manufacture [`GetOpportunityOutput`](crate::operation::get_opportunity::GetOpportunityOutput).
    pub fn builder() -> crate::operation::get_opportunity::builders::GetOpportunityOutputBuilder {
        crate::operation::get_opportunity::builders::GetOpportunityOutputBuilder::default()
    }
}

/// A builder for [`GetOpportunityOutput`](crate::operation::get_opportunity::GetOpportunityOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetOpportunityOutputBuilder {
    pub(crate) catalog: ::std::option::Option<::std::string::String>,
    pub(crate) primary_needs_from_aws: ::std::option::Option<::std::vec::Vec<crate::types::PrimaryNeedFromAws>>,
    pub(crate) national_security: ::std::option::Option<crate::types::NationalSecurity>,
    pub(crate) partner_opportunity_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) customer: ::std::option::Option<crate::types::Customer>,
    pub(crate) project: ::std::option::Option<crate::types::Project>,
    pub(crate) opportunity_type: ::std::option::Option<crate::types::OpportunityType>,
    pub(crate) marketing: ::std::option::Option<crate::types::Marketing>,
    pub(crate) software_revenue: ::std::option::Option<crate::types::SoftwareRevenue>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) last_modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) related_entity_identifiers: ::std::option::Option<crate::types::RelatedEntityIdentifiers>,
    pub(crate) life_cycle: ::std::option::Option<crate::types::LifeCycle>,
    pub(crate) opportunity_team: ::std::option::Option<::std::vec::Vec<crate::types::Contact>>,
    _request_id: Option<String>,
}
impl GetOpportunityOutputBuilder {
    /// <p>Specifies the catalog associated with the request. This field takes a string value from a predefined list: <code>AWS</code> or <code>Sandbox</code>. The catalog determines which environment the opportunity information is retrieved from. Use <code>AWS</code> to retrieve opportunities in the Amazon Web Services catalog, and <code>Sandbox</code> to retrieve opportunities in a secure and isolated testing environment.</p>
    /// This field is required.
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the catalog associated with the request. This field takes a string value from a predefined list: <code>AWS</code> or <code>Sandbox</code>. The catalog determines which environment the opportunity information is retrieved from. Use <code>AWS</code> to retrieve opportunities in the Amazon Web Services catalog, and <code>Sandbox</code> to retrieve opportunities in a secure and isolated testing environment.</p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>Specifies the catalog associated with the request. This field takes a string value from a predefined list: <code>AWS</code> or <code>Sandbox</code>. The catalog determines which environment the opportunity information is retrieved from. Use <code>AWS</code> to retrieve opportunities in the Amazon Web Services catalog, and <code>Sandbox</code> to retrieve opportunities in a secure and isolated testing environment.</p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog
    }
    /// Appends an item to `primary_needs_from_aws`.
    ///
    /// To override the contents of this collection use [`set_primary_needs_from_aws`](Self::set_primary_needs_from_aws).
    ///
    /// <p>Identifies the type of support the partner needs from Amazon Web Services.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p>Cosell—Architectural Validation: Confirmation from Amazon Web Services that the partner's proposed solution architecture is aligned with Amazon Web Services best practices and poses minimal architectural risks.</p></li>
    /// <li>
    /// <p>Cosell—Business Presentation: Request Amazon Web Services seller's participation in a joint customer presentation.</p></li>
    /// <li>
    /// <p>Cosell—Competitive Information: Access to Amazon Web Services competitive resources and support for the partner's proposed solution.</p></li>
    /// <li>
    /// <p>Cosell—Pricing Assistance: Connect with an Amazon Web Services seller for support situations where a partner may be receiving an upfront discount on a service (for example: EDP deals).</p></li>
    /// <li>
    /// <p>Cosell—Technical Consultation: Connect with an Amazon Web Services Solutions Architect to address the partner's questions about the proposed solution.</p></li>
    /// <li>
    /// <p>Cosell—Total Cost of Ownership Evaluation: Assistance with quoting different cost savings of proposed solutions on Amazon Web Services versus on-premises or a traditional hosting environment.</p></li>
    /// <li>
    /// <p>Cosell—Deal Support: Request Amazon Web Services seller's support to progress the opportunity (for example: joint customer call, strategic positioning).</p></li>
    /// <li>
    /// <p>Cosell—Support for Public Tender/RFx: Opportunity related to the public sector where the partner needs Amazon Web Services RFx support.</p></li>
    /// </ul>
    pub fn primary_needs_from_aws(mut self, input: crate::types::PrimaryNeedFromAws) -> Self {
        let mut v = self.primary_needs_from_aws.unwrap_or_default();
        v.push(input);
        self.primary_needs_from_aws = ::std::option::Option::Some(v);
        self
    }
    /// <p>Identifies the type of support the partner needs from Amazon Web Services.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p>Cosell—Architectural Validation: Confirmation from Amazon Web Services that the partner's proposed solution architecture is aligned with Amazon Web Services best practices and poses minimal architectural risks.</p></li>
    /// <li>
    /// <p>Cosell—Business Presentation: Request Amazon Web Services seller's participation in a joint customer presentation.</p></li>
    /// <li>
    /// <p>Cosell—Competitive Information: Access to Amazon Web Services competitive resources and support for the partner's proposed solution.</p></li>
    /// <li>
    /// <p>Cosell—Pricing Assistance: Connect with an Amazon Web Services seller for support situations where a partner may be receiving an upfront discount on a service (for example: EDP deals).</p></li>
    /// <li>
    /// <p>Cosell—Technical Consultation: Connect with an Amazon Web Services Solutions Architect to address the partner's questions about the proposed solution.</p></li>
    /// <li>
    /// <p>Cosell—Total Cost of Ownership Evaluation: Assistance with quoting different cost savings of proposed solutions on Amazon Web Services versus on-premises or a traditional hosting environment.</p></li>
    /// <li>
    /// <p>Cosell—Deal Support: Request Amazon Web Services seller's support to progress the opportunity (for example: joint customer call, strategic positioning).</p></li>
    /// <li>
    /// <p>Cosell—Support for Public Tender/RFx: Opportunity related to the public sector where the partner needs Amazon Web Services RFx support.</p></li>
    /// </ul>
    pub fn set_primary_needs_from_aws(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PrimaryNeedFromAws>>) -> Self {
        self.primary_needs_from_aws = input;
        self
    }
    /// <p>Identifies the type of support the partner needs from Amazon Web Services.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p>Cosell—Architectural Validation: Confirmation from Amazon Web Services that the partner's proposed solution architecture is aligned with Amazon Web Services best practices and poses minimal architectural risks.</p></li>
    /// <li>
    /// <p>Cosell—Business Presentation: Request Amazon Web Services seller's participation in a joint customer presentation.</p></li>
    /// <li>
    /// <p>Cosell—Competitive Information: Access to Amazon Web Services competitive resources and support for the partner's proposed solution.</p></li>
    /// <li>
    /// <p>Cosell—Pricing Assistance: Connect with an Amazon Web Services seller for support situations where a partner may be receiving an upfront discount on a service (for example: EDP deals).</p></li>
    /// <li>
    /// <p>Cosell—Technical Consultation: Connect with an Amazon Web Services Solutions Architect to address the partner's questions about the proposed solution.</p></li>
    /// <li>
    /// <p>Cosell—Total Cost of Ownership Evaluation: Assistance with quoting different cost savings of proposed solutions on Amazon Web Services versus on-premises or a traditional hosting environment.</p></li>
    /// <li>
    /// <p>Cosell—Deal Support: Request Amazon Web Services seller's support to progress the opportunity (for example: joint customer call, strategic positioning).</p></li>
    /// <li>
    /// <p>Cosell—Support for Public Tender/RFx: Opportunity related to the public sector where the partner needs Amazon Web Services RFx support.</p></li>
    /// </ul>
    pub fn get_primary_needs_from_aws(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PrimaryNeedFromAws>> {
        &self.primary_needs_from_aws
    }
    /// <p>Indicates whether the <code>Opportunity</code> pertains to a national security project. This field must be set to <code>true</code> only when the customer's industry is <i>Government</i>. Additional privacy and security measures apply during the review and management process for opportunities marked as <code>NationalSecurity</code>.</p>
    pub fn national_security(mut self, input: crate::types::NationalSecurity) -> Self {
        self.national_security = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the <code>Opportunity</code> pertains to a national security project. This field must be set to <code>true</code> only when the customer's industry is <i>Government</i>. Additional privacy and security measures apply during the review and management process for opportunities marked as <code>NationalSecurity</code>.</p>
    pub fn set_national_security(mut self, input: ::std::option::Option<crate::types::NationalSecurity>) -> Self {
        self.national_security = input;
        self
    }
    /// <p>Indicates whether the <code>Opportunity</code> pertains to a national security project. This field must be set to <code>true</code> only when the customer's industry is <i>Government</i>. Additional privacy and security measures apply during the review and management process for opportunities marked as <code>NationalSecurity</code>.</p>
    pub fn get_national_security(&self) -> &::std::option::Option<crate::types::NationalSecurity> {
        &self.national_security
    }
    /// <p>Specifies the opportunity's unique identifier in the partner's CRM system. This value is essential to track and reconcile because it's included in the outbound payload sent back to the partner.</p>
    pub fn partner_opportunity_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.partner_opportunity_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the opportunity's unique identifier in the partner's CRM system. This value is essential to track and reconcile because it's included in the outbound payload sent back to the partner.</p>
    pub fn set_partner_opportunity_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.partner_opportunity_identifier = input;
        self
    }
    /// <p>Specifies the opportunity's unique identifier in the partner's CRM system. This value is essential to track and reconcile because it's included in the outbound payload sent back to the partner.</p>
    pub fn get_partner_opportunity_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.partner_opportunity_identifier
    }
    /// <p>Specifies details of the customer associated with the <code>Opportunity</code>.</p>
    pub fn customer(mut self, input: crate::types::Customer) -> Self {
        self.customer = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies details of the customer associated with the <code>Opportunity</code>.</p>
    pub fn set_customer(mut self, input: ::std::option::Option<crate::types::Customer>) -> Self {
        self.customer = input;
        self
    }
    /// <p>Specifies details of the customer associated with the <code>Opportunity</code>.</p>
    pub fn get_customer(&self) -> &::std::option::Option<crate::types::Customer> {
        &self.customer
    }
    /// <p>An object that contains project details summary for the <code>Opportunity</code>.</p>
    pub fn project(mut self, input: crate::types::Project) -> Self {
        self.project = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains project details summary for the <code>Opportunity</code>.</p>
    pub fn set_project(mut self, input: ::std::option::Option<crate::types::Project>) -> Self {
        self.project = input;
        self
    }
    /// <p>An object that contains project details summary for the <code>Opportunity</code>.</p>
    pub fn get_project(&self) -> &::std::option::Option<crate::types::Project> {
        &self.project
    }
    /// <p>Specifies the opportunity type as renewal, new, or expansion.</p>
    /// <p>Opportunity types:</p>
    /// <ul>
    /// <li>
    /// <p>New opportunity: Represents a new business opportunity with a potential customer that's not previously engaged with your solutions or services.</p></li>
    /// <li>
    /// <p>Renewal opportunity: Represents an opportunity to renew an existing contract or subscription with a current customer, which helps to ensure service continuity.</p></li>
    /// <li>
    /// <p>Expansion opportunity: Represents an opportunity to expand the scope of a customer's contract or subscription, either by adding new services or increasing the volume of existing services.</p></li>
    /// </ul>
    pub fn opportunity_type(mut self, input: crate::types::OpportunityType) -> Self {
        self.opportunity_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the opportunity type as renewal, new, or expansion.</p>
    /// <p>Opportunity types:</p>
    /// <ul>
    /// <li>
    /// <p>New opportunity: Represents a new business opportunity with a potential customer that's not previously engaged with your solutions or services.</p></li>
    /// <li>
    /// <p>Renewal opportunity: Represents an opportunity to renew an existing contract or subscription with a current customer, which helps to ensure service continuity.</p></li>
    /// <li>
    /// <p>Expansion opportunity: Represents an opportunity to expand the scope of a customer's contract or subscription, either by adding new services or increasing the volume of existing services.</p></li>
    /// </ul>
    pub fn set_opportunity_type(mut self, input: ::std::option::Option<crate::types::OpportunityType>) -> Self {
        self.opportunity_type = input;
        self
    }
    /// <p>Specifies the opportunity type as renewal, new, or expansion.</p>
    /// <p>Opportunity types:</p>
    /// <ul>
    /// <li>
    /// <p>New opportunity: Represents a new business opportunity with a potential customer that's not previously engaged with your solutions or services.</p></li>
    /// <li>
    /// <p>Renewal opportunity: Represents an opportunity to renew an existing contract or subscription with a current customer, which helps to ensure service continuity.</p></li>
    /// <li>
    /// <p>Expansion opportunity: Represents an opportunity to expand the scope of a customer's contract or subscription, either by adding new services or increasing the volume of existing services.</p></li>
    /// </ul>
    pub fn get_opportunity_type(&self) -> &::std::option::Option<crate::types::OpportunityType> {
        &self.opportunity_type
    }
    /// <p>An object that contains marketing details for the <code>Opportunity</code>.</p>
    pub fn marketing(mut self, input: crate::types::Marketing) -> Self {
        self.marketing = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains marketing details for the <code>Opportunity</code>.</p>
    pub fn set_marketing(mut self, input: ::std::option::Option<crate::types::Marketing>) -> Self {
        self.marketing = input;
        self
    }
    /// <p>An object that contains marketing details for the <code>Opportunity</code>.</p>
    pub fn get_marketing(&self) -> &::std::option::Option<crate::types::Marketing> {
        &self.marketing
    }
    /// <p>Specifies details of a customer's procurement terms. Required only for partners in eligible programs.</p>
    pub fn software_revenue(mut self, input: crate::types::SoftwareRevenue) -> Self {
        self.software_revenue = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies details of a customer's procurement terms. Required only for partners in eligible programs.</p>
    pub fn set_software_revenue(mut self, input: ::std::option::Option<crate::types::SoftwareRevenue>) -> Self {
        self.software_revenue = input;
        self
    }
    /// <p>Specifies details of a customer's procurement terms. Required only for partners in eligible programs.</p>
    pub fn get_software_revenue(&self) -> &::std::option::Option<crate::types::SoftwareRevenue> {
        &self.software_revenue
    }
    /// <p>Read-only, system generated <code>Opportunity</code> unique identifier.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Read-only, system generated <code>Opportunity</code> unique identifier.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>Read-only, system generated <code>Opportunity</code> unique identifier.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the opportunity.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the opportunity.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the opportunity.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p><code>DateTime</code> when the opportunity was last modified.</p>
    /// This field is required.
    pub fn last_modified_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_date = ::std::option::Option::Some(input);
        self
    }
    /// <p><code>DateTime</code> when the opportunity was last modified.</p>
    pub fn set_last_modified_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p><code>DateTime</code> when the opportunity was last modified.</p>
    pub fn get_last_modified_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_date
    }
    /// <p><code>DateTime</code> when the <code>Opportunity</code> was last created.</p>
    /// This field is required.
    pub fn created_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_date = ::std::option::Option::Some(input);
        self
    }
    /// <p><code>DateTime</code> when the <code>Opportunity</code> was last created.</p>
    pub fn set_created_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_date = input;
        self
    }
    /// <p><code>DateTime</code> when the <code>Opportunity</code> was last created.</p>
    pub fn get_created_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_date
    }
    /// <p>Provides information about the associations of other entities with the opportunity. These entities include identifiers for <code>AWSProducts</code>, <code>Partner Solutions</code>, and <code>AWSMarketplaceOffers</code>.</p>
    /// This field is required.
    pub fn related_entity_identifiers(mut self, input: crate::types::RelatedEntityIdentifiers) -> Self {
        self.related_entity_identifiers = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides information about the associations of other entities with the opportunity. These entities include identifiers for <code>AWSProducts</code>, <code>Partner Solutions</code>, and <code>AWSMarketplaceOffers</code>.</p>
    pub fn set_related_entity_identifiers(mut self, input: ::std::option::Option<crate::types::RelatedEntityIdentifiers>) -> Self {
        self.related_entity_identifiers = input;
        self
    }
    /// <p>Provides information about the associations of other entities with the opportunity. These entities include identifiers for <code>AWSProducts</code>, <code>Partner Solutions</code>, and <code>AWSMarketplaceOffers</code>.</p>
    pub fn get_related_entity_identifiers(&self) -> &::std::option::Option<crate::types::RelatedEntityIdentifiers> {
        &self.related_entity_identifiers
    }
    /// <p>An object that contains lifecycle details for the <code>Opportunity</code>.</p>
    pub fn life_cycle(mut self, input: crate::types::LifeCycle) -> Self {
        self.life_cycle = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains lifecycle details for the <code>Opportunity</code>.</p>
    pub fn set_life_cycle(mut self, input: ::std::option::Option<crate::types::LifeCycle>) -> Self {
        self.life_cycle = input;
        self
    }
    /// <p>An object that contains lifecycle details for the <code>Opportunity</code>.</p>
    pub fn get_life_cycle(&self) -> &::std::option::Option<crate::types::LifeCycle> {
        &self.life_cycle
    }
    /// Appends an item to `opportunity_team`.
    ///
    /// To override the contents of this collection use [`set_opportunity_team`](Self::set_opportunity_team).
    ///
    /// <p>Represents the internal team handling the opportunity. Specify the members involved in collaborating on this opportunity within the partner's organization.</p>
    pub fn opportunity_team(mut self, input: crate::types::Contact) -> Self {
        let mut v = self.opportunity_team.unwrap_or_default();
        v.push(input);
        self.opportunity_team = ::std::option::Option::Some(v);
        self
    }
    /// <p>Represents the internal team handling the opportunity. Specify the members involved in collaborating on this opportunity within the partner's organization.</p>
    pub fn set_opportunity_team(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Contact>>) -> Self {
        self.opportunity_team = input;
        self
    }
    /// <p>Represents the internal team handling the opportunity. Specify the members involved in collaborating on this opportunity within the partner's organization.</p>
    pub fn get_opportunity_team(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Contact>> {
        &self.opportunity_team
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetOpportunityOutput`](crate::operation::get_opportunity::GetOpportunityOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`catalog`](crate::operation::get_opportunity::builders::GetOpportunityOutputBuilder::catalog)
    /// - [`id`](crate::operation::get_opportunity::builders::GetOpportunityOutputBuilder::id)
    /// - [`last_modified_date`](crate::operation::get_opportunity::builders::GetOpportunityOutputBuilder::last_modified_date)
    /// - [`created_date`](crate::operation::get_opportunity::builders::GetOpportunityOutputBuilder::created_date)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_opportunity::GetOpportunityOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_opportunity::GetOpportunityOutput {
            catalog: self.catalog.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "catalog",
                    "catalog was not specified but it is required when building GetOpportunityOutput",
                )
            })?,
            primary_needs_from_aws: self.primary_needs_from_aws,
            national_security: self.national_security,
            partner_opportunity_identifier: self.partner_opportunity_identifier,
            customer: self.customer,
            project: self.project,
            opportunity_type: self.opportunity_type,
            marketing: self.marketing,
            software_revenue: self.software_revenue,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building GetOpportunityOutput",
                )
            })?,
            arn: self.arn,
            last_modified_date: self.last_modified_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_modified_date",
                    "last_modified_date was not specified but it is required when building GetOpportunityOutput",
                )
            })?,
            created_date: self.created_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_date",
                    "created_date was not specified but it is required when building GetOpportunityOutput",
                )
            })?,
            related_entity_identifiers: self.related_entity_identifiers,
            life_cycle: self.life_cycle,
            opportunity_team: self.opportunity_team,
            _request_id: self._request_id,
        })
    }
}
