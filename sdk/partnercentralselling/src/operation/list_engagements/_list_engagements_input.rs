// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListEngagementsInput {
    /// <p>Specifies the catalog related to the request.</p>
    pub catalog: ::std::option::Option<::std::string::String>,
    /// <p>A list of AWS account IDs. When specified, the response includes engagements created by these accounts. This filter is useful for finding engagements created by specific team members.</p>
    pub created_by: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>An array of strings representing AWS Account IDs. Use this to exclude engagements created by specific users.</p>
    pub exclude_created_by: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies the sorting parameters for listing Engagements.</p>
    pub sort: ::std::option::Option<crate::types::EngagementSort>,
    /// <p>The maximum number of results to return in a single call.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The token for the next set of results. This value is returned from a previous call.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>An array of strings representing engagement identifiers to retrieve.</p>
    pub engagement_identifier: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ListEngagementsInput {
    /// <p>Specifies the catalog related to the request.</p>
    pub fn catalog(&self) -> ::std::option::Option<&str> {
        self.catalog.as_deref()
    }
    /// <p>A list of AWS account IDs. When specified, the response includes engagements created by these accounts. This filter is useful for finding engagements created by specific team members.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.created_by.is_none()`.
    pub fn created_by(&self) -> &[::std::string::String] {
        self.created_by.as_deref().unwrap_or_default()
    }
    /// <p>An array of strings representing AWS Account IDs. Use this to exclude engagements created by specific users.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.exclude_created_by.is_none()`.
    pub fn exclude_created_by(&self) -> &[::std::string::String] {
        self.exclude_created_by.as_deref().unwrap_or_default()
    }
    /// <p>Specifies the sorting parameters for listing Engagements.</p>
    pub fn sort(&self) -> ::std::option::Option<&crate::types::EngagementSort> {
        self.sort.as_ref()
    }
    /// <p>The maximum number of results to return in a single call.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token for the next set of results. This value is returned from a previous call.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>An array of strings representing engagement identifiers to retrieve.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.engagement_identifier.is_none()`.
    pub fn engagement_identifier(&self) -> &[::std::string::String] {
        self.engagement_identifier.as_deref().unwrap_or_default()
    }
}
impl ListEngagementsInput {
    /// Creates a new builder-style object to manufacture [`ListEngagementsInput`](crate::operation::list_engagements::ListEngagementsInput).
    pub fn builder() -> crate::operation::list_engagements::builders::ListEngagementsInputBuilder {
        crate::operation::list_engagements::builders::ListEngagementsInputBuilder::default()
    }
}

/// A builder for [`ListEngagementsInput`](crate::operation::list_engagements::ListEngagementsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListEngagementsInputBuilder {
    pub(crate) catalog: ::std::option::Option<::std::string::String>,
    pub(crate) created_by: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) exclude_created_by: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) sort: ::std::option::Option<crate::types::EngagementSort>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) engagement_identifier: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ListEngagementsInputBuilder {
    /// <p>Specifies the catalog related to the request.</p>
    /// This field is required.
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the catalog related to the request.</p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>Specifies the catalog related to the request.</p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog
    }
    /// Appends an item to `created_by`.
    ///
    /// To override the contents of this collection use [`set_created_by`](Self::set_created_by).
    ///
    /// <p>A list of AWS account IDs. When specified, the response includes engagements created by these accounts. This filter is useful for finding engagements created by specific team members.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.created_by.unwrap_or_default();
        v.push(input.into());
        self.created_by = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of AWS account IDs. When specified, the response includes engagements created by these accounts. This filter is useful for finding engagements created by specific team members.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>A list of AWS account IDs. When specified, the response includes engagements created by these accounts. This filter is useful for finding engagements created by specific team members.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.created_by
    }
    /// Appends an item to `exclude_created_by`.
    ///
    /// To override the contents of this collection use [`set_exclude_created_by`](Self::set_exclude_created_by).
    ///
    /// <p>An array of strings representing AWS Account IDs. Use this to exclude engagements created by specific users.</p>
    pub fn exclude_created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.exclude_created_by.unwrap_or_default();
        v.push(input.into());
        self.exclude_created_by = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of strings representing AWS Account IDs. Use this to exclude engagements created by specific users.</p>
    pub fn set_exclude_created_by(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.exclude_created_by = input;
        self
    }
    /// <p>An array of strings representing AWS Account IDs. Use this to exclude engagements created by specific users.</p>
    pub fn get_exclude_created_by(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.exclude_created_by
    }
    /// <p>Specifies the sorting parameters for listing Engagements.</p>
    pub fn sort(mut self, input: crate::types::EngagementSort) -> Self {
        self.sort = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the sorting parameters for listing Engagements.</p>
    pub fn set_sort(mut self, input: ::std::option::Option<crate::types::EngagementSort>) -> Self {
        self.sort = input;
        self
    }
    /// <p>Specifies the sorting parameters for listing Engagements.</p>
    pub fn get_sort(&self) -> &::std::option::Option<crate::types::EngagementSort> {
        &self.sort
    }
    /// <p>The maximum number of results to return in a single call.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return in a single call.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return in a single call.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The token for the next set of results. This value is returned from a previous call.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next set of results. This value is returned from a previous call.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next set of results. This value is returned from a previous call.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `engagement_identifier`.
    ///
    /// To override the contents of this collection use [`set_engagement_identifier`](Self::set_engagement_identifier).
    ///
    /// <p>An array of strings representing engagement identifiers to retrieve.</p>
    pub fn engagement_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.engagement_identifier.unwrap_or_default();
        v.push(input.into());
        self.engagement_identifier = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of strings representing engagement identifiers to retrieve.</p>
    pub fn set_engagement_identifier(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.engagement_identifier = input;
        self
    }
    /// <p>An array of strings representing engagement identifiers to retrieve.</p>
    pub fn get_engagement_identifier(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.engagement_identifier
    }
    /// Consumes the builder and constructs a [`ListEngagementsInput`](crate::operation::list_engagements::ListEngagementsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_engagements::ListEngagementsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_engagements::ListEngagementsInput {
            catalog: self.catalog,
            created_by: self.created_by,
            exclude_created_by: self.exclude_created_by,
            sort: self.sort,
            max_results: self.max_results,
            next_token: self.next_token,
            engagement_identifier: self.engagement_identifier,
        })
    }
}
