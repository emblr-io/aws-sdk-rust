// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetEngagementOutput {
    /// <p>The unique resource identifier of the engagement retrieved.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the engagement retrieved.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The title of the engagement. It provides a brief, descriptive name for the engagement that is meaningful and easily recognizable.</p>
    pub title: ::std::option::Option<::std::string::String>,
    /// <p>A more detailed description of the engagement. This provides additional context or information about the engagement's purpose or scope.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The date and time when the Engagement was created, presented in ISO 8601 format (UTC). For example: "2023-05-01T20:37:46Z". This timestamp helps track the lifecycle of the Engagement.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The AWS account ID of the user who originally created the engagement. This field helps in tracking the origin of the engagement.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the current count of members participating in the Engagement. This count includes all active members regardless of their roles or permissions within the Engagement.</p>
    pub member_count: ::std::option::Option<i32>,
    /// <p>A list of context objects associated with the engagement. Each context provides additional information related to the Engagement, such as customer projects or documents.</p>
    pub contexts: ::std::option::Option<::std::vec::Vec<crate::types::EngagementContextDetails>>,
    _request_id: Option<String>,
}
impl GetEngagementOutput {
    /// <p>The unique resource identifier of the engagement retrieved.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the engagement retrieved.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The title of the engagement. It provides a brief, descriptive name for the engagement that is meaningful and easily recognizable.</p>
    pub fn title(&self) -> ::std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>A more detailed description of the engagement. This provides additional context or information about the engagement's purpose or scope.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The date and time when the Engagement was created, presented in ISO 8601 format (UTC). For example: "2023-05-01T20:37:46Z". This timestamp helps track the lifecycle of the Engagement.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The AWS account ID of the user who originally created the engagement. This field helps in tracking the origin of the engagement.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>Specifies the current count of members participating in the Engagement. This count includes all active members regardless of their roles or permissions within the Engagement.</p>
    pub fn member_count(&self) -> ::std::option::Option<i32> {
        self.member_count
    }
    /// <p>A list of context objects associated with the engagement. Each context provides additional information related to the Engagement, such as customer projects or documents.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.contexts.is_none()`.
    pub fn contexts(&self) -> &[crate::types::EngagementContextDetails] {
        self.contexts.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for GetEngagementOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetEngagementOutput");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("title", &self.title);
        formatter.field("description", &self.description);
        formatter.field("created_at", &self.created_at);
        formatter.field("created_by", &"*** Sensitive Data Redacted ***");
        formatter.field("member_count", &self.member_count);
        formatter.field("contexts", &self.contexts);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetEngagementOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetEngagementOutput {
    /// Creates a new builder-style object to manufacture [`GetEngagementOutput`](crate::operation::get_engagement::GetEngagementOutput).
    pub fn builder() -> crate::operation::get_engagement::builders::GetEngagementOutputBuilder {
        crate::operation::get_engagement::builders::GetEngagementOutputBuilder::default()
    }
}

/// A builder for [`GetEngagementOutput`](crate::operation::get_engagement::GetEngagementOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetEngagementOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) member_count: ::std::option::Option<i32>,
    pub(crate) contexts: ::std::option::Option<::std::vec::Vec<crate::types::EngagementContextDetails>>,
    _request_id: Option<String>,
}
impl GetEngagementOutputBuilder {
    /// <p>The unique resource identifier of the engagement retrieved.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique resource identifier of the engagement retrieved.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique resource identifier of the engagement retrieved.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The Amazon Resource Name (ARN) of the engagement retrieved.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the engagement retrieved.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the engagement retrieved.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The title of the engagement. It provides a brief, descriptive name for the engagement that is meaningful and easily recognizable.</p>
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of the engagement. It provides a brief, descriptive name for the engagement that is meaningful and easily recognizable.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title of the engagement. It provides a brief, descriptive name for the engagement that is meaningful and easily recognizable.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>A more detailed description of the engagement. This provides additional context or information about the engagement's purpose or scope.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A more detailed description of the engagement. This provides additional context or information about the engagement's purpose or scope.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A more detailed description of the engagement. This provides additional context or information about the engagement's purpose or scope.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The date and time when the Engagement was created, presented in ISO 8601 format (UTC). For example: "2023-05-01T20:37:46Z". This timestamp helps track the lifecycle of the Engagement.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the Engagement was created, presented in ISO 8601 format (UTC). For example: "2023-05-01T20:37:46Z". This timestamp helps track the lifecycle of the Engagement.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time when the Engagement was created, presented in ISO 8601 format (UTC). For example: "2023-05-01T20:37:46Z". This timestamp helps track the lifecycle of the Engagement.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The AWS account ID of the user who originally created the engagement. This field helps in tracking the origin of the engagement.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS account ID of the user who originally created the engagement. This field helps in tracking the origin of the engagement.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The AWS account ID of the user who originally created the engagement. This field helps in tracking the origin of the engagement.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>Specifies the current count of members participating in the Engagement. This count includes all active members regardless of their roles or permissions within the Engagement.</p>
    pub fn member_count(mut self, input: i32) -> Self {
        self.member_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the current count of members participating in the Engagement. This count includes all active members regardless of their roles or permissions within the Engagement.</p>
    pub fn set_member_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.member_count = input;
        self
    }
    /// <p>Specifies the current count of members participating in the Engagement. This count includes all active members regardless of their roles or permissions within the Engagement.</p>
    pub fn get_member_count(&self) -> &::std::option::Option<i32> {
        &self.member_count
    }
    /// Appends an item to `contexts`.
    ///
    /// To override the contents of this collection use [`set_contexts`](Self::set_contexts).
    ///
    /// <p>A list of context objects associated with the engagement. Each context provides additional information related to the Engagement, such as customer projects or documents.</p>
    pub fn contexts(mut self, input: crate::types::EngagementContextDetails) -> Self {
        let mut v = self.contexts.unwrap_or_default();
        v.push(input);
        self.contexts = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of context objects associated with the engagement. Each context provides additional information related to the Engagement, such as customer projects or documents.</p>
    pub fn set_contexts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EngagementContextDetails>>) -> Self {
        self.contexts = input;
        self
    }
    /// <p>A list of context objects associated with the engagement. Each context provides additional information related to the Engagement, such as customer projects or documents.</p>
    pub fn get_contexts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EngagementContextDetails>> {
        &self.contexts
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetEngagementOutput`](crate::operation::get_engagement::GetEngagementOutput).
    pub fn build(self) -> crate::operation::get_engagement::GetEngagementOutput {
        crate::operation::get_engagement::GetEngagementOutput {
            id: self.id,
            arn: self.arn,
            title: self.title,
            description: self.description,
            created_at: self.created_at,
            created_by: self.created_by,
            member_count: self.member_count,
            contexts: self.contexts,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for GetEngagementOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetEngagementOutputBuilder");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("title", &self.title);
        formatter.field("description", &self.description);
        formatter.field("created_at", &self.created_at);
        formatter.field("created_by", &"*** Sensitive Data Redacted ***");
        formatter.field("member_count", &self.member_count);
        formatter.field("contexts", &self.contexts);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
