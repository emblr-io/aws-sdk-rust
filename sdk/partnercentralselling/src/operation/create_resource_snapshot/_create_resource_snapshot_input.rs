// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateResourceSnapshotInput {
    /// <p>Specifies the catalog where the snapshot is created. Valid values are <code>AWS</code> and <code>Sandbox</code>.</p>
    pub catalog: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the engagement associated with this snapshot. This field links the snapshot to a specific engagement context.</p>
    pub engagement_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the type of resource for which the snapshot is being created. This field determines the structure and content of the snapshot. Must be one of the supported resource types, such as: <code>Opportunity</code>.</p>
    pub resource_type: ::std::option::Option<crate::types::ResourceType>,
    /// <p>The unique identifier of the specific resource to be snapshotted. The format and constraints of this identifier depend on the <code>ResourceType</code> specified. For example: For <code>Opportunity</code> type, it will be an opportunity ID.</p>
    pub resource_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The name of the template that defines the schema for the snapshot. This template determines which subset of the resource data will be included in the snapshot. Must correspond to an existing and valid template for the specified <code>ResourceType</code>.</p>
    pub resource_snapshot_template_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Specifies a unique, client-generated UUID to ensure that the request is handled exactly once. This token helps prevent duplicate snapshot creations.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateResourceSnapshotInput {
    /// <p>Specifies the catalog where the snapshot is created. Valid values are <code>AWS</code> and <code>Sandbox</code>.</p>
    pub fn catalog(&self) -> ::std::option::Option<&str> {
        self.catalog.as_deref()
    }
    /// <p>The unique identifier of the engagement associated with this snapshot. This field links the snapshot to a specific engagement context.</p>
    pub fn engagement_identifier(&self) -> ::std::option::Option<&str> {
        self.engagement_identifier.as_deref()
    }
    /// <p>Specifies the type of resource for which the snapshot is being created. This field determines the structure and content of the snapshot. Must be one of the supported resource types, such as: <code>Opportunity</code>.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The unique identifier of the specific resource to be snapshotted. The format and constraints of this identifier depend on the <code>ResourceType</code> specified. For example: For <code>Opportunity</code> type, it will be an opportunity ID.</p>
    pub fn resource_identifier(&self) -> ::std::option::Option<&str> {
        self.resource_identifier.as_deref()
    }
    /// <p>The name of the template that defines the schema for the snapshot. This template determines which subset of the resource data will be included in the snapshot. Must correspond to an existing and valid template for the specified <code>ResourceType</code>.</p>
    pub fn resource_snapshot_template_identifier(&self) -> ::std::option::Option<&str> {
        self.resource_snapshot_template_identifier.as_deref()
    }
    /// <p>Specifies a unique, client-generated UUID to ensure that the request is handled exactly once. This token helps prevent duplicate snapshot creations.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateResourceSnapshotInput {
    /// Creates a new builder-style object to manufacture [`CreateResourceSnapshotInput`](crate::operation::create_resource_snapshot::CreateResourceSnapshotInput).
    pub fn builder() -> crate::operation::create_resource_snapshot::builders::CreateResourceSnapshotInputBuilder {
        crate::operation::create_resource_snapshot::builders::CreateResourceSnapshotInputBuilder::default()
    }
}

/// A builder for [`CreateResourceSnapshotInput`](crate::operation::create_resource_snapshot::CreateResourceSnapshotInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateResourceSnapshotInputBuilder {
    pub(crate) catalog: ::std::option::Option<::std::string::String>,
    pub(crate) engagement_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<crate::types::ResourceType>,
    pub(crate) resource_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) resource_snapshot_template_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateResourceSnapshotInputBuilder {
    /// <p>Specifies the catalog where the snapshot is created. Valid values are <code>AWS</code> and <code>Sandbox</code>.</p>
    /// This field is required.
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the catalog where the snapshot is created. Valid values are <code>AWS</code> and <code>Sandbox</code>.</p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>Specifies the catalog where the snapshot is created. Valid values are <code>AWS</code> and <code>Sandbox</code>.</p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog
    }
    /// <p>The unique identifier of the engagement associated with this snapshot. This field links the snapshot to a specific engagement context.</p>
    /// This field is required.
    pub fn engagement_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engagement_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the engagement associated with this snapshot. This field links the snapshot to a specific engagement context.</p>
    pub fn set_engagement_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engagement_identifier = input;
        self
    }
    /// <p>The unique identifier of the engagement associated with this snapshot. This field links the snapshot to a specific engagement context.</p>
    pub fn get_engagement_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.engagement_identifier
    }
    /// <p>Specifies the type of resource for which the snapshot is being created. This field determines the structure and content of the snapshot. Must be one of the supported resource types, such as: <code>Opportunity</code>.</p>
    /// This field is required.
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of resource for which the snapshot is being created. This field determines the structure and content of the snapshot. Must be one of the supported resource types, such as: <code>Opportunity</code>.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::ResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>Specifies the type of resource for which the snapshot is being created. This field determines the structure and content of the snapshot. Must be one of the supported resource types, such as: <code>Opportunity</code>.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::ResourceType> {
        &self.resource_type
    }
    /// <p>The unique identifier of the specific resource to be snapshotted. The format and constraints of this identifier depend on the <code>ResourceType</code> specified. For example: For <code>Opportunity</code> type, it will be an opportunity ID.</p>
    /// This field is required.
    pub fn resource_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the specific resource to be snapshotted. The format and constraints of this identifier depend on the <code>ResourceType</code> specified. For example: For <code>Opportunity</code> type, it will be an opportunity ID.</p>
    pub fn set_resource_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_identifier = input;
        self
    }
    /// <p>The unique identifier of the specific resource to be snapshotted. The format and constraints of this identifier depend on the <code>ResourceType</code> specified. For example: For <code>Opportunity</code> type, it will be an opportunity ID.</p>
    pub fn get_resource_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_identifier
    }
    /// <p>The name of the template that defines the schema for the snapshot. This template determines which subset of the resource data will be included in the snapshot. Must correspond to an existing and valid template for the specified <code>ResourceType</code>.</p>
    /// This field is required.
    pub fn resource_snapshot_template_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_snapshot_template_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the template that defines the schema for the snapshot. This template determines which subset of the resource data will be included in the snapshot. Must correspond to an existing and valid template for the specified <code>ResourceType</code>.</p>
    pub fn set_resource_snapshot_template_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_snapshot_template_identifier = input;
        self
    }
    /// <p>The name of the template that defines the schema for the snapshot. This template determines which subset of the resource data will be included in the snapshot. Must correspond to an existing and valid template for the specified <code>ResourceType</code>.</p>
    pub fn get_resource_snapshot_template_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_snapshot_template_identifier
    }
    /// <p>Specifies a unique, client-generated UUID to ensure that the request is handled exactly once. This token helps prevent duplicate snapshot creations.</p>
    /// This field is required.
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a unique, client-generated UUID to ensure that the request is handled exactly once. This token helps prevent duplicate snapshot creations.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Specifies a unique, client-generated UUID to ensure that the request is handled exactly once. This token helps prevent duplicate snapshot creations.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateResourceSnapshotInput`](crate::operation::create_resource_snapshot::CreateResourceSnapshotInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_resource_snapshot::CreateResourceSnapshotInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_resource_snapshot::CreateResourceSnapshotInput {
            catalog: self.catalog,
            engagement_identifier: self.engagement_identifier,
            resource_type: self.resource_type,
            resource_identifier: self.resource_identifier,
            resource_snapshot_template_identifier: self.resource_snapshot_template_identifier,
            client_token: self.client_token,
        })
    }
}
