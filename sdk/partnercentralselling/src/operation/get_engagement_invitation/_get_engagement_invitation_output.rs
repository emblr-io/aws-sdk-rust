// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetEngagementInvitationOutput {
    /// <p>The Amazon Resource Name (ARN) that identifies the engagement invitation.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The type of payload contained in the engagement invitation, indicating what data or context the payload covers.</p>
    pub payload_type: ::std::option::Option<crate::types::EngagementInvitationPayloadType>,
    /// <p>Unique identifier assigned to the engagement invitation being retrieved.</p>
    pub id: ::std::string::String,
    /// <p>The identifier of the engagement associated with this invitation.This ID links the invitation to its corresponding engagement.</p>
    pub engagement_id: ::std::option::Option<::std::string::String>,
    /// <p>The title of the engagement invitation, summarizing the purpose or objectives of the opportunity shared by AWS.</p>
    pub engagement_title: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the engagement invitation.</p>
    pub status: ::std::option::Option<crate::types::InvitationStatus>,
    /// <p>The date when the engagement invitation was sent to the partner.</p>
    pub invitation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Indicates the date on which the engagement invitation will expire if not accepted by the partner.</p>
    pub expiration_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Specifies the AWS Account ID of the sender, which identifies the AWS team responsible for sharing the engagement invitation.</p>
    pub sender_aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the AWS organization or team that sent the engagement invitation.</p>
    pub sender_company_name: ::std::option::Option<::std::string::String>,
    /// <p>Information about the partner organization or team that received the engagement invitation, including contact details and identifiers.</p>
    pub receiver: ::std::option::Option<crate::types::Receiver>,
    /// <p>Indicates the catalog from which the engagement invitation details are retrieved. This field helps in identifying the appropriate catalog (e.g., <code>AWS</code> or <code>Sandbox</code>) used in the request.</p>
    pub catalog: ::std::string::String,
    /// <p>If the engagement invitation was rejected, this field specifies the reason provided by the partner for the rejection.</p>
    pub rejection_reason: ::std::option::Option<::std::string::String>,
    /// <p>Details of the engagement invitation payload, including specific data relevant to the invitation's contents, such as customer information and opportunity insights.</p>
    pub payload: ::std::option::Option<crate::types::Payload>,
    /// <p>The message sent to the invited partner when the invitation was created.</p>
    pub invitation_message: ::std::option::Option<::std::string::String>,
    /// <p>The description of the engagement associated with this invitation.</p>
    pub engagement_description: ::std::option::Option<::std::string::String>,
    /// <p>A list of active members currently part of the Engagement. This array contains a maximum of 10 members, each represented by an object with the following properties.</p>
    /// <ul>
    /// <li>
    /// <p>CompanyName: The name of the member's company.</p></li>
    /// <li>
    /// <p>WebsiteUrl: The website URL of the member's company.</p></li>
    /// </ul>
    pub existing_members: ::std::option::Option<::std::vec::Vec<crate::types::EngagementMemberSummary>>,
    _request_id: Option<String>,
}
impl GetEngagementInvitationOutput {
    /// <p>The Amazon Resource Name (ARN) that identifies the engagement invitation.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The type of payload contained in the engagement invitation, indicating what data or context the payload covers.</p>
    pub fn payload_type(&self) -> ::std::option::Option<&crate::types::EngagementInvitationPayloadType> {
        self.payload_type.as_ref()
    }
    /// <p>Unique identifier assigned to the engagement invitation being retrieved.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The identifier of the engagement associated with this invitation.This ID links the invitation to its corresponding engagement.</p>
    pub fn engagement_id(&self) -> ::std::option::Option<&str> {
        self.engagement_id.as_deref()
    }
    /// <p>The title of the engagement invitation, summarizing the purpose or objectives of the opportunity shared by AWS.</p>
    pub fn engagement_title(&self) -> ::std::option::Option<&str> {
        self.engagement_title.as_deref()
    }
    /// <p>The current status of the engagement invitation.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::InvitationStatus> {
        self.status.as_ref()
    }
    /// <p>The date when the engagement invitation was sent to the partner.</p>
    pub fn invitation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.invitation_date.as_ref()
    }
    /// <p>Indicates the date on which the engagement invitation will expire if not accepted by the partner.</p>
    pub fn expiration_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.expiration_date.as_ref()
    }
    /// <p>Specifies the AWS Account ID of the sender, which identifies the AWS team responsible for sharing the engagement invitation.</p>
    pub fn sender_aws_account_id(&self) -> ::std::option::Option<&str> {
        self.sender_aws_account_id.as_deref()
    }
    /// <p>The name of the AWS organization or team that sent the engagement invitation.</p>
    pub fn sender_company_name(&self) -> ::std::option::Option<&str> {
        self.sender_company_name.as_deref()
    }
    /// <p>Information about the partner organization or team that received the engagement invitation, including contact details and identifiers.</p>
    pub fn receiver(&self) -> ::std::option::Option<&crate::types::Receiver> {
        self.receiver.as_ref()
    }
    /// <p>Indicates the catalog from which the engagement invitation details are retrieved. This field helps in identifying the appropriate catalog (e.g., <code>AWS</code> or <code>Sandbox</code>) used in the request.</p>
    pub fn catalog(&self) -> &str {
        use std::ops::Deref;
        self.catalog.deref()
    }
    /// <p>If the engagement invitation was rejected, this field specifies the reason provided by the partner for the rejection.</p>
    pub fn rejection_reason(&self) -> ::std::option::Option<&str> {
        self.rejection_reason.as_deref()
    }
    /// <p>Details of the engagement invitation payload, including specific data relevant to the invitation's contents, such as customer information and opportunity insights.</p>
    pub fn payload(&self) -> ::std::option::Option<&crate::types::Payload> {
        self.payload.as_ref()
    }
    /// <p>The message sent to the invited partner when the invitation was created.</p>
    pub fn invitation_message(&self) -> ::std::option::Option<&str> {
        self.invitation_message.as_deref()
    }
    /// <p>The description of the engagement associated with this invitation.</p>
    pub fn engagement_description(&self) -> ::std::option::Option<&str> {
        self.engagement_description.as_deref()
    }
    /// <p>A list of active members currently part of the Engagement. This array contains a maximum of 10 members, each represented by an object with the following properties.</p>
    /// <ul>
    /// <li>
    /// <p>CompanyName: The name of the member's company.</p></li>
    /// <li>
    /// <p>WebsiteUrl: The website URL of the member's company.</p></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.existing_members.is_none()`.
    pub fn existing_members(&self) -> &[crate::types::EngagementMemberSummary] {
        self.existing_members.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for GetEngagementInvitationOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetEngagementInvitationOutput");
        formatter.field("arn", &self.arn);
        formatter.field("payload_type", &self.payload_type);
        formatter.field("id", &self.id);
        formatter.field("engagement_id", &self.engagement_id);
        formatter.field("engagement_title", &self.engagement_title);
        formatter.field("status", &self.status);
        formatter.field("invitation_date", &self.invitation_date);
        formatter.field("expiration_date", &self.expiration_date);
        formatter.field("sender_aws_account_id", &"*** Sensitive Data Redacted ***");
        formatter.field("sender_company_name", &self.sender_company_name);
        formatter.field("receiver", &self.receiver);
        formatter.field("catalog", &self.catalog);
        formatter.field("rejection_reason", &self.rejection_reason);
        formatter.field("payload", &self.payload);
        formatter.field("invitation_message", &"*** Sensitive Data Redacted ***");
        formatter.field("engagement_description", &self.engagement_description);
        formatter.field("existing_members", &self.existing_members);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetEngagementInvitationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetEngagementInvitationOutput {
    /// Creates a new builder-style object to manufacture [`GetEngagementInvitationOutput`](crate::operation::get_engagement_invitation::GetEngagementInvitationOutput).
    pub fn builder() -> crate::operation::get_engagement_invitation::builders::GetEngagementInvitationOutputBuilder {
        crate::operation::get_engagement_invitation::builders::GetEngagementInvitationOutputBuilder::default()
    }
}

/// A builder for [`GetEngagementInvitationOutput`](crate::operation::get_engagement_invitation::GetEngagementInvitationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetEngagementInvitationOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) payload_type: ::std::option::Option<crate::types::EngagementInvitationPayloadType>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) engagement_id: ::std::option::Option<::std::string::String>,
    pub(crate) engagement_title: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::InvitationStatus>,
    pub(crate) invitation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) expiration_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) sender_aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) sender_company_name: ::std::option::Option<::std::string::String>,
    pub(crate) receiver: ::std::option::Option<crate::types::Receiver>,
    pub(crate) catalog: ::std::option::Option<::std::string::String>,
    pub(crate) rejection_reason: ::std::option::Option<::std::string::String>,
    pub(crate) payload: ::std::option::Option<crate::types::Payload>,
    pub(crate) invitation_message: ::std::option::Option<::std::string::String>,
    pub(crate) engagement_description: ::std::option::Option<::std::string::String>,
    pub(crate) existing_members: ::std::option::Option<::std::vec::Vec<crate::types::EngagementMemberSummary>>,
    _request_id: Option<String>,
}
impl GetEngagementInvitationOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) that identifies the engagement invitation.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that identifies the engagement invitation.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that identifies the engagement invitation.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The type of payload contained in the engagement invitation, indicating what data or context the payload covers.</p>
    pub fn payload_type(mut self, input: crate::types::EngagementInvitationPayloadType) -> Self {
        self.payload_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of payload contained in the engagement invitation, indicating what data or context the payload covers.</p>
    pub fn set_payload_type(mut self, input: ::std::option::Option<crate::types::EngagementInvitationPayloadType>) -> Self {
        self.payload_type = input;
        self
    }
    /// <p>The type of payload contained in the engagement invitation, indicating what data or context the payload covers.</p>
    pub fn get_payload_type(&self) -> &::std::option::Option<crate::types::EngagementInvitationPayloadType> {
        &self.payload_type
    }
    /// <p>Unique identifier assigned to the engagement invitation being retrieved.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier assigned to the engagement invitation being retrieved.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>Unique identifier assigned to the engagement invitation being retrieved.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The identifier of the engagement associated with this invitation.This ID links the invitation to its corresponding engagement.</p>
    pub fn engagement_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engagement_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the engagement associated with this invitation.This ID links the invitation to its corresponding engagement.</p>
    pub fn set_engagement_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engagement_id = input;
        self
    }
    /// <p>The identifier of the engagement associated with this invitation.This ID links the invitation to its corresponding engagement.</p>
    pub fn get_engagement_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.engagement_id
    }
    /// <p>The title of the engagement invitation, summarizing the purpose or objectives of the opportunity shared by AWS.</p>
    pub fn engagement_title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engagement_title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of the engagement invitation, summarizing the purpose or objectives of the opportunity shared by AWS.</p>
    pub fn set_engagement_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engagement_title = input;
        self
    }
    /// <p>The title of the engagement invitation, summarizing the purpose or objectives of the opportunity shared by AWS.</p>
    pub fn get_engagement_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.engagement_title
    }
    /// <p>The current status of the engagement invitation.</p>
    pub fn status(mut self, input: crate::types::InvitationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the engagement invitation.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::InvitationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the engagement invitation.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::InvitationStatus> {
        &self.status
    }
    /// <p>The date when the engagement invitation was sent to the partner.</p>
    pub fn invitation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.invitation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the engagement invitation was sent to the partner.</p>
    pub fn set_invitation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.invitation_date = input;
        self
    }
    /// <p>The date when the engagement invitation was sent to the partner.</p>
    pub fn get_invitation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.invitation_date
    }
    /// <p>Indicates the date on which the engagement invitation will expire if not accepted by the partner.</p>
    pub fn expiration_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expiration_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the date on which the engagement invitation will expire if not accepted by the partner.</p>
    pub fn set_expiration_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expiration_date = input;
        self
    }
    /// <p>Indicates the date on which the engagement invitation will expire if not accepted by the partner.</p>
    pub fn get_expiration_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expiration_date
    }
    /// <p>Specifies the AWS Account ID of the sender, which identifies the AWS team responsible for sharing the engagement invitation.</p>
    pub fn sender_aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sender_aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the AWS Account ID of the sender, which identifies the AWS team responsible for sharing the engagement invitation.</p>
    pub fn set_sender_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sender_aws_account_id = input;
        self
    }
    /// <p>Specifies the AWS Account ID of the sender, which identifies the AWS team responsible for sharing the engagement invitation.</p>
    pub fn get_sender_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sender_aws_account_id
    }
    /// <p>The name of the AWS organization or team that sent the engagement invitation.</p>
    pub fn sender_company_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sender_company_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the AWS organization or team that sent the engagement invitation.</p>
    pub fn set_sender_company_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sender_company_name = input;
        self
    }
    /// <p>The name of the AWS organization or team that sent the engagement invitation.</p>
    pub fn get_sender_company_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.sender_company_name
    }
    /// <p>Information about the partner organization or team that received the engagement invitation, including contact details and identifiers.</p>
    pub fn receiver(mut self, input: crate::types::Receiver) -> Self {
        self.receiver = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the partner organization or team that received the engagement invitation, including contact details and identifiers.</p>
    pub fn set_receiver(mut self, input: ::std::option::Option<crate::types::Receiver>) -> Self {
        self.receiver = input;
        self
    }
    /// <p>Information about the partner organization or team that received the engagement invitation, including contact details and identifiers.</p>
    pub fn get_receiver(&self) -> &::std::option::Option<crate::types::Receiver> {
        &self.receiver
    }
    /// <p>Indicates the catalog from which the engagement invitation details are retrieved. This field helps in identifying the appropriate catalog (e.g., <code>AWS</code> or <code>Sandbox</code>) used in the request.</p>
    /// This field is required.
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates the catalog from which the engagement invitation details are retrieved. This field helps in identifying the appropriate catalog (e.g., <code>AWS</code> or <code>Sandbox</code>) used in the request.</p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>Indicates the catalog from which the engagement invitation details are retrieved. This field helps in identifying the appropriate catalog (e.g., <code>AWS</code> or <code>Sandbox</code>) used in the request.</p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog
    }
    /// <p>If the engagement invitation was rejected, this field specifies the reason provided by the partner for the rejection.</p>
    pub fn rejection_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rejection_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the engagement invitation was rejected, this field specifies the reason provided by the partner for the rejection.</p>
    pub fn set_rejection_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rejection_reason = input;
        self
    }
    /// <p>If the engagement invitation was rejected, this field specifies the reason provided by the partner for the rejection.</p>
    pub fn get_rejection_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.rejection_reason
    }
    /// <p>Details of the engagement invitation payload, including specific data relevant to the invitation's contents, such as customer information and opportunity insights.</p>
    pub fn payload(mut self, input: crate::types::Payload) -> Self {
        self.payload = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details of the engagement invitation payload, including specific data relevant to the invitation's contents, such as customer information and opportunity insights.</p>
    pub fn set_payload(mut self, input: ::std::option::Option<crate::types::Payload>) -> Self {
        self.payload = input;
        self
    }
    /// <p>Details of the engagement invitation payload, including specific data relevant to the invitation's contents, such as customer information and opportunity insights.</p>
    pub fn get_payload(&self) -> &::std::option::Option<crate::types::Payload> {
        &self.payload
    }
    /// <p>The message sent to the invited partner when the invitation was created.</p>
    pub fn invitation_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.invitation_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message sent to the invited partner when the invitation was created.</p>
    pub fn set_invitation_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.invitation_message = input;
        self
    }
    /// <p>The message sent to the invited partner when the invitation was created.</p>
    pub fn get_invitation_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.invitation_message
    }
    /// <p>The description of the engagement associated with this invitation.</p>
    pub fn engagement_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engagement_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the engagement associated with this invitation.</p>
    pub fn set_engagement_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engagement_description = input;
        self
    }
    /// <p>The description of the engagement associated with this invitation.</p>
    pub fn get_engagement_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.engagement_description
    }
    /// Appends an item to `existing_members`.
    ///
    /// To override the contents of this collection use [`set_existing_members`](Self::set_existing_members).
    ///
    /// <p>A list of active members currently part of the Engagement. This array contains a maximum of 10 members, each represented by an object with the following properties.</p>
    /// <ul>
    /// <li>
    /// <p>CompanyName: The name of the member's company.</p></li>
    /// <li>
    /// <p>WebsiteUrl: The website URL of the member's company.</p></li>
    /// </ul>
    pub fn existing_members(mut self, input: crate::types::EngagementMemberSummary) -> Self {
        let mut v = self.existing_members.unwrap_or_default();
        v.push(input);
        self.existing_members = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of active members currently part of the Engagement. This array contains a maximum of 10 members, each represented by an object with the following properties.</p>
    /// <ul>
    /// <li>
    /// <p>CompanyName: The name of the member's company.</p></li>
    /// <li>
    /// <p>WebsiteUrl: The website URL of the member's company.</p></li>
    /// </ul>
    pub fn set_existing_members(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EngagementMemberSummary>>) -> Self {
        self.existing_members = input;
        self
    }
    /// <p>A list of active members currently part of the Engagement. This array contains a maximum of 10 members, each represented by an object with the following properties.</p>
    /// <ul>
    /// <li>
    /// <p>CompanyName: The name of the member's company.</p></li>
    /// <li>
    /// <p>WebsiteUrl: The website URL of the member's company.</p></li>
    /// </ul>
    pub fn get_existing_members(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EngagementMemberSummary>> {
        &self.existing_members
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetEngagementInvitationOutput`](crate::operation::get_engagement_invitation::GetEngagementInvitationOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::operation::get_engagement_invitation::builders::GetEngagementInvitationOutputBuilder::id)
    /// - [`catalog`](crate::operation::get_engagement_invitation::builders::GetEngagementInvitationOutputBuilder::catalog)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_engagement_invitation::GetEngagementInvitationOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_engagement_invitation::GetEngagementInvitationOutput {
            arn: self.arn,
            payload_type: self.payload_type,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building GetEngagementInvitationOutput",
                )
            })?,
            engagement_id: self.engagement_id,
            engagement_title: self.engagement_title,
            status: self.status,
            invitation_date: self.invitation_date,
            expiration_date: self.expiration_date,
            sender_aws_account_id: self.sender_aws_account_id,
            sender_company_name: self.sender_company_name,
            receiver: self.receiver,
            catalog: self.catalog.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "catalog",
                    "catalog was not specified but it is required when building GetEngagementInvitationOutput",
                )
            })?,
            rejection_reason: self.rejection_reason,
            payload: self.payload,
            invitation_message: self.invitation_message,
            engagement_description: self.engagement_description,
            existing_members: self.existing_members,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetEngagementInvitationOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetEngagementInvitationOutputBuilder");
        formatter.field("arn", &self.arn);
        formatter.field("payload_type", &self.payload_type);
        formatter.field("id", &self.id);
        formatter.field("engagement_id", &self.engagement_id);
        formatter.field("engagement_title", &self.engagement_title);
        formatter.field("status", &self.status);
        formatter.field("invitation_date", &self.invitation_date);
        formatter.field("expiration_date", &self.expiration_date);
        formatter.field("sender_aws_account_id", &"*** Sensitive Data Redacted ***");
        formatter.field("sender_company_name", &self.sender_company_name);
        formatter.field("receiver", &self.receiver);
        formatter.field("catalog", &self.catalog);
        formatter.field("rejection_reason", &self.rejection_reason);
        formatter.field("payload", &self.payload);
        formatter.field("invitation_message", &"*** Sensitive Data Redacted ***");
        formatter.field("engagement_description", &self.engagement_description);
        formatter.field("existing_members", &self.existing_members);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
