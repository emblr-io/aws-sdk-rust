// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListOpportunitiesInput {
    /// <p>Specifies the catalog associated with the request. This field takes a string value from a predefined list: <code>AWS</code> or <code>Sandbox</code>. The catalog determines which environment the opportunities are listed in. Use <code>AWS</code> for listing real opportunities in the Amazon Web Services catalog, and <code>Sandbox</code> for testing in secure, isolated environments.</p>
    pub catalog: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the maximum number of results to return in a single call. This limits the number of opportunities returned in the response to avoid providing too many results at once.</p>
    /// <p>Default: 20</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>A pagination token used to retrieve the next set of results in subsequent calls. This token is included in the response only if there are additional result pages available.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>An object that specifies how the response is sorted. The default <code>Sort.SortBy</code> value is <code>LastModifiedDate</code>.</p>
    pub sort: ::std::option::Option<crate::types::OpportunitySort>,
    /// <p>Filters the opportunities based on their last modified date. This filter helps retrieve opportunities that were updated after the specified date, allowing partners to track recent changes or updates.</p>
    pub last_modified_date: ::std::option::Option<crate::types::LastModifiedDate>,
    /// <p>Filters the opportunities based on the opportunity identifier. This allows partners to retrieve specific opportunities by providing their unique identifiers, ensuring precise results.</p>
    pub identifier: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Filters the opportunities based on their lifecycle stage. This filter allows partners to retrieve opportunities at various stages in the sales cycle, such as <code>Qualified</code>, <code>Technical Validation</code>, <code>Business Validation</code>, or <code>Closed Won</code>.</p>
    pub life_cycle_stage: ::std::option::Option<::std::vec::Vec<crate::types::Stage>>,
    /// <p>Filters the opportunities based on their current lifecycle approval status. Use this filter to retrieve opportunities with statuses such as <code>Pending Submission</code>, <code>In Review</code>, <code>Action Required</code>, or <code>Approved</code>.</p>
    pub life_cycle_review_status: ::std::option::Option<::std::vec::Vec<crate::types::ReviewStatus>>,
    /// <p>Filters the opportunities based on the customer's company name. This allows partners to search for opportunities associated with a specific customer by matching the provided company name string.</p>
    pub customer_company_name: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ListOpportunitiesInput {
    /// <p>Specifies the catalog associated with the request. This field takes a string value from a predefined list: <code>AWS</code> or <code>Sandbox</code>. The catalog determines which environment the opportunities are listed in. Use <code>AWS</code> for listing real opportunities in the Amazon Web Services catalog, and <code>Sandbox</code> for testing in secure, isolated environments.</p>
    pub fn catalog(&self) -> ::std::option::Option<&str> {
        self.catalog.as_deref()
    }
    /// <p>Specifies the maximum number of results to return in a single call. This limits the number of opportunities returned in the response to avoid providing too many results at once.</p>
    /// <p>Default: 20</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>A pagination token used to retrieve the next set of results in subsequent calls. This token is included in the response only if there are additional result pages available.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>An object that specifies how the response is sorted. The default <code>Sort.SortBy</code> value is <code>LastModifiedDate</code>.</p>
    pub fn sort(&self) -> ::std::option::Option<&crate::types::OpportunitySort> {
        self.sort.as_ref()
    }
    /// <p>Filters the opportunities based on their last modified date. This filter helps retrieve opportunities that were updated after the specified date, allowing partners to track recent changes or updates.</p>
    pub fn last_modified_date(&self) -> ::std::option::Option<&crate::types::LastModifiedDate> {
        self.last_modified_date.as_ref()
    }
    /// <p>Filters the opportunities based on the opportunity identifier. This allows partners to retrieve specific opportunities by providing their unique identifiers, ensuring precise results.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.identifier.is_none()`.
    pub fn identifier(&self) -> &[::std::string::String] {
        self.identifier.as_deref().unwrap_or_default()
    }
    /// <p>Filters the opportunities based on their lifecycle stage. This filter allows partners to retrieve opportunities at various stages in the sales cycle, such as <code>Qualified</code>, <code>Technical Validation</code>, <code>Business Validation</code>, or <code>Closed Won</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.life_cycle_stage.is_none()`.
    pub fn life_cycle_stage(&self) -> &[crate::types::Stage] {
        self.life_cycle_stage.as_deref().unwrap_or_default()
    }
    /// <p>Filters the opportunities based on their current lifecycle approval status. Use this filter to retrieve opportunities with statuses such as <code>Pending Submission</code>, <code>In Review</code>, <code>Action Required</code>, or <code>Approved</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.life_cycle_review_status.is_none()`.
    pub fn life_cycle_review_status(&self) -> &[crate::types::ReviewStatus] {
        self.life_cycle_review_status.as_deref().unwrap_or_default()
    }
    /// <p>Filters the opportunities based on the customer's company name. This allows partners to search for opportunities associated with a specific customer by matching the provided company name string.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.customer_company_name.is_none()`.
    pub fn customer_company_name(&self) -> &[::std::string::String] {
        self.customer_company_name.as_deref().unwrap_or_default()
    }
}
impl ListOpportunitiesInput {
    /// Creates a new builder-style object to manufacture [`ListOpportunitiesInput`](crate::operation::list_opportunities::ListOpportunitiesInput).
    pub fn builder() -> crate::operation::list_opportunities::builders::ListOpportunitiesInputBuilder {
        crate::operation::list_opportunities::builders::ListOpportunitiesInputBuilder::default()
    }
}

/// A builder for [`ListOpportunitiesInput`](crate::operation::list_opportunities::ListOpportunitiesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListOpportunitiesInputBuilder {
    pub(crate) catalog: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) sort: ::std::option::Option<crate::types::OpportunitySort>,
    pub(crate) last_modified_date: ::std::option::Option<crate::types::LastModifiedDate>,
    pub(crate) identifier: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) life_cycle_stage: ::std::option::Option<::std::vec::Vec<crate::types::Stage>>,
    pub(crate) life_cycle_review_status: ::std::option::Option<::std::vec::Vec<crate::types::ReviewStatus>>,
    pub(crate) customer_company_name: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ListOpportunitiesInputBuilder {
    /// <p>Specifies the catalog associated with the request. This field takes a string value from a predefined list: <code>AWS</code> or <code>Sandbox</code>. The catalog determines which environment the opportunities are listed in. Use <code>AWS</code> for listing real opportunities in the Amazon Web Services catalog, and <code>Sandbox</code> for testing in secure, isolated environments.</p>
    /// This field is required.
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the catalog associated with the request. This field takes a string value from a predefined list: <code>AWS</code> or <code>Sandbox</code>. The catalog determines which environment the opportunities are listed in. Use <code>AWS</code> for listing real opportunities in the Amazon Web Services catalog, and <code>Sandbox</code> for testing in secure, isolated environments.</p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>Specifies the catalog associated with the request. This field takes a string value from a predefined list: <code>AWS</code> or <code>Sandbox</code>. The catalog determines which environment the opportunities are listed in. Use <code>AWS</code> for listing real opportunities in the Amazon Web Services catalog, and <code>Sandbox</code> for testing in secure, isolated environments.</p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog
    }
    /// <p>Specifies the maximum number of results to return in a single call. This limits the number of opportunities returned in the response to avoid providing too many results at once.</p>
    /// <p>Default: 20</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the maximum number of results to return in a single call. This limits the number of opportunities returned in the response to avoid providing too many results at once.</p>
    /// <p>Default: 20</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Specifies the maximum number of results to return in a single call. This limits the number of opportunities returned in the response to avoid providing too many results at once.</p>
    /// <p>Default: 20</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>A pagination token used to retrieve the next set of results in subsequent calls. This token is included in the response only if there are additional result pages available.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A pagination token used to retrieve the next set of results in subsequent calls. This token is included in the response only if there are additional result pages available.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A pagination token used to retrieve the next set of results in subsequent calls. This token is included in the response only if there are additional result pages available.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>An object that specifies how the response is sorted. The default <code>Sort.SortBy</code> value is <code>LastModifiedDate</code>.</p>
    pub fn sort(mut self, input: crate::types::OpportunitySort) -> Self {
        self.sort = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that specifies how the response is sorted. The default <code>Sort.SortBy</code> value is <code>LastModifiedDate</code>.</p>
    pub fn set_sort(mut self, input: ::std::option::Option<crate::types::OpportunitySort>) -> Self {
        self.sort = input;
        self
    }
    /// <p>An object that specifies how the response is sorted. The default <code>Sort.SortBy</code> value is <code>LastModifiedDate</code>.</p>
    pub fn get_sort(&self) -> &::std::option::Option<crate::types::OpportunitySort> {
        &self.sort
    }
    /// <p>Filters the opportunities based on their last modified date. This filter helps retrieve opportunities that were updated after the specified date, allowing partners to track recent changes or updates.</p>
    pub fn last_modified_date(mut self, input: crate::types::LastModifiedDate) -> Self {
        self.last_modified_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filters the opportunities based on their last modified date. This filter helps retrieve opportunities that were updated after the specified date, allowing partners to track recent changes or updates.</p>
    pub fn set_last_modified_date(mut self, input: ::std::option::Option<crate::types::LastModifiedDate>) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>Filters the opportunities based on their last modified date. This filter helps retrieve opportunities that were updated after the specified date, allowing partners to track recent changes or updates.</p>
    pub fn get_last_modified_date(&self) -> &::std::option::Option<crate::types::LastModifiedDate> {
        &self.last_modified_date
    }
    /// Appends an item to `identifier`.
    ///
    /// To override the contents of this collection use [`set_identifier`](Self::set_identifier).
    ///
    /// <p>Filters the opportunities based on the opportunity identifier. This allows partners to retrieve specific opportunities by providing their unique identifiers, ensuring precise results.</p>
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.identifier.unwrap_or_default();
        v.push(input.into());
        self.identifier = ::std::option::Option::Some(v);
        self
    }
    /// <p>Filters the opportunities based on the opportunity identifier. This allows partners to retrieve specific opportunities by providing their unique identifiers, ensuring precise results.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>Filters the opportunities based on the opportunity identifier. This allows partners to retrieve specific opportunities by providing their unique identifiers, ensuring precise results.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.identifier
    }
    /// Appends an item to `life_cycle_stage`.
    ///
    /// To override the contents of this collection use [`set_life_cycle_stage`](Self::set_life_cycle_stage).
    ///
    /// <p>Filters the opportunities based on their lifecycle stage. This filter allows partners to retrieve opportunities at various stages in the sales cycle, such as <code>Qualified</code>, <code>Technical Validation</code>, <code>Business Validation</code>, or <code>Closed Won</code>.</p>
    pub fn life_cycle_stage(mut self, input: crate::types::Stage) -> Self {
        let mut v = self.life_cycle_stage.unwrap_or_default();
        v.push(input);
        self.life_cycle_stage = ::std::option::Option::Some(v);
        self
    }
    /// <p>Filters the opportunities based on their lifecycle stage. This filter allows partners to retrieve opportunities at various stages in the sales cycle, such as <code>Qualified</code>, <code>Technical Validation</code>, <code>Business Validation</code>, or <code>Closed Won</code>.</p>
    pub fn set_life_cycle_stage(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Stage>>) -> Self {
        self.life_cycle_stage = input;
        self
    }
    /// <p>Filters the opportunities based on their lifecycle stage. This filter allows partners to retrieve opportunities at various stages in the sales cycle, such as <code>Qualified</code>, <code>Technical Validation</code>, <code>Business Validation</code>, or <code>Closed Won</code>.</p>
    pub fn get_life_cycle_stage(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Stage>> {
        &self.life_cycle_stage
    }
    /// Appends an item to `life_cycle_review_status`.
    ///
    /// To override the contents of this collection use [`set_life_cycle_review_status`](Self::set_life_cycle_review_status).
    ///
    /// <p>Filters the opportunities based on their current lifecycle approval status. Use this filter to retrieve opportunities with statuses such as <code>Pending Submission</code>, <code>In Review</code>, <code>Action Required</code>, or <code>Approved</code>.</p>
    pub fn life_cycle_review_status(mut self, input: crate::types::ReviewStatus) -> Self {
        let mut v = self.life_cycle_review_status.unwrap_or_default();
        v.push(input);
        self.life_cycle_review_status = ::std::option::Option::Some(v);
        self
    }
    /// <p>Filters the opportunities based on their current lifecycle approval status. Use this filter to retrieve opportunities with statuses such as <code>Pending Submission</code>, <code>In Review</code>, <code>Action Required</code>, or <code>Approved</code>.</p>
    pub fn set_life_cycle_review_status(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ReviewStatus>>) -> Self {
        self.life_cycle_review_status = input;
        self
    }
    /// <p>Filters the opportunities based on their current lifecycle approval status. Use this filter to retrieve opportunities with statuses such as <code>Pending Submission</code>, <code>In Review</code>, <code>Action Required</code>, or <code>Approved</code>.</p>
    pub fn get_life_cycle_review_status(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ReviewStatus>> {
        &self.life_cycle_review_status
    }
    /// Appends an item to `customer_company_name`.
    ///
    /// To override the contents of this collection use [`set_customer_company_name`](Self::set_customer_company_name).
    ///
    /// <p>Filters the opportunities based on the customer's company name. This allows partners to search for opportunities associated with a specific customer by matching the provided company name string.</p>
    pub fn customer_company_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.customer_company_name.unwrap_or_default();
        v.push(input.into());
        self.customer_company_name = ::std::option::Option::Some(v);
        self
    }
    /// <p>Filters the opportunities based on the customer's company name. This allows partners to search for opportunities associated with a specific customer by matching the provided company name string.</p>
    pub fn set_customer_company_name(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.customer_company_name = input;
        self
    }
    /// <p>Filters the opportunities based on the customer's company name. This allows partners to search for opportunities associated with a specific customer by matching the provided company name string.</p>
    pub fn get_customer_company_name(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.customer_company_name
    }
    /// Consumes the builder and constructs a [`ListOpportunitiesInput`](crate::operation::list_opportunities::ListOpportunitiesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_opportunities::ListOpportunitiesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_opportunities::ListOpportunitiesInput {
            catalog: self.catalog,
            max_results: self.max_results,
            next_token: self.next_token,
            sort: self.sort,
            last_modified_date: self.last_modified_date,
            identifier: self.identifier,
            life_cycle_stage: self.life_cycle_stage,
            life_cycle_review_status: self.life_cycle_review_status,
            customer_company_name: self.customer_company_name,
        })
    }
}
