// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListSolutionsInput {
    /// <p>Specifies the catalog associated with the request. This field takes a string value from a predefined list: <code>AWS</code> or <code>Sandbox</code>. The catalog determines which environment the solutions are listed in. Use <code>AWS</code> to list solutions in the Amazon Web Services catalog, and <code>Sandbox</code> to list solutions in a secure and isolated testing environment.</p>
    pub catalog: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results returned by a single call. This value must be provided in the next call to retrieve the next set of results.</p>
    /// <p>Default: 20</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>A pagination token used to retrieve the next set of results in subsequent calls. This token is included in the response only if there are additional result pages available.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Object that configures sorting done on the response. Default <code>Sort.SortBy</code> is <code>Identifier</code>.</p>
    pub sort: ::std::option::Option<crate::types::SolutionSort>,
    /// <p>Filters solutions based on their status. This filter helps partners manage their solution portfolios effectively.</p>
    pub status: ::std::option::Option<::std::vec::Vec<crate::types::SolutionStatus>>,
    /// <p>Filters the solutions based on their unique identifier. Use this filter to retrieve specific solutions by providing the solution's identifier for accurate results.</p>
    pub identifier: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Filters the solutions based on the category to which they belong. This allows partners to search for solutions within specific categories, such as <code>Software</code>, <code>Consulting</code>, or <code>Managed Services</code>.</p>
    pub category: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ListSolutionsInput {
    /// <p>Specifies the catalog associated with the request. This field takes a string value from a predefined list: <code>AWS</code> or <code>Sandbox</code>. The catalog determines which environment the solutions are listed in. Use <code>AWS</code> to list solutions in the Amazon Web Services catalog, and <code>Sandbox</code> to list solutions in a secure and isolated testing environment.</p>
    pub fn catalog(&self) -> ::std::option::Option<&str> {
        self.catalog.as_deref()
    }
    /// <p>The maximum number of results returned by a single call. This value must be provided in the next call to retrieve the next set of results.</p>
    /// <p>Default: 20</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>A pagination token used to retrieve the next set of results in subsequent calls. This token is included in the response only if there are additional result pages available.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Object that configures sorting done on the response. Default <code>Sort.SortBy</code> is <code>Identifier</code>.</p>
    pub fn sort(&self) -> ::std::option::Option<&crate::types::SolutionSort> {
        self.sort.as_ref()
    }
    /// <p>Filters solutions based on their status. This filter helps partners manage their solution portfolios effectively.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.status.is_none()`.
    pub fn status(&self) -> &[crate::types::SolutionStatus] {
        self.status.as_deref().unwrap_or_default()
    }
    /// <p>Filters the solutions based on their unique identifier. Use this filter to retrieve specific solutions by providing the solution's identifier for accurate results.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.identifier.is_none()`.
    pub fn identifier(&self) -> &[::std::string::String] {
        self.identifier.as_deref().unwrap_or_default()
    }
    /// <p>Filters the solutions based on the category to which they belong. This allows partners to search for solutions within specific categories, such as <code>Software</code>, <code>Consulting</code>, or <code>Managed Services</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.category.is_none()`.
    pub fn category(&self) -> &[::std::string::String] {
        self.category.as_deref().unwrap_or_default()
    }
}
impl ListSolutionsInput {
    /// Creates a new builder-style object to manufacture [`ListSolutionsInput`](crate::operation::list_solutions::ListSolutionsInput).
    pub fn builder() -> crate::operation::list_solutions::builders::ListSolutionsInputBuilder {
        crate::operation::list_solutions::builders::ListSolutionsInputBuilder::default()
    }
}

/// A builder for [`ListSolutionsInput`](crate::operation::list_solutions::ListSolutionsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListSolutionsInputBuilder {
    pub(crate) catalog: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) sort: ::std::option::Option<crate::types::SolutionSort>,
    pub(crate) status: ::std::option::Option<::std::vec::Vec<crate::types::SolutionStatus>>,
    pub(crate) identifier: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) category: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ListSolutionsInputBuilder {
    /// <p>Specifies the catalog associated with the request. This field takes a string value from a predefined list: <code>AWS</code> or <code>Sandbox</code>. The catalog determines which environment the solutions are listed in. Use <code>AWS</code> to list solutions in the Amazon Web Services catalog, and <code>Sandbox</code> to list solutions in a secure and isolated testing environment.</p>
    /// This field is required.
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the catalog associated with the request. This field takes a string value from a predefined list: <code>AWS</code> or <code>Sandbox</code>. The catalog determines which environment the solutions are listed in. Use <code>AWS</code> to list solutions in the Amazon Web Services catalog, and <code>Sandbox</code> to list solutions in a secure and isolated testing environment.</p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>Specifies the catalog associated with the request. This field takes a string value from a predefined list: <code>AWS</code> or <code>Sandbox</code>. The catalog determines which environment the solutions are listed in. Use <code>AWS</code> to list solutions in the Amazon Web Services catalog, and <code>Sandbox</code> to list solutions in a secure and isolated testing environment.</p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog
    }
    /// <p>The maximum number of results returned by a single call. This value must be provided in the next call to retrieve the next set of results.</p>
    /// <p>Default: 20</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results returned by a single call. This value must be provided in the next call to retrieve the next set of results.</p>
    /// <p>Default: 20</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results returned by a single call. This value must be provided in the next call to retrieve the next set of results.</p>
    /// <p>Default: 20</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>A pagination token used to retrieve the next set of results in subsequent calls. This token is included in the response only if there are additional result pages available.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A pagination token used to retrieve the next set of results in subsequent calls. This token is included in the response only if there are additional result pages available.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A pagination token used to retrieve the next set of results in subsequent calls. This token is included in the response only if there are additional result pages available.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>Object that configures sorting done on the response. Default <code>Sort.SortBy</code> is <code>Identifier</code>.</p>
    pub fn sort(mut self, input: crate::types::SolutionSort) -> Self {
        self.sort = ::std::option::Option::Some(input);
        self
    }
    /// <p>Object that configures sorting done on the response. Default <code>Sort.SortBy</code> is <code>Identifier</code>.</p>
    pub fn set_sort(mut self, input: ::std::option::Option<crate::types::SolutionSort>) -> Self {
        self.sort = input;
        self
    }
    /// <p>Object that configures sorting done on the response. Default <code>Sort.SortBy</code> is <code>Identifier</code>.</p>
    pub fn get_sort(&self) -> &::std::option::Option<crate::types::SolutionSort> {
        &self.sort
    }
    /// Appends an item to `status`.
    ///
    /// To override the contents of this collection use [`set_status`](Self::set_status).
    ///
    /// <p>Filters solutions based on their status. This filter helps partners manage their solution portfolios effectively.</p>
    pub fn status(mut self, input: crate::types::SolutionStatus) -> Self {
        let mut v = self.status.unwrap_or_default();
        v.push(input);
        self.status = ::std::option::Option::Some(v);
        self
    }
    /// <p>Filters solutions based on their status. This filter helps partners manage their solution portfolios effectively.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SolutionStatus>>) -> Self {
        self.status = input;
        self
    }
    /// <p>Filters solutions based on their status. This filter helps partners manage their solution portfolios effectively.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SolutionStatus>> {
        &self.status
    }
    /// Appends an item to `identifier`.
    ///
    /// To override the contents of this collection use [`set_identifier`](Self::set_identifier).
    ///
    /// <p>Filters the solutions based on their unique identifier. Use this filter to retrieve specific solutions by providing the solution's identifier for accurate results.</p>
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.identifier.unwrap_or_default();
        v.push(input.into());
        self.identifier = ::std::option::Option::Some(v);
        self
    }
    /// <p>Filters the solutions based on their unique identifier. Use this filter to retrieve specific solutions by providing the solution's identifier for accurate results.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>Filters the solutions based on their unique identifier. Use this filter to retrieve specific solutions by providing the solution's identifier for accurate results.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.identifier
    }
    /// Appends an item to `category`.
    ///
    /// To override the contents of this collection use [`set_category`](Self::set_category).
    ///
    /// <p>Filters the solutions based on the category to which they belong. This allows partners to search for solutions within specific categories, such as <code>Software</code>, <code>Consulting</code>, or <code>Managed Services</code>.</p>
    pub fn category(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.category.unwrap_or_default();
        v.push(input.into());
        self.category = ::std::option::Option::Some(v);
        self
    }
    /// <p>Filters the solutions based on the category to which they belong. This allows partners to search for solutions within specific categories, such as <code>Software</code>, <code>Consulting</code>, or <code>Managed Services</code>.</p>
    pub fn set_category(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.category = input;
        self
    }
    /// <p>Filters the solutions based on the category to which they belong. This allows partners to search for solutions within specific categories, such as <code>Software</code>, <code>Consulting</code>, or <code>Managed Services</code>.</p>
    pub fn get_category(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.category
    }
    /// Consumes the builder and constructs a [`ListSolutionsInput`](crate::operation::list_solutions::ListSolutionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_solutions::ListSolutionsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_solutions::ListSolutionsInput {
            catalog: self.catalog,
            max_results: self.max_results,
            next_token: self.next_token,
            sort: self.sort,
            status: self.status,
            identifier: self.identifier,
            category: self.category,
        })
    }
}
