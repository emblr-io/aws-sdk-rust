// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetAwsOpportunitySummaryOutput {
    /// <p>Specifies the catalog in which the AWS Opportunity exists. This is the environment (e.g., <code>AWS</code> or <code>Sandbox</code>) where the opportunity is being managed.</p>
    pub catalog: ::std::string::String,
    /// <p>Provides the unique identifier of the related partner opportunity, allowing partners to link the AWS Opportunity to their corresponding opportunity in their CRM system.</p>
    pub related_opportunity_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the AWS Opportunity originated from AWS or the partner. This helps distinguish between opportunities that were sourced by AWS and those referred by the partner.</p>
    pub origin: ::std::option::Option<crate::types::OpportunityOrigin>,
    /// <p>Specifies the type of involvement AWS has in the opportunity, such as direct cosell or advisory support. This field helps partners understand the role AWS plays in advancing the opportunity.</p>
    pub involvement_type: ::std::option::Option<crate::types::SalesInvolvementType>,
    /// <p>Defines the visibility level for the AWS Opportunity. Use <code>Full</code> visibility for most cases, while <code>Limited</code> visibility is reserved for special programs or sensitive opportunities.</p>
    pub visibility: ::std::option::Option<crate::types::Visibility>,
    /// <p>Contains lifecycle information for the AWS Opportunity, including review status, stage, and target close date. This field is crucial for partners to monitor the progression of the opportunity.</p>
    pub life_cycle: ::std::option::Option<crate::types::AwsOpportunityLifeCycle>,
    /// <p>Details the AWS opportunity team, including members involved. This information helps partners know who from AWS is engaged and what their role is.</p>
    pub opportunity_team: ::std::option::Option<::std::vec::Vec<crate::types::AwsTeamMember>>,
    /// <p>Provides insights into the AWS Opportunity, including engagement score and recommended actions that AWS suggests for the partner.</p>
    pub insights: ::std::option::Option<crate::types::AwsOpportunityInsights>,
    /// <p>Provides a reason for any changes in the involvement type of AWS in the opportunity. This field is used to track why the level of AWS engagement has changed from <code>For Visibility Only</code> to <code>Co-sell</code> offering transparency into the partnership dynamics.</p>
    pub involvement_type_change_reason: ::std::option::Option<crate::types::InvolvementTypeChangeReason>,
    /// <p>Lists related entity identifiers, such as AWS products or partner solutions, associated with the AWS Opportunity. These identifiers provide additional context and help partners understand which AWS services are involved.</p>
    pub related_entity_ids: ::std::option::Option<crate::types::AwsOpportunityRelatedEntities>,
    /// <p>Provides details about the customer associated with the AWS Opportunity, including account information, industry, and other customer data. These details help partners understand the business context of the opportunity.</p>
    pub customer: ::std::option::Option<crate::types::AwsOpportunityCustomer>,
    /// <p>Provides details about the project associated with the AWS Opportunity, including the customer’s business problem, expected outcomes, and project scope. This information is crucial for understanding the broader context of the opportunity.</p>
    pub project: ::std::option::Option<crate::types::AwsOpportunityProject>,
    _request_id: Option<String>,
}
impl GetAwsOpportunitySummaryOutput {
    /// <p>Specifies the catalog in which the AWS Opportunity exists. This is the environment (e.g., <code>AWS</code> or <code>Sandbox</code>) where the opportunity is being managed.</p>
    pub fn catalog(&self) -> &str {
        use std::ops::Deref;
        self.catalog.deref()
    }
    /// <p>Provides the unique identifier of the related partner opportunity, allowing partners to link the AWS Opportunity to their corresponding opportunity in their CRM system.</p>
    pub fn related_opportunity_id(&self) -> ::std::option::Option<&str> {
        self.related_opportunity_id.as_deref()
    }
    /// <p>Specifies whether the AWS Opportunity originated from AWS or the partner. This helps distinguish between opportunities that were sourced by AWS and those referred by the partner.</p>
    pub fn origin(&self) -> ::std::option::Option<&crate::types::OpportunityOrigin> {
        self.origin.as_ref()
    }
    /// <p>Specifies the type of involvement AWS has in the opportunity, such as direct cosell or advisory support. This field helps partners understand the role AWS plays in advancing the opportunity.</p>
    pub fn involvement_type(&self) -> ::std::option::Option<&crate::types::SalesInvolvementType> {
        self.involvement_type.as_ref()
    }
    /// <p>Defines the visibility level for the AWS Opportunity. Use <code>Full</code> visibility for most cases, while <code>Limited</code> visibility is reserved for special programs or sensitive opportunities.</p>
    pub fn visibility(&self) -> ::std::option::Option<&crate::types::Visibility> {
        self.visibility.as_ref()
    }
    /// <p>Contains lifecycle information for the AWS Opportunity, including review status, stage, and target close date. This field is crucial for partners to monitor the progression of the opportunity.</p>
    pub fn life_cycle(&self) -> ::std::option::Option<&crate::types::AwsOpportunityLifeCycle> {
        self.life_cycle.as_ref()
    }
    /// <p>Details the AWS opportunity team, including members involved. This information helps partners know who from AWS is engaged and what their role is.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.opportunity_team.is_none()`.
    pub fn opportunity_team(&self) -> &[crate::types::AwsTeamMember] {
        self.opportunity_team.as_deref().unwrap_or_default()
    }
    /// <p>Provides insights into the AWS Opportunity, including engagement score and recommended actions that AWS suggests for the partner.</p>
    pub fn insights(&self) -> ::std::option::Option<&crate::types::AwsOpportunityInsights> {
        self.insights.as_ref()
    }
    /// <p>Provides a reason for any changes in the involvement type of AWS in the opportunity. This field is used to track why the level of AWS engagement has changed from <code>For Visibility Only</code> to <code>Co-sell</code> offering transparency into the partnership dynamics.</p>
    pub fn involvement_type_change_reason(&self) -> ::std::option::Option<&crate::types::InvolvementTypeChangeReason> {
        self.involvement_type_change_reason.as_ref()
    }
    /// <p>Lists related entity identifiers, such as AWS products or partner solutions, associated with the AWS Opportunity. These identifiers provide additional context and help partners understand which AWS services are involved.</p>
    pub fn related_entity_ids(&self) -> ::std::option::Option<&crate::types::AwsOpportunityRelatedEntities> {
        self.related_entity_ids.as_ref()
    }
    /// <p>Provides details about the customer associated with the AWS Opportunity, including account information, industry, and other customer data. These details help partners understand the business context of the opportunity.</p>
    pub fn customer(&self) -> ::std::option::Option<&crate::types::AwsOpportunityCustomer> {
        self.customer.as_ref()
    }
    /// <p>Provides details about the project associated with the AWS Opportunity, including the customer’s business problem, expected outcomes, and project scope. This information is crucial for understanding the broader context of the opportunity.</p>
    pub fn project(&self) -> ::std::option::Option<&crate::types::AwsOpportunityProject> {
        self.project.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetAwsOpportunitySummaryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAwsOpportunitySummaryOutput {
    /// Creates a new builder-style object to manufacture [`GetAwsOpportunitySummaryOutput`](crate::operation::get_aws_opportunity_summary::GetAwsOpportunitySummaryOutput).
    pub fn builder() -> crate::operation::get_aws_opportunity_summary::builders::GetAwsOpportunitySummaryOutputBuilder {
        crate::operation::get_aws_opportunity_summary::builders::GetAwsOpportunitySummaryOutputBuilder::default()
    }
}

/// A builder for [`GetAwsOpportunitySummaryOutput`](crate::operation::get_aws_opportunity_summary::GetAwsOpportunitySummaryOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetAwsOpportunitySummaryOutputBuilder {
    pub(crate) catalog: ::std::option::Option<::std::string::String>,
    pub(crate) related_opportunity_id: ::std::option::Option<::std::string::String>,
    pub(crate) origin: ::std::option::Option<crate::types::OpportunityOrigin>,
    pub(crate) involvement_type: ::std::option::Option<crate::types::SalesInvolvementType>,
    pub(crate) visibility: ::std::option::Option<crate::types::Visibility>,
    pub(crate) life_cycle: ::std::option::Option<crate::types::AwsOpportunityLifeCycle>,
    pub(crate) opportunity_team: ::std::option::Option<::std::vec::Vec<crate::types::AwsTeamMember>>,
    pub(crate) insights: ::std::option::Option<crate::types::AwsOpportunityInsights>,
    pub(crate) involvement_type_change_reason: ::std::option::Option<crate::types::InvolvementTypeChangeReason>,
    pub(crate) related_entity_ids: ::std::option::Option<crate::types::AwsOpportunityRelatedEntities>,
    pub(crate) customer: ::std::option::Option<crate::types::AwsOpportunityCustomer>,
    pub(crate) project: ::std::option::Option<crate::types::AwsOpportunityProject>,
    _request_id: Option<String>,
}
impl GetAwsOpportunitySummaryOutputBuilder {
    /// <p>Specifies the catalog in which the AWS Opportunity exists. This is the environment (e.g., <code>AWS</code> or <code>Sandbox</code>) where the opportunity is being managed.</p>
    /// This field is required.
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the catalog in which the AWS Opportunity exists. This is the environment (e.g., <code>AWS</code> or <code>Sandbox</code>) where the opportunity is being managed.</p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>Specifies the catalog in which the AWS Opportunity exists. This is the environment (e.g., <code>AWS</code> or <code>Sandbox</code>) where the opportunity is being managed.</p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog
    }
    /// <p>Provides the unique identifier of the related partner opportunity, allowing partners to link the AWS Opportunity to their corresponding opportunity in their CRM system.</p>
    pub fn related_opportunity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.related_opportunity_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provides the unique identifier of the related partner opportunity, allowing partners to link the AWS Opportunity to their corresponding opportunity in their CRM system.</p>
    pub fn set_related_opportunity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.related_opportunity_id = input;
        self
    }
    /// <p>Provides the unique identifier of the related partner opportunity, allowing partners to link the AWS Opportunity to their corresponding opportunity in their CRM system.</p>
    pub fn get_related_opportunity_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.related_opportunity_id
    }
    /// <p>Specifies whether the AWS Opportunity originated from AWS or the partner. This helps distinguish between opportunities that were sourced by AWS and those referred by the partner.</p>
    pub fn origin(mut self, input: crate::types::OpportunityOrigin) -> Self {
        self.origin = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the AWS Opportunity originated from AWS or the partner. This helps distinguish between opportunities that were sourced by AWS and those referred by the partner.</p>
    pub fn set_origin(mut self, input: ::std::option::Option<crate::types::OpportunityOrigin>) -> Self {
        self.origin = input;
        self
    }
    /// <p>Specifies whether the AWS Opportunity originated from AWS or the partner. This helps distinguish between opportunities that were sourced by AWS and those referred by the partner.</p>
    pub fn get_origin(&self) -> &::std::option::Option<crate::types::OpportunityOrigin> {
        &self.origin
    }
    /// <p>Specifies the type of involvement AWS has in the opportunity, such as direct cosell or advisory support. This field helps partners understand the role AWS plays in advancing the opportunity.</p>
    pub fn involvement_type(mut self, input: crate::types::SalesInvolvementType) -> Self {
        self.involvement_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of involvement AWS has in the opportunity, such as direct cosell or advisory support. This field helps partners understand the role AWS plays in advancing the opportunity.</p>
    pub fn set_involvement_type(mut self, input: ::std::option::Option<crate::types::SalesInvolvementType>) -> Self {
        self.involvement_type = input;
        self
    }
    /// <p>Specifies the type of involvement AWS has in the opportunity, such as direct cosell or advisory support. This field helps partners understand the role AWS plays in advancing the opportunity.</p>
    pub fn get_involvement_type(&self) -> &::std::option::Option<crate::types::SalesInvolvementType> {
        &self.involvement_type
    }
    /// <p>Defines the visibility level for the AWS Opportunity. Use <code>Full</code> visibility for most cases, while <code>Limited</code> visibility is reserved for special programs or sensitive opportunities.</p>
    pub fn visibility(mut self, input: crate::types::Visibility) -> Self {
        self.visibility = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the visibility level for the AWS Opportunity. Use <code>Full</code> visibility for most cases, while <code>Limited</code> visibility is reserved for special programs or sensitive opportunities.</p>
    pub fn set_visibility(mut self, input: ::std::option::Option<crate::types::Visibility>) -> Self {
        self.visibility = input;
        self
    }
    /// <p>Defines the visibility level for the AWS Opportunity. Use <code>Full</code> visibility for most cases, while <code>Limited</code> visibility is reserved for special programs or sensitive opportunities.</p>
    pub fn get_visibility(&self) -> &::std::option::Option<crate::types::Visibility> {
        &self.visibility
    }
    /// <p>Contains lifecycle information for the AWS Opportunity, including review status, stage, and target close date. This field is crucial for partners to monitor the progression of the opportunity.</p>
    pub fn life_cycle(mut self, input: crate::types::AwsOpportunityLifeCycle) -> Self {
        self.life_cycle = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains lifecycle information for the AWS Opportunity, including review status, stage, and target close date. This field is crucial for partners to monitor the progression of the opportunity.</p>
    pub fn set_life_cycle(mut self, input: ::std::option::Option<crate::types::AwsOpportunityLifeCycle>) -> Self {
        self.life_cycle = input;
        self
    }
    /// <p>Contains lifecycle information for the AWS Opportunity, including review status, stage, and target close date. This field is crucial for partners to monitor the progression of the opportunity.</p>
    pub fn get_life_cycle(&self) -> &::std::option::Option<crate::types::AwsOpportunityLifeCycle> {
        &self.life_cycle
    }
    /// Appends an item to `opportunity_team`.
    ///
    /// To override the contents of this collection use [`set_opportunity_team`](Self::set_opportunity_team).
    ///
    /// <p>Details the AWS opportunity team, including members involved. This information helps partners know who from AWS is engaged and what their role is.</p>
    pub fn opportunity_team(mut self, input: crate::types::AwsTeamMember) -> Self {
        let mut v = self.opportunity_team.unwrap_or_default();
        v.push(input);
        self.opportunity_team = ::std::option::Option::Some(v);
        self
    }
    /// <p>Details the AWS opportunity team, including members involved. This information helps partners know who from AWS is engaged and what their role is.</p>
    pub fn set_opportunity_team(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AwsTeamMember>>) -> Self {
        self.opportunity_team = input;
        self
    }
    /// <p>Details the AWS opportunity team, including members involved. This information helps partners know who from AWS is engaged and what their role is.</p>
    pub fn get_opportunity_team(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsTeamMember>> {
        &self.opportunity_team
    }
    /// <p>Provides insights into the AWS Opportunity, including engagement score and recommended actions that AWS suggests for the partner.</p>
    pub fn insights(mut self, input: crate::types::AwsOpportunityInsights) -> Self {
        self.insights = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides insights into the AWS Opportunity, including engagement score and recommended actions that AWS suggests for the partner.</p>
    pub fn set_insights(mut self, input: ::std::option::Option<crate::types::AwsOpportunityInsights>) -> Self {
        self.insights = input;
        self
    }
    /// <p>Provides insights into the AWS Opportunity, including engagement score and recommended actions that AWS suggests for the partner.</p>
    pub fn get_insights(&self) -> &::std::option::Option<crate::types::AwsOpportunityInsights> {
        &self.insights
    }
    /// <p>Provides a reason for any changes in the involvement type of AWS in the opportunity. This field is used to track why the level of AWS engagement has changed from <code>For Visibility Only</code> to <code>Co-sell</code> offering transparency into the partnership dynamics.</p>
    pub fn involvement_type_change_reason(mut self, input: crate::types::InvolvementTypeChangeReason) -> Self {
        self.involvement_type_change_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides a reason for any changes in the involvement type of AWS in the opportunity. This field is used to track why the level of AWS engagement has changed from <code>For Visibility Only</code> to <code>Co-sell</code> offering transparency into the partnership dynamics.</p>
    pub fn set_involvement_type_change_reason(mut self, input: ::std::option::Option<crate::types::InvolvementTypeChangeReason>) -> Self {
        self.involvement_type_change_reason = input;
        self
    }
    /// <p>Provides a reason for any changes in the involvement type of AWS in the opportunity. This field is used to track why the level of AWS engagement has changed from <code>For Visibility Only</code> to <code>Co-sell</code> offering transparency into the partnership dynamics.</p>
    pub fn get_involvement_type_change_reason(&self) -> &::std::option::Option<crate::types::InvolvementTypeChangeReason> {
        &self.involvement_type_change_reason
    }
    /// <p>Lists related entity identifiers, such as AWS products or partner solutions, associated with the AWS Opportunity. These identifiers provide additional context and help partners understand which AWS services are involved.</p>
    pub fn related_entity_ids(mut self, input: crate::types::AwsOpportunityRelatedEntities) -> Self {
        self.related_entity_ids = ::std::option::Option::Some(input);
        self
    }
    /// <p>Lists related entity identifiers, such as AWS products or partner solutions, associated with the AWS Opportunity. These identifiers provide additional context and help partners understand which AWS services are involved.</p>
    pub fn set_related_entity_ids(mut self, input: ::std::option::Option<crate::types::AwsOpportunityRelatedEntities>) -> Self {
        self.related_entity_ids = input;
        self
    }
    /// <p>Lists related entity identifiers, such as AWS products or partner solutions, associated with the AWS Opportunity. These identifiers provide additional context and help partners understand which AWS services are involved.</p>
    pub fn get_related_entity_ids(&self) -> &::std::option::Option<crate::types::AwsOpportunityRelatedEntities> {
        &self.related_entity_ids
    }
    /// <p>Provides details about the customer associated with the AWS Opportunity, including account information, industry, and other customer data. These details help partners understand the business context of the opportunity.</p>
    pub fn customer(mut self, input: crate::types::AwsOpportunityCustomer) -> Self {
        self.customer = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides details about the customer associated with the AWS Opportunity, including account information, industry, and other customer data. These details help partners understand the business context of the opportunity.</p>
    pub fn set_customer(mut self, input: ::std::option::Option<crate::types::AwsOpportunityCustomer>) -> Self {
        self.customer = input;
        self
    }
    /// <p>Provides details about the customer associated with the AWS Opportunity, including account information, industry, and other customer data. These details help partners understand the business context of the opportunity.</p>
    pub fn get_customer(&self) -> &::std::option::Option<crate::types::AwsOpportunityCustomer> {
        &self.customer
    }
    /// <p>Provides details about the project associated with the AWS Opportunity, including the customer’s business problem, expected outcomes, and project scope. This information is crucial for understanding the broader context of the opportunity.</p>
    pub fn project(mut self, input: crate::types::AwsOpportunityProject) -> Self {
        self.project = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides details about the project associated with the AWS Opportunity, including the customer’s business problem, expected outcomes, and project scope. This information is crucial for understanding the broader context of the opportunity.</p>
    pub fn set_project(mut self, input: ::std::option::Option<crate::types::AwsOpportunityProject>) -> Self {
        self.project = input;
        self
    }
    /// <p>Provides details about the project associated with the AWS Opportunity, including the customer’s business problem, expected outcomes, and project scope. This information is crucial for understanding the broader context of the opportunity.</p>
    pub fn get_project(&self) -> &::std::option::Option<crate::types::AwsOpportunityProject> {
        &self.project
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetAwsOpportunitySummaryOutput`](crate::operation::get_aws_opportunity_summary::GetAwsOpportunitySummaryOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`catalog`](crate::operation::get_aws_opportunity_summary::builders::GetAwsOpportunitySummaryOutputBuilder::catalog)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_aws_opportunity_summary::GetAwsOpportunitySummaryOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_aws_opportunity_summary::GetAwsOpportunitySummaryOutput {
            catalog: self.catalog.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "catalog",
                    "catalog was not specified but it is required when building GetAwsOpportunitySummaryOutput",
                )
            })?,
            related_opportunity_id: self.related_opportunity_id,
            origin: self.origin,
            involvement_type: self.involvement_type,
            visibility: self.visibility,
            life_cycle: self.life_cycle,
            opportunity_team: self.opportunity_team,
            insights: self.insights,
            involvement_type_change_reason: self.involvement_type_change_reason,
            related_entity_ids: self.related_entity_ids,
            customer: self.customer,
            project: self.project,
            _request_id: self._request_id,
        })
    }
}
