// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetAwsOpportunitySummaryInput {
    /// <p>Specifies the catalog in which the AWS Opportunity is located. Accepted values include <code>AWS</code> for production opportunities or <code>Sandbox</code> for testing purposes. The catalog determines which environment the opportunity data is pulled from.</p>
    pub catalog: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the related partner opportunity. Use this field to correlate an AWS opportunity with its corresponding partner opportunity.</p>
    pub related_opportunity_identifier: ::std::option::Option<::std::string::String>,
}
impl GetAwsOpportunitySummaryInput {
    /// <p>Specifies the catalog in which the AWS Opportunity is located. Accepted values include <code>AWS</code> for production opportunities or <code>Sandbox</code> for testing purposes. The catalog determines which environment the opportunity data is pulled from.</p>
    pub fn catalog(&self) -> ::std::option::Option<&str> {
        self.catalog.as_deref()
    }
    /// <p>The unique identifier for the related partner opportunity. Use this field to correlate an AWS opportunity with its corresponding partner opportunity.</p>
    pub fn related_opportunity_identifier(&self) -> ::std::option::Option<&str> {
        self.related_opportunity_identifier.as_deref()
    }
}
impl GetAwsOpportunitySummaryInput {
    /// Creates a new builder-style object to manufacture [`GetAwsOpportunitySummaryInput`](crate::operation::get_aws_opportunity_summary::GetAwsOpportunitySummaryInput).
    pub fn builder() -> crate::operation::get_aws_opportunity_summary::builders::GetAwsOpportunitySummaryInputBuilder {
        crate::operation::get_aws_opportunity_summary::builders::GetAwsOpportunitySummaryInputBuilder::default()
    }
}

/// A builder for [`GetAwsOpportunitySummaryInput`](crate::operation::get_aws_opportunity_summary::GetAwsOpportunitySummaryInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetAwsOpportunitySummaryInputBuilder {
    pub(crate) catalog: ::std::option::Option<::std::string::String>,
    pub(crate) related_opportunity_identifier: ::std::option::Option<::std::string::String>,
}
impl GetAwsOpportunitySummaryInputBuilder {
    /// <p>Specifies the catalog in which the AWS Opportunity is located. Accepted values include <code>AWS</code> for production opportunities or <code>Sandbox</code> for testing purposes. The catalog determines which environment the opportunity data is pulled from.</p>
    /// This field is required.
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the catalog in which the AWS Opportunity is located. Accepted values include <code>AWS</code> for production opportunities or <code>Sandbox</code> for testing purposes. The catalog determines which environment the opportunity data is pulled from.</p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>Specifies the catalog in which the AWS Opportunity is located. Accepted values include <code>AWS</code> for production opportunities or <code>Sandbox</code> for testing purposes. The catalog determines which environment the opportunity data is pulled from.</p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog
    }
    /// <p>The unique identifier for the related partner opportunity. Use this field to correlate an AWS opportunity with its corresponding partner opportunity.</p>
    /// This field is required.
    pub fn related_opportunity_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.related_opportunity_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the related partner opportunity. Use this field to correlate an AWS opportunity with its corresponding partner opportunity.</p>
    pub fn set_related_opportunity_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.related_opportunity_identifier = input;
        self
    }
    /// <p>The unique identifier for the related partner opportunity. Use this field to correlate an AWS opportunity with its corresponding partner opportunity.</p>
    pub fn get_related_opportunity_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.related_opportunity_identifier
    }
    /// Consumes the builder and constructs a [`GetAwsOpportunitySummaryInput`](crate::operation::get_aws_opportunity_summary::GetAwsOpportunitySummaryInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_aws_opportunity_summary::GetAwsOpportunitySummaryInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_aws_opportunity_summary::GetAwsOpportunitySummaryInput {
            catalog: self.catalog,
            related_opportunity_identifier: self.related_opportunity_identifier,
        })
    }
}
