// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateEngagementInvitationInput {
    /// <p>Specifies the catalog related to the engagement. Accepted values are <code>AWS</code> and <code>Sandbox</code>, which determine the environment in which the engagement is managed.</p>
    pub catalog: ::std::option::Option<::std::string::String>,
    /// <p>Specifies a unique, client-generated UUID to ensure that the request is handled exactly once. This token helps prevent duplicate invitation creations.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the <code>Engagement</code> associated with the invitation. This parameter ensures the invitation is created within the correct <code>Engagement</code> context.</p>
    pub engagement_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The <code>Invitation</code> object all information necessary to initiate an engagement invitation to a partner. It contains a personalized message from the sender, the invitation's receiver, and a payload. The <code>Payload</code> can be the <code>OpportunityInvitation</code>, which includes detailed structures for sender contacts, partner responsibilities, customer information, and project details.</p>
    pub invitation: ::std::option::Option<crate::types::Invitation>,
}
impl CreateEngagementInvitationInput {
    /// <p>Specifies the catalog related to the engagement. Accepted values are <code>AWS</code> and <code>Sandbox</code>, which determine the environment in which the engagement is managed.</p>
    pub fn catalog(&self) -> ::std::option::Option<&str> {
        self.catalog.as_deref()
    }
    /// <p>Specifies a unique, client-generated UUID to ensure that the request is handled exactly once. This token helps prevent duplicate invitation creations.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The unique identifier of the <code>Engagement</code> associated with the invitation. This parameter ensures the invitation is created within the correct <code>Engagement</code> context.</p>
    pub fn engagement_identifier(&self) -> ::std::option::Option<&str> {
        self.engagement_identifier.as_deref()
    }
    /// <p>The <code>Invitation</code> object all information necessary to initiate an engagement invitation to a partner. It contains a personalized message from the sender, the invitation's receiver, and a payload. The <code>Payload</code> can be the <code>OpportunityInvitation</code>, which includes detailed structures for sender contacts, partner responsibilities, customer information, and project details.</p>
    pub fn invitation(&self) -> ::std::option::Option<&crate::types::Invitation> {
        self.invitation.as_ref()
    }
}
impl CreateEngagementInvitationInput {
    /// Creates a new builder-style object to manufacture [`CreateEngagementInvitationInput`](crate::operation::create_engagement_invitation::CreateEngagementInvitationInput).
    pub fn builder() -> crate::operation::create_engagement_invitation::builders::CreateEngagementInvitationInputBuilder {
        crate::operation::create_engagement_invitation::builders::CreateEngagementInvitationInputBuilder::default()
    }
}

/// A builder for [`CreateEngagementInvitationInput`](crate::operation::create_engagement_invitation::CreateEngagementInvitationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateEngagementInvitationInputBuilder {
    pub(crate) catalog: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) engagement_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) invitation: ::std::option::Option<crate::types::Invitation>,
}
impl CreateEngagementInvitationInputBuilder {
    /// <p>Specifies the catalog related to the engagement. Accepted values are <code>AWS</code> and <code>Sandbox</code>, which determine the environment in which the engagement is managed.</p>
    /// This field is required.
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the catalog related to the engagement. Accepted values are <code>AWS</code> and <code>Sandbox</code>, which determine the environment in which the engagement is managed.</p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>Specifies the catalog related to the engagement. Accepted values are <code>AWS</code> and <code>Sandbox</code>, which determine the environment in which the engagement is managed.</p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog
    }
    /// <p>Specifies a unique, client-generated UUID to ensure that the request is handled exactly once. This token helps prevent duplicate invitation creations.</p>
    /// This field is required.
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a unique, client-generated UUID to ensure that the request is handled exactly once. This token helps prevent duplicate invitation creations.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Specifies a unique, client-generated UUID to ensure that the request is handled exactly once. This token helps prevent duplicate invitation creations.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The unique identifier of the <code>Engagement</code> associated with the invitation. This parameter ensures the invitation is created within the correct <code>Engagement</code> context.</p>
    /// This field is required.
    pub fn engagement_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engagement_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the <code>Engagement</code> associated with the invitation. This parameter ensures the invitation is created within the correct <code>Engagement</code> context.</p>
    pub fn set_engagement_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engagement_identifier = input;
        self
    }
    /// <p>The unique identifier of the <code>Engagement</code> associated with the invitation. This parameter ensures the invitation is created within the correct <code>Engagement</code> context.</p>
    pub fn get_engagement_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.engagement_identifier
    }
    /// <p>The <code>Invitation</code> object all information necessary to initiate an engagement invitation to a partner. It contains a personalized message from the sender, the invitation's receiver, and a payload. The <code>Payload</code> can be the <code>OpportunityInvitation</code>, which includes detailed structures for sender contacts, partner responsibilities, customer information, and project details.</p>
    /// This field is required.
    pub fn invitation(mut self, input: crate::types::Invitation) -> Self {
        self.invitation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>Invitation</code> object all information necessary to initiate an engagement invitation to a partner. It contains a personalized message from the sender, the invitation's receiver, and a payload. The <code>Payload</code> can be the <code>OpportunityInvitation</code>, which includes detailed structures for sender contacts, partner responsibilities, customer information, and project details.</p>
    pub fn set_invitation(mut self, input: ::std::option::Option<crate::types::Invitation>) -> Self {
        self.invitation = input;
        self
    }
    /// <p>The <code>Invitation</code> object all information necessary to initiate an engagement invitation to a partner. It contains a personalized message from the sender, the invitation's receiver, and a payload. The <code>Payload</code> can be the <code>OpportunityInvitation</code>, which includes detailed structures for sender contacts, partner responsibilities, customer information, and project details.</p>
    pub fn get_invitation(&self) -> &::std::option::Option<crate::types::Invitation> {
        &self.invitation
    }
    /// Consumes the builder and constructs a [`CreateEngagementInvitationInput`](crate::operation::create_engagement_invitation::CreateEngagementInvitationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_engagement_invitation::CreateEngagementInvitationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_engagement_invitation::CreateEngagementInvitationInput {
            catalog: self.catalog,
            client_token: self.client_token,
            engagement_identifier: self.engagement_identifier,
            invitation: self.invitation,
        })
    }
}
