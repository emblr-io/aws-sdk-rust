// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a summary of a task related to creating an engagement from an opportunity. This structure contains key information about the task's status, associated identifiers, and any failure details.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListEngagementFromOpportunityTaskSummary {
    /// <p>A unique identifier for a specific task.</p>
    pub task_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) uniquely identifying this task within AWS. This ARN can be used for referencing the task in other AWS services or APIs.</p>
    pub task_arn: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp indicating when the task was initiated, in RFC 3339 5.6 date-time format.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The current status of the task.</p>
    pub task_status: ::std::option::Option<crate::types::TaskStatus>,
    /// <p>A detailed message providing additional information about the task, especially useful in case of failures. This field may contain error details or other relevant information about the task's execution</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>A code indicating the specific reason for a task failure. This field is populated when the task status is FAILED and provides a categorized reason for the failure.</p>
    pub reason_code: ::std::option::Option<crate::types::ReasonCode>,
    /// <p>The unique identifier of the original Opportunity from which the Engagement is being created. This field helps track the source of the Engagement creation task.</p>
    pub opportunity_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the resource snapshot job associated with this task, if a snapshot was created as part of the Engagement creation process.</p>
    pub resource_snapshot_job_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the engagement created as a result of the task. This field is populated when the task is completed successfully.</p>
    pub engagement_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the Engagement Invitation.</p>
    pub engagement_invitation_id: ::std::option::Option<::std::string::String>,
}
impl ListEngagementFromOpportunityTaskSummary {
    /// <p>A unique identifier for a specific task.</p>
    pub fn task_id(&self) -> ::std::option::Option<&str> {
        self.task_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) uniquely identifying this task within AWS. This ARN can be used for referencing the task in other AWS services or APIs.</p>
    pub fn task_arn(&self) -> ::std::option::Option<&str> {
        self.task_arn.as_deref()
    }
    /// <p>The timestamp indicating when the task was initiated, in RFC 3339 5.6 date-time format.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The current status of the task.</p>
    pub fn task_status(&self) -> ::std::option::Option<&crate::types::TaskStatus> {
        self.task_status.as_ref()
    }
    /// <p>A detailed message providing additional information about the task, especially useful in case of failures. This field may contain error details or other relevant information about the task's execution</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>A code indicating the specific reason for a task failure. This field is populated when the task status is FAILED and provides a categorized reason for the failure.</p>
    pub fn reason_code(&self) -> ::std::option::Option<&crate::types::ReasonCode> {
        self.reason_code.as_ref()
    }
    /// <p>The unique identifier of the original Opportunity from which the Engagement is being created. This field helps track the source of the Engagement creation task.</p>
    pub fn opportunity_id(&self) -> ::std::option::Option<&str> {
        self.opportunity_id.as_deref()
    }
    /// <p>The identifier of the resource snapshot job associated with this task, if a snapshot was created as part of the Engagement creation process.</p>
    pub fn resource_snapshot_job_id(&self) -> ::std::option::Option<&str> {
        self.resource_snapshot_job_id.as_deref()
    }
    /// <p>The unique identifier of the engagement created as a result of the task. This field is populated when the task is completed successfully.</p>
    pub fn engagement_id(&self) -> ::std::option::Option<&str> {
        self.engagement_id.as_deref()
    }
    /// <p>The unique identifier of the Engagement Invitation.</p>
    pub fn engagement_invitation_id(&self) -> ::std::option::Option<&str> {
        self.engagement_invitation_id.as_deref()
    }
}
impl ListEngagementFromOpportunityTaskSummary {
    /// Creates a new builder-style object to manufacture [`ListEngagementFromOpportunityTaskSummary`](crate::types::ListEngagementFromOpportunityTaskSummary).
    pub fn builder() -> crate::types::builders::ListEngagementFromOpportunityTaskSummaryBuilder {
        crate::types::builders::ListEngagementFromOpportunityTaskSummaryBuilder::default()
    }
}

/// A builder for [`ListEngagementFromOpportunityTaskSummary`](crate::types::ListEngagementFromOpportunityTaskSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListEngagementFromOpportunityTaskSummaryBuilder {
    pub(crate) task_id: ::std::option::Option<::std::string::String>,
    pub(crate) task_arn: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) task_status: ::std::option::Option<crate::types::TaskStatus>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) reason_code: ::std::option::Option<crate::types::ReasonCode>,
    pub(crate) opportunity_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_snapshot_job_id: ::std::option::Option<::std::string::String>,
    pub(crate) engagement_id: ::std::option::Option<::std::string::String>,
    pub(crate) engagement_invitation_id: ::std::option::Option<::std::string::String>,
}
impl ListEngagementFromOpportunityTaskSummaryBuilder {
    /// <p>A unique identifier for a specific task.</p>
    pub fn task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for a specific task.</p>
    pub fn set_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_id = input;
        self
    }
    /// <p>A unique identifier for a specific task.</p>
    pub fn get_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_id
    }
    /// <p>The Amazon Resource Name (ARN) uniquely identifying this task within AWS. This ARN can be used for referencing the task in other AWS services or APIs.</p>
    pub fn task_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) uniquely identifying this task within AWS. This ARN can be used for referencing the task in other AWS services or APIs.</p>
    pub fn set_task_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) uniquely identifying this task within AWS. This ARN can be used for referencing the task in other AWS services or APIs.</p>
    pub fn get_task_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_arn
    }
    /// <p>The timestamp indicating when the task was initiated, in RFC 3339 5.6 date-time format.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp indicating when the task was initiated, in RFC 3339 5.6 date-time format.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The timestamp indicating when the task was initiated, in RFC 3339 5.6 date-time format.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The current status of the task.</p>
    pub fn task_status(mut self, input: crate::types::TaskStatus) -> Self {
        self.task_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the task.</p>
    pub fn set_task_status(mut self, input: ::std::option::Option<crate::types::TaskStatus>) -> Self {
        self.task_status = input;
        self
    }
    /// <p>The current status of the task.</p>
    pub fn get_task_status(&self) -> &::std::option::Option<crate::types::TaskStatus> {
        &self.task_status
    }
    /// <p>A detailed message providing additional information about the task, especially useful in case of failures. This field may contain error details or other relevant information about the task's execution</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A detailed message providing additional information about the task, especially useful in case of failures. This field may contain error details or other relevant information about the task's execution</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>A detailed message providing additional information about the task, especially useful in case of failures. This field may contain error details or other relevant information about the task's execution</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>A code indicating the specific reason for a task failure. This field is populated when the task status is FAILED and provides a categorized reason for the failure.</p>
    pub fn reason_code(mut self, input: crate::types::ReasonCode) -> Self {
        self.reason_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>A code indicating the specific reason for a task failure. This field is populated when the task status is FAILED and provides a categorized reason for the failure.</p>
    pub fn set_reason_code(mut self, input: ::std::option::Option<crate::types::ReasonCode>) -> Self {
        self.reason_code = input;
        self
    }
    /// <p>A code indicating the specific reason for a task failure. This field is populated when the task status is FAILED and provides a categorized reason for the failure.</p>
    pub fn get_reason_code(&self) -> &::std::option::Option<crate::types::ReasonCode> {
        &self.reason_code
    }
    /// <p>The unique identifier of the original Opportunity from which the Engagement is being created. This field helps track the source of the Engagement creation task.</p>
    pub fn opportunity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.opportunity_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the original Opportunity from which the Engagement is being created. This field helps track the source of the Engagement creation task.</p>
    pub fn set_opportunity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.opportunity_id = input;
        self
    }
    /// <p>The unique identifier of the original Opportunity from which the Engagement is being created. This field helps track the source of the Engagement creation task.</p>
    pub fn get_opportunity_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.opportunity_id
    }
    /// <p>The identifier of the resource snapshot job associated with this task, if a snapshot was created as part of the Engagement creation process.</p>
    pub fn resource_snapshot_job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_snapshot_job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the resource snapshot job associated with this task, if a snapshot was created as part of the Engagement creation process.</p>
    pub fn set_resource_snapshot_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_snapshot_job_id = input;
        self
    }
    /// <p>The identifier of the resource snapshot job associated with this task, if a snapshot was created as part of the Engagement creation process.</p>
    pub fn get_resource_snapshot_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_snapshot_job_id
    }
    /// <p>The unique identifier of the engagement created as a result of the task. This field is populated when the task is completed successfully.</p>
    pub fn engagement_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engagement_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the engagement created as a result of the task. This field is populated when the task is completed successfully.</p>
    pub fn set_engagement_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engagement_id = input;
        self
    }
    /// <p>The unique identifier of the engagement created as a result of the task. This field is populated when the task is completed successfully.</p>
    pub fn get_engagement_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.engagement_id
    }
    /// <p>The unique identifier of the Engagement Invitation.</p>
    pub fn engagement_invitation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engagement_invitation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Engagement Invitation.</p>
    pub fn set_engagement_invitation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engagement_invitation_id = input;
        self
    }
    /// <p>The unique identifier of the Engagement Invitation.</p>
    pub fn get_engagement_invitation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.engagement_invitation_id
    }
    /// Consumes the builder and constructs a [`ListEngagementFromOpportunityTaskSummary`](crate::types::ListEngagementFromOpportunityTaskSummary).
    pub fn build(self) -> crate::types::ListEngagementFromOpportunityTaskSummary {
        crate::types::ListEngagementFromOpportunityTaskSummary {
            task_id: self.task_id,
            task_arn: self.task_arn,
            start_time: self.start_time,
            task_status: self.task_status,
            message: self.message,
            reason_code: self.reason_code,
            opportunity_id: self.opportunity_id,
            resource_snapshot_job_id: self.resource_snapshot_job_id,
            engagement_id: self.engagement_id,
            engagement_invitation_id: self.engagement_invitation_id,
        }
    }
}
