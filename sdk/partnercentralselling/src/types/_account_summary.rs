// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains an <code>Account</code>'s subset of fields.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AccountSummary {
    /// <p>Specifies which industry the end <code>Customer</code> belongs to associated with the <code>Opportunity</code>. It refers to the category or sector that the customer's business operates in.</p>
    /// <p>To submit a value outside the picklist, use <code>Other</code>.</p>
    /// <p>Conditionally mandatory if <code>Other</code> is selected for Industry Vertical in LOVs.</p>
    pub industry: ::std::option::Option<crate::types::Industry>,
    /// <p>Specifies the end <code>Customer</code>'s industry associated with the <code> Opportunity</code>, when the selected value in the <code>Industry</code> field is <code>Other</code>. This field is relevant when the customer's industry doesn't fall under the predefined picklist values and requires a custom description.</p>
    pub other_industry: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the end <code>Customer</code>'s company name associated with the <code>Opportunity</code>.</p>
    pub company_name: ::std::string::String,
    /// <p>Specifies the end customer's company website URL associated with the <code>Opportunity</code>. This value is crucial to map the customer within the Amazon Web Services CRM system.</p>
    pub website_url: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the end <code>Customer</code>'s address details associated with the <code>Opportunity</code>.</p>
    pub address: ::std::option::Option<crate::types::AddressSummary>,
}
impl AccountSummary {
    /// <p>Specifies which industry the end <code>Customer</code> belongs to associated with the <code>Opportunity</code>. It refers to the category or sector that the customer's business operates in.</p>
    /// <p>To submit a value outside the picklist, use <code>Other</code>.</p>
    /// <p>Conditionally mandatory if <code>Other</code> is selected for Industry Vertical in LOVs.</p>
    pub fn industry(&self) -> ::std::option::Option<&crate::types::Industry> {
        self.industry.as_ref()
    }
    /// <p>Specifies the end <code>Customer</code>'s industry associated with the <code> Opportunity</code>, when the selected value in the <code>Industry</code> field is <code>Other</code>. This field is relevant when the customer's industry doesn't fall under the predefined picklist values and requires a custom description.</p>
    pub fn other_industry(&self) -> ::std::option::Option<&str> {
        self.other_industry.as_deref()
    }
    /// <p>Specifies the end <code>Customer</code>'s company name associated with the <code>Opportunity</code>.</p>
    pub fn company_name(&self) -> &str {
        use std::ops::Deref;
        self.company_name.deref()
    }
    /// <p>Specifies the end customer's company website URL associated with the <code>Opportunity</code>. This value is crucial to map the customer within the Amazon Web Services CRM system.</p>
    pub fn website_url(&self) -> ::std::option::Option<&str> {
        self.website_url.as_deref()
    }
    /// <p>Specifies the end <code>Customer</code>'s address details associated with the <code>Opportunity</code>.</p>
    pub fn address(&self) -> ::std::option::Option<&crate::types::AddressSummary> {
        self.address.as_ref()
    }
}
impl ::std::fmt::Debug for AccountSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AccountSummary");
        formatter.field("industry", &self.industry);
        formatter.field("other_industry", &self.other_industry);
        formatter.field("company_name", &"*** Sensitive Data Redacted ***");
        formatter.field("website_url", &"*** Sensitive Data Redacted ***");
        formatter.field("address", &self.address);
        formatter.finish()
    }
}
impl AccountSummary {
    /// Creates a new builder-style object to manufacture [`AccountSummary`](crate::types::AccountSummary).
    pub fn builder() -> crate::types::builders::AccountSummaryBuilder {
        crate::types::builders::AccountSummaryBuilder::default()
    }
}

/// A builder for [`AccountSummary`](crate::types::AccountSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AccountSummaryBuilder {
    pub(crate) industry: ::std::option::Option<crate::types::Industry>,
    pub(crate) other_industry: ::std::option::Option<::std::string::String>,
    pub(crate) company_name: ::std::option::Option<::std::string::String>,
    pub(crate) website_url: ::std::option::Option<::std::string::String>,
    pub(crate) address: ::std::option::Option<crate::types::AddressSummary>,
}
impl AccountSummaryBuilder {
    /// <p>Specifies which industry the end <code>Customer</code> belongs to associated with the <code>Opportunity</code>. It refers to the category or sector that the customer's business operates in.</p>
    /// <p>To submit a value outside the picklist, use <code>Other</code>.</p>
    /// <p>Conditionally mandatory if <code>Other</code> is selected for Industry Vertical in LOVs.</p>
    pub fn industry(mut self, input: crate::types::Industry) -> Self {
        self.industry = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies which industry the end <code>Customer</code> belongs to associated with the <code>Opportunity</code>. It refers to the category or sector that the customer's business operates in.</p>
    /// <p>To submit a value outside the picklist, use <code>Other</code>.</p>
    /// <p>Conditionally mandatory if <code>Other</code> is selected for Industry Vertical in LOVs.</p>
    pub fn set_industry(mut self, input: ::std::option::Option<crate::types::Industry>) -> Self {
        self.industry = input;
        self
    }
    /// <p>Specifies which industry the end <code>Customer</code> belongs to associated with the <code>Opportunity</code>. It refers to the category or sector that the customer's business operates in.</p>
    /// <p>To submit a value outside the picklist, use <code>Other</code>.</p>
    /// <p>Conditionally mandatory if <code>Other</code> is selected for Industry Vertical in LOVs.</p>
    pub fn get_industry(&self) -> &::std::option::Option<crate::types::Industry> {
        &self.industry
    }
    /// <p>Specifies the end <code>Customer</code>'s industry associated with the <code> Opportunity</code>, when the selected value in the <code>Industry</code> field is <code>Other</code>. This field is relevant when the customer's industry doesn't fall under the predefined picklist values and requires a custom description.</p>
    pub fn other_industry(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.other_industry = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the end <code>Customer</code>'s industry associated with the <code> Opportunity</code>, when the selected value in the <code>Industry</code> field is <code>Other</code>. This field is relevant when the customer's industry doesn't fall under the predefined picklist values and requires a custom description.</p>
    pub fn set_other_industry(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.other_industry = input;
        self
    }
    /// <p>Specifies the end <code>Customer</code>'s industry associated with the <code> Opportunity</code>, when the selected value in the <code>Industry</code> field is <code>Other</code>. This field is relevant when the customer's industry doesn't fall under the predefined picklist values and requires a custom description.</p>
    pub fn get_other_industry(&self) -> &::std::option::Option<::std::string::String> {
        &self.other_industry
    }
    /// <p>Specifies the end <code>Customer</code>'s company name associated with the <code>Opportunity</code>.</p>
    /// This field is required.
    pub fn company_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.company_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the end <code>Customer</code>'s company name associated with the <code>Opportunity</code>.</p>
    pub fn set_company_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.company_name = input;
        self
    }
    /// <p>Specifies the end <code>Customer</code>'s company name associated with the <code>Opportunity</code>.</p>
    pub fn get_company_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.company_name
    }
    /// <p>Specifies the end customer's company website URL associated with the <code>Opportunity</code>. This value is crucial to map the customer within the Amazon Web Services CRM system.</p>
    pub fn website_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.website_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the end customer's company website URL associated with the <code>Opportunity</code>. This value is crucial to map the customer within the Amazon Web Services CRM system.</p>
    pub fn set_website_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.website_url = input;
        self
    }
    /// <p>Specifies the end customer's company website URL associated with the <code>Opportunity</code>. This value is crucial to map the customer within the Amazon Web Services CRM system.</p>
    pub fn get_website_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.website_url
    }
    /// <p>Specifies the end <code>Customer</code>'s address details associated with the <code>Opportunity</code>.</p>
    pub fn address(mut self, input: crate::types::AddressSummary) -> Self {
        self.address = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the end <code>Customer</code>'s address details associated with the <code>Opportunity</code>.</p>
    pub fn set_address(mut self, input: ::std::option::Option<crate::types::AddressSummary>) -> Self {
        self.address = input;
        self
    }
    /// <p>Specifies the end <code>Customer</code>'s address details associated with the <code>Opportunity</code>.</p>
    pub fn get_address(&self) -> &::std::option::Option<crate::types::AddressSummary> {
        &self.address
    }
    /// Consumes the builder and constructs a [`AccountSummary`](crate::types::AccountSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`company_name`](crate::types::builders::AccountSummaryBuilder::company_name)
    pub fn build(self) -> ::std::result::Result<crate::types::AccountSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AccountSummary {
            industry: self.industry,
            other_industry: self.other_industry,
            company_name: self.company_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "company_name",
                    "company_name was not specified but it is required when building AccountSummary",
                )
            })?,
            website_url: self.website_url,
            address: self.address,
        })
    }
}
impl ::std::fmt::Debug for AccountSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AccountSummaryBuilder");
        formatter.field("industry", &self.industry);
        formatter.field("other_industry", &self.other_industry);
        formatter.field("company_name", &"*** Sensitive Data Redacted ***");
        formatter.field("website_url", &"*** Sensitive Data Redacted ***");
        formatter.field("address", &self.address);
        formatter.finish()
    }
}
