// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the lifecycle view of an opportunity resource shared through a snapshot.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct LifeCycleForView {
    /// <p>The projected launch date of the opportunity shared through a snapshot.</p>
    pub target_close_date: ::std::option::Option<::std::string::String>,
    /// <p>Defines the approval status of the opportunity shared through a snapshot.</p>
    pub review_status: ::std::option::Option<crate::types::ReviewStatus>,
    /// <p>Defines the current stage of the opportunity shared through a snapshot.</p>
    pub stage: ::std::option::Option<crate::types::Stage>,
    /// <p>Describes the next steps for the opportunity shared through a snapshot.</p>
    pub next_steps: ::std::option::Option<::std::string::String>,
}
impl LifeCycleForView {
    /// <p>The projected launch date of the opportunity shared through a snapshot.</p>
    pub fn target_close_date(&self) -> ::std::option::Option<&str> {
        self.target_close_date.as_deref()
    }
    /// <p>Defines the approval status of the opportunity shared through a snapshot.</p>
    pub fn review_status(&self) -> ::std::option::Option<&crate::types::ReviewStatus> {
        self.review_status.as_ref()
    }
    /// <p>Defines the current stage of the opportunity shared through a snapshot.</p>
    pub fn stage(&self) -> ::std::option::Option<&crate::types::Stage> {
        self.stage.as_ref()
    }
    /// <p>Describes the next steps for the opportunity shared through a snapshot.</p>
    pub fn next_steps(&self) -> ::std::option::Option<&str> {
        self.next_steps.as_deref()
    }
}
impl ::std::fmt::Debug for LifeCycleForView {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("LifeCycleForView");
        formatter.field("target_close_date", &self.target_close_date);
        formatter.field("review_status", &self.review_status);
        formatter.field("stage", &self.stage);
        formatter.field("next_steps", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl LifeCycleForView {
    /// Creates a new builder-style object to manufacture [`LifeCycleForView`](crate::types::LifeCycleForView).
    pub fn builder() -> crate::types::builders::LifeCycleForViewBuilder {
        crate::types::builders::LifeCycleForViewBuilder::default()
    }
}

/// A builder for [`LifeCycleForView`](crate::types::LifeCycleForView).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct LifeCycleForViewBuilder {
    pub(crate) target_close_date: ::std::option::Option<::std::string::String>,
    pub(crate) review_status: ::std::option::Option<crate::types::ReviewStatus>,
    pub(crate) stage: ::std::option::Option<crate::types::Stage>,
    pub(crate) next_steps: ::std::option::Option<::std::string::String>,
}
impl LifeCycleForViewBuilder {
    /// <p>The projected launch date of the opportunity shared through a snapshot.</p>
    pub fn target_close_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_close_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The projected launch date of the opportunity shared through a snapshot.</p>
    pub fn set_target_close_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_close_date = input;
        self
    }
    /// <p>The projected launch date of the opportunity shared through a snapshot.</p>
    pub fn get_target_close_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_close_date
    }
    /// <p>Defines the approval status of the opportunity shared through a snapshot.</p>
    pub fn review_status(mut self, input: crate::types::ReviewStatus) -> Self {
        self.review_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the approval status of the opportunity shared through a snapshot.</p>
    pub fn set_review_status(mut self, input: ::std::option::Option<crate::types::ReviewStatus>) -> Self {
        self.review_status = input;
        self
    }
    /// <p>Defines the approval status of the opportunity shared through a snapshot.</p>
    pub fn get_review_status(&self) -> &::std::option::Option<crate::types::ReviewStatus> {
        &self.review_status
    }
    /// <p>Defines the current stage of the opportunity shared through a snapshot.</p>
    pub fn stage(mut self, input: crate::types::Stage) -> Self {
        self.stage = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the current stage of the opportunity shared through a snapshot.</p>
    pub fn set_stage(mut self, input: ::std::option::Option<crate::types::Stage>) -> Self {
        self.stage = input;
        self
    }
    /// <p>Defines the current stage of the opportunity shared through a snapshot.</p>
    pub fn get_stage(&self) -> &::std::option::Option<crate::types::Stage> {
        &self.stage
    }
    /// <p>Describes the next steps for the opportunity shared through a snapshot.</p>
    pub fn next_steps(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_steps = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes the next steps for the opportunity shared through a snapshot.</p>
    pub fn set_next_steps(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_steps = input;
        self
    }
    /// <p>Describes the next steps for the opportunity shared through a snapshot.</p>
    pub fn get_next_steps(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_steps
    }
    /// Consumes the builder and constructs a [`LifeCycleForView`](crate::types::LifeCycleForView).
    pub fn build(self) -> crate::types::LifeCycleForView {
        crate::types::LifeCycleForView {
            target_close_date: self.target_close_date,
            review_status: self.review_status,
            stage: self.stage,
            next_steps: self.next_steps,
        }
    }
}
impl ::std::fmt::Debug for LifeCycleForViewBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("LifeCycleForViewBuilder");
        formatter.field("target_close_date", &self.target_close_date);
        formatter.field("review_status", &self.review_status);
        formatter.field("stage", &self.stage);
        formatter.field("next_steps", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
