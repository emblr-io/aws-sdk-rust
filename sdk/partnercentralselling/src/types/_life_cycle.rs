// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains the <code>Opportunity</code> lifecycle's details.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct LifeCycle {
    /// <p>Specifies the current stage of the <code>Opportunity</code>'s lifecycle as it maps to Amazon Web Services stages from the current stage in the partner CRM. This field provides a translated value of the stage, and offers insight into the <code>Opportunity</code>'s progression in the sales cycle, according to Amazon Web Services definitions.</p><note>
    /// <p>A lead and a prospect must be further matured to a <code>Qualified</code> opportunity before submission. Opportunities that were closed/lost before submission aren't suitable for submission.</p>
    /// </note>
    /// <p>The descriptions of each sales stage are:</p>
    /// <ul>
    /// <li>
    /// <p>Prospect: Amazon Web Services identifies the opportunity. It can be active (Comes directly from the end customer through a lead) or latent (Your account team believes it exists based on research, account plans, sales plays).</p></li>
    /// <li>
    /// <p>Qualified: Your account team engaged with the customer to discuss viability and requirements. The customer agreed that the opportunity is real, of interest, and may solve business/technical needs.</p></li>
    /// <li>
    /// <p>Technical Validation: All parties understand the implementation plan.</p></li>
    /// <li>
    /// <p>Business Validation: Pricing was proposed, and all parties agree to the steps to close.</p></li>
    /// <li>
    /// <p>Committed: The customer signed the contract, but Amazon Web Services hasn't started billing.</p></li>
    /// <li>
    /// <p>Launched: The workload is complete, and Amazon Web Services has started billing.</p></li>
    /// <li>
    /// <p>Closed Lost: The opportunity is lost, and there are no steps to move forward.</p></li>
    /// </ul>
    pub stage: ::std::option::Option<crate::types::Stage>,
    /// <p>Specifies the reason code when an opportunity is marked as <i>Closed Lost</i>. When you select an appropriate reason code, you communicate the context for closing the <code>Opportunity</code>, and aid in accurate reports and analysis of opportunity outcomes. The possible values are:</p>
    /// <ul>
    /// <li>
    /// <p>Customer Deficiency: The customer lacked necessary resources or capabilities.</p></li>
    /// <li>
    /// <p>Delay/Cancellation of Project: The project was delayed or canceled.</p></li>
    /// <li>
    /// <p>Legal/Tax/Regulatory: Legal, tax, or regulatory issues prevented progress.</p></li>
    /// <li>
    /// <p>Lost to Competitor—Google: The opportunity was lost to Google.</p></li>
    /// <li>
    /// <p>Lost to Competitor—Microsoft: The opportunity was lost to Microsoft.</p></li>
    /// <li>
    /// <p>Lost to Competitor—SoftLayer: The opportunity was lost to SoftLayer.</p></li>
    /// <li>
    /// <p>Lost to Competitor—VMWare: The opportunity was lost to VMWare.</p></li>
    /// <li>
    /// <p>Lost to Competitor—Other: The opportunity was lost to a competitor not listed above.</p></li>
    /// <li>
    /// <p>No Opportunity: There was no opportunity to pursue.</p></li>
    /// <li>
    /// <p>On Premises Deployment: The customer chose an on-premises solution.</p></li>
    /// <li>
    /// <p>Partner Gap: The partner lacked necessary resources or capabilities.</p></li>
    /// <li>
    /// <p>Price: The price was not competitive or acceptable to the customer.</p></li>
    /// <li>
    /// <p>Security/Compliance: Security or compliance issues prevented progress.</p></li>
    /// <li>
    /// <p>Technical Limitations: Technical limitations prevented progress.</p></li>
    /// <li>
    /// <p>Customer Experience: Issues related to the customer's experience impacted the decision.</p></li>
    /// <li>
    /// <p>Other: Any reason not covered by the other values.</p></li>
    /// <li>
    /// <p>People/Relationship/Governance: Issues related to people, relationships, or governance.</p></li>
    /// <li>
    /// <p>Product/Technology: Issues related to the product or technology.</p></li>
    /// <li>
    /// <p>Financial/Commercial: Financial or commercial issues impacted the decision.</p></li>
    /// </ul>
    pub closed_lost_reason: ::std::option::Option<crate::types::ClosedLostReason>,
    /// <p>Specifies the upcoming actions or tasks for the <code>Opportunity</code>. Use this field to communicate with Amazon Web Services about the next actions required for the <code>Opportunity</code>.</p>
    pub next_steps: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the date when Amazon Web Services expects to start significant billing, when the project finishes, and when it moves into production. This field informs the Amazon Web Services seller about when the opportunity launches and starts to incur Amazon Web Services usage.</p>
    /// <p>Ensure the <code>Target Close Date</code> isn't in the past.</p>
    pub target_close_date: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the review status of an opportunity referred by a partner. This field is read-only and only applicable for partner referrals. The possible values are:</p>
    /// <ul>
    /// <li>
    /// <p>Pending Submission: Not submitted for validation (editable).</p></li>
    /// <li>
    /// <p>Submitted: Submitted for validation, and Amazon Web Services hasn't reviewed it (read-only).</p></li>
    /// <li>
    /// <p>In Review: Amazon Web Services is validating (read-only).</p></li>
    /// <li>
    /// <p>Action Required: Issues that Amazon Web Services highlights need to be addressed. Partners should use the <code>UpdateOpportunity</code> API action to update the opportunity and helps to ensure that all required changes are made. Only the following fields are editable when the <code>Lifecycle.ReviewStatus</code> is <code>Action Required</code>:</p>
    /// <ul>
    /// <li>
    /// <p>Customer.Account.Address.City</p></li>
    /// <li>
    /// <p>Customer.Account.Address.CountryCode</p></li>
    /// <li>
    /// <p>Customer.Account.Address.PostalCode</p></li>
    /// <li>
    /// <p>Customer.Account.Address.StateOrRegion</p></li>
    /// <li>
    /// <p>Customer.Account.Address.StreetAddress</p></li>
    /// <li>
    /// <p>Customer.Account.WebsiteUrl</p></li>
    /// <li>
    /// <p>LifeCycle.TargetCloseDate</p></li>
    /// <li>
    /// <p>Project.ExpectedMonthlyAWSRevenue.Amount</p></li>
    /// <li>
    /// <p>Project.ExpectedMonthlyAWSRevenue.CurrencyCode</p></li>
    /// <li>
    /// <p>Project.CustomerBusinessProblem</p></li>
    /// <li>
    /// <p>PartnerOpportunityIdentifier</p></li>
    /// </ul>
    /// <p>After updates, the opportunity re-enters the validation phase. This process repeats until all issues are resolved, and the opportunity's <code>Lifecycle.ReviewStatus</code> is set to <code>Approved</code> or <code>Rejected</code>.</p></li>
    /// <li>
    /// <p>Approved: Validated and converted into the Amazon Web Services seller's pipeline (editable).</p></li>
    /// <li>
    /// <p>Rejected: Disqualified (read-only).</p></li>
    /// </ul>
    pub review_status: ::std::option::Option<crate::types::ReviewStatus>,
    /// <p>Indicates why an opportunity was sent back for further details. Partners must take corrective action based on the <code>ReviewComments</code>.</p>
    pub review_comments: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the reason a decision was made during the opportunity review process. This field combines the reasons for both disqualified and action required statuses, and provide clarity for why an opportunity was disqualified or requires further action.</p>
    pub review_status_reason: ::std::option::Option<::std::string::String>,
    /// <p>Captures a chronological record of the next steps or actions planned or taken for the current opportunity, along with the timestamp.</p>
    pub next_steps_history: ::std::option::Option<::std::vec::Vec<crate::types::NextStepsHistory>>,
}
impl LifeCycle {
    /// <p>Specifies the current stage of the <code>Opportunity</code>'s lifecycle as it maps to Amazon Web Services stages from the current stage in the partner CRM. This field provides a translated value of the stage, and offers insight into the <code>Opportunity</code>'s progression in the sales cycle, according to Amazon Web Services definitions.</p><note>
    /// <p>A lead and a prospect must be further matured to a <code>Qualified</code> opportunity before submission. Opportunities that were closed/lost before submission aren't suitable for submission.</p>
    /// </note>
    /// <p>The descriptions of each sales stage are:</p>
    /// <ul>
    /// <li>
    /// <p>Prospect: Amazon Web Services identifies the opportunity. It can be active (Comes directly from the end customer through a lead) or latent (Your account team believes it exists based on research, account plans, sales plays).</p></li>
    /// <li>
    /// <p>Qualified: Your account team engaged with the customer to discuss viability and requirements. The customer agreed that the opportunity is real, of interest, and may solve business/technical needs.</p></li>
    /// <li>
    /// <p>Technical Validation: All parties understand the implementation plan.</p></li>
    /// <li>
    /// <p>Business Validation: Pricing was proposed, and all parties agree to the steps to close.</p></li>
    /// <li>
    /// <p>Committed: The customer signed the contract, but Amazon Web Services hasn't started billing.</p></li>
    /// <li>
    /// <p>Launched: The workload is complete, and Amazon Web Services has started billing.</p></li>
    /// <li>
    /// <p>Closed Lost: The opportunity is lost, and there are no steps to move forward.</p></li>
    /// </ul>
    pub fn stage(&self) -> ::std::option::Option<&crate::types::Stage> {
        self.stage.as_ref()
    }
    /// <p>Specifies the reason code when an opportunity is marked as <i>Closed Lost</i>. When you select an appropriate reason code, you communicate the context for closing the <code>Opportunity</code>, and aid in accurate reports and analysis of opportunity outcomes. The possible values are:</p>
    /// <ul>
    /// <li>
    /// <p>Customer Deficiency: The customer lacked necessary resources or capabilities.</p></li>
    /// <li>
    /// <p>Delay/Cancellation of Project: The project was delayed or canceled.</p></li>
    /// <li>
    /// <p>Legal/Tax/Regulatory: Legal, tax, or regulatory issues prevented progress.</p></li>
    /// <li>
    /// <p>Lost to Competitor—Google: The opportunity was lost to Google.</p></li>
    /// <li>
    /// <p>Lost to Competitor—Microsoft: The opportunity was lost to Microsoft.</p></li>
    /// <li>
    /// <p>Lost to Competitor—SoftLayer: The opportunity was lost to SoftLayer.</p></li>
    /// <li>
    /// <p>Lost to Competitor—VMWare: The opportunity was lost to VMWare.</p></li>
    /// <li>
    /// <p>Lost to Competitor—Other: The opportunity was lost to a competitor not listed above.</p></li>
    /// <li>
    /// <p>No Opportunity: There was no opportunity to pursue.</p></li>
    /// <li>
    /// <p>On Premises Deployment: The customer chose an on-premises solution.</p></li>
    /// <li>
    /// <p>Partner Gap: The partner lacked necessary resources or capabilities.</p></li>
    /// <li>
    /// <p>Price: The price was not competitive or acceptable to the customer.</p></li>
    /// <li>
    /// <p>Security/Compliance: Security or compliance issues prevented progress.</p></li>
    /// <li>
    /// <p>Technical Limitations: Technical limitations prevented progress.</p></li>
    /// <li>
    /// <p>Customer Experience: Issues related to the customer's experience impacted the decision.</p></li>
    /// <li>
    /// <p>Other: Any reason not covered by the other values.</p></li>
    /// <li>
    /// <p>People/Relationship/Governance: Issues related to people, relationships, or governance.</p></li>
    /// <li>
    /// <p>Product/Technology: Issues related to the product or technology.</p></li>
    /// <li>
    /// <p>Financial/Commercial: Financial or commercial issues impacted the decision.</p></li>
    /// </ul>
    pub fn closed_lost_reason(&self) -> ::std::option::Option<&crate::types::ClosedLostReason> {
        self.closed_lost_reason.as_ref()
    }
    /// <p>Specifies the upcoming actions or tasks for the <code>Opportunity</code>. Use this field to communicate with Amazon Web Services about the next actions required for the <code>Opportunity</code>.</p>
    pub fn next_steps(&self) -> ::std::option::Option<&str> {
        self.next_steps.as_deref()
    }
    /// <p>Specifies the date when Amazon Web Services expects to start significant billing, when the project finishes, and when it moves into production. This field informs the Amazon Web Services seller about when the opportunity launches and starts to incur Amazon Web Services usage.</p>
    /// <p>Ensure the <code>Target Close Date</code> isn't in the past.</p>
    pub fn target_close_date(&self) -> ::std::option::Option<&str> {
        self.target_close_date.as_deref()
    }
    /// <p>Indicates the review status of an opportunity referred by a partner. This field is read-only and only applicable for partner referrals. The possible values are:</p>
    /// <ul>
    /// <li>
    /// <p>Pending Submission: Not submitted for validation (editable).</p></li>
    /// <li>
    /// <p>Submitted: Submitted for validation, and Amazon Web Services hasn't reviewed it (read-only).</p></li>
    /// <li>
    /// <p>In Review: Amazon Web Services is validating (read-only).</p></li>
    /// <li>
    /// <p>Action Required: Issues that Amazon Web Services highlights need to be addressed. Partners should use the <code>UpdateOpportunity</code> API action to update the opportunity and helps to ensure that all required changes are made. Only the following fields are editable when the <code>Lifecycle.ReviewStatus</code> is <code>Action Required</code>:</p>
    /// <ul>
    /// <li>
    /// <p>Customer.Account.Address.City</p></li>
    /// <li>
    /// <p>Customer.Account.Address.CountryCode</p></li>
    /// <li>
    /// <p>Customer.Account.Address.PostalCode</p></li>
    /// <li>
    /// <p>Customer.Account.Address.StateOrRegion</p></li>
    /// <li>
    /// <p>Customer.Account.Address.StreetAddress</p></li>
    /// <li>
    /// <p>Customer.Account.WebsiteUrl</p></li>
    /// <li>
    /// <p>LifeCycle.TargetCloseDate</p></li>
    /// <li>
    /// <p>Project.ExpectedMonthlyAWSRevenue.Amount</p></li>
    /// <li>
    /// <p>Project.ExpectedMonthlyAWSRevenue.CurrencyCode</p></li>
    /// <li>
    /// <p>Project.CustomerBusinessProblem</p></li>
    /// <li>
    /// <p>PartnerOpportunityIdentifier</p></li>
    /// </ul>
    /// <p>After updates, the opportunity re-enters the validation phase. This process repeats until all issues are resolved, and the opportunity's <code>Lifecycle.ReviewStatus</code> is set to <code>Approved</code> or <code>Rejected</code>.</p></li>
    /// <li>
    /// <p>Approved: Validated and converted into the Amazon Web Services seller's pipeline (editable).</p></li>
    /// <li>
    /// <p>Rejected: Disqualified (read-only).</p></li>
    /// </ul>
    pub fn review_status(&self) -> ::std::option::Option<&crate::types::ReviewStatus> {
        self.review_status.as_ref()
    }
    /// <p>Indicates why an opportunity was sent back for further details. Partners must take corrective action based on the <code>ReviewComments</code>.</p>
    pub fn review_comments(&self) -> ::std::option::Option<&str> {
        self.review_comments.as_deref()
    }
    /// <p>Indicates the reason a decision was made during the opportunity review process. This field combines the reasons for both disqualified and action required statuses, and provide clarity for why an opportunity was disqualified or requires further action.</p>
    pub fn review_status_reason(&self) -> ::std::option::Option<&str> {
        self.review_status_reason.as_deref()
    }
    /// <p>Captures a chronological record of the next steps or actions planned or taken for the current opportunity, along with the timestamp.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.next_steps_history.is_none()`.
    pub fn next_steps_history(&self) -> &[crate::types::NextStepsHistory] {
        self.next_steps_history.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for LifeCycle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("LifeCycle");
        formatter.field("stage", &self.stage);
        formatter.field("closed_lost_reason", &self.closed_lost_reason);
        formatter.field("next_steps", &"*** Sensitive Data Redacted ***");
        formatter.field("target_close_date", &self.target_close_date);
        formatter.field("review_status", &self.review_status);
        formatter.field("review_comments", &self.review_comments);
        formatter.field("review_status_reason", &self.review_status_reason);
        formatter.field("next_steps_history", &self.next_steps_history);
        formatter.finish()
    }
}
impl LifeCycle {
    /// Creates a new builder-style object to manufacture [`LifeCycle`](crate::types::LifeCycle).
    pub fn builder() -> crate::types::builders::LifeCycleBuilder {
        crate::types::builders::LifeCycleBuilder::default()
    }
}

/// A builder for [`LifeCycle`](crate::types::LifeCycle).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct LifeCycleBuilder {
    pub(crate) stage: ::std::option::Option<crate::types::Stage>,
    pub(crate) closed_lost_reason: ::std::option::Option<crate::types::ClosedLostReason>,
    pub(crate) next_steps: ::std::option::Option<::std::string::String>,
    pub(crate) target_close_date: ::std::option::Option<::std::string::String>,
    pub(crate) review_status: ::std::option::Option<crate::types::ReviewStatus>,
    pub(crate) review_comments: ::std::option::Option<::std::string::String>,
    pub(crate) review_status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) next_steps_history: ::std::option::Option<::std::vec::Vec<crate::types::NextStepsHistory>>,
}
impl LifeCycleBuilder {
    /// <p>Specifies the current stage of the <code>Opportunity</code>'s lifecycle as it maps to Amazon Web Services stages from the current stage in the partner CRM. This field provides a translated value of the stage, and offers insight into the <code>Opportunity</code>'s progression in the sales cycle, according to Amazon Web Services definitions.</p><note>
    /// <p>A lead and a prospect must be further matured to a <code>Qualified</code> opportunity before submission. Opportunities that were closed/lost before submission aren't suitable for submission.</p>
    /// </note>
    /// <p>The descriptions of each sales stage are:</p>
    /// <ul>
    /// <li>
    /// <p>Prospect: Amazon Web Services identifies the opportunity. It can be active (Comes directly from the end customer through a lead) or latent (Your account team believes it exists based on research, account plans, sales plays).</p></li>
    /// <li>
    /// <p>Qualified: Your account team engaged with the customer to discuss viability and requirements. The customer agreed that the opportunity is real, of interest, and may solve business/technical needs.</p></li>
    /// <li>
    /// <p>Technical Validation: All parties understand the implementation plan.</p></li>
    /// <li>
    /// <p>Business Validation: Pricing was proposed, and all parties agree to the steps to close.</p></li>
    /// <li>
    /// <p>Committed: The customer signed the contract, but Amazon Web Services hasn't started billing.</p></li>
    /// <li>
    /// <p>Launched: The workload is complete, and Amazon Web Services has started billing.</p></li>
    /// <li>
    /// <p>Closed Lost: The opportunity is lost, and there are no steps to move forward.</p></li>
    /// </ul>
    pub fn stage(mut self, input: crate::types::Stage) -> Self {
        self.stage = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the current stage of the <code>Opportunity</code>'s lifecycle as it maps to Amazon Web Services stages from the current stage in the partner CRM. This field provides a translated value of the stage, and offers insight into the <code>Opportunity</code>'s progression in the sales cycle, according to Amazon Web Services definitions.</p><note>
    /// <p>A lead and a prospect must be further matured to a <code>Qualified</code> opportunity before submission. Opportunities that were closed/lost before submission aren't suitable for submission.</p>
    /// </note>
    /// <p>The descriptions of each sales stage are:</p>
    /// <ul>
    /// <li>
    /// <p>Prospect: Amazon Web Services identifies the opportunity. It can be active (Comes directly from the end customer through a lead) or latent (Your account team believes it exists based on research, account plans, sales plays).</p></li>
    /// <li>
    /// <p>Qualified: Your account team engaged with the customer to discuss viability and requirements. The customer agreed that the opportunity is real, of interest, and may solve business/technical needs.</p></li>
    /// <li>
    /// <p>Technical Validation: All parties understand the implementation plan.</p></li>
    /// <li>
    /// <p>Business Validation: Pricing was proposed, and all parties agree to the steps to close.</p></li>
    /// <li>
    /// <p>Committed: The customer signed the contract, but Amazon Web Services hasn't started billing.</p></li>
    /// <li>
    /// <p>Launched: The workload is complete, and Amazon Web Services has started billing.</p></li>
    /// <li>
    /// <p>Closed Lost: The opportunity is lost, and there are no steps to move forward.</p></li>
    /// </ul>
    pub fn set_stage(mut self, input: ::std::option::Option<crate::types::Stage>) -> Self {
        self.stage = input;
        self
    }
    /// <p>Specifies the current stage of the <code>Opportunity</code>'s lifecycle as it maps to Amazon Web Services stages from the current stage in the partner CRM. This field provides a translated value of the stage, and offers insight into the <code>Opportunity</code>'s progression in the sales cycle, according to Amazon Web Services definitions.</p><note>
    /// <p>A lead and a prospect must be further matured to a <code>Qualified</code> opportunity before submission. Opportunities that were closed/lost before submission aren't suitable for submission.</p>
    /// </note>
    /// <p>The descriptions of each sales stage are:</p>
    /// <ul>
    /// <li>
    /// <p>Prospect: Amazon Web Services identifies the opportunity. It can be active (Comes directly from the end customer through a lead) or latent (Your account team believes it exists based on research, account plans, sales plays).</p></li>
    /// <li>
    /// <p>Qualified: Your account team engaged with the customer to discuss viability and requirements. The customer agreed that the opportunity is real, of interest, and may solve business/technical needs.</p></li>
    /// <li>
    /// <p>Technical Validation: All parties understand the implementation plan.</p></li>
    /// <li>
    /// <p>Business Validation: Pricing was proposed, and all parties agree to the steps to close.</p></li>
    /// <li>
    /// <p>Committed: The customer signed the contract, but Amazon Web Services hasn't started billing.</p></li>
    /// <li>
    /// <p>Launched: The workload is complete, and Amazon Web Services has started billing.</p></li>
    /// <li>
    /// <p>Closed Lost: The opportunity is lost, and there are no steps to move forward.</p></li>
    /// </ul>
    pub fn get_stage(&self) -> &::std::option::Option<crate::types::Stage> {
        &self.stage
    }
    /// <p>Specifies the reason code when an opportunity is marked as <i>Closed Lost</i>. When you select an appropriate reason code, you communicate the context for closing the <code>Opportunity</code>, and aid in accurate reports and analysis of opportunity outcomes. The possible values are:</p>
    /// <ul>
    /// <li>
    /// <p>Customer Deficiency: The customer lacked necessary resources or capabilities.</p></li>
    /// <li>
    /// <p>Delay/Cancellation of Project: The project was delayed or canceled.</p></li>
    /// <li>
    /// <p>Legal/Tax/Regulatory: Legal, tax, or regulatory issues prevented progress.</p></li>
    /// <li>
    /// <p>Lost to Competitor—Google: The opportunity was lost to Google.</p></li>
    /// <li>
    /// <p>Lost to Competitor—Microsoft: The opportunity was lost to Microsoft.</p></li>
    /// <li>
    /// <p>Lost to Competitor—SoftLayer: The opportunity was lost to SoftLayer.</p></li>
    /// <li>
    /// <p>Lost to Competitor—VMWare: The opportunity was lost to VMWare.</p></li>
    /// <li>
    /// <p>Lost to Competitor—Other: The opportunity was lost to a competitor not listed above.</p></li>
    /// <li>
    /// <p>No Opportunity: There was no opportunity to pursue.</p></li>
    /// <li>
    /// <p>On Premises Deployment: The customer chose an on-premises solution.</p></li>
    /// <li>
    /// <p>Partner Gap: The partner lacked necessary resources or capabilities.</p></li>
    /// <li>
    /// <p>Price: The price was not competitive or acceptable to the customer.</p></li>
    /// <li>
    /// <p>Security/Compliance: Security or compliance issues prevented progress.</p></li>
    /// <li>
    /// <p>Technical Limitations: Technical limitations prevented progress.</p></li>
    /// <li>
    /// <p>Customer Experience: Issues related to the customer's experience impacted the decision.</p></li>
    /// <li>
    /// <p>Other: Any reason not covered by the other values.</p></li>
    /// <li>
    /// <p>People/Relationship/Governance: Issues related to people, relationships, or governance.</p></li>
    /// <li>
    /// <p>Product/Technology: Issues related to the product or technology.</p></li>
    /// <li>
    /// <p>Financial/Commercial: Financial or commercial issues impacted the decision.</p></li>
    /// </ul>
    pub fn closed_lost_reason(mut self, input: crate::types::ClosedLostReason) -> Self {
        self.closed_lost_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the reason code when an opportunity is marked as <i>Closed Lost</i>. When you select an appropriate reason code, you communicate the context for closing the <code>Opportunity</code>, and aid in accurate reports and analysis of opportunity outcomes. The possible values are:</p>
    /// <ul>
    /// <li>
    /// <p>Customer Deficiency: The customer lacked necessary resources or capabilities.</p></li>
    /// <li>
    /// <p>Delay/Cancellation of Project: The project was delayed or canceled.</p></li>
    /// <li>
    /// <p>Legal/Tax/Regulatory: Legal, tax, or regulatory issues prevented progress.</p></li>
    /// <li>
    /// <p>Lost to Competitor—Google: The opportunity was lost to Google.</p></li>
    /// <li>
    /// <p>Lost to Competitor—Microsoft: The opportunity was lost to Microsoft.</p></li>
    /// <li>
    /// <p>Lost to Competitor—SoftLayer: The opportunity was lost to SoftLayer.</p></li>
    /// <li>
    /// <p>Lost to Competitor—VMWare: The opportunity was lost to VMWare.</p></li>
    /// <li>
    /// <p>Lost to Competitor—Other: The opportunity was lost to a competitor not listed above.</p></li>
    /// <li>
    /// <p>No Opportunity: There was no opportunity to pursue.</p></li>
    /// <li>
    /// <p>On Premises Deployment: The customer chose an on-premises solution.</p></li>
    /// <li>
    /// <p>Partner Gap: The partner lacked necessary resources or capabilities.</p></li>
    /// <li>
    /// <p>Price: The price was not competitive or acceptable to the customer.</p></li>
    /// <li>
    /// <p>Security/Compliance: Security or compliance issues prevented progress.</p></li>
    /// <li>
    /// <p>Technical Limitations: Technical limitations prevented progress.</p></li>
    /// <li>
    /// <p>Customer Experience: Issues related to the customer's experience impacted the decision.</p></li>
    /// <li>
    /// <p>Other: Any reason not covered by the other values.</p></li>
    /// <li>
    /// <p>People/Relationship/Governance: Issues related to people, relationships, or governance.</p></li>
    /// <li>
    /// <p>Product/Technology: Issues related to the product or technology.</p></li>
    /// <li>
    /// <p>Financial/Commercial: Financial or commercial issues impacted the decision.</p></li>
    /// </ul>
    pub fn set_closed_lost_reason(mut self, input: ::std::option::Option<crate::types::ClosedLostReason>) -> Self {
        self.closed_lost_reason = input;
        self
    }
    /// <p>Specifies the reason code when an opportunity is marked as <i>Closed Lost</i>. When you select an appropriate reason code, you communicate the context for closing the <code>Opportunity</code>, and aid in accurate reports and analysis of opportunity outcomes. The possible values are:</p>
    /// <ul>
    /// <li>
    /// <p>Customer Deficiency: The customer lacked necessary resources or capabilities.</p></li>
    /// <li>
    /// <p>Delay/Cancellation of Project: The project was delayed or canceled.</p></li>
    /// <li>
    /// <p>Legal/Tax/Regulatory: Legal, tax, or regulatory issues prevented progress.</p></li>
    /// <li>
    /// <p>Lost to Competitor—Google: The opportunity was lost to Google.</p></li>
    /// <li>
    /// <p>Lost to Competitor—Microsoft: The opportunity was lost to Microsoft.</p></li>
    /// <li>
    /// <p>Lost to Competitor—SoftLayer: The opportunity was lost to SoftLayer.</p></li>
    /// <li>
    /// <p>Lost to Competitor—VMWare: The opportunity was lost to VMWare.</p></li>
    /// <li>
    /// <p>Lost to Competitor—Other: The opportunity was lost to a competitor not listed above.</p></li>
    /// <li>
    /// <p>No Opportunity: There was no opportunity to pursue.</p></li>
    /// <li>
    /// <p>On Premises Deployment: The customer chose an on-premises solution.</p></li>
    /// <li>
    /// <p>Partner Gap: The partner lacked necessary resources or capabilities.</p></li>
    /// <li>
    /// <p>Price: The price was not competitive or acceptable to the customer.</p></li>
    /// <li>
    /// <p>Security/Compliance: Security or compliance issues prevented progress.</p></li>
    /// <li>
    /// <p>Technical Limitations: Technical limitations prevented progress.</p></li>
    /// <li>
    /// <p>Customer Experience: Issues related to the customer's experience impacted the decision.</p></li>
    /// <li>
    /// <p>Other: Any reason not covered by the other values.</p></li>
    /// <li>
    /// <p>People/Relationship/Governance: Issues related to people, relationships, or governance.</p></li>
    /// <li>
    /// <p>Product/Technology: Issues related to the product or technology.</p></li>
    /// <li>
    /// <p>Financial/Commercial: Financial or commercial issues impacted the decision.</p></li>
    /// </ul>
    pub fn get_closed_lost_reason(&self) -> &::std::option::Option<crate::types::ClosedLostReason> {
        &self.closed_lost_reason
    }
    /// <p>Specifies the upcoming actions or tasks for the <code>Opportunity</code>. Use this field to communicate with Amazon Web Services about the next actions required for the <code>Opportunity</code>.</p>
    pub fn next_steps(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_steps = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the upcoming actions or tasks for the <code>Opportunity</code>. Use this field to communicate with Amazon Web Services about the next actions required for the <code>Opportunity</code>.</p>
    pub fn set_next_steps(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_steps = input;
        self
    }
    /// <p>Specifies the upcoming actions or tasks for the <code>Opportunity</code>. Use this field to communicate with Amazon Web Services about the next actions required for the <code>Opportunity</code>.</p>
    pub fn get_next_steps(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_steps
    }
    /// <p>Specifies the date when Amazon Web Services expects to start significant billing, when the project finishes, and when it moves into production. This field informs the Amazon Web Services seller about when the opportunity launches and starts to incur Amazon Web Services usage.</p>
    /// <p>Ensure the <code>Target Close Date</code> isn't in the past.</p>
    pub fn target_close_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_close_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the date when Amazon Web Services expects to start significant billing, when the project finishes, and when it moves into production. This field informs the Amazon Web Services seller about when the opportunity launches and starts to incur Amazon Web Services usage.</p>
    /// <p>Ensure the <code>Target Close Date</code> isn't in the past.</p>
    pub fn set_target_close_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_close_date = input;
        self
    }
    /// <p>Specifies the date when Amazon Web Services expects to start significant billing, when the project finishes, and when it moves into production. This field informs the Amazon Web Services seller about when the opportunity launches and starts to incur Amazon Web Services usage.</p>
    /// <p>Ensure the <code>Target Close Date</code> isn't in the past.</p>
    pub fn get_target_close_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_close_date
    }
    /// <p>Indicates the review status of an opportunity referred by a partner. This field is read-only and only applicable for partner referrals. The possible values are:</p>
    /// <ul>
    /// <li>
    /// <p>Pending Submission: Not submitted for validation (editable).</p></li>
    /// <li>
    /// <p>Submitted: Submitted for validation, and Amazon Web Services hasn't reviewed it (read-only).</p></li>
    /// <li>
    /// <p>In Review: Amazon Web Services is validating (read-only).</p></li>
    /// <li>
    /// <p>Action Required: Issues that Amazon Web Services highlights need to be addressed. Partners should use the <code>UpdateOpportunity</code> API action to update the opportunity and helps to ensure that all required changes are made. Only the following fields are editable when the <code>Lifecycle.ReviewStatus</code> is <code>Action Required</code>:</p>
    /// <ul>
    /// <li>
    /// <p>Customer.Account.Address.City</p></li>
    /// <li>
    /// <p>Customer.Account.Address.CountryCode</p></li>
    /// <li>
    /// <p>Customer.Account.Address.PostalCode</p></li>
    /// <li>
    /// <p>Customer.Account.Address.StateOrRegion</p></li>
    /// <li>
    /// <p>Customer.Account.Address.StreetAddress</p></li>
    /// <li>
    /// <p>Customer.Account.WebsiteUrl</p></li>
    /// <li>
    /// <p>LifeCycle.TargetCloseDate</p></li>
    /// <li>
    /// <p>Project.ExpectedMonthlyAWSRevenue.Amount</p></li>
    /// <li>
    /// <p>Project.ExpectedMonthlyAWSRevenue.CurrencyCode</p></li>
    /// <li>
    /// <p>Project.CustomerBusinessProblem</p></li>
    /// <li>
    /// <p>PartnerOpportunityIdentifier</p></li>
    /// </ul>
    /// <p>After updates, the opportunity re-enters the validation phase. This process repeats until all issues are resolved, and the opportunity's <code>Lifecycle.ReviewStatus</code> is set to <code>Approved</code> or <code>Rejected</code>.</p></li>
    /// <li>
    /// <p>Approved: Validated and converted into the Amazon Web Services seller's pipeline (editable).</p></li>
    /// <li>
    /// <p>Rejected: Disqualified (read-only).</p></li>
    /// </ul>
    pub fn review_status(mut self, input: crate::types::ReviewStatus) -> Self {
        self.review_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the review status of an opportunity referred by a partner. This field is read-only and only applicable for partner referrals. The possible values are:</p>
    /// <ul>
    /// <li>
    /// <p>Pending Submission: Not submitted for validation (editable).</p></li>
    /// <li>
    /// <p>Submitted: Submitted for validation, and Amazon Web Services hasn't reviewed it (read-only).</p></li>
    /// <li>
    /// <p>In Review: Amazon Web Services is validating (read-only).</p></li>
    /// <li>
    /// <p>Action Required: Issues that Amazon Web Services highlights need to be addressed. Partners should use the <code>UpdateOpportunity</code> API action to update the opportunity and helps to ensure that all required changes are made. Only the following fields are editable when the <code>Lifecycle.ReviewStatus</code> is <code>Action Required</code>:</p>
    /// <ul>
    /// <li>
    /// <p>Customer.Account.Address.City</p></li>
    /// <li>
    /// <p>Customer.Account.Address.CountryCode</p></li>
    /// <li>
    /// <p>Customer.Account.Address.PostalCode</p></li>
    /// <li>
    /// <p>Customer.Account.Address.StateOrRegion</p></li>
    /// <li>
    /// <p>Customer.Account.Address.StreetAddress</p></li>
    /// <li>
    /// <p>Customer.Account.WebsiteUrl</p></li>
    /// <li>
    /// <p>LifeCycle.TargetCloseDate</p></li>
    /// <li>
    /// <p>Project.ExpectedMonthlyAWSRevenue.Amount</p></li>
    /// <li>
    /// <p>Project.ExpectedMonthlyAWSRevenue.CurrencyCode</p></li>
    /// <li>
    /// <p>Project.CustomerBusinessProblem</p></li>
    /// <li>
    /// <p>PartnerOpportunityIdentifier</p></li>
    /// </ul>
    /// <p>After updates, the opportunity re-enters the validation phase. This process repeats until all issues are resolved, and the opportunity's <code>Lifecycle.ReviewStatus</code> is set to <code>Approved</code> or <code>Rejected</code>.</p></li>
    /// <li>
    /// <p>Approved: Validated and converted into the Amazon Web Services seller's pipeline (editable).</p></li>
    /// <li>
    /// <p>Rejected: Disqualified (read-only).</p></li>
    /// </ul>
    pub fn set_review_status(mut self, input: ::std::option::Option<crate::types::ReviewStatus>) -> Self {
        self.review_status = input;
        self
    }
    /// <p>Indicates the review status of an opportunity referred by a partner. This field is read-only and only applicable for partner referrals. The possible values are:</p>
    /// <ul>
    /// <li>
    /// <p>Pending Submission: Not submitted for validation (editable).</p></li>
    /// <li>
    /// <p>Submitted: Submitted for validation, and Amazon Web Services hasn't reviewed it (read-only).</p></li>
    /// <li>
    /// <p>In Review: Amazon Web Services is validating (read-only).</p></li>
    /// <li>
    /// <p>Action Required: Issues that Amazon Web Services highlights need to be addressed. Partners should use the <code>UpdateOpportunity</code> API action to update the opportunity and helps to ensure that all required changes are made. Only the following fields are editable when the <code>Lifecycle.ReviewStatus</code> is <code>Action Required</code>:</p>
    /// <ul>
    /// <li>
    /// <p>Customer.Account.Address.City</p></li>
    /// <li>
    /// <p>Customer.Account.Address.CountryCode</p></li>
    /// <li>
    /// <p>Customer.Account.Address.PostalCode</p></li>
    /// <li>
    /// <p>Customer.Account.Address.StateOrRegion</p></li>
    /// <li>
    /// <p>Customer.Account.Address.StreetAddress</p></li>
    /// <li>
    /// <p>Customer.Account.WebsiteUrl</p></li>
    /// <li>
    /// <p>LifeCycle.TargetCloseDate</p></li>
    /// <li>
    /// <p>Project.ExpectedMonthlyAWSRevenue.Amount</p></li>
    /// <li>
    /// <p>Project.ExpectedMonthlyAWSRevenue.CurrencyCode</p></li>
    /// <li>
    /// <p>Project.CustomerBusinessProblem</p></li>
    /// <li>
    /// <p>PartnerOpportunityIdentifier</p></li>
    /// </ul>
    /// <p>After updates, the opportunity re-enters the validation phase. This process repeats until all issues are resolved, and the opportunity's <code>Lifecycle.ReviewStatus</code> is set to <code>Approved</code> or <code>Rejected</code>.</p></li>
    /// <li>
    /// <p>Approved: Validated and converted into the Amazon Web Services seller's pipeline (editable).</p></li>
    /// <li>
    /// <p>Rejected: Disqualified (read-only).</p></li>
    /// </ul>
    pub fn get_review_status(&self) -> &::std::option::Option<crate::types::ReviewStatus> {
        &self.review_status
    }
    /// <p>Indicates why an opportunity was sent back for further details. Partners must take corrective action based on the <code>ReviewComments</code>.</p>
    pub fn review_comments(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.review_comments = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates why an opportunity was sent back for further details. Partners must take corrective action based on the <code>ReviewComments</code>.</p>
    pub fn set_review_comments(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.review_comments = input;
        self
    }
    /// <p>Indicates why an opportunity was sent back for further details. Partners must take corrective action based on the <code>ReviewComments</code>.</p>
    pub fn get_review_comments(&self) -> &::std::option::Option<::std::string::String> {
        &self.review_comments
    }
    /// <p>Indicates the reason a decision was made during the opportunity review process. This field combines the reasons for both disqualified and action required statuses, and provide clarity for why an opportunity was disqualified or requires further action.</p>
    pub fn review_status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.review_status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates the reason a decision was made during the opportunity review process. This field combines the reasons for both disqualified and action required statuses, and provide clarity for why an opportunity was disqualified or requires further action.</p>
    pub fn set_review_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.review_status_reason = input;
        self
    }
    /// <p>Indicates the reason a decision was made during the opportunity review process. This field combines the reasons for both disqualified and action required statuses, and provide clarity for why an opportunity was disqualified or requires further action.</p>
    pub fn get_review_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.review_status_reason
    }
    /// Appends an item to `next_steps_history`.
    ///
    /// To override the contents of this collection use [`set_next_steps_history`](Self::set_next_steps_history).
    ///
    /// <p>Captures a chronological record of the next steps or actions planned or taken for the current opportunity, along with the timestamp.</p>
    pub fn next_steps_history(mut self, input: crate::types::NextStepsHistory) -> Self {
        let mut v = self.next_steps_history.unwrap_or_default();
        v.push(input);
        self.next_steps_history = ::std::option::Option::Some(v);
        self
    }
    /// <p>Captures a chronological record of the next steps or actions planned or taken for the current opportunity, along with the timestamp.</p>
    pub fn set_next_steps_history(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NextStepsHistory>>) -> Self {
        self.next_steps_history = input;
        self
    }
    /// <p>Captures a chronological record of the next steps or actions planned or taken for the current opportunity, along with the timestamp.</p>
    pub fn get_next_steps_history(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NextStepsHistory>> {
        &self.next_steps_history
    }
    /// Consumes the builder and constructs a [`LifeCycle`](crate::types::LifeCycle).
    pub fn build(self) -> crate::types::LifeCycle {
        crate::types::LifeCycle {
            stage: self.stage,
            closed_lost_reason: self.closed_lost_reason,
            next_steps: self.next_steps,
            target_close_date: self.target_close_date,
            review_status: self.review_status,
            review_comments: self.review_comments,
            review_status_reason: self.review_status_reason,
            next_steps_history: self.next_steps_history,
        }
    }
}
impl ::std::fmt::Debug for LifeCycleBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("LifeCycleBuilder");
        formatter.field("stage", &self.stage);
        formatter.field("closed_lost_reason", &self.closed_lost_reason);
        formatter.field("next_steps", &"*** Sensitive Data Redacted ***");
        formatter.field("target_close_date", &self.target_close_date);
        formatter.field("review_status", &self.review_status);
        formatter.field("review_comments", &self.review_comments);
        formatter.field("review_status_reason", &self.review_status_reason);
        formatter.field("next_steps_history", &self.next_steps_history);
        formatter.finish()
    }
}
