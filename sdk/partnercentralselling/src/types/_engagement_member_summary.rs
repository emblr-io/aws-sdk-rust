// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The EngagementMemberSummary provides a snapshot of essential information about participants in an AWS Partner Central Engagement. This compact data structure encapsulates key details of each member, facilitating efficient collaboration and management within the Engagement.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EngagementMemberSummary {
    /// <p>The official name of the member's company or organization.</p>
    pub company_name: ::std::option::Option<::std::string::String>,
    /// <p>The URL of the member company's website. This offers a way to find more information about the member organization and serves as an additional identifier.</p>
    pub website_url: ::std::option::Option<::std::string::String>,
}
impl EngagementMemberSummary {
    /// <p>The official name of the member's company or organization.</p>
    pub fn company_name(&self) -> ::std::option::Option<&str> {
        self.company_name.as_deref()
    }
    /// <p>The URL of the member company's website. This offers a way to find more information about the member organization and serves as an additional identifier.</p>
    pub fn website_url(&self) -> ::std::option::Option<&str> {
        self.website_url.as_deref()
    }
}
impl ::std::fmt::Debug for EngagementMemberSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EngagementMemberSummary");
        formatter.field("company_name", &"*** Sensitive Data Redacted ***");
        formatter.field("website_url", &self.website_url);
        formatter.finish()
    }
}
impl EngagementMemberSummary {
    /// Creates a new builder-style object to manufacture [`EngagementMemberSummary`](crate::types::EngagementMemberSummary).
    pub fn builder() -> crate::types::builders::EngagementMemberSummaryBuilder {
        crate::types::builders::EngagementMemberSummaryBuilder::default()
    }
}

/// A builder for [`EngagementMemberSummary`](crate::types::EngagementMemberSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct EngagementMemberSummaryBuilder {
    pub(crate) company_name: ::std::option::Option<::std::string::String>,
    pub(crate) website_url: ::std::option::Option<::std::string::String>,
}
impl EngagementMemberSummaryBuilder {
    /// <p>The official name of the member's company or organization.</p>
    pub fn company_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.company_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The official name of the member's company or organization.</p>
    pub fn set_company_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.company_name = input;
        self
    }
    /// <p>The official name of the member's company or organization.</p>
    pub fn get_company_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.company_name
    }
    /// <p>The URL of the member company's website. This offers a way to find more information about the member organization and serves as an additional identifier.</p>
    pub fn website_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.website_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of the member company's website. This offers a way to find more information about the member organization and serves as an additional identifier.</p>
    pub fn set_website_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.website_url = input;
        self
    }
    /// <p>The URL of the member company's website. This offers a way to find more information about the member organization and serves as an additional identifier.</p>
    pub fn get_website_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.website_url
    }
    /// Consumes the builder and constructs a [`EngagementMemberSummary`](crate::types::EngagementMemberSummary).
    pub fn build(self) -> crate::types::EngagementMemberSummary {
        crate::types::EngagementMemberSummary {
            company_name: self.company_name,
            website_url: self.website_url,
        }
    }
}
impl ::std::fmt::Debug for EngagementMemberSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EngagementMemberSummaryBuilder");
        formatter.field("company_name", &"*** Sensitive Data Redacted ***");
        formatter.field("website_url", &self.website_url);
        formatter.finish()
    }
}
