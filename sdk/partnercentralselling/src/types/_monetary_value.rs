// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies payments details.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct MonetaryValue {
    /// <p>Specifies the payment amount.</p>
    pub amount: ::std::string::String,
    /// <p>Specifies the payment currency.</p>
    pub currency_code: crate::types::CurrencyCode,
}
impl MonetaryValue {
    /// <p>Specifies the payment amount.</p>
    pub fn amount(&self) -> &str {
        use std::ops::Deref;
        self.amount.deref()
    }
    /// <p>Specifies the payment currency.</p>
    pub fn currency_code(&self) -> &crate::types::CurrencyCode {
        &self.currency_code
    }
}
impl ::std::fmt::Debug for MonetaryValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MonetaryValue");
        formatter.field("amount", &self.amount);
        formatter.field("currency_code", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl MonetaryValue {
    /// Creates a new builder-style object to manufacture [`MonetaryValue`](crate::types::MonetaryValue).
    pub fn builder() -> crate::types::builders::MonetaryValueBuilder {
        crate::types::builders::MonetaryValueBuilder::default()
    }
}

/// A builder for [`MonetaryValue`](crate::types::MonetaryValue).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct MonetaryValueBuilder {
    pub(crate) amount: ::std::option::Option<::std::string::String>,
    pub(crate) currency_code: ::std::option::Option<crate::types::CurrencyCode>,
}
impl MonetaryValueBuilder {
    /// <p>Specifies the payment amount.</p>
    /// This field is required.
    pub fn amount(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.amount = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the payment amount.</p>
    pub fn set_amount(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.amount = input;
        self
    }
    /// <p>Specifies the payment amount.</p>
    pub fn get_amount(&self) -> &::std::option::Option<::std::string::String> {
        &self.amount
    }
    /// <p>Specifies the payment currency.</p>
    /// This field is required.
    pub fn currency_code(mut self, input: crate::types::CurrencyCode) -> Self {
        self.currency_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the payment currency.</p>
    pub fn set_currency_code(mut self, input: ::std::option::Option<crate::types::CurrencyCode>) -> Self {
        self.currency_code = input;
        self
    }
    /// <p>Specifies the payment currency.</p>
    pub fn get_currency_code(&self) -> &::std::option::Option<crate::types::CurrencyCode> {
        &self.currency_code
    }
    /// Consumes the builder and constructs a [`MonetaryValue`](crate::types::MonetaryValue).
    /// This method will fail if any of the following fields are not set:
    /// - [`amount`](crate::types::builders::MonetaryValueBuilder::amount)
    /// - [`currency_code`](crate::types::builders::MonetaryValueBuilder::currency_code)
    pub fn build(self) -> ::std::result::Result<crate::types::MonetaryValue, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MonetaryValue {
            amount: self.amount.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "amount",
                    "amount was not specified but it is required when building MonetaryValue",
                )
            })?,
            currency_code: self.currency_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "currency_code",
                    "currency_code was not specified but it is required when building MonetaryValue",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for MonetaryValueBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MonetaryValueBuilder");
        formatter.field("amount", &self.amount);
        formatter.field("currency_code", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
