// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The CustomerProjects structure in Engagements offers a flexible framework for managing customer-project relationships. It supports multiple customers per Engagement and multiple projects per customer, while also allowing for customers without projects and projects without specific customers.</p>
/// <p>All Engagement members have full visibility of customers and their associated projects, enabling the capture of relevant context even when project details are not fully defined. This structure also facilitates targeted invitations, allowing partners to focus on specific customers and their business problems when sending Engagement invitations.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomerProjectsContext {
    /// <p>Contains details about the customer associated with the Engagement Invitation, including company information and industry.</p>
    pub customer: ::std::option::Option<crate::types::EngagementCustomer>,
    /// <p>Information about the customer project associated with the Engagement.</p>
    pub project: ::std::option::Option<crate::types::EngagementCustomerProjectDetails>,
}
impl CustomerProjectsContext {
    /// <p>Contains details about the customer associated with the Engagement Invitation, including company information and industry.</p>
    pub fn customer(&self) -> ::std::option::Option<&crate::types::EngagementCustomer> {
        self.customer.as_ref()
    }
    /// <p>Information about the customer project associated with the Engagement.</p>
    pub fn project(&self) -> ::std::option::Option<&crate::types::EngagementCustomerProjectDetails> {
        self.project.as_ref()
    }
}
impl CustomerProjectsContext {
    /// Creates a new builder-style object to manufacture [`CustomerProjectsContext`](crate::types::CustomerProjectsContext).
    pub fn builder() -> crate::types::builders::CustomerProjectsContextBuilder {
        crate::types::builders::CustomerProjectsContextBuilder::default()
    }
}

/// A builder for [`CustomerProjectsContext`](crate::types::CustomerProjectsContext).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CustomerProjectsContextBuilder {
    pub(crate) customer: ::std::option::Option<crate::types::EngagementCustomer>,
    pub(crate) project: ::std::option::Option<crate::types::EngagementCustomerProjectDetails>,
}
impl CustomerProjectsContextBuilder {
    /// <p>Contains details about the customer associated with the Engagement Invitation, including company information and industry.</p>
    pub fn customer(mut self, input: crate::types::EngagementCustomer) -> Self {
        self.customer = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the customer associated with the Engagement Invitation, including company information and industry.</p>
    pub fn set_customer(mut self, input: ::std::option::Option<crate::types::EngagementCustomer>) -> Self {
        self.customer = input;
        self
    }
    /// <p>Contains details about the customer associated with the Engagement Invitation, including company information and industry.</p>
    pub fn get_customer(&self) -> &::std::option::Option<crate::types::EngagementCustomer> {
        &self.customer
    }
    /// <p>Information about the customer project associated with the Engagement.</p>
    pub fn project(mut self, input: crate::types::EngagementCustomerProjectDetails) -> Self {
        self.project = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the customer project associated with the Engagement.</p>
    pub fn set_project(mut self, input: ::std::option::Option<crate::types::EngagementCustomerProjectDetails>) -> Self {
        self.project = input;
        self
    }
    /// <p>Information about the customer project associated with the Engagement.</p>
    pub fn get_project(&self) -> &::std::option::Option<crate::types::EngagementCustomerProjectDetails> {
        &self.project
    }
    /// Consumes the builder and constructs a [`CustomerProjectsContext`](crate::types::CustomerProjectsContext).
    pub fn build(self) -> crate::types::CustomerProjectsContext {
        crate::types::CustomerProjectsContext {
            customer: self.customer,
            project: self.project,
        }
    }
}
