// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the data payload of an Engagement Invitation for a specific opportunity. This contains detailed information that partners use to evaluate the engagement.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OpportunityInvitationPayload {
    /// <p>Represents the contact details of the AWS representatives involved in sending the Engagement Invitation. These contacts are opportunity stakeholders.</p>
    pub sender_contacts: ::std::option::Option<::std::vec::Vec<crate::types::SenderContact>>,
    /// <p>Outlines the responsibilities or expectations of the receiver in the context of the invitation.</p>
    pub receiver_responsibilities: ::std::vec::Vec<crate::types::ReceiverResponsibility>,
    /// <p>Contains information about the customer related to the opportunity in the Engagement Invitation. This data helps partners understand the customer’s profile and requirements.</p>
    pub customer: ::std::option::Option<crate::types::EngagementCustomer>,
    /// <p>Describes the project details associated with the opportunity, including the customer’s needs and the scope of work expected to be performed.</p>
    pub project: ::std::option::Option<crate::types::ProjectDetails>,
}
impl OpportunityInvitationPayload {
    /// <p>Represents the contact details of the AWS representatives involved in sending the Engagement Invitation. These contacts are opportunity stakeholders.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sender_contacts.is_none()`.
    pub fn sender_contacts(&self) -> &[crate::types::SenderContact] {
        self.sender_contacts.as_deref().unwrap_or_default()
    }
    /// <p>Outlines the responsibilities or expectations of the receiver in the context of the invitation.</p>
    pub fn receiver_responsibilities(&self) -> &[crate::types::ReceiverResponsibility] {
        use std::ops::Deref;
        self.receiver_responsibilities.deref()
    }
    /// <p>Contains information about the customer related to the opportunity in the Engagement Invitation. This data helps partners understand the customer’s profile and requirements.</p>
    pub fn customer(&self) -> ::std::option::Option<&crate::types::EngagementCustomer> {
        self.customer.as_ref()
    }
    /// <p>Describes the project details associated with the opportunity, including the customer’s needs and the scope of work expected to be performed.</p>
    pub fn project(&self) -> ::std::option::Option<&crate::types::ProjectDetails> {
        self.project.as_ref()
    }
}
impl OpportunityInvitationPayload {
    /// Creates a new builder-style object to manufacture [`OpportunityInvitationPayload`](crate::types::OpportunityInvitationPayload).
    pub fn builder() -> crate::types::builders::OpportunityInvitationPayloadBuilder {
        crate::types::builders::OpportunityInvitationPayloadBuilder::default()
    }
}

/// A builder for [`OpportunityInvitationPayload`](crate::types::OpportunityInvitationPayload).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OpportunityInvitationPayloadBuilder {
    pub(crate) sender_contacts: ::std::option::Option<::std::vec::Vec<crate::types::SenderContact>>,
    pub(crate) receiver_responsibilities: ::std::option::Option<::std::vec::Vec<crate::types::ReceiverResponsibility>>,
    pub(crate) customer: ::std::option::Option<crate::types::EngagementCustomer>,
    pub(crate) project: ::std::option::Option<crate::types::ProjectDetails>,
}
impl OpportunityInvitationPayloadBuilder {
    /// Appends an item to `sender_contacts`.
    ///
    /// To override the contents of this collection use [`set_sender_contacts`](Self::set_sender_contacts).
    ///
    /// <p>Represents the contact details of the AWS representatives involved in sending the Engagement Invitation. These contacts are opportunity stakeholders.</p>
    pub fn sender_contacts(mut self, input: crate::types::SenderContact) -> Self {
        let mut v = self.sender_contacts.unwrap_or_default();
        v.push(input);
        self.sender_contacts = ::std::option::Option::Some(v);
        self
    }
    /// <p>Represents the contact details of the AWS representatives involved in sending the Engagement Invitation. These contacts are opportunity stakeholders.</p>
    pub fn set_sender_contacts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SenderContact>>) -> Self {
        self.sender_contacts = input;
        self
    }
    /// <p>Represents the contact details of the AWS representatives involved in sending the Engagement Invitation. These contacts are opportunity stakeholders.</p>
    pub fn get_sender_contacts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SenderContact>> {
        &self.sender_contacts
    }
    /// Appends an item to `receiver_responsibilities`.
    ///
    /// To override the contents of this collection use [`set_receiver_responsibilities`](Self::set_receiver_responsibilities).
    ///
    /// <p>Outlines the responsibilities or expectations of the receiver in the context of the invitation.</p>
    pub fn receiver_responsibilities(mut self, input: crate::types::ReceiverResponsibility) -> Self {
        let mut v = self.receiver_responsibilities.unwrap_or_default();
        v.push(input);
        self.receiver_responsibilities = ::std::option::Option::Some(v);
        self
    }
    /// <p>Outlines the responsibilities or expectations of the receiver in the context of the invitation.</p>
    pub fn set_receiver_responsibilities(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ReceiverResponsibility>>) -> Self {
        self.receiver_responsibilities = input;
        self
    }
    /// <p>Outlines the responsibilities or expectations of the receiver in the context of the invitation.</p>
    pub fn get_receiver_responsibilities(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ReceiverResponsibility>> {
        &self.receiver_responsibilities
    }
    /// <p>Contains information about the customer related to the opportunity in the Engagement Invitation. This data helps partners understand the customer’s profile and requirements.</p>
    /// This field is required.
    pub fn customer(mut self, input: crate::types::EngagementCustomer) -> Self {
        self.customer = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the customer related to the opportunity in the Engagement Invitation. This data helps partners understand the customer’s profile and requirements.</p>
    pub fn set_customer(mut self, input: ::std::option::Option<crate::types::EngagementCustomer>) -> Self {
        self.customer = input;
        self
    }
    /// <p>Contains information about the customer related to the opportunity in the Engagement Invitation. This data helps partners understand the customer’s profile and requirements.</p>
    pub fn get_customer(&self) -> &::std::option::Option<crate::types::EngagementCustomer> {
        &self.customer
    }
    /// <p>Describes the project details associated with the opportunity, including the customer’s needs and the scope of work expected to be performed.</p>
    /// This field is required.
    pub fn project(mut self, input: crate::types::ProjectDetails) -> Self {
        self.project = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the project details associated with the opportunity, including the customer’s needs and the scope of work expected to be performed.</p>
    pub fn set_project(mut self, input: ::std::option::Option<crate::types::ProjectDetails>) -> Self {
        self.project = input;
        self
    }
    /// <p>Describes the project details associated with the opportunity, including the customer’s needs and the scope of work expected to be performed.</p>
    pub fn get_project(&self) -> &::std::option::Option<crate::types::ProjectDetails> {
        &self.project
    }
    /// Consumes the builder and constructs a [`OpportunityInvitationPayload`](crate::types::OpportunityInvitationPayload).
    /// This method will fail if any of the following fields are not set:
    /// - [`receiver_responsibilities`](crate::types::builders::OpportunityInvitationPayloadBuilder::receiver_responsibilities)
    pub fn build(self) -> ::std::result::Result<crate::types::OpportunityInvitationPayload, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OpportunityInvitationPayload {
            sender_contacts: self.sender_contacts,
            receiver_responsibilities: self.receiver_responsibilities.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "receiver_responsibilities",
                    "receiver_responsibilities was not specified but it is required when building OpportunityInvitationPayload",
                )
            })?,
            customer: self.customer,
            project: self.project,
        })
    }
}
