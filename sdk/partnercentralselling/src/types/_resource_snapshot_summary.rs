// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a concise summary of a resource snapshot, including its unique identifier and version information. This structure is used to quickly reference and identify specific versions of resource snapshots.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ResourceSnapshotSummary {
    /// <p>The Amazon Resource Name (ARN) of the snapshot. This globally unique identifier can be used for cross-service references and in IAM policies.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The revision number of the snapshot. This integer value is incremented each time the snapshot is updated, allowing for version tracking of the resource snapshot.</p>
    pub revision: ::std::option::Option<i32>,
    /// <p>The type of resource snapshotted.</p>
    pub resource_type: ::std::option::Option<crate::types::ResourceType>,
    /// <p>The identifier of the specific resource snapshotted. The format might vary depending on the ResourceType.</p>
    pub resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the template used to create the snapshot.</p>
    pub resource_snapshot_template_name: ::std::option::Option<::std::string::String>,
    /// <p>The AWS account ID of the entity that owns the resource from which the snapshot was created.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
}
impl ResourceSnapshotSummary {
    /// <p>The Amazon Resource Name (ARN) of the snapshot. This globally unique identifier can be used for cross-service references and in IAM policies.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The revision number of the snapshot. This integer value is incremented each time the snapshot is updated, allowing for version tracking of the resource snapshot.</p>
    pub fn revision(&self) -> ::std::option::Option<i32> {
        self.revision
    }
    /// <p>The type of resource snapshotted.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The identifier of the specific resource snapshotted. The format might vary depending on the ResourceType.</p>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The name of the template used to create the snapshot.</p>
    pub fn resource_snapshot_template_name(&self) -> ::std::option::Option<&str> {
        self.resource_snapshot_template_name.as_deref()
    }
    /// <p>The AWS account ID of the entity that owns the resource from which the snapshot was created.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
}
impl ::std::fmt::Debug for ResourceSnapshotSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ResourceSnapshotSummary");
        formatter.field("arn", &self.arn);
        formatter.field("revision", &self.revision);
        formatter.field("resource_type", &self.resource_type);
        formatter.field("resource_id", &self.resource_id);
        formatter.field("resource_snapshot_template_name", &self.resource_snapshot_template_name);
        formatter.field("created_by", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ResourceSnapshotSummary {
    /// Creates a new builder-style object to manufacture [`ResourceSnapshotSummary`](crate::types::ResourceSnapshotSummary).
    pub fn builder() -> crate::types::builders::ResourceSnapshotSummaryBuilder {
        crate::types::builders::ResourceSnapshotSummaryBuilder::default()
    }
}

/// A builder for [`ResourceSnapshotSummary`](crate::types::ResourceSnapshotSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ResourceSnapshotSummaryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) revision: ::std::option::Option<i32>,
    pub(crate) resource_type: ::std::option::Option<crate::types::ResourceType>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_snapshot_template_name: ::std::option::Option<::std::string::String>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
}
impl ResourceSnapshotSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the snapshot. This globally unique identifier can be used for cross-service references and in IAM policies.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the snapshot. This globally unique identifier can be used for cross-service references and in IAM policies.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the snapshot. This globally unique identifier can be used for cross-service references and in IAM policies.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The revision number of the snapshot. This integer value is incremented each time the snapshot is updated, allowing for version tracking of the resource snapshot.</p>
    pub fn revision(mut self, input: i32) -> Self {
        self.revision = ::std::option::Option::Some(input);
        self
    }
    /// <p>The revision number of the snapshot. This integer value is incremented each time the snapshot is updated, allowing for version tracking of the resource snapshot.</p>
    pub fn set_revision(mut self, input: ::std::option::Option<i32>) -> Self {
        self.revision = input;
        self
    }
    /// <p>The revision number of the snapshot. This integer value is incremented each time the snapshot is updated, allowing for version tracking of the resource snapshot.</p>
    pub fn get_revision(&self) -> &::std::option::Option<i32> {
        &self.revision
    }
    /// <p>The type of resource snapshotted.</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of resource snapshotted.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::ResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of resource snapshotted.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::ResourceType> {
        &self.resource_type
    }
    /// <p>The identifier of the specific resource snapshotted. The format might vary depending on the ResourceType.</p>
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the specific resource snapshotted. The format might vary depending on the ResourceType.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The identifier of the specific resource snapshotted. The format might vary depending on the ResourceType.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>The name of the template used to create the snapshot.</p>
    pub fn resource_snapshot_template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_snapshot_template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the template used to create the snapshot.</p>
    pub fn set_resource_snapshot_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_snapshot_template_name = input;
        self
    }
    /// <p>The name of the template used to create the snapshot.</p>
    pub fn get_resource_snapshot_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_snapshot_template_name
    }
    /// <p>The AWS account ID of the entity that owns the resource from which the snapshot was created.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS account ID of the entity that owns the resource from which the snapshot was created.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The AWS account ID of the entity that owns the resource from which the snapshot was created.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// Consumes the builder and constructs a [`ResourceSnapshotSummary`](crate::types::ResourceSnapshotSummary).
    pub fn build(self) -> crate::types::ResourceSnapshotSummary {
        crate::types::ResourceSnapshotSummary {
            arn: self.arn,
            revision: self.revision,
            resource_type: self.resource_type,
            resource_id: self.resource_id,
            resource_snapshot_template_name: self.resource_snapshot_template_name,
            created_by: self.created_by,
        }
    }
}
impl ::std::fmt::Debug for ResourceSnapshotSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ResourceSnapshotSummaryBuilder");
        formatter.field("arn", &self.arn);
        formatter.field("revision", &self.revision);
        formatter.field("resource_type", &self.resource_type);
        formatter.field("resource_id", &self.resource_id);
        formatter.field("resource_snapshot_template_name", &self.resource_snapshot_template_name);
        formatter.field("created_by", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
