// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the <code>Customer</code>'s account details associated with the <code>Opportunity</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Account {
    /// <p>Specifies the industry the end <code>Customer</code> belongs to that's associated with the <code>Opportunity</code>. It refers to the category or sector where the customer's business operates. This is a required field.</p>
    pub industry: ::std::option::Option<crate::types::Industry>,
    /// <p>Specifies the end <code>Customer</code>'s industry associated with the <code>Opportunity</code>, when the selected value in the <code>Industry</code> field is <code>Other</code>.</p>
    pub other_industry: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the end <code>Customer</code>'s company name associated with the <code>Opportunity</code>.</p>
    pub company_name: ::std::string::String,
    /// <p>Specifies the end customer's company website URL associated with the <code>Opportunity</code>. This value is crucial to map the customer within the Amazon Web Services CRM system. This field is required in all cases except when the opportunity is related to national security.</p>
    pub website_url: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the <code>Customer</code> Amazon Web Services account ID associated with the <code>Opportunity</code>.</p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the end <code>Customer</code>'s address details associated with the <code>Opportunity</code>.</p>
    pub address: ::std::option::Option<crate::types::Address>,
    /// <p>Indicates the <code>Customer</code> DUNS number, if available.</p>
    pub duns: ::std::option::Option<::std::string::String>,
}
impl Account {
    /// <p>Specifies the industry the end <code>Customer</code> belongs to that's associated with the <code>Opportunity</code>. It refers to the category or sector where the customer's business operates. This is a required field.</p>
    pub fn industry(&self) -> ::std::option::Option<&crate::types::Industry> {
        self.industry.as_ref()
    }
    /// <p>Specifies the end <code>Customer</code>'s industry associated with the <code>Opportunity</code>, when the selected value in the <code>Industry</code> field is <code>Other</code>.</p>
    pub fn other_industry(&self) -> ::std::option::Option<&str> {
        self.other_industry.as_deref()
    }
    /// <p>Specifies the end <code>Customer</code>'s company name associated with the <code>Opportunity</code>.</p>
    pub fn company_name(&self) -> &str {
        use std::ops::Deref;
        self.company_name.deref()
    }
    /// <p>Specifies the end customer's company website URL associated with the <code>Opportunity</code>. This value is crucial to map the customer within the Amazon Web Services CRM system. This field is required in all cases except when the opportunity is related to national security.</p>
    pub fn website_url(&self) -> ::std::option::Option<&str> {
        self.website_url.as_deref()
    }
    /// <p>Specifies the <code>Customer</code> Amazon Web Services account ID associated with the <code>Opportunity</code>.</p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>Specifies the end <code>Customer</code>'s address details associated with the <code>Opportunity</code>.</p>
    pub fn address(&self) -> ::std::option::Option<&crate::types::Address> {
        self.address.as_ref()
    }
    /// <p>Indicates the <code>Customer</code> DUNS number, if available.</p>
    pub fn duns(&self) -> ::std::option::Option<&str> {
        self.duns.as_deref()
    }
}
impl ::std::fmt::Debug for Account {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Account");
        formatter.field("industry", &self.industry);
        formatter.field("other_industry", &self.other_industry);
        formatter.field("company_name", &"*** Sensitive Data Redacted ***");
        formatter.field("website_url", &"*** Sensitive Data Redacted ***");
        formatter.field("aws_account_id", &"*** Sensitive Data Redacted ***");
        formatter.field("address", &self.address);
        formatter.field("duns", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl Account {
    /// Creates a new builder-style object to manufacture [`Account`](crate::types::Account).
    pub fn builder() -> crate::types::builders::AccountBuilder {
        crate::types::builders::AccountBuilder::default()
    }
}

/// A builder for [`Account`](crate::types::Account).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AccountBuilder {
    pub(crate) industry: ::std::option::Option<crate::types::Industry>,
    pub(crate) other_industry: ::std::option::Option<::std::string::String>,
    pub(crate) company_name: ::std::option::Option<::std::string::String>,
    pub(crate) website_url: ::std::option::Option<::std::string::String>,
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) address: ::std::option::Option<crate::types::Address>,
    pub(crate) duns: ::std::option::Option<::std::string::String>,
}
impl AccountBuilder {
    /// <p>Specifies the industry the end <code>Customer</code> belongs to that's associated with the <code>Opportunity</code>. It refers to the category or sector where the customer's business operates. This is a required field.</p>
    pub fn industry(mut self, input: crate::types::Industry) -> Self {
        self.industry = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the industry the end <code>Customer</code> belongs to that's associated with the <code>Opportunity</code>. It refers to the category or sector where the customer's business operates. This is a required field.</p>
    pub fn set_industry(mut self, input: ::std::option::Option<crate::types::Industry>) -> Self {
        self.industry = input;
        self
    }
    /// <p>Specifies the industry the end <code>Customer</code> belongs to that's associated with the <code>Opportunity</code>. It refers to the category or sector where the customer's business operates. This is a required field.</p>
    pub fn get_industry(&self) -> &::std::option::Option<crate::types::Industry> {
        &self.industry
    }
    /// <p>Specifies the end <code>Customer</code>'s industry associated with the <code>Opportunity</code>, when the selected value in the <code>Industry</code> field is <code>Other</code>.</p>
    pub fn other_industry(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.other_industry = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the end <code>Customer</code>'s industry associated with the <code>Opportunity</code>, when the selected value in the <code>Industry</code> field is <code>Other</code>.</p>
    pub fn set_other_industry(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.other_industry = input;
        self
    }
    /// <p>Specifies the end <code>Customer</code>'s industry associated with the <code>Opportunity</code>, when the selected value in the <code>Industry</code> field is <code>Other</code>.</p>
    pub fn get_other_industry(&self) -> &::std::option::Option<::std::string::String> {
        &self.other_industry
    }
    /// <p>Specifies the end <code>Customer</code>'s company name associated with the <code>Opportunity</code>.</p>
    /// This field is required.
    pub fn company_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.company_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the end <code>Customer</code>'s company name associated with the <code>Opportunity</code>.</p>
    pub fn set_company_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.company_name = input;
        self
    }
    /// <p>Specifies the end <code>Customer</code>'s company name associated with the <code>Opportunity</code>.</p>
    pub fn get_company_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.company_name
    }
    /// <p>Specifies the end customer's company website URL associated with the <code>Opportunity</code>. This value is crucial to map the customer within the Amazon Web Services CRM system. This field is required in all cases except when the opportunity is related to national security.</p>
    pub fn website_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.website_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the end customer's company website URL associated with the <code>Opportunity</code>. This value is crucial to map the customer within the Amazon Web Services CRM system. This field is required in all cases except when the opportunity is related to national security.</p>
    pub fn set_website_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.website_url = input;
        self
    }
    /// <p>Specifies the end customer's company website URL associated with the <code>Opportunity</code>. This value is crucial to map the customer within the Amazon Web Services CRM system. This field is required in all cases except when the opportunity is related to national security.</p>
    pub fn get_website_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.website_url
    }
    /// <p>Specifies the <code>Customer</code> Amazon Web Services account ID associated with the <code>Opportunity</code>.</p>
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the <code>Customer</code> Amazon Web Services account ID associated with the <code>Opportunity</code>.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>Specifies the <code>Customer</code> Amazon Web Services account ID associated with the <code>Opportunity</code>.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// <p>Specifies the end <code>Customer</code>'s address details associated with the <code>Opportunity</code>.</p>
    pub fn address(mut self, input: crate::types::Address) -> Self {
        self.address = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the end <code>Customer</code>'s address details associated with the <code>Opportunity</code>.</p>
    pub fn set_address(mut self, input: ::std::option::Option<crate::types::Address>) -> Self {
        self.address = input;
        self
    }
    /// <p>Specifies the end <code>Customer</code>'s address details associated with the <code>Opportunity</code>.</p>
    pub fn get_address(&self) -> &::std::option::Option<crate::types::Address> {
        &self.address
    }
    /// <p>Indicates the <code>Customer</code> DUNS number, if available.</p>
    pub fn duns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.duns = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates the <code>Customer</code> DUNS number, if available.</p>
    pub fn set_duns(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.duns = input;
        self
    }
    /// <p>Indicates the <code>Customer</code> DUNS number, if available.</p>
    pub fn get_duns(&self) -> &::std::option::Option<::std::string::String> {
        &self.duns
    }
    /// Consumes the builder and constructs a [`Account`](crate::types::Account).
    /// This method will fail if any of the following fields are not set:
    /// - [`company_name`](crate::types::builders::AccountBuilder::company_name)
    pub fn build(self) -> ::std::result::Result<crate::types::Account, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Account {
            industry: self.industry,
            other_industry: self.other_industry,
            company_name: self.company_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "company_name",
                    "company_name was not specified but it is required when building Account",
                )
            })?,
            website_url: self.website_url,
            aws_account_id: self.aws_account_id,
            address: self.address,
            duns: self.duns,
        })
    }
}
impl ::std::fmt::Debug for AccountBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AccountBuilder");
        formatter.field("industry", &self.industry);
        formatter.field("other_industry", &self.other_industry);
        formatter.field("company_name", &"*** Sensitive Data Redacted ***");
        formatter.field("website_url", &"*** Sensitive Data Redacted ***");
        formatter.field("aws_account_id", &"*** Sensitive Data Redacted ***");
        formatter.field("address", &self.address);
        formatter.field("duns", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
