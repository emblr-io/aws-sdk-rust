// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates the level of AWS involvement in the opportunity. This field helps track AWS participation throughout the engagement, such as providing technical support, deal assistance, and sales support.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsSubmission {
    /// <p>Specifies the type of AWS involvement in the opportunity, such as coselling, deal support, or technical consultation. This helps categorize the nature of AWS participation.</p>
    pub involvement_type: crate::types::SalesInvolvementType,
    /// <p>Determines who can view AWS involvement in the opportunity. Typically, this field is set to <code>Full</code> for most cases, but it may be restricted based on special program requirements or confidentiality needs.</p>
    pub visibility: ::std::option::Option<crate::types::Visibility>,
}
impl AwsSubmission {
    /// <p>Specifies the type of AWS involvement in the opportunity, such as coselling, deal support, or technical consultation. This helps categorize the nature of AWS participation.</p>
    pub fn involvement_type(&self) -> &crate::types::SalesInvolvementType {
        &self.involvement_type
    }
    /// <p>Determines who can view AWS involvement in the opportunity. Typically, this field is set to <code>Full</code> for most cases, but it may be restricted based on special program requirements or confidentiality needs.</p>
    pub fn visibility(&self) -> ::std::option::Option<&crate::types::Visibility> {
        self.visibility.as_ref()
    }
}
impl AwsSubmission {
    /// Creates a new builder-style object to manufacture [`AwsSubmission`](crate::types::AwsSubmission).
    pub fn builder() -> crate::types::builders::AwsSubmissionBuilder {
        crate::types::builders::AwsSubmissionBuilder::default()
    }
}

/// A builder for [`AwsSubmission`](crate::types::AwsSubmission).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AwsSubmissionBuilder {
    pub(crate) involvement_type: ::std::option::Option<crate::types::SalesInvolvementType>,
    pub(crate) visibility: ::std::option::Option<crate::types::Visibility>,
}
impl AwsSubmissionBuilder {
    /// <p>Specifies the type of AWS involvement in the opportunity, such as coselling, deal support, or technical consultation. This helps categorize the nature of AWS participation.</p>
    /// This field is required.
    pub fn involvement_type(mut self, input: crate::types::SalesInvolvementType) -> Self {
        self.involvement_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of AWS involvement in the opportunity, such as coselling, deal support, or technical consultation. This helps categorize the nature of AWS participation.</p>
    pub fn set_involvement_type(mut self, input: ::std::option::Option<crate::types::SalesInvolvementType>) -> Self {
        self.involvement_type = input;
        self
    }
    /// <p>Specifies the type of AWS involvement in the opportunity, such as coselling, deal support, or technical consultation. This helps categorize the nature of AWS participation.</p>
    pub fn get_involvement_type(&self) -> &::std::option::Option<crate::types::SalesInvolvementType> {
        &self.involvement_type
    }
    /// <p>Determines who can view AWS involvement in the opportunity. Typically, this field is set to <code>Full</code> for most cases, but it may be restricted based on special program requirements or confidentiality needs.</p>
    pub fn visibility(mut self, input: crate::types::Visibility) -> Self {
        self.visibility = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines who can view AWS involvement in the opportunity. Typically, this field is set to <code>Full</code> for most cases, but it may be restricted based on special program requirements or confidentiality needs.</p>
    pub fn set_visibility(mut self, input: ::std::option::Option<crate::types::Visibility>) -> Self {
        self.visibility = input;
        self
    }
    /// <p>Determines who can view AWS involvement in the opportunity. Typically, this field is set to <code>Full</code> for most cases, but it may be restricted based on special program requirements or confidentiality needs.</p>
    pub fn get_visibility(&self) -> &::std::option::Option<crate::types::Visibility> {
        &self.visibility
    }
    /// Consumes the builder and constructs a [`AwsSubmission`](crate::types::AwsSubmission).
    /// This method will fail if any of the following fields are not set:
    /// - [`involvement_type`](crate::types::builders::AwsSubmissionBuilder::involvement_type)
    pub fn build(self) -> ::std::result::Result<crate::types::AwsSubmission, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AwsSubmission {
            involvement_type: self.involvement_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "involvement_type",
                    "involvement_type was not specified but it is required when building AwsSubmission",
                )
            })?,
            visibility: self.visibility,
        })
    }
}
