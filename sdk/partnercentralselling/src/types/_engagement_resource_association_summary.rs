// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This provide a streamlined view of the relationships between engagements and resources. These summaries offer a crucial link between collaborative engagements and the specific resources involved, such as opportunities.These summaries are particularly valuable for partners navigating complex engagements with multiple resources. They enable quick insights into resource distribution across engagements, support efficient resource management, and help maintain a clear overview of collaborative activities.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EngagementResourceAssociationSummary {
    /// <p>Indicates the environment in which the resource and engagement exist.</p>
    pub catalog: ::std::string::String,
    /// <p>A unique identifier for the engagement associated with the resource.</p>
    pub engagement_id: ::std::option::Option<::std::string::String>,
    /// <p>Categorizes the type of resource associated with the engagement.</p>
    pub resource_type: ::std::option::Option<crate::types::ResourceType>,
    /// <p>A unique identifier for the specific resource. Varies depending on the resource type.</p>
    pub resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The AWS account ID of the entity that owns the resource. Identifies the account responsible for or having primary control over the resource.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
}
impl EngagementResourceAssociationSummary {
    /// <p>Indicates the environment in which the resource and engagement exist.</p>
    pub fn catalog(&self) -> &str {
        use std::ops::Deref;
        self.catalog.deref()
    }
    /// <p>A unique identifier for the engagement associated with the resource.</p>
    pub fn engagement_id(&self) -> ::std::option::Option<&str> {
        self.engagement_id.as_deref()
    }
    /// <p>Categorizes the type of resource associated with the engagement.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>A unique identifier for the specific resource. Varies depending on the resource type.</p>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The AWS account ID of the entity that owns the resource. Identifies the account responsible for or having primary control over the resource.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
}
impl ::std::fmt::Debug for EngagementResourceAssociationSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EngagementResourceAssociationSummary");
        formatter.field("catalog", &self.catalog);
        formatter.field("engagement_id", &self.engagement_id);
        formatter.field("resource_type", &self.resource_type);
        formatter.field("resource_id", &self.resource_id);
        formatter.field("created_by", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl EngagementResourceAssociationSummary {
    /// Creates a new builder-style object to manufacture [`EngagementResourceAssociationSummary`](crate::types::EngagementResourceAssociationSummary).
    pub fn builder() -> crate::types::builders::EngagementResourceAssociationSummaryBuilder {
        crate::types::builders::EngagementResourceAssociationSummaryBuilder::default()
    }
}

/// A builder for [`EngagementResourceAssociationSummary`](crate::types::EngagementResourceAssociationSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct EngagementResourceAssociationSummaryBuilder {
    pub(crate) catalog: ::std::option::Option<::std::string::String>,
    pub(crate) engagement_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<crate::types::ResourceType>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
}
impl EngagementResourceAssociationSummaryBuilder {
    /// <p>Indicates the environment in which the resource and engagement exist.</p>
    /// This field is required.
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates the environment in which the resource and engagement exist.</p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>Indicates the environment in which the resource and engagement exist.</p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog
    }
    /// <p>A unique identifier for the engagement associated with the resource.</p>
    pub fn engagement_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engagement_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the engagement associated with the resource.</p>
    pub fn set_engagement_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engagement_id = input;
        self
    }
    /// <p>A unique identifier for the engagement associated with the resource.</p>
    pub fn get_engagement_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.engagement_id
    }
    /// <p>Categorizes the type of resource associated with the engagement.</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Categorizes the type of resource associated with the engagement.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::ResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>Categorizes the type of resource associated with the engagement.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::ResourceType> {
        &self.resource_type
    }
    /// <p>A unique identifier for the specific resource. Varies depending on the resource type.</p>
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the specific resource. Varies depending on the resource type.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>A unique identifier for the specific resource. Varies depending on the resource type.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>The AWS account ID of the entity that owns the resource. Identifies the account responsible for or having primary control over the resource.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS account ID of the entity that owns the resource. Identifies the account responsible for or having primary control over the resource.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The AWS account ID of the entity that owns the resource. Identifies the account responsible for or having primary control over the resource.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// Consumes the builder and constructs a [`EngagementResourceAssociationSummary`](crate::types::EngagementResourceAssociationSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`catalog`](crate::types::builders::EngagementResourceAssociationSummaryBuilder::catalog)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::EngagementResourceAssociationSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EngagementResourceAssociationSummary {
            catalog: self.catalog.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "catalog",
                    "catalog was not specified but it is required when building EngagementResourceAssociationSummary",
                )
            })?,
            engagement_id: self.engagement_id,
            resource_type: self.resource_type,
            resource_id: self.resource_id,
            created_by: self.created_by,
        })
    }
}
impl ::std::fmt::Debug for EngagementResourceAssociationSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EngagementResourceAssociationSummaryBuilder");
        formatter.field("catalog", &self.catalog);
        formatter.field("engagement_id", &self.engagement_id);
        formatter.field("resource_type", &self.resource_type);
        formatter.field("resource_id", &self.resource_id);
        formatter.field("created_by", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
