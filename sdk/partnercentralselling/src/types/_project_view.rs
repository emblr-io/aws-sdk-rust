// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the project view of an opportunity resource shared through a snapshot.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ProjectView {
    /// <p>Describes the deployment or consumption model for the partner solution or offering. This field indicates how the project's solution will be delivered or implemented for the customer.</p>
    pub delivery_models: ::std::option::Option<::std::vec::Vec<crate::types::DeliveryModel>>,
    /// <p>Provides information about the anticipated customer spend related to this project. This may include details such as amount, frequency, and currency of expected expenditure.</p>
    pub expected_customer_spend: ::std::option::Option<::std::vec::Vec<crate::types::ExpectedCustomerSpend>>,
    /// <p>Specifies the proposed solution focus or type of workload for the project.</p>
    pub customer_use_case: ::std::option::Option<::std::string::String>,
    /// <p>Lists the pre-sales activities that have occurred with the end-customer related to the opportunity. This field is conditionally mandatory when the project is qualified for Co-Sell and helps drive assignment priority on the AWS side. It provides insight into the engagement level with the customer.</p>
    pub sales_activities: ::std::option::Option<::std::vec::Vec<crate::types::SalesActivity>>,
    /// <p>Offers a description of other solutions if the standard solutions do not adequately cover the project's scope.</p>
    pub other_solution_description: ::std::option::Option<::std::string::String>,
}
impl ProjectView {
    /// <p>Describes the deployment or consumption model for the partner solution or offering. This field indicates how the project's solution will be delivered or implemented for the customer.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.delivery_models.is_none()`.
    pub fn delivery_models(&self) -> &[crate::types::DeliveryModel] {
        self.delivery_models.as_deref().unwrap_or_default()
    }
    /// <p>Provides information about the anticipated customer spend related to this project. This may include details such as amount, frequency, and currency of expected expenditure.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.expected_customer_spend.is_none()`.
    pub fn expected_customer_spend(&self) -> &[crate::types::ExpectedCustomerSpend] {
        self.expected_customer_spend.as_deref().unwrap_or_default()
    }
    /// <p>Specifies the proposed solution focus or type of workload for the project.</p>
    pub fn customer_use_case(&self) -> ::std::option::Option<&str> {
        self.customer_use_case.as_deref()
    }
    /// <p>Lists the pre-sales activities that have occurred with the end-customer related to the opportunity. This field is conditionally mandatory when the project is qualified for Co-Sell and helps drive assignment priority on the AWS side. It provides insight into the engagement level with the customer.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sales_activities.is_none()`.
    pub fn sales_activities(&self) -> &[crate::types::SalesActivity] {
        self.sales_activities.as_deref().unwrap_or_default()
    }
    /// <p>Offers a description of other solutions if the standard solutions do not adequately cover the project's scope.</p>
    pub fn other_solution_description(&self) -> ::std::option::Option<&str> {
        self.other_solution_description.as_deref()
    }
}
impl ::std::fmt::Debug for ProjectView {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ProjectView");
        formatter.field("delivery_models", &self.delivery_models);
        formatter.field("expected_customer_spend", &self.expected_customer_spend);
        formatter.field("customer_use_case", &self.customer_use_case);
        formatter.field("sales_activities", &self.sales_activities);
        formatter.field("other_solution_description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ProjectView {
    /// Creates a new builder-style object to manufacture [`ProjectView`](crate::types::ProjectView).
    pub fn builder() -> crate::types::builders::ProjectViewBuilder {
        crate::types::builders::ProjectViewBuilder::default()
    }
}

/// A builder for [`ProjectView`](crate::types::ProjectView).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ProjectViewBuilder {
    pub(crate) delivery_models: ::std::option::Option<::std::vec::Vec<crate::types::DeliveryModel>>,
    pub(crate) expected_customer_spend: ::std::option::Option<::std::vec::Vec<crate::types::ExpectedCustomerSpend>>,
    pub(crate) customer_use_case: ::std::option::Option<::std::string::String>,
    pub(crate) sales_activities: ::std::option::Option<::std::vec::Vec<crate::types::SalesActivity>>,
    pub(crate) other_solution_description: ::std::option::Option<::std::string::String>,
}
impl ProjectViewBuilder {
    /// Appends an item to `delivery_models`.
    ///
    /// To override the contents of this collection use [`set_delivery_models`](Self::set_delivery_models).
    ///
    /// <p>Describes the deployment or consumption model for the partner solution or offering. This field indicates how the project's solution will be delivered or implemented for the customer.</p>
    pub fn delivery_models(mut self, input: crate::types::DeliveryModel) -> Self {
        let mut v = self.delivery_models.unwrap_or_default();
        v.push(input);
        self.delivery_models = ::std::option::Option::Some(v);
        self
    }
    /// <p>Describes the deployment or consumption model for the partner solution or offering. This field indicates how the project's solution will be delivered or implemented for the customer.</p>
    pub fn set_delivery_models(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DeliveryModel>>) -> Self {
        self.delivery_models = input;
        self
    }
    /// <p>Describes the deployment or consumption model for the partner solution or offering. This field indicates how the project's solution will be delivered or implemented for the customer.</p>
    pub fn get_delivery_models(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DeliveryModel>> {
        &self.delivery_models
    }
    /// Appends an item to `expected_customer_spend`.
    ///
    /// To override the contents of this collection use [`set_expected_customer_spend`](Self::set_expected_customer_spend).
    ///
    /// <p>Provides information about the anticipated customer spend related to this project. This may include details such as amount, frequency, and currency of expected expenditure.</p>
    pub fn expected_customer_spend(mut self, input: crate::types::ExpectedCustomerSpend) -> Self {
        let mut v = self.expected_customer_spend.unwrap_or_default();
        v.push(input);
        self.expected_customer_spend = ::std::option::Option::Some(v);
        self
    }
    /// <p>Provides information about the anticipated customer spend related to this project. This may include details such as amount, frequency, and currency of expected expenditure.</p>
    pub fn set_expected_customer_spend(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ExpectedCustomerSpend>>) -> Self {
        self.expected_customer_spend = input;
        self
    }
    /// <p>Provides information about the anticipated customer spend related to this project. This may include details such as amount, frequency, and currency of expected expenditure.</p>
    pub fn get_expected_customer_spend(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ExpectedCustomerSpend>> {
        &self.expected_customer_spend
    }
    /// <p>Specifies the proposed solution focus or type of workload for the project.</p>
    pub fn customer_use_case(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_use_case = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the proposed solution focus or type of workload for the project.</p>
    pub fn set_customer_use_case(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_use_case = input;
        self
    }
    /// <p>Specifies the proposed solution focus or type of workload for the project.</p>
    pub fn get_customer_use_case(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_use_case
    }
    /// Appends an item to `sales_activities`.
    ///
    /// To override the contents of this collection use [`set_sales_activities`](Self::set_sales_activities).
    ///
    /// <p>Lists the pre-sales activities that have occurred with the end-customer related to the opportunity. This field is conditionally mandatory when the project is qualified for Co-Sell and helps drive assignment priority on the AWS side. It provides insight into the engagement level with the customer.</p>
    pub fn sales_activities(mut self, input: crate::types::SalesActivity) -> Self {
        let mut v = self.sales_activities.unwrap_or_default();
        v.push(input);
        self.sales_activities = ::std::option::Option::Some(v);
        self
    }
    /// <p>Lists the pre-sales activities that have occurred with the end-customer related to the opportunity. This field is conditionally mandatory when the project is qualified for Co-Sell and helps drive assignment priority on the AWS side. It provides insight into the engagement level with the customer.</p>
    pub fn set_sales_activities(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SalesActivity>>) -> Self {
        self.sales_activities = input;
        self
    }
    /// <p>Lists the pre-sales activities that have occurred with the end-customer related to the opportunity. This field is conditionally mandatory when the project is qualified for Co-Sell and helps drive assignment priority on the AWS side. It provides insight into the engagement level with the customer.</p>
    pub fn get_sales_activities(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SalesActivity>> {
        &self.sales_activities
    }
    /// <p>Offers a description of other solutions if the standard solutions do not adequately cover the project's scope.</p>
    pub fn other_solution_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.other_solution_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Offers a description of other solutions if the standard solutions do not adequately cover the project's scope.</p>
    pub fn set_other_solution_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.other_solution_description = input;
        self
    }
    /// <p>Offers a description of other solutions if the standard solutions do not adequately cover the project's scope.</p>
    pub fn get_other_solution_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.other_solution_description
    }
    /// Consumes the builder and constructs a [`ProjectView`](crate::types::ProjectView).
    pub fn build(self) -> crate::types::ProjectView {
        crate::types::ProjectView {
            delivery_models: self.delivery_models,
            expected_customer_spend: self.expected_customer_spend,
            customer_use_case: self.customer_use_case,
            sales_activities: self.sales_activities,
            other_solution_description: self.other_solution_description,
        }
    }
}
impl ::std::fmt::Debug for ProjectViewBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ProjectViewBuilder");
        formatter.field("delivery_models", &self.delivery_models);
        formatter.field("expected_customer_spend", &self.expected_customer_spend);
        formatter.field("customer_use_case", &self.customer_use_case);
        formatter.field("sales_activities", &self.sales_activities);
        formatter.field("other_solution_description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
