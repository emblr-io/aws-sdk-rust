// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains marketing details for the <code>Opportunity</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Marketing {
    /// <p>Specifies the <code>Opportunity</code> marketing campaign code. The Amazon Web Services campaign code is a reference to specific marketing initiatives, promotions, or activities. This field captures the identifier used to track and categorize the <code>Opportunity</code> within marketing campaigns. If you don't have a campaign code, contact your Amazon Web Services point of contact to obtain one.</p>
    pub campaign_name: ::std::option::Option<::std::string::String>,
    /// <p>Indicates if the <code>Opportunity</code> was sourced from an Amazon Web Services marketing activity. Use the value <code>Marketing Activity</code>. Use <code>None</code> if it's not associated with an Amazon Web Services marketing activity. This field helps Amazon Web Services track the return on marketing investments and enables better distribution of marketing budgets among partners.</p>
    pub source: ::std::option::Option<crate::types::MarketingSource>,
    /// <p>Specifies the marketing activity use case or purpose that led to the <code>Opportunity</code>'s creation or contact. This field captures the context or marketing activity's execution's intention and the direct correlation to the generated opportunity or contact. Must be empty when <code>Marketing.AWSFundingUsed = No</code>.</p>
    /// <p>Valid values: <code>AI/ML | Analytics | Application Integration | Blockchain | Business Applications | Cloud Financial Management | Compute | Containers | Customer Engagement | Databases | Developer Tools | End User Computing | Front End Web &amp; Mobile | Game Tech | IoT | Management &amp; Governance | Media Services | Migration &amp; Transfer | Networking &amp; Content Delivery | Quantum Technologies | Robotics | Satellite | Security | Serverless | Storage | VR &amp; AR</code></p>
    pub use_cases: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies the <code>Opportunity</code>'s channel that the marketing activity is associated with or was contacted through. This field provides information about the specific marketing channel that contributed to the generation of the lead or contact.</p>
    pub channels: ::std::option::Option<::std::vec::Vec<crate::types::Channel>>,
    /// <p>Indicates if the <code>Opportunity</code> is a marketing development fund (MDF) funded activity.</p>
    pub aws_funding_used: ::std::option::Option<crate::types::AwsFundingUsed>,
}
impl Marketing {
    /// <p>Specifies the <code>Opportunity</code> marketing campaign code. The Amazon Web Services campaign code is a reference to specific marketing initiatives, promotions, or activities. This field captures the identifier used to track and categorize the <code>Opportunity</code> within marketing campaigns. If you don't have a campaign code, contact your Amazon Web Services point of contact to obtain one.</p>
    pub fn campaign_name(&self) -> ::std::option::Option<&str> {
        self.campaign_name.as_deref()
    }
    /// <p>Indicates if the <code>Opportunity</code> was sourced from an Amazon Web Services marketing activity. Use the value <code>Marketing Activity</code>. Use <code>None</code> if it's not associated with an Amazon Web Services marketing activity. This field helps Amazon Web Services track the return on marketing investments and enables better distribution of marketing budgets among partners.</p>
    pub fn source(&self) -> ::std::option::Option<&crate::types::MarketingSource> {
        self.source.as_ref()
    }
    /// <p>Specifies the marketing activity use case or purpose that led to the <code>Opportunity</code>'s creation or contact. This field captures the context or marketing activity's execution's intention and the direct correlation to the generated opportunity or contact. Must be empty when <code>Marketing.AWSFundingUsed = No</code>.</p>
    /// <p>Valid values: <code>AI/ML | Analytics | Application Integration | Blockchain | Business Applications | Cloud Financial Management | Compute | Containers | Customer Engagement | Databases | Developer Tools | End User Computing | Front End Web &amp; Mobile | Game Tech | IoT | Management &amp; Governance | Media Services | Migration &amp; Transfer | Networking &amp; Content Delivery | Quantum Technologies | Robotics | Satellite | Security | Serverless | Storage | VR &amp; AR</code></p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.use_cases.is_none()`.
    pub fn use_cases(&self) -> &[::std::string::String] {
        self.use_cases.as_deref().unwrap_or_default()
    }
    /// <p>Specifies the <code>Opportunity</code>'s channel that the marketing activity is associated with or was contacted through. This field provides information about the specific marketing channel that contributed to the generation of the lead or contact.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.channels.is_none()`.
    pub fn channels(&self) -> &[crate::types::Channel] {
        self.channels.as_deref().unwrap_or_default()
    }
    /// <p>Indicates if the <code>Opportunity</code> is a marketing development fund (MDF) funded activity.</p>
    pub fn aws_funding_used(&self) -> ::std::option::Option<&crate::types::AwsFundingUsed> {
        self.aws_funding_used.as_ref()
    }
}
impl Marketing {
    /// Creates a new builder-style object to manufacture [`Marketing`](crate::types::Marketing).
    pub fn builder() -> crate::types::builders::MarketingBuilder {
        crate::types::builders::MarketingBuilder::default()
    }
}

/// A builder for [`Marketing`](crate::types::Marketing).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MarketingBuilder {
    pub(crate) campaign_name: ::std::option::Option<::std::string::String>,
    pub(crate) source: ::std::option::Option<crate::types::MarketingSource>,
    pub(crate) use_cases: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) channels: ::std::option::Option<::std::vec::Vec<crate::types::Channel>>,
    pub(crate) aws_funding_used: ::std::option::Option<crate::types::AwsFundingUsed>,
}
impl MarketingBuilder {
    /// <p>Specifies the <code>Opportunity</code> marketing campaign code. The Amazon Web Services campaign code is a reference to specific marketing initiatives, promotions, or activities. This field captures the identifier used to track and categorize the <code>Opportunity</code> within marketing campaigns. If you don't have a campaign code, contact your Amazon Web Services point of contact to obtain one.</p>
    pub fn campaign_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.campaign_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the <code>Opportunity</code> marketing campaign code. The Amazon Web Services campaign code is a reference to specific marketing initiatives, promotions, or activities. This field captures the identifier used to track and categorize the <code>Opportunity</code> within marketing campaigns. If you don't have a campaign code, contact your Amazon Web Services point of contact to obtain one.</p>
    pub fn set_campaign_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.campaign_name = input;
        self
    }
    /// <p>Specifies the <code>Opportunity</code> marketing campaign code. The Amazon Web Services campaign code is a reference to specific marketing initiatives, promotions, or activities. This field captures the identifier used to track and categorize the <code>Opportunity</code> within marketing campaigns. If you don't have a campaign code, contact your Amazon Web Services point of contact to obtain one.</p>
    pub fn get_campaign_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.campaign_name
    }
    /// <p>Indicates if the <code>Opportunity</code> was sourced from an Amazon Web Services marketing activity. Use the value <code>Marketing Activity</code>. Use <code>None</code> if it's not associated with an Amazon Web Services marketing activity. This field helps Amazon Web Services track the return on marketing investments and enables better distribution of marketing budgets among partners.</p>
    pub fn source(mut self, input: crate::types::MarketingSource) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates if the <code>Opportunity</code> was sourced from an Amazon Web Services marketing activity. Use the value <code>Marketing Activity</code>. Use <code>None</code> if it's not associated with an Amazon Web Services marketing activity. This field helps Amazon Web Services track the return on marketing investments and enables better distribution of marketing budgets among partners.</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::MarketingSource>) -> Self {
        self.source = input;
        self
    }
    /// <p>Indicates if the <code>Opportunity</code> was sourced from an Amazon Web Services marketing activity. Use the value <code>Marketing Activity</code>. Use <code>None</code> if it's not associated with an Amazon Web Services marketing activity. This field helps Amazon Web Services track the return on marketing investments and enables better distribution of marketing budgets among partners.</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::MarketingSource> {
        &self.source
    }
    /// Appends an item to `use_cases`.
    ///
    /// To override the contents of this collection use [`set_use_cases`](Self::set_use_cases).
    ///
    /// <p>Specifies the marketing activity use case or purpose that led to the <code>Opportunity</code>'s creation or contact. This field captures the context or marketing activity's execution's intention and the direct correlation to the generated opportunity or contact. Must be empty when <code>Marketing.AWSFundingUsed = No</code>.</p>
    /// <p>Valid values: <code>AI/ML | Analytics | Application Integration | Blockchain | Business Applications | Cloud Financial Management | Compute | Containers | Customer Engagement | Databases | Developer Tools | End User Computing | Front End Web &amp; Mobile | Game Tech | IoT | Management &amp; Governance | Media Services | Migration &amp; Transfer | Networking &amp; Content Delivery | Quantum Technologies | Robotics | Satellite | Security | Serverless | Storage | VR &amp; AR</code></p>
    pub fn use_cases(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.use_cases.unwrap_or_default();
        v.push(input.into());
        self.use_cases = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the marketing activity use case or purpose that led to the <code>Opportunity</code>'s creation or contact. This field captures the context or marketing activity's execution's intention and the direct correlation to the generated opportunity or contact. Must be empty when <code>Marketing.AWSFundingUsed = No</code>.</p>
    /// <p>Valid values: <code>AI/ML | Analytics | Application Integration | Blockchain | Business Applications | Cloud Financial Management | Compute | Containers | Customer Engagement | Databases | Developer Tools | End User Computing | Front End Web &amp; Mobile | Game Tech | IoT | Management &amp; Governance | Media Services | Migration &amp; Transfer | Networking &amp; Content Delivery | Quantum Technologies | Robotics | Satellite | Security | Serverless | Storage | VR &amp; AR</code></p>
    pub fn set_use_cases(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.use_cases = input;
        self
    }
    /// <p>Specifies the marketing activity use case or purpose that led to the <code>Opportunity</code>'s creation or contact. This field captures the context or marketing activity's execution's intention and the direct correlation to the generated opportunity or contact. Must be empty when <code>Marketing.AWSFundingUsed = No</code>.</p>
    /// <p>Valid values: <code>AI/ML | Analytics | Application Integration | Blockchain | Business Applications | Cloud Financial Management | Compute | Containers | Customer Engagement | Databases | Developer Tools | End User Computing | Front End Web &amp; Mobile | Game Tech | IoT | Management &amp; Governance | Media Services | Migration &amp; Transfer | Networking &amp; Content Delivery | Quantum Technologies | Robotics | Satellite | Security | Serverless | Storage | VR &amp; AR</code></p>
    pub fn get_use_cases(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.use_cases
    }
    /// Appends an item to `channels`.
    ///
    /// To override the contents of this collection use [`set_channels`](Self::set_channels).
    ///
    /// <p>Specifies the <code>Opportunity</code>'s channel that the marketing activity is associated with or was contacted through. This field provides information about the specific marketing channel that contributed to the generation of the lead or contact.</p>
    pub fn channels(mut self, input: crate::types::Channel) -> Self {
        let mut v = self.channels.unwrap_or_default();
        v.push(input);
        self.channels = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the <code>Opportunity</code>'s channel that the marketing activity is associated with or was contacted through. This field provides information about the specific marketing channel that contributed to the generation of the lead or contact.</p>
    pub fn set_channels(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Channel>>) -> Self {
        self.channels = input;
        self
    }
    /// <p>Specifies the <code>Opportunity</code>'s channel that the marketing activity is associated with or was contacted through. This field provides information about the specific marketing channel that contributed to the generation of the lead or contact.</p>
    pub fn get_channels(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Channel>> {
        &self.channels
    }
    /// <p>Indicates if the <code>Opportunity</code> is a marketing development fund (MDF) funded activity.</p>
    pub fn aws_funding_used(mut self, input: crate::types::AwsFundingUsed) -> Self {
        self.aws_funding_used = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates if the <code>Opportunity</code> is a marketing development fund (MDF) funded activity.</p>
    pub fn set_aws_funding_used(mut self, input: ::std::option::Option<crate::types::AwsFundingUsed>) -> Self {
        self.aws_funding_used = input;
        self
    }
    /// <p>Indicates if the <code>Opportunity</code> is a marketing development fund (MDF) funded activity.</p>
    pub fn get_aws_funding_used(&self) -> &::std::option::Option<crate::types::AwsFundingUsed> {
        &self.aws_funding_used
    }
    /// Consumes the builder and constructs a [`Marketing`](crate::types::Marketing).
    pub fn build(self) -> crate::types::Marketing {
        crate::types::Marketing {
            campaign_name: self.campaign_name,
            source: self.source,
            use_cases: self.use_cases,
            channels: self.channels,
            aws_funding_used: self.aws_funding_used,
        }
    }
}
