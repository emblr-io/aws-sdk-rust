// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a customer's procurement terms details. Required only for partners in eligible programs.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SoftwareRevenue {
    /// <p>Specifies the customer's intended payment type agreement or procurement method to acquire the solution or service outlined in the <code>Opportunity</code>.</p>
    pub delivery_model: ::std::option::Option<crate::types::RevenueModel>,
    /// <p>Specifies the payment value (amount and currency).</p>
    pub value: ::std::option::Option<crate::types::MonetaryValue>,
    /// <p>Specifies the <code>Opportunity</code>'s customer engagement start date for the contract's effectiveness.</p>
    pub effective_date: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the expiration date for the contract between the customer and Amazon Web Services partner. It signifies the termination date of the agreed-upon engagement period between both parties.</p>
    pub expiration_date: ::std::option::Option<::std::string::String>,
}
impl SoftwareRevenue {
    /// <p>Specifies the customer's intended payment type agreement or procurement method to acquire the solution or service outlined in the <code>Opportunity</code>.</p>
    pub fn delivery_model(&self) -> ::std::option::Option<&crate::types::RevenueModel> {
        self.delivery_model.as_ref()
    }
    /// <p>Specifies the payment value (amount and currency).</p>
    pub fn value(&self) -> ::std::option::Option<&crate::types::MonetaryValue> {
        self.value.as_ref()
    }
    /// <p>Specifies the <code>Opportunity</code>'s customer engagement start date for the contract's effectiveness.</p>
    pub fn effective_date(&self) -> ::std::option::Option<&str> {
        self.effective_date.as_deref()
    }
    /// <p>Specifies the expiration date for the contract between the customer and Amazon Web Services partner. It signifies the termination date of the agreed-upon engagement period between both parties.</p>
    pub fn expiration_date(&self) -> ::std::option::Option<&str> {
        self.expiration_date.as_deref()
    }
}
impl SoftwareRevenue {
    /// Creates a new builder-style object to manufacture [`SoftwareRevenue`](crate::types::SoftwareRevenue).
    pub fn builder() -> crate::types::builders::SoftwareRevenueBuilder {
        crate::types::builders::SoftwareRevenueBuilder::default()
    }
}

/// A builder for [`SoftwareRevenue`](crate::types::SoftwareRevenue).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SoftwareRevenueBuilder {
    pub(crate) delivery_model: ::std::option::Option<crate::types::RevenueModel>,
    pub(crate) value: ::std::option::Option<crate::types::MonetaryValue>,
    pub(crate) effective_date: ::std::option::Option<::std::string::String>,
    pub(crate) expiration_date: ::std::option::Option<::std::string::String>,
}
impl SoftwareRevenueBuilder {
    /// <p>Specifies the customer's intended payment type agreement or procurement method to acquire the solution or service outlined in the <code>Opportunity</code>.</p>
    pub fn delivery_model(mut self, input: crate::types::RevenueModel) -> Self {
        self.delivery_model = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the customer's intended payment type agreement or procurement method to acquire the solution or service outlined in the <code>Opportunity</code>.</p>
    pub fn set_delivery_model(mut self, input: ::std::option::Option<crate::types::RevenueModel>) -> Self {
        self.delivery_model = input;
        self
    }
    /// <p>Specifies the customer's intended payment type agreement or procurement method to acquire the solution or service outlined in the <code>Opportunity</code>.</p>
    pub fn get_delivery_model(&self) -> &::std::option::Option<crate::types::RevenueModel> {
        &self.delivery_model
    }
    /// <p>Specifies the payment value (amount and currency).</p>
    pub fn value(mut self, input: crate::types::MonetaryValue) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the payment value (amount and currency).</p>
    pub fn set_value(mut self, input: ::std::option::Option<crate::types::MonetaryValue>) -> Self {
        self.value = input;
        self
    }
    /// <p>Specifies the payment value (amount and currency).</p>
    pub fn get_value(&self) -> &::std::option::Option<crate::types::MonetaryValue> {
        &self.value
    }
    /// <p>Specifies the <code>Opportunity</code>'s customer engagement start date for the contract's effectiveness.</p>
    pub fn effective_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.effective_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the <code>Opportunity</code>'s customer engagement start date for the contract's effectiveness.</p>
    pub fn set_effective_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.effective_date = input;
        self
    }
    /// <p>Specifies the <code>Opportunity</code>'s customer engagement start date for the contract's effectiveness.</p>
    pub fn get_effective_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.effective_date
    }
    /// <p>Specifies the expiration date for the contract between the customer and Amazon Web Services partner. It signifies the termination date of the agreed-upon engagement period between both parties.</p>
    pub fn expiration_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expiration_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the expiration date for the contract between the customer and Amazon Web Services partner. It signifies the termination date of the agreed-upon engagement period between both parties.</p>
    pub fn set_expiration_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expiration_date = input;
        self
    }
    /// <p>Specifies the expiration date for the contract between the customer and Amazon Web Services partner. It signifies the termination date of the agreed-upon engagement period between both parties.</p>
    pub fn get_expiration_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.expiration_date
    }
    /// Consumes the builder and constructs a [`SoftwareRevenue`](crate::types::SoftwareRevenue).
    pub fn build(self) -> crate::types::SoftwareRevenue {
        crate::types::SoftwareRevenue {
            delivery_model: self.delivery_model,
            value: self.value,
            effective_date: self.effective_date,
            expiration_date: self.expiration_date,
        }
    }
}
