// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains an <code>Opportunity</code>'s subset of fields.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OpportunitySummary {
    /// <p>Specifies the catalog associated with the opportunity, either <code>AWS</code> or <code>Sandbox</code>. This indicates the environment in which the opportunity is managed.</p>
    pub catalog: ::std::string::String,
    /// <p>Read-only, system-generated <code>Opportunity</code> unique identifier.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the opportunity. This globally unique identifier can be used for IAM policies and cross-service references.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the <code>Opportunity</code>'s unique identifier in the partner's CRM system. This value is essential to track and reconcile because it's included in the outbound payload sent back to the partner. It allows partners to link an opportunity to their CRM.</p>
    pub partner_opportunity_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Specifies opportunity type as a renewal, new, or expansion.</p>
    /// <p>Opportunity types:</p>
    /// <ul>
    /// <li>
    /// <p>New Opportunity: Represents a new business opportunity with a potential customer that's not previously engaged with your solutions or services.</p></li>
    /// <li>
    /// <p>Renewal Opportunity: Represents an opportunity to renew an existing contract or subscription with a current customer, ensuring continuity of service.</p></li>
    /// <li>
    /// <p>Expansion Opportunity: Represents an opportunity to expand the scope of an existing contract or subscription, either by adding new services or increasing the volume of existing services for a current customer.</p></li>
    /// </ul>
    pub opportunity_type: ::std::option::Option<crate::types::OpportunityType>,
    /// <p><code>DateTime</code> when the <code>Opportunity</code> was last modified.</p>
    pub last_modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p><code>DateTime</code> when the <code>Opportunity</code> was last created.</p>
    pub created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>An object that contains the <code>Opportunity</code>'s lifecycle details.</p>
    pub life_cycle: ::std::option::Option<crate::types::LifeCycleSummary>,
    /// <p>An object that contains the <code>Opportunity</code>'s customer details.</p>
    pub customer: ::std::option::Option<crate::types::CustomerSummary>,
    /// <p>An object that contains the <code>Opportunity</code>'s project details summary.</p>
    pub project: ::std::option::Option<crate::types::ProjectSummary>,
}
impl OpportunitySummary {
    /// <p>Specifies the catalog associated with the opportunity, either <code>AWS</code> or <code>Sandbox</code>. This indicates the environment in which the opportunity is managed.</p>
    pub fn catalog(&self) -> &str {
        use std::ops::Deref;
        self.catalog.deref()
    }
    /// <p>Read-only, system-generated <code>Opportunity</code> unique identifier.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the opportunity. This globally unique identifier can be used for IAM policies and cross-service references.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>Specifies the <code>Opportunity</code>'s unique identifier in the partner's CRM system. This value is essential to track and reconcile because it's included in the outbound payload sent back to the partner. It allows partners to link an opportunity to their CRM.</p>
    pub fn partner_opportunity_identifier(&self) -> ::std::option::Option<&str> {
        self.partner_opportunity_identifier.as_deref()
    }
    /// <p>Specifies opportunity type as a renewal, new, or expansion.</p>
    /// <p>Opportunity types:</p>
    /// <ul>
    /// <li>
    /// <p>New Opportunity: Represents a new business opportunity with a potential customer that's not previously engaged with your solutions or services.</p></li>
    /// <li>
    /// <p>Renewal Opportunity: Represents an opportunity to renew an existing contract or subscription with a current customer, ensuring continuity of service.</p></li>
    /// <li>
    /// <p>Expansion Opportunity: Represents an opportunity to expand the scope of an existing contract or subscription, either by adding new services or increasing the volume of existing services for a current customer.</p></li>
    /// </ul>
    pub fn opportunity_type(&self) -> ::std::option::Option<&crate::types::OpportunityType> {
        self.opportunity_type.as_ref()
    }
    /// <p><code>DateTime</code> when the <code>Opportunity</code> was last modified.</p>
    pub fn last_modified_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_date.as_ref()
    }
    /// <p><code>DateTime</code> when the <code>Opportunity</code> was last created.</p>
    pub fn created_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_date.as_ref()
    }
    /// <p>An object that contains the <code>Opportunity</code>'s lifecycle details.</p>
    pub fn life_cycle(&self) -> ::std::option::Option<&crate::types::LifeCycleSummary> {
        self.life_cycle.as_ref()
    }
    /// <p>An object that contains the <code>Opportunity</code>'s customer details.</p>
    pub fn customer(&self) -> ::std::option::Option<&crate::types::CustomerSummary> {
        self.customer.as_ref()
    }
    /// <p>An object that contains the <code>Opportunity</code>'s project details summary.</p>
    pub fn project(&self) -> ::std::option::Option<&crate::types::ProjectSummary> {
        self.project.as_ref()
    }
}
impl OpportunitySummary {
    /// Creates a new builder-style object to manufacture [`OpportunitySummary`](crate::types::OpportunitySummary).
    pub fn builder() -> crate::types::builders::OpportunitySummaryBuilder {
        crate::types::builders::OpportunitySummaryBuilder::default()
    }
}

/// A builder for [`OpportunitySummary`](crate::types::OpportunitySummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OpportunitySummaryBuilder {
    pub(crate) catalog: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) partner_opportunity_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) opportunity_type: ::std::option::Option<crate::types::OpportunityType>,
    pub(crate) last_modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) life_cycle: ::std::option::Option<crate::types::LifeCycleSummary>,
    pub(crate) customer: ::std::option::Option<crate::types::CustomerSummary>,
    pub(crate) project: ::std::option::Option<crate::types::ProjectSummary>,
}
impl OpportunitySummaryBuilder {
    /// <p>Specifies the catalog associated with the opportunity, either <code>AWS</code> or <code>Sandbox</code>. This indicates the environment in which the opportunity is managed.</p>
    /// This field is required.
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the catalog associated with the opportunity, either <code>AWS</code> or <code>Sandbox</code>. This indicates the environment in which the opportunity is managed.</p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>Specifies the catalog associated with the opportunity, either <code>AWS</code> or <code>Sandbox</code>. This indicates the environment in which the opportunity is managed.</p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog
    }
    /// <p>Read-only, system-generated <code>Opportunity</code> unique identifier.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Read-only, system-generated <code>Opportunity</code> unique identifier.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>Read-only, system-generated <code>Opportunity</code> unique identifier.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The Amazon Resource Name (ARN) for the opportunity. This globally unique identifier can be used for IAM policies and cross-service references.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the opportunity. This globally unique identifier can be used for IAM policies and cross-service references.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the opportunity. This globally unique identifier can be used for IAM policies and cross-service references.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Specifies the <code>Opportunity</code>'s unique identifier in the partner's CRM system. This value is essential to track and reconcile because it's included in the outbound payload sent back to the partner. It allows partners to link an opportunity to their CRM.</p>
    pub fn partner_opportunity_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.partner_opportunity_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the <code>Opportunity</code>'s unique identifier in the partner's CRM system. This value is essential to track and reconcile because it's included in the outbound payload sent back to the partner. It allows partners to link an opportunity to their CRM.</p>
    pub fn set_partner_opportunity_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.partner_opportunity_identifier = input;
        self
    }
    /// <p>Specifies the <code>Opportunity</code>'s unique identifier in the partner's CRM system. This value is essential to track and reconcile because it's included in the outbound payload sent back to the partner. It allows partners to link an opportunity to their CRM.</p>
    pub fn get_partner_opportunity_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.partner_opportunity_identifier
    }
    /// <p>Specifies opportunity type as a renewal, new, or expansion.</p>
    /// <p>Opportunity types:</p>
    /// <ul>
    /// <li>
    /// <p>New Opportunity: Represents a new business opportunity with a potential customer that's not previously engaged with your solutions or services.</p></li>
    /// <li>
    /// <p>Renewal Opportunity: Represents an opportunity to renew an existing contract or subscription with a current customer, ensuring continuity of service.</p></li>
    /// <li>
    /// <p>Expansion Opportunity: Represents an opportunity to expand the scope of an existing contract or subscription, either by adding new services or increasing the volume of existing services for a current customer.</p></li>
    /// </ul>
    pub fn opportunity_type(mut self, input: crate::types::OpportunityType) -> Self {
        self.opportunity_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies opportunity type as a renewal, new, or expansion.</p>
    /// <p>Opportunity types:</p>
    /// <ul>
    /// <li>
    /// <p>New Opportunity: Represents a new business opportunity with a potential customer that's not previously engaged with your solutions or services.</p></li>
    /// <li>
    /// <p>Renewal Opportunity: Represents an opportunity to renew an existing contract or subscription with a current customer, ensuring continuity of service.</p></li>
    /// <li>
    /// <p>Expansion Opportunity: Represents an opportunity to expand the scope of an existing contract or subscription, either by adding new services or increasing the volume of existing services for a current customer.</p></li>
    /// </ul>
    pub fn set_opportunity_type(mut self, input: ::std::option::Option<crate::types::OpportunityType>) -> Self {
        self.opportunity_type = input;
        self
    }
    /// <p>Specifies opportunity type as a renewal, new, or expansion.</p>
    /// <p>Opportunity types:</p>
    /// <ul>
    /// <li>
    /// <p>New Opportunity: Represents a new business opportunity with a potential customer that's not previously engaged with your solutions or services.</p></li>
    /// <li>
    /// <p>Renewal Opportunity: Represents an opportunity to renew an existing contract or subscription with a current customer, ensuring continuity of service.</p></li>
    /// <li>
    /// <p>Expansion Opportunity: Represents an opportunity to expand the scope of an existing contract or subscription, either by adding new services or increasing the volume of existing services for a current customer.</p></li>
    /// </ul>
    pub fn get_opportunity_type(&self) -> &::std::option::Option<crate::types::OpportunityType> {
        &self.opportunity_type
    }
    /// <p><code>DateTime</code> when the <code>Opportunity</code> was last modified.</p>
    pub fn last_modified_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_date = ::std::option::Option::Some(input);
        self
    }
    /// <p><code>DateTime</code> when the <code>Opportunity</code> was last modified.</p>
    pub fn set_last_modified_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p><code>DateTime</code> when the <code>Opportunity</code> was last modified.</p>
    pub fn get_last_modified_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_date
    }
    /// <p><code>DateTime</code> when the <code>Opportunity</code> was last created.</p>
    pub fn created_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_date = ::std::option::Option::Some(input);
        self
    }
    /// <p><code>DateTime</code> when the <code>Opportunity</code> was last created.</p>
    pub fn set_created_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_date = input;
        self
    }
    /// <p><code>DateTime</code> when the <code>Opportunity</code> was last created.</p>
    pub fn get_created_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_date
    }
    /// <p>An object that contains the <code>Opportunity</code>'s lifecycle details.</p>
    pub fn life_cycle(mut self, input: crate::types::LifeCycleSummary) -> Self {
        self.life_cycle = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains the <code>Opportunity</code>'s lifecycle details.</p>
    pub fn set_life_cycle(mut self, input: ::std::option::Option<crate::types::LifeCycleSummary>) -> Self {
        self.life_cycle = input;
        self
    }
    /// <p>An object that contains the <code>Opportunity</code>'s lifecycle details.</p>
    pub fn get_life_cycle(&self) -> &::std::option::Option<crate::types::LifeCycleSummary> {
        &self.life_cycle
    }
    /// <p>An object that contains the <code>Opportunity</code>'s customer details.</p>
    pub fn customer(mut self, input: crate::types::CustomerSummary) -> Self {
        self.customer = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains the <code>Opportunity</code>'s customer details.</p>
    pub fn set_customer(mut self, input: ::std::option::Option<crate::types::CustomerSummary>) -> Self {
        self.customer = input;
        self
    }
    /// <p>An object that contains the <code>Opportunity</code>'s customer details.</p>
    pub fn get_customer(&self) -> &::std::option::Option<crate::types::CustomerSummary> {
        &self.customer
    }
    /// <p>An object that contains the <code>Opportunity</code>'s project details summary.</p>
    pub fn project(mut self, input: crate::types::ProjectSummary) -> Self {
        self.project = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains the <code>Opportunity</code>'s project details summary.</p>
    pub fn set_project(mut self, input: ::std::option::Option<crate::types::ProjectSummary>) -> Self {
        self.project = input;
        self
    }
    /// <p>An object that contains the <code>Opportunity</code>'s project details summary.</p>
    pub fn get_project(&self) -> &::std::option::Option<crate::types::ProjectSummary> {
        &self.project
    }
    /// Consumes the builder and constructs a [`OpportunitySummary`](crate::types::OpportunitySummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`catalog`](crate::types::builders::OpportunitySummaryBuilder::catalog)
    pub fn build(self) -> ::std::result::Result<crate::types::OpportunitySummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OpportunitySummary {
            catalog: self.catalog.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "catalog",
                    "catalog was not specified but it is required when building OpportunitySummary",
                )
            })?,
            id: self.id,
            arn: self.arn,
            partner_opportunity_identifier: self.partner_opportunity_identifier,
            opportunity_type: self.opportunity_type,
            last_modified_date: self.last_modified_date,
            created_date: self.created_date,
            life_cycle: self.life_cycle,
            customer: self.customer,
            project: self.project,
        })
    }
}
