// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the customer associated with the Engagement Invitation, including company information and industry.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EngagementCustomer {
    /// <p>Specifies the industry to which the customer’s company belongs. This field helps categorize the opportunity based on the customer’s business sector.</p>
    pub industry: crate::types::Industry,
    /// <p>Represents the name of the customer’s company associated with the Engagement Invitation. This field is used to identify the customer.</p>
    pub company_name: ::std::string::String,
    /// <p>Provides the website URL of the customer’s company. This field helps partners verify the legitimacy and size of the customer organization.</p>
    pub website_url: ::std::string::String,
    /// <p>Indicates the country in which the customer’s company operates. This field is useful for understanding regional requirements or compliance needs.</p>
    pub country_code: crate::types::CountryCode,
}
impl EngagementCustomer {
    /// <p>Specifies the industry to which the customer’s company belongs. This field helps categorize the opportunity based on the customer’s business sector.</p>
    pub fn industry(&self) -> &crate::types::Industry {
        &self.industry
    }
    /// <p>Represents the name of the customer’s company associated with the Engagement Invitation. This field is used to identify the customer.</p>
    pub fn company_name(&self) -> &str {
        use std::ops::Deref;
        self.company_name.deref()
    }
    /// <p>Provides the website URL of the customer’s company. This field helps partners verify the legitimacy and size of the customer organization.</p>
    pub fn website_url(&self) -> &str {
        use std::ops::Deref;
        self.website_url.deref()
    }
    /// <p>Indicates the country in which the customer’s company operates. This field is useful for understanding regional requirements or compliance needs.</p>
    pub fn country_code(&self) -> &crate::types::CountryCode {
        &self.country_code
    }
}
impl ::std::fmt::Debug for EngagementCustomer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EngagementCustomer");
        formatter.field("industry", &self.industry);
        formatter.field("company_name", &"*** Sensitive Data Redacted ***");
        formatter.field("website_url", &"*** Sensitive Data Redacted ***");
        formatter.field("country_code", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl EngagementCustomer {
    /// Creates a new builder-style object to manufacture [`EngagementCustomer`](crate::types::EngagementCustomer).
    pub fn builder() -> crate::types::builders::EngagementCustomerBuilder {
        crate::types::builders::EngagementCustomerBuilder::default()
    }
}

/// A builder for [`EngagementCustomer`](crate::types::EngagementCustomer).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct EngagementCustomerBuilder {
    pub(crate) industry: ::std::option::Option<crate::types::Industry>,
    pub(crate) company_name: ::std::option::Option<::std::string::String>,
    pub(crate) website_url: ::std::option::Option<::std::string::String>,
    pub(crate) country_code: ::std::option::Option<crate::types::CountryCode>,
}
impl EngagementCustomerBuilder {
    /// <p>Specifies the industry to which the customer’s company belongs. This field helps categorize the opportunity based on the customer’s business sector.</p>
    /// This field is required.
    pub fn industry(mut self, input: crate::types::Industry) -> Self {
        self.industry = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the industry to which the customer’s company belongs. This field helps categorize the opportunity based on the customer’s business sector.</p>
    pub fn set_industry(mut self, input: ::std::option::Option<crate::types::Industry>) -> Self {
        self.industry = input;
        self
    }
    /// <p>Specifies the industry to which the customer’s company belongs. This field helps categorize the opportunity based on the customer’s business sector.</p>
    pub fn get_industry(&self) -> &::std::option::Option<crate::types::Industry> {
        &self.industry
    }
    /// <p>Represents the name of the customer’s company associated with the Engagement Invitation. This field is used to identify the customer.</p>
    /// This field is required.
    pub fn company_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.company_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Represents the name of the customer’s company associated with the Engagement Invitation. This field is used to identify the customer.</p>
    pub fn set_company_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.company_name = input;
        self
    }
    /// <p>Represents the name of the customer’s company associated with the Engagement Invitation. This field is used to identify the customer.</p>
    pub fn get_company_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.company_name
    }
    /// <p>Provides the website URL of the customer’s company. This field helps partners verify the legitimacy and size of the customer organization.</p>
    /// This field is required.
    pub fn website_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.website_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provides the website URL of the customer’s company. This field helps partners verify the legitimacy and size of the customer organization.</p>
    pub fn set_website_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.website_url = input;
        self
    }
    /// <p>Provides the website URL of the customer’s company. This field helps partners verify the legitimacy and size of the customer organization.</p>
    pub fn get_website_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.website_url
    }
    /// <p>Indicates the country in which the customer’s company operates. This field is useful for understanding regional requirements or compliance needs.</p>
    /// This field is required.
    pub fn country_code(mut self, input: crate::types::CountryCode) -> Self {
        self.country_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the country in which the customer’s company operates. This field is useful for understanding regional requirements or compliance needs.</p>
    pub fn set_country_code(mut self, input: ::std::option::Option<crate::types::CountryCode>) -> Self {
        self.country_code = input;
        self
    }
    /// <p>Indicates the country in which the customer’s company operates. This field is useful for understanding regional requirements or compliance needs.</p>
    pub fn get_country_code(&self) -> &::std::option::Option<crate::types::CountryCode> {
        &self.country_code
    }
    /// Consumes the builder and constructs a [`EngagementCustomer`](crate::types::EngagementCustomer).
    /// This method will fail if any of the following fields are not set:
    /// - [`industry`](crate::types::builders::EngagementCustomerBuilder::industry)
    /// - [`company_name`](crate::types::builders::EngagementCustomerBuilder::company_name)
    /// - [`website_url`](crate::types::builders::EngagementCustomerBuilder::website_url)
    /// - [`country_code`](crate::types::builders::EngagementCustomerBuilder::country_code)
    pub fn build(self) -> ::std::result::Result<crate::types::EngagementCustomer, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EngagementCustomer {
            industry: self.industry.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "industry",
                    "industry was not specified but it is required when building EngagementCustomer",
                )
            })?,
            company_name: self.company_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "company_name",
                    "company_name was not specified but it is required when building EngagementCustomer",
                )
            })?,
            website_url: self.website_url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "website_url",
                    "website_url was not specified but it is required when building EngagementCustomer",
                )
            })?,
            country_code: self.country_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "country_code",
                    "country_code was not specified but it is required when building EngagementCustomer",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for EngagementCustomerBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EngagementCustomerBuilder");
        formatter.field("industry", &self.industry);
        formatter.field("company_name", &"*** Sensitive Data Redacted ***");
        formatter.field("website_url", &"*** Sensitive Data Redacted ***");
        formatter.field("country_code", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
