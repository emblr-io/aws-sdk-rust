// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the contact details of the individual assigned to manage the opportunity within the partner organization. This helps to ensure that there is a point of contact for the opportunity's progress.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AssigneeContact {
    /// <p>Provides the email address of the assignee. This email is used for communications and notifications related to the opportunity.</p>
    pub email: ::std::string::String,
    /// <p>Specifies the first name of the assignee managing the opportunity. The system automatically retrieves this value from the user profile by referencing the associated email address.</p>
    pub first_name: ::std::string::String,
    /// <p>Specifies the last name of the assignee managing the opportunity. The system automatically retrieves this value from the user profile by referencing the associated email address.</p>
    pub last_name: ::std::string::String,
    /// <p>Specifies the business title of the assignee managing the opportunity. This helps clarify the individual's role and responsibilities within the organization. Use the value <code>PartnerAccountManager</code> to update details of the opportunity owner.</p>
    pub business_title: ::std::string::String,
}
impl AssigneeContact {
    /// <p>Provides the email address of the assignee. This email is used for communications and notifications related to the opportunity.</p>
    pub fn email(&self) -> &str {
        use std::ops::Deref;
        self.email.deref()
    }
    /// <p>Specifies the first name of the assignee managing the opportunity. The system automatically retrieves this value from the user profile by referencing the associated email address.</p>
    pub fn first_name(&self) -> &str {
        use std::ops::Deref;
        self.first_name.deref()
    }
    /// <p>Specifies the last name of the assignee managing the opportunity. The system automatically retrieves this value from the user profile by referencing the associated email address.</p>
    pub fn last_name(&self) -> &str {
        use std::ops::Deref;
        self.last_name.deref()
    }
    /// <p>Specifies the business title of the assignee managing the opportunity. This helps clarify the individual's role and responsibilities within the organization. Use the value <code>PartnerAccountManager</code> to update details of the opportunity owner.</p>
    pub fn business_title(&self) -> &str {
        use std::ops::Deref;
        self.business_title.deref()
    }
}
impl ::std::fmt::Debug for AssigneeContact {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AssigneeContact");
        formatter.field("email", &"*** Sensitive Data Redacted ***");
        formatter.field("first_name", &"*** Sensitive Data Redacted ***");
        formatter.field("last_name", &"*** Sensitive Data Redacted ***");
        formatter.field("business_title", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AssigneeContact {
    /// Creates a new builder-style object to manufacture [`AssigneeContact`](crate::types::AssigneeContact).
    pub fn builder() -> crate::types::builders::AssigneeContactBuilder {
        crate::types::builders::AssigneeContactBuilder::default()
    }
}

/// A builder for [`AssigneeContact`](crate::types::AssigneeContact).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AssigneeContactBuilder {
    pub(crate) email: ::std::option::Option<::std::string::String>,
    pub(crate) first_name: ::std::option::Option<::std::string::String>,
    pub(crate) last_name: ::std::option::Option<::std::string::String>,
    pub(crate) business_title: ::std::option::Option<::std::string::String>,
}
impl AssigneeContactBuilder {
    /// <p>Provides the email address of the assignee. This email is used for communications and notifications related to the opportunity.</p>
    /// This field is required.
    pub fn email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provides the email address of the assignee. This email is used for communications and notifications related to the opportunity.</p>
    pub fn set_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email = input;
        self
    }
    /// <p>Provides the email address of the assignee. This email is used for communications and notifications related to the opportunity.</p>
    pub fn get_email(&self) -> &::std::option::Option<::std::string::String> {
        &self.email
    }
    /// <p>Specifies the first name of the assignee managing the opportunity. The system automatically retrieves this value from the user profile by referencing the associated email address.</p>
    /// This field is required.
    pub fn first_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.first_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the first name of the assignee managing the opportunity. The system automatically retrieves this value from the user profile by referencing the associated email address.</p>
    pub fn set_first_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.first_name = input;
        self
    }
    /// <p>Specifies the first name of the assignee managing the opportunity. The system automatically retrieves this value from the user profile by referencing the associated email address.</p>
    pub fn get_first_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.first_name
    }
    /// <p>Specifies the last name of the assignee managing the opportunity. The system automatically retrieves this value from the user profile by referencing the associated email address.</p>
    /// This field is required.
    pub fn last_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the last name of the assignee managing the opportunity. The system automatically retrieves this value from the user profile by referencing the associated email address.</p>
    pub fn set_last_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_name = input;
        self
    }
    /// <p>Specifies the last name of the assignee managing the opportunity. The system automatically retrieves this value from the user profile by referencing the associated email address.</p>
    pub fn get_last_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_name
    }
    /// <p>Specifies the business title of the assignee managing the opportunity. This helps clarify the individual's role and responsibilities within the organization. Use the value <code>PartnerAccountManager</code> to update details of the opportunity owner.</p>
    /// This field is required.
    pub fn business_title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.business_title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the business title of the assignee managing the opportunity. This helps clarify the individual's role and responsibilities within the organization. Use the value <code>PartnerAccountManager</code> to update details of the opportunity owner.</p>
    pub fn set_business_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.business_title = input;
        self
    }
    /// <p>Specifies the business title of the assignee managing the opportunity. This helps clarify the individual's role and responsibilities within the organization. Use the value <code>PartnerAccountManager</code> to update details of the opportunity owner.</p>
    pub fn get_business_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.business_title
    }
    /// Consumes the builder and constructs a [`AssigneeContact`](crate::types::AssigneeContact).
    /// This method will fail if any of the following fields are not set:
    /// - [`email`](crate::types::builders::AssigneeContactBuilder::email)
    /// - [`first_name`](crate::types::builders::AssigneeContactBuilder::first_name)
    /// - [`last_name`](crate::types::builders::AssigneeContactBuilder::last_name)
    /// - [`business_title`](crate::types::builders::AssigneeContactBuilder::business_title)
    pub fn build(self) -> ::std::result::Result<crate::types::AssigneeContact, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AssigneeContact {
            email: self.email.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "email",
                    "email was not specified but it is required when building AssigneeContact",
                )
            })?,
            first_name: self.first_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "first_name",
                    "first_name was not specified but it is required when building AssigneeContact",
                )
            })?,
            last_name: self.last_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_name",
                    "last_name was not specified but it is required when building AssigneeContact",
                )
            })?,
            business_title: self.business_title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "business_title",
                    "business_title was not specified but it is required when building AssigneeContact",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for AssigneeContactBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AssigneeContactBuilder");
        formatter.field("email", &"*** Sensitive Data Redacted ***");
        formatter.field("first_name", &"*** Sensitive Data Redacted ***");
        formatter.field("last_name", &"*** Sensitive Data Redacted ***");
        formatter.field("business_title", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
