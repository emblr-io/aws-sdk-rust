// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains a <code>Project</code> object's subset of fields.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProjectSummary {
    /// <p>Specifies your solution or service's deployment or consumption model in the <code>Opportunity</code>'s context. You can select multiple options.</p>
    /// <p>Options' descriptions from the <code>Delivery Model</code> field are:</p>
    /// <ul>
    /// <li>
    /// <p>SaaS or PaaS: Your Amazon Web Services based solution deployed as SaaS or PaaS in your Amazon Web Services environment.</p></li>
    /// <li>
    /// <p>BYOL or AMI: Your Amazon Web Services based solution deployed as BYOL or AMI in the end customer's Amazon Web Services environment.</p></li>
    /// <li>
    /// <p>Managed Services: The end customer's Amazon Web Services business management (For example: Consulting, design, implementation, billing support, cost optimization, technical support).</p></li>
    /// <li>
    /// <p>Professional Services: Offerings to help enterprise end customers achieve specific business outcomes for enterprise cloud adoption (For example: Advisory or transformation planning).</p></li>
    /// <li>
    /// <p>Resell: Amazon Web Services accounts and billing management for your customers.</p></li>
    /// <li>
    /// <p>Other: Delivery model not described above.</p></li>
    /// </ul>
    pub delivery_models: ::std::option::Option<::std::vec::Vec<crate::types::DeliveryModel>>,
    /// <p>Provides a summary of the expected customer spend for the project, offering a high-level view of the potential financial impact.</p>
    pub expected_customer_spend: ::std::option::Option<::std::vec::Vec<crate::types::ExpectedCustomerSpend>>,
}
impl ProjectSummary {
    /// <p>Specifies your solution or service's deployment or consumption model in the <code>Opportunity</code>'s context. You can select multiple options.</p>
    /// <p>Options' descriptions from the <code>Delivery Model</code> field are:</p>
    /// <ul>
    /// <li>
    /// <p>SaaS or PaaS: Your Amazon Web Services based solution deployed as SaaS or PaaS in your Amazon Web Services environment.</p></li>
    /// <li>
    /// <p>BYOL or AMI: Your Amazon Web Services based solution deployed as BYOL or AMI in the end customer's Amazon Web Services environment.</p></li>
    /// <li>
    /// <p>Managed Services: The end customer's Amazon Web Services business management (For example: Consulting, design, implementation, billing support, cost optimization, technical support).</p></li>
    /// <li>
    /// <p>Professional Services: Offerings to help enterprise end customers achieve specific business outcomes for enterprise cloud adoption (For example: Advisory or transformation planning).</p></li>
    /// <li>
    /// <p>Resell: Amazon Web Services accounts and billing management for your customers.</p></li>
    /// <li>
    /// <p>Other: Delivery model not described above.</p></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.delivery_models.is_none()`.
    pub fn delivery_models(&self) -> &[crate::types::DeliveryModel] {
        self.delivery_models.as_deref().unwrap_or_default()
    }
    /// <p>Provides a summary of the expected customer spend for the project, offering a high-level view of the potential financial impact.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.expected_customer_spend.is_none()`.
    pub fn expected_customer_spend(&self) -> &[crate::types::ExpectedCustomerSpend] {
        self.expected_customer_spend.as_deref().unwrap_or_default()
    }
}
impl ProjectSummary {
    /// Creates a new builder-style object to manufacture [`ProjectSummary`](crate::types::ProjectSummary).
    pub fn builder() -> crate::types::builders::ProjectSummaryBuilder {
        crate::types::builders::ProjectSummaryBuilder::default()
    }
}

/// A builder for [`ProjectSummary`](crate::types::ProjectSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProjectSummaryBuilder {
    pub(crate) delivery_models: ::std::option::Option<::std::vec::Vec<crate::types::DeliveryModel>>,
    pub(crate) expected_customer_spend: ::std::option::Option<::std::vec::Vec<crate::types::ExpectedCustomerSpend>>,
}
impl ProjectSummaryBuilder {
    /// Appends an item to `delivery_models`.
    ///
    /// To override the contents of this collection use [`set_delivery_models`](Self::set_delivery_models).
    ///
    /// <p>Specifies your solution or service's deployment or consumption model in the <code>Opportunity</code>'s context. You can select multiple options.</p>
    /// <p>Options' descriptions from the <code>Delivery Model</code> field are:</p>
    /// <ul>
    /// <li>
    /// <p>SaaS or PaaS: Your Amazon Web Services based solution deployed as SaaS or PaaS in your Amazon Web Services environment.</p></li>
    /// <li>
    /// <p>BYOL or AMI: Your Amazon Web Services based solution deployed as BYOL or AMI in the end customer's Amazon Web Services environment.</p></li>
    /// <li>
    /// <p>Managed Services: The end customer's Amazon Web Services business management (For example: Consulting, design, implementation, billing support, cost optimization, technical support).</p></li>
    /// <li>
    /// <p>Professional Services: Offerings to help enterprise end customers achieve specific business outcomes for enterprise cloud adoption (For example: Advisory or transformation planning).</p></li>
    /// <li>
    /// <p>Resell: Amazon Web Services accounts and billing management for your customers.</p></li>
    /// <li>
    /// <p>Other: Delivery model not described above.</p></li>
    /// </ul>
    pub fn delivery_models(mut self, input: crate::types::DeliveryModel) -> Self {
        let mut v = self.delivery_models.unwrap_or_default();
        v.push(input);
        self.delivery_models = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies your solution or service's deployment or consumption model in the <code>Opportunity</code>'s context. You can select multiple options.</p>
    /// <p>Options' descriptions from the <code>Delivery Model</code> field are:</p>
    /// <ul>
    /// <li>
    /// <p>SaaS or PaaS: Your Amazon Web Services based solution deployed as SaaS or PaaS in your Amazon Web Services environment.</p></li>
    /// <li>
    /// <p>BYOL or AMI: Your Amazon Web Services based solution deployed as BYOL or AMI in the end customer's Amazon Web Services environment.</p></li>
    /// <li>
    /// <p>Managed Services: The end customer's Amazon Web Services business management (For example: Consulting, design, implementation, billing support, cost optimization, technical support).</p></li>
    /// <li>
    /// <p>Professional Services: Offerings to help enterprise end customers achieve specific business outcomes for enterprise cloud adoption (For example: Advisory or transformation planning).</p></li>
    /// <li>
    /// <p>Resell: Amazon Web Services accounts and billing management for your customers.</p></li>
    /// <li>
    /// <p>Other: Delivery model not described above.</p></li>
    /// </ul>
    pub fn set_delivery_models(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DeliveryModel>>) -> Self {
        self.delivery_models = input;
        self
    }
    /// <p>Specifies your solution or service's deployment or consumption model in the <code>Opportunity</code>'s context. You can select multiple options.</p>
    /// <p>Options' descriptions from the <code>Delivery Model</code> field are:</p>
    /// <ul>
    /// <li>
    /// <p>SaaS or PaaS: Your Amazon Web Services based solution deployed as SaaS or PaaS in your Amazon Web Services environment.</p></li>
    /// <li>
    /// <p>BYOL or AMI: Your Amazon Web Services based solution deployed as BYOL or AMI in the end customer's Amazon Web Services environment.</p></li>
    /// <li>
    /// <p>Managed Services: The end customer's Amazon Web Services business management (For example: Consulting, design, implementation, billing support, cost optimization, technical support).</p></li>
    /// <li>
    /// <p>Professional Services: Offerings to help enterprise end customers achieve specific business outcomes for enterprise cloud adoption (For example: Advisory or transformation planning).</p></li>
    /// <li>
    /// <p>Resell: Amazon Web Services accounts and billing management for your customers.</p></li>
    /// <li>
    /// <p>Other: Delivery model not described above.</p></li>
    /// </ul>
    pub fn get_delivery_models(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DeliveryModel>> {
        &self.delivery_models
    }
    /// Appends an item to `expected_customer_spend`.
    ///
    /// To override the contents of this collection use [`set_expected_customer_spend`](Self::set_expected_customer_spend).
    ///
    /// <p>Provides a summary of the expected customer spend for the project, offering a high-level view of the potential financial impact.</p>
    pub fn expected_customer_spend(mut self, input: crate::types::ExpectedCustomerSpend) -> Self {
        let mut v = self.expected_customer_spend.unwrap_or_default();
        v.push(input);
        self.expected_customer_spend = ::std::option::Option::Some(v);
        self
    }
    /// <p>Provides a summary of the expected customer spend for the project, offering a high-level view of the potential financial impact.</p>
    pub fn set_expected_customer_spend(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ExpectedCustomerSpend>>) -> Self {
        self.expected_customer_spend = input;
        self
    }
    /// <p>Provides a summary of the expected customer spend for the project, offering a high-level view of the potential financial impact.</p>
    pub fn get_expected_customer_spend(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ExpectedCustomerSpend>> {
        &self.expected_customer_spend
    }
    /// Consumes the builder and constructs a [`ProjectSummary`](crate::types::ProjectSummary).
    pub fn build(self) -> crate::types::ProjectSummary {
        crate::types::ProjectSummary {
            delivery_models: self.delivery_models,
            expected_customer_spend: self.expected_customer_spend,
        }
    }
}
