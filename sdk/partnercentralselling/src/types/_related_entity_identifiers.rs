// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This field provides the associations' information for other entities with the opportunity. These entities include identifiers for <code>AWSProducts</code>, <code>Partner Solutions</code>, and <code>AWSMarketplaceOffers</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RelatedEntityIdentifiers {
    /// <p>Takes one value per opportunity. Each value is an Amazon Resource Name (ARN), in this format: <code>"offers": \["arn:aws:aws-marketplace:us-east-1:999999999999:AWSMarketplace/Offer/offer-sampleOffer32"\]</code>.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/API_ListEntities.html">ListEntities</a> action in the Marketplace Catalog APIs for a list of offers in the associated Marketplace seller account.</p>
    pub aws_marketplace_offers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Enables partner solutions or offerings' association with an opportunity. To associate a solution, provide the solution's unique identifier, which you can obtain with the <code>ListSolutions</code> operation.</p>
    /// <p>If the specific solution identifier is not available, you can use the value <code>Other</code> and provide details about the solution in the <code>otherSolutionOffered</code> field. But when the opportunity reaches the <code>Committed</code> stage or beyond, the <code>Other</code> value cannot be used, and a valid solution identifier must be provided.</p>
    /// <p>By associating the relevant solutions with the opportunity, you can communicate the offerings that are being considered or implemented to address the customer's business problem.</p>
    pub solutions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Enables the association of specific Amazon Web Services products with the <code>Opportunity</code>. Partners can indicate the relevant Amazon Web Services products for the <code>Opportunity</code>'s solution and align with the customer's needs. Returns multiple values separated by commas. For example, <code>"AWSProducts" : \["AmazonRedshift", "AWSAppFabric", "AWSCleanRooms"\]</code>.</p>
    /// <p>Use the file with the list of Amazon Web Services products hosted on GitHub: <a href="https://github.com/aws-samples/partner-crm-integration-samples/blob/main/resources/aws_products.json"> Amazon Web Services products</a>.</p>
    pub aws_products: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RelatedEntityIdentifiers {
    /// <p>Takes one value per opportunity. Each value is an Amazon Resource Name (ARN), in this format: <code>"offers": \["arn:aws:aws-marketplace:us-east-1:999999999999:AWSMarketplace/Offer/offer-sampleOffer32"\]</code>.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/API_ListEntities.html">ListEntities</a> action in the Marketplace Catalog APIs for a list of offers in the associated Marketplace seller account.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.aws_marketplace_offers.is_none()`.
    pub fn aws_marketplace_offers(&self) -> &[::std::string::String] {
        self.aws_marketplace_offers.as_deref().unwrap_or_default()
    }
    /// <p>Enables partner solutions or offerings' association with an opportunity. To associate a solution, provide the solution's unique identifier, which you can obtain with the <code>ListSolutions</code> operation.</p>
    /// <p>If the specific solution identifier is not available, you can use the value <code>Other</code> and provide details about the solution in the <code>otherSolutionOffered</code> field. But when the opportunity reaches the <code>Committed</code> stage or beyond, the <code>Other</code> value cannot be used, and a valid solution identifier must be provided.</p>
    /// <p>By associating the relevant solutions with the opportunity, you can communicate the offerings that are being considered or implemented to address the customer's business problem.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.solutions.is_none()`.
    pub fn solutions(&self) -> &[::std::string::String] {
        self.solutions.as_deref().unwrap_or_default()
    }
    /// <p>Enables the association of specific Amazon Web Services products with the <code>Opportunity</code>. Partners can indicate the relevant Amazon Web Services products for the <code>Opportunity</code>'s solution and align with the customer's needs. Returns multiple values separated by commas. For example, <code>"AWSProducts" : \["AmazonRedshift", "AWSAppFabric", "AWSCleanRooms"\]</code>.</p>
    /// <p>Use the file with the list of Amazon Web Services products hosted on GitHub: <a href="https://github.com/aws-samples/partner-crm-integration-samples/blob/main/resources/aws_products.json"> Amazon Web Services products</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.aws_products.is_none()`.
    pub fn aws_products(&self) -> &[::std::string::String] {
        self.aws_products.as_deref().unwrap_or_default()
    }
}
impl RelatedEntityIdentifiers {
    /// Creates a new builder-style object to manufacture [`RelatedEntityIdentifiers`](crate::types::RelatedEntityIdentifiers).
    pub fn builder() -> crate::types::builders::RelatedEntityIdentifiersBuilder {
        crate::types::builders::RelatedEntityIdentifiersBuilder::default()
    }
}

/// A builder for [`RelatedEntityIdentifiers`](crate::types::RelatedEntityIdentifiers).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RelatedEntityIdentifiersBuilder {
    pub(crate) aws_marketplace_offers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) solutions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) aws_products: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RelatedEntityIdentifiersBuilder {
    /// Appends an item to `aws_marketplace_offers`.
    ///
    /// To override the contents of this collection use [`set_aws_marketplace_offers`](Self::set_aws_marketplace_offers).
    ///
    /// <p>Takes one value per opportunity. Each value is an Amazon Resource Name (ARN), in this format: <code>"offers": \["arn:aws:aws-marketplace:us-east-1:999999999999:AWSMarketplace/Offer/offer-sampleOffer32"\]</code>.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/API_ListEntities.html">ListEntities</a> action in the Marketplace Catalog APIs for a list of offers in the associated Marketplace seller account.</p>
    pub fn aws_marketplace_offers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.aws_marketplace_offers.unwrap_or_default();
        v.push(input.into());
        self.aws_marketplace_offers = ::std::option::Option::Some(v);
        self
    }
    /// <p>Takes one value per opportunity. Each value is an Amazon Resource Name (ARN), in this format: <code>"offers": \["arn:aws:aws-marketplace:us-east-1:999999999999:AWSMarketplace/Offer/offer-sampleOffer32"\]</code>.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/API_ListEntities.html">ListEntities</a> action in the Marketplace Catalog APIs for a list of offers in the associated Marketplace seller account.</p>
    pub fn set_aws_marketplace_offers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.aws_marketplace_offers = input;
        self
    }
    /// <p>Takes one value per opportunity. Each value is an Amazon Resource Name (ARN), in this format: <code>"offers": \["arn:aws:aws-marketplace:us-east-1:999999999999:AWSMarketplace/Offer/offer-sampleOffer32"\]</code>.</p>
    /// <p>Use the <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/API_ListEntities.html">ListEntities</a> action in the Marketplace Catalog APIs for a list of offers in the associated Marketplace seller account.</p>
    pub fn get_aws_marketplace_offers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.aws_marketplace_offers
    }
    /// Appends an item to `solutions`.
    ///
    /// To override the contents of this collection use [`set_solutions`](Self::set_solutions).
    ///
    /// <p>Enables partner solutions or offerings' association with an opportunity. To associate a solution, provide the solution's unique identifier, which you can obtain with the <code>ListSolutions</code> operation.</p>
    /// <p>If the specific solution identifier is not available, you can use the value <code>Other</code> and provide details about the solution in the <code>otherSolutionOffered</code> field. But when the opportunity reaches the <code>Committed</code> stage or beyond, the <code>Other</code> value cannot be used, and a valid solution identifier must be provided.</p>
    /// <p>By associating the relevant solutions with the opportunity, you can communicate the offerings that are being considered or implemented to address the customer's business problem.</p>
    pub fn solutions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.solutions.unwrap_or_default();
        v.push(input.into());
        self.solutions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Enables partner solutions or offerings' association with an opportunity. To associate a solution, provide the solution's unique identifier, which you can obtain with the <code>ListSolutions</code> operation.</p>
    /// <p>If the specific solution identifier is not available, you can use the value <code>Other</code> and provide details about the solution in the <code>otherSolutionOffered</code> field. But when the opportunity reaches the <code>Committed</code> stage or beyond, the <code>Other</code> value cannot be used, and a valid solution identifier must be provided.</p>
    /// <p>By associating the relevant solutions with the opportunity, you can communicate the offerings that are being considered or implemented to address the customer's business problem.</p>
    pub fn set_solutions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.solutions = input;
        self
    }
    /// <p>Enables partner solutions or offerings' association with an opportunity. To associate a solution, provide the solution's unique identifier, which you can obtain with the <code>ListSolutions</code> operation.</p>
    /// <p>If the specific solution identifier is not available, you can use the value <code>Other</code> and provide details about the solution in the <code>otherSolutionOffered</code> field. But when the opportunity reaches the <code>Committed</code> stage or beyond, the <code>Other</code> value cannot be used, and a valid solution identifier must be provided.</p>
    /// <p>By associating the relevant solutions with the opportunity, you can communicate the offerings that are being considered or implemented to address the customer's business problem.</p>
    pub fn get_solutions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.solutions
    }
    /// Appends an item to `aws_products`.
    ///
    /// To override the contents of this collection use [`set_aws_products`](Self::set_aws_products).
    ///
    /// <p>Enables the association of specific Amazon Web Services products with the <code>Opportunity</code>. Partners can indicate the relevant Amazon Web Services products for the <code>Opportunity</code>'s solution and align with the customer's needs. Returns multiple values separated by commas. For example, <code>"AWSProducts" : \["AmazonRedshift", "AWSAppFabric", "AWSCleanRooms"\]</code>.</p>
    /// <p>Use the file with the list of Amazon Web Services products hosted on GitHub: <a href="https://github.com/aws-samples/partner-crm-integration-samples/blob/main/resources/aws_products.json"> Amazon Web Services products</a>.</p>
    pub fn aws_products(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.aws_products.unwrap_or_default();
        v.push(input.into());
        self.aws_products = ::std::option::Option::Some(v);
        self
    }
    /// <p>Enables the association of specific Amazon Web Services products with the <code>Opportunity</code>. Partners can indicate the relevant Amazon Web Services products for the <code>Opportunity</code>'s solution and align with the customer's needs. Returns multiple values separated by commas. For example, <code>"AWSProducts" : \["AmazonRedshift", "AWSAppFabric", "AWSCleanRooms"\]</code>.</p>
    /// <p>Use the file with the list of Amazon Web Services products hosted on GitHub: <a href="https://github.com/aws-samples/partner-crm-integration-samples/blob/main/resources/aws_products.json"> Amazon Web Services products</a>.</p>
    pub fn set_aws_products(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.aws_products = input;
        self
    }
    /// <p>Enables the association of specific Amazon Web Services products with the <code>Opportunity</code>. Partners can indicate the relevant Amazon Web Services products for the <code>Opportunity</code>'s solution and align with the customer's needs. Returns multiple values separated by commas. For example, <code>"AWSProducts" : \["AmazonRedshift", "AWSAppFabric", "AWSCleanRooms"\]</code>.</p>
    /// <p>Use the file with the list of Amazon Web Services products hosted on GitHub: <a href="https://github.com/aws-samples/partner-crm-integration-samples/blob/main/resources/aws_products.json"> Amazon Web Services products</a>.</p>
    pub fn get_aws_products(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.aws_products
    }
    /// Consumes the builder and constructs a [`RelatedEntityIdentifiers`](crate::types::RelatedEntityIdentifiers).
    pub fn build(self) -> crate::types::RelatedEntityIdentifiers {
        crate::types::RelatedEntityIdentifiers {
            aws_marketplace_offers: self.aws_marketplace_offers,
            solutions: self.solutions,
            aws_products: self.aws_products,
        }
    }
}
