// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Tracks the lifecycle of the AWS opportunity, including stages such as qualification, validation, and closure. This field helps partners understand the current status and progression of the opportunity.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AwsOpportunityLifeCycle {
    /// <p>Indicates the expected date by which the opportunity is projected to close. This field helps in planning resources and timelines for both the partner and AWS.</p>
    pub target_close_date: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the reason why an opportunity was marked as <code>Closed Lost</code>. This helps in understanding the context behind the lost opportunity and aids in refining future strategies.</p>
    pub closed_lost_reason: ::std::option::Option<crate::types::AwsClosedLostReason>,
    /// <p>Represents the current stage of the opportunity in its lifecycle, such as <code>Qualification</code>, <code>Validation</code>, or <code>Closed Won</code>. This helps in understanding the opportunity's progress.</p>
    pub stage: ::std::option::Option<crate::types::AwsOpportunityStage>,
    /// <p>Specifies the immediate next steps required to progress the opportunity. These steps are based on AWS guidance and the current stage of the opportunity.</p>
    pub next_steps: ::std::option::Option<::std::string::String>,
    /// <p>Provides a historical log of previous next steps that were taken to move the opportunity forward. This helps in tracking the decision-making process and identifying any delays or obstacles encountered.</p>
    pub next_steps_history: ::std::option::Option<::std::vec::Vec<crate::types::ProfileNextStepsHistory>>,
}
impl AwsOpportunityLifeCycle {
    /// <p>Indicates the expected date by which the opportunity is projected to close. This field helps in planning resources and timelines for both the partner and AWS.</p>
    pub fn target_close_date(&self) -> ::std::option::Option<&str> {
        self.target_close_date.as_deref()
    }
    /// <p>Indicates the reason why an opportunity was marked as <code>Closed Lost</code>. This helps in understanding the context behind the lost opportunity and aids in refining future strategies.</p>
    pub fn closed_lost_reason(&self) -> ::std::option::Option<&crate::types::AwsClosedLostReason> {
        self.closed_lost_reason.as_ref()
    }
    /// <p>Represents the current stage of the opportunity in its lifecycle, such as <code>Qualification</code>, <code>Validation</code>, or <code>Closed Won</code>. This helps in understanding the opportunity's progress.</p>
    pub fn stage(&self) -> ::std::option::Option<&crate::types::AwsOpportunityStage> {
        self.stage.as_ref()
    }
    /// <p>Specifies the immediate next steps required to progress the opportunity. These steps are based on AWS guidance and the current stage of the opportunity.</p>
    pub fn next_steps(&self) -> ::std::option::Option<&str> {
        self.next_steps.as_deref()
    }
    /// <p>Provides a historical log of previous next steps that were taken to move the opportunity forward. This helps in tracking the decision-making process and identifying any delays or obstacles encountered.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.next_steps_history.is_none()`.
    pub fn next_steps_history(&self) -> &[crate::types::ProfileNextStepsHistory] {
        self.next_steps_history.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for AwsOpportunityLifeCycle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AwsOpportunityLifeCycle");
        formatter.field("target_close_date", &self.target_close_date);
        formatter.field("closed_lost_reason", &self.closed_lost_reason);
        formatter.field("stage", &self.stage);
        formatter.field("next_steps", &"*** Sensitive Data Redacted ***");
        formatter.field("next_steps_history", &self.next_steps_history);
        formatter.finish()
    }
}
impl AwsOpportunityLifeCycle {
    /// Creates a new builder-style object to manufacture [`AwsOpportunityLifeCycle`](crate::types::AwsOpportunityLifeCycle).
    pub fn builder() -> crate::types::builders::AwsOpportunityLifeCycleBuilder {
        crate::types::builders::AwsOpportunityLifeCycleBuilder::default()
    }
}

/// A builder for [`AwsOpportunityLifeCycle`](crate::types::AwsOpportunityLifeCycle).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AwsOpportunityLifeCycleBuilder {
    pub(crate) target_close_date: ::std::option::Option<::std::string::String>,
    pub(crate) closed_lost_reason: ::std::option::Option<crate::types::AwsClosedLostReason>,
    pub(crate) stage: ::std::option::Option<crate::types::AwsOpportunityStage>,
    pub(crate) next_steps: ::std::option::Option<::std::string::String>,
    pub(crate) next_steps_history: ::std::option::Option<::std::vec::Vec<crate::types::ProfileNextStepsHistory>>,
}
impl AwsOpportunityLifeCycleBuilder {
    /// <p>Indicates the expected date by which the opportunity is projected to close. This field helps in planning resources and timelines for both the partner and AWS.</p>
    pub fn target_close_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_close_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates the expected date by which the opportunity is projected to close. This field helps in planning resources and timelines for both the partner and AWS.</p>
    pub fn set_target_close_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_close_date = input;
        self
    }
    /// <p>Indicates the expected date by which the opportunity is projected to close. This field helps in planning resources and timelines for both the partner and AWS.</p>
    pub fn get_target_close_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_close_date
    }
    /// <p>Indicates the reason why an opportunity was marked as <code>Closed Lost</code>. This helps in understanding the context behind the lost opportunity and aids in refining future strategies.</p>
    pub fn closed_lost_reason(mut self, input: crate::types::AwsClosedLostReason) -> Self {
        self.closed_lost_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the reason why an opportunity was marked as <code>Closed Lost</code>. This helps in understanding the context behind the lost opportunity and aids in refining future strategies.</p>
    pub fn set_closed_lost_reason(mut self, input: ::std::option::Option<crate::types::AwsClosedLostReason>) -> Self {
        self.closed_lost_reason = input;
        self
    }
    /// <p>Indicates the reason why an opportunity was marked as <code>Closed Lost</code>. This helps in understanding the context behind the lost opportunity and aids in refining future strategies.</p>
    pub fn get_closed_lost_reason(&self) -> &::std::option::Option<crate::types::AwsClosedLostReason> {
        &self.closed_lost_reason
    }
    /// <p>Represents the current stage of the opportunity in its lifecycle, such as <code>Qualification</code>, <code>Validation</code>, or <code>Closed Won</code>. This helps in understanding the opportunity's progress.</p>
    pub fn stage(mut self, input: crate::types::AwsOpportunityStage) -> Self {
        self.stage = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the current stage of the opportunity in its lifecycle, such as <code>Qualification</code>, <code>Validation</code>, or <code>Closed Won</code>. This helps in understanding the opportunity's progress.</p>
    pub fn set_stage(mut self, input: ::std::option::Option<crate::types::AwsOpportunityStage>) -> Self {
        self.stage = input;
        self
    }
    /// <p>Represents the current stage of the opportunity in its lifecycle, such as <code>Qualification</code>, <code>Validation</code>, or <code>Closed Won</code>. This helps in understanding the opportunity's progress.</p>
    pub fn get_stage(&self) -> &::std::option::Option<crate::types::AwsOpportunityStage> {
        &self.stage
    }
    /// <p>Specifies the immediate next steps required to progress the opportunity. These steps are based on AWS guidance and the current stage of the opportunity.</p>
    pub fn next_steps(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_steps = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the immediate next steps required to progress the opportunity. These steps are based on AWS guidance and the current stage of the opportunity.</p>
    pub fn set_next_steps(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_steps = input;
        self
    }
    /// <p>Specifies the immediate next steps required to progress the opportunity. These steps are based on AWS guidance and the current stage of the opportunity.</p>
    pub fn get_next_steps(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_steps
    }
    /// Appends an item to `next_steps_history`.
    ///
    /// To override the contents of this collection use [`set_next_steps_history`](Self::set_next_steps_history).
    ///
    /// <p>Provides a historical log of previous next steps that were taken to move the opportunity forward. This helps in tracking the decision-making process and identifying any delays or obstacles encountered.</p>
    pub fn next_steps_history(mut self, input: crate::types::ProfileNextStepsHistory) -> Self {
        let mut v = self.next_steps_history.unwrap_or_default();
        v.push(input);
        self.next_steps_history = ::std::option::Option::Some(v);
        self
    }
    /// <p>Provides a historical log of previous next steps that were taken to move the opportunity forward. This helps in tracking the decision-making process and identifying any delays or obstacles encountered.</p>
    pub fn set_next_steps_history(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ProfileNextStepsHistory>>) -> Self {
        self.next_steps_history = input;
        self
    }
    /// <p>Provides a historical log of previous next steps that were taken to move the opportunity forward. This helps in tracking the decision-making process and identifying any delays or obstacles encountered.</p>
    pub fn get_next_steps_history(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProfileNextStepsHistory>> {
        &self.next_steps_history
    }
    /// Consumes the builder and constructs a [`AwsOpportunityLifeCycle`](crate::types::AwsOpportunityLifeCycle).
    pub fn build(self) -> crate::types::AwsOpportunityLifeCycle {
        crate::types::AwsOpportunityLifeCycle {
            target_close_date: self.target_close_date,
            closed_lost_reason: self.closed_lost_reason,
            stage: self.stage,
            next_steps: self.next_steps,
            next_steps_history: self.next_steps_history,
        }
    }
}
impl ::std::fmt::Debug for AwsOpportunityLifeCycleBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AwsOpportunityLifeCycleBuilder");
        formatter.field("target_close_date", &self.target_close_date);
        formatter.field("closed_lost_reason", &self.closed_lost_reason);
        formatter.field("stage", &self.stage);
        formatter.field("next_steps", &"*** Sensitive Data Redacted ***");
        formatter.field("next_steps_history", &self.next_steps_history);
        formatter.finish()
    }
}
