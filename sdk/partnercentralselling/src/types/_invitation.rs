// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Invitation structure represents an invitation exchanged between partners and AWS. It includes a message, receiver information, and a payload providing context for the invitation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Invitation {
    /// <p>A message accompanying the invitation.</p>
    pub message: ::std::string::String,
    /// <p>Represents the entity that received the Engagement Invitation, including account and company details. This field is essential for tracking the partner who is being invited to collaborate.</p>
    pub receiver: ::std::option::Option<crate::types::Receiver>,
    /// <p>Contains the data payload associated with the Engagement Invitation. This payload includes essential details related to the AWS opportunity and is used by partners to evaluate whether to accept or reject the engagement.</p>
    pub payload: ::std::option::Option<crate::types::Payload>,
}
impl Invitation {
    /// <p>A message accompanying the invitation.</p>
    pub fn message(&self) -> &str {
        use std::ops::Deref;
        self.message.deref()
    }
    /// <p>Represents the entity that received the Engagement Invitation, including account and company details. This field is essential for tracking the partner who is being invited to collaborate.</p>
    pub fn receiver(&self) -> ::std::option::Option<&crate::types::Receiver> {
        self.receiver.as_ref()
    }
    /// <p>Contains the data payload associated with the Engagement Invitation. This payload includes essential details related to the AWS opportunity and is used by partners to evaluate whether to accept or reject the engagement.</p>
    pub fn payload(&self) -> ::std::option::Option<&crate::types::Payload> {
        self.payload.as_ref()
    }
}
impl ::std::fmt::Debug for Invitation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Invitation");
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.field("receiver", &self.receiver);
        formatter.field("payload", &self.payload);
        formatter.finish()
    }
}
impl Invitation {
    /// Creates a new builder-style object to manufacture [`Invitation`](crate::types::Invitation).
    pub fn builder() -> crate::types::builders::InvitationBuilder {
        crate::types::builders::InvitationBuilder::default()
    }
}

/// A builder for [`Invitation`](crate::types::Invitation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct InvitationBuilder {
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) receiver: ::std::option::Option<crate::types::Receiver>,
    pub(crate) payload: ::std::option::Option<crate::types::Payload>,
}
impl InvitationBuilder {
    /// <p>A message accompanying the invitation.</p>
    /// This field is required.
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message accompanying the invitation.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>A message accompanying the invitation.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>Represents the entity that received the Engagement Invitation, including account and company details. This field is essential for tracking the partner who is being invited to collaborate.</p>
    /// This field is required.
    pub fn receiver(mut self, input: crate::types::Receiver) -> Self {
        self.receiver = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the entity that received the Engagement Invitation, including account and company details. This field is essential for tracking the partner who is being invited to collaborate.</p>
    pub fn set_receiver(mut self, input: ::std::option::Option<crate::types::Receiver>) -> Self {
        self.receiver = input;
        self
    }
    /// <p>Represents the entity that received the Engagement Invitation, including account and company details. This field is essential for tracking the partner who is being invited to collaborate.</p>
    pub fn get_receiver(&self) -> &::std::option::Option<crate::types::Receiver> {
        &self.receiver
    }
    /// <p>Contains the data payload associated with the Engagement Invitation. This payload includes essential details related to the AWS opportunity and is used by partners to evaluate whether to accept or reject the engagement.</p>
    /// This field is required.
    pub fn payload(mut self, input: crate::types::Payload) -> Self {
        self.payload = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the data payload associated with the Engagement Invitation. This payload includes essential details related to the AWS opportunity and is used by partners to evaluate whether to accept or reject the engagement.</p>
    pub fn set_payload(mut self, input: ::std::option::Option<crate::types::Payload>) -> Self {
        self.payload = input;
        self
    }
    /// <p>Contains the data payload associated with the Engagement Invitation. This payload includes essential details related to the AWS opportunity and is used by partners to evaluate whether to accept or reject the engagement.</p>
    pub fn get_payload(&self) -> &::std::option::Option<crate::types::Payload> {
        &self.payload
    }
    /// Consumes the builder and constructs a [`Invitation`](crate::types::Invitation).
    /// This method will fail if any of the following fields are not set:
    /// - [`message`](crate::types::builders::InvitationBuilder::message)
    pub fn build(self) -> ::std::result::Result<crate::types::Invitation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Invitation {
            message: self.message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message",
                    "message was not specified but it is required when building Invitation",
                )
            })?,
            receiver: self.receiver,
            payload: self.payload,
        })
    }
}
impl ::std::fmt::Debug for InvitationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InvitationBuilder");
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.field("receiver", &self.receiver);
        formatter.field("payload", &self.payload);
        formatter.finish()
    }
}
