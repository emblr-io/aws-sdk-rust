// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains a <code>Customer Partner</code>'s contact details.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Contact {
    /// <p>The contact's email address associated with the <code>Opportunity</code>.</p>
    pub email: ::std::option::Option<::std::string::String>,
    /// <p>The contact's first name associated with the <code>Opportunity</code>.</p>
    pub first_name: ::std::option::Option<::std::string::String>,
    /// <p>The contact's last name associated with the <code>Opportunity</code>.</p>
    pub last_name: ::std::option::Option<::std::string::String>,
    /// <p>The partner contact's title (job title or role) associated with the <code>Opportunity</code>. <code>BusinessTitle</code> supports either <code>PartnerAccountManager</code> or <code>OpportunityOwner</code>.</p>
    pub business_title: ::std::option::Option<::std::string::String>,
    /// <p>The contact's phone number associated with the <code>Opportunity</code>.</p>
    pub phone: ::std::option::Option<::std::string::String>,
}
impl Contact {
    /// <p>The contact's email address associated with the <code>Opportunity</code>.</p>
    pub fn email(&self) -> ::std::option::Option<&str> {
        self.email.as_deref()
    }
    /// <p>The contact's first name associated with the <code>Opportunity</code>.</p>
    pub fn first_name(&self) -> ::std::option::Option<&str> {
        self.first_name.as_deref()
    }
    /// <p>The contact's last name associated with the <code>Opportunity</code>.</p>
    pub fn last_name(&self) -> ::std::option::Option<&str> {
        self.last_name.as_deref()
    }
    /// <p>The partner contact's title (job title or role) associated with the <code>Opportunity</code>. <code>BusinessTitle</code> supports either <code>PartnerAccountManager</code> or <code>OpportunityOwner</code>.</p>
    pub fn business_title(&self) -> ::std::option::Option<&str> {
        self.business_title.as_deref()
    }
    /// <p>The contact's phone number associated with the <code>Opportunity</code>.</p>
    pub fn phone(&self) -> ::std::option::Option<&str> {
        self.phone.as_deref()
    }
}
impl ::std::fmt::Debug for Contact {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Contact");
        formatter.field("email", &"*** Sensitive Data Redacted ***");
        formatter.field("first_name", &"*** Sensitive Data Redacted ***");
        formatter.field("last_name", &"*** Sensitive Data Redacted ***");
        formatter.field("business_title", &"*** Sensitive Data Redacted ***");
        formatter.field("phone", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl Contact {
    /// Creates a new builder-style object to manufacture [`Contact`](crate::types::Contact).
    pub fn builder() -> crate::types::builders::ContactBuilder {
        crate::types::builders::ContactBuilder::default()
    }
}

/// A builder for [`Contact`](crate::types::Contact).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ContactBuilder {
    pub(crate) email: ::std::option::Option<::std::string::String>,
    pub(crate) first_name: ::std::option::Option<::std::string::String>,
    pub(crate) last_name: ::std::option::Option<::std::string::String>,
    pub(crate) business_title: ::std::option::Option<::std::string::String>,
    pub(crate) phone: ::std::option::Option<::std::string::String>,
}
impl ContactBuilder {
    /// <p>The contact's email address associated with the <code>Opportunity</code>.</p>
    pub fn email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The contact's email address associated with the <code>Opportunity</code>.</p>
    pub fn set_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email = input;
        self
    }
    /// <p>The contact's email address associated with the <code>Opportunity</code>.</p>
    pub fn get_email(&self) -> &::std::option::Option<::std::string::String> {
        &self.email
    }
    /// <p>The contact's first name associated with the <code>Opportunity</code>.</p>
    pub fn first_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.first_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The contact's first name associated with the <code>Opportunity</code>.</p>
    pub fn set_first_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.first_name = input;
        self
    }
    /// <p>The contact's first name associated with the <code>Opportunity</code>.</p>
    pub fn get_first_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.first_name
    }
    /// <p>The contact's last name associated with the <code>Opportunity</code>.</p>
    pub fn last_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The contact's last name associated with the <code>Opportunity</code>.</p>
    pub fn set_last_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_name = input;
        self
    }
    /// <p>The contact's last name associated with the <code>Opportunity</code>.</p>
    pub fn get_last_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_name
    }
    /// <p>The partner contact's title (job title or role) associated with the <code>Opportunity</code>. <code>BusinessTitle</code> supports either <code>PartnerAccountManager</code> or <code>OpportunityOwner</code>.</p>
    pub fn business_title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.business_title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The partner contact's title (job title or role) associated with the <code>Opportunity</code>. <code>BusinessTitle</code> supports either <code>PartnerAccountManager</code> or <code>OpportunityOwner</code>.</p>
    pub fn set_business_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.business_title = input;
        self
    }
    /// <p>The partner contact's title (job title or role) associated with the <code>Opportunity</code>. <code>BusinessTitle</code> supports either <code>PartnerAccountManager</code> or <code>OpportunityOwner</code>.</p>
    pub fn get_business_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.business_title
    }
    /// <p>The contact's phone number associated with the <code>Opportunity</code>.</p>
    pub fn phone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.phone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The contact's phone number associated with the <code>Opportunity</code>.</p>
    pub fn set_phone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.phone = input;
        self
    }
    /// <p>The contact's phone number associated with the <code>Opportunity</code>.</p>
    pub fn get_phone(&self) -> &::std::option::Option<::std::string::String> {
        &self.phone
    }
    /// Consumes the builder and constructs a [`Contact`](crate::types::Contact).
    pub fn build(self) -> crate::types::Contact {
        crate::types::Contact {
            email: self.email,
            first_name: self.first_name,
            last_name: self.last_name,
            business_title: self.business_title,
            phone: self.phone,
        }
    }
}
impl ::std::fmt::Debug for ContactBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ContactBuilder");
        formatter.field("email", &"*** Sensitive Data Redacted ***");
        formatter.field("first_name", &"*** Sensitive Data Redacted ***");
        formatter.field("last_name", &"*** Sensitive Data Redacted ***");
        formatter.field("business_title", &"*** Sensitive Data Redacted ***");
        formatter.field("phone", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
