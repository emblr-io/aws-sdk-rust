// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a summarized view of the Engagement Invitation, including details like the identifier, status, and sender. This summary helps partners track and manage AWS originated opportunities.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EngagementInvitationSummary {
    /// <p>The Amazon Resource Name (ARN) of the Engagement Invitation. The ARN is a unique identifier that allows partners to reference the invitation in their system and manage its lifecycle.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>Describes the type of payload associated with the Engagement Invitation, such as <code>Opportunity</code> or <code>MarketplaceOffer</code>. This helps partners understand the nature of the engagement request from AWS.</p>
    pub payload_type: ::std::option::Option<crate::types::EngagementInvitationPayloadType>,
    /// <p>Represents the unique identifier of the Engagement Invitation. This identifier is used to track the invitation and to manage responses like acceptance or rejection.</p>
    pub id: ::std::string::String,
    /// <p>The identifier of the Engagement associated with this invitation. This links the invitation to its parent Engagement.</p>
    pub engagement_id: ::std::option::Option<::std::string::String>,
    /// <p>Provides a short title or description of the Engagement Invitation. This title helps partners quickly identify and differentiate between multiple engagement opportunities.</p>
    pub engagement_title: ::std::option::Option<::std::string::String>,
    /// <p>Represents the current status of the Engagement Invitation, such as <code>Pending</code>, <code>Accepted</code>, or <code>Rejected</code>. The status helps track the progress and response to the invitation.</p>
    pub status: ::std::option::Option<crate::types::InvitationStatus>,
    /// <p>Indicates the date when the Engagement Invitation was sent to the partner. This provides context for when the opportunity was shared and helps in tracking the timeline for engagement.</p>
    pub invitation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Indicates the date and time when the Engagement Invitation will expire. After this date, the invitation can no longer be accepted, and the opportunity will be unavailable to the partner.</p>
    pub expiration_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Specifies the AWS account ID of the sender who initiated the Engagement Invitation. This allows the partner to identify the AWS entity or representative responsible for sharing the opportunity.</p>
    pub sender_aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the name of the company or AWS division that sent the Engagement Invitation. This information is useful for partners to know which part of AWS is requesting engagement.</p>
    pub sender_company_name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the partner company or individual that received the Engagement Invitation. This field is important for tracking who the invitation was sent to within the partner organization.</p>
    pub receiver: ::std::option::Option<crate::types::Receiver>,
    /// <p>Specifies the catalog in which the Engagement Invitation resides. This can be either the <code>AWS</code> or <code>Sandbox</code> catalog, indicating whether the opportunity is live or being tested.</p>
    pub catalog: ::std::string::String,
    /// <p>Identifies the role of the caller in the engagement invitation.</p>
    pub participant_type: ::std::option::Option<crate::types::ParticipantType>,
}
impl EngagementInvitationSummary {
    /// <p>The Amazon Resource Name (ARN) of the Engagement Invitation. The ARN is a unique identifier that allows partners to reference the invitation in their system and manage its lifecycle.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>Describes the type of payload associated with the Engagement Invitation, such as <code>Opportunity</code> or <code>MarketplaceOffer</code>. This helps partners understand the nature of the engagement request from AWS.</p>
    pub fn payload_type(&self) -> ::std::option::Option<&crate::types::EngagementInvitationPayloadType> {
        self.payload_type.as_ref()
    }
    /// <p>Represents the unique identifier of the Engagement Invitation. This identifier is used to track the invitation and to manage responses like acceptance or rejection.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The identifier of the Engagement associated with this invitation. This links the invitation to its parent Engagement.</p>
    pub fn engagement_id(&self) -> ::std::option::Option<&str> {
        self.engagement_id.as_deref()
    }
    /// <p>Provides a short title or description of the Engagement Invitation. This title helps partners quickly identify and differentiate between multiple engagement opportunities.</p>
    pub fn engagement_title(&self) -> ::std::option::Option<&str> {
        self.engagement_title.as_deref()
    }
    /// <p>Represents the current status of the Engagement Invitation, such as <code>Pending</code>, <code>Accepted</code>, or <code>Rejected</code>. The status helps track the progress and response to the invitation.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::InvitationStatus> {
        self.status.as_ref()
    }
    /// <p>Indicates the date when the Engagement Invitation was sent to the partner. This provides context for when the opportunity was shared and helps in tracking the timeline for engagement.</p>
    pub fn invitation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.invitation_date.as_ref()
    }
    /// <p>Indicates the date and time when the Engagement Invitation will expire. After this date, the invitation can no longer be accepted, and the opportunity will be unavailable to the partner.</p>
    pub fn expiration_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.expiration_date.as_ref()
    }
    /// <p>Specifies the AWS account ID of the sender who initiated the Engagement Invitation. This allows the partner to identify the AWS entity or representative responsible for sharing the opportunity.</p>
    pub fn sender_aws_account_id(&self) -> ::std::option::Option<&str> {
        self.sender_aws_account_id.as_deref()
    }
    /// <p>Indicates the name of the company or AWS division that sent the Engagement Invitation. This information is useful for partners to know which part of AWS is requesting engagement.</p>
    pub fn sender_company_name(&self) -> ::std::option::Option<&str> {
        self.sender_company_name.as_deref()
    }
    /// <p>Specifies the partner company or individual that received the Engagement Invitation. This field is important for tracking who the invitation was sent to within the partner organization.</p>
    pub fn receiver(&self) -> ::std::option::Option<&crate::types::Receiver> {
        self.receiver.as_ref()
    }
    /// <p>Specifies the catalog in which the Engagement Invitation resides. This can be either the <code>AWS</code> or <code>Sandbox</code> catalog, indicating whether the opportunity is live or being tested.</p>
    pub fn catalog(&self) -> &str {
        use std::ops::Deref;
        self.catalog.deref()
    }
    /// <p>Identifies the role of the caller in the engagement invitation.</p>
    pub fn participant_type(&self) -> ::std::option::Option<&crate::types::ParticipantType> {
        self.participant_type.as_ref()
    }
}
impl ::std::fmt::Debug for EngagementInvitationSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EngagementInvitationSummary");
        formatter.field("arn", &self.arn);
        formatter.field("payload_type", &self.payload_type);
        formatter.field("id", &self.id);
        formatter.field("engagement_id", &self.engagement_id);
        formatter.field("engagement_title", &self.engagement_title);
        formatter.field("status", &self.status);
        formatter.field("invitation_date", &self.invitation_date);
        formatter.field("expiration_date", &self.expiration_date);
        formatter.field("sender_aws_account_id", &"*** Sensitive Data Redacted ***");
        formatter.field("sender_company_name", &self.sender_company_name);
        formatter.field("receiver", &self.receiver);
        formatter.field("catalog", &self.catalog);
        formatter.field("participant_type", &self.participant_type);
        formatter.finish()
    }
}
impl EngagementInvitationSummary {
    /// Creates a new builder-style object to manufacture [`EngagementInvitationSummary`](crate::types::EngagementInvitationSummary).
    pub fn builder() -> crate::types::builders::EngagementInvitationSummaryBuilder {
        crate::types::builders::EngagementInvitationSummaryBuilder::default()
    }
}

/// A builder for [`EngagementInvitationSummary`](crate::types::EngagementInvitationSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct EngagementInvitationSummaryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) payload_type: ::std::option::Option<crate::types::EngagementInvitationPayloadType>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) engagement_id: ::std::option::Option<::std::string::String>,
    pub(crate) engagement_title: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::InvitationStatus>,
    pub(crate) invitation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) expiration_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) sender_aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) sender_company_name: ::std::option::Option<::std::string::String>,
    pub(crate) receiver: ::std::option::Option<crate::types::Receiver>,
    pub(crate) catalog: ::std::option::Option<::std::string::String>,
    pub(crate) participant_type: ::std::option::Option<crate::types::ParticipantType>,
}
impl EngagementInvitationSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Engagement Invitation. The ARN is a unique identifier that allows partners to reference the invitation in their system and manage its lifecycle.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Engagement Invitation. The ARN is a unique identifier that allows partners to reference the invitation in their system and manage its lifecycle.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Engagement Invitation. The ARN is a unique identifier that allows partners to reference the invitation in their system and manage its lifecycle.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Describes the type of payload associated with the Engagement Invitation, such as <code>Opportunity</code> or <code>MarketplaceOffer</code>. This helps partners understand the nature of the engagement request from AWS.</p>
    pub fn payload_type(mut self, input: crate::types::EngagementInvitationPayloadType) -> Self {
        self.payload_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the type of payload associated with the Engagement Invitation, such as <code>Opportunity</code> or <code>MarketplaceOffer</code>. This helps partners understand the nature of the engagement request from AWS.</p>
    pub fn set_payload_type(mut self, input: ::std::option::Option<crate::types::EngagementInvitationPayloadType>) -> Self {
        self.payload_type = input;
        self
    }
    /// <p>Describes the type of payload associated with the Engagement Invitation, such as <code>Opportunity</code> or <code>MarketplaceOffer</code>. This helps partners understand the nature of the engagement request from AWS.</p>
    pub fn get_payload_type(&self) -> &::std::option::Option<crate::types::EngagementInvitationPayloadType> {
        &self.payload_type
    }
    /// <p>Represents the unique identifier of the Engagement Invitation. This identifier is used to track the invitation and to manage responses like acceptance or rejection.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Represents the unique identifier of the Engagement Invitation. This identifier is used to track the invitation and to manage responses like acceptance or rejection.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>Represents the unique identifier of the Engagement Invitation. This identifier is used to track the invitation and to manage responses like acceptance or rejection.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The identifier of the Engagement associated with this invitation. This links the invitation to its parent Engagement.</p>
    pub fn engagement_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engagement_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Engagement associated with this invitation. This links the invitation to its parent Engagement.</p>
    pub fn set_engagement_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engagement_id = input;
        self
    }
    /// <p>The identifier of the Engagement associated with this invitation. This links the invitation to its parent Engagement.</p>
    pub fn get_engagement_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.engagement_id
    }
    /// <p>Provides a short title or description of the Engagement Invitation. This title helps partners quickly identify and differentiate between multiple engagement opportunities.</p>
    pub fn engagement_title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engagement_title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provides a short title or description of the Engagement Invitation. This title helps partners quickly identify and differentiate between multiple engagement opportunities.</p>
    pub fn set_engagement_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engagement_title = input;
        self
    }
    /// <p>Provides a short title or description of the Engagement Invitation. This title helps partners quickly identify and differentiate between multiple engagement opportunities.</p>
    pub fn get_engagement_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.engagement_title
    }
    /// <p>Represents the current status of the Engagement Invitation, such as <code>Pending</code>, <code>Accepted</code>, or <code>Rejected</code>. The status helps track the progress and response to the invitation.</p>
    pub fn status(mut self, input: crate::types::InvitationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the current status of the Engagement Invitation, such as <code>Pending</code>, <code>Accepted</code>, or <code>Rejected</code>. The status helps track the progress and response to the invitation.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::InvitationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Represents the current status of the Engagement Invitation, such as <code>Pending</code>, <code>Accepted</code>, or <code>Rejected</code>. The status helps track the progress and response to the invitation.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::InvitationStatus> {
        &self.status
    }
    /// <p>Indicates the date when the Engagement Invitation was sent to the partner. This provides context for when the opportunity was shared and helps in tracking the timeline for engagement.</p>
    pub fn invitation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.invitation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the date when the Engagement Invitation was sent to the partner. This provides context for when the opportunity was shared and helps in tracking the timeline for engagement.</p>
    pub fn set_invitation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.invitation_date = input;
        self
    }
    /// <p>Indicates the date when the Engagement Invitation was sent to the partner. This provides context for when the opportunity was shared and helps in tracking the timeline for engagement.</p>
    pub fn get_invitation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.invitation_date
    }
    /// <p>Indicates the date and time when the Engagement Invitation will expire. After this date, the invitation can no longer be accepted, and the opportunity will be unavailable to the partner.</p>
    pub fn expiration_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expiration_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the date and time when the Engagement Invitation will expire. After this date, the invitation can no longer be accepted, and the opportunity will be unavailable to the partner.</p>
    pub fn set_expiration_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expiration_date = input;
        self
    }
    /// <p>Indicates the date and time when the Engagement Invitation will expire. After this date, the invitation can no longer be accepted, and the opportunity will be unavailable to the partner.</p>
    pub fn get_expiration_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expiration_date
    }
    /// <p>Specifies the AWS account ID of the sender who initiated the Engagement Invitation. This allows the partner to identify the AWS entity or representative responsible for sharing the opportunity.</p>
    pub fn sender_aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sender_aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the AWS account ID of the sender who initiated the Engagement Invitation. This allows the partner to identify the AWS entity or representative responsible for sharing the opportunity.</p>
    pub fn set_sender_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sender_aws_account_id = input;
        self
    }
    /// <p>Specifies the AWS account ID of the sender who initiated the Engagement Invitation. This allows the partner to identify the AWS entity or representative responsible for sharing the opportunity.</p>
    pub fn get_sender_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sender_aws_account_id
    }
    /// <p>Indicates the name of the company or AWS division that sent the Engagement Invitation. This information is useful for partners to know which part of AWS is requesting engagement.</p>
    pub fn sender_company_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sender_company_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates the name of the company or AWS division that sent the Engagement Invitation. This information is useful for partners to know which part of AWS is requesting engagement.</p>
    pub fn set_sender_company_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sender_company_name = input;
        self
    }
    /// <p>Indicates the name of the company or AWS division that sent the Engagement Invitation. This information is useful for partners to know which part of AWS is requesting engagement.</p>
    pub fn get_sender_company_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.sender_company_name
    }
    /// <p>Specifies the partner company or individual that received the Engagement Invitation. This field is important for tracking who the invitation was sent to within the partner organization.</p>
    pub fn receiver(mut self, input: crate::types::Receiver) -> Self {
        self.receiver = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the partner company or individual that received the Engagement Invitation. This field is important for tracking who the invitation was sent to within the partner organization.</p>
    pub fn set_receiver(mut self, input: ::std::option::Option<crate::types::Receiver>) -> Self {
        self.receiver = input;
        self
    }
    /// <p>Specifies the partner company or individual that received the Engagement Invitation. This field is important for tracking who the invitation was sent to within the partner organization.</p>
    pub fn get_receiver(&self) -> &::std::option::Option<crate::types::Receiver> {
        &self.receiver
    }
    /// <p>Specifies the catalog in which the Engagement Invitation resides. This can be either the <code>AWS</code> or <code>Sandbox</code> catalog, indicating whether the opportunity is live or being tested.</p>
    /// This field is required.
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the catalog in which the Engagement Invitation resides. This can be either the <code>AWS</code> or <code>Sandbox</code> catalog, indicating whether the opportunity is live or being tested.</p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>Specifies the catalog in which the Engagement Invitation resides. This can be either the <code>AWS</code> or <code>Sandbox</code> catalog, indicating whether the opportunity is live or being tested.</p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog
    }
    /// <p>Identifies the role of the caller in the engagement invitation.</p>
    pub fn participant_type(mut self, input: crate::types::ParticipantType) -> Self {
        self.participant_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies the role of the caller in the engagement invitation.</p>
    pub fn set_participant_type(mut self, input: ::std::option::Option<crate::types::ParticipantType>) -> Self {
        self.participant_type = input;
        self
    }
    /// <p>Identifies the role of the caller in the engagement invitation.</p>
    pub fn get_participant_type(&self) -> &::std::option::Option<crate::types::ParticipantType> {
        &self.participant_type
    }
    /// Consumes the builder and constructs a [`EngagementInvitationSummary`](crate::types::EngagementInvitationSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::EngagementInvitationSummaryBuilder::id)
    /// - [`catalog`](crate::types::builders::EngagementInvitationSummaryBuilder::catalog)
    pub fn build(self) -> ::std::result::Result<crate::types::EngagementInvitationSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EngagementInvitationSummary {
            arn: self.arn,
            payload_type: self.payload_type,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building EngagementInvitationSummary",
                )
            })?,
            engagement_id: self.engagement_id,
            engagement_title: self.engagement_title,
            status: self.status,
            invitation_date: self.invitation_date,
            expiration_date: self.expiration_date,
            sender_aws_account_id: self.sender_aws_account_id,
            sender_company_name: self.sender_company_name,
            receiver: self.receiver,
            catalog: self.catalog.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "catalog",
                    "catalog was not specified but it is required when building EngagementInvitationSummary",
                )
            })?,
            participant_type: self.participant_type,
        })
    }
}
impl ::std::fmt::Debug for EngagementInvitationSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EngagementInvitationSummaryBuilder");
        formatter.field("arn", &self.arn);
        formatter.field("payload_type", &self.payload_type);
        formatter.field("id", &self.id);
        formatter.field("engagement_id", &self.engagement_id);
        formatter.field("engagement_title", &self.engagement_title);
        formatter.field("status", &self.status);
        formatter.field("invitation_date", &self.invitation_date);
        formatter.field("expiration_date", &self.expiration_date);
        formatter.field("sender_aws_account_id", &"*** Sensitive Data Redacted ***");
        formatter.field("sender_company_name", &self.sender_company_name);
        formatter.field("receiver", &self.receiver);
        formatter.field("catalog", &self.catalog);
        formatter.field("participant_type", &self.participant_type);
        formatter.finish()
    }
}
