// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates an invalid value for a field.</p>
/// <ul>
/// <li>
/// <p><i>REQUIRED_FIELD_MISSING:</i> The request is missing a required field.</p>
/// <p>Fix: Verify your request payload includes all required fields.</p></li>
/// <li>
/// <p><i>INVALID_ENUM_VALUE:</i> The enum field value isn't an accepted values.</p>
/// <p>Fix: Check the documentation for the list of valid enum values, and update your request with a valid value.</p></li>
/// <li>
/// <p><i>INVALID_STRING_FORMAT:</i> The string format is invalid.</p>
/// <p>Fix: Confirm that the string is in the expected format (For example: email address, date).</p></li>
/// <li>
/// <p><i>INVALID_VALUE:</i> The value isn't valid.</p>
/// <p>Fix: Confirm that the value meets the expected criteria and is within the allowable range or set.</p></li>
/// <li>
/// <p><i>TOO_MANY_VALUES:</i> There are too many values in a field that expects fewer entries.</p>
/// <p>Fix: Reduce the number of values to match the expected limit.</p></li>
/// <li>
/// <p><i>ACTION_NOT_PERMITTED:</i> The action isn't permitted due to current state or permissions.</p>
/// <p>Fix: Verify that the action is appropriate for the current state, and that you have the necessary permissions to perform it.</p></li>
/// <li>
/// <p><i>DUPLICATE_KEY_VALUE:</i> The value in a field duplicates a value that must be unique.</p>
/// <p>Fix: Verify that the value is unique and doesn't duplicate an existing value in the system.</p></li>
/// </ul>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ValidationExceptionError {
    /// <p>Specifies the field name with the invalid value.</p>
    pub field_name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the detailed error message for the invalid field value.</p>
    pub message: ::std::string::String,
    /// <p>Specifies the error code for the invalid field value.</p>
    pub code: crate::types::ValidationExceptionErrorCode,
}
impl ValidationExceptionError {
    /// <p>Specifies the field name with the invalid value.</p>
    pub fn field_name(&self) -> ::std::option::Option<&str> {
        self.field_name.as_deref()
    }
    /// <p>Specifies the detailed error message for the invalid field value.</p>
    pub fn message(&self) -> &str {
        use std::ops::Deref;
        self.message.deref()
    }
    /// <p>Specifies the error code for the invalid field value.</p>
    pub fn code(&self) -> &crate::types::ValidationExceptionErrorCode {
        &self.code
    }
}
impl ValidationExceptionError {
    /// Creates a new builder-style object to manufacture [`ValidationExceptionError`](crate::types::ValidationExceptionError).
    pub fn builder() -> crate::types::builders::ValidationExceptionErrorBuilder {
        crate::types::builders::ValidationExceptionErrorBuilder::default()
    }
}

/// A builder for [`ValidationExceptionError`](crate::types::ValidationExceptionError).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ValidationExceptionErrorBuilder {
    pub(crate) field_name: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) code: ::std::option::Option<crate::types::ValidationExceptionErrorCode>,
}
impl ValidationExceptionErrorBuilder {
    /// <p>Specifies the field name with the invalid value.</p>
    pub fn field_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the field name with the invalid value.</p>
    pub fn set_field_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_name = input;
        self
    }
    /// <p>Specifies the field name with the invalid value.</p>
    pub fn get_field_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_name
    }
    /// <p>Specifies the detailed error message for the invalid field value.</p>
    /// This field is required.
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the detailed error message for the invalid field value.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>Specifies the detailed error message for the invalid field value.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>Specifies the error code for the invalid field value.</p>
    /// This field is required.
    pub fn code(mut self, input: crate::types::ValidationExceptionErrorCode) -> Self {
        self.code = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the error code for the invalid field value.</p>
    pub fn set_code(mut self, input: ::std::option::Option<crate::types::ValidationExceptionErrorCode>) -> Self {
        self.code = input;
        self
    }
    /// <p>Specifies the error code for the invalid field value.</p>
    pub fn get_code(&self) -> &::std::option::Option<crate::types::ValidationExceptionErrorCode> {
        &self.code
    }
    /// Consumes the builder and constructs a [`ValidationExceptionError`](crate::types::ValidationExceptionError).
    /// This method will fail if any of the following fields are not set:
    /// - [`message`](crate::types::builders::ValidationExceptionErrorBuilder::message)
    /// - [`code`](crate::types::builders::ValidationExceptionErrorBuilder::code)
    pub fn build(self) -> ::std::result::Result<crate::types::ValidationExceptionError, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ValidationExceptionError {
            field_name: self.field_name,
            message: self.message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message",
                    "message was not specified but it is required when building ValidationExceptionError",
                )
            })?,
            code: self.code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "code",
                    "code was not specified but it is required when building ValidationExceptionError",
                )
            })?,
        })
    }
}
