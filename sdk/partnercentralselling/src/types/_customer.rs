// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains the customer's <code>Account</code> and <code>Contact</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Customer {
    /// <p>An object that contains the customer's account details.</p>
    pub account: ::std::option::Option<crate::types::Account>,
    /// <p>Represents the contact details for individuals associated with the customer of the <code>Opportunity</code>. This field captures relevant contacts, including decision-makers, influencers, and technical stakeholders within the customer organization. These contacts are key to progressing the opportunity.</p>
    pub contacts: ::std::option::Option<::std::vec::Vec<crate::types::Contact>>,
}
impl Customer {
    /// <p>An object that contains the customer's account details.</p>
    pub fn account(&self) -> ::std::option::Option<&crate::types::Account> {
        self.account.as_ref()
    }
    /// <p>Represents the contact details for individuals associated with the customer of the <code>Opportunity</code>. This field captures relevant contacts, including decision-makers, influencers, and technical stakeholders within the customer organization. These contacts are key to progressing the opportunity.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.contacts.is_none()`.
    pub fn contacts(&self) -> &[crate::types::Contact] {
        self.contacts.as_deref().unwrap_or_default()
    }
}
impl Customer {
    /// Creates a new builder-style object to manufacture [`Customer`](crate::types::Customer).
    pub fn builder() -> crate::types::builders::CustomerBuilder {
        crate::types::builders::CustomerBuilder::default()
    }
}

/// A builder for [`Customer`](crate::types::Customer).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CustomerBuilder {
    pub(crate) account: ::std::option::Option<crate::types::Account>,
    pub(crate) contacts: ::std::option::Option<::std::vec::Vec<crate::types::Contact>>,
}
impl CustomerBuilder {
    /// <p>An object that contains the customer's account details.</p>
    pub fn account(mut self, input: crate::types::Account) -> Self {
        self.account = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains the customer's account details.</p>
    pub fn set_account(mut self, input: ::std::option::Option<crate::types::Account>) -> Self {
        self.account = input;
        self
    }
    /// <p>An object that contains the customer's account details.</p>
    pub fn get_account(&self) -> &::std::option::Option<crate::types::Account> {
        &self.account
    }
    /// Appends an item to `contacts`.
    ///
    /// To override the contents of this collection use [`set_contacts`](Self::set_contacts).
    ///
    /// <p>Represents the contact details for individuals associated with the customer of the <code>Opportunity</code>. This field captures relevant contacts, including decision-makers, influencers, and technical stakeholders within the customer organization. These contacts are key to progressing the opportunity.</p>
    pub fn contacts(mut self, input: crate::types::Contact) -> Self {
        let mut v = self.contacts.unwrap_or_default();
        v.push(input);
        self.contacts = ::std::option::Option::Some(v);
        self
    }
    /// <p>Represents the contact details for individuals associated with the customer of the <code>Opportunity</code>. This field captures relevant contacts, including decision-makers, influencers, and technical stakeholders within the customer organization. These contacts are key to progressing the opportunity.</p>
    pub fn set_contacts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Contact>>) -> Self {
        self.contacts = input;
        self
    }
    /// <p>Represents the contact details for individuals associated with the customer of the <code>Opportunity</code>. This field captures relevant contacts, including decision-makers, influencers, and technical stakeholders within the customer organization. These contacts are key to progressing the opportunity.</p>
    pub fn get_contacts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Contact>> {
        &self.contacts
    }
    /// Consumes the builder and constructs a [`Customer`](crate::types::Customer).
    pub fn build(self) -> crate::types::Customer {
        crate::types::Customer {
            account: self.account,
            contacts: self.contacts,
        }
    }
}
