// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides an estimate of the revenue that the partner is expected to generate from the opportunity. This information helps partners assess the financial value of the project.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ExpectedCustomerSpend {
    /// <p>Represents the estimated monthly revenue that the partner expects to earn from the opportunity. This helps in forecasting financial returns.</p>
    pub amount: ::std::string::String,
    /// <p>Indicates the currency in which the revenue estimate is provided. This helps in understanding the financial impact across different markets.</p>
    pub currency_code: crate::types::CurrencyCode,
    /// <p>Indicates how frequently the customer is expected to spend the projected amount. This can include values such as <code>Monthly</code>, <code>Quarterly</code>, or <code>Annually</code>. The default value is <code>Monthly</code>, representing recurring monthly spend.</p>
    pub frequency: crate::types::PaymentFrequency,
    /// <p>Specifies the name of the partner company that is expected to generate revenue from the opportunity. This field helps track the partner’s involvement in the opportunity.</p>
    pub target_company: ::std::string::String,
    /// <p>A URL providing additional information or context about the spend estimation.</p>
    pub estimation_url: ::std::option::Option<::std::string::String>,
}
impl ExpectedCustomerSpend {
    /// <p>Represents the estimated monthly revenue that the partner expects to earn from the opportunity. This helps in forecasting financial returns.</p>
    pub fn amount(&self) -> &str {
        use std::ops::Deref;
        self.amount.deref()
    }
    /// <p>Indicates the currency in which the revenue estimate is provided. This helps in understanding the financial impact across different markets.</p>
    pub fn currency_code(&self) -> &crate::types::CurrencyCode {
        &self.currency_code
    }
    /// <p>Indicates how frequently the customer is expected to spend the projected amount. This can include values such as <code>Monthly</code>, <code>Quarterly</code>, or <code>Annually</code>. The default value is <code>Monthly</code>, representing recurring monthly spend.</p>
    pub fn frequency(&self) -> &crate::types::PaymentFrequency {
        &self.frequency
    }
    /// <p>Specifies the name of the partner company that is expected to generate revenue from the opportunity. This field helps track the partner’s involvement in the opportunity.</p>
    pub fn target_company(&self) -> &str {
        use std::ops::Deref;
        self.target_company.deref()
    }
    /// <p>A URL providing additional information or context about the spend estimation.</p>
    pub fn estimation_url(&self) -> ::std::option::Option<&str> {
        self.estimation_url.as_deref()
    }
}
impl ::std::fmt::Debug for ExpectedCustomerSpend {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ExpectedCustomerSpend");
        formatter.field("amount", &self.amount);
        formatter.field("currency_code", &"*** Sensitive Data Redacted ***");
        formatter.field("frequency", &self.frequency);
        formatter.field("target_company", &self.target_company);
        formatter.field("estimation_url", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ExpectedCustomerSpend {
    /// Creates a new builder-style object to manufacture [`ExpectedCustomerSpend`](crate::types::ExpectedCustomerSpend).
    pub fn builder() -> crate::types::builders::ExpectedCustomerSpendBuilder {
        crate::types::builders::ExpectedCustomerSpendBuilder::default()
    }
}

/// A builder for [`ExpectedCustomerSpend`](crate::types::ExpectedCustomerSpend).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ExpectedCustomerSpendBuilder {
    pub(crate) amount: ::std::option::Option<::std::string::String>,
    pub(crate) currency_code: ::std::option::Option<crate::types::CurrencyCode>,
    pub(crate) frequency: ::std::option::Option<crate::types::PaymentFrequency>,
    pub(crate) target_company: ::std::option::Option<::std::string::String>,
    pub(crate) estimation_url: ::std::option::Option<::std::string::String>,
}
impl ExpectedCustomerSpendBuilder {
    /// <p>Represents the estimated monthly revenue that the partner expects to earn from the opportunity. This helps in forecasting financial returns.</p>
    /// This field is required.
    pub fn amount(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.amount = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Represents the estimated monthly revenue that the partner expects to earn from the opportunity. This helps in forecasting financial returns.</p>
    pub fn set_amount(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.amount = input;
        self
    }
    /// <p>Represents the estimated monthly revenue that the partner expects to earn from the opportunity. This helps in forecasting financial returns.</p>
    pub fn get_amount(&self) -> &::std::option::Option<::std::string::String> {
        &self.amount
    }
    /// <p>Indicates the currency in which the revenue estimate is provided. This helps in understanding the financial impact across different markets.</p>
    /// This field is required.
    pub fn currency_code(mut self, input: crate::types::CurrencyCode) -> Self {
        self.currency_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the currency in which the revenue estimate is provided. This helps in understanding the financial impact across different markets.</p>
    pub fn set_currency_code(mut self, input: ::std::option::Option<crate::types::CurrencyCode>) -> Self {
        self.currency_code = input;
        self
    }
    /// <p>Indicates the currency in which the revenue estimate is provided. This helps in understanding the financial impact across different markets.</p>
    pub fn get_currency_code(&self) -> &::std::option::Option<crate::types::CurrencyCode> {
        &self.currency_code
    }
    /// <p>Indicates how frequently the customer is expected to spend the projected amount. This can include values such as <code>Monthly</code>, <code>Quarterly</code>, or <code>Annually</code>. The default value is <code>Monthly</code>, representing recurring monthly spend.</p>
    /// This field is required.
    pub fn frequency(mut self, input: crate::types::PaymentFrequency) -> Self {
        self.frequency = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates how frequently the customer is expected to spend the projected amount. This can include values such as <code>Monthly</code>, <code>Quarterly</code>, or <code>Annually</code>. The default value is <code>Monthly</code>, representing recurring monthly spend.</p>
    pub fn set_frequency(mut self, input: ::std::option::Option<crate::types::PaymentFrequency>) -> Self {
        self.frequency = input;
        self
    }
    /// <p>Indicates how frequently the customer is expected to spend the projected amount. This can include values such as <code>Monthly</code>, <code>Quarterly</code>, or <code>Annually</code>. The default value is <code>Monthly</code>, representing recurring monthly spend.</p>
    pub fn get_frequency(&self) -> &::std::option::Option<crate::types::PaymentFrequency> {
        &self.frequency
    }
    /// <p>Specifies the name of the partner company that is expected to generate revenue from the opportunity. This field helps track the partner’s involvement in the opportunity.</p>
    /// This field is required.
    pub fn target_company(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_company = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the name of the partner company that is expected to generate revenue from the opportunity. This field helps track the partner’s involvement in the opportunity.</p>
    pub fn set_target_company(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_company = input;
        self
    }
    /// <p>Specifies the name of the partner company that is expected to generate revenue from the opportunity. This field helps track the partner’s involvement in the opportunity.</p>
    pub fn get_target_company(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_company
    }
    /// <p>A URL providing additional information or context about the spend estimation.</p>
    pub fn estimation_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.estimation_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A URL providing additional information or context about the spend estimation.</p>
    pub fn set_estimation_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.estimation_url = input;
        self
    }
    /// <p>A URL providing additional information or context about the spend estimation.</p>
    pub fn get_estimation_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.estimation_url
    }
    /// Consumes the builder and constructs a [`ExpectedCustomerSpend`](crate::types::ExpectedCustomerSpend).
    /// This method will fail if any of the following fields are not set:
    /// - [`amount`](crate::types::builders::ExpectedCustomerSpendBuilder::amount)
    /// - [`currency_code`](crate::types::builders::ExpectedCustomerSpendBuilder::currency_code)
    /// - [`frequency`](crate::types::builders::ExpectedCustomerSpendBuilder::frequency)
    /// - [`target_company`](crate::types::builders::ExpectedCustomerSpendBuilder::target_company)
    pub fn build(self) -> ::std::result::Result<crate::types::ExpectedCustomerSpend, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ExpectedCustomerSpend {
            amount: self.amount.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "amount",
                    "amount was not specified but it is required when building ExpectedCustomerSpend",
                )
            })?,
            currency_code: self.currency_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "currency_code",
                    "currency_code was not specified but it is required when building ExpectedCustomerSpend",
                )
            })?,
            frequency: self.frequency.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "frequency",
                    "frequency was not specified but it is required when building ExpectedCustomerSpend",
                )
            })?,
            target_company: self.target_company.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target_company",
                    "target_company was not specified but it is required when building ExpectedCustomerSpend",
                )
            })?,
            estimation_url: self.estimation_url,
        })
    }
}
impl ::std::fmt::Debug for ExpectedCustomerSpendBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ExpectedCustomerSpendBuilder");
        formatter.field("amount", &self.amount);
        formatter.field("currency_code", &"*** Sensitive Data Redacted ***");
        formatter.field("frequency", &self.frequency);
        formatter.field("target_company", &self.target_company);
        formatter.field("estimation_url", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
