// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents other entities related to the AWS opportunity, such as AWS products, partner solutions, and marketplace offers. These associations help build a complete picture of the solution being sold.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsOpportunityRelatedEntities {
    /// <p>Specifies the AWS products associated with the opportunity. This field helps track the specific products that are part of the proposed solution.</p>
    pub aws_products: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies the partner solutions related to the opportunity. These solutions represent the partner's offerings that are being positioned as part of the overall AWS opportunity.</p>
    pub solutions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AwsOpportunityRelatedEntities {
    /// <p>Specifies the AWS products associated with the opportunity. This field helps track the specific products that are part of the proposed solution.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.aws_products.is_none()`.
    pub fn aws_products(&self) -> &[::std::string::String] {
        self.aws_products.as_deref().unwrap_or_default()
    }
    /// <p>Specifies the partner solutions related to the opportunity. These solutions represent the partner's offerings that are being positioned as part of the overall AWS opportunity.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.solutions.is_none()`.
    pub fn solutions(&self) -> &[::std::string::String] {
        self.solutions.as_deref().unwrap_or_default()
    }
}
impl AwsOpportunityRelatedEntities {
    /// Creates a new builder-style object to manufacture [`AwsOpportunityRelatedEntities`](crate::types::AwsOpportunityRelatedEntities).
    pub fn builder() -> crate::types::builders::AwsOpportunityRelatedEntitiesBuilder {
        crate::types::builders::AwsOpportunityRelatedEntitiesBuilder::default()
    }
}

/// A builder for [`AwsOpportunityRelatedEntities`](crate::types::AwsOpportunityRelatedEntities).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AwsOpportunityRelatedEntitiesBuilder {
    pub(crate) aws_products: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) solutions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AwsOpportunityRelatedEntitiesBuilder {
    /// Appends an item to `aws_products`.
    ///
    /// To override the contents of this collection use [`set_aws_products`](Self::set_aws_products).
    ///
    /// <p>Specifies the AWS products associated with the opportunity. This field helps track the specific products that are part of the proposed solution.</p>
    pub fn aws_products(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.aws_products.unwrap_or_default();
        v.push(input.into());
        self.aws_products = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the AWS products associated with the opportunity. This field helps track the specific products that are part of the proposed solution.</p>
    pub fn set_aws_products(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.aws_products = input;
        self
    }
    /// <p>Specifies the AWS products associated with the opportunity. This field helps track the specific products that are part of the proposed solution.</p>
    pub fn get_aws_products(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.aws_products
    }
    /// Appends an item to `solutions`.
    ///
    /// To override the contents of this collection use [`set_solutions`](Self::set_solutions).
    ///
    /// <p>Specifies the partner solutions related to the opportunity. These solutions represent the partner's offerings that are being positioned as part of the overall AWS opportunity.</p>
    pub fn solutions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.solutions.unwrap_or_default();
        v.push(input.into());
        self.solutions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the partner solutions related to the opportunity. These solutions represent the partner's offerings that are being positioned as part of the overall AWS opportunity.</p>
    pub fn set_solutions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.solutions = input;
        self
    }
    /// <p>Specifies the partner solutions related to the opportunity. These solutions represent the partner's offerings that are being positioned as part of the overall AWS opportunity.</p>
    pub fn get_solutions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.solutions
    }
    /// Consumes the builder and constructs a [`AwsOpportunityRelatedEntities`](crate::types::AwsOpportunityRelatedEntities).
    pub fn build(self) -> crate::types::AwsOpportunityRelatedEntities {
        crate::types::AwsOpportunityRelatedEntities {
            aws_products: self.aws_products,
            solutions: self.solutions,
        }
    }
}
