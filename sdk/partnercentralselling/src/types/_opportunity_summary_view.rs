// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a comprehensive view of an opportunity summary, including lifecycle information, team details, opportunity type, primary needs from AWS, and associated project information.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OpportunitySummaryView {
    /// <p>Specifies the opportunity type.</p>
    pub opportunity_type: ::std::option::Option<crate::types::OpportunityType>,
    /// <p>Contains information about the opportunity's lifecycle, including its current stage, status, and important dates such as creation and last modification times.</p>
    pub lifecycle: ::std::option::Option<crate::types::LifeCycleForView>,
    /// <p>Represents the internal team handling the opportunity. Specify the members involved in collaborating on an opportunity within the partner's organization.</p>
    pub opportunity_team: ::std::option::Option<::std::vec::Vec<crate::types::Contact>>,
    /// <p>Identifies the type of support the partner needs from AWS.</p>
    pub primary_needs_from_aws: ::std::option::Option<::std::vec::Vec<crate::types::PrimaryNeedFromAws>>,
    /// <p>An object that contains the customer's <code>Account</code> and <code>Contact</code>.</p>
    pub customer: ::std::option::Option<crate::types::Customer>,
    /// <p>Contains summary information about the project associated with the opportunity, including project name, description, timeline, and other relevant details.</p>
    pub project: ::std::option::Option<crate::types::ProjectView>,
    /// <p>This field provides the associations' information for other entities with the opportunity. These entities include identifiers for <code>AWSProducts</code>, <code>Partner Solutions</code>, and <code>AWSMarketplaceOffers</code>.</p>
    pub related_entity_identifiers: ::std::option::Option<crate::types::RelatedEntityIdentifiers>,
}
impl OpportunitySummaryView {
    /// <p>Specifies the opportunity type.</p>
    pub fn opportunity_type(&self) -> ::std::option::Option<&crate::types::OpportunityType> {
        self.opportunity_type.as_ref()
    }
    /// <p>Contains information about the opportunity's lifecycle, including its current stage, status, and important dates such as creation and last modification times.</p>
    pub fn lifecycle(&self) -> ::std::option::Option<&crate::types::LifeCycleForView> {
        self.lifecycle.as_ref()
    }
    /// <p>Represents the internal team handling the opportunity. Specify the members involved in collaborating on an opportunity within the partner's organization.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.opportunity_team.is_none()`.
    pub fn opportunity_team(&self) -> &[crate::types::Contact] {
        self.opportunity_team.as_deref().unwrap_or_default()
    }
    /// <p>Identifies the type of support the partner needs from AWS.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.primary_needs_from_aws.is_none()`.
    pub fn primary_needs_from_aws(&self) -> &[crate::types::PrimaryNeedFromAws] {
        self.primary_needs_from_aws.as_deref().unwrap_or_default()
    }
    /// <p>An object that contains the customer's <code>Account</code> and <code>Contact</code>.</p>
    pub fn customer(&self) -> ::std::option::Option<&crate::types::Customer> {
        self.customer.as_ref()
    }
    /// <p>Contains summary information about the project associated with the opportunity, including project name, description, timeline, and other relevant details.</p>
    pub fn project(&self) -> ::std::option::Option<&crate::types::ProjectView> {
        self.project.as_ref()
    }
    /// <p>This field provides the associations' information for other entities with the opportunity. These entities include identifiers for <code>AWSProducts</code>, <code>Partner Solutions</code>, and <code>AWSMarketplaceOffers</code>.</p>
    pub fn related_entity_identifiers(&self) -> ::std::option::Option<&crate::types::RelatedEntityIdentifiers> {
        self.related_entity_identifiers.as_ref()
    }
}
impl OpportunitySummaryView {
    /// Creates a new builder-style object to manufacture [`OpportunitySummaryView`](crate::types::OpportunitySummaryView).
    pub fn builder() -> crate::types::builders::OpportunitySummaryViewBuilder {
        crate::types::builders::OpportunitySummaryViewBuilder::default()
    }
}

/// A builder for [`OpportunitySummaryView`](crate::types::OpportunitySummaryView).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OpportunitySummaryViewBuilder {
    pub(crate) opportunity_type: ::std::option::Option<crate::types::OpportunityType>,
    pub(crate) lifecycle: ::std::option::Option<crate::types::LifeCycleForView>,
    pub(crate) opportunity_team: ::std::option::Option<::std::vec::Vec<crate::types::Contact>>,
    pub(crate) primary_needs_from_aws: ::std::option::Option<::std::vec::Vec<crate::types::PrimaryNeedFromAws>>,
    pub(crate) customer: ::std::option::Option<crate::types::Customer>,
    pub(crate) project: ::std::option::Option<crate::types::ProjectView>,
    pub(crate) related_entity_identifiers: ::std::option::Option<crate::types::RelatedEntityIdentifiers>,
}
impl OpportunitySummaryViewBuilder {
    /// <p>Specifies the opportunity type.</p>
    pub fn opportunity_type(mut self, input: crate::types::OpportunityType) -> Self {
        self.opportunity_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the opportunity type.</p>
    pub fn set_opportunity_type(mut self, input: ::std::option::Option<crate::types::OpportunityType>) -> Self {
        self.opportunity_type = input;
        self
    }
    /// <p>Specifies the opportunity type.</p>
    pub fn get_opportunity_type(&self) -> &::std::option::Option<crate::types::OpportunityType> {
        &self.opportunity_type
    }
    /// <p>Contains information about the opportunity's lifecycle, including its current stage, status, and important dates such as creation and last modification times.</p>
    pub fn lifecycle(mut self, input: crate::types::LifeCycleForView) -> Self {
        self.lifecycle = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the opportunity's lifecycle, including its current stage, status, and important dates such as creation and last modification times.</p>
    pub fn set_lifecycle(mut self, input: ::std::option::Option<crate::types::LifeCycleForView>) -> Self {
        self.lifecycle = input;
        self
    }
    /// <p>Contains information about the opportunity's lifecycle, including its current stage, status, and important dates such as creation and last modification times.</p>
    pub fn get_lifecycle(&self) -> &::std::option::Option<crate::types::LifeCycleForView> {
        &self.lifecycle
    }
    /// Appends an item to `opportunity_team`.
    ///
    /// To override the contents of this collection use [`set_opportunity_team`](Self::set_opportunity_team).
    ///
    /// <p>Represents the internal team handling the opportunity. Specify the members involved in collaborating on an opportunity within the partner's organization.</p>
    pub fn opportunity_team(mut self, input: crate::types::Contact) -> Self {
        let mut v = self.opportunity_team.unwrap_or_default();
        v.push(input);
        self.opportunity_team = ::std::option::Option::Some(v);
        self
    }
    /// <p>Represents the internal team handling the opportunity. Specify the members involved in collaborating on an opportunity within the partner's organization.</p>
    pub fn set_opportunity_team(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Contact>>) -> Self {
        self.opportunity_team = input;
        self
    }
    /// <p>Represents the internal team handling the opportunity. Specify the members involved in collaborating on an opportunity within the partner's organization.</p>
    pub fn get_opportunity_team(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Contact>> {
        &self.opportunity_team
    }
    /// Appends an item to `primary_needs_from_aws`.
    ///
    /// To override the contents of this collection use [`set_primary_needs_from_aws`](Self::set_primary_needs_from_aws).
    ///
    /// <p>Identifies the type of support the partner needs from AWS.</p>
    pub fn primary_needs_from_aws(mut self, input: crate::types::PrimaryNeedFromAws) -> Self {
        let mut v = self.primary_needs_from_aws.unwrap_or_default();
        v.push(input);
        self.primary_needs_from_aws = ::std::option::Option::Some(v);
        self
    }
    /// <p>Identifies the type of support the partner needs from AWS.</p>
    pub fn set_primary_needs_from_aws(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PrimaryNeedFromAws>>) -> Self {
        self.primary_needs_from_aws = input;
        self
    }
    /// <p>Identifies the type of support the partner needs from AWS.</p>
    pub fn get_primary_needs_from_aws(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PrimaryNeedFromAws>> {
        &self.primary_needs_from_aws
    }
    /// <p>An object that contains the customer's <code>Account</code> and <code>Contact</code>.</p>
    pub fn customer(mut self, input: crate::types::Customer) -> Self {
        self.customer = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains the customer's <code>Account</code> and <code>Contact</code>.</p>
    pub fn set_customer(mut self, input: ::std::option::Option<crate::types::Customer>) -> Self {
        self.customer = input;
        self
    }
    /// <p>An object that contains the customer's <code>Account</code> and <code>Contact</code>.</p>
    pub fn get_customer(&self) -> &::std::option::Option<crate::types::Customer> {
        &self.customer
    }
    /// <p>Contains summary information about the project associated with the opportunity, including project name, description, timeline, and other relevant details.</p>
    pub fn project(mut self, input: crate::types::ProjectView) -> Self {
        self.project = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains summary information about the project associated with the opportunity, including project name, description, timeline, and other relevant details.</p>
    pub fn set_project(mut self, input: ::std::option::Option<crate::types::ProjectView>) -> Self {
        self.project = input;
        self
    }
    /// <p>Contains summary information about the project associated with the opportunity, including project name, description, timeline, and other relevant details.</p>
    pub fn get_project(&self) -> &::std::option::Option<crate::types::ProjectView> {
        &self.project
    }
    /// <p>This field provides the associations' information for other entities with the opportunity. These entities include identifiers for <code>AWSProducts</code>, <code>Partner Solutions</code>, and <code>AWSMarketplaceOffers</code>.</p>
    pub fn related_entity_identifiers(mut self, input: crate::types::RelatedEntityIdentifiers) -> Self {
        self.related_entity_identifiers = ::std::option::Option::Some(input);
        self
    }
    /// <p>This field provides the associations' information for other entities with the opportunity. These entities include identifiers for <code>AWSProducts</code>, <code>Partner Solutions</code>, and <code>AWSMarketplaceOffers</code>.</p>
    pub fn set_related_entity_identifiers(mut self, input: ::std::option::Option<crate::types::RelatedEntityIdentifiers>) -> Self {
        self.related_entity_identifiers = input;
        self
    }
    /// <p>This field provides the associations' information for other entities with the opportunity. These entities include identifiers for <code>AWSProducts</code>, <code>Partner Solutions</code>, and <code>AWSMarketplaceOffers</code>.</p>
    pub fn get_related_entity_identifiers(&self) -> &::std::option::Option<crate::types::RelatedEntityIdentifiers> {
        &self.related_entity_identifiers
    }
    /// Consumes the builder and constructs a [`OpportunitySummaryView`](crate::types::OpportunitySummaryView).
    pub fn build(self) -> crate::types::OpportunitySummaryView {
        crate::types::OpportunitySummaryView {
            opportunity_type: self.opportunity_type,
            lifecycle: self.lifecycle,
            opportunity_team: self.opportunity_team,
            primary_needs_from_aws: self.primary_needs_from_aws,
            customer: self.customer,
            project: self.project,
            related_entity_identifiers: self.related_entity_identifiers,
        }
    }
}
