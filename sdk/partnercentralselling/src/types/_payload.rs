// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the data payload associated with the Engagement Invitation. This payload includes essential details related to the AWS opportunity and is used by partners to evaluate whether to accept or reject the engagement.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum Payload {
    /// <p>Specifies the details of the opportunity invitation within the Engagement Invitation payload. This data helps partners understand the context, scope, and expected involvement for the opportunity from AWS.</p>
    OpportunityInvitation(crate::types::OpportunityInvitationPayload),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl Payload {
    #[allow(irrefutable_let_patterns)]
    /// Tries to convert the enum instance into [`OpportunityInvitation`](crate::types::Payload::OpportunityInvitation), extracting the inner [`OpportunityInvitationPayload`](crate::types::OpportunityInvitationPayload).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_opportunity_invitation(&self) -> ::std::result::Result<&crate::types::OpportunityInvitationPayload, &Self> {
        if let Payload::OpportunityInvitation(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`OpportunityInvitation`](crate::types::Payload::OpportunityInvitation).
    pub fn is_opportunity_invitation(&self) -> bool {
        self.as_opportunity_invitation().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
