// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the account details of the partner who received the Engagement Invitation, including the AWS account ID and company name.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AccountReceiver {
    /// <p>Represents the alias of the partner account receiving the Engagement Invitation, making it easier to identify and track the recipient in reports or logs.</p>
    pub alias: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the AWS account ID of the partner who received the Engagement Invitation. This is a unique identifier for managing engagements with specific AWS accounts.</p>
    pub aws_account_id: ::std::string::String,
}
impl AccountReceiver {
    /// <p>Represents the alias of the partner account receiving the Engagement Invitation, making it easier to identify and track the recipient in reports or logs.</p>
    pub fn alias(&self) -> ::std::option::Option<&str> {
        self.alias.as_deref()
    }
    /// <p>Indicates the AWS account ID of the partner who received the Engagement Invitation. This is a unique identifier for managing engagements with specific AWS accounts.</p>
    pub fn aws_account_id(&self) -> &str {
        use std::ops::Deref;
        self.aws_account_id.deref()
    }
}
impl ::std::fmt::Debug for AccountReceiver {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AccountReceiver");
        formatter.field("alias", &"*** Sensitive Data Redacted ***");
        formatter.field("aws_account_id", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AccountReceiver {
    /// Creates a new builder-style object to manufacture [`AccountReceiver`](crate::types::AccountReceiver).
    pub fn builder() -> crate::types::builders::AccountReceiverBuilder {
        crate::types::builders::AccountReceiverBuilder::default()
    }
}

/// A builder for [`AccountReceiver`](crate::types::AccountReceiver).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AccountReceiverBuilder {
    pub(crate) alias: ::std::option::Option<::std::string::String>,
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
}
impl AccountReceiverBuilder {
    /// <p>Represents the alias of the partner account receiving the Engagement Invitation, making it easier to identify and track the recipient in reports or logs.</p>
    pub fn alias(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.alias = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Represents the alias of the partner account receiving the Engagement Invitation, making it easier to identify and track the recipient in reports or logs.</p>
    pub fn set_alias(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.alias = input;
        self
    }
    /// <p>Represents the alias of the partner account receiving the Engagement Invitation, making it easier to identify and track the recipient in reports or logs.</p>
    pub fn get_alias(&self) -> &::std::option::Option<::std::string::String> {
        &self.alias
    }
    /// <p>Indicates the AWS account ID of the partner who received the Engagement Invitation. This is a unique identifier for managing engagements with specific AWS accounts.</p>
    /// This field is required.
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates the AWS account ID of the partner who received the Engagement Invitation. This is a unique identifier for managing engagements with specific AWS accounts.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>Indicates the AWS account ID of the partner who received the Engagement Invitation. This is a unique identifier for managing engagements with specific AWS accounts.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// Consumes the builder and constructs a [`AccountReceiver`](crate::types::AccountReceiver).
    /// This method will fail if any of the following fields are not set:
    /// - [`aws_account_id`](crate::types::builders::AccountReceiverBuilder::aws_account_id)
    pub fn build(self) -> ::std::result::Result<crate::types::AccountReceiver, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AccountReceiver {
            alias: self.alias,
            aws_account_id: self.aws_account_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "aws_account_id",
                    "aws_account_id was not specified but it is required when building AccountReceiver",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for AccountReceiverBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AccountReceiverBuilder");
        formatter.field("alias", &"*** Sensitive Data Redacted ***");
        formatter.field("aws_account_id", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
