// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains the <code>Opportunity</code>'s project details.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Project {
    /// <p>Specifies the deployment or consumption model for your solution or service in the <code>Opportunity</code>'s context. You can select multiple options.</p>
    /// <p>Options' descriptions from the <code>Delivery Model</code> field are:</p>
    /// <ul>
    /// <li>
    /// <p>SaaS or PaaS: Your Amazon Web Services based solution deployed as SaaS or PaaS in your Amazon Web Services environment.</p></li>
    /// <li>
    /// <p>BYOL or AMI: Your Amazon Web Services based solution deployed as BYOL or AMI in the end customer's Amazon Web Services environment.</p></li>
    /// <li>
    /// <p>Managed Services: The end customer's Amazon Web Services business management (For example: Consulting, design, implementation, billing support, cost optimization, technical support).</p></li>
    /// <li>
    /// <p>Professional Services: Offerings to help enterprise end customers achieve specific business outcomes for enterprise cloud adoption (For example: Advisory or transformation planning).</p></li>
    /// <li>
    /// <p>Resell: Amazon Web Services accounts and billing management for your customers.</p></li>
    /// <li>
    /// <p>Other: Delivery model not described above.</p></li>
    /// </ul>
    pub delivery_models: ::std::option::Option<::std::vec::Vec<crate::types::DeliveryModel>>,
    /// <p>Represents the estimated amount that the customer is expected to spend on AWS services related to the opportunity. This helps in evaluating the potential financial value of the opportunity for AWS.</p>
    pub expected_customer_spend: ::std::option::Option<::std::vec::Vec<crate::types::ExpectedCustomerSpend>>,
    /// <p>Specifies the <code>Opportunity</code>'s title or name.</p>
    pub title: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the Amazon Partner Network (APN) program that influenced the <code>Opportunity</code>. APN programs refer to specific partner programs or initiatives that can impact the <code>Opportunity</code>.</p>
    /// <p>Valid values: <code>APN Immersion Days | APN Solution Space | ATO (Authority to Operate) | AWS Marketplace Campaign | IS Immersion Day SFID Program | ISV Workload Migration | Migration Acceleration Program | P3 | Partner Launch Initiative | Partner Opportunity Acceleration Funded | The Next Smart | VMware Cloud on AWS | Well-Architected | Windows | Workspaces/AppStream Accelerator Program | WWPS NDPP</code></p>
    pub apn_programs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Describes the problem the end customer has, and how the partner is helping. Utilize this field to provide a concise narrative that outlines the customer's business challenge or issue. Elaborate on how the partner's solution or offerings align to resolve the customer's business problem. Include relevant information about the partner's value proposition, unique selling points, and expertise to tackle the issue. Offer insights on how the proposed solution meets the customer's needs and provides value. Use concise language and precise descriptions to convey the context and significance of the <code>Opportunity</code>. The content in this field helps Amazon Web Services understand the nature of the <code>Opportunity</code> and the strategic fit of the partner's solution.</p>
    pub customer_business_problem: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the proposed solution focus or type of workload for the Opportunity. This field captures the primary use case or objective of the proposed solution, and provides context and clarity to the addressed workload.</p>
    /// <p>Valid values: <code>AI Machine Learning and Analytics | Archiving | Big Data: Data Warehouse/Data Integration/ETL/Data Lake/BI | Blockchain | Business Applications: Mainframe Modernization | Business Applications &amp; Contact Center | Business Applications &amp; SAP Production | Centralized Operations Management | Cloud Management Tools | Cloud Management Tools &amp; DevOps with Continuous Integration &amp; Continuous Delivery (CICD) | Configuration, Compliance &amp; Auditing | Connected Services | Containers &amp; Serverless | Content Delivery &amp; Edge Services | Database | Edge Computing/End User Computing | Energy | Enterprise Governance &amp; Controls | Enterprise Resource Planning | Financial Services | Healthcare and Life Sciences | High Performance Computing | Hybrid Application Platform | Industrial Software | IOT | Manufacturing, Supply Chain and Operations | Media &amp; High performance computing (HPC) | Migration/Database Migration | Monitoring, logging and performance | Monitoring &amp; Observability | Networking | Outpost | SAP | Security &amp; Compliance | Storage &amp; Backup | Training | VMC | VMWare | Web development &amp; DevOps</code></p>
    pub customer_use_case: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the current opportunity's parent opportunity identifier.</p>
    pub related_opportunity_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the <code>Opportunity</code>'s sales activities conducted with the end customer. These activities help drive Amazon Web Services assignment priority.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p>Initialized discussions with customer: Initial conversations with the customer to understand their needs and introduce your solution.</p></li>
    /// <li>
    /// <p>Customer has shown interest in solution: After initial discussions, the customer is interested in your solution.</p></li>
    /// <li>
    /// <p>Conducted POC/demo: You conducted a proof of concept (POC) or demonstration of the solution for the customer.</p></li>
    /// <li>
    /// <p>In evaluation/planning stage: The customer is evaluating the solution and planning potential implementation.</p></li>
    /// <li>
    /// <p>Agreed on solution to Business Problem: Both parties agree on how the solution addresses the customer's business problem.</p></li>
    /// <li>
    /// <p>Completed Action Plan: A detailed action plan is complete and outlines the steps for implementation.</p></li>
    /// <li>
    /// <p>Finalized Deployment Need: Both parties agree with and finalized the deployment needs.</p></li>
    /// <li>
    /// <p>SOW Signed: Both parties signed a statement of work (SOW), and formalize the agreement and detail the project scope and deliverables.</p></li>
    /// </ul>
    pub sales_activities: ::std::option::Option<::std::vec::Vec<crate::types::SalesActivity>>,
    /// <p>Name of the <code>Opportunity</code>'s competitor (if any). Use <code>Other</code> to submit a value not in the picklist.</p>
    pub competitor_name: ::std::option::Option<crate::types::CompetitorName>,
    /// <p>Only allowed when <code>CompetitorNames</code> has <code>Other</code> selected.</p>
    pub other_competitor_names: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the offered solution for the customer's business problem when the <code> RelatedEntityIdentifiers.Solutions</code> field value is <code>Other</code>.</p>
    pub other_solution_description: ::std::option::Option<::std::string::String>,
    /// <p>Captures additional comments or information for the <code>Opportunity</code> that weren't captured in other fields.</p>
    pub additional_comments: ::std::option::Option<::std::string::String>,
}
impl Project {
    /// <p>Specifies the deployment or consumption model for your solution or service in the <code>Opportunity</code>'s context. You can select multiple options.</p>
    /// <p>Options' descriptions from the <code>Delivery Model</code> field are:</p>
    /// <ul>
    /// <li>
    /// <p>SaaS or PaaS: Your Amazon Web Services based solution deployed as SaaS or PaaS in your Amazon Web Services environment.</p></li>
    /// <li>
    /// <p>BYOL or AMI: Your Amazon Web Services based solution deployed as BYOL or AMI in the end customer's Amazon Web Services environment.</p></li>
    /// <li>
    /// <p>Managed Services: The end customer's Amazon Web Services business management (For example: Consulting, design, implementation, billing support, cost optimization, technical support).</p></li>
    /// <li>
    /// <p>Professional Services: Offerings to help enterprise end customers achieve specific business outcomes for enterprise cloud adoption (For example: Advisory or transformation planning).</p></li>
    /// <li>
    /// <p>Resell: Amazon Web Services accounts and billing management for your customers.</p></li>
    /// <li>
    /// <p>Other: Delivery model not described above.</p></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.delivery_models.is_none()`.
    pub fn delivery_models(&self) -> &[crate::types::DeliveryModel] {
        self.delivery_models.as_deref().unwrap_or_default()
    }
    /// <p>Represents the estimated amount that the customer is expected to spend on AWS services related to the opportunity. This helps in evaluating the potential financial value of the opportunity for AWS.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.expected_customer_spend.is_none()`.
    pub fn expected_customer_spend(&self) -> &[crate::types::ExpectedCustomerSpend] {
        self.expected_customer_spend.as_deref().unwrap_or_default()
    }
    /// <p>Specifies the <code>Opportunity</code>'s title or name.</p>
    pub fn title(&self) -> ::std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>Specifies the Amazon Partner Network (APN) program that influenced the <code>Opportunity</code>. APN programs refer to specific partner programs or initiatives that can impact the <code>Opportunity</code>.</p>
    /// <p>Valid values: <code>APN Immersion Days | APN Solution Space | ATO (Authority to Operate) | AWS Marketplace Campaign | IS Immersion Day SFID Program | ISV Workload Migration | Migration Acceleration Program | P3 | Partner Launch Initiative | Partner Opportunity Acceleration Funded | The Next Smart | VMware Cloud on AWS | Well-Architected | Windows | Workspaces/AppStream Accelerator Program | WWPS NDPP</code></p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.apn_programs.is_none()`.
    pub fn apn_programs(&self) -> &[::std::string::String] {
        self.apn_programs.as_deref().unwrap_or_default()
    }
    /// <p>Describes the problem the end customer has, and how the partner is helping. Utilize this field to provide a concise narrative that outlines the customer's business challenge or issue. Elaborate on how the partner's solution or offerings align to resolve the customer's business problem. Include relevant information about the partner's value proposition, unique selling points, and expertise to tackle the issue. Offer insights on how the proposed solution meets the customer's needs and provides value. Use concise language and precise descriptions to convey the context and significance of the <code>Opportunity</code>. The content in this field helps Amazon Web Services understand the nature of the <code>Opportunity</code> and the strategic fit of the partner's solution.</p>
    pub fn customer_business_problem(&self) -> ::std::option::Option<&str> {
        self.customer_business_problem.as_deref()
    }
    /// <p>Specifies the proposed solution focus or type of workload for the Opportunity. This field captures the primary use case or objective of the proposed solution, and provides context and clarity to the addressed workload.</p>
    /// <p>Valid values: <code>AI Machine Learning and Analytics | Archiving | Big Data: Data Warehouse/Data Integration/ETL/Data Lake/BI | Blockchain | Business Applications: Mainframe Modernization | Business Applications &amp; Contact Center | Business Applications &amp; SAP Production | Centralized Operations Management | Cloud Management Tools | Cloud Management Tools &amp; DevOps with Continuous Integration &amp; Continuous Delivery (CICD) | Configuration, Compliance &amp; Auditing | Connected Services | Containers &amp; Serverless | Content Delivery &amp; Edge Services | Database | Edge Computing/End User Computing | Energy | Enterprise Governance &amp; Controls | Enterprise Resource Planning | Financial Services | Healthcare and Life Sciences | High Performance Computing | Hybrid Application Platform | Industrial Software | IOT | Manufacturing, Supply Chain and Operations | Media &amp; High performance computing (HPC) | Migration/Database Migration | Monitoring, logging and performance | Monitoring &amp; Observability | Networking | Outpost | SAP | Security &amp; Compliance | Storage &amp; Backup | Training | VMC | VMWare | Web development &amp; DevOps</code></p>
    pub fn customer_use_case(&self) -> ::std::option::Option<&str> {
        self.customer_use_case.as_deref()
    }
    /// <p>Specifies the current opportunity's parent opportunity identifier.</p>
    pub fn related_opportunity_identifier(&self) -> ::std::option::Option<&str> {
        self.related_opportunity_identifier.as_deref()
    }
    /// <p>Specifies the <code>Opportunity</code>'s sales activities conducted with the end customer. These activities help drive Amazon Web Services assignment priority.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p>Initialized discussions with customer: Initial conversations with the customer to understand their needs and introduce your solution.</p></li>
    /// <li>
    /// <p>Customer has shown interest in solution: After initial discussions, the customer is interested in your solution.</p></li>
    /// <li>
    /// <p>Conducted POC/demo: You conducted a proof of concept (POC) or demonstration of the solution for the customer.</p></li>
    /// <li>
    /// <p>In evaluation/planning stage: The customer is evaluating the solution and planning potential implementation.</p></li>
    /// <li>
    /// <p>Agreed on solution to Business Problem: Both parties agree on how the solution addresses the customer's business problem.</p></li>
    /// <li>
    /// <p>Completed Action Plan: A detailed action plan is complete and outlines the steps for implementation.</p></li>
    /// <li>
    /// <p>Finalized Deployment Need: Both parties agree with and finalized the deployment needs.</p></li>
    /// <li>
    /// <p>SOW Signed: Both parties signed a statement of work (SOW), and formalize the agreement and detail the project scope and deliverables.</p></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sales_activities.is_none()`.
    pub fn sales_activities(&self) -> &[crate::types::SalesActivity] {
        self.sales_activities.as_deref().unwrap_or_default()
    }
    /// <p>Name of the <code>Opportunity</code>'s competitor (if any). Use <code>Other</code> to submit a value not in the picklist.</p>
    pub fn competitor_name(&self) -> ::std::option::Option<&crate::types::CompetitorName> {
        self.competitor_name.as_ref()
    }
    /// <p>Only allowed when <code>CompetitorNames</code> has <code>Other</code> selected.</p>
    pub fn other_competitor_names(&self) -> ::std::option::Option<&str> {
        self.other_competitor_names.as_deref()
    }
    /// <p>Specifies the offered solution for the customer's business problem when the <code> RelatedEntityIdentifiers.Solutions</code> field value is <code>Other</code>.</p>
    pub fn other_solution_description(&self) -> ::std::option::Option<&str> {
        self.other_solution_description.as_deref()
    }
    /// <p>Captures additional comments or information for the <code>Opportunity</code> that weren't captured in other fields.</p>
    pub fn additional_comments(&self) -> ::std::option::Option<&str> {
        self.additional_comments.as_deref()
    }
}
impl ::std::fmt::Debug for Project {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Project");
        formatter.field("delivery_models", &self.delivery_models);
        formatter.field("expected_customer_spend", &self.expected_customer_spend);
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("apn_programs", &self.apn_programs);
        formatter.field("customer_business_problem", &"*** Sensitive Data Redacted ***");
        formatter.field("customer_use_case", &self.customer_use_case);
        formatter.field("related_opportunity_identifier", &self.related_opportunity_identifier);
        formatter.field("sales_activities", &self.sales_activities);
        formatter.field("competitor_name", &self.competitor_name);
        formatter.field("other_competitor_names", &self.other_competitor_names);
        formatter.field("other_solution_description", &"*** Sensitive Data Redacted ***");
        formatter.field("additional_comments", &self.additional_comments);
        formatter.finish()
    }
}
impl Project {
    /// Creates a new builder-style object to manufacture [`Project`](crate::types::Project).
    pub fn builder() -> crate::types::builders::ProjectBuilder {
        crate::types::builders::ProjectBuilder::default()
    }
}

/// A builder for [`Project`](crate::types::Project).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ProjectBuilder {
    pub(crate) delivery_models: ::std::option::Option<::std::vec::Vec<crate::types::DeliveryModel>>,
    pub(crate) expected_customer_spend: ::std::option::Option<::std::vec::Vec<crate::types::ExpectedCustomerSpend>>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) apn_programs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) customer_business_problem: ::std::option::Option<::std::string::String>,
    pub(crate) customer_use_case: ::std::option::Option<::std::string::String>,
    pub(crate) related_opportunity_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) sales_activities: ::std::option::Option<::std::vec::Vec<crate::types::SalesActivity>>,
    pub(crate) competitor_name: ::std::option::Option<crate::types::CompetitorName>,
    pub(crate) other_competitor_names: ::std::option::Option<::std::string::String>,
    pub(crate) other_solution_description: ::std::option::Option<::std::string::String>,
    pub(crate) additional_comments: ::std::option::Option<::std::string::String>,
}
impl ProjectBuilder {
    /// Appends an item to `delivery_models`.
    ///
    /// To override the contents of this collection use [`set_delivery_models`](Self::set_delivery_models).
    ///
    /// <p>Specifies the deployment or consumption model for your solution or service in the <code>Opportunity</code>'s context. You can select multiple options.</p>
    /// <p>Options' descriptions from the <code>Delivery Model</code> field are:</p>
    /// <ul>
    /// <li>
    /// <p>SaaS or PaaS: Your Amazon Web Services based solution deployed as SaaS or PaaS in your Amazon Web Services environment.</p></li>
    /// <li>
    /// <p>BYOL or AMI: Your Amazon Web Services based solution deployed as BYOL or AMI in the end customer's Amazon Web Services environment.</p></li>
    /// <li>
    /// <p>Managed Services: The end customer's Amazon Web Services business management (For example: Consulting, design, implementation, billing support, cost optimization, technical support).</p></li>
    /// <li>
    /// <p>Professional Services: Offerings to help enterprise end customers achieve specific business outcomes for enterprise cloud adoption (For example: Advisory or transformation planning).</p></li>
    /// <li>
    /// <p>Resell: Amazon Web Services accounts and billing management for your customers.</p></li>
    /// <li>
    /// <p>Other: Delivery model not described above.</p></li>
    /// </ul>
    pub fn delivery_models(mut self, input: crate::types::DeliveryModel) -> Self {
        let mut v = self.delivery_models.unwrap_or_default();
        v.push(input);
        self.delivery_models = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the deployment or consumption model for your solution or service in the <code>Opportunity</code>'s context. You can select multiple options.</p>
    /// <p>Options' descriptions from the <code>Delivery Model</code> field are:</p>
    /// <ul>
    /// <li>
    /// <p>SaaS or PaaS: Your Amazon Web Services based solution deployed as SaaS or PaaS in your Amazon Web Services environment.</p></li>
    /// <li>
    /// <p>BYOL or AMI: Your Amazon Web Services based solution deployed as BYOL or AMI in the end customer's Amazon Web Services environment.</p></li>
    /// <li>
    /// <p>Managed Services: The end customer's Amazon Web Services business management (For example: Consulting, design, implementation, billing support, cost optimization, technical support).</p></li>
    /// <li>
    /// <p>Professional Services: Offerings to help enterprise end customers achieve specific business outcomes for enterprise cloud adoption (For example: Advisory or transformation planning).</p></li>
    /// <li>
    /// <p>Resell: Amazon Web Services accounts and billing management for your customers.</p></li>
    /// <li>
    /// <p>Other: Delivery model not described above.</p></li>
    /// </ul>
    pub fn set_delivery_models(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DeliveryModel>>) -> Self {
        self.delivery_models = input;
        self
    }
    /// <p>Specifies the deployment or consumption model for your solution or service in the <code>Opportunity</code>'s context. You can select multiple options.</p>
    /// <p>Options' descriptions from the <code>Delivery Model</code> field are:</p>
    /// <ul>
    /// <li>
    /// <p>SaaS or PaaS: Your Amazon Web Services based solution deployed as SaaS or PaaS in your Amazon Web Services environment.</p></li>
    /// <li>
    /// <p>BYOL or AMI: Your Amazon Web Services based solution deployed as BYOL or AMI in the end customer's Amazon Web Services environment.</p></li>
    /// <li>
    /// <p>Managed Services: The end customer's Amazon Web Services business management (For example: Consulting, design, implementation, billing support, cost optimization, technical support).</p></li>
    /// <li>
    /// <p>Professional Services: Offerings to help enterprise end customers achieve specific business outcomes for enterprise cloud adoption (For example: Advisory or transformation planning).</p></li>
    /// <li>
    /// <p>Resell: Amazon Web Services accounts and billing management for your customers.</p></li>
    /// <li>
    /// <p>Other: Delivery model not described above.</p></li>
    /// </ul>
    pub fn get_delivery_models(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DeliveryModel>> {
        &self.delivery_models
    }
    /// Appends an item to `expected_customer_spend`.
    ///
    /// To override the contents of this collection use [`set_expected_customer_spend`](Self::set_expected_customer_spend).
    ///
    /// <p>Represents the estimated amount that the customer is expected to spend on AWS services related to the opportunity. This helps in evaluating the potential financial value of the opportunity for AWS.</p>
    pub fn expected_customer_spend(mut self, input: crate::types::ExpectedCustomerSpend) -> Self {
        let mut v = self.expected_customer_spend.unwrap_or_default();
        v.push(input);
        self.expected_customer_spend = ::std::option::Option::Some(v);
        self
    }
    /// <p>Represents the estimated amount that the customer is expected to spend on AWS services related to the opportunity. This helps in evaluating the potential financial value of the opportunity for AWS.</p>
    pub fn set_expected_customer_spend(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ExpectedCustomerSpend>>) -> Self {
        self.expected_customer_spend = input;
        self
    }
    /// <p>Represents the estimated amount that the customer is expected to spend on AWS services related to the opportunity. This helps in evaluating the potential financial value of the opportunity for AWS.</p>
    pub fn get_expected_customer_spend(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ExpectedCustomerSpend>> {
        &self.expected_customer_spend
    }
    /// <p>Specifies the <code>Opportunity</code>'s title or name.</p>
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the <code>Opportunity</code>'s title or name.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>Specifies the <code>Opportunity</code>'s title or name.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// Appends an item to `apn_programs`.
    ///
    /// To override the contents of this collection use [`set_apn_programs`](Self::set_apn_programs).
    ///
    /// <p>Specifies the Amazon Partner Network (APN) program that influenced the <code>Opportunity</code>. APN programs refer to specific partner programs or initiatives that can impact the <code>Opportunity</code>.</p>
    /// <p>Valid values: <code>APN Immersion Days | APN Solution Space | ATO (Authority to Operate) | AWS Marketplace Campaign | IS Immersion Day SFID Program | ISV Workload Migration | Migration Acceleration Program | P3 | Partner Launch Initiative | Partner Opportunity Acceleration Funded | The Next Smart | VMware Cloud on AWS | Well-Architected | Windows | Workspaces/AppStream Accelerator Program | WWPS NDPP</code></p>
    pub fn apn_programs(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.apn_programs.unwrap_or_default();
        v.push(input.into());
        self.apn_programs = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the Amazon Partner Network (APN) program that influenced the <code>Opportunity</code>. APN programs refer to specific partner programs or initiatives that can impact the <code>Opportunity</code>.</p>
    /// <p>Valid values: <code>APN Immersion Days | APN Solution Space | ATO (Authority to Operate) | AWS Marketplace Campaign | IS Immersion Day SFID Program | ISV Workload Migration | Migration Acceleration Program | P3 | Partner Launch Initiative | Partner Opportunity Acceleration Funded | The Next Smart | VMware Cloud on AWS | Well-Architected | Windows | Workspaces/AppStream Accelerator Program | WWPS NDPP</code></p>
    pub fn set_apn_programs(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.apn_programs = input;
        self
    }
    /// <p>Specifies the Amazon Partner Network (APN) program that influenced the <code>Opportunity</code>. APN programs refer to specific partner programs or initiatives that can impact the <code>Opportunity</code>.</p>
    /// <p>Valid values: <code>APN Immersion Days | APN Solution Space | ATO (Authority to Operate) | AWS Marketplace Campaign | IS Immersion Day SFID Program | ISV Workload Migration | Migration Acceleration Program | P3 | Partner Launch Initiative | Partner Opportunity Acceleration Funded | The Next Smart | VMware Cloud on AWS | Well-Architected | Windows | Workspaces/AppStream Accelerator Program | WWPS NDPP</code></p>
    pub fn get_apn_programs(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.apn_programs
    }
    /// <p>Describes the problem the end customer has, and how the partner is helping. Utilize this field to provide a concise narrative that outlines the customer's business challenge or issue. Elaborate on how the partner's solution or offerings align to resolve the customer's business problem. Include relevant information about the partner's value proposition, unique selling points, and expertise to tackle the issue. Offer insights on how the proposed solution meets the customer's needs and provides value. Use concise language and precise descriptions to convey the context and significance of the <code>Opportunity</code>. The content in this field helps Amazon Web Services understand the nature of the <code>Opportunity</code> and the strategic fit of the partner's solution.</p>
    pub fn customer_business_problem(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_business_problem = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes the problem the end customer has, and how the partner is helping. Utilize this field to provide a concise narrative that outlines the customer's business challenge or issue. Elaborate on how the partner's solution or offerings align to resolve the customer's business problem. Include relevant information about the partner's value proposition, unique selling points, and expertise to tackle the issue. Offer insights on how the proposed solution meets the customer's needs and provides value. Use concise language and precise descriptions to convey the context and significance of the <code>Opportunity</code>. The content in this field helps Amazon Web Services understand the nature of the <code>Opportunity</code> and the strategic fit of the partner's solution.</p>
    pub fn set_customer_business_problem(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_business_problem = input;
        self
    }
    /// <p>Describes the problem the end customer has, and how the partner is helping. Utilize this field to provide a concise narrative that outlines the customer's business challenge or issue. Elaborate on how the partner's solution or offerings align to resolve the customer's business problem. Include relevant information about the partner's value proposition, unique selling points, and expertise to tackle the issue. Offer insights on how the proposed solution meets the customer's needs and provides value. Use concise language and precise descriptions to convey the context and significance of the <code>Opportunity</code>. The content in this field helps Amazon Web Services understand the nature of the <code>Opportunity</code> and the strategic fit of the partner's solution.</p>
    pub fn get_customer_business_problem(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_business_problem
    }
    /// <p>Specifies the proposed solution focus or type of workload for the Opportunity. This field captures the primary use case or objective of the proposed solution, and provides context and clarity to the addressed workload.</p>
    /// <p>Valid values: <code>AI Machine Learning and Analytics | Archiving | Big Data: Data Warehouse/Data Integration/ETL/Data Lake/BI | Blockchain | Business Applications: Mainframe Modernization | Business Applications &amp; Contact Center | Business Applications &amp; SAP Production | Centralized Operations Management | Cloud Management Tools | Cloud Management Tools &amp; DevOps with Continuous Integration &amp; Continuous Delivery (CICD) | Configuration, Compliance &amp; Auditing | Connected Services | Containers &amp; Serverless | Content Delivery &amp; Edge Services | Database | Edge Computing/End User Computing | Energy | Enterprise Governance &amp; Controls | Enterprise Resource Planning | Financial Services | Healthcare and Life Sciences | High Performance Computing | Hybrid Application Platform | Industrial Software | IOT | Manufacturing, Supply Chain and Operations | Media &amp; High performance computing (HPC) | Migration/Database Migration | Monitoring, logging and performance | Monitoring &amp; Observability | Networking | Outpost | SAP | Security &amp; Compliance | Storage &amp; Backup | Training | VMC | VMWare | Web development &amp; DevOps</code></p>
    pub fn customer_use_case(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_use_case = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the proposed solution focus or type of workload for the Opportunity. This field captures the primary use case or objective of the proposed solution, and provides context and clarity to the addressed workload.</p>
    /// <p>Valid values: <code>AI Machine Learning and Analytics | Archiving | Big Data: Data Warehouse/Data Integration/ETL/Data Lake/BI | Blockchain | Business Applications: Mainframe Modernization | Business Applications &amp; Contact Center | Business Applications &amp; SAP Production | Centralized Operations Management | Cloud Management Tools | Cloud Management Tools &amp; DevOps with Continuous Integration &amp; Continuous Delivery (CICD) | Configuration, Compliance &amp; Auditing | Connected Services | Containers &amp; Serverless | Content Delivery &amp; Edge Services | Database | Edge Computing/End User Computing | Energy | Enterprise Governance &amp; Controls | Enterprise Resource Planning | Financial Services | Healthcare and Life Sciences | High Performance Computing | Hybrid Application Platform | Industrial Software | IOT | Manufacturing, Supply Chain and Operations | Media &amp; High performance computing (HPC) | Migration/Database Migration | Monitoring, logging and performance | Monitoring &amp; Observability | Networking | Outpost | SAP | Security &amp; Compliance | Storage &amp; Backup | Training | VMC | VMWare | Web development &amp; DevOps</code></p>
    pub fn set_customer_use_case(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_use_case = input;
        self
    }
    /// <p>Specifies the proposed solution focus or type of workload for the Opportunity. This field captures the primary use case or objective of the proposed solution, and provides context and clarity to the addressed workload.</p>
    /// <p>Valid values: <code>AI Machine Learning and Analytics | Archiving | Big Data: Data Warehouse/Data Integration/ETL/Data Lake/BI | Blockchain | Business Applications: Mainframe Modernization | Business Applications &amp; Contact Center | Business Applications &amp; SAP Production | Centralized Operations Management | Cloud Management Tools | Cloud Management Tools &amp; DevOps with Continuous Integration &amp; Continuous Delivery (CICD) | Configuration, Compliance &amp; Auditing | Connected Services | Containers &amp; Serverless | Content Delivery &amp; Edge Services | Database | Edge Computing/End User Computing | Energy | Enterprise Governance &amp; Controls | Enterprise Resource Planning | Financial Services | Healthcare and Life Sciences | High Performance Computing | Hybrid Application Platform | Industrial Software | IOT | Manufacturing, Supply Chain and Operations | Media &amp; High performance computing (HPC) | Migration/Database Migration | Monitoring, logging and performance | Monitoring &amp; Observability | Networking | Outpost | SAP | Security &amp; Compliance | Storage &amp; Backup | Training | VMC | VMWare | Web development &amp; DevOps</code></p>
    pub fn get_customer_use_case(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_use_case
    }
    /// <p>Specifies the current opportunity's parent opportunity identifier.</p>
    pub fn related_opportunity_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.related_opportunity_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the current opportunity's parent opportunity identifier.</p>
    pub fn set_related_opportunity_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.related_opportunity_identifier = input;
        self
    }
    /// <p>Specifies the current opportunity's parent opportunity identifier.</p>
    pub fn get_related_opportunity_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.related_opportunity_identifier
    }
    /// Appends an item to `sales_activities`.
    ///
    /// To override the contents of this collection use [`set_sales_activities`](Self::set_sales_activities).
    ///
    /// <p>Specifies the <code>Opportunity</code>'s sales activities conducted with the end customer. These activities help drive Amazon Web Services assignment priority.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p>Initialized discussions with customer: Initial conversations with the customer to understand their needs and introduce your solution.</p></li>
    /// <li>
    /// <p>Customer has shown interest in solution: After initial discussions, the customer is interested in your solution.</p></li>
    /// <li>
    /// <p>Conducted POC/demo: You conducted a proof of concept (POC) or demonstration of the solution for the customer.</p></li>
    /// <li>
    /// <p>In evaluation/planning stage: The customer is evaluating the solution and planning potential implementation.</p></li>
    /// <li>
    /// <p>Agreed on solution to Business Problem: Both parties agree on how the solution addresses the customer's business problem.</p></li>
    /// <li>
    /// <p>Completed Action Plan: A detailed action plan is complete and outlines the steps for implementation.</p></li>
    /// <li>
    /// <p>Finalized Deployment Need: Both parties agree with and finalized the deployment needs.</p></li>
    /// <li>
    /// <p>SOW Signed: Both parties signed a statement of work (SOW), and formalize the agreement and detail the project scope and deliverables.</p></li>
    /// </ul>
    pub fn sales_activities(mut self, input: crate::types::SalesActivity) -> Self {
        let mut v = self.sales_activities.unwrap_or_default();
        v.push(input);
        self.sales_activities = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the <code>Opportunity</code>'s sales activities conducted with the end customer. These activities help drive Amazon Web Services assignment priority.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p>Initialized discussions with customer: Initial conversations with the customer to understand their needs and introduce your solution.</p></li>
    /// <li>
    /// <p>Customer has shown interest in solution: After initial discussions, the customer is interested in your solution.</p></li>
    /// <li>
    /// <p>Conducted POC/demo: You conducted a proof of concept (POC) or demonstration of the solution for the customer.</p></li>
    /// <li>
    /// <p>In evaluation/planning stage: The customer is evaluating the solution and planning potential implementation.</p></li>
    /// <li>
    /// <p>Agreed on solution to Business Problem: Both parties agree on how the solution addresses the customer's business problem.</p></li>
    /// <li>
    /// <p>Completed Action Plan: A detailed action plan is complete and outlines the steps for implementation.</p></li>
    /// <li>
    /// <p>Finalized Deployment Need: Both parties agree with and finalized the deployment needs.</p></li>
    /// <li>
    /// <p>SOW Signed: Both parties signed a statement of work (SOW), and formalize the agreement and detail the project scope and deliverables.</p></li>
    /// </ul>
    pub fn set_sales_activities(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SalesActivity>>) -> Self {
        self.sales_activities = input;
        self
    }
    /// <p>Specifies the <code>Opportunity</code>'s sales activities conducted with the end customer. These activities help drive Amazon Web Services assignment priority.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p>Initialized discussions with customer: Initial conversations with the customer to understand their needs and introduce your solution.</p></li>
    /// <li>
    /// <p>Customer has shown interest in solution: After initial discussions, the customer is interested in your solution.</p></li>
    /// <li>
    /// <p>Conducted POC/demo: You conducted a proof of concept (POC) or demonstration of the solution for the customer.</p></li>
    /// <li>
    /// <p>In evaluation/planning stage: The customer is evaluating the solution and planning potential implementation.</p></li>
    /// <li>
    /// <p>Agreed on solution to Business Problem: Both parties agree on how the solution addresses the customer's business problem.</p></li>
    /// <li>
    /// <p>Completed Action Plan: A detailed action plan is complete and outlines the steps for implementation.</p></li>
    /// <li>
    /// <p>Finalized Deployment Need: Both parties agree with and finalized the deployment needs.</p></li>
    /// <li>
    /// <p>SOW Signed: Both parties signed a statement of work (SOW), and formalize the agreement and detail the project scope and deliverables.</p></li>
    /// </ul>
    pub fn get_sales_activities(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SalesActivity>> {
        &self.sales_activities
    }
    /// <p>Name of the <code>Opportunity</code>'s competitor (if any). Use <code>Other</code> to submit a value not in the picklist.</p>
    pub fn competitor_name(mut self, input: crate::types::CompetitorName) -> Self {
        self.competitor_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>Name of the <code>Opportunity</code>'s competitor (if any). Use <code>Other</code> to submit a value not in the picklist.</p>
    pub fn set_competitor_name(mut self, input: ::std::option::Option<crate::types::CompetitorName>) -> Self {
        self.competitor_name = input;
        self
    }
    /// <p>Name of the <code>Opportunity</code>'s competitor (if any). Use <code>Other</code> to submit a value not in the picklist.</p>
    pub fn get_competitor_name(&self) -> &::std::option::Option<crate::types::CompetitorName> {
        &self.competitor_name
    }
    /// <p>Only allowed when <code>CompetitorNames</code> has <code>Other</code> selected.</p>
    pub fn other_competitor_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.other_competitor_names = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Only allowed when <code>CompetitorNames</code> has <code>Other</code> selected.</p>
    pub fn set_other_competitor_names(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.other_competitor_names = input;
        self
    }
    /// <p>Only allowed when <code>CompetitorNames</code> has <code>Other</code> selected.</p>
    pub fn get_other_competitor_names(&self) -> &::std::option::Option<::std::string::String> {
        &self.other_competitor_names
    }
    /// <p>Specifies the offered solution for the customer's business problem when the <code> RelatedEntityIdentifiers.Solutions</code> field value is <code>Other</code>.</p>
    pub fn other_solution_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.other_solution_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the offered solution for the customer's business problem when the <code> RelatedEntityIdentifiers.Solutions</code> field value is <code>Other</code>.</p>
    pub fn set_other_solution_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.other_solution_description = input;
        self
    }
    /// <p>Specifies the offered solution for the customer's business problem when the <code> RelatedEntityIdentifiers.Solutions</code> field value is <code>Other</code>.</p>
    pub fn get_other_solution_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.other_solution_description
    }
    /// <p>Captures additional comments or information for the <code>Opportunity</code> that weren't captured in other fields.</p>
    pub fn additional_comments(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.additional_comments = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Captures additional comments or information for the <code>Opportunity</code> that weren't captured in other fields.</p>
    pub fn set_additional_comments(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.additional_comments = input;
        self
    }
    /// <p>Captures additional comments or information for the <code>Opportunity</code> that weren't captured in other fields.</p>
    pub fn get_additional_comments(&self) -> &::std::option::Option<::std::string::String> {
        &self.additional_comments
    }
    /// Consumes the builder and constructs a [`Project`](crate::types::Project).
    pub fn build(self) -> crate::types::Project {
        crate::types::Project {
            delivery_models: self.delivery_models,
            expected_customer_spend: self.expected_customer_spend,
            title: self.title,
            apn_programs: self.apn_programs,
            customer_business_problem: self.customer_business_problem,
            customer_use_case: self.customer_use_case,
            related_opportunity_identifier: self.related_opportunity_identifier,
            sales_activities: self.sales_activities,
            competitor_name: self.competitor_name,
            other_competitor_names: self.other_competitor_names,
            other_solution_description: self.other_solution_description,
            additional_comments: self.additional_comments,
        }
    }
}
impl ::std::fmt::Debug for ProjectBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ProjectBuilder");
        formatter.field("delivery_models", &self.delivery_models);
        formatter.field("expected_customer_spend", &self.expected_customer_spend);
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("apn_programs", &self.apn_programs);
        formatter.field("customer_business_problem", &"*** Sensitive Data Redacted ***");
        formatter.field("customer_use_case", &self.customer_use_case);
        formatter.field("related_opportunity_identifier", &self.related_opportunity_identifier);
        formatter.field("sales_activities", &self.sales_activities);
        formatter.field("competitor_name", &self.competitor_name);
        formatter.field("other_competitor_names", &self.other_competitor_names);
        formatter.field("other_solution_description", &"*** Sensitive Data Redacted ***");
        formatter.field("additional_comments", &self.additional_comments);
        formatter.finish()
    }
}
