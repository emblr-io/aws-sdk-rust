// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains a <code>LifeCycle</code> object's subset of fields.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct LifeCycleSummary {
    /// <p>Specifies the current stage of the <code>Opportunity</code>'s lifecycle as it maps to Amazon Web Services stages from the current stage in the partner CRM. This field provides a translated value of the stage, and offers insight into the <code>Opportunity</code>'s progression in the sales cycle, according to Amazon Web Services definitions.</p><note>
    /// <p>A lead and a prospect must be further matured to a <code>Qualified</code> opportunity before submission. Opportunities that were closed/lost before submission aren't suitable for submission.</p>
    /// </note>
    /// <p>The descriptions of each sales stage are:</p>
    /// <ul>
    /// <li>
    /// <p>Prospect: Amazon Web Services identifies the opportunity. It can be active (Comes directly from the end customer through a lead) or latent (Your account team believes it exists based on research, account plans, sales plays).</p></li>
    /// <li>
    /// <p>Qualified: Your account team engaged with the customer to discuss viability and understand requirements. The customer agreed that the opportunity is real, of interest, and may solve business/technical needs.</p></li>
    /// <li>
    /// <p>Technical Validation: All parties understand the implementation plan.</p></li>
    /// <li>
    /// <p>Business Validation: Pricing was proposed, and all parties agree to the steps to close.</p></li>
    /// <li>
    /// <p>Committed: The customer signed the contract, but Amazon Web Services hasn't started billing.</p></li>
    /// <li>
    /// <p>Launched: The workload is complete, and Amazon Web Services has started billing.</p></li>
    /// <li>
    /// <p>Closed Lost: The opportunity is lost, and there are no steps to move forward.</p></li>
    /// </ul>
    pub stage: ::std::option::Option<crate::types::Stage>,
    /// <p>Specifies the reason code when an opportunity is marked as <i>Closed Lost</i>. When you select an appropriate reason code, you communicate the context for closing the <code>Opportunity</code>, and aid in accurate reports and analysis of opportunity outcomes.</p>
    pub closed_lost_reason: ::std::option::Option<crate::types::ClosedLostReason>,
    /// <p>Specifies the upcoming actions or tasks for the <code>Opportunity</code>. This field is utilized to communicate to Amazon Web Services the next actions required for the <code>Opportunity</code>.</p>
    pub next_steps: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the date when Amazon Web Services expects to start significant billing, when the project finishes, and when it moves into production. This field informs the Amazon Web Services seller about when the opportunity launches and starts to incur Amazon Web Services usage.</p>
    /// <p>Ensure the <code>Target Close Date</code> isn't in the past.</p>
    pub target_close_date: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the review status of a partner referred opportunity. This field is read-only and only applicable for partner referrals. Valid values:</p>
    /// <ul>
    /// <li>
    /// <p>Pending Submission: Not submitted for validation (editable).</p></li>
    /// <li>
    /// <p>Submitted: Submitted for validation and not yet Amazon Web Services reviewed (read-only).</p></li>
    /// <li>
    /// <p>In Review: Undergoing Amazon Web Services validation (read-only).</p></li>
    /// <li>
    /// <p>Action Required: Address any issues Amazon Web Services highlights. Use the <code>UpdateOpportunity</code> API action to update the opportunity, and ensure you make all required changes. Only these fields are editable when the <code>Lifecycle.ReviewStatus</code> is <code>Action Required</code>:</p>
    /// <ul>
    /// <li>
    /// <p>Customer.Account.Address.City</p></li>
    /// <li>
    /// <p>Customer.Account.Address.CountryCode</p></li>
    /// <li>
    /// <p>Customer.Account.Address.PostalCode</p></li>
    /// <li>
    /// <p>Customer.Account.Address.StateOrRegion</p></li>
    /// <li>
    /// <p>Customer.Account.Address.StreetAddress</p></li>
    /// <li>
    /// <p>Customer.Account.WebsiteUrl</p></li>
    /// <li>
    /// <p>LifeCycle.TargetCloseDate</p></li>
    /// <li>
    /// <p>Project.ExpectedCustomerSpend.Amount</p></li>
    /// <li>
    /// <p>Project.ExpectedCustomerSpend.CurrencyCode</p></li>
    /// <li>
    /// <p>Project.CustomerBusinessProblem</p></li>
    /// <li>
    /// <p>PartnerOpportunityIdentifier</p></li>
    /// </ul>
    /// <p>After updates, the opportunity re-enters the validation phase. This process repeats until all issues are resolved, and the opportunity's <code>Lifecycle.ReviewStatus</code> is set to <code>Approved</code> or <code>Rejected</code>.</p></li>
    /// <li>
    /// <p>Approved: Validated and converted into the Amazon Web Services seller's pipeline (editable).</p></li>
    /// <li>
    /// <p>Rejected: Disqualified (read-only).</p></li>
    /// </ul>
    pub review_status: ::std::option::Option<crate::types::ReviewStatus>,
    /// <p>Indicates why an opportunity was sent back for further details. Partners must take corrective action based on the <code>ReviewComments</code>.</p>
    pub review_comments: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the reason a specific decision was taken during the opportunity review process. This field combines the reasons for both disqualified and action required statuses, and provides clarity for why an opportunity was disqualified or required further action.</p>
    pub review_status_reason: ::std::option::Option<::std::string::String>,
}
impl LifeCycleSummary {
    /// <p>Specifies the current stage of the <code>Opportunity</code>'s lifecycle as it maps to Amazon Web Services stages from the current stage in the partner CRM. This field provides a translated value of the stage, and offers insight into the <code>Opportunity</code>'s progression in the sales cycle, according to Amazon Web Services definitions.</p><note>
    /// <p>A lead and a prospect must be further matured to a <code>Qualified</code> opportunity before submission. Opportunities that were closed/lost before submission aren't suitable for submission.</p>
    /// </note>
    /// <p>The descriptions of each sales stage are:</p>
    /// <ul>
    /// <li>
    /// <p>Prospect: Amazon Web Services identifies the opportunity. It can be active (Comes directly from the end customer through a lead) or latent (Your account team believes it exists based on research, account plans, sales plays).</p></li>
    /// <li>
    /// <p>Qualified: Your account team engaged with the customer to discuss viability and understand requirements. The customer agreed that the opportunity is real, of interest, and may solve business/technical needs.</p></li>
    /// <li>
    /// <p>Technical Validation: All parties understand the implementation plan.</p></li>
    /// <li>
    /// <p>Business Validation: Pricing was proposed, and all parties agree to the steps to close.</p></li>
    /// <li>
    /// <p>Committed: The customer signed the contract, but Amazon Web Services hasn't started billing.</p></li>
    /// <li>
    /// <p>Launched: The workload is complete, and Amazon Web Services has started billing.</p></li>
    /// <li>
    /// <p>Closed Lost: The opportunity is lost, and there are no steps to move forward.</p></li>
    /// </ul>
    pub fn stage(&self) -> ::std::option::Option<&crate::types::Stage> {
        self.stage.as_ref()
    }
    /// <p>Specifies the reason code when an opportunity is marked as <i>Closed Lost</i>. When you select an appropriate reason code, you communicate the context for closing the <code>Opportunity</code>, and aid in accurate reports and analysis of opportunity outcomes.</p>
    pub fn closed_lost_reason(&self) -> ::std::option::Option<&crate::types::ClosedLostReason> {
        self.closed_lost_reason.as_ref()
    }
    /// <p>Specifies the upcoming actions or tasks for the <code>Opportunity</code>. This field is utilized to communicate to Amazon Web Services the next actions required for the <code>Opportunity</code>.</p>
    pub fn next_steps(&self) -> ::std::option::Option<&str> {
        self.next_steps.as_deref()
    }
    /// <p>Specifies the date when Amazon Web Services expects to start significant billing, when the project finishes, and when it moves into production. This field informs the Amazon Web Services seller about when the opportunity launches and starts to incur Amazon Web Services usage.</p>
    /// <p>Ensure the <code>Target Close Date</code> isn't in the past.</p>
    pub fn target_close_date(&self) -> ::std::option::Option<&str> {
        self.target_close_date.as_deref()
    }
    /// <p>Indicates the review status of a partner referred opportunity. This field is read-only and only applicable for partner referrals. Valid values:</p>
    /// <ul>
    /// <li>
    /// <p>Pending Submission: Not submitted for validation (editable).</p></li>
    /// <li>
    /// <p>Submitted: Submitted for validation and not yet Amazon Web Services reviewed (read-only).</p></li>
    /// <li>
    /// <p>In Review: Undergoing Amazon Web Services validation (read-only).</p></li>
    /// <li>
    /// <p>Action Required: Address any issues Amazon Web Services highlights. Use the <code>UpdateOpportunity</code> API action to update the opportunity, and ensure you make all required changes. Only these fields are editable when the <code>Lifecycle.ReviewStatus</code> is <code>Action Required</code>:</p>
    /// <ul>
    /// <li>
    /// <p>Customer.Account.Address.City</p></li>
    /// <li>
    /// <p>Customer.Account.Address.CountryCode</p></li>
    /// <li>
    /// <p>Customer.Account.Address.PostalCode</p></li>
    /// <li>
    /// <p>Customer.Account.Address.StateOrRegion</p></li>
    /// <li>
    /// <p>Customer.Account.Address.StreetAddress</p></li>
    /// <li>
    /// <p>Customer.Account.WebsiteUrl</p></li>
    /// <li>
    /// <p>LifeCycle.TargetCloseDate</p></li>
    /// <li>
    /// <p>Project.ExpectedCustomerSpend.Amount</p></li>
    /// <li>
    /// <p>Project.ExpectedCustomerSpend.CurrencyCode</p></li>
    /// <li>
    /// <p>Project.CustomerBusinessProblem</p></li>
    /// <li>
    /// <p>PartnerOpportunityIdentifier</p></li>
    /// </ul>
    /// <p>After updates, the opportunity re-enters the validation phase. This process repeats until all issues are resolved, and the opportunity's <code>Lifecycle.ReviewStatus</code> is set to <code>Approved</code> or <code>Rejected</code>.</p></li>
    /// <li>
    /// <p>Approved: Validated and converted into the Amazon Web Services seller's pipeline (editable).</p></li>
    /// <li>
    /// <p>Rejected: Disqualified (read-only).</p></li>
    /// </ul>
    pub fn review_status(&self) -> ::std::option::Option<&crate::types::ReviewStatus> {
        self.review_status.as_ref()
    }
    /// <p>Indicates why an opportunity was sent back for further details. Partners must take corrective action based on the <code>ReviewComments</code>.</p>
    pub fn review_comments(&self) -> ::std::option::Option<&str> {
        self.review_comments.as_deref()
    }
    /// <p>Indicates the reason a specific decision was taken during the opportunity review process. This field combines the reasons for both disqualified and action required statuses, and provides clarity for why an opportunity was disqualified or required further action.</p>
    pub fn review_status_reason(&self) -> ::std::option::Option<&str> {
        self.review_status_reason.as_deref()
    }
}
impl ::std::fmt::Debug for LifeCycleSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("LifeCycleSummary");
        formatter.field("stage", &self.stage);
        formatter.field("closed_lost_reason", &self.closed_lost_reason);
        formatter.field("next_steps", &"*** Sensitive Data Redacted ***");
        formatter.field("target_close_date", &self.target_close_date);
        formatter.field("review_status", &self.review_status);
        formatter.field("review_comments", &self.review_comments);
        formatter.field("review_status_reason", &self.review_status_reason);
        formatter.finish()
    }
}
impl LifeCycleSummary {
    /// Creates a new builder-style object to manufacture [`LifeCycleSummary`](crate::types::LifeCycleSummary).
    pub fn builder() -> crate::types::builders::LifeCycleSummaryBuilder {
        crate::types::builders::LifeCycleSummaryBuilder::default()
    }
}

/// A builder for [`LifeCycleSummary`](crate::types::LifeCycleSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct LifeCycleSummaryBuilder {
    pub(crate) stage: ::std::option::Option<crate::types::Stage>,
    pub(crate) closed_lost_reason: ::std::option::Option<crate::types::ClosedLostReason>,
    pub(crate) next_steps: ::std::option::Option<::std::string::String>,
    pub(crate) target_close_date: ::std::option::Option<::std::string::String>,
    pub(crate) review_status: ::std::option::Option<crate::types::ReviewStatus>,
    pub(crate) review_comments: ::std::option::Option<::std::string::String>,
    pub(crate) review_status_reason: ::std::option::Option<::std::string::String>,
}
impl LifeCycleSummaryBuilder {
    /// <p>Specifies the current stage of the <code>Opportunity</code>'s lifecycle as it maps to Amazon Web Services stages from the current stage in the partner CRM. This field provides a translated value of the stage, and offers insight into the <code>Opportunity</code>'s progression in the sales cycle, according to Amazon Web Services definitions.</p><note>
    /// <p>A lead and a prospect must be further matured to a <code>Qualified</code> opportunity before submission. Opportunities that were closed/lost before submission aren't suitable for submission.</p>
    /// </note>
    /// <p>The descriptions of each sales stage are:</p>
    /// <ul>
    /// <li>
    /// <p>Prospect: Amazon Web Services identifies the opportunity. It can be active (Comes directly from the end customer through a lead) or latent (Your account team believes it exists based on research, account plans, sales plays).</p></li>
    /// <li>
    /// <p>Qualified: Your account team engaged with the customer to discuss viability and understand requirements. The customer agreed that the opportunity is real, of interest, and may solve business/technical needs.</p></li>
    /// <li>
    /// <p>Technical Validation: All parties understand the implementation plan.</p></li>
    /// <li>
    /// <p>Business Validation: Pricing was proposed, and all parties agree to the steps to close.</p></li>
    /// <li>
    /// <p>Committed: The customer signed the contract, but Amazon Web Services hasn't started billing.</p></li>
    /// <li>
    /// <p>Launched: The workload is complete, and Amazon Web Services has started billing.</p></li>
    /// <li>
    /// <p>Closed Lost: The opportunity is lost, and there are no steps to move forward.</p></li>
    /// </ul>
    pub fn stage(mut self, input: crate::types::Stage) -> Self {
        self.stage = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the current stage of the <code>Opportunity</code>'s lifecycle as it maps to Amazon Web Services stages from the current stage in the partner CRM. This field provides a translated value of the stage, and offers insight into the <code>Opportunity</code>'s progression in the sales cycle, according to Amazon Web Services definitions.</p><note>
    /// <p>A lead and a prospect must be further matured to a <code>Qualified</code> opportunity before submission. Opportunities that were closed/lost before submission aren't suitable for submission.</p>
    /// </note>
    /// <p>The descriptions of each sales stage are:</p>
    /// <ul>
    /// <li>
    /// <p>Prospect: Amazon Web Services identifies the opportunity. It can be active (Comes directly from the end customer through a lead) or latent (Your account team believes it exists based on research, account plans, sales plays).</p></li>
    /// <li>
    /// <p>Qualified: Your account team engaged with the customer to discuss viability and understand requirements. The customer agreed that the opportunity is real, of interest, and may solve business/technical needs.</p></li>
    /// <li>
    /// <p>Technical Validation: All parties understand the implementation plan.</p></li>
    /// <li>
    /// <p>Business Validation: Pricing was proposed, and all parties agree to the steps to close.</p></li>
    /// <li>
    /// <p>Committed: The customer signed the contract, but Amazon Web Services hasn't started billing.</p></li>
    /// <li>
    /// <p>Launched: The workload is complete, and Amazon Web Services has started billing.</p></li>
    /// <li>
    /// <p>Closed Lost: The opportunity is lost, and there are no steps to move forward.</p></li>
    /// </ul>
    pub fn set_stage(mut self, input: ::std::option::Option<crate::types::Stage>) -> Self {
        self.stage = input;
        self
    }
    /// <p>Specifies the current stage of the <code>Opportunity</code>'s lifecycle as it maps to Amazon Web Services stages from the current stage in the partner CRM. This field provides a translated value of the stage, and offers insight into the <code>Opportunity</code>'s progression in the sales cycle, according to Amazon Web Services definitions.</p><note>
    /// <p>A lead and a prospect must be further matured to a <code>Qualified</code> opportunity before submission. Opportunities that were closed/lost before submission aren't suitable for submission.</p>
    /// </note>
    /// <p>The descriptions of each sales stage are:</p>
    /// <ul>
    /// <li>
    /// <p>Prospect: Amazon Web Services identifies the opportunity. It can be active (Comes directly from the end customer through a lead) or latent (Your account team believes it exists based on research, account plans, sales plays).</p></li>
    /// <li>
    /// <p>Qualified: Your account team engaged with the customer to discuss viability and understand requirements. The customer agreed that the opportunity is real, of interest, and may solve business/technical needs.</p></li>
    /// <li>
    /// <p>Technical Validation: All parties understand the implementation plan.</p></li>
    /// <li>
    /// <p>Business Validation: Pricing was proposed, and all parties agree to the steps to close.</p></li>
    /// <li>
    /// <p>Committed: The customer signed the contract, but Amazon Web Services hasn't started billing.</p></li>
    /// <li>
    /// <p>Launched: The workload is complete, and Amazon Web Services has started billing.</p></li>
    /// <li>
    /// <p>Closed Lost: The opportunity is lost, and there are no steps to move forward.</p></li>
    /// </ul>
    pub fn get_stage(&self) -> &::std::option::Option<crate::types::Stage> {
        &self.stage
    }
    /// <p>Specifies the reason code when an opportunity is marked as <i>Closed Lost</i>. When you select an appropriate reason code, you communicate the context for closing the <code>Opportunity</code>, and aid in accurate reports and analysis of opportunity outcomes.</p>
    pub fn closed_lost_reason(mut self, input: crate::types::ClosedLostReason) -> Self {
        self.closed_lost_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the reason code when an opportunity is marked as <i>Closed Lost</i>. When you select an appropriate reason code, you communicate the context for closing the <code>Opportunity</code>, and aid in accurate reports and analysis of opportunity outcomes.</p>
    pub fn set_closed_lost_reason(mut self, input: ::std::option::Option<crate::types::ClosedLostReason>) -> Self {
        self.closed_lost_reason = input;
        self
    }
    /// <p>Specifies the reason code when an opportunity is marked as <i>Closed Lost</i>. When you select an appropriate reason code, you communicate the context for closing the <code>Opportunity</code>, and aid in accurate reports and analysis of opportunity outcomes.</p>
    pub fn get_closed_lost_reason(&self) -> &::std::option::Option<crate::types::ClosedLostReason> {
        &self.closed_lost_reason
    }
    /// <p>Specifies the upcoming actions or tasks for the <code>Opportunity</code>. This field is utilized to communicate to Amazon Web Services the next actions required for the <code>Opportunity</code>.</p>
    pub fn next_steps(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_steps = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the upcoming actions or tasks for the <code>Opportunity</code>. This field is utilized to communicate to Amazon Web Services the next actions required for the <code>Opportunity</code>.</p>
    pub fn set_next_steps(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_steps = input;
        self
    }
    /// <p>Specifies the upcoming actions or tasks for the <code>Opportunity</code>. This field is utilized to communicate to Amazon Web Services the next actions required for the <code>Opportunity</code>.</p>
    pub fn get_next_steps(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_steps
    }
    /// <p>Specifies the date when Amazon Web Services expects to start significant billing, when the project finishes, and when it moves into production. This field informs the Amazon Web Services seller about when the opportunity launches and starts to incur Amazon Web Services usage.</p>
    /// <p>Ensure the <code>Target Close Date</code> isn't in the past.</p>
    pub fn target_close_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_close_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the date when Amazon Web Services expects to start significant billing, when the project finishes, and when it moves into production. This field informs the Amazon Web Services seller about when the opportunity launches and starts to incur Amazon Web Services usage.</p>
    /// <p>Ensure the <code>Target Close Date</code> isn't in the past.</p>
    pub fn set_target_close_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_close_date = input;
        self
    }
    /// <p>Specifies the date when Amazon Web Services expects to start significant billing, when the project finishes, and when it moves into production. This field informs the Amazon Web Services seller about when the opportunity launches and starts to incur Amazon Web Services usage.</p>
    /// <p>Ensure the <code>Target Close Date</code> isn't in the past.</p>
    pub fn get_target_close_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_close_date
    }
    /// <p>Indicates the review status of a partner referred opportunity. This field is read-only and only applicable for partner referrals. Valid values:</p>
    /// <ul>
    /// <li>
    /// <p>Pending Submission: Not submitted for validation (editable).</p></li>
    /// <li>
    /// <p>Submitted: Submitted for validation and not yet Amazon Web Services reviewed (read-only).</p></li>
    /// <li>
    /// <p>In Review: Undergoing Amazon Web Services validation (read-only).</p></li>
    /// <li>
    /// <p>Action Required: Address any issues Amazon Web Services highlights. Use the <code>UpdateOpportunity</code> API action to update the opportunity, and ensure you make all required changes. Only these fields are editable when the <code>Lifecycle.ReviewStatus</code> is <code>Action Required</code>:</p>
    /// <ul>
    /// <li>
    /// <p>Customer.Account.Address.City</p></li>
    /// <li>
    /// <p>Customer.Account.Address.CountryCode</p></li>
    /// <li>
    /// <p>Customer.Account.Address.PostalCode</p></li>
    /// <li>
    /// <p>Customer.Account.Address.StateOrRegion</p></li>
    /// <li>
    /// <p>Customer.Account.Address.StreetAddress</p></li>
    /// <li>
    /// <p>Customer.Account.WebsiteUrl</p></li>
    /// <li>
    /// <p>LifeCycle.TargetCloseDate</p></li>
    /// <li>
    /// <p>Project.ExpectedCustomerSpend.Amount</p></li>
    /// <li>
    /// <p>Project.ExpectedCustomerSpend.CurrencyCode</p></li>
    /// <li>
    /// <p>Project.CustomerBusinessProblem</p></li>
    /// <li>
    /// <p>PartnerOpportunityIdentifier</p></li>
    /// </ul>
    /// <p>After updates, the opportunity re-enters the validation phase. This process repeats until all issues are resolved, and the opportunity's <code>Lifecycle.ReviewStatus</code> is set to <code>Approved</code> or <code>Rejected</code>.</p></li>
    /// <li>
    /// <p>Approved: Validated and converted into the Amazon Web Services seller's pipeline (editable).</p></li>
    /// <li>
    /// <p>Rejected: Disqualified (read-only).</p></li>
    /// </ul>
    pub fn review_status(mut self, input: crate::types::ReviewStatus) -> Self {
        self.review_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the review status of a partner referred opportunity. This field is read-only and only applicable for partner referrals. Valid values:</p>
    /// <ul>
    /// <li>
    /// <p>Pending Submission: Not submitted for validation (editable).</p></li>
    /// <li>
    /// <p>Submitted: Submitted for validation and not yet Amazon Web Services reviewed (read-only).</p></li>
    /// <li>
    /// <p>In Review: Undergoing Amazon Web Services validation (read-only).</p></li>
    /// <li>
    /// <p>Action Required: Address any issues Amazon Web Services highlights. Use the <code>UpdateOpportunity</code> API action to update the opportunity, and ensure you make all required changes. Only these fields are editable when the <code>Lifecycle.ReviewStatus</code> is <code>Action Required</code>:</p>
    /// <ul>
    /// <li>
    /// <p>Customer.Account.Address.City</p></li>
    /// <li>
    /// <p>Customer.Account.Address.CountryCode</p></li>
    /// <li>
    /// <p>Customer.Account.Address.PostalCode</p></li>
    /// <li>
    /// <p>Customer.Account.Address.StateOrRegion</p></li>
    /// <li>
    /// <p>Customer.Account.Address.StreetAddress</p></li>
    /// <li>
    /// <p>Customer.Account.WebsiteUrl</p></li>
    /// <li>
    /// <p>LifeCycle.TargetCloseDate</p></li>
    /// <li>
    /// <p>Project.ExpectedCustomerSpend.Amount</p></li>
    /// <li>
    /// <p>Project.ExpectedCustomerSpend.CurrencyCode</p></li>
    /// <li>
    /// <p>Project.CustomerBusinessProblem</p></li>
    /// <li>
    /// <p>PartnerOpportunityIdentifier</p></li>
    /// </ul>
    /// <p>After updates, the opportunity re-enters the validation phase. This process repeats until all issues are resolved, and the opportunity's <code>Lifecycle.ReviewStatus</code> is set to <code>Approved</code> or <code>Rejected</code>.</p></li>
    /// <li>
    /// <p>Approved: Validated and converted into the Amazon Web Services seller's pipeline (editable).</p></li>
    /// <li>
    /// <p>Rejected: Disqualified (read-only).</p></li>
    /// </ul>
    pub fn set_review_status(mut self, input: ::std::option::Option<crate::types::ReviewStatus>) -> Self {
        self.review_status = input;
        self
    }
    /// <p>Indicates the review status of a partner referred opportunity. This field is read-only and only applicable for partner referrals. Valid values:</p>
    /// <ul>
    /// <li>
    /// <p>Pending Submission: Not submitted for validation (editable).</p></li>
    /// <li>
    /// <p>Submitted: Submitted for validation and not yet Amazon Web Services reviewed (read-only).</p></li>
    /// <li>
    /// <p>In Review: Undergoing Amazon Web Services validation (read-only).</p></li>
    /// <li>
    /// <p>Action Required: Address any issues Amazon Web Services highlights. Use the <code>UpdateOpportunity</code> API action to update the opportunity, and ensure you make all required changes. Only these fields are editable when the <code>Lifecycle.ReviewStatus</code> is <code>Action Required</code>:</p>
    /// <ul>
    /// <li>
    /// <p>Customer.Account.Address.City</p></li>
    /// <li>
    /// <p>Customer.Account.Address.CountryCode</p></li>
    /// <li>
    /// <p>Customer.Account.Address.PostalCode</p></li>
    /// <li>
    /// <p>Customer.Account.Address.StateOrRegion</p></li>
    /// <li>
    /// <p>Customer.Account.Address.StreetAddress</p></li>
    /// <li>
    /// <p>Customer.Account.WebsiteUrl</p></li>
    /// <li>
    /// <p>LifeCycle.TargetCloseDate</p></li>
    /// <li>
    /// <p>Project.ExpectedCustomerSpend.Amount</p></li>
    /// <li>
    /// <p>Project.ExpectedCustomerSpend.CurrencyCode</p></li>
    /// <li>
    /// <p>Project.CustomerBusinessProblem</p></li>
    /// <li>
    /// <p>PartnerOpportunityIdentifier</p></li>
    /// </ul>
    /// <p>After updates, the opportunity re-enters the validation phase. This process repeats until all issues are resolved, and the opportunity's <code>Lifecycle.ReviewStatus</code> is set to <code>Approved</code> or <code>Rejected</code>.</p></li>
    /// <li>
    /// <p>Approved: Validated and converted into the Amazon Web Services seller's pipeline (editable).</p></li>
    /// <li>
    /// <p>Rejected: Disqualified (read-only).</p></li>
    /// </ul>
    pub fn get_review_status(&self) -> &::std::option::Option<crate::types::ReviewStatus> {
        &self.review_status
    }
    /// <p>Indicates why an opportunity was sent back for further details. Partners must take corrective action based on the <code>ReviewComments</code>.</p>
    pub fn review_comments(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.review_comments = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates why an opportunity was sent back for further details. Partners must take corrective action based on the <code>ReviewComments</code>.</p>
    pub fn set_review_comments(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.review_comments = input;
        self
    }
    /// <p>Indicates why an opportunity was sent back for further details. Partners must take corrective action based on the <code>ReviewComments</code>.</p>
    pub fn get_review_comments(&self) -> &::std::option::Option<::std::string::String> {
        &self.review_comments
    }
    /// <p>Indicates the reason a specific decision was taken during the opportunity review process. This field combines the reasons for both disqualified and action required statuses, and provides clarity for why an opportunity was disqualified or required further action.</p>
    pub fn review_status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.review_status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates the reason a specific decision was taken during the opportunity review process. This field combines the reasons for both disqualified and action required statuses, and provides clarity for why an opportunity was disqualified or required further action.</p>
    pub fn set_review_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.review_status_reason = input;
        self
    }
    /// <p>Indicates the reason a specific decision was taken during the opportunity review process. This field combines the reasons for both disqualified and action required statuses, and provides clarity for why an opportunity was disqualified or required further action.</p>
    pub fn get_review_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.review_status_reason
    }
    /// Consumes the builder and constructs a [`LifeCycleSummary`](crate::types::LifeCycleSummary).
    pub fn build(self) -> crate::types::LifeCycleSummary {
        crate::types::LifeCycleSummary {
            stage: self.stage,
            closed_lost_reason: self.closed_lost_reason,
            next_steps: self.next_steps,
            target_close_date: self.target_close_date,
            review_status: self.review_status,
            review_comments: self.review_comments,
            review_status_reason: self.review_status_reason,
        }
    }
}
impl ::std::fmt::Debug for LifeCycleSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("LifeCycleSummaryBuilder");
        formatter.field("stage", &self.stage);
        formatter.field("closed_lost_reason", &self.closed_lost_reason);
        formatter.field("next_steps", &"*** Sensitive Data Redacted ***");
        formatter.field("target_close_date", &self.target_close_date);
        formatter.field("review_status", &self.review_status);
        formatter.field("review_comments", &self.review_comments);
        formatter.field("review_status_reason", &self.review_status_reason);
        formatter.finish()
    }
}
