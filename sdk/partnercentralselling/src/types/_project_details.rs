// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the project associated with the Engagement Invitation, including the business problem and expected outcomes.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ProjectDetails {
    /// <p>Describes the business problem that the project aims to solve. This information is crucial for understanding the project’s goals and objectives.</p>
    pub business_problem: ::std::string::String,
    /// <p>Specifies the title of the project. This title helps partners quickly identify and understand the focus of the project.</p>
    pub title: ::std::string::String,
    /// <p>Specifies the estimated date of project completion. This field helps track the project timeline and manage expectations.</p>
    pub target_completion_date: ::std::string::String,
    /// <p>Contains revenue estimates for the partner related to the project. This field provides an idea of the financial potential of the opportunity for the partner.</p>
    pub expected_customer_spend: ::std::vec::Vec<crate::types::ExpectedCustomerSpend>,
}
impl ProjectDetails {
    /// <p>Describes the business problem that the project aims to solve. This information is crucial for understanding the project’s goals and objectives.</p>
    pub fn business_problem(&self) -> &str {
        use std::ops::Deref;
        self.business_problem.deref()
    }
    /// <p>Specifies the title of the project. This title helps partners quickly identify and understand the focus of the project.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>Specifies the estimated date of project completion. This field helps track the project timeline and manage expectations.</p>
    pub fn target_completion_date(&self) -> &str {
        use std::ops::Deref;
        self.target_completion_date.deref()
    }
    /// <p>Contains revenue estimates for the partner related to the project. This field provides an idea of the financial potential of the opportunity for the partner.</p>
    pub fn expected_customer_spend(&self) -> &[crate::types::ExpectedCustomerSpend] {
        use std::ops::Deref;
        self.expected_customer_spend.deref()
    }
}
impl ::std::fmt::Debug for ProjectDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ProjectDetails");
        formatter.field("business_problem", &"*** Sensitive Data Redacted ***");
        formatter.field("title", &self.title);
        formatter.field("target_completion_date", &self.target_completion_date);
        formatter.field("expected_customer_spend", &self.expected_customer_spend);
        formatter.finish()
    }
}
impl ProjectDetails {
    /// Creates a new builder-style object to manufacture [`ProjectDetails`](crate::types::ProjectDetails).
    pub fn builder() -> crate::types::builders::ProjectDetailsBuilder {
        crate::types::builders::ProjectDetailsBuilder::default()
    }
}

/// A builder for [`ProjectDetails`](crate::types::ProjectDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ProjectDetailsBuilder {
    pub(crate) business_problem: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) target_completion_date: ::std::option::Option<::std::string::String>,
    pub(crate) expected_customer_spend: ::std::option::Option<::std::vec::Vec<crate::types::ExpectedCustomerSpend>>,
}
impl ProjectDetailsBuilder {
    /// <p>Describes the business problem that the project aims to solve. This information is crucial for understanding the project’s goals and objectives.</p>
    /// This field is required.
    pub fn business_problem(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.business_problem = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes the business problem that the project aims to solve. This information is crucial for understanding the project’s goals and objectives.</p>
    pub fn set_business_problem(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.business_problem = input;
        self
    }
    /// <p>Describes the business problem that the project aims to solve. This information is crucial for understanding the project’s goals and objectives.</p>
    pub fn get_business_problem(&self) -> &::std::option::Option<::std::string::String> {
        &self.business_problem
    }
    /// <p>Specifies the title of the project. This title helps partners quickly identify and understand the focus of the project.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the title of the project. This title helps partners quickly identify and understand the focus of the project.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>Specifies the title of the project. This title helps partners quickly identify and understand the focus of the project.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>Specifies the estimated date of project completion. This field helps track the project timeline and manage expectations.</p>
    /// This field is required.
    pub fn target_completion_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_completion_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the estimated date of project completion. This field helps track the project timeline and manage expectations.</p>
    pub fn set_target_completion_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_completion_date = input;
        self
    }
    /// <p>Specifies the estimated date of project completion. This field helps track the project timeline and manage expectations.</p>
    pub fn get_target_completion_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_completion_date
    }
    /// Appends an item to `expected_customer_spend`.
    ///
    /// To override the contents of this collection use [`set_expected_customer_spend`](Self::set_expected_customer_spend).
    ///
    /// <p>Contains revenue estimates for the partner related to the project. This field provides an idea of the financial potential of the opportunity for the partner.</p>
    pub fn expected_customer_spend(mut self, input: crate::types::ExpectedCustomerSpend) -> Self {
        let mut v = self.expected_customer_spend.unwrap_or_default();
        v.push(input);
        self.expected_customer_spend = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains revenue estimates for the partner related to the project. This field provides an idea of the financial potential of the opportunity for the partner.</p>
    pub fn set_expected_customer_spend(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ExpectedCustomerSpend>>) -> Self {
        self.expected_customer_spend = input;
        self
    }
    /// <p>Contains revenue estimates for the partner related to the project. This field provides an idea of the financial potential of the opportunity for the partner.</p>
    pub fn get_expected_customer_spend(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ExpectedCustomerSpend>> {
        &self.expected_customer_spend
    }
    /// Consumes the builder and constructs a [`ProjectDetails`](crate::types::ProjectDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`business_problem`](crate::types::builders::ProjectDetailsBuilder::business_problem)
    /// - [`title`](crate::types::builders::ProjectDetailsBuilder::title)
    /// - [`target_completion_date`](crate::types::builders::ProjectDetailsBuilder::target_completion_date)
    /// - [`expected_customer_spend`](crate::types::builders::ProjectDetailsBuilder::expected_customer_spend)
    pub fn build(self) -> ::std::result::Result<crate::types::ProjectDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ProjectDetails {
            business_problem: self.business_problem.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "business_problem",
                    "business_problem was not specified but it is required when building ProjectDetails",
                )
            })?,
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building ProjectDetails",
                )
            })?,
            target_completion_date: self.target_completion_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target_completion_date",
                    "target_completion_date was not specified but it is required when building ProjectDetails",
                )
            })?,
            expected_customer_spend: self.expected_customer_spend.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "expected_customer_spend",
                    "expected_customer_spend was not specified but it is required when building ProjectDetails",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for ProjectDetailsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ProjectDetailsBuilder");
        formatter.field("business_problem", &"*** Sensitive Data Redacted ***");
        formatter.field("title", &self.title);
        formatter.field("target_completion_date", &self.target_completion_date);
        formatter.field("expected_customer_spend", &self.expected_customer_spend);
        formatter.finish()
    }
}
