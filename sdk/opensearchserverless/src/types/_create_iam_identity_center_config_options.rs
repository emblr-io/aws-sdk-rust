// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes IAM Identity Center options for creating an OpenSearch Serverless security configuration in the form of a key-value map.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateIamIdentityCenterConfigOptions {
    /// <p>The ARN of the IAM Identity Center instance used to integrate with OpenSearch Serverless.</p>
    pub instance_arn: ::std::string::String,
    /// <p>The user attribute for this IAM Identity Center integration. Defaults to <code>UserId</code>.</p>
    pub user_attribute: ::std::option::Option<crate::types::IamIdentityCenterUserAttribute>,
    /// <p>The group attribute for this IAM Identity Center integration. Defaults to <code>GroupId</code>.</p>
    pub group_attribute: ::std::option::Option<crate::types::IamIdentityCenterGroupAttribute>,
}
impl CreateIamIdentityCenterConfigOptions {
    /// <p>The ARN of the IAM Identity Center instance used to integrate with OpenSearch Serverless.</p>
    pub fn instance_arn(&self) -> &str {
        use std::ops::Deref;
        self.instance_arn.deref()
    }
    /// <p>The user attribute for this IAM Identity Center integration. Defaults to <code>UserId</code>.</p>
    pub fn user_attribute(&self) -> ::std::option::Option<&crate::types::IamIdentityCenterUserAttribute> {
        self.user_attribute.as_ref()
    }
    /// <p>The group attribute for this IAM Identity Center integration. Defaults to <code>GroupId</code>.</p>
    pub fn group_attribute(&self) -> ::std::option::Option<&crate::types::IamIdentityCenterGroupAttribute> {
        self.group_attribute.as_ref()
    }
}
impl CreateIamIdentityCenterConfigOptions {
    /// Creates a new builder-style object to manufacture [`CreateIamIdentityCenterConfigOptions`](crate::types::CreateIamIdentityCenterConfigOptions).
    pub fn builder() -> crate::types::builders::CreateIamIdentityCenterConfigOptionsBuilder {
        crate::types::builders::CreateIamIdentityCenterConfigOptionsBuilder::default()
    }
}

/// A builder for [`CreateIamIdentityCenterConfigOptions`](crate::types::CreateIamIdentityCenterConfigOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateIamIdentityCenterConfigOptionsBuilder {
    pub(crate) instance_arn: ::std::option::Option<::std::string::String>,
    pub(crate) user_attribute: ::std::option::Option<crate::types::IamIdentityCenterUserAttribute>,
    pub(crate) group_attribute: ::std::option::Option<crate::types::IamIdentityCenterGroupAttribute>,
}
impl CreateIamIdentityCenterConfigOptionsBuilder {
    /// <p>The ARN of the IAM Identity Center instance used to integrate with OpenSearch Serverless.</p>
    /// This field is required.
    pub fn instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM Identity Center instance used to integrate with OpenSearch Serverless.</p>
    pub fn set_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_arn = input;
        self
    }
    /// <p>The ARN of the IAM Identity Center instance used to integrate with OpenSearch Serverless.</p>
    pub fn get_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_arn
    }
    /// <p>The user attribute for this IAM Identity Center integration. Defaults to <code>UserId</code>.</p>
    pub fn user_attribute(mut self, input: crate::types::IamIdentityCenterUserAttribute) -> Self {
        self.user_attribute = ::std::option::Option::Some(input);
        self
    }
    /// <p>The user attribute for this IAM Identity Center integration. Defaults to <code>UserId</code>.</p>
    pub fn set_user_attribute(mut self, input: ::std::option::Option<crate::types::IamIdentityCenterUserAttribute>) -> Self {
        self.user_attribute = input;
        self
    }
    /// <p>The user attribute for this IAM Identity Center integration. Defaults to <code>UserId</code>.</p>
    pub fn get_user_attribute(&self) -> &::std::option::Option<crate::types::IamIdentityCenterUserAttribute> {
        &self.user_attribute
    }
    /// <p>The group attribute for this IAM Identity Center integration. Defaults to <code>GroupId</code>.</p>
    pub fn group_attribute(mut self, input: crate::types::IamIdentityCenterGroupAttribute) -> Self {
        self.group_attribute = ::std::option::Option::Some(input);
        self
    }
    /// <p>The group attribute for this IAM Identity Center integration. Defaults to <code>GroupId</code>.</p>
    pub fn set_group_attribute(mut self, input: ::std::option::Option<crate::types::IamIdentityCenterGroupAttribute>) -> Self {
        self.group_attribute = input;
        self
    }
    /// <p>The group attribute for this IAM Identity Center integration. Defaults to <code>GroupId</code>.</p>
    pub fn get_group_attribute(&self) -> &::std::option::Option<crate::types::IamIdentityCenterGroupAttribute> {
        &self.group_attribute
    }
    /// Consumes the builder and constructs a [`CreateIamIdentityCenterConfigOptions`](crate::types::CreateIamIdentityCenterConfigOptions).
    /// This method will fail if any of the following fields are not set:
    /// - [`instance_arn`](crate::types::builders::CreateIamIdentityCenterConfigOptionsBuilder::instance_arn)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::CreateIamIdentityCenterConfigOptions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CreateIamIdentityCenterConfigOptions {
            instance_arn: self.instance_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "instance_arn",
                    "instance_arn was not specified but it is required when building CreateIamIdentityCenterConfigOptions",
                )
            })?,
            user_attribute: self.user_attribute,
            group_attribute: self.group_attribute,
        })
    }
}
