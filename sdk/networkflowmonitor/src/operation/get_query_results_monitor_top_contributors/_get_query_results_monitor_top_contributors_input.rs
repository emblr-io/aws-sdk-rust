// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetQueryResultsMonitorTopContributorsInput {
    /// <p>The name of the monitor.</p>
    pub monitor_name: ::std::option::Option<::std::string::String>,
    /// <p>The identifier for the query. A query ID is an internally-generated identifier for a specific query returned from an API call to create a query.</p>
    pub query_id: ::std::option::Option<::std::string::String>,
    /// <p>The token for the next set of results. You receive this token from a previous call.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The number of query results that you want to return with this call.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl GetQueryResultsMonitorTopContributorsInput {
    /// <p>The name of the monitor.</p>
    pub fn monitor_name(&self) -> ::std::option::Option<&str> {
        self.monitor_name.as_deref()
    }
    /// <p>The identifier for the query. A query ID is an internally-generated identifier for a specific query returned from an API call to create a query.</p>
    pub fn query_id(&self) -> ::std::option::Option<&str> {
        self.query_id.as_deref()
    }
    /// <p>The token for the next set of results. You receive this token from a previous call.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The number of query results that you want to return with this call.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl GetQueryResultsMonitorTopContributorsInput {
    /// Creates a new builder-style object to manufacture [`GetQueryResultsMonitorTopContributorsInput`](crate::operation::get_query_results_monitor_top_contributors::GetQueryResultsMonitorTopContributorsInput).
    pub fn builder() -> crate::operation::get_query_results_monitor_top_contributors::builders::GetQueryResultsMonitorTopContributorsInputBuilder {
        crate::operation::get_query_results_monitor_top_contributors::builders::GetQueryResultsMonitorTopContributorsInputBuilder::default()
    }
}

/// A builder for [`GetQueryResultsMonitorTopContributorsInput`](crate::operation::get_query_results_monitor_top_contributors::GetQueryResultsMonitorTopContributorsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetQueryResultsMonitorTopContributorsInputBuilder {
    pub(crate) monitor_name: ::std::option::Option<::std::string::String>,
    pub(crate) query_id: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl GetQueryResultsMonitorTopContributorsInputBuilder {
    /// <p>The name of the monitor.</p>
    /// This field is required.
    pub fn monitor_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monitor_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the monitor.</p>
    pub fn set_monitor_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monitor_name = input;
        self
    }
    /// <p>The name of the monitor.</p>
    pub fn get_monitor_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.monitor_name
    }
    /// <p>The identifier for the query. A query ID is an internally-generated identifier for a specific query returned from an API call to create a query.</p>
    /// This field is required.
    pub fn query_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the query. A query ID is an internally-generated identifier for a specific query returned from an API call to create a query.</p>
    pub fn set_query_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query_id = input;
        self
    }
    /// <p>The identifier for the query. A query ID is an internally-generated identifier for a specific query returned from an API call to create a query.</p>
    pub fn get_query_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.query_id
    }
    /// <p>The token for the next set of results. You receive this token from a previous call.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next set of results. You receive this token from a previous call.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next set of results. You receive this token from a previous call.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The number of query results that you want to return with this call.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of query results that you want to return with this call.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The number of query results that you want to return with this call.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`GetQueryResultsMonitorTopContributorsInput`](crate::operation::get_query_results_monitor_top_contributors::GetQueryResultsMonitorTopContributorsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_query_results_monitor_top_contributors::GetQueryResultsMonitorTopContributorsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::get_query_results_monitor_top_contributors::GetQueryResultsMonitorTopContributorsInput {
                monitor_name: self.monitor_name,
                query_id: self.query_id,
                next_token: self.next_token,
                max_results: self.max_results,
            },
        )
    }
}
