// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateMonitorInput {
    /// <p>The name of the monitor.</p>
    pub monitor_name: ::std::option::Option<::std::string::String>,
    /// <p>The local resources to monitor. A local resource, in a bi-directional flow of a workload, is the host where the agent is installed. For example, if a workload consists of an interaction between a web service and a backend database (for example, Amazon Relational Database Service (RDS)), the EC2 instance hosting the web service, which also runs the agent, is the local resource.</p>
    pub local_resources: ::std::option::Option<::std::vec::Vec<crate::types::MonitorLocalResource>>,
    /// <p>The remote resources to monitor. A remote resource is the other endpoint in the bi-directional flow of a workload, with a local resource. For example, Amazon Relational Database Service (RDS) can be a remote resource.</p>
    pub remote_resources: ::std::option::Option<::std::vec::Vec<crate::types::MonitorRemoteResource>>,
    /// <p>The Amazon Resource Name (ARN) of the scope for the monitor.</p>
    pub scope_arn: ::std::option::Option<::std::string::String>,
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters that you specify to make an idempotent API request. Don't reuse the same client token for other API requests.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The tags for a monitor. You can add a maximum of 200 tags.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateMonitorInput {
    /// <p>The name of the monitor.</p>
    pub fn monitor_name(&self) -> ::std::option::Option<&str> {
        self.monitor_name.as_deref()
    }
    /// <p>The local resources to monitor. A local resource, in a bi-directional flow of a workload, is the host where the agent is installed. For example, if a workload consists of an interaction between a web service and a backend database (for example, Amazon Relational Database Service (RDS)), the EC2 instance hosting the web service, which also runs the agent, is the local resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.local_resources.is_none()`.
    pub fn local_resources(&self) -> &[crate::types::MonitorLocalResource] {
        self.local_resources.as_deref().unwrap_or_default()
    }
    /// <p>The remote resources to monitor. A remote resource is the other endpoint in the bi-directional flow of a workload, with a local resource. For example, Amazon Relational Database Service (RDS) can be a remote resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.remote_resources.is_none()`.
    pub fn remote_resources(&self) -> &[crate::types::MonitorRemoteResource] {
        self.remote_resources.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Resource Name (ARN) of the scope for the monitor.</p>
    pub fn scope_arn(&self) -> ::std::option::Option<&str> {
        self.scope_arn.as_deref()
    }
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters that you specify to make an idempotent API request. Don't reuse the same client token for other API requests.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The tags for a monitor. You can add a maximum of 200 tags.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateMonitorInput {
    /// Creates a new builder-style object to manufacture [`CreateMonitorInput`](crate::operation::create_monitor::CreateMonitorInput).
    pub fn builder() -> crate::operation::create_monitor::builders::CreateMonitorInputBuilder {
        crate::operation::create_monitor::builders::CreateMonitorInputBuilder::default()
    }
}

/// A builder for [`CreateMonitorInput`](crate::operation::create_monitor::CreateMonitorInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateMonitorInputBuilder {
    pub(crate) monitor_name: ::std::option::Option<::std::string::String>,
    pub(crate) local_resources: ::std::option::Option<::std::vec::Vec<crate::types::MonitorLocalResource>>,
    pub(crate) remote_resources: ::std::option::Option<::std::vec::Vec<crate::types::MonitorRemoteResource>>,
    pub(crate) scope_arn: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateMonitorInputBuilder {
    /// <p>The name of the monitor.</p>
    /// This field is required.
    pub fn monitor_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monitor_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the monitor.</p>
    pub fn set_monitor_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monitor_name = input;
        self
    }
    /// <p>The name of the monitor.</p>
    pub fn get_monitor_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.monitor_name
    }
    /// Appends an item to `local_resources`.
    ///
    /// To override the contents of this collection use [`set_local_resources`](Self::set_local_resources).
    ///
    /// <p>The local resources to monitor. A local resource, in a bi-directional flow of a workload, is the host where the agent is installed. For example, if a workload consists of an interaction between a web service and a backend database (for example, Amazon Relational Database Service (RDS)), the EC2 instance hosting the web service, which also runs the agent, is the local resource.</p>
    pub fn local_resources(mut self, input: crate::types::MonitorLocalResource) -> Self {
        let mut v = self.local_resources.unwrap_or_default();
        v.push(input);
        self.local_resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>The local resources to monitor. A local resource, in a bi-directional flow of a workload, is the host where the agent is installed. For example, if a workload consists of an interaction between a web service and a backend database (for example, Amazon Relational Database Service (RDS)), the EC2 instance hosting the web service, which also runs the agent, is the local resource.</p>
    pub fn set_local_resources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MonitorLocalResource>>) -> Self {
        self.local_resources = input;
        self
    }
    /// <p>The local resources to monitor. A local resource, in a bi-directional flow of a workload, is the host where the agent is installed. For example, if a workload consists of an interaction between a web service and a backend database (for example, Amazon Relational Database Service (RDS)), the EC2 instance hosting the web service, which also runs the agent, is the local resource.</p>
    pub fn get_local_resources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MonitorLocalResource>> {
        &self.local_resources
    }
    /// Appends an item to `remote_resources`.
    ///
    /// To override the contents of this collection use [`set_remote_resources`](Self::set_remote_resources).
    ///
    /// <p>The remote resources to monitor. A remote resource is the other endpoint in the bi-directional flow of a workload, with a local resource. For example, Amazon Relational Database Service (RDS) can be a remote resource.</p>
    pub fn remote_resources(mut self, input: crate::types::MonitorRemoteResource) -> Self {
        let mut v = self.remote_resources.unwrap_or_default();
        v.push(input);
        self.remote_resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>The remote resources to monitor. A remote resource is the other endpoint in the bi-directional flow of a workload, with a local resource. For example, Amazon Relational Database Service (RDS) can be a remote resource.</p>
    pub fn set_remote_resources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MonitorRemoteResource>>) -> Self {
        self.remote_resources = input;
        self
    }
    /// <p>The remote resources to monitor. A remote resource is the other endpoint in the bi-directional flow of a workload, with a local resource. For example, Amazon Relational Database Service (RDS) can be a remote resource.</p>
    pub fn get_remote_resources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MonitorRemoteResource>> {
        &self.remote_resources
    }
    /// <p>The Amazon Resource Name (ARN) of the scope for the monitor.</p>
    /// This field is required.
    pub fn scope_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scope_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the scope for the monitor.</p>
    pub fn set_scope_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scope_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the scope for the monitor.</p>
    pub fn get_scope_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.scope_arn
    }
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters that you specify to make an idempotent API request. Don't reuse the same client token for other API requests.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters that you specify to make an idempotent API request. Don't reuse the same client token for other API requests.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters that you specify to make an idempotent API request. Don't reuse the same client token for other API requests.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags for a monitor. You can add a maximum of 200 tags.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags for a monitor. You can add a maximum of 200 tags.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags for a monitor. You can add a maximum of 200 tags.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateMonitorInput`](crate::operation::create_monitor::CreateMonitorInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_monitor::CreateMonitorInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_monitor::CreateMonitorInput {
            monitor_name: self.monitor_name,
            local_resources: self.local_resources,
            remote_resources: self.remote_resources,
            scope_arn: self.scope_arn,
            client_token: self.client_token,
            tags: self.tags,
        })
    }
}
