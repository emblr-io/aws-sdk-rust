// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetQueryStatusWorkloadInsightsTopContributorsOutput {
    /// <p>When you run a query, use this call to check the status of the query to make sure that the query has <code>SUCCEEDED</code> before you review the results.</p>
    /// <ul>
    /// <li>
    /// <p><code>QUEUED</code>: The query is scheduled to run.</p></li>
    /// <li>
    /// <p><code>RUNNING</code>: The query is in progress but not complete.</p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code>: The query completed sucessfully.</p></li>
    /// <li>
    /// <p><code>FAILED</code>: The query failed due to an error.</p></li>
    /// <li>
    /// <p><code>CANCELED</code>: The query was canceled.</p></li>
    /// </ul>
    pub status: crate::types::QueryStatus,
    _request_id: Option<String>,
}
impl GetQueryStatusWorkloadInsightsTopContributorsOutput {
    /// <p>When you run a query, use this call to check the status of the query to make sure that the query has <code>SUCCEEDED</code> before you review the results.</p>
    /// <ul>
    /// <li>
    /// <p><code>QUEUED</code>: The query is scheduled to run.</p></li>
    /// <li>
    /// <p><code>RUNNING</code>: The query is in progress but not complete.</p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code>: The query completed sucessfully.</p></li>
    /// <li>
    /// <p><code>FAILED</code>: The query failed due to an error.</p></li>
    /// <li>
    /// <p><code>CANCELED</code>: The query was canceled.</p></li>
    /// </ul>
    pub fn status(&self) -> &crate::types::QueryStatus {
        &self.status
    }
}
impl ::aws_types::request_id::RequestId for GetQueryStatusWorkloadInsightsTopContributorsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetQueryStatusWorkloadInsightsTopContributorsOutput {
    /// Creates a new builder-style object to manufacture [`GetQueryStatusWorkloadInsightsTopContributorsOutput`](crate::operation::get_query_status_workload_insights_top_contributors::GetQueryStatusWorkloadInsightsTopContributorsOutput).
    pub fn builder(
    ) -> crate::operation::get_query_status_workload_insights_top_contributors::builders::GetQueryStatusWorkloadInsightsTopContributorsOutputBuilder
    {
        crate::operation::get_query_status_workload_insights_top_contributors::builders::GetQueryStatusWorkloadInsightsTopContributorsOutputBuilder::default()
    }
}

/// A builder for [`GetQueryStatusWorkloadInsightsTopContributorsOutput`](crate::operation::get_query_status_workload_insights_top_contributors::GetQueryStatusWorkloadInsightsTopContributorsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetQueryStatusWorkloadInsightsTopContributorsOutputBuilder {
    pub(crate) status: ::std::option::Option<crate::types::QueryStatus>,
    _request_id: Option<String>,
}
impl GetQueryStatusWorkloadInsightsTopContributorsOutputBuilder {
    /// <p>When you run a query, use this call to check the status of the query to make sure that the query has <code>SUCCEEDED</code> before you review the results.</p>
    /// <ul>
    /// <li>
    /// <p><code>QUEUED</code>: The query is scheduled to run.</p></li>
    /// <li>
    /// <p><code>RUNNING</code>: The query is in progress but not complete.</p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code>: The query completed sucessfully.</p></li>
    /// <li>
    /// <p><code>FAILED</code>: The query failed due to an error.</p></li>
    /// <li>
    /// <p><code>CANCELED</code>: The query was canceled.</p></li>
    /// </ul>
    /// This field is required.
    pub fn status(mut self, input: crate::types::QueryStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>When you run a query, use this call to check the status of the query to make sure that the query has <code>SUCCEEDED</code> before you review the results.</p>
    /// <ul>
    /// <li>
    /// <p><code>QUEUED</code>: The query is scheduled to run.</p></li>
    /// <li>
    /// <p><code>RUNNING</code>: The query is in progress but not complete.</p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code>: The query completed sucessfully.</p></li>
    /// <li>
    /// <p><code>FAILED</code>: The query failed due to an error.</p></li>
    /// <li>
    /// <p><code>CANCELED</code>: The query was canceled.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::QueryStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>When you run a query, use this call to check the status of the query to make sure that the query has <code>SUCCEEDED</code> before you review the results.</p>
    /// <ul>
    /// <li>
    /// <p><code>QUEUED</code>: The query is scheduled to run.</p></li>
    /// <li>
    /// <p><code>RUNNING</code>: The query is in progress but not complete.</p></li>
    /// <li>
    /// <p><code>SUCCEEDED</code>: The query completed sucessfully.</p></li>
    /// <li>
    /// <p><code>FAILED</code>: The query failed due to an error.</p></li>
    /// <li>
    /// <p><code>CANCELED</code>: The query was canceled.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::QueryStatus> {
        &self.status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetQueryStatusWorkloadInsightsTopContributorsOutput`](crate::operation::get_query_status_workload_insights_top_contributors::GetQueryStatusWorkloadInsightsTopContributorsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::operation::get_query_status_workload_insights_top_contributors::builders::GetQueryStatusWorkloadInsightsTopContributorsOutputBuilder::status)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_query_status_workload_insights_top_contributors::GetQueryStatusWorkloadInsightsTopContributorsOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::get_query_status_workload_insights_top_contributors::GetQueryStatusWorkloadInsightsTopContributorsOutput {
                status: self.status.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "status",
                        "status was not specified but it is required when building GetQueryStatusWorkloadInsightsTopContributorsOutput",
                    )
                })?,
                _request_id: self._request_id,
            },
        )
    }
}
