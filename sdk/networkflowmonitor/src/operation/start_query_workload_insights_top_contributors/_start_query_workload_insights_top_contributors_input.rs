// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartQueryWorkloadInsightsTopContributorsInput {
    /// <p>The identifier for the scope that includes the resources you want to get data results for. A scope ID is an internally-generated identifier that includes all the resources for a specific root account. A scope ID is returned from a <code>CreateScope</code> API call.</p>
    pub scope_id: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp that is the date and time beginning of the period that you want to retrieve results for with your query.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp that is the date and time end of the period that you want to retrieve results for with your query.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The metric that you want to query top contributors for. That is, you can specify this metric to return the top contributor network flows, for this type of metric, for a monitor and (optionally) within a specific category, such as network flows between Availability Zones.</p>
    pub metric_name: ::std::option::Option<crate::types::WorkloadInsightsMetric>,
    /// <p>The destination category for a top contributors row. Destination categories can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>INTRA_AZ</code>: Top contributor network flows within a single Availability Zone</p></li>
    /// <li>
    /// <p><code>INTER_AZ</code>: Top contributor network flows between Availability Zones</p></li>
    /// <li>
    /// <p><code>INTER_VPC</code>: Top contributor network flows between VPCs</p></li>
    /// <li>
    /// <p><code>AWS_SERVICES</code>: Top contributor network flows to or from Amazon Web Services services</p></li>
    /// <li>
    /// <p><code>UNCLASSIFIED</code>: Top contributor network flows that do not have a bucket classification</p></li>
    /// </ul>
    pub destination_category: ::std::option::Option<crate::types::DestinationCategory>,
    /// <p>The maximum number of top contributors to return.</p>
    pub limit: ::std::option::Option<i32>,
}
impl StartQueryWorkloadInsightsTopContributorsInput {
    /// <p>The identifier for the scope that includes the resources you want to get data results for. A scope ID is an internally-generated identifier that includes all the resources for a specific root account. A scope ID is returned from a <code>CreateScope</code> API call.</p>
    pub fn scope_id(&self) -> ::std::option::Option<&str> {
        self.scope_id.as_deref()
    }
    /// <p>The timestamp that is the date and time beginning of the period that you want to retrieve results for with your query.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The timestamp that is the date and time end of the period that you want to retrieve results for with your query.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The metric that you want to query top contributors for. That is, you can specify this metric to return the top contributor network flows, for this type of metric, for a monitor and (optionally) within a specific category, such as network flows between Availability Zones.</p>
    pub fn metric_name(&self) -> ::std::option::Option<&crate::types::WorkloadInsightsMetric> {
        self.metric_name.as_ref()
    }
    /// <p>The destination category for a top contributors row. Destination categories can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>INTRA_AZ</code>: Top contributor network flows within a single Availability Zone</p></li>
    /// <li>
    /// <p><code>INTER_AZ</code>: Top contributor network flows between Availability Zones</p></li>
    /// <li>
    /// <p><code>INTER_VPC</code>: Top contributor network flows between VPCs</p></li>
    /// <li>
    /// <p><code>AWS_SERVICES</code>: Top contributor network flows to or from Amazon Web Services services</p></li>
    /// <li>
    /// <p><code>UNCLASSIFIED</code>: Top contributor network flows that do not have a bucket classification</p></li>
    /// </ul>
    pub fn destination_category(&self) -> ::std::option::Option<&crate::types::DestinationCategory> {
        self.destination_category.as_ref()
    }
    /// <p>The maximum number of top contributors to return.</p>
    pub fn limit(&self) -> ::std::option::Option<i32> {
        self.limit
    }
}
impl StartQueryWorkloadInsightsTopContributorsInput {
    /// Creates a new builder-style object to manufacture [`StartQueryWorkloadInsightsTopContributorsInput`](crate::operation::start_query_workload_insights_top_contributors::StartQueryWorkloadInsightsTopContributorsInput).
    pub fn builder(
    ) -> crate::operation::start_query_workload_insights_top_contributors::builders::StartQueryWorkloadInsightsTopContributorsInputBuilder {
        crate::operation::start_query_workload_insights_top_contributors::builders::StartQueryWorkloadInsightsTopContributorsInputBuilder::default()
    }
}

/// A builder for [`StartQueryWorkloadInsightsTopContributorsInput`](crate::operation::start_query_workload_insights_top_contributors::StartQueryWorkloadInsightsTopContributorsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartQueryWorkloadInsightsTopContributorsInputBuilder {
    pub(crate) scope_id: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) metric_name: ::std::option::Option<crate::types::WorkloadInsightsMetric>,
    pub(crate) destination_category: ::std::option::Option<crate::types::DestinationCategory>,
    pub(crate) limit: ::std::option::Option<i32>,
}
impl StartQueryWorkloadInsightsTopContributorsInputBuilder {
    /// <p>The identifier for the scope that includes the resources you want to get data results for. A scope ID is an internally-generated identifier that includes all the resources for a specific root account. A scope ID is returned from a <code>CreateScope</code> API call.</p>
    /// This field is required.
    pub fn scope_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scope_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the scope that includes the resources you want to get data results for. A scope ID is an internally-generated identifier that includes all the resources for a specific root account. A scope ID is returned from a <code>CreateScope</code> API call.</p>
    pub fn set_scope_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scope_id = input;
        self
    }
    /// <p>The identifier for the scope that includes the resources you want to get data results for. A scope ID is an internally-generated identifier that includes all the resources for a specific root account. A scope ID is returned from a <code>CreateScope</code> API call.</p>
    pub fn get_scope_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.scope_id
    }
    /// <p>The timestamp that is the date and time beginning of the period that you want to retrieve results for with your query.</p>
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp that is the date and time beginning of the period that you want to retrieve results for with your query.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The timestamp that is the date and time beginning of the period that you want to retrieve results for with your query.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The timestamp that is the date and time end of the period that you want to retrieve results for with your query.</p>
    /// This field is required.
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp that is the date and time end of the period that you want to retrieve results for with your query.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The timestamp that is the date and time end of the period that you want to retrieve results for with your query.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The metric that you want to query top contributors for. That is, you can specify this metric to return the top contributor network flows, for this type of metric, for a monitor and (optionally) within a specific category, such as network flows between Availability Zones.</p>
    /// This field is required.
    pub fn metric_name(mut self, input: crate::types::WorkloadInsightsMetric) -> Self {
        self.metric_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metric that you want to query top contributors for. That is, you can specify this metric to return the top contributor network flows, for this type of metric, for a monitor and (optionally) within a specific category, such as network flows between Availability Zones.</p>
    pub fn set_metric_name(mut self, input: ::std::option::Option<crate::types::WorkloadInsightsMetric>) -> Self {
        self.metric_name = input;
        self
    }
    /// <p>The metric that you want to query top contributors for. That is, you can specify this metric to return the top contributor network flows, for this type of metric, for a monitor and (optionally) within a specific category, such as network flows between Availability Zones.</p>
    pub fn get_metric_name(&self) -> &::std::option::Option<crate::types::WorkloadInsightsMetric> {
        &self.metric_name
    }
    /// <p>The destination category for a top contributors row. Destination categories can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>INTRA_AZ</code>: Top contributor network flows within a single Availability Zone</p></li>
    /// <li>
    /// <p><code>INTER_AZ</code>: Top contributor network flows between Availability Zones</p></li>
    /// <li>
    /// <p><code>INTER_VPC</code>: Top contributor network flows between VPCs</p></li>
    /// <li>
    /// <p><code>AWS_SERVICES</code>: Top contributor network flows to or from Amazon Web Services services</p></li>
    /// <li>
    /// <p><code>UNCLASSIFIED</code>: Top contributor network flows that do not have a bucket classification</p></li>
    /// </ul>
    /// This field is required.
    pub fn destination_category(mut self, input: crate::types::DestinationCategory) -> Self {
        self.destination_category = ::std::option::Option::Some(input);
        self
    }
    /// <p>The destination category for a top contributors row. Destination categories can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>INTRA_AZ</code>: Top contributor network flows within a single Availability Zone</p></li>
    /// <li>
    /// <p><code>INTER_AZ</code>: Top contributor network flows between Availability Zones</p></li>
    /// <li>
    /// <p><code>INTER_VPC</code>: Top contributor network flows between VPCs</p></li>
    /// <li>
    /// <p><code>AWS_SERVICES</code>: Top contributor network flows to or from Amazon Web Services services</p></li>
    /// <li>
    /// <p><code>UNCLASSIFIED</code>: Top contributor network flows that do not have a bucket classification</p></li>
    /// </ul>
    pub fn set_destination_category(mut self, input: ::std::option::Option<crate::types::DestinationCategory>) -> Self {
        self.destination_category = input;
        self
    }
    /// <p>The destination category for a top contributors row. Destination categories can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>INTRA_AZ</code>: Top contributor network flows within a single Availability Zone</p></li>
    /// <li>
    /// <p><code>INTER_AZ</code>: Top contributor network flows between Availability Zones</p></li>
    /// <li>
    /// <p><code>INTER_VPC</code>: Top contributor network flows between VPCs</p></li>
    /// <li>
    /// <p><code>AWS_SERVICES</code>: Top contributor network flows to or from Amazon Web Services services</p></li>
    /// <li>
    /// <p><code>UNCLASSIFIED</code>: Top contributor network flows that do not have a bucket classification</p></li>
    /// </ul>
    pub fn get_destination_category(&self) -> &::std::option::Option<crate::types::DestinationCategory> {
        &self.destination_category
    }
    /// <p>The maximum number of top contributors to return.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of top contributors to return.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>The maximum number of top contributors to return.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        &self.limit
    }
    /// Consumes the builder and constructs a [`StartQueryWorkloadInsightsTopContributorsInput`](crate::operation::start_query_workload_insights_top_contributors::StartQueryWorkloadInsightsTopContributorsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_query_workload_insights_top_contributors::StartQueryWorkloadInsightsTopContributorsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::start_query_workload_insights_top_contributors::StartQueryWorkloadInsightsTopContributorsInput {
                scope_id: self.scope_id,
                start_time: self.start_time,
                end_time: self.end_time,
                metric_name: self.metric_name,
                destination_category: self.destination_category,
                limit: self.limit,
            },
        )
    }
}
