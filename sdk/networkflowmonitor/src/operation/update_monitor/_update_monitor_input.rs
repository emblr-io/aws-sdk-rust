// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateMonitorInput {
    /// <p>The name of the monitor.</p>
    pub monitor_name: ::std::option::Option<::std::string::String>,
    /// <p>The local resources to add, as an array of resources with identifiers and types.</p>
    pub local_resources_to_add: ::std::option::Option<::std::vec::Vec<crate::types::MonitorLocalResource>>,
    /// <p>The local resources to remove, as an array of resources with identifiers and types.</p>
    pub local_resources_to_remove: ::std::option::Option<::std::vec::Vec<crate::types::MonitorLocalResource>>,
    /// <p>The remove resources to add, as an array of resources with identifiers and types.</p>
    pub remote_resources_to_add: ::std::option::Option<::std::vec::Vec<crate::types::MonitorRemoteResource>>,
    /// <p>The remove resources to remove, as an array of resources with identifiers and types.</p>
    pub remote_resources_to_remove: ::std::option::Option<::std::vec::Vec<crate::types::MonitorRemoteResource>>,
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters that you specify to make an idempotent API request. Don't reuse the same client token for other API requests.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateMonitorInput {
    /// <p>The name of the monitor.</p>
    pub fn monitor_name(&self) -> ::std::option::Option<&str> {
        self.monitor_name.as_deref()
    }
    /// <p>The local resources to add, as an array of resources with identifiers and types.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.local_resources_to_add.is_none()`.
    pub fn local_resources_to_add(&self) -> &[crate::types::MonitorLocalResource] {
        self.local_resources_to_add.as_deref().unwrap_or_default()
    }
    /// <p>The local resources to remove, as an array of resources with identifiers and types.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.local_resources_to_remove.is_none()`.
    pub fn local_resources_to_remove(&self) -> &[crate::types::MonitorLocalResource] {
        self.local_resources_to_remove.as_deref().unwrap_or_default()
    }
    /// <p>The remove resources to add, as an array of resources with identifiers and types.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.remote_resources_to_add.is_none()`.
    pub fn remote_resources_to_add(&self) -> &[crate::types::MonitorRemoteResource] {
        self.remote_resources_to_add.as_deref().unwrap_or_default()
    }
    /// <p>The remove resources to remove, as an array of resources with identifiers and types.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.remote_resources_to_remove.is_none()`.
    pub fn remote_resources_to_remove(&self) -> &[crate::types::MonitorRemoteResource] {
        self.remote_resources_to_remove.as_deref().unwrap_or_default()
    }
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters that you specify to make an idempotent API request. Don't reuse the same client token for other API requests.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl UpdateMonitorInput {
    /// Creates a new builder-style object to manufacture [`UpdateMonitorInput`](crate::operation::update_monitor::UpdateMonitorInput).
    pub fn builder() -> crate::operation::update_monitor::builders::UpdateMonitorInputBuilder {
        crate::operation::update_monitor::builders::UpdateMonitorInputBuilder::default()
    }
}

/// A builder for [`UpdateMonitorInput`](crate::operation::update_monitor::UpdateMonitorInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateMonitorInputBuilder {
    pub(crate) monitor_name: ::std::option::Option<::std::string::String>,
    pub(crate) local_resources_to_add: ::std::option::Option<::std::vec::Vec<crate::types::MonitorLocalResource>>,
    pub(crate) local_resources_to_remove: ::std::option::Option<::std::vec::Vec<crate::types::MonitorLocalResource>>,
    pub(crate) remote_resources_to_add: ::std::option::Option<::std::vec::Vec<crate::types::MonitorRemoteResource>>,
    pub(crate) remote_resources_to_remove: ::std::option::Option<::std::vec::Vec<crate::types::MonitorRemoteResource>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateMonitorInputBuilder {
    /// <p>The name of the monitor.</p>
    /// This field is required.
    pub fn monitor_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monitor_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the monitor.</p>
    pub fn set_monitor_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monitor_name = input;
        self
    }
    /// <p>The name of the monitor.</p>
    pub fn get_monitor_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.monitor_name
    }
    /// Appends an item to `local_resources_to_add`.
    ///
    /// To override the contents of this collection use [`set_local_resources_to_add`](Self::set_local_resources_to_add).
    ///
    /// <p>The local resources to add, as an array of resources with identifiers and types.</p>
    pub fn local_resources_to_add(mut self, input: crate::types::MonitorLocalResource) -> Self {
        let mut v = self.local_resources_to_add.unwrap_or_default();
        v.push(input);
        self.local_resources_to_add = ::std::option::Option::Some(v);
        self
    }
    /// <p>The local resources to add, as an array of resources with identifiers and types.</p>
    pub fn set_local_resources_to_add(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MonitorLocalResource>>) -> Self {
        self.local_resources_to_add = input;
        self
    }
    /// <p>The local resources to add, as an array of resources with identifiers and types.</p>
    pub fn get_local_resources_to_add(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MonitorLocalResource>> {
        &self.local_resources_to_add
    }
    /// Appends an item to `local_resources_to_remove`.
    ///
    /// To override the contents of this collection use [`set_local_resources_to_remove`](Self::set_local_resources_to_remove).
    ///
    /// <p>The local resources to remove, as an array of resources with identifiers and types.</p>
    pub fn local_resources_to_remove(mut self, input: crate::types::MonitorLocalResource) -> Self {
        let mut v = self.local_resources_to_remove.unwrap_or_default();
        v.push(input);
        self.local_resources_to_remove = ::std::option::Option::Some(v);
        self
    }
    /// <p>The local resources to remove, as an array of resources with identifiers and types.</p>
    pub fn set_local_resources_to_remove(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MonitorLocalResource>>) -> Self {
        self.local_resources_to_remove = input;
        self
    }
    /// <p>The local resources to remove, as an array of resources with identifiers and types.</p>
    pub fn get_local_resources_to_remove(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MonitorLocalResource>> {
        &self.local_resources_to_remove
    }
    /// Appends an item to `remote_resources_to_add`.
    ///
    /// To override the contents of this collection use [`set_remote_resources_to_add`](Self::set_remote_resources_to_add).
    ///
    /// <p>The remove resources to add, as an array of resources with identifiers and types.</p>
    pub fn remote_resources_to_add(mut self, input: crate::types::MonitorRemoteResource) -> Self {
        let mut v = self.remote_resources_to_add.unwrap_or_default();
        v.push(input);
        self.remote_resources_to_add = ::std::option::Option::Some(v);
        self
    }
    /// <p>The remove resources to add, as an array of resources with identifiers and types.</p>
    pub fn set_remote_resources_to_add(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MonitorRemoteResource>>) -> Self {
        self.remote_resources_to_add = input;
        self
    }
    /// <p>The remove resources to add, as an array of resources with identifiers and types.</p>
    pub fn get_remote_resources_to_add(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MonitorRemoteResource>> {
        &self.remote_resources_to_add
    }
    /// Appends an item to `remote_resources_to_remove`.
    ///
    /// To override the contents of this collection use [`set_remote_resources_to_remove`](Self::set_remote_resources_to_remove).
    ///
    /// <p>The remove resources to remove, as an array of resources with identifiers and types.</p>
    pub fn remote_resources_to_remove(mut self, input: crate::types::MonitorRemoteResource) -> Self {
        let mut v = self.remote_resources_to_remove.unwrap_or_default();
        v.push(input);
        self.remote_resources_to_remove = ::std::option::Option::Some(v);
        self
    }
    /// <p>The remove resources to remove, as an array of resources with identifiers and types.</p>
    pub fn set_remote_resources_to_remove(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MonitorRemoteResource>>) -> Self {
        self.remote_resources_to_remove = input;
        self
    }
    /// <p>The remove resources to remove, as an array of resources with identifiers and types.</p>
    pub fn get_remote_resources_to_remove(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MonitorRemoteResource>> {
        &self.remote_resources_to_remove
    }
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters that you specify to make an idempotent API request. Don't reuse the same client token for other API requests.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters that you specify to make an idempotent API request. Don't reuse the same client token for other API requests.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters that you specify to make an idempotent API request. Don't reuse the same client token for other API requests.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`UpdateMonitorInput`](crate::operation::update_monitor::UpdateMonitorInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_monitor::UpdateMonitorInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_monitor::UpdateMonitorInput {
            monitor_name: self.monitor_name,
            local_resources_to_add: self.local_resources_to_add,
            local_resources_to_remove: self.local_resources_to_remove,
            remote_resources_to_add: self.remote_resources_to_add,
            remote_resources_to_remove: self.remote_resources_to_remove,
            client_token: self.client_token,
        })
    }
}
