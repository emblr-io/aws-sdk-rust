// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Meta data about Kubernetes resources.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KubernetesMetadata {
    /// <p>The service name for a local resource.</p>
    pub local_service_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the pod for a local resource.</p>
    pub local_pod_name: ::std::option::Option<::std::string::String>,
    /// <p>The namespace of the pod for a local resource.</p>
    pub local_pod_namespace: ::std::option::Option<::std::string::String>,
    /// <p>The service name for a remote resource.</p>
    pub remote_service_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the pod for a remote resource.</p>
    pub remote_pod_name: ::std::option::Option<::std::string::String>,
    /// <p>The namespace of the pod for a remote resource.</p>
    pub remote_pod_namespace: ::std::option::Option<::std::string::String>,
}
impl KubernetesMetadata {
    /// <p>The service name for a local resource.</p>
    pub fn local_service_name(&self) -> ::std::option::Option<&str> {
        self.local_service_name.as_deref()
    }
    /// <p>The name of the pod for a local resource.</p>
    pub fn local_pod_name(&self) -> ::std::option::Option<&str> {
        self.local_pod_name.as_deref()
    }
    /// <p>The namespace of the pod for a local resource.</p>
    pub fn local_pod_namespace(&self) -> ::std::option::Option<&str> {
        self.local_pod_namespace.as_deref()
    }
    /// <p>The service name for a remote resource.</p>
    pub fn remote_service_name(&self) -> ::std::option::Option<&str> {
        self.remote_service_name.as_deref()
    }
    /// <p>The name of the pod for a remote resource.</p>
    pub fn remote_pod_name(&self) -> ::std::option::Option<&str> {
        self.remote_pod_name.as_deref()
    }
    /// <p>The namespace of the pod for a remote resource.</p>
    pub fn remote_pod_namespace(&self) -> ::std::option::Option<&str> {
        self.remote_pod_namespace.as_deref()
    }
}
impl KubernetesMetadata {
    /// Creates a new builder-style object to manufacture [`KubernetesMetadata`](crate::types::KubernetesMetadata).
    pub fn builder() -> crate::types::builders::KubernetesMetadataBuilder {
        crate::types::builders::KubernetesMetadataBuilder::default()
    }
}

/// A builder for [`KubernetesMetadata`](crate::types::KubernetesMetadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct KubernetesMetadataBuilder {
    pub(crate) local_service_name: ::std::option::Option<::std::string::String>,
    pub(crate) local_pod_name: ::std::option::Option<::std::string::String>,
    pub(crate) local_pod_namespace: ::std::option::Option<::std::string::String>,
    pub(crate) remote_service_name: ::std::option::Option<::std::string::String>,
    pub(crate) remote_pod_name: ::std::option::Option<::std::string::String>,
    pub(crate) remote_pod_namespace: ::std::option::Option<::std::string::String>,
}
impl KubernetesMetadataBuilder {
    /// <p>The service name for a local resource.</p>
    pub fn local_service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_service_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The service name for a local resource.</p>
    pub fn set_local_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_service_name = input;
        self
    }
    /// <p>The service name for a local resource.</p>
    pub fn get_local_service_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_service_name
    }
    /// <p>The name of the pod for a local resource.</p>
    pub fn local_pod_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_pod_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the pod for a local resource.</p>
    pub fn set_local_pod_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_pod_name = input;
        self
    }
    /// <p>The name of the pod for a local resource.</p>
    pub fn get_local_pod_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_pod_name
    }
    /// <p>The namespace of the pod for a local resource.</p>
    pub fn local_pod_namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_pod_namespace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The namespace of the pod for a local resource.</p>
    pub fn set_local_pod_namespace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_pod_namespace = input;
        self
    }
    /// <p>The namespace of the pod for a local resource.</p>
    pub fn get_local_pod_namespace(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_pod_namespace
    }
    /// <p>The service name for a remote resource.</p>
    pub fn remote_service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.remote_service_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The service name for a remote resource.</p>
    pub fn set_remote_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.remote_service_name = input;
        self
    }
    /// <p>The service name for a remote resource.</p>
    pub fn get_remote_service_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.remote_service_name
    }
    /// <p>The name of the pod for a remote resource.</p>
    pub fn remote_pod_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.remote_pod_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the pod for a remote resource.</p>
    pub fn set_remote_pod_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.remote_pod_name = input;
        self
    }
    /// <p>The name of the pod for a remote resource.</p>
    pub fn get_remote_pod_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.remote_pod_name
    }
    /// <p>The namespace of the pod for a remote resource.</p>
    pub fn remote_pod_namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.remote_pod_namespace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The namespace of the pod for a remote resource.</p>
    pub fn set_remote_pod_namespace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.remote_pod_namespace = input;
        self
    }
    /// <p>The namespace of the pod for a remote resource.</p>
    pub fn get_remote_pod_namespace(&self) -> &::std::option::Option<::std::string::String> {
        &self.remote_pod_namespace
    }
    /// Consumes the builder and constructs a [`KubernetesMetadata`](crate::types::KubernetesMetadata).
    pub fn build(self) -> crate::types::KubernetesMetadata {
        crate::types::KubernetesMetadata {
            local_service_name: self.local_service_name,
            local_pod_name: self.local_pod_name,
            local_pod_namespace: self.local_pod_namespace,
            remote_service_name: self.remote_service_name,
            remote_pod_name: self.remote_pod_name,
            remote_pod_namespace: self.remote_pod_namespace,
        }
    }
}
