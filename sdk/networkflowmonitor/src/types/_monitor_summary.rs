// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of information about a monitor, includ the ARN, the name, and the status.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MonitorSummary {
    /// <p>The Amazon Resource Name (ARN) of the monitor.</p>
    pub monitor_arn: ::std::string::String,
    /// <p>The name of the monitor.</p>
    pub monitor_name: ::std::string::String,
    /// <p>The status of a monitor. The status can be one of the following</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code>: The monitor is in the process of being created.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The monitor is active.</p></li>
    /// <li>
    /// <p><code>INACTIVE</code>: The monitor is inactive.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: Monitor creation failed due to an error.</p></li>
    /// <li>
    /// <p><code>DELETING</code>: The monitor is in the process of being deleted.</p></li>
    /// </ul>
    pub monitor_status: crate::types::MonitorStatus,
}
impl MonitorSummary {
    /// <p>The Amazon Resource Name (ARN) of the monitor.</p>
    pub fn monitor_arn(&self) -> &str {
        use std::ops::Deref;
        self.monitor_arn.deref()
    }
    /// <p>The name of the monitor.</p>
    pub fn monitor_name(&self) -> &str {
        use std::ops::Deref;
        self.monitor_name.deref()
    }
    /// <p>The status of a monitor. The status can be one of the following</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code>: The monitor is in the process of being created.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The monitor is active.</p></li>
    /// <li>
    /// <p><code>INACTIVE</code>: The monitor is inactive.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: Monitor creation failed due to an error.</p></li>
    /// <li>
    /// <p><code>DELETING</code>: The monitor is in the process of being deleted.</p></li>
    /// </ul>
    pub fn monitor_status(&self) -> &crate::types::MonitorStatus {
        &self.monitor_status
    }
}
impl MonitorSummary {
    /// Creates a new builder-style object to manufacture [`MonitorSummary`](crate::types::MonitorSummary).
    pub fn builder() -> crate::types::builders::MonitorSummaryBuilder {
        crate::types::builders::MonitorSummaryBuilder::default()
    }
}

/// A builder for [`MonitorSummary`](crate::types::MonitorSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MonitorSummaryBuilder {
    pub(crate) monitor_arn: ::std::option::Option<::std::string::String>,
    pub(crate) monitor_name: ::std::option::Option<::std::string::String>,
    pub(crate) monitor_status: ::std::option::Option<crate::types::MonitorStatus>,
}
impl MonitorSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the monitor.</p>
    /// This field is required.
    pub fn monitor_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monitor_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the monitor.</p>
    pub fn set_monitor_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monitor_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the monitor.</p>
    pub fn get_monitor_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.monitor_arn
    }
    /// <p>The name of the monitor.</p>
    /// This field is required.
    pub fn monitor_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monitor_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the monitor.</p>
    pub fn set_monitor_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monitor_name = input;
        self
    }
    /// <p>The name of the monitor.</p>
    pub fn get_monitor_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.monitor_name
    }
    /// <p>The status of a monitor. The status can be one of the following</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code>: The monitor is in the process of being created.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The monitor is active.</p></li>
    /// <li>
    /// <p><code>INACTIVE</code>: The monitor is inactive.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: Monitor creation failed due to an error.</p></li>
    /// <li>
    /// <p><code>DELETING</code>: The monitor is in the process of being deleted.</p></li>
    /// </ul>
    /// This field is required.
    pub fn monitor_status(mut self, input: crate::types::MonitorStatus) -> Self {
        self.monitor_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of a monitor. The status can be one of the following</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code>: The monitor is in the process of being created.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The monitor is active.</p></li>
    /// <li>
    /// <p><code>INACTIVE</code>: The monitor is inactive.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: Monitor creation failed due to an error.</p></li>
    /// <li>
    /// <p><code>DELETING</code>: The monitor is in the process of being deleted.</p></li>
    /// </ul>
    pub fn set_monitor_status(mut self, input: ::std::option::Option<crate::types::MonitorStatus>) -> Self {
        self.monitor_status = input;
        self
    }
    /// <p>The status of a monitor. The status can be one of the following</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code>: The monitor is in the process of being created.</p></li>
    /// <li>
    /// <p><code>ACTIVE</code>: The monitor is active.</p></li>
    /// <li>
    /// <p><code>INACTIVE</code>: The monitor is inactive.</p></li>
    /// <li>
    /// <p><code>ERROR</code>: Monitor creation failed due to an error.</p></li>
    /// <li>
    /// <p><code>DELETING</code>: The monitor is in the process of being deleted.</p></li>
    /// </ul>
    pub fn get_monitor_status(&self) -> &::std::option::Option<crate::types::MonitorStatus> {
        &self.monitor_status
    }
    /// Consumes the builder and constructs a [`MonitorSummary`](crate::types::MonitorSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`monitor_arn`](crate::types::builders::MonitorSummaryBuilder::monitor_arn)
    /// - [`monitor_name`](crate::types::builders::MonitorSummaryBuilder::monitor_name)
    /// - [`monitor_status`](crate::types::builders::MonitorSummaryBuilder::monitor_status)
    pub fn build(self) -> ::std::result::Result<crate::types::MonitorSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MonitorSummary {
            monitor_arn: self.monitor_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "monitor_arn",
                    "monitor_arn was not specified but it is required when building MonitorSummary",
                )
            })?,
            monitor_name: self.monitor_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "monitor_name",
                    "monitor_name was not specified but it is required when building MonitorSummary",
                )
            })?,
            monitor_status: self.monitor_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "monitor_status",
                    "monitor_status was not specified but it is required when building MonitorSummary",
                )
            })?,
        })
    }
}
