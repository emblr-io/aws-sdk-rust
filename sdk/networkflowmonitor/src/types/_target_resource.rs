// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A target resource in a scope. The resource is identified by a Region and a target identifier, which includes a target ID and a target type.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TargetResource {
    /// <p>A target identifier is a pair of identifying information for a resource that is included in a target. A target identifier includes the target ID and the target type.</p>
    pub target_identifier: ::std::option::Option<crate::types::TargetIdentifier>,
    /// <p>The Amazon Web Services Region where the target resource is located.</p>
    pub region: ::std::string::String,
}
impl TargetResource {
    /// <p>A target identifier is a pair of identifying information for a resource that is included in a target. A target identifier includes the target ID and the target type.</p>
    pub fn target_identifier(&self) -> ::std::option::Option<&crate::types::TargetIdentifier> {
        self.target_identifier.as_ref()
    }
    /// <p>The Amazon Web Services Region where the target resource is located.</p>
    pub fn region(&self) -> &str {
        use std::ops::Deref;
        self.region.deref()
    }
}
impl TargetResource {
    /// Creates a new builder-style object to manufacture [`TargetResource`](crate::types::TargetResource).
    pub fn builder() -> crate::types::builders::TargetResourceBuilder {
        crate::types::builders::TargetResourceBuilder::default()
    }
}

/// A builder for [`TargetResource`](crate::types::TargetResource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TargetResourceBuilder {
    pub(crate) target_identifier: ::std::option::Option<crate::types::TargetIdentifier>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
}
impl TargetResourceBuilder {
    /// <p>A target identifier is a pair of identifying information for a resource that is included in a target. A target identifier includes the target ID and the target type.</p>
    /// This field is required.
    pub fn target_identifier(mut self, input: crate::types::TargetIdentifier) -> Self {
        self.target_identifier = ::std::option::Option::Some(input);
        self
    }
    /// <p>A target identifier is a pair of identifying information for a resource that is included in a target. A target identifier includes the target ID and the target type.</p>
    pub fn set_target_identifier(mut self, input: ::std::option::Option<crate::types::TargetIdentifier>) -> Self {
        self.target_identifier = input;
        self
    }
    /// <p>A target identifier is a pair of identifying information for a resource that is included in a target. A target identifier includes the target ID and the target type.</p>
    pub fn get_target_identifier(&self) -> &::std::option::Option<crate::types::TargetIdentifier> {
        &self.target_identifier
    }
    /// <p>The Amazon Web Services Region where the target resource is located.</p>
    /// This field is required.
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region where the target resource is located.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Amazon Web Services Region where the target resource is located.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// Consumes the builder and constructs a [`TargetResource`](crate::types::TargetResource).
    /// This method will fail if any of the following fields are not set:
    /// - [`region`](crate::types::builders::TargetResourceBuilder::region)
    pub fn build(self) -> ::std::result::Result<crate::types::TargetResource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TargetResource {
            target_identifier: self.target_identifier,
            region: self.region.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "region",
                    "region was not specified but it is required when building TargetResource",
                )
            })?,
        })
    }
}
