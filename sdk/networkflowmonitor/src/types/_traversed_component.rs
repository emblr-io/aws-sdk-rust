// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A section of the network that a network flow has traveled through.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TraversedComponent {
    /// <p>The identifier for the traversed component.</p>
    pub component_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of component that was traversed.</p>
    pub component_type: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of a tranversed component.</p>
    pub component_arn: ::std::option::Option<::std::string::String>,
    /// <p>The service name for the traversed component.</p>
    pub service_name: ::std::option::Option<::std::string::String>,
}
impl TraversedComponent {
    /// <p>The identifier for the traversed component.</p>
    pub fn component_id(&self) -> ::std::option::Option<&str> {
        self.component_id.as_deref()
    }
    /// <p>The type of component that was traversed.</p>
    pub fn component_type(&self) -> ::std::option::Option<&str> {
        self.component_type.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of a tranversed component.</p>
    pub fn component_arn(&self) -> ::std::option::Option<&str> {
        self.component_arn.as_deref()
    }
    /// <p>The service name for the traversed component.</p>
    pub fn service_name(&self) -> ::std::option::Option<&str> {
        self.service_name.as_deref()
    }
}
impl TraversedComponent {
    /// Creates a new builder-style object to manufacture [`TraversedComponent`](crate::types::TraversedComponent).
    pub fn builder() -> crate::types::builders::TraversedComponentBuilder {
        crate::types::builders::TraversedComponentBuilder::default()
    }
}

/// A builder for [`TraversedComponent`](crate::types::TraversedComponent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TraversedComponentBuilder {
    pub(crate) component_id: ::std::option::Option<::std::string::String>,
    pub(crate) component_type: ::std::option::Option<::std::string::String>,
    pub(crate) component_arn: ::std::option::Option<::std::string::String>,
    pub(crate) service_name: ::std::option::Option<::std::string::String>,
}
impl TraversedComponentBuilder {
    /// <p>The identifier for the traversed component.</p>
    pub fn component_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.component_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the traversed component.</p>
    pub fn set_component_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.component_id = input;
        self
    }
    /// <p>The identifier for the traversed component.</p>
    pub fn get_component_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.component_id
    }
    /// <p>The type of component that was traversed.</p>
    pub fn component_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.component_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of component that was traversed.</p>
    pub fn set_component_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.component_type = input;
        self
    }
    /// <p>The type of component that was traversed.</p>
    pub fn get_component_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.component_type
    }
    /// <p>The Amazon Resource Name (ARN) of a tranversed component.</p>
    pub fn component_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.component_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a tranversed component.</p>
    pub fn set_component_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.component_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a tranversed component.</p>
    pub fn get_component_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.component_arn
    }
    /// <p>The service name for the traversed component.</p>
    pub fn service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The service name for the traversed component.</p>
    pub fn set_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_name = input;
        self
    }
    /// <p>The service name for the traversed component.</p>
    pub fn get_service_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_name
    }
    /// Consumes the builder and constructs a [`TraversedComponent`](crate::types::TraversedComponent).
    pub fn build(self) -> crate::types::TraversedComponent {
        crate::types::TraversedComponent {
            component_id: self.component_id,
            component_type: self.component_type,
            component_arn: self.component_arn,
            service_name: self.service_name,
        }
    }
}
