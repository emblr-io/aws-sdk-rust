// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A row for a top contributor for a scope.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkloadInsightsTopContributorsRow {
    /// <p>The account ID for a specific row of data.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The subnet identifier for the local resource.</p>
    pub local_subnet_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier for the Availability Zone where the local resource is located.</p>
    pub local_az: ::std::option::Option<::std::string::String>,
    /// <p>The identifier for the VPC for the local resource.</p>
    pub local_vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region where the local resource is located.</p>
    pub local_region: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of a remote resource.</p>
    pub remote_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The value for a metric.</p>
    pub value: ::std::option::Option<i64>,
    /// <p>The Amazon Resource Name (ARN) of a local subnet.</p>
    pub local_subnet_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of a local VPC.</p>
    pub local_vpc_arn: ::std::option::Option<::std::string::String>,
}
impl WorkloadInsightsTopContributorsRow {
    /// <p>The account ID for a specific row of data.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The subnet identifier for the local resource.</p>
    pub fn local_subnet_id(&self) -> ::std::option::Option<&str> {
        self.local_subnet_id.as_deref()
    }
    /// <p>The identifier for the Availability Zone where the local resource is located.</p>
    pub fn local_az(&self) -> ::std::option::Option<&str> {
        self.local_az.as_deref()
    }
    /// <p>The identifier for the VPC for the local resource.</p>
    pub fn local_vpc_id(&self) -> ::std::option::Option<&str> {
        self.local_vpc_id.as_deref()
    }
    /// <p>The Amazon Web Services Region where the local resource is located.</p>
    pub fn local_region(&self) -> ::std::option::Option<&str> {
        self.local_region.as_deref()
    }
    /// <p>The identifier of a remote resource.</p>
    pub fn remote_identifier(&self) -> ::std::option::Option<&str> {
        self.remote_identifier.as_deref()
    }
    /// <p>The value for a metric.</p>
    pub fn value(&self) -> ::std::option::Option<i64> {
        self.value
    }
    /// <p>The Amazon Resource Name (ARN) of a local subnet.</p>
    pub fn local_subnet_arn(&self) -> ::std::option::Option<&str> {
        self.local_subnet_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of a local VPC.</p>
    pub fn local_vpc_arn(&self) -> ::std::option::Option<&str> {
        self.local_vpc_arn.as_deref()
    }
}
impl WorkloadInsightsTopContributorsRow {
    /// Creates a new builder-style object to manufacture [`WorkloadInsightsTopContributorsRow`](crate::types::WorkloadInsightsTopContributorsRow).
    pub fn builder() -> crate::types::builders::WorkloadInsightsTopContributorsRowBuilder {
        crate::types::builders::WorkloadInsightsTopContributorsRowBuilder::default()
    }
}

/// A builder for [`WorkloadInsightsTopContributorsRow`](crate::types::WorkloadInsightsTopContributorsRow).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WorkloadInsightsTopContributorsRowBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) local_subnet_id: ::std::option::Option<::std::string::String>,
    pub(crate) local_az: ::std::option::Option<::std::string::String>,
    pub(crate) local_vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) local_region: ::std::option::Option<::std::string::String>,
    pub(crate) remote_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<i64>,
    pub(crate) local_subnet_arn: ::std::option::Option<::std::string::String>,
    pub(crate) local_vpc_arn: ::std::option::Option<::std::string::String>,
}
impl WorkloadInsightsTopContributorsRowBuilder {
    /// <p>The account ID for a specific row of data.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account ID for a specific row of data.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The account ID for a specific row of data.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The subnet identifier for the local resource.</p>
    pub fn local_subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subnet identifier for the local resource.</p>
    pub fn set_local_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_subnet_id = input;
        self
    }
    /// <p>The subnet identifier for the local resource.</p>
    pub fn get_local_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_subnet_id
    }
    /// <p>The identifier for the Availability Zone where the local resource is located.</p>
    pub fn local_az(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_az = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the Availability Zone where the local resource is located.</p>
    pub fn set_local_az(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_az = input;
        self
    }
    /// <p>The identifier for the Availability Zone where the local resource is located.</p>
    pub fn get_local_az(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_az
    }
    /// <p>The identifier for the VPC for the local resource.</p>
    pub fn local_vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the VPC for the local resource.</p>
    pub fn set_local_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_vpc_id = input;
        self
    }
    /// <p>The identifier for the VPC for the local resource.</p>
    pub fn get_local_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_vpc_id
    }
    /// <p>The Amazon Web Services Region where the local resource is located.</p>
    pub fn local_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region where the local resource is located.</p>
    pub fn set_local_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_region = input;
        self
    }
    /// <p>The Amazon Web Services Region where the local resource is located.</p>
    pub fn get_local_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_region
    }
    /// <p>The identifier of a remote resource.</p>
    pub fn remote_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.remote_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of a remote resource.</p>
    pub fn set_remote_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.remote_identifier = input;
        self
    }
    /// <p>The identifier of a remote resource.</p>
    pub fn get_remote_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.remote_identifier
    }
    /// <p>The value for a metric.</p>
    pub fn value(mut self, input: i64) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value for a metric.</p>
    pub fn set_value(mut self, input: ::std::option::Option<i64>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value for a metric.</p>
    pub fn get_value(&self) -> &::std::option::Option<i64> {
        &self.value
    }
    /// <p>The Amazon Resource Name (ARN) of a local subnet.</p>
    pub fn local_subnet_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_subnet_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a local subnet.</p>
    pub fn set_local_subnet_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_subnet_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a local subnet.</p>
    pub fn get_local_subnet_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_subnet_arn
    }
    /// <p>The Amazon Resource Name (ARN) of a local VPC.</p>
    pub fn local_vpc_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_vpc_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a local VPC.</p>
    pub fn set_local_vpc_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_vpc_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a local VPC.</p>
    pub fn get_local_vpc_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_vpc_arn
    }
    /// Consumes the builder and constructs a [`WorkloadInsightsTopContributorsRow`](crate::types::WorkloadInsightsTopContributorsRow).
    pub fn build(self) -> crate::types::WorkloadInsightsTopContributorsRow {
        crate::types::WorkloadInsightsTopContributorsRow {
            account_id: self.account_id,
            local_subnet_id: self.local_subnet_id,
            local_az: self.local_az,
            local_vpc_id: self.local_vpc_id,
            local_region: self.local_region,
            remote_identifier: self.remote_identifier,
            value: self.value,
            local_subnet_arn: self.local_subnet_arn,
            local_vpc_arn: self.local_vpc_arn,
        }
    }
}
