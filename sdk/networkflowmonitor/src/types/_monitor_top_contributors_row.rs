// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A set of information for a top contributor network flow in a monitor. In a monitor, Network Flow Monitor returns information about the network flows for top contributors for each metric. Top contributors are network flows with the top values for each metric type.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MonitorTopContributorsRow {
    /// <p>The IP address of the local resource for a top contributor network flow.</p>
    pub local_ip: ::std::option::Option<::std::string::String>,
    /// <p>The secure network address translation (SNAT) IP address for a top contributor network flow.</p>
    pub snat_ip: ::std::option::Option<::std::string::String>,
    /// <p>The instance identifier for the local resource for a top contributor network flow.</p>
    pub local_instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The VPC ID for a top contributor network flow for the local resource.</p>
    pub local_vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region for the local resource for a top contributor network flow.</p>
    pub local_region: ::std::option::Option<::std::string::String>,
    /// <p>The Availability Zone for the local resource for a top contributor network flow.</p>
    pub local_az: ::std::option::Option<::std::string::String>,
    /// <p>The subnet ID for the local resource for a top contributor network flow.</p>
    pub local_subnet_id: ::std::option::Option<::std::string::String>,
    /// <p>The target port.</p>
    pub target_port: ::std::option::Option<i32>,
    /// <p>The destination category for a top contributors row. Destination categories can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>INTRA_AZ</code>: Top contributor network flows within a single Availability Zone</p></li>
    /// <li>
    /// <p><code>INTER_AZ</code>: Top contributor network flows between Availability Zones</p></li>
    /// <li>
    /// <p><code>INTER_VPC</code>: Top contributor network flows between VPCs</p></li>
    /// <li>
    /// <p><code>AWS_SERVICES</code>: Top contributor network flows to or from Amazon Web Services services</p></li>
    /// <li>
    /// <p><code>UNCLASSIFIED</code>: Top contributor network flows that do not have a bucket classification</p></li>
    /// </ul>
    pub destination_category: ::std::option::Option<crate::types::DestinationCategory>,
    /// <p>The VPC ID for a top contributor network flow for the remote resource.</p>
    pub remote_vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region for the remote resource for a top contributor network flow.</p>
    pub remote_region: ::std::option::Option<::std::string::String>,
    /// <p>The Availability Zone for the remote resource for a top contributor network flow.</p>
    pub remote_az: ::std::option::Option<::std::string::String>,
    /// <p>The subnet ID for the remote resource for a top contributor network flow.</p>
    pub remote_subnet_id: ::std::option::Option<::std::string::String>,
    /// <p>The instance identifier for the remote resource for a top contributor network flow.</p>
    pub remote_instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The IP address of the remote resource for a top contributor network flow.</p>
    pub remote_ip: ::std::option::Option<::std::string::String>,
    /// <p>The destination network address translation (DNAT) IP address for a top contributor network flow.</p>
    pub dnat_ip: ::std::option::Option<::std::string::String>,
    /// <p>The value of the metric for a top contributor network flow.</p>
    pub value: ::std::option::Option<i64>,
    /// <p>The constructs traversed by a network flow.</p>
    pub traversed_constructs: ::std::option::Option<::std::vec::Vec<crate::types::TraversedComponent>>,
    /// <p>Meta data about Kubernetes resources.</p>
    pub kubernetes_metadata: ::std::option::Option<crate::types::KubernetesMetadata>,
    /// <p>The Amazon Resource Name (ARN) of a local resource.</p>
    pub local_instance_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of a local subnet.</p>
    pub local_subnet_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of a local VPC.</p>
    pub local_vpc_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of a remote resource.</p>
    pub remote_instance_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of a remote subnet.</p>
    pub remote_subnet_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of a remote VPC.</p>
    pub remote_vpc_arn: ::std::option::Option<::std::string::String>,
}
impl MonitorTopContributorsRow {
    /// <p>The IP address of the local resource for a top contributor network flow.</p>
    pub fn local_ip(&self) -> ::std::option::Option<&str> {
        self.local_ip.as_deref()
    }
    /// <p>The secure network address translation (SNAT) IP address for a top contributor network flow.</p>
    pub fn snat_ip(&self) -> ::std::option::Option<&str> {
        self.snat_ip.as_deref()
    }
    /// <p>The instance identifier for the local resource for a top contributor network flow.</p>
    pub fn local_instance_id(&self) -> ::std::option::Option<&str> {
        self.local_instance_id.as_deref()
    }
    /// <p>The VPC ID for a top contributor network flow for the local resource.</p>
    pub fn local_vpc_id(&self) -> ::std::option::Option<&str> {
        self.local_vpc_id.as_deref()
    }
    /// <p>The Amazon Web Services Region for the local resource for a top contributor network flow.</p>
    pub fn local_region(&self) -> ::std::option::Option<&str> {
        self.local_region.as_deref()
    }
    /// <p>The Availability Zone for the local resource for a top contributor network flow.</p>
    pub fn local_az(&self) -> ::std::option::Option<&str> {
        self.local_az.as_deref()
    }
    /// <p>The subnet ID for the local resource for a top contributor network flow.</p>
    pub fn local_subnet_id(&self) -> ::std::option::Option<&str> {
        self.local_subnet_id.as_deref()
    }
    /// <p>The target port.</p>
    pub fn target_port(&self) -> ::std::option::Option<i32> {
        self.target_port
    }
    /// <p>The destination category for a top contributors row. Destination categories can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>INTRA_AZ</code>: Top contributor network flows within a single Availability Zone</p></li>
    /// <li>
    /// <p><code>INTER_AZ</code>: Top contributor network flows between Availability Zones</p></li>
    /// <li>
    /// <p><code>INTER_VPC</code>: Top contributor network flows between VPCs</p></li>
    /// <li>
    /// <p><code>AWS_SERVICES</code>: Top contributor network flows to or from Amazon Web Services services</p></li>
    /// <li>
    /// <p><code>UNCLASSIFIED</code>: Top contributor network flows that do not have a bucket classification</p></li>
    /// </ul>
    pub fn destination_category(&self) -> ::std::option::Option<&crate::types::DestinationCategory> {
        self.destination_category.as_ref()
    }
    /// <p>The VPC ID for a top contributor network flow for the remote resource.</p>
    pub fn remote_vpc_id(&self) -> ::std::option::Option<&str> {
        self.remote_vpc_id.as_deref()
    }
    /// <p>The Amazon Web Services Region for the remote resource for a top contributor network flow.</p>
    pub fn remote_region(&self) -> ::std::option::Option<&str> {
        self.remote_region.as_deref()
    }
    /// <p>The Availability Zone for the remote resource for a top contributor network flow.</p>
    pub fn remote_az(&self) -> ::std::option::Option<&str> {
        self.remote_az.as_deref()
    }
    /// <p>The subnet ID for the remote resource for a top contributor network flow.</p>
    pub fn remote_subnet_id(&self) -> ::std::option::Option<&str> {
        self.remote_subnet_id.as_deref()
    }
    /// <p>The instance identifier for the remote resource for a top contributor network flow.</p>
    pub fn remote_instance_id(&self) -> ::std::option::Option<&str> {
        self.remote_instance_id.as_deref()
    }
    /// <p>The IP address of the remote resource for a top contributor network flow.</p>
    pub fn remote_ip(&self) -> ::std::option::Option<&str> {
        self.remote_ip.as_deref()
    }
    /// <p>The destination network address translation (DNAT) IP address for a top contributor network flow.</p>
    pub fn dnat_ip(&self) -> ::std::option::Option<&str> {
        self.dnat_ip.as_deref()
    }
    /// <p>The value of the metric for a top contributor network flow.</p>
    pub fn value(&self) -> ::std::option::Option<i64> {
        self.value
    }
    /// <p>The constructs traversed by a network flow.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.traversed_constructs.is_none()`.
    pub fn traversed_constructs(&self) -> &[crate::types::TraversedComponent] {
        self.traversed_constructs.as_deref().unwrap_or_default()
    }
    /// <p>Meta data about Kubernetes resources.</p>
    pub fn kubernetes_metadata(&self) -> ::std::option::Option<&crate::types::KubernetesMetadata> {
        self.kubernetes_metadata.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of a local resource.</p>
    pub fn local_instance_arn(&self) -> ::std::option::Option<&str> {
        self.local_instance_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of a local subnet.</p>
    pub fn local_subnet_arn(&self) -> ::std::option::Option<&str> {
        self.local_subnet_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of a local VPC.</p>
    pub fn local_vpc_arn(&self) -> ::std::option::Option<&str> {
        self.local_vpc_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of a remote resource.</p>
    pub fn remote_instance_arn(&self) -> ::std::option::Option<&str> {
        self.remote_instance_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of a remote subnet.</p>
    pub fn remote_subnet_arn(&self) -> ::std::option::Option<&str> {
        self.remote_subnet_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of a remote VPC.</p>
    pub fn remote_vpc_arn(&self) -> ::std::option::Option<&str> {
        self.remote_vpc_arn.as_deref()
    }
}
impl MonitorTopContributorsRow {
    /// Creates a new builder-style object to manufacture [`MonitorTopContributorsRow`](crate::types::MonitorTopContributorsRow).
    pub fn builder() -> crate::types::builders::MonitorTopContributorsRowBuilder {
        crate::types::builders::MonitorTopContributorsRowBuilder::default()
    }
}

/// A builder for [`MonitorTopContributorsRow`](crate::types::MonitorTopContributorsRow).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MonitorTopContributorsRowBuilder {
    pub(crate) local_ip: ::std::option::Option<::std::string::String>,
    pub(crate) snat_ip: ::std::option::Option<::std::string::String>,
    pub(crate) local_instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) local_vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) local_region: ::std::option::Option<::std::string::String>,
    pub(crate) local_az: ::std::option::Option<::std::string::String>,
    pub(crate) local_subnet_id: ::std::option::Option<::std::string::String>,
    pub(crate) target_port: ::std::option::Option<i32>,
    pub(crate) destination_category: ::std::option::Option<crate::types::DestinationCategory>,
    pub(crate) remote_vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) remote_region: ::std::option::Option<::std::string::String>,
    pub(crate) remote_az: ::std::option::Option<::std::string::String>,
    pub(crate) remote_subnet_id: ::std::option::Option<::std::string::String>,
    pub(crate) remote_instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) remote_ip: ::std::option::Option<::std::string::String>,
    pub(crate) dnat_ip: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<i64>,
    pub(crate) traversed_constructs: ::std::option::Option<::std::vec::Vec<crate::types::TraversedComponent>>,
    pub(crate) kubernetes_metadata: ::std::option::Option<crate::types::KubernetesMetadata>,
    pub(crate) local_instance_arn: ::std::option::Option<::std::string::String>,
    pub(crate) local_subnet_arn: ::std::option::Option<::std::string::String>,
    pub(crate) local_vpc_arn: ::std::option::Option<::std::string::String>,
    pub(crate) remote_instance_arn: ::std::option::Option<::std::string::String>,
    pub(crate) remote_subnet_arn: ::std::option::Option<::std::string::String>,
    pub(crate) remote_vpc_arn: ::std::option::Option<::std::string::String>,
}
impl MonitorTopContributorsRowBuilder {
    /// <p>The IP address of the local resource for a top contributor network flow.</p>
    pub fn local_ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_ip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address of the local resource for a top contributor network flow.</p>
    pub fn set_local_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_ip = input;
        self
    }
    /// <p>The IP address of the local resource for a top contributor network flow.</p>
    pub fn get_local_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_ip
    }
    /// <p>The secure network address translation (SNAT) IP address for a top contributor network flow.</p>
    pub fn snat_ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.snat_ip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The secure network address translation (SNAT) IP address for a top contributor network flow.</p>
    pub fn set_snat_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.snat_ip = input;
        self
    }
    /// <p>The secure network address translation (SNAT) IP address for a top contributor network flow.</p>
    pub fn get_snat_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.snat_ip
    }
    /// <p>The instance identifier for the local resource for a top contributor network flow.</p>
    pub fn local_instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance identifier for the local resource for a top contributor network flow.</p>
    pub fn set_local_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_instance_id = input;
        self
    }
    /// <p>The instance identifier for the local resource for a top contributor network flow.</p>
    pub fn get_local_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_instance_id
    }
    /// <p>The VPC ID for a top contributor network flow for the local resource.</p>
    pub fn local_vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The VPC ID for a top contributor network flow for the local resource.</p>
    pub fn set_local_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_vpc_id = input;
        self
    }
    /// <p>The VPC ID for a top contributor network flow for the local resource.</p>
    pub fn get_local_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_vpc_id
    }
    /// <p>The Amazon Web Services Region for the local resource for a top contributor network flow.</p>
    pub fn local_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region for the local resource for a top contributor network flow.</p>
    pub fn set_local_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_region = input;
        self
    }
    /// <p>The Amazon Web Services Region for the local resource for a top contributor network flow.</p>
    pub fn get_local_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_region
    }
    /// <p>The Availability Zone for the local resource for a top contributor network flow.</p>
    pub fn local_az(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_az = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone for the local resource for a top contributor network flow.</p>
    pub fn set_local_az(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_az = input;
        self
    }
    /// <p>The Availability Zone for the local resource for a top contributor network flow.</p>
    pub fn get_local_az(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_az
    }
    /// <p>The subnet ID for the local resource for a top contributor network flow.</p>
    pub fn local_subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subnet ID for the local resource for a top contributor network flow.</p>
    pub fn set_local_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_subnet_id = input;
        self
    }
    /// <p>The subnet ID for the local resource for a top contributor network flow.</p>
    pub fn get_local_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_subnet_id
    }
    /// <p>The target port.</p>
    pub fn target_port(mut self, input: i32) -> Self {
        self.target_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target port.</p>
    pub fn set_target_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.target_port = input;
        self
    }
    /// <p>The target port.</p>
    pub fn get_target_port(&self) -> &::std::option::Option<i32> {
        &self.target_port
    }
    /// <p>The destination category for a top contributors row. Destination categories can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>INTRA_AZ</code>: Top contributor network flows within a single Availability Zone</p></li>
    /// <li>
    /// <p><code>INTER_AZ</code>: Top contributor network flows between Availability Zones</p></li>
    /// <li>
    /// <p><code>INTER_VPC</code>: Top contributor network flows between VPCs</p></li>
    /// <li>
    /// <p><code>AWS_SERVICES</code>: Top contributor network flows to or from Amazon Web Services services</p></li>
    /// <li>
    /// <p><code>UNCLASSIFIED</code>: Top contributor network flows that do not have a bucket classification</p></li>
    /// </ul>
    pub fn destination_category(mut self, input: crate::types::DestinationCategory) -> Self {
        self.destination_category = ::std::option::Option::Some(input);
        self
    }
    /// <p>The destination category for a top contributors row. Destination categories can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>INTRA_AZ</code>: Top contributor network flows within a single Availability Zone</p></li>
    /// <li>
    /// <p><code>INTER_AZ</code>: Top contributor network flows between Availability Zones</p></li>
    /// <li>
    /// <p><code>INTER_VPC</code>: Top contributor network flows between VPCs</p></li>
    /// <li>
    /// <p><code>AWS_SERVICES</code>: Top contributor network flows to or from Amazon Web Services services</p></li>
    /// <li>
    /// <p><code>UNCLASSIFIED</code>: Top contributor network flows that do not have a bucket classification</p></li>
    /// </ul>
    pub fn set_destination_category(mut self, input: ::std::option::Option<crate::types::DestinationCategory>) -> Self {
        self.destination_category = input;
        self
    }
    /// <p>The destination category for a top contributors row. Destination categories can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>INTRA_AZ</code>: Top contributor network flows within a single Availability Zone</p></li>
    /// <li>
    /// <p><code>INTER_AZ</code>: Top contributor network flows between Availability Zones</p></li>
    /// <li>
    /// <p><code>INTER_VPC</code>: Top contributor network flows between VPCs</p></li>
    /// <li>
    /// <p><code>AWS_SERVICES</code>: Top contributor network flows to or from Amazon Web Services services</p></li>
    /// <li>
    /// <p><code>UNCLASSIFIED</code>: Top contributor network flows that do not have a bucket classification</p></li>
    /// </ul>
    pub fn get_destination_category(&self) -> &::std::option::Option<crate::types::DestinationCategory> {
        &self.destination_category
    }
    /// <p>The VPC ID for a top contributor network flow for the remote resource.</p>
    pub fn remote_vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.remote_vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The VPC ID for a top contributor network flow for the remote resource.</p>
    pub fn set_remote_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.remote_vpc_id = input;
        self
    }
    /// <p>The VPC ID for a top contributor network flow for the remote resource.</p>
    pub fn get_remote_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.remote_vpc_id
    }
    /// <p>The Amazon Web Services Region for the remote resource for a top contributor network flow.</p>
    pub fn remote_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.remote_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region for the remote resource for a top contributor network flow.</p>
    pub fn set_remote_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.remote_region = input;
        self
    }
    /// <p>The Amazon Web Services Region for the remote resource for a top contributor network flow.</p>
    pub fn get_remote_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.remote_region
    }
    /// <p>The Availability Zone for the remote resource for a top contributor network flow.</p>
    pub fn remote_az(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.remote_az = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone for the remote resource for a top contributor network flow.</p>
    pub fn set_remote_az(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.remote_az = input;
        self
    }
    /// <p>The Availability Zone for the remote resource for a top contributor network flow.</p>
    pub fn get_remote_az(&self) -> &::std::option::Option<::std::string::String> {
        &self.remote_az
    }
    /// <p>The subnet ID for the remote resource for a top contributor network flow.</p>
    pub fn remote_subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.remote_subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subnet ID for the remote resource for a top contributor network flow.</p>
    pub fn set_remote_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.remote_subnet_id = input;
        self
    }
    /// <p>The subnet ID for the remote resource for a top contributor network flow.</p>
    pub fn get_remote_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.remote_subnet_id
    }
    /// <p>The instance identifier for the remote resource for a top contributor network flow.</p>
    pub fn remote_instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.remote_instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance identifier for the remote resource for a top contributor network flow.</p>
    pub fn set_remote_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.remote_instance_id = input;
        self
    }
    /// <p>The instance identifier for the remote resource for a top contributor network flow.</p>
    pub fn get_remote_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.remote_instance_id
    }
    /// <p>The IP address of the remote resource for a top contributor network flow.</p>
    pub fn remote_ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.remote_ip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address of the remote resource for a top contributor network flow.</p>
    pub fn set_remote_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.remote_ip = input;
        self
    }
    /// <p>The IP address of the remote resource for a top contributor network flow.</p>
    pub fn get_remote_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.remote_ip
    }
    /// <p>The destination network address translation (DNAT) IP address for a top contributor network flow.</p>
    pub fn dnat_ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dnat_ip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The destination network address translation (DNAT) IP address for a top contributor network flow.</p>
    pub fn set_dnat_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dnat_ip = input;
        self
    }
    /// <p>The destination network address translation (DNAT) IP address for a top contributor network flow.</p>
    pub fn get_dnat_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.dnat_ip
    }
    /// <p>The value of the metric for a top contributor network flow.</p>
    pub fn value(mut self, input: i64) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of the metric for a top contributor network flow.</p>
    pub fn set_value(mut self, input: ::std::option::Option<i64>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of the metric for a top contributor network flow.</p>
    pub fn get_value(&self) -> &::std::option::Option<i64> {
        &self.value
    }
    /// Appends an item to `traversed_constructs`.
    ///
    /// To override the contents of this collection use [`set_traversed_constructs`](Self::set_traversed_constructs).
    ///
    /// <p>The constructs traversed by a network flow.</p>
    pub fn traversed_constructs(mut self, input: crate::types::TraversedComponent) -> Self {
        let mut v = self.traversed_constructs.unwrap_or_default();
        v.push(input);
        self.traversed_constructs = ::std::option::Option::Some(v);
        self
    }
    /// <p>The constructs traversed by a network flow.</p>
    pub fn set_traversed_constructs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TraversedComponent>>) -> Self {
        self.traversed_constructs = input;
        self
    }
    /// <p>The constructs traversed by a network flow.</p>
    pub fn get_traversed_constructs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TraversedComponent>> {
        &self.traversed_constructs
    }
    /// <p>Meta data about Kubernetes resources.</p>
    pub fn kubernetes_metadata(mut self, input: crate::types::KubernetesMetadata) -> Self {
        self.kubernetes_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>Meta data about Kubernetes resources.</p>
    pub fn set_kubernetes_metadata(mut self, input: ::std::option::Option<crate::types::KubernetesMetadata>) -> Self {
        self.kubernetes_metadata = input;
        self
    }
    /// <p>Meta data about Kubernetes resources.</p>
    pub fn get_kubernetes_metadata(&self) -> &::std::option::Option<crate::types::KubernetesMetadata> {
        &self.kubernetes_metadata
    }
    /// <p>The Amazon Resource Name (ARN) of a local resource.</p>
    pub fn local_instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a local resource.</p>
    pub fn set_local_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_instance_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a local resource.</p>
    pub fn get_local_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_instance_arn
    }
    /// <p>The Amazon Resource Name (ARN) of a local subnet.</p>
    pub fn local_subnet_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_subnet_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a local subnet.</p>
    pub fn set_local_subnet_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_subnet_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a local subnet.</p>
    pub fn get_local_subnet_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_subnet_arn
    }
    /// <p>The Amazon Resource Name (ARN) of a local VPC.</p>
    pub fn local_vpc_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_vpc_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a local VPC.</p>
    pub fn set_local_vpc_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_vpc_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a local VPC.</p>
    pub fn get_local_vpc_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_vpc_arn
    }
    /// <p>The Amazon Resource Name (ARN) of a remote resource.</p>
    pub fn remote_instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.remote_instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a remote resource.</p>
    pub fn set_remote_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.remote_instance_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a remote resource.</p>
    pub fn get_remote_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.remote_instance_arn
    }
    /// <p>The Amazon Resource Name (ARN) of a remote subnet.</p>
    pub fn remote_subnet_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.remote_subnet_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a remote subnet.</p>
    pub fn set_remote_subnet_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.remote_subnet_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a remote subnet.</p>
    pub fn get_remote_subnet_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.remote_subnet_arn
    }
    /// <p>The Amazon Resource Name (ARN) of a remote VPC.</p>
    pub fn remote_vpc_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.remote_vpc_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a remote VPC.</p>
    pub fn set_remote_vpc_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.remote_vpc_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a remote VPC.</p>
    pub fn get_remote_vpc_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.remote_vpc_arn
    }
    /// Consumes the builder and constructs a [`MonitorTopContributorsRow`](crate::types::MonitorTopContributorsRow).
    pub fn build(self) -> crate::types::MonitorTopContributorsRow {
        crate::types::MonitorTopContributorsRow {
            local_ip: self.local_ip,
            snat_ip: self.snat_ip,
            local_instance_id: self.local_instance_id,
            local_vpc_id: self.local_vpc_id,
            local_region: self.local_region,
            local_az: self.local_az,
            local_subnet_id: self.local_subnet_id,
            target_port: self.target_port,
            destination_category: self.destination_category,
            remote_vpc_id: self.remote_vpc_id,
            remote_region: self.remote_region,
            remote_az: self.remote_az,
            remote_subnet_id: self.remote_subnet_id,
            remote_instance_id: self.remote_instance_id,
            remote_ip: self.remote_ip,
            dnat_ip: self.dnat_ip,
            value: self.value,
            traversed_constructs: self.traversed_constructs,
            kubernetes_metadata: self.kubernetes_metadata,
            local_instance_arn: self.local_instance_arn,
            local_subnet_arn: self.local_subnet_arn,
            local_vpc_arn: self.local_vpc_arn,
            remote_instance_arn: self.remote_instance_arn,
            remote_subnet_arn: self.remote_subnet_arn,
            remote_vpc_arn: self.remote_vpc_arn,
        }
    }
}
