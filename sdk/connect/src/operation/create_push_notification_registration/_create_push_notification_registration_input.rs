// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreatePushNotificationRegistrationInput {
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Pinpoint application.</p>
    pub pinpoint_app_arn: ::std::option::Option<::std::string::String>,
    /// <p>The push notification token issued by the Apple or Google gateways.</p>
    pub device_token: ::std::option::Option<::std::string::String>,
    /// <p>The device type to use when sending the message.</p>
    pub device_type: ::std::option::Option<crate::types::DeviceType>,
    /// <p>The contact configuration for push notification registration.</p>
    pub contact_configuration: ::std::option::Option<crate::types::ContactConfiguration>,
}
impl CreatePushNotificationRegistrationInput {
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Pinpoint application.</p>
    pub fn pinpoint_app_arn(&self) -> ::std::option::Option<&str> {
        self.pinpoint_app_arn.as_deref()
    }
    /// <p>The push notification token issued by the Apple or Google gateways.</p>
    pub fn device_token(&self) -> ::std::option::Option<&str> {
        self.device_token.as_deref()
    }
    /// <p>The device type to use when sending the message.</p>
    pub fn device_type(&self) -> ::std::option::Option<&crate::types::DeviceType> {
        self.device_type.as_ref()
    }
    /// <p>The contact configuration for push notification registration.</p>
    pub fn contact_configuration(&self) -> ::std::option::Option<&crate::types::ContactConfiguration> {
        self.contact_configuration.as_ref()
    }
}
impl CreatePushNotificationRegistrationInput {
    /// Creates a new builder-style object to manufacture [`CreatePushNotificationRegistrationInput`](crate::operation::create_push_notification_registration::CreatePushNotificationRegistrationInput).
    pub fn builder() -> crate::operation::create_push_notification_registration::builders::CreatePushNotificationRegistrationInputBuilder {
        crate::operation::create_push_notification_registration::builders::CreatePushNotificationRegistrationInputBuilder::default()
    }
}

/// A builder for [`CreatePushNotificationRegistrationInput`](crate::operation::create_push_notification_registration::CreatePushNotificationRegistrationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreatePushNotificationRegistrationInputBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) pinpoint_app_arn: ::std::option::Option<::std::string::String>,
    pub(crate) device_token: ::std::option::Option<::std::string::String>,
    pub(crate) device_type: ::std::option::Option<crate::types::DeviceType>,
    pub(crate) contact_configuration: ::std::option::Option<crate::types::ContactConfiguration>,
}
impl CreatePushNotificationRegistrationInputBuilder {
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The Amazon Resource Name (ARN) of the Pinpoint application.</p>
    /// This field is required.
    pub fn pinpoint_app_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pinpoint_app_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Pinpoint application.</p>
    pub fn set_pinpoint_app_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pinpoint_app_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Pinpoint application.</p>
    pub fn get_pinpoint_app_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.pinpoint_app_arn
    }
    /// <p>The push notification token issued by the Apple or Google gateways.</p>
    /// This field is required.
    pub fn device_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The push notification token issued by the Apple or Google gateways.</p>
    pub fn set_device_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_token = input;
        self
    }
    /// <p>The push notification token issued by the Apple or Google gateways.</p>
    pub fn get_device_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_token
    }
    /// <p>The device type to use when sending the message.</p>
    /// This field is required.
    pub fn device_type(mut self, input: crate::types::DeviceType) -> Self {
        self.device_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The device type to use when sending the message.</p>
    pub fn set_device_type(mut self, input: ::std::option::Option<crate::types::DeviceType>) -> Self {
        self.device_type = input;
        self
    }
    /// <p>The device type to use when sending the message.</p>
    pub fn get_device_type(&self) -> &::std::option::Option<crate::types::DeviceType> {
        &self.device_type
    }
    /// <p>The contact configuration for push notification registration.</p>
    /// This field is required.
    pub fn contact_configuration(mut self, input: crate::types::ContactConfiguration) -> Self {
        self.contact_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The contact configuration for push notification registration.</p>
    pub fn set_contact_configuration(mut self, input: ::std::option::Option<crate::types::ContactConfiguration>) -> Self {
        self.contact_configuration = input;
        self
    }
    /// <p>The contact configuration for push notification registration.</p>
    pub fn get_contact_configuration(&self) -> &::std::option::Option<crate::types::ContactConfiguration> {
        &self.contact_configuration
    }
    /// Consumes the builder and constructs a [`CreatePushNotificationRegistrationInput`](crate::operation::create_push_notification_registration::CreatePushNotificationRegistrationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_push_notification_registration::CreatePushNotificationRegistrationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_push_notification_registration::CreatePushNotificationRegistrationInput {
                instance_id: self.instance_id,
                client_token: self.client_token,
                pinpoint_app_arn: self.pinpoint_app_arn,
                device_token: self.device_token,
                device_type: self.device_type,
                contact_configuration: self.contact_configuration,
            },
        )
    }
}
