// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Response from StartAttachedFileUpload API.
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartAttachedFileUploadOutput {
    /// <p>The unique identifier of the attached file resource (ARN).</p>
    pub file_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the attached file resource.</p>
    pub file_id: ::std::option::Option<::std::string::String>,
    /// <p>The time of Creation of the file resource as an ISO timestamp. It's specified in ISO 8601 format: <code>yyyy-MM-ddThh:mm:ss.SSSZ</code>. For example, <code>2024-05-03T02:41:28.172Z</code>.</p>
    pub creation_time: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the attached file.</p>
    pub file_status: ::std::option::Option<crate::types::FileStatusType>,
    /// <p>Represents the identity that created the file.</p>
    pub created_by: ::std::option::Option<crate::types::CreatedByInfo>,
    /// <p>The headers to be provided while uploading the file to the URL.</p>
    pub upload_url_metadata: ::std::option::Option<crate::types::UploadUrlMetadata>,
    _request_id: Option<String>,
}
impl StartAttachedFileUploadOutput {
    /// <p>The unique identifier of the attached file resource (ARN).</p>
    pub fn file_arn(&self) -> ::std::option::Option<&str> {
        self.file_arn.as_deref()
    }
    /// <p>The unique identifier of the attached file resource.</p>
    pub fn file_id(&self) -> ::std::option::Option<&str> {
        self.file_id.as_deref()
    }
    /// <p>The time of Creation of the file resource as an ISO timestamp. It's specified in ISO 8601 format: <code>yyyy-MM-ddThh:mm:ss.SSSZ</code>. For example, <code>2024-05-03T02:41:28.172Z</code>.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&str> {
        self.creation_time.as_deref()
    }
    /// <p>The current status of the attached file.</p>
    pub fn file_status(&self) -> ::std::option::Option<&crate::types::FileStatusType> {
        self.file_status.as_ref()
    }
    /// <p>Represents the identity that created the file.</p>
    pub fn created_by(&self) -> ::std::option::Option<&crate::types::CreatedByInfo> {
        self.created_by.as_ref()
    }
    /// <p>The headers to be provided while uploading the file to the URL.</p>
    pub fn upload_url_metadata(&self) -> ::std::option::Option<&crate::types::UploadUrlMetadata> {
        self.upload_url_metadata.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for StartAttachedFileUploadOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartAttachedFileUploadOutput {
    /// Creates a new builder-style object to manufacture [`StartAttachedFileUploadOutput`](crate::operation::start_attached_file_upload::StartAttachedFileUploadOutput).
    pub fn builder() -> crate::operation::start_attached_file_upload::builders::StartAttachedFileUploadOutputBuilder {
        crate::operation::start_attached_file_upload::builders::StartAttachedFileUploadOutputBuilder::default()
    }
}

/// A builder for [`StartAttachedFileUploadOutput`](crate::operation::start_attached_file_upload::StartAttachedFileUploadOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartAttachedFileUploadOutputBuilder {
    pub(crate) file_arn: ::std::option::Option<::std::string::String>,
    pub(crate) file_id: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::std::string::String>,
    pub(crate) file_status: ::std::option::Option<crate::types::FileStatusType>,
    pub(crate) created_by: ::std::option::Option<crate::types::CreatedByInfo>,
    pub(crate) upload_url_metadata: ::std::option::Option<crate::types::UploadUrlMetadata>,
    _request_id: Option<String>,
}
impl StartAttachedFileUploadOutputBuilder {
    /// <p>The unique identifier of the attached file resource (ARN).</p>
    pub fn file_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the attached file resource (ARN).</p>
    pub fn set_file_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_arn = input;
        self
    }
    /// <p>The unique identifier of the attached file resource (ARN).</p>
    pub fn get_file_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_arn
    }
    /// <p>The unique identifier of the attached file resource.</p>
    pub fn file_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the attached file resource.</p>
    pub fn set_file_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_id = input;
        self
    }
    /// <p>The unique identifier of the attached file resource.</p>
    pub fn get_file_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_id
    }
    /// <p>The time of Creation of the file resource as an ISO timestamp. It's specified in ISO 8601 format: <code>yyyy-MM-ddThh:mm:ss.SSSZ</code>. For example, <code>2024-05-03T02:41:28.172Z</code>.</p>
    pub fn creation_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creation_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time of Creation of the file resource as an ISO timestamp. It's specified in ISO 8601 format: <code>yyyy-MM-ddThh:mm:ss.SSSZ</code>. For example, <code>2024-05-03T02:41:28.172Z</code>.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time of Creation of the file resource as an ISO timestamp. It's specified in ISO 8601 format: <code>yyyy-MM-ddThh:mm:ss.SSSZ</code>. For example, <code>2024-05-03T02:41:28.172Z</code>.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.creation_time
    }
    /// <p>The current status of the attached file.</p>
    pub fn file_status(mut self, input: crate::types::FileStatusType) -> Self {
        self.file_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the attached file.</p>
    pub fn set_file_status(mut self, input: ::std::option::Option<crate::types::FileStatusType>) -> Self {
        self.file_status = input;
        self
    }
    /// <p>The current status of the attached file.</p>
    pub fn get_file_status(&self) -> &::std::option::Option<crate::types::FileStatusType> {
        &self.file_status
    }
    /// <p>Represents the identity that created the file.</p>
    pub fn created_by(mut self, input: crate::types::CreatedByInfo) -> Self {
        self.created_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the identity that created the file.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<crate::types::CreatedByInfo>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>Represents the identity that created the file.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<crate::types::CreatedByInfo> {
        &self.created_by
    }
    /// <p>The headers to be provided while uploading the file to the URL.</p>
    pub fn upload_url_metadata(mut self, input: crate::types::UploadUrlMetadata) -> Self {
        self.upload_url_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>The headers to be provided while uploading the file to the URL.</p>
    pub fn set_upload_url_metadata(mut self, input: ::std::option::Option<crate::types::UploadUrlMetadata>) -> Self {
        self.upload_url_metadata = input;
        self
    }
    /// <p>The headers to be provided while uploading the file to the URL.</p>
    pub fn get_upload_url_metadata(&self) -> &::std::option::Option<crate::types::UploadUrlMetadata> {
        &self.upload_url_metadata
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartAttachedFileUploadOutput`](crate::operation::start_attached_file_upload::StartAttachedFileUploadOutput).
    pub fn build(self) -> crate::operation::start_attached_file_upload::StartAttachedFileUploadOutput {
        crate::operation::start_attached_file_upload::StartAttachedFileUploadOutput {
            file_arn: self.file_arn,
            file_id: self.file_id,
            creation_time: self.creation_time,
            file_status: self.file_status,
            created_by: self.created_by,
            upload_url_metadata: self.upload_url_metadata,
            _request_id: self._request_id,
        }
    }
}
