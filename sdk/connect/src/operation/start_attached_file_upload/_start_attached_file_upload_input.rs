// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartAttachedFileUploadInput {
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the Amazon Connect instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>A case-sensitive name of the attached file being uploaded.</p>
    pub file_name: ::std::option::Option<::std::string::String>,
    /// <p>The size of the attached file in bytes.</p>
    pub file_size_in_bytes: ::std::option::Option<i64>,
    /// <p>Optional override for the expiry of the pre-signed S3 URL in seconds. The default value is 300.</p>
    pub url_expiry_in_seconds: ::std::option::Option<i32>,
    /// <p>The use case for the file.</p><important>
    /// <p>Only <code>ATTACHMENTS</code> are supported.</p>
    /// </important>
    pub file_use_case_type: ::std::option::Option<crate::types::FileUseCaseType>,
    /// <p>The resource to which the attached file is (being) uploaded to. The supported resources are <a href="https://docs.aws.amazon.com/connect/latest/adminguide/cases.html">Cases</a> and <a href="https://docs.aws.amazon.com/connect/latest/adminguide/setup-email-channel.html">Email</a>.</p><note>
    /// <p>This value must be a valid ARN.</p>
    /// </note>
    pub associated_resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>Represents the identity that created the file.</p>
    pub created_by: ::std::option::Option<crate::types::CreatedByInfo>,
    /// <p>The tags used to organize, track, or control access for this resource. For example, <code>{ "Tags": {"key1":"value1", "key2":"value2"} }</code>.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl StartAttachedFileUploadInput {
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The unique identifier of the Amazon Connect instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>A case-sensitive name of the attached file being uploaded.</p>
    pub fn file_name(&self) -> ::std::option::Option<&str> {
        self.file_name.as_deref()
    }
    /// <p>The size of the attached file in bytes.</p>
    pub fn file_size_in_bytes(&self) -> ::std::option::Option<i64> {
        self.file_size_in_bytes
    }
    /// <p>Optional override for the expiry of the pre-signed S3 URL in seconds. The default value is 300.</p>
    pub fn url_expiry_in_seconds(&self) -> ::std::option::Option<i32> {
        self.url_expiry_in_seconds
    }
    /// <p>The use case for the file.</p><important>
    /// <p>Only <code>ATTACHMENTS</code> are supported.</p>
    /// </important>
    pub fn file_use_case_type(&self) -> ::std::option::Option<&crate::types::FileUseCaseType> {
        self.file_use_case_type.as_ref()
    }
    /// <p>The resource to which the attached file is (being) uploaded to. The supported resources are <a href="https://docs.aws.amazon.com/connect/latest/adminguide/cases.html">Cases</a> and <a href="https://docs.aws.amazon.com/connect/latest/adminguide/setup-email-channel.html">Email</a>.</p><note>
    /// <p>This value must be a valid ARN.</p>
    /// </note>
    pub fn associated_resource_arn(&self) -> ::std::option::Option<&str> {
        self.associated_resource_arn.as_deref()
    }
    /// <p>Represents the identity that created the file.</p>
    pub fn created_by(&self) -> ::std::option::Option<&crate::types::CreatedByInfo> {
        self.created_by.as_ref()
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, <code>{ "Tags": {"key1":"value1", "key2":"value2"} }</code>.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl StartAttachedFileUploadInput {
    /// Creates a new builder-style object to manufacture [`StartAttachedFileUploadInput`](crate::operation::start_attached_file_upload::StartAttachedFileUploadInput).
    pub fn builder() -> crate::operation::start_attached_file_upload::builders::StartAttachedFileUploadInputBuilder {
        crate::operation::start_attached_file_upload::builders::StartAttachedFileUploadInputBuilder::default()
    }
}

/// A builder for [`StartAttachedFileUploadInput`](crate::operation::start_attached_file_upload::StartAttachedFileUploadInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartAttachedFileUploadInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) file_name: ::std::option::Option<::std::string::String>,
    pub(crate) file_size_in_bytes: ::std::option::Option<i64>,
    pub(crate) url_expiry_in_seconds: ::std::option::Option<i32>,
    pub(crate) file_use_case_type: ::std::option::Option<crate::types::FileUseCaseType>,
    pub(crate) associated_resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_by: ::std::option::Option<crate::types::CreatedByInfo>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl StartAttachedFileUploadInputBuilder {
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The unique identifier of the Amazon Connect instance.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Amazon Connect instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The unique identifier of the Amazon Connect instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>A case-sensitive name of the attached file being uploaded.</p>
    /// This field is required.
    pub fn file_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A case-sensitive name of the attached file being uploaded.</p>
    pub fn set_file_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_name = input;
        self
    }
    /// <p>A case-sensitive name of the attached file being uploaded.</p>
    pub fn get_file_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_name
    }
    /// <p>The size of the attached file in bytes.</p>
    /// This field is required.
    pub fn file_size_in_bytes(mut self, input: i64) -> Self {
        self.file_size_in_bytes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the attached file in bytes.</p>
    pub fn set_file_size_in_bytes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.file_size_in_bytes = input;
        self
    }
    /// <p>The size of the attached file in bytes.</p>
    pub fn get_file_size_in_bytes(&self) -> &::std::option::Option<i64> {
        &self.file_size_in_bytes
    }
    /// <p>Optional override for the expiry of the pre-signed S3 URL in seconds. The default value is 300.</p>
    pub fn url_expiry_in_seconds(mut self, input: i32) -> Self {
        self.url_expiry_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>Optional override for the expiry of the pre-signed S3 URL in seconds. The default value is 300.</p>
    pub fn set_url_expiry_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.url_expiry_in_seconds = input;
        self
    }
    /// <p>Optional override for the expiry of the pre-signed S3 URL in seconds. The default value is 300.</p>
    pub fn get_url_expiry_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.url_expiry_in_seconds
    }
    /// <p>The use case for the file.</p><important>
    /// <p>Only <code>ATTACHMENTS</code> are supported.</p>
    /// </important>
    /// This field is required.
    pub fn file_use_case_type(mut self, input: crate::types::FileUseCaseType) -> Self {
        self.file_use_case_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The use case for the file.</p><important>
    /// <p>Only <code>ATTACHMENTS</code> are supported.</p>
    /// </important>
    pub fn set_file_use_case_type(mut self, input: ::std::option::Option<crate::types::FileUseCaseType>) -> Self {
        self.file_use_case_type = input;
        self
    }
    /// <p>The use case for the file.</p><important>
    /// <p>Only <code>ATTACHMENTS</code> are supported.</p>
    /// </important>
    pub fn get_file_use_case_type(&self) -> &::std::option::Option<crate::types::FileUseCaseType> {
        &self.file_use_case_type
    }
    /// <p>The resource to which the attached file is (being) uploaded to. The supported resources are <a href="https://docs.aws.amazon.com/connect/latest/adminguide/cases.html">Cases</a> and <a href="https://docs.aws.amazon.com/connect/latest/adminguide/setup-email-channel.html">Email</a>.</p><note>
    /// <p>This value must be a valid ARN.</p>
    /// </note>
    /// This field is required.
    pub fn associated_resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.associated_resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource to which the attached file is (being) uploaded to. The supported resources are <a href="https://docs.aws.amazon.com/connect/latest/adminguide/cases.html">Cases</a> and <a href="https://docs.aws.amazon.com/connect/latest/adminguide/setup-email-channel.html">Email</a>.</p><note>
    /// <p>This value must be a valid ARN.</p>
    /// </note>
    pub fn set_associated_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.associated_resource_arn = input;
        self
    }
    /// <p>The resource to which the attached file is (being) uploaded to. The supported resources are <a href="https://docs.aws.amazon.com/connect/latest/adminguide/cases.html">Cases</a> and <a href="https://docs.aws.amazon.com/connect/latest/adminguide/setup-email-channel.html">Email</a>.</p><note>
    /// <p>This value must be a valid ARN.</p>
    /// </note>
    pub fn get_associated_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.associated_resource_arn
    }
    /// <p>Represents the identity that created the file.</p>
    pub fn created_by(mut self, input: crate::types::CreatedByInfo) -> Self {
        self.created_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the identity that created the file.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<crate::types::CreatedByInfo>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>Represents the identity that created the file.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<crate::types::CreatedByInfo> {
        &self.created_by
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource. For example, <code>{ "Tags": {"key1":"value1", "key2":"value2"} }</code>.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, <code>{ "Tags": {"key1":"value1", "key2":"value2"} }</code>.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, <code>{ "Tags": {"key1":"value1", "key2":"value2"} }</code>.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`StartAttachedFileUploadInput`](crate::operation::start_attached_file_upload::StartAttachedFileUploadInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_attached_file_upload::StartAttachedFileUploadInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::start_attached_file_upload::StartAttachedFileUploadInput {
            client_token: self.client_token,
            instance_id: self.instance_id,
            file_name: self.file_name,
            file_size_in_bytes: self.file_size_in_bytes,
            url_expiry_in_seconds: self.url_expiry_in_seconds,
            file_use_case_type: self.file_use_case_type,
            associated_resource_arn: self.associated_resource_arn,
            created_by: self.created_by,
            tags: self.tags,
        })
    }
}
