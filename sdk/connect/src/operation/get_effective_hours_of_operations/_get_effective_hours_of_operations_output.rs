// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetEffectiveHoursOfOperationsOutput {
    /// <p>Information about the effective hours of operations</p>
    pub effective_hours_of_operation_list: ::std::option::Option<::std::vec::Vec<crate::types::EffectiveHoursOfOperations>>,
    /// <p>The time zone for the hours of operation.</p>
    pub time_zone: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetEffectiveHoursOfOperationsOutput {
    /// <p>Information about the effective hours of operations</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.effective_hours_of_operation_list.is_none()`.
    pub fn effective_hours_of_operation_list(&self) -> &[crate::types::EffectiveHoursOfOperations] {
        self.effective_hours_of_operation_list.as_deref().unwrap_or_default()
    }
    /// <p>The time zone for the hours of operation.</p>
    pub fn time_zone(&self) -> ::std::option::Option<&str> {
        self.time_zone.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetEffectiveHoursOfOperationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetEffectiveHoursOfOperationsOutput {
    /// Creates a new builder-style object to manufacture [`GetEffectiveHoursOfOperationsOutput`](crate::operation::get_effective_hours_of_operations::GetEffectiveHoursOfOperationsOutput).
    pub fn builder() -> crate::operation::get_effective_hours_of_operations::builders::GetEffectiveHoursOfOperationsOutputBuilder {
        crate::operation::get_effective_hours_of_operations::builders::GetEffectiveHoursOfOperationsOutputBuilder::default()
    }
}

/// A builder for [`GetEffectiveHoursOfOperationsOutput`](crate::operation::get_effective_hours_of_operations::GetEffectiveHoursOfOperationsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetEffectiveHoursOfOperationsOutputBuilder {
    pub(crate) effective_hours_of_operation_list: ::std::option::Option<::std::vec::Vec<crate::types::EffectiveHoursOfOperations>>,
    pub(crate) time_zone: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetEffectiveHoursOfOperationsOutputBuilder {
    /// Appends an item to `effective_hours_of_operation_list`.
    ///
    /// To override the contents of this collection use [`set_effective_hours_of_operation_list`](Self::set_effective_hours_of_operation_list).
    ///
    /// <p>Information about the effective hours of operations</p>
    pub fn effective_hours_of_operation_list(mut self, input: crate::types::EffectiveHoursOfOperations) -> Self {
        let mut v = self.effective_hours_of_operation_list.unwrap_or_default();
        v.push(input);
        self.effective_hours_of_operation_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the effective hours of operations</p>
    pub fn set_effective_hours_of_operation_list(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::EffectiveHoursOfOperations>>,
    ) -> Self {
        self.effective_hours_of_operation_list = input;
        self
    }
    /// <p>Information about the effective hours of operations</p>
    pub fn get_effective_hours_of_operation_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EffectiveHoursOfOperations>> {
        &self.effective_hours_of_operation_list
    }
    /// <p>The time zone for the hours of operation.</p>
    pub fn time_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.time_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time zone for the hours of operation.</p>
    pub fn set_time_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.time_zone = input;
        self
    }
    /// <p>The time zone for the hours of operation.</p>
    pub fn get_time_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.time_zone
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetEffectiveHoursOfOperationsOutput`](crate::operation::get_effective_hours_of_operations::GetEffectiveHoursOfOperationsOutput).
    pub fn build(self) -> crate::operation::get_effective_hours_of_operations::GetEffectiveHoursOfOperationsOutput {
        crate::operation::get_effective_hours_of_operations::GetEffectiveHoursOfOperationsOutput {
            effective_hours_of_operation_list: self.effective_hours_of_operation_list,
            time_zone: self.time_zone,
            _request_id: self._request_id,
        }
    }
}
