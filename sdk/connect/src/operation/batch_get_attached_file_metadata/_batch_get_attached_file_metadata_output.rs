// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetAttachedFileMetadataOutput {
    /// <p>List of attached files that were successfully retrieved.</p>
    pub files: ::std::option::Option<::std::vec::Vec<crate::types::AttachedFile>>,
    /// <p>List of errors of attached files that could not be retrieved.</p>
    pub errors: ::std::option::Option<::std::vec::Vec<crate::types::AttachedFileError>>,
    _request_id: Option<String>,
}
impl BatchGetAttachedFileMetadataOutput {
    /// <p>List of attached files that were successfully retrieved.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.files.is_none()`.
    pub fn files(&self) -> &[crate::types::AttachedFile] {
        self.files.as_deref().unwrap_or_default()
    }
    /// <p>List of errors of attached files that could not be retrieved.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.errors.is_none()`.
    pub fn errors(&self) -> &[crate::types::AttachedFileError] {
        self.errors.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for BatchGetAttachedFileMetadataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchGetAttachedFileMetadataOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetAttachedFileMetadataOutput`](crate::operation::batch_get_attached_file_metadata::BatchGetAttachedFileMetadataOutput).
    pub fn builder() -> crate::operation::batch_get_attached_file_metadata::builders::BatchGetAttachedFileMetadataOutputBuilder {
        crate::operation::batch_get_attached_file_metadata::builders::BatchGetAttachedFileMetadataOutputBuilder::default()
    }
}

/// A builder for [`BatchGetAttachedFileMetadataOutput`](crate::operation::batch_get_attached_file_metadata::BatchGetAttachedFileMetadataOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchGetAttachedFileMetadataOutputBuilder {
    pub(crate) files: ::std::option::Option<::std::vec::Vec<crate::types::AttachedFile>>,
    pub(crate) errors: ::std::option::Option<::std::vec::Vec<crate::types::AttachedFileError>>,
    _request_id: Option<String>,
}
impl BatchGetAttachedFileMetadataOutputBuilder {
    /// Appends an item to `files`.
    ///
    /// To override the contents of this collection use [`set_files`](Self::set_files).
    ///
    /// <p>List of attached files that were successfully retrieved.</p>
    pub fn files(mut self, input: crate::types::AttachedFile) -> Self {
        let mut v = self.files.unwrap_or_default();
        v.push(input);
        self.files = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of attached files that were successfully retrieved.</p>
    pub fn set_files(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AttachedFile>>) -> Self {
        self.files = input;
        self
    }
    /// <p>List of attached files that were successfully retrieved.</p>
    pub fn get_files(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AttachedFile>> {
        &self.files
    }
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>List of errors of attached files that could not be retrieved.</p>
    pub fn errors(mut self, input: crate::types::AttachedFileError) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of errors of attached files that could not be retrieved.</p>
    pub fn set_errors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AttachedFileError>>) -> Self {
        self.errors = input;
        self
    }
    /// <p>List of errors of attached files that could not be retrieved.</p>
    pub fn get_errors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AttachedFileError>> {
        &self.errors
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchGetAttachedFileMetadataOutput`](crate::operation::batch_get_attached_file_metadata::BatchGetAttachedFileMetadataOutput).
    pub fn build(self) -> crate::operation::batch_get_attached_file_metadata::BatchGetAttachedFileMetadataOutput {
        crate::operation::batch_get_attached_file_metadata::BatchGetAttachedFileMetadataOutput {
            files: self.files,
            errors: self.errors,
            _request_id: self._request_id,
        }
    }
}
