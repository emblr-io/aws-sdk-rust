// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateHoursOfOperationOverrideInput {
    /// <p>The identifier of the Amazon Connect instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier for the hours of operation</p>
    pub hours_of_operation_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the hours of operation override.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the hours of operation override.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Configuration information for the hours of operation override: day, start time, and end time.</p>
    pub config: ::std::option::Option<::std::vec::Vec<crate::types::HoursOfOperationOverrideConfig>>,
    /// <p>The date from when the hours of operation override would be effective.</p>
    pub effective_from: ::std::option::Option<::std::string::String>,
    /// <p>The date until when the hours of operation override would be effective.</p>
    pub effective_till: ::std::option::Option<::std::string::String>,
}
impl CreateHoursOfOperationOverrideInput {
    /// <p>The identifier of the Amazon Connect instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The identifier for the hours of operation</p>
    pub fn hours_of_operation_id(&self) -> ::std::option::Option<&str> {
        self.hours_of_operation_id.as_deref()
    }
    /// <p>The name of the hours of operation override.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the hours of operation override.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Configuration information for the hours of operation override: day, start time, and end time.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.config.is_none()`.
    pub fn config(&self) -> &[crate::types::HoursOfOperationOverrideConfig] {
        self.config.as_deref().unwrap_or_default()
    }
    /// <p>The date from when the hours of operation override would be effective.</p>
    pub fn effective_from(&self) -> ::std::option::Option<&str> {
        self.effective_from.as_deref()
    }
    /// <p>The date until when the hours of operation override would be effective.</p>
    pub fn effective_till(&self) -> ::std::option::Option<&str> {
        self.effective_till.as_deref()
    }
}
impl CreateHoursOfOperationOverrideInput {
    /// Creates a new builder-style object to manufacture [`CreateHoursOfOperationOverrideInput`](crate::operation::create_hours_of_operation_override::CreateHoursOfOperationOverrideInput).
    pub fn builder() -> crate::operation::create_hours_of_operation_override::builders::CreateHoursOfOperationOverrideInputBuilder {
        crate::operation::create_hours_of_operation_override::builders::CreateHoursOfOperationOverrideInputBuilder::default()
    }
}

/// A builder for [`CreateHoursOfOperationOverrideInput`](crate::operation::create_hours_of_operation_override::CreateHoursOfOperationOverrideInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateHoursOfOperationOverrideInputBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) hours_of_operation_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) config: ::std::option::Option<::std::vec::Vec<crate::types::HoursOfOperationOverrideConfig>>,
    pub(crate) effective_from: ::std::option::Option<::std::string::String>,
    pub(crate) effective_till: ::std::option::Option<::std::string::String>,
}
impl CreateHoursOfOperationOverrideInputBuilder {
    /// <p>The identifier of the Amazon Connect instance.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The identifier of the Amazon Connect instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The identifier for the hours of operation</p>
    /// This field is required.
    pub fn hours_of_operation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hours_of_operation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the hours of operation</p>
    pub fn set_hours_of_operation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hours_of_operation_id = input;
        self
    }
    /// <p>The identifier for the hours of operation</p>
    pub fn get_hours_of_operation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.hours_of_operation_id
    }
    /// <p>The name of the hours of operation override.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the hours of operation override.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the hours of operation override.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the hours of operation override.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the hours of operation override.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the hours of operation override.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `config`.
    ///
    /// To override the contents of this collection use [`set_config`](Self::set_config).
    ///
    /// <p>Configuration information for the hours of operation override: day, start time, and end time.</p>
    pub fn config(mut self, input: crate::types::HoursOfOperationOverrideConfig) -> Self {
        let mut v = self.config.unwrap_or_default();
        v.push(input);
        self.config = ::std::option::Option::Some(v);
        self
    }
    /// <p>Configuration information for the hours of operation override: day, start time, and end time.</p>
    pub fn set_config(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::HoursOfOperationOverrideConfig>>) -> Self {
        self.config = input;
        self
    }
    /// <p>Configuration information for the hours of operation override: day, start time, and end time.</p>
    pub fn get_config(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::HoursOfOperationOverrideConfig>> {
        &self.config
    }
    /// <p>The date from when the hours of operation override would be effective.</p>
    /// This field is required.
    pub fn effective_from(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.effective_from = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date from when the hours of operation override would be effective.</p>
    pub fn set_effective_from(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.effective_from = input;
        self
    }
    /// <p>The date from when the hours of operation override would be effective.</p>
    pub fn get_effective_from(&self) -> &::std::option::Option<::std::string::String> {
        &self.effective_from
    }
    /// <p>The date until when the hours of operation override would be effective.</p>
    /// This field is required.
    pub fn effective_till(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.effective_till = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date until when the hours of operation override would be effective.</p>
    pub fn set_effective_till(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.effective_till = input;
        self
    }
    /// <p>The date until when the hours of operation override would be effective.</p>
    pub fn get_effective_till(&self) -> &::std::option::Option<::std::string::String> {
        &self.effective_till
    }
    /// Consumes the builder and constructs a [`CreateHoursOfOperationOverrideInput`](crate::operation::create_hours_of_operation_override::CreateHoursOfOperationOverrideInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_hours_of_operation_override::CreateHoursOfOperationOverrideInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_hours_of_operation_override::CreateHoursOfOperationOverrideInput {
                instance_id: self.instance_id,
                hours_of_operation_id: self.hours_of_operation_id,
                name: self.name,
                description: self.description,
                config: self.config,
                effective_from: self.effective_from,
                effective_till: self.effective_till,
            },
        )
    }
}
