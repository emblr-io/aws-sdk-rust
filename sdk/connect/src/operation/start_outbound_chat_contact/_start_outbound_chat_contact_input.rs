// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartOutboundChatContactInput {
    /// <p>Information about the endpoint.</p>
    pub source_endpoint: ::std::option::Option<crate::types::Endpoint>,
    /// <p>Information about the endpoint.</p>
    pub destination_endpoint: ::std::option::Option<crate::types::Endpoint>,
    /// <p>The identifier of the Amazon Connect instance. You can find the instance ID in the Amazon Resource Name (ARN) of the instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>A set of system defined key-value pairs stored on individual contact segments using an attribute map. The attributes are standard Amazon Connect attributes. They can be accessed in flows.</p>
    /// <ul>
    /// <li>
    /// <p>Attribute keys can include only alphanumeric, <code>-</code>, and <code>_</code>.</p></li>
    /// <li>
    /// <p>This field can be used to show channel subtype, such as <code>connect:Guide</code> and <code>connect:SMS</code>.</p></li>
    /// </ul>
    pub segment_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SegmentAttributeValue>>,
    /// <p>A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in flows just like any other contact attributes.</p>
    pub attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The identifier of the flow for the call. To see the ContactFlowId in the Amazon Connect console user interface, on the navigation menu go to <b>Routing, Contact Flows</b>. Choose the flow. On the flow page, under the name of the flow, choose <b>Show additional flow information</b>. The ContactFlowId is the last part of the ARN, shown here in bold:</p>
    /// <ul>
    /// <li>
    /// <p>arn:aws:connect:us-west-2:xxxxxxxxxxxx:instance/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/contact-flow/<b>123ec456-a007-89c0-1234-xxxxxxxxxxxx</b></p></li>
    /// </ul>
    pub contact_flow_id: ::std::option::Option<::std::string::String>,
    /// <p>The total duration of the newly started chat session. If not specified, the chat session duration defaults to 25 hour. The minimum configurable time is 60 minutes. The maximum configurable time is 10,080 minutes (7 days).</p>
    pub chat_duration_in_minutes: ::std::option::Option<i32>,
    /// <p>The customer's details.</p>
    pub participant_details: ::std::option::Option<crate::types::ParticipantDetails>,
    /// <p>A chat message.</p>
    pub initial_system_message: ::std::option::Option<crate::types::ChatMessage>,
    /// <p>The unique identifier for an Amazon Connect contact. This identifier is related to the contact starting.</p>
    pub related_contact_id: ::std::option::Option<::std::string::String>,
    /// <p>The supported chat message content types. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p><code>text/plain</code></p></li>
    /// <li>
    /// <p><code>text/markdown</code></p></li>
    /// <li>
    /// <p><code>application/json, application/vnd.amazonaws.connect.message.interactive</code></p></li>
    /// <li>
    /// <p><code>application/vnd.amazonaws.connect.message.interactive.response</code></p></li>
    /// </ul>
    /// <p>Content types must always contain <code>text/plain</code>. You can then put any other supported type in the list. For example, all the following lists are valid because they contain <code>text/plain</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>\[text/plain, text/markdown, application/json\]</code></p></li>
    /// <li>
    /// <p><code>\[text/markdown, text/plain\]</code></p></li>
    /// <li>
    /// <p><code>\[text/plain, application/json, application/vnd.amazonaws.connect.message.interactive.response\]</code></p></li>
    /// </ul>
    pub supported_messaging_content_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the AWS SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>. The token is valid for 7 days after creation. If a contact is already started, the contact ID is returned.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl StartOutboundChatContactInput {
    /// <p>Information about the endpoint.</p>
    pub fn source_endpoint(&self) -> ::std::option::Option<&crate::types::Endpoint> {
        self.source_endpoint.as_ref()
    }
    /// <p>Information about the endpoint.</p>
    pub fn destination_endpoint(&self) -> ::std::option::Option<&crate::types::Endpoint> {
        self.destination_endpoint.as_ref()
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instance ID in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>A set of system defined key-value pairs stored on individual contact segments using an attribute map. The attributes are standard Amazon Connect attributes. They can be accessed in flows.</p>
    /// <ul>
    /// <li>
    /// <p>Attribute keys can include only alphanumeric, <code>-</code>, and <code>_</code>.</p></li>
    /// <li>
    /// <p>This field can be used to show channel subtype, such as <code>connect:Guide</code> and <code>connect:SMS</code>.</p></li>
    /// </ul>
    pub fn segment_attributes(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::SegmentAttributeValue>> {
        self.segment_attributes.as_ref()
    }
    /// <p>A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in flows just like any other contact attributes.</p>
    pub fn attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.attributes.as_ref()
    }
    /// <p>The identifier of the flow for the call. To see the ContactFlowId in the Amazon Connect console user interface, on the navigation menu go to <b>Routing, Contact Flows</b>. Choose the flow. On the flow page, under the name of the flow, choose <b>Show additional flow information</b>. The ContactFlowId is the last part of the ARN, shown here in bold:</p>
    /// <ul>
    /// <li>
    /// <p>arn:aws:connect:us-west-2:xxxxxxxxxxxx:instance/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/contact-flow/<b>123ec456-a007-89c0-1234-xxxxxxxxxxxx</b></p></li>
    /// </ul>
    pub fn contact_flow_id(&self) -> ::std::option::Option<&str> {
        self.contact_flow_id.as_deref()
    }
    /// <p>The total duration of the newly started chat session. If not specified, the chat session duration defaults to 25 hour. The minimum configurable time is 60 minutes. The maximum configurable time is 10,080 minutes (7 days).</p>
    pub fn chat_duration_in_minutes(&self) -> ::std::option::Option<i32> {
        self.chat_duration_in_minutes
    }
    /// <p>The customer's details.</p>
    pub fn participant_details(&self) -> ::std::option::Option<&crate::types::ParticipantDetails> {
        self.participant_details.as_ref()
    }
    /// <p>A chat message.</p>
    pub fn initial_system_message(&self) -> ::std::option::Option<&crate::types::ChatMessage> {
        self.initial_system_message.as_ref()
    }
    /// <p>The unique identifier for an Amazon Connect contact. This identifier is related to the contact starting.</p>
    pub fn related_contact_id(&self) -> ::std::option::Option<&str> {
        self.related_contact_id.as_deref()
    }
    /// <p>The supported chat message content types. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p><code>text/plain</code></p></li>
    /// <li>
    /// <p><code>text/markdown</code></p></li>
    /// <li>
    /// <p><code>application/json, application/vnd.amazonaws.connect.message.interactive</code></p></li>
    /// <li>
    /// <p><code>application/vnd.amazonaws.connect.message.interactive.response</code></p></li>
    /// </ul>
    /// <p>Content types must always contain <code>text/plain</code>. You can then put any other supported type in the list. For example, all the following lists are valid because they contain <code>text/plain</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>\[text/plain, text/markdown, application/json\]</code></p></li>
    /// <li>
    /// <p><code>\[text/markdown, text/plain\]</code></p></li>
    /// <li>
    /// <p><code>\[text/plain, application/json, application/vnd.amazonaws.connect.message.interactive.response\]</code></p></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.supported_messaging_content_types.is_none()`.
    pub fn supported_messaging_content_types(&self) -> &[::std::string::String] {
        self.supported_messaging_content_types.as_deref().unwrap_or_default()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the AWS SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>. The token is valid for 7 days after creation. If a contact is already started, the contact ID is returned.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl StartOutboundChatContactInput {
    /// Creates a new builder-style object to manufacture [`StartOutboundChatContactInput`](crate::operation::start_outbound_chat_contact::StartOutboundChatContactInput).
    pub fn builder() -> crate::operation::start_outbound_chat_contact::builders::StartOutboundChatContactInputBuilder {
        crate::operation::start_outbound_chat_contact::builders::StartOutboundChatContactInputBuilder::default()
    }
}

/// A builder for [`StartOutboundChatContactInput`](crate::operation::start_outbound_chat_contact::StartOutboundChatContactInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartOutboundChatContactInputBuilder {
    pub(crate) source_endpoint: ::std::option::Option<crate::types::Endpoint>,
    pub(crate) destination_endpoint: ::std::option::Option<crate::types::Endpoint>,
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) segment_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SegmentAttributeValue>>,
    pub(crate) attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) contact_flow_id: ::std::option::Option<::std::string::String>,
    pub(crate) chat_duration_in_minutes: ::std::option::Option<i32>,
    pub(crate) participant_details: ::std::option::Option<crate::types::ParticipantDetails>,
    pub(crate) initial_system_message: ::std::option::Option<crate::types::ChatMessage>,
    pub(crate) related_contact_id: ::std::option::Option<::std::string::String>,
    pub(crate) supported_messaging_content_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl StartOutboundChatContactInputBuilder {
    /// <p>Information about the endpoint.</p>
    /// This field is required.
    pub fn source_endpoint(mut self, input: crate::types::Endpoint) -> Self {
        self.source_endpoint = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the endpoint.</p>
    pub fn set_source_endpoint(mut self, input: ::std::option::Option<crate::types::Endpoint>) -> Self {
        self.source_endpoint = input;
        self
    }
    /// <p>Information about the endpoint.</p>
    pub fn get_source_endpoint(&self) -> &::std::option::Option<crate::types::Endpoint> {
        &self.source_endpoint
    }
    /// <p>Information about the endpoint.</p>
    /// This field is required.
    pub fn destination_endpoint(mut self, input: crate::types::Endpoint) -> Self {
        self.destination_endpoint = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the endpoint.</p>
    pub fn set_destination_endpoint(mut self, input: ::std::option::Option<crate::types::Endpoint>) -> Self {
        self.destination_endpoint = input;
        self
    }
    /// <p>Information about the endpoint.</p>
    pub fn get_destination_endpoint(&self) -> &::std::option::Option<crate::types::Endpoint> {
        &self.destination_endpoint
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instance ID in the Amazon Resource Name (ARN) of the instance.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instance ID in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instance ID in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// Adds a key-value pair to `segment_attributes`.
    ///
    /// To override the contents of this collection use [`set_segment_attributes`](Self::set_segment_attributes).
    ///
    /// <p>A set of system defined key-value pairs stored on individual contact segments using an attribute map. The attributes are standard Amazon Connect attributes. They can be accessed in flows.</p>
    /// <ul>
    /// <li>
    /// <p>Attribute keys can include only alphanumeric, <code>-</code>, and <code>_</code>.</p></li>
    /// <li>
    /// <p>This field can be used to show channel subtype, such as <code>connect:Guide</code> and <code>connect:SMS</code>.</p></li>
    /// </ul>
    pub fn segment_attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::SegmentAttributeValue) -> Self {
        let mut hash_map = self.segment_attributes.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.segment_attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A set of system defined key-value pairs stored on individual contact segments using an attribute map. The attributes are standard Amazon Connect attributes. They can be accessed in flows.</p>
    /// <ul>
    /// <li>
    /// <p>Attribute keys can include only alphanumeric, <code>-</code>, and <code>_</code>.</p></li>
    /// <li>
    /// <p>This field can be used to show channel subtype, such as <code>connect:Guide</code> and <code>connect:SMS</code>.</p></li>
    /// </ul>
    pub fn set_segment_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SegmentAttributeValue>>,
    ) -> Self {
        self.segment_attributes = input;
        self
    }
    /// <p>A set of system defined key-value pairs stored on individual contact segments using an attribute map. The attributes are standard Amazon Connect attributes. They can be accessed in flows.</p>
    /// <ul>
    /// <li>
    /// <p>Attribute keys can include only alphanumeric, <code>-</code>, and <code>_</code>.</p></li>
    /// <li>
    /// <p>This field can be used to show channel subtype, such as <code>connect:Guide</code> and <code>connect:SMS</code>.</p></li>
    /// </ul>
    pub fn get_segment_attributes(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SegmentAttributeValue>> {
        &self.segment_attributes
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in flows just like any other contact attributes.</p>
    pub fn attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in flows just like any other contact attributes.</p>
    pub fn set_attributes(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.attributes = input;
        self
    }
    /// <p>A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in flows just like any other contact attributes.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.attributes
    }
    /// <p>The identifier of the flow for the call. To see the ContactFlowId in the Amazon Connect console user interface, on the navigation menu go to <b>Routing, Contact Flows</b>. Choose the flow. On the flow page, under the name of the flow, choose <b>Show additional flow information</b>. The ContactFlowId is the last part of the ARN, shown here in bold:</p>
    /// <ul>
    /// <li>
    /// <p>arn:aws:connect:us-west-2:xxxxxxxxxxxx:instance/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/contact-flow/<b>123ec456-a007-89c0-1234-xxxxxxxxxxxx</b></p></li>
    /// </ul>
    /// This field is required.
    pub fn contact_flow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.contact_flow_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the flow for the call. To see the ContactFlowId in the Amazon Connect console user interface, on the navigation menu go to <b>Routing, Contact Flows</b>. Choose the flow. On the flow page, under the name of the flow, choose <b>Show additional flow information</b>. The ContactFlowId is the last part of the ARN, shown here in bold:</p>
    /// <ul>
    /// <li>
    /// <p>arn:aws:connect:us-west-2:xxxxxxxxxxxx:instance/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/contact-flow/<b>123ec456-a007-89c0-1234-xxxxxxxxxxxx</b></p></li>
    /// </ul>
    pub fn set_contact_flow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.contact_flow_id = input;
        self
    }
    /// <p>The identifier of the flow for the call. To see the ContactFlowId in the Amazon Connect console user interface, on the navigation menu go to <b>Routing, Contact Flows</b>. Choose the flow. On the flow page, under the name of the flow, choose <b>Show additional flow information</b>. The ContactFlowId is the last part of the ARN, shown here in bold:</p>
    /// <ul>
    /// <li>
    /// <p>arn:aws:connect:us-west-2:xxxxxxxxxxxx:instance/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/contact-flow/<b>123ec456-a007-89c0-1234-xxxxxxxxxxxx</b></p></li>
    /// </ul>
    pub fn get_contact_flow_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.contact_flow_id
    }
    /// <p>The total duration of the newly started chat session. If not specified, the chat session duration defaults to 25 hour. The minimum configurable time is 60 minutes. The maximum configurable time is 10,080 minutes (7 days).</p>
    pub fn chat_duration_in_minutes(mut self, input: i32) -> Self {
        self.chat_duration_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total duration of the newly started chat session. If not specified, the chat session duration defaults to 25 hour. The minimum configurable time is 60 minutes. The maximum configurable time is 10,080 minutes (7 days).</p>
    pub fn set_chat_duration_in_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.chat_duration_in_minutes = input;
        self
    }
    /// <p>The total duration of the newly started chat session. If not specified, the chat session duration defaults to 25 hour. The minimum configurable time is 60 minutes. The maximum configurable time is 10,080 minutes (7 days).</p>
    pub fn get_chat_duration_in_minutes(&self) -> &::std::option::Option<i32> {
        &self.chat_duration_in_minutes
    }
    /// <p>The customer's details.</p>
    pub fn participant_details(mut self, input: crate::types::ParticipantDetails) -> Self {
        self.participant_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The customer's details.</p>
    pub fn set_participant_details(mut self, input: ::std::option::Option<crate::types::ParticipantDetails>) -> Self {
        self.participant_details = input;
        self
    }
    /// <p>The customer's details.</p>
    pub fn get_participant_details(&self) -> &::std::option::Option<crate::types::ParticipantDetails> {
        &self.participant_details
    }
    /// <p>A chat message.</p>
    pub fn initial_system_message(mut self, input: crate::types::ChatMessage) -> Self {
        self.initial_system_message = ::std::option::Option::Some(input);
        self
    }
    /// <p>A chat message.</p>
    pub fn set_initial_system_message(mut self, input: ::std::option::Option<crate::types::ChatMessage>) -> Self {
        self.initial_system_message = input;
        self
    }
    /// <p>A chat message.</p>
    pub fn get_initial_system_message(&self) -> &::std::option::Option<crate::types::ChatMessage> {
        &self.initial_system_message
    }
    /// <p>The unique identifier for an Amazon Connect contact. This identifier is related to the contact starting.</p>
    pub fn related_contact_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.related_contact_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for an Amazon Connect contact. This identifier is related to the contact starting.</p>
    pub fn set_related_contact_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.related_contact_id = input;
        self
    }
    /// <p>The unique identifier for an Amazon Connect contact. This identifier is related to the contact starting.</p>
    pub fn get_related_contact_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.related_contact_id
    }
    /// Appends an item to `supported_messaging_content_types`.
    ///
    /// To override the contents of this collection use [`set_supported_messaging_content_types`](Self::set_supported_messaging_content_types).
    ///
    /// <p>The supported chat message content types. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p><code>text/plain</code></p></li>
    /// <li>
    /// <p><code>text/markdown</code></p></li>
    /// <li>
    /// <p><code>application/json, application/vnd.amazonaws.connect.message.interactive</code></p></li>
    /// <li>
    /// <p><code>application/vnd.amazonaws.connect.message.interactive.response</code></p></li>
    /// </ul>
    /// <p>Content types must always contain <code>text/plain</code>. You can then put any other supported type in the list. For example, all the following lists are valid because they contain <code>text/plain</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>\[text/plain, text/markdown, application/json\]</code></p></li>
    /// <li>
    /// <p><code>\[text/markdown, text/plain\]</code></p></li>
    /// <li>
    /// <p><code>\[text/plain, application/json, application/vnd.amazonaws.connect.message.interactive.response\]</code></p></li>
    /// </ul>
    pub fn supported_messaging_content_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.supported_messaging_content_types.unwrap_or_default();
        v.push(input.into());
        self.supported_messaging_content_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The supported chat message content types. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p><code>text/plain</code></p></li>
    /// <li>
    /// <p><code>text/markdown</code></p></li>
    /// <li>
    /// <p><code>application/json, application/vnd.amazonaws.connect.message.interactive</code></p></li>
    /// <li>
    /// <p><code>application/vnd.amazonaws.connect.message.interactive.response</code></p></li>
    /// </ul>
    /// <p>Content types must always contain <code>text/plain</code>. You can then put any other supported type in the list. For example, all the following lists are valid because they contain <code>text/plain</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>\[text/plain, text/markdown, application/json\]</code></p></li>
    /// <li>
    /// <p><code>\[text/markdown, text/plain\]</code></p></li>
    /// <li>
    /// <p><code>\[text/plain, application/json, application/vnd.amazonaws.connect.message.interactive.response\]</code></p></li>
    /// </ul>
    pub fn set_supported_messaging_content_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.supported_messaging_content_types = input;
        self
    }
    /// <p>The supported chat message content types. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p><code>text/plain</code></p></li>
    /// <li>
    /// <p><code>text/markdown</code></p></li>
    /// <li>
    /// <p><code>application/json, application/vnd.amazonaws.connect.message.interactive</code></p></li>
    /// <li>
    /// <p><code>application/vnd.amazonaws.connect.message.interactive.response</code></p></li>
    /// </ul>
    /// <p>Content types must always contain <code>text/plain</code>. You can then put any other supported type in the list. For example, all the following lists are valid because they contain <code>text/plain</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>\[text/plain, text/markdown, application/json\]</code></p></li>
    /// <li>
    /// <p><code>\[text/markdown, text/plain\]</code></p></li>
    /// <li>
    /// <p><code>\[text/plain, application/json, application/vnd.amazonaws.connect.message.interactive.response\]</code></p></li>
    /// </ul>
    pub fn get_supported_messaging_content_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.supported_messaging_content_types
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the AWS SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>. The token is valid for 7 days after creation. If a contact is already started, the contact ID is returned.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the AWS SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>. The token is valid for 7 days after creation. If a contact is already started, the contact ID is returned.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the AWS SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>. The token is valid for 7 days after creation. If a contact is already started, the contact ID is returned.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`StartOutboundChatContactInput`](crate::operation::start_outbound_chat_contact::StartOutboundChatContactInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_outbound_chat_contact::StartOutboundChatContactInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::start_outbound_chat_contact::StartOutboundChatContactInput {
            source_endpoint: self.source_endpoint,
            destination_endpoint: self.destination_endpoint,
            instance_id: self.instance_id,
            segment_attributes: self.segment_attributes,
            attributes: self.attributes,
            contact_flow_id: self.contact_flow_id,
            chat_duration_in_minutes: self.chat_duration_in_minutes,
            participant_details: self.participant_details,
            initial_system_message: self.initial_system_message,
            related_contact_id: self.related_contact_id,
            supported_messaging_content_types: self.supported_messaging_content_types,
            client_token: self.client_token,
        })
    }
}
