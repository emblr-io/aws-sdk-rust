// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the contact evaluations where the key is the FormId, which is a unique identifier for the form.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContactEvaluation {
    /// <p>The <code>FormId</code> of the contact evaluation.</p>
    pub form_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name for the evaluation form. It is always present.</p>
    pub evaluation_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the evaluation.</p>
    pub status: ::std::option::Option<crate::types::Status>,
    /// <p>The date and time when the evaluation was started, in UTC time.</p>
    pub start_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when the evaluation was submitted, in UTC time.</p>
    pub end_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when the evaluation was deleted, in UTC time.</p>
    pub delete_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The path where evaluation was exported.</p>
    pub export_location: ::std::option::Option<::std::string::String>,
}
impl ContactEvaluation {
    /// <p>The <code>FormId</code> of the contact evaluation.</p>
    pub fn form_id(&self) -> ::std::option::Option<&str> {
        self.form_id.as_deref()
    }
    /// <p>The Amazon Resource Name for the evaluation form. It is always present.</p>
    pub fn evaluation_arn(&self) -> ::std::option::Option<&str> {
        self.evaluation_arn.as_deref()
    }
    /// <p>The status of the evaluation.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
    /// <p>The date and time when the evaluation was started, in UTC time.</p>
    pub fn start_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_timestamp.as_ref()
    }
    /// <p>The date and time when the evaluation was submitted, in UTC time.</p>
    pub fn end_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_timestamp.as_ref()
    }
    /// <p>The date and time when the evaluation was deleted, in UTC time.</p>
    pub fn delete_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.delete_timestamp.as_ref()
    }
    /// <p>The path where evaluation was exported.</p>
    pub fn export_location(&self) -> ::std::option::Option<&str> {
        self.export_location.as_deref()
    }
}
impl ContactEvaluation {
    /// Creates a new builder-style object to manufacture [`ContactEvaluation`](crate::types::ContactEvaluation).
    pub fn builder() -> crate::types::builders::ContactEvaluationBuilder {
        crate::types::builders::ContactEvaluationBuilder::default()
    }
}

/// A builder for [`ContactEvaluation`](crate::types::ContactEvaluation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContactEvaluationBuilder {
    pub(crate) form_id: ::std::option::Option<::std::string::String>,
    pub(crate) evaluation_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::Status>,
    pub(crate) start_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) delete_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) export_location: ::std::option::Option<::std::string::String>,
}
impl ContactEvaluationBuilder {
    /// <p>The <code>FormId</code> of the contact evaluation.</p>
    pub fn form_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.form_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>FormId</code> of the contact evaluation.</p>
    pub fn set_form_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.form_id = input;
        self
    }
    /// <p>The <code>FormId</code> of the contact evaluation.</p>
    pub fn get_form_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.form_id
    }
    /// <p>The Amazon Resource Name for the evaluation form. It is always present.</p>
    pub fn evaluation_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.evaluation_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name for the evaluation form. It is always present.</p>
    pub fn set_evaluation_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.evaluation_arn = input;
        self
    }
    /// <p>The Amazon Resource Name for the evaluation form. It is always present.</p>
    pub fn get_evaluation_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.evaluation_arn
    }
    /// <p>The status of the evaluation.</p>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the evaluation.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the evaluation.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::Status> {
        &self.status
    }
    /// <p>The date and time when the evaluation was started, in UTC time.</p>
    pub fn start_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the evaluation was started, in UTC time.</p>
    pub fn set_start_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_timestamp = input;
        self
    }
    /// <p>The date and time when the evaluation was started, in UTC time.</p>
    pub fn get_start_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_timestamp
    }
    /// <p>The date and time when the evaluation was submitted, in UTC time.</p>
    pub fn end_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the evaluation was submitted, in UTC time.</p>
    pub fn set_end_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_timestamp = input;
        self
    }
    /// <p>The date and time when the evaluation was submitted, in UTC time.</p>
    pub fn get_end_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_timestamp
    }
    /// <p>The date and time when the evaluation was deleted, in UTC time.</p>
    pub fn delete_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.delete_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the evaluation was deleted, in UTC time.</p>
    pub fn set_delete_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.delete_timestamp = input;
        self
    }
    /// <p>The date and time when the evaluation was deleted, in UTC time.</p>
    pub fn get_delete_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.delete_timestamp
    }
    /// <p>The path where evaluation was exported.</p>
    pub fn export_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.export_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path where evaluation was exported.</p>
    pub fn set_export_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.export_location = input;
        self
    }
    /// <p>The path where evaluation was exported.</p>
    pub fn get_export_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.export_location
    }
    /// Consumes the builder and constructs a [`ContactEvaluation`](crate::types::ContactEvaluation).
    pub fn build(self) -> crate::types::ContactEvaluation {
        crate::types::ContactEvaluation {
            form_id: self.form_id,
            evaluation_arn: self.evaluation_arn,
            status: self.status,
            start_timestamp: self.start_timestamp,
            end_timestamp: self.end_timestamp,
            delete_timestamp: self.delete_timestamp,
            export_location: self.export_location,
        }
    }
}
