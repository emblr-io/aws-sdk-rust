// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the hours of operation override config: day, start time, and end time.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HoursOfOperationOverrideConfig {
    /// <p>The day that the hours of operation override applies to.</p>
    pub day: ::std::option::Option<crate::types::OverrideDays>,
    /// <p>The start time when your contact center opens if overrides are applied.</p>
    pub start_time: ::std::option::Option<crate::types::OverrideTimeSlice>,
    /// <p>The end time that your contact center closes if overrides are applied.</p>
    pub end_time: ::std::option::Option<crate::types::OverrideTimeSlice>,
}
impl HoursOfOperationOverrideConfig {
    /// <p>The day that the hours of operation override applies to.</p>
    pub fn day(&self) -> ::std::option::Option<&crate::types::OverrideDays> {
        self.day.as_ref()
    }
    /// <p>The start time when your contact center opens if overrides are applied.</p>
    pub fn start_time(&self) -> ::std::option::Option<&crate::types::OverrideTimeSlice> {
        self.start_time.as_ref()
    }
    /// <p>The end time that your contact center closes if overrides are applied.</p>
    pub fn end_time(&self) -> ::std::option::Option<&crate::types::OverrideTimeSlice> {
        self.end_time.as_ref()
    }
}
impl HoursOfOperationOverrideConfig {
    /// Creates a new builder-style object to manufacture [`HoursOfOperationOverrideConfig`](crate::types::HoursOfOperationOverrideConfig).
    pub fn builder() -> crate::types::builders::HoursOfOperationOverrideConfigBuilder {
        crate::types::builders::HoursOfOperationOverrideConfigBuilder::default()
    }
}

/// A builder for [`HoursOfOperationOverrideConfig`](crate::types::HoursOfOperationOverrideConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct HoursOfOperationOverrideConfigBuilder {
    pub(crate) day: ::std::option::Option<crate::types::OverrideDays>,
    pub(crate) start_time: ::std::option::Option<crate::types::OverrideTimeSlice>,
    pub(crate) end_time: ::std::option::Option<crate::types::OverrideTimeSlice>,
}
impl HoursOfOperationOverrideConfigBuilder {
    /// <p>The day that the hours of operation override applies to.</p>
    pub fn day(mut self, input: crate::types::OverrideDays) -> Self {
        self.day = ::std::option::Option::Some(input);
        self
    }
    /// <p>The day that the hours of operation override applies to.</p>
    pub fn set_day(mut self, input: ::std::option::Option<crate::types::OverrideDays>) -> Self {
        self.day = input;
        self
    }
    /// <p>The day that the hours of operation override applies to.</p>
    pub fn get_day(&self) -> &::std::option::Option<crate::types::OverrideDays> {
        &self.day
    }
    /// <p>The start time when your contact center opens if overrides are applied.</p>
    pub fn start_time(mut self, input: crate::types::OverrideTimeSlice) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start time when your contact center opens if overrides are applied.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<crate::types::OverrideTimeSlice>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The start time when your contact center opens if overrides are applied.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<crate::types::OverrideTimeSlice> {
        &self.start_time
    }
    /// <p>The end time that your contact center closes if overrides are applied.</p>
    pub fn end_time(mut self, input: crate::types::OverrideTimeSlice) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end time that your contact center closes if overrides are applied.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<crate::types::OverrideTimeSlice>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The end time that your contact center closes if overrides are applied.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<crate::types::OverrideTimeSlice> {
        &self.end_time
    }
    /// Consumes the builder and constructs a [`HoursOfOperationOverrideConfig`](crate::types::HoursOfOperationOverrideConfig).
    pub fn build(self) -> crate::types::HoursOfOperationOverrideConfig {
        crate::types::HoursOfOperationOverrideConfig {
            day: self.day,
            start_time: self.start_time,
            end_time: self.end_time,
        }
    }
}
