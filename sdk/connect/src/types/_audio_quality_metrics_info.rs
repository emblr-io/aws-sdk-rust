// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information for score and potential quality issues for Audio</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AudioQualityMetricsInfo {
    /// <p>Number measuring the estimated quality of the media connection.</p>
    pub quality_score: f32,
    /// <p>List of potential issues causing degradation of quality on a media connection. If the service did not detect any potential quality issues the list is empty.</p>
    /// <p>Valid values: <code>HighPacketLoss</code> | <code>HighRoundTripTime</code> | <code>HighJitterBuffer</code></p>
    pub potential_quality_issues: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AudioQualityMetricsInfo {
    /// <p>Number measuring the estimated quality of the media connection.</p>
    pub fn quality_score(&self) -> f32 {
        self.quality_score
    }
    /// <p>List of potential issues causing degradation of quality on a media connection. If the service did not detect any potential quality issues the list is empty.</p>
    /// <p>Valid values: <code>HighPacketLoss</code> | <code>HighRoundTripTime</code> | <code>HighJitterBuffer</code></p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.potential_quality_issues.is_none()`.
    pub fn potential_quality_issues(&self) -> &[::std::string::String] {
        self.potential_quality_issues.as_deref().unwrap_or_default()
    }
}
impl AudioQualityMetricsInfo {
    /// Creates a new builder-style object to manufacture [`AudioQualityMetricsInfo`](crate::types::AudioQualityMetricsInfo).
    pub fn builder() -> crate::types::builders::AudioQualityMetricsInfoBuilder {
        crate::types::builders::AudioQualityMetricsInfoBuilder::default()
    }
}

/// A builder for [`AudioQualityMetricsInfo`](crate::types::AudioQualityMetricsInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AudioQualityMetricsInfoBuilder {
    pub(crate) quality_score: ::std::option::Option<f32>,
    pub(crate) potential_quality_issues: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AudioQualityMetricsInfoBuilder {
    /// <p>Number measuring the estimated quality of the media connection.</p>
    pub fn quality_score(mut self, input: f32) -> Self {
        self.quality_score = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number measuring the estimated quality of the media connection.</p>
    pub fn set_quality_score(mut self, input: ::std::option::Option<f32>) -> Self {
        self.quality_score = input;
        self
    }
    /// <p>Number measuring the estimated quality of the media connection.</p>
    pub fn get_quality_score(&self) -> &::std::option::Option<f32> {
        &self.quality_score
    }
    /// Appends an item to `potential_quality_issues`.
    ///
    /// To override the contents of this collection use [`set_potential_quality_issues`](Self::set_potential_quality_issues).
    ///
    /// <p>List of potential issues causing degradation of quality on a media connection. If the service did not detect any potential quality issues the list is empty.</p>
    /// <p>Valid values: <code>HighPacketLoss</code> | <code>HighRoundTripTime</code> | <code>HighJitterBuffer</code></p>
    pub fn potential_quality_issues(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.potential_quality_issues.unwrap_or_default();
        v.push(input.into());
        self.potential_quality_issues = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of potential issues causing degradation of quality on a media connection. If the service did not detect any potential quality issues the list is empty.</p>
    /// <p>Valid values: <code>HighPacketLoss</code> | <code>HighRoundTripTime</code> | <code>HighJitterBuffer</code></p>
    pub fn set_potential_quality_issues(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.potential_quality_issues = input;
        self
    }
    /// <p>List of potential issues causing degradation of quality on a media connection. If the service did not detect any potential quality issues the list is empty.</p>
    /// <p>Valid values: <code>HighPacketLoss</code> | <code>HighRoundTripTime</code> | <code>HighJitterBuffer</code></p>
    pub fn get_potential_quality_issues(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.potential_quality_issues
    }
    /// Consumes the builder and constructs a [`AudioQualityMetricsInfo`](crate::types::AudioQualityMetricsInfo).
    pub fn build(self) -> crate::types::AudioQualityMetricsInfo {
        crate::types::AudioQualityMetricsInfo {
            quality_score: self.quality_score.unwrap_or_default(),
            potential_quality_issues: self.potential_quality_issues,
        }
    }
}
