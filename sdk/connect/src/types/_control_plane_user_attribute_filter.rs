// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that can be used to specify Tag conditions or Hierarchy Group conditions inside the <code>SearchFilter</code>.</p>
/// <p>This accepts an <code>OR</code> of <code>AND</code> (List of List) input where:</p>
/// <ul>
/// <li>
/// <p>The top level list specifies conditions that need to be applied with <code>OR</code> operator</p></li>
/// <li>
/// <p>The inner list specifies conditions that need to be applied with <code>AND</code> operator.</p></li>
/// </ul><note>
/// <p>Only one field can be populated. Maximum number of allowed Tag conditions is 25. Maximum number of allowed Hierarchy Group conditions is 20.</p>
/// </note>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ControlPlaneUserAttributeFilter {
    /// <p>A list of conditions which would be applied together with an <code>OR</code> condition.</p>
    pub or_conditions: ::std::option::Option<::std::vec::Vec<crate::types::AttributeAndCondition>>,
    /// <p>A list of conditions which would be applied together with an <code>AND</code> condition.</p>
    pub and_condition: ::std::option::Option<crate::types::AttributeAndCondition>,
    /// <p>A leaf node condition which can be used to specify a tag condition, for example, <code>HAVE BPO = 123</code>.</p>
    pub tag_condition: ::std::option::Option<crate::types::TagCondition>,
    /// <p>A leaf node condition which can be used to specify a hierarchy group condition.</p>
    pub hierarchy_group_condition: ::std::option::Option<crate::types::HierarchyGroupCondition>,
}
impl ControlPlaneUserAttributeFilter {
    /// <p>A list of conditions which would be applied together with an <code>OR</code> condition.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.or_conditions.is_none()`.
    pub fn or_conditions(&self) -> &[crate::types::AttributeAndCondition] {
        self.or_conditions.as_deref().unwrap_or_default()
    }
    /// <p>A list of conditions which would be applied together with an <code>AND</code> condition.</p>
    pub fn and_condition(&self) -> ::std::option::Option<&crate::types::AttributeAndCondition> {
        self.and_condition.as_ref()
    }
    /// <p>A leaf node condition which can be used to specify a tag condition, for example, <code>HAVE BPO = 123</code>.</p>
    pub fn tag_condition(&self) -> ::std::option::Option<&crate::types::TagCondition> {
        self.tag_condition.as_ref()
    }
    /// <p>A leaf node condition which can be used to specify a hierarchy group condition.</p>
    pub fn hierarchy_group_condition(&self) -> ::std::option::Option<&crate::types::HierarchyGroupCondition> {
        self.hierarchy_group_condition.as_ref()
    }
}
impl ControlPlaneUserAttributeFilter {
    /// Creates a new builder-style object to manufacture [`ControlPlaneUserAttributeFilter`](crate::types::ControlPlaneUserAttributeFilter).
    pub fn builder() -> crate::types::builders::ControlPlaneUserAttributeFilterBuilder {
        crate::types::builders::ControlPlaneUserAttributeFilterBuilder::default()
    }
}

/// A builder for [`ControlPlaneUserAttributeFilter`](crate::types::ControlPlaneUserAttributeFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ControlPlaneUserAttributeFilterBuilder {
    pub(crate) or_conditions: ::std::option::Option<::std::vec::Vec<crate::types::AttributeAndCondition>>,
    pub(crate) and_condition: ::std::option::Option<crate::types::AttributeAndCondition>,
    pub(crate) tag_condition: ::std::option::Option<crate::types::TagCondition>,
    pub(crate) hierarchy_group_condition: ::std::option::Option<crate::types::HierarchyGroupCondition>,
}
impl ControlPlaneUserAttributeFilterBuilder {
    /// Appends an item to `or_conditions`.
    ///
    /// To override the contents of this collection use [`set_or_conditions`](Self::set_or_conditions).
    ///
    /// <p>A list of conditions which would be applied together with an <code>OR</code> condition.</p>
    pub fn or_conditions(mut self, input: crate::types::AttributeAndCondition) -> Self {
        let mut v = self.or_conditions.unwrap_or_default();
        v.push(input);
        self.or_conditions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of conditions which would be applied together with an <code>OR</code> condition.</p>
    pub fn set_or_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AttributeAndCondition>>) -> Self {
        self.or_conditions = input;
        self
    }
    /// <p>A list of conditions which would be applied together with an <code>OR</code> condition.</p>
    pub fn get_or_conditions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AttributeAndCondition>> {
        &self.or_conditions
    }
    /// <p>A list of conditions which would be applied together with an <code>AND</code> condition.</p>
    pub fn and_condition(mut self, input: crate::types::AttributeAndCondition) -> Self {
        self.and_condition = ::std::option::Option::Some(input);
        self
    }
    /// <p>A list of conditions which would be applied together with an <code>AND</code> condition.</p>
    pub fn set_and_condition(mut self, input: ::std::option::Option<crate::types::AttributeAndCondition>) -> Self {
        self.and_condition = input;
        self
    }
    /// <p>A list of conditions which would be applied together with an <code>AND</code> condition.</p>
    pub fn get_and_condition(&self) -> &::std::option::Option<crate::types::AttributeAndCondition> {
        &self.and_condition
    }
    /// <p>A leaf node condition which can be used to specify a tag condition, for example, <code>HAVE BPO = 123</code>.</p>
    pub fn tag_condition(mut self, input: crate::types::TagCondition) -> Self {
        self.tag_condition = ::std::option::Option::Some(input);
        self
    }
    /// <p>A leaf node condition which can be used to specify a tag condition, for example, <code>HAVE BPO = 123</code>.</p>
    pub fn set_tag_condition(mut self, input: ::std::option::Option<crate::types::TagCondition>) -> Self {
        self.tag_condition = input;
        self
    }
    /// <p>A leaf node condition which can be used to specify a tag condition, for example, <code>HAVE BPO = 123</code>.</p>
    pub fn get_tag_condition(&self) -> &::std::option::Option<crate::types::TagCondition> {
        &self.tag_condition
    }
    /// <p>A leaf node condition which can be used to specify a hierarchy group condition.</p>
    pub fn hierarchy_group_condition(mut self, input: crate::types::HierarchyGroupCondition) -> Self {
        self.hierarchy_group_condition = ::std::option::Option::Some(input);
        self
    }
    /// <p>A leaf node condition which can be used to specify a hierarchy group condition.</p>
    pub fn set_hierarchy_group_condition(mut self, input: ::std::option::Option<crate::types::HierarchyGroupCondition>) -> Self {
        self.hierarchy_group_condition = input;
        self
    }
    /// <p>A leaf node condition which can be used to specify a hierarchy group condition.</p>
    pub fn get_hierarchy_group_condition(&self) -> &::std::option::Option<crate::types::HierarchyGroupCondition> {
        &self.hierarchy_group_condition
    }
    /// Consumes the builder and constructs a [`ControlPlaneUserAttributeFilter`](crate::types::ControlPlaneUserAttributeFilter).
    pub fn build(self) -> crate::types::ControlPlaneUserAttributeFilter {
        crate::types::ControlPlaneUserAttributeFilter {
            or_conditions: self.or_conditions,
            and_condition: self.and_condition,
            tag_condition: self.tag_condition,
            hierarchy_group_condition: self.hierarchy_group_condition,
        }
    }
}
