// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the threshold for service level metrics.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ThresholdV2 {
    /// <p>The type of comparison. Currently, "less than" (LT), "less than equal" (LTE), and "greater than" (GT) comparisons are supported.</p>
    pub comparison: ::std::option::Option<::std::string::String>,
    /// <p>The threshold value to compare.</p>
    pub threshold_value: ::std::option::Option<f64>,
}
impl ThresholdV2 {
    /// <p>The type of comparison. Currently, "less than" (LT), "less than equal" (LTE), and "greater than" (GT) comparisons are supported.</p>
    pub fn comparison(&self) -> ::std::option::Option<&str> {
        self.comparison.as_deref()
    }
    /// <p>The threshold value to compare.</p>
    pub fn threshold_value(&self) -> ::std::option::Option<f64> {
        self.threshold_value
    }
}
impl ThresholdV2 {
    /// Creates a new builder-style object to manufacture [`ThresholdV2`](crate::types::ThresholdV2).
    pub fn builder() -> crate::types::builders::ThresholdV2Builder {
        crate::types::builders::ThresholdV2Builder::default()
    }
}

/// A builder for [`ThresholdV2`](crate::types::ThresholdV2).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ThresholdV2Builder {
    pub(crate) comparison: ::std::option::Option<::std::string::String>,
    pub(crate) threshold_value: ::std::option::Option<f64>,
}
impl ThresholdV2Builder {
    /// <p>The type of comparison. Currently, "less than" (LT), "less than equal" (LTE), and "greater than" (GT) comparisons are supported.</p>
    pub fn comparison(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.comparison = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of comparison. Currently, "less than" (LT), "less than equal" (LTE), and "greater than" (GT) comparisons are supported.</p>
    pub fn set_comparison(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.comparison = input;
        self
    }
    /// <p>The type of comparison. Currently, "less than" (LT), "less than equal" (LTE), and "greater than" (GT) comparisons are supported.</p>
    pub fn get_comparison(&self) -> &::std::option::Option<::std::string::String> {
        &self.comparison
    }
    /// <p>The threshold value to compare.</p>
    pub fn threshold_value(mut self, input: f64) -> Self {
        self.threshold_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The threshold value to compare.</p>
    pub fn set_threshold_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.threshold_value = input;
        self
    }
    /// <p>The threshold value to compare.</p>
    pub fn get_threshold_value(&self) -> &::std::option::Option<f64> {
        &self.threshold_value
    }
    /// Consumes the builder and constructs a [`ThresholdV2`](crate::types::ThresholdV2).
    pub fn build(self) -> crate::types::ThresholdV2 {
        crate::types::ThresholdV2 {
            comparison: self.comparison,
            threshold_value: self.threshold_value,
        }
    }
}
