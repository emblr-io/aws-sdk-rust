// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A leaf node condition which can be used to specify a numeric condition.</p><note>
/// <p>The currently supported value for <code>FieldName</code> is <code>limit</code>.</p>
/// </note>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NumberCondition {
    /// <p>The name of the field in the number condition.</p>
    pub field_name: ::std::option::Option<::std::string::String>,
    /// <p>The minValue to be used while evaluating the number condition.</p>
    pub min_value: ::std::option::Option<i32>,
    /// <p>The maxValue to be used while evaluating the number condition.</p>
    pub max_value: ::std::option::Option<i32>,
    /// <p>The type of comparison to be made when evaluating the number condition.</p>
    pub comparison_type: ::std::option::Option<crate::types::NumberComparisonType>,
}
impl NumberCondition {
    /// <p>The name of the field in the number condition.</p>
    pub fn field_name(&self) -> ::std::option::Option<&str> {
        self.field_name.as_deref()
    }
    /// <p>The minValue to be used while evaluating the number condition.</p>
    pub fn min_value(&self) -> ::std::option::Option<i32> {
        self.min_value
    }
    /// <p>The maxValue to be used while evaluating the number condition.</p>
    pub fn max_value(&self) -> ::std::option::Option<i32> {
        self.max_value
    }
    /// <p>The type of comparison to be made when evaluating the number condition.</p>
    pub fn comparison_type(&self) -> ::std::option::Option<&crate::types::NumberComparisonType> {
        self.comparison_type.as_ref()
    }
}
impl NumberCondition {
    /// Creates a new builder-style object to manufacture [`NumberCondition`](crate::types::NumberCondition).
    pub fn builder() -> crate::types::builders::NumberConditionBuilder {
        crate::types::builders::NumberConditionBuilder::default()
    }
}

/// A builder for [`NumberCondition`](crate::types::NumberCondition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NumberConditionBuilder {
    pub(crate) field_name: ::std::option::Option<::std::string::String>,
    pub(crate) min_value: ::std::option::Option<i32>,
    pub(crate) max_value: ::std::option::Option<i32>,
    pub(crate) comparison_type: ::std::option::Option<crate::types::NumberComparisonType>,
}
impl NumberConditionBuilder {
    /// <p>The name of the field in the number condition.</p>
    pub fn field_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the field in the number condition.</p>
    pub fn set_field_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_name = input;
        self
    }
    /// <p>The name of the field in the number condition.</p>
    pub fn get_field_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_name
    }
    /// <p>The minValue to be used while evaluating the number condition.</p>
    pub fn min_value(mut self, input: i32) -> Self {
        self.min_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minValue to be used while evaluating the number condition.</p>
    pub fn set_min_value(mut self, input: ::std::option::Option<i32>) -> Self {
        self.min_value = input;
        self
    }
    /// <p>The minValue to be used while evaluating the number condition.</p>
    pub fn get_min_value(&self) -> &::std::option::Option<i32> {
        &self.min_value
    }
    /// <p>The maxValue to be used while evaluating the number condition.</p>
    pub fn max_value(mut self, input: i32) -> Self {
        self.max_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maxValue to be used while evaluating the number condition.</p>
    pub fn set_max_value(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_value = input;
        self
    }
    /// <p>The maxValue to be used while evaluating the number condition.</p>
    pub fn get_max_value(&self) -> &::std::option::Option<i32> {
        &self.max_value
    }
    /// <p>The type of comparison to be made when evaluating the number condition.</p>
    pub fn comparison_type(mut self, input: crate::types::NumberComparisonType) -> Self {
        self.comparison_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of comparison to be made when evaluating the number condition.</p>
    pub fn set_comparison_type(mut self, input: ::std::option::Option<crate::types::NumberComparisonType>) -> Self {
        self.comparison_type = input;
        self
    }
    /// <p>The type of comparison to be made when evaluating the number condition.</p>
    pub fn get_comparison_type(&self) -> &::std::option::Option<crate::types::NumberComparisonType> {
        &self.comparison_type
    }
    /// Consumes the builder and constructs a [`NumberCondition`](crate::types::NumberCondition).
    pub fn build(self) -> crate::types::NumberCondition {
        crate::types::NumberCondition {
            field_name: self.field_name,
            min_value: self.min_value,
            max_value: self.max_value,
            comparison_type: self.comparison_type,
        }
    }
}
