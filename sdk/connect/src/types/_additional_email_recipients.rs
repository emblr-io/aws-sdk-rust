// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>List of additional email addresses for an email contact.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AdditionalEmailRecipients {
    /// <p>List of additional TO email recipients for an email contact.</p>
    pub to_list: ::std::option::Option<::std::vec::Vec<crate::types::EmailRecipient>>,
    /// <p>List of additional CC email recipients for an email contact.</p>
    pub cc_list: ::std::option::Option<::std::vec::Vec<crate::types::EmailRecipient>>,
}
impl AdditionalEmailRecipients {
    /// <p>List of additional TO email recipients for an email contact.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.to_list.is_none()`.
    pub fn to_list(&self) -> &[crate::types::EmailRecipient] {
        self.to_list.as_deref().unwrap_or_default()
    }
    /// <p>List of additional CC email recipients for an email contact.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cc_list.is_none()`.
    pub fn cc_list(&self) -> &[crate::types::EmailRecipient] {
        self.cc_list.as_deref().unwrap_or_default()
    }
}
impl AdditionalEmailRecipients {
    /// Creates a new builder-style object to manufacture [`AdditionalEmailRecipients`](crate::types::AdditionalEmailRecipients).
    pub fn builder() -> crate::types::builders::AdditionalEmailRecipientsBuilder {
        crate::types::builders::AdditionalEmailRecipientsBuilder::default()
    }
}

/// A builder for [`AdditionalEmailRecipients`](crate::types::AdditionalEmailRecipients).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AdditionalEmailRecipientsBuilder {
    pub(crate) to_list: ::std::option::Option<::std::vec::Vec<crate::types::EmailRecipient>>,
    pub(crate) cc_list: ::std::option::Option<::std::vec::Vec<crate::types::EmailRecipient>>,
}
impl AdditionalEmailRecipientsBuilder {
    /// Appends an item to `to_list`.
    ///
    /// To override the contents of this collection use [`set_to_list`](Self::set_to_list).
    ///
    /// <p>List of additional TO email recipients for an email contact.</p>
    pub fn to_list(mut self, input: crate::types::EmailRecipient) -> Self {
        let mut v = self.to_list.unwrap_or_default();
        v.push(input);
        self.to_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of additional TO email recipients for an email contact.</p>
    pub fn set_to_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EmailRecipient>>) -> Self {
        self.to_list = input;
        self
    }
    /// <p>List of additional TO email recipients for an email contact.</p>
    pub fn get_to_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EmailRecipient>> {
        &self.to_list
    }
    /// Appends an item to `cc_list`.
    ///
    /// To override the contents of this collection use [`set_cc_list`](Self::set_cc_list).
    ///
    /// <p>List of additional CC email recipients for an email contact.</p>
    pub fn cc_list(mut self, input: crate::types::EmailRecipient) -> Self {
        let mut v = self.cc_list.unwrap_or_default();
        v.push(input);
        self.cc_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of additional CC email recipients for an email contact.</p>
    pub fn set_cc_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EmailRecipient>>) -> Self {
        self.cc_list = input;
        self
    }
    /// <p>List of additional CC email recipients for an email contact.</p>
    pub fn get_cc_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EmailRecipient>> {
        &self.cc_list
    }
    /// Consumes the builder and constructs a [`AdditionalEmailRecipients`](crate::types::AdditionalEmailRecipients).
    pub fn build(self) -> crate::types::AdditionalEmailRecipients {
        crate::types::AdditionalEmailRecipients {
            to_list: self.to_list,
            cc_list: self.cc_list,
        }
    }
}
