// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about template message configuration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TemplatedMessageConfig {
    /// <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub knowledge_base_id: ::std::string::String,
    /// <p>The identifier of the message template Id.</p>
    pub message_template_id: ::std::string::String,
    /// <p>Information about template attributes, that is, CustomAttributes or CustomerProfileAttributes.</p>
    pub template_attributes: ::std::option::Option<crate::types::TemplateAttributes>,
}
impl TemplatedMessageConfig {
    /// <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn knowledge_base_id(&self) -> &str {
        use std::ops::Deref;
        self.knowledge_base_id.deref()
    }
    /// <p>The identifier of the message template Id.</p>
    pub fn message_template_id(&self) -> &str {
        use std::ops::Deref;
        self.message_template_id.deref()
    }
    /// <p>Information about template attributes, that is, CustomAttributes or CustomerProfileAttributes.</p>
    pub fn template_attributes(&self) -> ::std::option::Option<&crate::types::TemplateAttributes> {
        self.template_attributes.as_ref()
    }
}
impl TemplatedMessageConfig {
    /// Creates a new builder-style object to manufacture [`TemplatedMessageConfig`](crate::types::TemplatedMessageConfig).
    pub fn builder() -> crate::types::builders::TemplatedMessageConfigBuilder {
        crate::types::builders::TemplatedMessageConfigBuilder::default()
    }
}

/// A builder for [`TemplatedMessageConfig`](crate::types::TemplatedMessageConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TemplatedMessageConfigBuilder {
    pub(crate) knowledge_base_id: ::std::option::Option<::std::string::String>,
    pub(crate) message_template_id: ::std::option::Option<::std::string::String>,
    pub(crate) template_attributes: ::std::option::Option<crate::types::TemplateAttributes>,
}
impl TemplatedMessageConfigBuilder {
    /// <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    /// This field is required.
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_id
    }
    /// <p>The identifier of the message template Id.</p>
    /// This field is required.
    pub fn message_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the message template Id.</p>
    pub fn set_message_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_template_id = input;
        self
    }
    /// <p>The identifier of the message template Id.</p>
    pub fn get_message_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_template_id
    }
    /// <p>Information about template attributes, that is, CustomAttributes or CustomerProfileAttributes.</p>
    /// This field is required.
    pub fn template_attributes(mut self, input: crate::types::TemplateAttributes) -> Self {
        self.template_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about template attributes, that is, CustomAttributes or CustomerProfileAttributes.</p>
    pub fn set_template_attributes(mut self, input: ::std::option::Option<crate::types::TemplateAttributes>) -> Self {
        self.template_attributes = input;
        self
    }
    /// <p>Information about template attributes, that is, CustomAttributes or CustomerProfileAttributes.</p>
    pub fn get_template_attributes(&self) -> &::std::option::Option<crate::types::TemplateAttributes> {
        &self.template_attributes
    }
    /// Consumes the builder and constructs a [`TemplatedMessageConfig`](crate::types::TemplatedMessageConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`knowledge_base_id`](crate::types::builders::TemplatedMessageConfigBuilder::knowledge_base_id)
    /// - [`message_template_id`](crate::types::builders::TemplatedMessageConfigBuilder::message_template_id)
    pub fn build(self) -> ::std::result::Result<crate::types::TemplatedMessageConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TemplatedMessageConfig {
            knowledge_base_id: self.knowledge_base_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "knowledge_base_id",
                    "knowledge_base_id was not specified but it is required when building TemplatedMessageConfig",
                )
            })?,
            message_template_id: self.message_template_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message_template_id",
                    "message_template_id was not specified but it is required when building TemplatedMessageConfig",
                )
            })?,
            template_attributes: self.template_attributes,
        })
    }
}
