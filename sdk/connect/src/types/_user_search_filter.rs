// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filters to be applied to search results.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UserSearchFilter {
    /// <p>An object that can be used to specify Tag conditions inside the <code>SearchFilter</code>. This accepts an <code>OR</code> of <code>AND</code> (List of List) input where:</p>
    /// <ul>
    /// <li>
    /// <p>Top level list specifies conditions that need to be applied with <code>OR</code> operator</p></li>
    /// <li>
    /// <p>Inner list specifies conditions that need to be applied with <code>AND</code> operator.</p></li>
    /// </ul>
    pub tag_filter: ::std::option::Option<crate::types::ControlPlaneTagFilter>,
    /// <p>An object that can be used to specify Tag conditions or Hierarchy Group conditions inside the SearchFilter.</p>
    /// <p>This accepts an <code>OR</code> of <code>AND</code> (List of List) input where:</p>
    /// <ul>
    /// <li>
    /// <p>The top level list specifies conditions that need to be applied with <code>OR</code> operator.</p></li>
    /// <li>
    /// <p>The inner list specifies conditions that need to be applied with <code>AND</code> operator.</p></li>
    /// </ul><note>
    /// <p>Only one field can be populated. This object can’t be used along with TagFilter. Request can either contain TagFilter or UserAttributeFilter if SearchFilter is specified, combination of both is not supported and such request will throw AccessDeniedException.</p>
    /// </note>
    pub user_attribute_filter: ::std::option::Option<crate::types::ControlPlaneUserAttributeFilter>,
}
impl UserSearchFilter {
    /// <p>An object that can be used to specify Tag conditions inside the <code>SearchFilter</code>. This accepts an <code>OR</code> of <code>AND</code> (List of List) input where:</p>
    /// <ul>
    /// <li>
    /// <p>Top level list specifies conditions that need to be applied with <code>OR</code> operator</p></li>
    /// <li>
    /// <p>Inner list specifies conditions that need to be applied with <code>AND</code> operator.</p></li>
    /// </ul>
    pub fn tag_filter(&self) -> ::std::option::Option<&crate::types::ControlPlaneTagFilter> {
        self.tag_filter.as_ref()
    }
    /// <p>An object that can be used to specify Tag conditions or Hierarchy Group conditions inside the SearchFilter.</p>
    /// <p>This accepts an <code>OR</code> of <code>AND</code> (List of List) input where:</p>
    /// <ul>
    /// <li>
    /// <p>The top level list specifies conditions that need to be applied with <code>OR</code> operator.</p></li>
    /// <li>
    /// <p>The inner list specifies conditions that need to be applied with <code>AND</code> operator.</p></li>
    /// </ul><note>
    /// <p>Only one field can be populated. This object can’t be used along with TagFilter. Request can either contain TagFilter or UserAttributeFilter if SearchFilter is specified, combination of both is not supported and such request will throw AccessDeniedException.</p>
    /// </note>
    pub fn user_attribute_filter(&self) -> ::std::option::Option<&crate::types::ControlPlaneUserAttributeFilter> {
        self.user_attribute_filter.as_ref()
    }
}
impl UserSearchFilter {
    /// Creates a new builder-style object to manufacture [`UserSearchFilter`](crate::types::UserSearchFilter).
    pub fn builder() -> crate::types::builders::UserSearchFilterBuilder {
        crate::types::builders::UserSearchFilterBuilder::default()
    }
}

/// A builder for [`UserSearchFilter`](crate::types::UserSearchFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UserSearchFilterBuilder {
    pub(crate) tag_filter: ::std::option::Option<crate::types::ControlPlaneTagFilter>,
    pub(crate) user_attribute_filter: ::std::option::Option<crate::types::ControlPlaneUserAttributeFilter>,
}
impl UserSearchFilterBuilder {
    /// <p>An object that can be used to specify Tag conditions inside the <code>SearchFilter</code>. This accepts an <code>OR</code> of <code>AND</code> (List of List) input where:</p>
    /// <ul>
    /// <li>
    /// <p>Top level list specifies conditions that need to be applied with <code>OR</code> operator</p></li>
    /// <li>
    /// <p>Inner list specifies conditions that need to be applied with <code>AND</code> operator.</p></li>
    /// </ul>
    pub fn tag_filter(mut self, input: crate::types::ControlPlaneTagFilter) -> Self {
        self.tag_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that can be used to specify Tag conditions inside the <code>SearchFilter</code>. This accepts an <code>OR</code> of <code>AND</code> (List of List) input where:</p>
    /// <ul>
    /// <li>
    /// <p>Top level list specifies conditions that need to be applied with <code>OR</code> operator</p></li>
    /// <li>
    /// <p>Inner list specifies conditions that need to be applied with <code>AND</code> operator.</p></li>
    /// </ul>
    pub fn set_tag_filter(mut self, input: ::std::option::Option<crate::types::ControlPlaneTagFilter>) -> Self {
        self.tag_filter = input;
        self
    }
    /// <p>An object that can be used to specify Tag conditions inside the <code>SearchFilter</code>. This accepts an <code>OR</code> of <code>AND</code> (List of List) input where:</p>
    /// <ul>
    /// <li>
    /// <p>Top level list specifies conditions that need to be applied with <code>OR</code> operator</p></li>
    /// <li>
    /// <p>Inner list specifies conditions that need to be applied with <code>AND</code> operator.</p></li>
    /// </ul>
    pub fn get_tag_filter(&self) -> &::std::option::Option<crate::types::ControlPlaneTagFilter> {
        &self.tag_filter
    }
    /// <p>An object that can be used to specify Tag conditions or Hierarchy Group conditions inside the SearchFilter.</p>
    /// <p>This accepts an <code>OR</code> of <code>AND</code> (List of List) input where:</p>
    /// <ul>
    /// <li>
    /// <p>The top level list specifies conditions that need to be applied with <code>OR</code> operator.</p></li>
    /// <li>
    /// <p>The inner list specifies conditions that need to be applied with <code>AND</code> operator.</p></li>
    /// </ul><note>
    /// <p>Only one field can be populated. This object can’t be used along with TagFilter. Request can either contain TagFilter or UserAttributeFilter if SearchFilter is specified, combination of both is not supported and such request will throw AccessDeniedException.</p>
    /// </note>
    pub fn user_attribute_filter(mut self, input: crate::types::ControlPlaneUserAttributeFilter) -> Self {
        self.user_attribute_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that can be used to specify Tag conditions or Hierarchy Group conditions inside the SearchFilter.</p>
    /// <p>This accepts an <code>OR</code> of <code>AND</code> (List of List) input where:</p>
    /// <ul>
    /// <li>
    /// <p>The top level list specifies conditions that need to be applied with <code>OR</code> operator.</p></li>
    /// <li>
    /// <p>The inner list specifies conditions that need to be applied with <code>AND</code> operator.</p></li>
    /// </ul><note>
    /// <p>Only one field can be populated. This object can’t be used along with TagFilter. Request can either contain TagFilter or UserAttributeFilter if SearchFilter is specified, combination of both is not supported and such request will throw AccessDeniedException.</p>
    /// </note>
    pub fn set_user_attribute_filter(mut self, input: ::std::option::Option<crate::types::ControlPlaneUserAttributeFilter>) -> Self {
        self.user_attribute_filter = input;
        self
    }
    /// <p>An object that can be used to specify Tag conditions or Hierarchy Group conditions inside the SearchFilter.</p>
    /// <p>This accepts an <code>OR</code> of <code>AND</code> (List of List) input where:</p>
    /// <ul>
    /// <li>
    /// <p>The top level list specifies conditions that need to be applied with <code>OR</code> operator.</p></li>
    /// <li>
    /// <p>The inner list specifies conditions that need to be applied with <code>AND</code> operator.</p></li>
    /// </ul><note>
    /// <p>Only one field can be populated. This object can’t be used along with TagFilter. Request can either contain TagFilter or UserAttributeFilter if SearchFilter is specified, combination of both is not supported and such request will throw AccessDeniedException.</p>
    /// </note>
    pub fn get_user_attribute_filter(&self) -> &::std::option::Option<crate::types::ControlPlaneUserAttributeFilter> {
        &self.user_attribute_filter
    }
    /// Consumes the builder and constructs a [`UserSearchFilter`](crate::types::UserSearchFilter).
    pub fn build(self) -> crate::types::UserSearchFilter {
        crate::types::UserSearchFilter {
            tag_filter: self.tag_filter,
            user_attribute_filter: self.user_attribute_filter,
        }
    }
}
