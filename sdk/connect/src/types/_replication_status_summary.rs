// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Status information about the replication process, where you use the <a href="https://docs.aws.amazon.com/connect/latest/APIReference/API_ReplicateInstance.html">ReplicateInstance</a> API to create a replica of your Amazon Connect instance in another Amazon Web Services Region. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/setup-connect-global-resiliency.html">Set up Amazon Connect Global Resiliency</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReplicationStatusSummary {
    /// <p>The Amazon Web Services Region. This can be either the source or the replica Region, depending where it appears in the summary list.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The state of the replication.</p>
    pub replication_status: ::std::option::Option<crate::types::InstanceReplicationStatus>,
    /// <p>A description of the replication status. Use this information to resolve any issues that are preventing the successful replication of your Amazon Connect instance to another Region.</p>
    pub replication_status_reason: ::std::option::Option<::std::string::String>,
}
impl ReplicationStatusSummary {
    /// <p>The Amazon Web Services Region. This can be either the source or the replica Region, depending where it appears in the summary list.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The state of the replication.</p>
    pub fn replication_status(&self) -> ::std::option::Option<&crate::types::InstanceReplicationStatus> {
        self.replication_status.as_ref()
    }
    /// <p>A description of the replication status. Use this information to resolve any issues that are preventing the successful replication of your Amazon Connect instance to another Region.</p>
    pub fn replication_status_reason(&self) -> ::std::option::Option<&str> {
        self.replication_status_reason.as_deref()
    }
}
impl ReplicationStatusSummary {
    /// Creates a new builder-style object to manufacture [`ReplicationStatusSummary`](crate::types::ReplicationStatusSummary).
    pub fn builder() -> crate::types::builders::ReplicationStatusSummaryBuilder {
        crate::types::builders::ReplicationStatusSummaryBuilder::default()
    }
}

/// A builder for [`ReplicationStatusSummary`](crate::types::ReplicationStatusSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ReplicationStatusSummaryBuilder {
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) replication_status: ::std::option::Option<crate::types::InstanceReplicationStatus>,
    pub(crate) replication_status_reason: ::std::option::Option<::std::string::String>,
}
impl ReplicationStatusSummaryBuilder {
    /// <p>The Amazon Web Services Region. This can be either the source or the replica Region, depending where it appears in the summary list.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region. This can be either the source or the replica Region, depending where it appears in the summary list.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Amazon Web Services Region. This can be either the source or the replica Region, depending where it appears in the summary list.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The state of the replication.</p>
    pub fn replication_status(mut self, input: crate::types::InstanceReplicationStatus) -> Self {
        self.replication_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the replication.</p>
    pub fn set_replication_status(mut self, input: ::std::option::Option<crate::types::InstanceReplicationStatus>) -> Self {
        self.replication_status = input;
        self
    }
    /// <p>The state of the replication.</p>
    pub fn get_replication_status(&self) -> &::std::option::Option<crate::types::InstanceReplicationStatus> {
        &self.replication_status
    }
    /// <p>A description of the replication status. Use this information to resolve any issues that are preventing the successful replication of your Amazon Connect instance to another Region.</p>
    pub fn replication_status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replication_status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the replication status. Use this information to resolve any issues that are preventing the successful replication of your Amazon Connect instance to another Region.</p>
    pub fn set_replication_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replication_status_reason = input;
        self
    }
    /// <p>A description of the replication status. Use this information to resolve any issues that are preventing the successful replication of your Amazon Connect instance to another Region.</p>
    pub fn get_replication_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.replication_status_reason
    }
    /// Consumes the builder and constructs a [`ReplicationStatusSummary`](crate::types::ReplicationStatusSummary).
    pub fn build(self) -> crate::types::ReplicationStatusSummary {
        crate::types::ReplicationStatusSummary {
            region: self.region,
            replication_status: self.replication_status,
            replication_status_reason: self.replication_status_reason,
        }
    }
}
