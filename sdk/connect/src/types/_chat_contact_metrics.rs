// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the overall participant interactions at the contact level.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ChatContactMetrics {
    /// <p>A boolean flag indicating whether multiparty chat or supervisor barge were enabled on this contact.</p>
    pub multi_party: ::std::option::Option<bool>,
    /// <p>The number of chat messages on the contact.</p>
    pub total_messages: ::std::option::Option<i32>,
    /// <p>The total number of bot and automated messages on a chat contact.</p>
    pub total_bot_messages: ::std::option::Option<i32>,
    /// <p>The total number of characters from bot and automated messages on a chat contact.</p>
    pub total_bot_message_length_in_chars: ::std::option::Option<i32>,
    /// <p>The time it took for a contact to end after the last customer message.</p>
    pub conversation_close_time_in_millis: ::std::option::Option<i64>,
    /// <p>The number of conversation turns in a chat contact, which represents the back-and-forth exchanges between customer and other participants.</p>
    pub conversation_turn_count: ::std::option::Option<i32>,
    /// <p>The agent first response timestamp for a chat contact.</p>
    pub agent_first_response_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time for an agent to respond after obtaining a chat contact.</p>
    pub agent_first_response_time_in_millis: ::std::option::Option<i64>,
}
impl ChatContactMetrics {
    /// <p>A boolean flag indicating whether multiparty chat or supervisor barge were enabled on this contact.</p>
    pub fn multi_party(&self) -> ::std::option::Option<bool> {
        self.multi_party
    }
    /// <p>The number of chat messages on the contact.</p>
    pub fn total_messages(&self) -> ::std::option::Option<i32> {
        self.total_messages
    }
    /// <p>The total number of bot and automated messages on a chat contact.</p>
    pub fn total_bot_messages(&self) -> ::std::option::Option<i32> {
        self.total_bot_messages
    }
    /// <p>The total number of characters from bot and automated messages on a chat contact.</p>
    pub fn total_bot_message_length_in_chars(&self) -> ::std::option::Option<i32> {
        self.total_bot_message_length_in_chars
    }
    /// <p>The time it took for a contact to end after the last customer message.</p>
    pub fn conversation_close_time_in_millis(&self) -> ::std::option::Option<i64> {
        self.conversation_close_time_in_millis
    }
    /// <p>The number of conversation turns in a chat contact, which represents the back-and-forth exchanges between customer and other participants.</p>
    pub fn conversation_turn_count(&self) -> ::std::option::Option<i32> {
        self.conversation_turn_count
    }
    /// <p>The agent first response timestamp for a chat contact.</p>
    pub fn agent_first_response_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.agent_first_response_timestamp.as_ref()
    }
    /// <p>The time for an agent to respond after obtaining a chat contact.</p>
    pub fn agent_first_response_time_in_millis(&self) -> ::std::option::Option<i64> {
        self.agent_first_response_time_in_millis
    }
}
impl ChatContactMetrics {
    /// Creates a new builder-style object to manufacture [`ChatContactMetrics`](crate::types::ChatContactMetrics).
    pub fn builder() -> crate::types::builders::ChatContactMetricsBuilder {
        crate::types::builders::ChatContactMetricsBuilder::default()
    }
}

/// A builder for [`ChatContactMetrics`](crate::types::ChatContactMetrics).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ChatContactMetricsBuilder {
    pub(crate) multi_party: ::std::option::Option<bool>,
    pub(crate) total_messages: ::std::option::Option<i32>,
    pub(crate) total_bot_messages: ::std::option::Option<i32>,
    pub(crate) total_bot_message_length_in_chars: ::std::option::Option<i32>,
    pub(crate) conversation_close_time_in_millis: ::std::option::Option<i64>,
    pub(crate) conversation_turn_count: ::std::option::Option<i32>,
    pub(crate) agent_first_response_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) agent_first_response_time_in_millis: ::std::option::Option<i64>,
}
impl ChatContactMetricsBuilder {
    /// <p>A boolean flag indicating whether multiparty chat or supervisor barge were enabled on this contact.</p>
    pub fn multi_party(mut self, input: bool) -> Self {
        self.multi_party = ::std::option::Option::Some(input);
        self
    }
    /// <p>A boolean flag indicating whether multiparty chat or supervisor barge were enabled on this contact.</p>
    pub fn set_multi_party(mut self, input: ::std::option::Option<bool>) -> Self {
        self.multi_party = input;
        self
    }
    /// <p>A boolean flag indicating whether multiparty chat or supervisor barge were enabled on this contact.</p>
    pub fn get_multi_party(&self) -> &::std::option::Option<bool> {
        &self.multi_party
    }
    /// <p>The number of chat messages on the contact.</p>
    pub fn total_messages(mut self, input: i32) -> Self {
        self.total_messages = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of chat messages on the contact.</p>
    pub fn set_total_messages(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_messages = input;
        self
    }
    /// <p>The number of chat messages on the contact.</p>
    pub fn get_total_messages(&self) -> &::std::option::Option<i32> {
        &self.total_messages
    }
    /// <p>The total number of bot and automated messages on a chat contact.</p>
    pub fn total_bot_messages(mut self, input: i32) -> Self {
        self.total_bot_messages = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of bot and automated messages on a chat contact.</p>
    pub fn set_total_bot_messages(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_bot_messages = input;
        self
    }
    /// <p>The total number of bot and automated messages on a chat contact.</p>
    pub fn get_total_bot_messages(&self) -> &::std::option::Option<i32> {
        &self.total_bot_messages
    }
    /// <p>The total number of characters from bot and automated messages on a chat contact.</p>
    pub fn total_bot_message_length_in_chars(mut self, input: i32) -> Self {
        self.total_bot_message_length_in_chars = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of characters from bot and automated messages on a chat contact.</p>
    pub fn set_total_bot_message_length_in_chars(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_bot_message_length_in_chars = input;
        self
    }
    /// <p>The total number of characters from bot and automated messages on a chat contact.</p>
    pub fn get_total_bot_message_length_in_chars(&self) -> &::std::option::Option<i32> {
        &self.total_bot_message_length_in_chars
    }
    /// <p>The time it took for a contact to end after the last customer message.</p>
    pub fn conversation_close_time_in_millis(mut self, input: i64) -> Self {
        self.conversation_close_time_in_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time it took for a contact to end after the last customer message.</p>
    pub fn set_conversation_close_time_in_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.conversation_close_time_in_millis = input;
        self
    }
    /// <p>The time it took for a contact to end after the last customer message.</p>
    pub fn get_conversation_close_time_in_millis(&self) -> &::std::option::Option<i64> {
        &self.conversation_close_time_in_millis
    }
    /// <p>The number of conversation turns in a chat contact, which represents the back-and-forth exchanges between customer and other participants.</p>
    pub fn conversation_turn_count(mut self, input: i32) -> Self {
        self.conversation_turn_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of conversation turns in a chat contact, which represents the back-and-forth exchanges between customer and other participants.</p>
    pub fn set_conversation_turn_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.conversation_turn_count = input;
        self
    }
    /// <p>The number of conversation turns in a chat contact, which represents the back-and-forth exchanges between customer and other participants.</p>
    pub fn get_conversation_turn_count(&self) -> &::std::option::Option<i32> {
        &self.conversation_turn_count
    }
    /// <p>The agent first response timestamp for a chat contact.</p>
    pub fn agent_first_response_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.agent_first_response_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The agent first response timestamp for a chat contact.</p>
    pub fn set_agent_first_response_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.agent_first_response_timestamp = input;
        self
    }
    /// <p>The agent first response timestamp for a chat contact.</p>
    pub fn get_agent_first_response_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.agent_first_response_timestamp
    }
    /// <p>The time for an agent to respond after obtaining a chat contact.</p>
    pub fn agent_first_response_time_in_millis(mut self, input: i64) -> Self {
        self.agent_first_response_time_in_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time for an agent to respond after obtaining a chat contact.</p>
    pub fn set_agent_first_response_time_in_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.agent_first_response_time_in_millis = input;
        self
    }
    /// <p>The time for an agent to respond after obtaining a chat contact.</p>
    pub fn get_agent_first_response_time_in_millis(&self) -> &::std::option::Option<i64> {
        &self.agent_first_response_time_in_millis
    }
    /// Consumes the builder and constructs a [`ChatContactMetrics`](crate::types::ChatContactMetrics).
    pub fn build(self) -> crate::types::ChatContactMetrics {
        crate::types::ChatContactMetrics {
            multi_party: self.multi_party,
            total_messages: self.total_messages,
            total_bot_messages: self.total_bot_messages,
            total_bot_message_length_in_chars: self.total_bot_message_length_in_chars,
            conversation_close_time_in_millis: self.conversation_close_time_in_millis,
            conversation_turn_count: self.conversation_turn_count,
            agent_first_response_timestamp: self.agent_first_response_timestamp,
            agent_first_response_time_in_millis: self.agent_first_response_time_in_millis,
        }
    }
}
