// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object to define the RoutingCriteria.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RoutingCriteriaInput {
    /// <p>When Amazon Connect does not find an available agent meeting the requirements in a step for  a given step duration, the routing criteria will move on to the next step sequentially until a  join is completed with an agent. When all steps are exhausted, the contact will be offered to any agent in the queue.</p>
    pub steps: ::std::option::Option<::std::vec::Vec<crate::types::RoutingCriteriaInputStep>>,
}
impl RoutingCriteriaInput {
    /// <p>When Amazon Connect does not find an available agent meeting the requirements in a step for  a given step duration, the routing criteria will move on to the next step sequentially until a  join is completed with an agent. When all steps are exhausted, the contact will be offered to any agent in the queue.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.steps.is_none()`.
    pub fn steps(&self) -> &[crate::types::RoutingCriteriaInputStep] {
        self.steps.as_deref().unwrap_or_default()
    }
}
impl RoutingCriteriaInput {
    /// Creates a new builder-style object to manufacture [`RoutingCriteriaInput`](crate::types::RoutingCriteriaInput).
    pub fn builder() -> crate::types::builders::RoutingCriteriaInputBuilder {
        crate::types::builders::RoutingCriteriaInputBuilder::default()
    }
}

/// A builder for [`RoutingCriteriaInput`](crate::types::RoutingCriteriaInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RoutingCriteriaInputBuilder {
    pub(crate) steps: ::std::option::Option<::std::vec::Vec<crate::types::RoutingCriteriaInputStep>>,
}
impl RoutingCriteriaInputBuilder {
    /// Appends an item to `steps`.
    ///
    /// To override the contents of this collection use [`set_steps`](Self::set_steps).
    ///
    /// <p>When Amazon Connect does not find an available agent meeting the requirements in a step for  a given step duration, the routing criteria will move on to the next step sequentially until a  join is completed with an agent. When all steps are exhausted, the contact will be offered to any agent in the queue.</p>
    pub fn steps(mut self, input: crate::types::RoutingCriteriaInputStep) -> Self {
        let mut v = self.steps.unwrap_or_default();
        v.push(input);
        self.steps = ::std::option::Option::Some(v);
        self
    }
    /// <p>When Amazon Connect does not find an available agent meeting the requirements in a step for  a given step duration, the routing criteria will move on to the next step sequentially until a  join is completed with an agent. When all steps are exhausted, the contact will be offered to any agent in the queue.</p>
    pub fn set_steps(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RoutingCriteriaInputStep>>) -> Self {
        self.steps = input;
        self
    }
    /// <p>When Amazon Connect does not find an available agent meeting the requirements in a step for  a given step duration, the routing criteria will move on to the next step sequentially until a  join is completed with an agent. When all steps are exhausted, the contact will be offered to any agent in the queue.</p>
    pub fn get_steps(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RoutingCriteriaInputStep>> {
        &self.steps
    }
    /// Consumes the builder and constructs a [`RoutingCriteriaInput`](crate::types::RoutingCriteriaInput).
    pub fn build(self) -> crate::types::RoutingCriteriaInput {
        crate::types::RoutingCriteriaInput { steps: self.steps }
    }
}
