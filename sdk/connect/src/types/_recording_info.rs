// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a voice recording, chat transcript, or screen recording.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecordingInfo {
    /// <p>Where the recording/transcript is stored.</p>
    pub storage_type: ::std::option::Option<crate::types::StorageType>,
    /// <p>The location, in Amazon S3, for the recording/transcript.</p>
    pub location: ::std::option::Option<::std::string::String>,
    /// <p>Information about the media stream used during the conversation.</p>
    pub media_stream_type: ::std::option::Option<crate::types::MediaStreamType>,
    /// <p>Information about the conversation participant, whether they are an agent or contact. The participant types are as follows:</p>
    /// <ul>
    /// <li>
    /// <p>All</p></li>
    /// <li>
    /// <p>Manager</p></li>
    /// <li>
    /// <p>Agent</p></li>
    /// <li>
    /// <p>Customer</p></li>
    /// <li>
    /// <p>Thirdparty</p></li>
    /// <li>
    /// <p>Supervisor</p></li>
    /// </ul>
    pub participant_type: ::std::option::Option<crate::types::ParticipantType>,
    /// <p>The number that identifies the Kinesis Video Streams fragment where the customer audio stream started.</p>
    pub fragment_start_number: ::std::option::Option<::std::string::String>,
    /// <p>The number that identifies the Kinesis Video Streams fragment where the customer audio stream stopped.</p>
    pub fragment_stop_number: ::std::option::Option<::std::string::String>,
    /// <p>When the conversation of the last leg of the recording started in UTC time.</p>
    pub start_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>When the conversation of the last leg of recording stopped in UTC time.</p>
    pub stop_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The status of the recording/transcript.</p>
    pub status: ::std::option::Option<crate::types::RecordingStatus>,
    /// <p>If the recording/transcript was deleted, this is the reason entered for the deletion.</p>
    pub deletion_reason: ::std::option::Option<::std::string::String>,
}
impl RecordingInfo {
    /// <p>Where the recording/transcript is stored.</p>
    pub fn storage_type(&self) -> ::std::option::Option<&crate::types::StorageType> {
        self.storage_type.as_ref()
    }
    /// <p>The location, in Amazon S3, for the recording/transcript.</p>
    pub fn location(&self) -> ::std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>Information about the media stream used during the conversation.</p>
    pub fn media_stream_type(&self) -> ::std::option::Option<&crate::types::MediaStreamType> {
        self.media_stream_type.as_ref()
    }
    /// <p>Information about the conversation participant, whether they are an agent or contact. The participant types are as follows:</p>
    /// <ul>
    /// <li>
    /// <p>All</p></li>
    /// <li>
    /// <p>Manager</p></li>
    /// <li>
    /// <p>Agent</p></li>
    /// <li>
    /// <p>Customer</p></li>
    /// <li>
    /// <p>Thirdparty</p></li>
    /// <li>
    /// <p>Supervisor</p></li>
    /// </ul>
    pub fn participant_type(&self) -> ::std::option::Option<&crate::types::ParticipantType> {
        self.participant_type.as_ref()
    }
    /// <p>The number that identifies the Kinesis Video Streams fragment where the customer audio stream started.</p>
    pub fn fragment_start_number(&self) -> ::std::option::Option<&str> {
        self.fragment_start_number.as_deref()
    }
    /// <p>The number that identifies the Kinesis Video Streams fragment where the customer audio stream stopped.</p>
    pub fn fragment_stop_number(&self) -> ::std::option::Option<&str> {
        self.fragment_stop_number.as_deref()
    }
    /// <p>When the conversation of the last leg of the recording started in UTC time.</p>
    pub fn start_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_timestamp.as_ref()
    }
    /// <p>When the conversation of the last leg of recording stopped in UTC time.</p>
    pub fn stop_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.stop_timestamp.as_ref()
    }
    /// <p>The status of the recording/transcript.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::RecordingStatus> {
        self.status.as_ref()
    }
    /// <p>If the recording/transcript was deleted, this is the reason entered for the deletion.</p>
    pub fn deletion_reason(&self) -> ::std::option::Option<&str> {
        self.deletion_reason.as_deref()
    }
}
impl RecordingInfo {
    /// Creates a new builder-style object to manufacture [`RecordingInfo`](crate::types::RecordingInfo).
    pub fn builder() -> crate::types::builders::RecordingInfoBuilder {
        crate::types::builders::RecordingInfoBuilder::default()
    }
}

/// A builder for [`RecordingInfo`](crate::types::RecordingInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RecordingInfoBuilder {
    pub(crate) storage_type: ::std::option::Option<crate::types::StorageType>,
    pub(crate) location: ::std::option::Option<::std::string::String>,
    pub(crate) media_stream_type: ::std::option::Option<crate::types::MediaStreamType>,
    pub(crate) participant_type: ::std::option::Option<crate::types::ParticipantType>,
    pub(crate) fragment_start_number: ::std::option::Option<::std::string::String>,
    pub(crate) fragment_stop_number: ::std::option::Option<::std::string::String>,
    pub(crate) start_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) stop_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::RecordingStatus>,
    pub(crate) deletion_reason: ::std::option::Option<::std::string::String>,
}
impl RecordingInfoBuilder {
    /// <p>Where the recording/transcript is stored.</p>
    pub fn storage_type(mut self, input: crate::types::StorageType) -> Self {
        self.storage_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Where the recording/transcript is stored.</p>
    pub fn set_storage_type(mut self, input: ::std::option::Option<crate::types::StorageType>) -> Self {
        self.storage_type = input;
        self
    }
    /// <p>Where the recording/transcript is stored.</p>
    pub fn get_storage_type(&self) -> &::std::option::Option<crate::types::StorageType> {
        &self.storage_type
    }
    /// <p>The location, in Amazon S3, for the recording/transcript.</p>
    pub fn location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The location, in Amazon S3, for the recording/transcript.</p>
    pub fn set_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>The location, in Amazon S3, for the recording/transcript.</p>
    pub fn get_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.location
    }
    /// <p>Information about the media stream used during the conversation.</p>
    pub fn media_stream_type(mut self, input: crate::types::MediaStreamType) -> Self {
        self.media_stream_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the media stream used during the conversation.</p>
    pub fn set_media_stream_type(mut self, input: ::std::option::Option<crate::types::MediaStreamType>) -> Self {
        self.media_stream_type = input;
        self
    }
    /// <p>Information about the media stream used during the conversation.</p>
    pub fn get_media_stream_type(&self) -> &::std::option::Option<crate::types::MediaStreamType> {
        &self.media_stream_type
    }
    /// <p>Information about the conversation participant, whether they are an agent or contact. The participant types are as follows:</p>
    /// <ul>
    /// <li>
    /// <p>All</p></li>
    /// <li>
    /// <p>Manager</p></li>
    /// <li>
    /// <p>Agent</p></li>
    /// <li>
    /// <p>Customer</p></li>
    /// <li>
    /// <p>Thirdparty</p></li>
    /// <li>
    /// <p>Supervisor</p></li>
    /// </ul>
    pub fn participant_type(mut self, input: crate::types::ParticipantType) -> Self {
        self.participant_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the conversation participant, whether they are an agent or contact. The participant types are as follows:</p>
    /// <ul>
    /// <li>
    /// <p>All</p></li>
    /// <li>
    /// <p>Manager</p></li>
    /// <li>
    /// <p>Agent</p></li>
    /// <li>
    /// <p>Customer</p></li>
    /// <li>
    /// <p>Thirdparty</p></li>
    /// <li>
    /// <p>Supervisor</p></li>
    /// </ul>
    pub fn set_participant_type(mut self, input: ::std::option::Option<crate::types::ParticipantType>) -> Self {
        self.participant_type = input;
        self
    }
    /// <p>Information about the conversation participant, whether they are an agent or contact. The participant types are as follows:</p>
    /// <ul>
    /// <li>
    /// <p>All</p></li>
    /// <li>
    /// <p>Manager</p></li>
    /// <li>
    /// <p>Agent</p></li>
    /// <li>
    /// <p>Customer</p></li>
    /// <li>
    /// <p>Thirdparty</p></li>
    /// <li>
    /// <p>Supervisor</p></li>
    /// </ul>
    pub fn get_participant_type(&self) -> &::std::option::Option<crate::types::ParticipantType> {
        &self.participant_type
    }
    /// <p>The number that identifies the Kinesis Video Streams fragment where the customer audio stream started.</p>
    pub fn fragment_start_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fragment_start_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The number that identifies the Kinesis Video Streams fragment where the customer audio stream started.</p>
    pub fn set_fragment_start_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fragment_start_number = input;
        self
    }
    /// <p>The number that identifies the Kinesis Video Streams fragment where the customer audio stream started.</p>
    pub fn get_fragment_start_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.fragment_start_number
    }
    /// <p>The number that identifies the Kinesis Video Streams fragment where the customer audio stream stopped.</p>
    pub fn fragment_stop_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fragment_stop_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The number that identifies the Kinesis Video Streams fragment where the customer audio stream stopped.</p>
    pub fn set_fragment_stop_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fragment_stop_number = input;
        self
    }
    /// <p>The number that identifies the Kinesis Video Streams fragment where the customer audio stream stopped.</p>
    pub fn get_fragment_stop_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.fragment_stop_number
    }
    /// <p>When the conversation of the last leg of the recording started in UTC time.</p>
    pub fn start_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the conversation of the last leg of the recording started in UTC time.</p>
    pub fn set_start_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_timestamp = input;
        self
    }
    /// <p>When the conversation of the last leg of the recording started in UTC time.</p>
    pub fn get_start_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_timestamp
    }
    /// <p>When the conversation of the last leg of recording stopped in UTC time.</p>
    pub fn stop_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.stop_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the conversation of the last leg of recording stopped in UTC time.</p>
    pub fn set_stop_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.stop_timestamp = input;
        self
    }
    /// <p>When the conversation of the last leg of recording stopped in UTC time.</p>
    pub fn get_stop_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.stop_timestamp
    }
    /// <p>The status of the recording/transcript.</p>
    pub fn status(mut self, input: crate::types::RecordingStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the recording/transcript.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::RecordingStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the recording/transcript.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::RecordingStatus> {
        &self.status
    }
    /// <p>If the recording/transcript was deleted, this is the reason entered for the deletion.</p>
    pub fn deletion_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.deletion_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the recording/transcript was deleted, this is the reason entered for the deletion.</p>
    pub fn set_deletion_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.deletion_reason = input;
        self
    }
    /// <p>If the recording/transcript was deleted, this is the reason entered for the deletion.</p>
    pub fn get_deletion_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.deletion_reason
    }
    /// Consumes the builder and constructs a [`RecordingInfo`](crate::types::RecordingInfo).
    pub fn build(self) -> crate::types::RecordingInfo {
        crate::types::RecordingInfo {
            storage_type: self.storage_type,
            location: self.location,
            media_stream_type: self.media_stream_type,
            participant_type: self.participant_type,
            fragment_start_number: self.fragment_start_number,
            fragment_stop_number: self.fragment_stop_number,
            start_timestamp: self.start_timestamp,
            stop_timestamp: self.stop_timestamp,
            status: self.status,
            deletion_reason: self.deletion_reason,
        }
    }
}
