// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Error describing a failure to retrieve attached file metadata through BatchGetAttachedFileMetadata action.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AttachedFileError {
    /// <p>Status code describing the failure.</p>
    pub error_code: ::std::option::Option<::std::string::String>,
    /// <p>Why the attached file couldn't be retrieved.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the attached file resource.</p>
    pub file_id: ::std::option::Option<::std::string::String>,
}
impl AttachedFileError {
    /// <p>Status code describing the failure.</p>
    pub fn error_code(&self) -> ::std::option::Option<&str> {
        self.error_code.as_deref()
    }
    /// <p>Why the attached file couldn't be retrieved.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>The unique identifier of the attached file resource.</p>
    pub fn file_id(&self) -> ::std::option::Option<&str> {
        self.file_id.as_deref()
    }
}
impl AttachedFileError {
    /// Creates a new builder-style object to manufacture [`AttachedFileError`](crate::types::AttachedFileError).
    pub fn builder() -> crate::types::builders::AttachedFileErrorBuilder {
        crate::types::builders::AttachedFileErrorBuilder::default()
    }
}

/// A builder for [`AttachedFileError`](crate::types::AttachedFileError).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AttachedFileErrorBuilder {
    pub(crate) error_code: ::std::option::Option<::std::string::String>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
    pub(crate) file_id: ::std::option::Option<::std::string::String>,
}
impl AttachedFileErrorBuilder {
    /// <p>Status code describing the failure.</p>
    pub fn error_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Status code describing the failure.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>Status code describing the failure.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_code
    }
    /// <p>Why the attached file couldn't be retrieved.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Why the attached file couldn't be retrieved.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>Why the attached file couldn't be retrieved.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// <p>The unique identifier of the attached file resource.</p>
    pub fn file_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the attached file resource.</p>
    pub fn set_file_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_id = input;
        self
    }
    /// <p>The unique identifier of the attached file resource.</p>
    pub fn get_file_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_id
    }
    /// Consumes the builder and constructs a [`AttachedFileError`](crate::types::AttachedFileError).
    pub fn build(self) -> crate::types::AttachedFileError {
        crate::types::AttachedFileError {
            error_code: self.error_code,
            error_message: self.error_message,
            file_id: self.file_id,
        }
    }
}
