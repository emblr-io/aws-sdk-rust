// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information regarding the device.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeviceInfo {
    /// <p>Name of the platform that the participant used for the call.</p>
    pub platform_name: ::std::option::Option<::std::string::String>,
    /// <p>Version of the platform that the participant used for the call.</p>
    pub platform_version: ::std::option::Option<::std::string::String>,
    /// <p>Operating system that the participant used for the call.</p>
    pub operating_system: ::std::option::Option<::std::string::String>,
}
impl DeviceInfo {
    /// <p>Name of the platform that the participant used for the call.</p>
    pub fn platform_name(&self) -> ::std::option::Option<&str> {
        self.platform_name.as_deref()
    }
    /// <p>Version of the platform that the participant used for the call.</p>
    pub fn platform_version(&self) -> ::std::option::Option<&str> {
        self.platform_version.as_deref()
    }
    /// <p>Operating system that the participant used for the call.</p>
    pub fn operating_system(&self) -> ::std::option::Option<&str> {
        self.operating_system.as_deref()
    }
}
impl DeviceInfo {
    /// Creates a new builder-style object to manufacture [`DeviceInfo`](crate::types::DeviceInfo).
    pub fn builder() -> crate::types::builders::DeviceInfoBuilder {
        crate::types::builders::DeviceInfoBuilder::default()
    }
}

/// A builder for [`DeviceInfo`](crate::types::DeviceInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeviceInfoBuilder {
    pub(crate) platform_name: ::std::option::Option<::std::string::String>,
    pub(crate) platform_version: ::std::option::Option<::std::string::String>,
    pub(crate) operating_system: ::std::option::Option<::std::string::String>,
}
impl DeviceInfoBuilder {
    /// <p>Name of the platform that the participant used for the call.</p>
    pub fn platform_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.platform_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the platform that the participant used for the call.</p>
    pub fn set_platform_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.platform_name = input;
        self
    }
    /// <p>Name of the platform that the participant used for the call.</p>
    pub fn get_platform_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.platform_name
    }
    /// <p>Version of the platform that the participant used for the call.</p>
    pub fn platform_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.platform_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Version of the platform that the participant used for the call.</p>
    pub fn set_platform_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.platform_version = input;
        self
    }
    /// <p>Version of the platform that the participant used for the call.</p>
    pub fn get_platform_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.platform_version
    }
    /// <p>Operating system that the participant used for the call.</p>
    pub fn operating_system(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operating_system = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Operating system that the participant used for the call.</p>
    pub fn set_operating_system(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operating_system = input;
        self
    }
    /// <p>Operating system that the participant used for the call.</p>
    pub fn get_operating_system(&self) -> &::std::option::Option<::std::string::String> {
        &self.operating_system
    }
    /// Consumes the builder and constructs a [`DeviceInfo`](crate::types::DeviceInfo).
    pub fn build(self) -> crate::types::DeviceInfo {
        crate::types::DeviceInfo {
            platform_name: self.platform_name,
            platform_version: self.platform_version,
            operating_system: self.operating_system,
        }
    }
}
