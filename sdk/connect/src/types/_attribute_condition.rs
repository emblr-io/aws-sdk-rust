// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object to specify the predefined attribute condition.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AttributeCondition {
    /// <p>The name of predefined attribute.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The value of predefined attribute.</p>
    pub value: ::std::option::Option<::std::string::String>,
    /// <p>The proficiency level of the condition.</p>
    pub proficiency_level: ::std::option::Option<f32>,
    /// <p>An Object to define the minimum and maximum proficiency levels.</p>
    pub range: ::std::option::Option<crate::types::Range>,
    /// <p>An object to define <code>AgentsCriteria</code>.</p>
    pub match_criteria: ::std::option::Option<crate::types::MatchCriteria>,
    /// <p>The operator of the condition.</p>
    pub comparison_operator: ::std::option::Option<::std::string::String>,
}
impl AttributeCondition {
    /// <p>The name of predefined attribute.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The value of predefined attribute.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The proficiency level of the condition.</p>
    pub fn proficiency_level(&self) -> ::std::option::Option<f32> {
        self.proficiency_level
    }
    /// <p>An Object to define the minimum and maximum proficiency levels.</p>
    pub fn range(&self) -> ::std::option::Option<&crate::types::Range> {
        self.range.as_ref()
    }
    /// <p>An object to define <code>AgentsCriteria</code>.</p>
    pub fn match_criteria(&self) -> ::std::option::Option<&crate::types::MatchCriteria> {
        self.match_criteria.as_ref()
    }
    /// <p>The operator of the condition.</p>
    pub fn comparison_operator(&self) -> ::std::option::Option<&str> {
        self.comparison_operator.as_deref()
    }
}
impl AttributeCondition {
    /// Creates a new builder-style object to manufacture [`AttributeCondition`](crate::types::AttributeCondition).
    pub fn builder() -> crate::types::builders::AttributeConditionBuilder {
        crate::types::builders::AttributeConditionBuilder::default()
    }
}

/// A builder for [`AttributeCondition`](crate::types::AttributeCondition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AttributeConditionBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) proficiency_level: ::std::option::Option<f32>,
    pub(crate) range: ::std::option::Option<crate::types::Range>,
    pub(crate) match_criteria: ::std::option::Option<crate::types::MatchCriteria>,
    pub(crate) comparison_operator: ::std::option::Option<::std::string::String>,
}
impl AttributeConditionBuilder {
    /// <p>The name of predefined attribute.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of predefined attribute.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of predefined attribute.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The value of predefined attribute.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of predefined attribute.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of predefined attribute.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// <p>The proficiency level of the condition.</p>
    pub fn proficiency_level(mut self, input: f32) -> Self {
        self.proficiency_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The proficiency level of the condition.</p>
    pub fn set_proficiency_level(mut self, input: ::std::option::Option<f32>) -> Self {
        self.proficiency_level = input;
        self
    }
    /// <p>The proficiency level of the condition.</p>
    pub fn get_proficiency_level(&self) -> &::std::option::Option<f32> {
        &self.proficiency_level
    }
    /// <p>An Object to define the minimum and maximum proficiency levels.</p>
    pub fn range(mut self, input: crate::types::Range) -> Self {
        self.range = ::std::option::Option::Some(input);
        self
    }
    /// <p>An Object to define the minimum and maximum proficiency levels.</p>
    pub fn set_range(mut self, input: ::std::option::Option<crate::types::Range>) -> Self {
        self.range = input;
        self
    }
    /// <p>An Object to define the minimum and maximum proficiency levels.</p>
    pub fn get_range(&self) -> &::std::option::Option<crate::types::Range> {
        &self.range
    }
    /// <p>An object to define <code>AgentsCriteria</code>.</p>
    pub fn match_criteria(mut self, input: crate::types::MatchCriteria) -> Self {
        self.match_criteria = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object to define <code>AgentsCriteria</code>.</p>
    pub fn set_match_criteria(mut self, input: ::std::option::Option<crate::types::MatchCriteria>) -> Self {
        self.match_criteria = input;
        self
    }
    /// <p>An object to define <code>AgentsCriteria</code>.</p>
    pub fn get_match_criteria(&self) -> &::std::option::Option<crate::types::MatchCriteria> {
        &self.match_criteria
    }
    /// <p>The operator of the condition.</p>
    pub fn comparison_operator(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.comparison_operator = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The operator of the condition.</p>
    pub fn set_comparison_operator(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.comparison_operator = input;
        self
    }
    /// <p>The operator of the condition.</p>
    pub fn get_comparison_operator(&self) -> &::std::option::Option<::std::string::String> {
        &self.comparison_operator
    }
    /// Consumes the builder and constructs a [`AttributeCondition`](crate::types::AttributeCondition).
    pub fn build(self) -> crate::types::AttributeCondition {
        crate::types::AttributeCondition {
            name: self.name,
            value: self.value,
            proficiency_level: self.proficiency_level,
            range: self.range,
            match_criteria: self.match_criteria,
            comparison_operator: self.comparison_operator,
        }
    }
}
