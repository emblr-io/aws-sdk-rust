// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a participant's interactions in a contact.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParticipantMetrics {
    /// <p>The Participant's ID.</p>
    pub participant_id: ::std::option::Option<::std::string::String>,
    /// <p>Information about the conversation participant. Following are the participant types: \[Agent, Customer, Supervisor\].</p>
    pub participant_type: ::std::option::Option<crate::types::ParticipantType>,
    /// <p>A boolean flag indicating whether the chat conversation was abandoned by a Participant.</p>
    pub conversation_abandon: ::std::option::Option<bool>,
    /// <p>Number of chat messages sent by Participant.</p>
    pub messages_sent: ::std::option::Option<i32>,
    /// <p>Number of chat messages sent by Participant.</p>
    pub num_responses: ::std::option::Option<i32>,
    /// <p>Number of chat characters sent by Participant.</p>
    pub message_length_in_chars: ::std::option::Option<i32>,
    /// <p>Total chat response time by Participant.</p>
    pub total_response_time_in_millis: ::std::option::Option<i64>,
    /// <p>Maximum chat response time by Participant.</p>
    pub max_response_time_in_millis: ::std::option::Option<i64>,
    /// <p>Timestamp of last chat message by Participant.</p>
    pub last_message_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ParticipantMetrics {
    /// <p>The Participant's ID.</p>
    pub fn participant_id(&self) -> ::std::option::Option<&str> {
        self.participant_id.as_deref()
    }
    /// <p>Information about the conversation participant. Following are the participant types: \[Agent, Customer, Supervisor\].</p>
    pub fn participant_type(&self) -> ::std::option::Option<&crate::types::ParticipantType> {
        self.participant_type.as_ref()
    }
    /// <p>A boolean flag indicating whether the chat conversation was abandoned by a Participant.</p>
    pub fn conversation_abandon(&self) -> ::std::option::Option<bool> {
        self.conversation_abandon
    }
    /// <p>Number of chat messages sent by Participant.</p>
    pub fn messages_sent(&self) -> ::std::option::Option<i32> {
        self.messages_sent
    }
    /// <p>Number of chat messages sent by Participant.</p>
    pub fn num_responses(&self) -> ::std::option::Option<i32> {
        self.num_responses
    }
    /// <p>Number of chat characters sent by Participant.</p>
    pub fn message_length_in_chars(&self) -> ::std::option::Option<i32> {
        self.message_length_in_chars
    }
    /// <p>Total chat response time by Participant.</p>
    pub fn total_response_time_in_millis(&self) -> ::std::option::Option<i64> {
        self.total_response_time_in_millis
    }
    /// <p>Maximum chat response time by Participant.</p>
    pub fn max_response_time_in_millis(&self) -> ::std::option::Option<i64> {
        self.max_response_time_in_millis
    }
    /// <p>Timestamp of last chat message by Participant.</p>
    pub fn last_message_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_message_timestamp.as_ref()
    }
}
impl ParticipantMetrics {
    /// Creates a new builder-style object to manufacture [`ParticipantMetrics`](crate::types::ParticipantMetrics).
    pub fn builder() -> crate::types::builders::ParticipantMetricsBuilder {
        crate::types::builders::ParticipantMetricsBuilder::default()
    }
}

/// A builder for [`ParticipantMetrics`](crate::types::ParticipantMetrics).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ParticipantMetricsBuilder {
    pub(crate) participant_id: ::std::option::Option<::std::string::String>,
    pub(crate) participant_type: ::std::option::Option<crate::types::ParticipantType>,
    pub(crate) conversation_abandon: ::std::option::Option<bool>,
    pub(crate) messages_sent: ::std::option::Option<i32>,
    pub(crate) num_responses: ::std::option::Option<i32>,
    pub(crate) message_length_in_chars: ::std::option::Option<i32>,
    pub(crate) total_response_time_in_millis: ::std::option::Option<i64>,
    pub(crate) max_response_time_in_millis: ::std::option::Option<i64>,
    pub(crate) last_message_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ParticipantMetricsBuilder {
    /// <p>The Participant's ID.</p>
    pub fn participant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.participant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Participant's ID.</p>
    pub fn set_participant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.participant_id = input;
        self
    }
    /// <p>The Participant's ID.</p>
    pub fn get_participant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.participant_id
    }
    /// <p>Information about the conversation participant. Following are the participant types: \[Agent, Customer, Supervisor\].</p>
    pub fn participant_type(mut self, input: crate::types::ParticipantType) -> Self {
        self.participant_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the conversation participant. Following are the participant types: \[Agent, Customer, Supervisor\].</p>
    pub fn set_participant_type(mut self, input: ::std::option::Option<crate::types::ParticipantType>) -> Self {
        self.participant_type = input;
        self
    }
    /// <p>Information about the conversation participant. Following are the participant types: \[Agent, Customer, Supervisor\].</p>
    pub fn get_participant_type(&self) -> &::std::option::Option<crate::types::ParticipantType> {
        &self.participant_type
    }
    /// <p>A boolean flag indicating whether the chat conversation was abandoned by a Participant.</p>
    pub fn conversation_abandon(mut self, input: bool) -> Self {
        self.conversation_abandon = ::std::option::Option::Some(input);
        self
    }
    /// <p>A boolean flag indicating whether the chat conversation was abandoned by a Participant.</p>
    pub fn set_conversation_abandon(mut self, input: ::std::option::Option<bool>) -> Self {
        self.conversation_abandon = input;
        self
    }
    /// <p>A boolean flag indicating whether the chat conversation was abandoned by a Participant.</p>
    pub fn get_conversation_abandon(&self) -> &::std::option::Option<bool> {
        &self.conversation_abandon
    }
    /// <p>Number of chat messages sent by Participant.</p>
    pub fn messages_sent(mut self, input: i32) -> Self {
        self.messages_sent = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of chat messages sent by Participant.</p>
    pub fn set_messages_sent(mut self, input: ::std::option::Option<i32>) -> Self {
        self.messages_sent = input;
        self
    }
    /// <p>Number of chat messages sent by Participant.</p>
    pub fn get_messages_sent(&self) -> &::std::option::Option<i32> {
        &self.messages_sent
    }
    /// <p>Number of chat messages sent by Participant.</p>
    pub fn num_responses(mut self, input: i32) -> Self {
        self.num_responses = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of chat messages sent by Participant.</p>
    pub fn set_num_responses(mut self, input: ::std::option::Option<i32>) -> Self {
        self.num_responses = input;
        self
    }
    /// <p>Number of chat messages sent by Participant.</p>
    pub fn get_num_responses(&self) -> &::std::option::Option<i32> {
        &self.num_responses
    }
    /// <p>Number of chat characters sent by Participant.</p>
    pub fn message_length_in_chars(mut self, input: i32) -> Self {
        self.message_length_in_chars = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of chat characters sent by Participant.</p>
    pub fn set_message_length_in_chars(mut self, input: ::std::option::Option<i32>) -> Self {
        self.message_length_in_chars = input;
        self
    }
    /// <p>Number of chat characters sent by Participant.</p>
    pub fn get_message_length_in_chars(&self) -> &::std::option::Option<i32> {
        &self.message_length_in_chars
    }
    /// <p>Total chat response time by Participant.</p>
    pub fn total_response_time_in_millis(mut self, input: i64) -> Self {
        self.total_response_time_in_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>Total chat response time by Participant.</p>
    pub fn set_total_response_time_in_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.total_response_time_in_millis = input;
        self
    }
    /// <p>Total chat response time by Participant.</p>
    pub fn get_total_response_time_in_millis(&self) -> &::std::option::Option<i64> {
        &self.total_response_time_in_millis
    }
    /// <p>Maximum chat response time by Participant.</p>
    pub fn max_response_time_in_millis(mut self, input: i64) -> Self {
        self.max_response_time_in_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maximum chat response time by Participant.</p>
    pub fn set_max_response_time_in_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.max_response_time_in_millis = input;
        self
    }
    /// <p>Maximum chat response time by Participant.</p>
    pub fn get_max_response_time_in_millis(&self) -> &::std::option::Option<i64> {
        &self.max_response_time_in_millis
    }
    /// <p>Timestamp of last chat message by Participant.</p>
    pub fn last_message_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_message_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp of last chat message by Participant.</p>
    pub fn set_last_message_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_message_timestamp = input;
        self
    }
    /// <p>Timestamp of last chat message by Participant.</p>
    pub fn get_last_message_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_message_timestamp
    }
    /// Consumes the builder and constructs a [`ParticipantMetrics`](crate::types::ParticipantMetrics).
    pub fn build(self) -> crate::types::ParticipantMetrics {
        crate::types::ParticipantMetrics {
            participant_id: self.participant_id,
            participant_type: self.participant_type,
            conversation_abandon: self.conversation_abandon,
            messages_sent: self.messages_sent,
            num_responses: self.num_responses,
            message_length_in_chars: self.message_length_in_chars,
            total_response_time_in_millis: self.total_response_time_in_millis,
            max_response_time_in_millis: self.max_response_time_in_millis,
            last_message_timestamp: self.last_message_timestamp,
        }
    }
}
