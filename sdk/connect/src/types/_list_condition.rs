// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A leaf node condition which can be used to specify a List condition to search users with attributes included in Lists like Proficiencies.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListCondition {
    /// <p>The type of target list that will be used to filter the users.</p>
    pub target_list_type: ::std::option::Option<crate::types::TargetListType>,
    /// <p>A list of Condition objects which would be applied together with an AND condition.</p>
    pub conditions: ::std::option::Option<::std::vec::Vec<crate::types::Condition>>,
}
impl ListCondition {
    /// <p>The type of target list that will be used to filter the users.</p>
    pub fn target_list_type(&self) -> ::std::option::Option<&crate::types::TargetListType> {
        self.target_list_type.as_ref()
    }
    /// <p>A list of Condition objects which would be applied together with an AND condition.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.conditions.is_none()`.
    pub fn conditions(&self) -> &[crate::types::Condition] {
        self.conditions.as_deref().unwrap_or_default()
    }
}
impl ListCondition {
    /// Creates a new builder-style object to manufacture [`ListCondition`](crate::types::ListCondition).
    pub fn builder() -> crate::types::builders::ListConditionBuilder {
        crate::types::builders::ListConditionBuilder::default()
    }
}

/// A builder for [`ListCondition`](crate::types::ListCondition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListConditionBuilder {
    pub(crate) target_list_type: ::std::option::Option<crate::types::TargetListType>,
    pub(crate) conditions: ::std::option::Option<::std::vec::Vec<crate::types::Condition>>,
}
impl ListConditionBuilder {
    /// <p>The type of target list that will be used to filter the users.</p>
    pub fn target_list_type(mut self, input: crate::types::TargetListType) -> Self {
        self.target_list_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of target list that will be used to filter the users.</p>
    pub fn set_target_list_type(mut self, input: ::std::option::Option<crate::types::TargetListType>) -> Self {
        self.target_list_type = input;
        self
    }
    /// <p>The type of target list that will be used to filter the users.</p>
    pub fn get_target_list_type(&self) -> &::std::option::Option<crate::types::TargetListType> {
        &self.target_list_type
    }
    /// Appends an item to `conditions`.
    ///
    /// To override the contents of this collection use [`set_conditions`](Self::set_conditions).
    ///
    /// <p>A list of Condition objects which would be applied together with an AND condition.</p>
    pub fn conditions(mut self, input: crate::types::Condition) -> Self {
        let mut v = self.conditions.unwrap_or_default();
        v.push(input);
        self.conditions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Condition objects which would be applied together with an AND condition.</p>
    pub fn set_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Condition>>) -> Self {
        self.conditions = input;
        self
    }
    /// <p>A list of Condition objects which would be applied together with an AND condition.</p>
    pub fn get_conditions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Condition>> {
        &self.conditions
    }
    /// Consumes the builder and constructs a [`ListCondition`](crate::types::ListCondition).
    pub fn build(self) -> crate::types::ListCondition {
        crate::types::ListCondition {
            target_list_type: self.target_list_type,
            conditions: self.conditions,
        }
    }
}
