// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the hours of operations with the effective override applied.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OperationalHour {
    /// <p>The start time that your contact center opens.</p>
    pub start: ::std::option::Option<crate::types::OverrideTimeSlice>,
    /// <p>The end time that your contact center closes.</p>
    pub end: ::std::option::Option<crate::types::OverrideTimeSlice>,
}
impl OperationalHour {
    /// <p>The start time that your contact center opens.</p>
    pub fn start(&self) -> ::std::option::Option<&crate::types::OverrideTimeSlice> {
        self.start.as_ref()
    }
    /// <p>The end time that your contact center closes.</p>
    pub fn end(&self) -> ::std::option::Option<&crate::types::OverrideTimeSlice> {
        self.end.as_ref()
    }
}
impl OperationalHour {
    /// Creates a new builder-style object to manufacture [`OperationalHour`](crate::types::OperationalHour).
    pub fn builder() -> crate::types::builders::OperationalHourBuilder {
        crate::types::builders::OperationalHourBuilder::default()
    }
}

/// A builder for [`OperationalHour`](crate::types::OperationalHour).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OperationalHourBuilder {
    pub(crate) start: ::std::option::Option<crate::types::OverrideTimeSlice>,
    pub(crate) end: ::std::option::Option<crate::types::OverrideTimeSlice>,
}
impl OperationalHourBuilder {
    /// <p>The start time that your contact center opens.</p>
    pub fn start(mut self, input: crate::types::OverrideTimeSlice) -> Self {
        self.start = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start time that your contact center opens.</p>
    pub fn set_start(mut self, input: ::std::option::Option<crate::types::OverrideTimeSlice>) -> Self {
        self.start = input;
        self
    }
    /// <p>The start time that your contact center opens.</p>
    pub fn get_start(&self) -> &::std::option::Option<crate::types::OverrideTimeSlice> {
        &self.start
    }
    /// <p>The end time that your contact center closes.</p>
    pub fn end(mut self, input: crate::types::OverrideTimeSlice) -> Self {
        self.end = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end time that your contact center closes.</p>
    pub fn set_end(mut self, input: ::std::option::Option<crate::types::OverrideTimeSlice>) -> Self {
        self.end = input;
        self
    }
    /// <p>The end time that your contact center closes.</p>
    pub fn get_end(&self) -> &::std::option::Option<crate::types::OverrideTimeSlice> {
        &self.end
    }
    /// Consumes the builder and constructs a [`OperationalHour`](crate::types::OperationalHour).
    pub fn build(self) -> crate::types::OperationalHour {
        crate::types::OperationalHour {
            start: self.start,
            end: self.end,
        }
    }
}
