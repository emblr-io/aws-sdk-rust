// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The SLA configuration for Case SlaAssignmentType.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CaseSlaConfiguration {
    /// <p>Name of an SLA.</p>
    pub name: ::std::string::String,
    /// <p>Type of SLA for Case SlaAssignmentType.</p>
    pub r#type: crate::types::SlaType,
    /// <p>Unique identifier of a Case field.</p>
    pub field_id: ::std::option::Option<::std::string::String>,
    /// <p>Represents a list of target field values for the fieldId specified in CaseSlaConfiguration. The SLA is considered met if any one of these target field values matches the actual field value.</p>
    pub target_field_values: ::std::option::Option<::std::vec::Vec<crate::types::FieldValueUnion>>,
    /// <p>Target duration in minutes within which an SLA should be completed.</p>
    pub target_sla_minutes: i64,
}
impl CaseSlaConfiguration {
    /// <p>Name of an SLA.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Type of SLA for Case SlaAssignmentType.</p>
    pub fn r#type(&self) -> &crate::types::SlaType {
        &self.r#type
    }
    /// <p>Unique identifier of a Case field.</p>
    pub fn field_id(&self) -> ::std::option::Option<&str> {
        self.field_id.as_deref()
    }
    /// <p>Represents a list of target field values for the fieldId specified in CaseSlaConfiguration. The SLA is considered met if any one of these target field values matches the actual field value.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.target_field_values.is_none()`.
    pub fn target_field_values(&self) -> &[crate::types::FieldValueUnion] {
        self.target_field_values.as_deref().unwrap_or_default()
    }
    /// <p>Target duration in minutes within which an SLA should be completed.</p>
    pub fn target_sla_minutes(&self) -> i64 {
        self.target_sla_minutes
    }
}
impl CaseSlaConfiguration {
    /// Creates a new builder-style object to manufacture [`CaseSlaConfiguration`](crate::types::CaseSlaConfiguration).
    pub fn builder() -> crate::types::builders::CaseSlaConfigurationBuilder {
        crate::types::builders::CaseSlaConfigurationBuilder::default()
    }
}

/// A builder for [`CaseSlaConfiguration`](crate::types::CaseSlaConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CaseSlaConfigurationBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::SlaType>,
    pub(crate) field_id: ::std::option::Option<::std::string::String>,
    pub(crate) target_field_values: ::std::option::Option<::std::vec::Vec<crate::types::FieldValueUnion>>,
    pub(crate) target_sla_minutes: ::std::option::Option<i64>,
}
impl CaseSlaConfigurationBuilder {
    /// <p>Name of an SLA.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of an SLA.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of an SLA.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Type of SLA for Case SlaAssignmentType.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::SlaType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of SLA for Case SlaAssignmentType.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::SlaType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Type of SLA for Case SlaAssignmentType.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::SlaType> {
        &self.r#type
    }
    /// <p>Unique identifier of a Case field.</p>
    pub fn field_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier of a Case field.</p>
    pub fn set_field_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_id = input;
        self
    }
    /// <p>Unique identifier of a Case field.</p>
    pub fn get_field_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_id
    }
    /// Appends an item to `target_field_values`.
    ///
    /// To override the contents of this collection use [`set_target_field_values`](Self::set_target_field_values).
    ///
    /// <p>Represents a list of target field values for the fieldId specified in CaseSlaConfiguration. The SLA is considered met if any one of these target field values matches the actual field value.</p>
    pub fn target_field_values(mut self, input: crate::types::FieldValueUnion) -> Self {
        let mut v = self.target_field_values.unwrap_or_default();
        v.push(input);
        self.target_field_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>Represents a list of target field values for the fieldId specified in CaseSlaConfiguration. The SLA is considered met if any one of these target field values matches the actual field value.</p>
    pub fn set_target_field_values(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FieldValueUnion>>) -> Self {
        self.target_field_values = input;
        self
    }
    /// <p>Represents a list of target field values for the fieldId specified in CaseSlaConfiguration. The SLA is considered met if any one of these target field values matches the actual field value.</p>
    pub fn get_target_field_values(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FieldValueUnion>> {
        &self.target_field_values
    }
    /// <p>Target duration in minutes within which an SLA should be completed.</p>
    /// This field is required.
    pub fn target_sla_minutes(mut self, input: i64) -> Self {
        self.target_sla_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Target duration in minutes within which an SLA should be completed.</p>
    pub fn set_target_sla_minutes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.target_sla_minutes = input;
        self
    }
    /// <p>Target duration in minutes within which an SLA should be completed.</p>
    pub fn get_target_sla_minutes(&self) -> &::std::option::Option<i64> {
        &self.target_sla_minutes
    }
    /// Consumes the builder and constructs a [`CaseSlaConfiguration`](crate::types::CaseSlaConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::CaseSlaConfigurationBuilder::name)
    /// - [`r#type`](crate::types::builders::CaseSlaConfigurationBuilder::type)
    /// - [`target_sla_minutes`](crate::types::builders::CaseSlaConfigurationBuilder::target_sla_minutes)
    pub fn build(self) -> ::std::result::Result<crate::types::CaseSlaConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CaseSlaConfiguration {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CaseSlaConfiguration",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building CaseSlaConfiguration",
                )
            })?,
            field_id: self.field_id,
            target_field_values: self.target_field_values,
            target_sla_minutes: self.target_sla_minutes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target_sla_minutes",
                    "target_sla_minutes was not specified but it is required when building CaseSlaConfiguration",
                )
            })?,
        })
    }
}
