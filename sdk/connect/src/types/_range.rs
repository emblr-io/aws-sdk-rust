// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An Object to define the minimum and maximum proficiency levels.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Range {
    /// <p>The minimum proficiency level of the range.</p>
    pub min_proficiency_level: ::std::option::Option<f32>,
    /// <p>The maximum proficiency level of the range.</p>
    pub max_proficiency_level: ::std::option::Option<f32>,
}
impl Range {
    /// <p>The minimum proficiency level of the range.</p>
    pub fn min_proficiency_level(&self) -> ::std::option::Option<f32> {
        self.min_proficiency_level
    }
    /// <p>The maximum proficiency level of the range.</p>
    pub fn max_proficiency_level(&self) -> ::std::option::Option<f32> {
        self.max_proficiency_level
    }
}
impl Range {
    /// Creates a new builder-style object to manufacture [`Range`](crate::types::Range).
    pub fn builder() -> crate::types::builders::RangeBuilder {
        crate::types::builders::RangeBuilder::default()
    }
}

/// A builder for [`Range`](crate::types::Range).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RangeBuilder {
    pub(crate) min_proficiency_level: ::std::option::Option<f32>,
    pub(crate) max_proficiency_level: ::std::option::Option<f32>,
}
impl RangeBuilder {
    /// <p>The minimum proficiency level of the range.</p>
    pub fn min_proficiency_level(mut self, input: f32) -> Self {
        self.min_proficiency_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum proficiency level of the range.</p>
    pub fn set_min_proficiency_level(mut self, input: ::std::option::Option<f32>) -> Self {
        self.min_proficiency_level = input;
        self
    }
    /// <p>The minimum proficiency level of the range.</p>
    pub fn get_min_proficiency_level(&self) -> &::std::option::Option<f32> {
        &self.min_proficiency_level
    }
    /// <p>The maximum proficiency level of the range.</p>
    pub fn max_proficiency_level(mut self, input: f32) -> Self {
        self.max_proficiency_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum proficiency level of the range.</p>
    pub fn set_max_proficiency_level(mut self, input: ::std::option::Option<f32>) -> Self {
        self.max_proficiency_level = input;
        self
    }
    /// <p>The maximum proficiency level of the range.</p>
    pub fn get_max_proficiency_level(&self) -> &::std::option::Option<f32> {
        &self.max_proficiency_level
    }
    /// Consumes the builder and constructs a [`Range`](crate::types::Range).
    pub fn build(self) -> crate::types::Range {
        crate::types::Range {
            min_proficiency_level: self.min_proficiency_level,
            max_proficiency_level: self.max_proficiency_level,
        }
    }
}
