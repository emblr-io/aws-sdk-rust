// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the agent hierarchy. Hierarchies can be configured with up to five levels.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HierarchyGroups {
    /// <p>The group at level one of the agent hierarchy.</p>
    pub level1: ::std::option::Option<crate::types::AgentHierarchyGroup>,
    /// <p>The group at level two of the agent hierarchy.</p>
    pub level2: ::std::option::Option<crate::types::AgentHierarchyGroup>,
    /// <p>The group at level three of the agent hierarchy.</p>
    pub level3: ::std::option::Option<crate::types::AgentHierarchyGroup>,
    /// <p>The group at level four of the agent hierarchy.</p>
    pub level4: ::std::option::Option<crate::types::AgentHierarchyGroup>,
    /// <p>The group at level five of the agent hierarchy.</p>
    pub level5: ::std::option::Option<crate::types::AgentHierarchyGroup>,
}
impl HierarchyGroups {
    /// <p>The group at level one of the agent hierarchy.</p>
    pub fn level1(&self) -> ::std::option::Option<&crate::types::AgentHierarchyGroup> {
        self.level1.as_ref()
    }
    /// <p>The group at level two of the agent hierarchy.</p>
    pub fn level2(&self) -> ::std::option::Option<&crate::types::AgentHierarchyGroup> {
        self.level2.as_ref()
    }
    /// <p>The group at level three of the agent hierarchy.</p>
    pub fn level3(&self) -> ::std::option::Option<&crate::types::AgentHierarchyGroup> {
        self.level3.as_ref()
    }
    /// <p>The group at level four of the agent hierarchy.</p>
    pub fn level4(&self) -> ::std::option::Option<&crate::types::AgentHierarchyGroup> {
        self.level4.as_ref()
    }
    /// <p>The group at level five of the agent hierarchy.</p>
    pub fn level5(&self) -> ::std::option::Option<&crate::types::AgentHierarchyGroup> {
        self.level5.as_ref()
    }
}
impl HierarchyGroups {
    /// Creates a new builder-style object to manufacture [`HierarchyGroups`](crate::types::HierarchyGroups).
    pub fn builder() -> crate::types::builders::HierarchyGroupsBuilder {
        crate::types::builders::HierarchyGroupsBuilder::default()
    }
}

/// A builder for [`HierarchyGroups`](crate::types::HierarchyGroups).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct HierarchyGroupsBuilder {
    pub(crate) level1: ::std::option::Option<crate::types::AgentHierarchyGroup>,
    pub(crate) level2: ::std::option::Option<crate::types::AgentHierarchyGroup>,
    pub(crate) level3: ::std::option::Option<crate::types::AgentHierarchyGroup>,
    pub(crate) level4: ::std::option::Option<crate::types::AgentHierarchyGroup>,
    pub(crate) level5: ::std::option::Option<crate::types::AgentHierarchyGroup>,
}
impl HierarchyGroupsBuilder {
    /// <p>The group at level one of the agent hierarchy.</p>
    pub fn level1(mut self, input: crate::types::AgentHierarchyGroup) -> Self {
        self.level1 = ::std::option::Option::Some(input);
        self
    }
    /// <p>The group at level one of the agent hierarchy.</p>
    pub fn set_level1(mut self, input: ::std::option::Option<crate::types::AgentHierarchyGroup>) -> Self {
        self.level1 = input;
        self
    }
    /// <p>The group at level one of the agent hierarchy.</p>
    pub fn get_level1(&self) -> &::std::option::Option<crate::types::AgentHierarchyGroup> {
        &self.level1
    }
    /// <p>The group at level two of the agent hierarchy.</p>
    pub fn level2(mut self, input: crate::types::AgentHierarchyGroup) -> Self {
        self.level2 = ::std::option::Option::Some(input);
        self
    }
    /// <p>The group at level two of the agent hierarchy.</p>
    pub fn set_level2(mut self, input: ::std::option::Option<crate::types::AgentHierarchyGroup>) -> Self {
        self.level2 = input;
        self
    }
    /// <p>The group at level two of the agent hierarchy.</p>
    pub fn get_level2(&self) -> &::std::option::Option<crate::types::AgentHierarchyGroup> {
        &self.level2
    }
    /// <p>The group at level three of the agent hierarchy.</p>
    pub fn level3(mut self, input: crate::types::AgentHierarchyGroup) -> Self {
        self.level3 = ::std::option::Option::Some(input);
        self
    }
    /// <p>The group at level three of the agent hierarchy.</p>
    pub fn set_level3(mut self, input: ::std::option::Option<crate::types::AgentHierarchyGroup>) -> Self {
        self.level3 = input;
        self
    }
    /// <p>The group at level three of the agent hierarchy.</p>
    pub fn get_level3(&self) -> &::std::option::Option<crate::types::AgentHierarchyGroup> {
        &self.level3
    }
    /// <p>The group at level four of the agent hierarchy.</p>
    pub fn level4(mut self, input: crate::types::AgentHierarchyGroup) -> Self {
        self.level4 = ::std::option::Option::Some(input);
        self
    }
    /// <p>The group at level four of the agent hierarchy.</p>
    pub fn set_level4(mut self, input: ::std::option::Option<crate::types::AgentHierarchyGroup>) -> Self {
        self.level4 = input;
        self
    }
    /// <p>The group at level four of the agent hierarchy.</p>
    pub fn get_level4(&self) -> &::std::option::Option<crate::types::AgentHierarchyGroup> {
        &self.level4
    }
    /// <p>The group at level five of the agent hierarchy.</p>
    pub fn level5(mut self, input: crate::types::AgentHierarchyGroup) -> Self {
        self.level5 = ::std::option::Option::Some(input);
        self
    }
    /// <p>The group at level five of the agent hierarchy.</p>
    pub fn set_level5(mut self, input: ::std::option::Option<crate::types::AgentHierarchyGroup>) -> Self {
        self.level5 = input;
        self
    }
    /// <p>The group at level five of the agent hierarchy.</p>
    pub fn get_level5(&self) -> &::std::option::Option<crate::types::AgentHierarchyGroup> {
        &self.level5
    }
    /// Consumes the builder and constructs a [`HierarchyGroups`](crate::types::HierarchyGroups).
    pub fn build(self) -> crate::types::HierarchyGroups {
        crate::types::HierarchyGroups {
            level1: self.level1,
            level2: self.level2,
            level3: self.level3,
            level4: self.level4,
            level5: self.level5,
        }
    }
}
