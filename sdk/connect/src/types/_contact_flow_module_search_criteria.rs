// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The search criteria to be used to return flow modules.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContactFlowModuleSearchCriteria {
    /// <p>A list of conditions which would be applied together with an <code>OR</code> condition.</p>
    pub or_conditions: ::std::option::Option<::std::vec::Vec<crate::types::ContactFlowModuleSearchCriteria>>,
    /// <p>A list of conditions which would be applied together with an <code>AND</code> condition.</p>
    pub and_conditions: ::std::option::Option<::std::vec::Vec<crate::types::ContactFlowModuleSearchCriteria>>,
    /// <p>A leaf node condition which can be used to specify a string condition.</p>
    pub string_condition: ::std::option::Option<crate::types::StringCondition>,
    /// <p>The state of the flow.</p>
    pub state_condition: ::std::option::Option<crate::types::ContactFlowModuleState>,
    /// <p>The status of the flow.</p>
    pub status_condition: ::std::option::Option<crate::types::ContactFlowModuleStatus>,
}
impl ContactFlowModuleSearchCriteria {
    /// <p>A list of conditions which would be applied together with an <code>OR</code> condition.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.or_conditions.is_none()`.
    pub fn or_conditions(&self) -> &[crate::types::ContactFlowModuleSearchCriteria] {
        self.or_conditions.as_deref().unwrap_or_default()
    }
    /// <p>A list of conditions which would be applied together with an <code>AND</code> condition.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.and_conditions.is_none()`.
    pub fn and_conditions(&self) -> &[crate::types::ContactFlowModuleSearchCriteria] {
        self.and_conditions.as_deref().unwrap_or_default()
    }
    /// <p>A leaf node condition which can be used to specify a string condition.</p>
    pub fn string_condition(&self) -> ::std::option::Option<&crate::types::StringCondition> {
        self.string_condition.as_ref()
    }
    /// <p>The state of the flow.</p>
    pub fn state_condition(&self) -> ::std::option::Option<&crate::types::ContactFlowModuleState> {
        self.state_condition.as_ref()
    }
    /// <p>The status of the flow.</p>
    pub fn status_condition(&self) -> ::std::option::Option<&crate::types::ContactFlowModuleStatus> {
        self.status_condition.as_ref()
    }
}
impl ContactFlowModuleSearchCriteria {
    /// Creates a new builder-style object to manufacture [`ContactFlowModuleSearchCriteria`](crate::types::ContactFlowModuleSearchCriteria).
    pub fn builder() -> crate::types::builders::ContactFlowModuleSearchCriteriaBuilder {
        crate::types::builders::ContactFlowModuleSearchCriteriaBuilder::default()
    }
}

/// A builder for [`ContactFlowModuleSearchCriteria`](crate::types::ContactFlowModuleSearchCriteria).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContactFlowModuleSearchCriteriaBuilder {
    pub(crate) or_conditions: ::std::option::Option<::std::vec::Vec<crate::types::ContactFlowModuleSearchCriteria>>,
    pub(crate) and_conditions: ::std::option::Option<::std::vec::Vec<crate::types::ContactFlowModuleSearchCriteria>>,
    pub(crate) string_condition: ::std::option::Option<crate::types::StringCondition>,
    pub(crate) state_condition: ::std::option::Option<crate::types::ContactFlowModuleState>,
    pub(crate) status_condition: ::std::option::Option<crate::types::ContactFlowModuleStatus>,
}
impl ContactFlowModuleSearchCriteriaBuilder {
    /// Appends an item to `or_conditions`.
    ///
    /// To override the contents of this collection use [`set_or_conditions`](Self::set_or_conditions).
    ///
    /// <p>A list of conditions which would be applied together with an <code>OR</code> condition.</p>
    pub fn or_conditions(mut self, input: crate::types::ContactFlowModuleSearchCriteria) -> Self {
        let mut v = self.or_conditions.unwrap_or_default();
        v.push(input);
        self.or_conditions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of conditions which would be applied together with an <code>OR</code> condition.</p>
    pub fn set_or_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContactFlowModuleSearchCriteria>>) -> Self {
        self.or_conditions = input;
        self
    }
    /// <p>A list of conditions which would be applied together with an <code>OR</code> condition.</p>
    pub fn get_or_conditions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContactFlowModuleSearchCriteria>> {
        &self.or_conditions
    }
    /// Appends an item to `and_conditions`.
    ///
    /// To override the contents of this collection use [`set_and_conditions`](Self::set_and_conditions).
    ///
    /// <p>A list of conditions which would be applied together with an <code>AND</code> condition.</p>
    pub fn and_conditions(mut self, input: crate::types::ContactFlowModuleSearchCriteria) -> Self {
        let mut v = self.and_conditions.unwrap_or_default();
        v.push(input);
        self.and_conditions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of conditions which would be applied together with an <code>AND</code> condition.</p>
    pub fn set_and_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContactFlowModuleSearchCriteria>>) -> Self {
        self.and_conditions = input;
        self
    }
    /// <p>A list of conditions which would be applied together with an <code>AND</code> condition.</p>
    pub fn get_and_conditions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContactFlowModuleSearchCriteria>> {
        &self.and_conditions
    }
    /// <p>A leaf node condition which can be used to specify a string condition.</p>
    pub fn string_condition(mut self, input: crate::types::StringCondition) -> Self {
        self.string_condition = ::std::option::Option::Some(input);
        self
    }
    /// <p>A leaf node condition which can be used to specify a string condition.</p>
    pub fn set_string_condition(mut self, input: ::std::option::Option<crate::types::StringCondition>) -> Self {
        self.string_condition = input;
        self
    }
    /// <p>A leaf node condition which can be used to specify a string condition.</p>
    pub fn get_string_condition(&self) -> &::std::option::Option<crate::types::StringCondition> {
        &self.string_condition
    }
    /// <p>The state of the flow.</p>
    pub fn state_condition(mut self, input: crate::types::ContactFlowModuleState) -> Self {
        self.state_condition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the flow.</p>
    pub fn set_state_condition(mut self, input: ::std::option::Option<crate::types::ContactFlowModuleState>) -> Self {
        self.state_condition = input;
        self
    }
    /// <p>The state of the flow.</p>
    pub fn get_state_condition(&self) -> &::std::option::Option<crate::types::ContactFlowModuleState> {
        &self.state_condition
    }
    /// <p>The status of the flow.</p>
    pub fn status_condition(mut self, input: crate::types::ContactFlowModuleStatus) -> Self {
        self.status_condition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the flow.</p>
    pub fn set_status_condition(mut self, input: ::std::option::Option<crate::types::ContactFlowModuleStatus>) -> Self {
        self.status_condition = input;
        self
    }
    /// <p>The status of the flow.</p>
    pub fn get_status_condition(&self) -> &::std::option::Option<crate::types::ContactFlowModuleStatus> {
        &self.status_condition
    }
    /// Consumes the builder and constructs a [`ContactFlowModuleSearchCriteria`](crate::types::ContactFlowModuleSearchCriteria).
    pub fn build(self) -> crate::types::ContactFlowModuleSearchCriteria {
        crate::types::ContactFlowModuleSearchCriteria {
            or_conditions: self.or_conditions,
            and_conditions: self.and_conditions,
            string_condition: self.string_condition,
            state_condition: self.state_condition,
            status_condition: self.status_condition,
        }
    }
}
