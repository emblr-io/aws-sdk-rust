// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metadata used to download the attached file.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DownloadUrlMetadata {
    /// <p>A pre-signed URL that should be used to download the attached file.</p>
    pub url: ::std::option::Option<::std::string::String>,
    /// <p>The expiration time of the URL in ISO timestamp. It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example, 2019-11-08T02:41:28.172Z.</p>
    pub url_expiry: ::std::option::Option<::std::string::String>,
}
impl DownloadUrlMetadata {
    /// <p>A pre-signed URL that should be used to download the attached file.</p>
    pub fn url(&self) -> ::std::option::Option<&str> {
        self.url.as_deref()
    }
    /// <p>The expiration time of the URL in ISO timestamp. It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example, 2019-11-08T02:41:28.172Z.</p>
    pub fn url_expiry(&self) -> ::std::option::Option<&str> {
        self.url_expiry.as_deref()
    }
}
impl DownloadUrlMetadata {
    /// Creates a new builder-style object to manufacture [`DownloadUrlMetadata`](crate::types::DownloadUrlMetadata).
    pub fn builder() -> crate::types::builders::DownloadUrlMetadataBuilder {
        crate::types::builders::DownloadUrlMetadataBuilder::default()
    }
}

/// A builder for [`DownloadUrlMetadata`](crate::types::DownloadUrlMetadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DownloadUrlMetadataBuilder {
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) url_expiry: ::std::option::Option<::std::string::String>,
}
impl DownloadUrlMetadataBuilder {
    /// <p>A pre-signed URL that should be used to download the attached file.</p>
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A pre-signed URL that should be used to download the attached file.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>A pre-signed URL that should be used to download the attached file.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// <p>The expiration time of the URL in ISO timestamp. It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example, 2019-11-08T02:41:28.172Z.</p>
    pub fn url_expiry(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url_expiry = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The expiration time of the URL in ISO timestamp. It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example, 2019-11-08T02:41:28.172Z.</p>
    pub fn set_url_expiry(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url_expiry = input;
        self
    }
    /// <p>The expiration time of the URL in ISO timestamp. It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example, 2019-11-08T02:41:28.172Z.</p>
    pub fn get_url_expiry(&self) -> &::std::option::Option<::std::string::String> {
        &self.url_expiry
    }
    /// Consumes the builder and constructs a [`DownloadUrlMetadata`](crate::types::DownloadUrlMetadata).
    pub fn build(self) -> crate::types::DownloadUrlMetadata {
        crate::types::DownloadUrlMetadata {
            url: self.url,
            url_expiry: self.url_expiry,
        }
    }
}
