// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The contact configuration for push notification registration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContactConfiguration {
    /// <p>The identifier of the contact within the Amazon Connect instance.</p>
    pub contact_id: ::std::string::String,
    /// <p>The role of the participant in the chat conversation.</p><note>
    /// <p>Only <code>CUSTOMER</code> is currently supported. Any other values other than <code>CUSTOMER</code> will result in an exception (4xx error).</p>
    /// </note>
    pub participant_role: ::std::option::Option<crate::types::ParticipantRole>,
    /// <p>Whether to include raw connect message in the push notification payload. Default is <code>False</code>.</p>
    pub include_raw_message: bool,
}
impl ContactConfiguration {
    /// <p>The identifier of the contact within the Amazon Connect instance.</p>
    pub fn contact_id(&self) -> &str {
        use std::ops::Deref;
        self.contact_id.deref()
    }
    /// <p>The role of the participant in the chat conversation.</p><note>
    /// <p>Only <code>CUSTOMER</code> is currently supported. Any other values other than <code>CUSTOMER</code> will result in an exception (4xx error).</p>
    /// </note>
    pub fn participant_role(&self) -> ::std::option::Option<&crate::types::ParticipantRole> {
        self.participant_role.as_ref()
    }
    /// <p>Whether to include raw connect message in the push notification payload. Default is <code>False</code>.</p>
    pub fn include_raw_message(&self) -> bool {
        self.include_raw_message
    }
}
impl ContactConfiguration {
    /// Creates a new builder-style object to manufacture [`ContactConfiguration`](crate::types::ContactConfiguration).
    pub fn builder() -> crate::types::builders::ContactConfigurationBuilder {
        crate::types::builders::ContactConfigurationBuilder::default()
    }
}

/// A builder for [`ContactConfiguration`](crate::types::ContactConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContactConfigurationBuilder {
    pub(crate) contact_id: ::std::option::Option<::std::string::String>,
    pub(crate) participant_role: ::std::option::Option<crate::types::ParticipantRole>,
    pub(crate) include_raw_message: ::std::option::Option<bool>,
}
impl ContactConfigurationBuilder {
    /// <p>The identifier of the contact within the Amazon Connect instance.</p>
    /// This field is required.
    pub fn contact_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.contact_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the contact within the Amazon Connect instance.</p>
    pub fn set_contact_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.contact_id = input;
        self
    }
    /// <p>The identifier of the contact within the Amazon Connect instance.</p>
    pub fn get_contact_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.contact_id
    }
    /// <p>The role of the participant in the chat conversation.</p><note>
    /// <p>Only <code>CUSTOMER</code> is currently supported. Any other values other than <code>CUSTOMER</code> will result in an exception (4xx error).</p>
    /// </note>
    pub fn participant_role(mut self, input: crate::types::ParticipantRole) -> Self {
        self.participant_role = ::std::option::Option::Some(input);
        self
    }
    /// <p>The role of the participant in the chat conversation.</p><note>
    /// <p>Only <code>CUSTOMER</code> is currently supported. Any other values other than <code>CUSTOMER</code> will result in an exception (4xx error).</p>
    /// </note>
    pub fn set_participant_role(mut self, input: ::std::option::Option<crate::types::ParticipantRole>) -> Self {
        self.participant_role = input;
        self
    }
    /// <p>The role of the participant in the chat conversation.</p><note>
    /// <p>Only <code>CUSTOMER</code> is currently supported. Any other values other than <code>CUSTOMER</code> will result in an exception (4xx error).</p>
    /// </note>
    pub fn get_participant_role(&self) -> &::std::option::Option<crate::types::ParticipantRole> {
        &self.participant_role
    }
    /// <p>Whether to include raw connect message in the push notification payload. Default is <code>False</code>.</p>
    pub fn include_raw_message(mut self, input: bool) -> Self {
        self.include_raw_message = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to include raw connect message in the push notification payload. Default is <code>False</code>.</p>
    pub fn set_include_raw_message(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_raw_message = input;
        self
    }
    /// <p>Whether to include raw connect message in the push notification payload. Default is <code>False</code>.</p>
    pub fn get_include_raw_message(&self) -> &::std::option::Option<bool> {
        &self.include_raw_message
    }
    /// Consumes the builder and constructs a [`ContactConfiguration`](crate::types::ContactConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`contact_id`](crate::types::builders::ContactConfigurationBuilder::contact_id)
    pub fn build(self) -> ::std::result::Result<crate::types::ContactConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ContactConfiguration {
            contact_id: self.contact_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "contact_id",
                    "contact_id was not specified but it is required when building ContactConfiguration",
                )
            })?,
            participant_role: self.participant_role,
            include_raw_message: self.include_raw_message.unwrap_or_default(),
        })
    }
}
