// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the call disconnect experience.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DisconnectDetails {
    /// <p>Indicates the potential disconnection issues for a call. This field is not populated if the service does not detect potential issues.</p>
    pub potential_disconnect_issue: ::std::option::Option<::std::string::String>,
}
impl DisconnectDetails {
    /// <p>Indicates the potential disconnection issues for a call. This field is not populated if the service does not detect potential issues.</p>
    pub fn potential_disconnect_issue(&self) -> ::std::option::Option<&str> {
        self.potential_disconnect_issue.as_deref()
    }
}
impl DisconnectDetails {
    /// Creates a new builder-style object to manufacture [`DisconnectDetails`](crate::types::DisconnectDetails).
    pub fn builder() -> crate::types::builders::DisconnectDetailsBuilder {
        crate::types::builders::DisconnectDetailsBuilder::default()
    }
}

/// A builder for [`DisconnectDetails`](crate::types::DisconnectDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DisconnectDetailsBuilder {
    pub(crate) potential_disconnect_issue: ::std::option::Option<::std::string::String>,
}
impl DisconnectDetailsBuilder {
    /// <p>Indicates the potential disconnection issues for a call. This field is not populated if the service does not detect potential issues.</p>
    pub fn potential_disconnect_issue(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.potential_disconnect_issue = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates the potential disconnection issues for a call. This field is not populated if the service does not detect potential issues.</p>
    pub fn set_potential_disconnect_issue(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.potential_disconnect_issue = input;
        self
    }
    /// <p>Indicates the potential disconnection issues for a call. This field is not populated if the service does not detect potential issues.</p>
    pub fn get_potential_disconnect_issue(&self) -> &::std::option::Option<::std::string::String> {
        &self.potential_disconnect_issue
    }
    /// Consumes the builder and constructs a [`DisconnectDetails`](crate::types::DisconnectDetails).
    pub fn build(self) -> crate::types::DisconnectDetails {
        crate::types::DisconnectDetails {
            potential_disconnect_issue: self.potential_disconnect_issue,
        }
    }
}
