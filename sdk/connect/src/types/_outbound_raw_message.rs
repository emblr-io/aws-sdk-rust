// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the raw email body content.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct OutboundRawMessage {
    /// <p>The email subject.</p>
    pub subject: ::std::string::String,
    /// <p>The email message body.</p>
    pub body: ::std::string::String,
    /// <p>Type of content, that is, <code>text/plain</code> or <code>text/html</code>.</p>
    pub content_type: ::std::string::String,
}
impl OutboundRawMessage {
    /// <p>The email subject.</p>
    pub fn subject(&self) -> &str {
        use std::ops::Deref;
        self.subject.deref()
    }
    /// <p>The email message body.</p>
    pub fn body(&self) -> &str {
        use std::ops::Deref;
        self.body.deref()
    }
    /// <p>Type of content, that is, <code>text/plain</code> or <code>text/html</code>.</p>
    pub fn content_type(&self) -> &str {
        use std::ops::Deref;
        self.content_type.deref()
    }
}
impl ::std::fmt::Debug for OutboundRawMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("OutboundRawMessage");
        formatter.field("subject", &"*** Sensitive Data Redacted ***");
        formatter.field("body", &"*** Sensitive Data Redacted ***");
        formatter.field("content_type", &self.content_type);
        formatter.finish()
    }
}
impl OutboundRawMessage {
    /// Creates a new builder-style object to manufacture [`OutboundRawMessage`](crate::types::OutboundRawMessage).
    pub fn builder() -> crate::types::builders::OutboundRawMessageBuilder {
        crate::types::builders::OutboundRawMessageBuilder::default()
    }
}

/// A builder for [`OutboundRawMessage`](crate::types::OutboundRawMessage).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct OutboundRawMessageBuilder {
    pub(crate) subject: ::std::option::Option<::std::string::String>,
    pub(crate) body: ::std::option::Option<::std::string::String>,
    pub(crate) content_type: ::std::option::Option<::std::string::String>,
}
impl OutboundRawMessageBuilder {
    /// <p>The email subject.</p>
    /// This field is required.
    pub fn subject(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subject = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email subject.</p>
    pub fn set_subject(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subject = input;
        self
    }
    /// <p>The email subject.</p>
    pub fn get_subject(&self) -> &::std::option::Option<::std::string::String> {
        &self.subject
    }
    /// <p>The email message body.</p>
    /// This field is required.
    pub fn body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email message body.</p>
    pub fn set_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// <p>The email message body.</p>
    pub fn get_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.body
    }
    /// <p>Type of content, that is, <code>text/plain</code> or <code>text/html</code>.</p>
    /// This field is required.
    pub fn content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Type of content, that is, <code>text/plain</code> or <code>text/html</code>.</p>
    pub fn set_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>Type of content, that is, <code>text/plain</code> or <code>text/html</code>.</p>
    pub fn get_content_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_type
    }
    /// Consumes the builder and constructs a [`OutboundRawMessage`](crate::types::OutboundRawMessage).
    /// This method will fail if any of the following fields are not set:
    /// - [`subject`](crate::types::builders::OutboundRawMessageBuilder::subject)
    /// - [`body`](crate::types::builders::OutboundRawMessageBuilder::body)
    /// - [`content_type`](crate::types::builders::OutboundRawMessageBuilder::content_type)
    pub fn build(self) -> ::std::result::Result<crate::types::OutboundRawMessage, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OutboundRawMessage {
            subject: self.subject.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "subject",
                    "subject was not specified but it is required when building OutboundRawMessage",
                )
            })?,
            body: self.body.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "body",
                    "body was not specified but it is required when building OutboundRawMessage",
                )
            })?,
            content_type: self.content_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content_type",
                    "content_type was not specified but it is required when building OutboundRawMessage",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for OutboundRawMessageBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("OutboundRawMessageBuilder");
        formatter.field("subject", &"*** Sensitive Data Redacted ***");
        formatter.field("body", &"*** Sensitive Data Redacted ***");
        formatter.field("content_type", &self.content_type);
        formatter.finish()
    }
}
