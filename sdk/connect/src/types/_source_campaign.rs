// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the campaign.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SourceCampaign {
    /// <p>A unique identifier for a campaign.</p>
    pub campaign_id: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for a each request part of same campaign.</p>
    pub outbound_request_id: ::std::option::Option<::std::string::String>,
}
impl SourceCampaign {
    /// <p>A unique identifier for a campaign.</p>
    pub fn campaign_id(&self) -> ::std::option::Option<&str> {
        self.campaign_id.as_deref()
    }
    /// <p>A unique identifier for a each request part of same campaign.</p>
    pub fn outbound_request_id(&self) -> ::std::option::Option<&str> {
        self.outbound_request_id.as_deref()
    }
}
impl SourceCampaign {
    /// Creates a new builder-style object to manufacture [`SourceCampaign`](crate::types::SourceCampaign).
    pub fn builder() -> crate::types::builders::SourceCampaignBuilder {
        crate::types::builders::SourceCampaignBuilder::default()
    }
}

/// A builder for [`SourceCampaign`](crate::types::SourceCampaign).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SourceCampaignBuilder {
    pub(crate) campaign_id: ::std::option::Option<::std::string::String>,
    pub(crate) outbound_request_id: ::std::option::Option<::std::string::String>,
}
impl SourceCampaignBuilder {
    /// <p>A unique identifier for a campaign.</p>
    pub fn campaign_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.campaign_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for a campaign.</p>
    pub fn set_campaign_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.campaign_id = input;
        self
    }
    /// <p>A unique identifier for a campaign.</p>
    pub fn get_campaign_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.campaign_id
    }
    /// <p>A unique identifier for a each request part of same campaign.</p>
    pub fn outbound_request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.outbound_request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for a each request part of same campaign.</p>
    pub fn set_outbound_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.outbound_request_id = input;
        self
    }
    /// <p>A unique identifier for a each request part of same campaign.</p>
    pub fn get_outbound_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.outbound_request_id
    }
    /// Consumes the builder and constructs a [`SourceCampaign`](crate::types::SourceCampaign).
    pub fn build(self) -> crate::types::SourceCampaign {
        crate::types::SourceCampaign {
            campaign_id: self.campaign_id,
            outbound_request_id: self.outbound_request_id,
        }
    }
}
