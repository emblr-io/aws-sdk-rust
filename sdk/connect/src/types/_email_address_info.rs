// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a source or destination email address.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EmailAddressInfo {
    /// <p>The email address, including the domain.</p>
    pub email_address: ::std::string::String,
    /// <p>The display name of email address.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
}
impl EmailAddressInfo {
    /// <p>The email address, including the domain.</p>
    pub fn email_address(&self) -> &str {
        use std::ops::Deref;
        self.email_address.deref()
    }
    /// <p>The display name of email address.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
}
impl ::std::fmt::Debug for EmailAddressInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EmailAddressInfo");
        formatter.field("email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl EmailAddressInfo {
    /// Creates a new builder-style object to manufacture [`EmailAddressInfo`](crate::types::EmailAddressInfo).
    pub fn builder() -> crate::types::builders::EmailAddressInfoBuilder {
        crate::types::builders::EmailAddressInfoBuilder::default()
    }
}

/// A builder for [`EmailAddressInfo`](crate::types::EmailAddressInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct EmailAddressInfoBuilder {
    pub(crate) email_address: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
}
impl EmailAddressInfoBuilder {
    /// <p>The email address, including the domain.</p>
    /// This field is required.
    pub fn email_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address, including the domain.</p>
    pub fn set_email_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email_address = input;
        self
    }
    /// <p>The email address, including the domain.</p>
    pub fn get_email_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.email_address
    }
    /// <p>The display name of email address.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of email address.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name of email address.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// Consumes the builder and constructs a [`EmailAddressInfo`](crate::types::EmailAddressInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`email_address`](crate::types::builders::EmailAddressInfoBuilder::email_address)
    pub fn build(self) -> ::std::result::Result<crate::types::EmailAddressInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EmailAddressInfo {
            email_address: self.email_address.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "email_address",
                    "email_address was not specified but it is required when building EmailAddressInfo",
                )
            })?,
            display_name: self.display_name,
        })
    }
}
impl ::std::fmt::Debug for EmailAddressInfoBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EmailAddressInfoBuilder");
        formatter.field("email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
