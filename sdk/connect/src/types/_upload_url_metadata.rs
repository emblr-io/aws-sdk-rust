// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Fields required when uploading an attached file.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UploadUrlMetadata {
    /// <p>A pre-signed S3 URL that should be used for uploading the attached file.</p>
    pub url: ::std::option::Option<::std::string::String>,
    /// <p>The expiration time of the URL in ISO timestamp. It's specified in ISO 8601 format: <code>yyyy-MM-ddThh:mm:ss.SSSZ</code>. For example, <code>2019-11-08T02:41:28.172Z</code>.</p>
    pub url_expiry: ::std::option::Option<::std::string::String>,
    /// <p>A map of headers that should be provided when uploading the attached file.</p>
    pub headers_to_include: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl UploadUrlMetadata {
    /// <p>A pre-signed S3 URL that should be used for uploading the attached file.</p>
    pub fn url(&self) -> ::std::option::Option<&str> {
        self.url.as_deref()
    }
    /// <p>The expiration time of the URL in ISO timestamp. It's specified in ISO 8601 format: <code>yyyy-MM-ddThh:mm:ss.SSSZ</code>. For example, <code>2019-11-08T02:41:28.172Z</code>.</p>
    pub fn url_expiry(&self) -> ::std::option::Option<&str> {
        self.url_expiry.as_deref()
    }
    /// <p>A map of headers that should be provided when uploading the attached file.</p>
    pub fn headers_to_include(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.headers_to_include.as_ref()
    }
}
impl UploadUrlMetadata {
    /// Creates a new builder-style object to manufacture [`UploadUrlMetadata`](crate::types::UploadUrlMetadata).
    pub fn builder() -> crate::types::builders::UploadUrlMetadataBuilder {
        crate::types::builders::UploadUrlMetadataBuilder::default()
    }
}

/// A builder for [`UploadUrlMetadata`](crate::types::UploadUrlMetadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UploadUrlMetadataBuilder {
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) url_expiry: ::std::option::Option<::std::string::String>,
    pub(crate) headers_to_include: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl UploadUrlMetadataBuilder {
    /// <p>A pre-signed S3 URL that should be used for uploading the attached file.</p>
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A pre-signed S3 URL that should be used for uploading the attached file.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>A pre-signed S3 URL that should be used for uploading the attached file.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// <p>The expiration time of the URL in ISO timestamp. It's specified in ISO 8601 format: <code>yyyy-MM-ddThh:mm:ss.SSSZ</code>. For example, <code>2019-11-08T02:41:28.172Z</code>.</p>
    pub fn url_expiry(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url_expiry = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The expiration time of the URL in ISO timestamp. It's specified in ISO 8601 format: <code>yyyy-MM-ddThh:mm:ss.SSSZ</code>. For example, <code>2019-11-08T02:41:28.172Z</code>.</p>
    pub fn set_url_expiry(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url_expiry = input;
        self
    }
    /// <p>The expiration time of the URL in ISO timestamp. It's specified in ISO 8601 format: <code>yyyy-MM-ddThh:mm:ss.SSSZ</code>. For example, <code>2019-11-08T02:41:28.172Z</code>.</p>
    pub fn get_url_expiry(&self) -> &::std::option::Option<::std::string::String> {
        &self.url_expiry
    }
    /// Adds a key-value pair to `headers_to_include`.
    ///
    /// To override the contents of this collection use [`set_headers_to_include`](Self::set_headers_to_include).
    ///
    /// <p>A map of headers that should be provided when uploading the attached file.</p>
    pub fn headers_to_include(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.headers_to_include.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.headers_to_include = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of headers that should be provided when uploading the attached file.</p>
    pub fn set_headers_to_include(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.headers_to_include = input;
        self
    }
    /// <p>A map of headers that should be provided when uploading the attached file.</p>
    pub fn get_headers_to_include(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.headers_to_include
    }
    /// Consumes the builder and constructs a [`UploadUrlMetadata`](crate::types::UploadUrlMetadata).
    pub fn build(self) -> crate::types::UploadUrlMetadata {
        crate::types::UploadUrlMetadata {
            url: self.url,
            url_expiry: self.url_expiry,
            headers_to_include: self.headers_to_include,
        }
    }
}
