// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
/// <p>Information about associations that are successfully created: <code>DataSetId</code>, <code>TargetAccountId</code>, <code>ResourceShareId</code>, <code>ResourceShareArn</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalyticsDataAssociationResult {
    /// <p>The identifier of the dataset.</p>
    pub data_set_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the target account.</p>
    pub target_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The Resource Access Manager share ID.</p>
    pub resource_share_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Resource Access Manager share.</p>
    pub resource_share_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Resource Access Manager status of association.</p>
    pub resource_share_status: ::std::option::Option<::std::string::String>,
}
impl AnalyticsDataAssociationResult {
    /// <p>The identifier of the dataset.</p>
    pub fn data_set_id(&self) -> ::std::option::Option<&str> {
        self.data_set_id.as_deref()
    }
    /// <p>The identifier of the target account.</p>
    pub fn target_account_id(&self) -> ::std::option::Option<&str> {
        self.target_account_id.as_deref()
    }
    /// <p>The Resource Access Manager share ID.</p>
    pub fn resource_share_id(&self) -> ::std::option::Option<&str> {
        self.resource_share_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Resource Access Manager share.</p>
    pub fn resource_share_arn(&self) -> ::std::option::Option<&str> {
        self.resource_share_arn.as_deref()
    }
    /// <p>The Amazon Web Services Resource Access Manager status of association.</p>
    pub fn resource_share_status(&self) -> ::std::option::Option<&str> {
        self.resource_share_status.as_deref()
    }
}
impl AnalyticsDataAssociationResult {
    /// Creates a new builder-style object to manufacture [`AnalyticsDataAssociationResult`](crate::types::AnalyticsDataAssociationResult).
    pub fn builder() -> crate::types::builders::AnalyticsDataAssociationResultBuilder {
        crate::types::builders::AnalyticsDataAssociationResultBuilder::default()
    }
}

/// A builder for [`AnalyticsDataAssociationResult`](crate::types::AnalyticsDataAssociationResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AnalyticsDataAssociationResultBuilder {
    pub(crate) data_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) target_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_share_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_share_arn: ::std::option::Option<::std::string::String>,
    pub(crate) resource_share_status: ::std::option::Option<::std::string::String>,
}
impl AnalyticsDataAssociationResultBuilder {
    /// <p>The identifier of the dataset.</p>
    pub fn data_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the dataset.</p>
    pub fn set_data_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_set_id = input;
        self
    }
    /// <p>The identifier of the dataset.</p>
    pub fn get_data_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_set_id
    }
    /// <p>The identifier of the target account.</p>
    pub fn target_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the target account.</p>
    pub fn set_target_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_account_id = input;
        self
    }
    /// <p>The identifier of the target account.</p>
    pub fn get_target_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_account_id
    }
    /// <p>The Resource Access Manager share ID.</p>
    pub fn resource_share_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_share_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Resource Access Manager share ID.</p>
    pub fn set_resource_share_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_share_id = input;
        self
    }
    /// <p>The Resource Access Manager share ID.</p>
    pub fn get_resource_share_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_share_id
    }
    /// <p>The Amazon Resource Name (ARN) of the Resource Access Manager share.</p>
    pub fn resource_share_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_share_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Resource Access Manager share.</p>
    pub fn set_resource_share_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_share_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Resource Access Manager share.</p>
    pub fn get_resource_share_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_share_arn
    }
    /// <p>The Amazon Web Services Resource Access Manager status of association.</p>
    pub fn resource_share_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_share_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Resource Access Manager status of association.</p>
    pub fn set_resource_share_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_share_status = input;
        self
    }
    /// <p>The Amazon Web Services Resource Access Manager status of association.</p>
    pub fn get_resource_share_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_share_status
    }
    /// Consumes the builder and constructs a [`AnalyticsDataAssociationResult`](crate::types::AnalyticsDataAssociationResult).
    pub fn build(self) -> crate::types::AnalyticsDataAssociationResult {
        crate::types::AnalyticsDataAssociationResult {
            data_set_id: self.data_set_id,
            target_account_id: self.target_account_id,
            resource_share_id: self.resource_share_id,
            resource_share_arn: self.resource_share_arn,
            resource_share_status: self.resource_share_status,
        }
    }
}
