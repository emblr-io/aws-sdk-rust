// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object to specify the hours of operation override date condition.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DateCondition {
    /// <p>An object to specify the hours of operation override date field.</p>
    pub field_name: ::std::option::Option<::std::string::String>,
    /// <p>An object to specify the hours of operation override date value.</p>
    pub value: ::std::option::Option<::std::string::String>,
    /// <p>An object to specify the hours of operation override date condition <code>comparisonType</code>.</p>
    pub comparison_type: ::std::option::Option<crate::types::DateComparisonType>,
}
impl DateCondition {
    /// <p>An object to specify the hours of operation override date field.</p>
    pub fn field_name(&self) -> ::std::option::Option<&str> {
        self.field_name.as_deref()
    }
    /// <p>An object to specify the hours of operation override date value.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>An object to specify the hours of operation override date condition <code>comparisonType</code>.</p>
    pub fn comparison_type(&self) -> ::std::option::Option<&crate::types::DateComparisonType> {
        self.comparison_type.as_ref()
    }
}
impl DateCondition {
    /// Creates a new builder-style object to manufacture [`DateCondition`](crate::types::DateCondition).
    pub fn builder() -> crate::types::builders::DateConditionBuilder {
        crate::types::builders::DateConditionBuilder::default()
    }
}

/// A builder for [`DateCondition`](crate::types::DateCondition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DateConditionBuilder {
    pub(crate) field_name: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) comparison_type: ::std::option::Option<crate::types::DateComparisonType>,
}
impl DateConditionBuilder {
    /// <p>An object to specify the hours of operation override date field.</p>
    pub fn field_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An object to specify the hours of operation override date field.</p>
    pub fn set_field_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_name = input;
        self
    }
    /// <p>An object to specify the hours of operation override date field.</p>
    pub fn get_field_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_name
    }
    /// <p>An object to specify the hours of operation override date value.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An object to specify the hours of operation override date value.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>An object to specify the hours of operation override date value.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// <p>An object to specify the hours of operation override date condition <code>comparisonType</code>.</p>
    pub fn comparison_type(mut self, input: crate::types::DateComparisonType) -> Self {
        self.comparison_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object to specify the hours of operation override date condition <code>comparisonType</code>.</p>
    pub fn set_comparison_type(mut self, input: ::std::option::Option<crate::types::DateComparisonType>) -> Self {
        self.comparison_type = input;
        self
    }
    /// <p>An object to specify the hours of operation override date condition <code>comparisonType</code>.</p>
    pub fn get_comparison_type(&self) -> &::std::option::Option<crate::types::DateComparisonType> {
        &self.comparison_type
    }
    /// Consumes the builder and constructs a [`DateCondition`](crate::types::DateCondition).
    pub fn build(self) -> crate::types::DateCondition {
        crate::types::DateCondition {
            field_name: self.field_name,
            value: self.value,
            comparison_type: self.comparison_type,
        }
    }
}
