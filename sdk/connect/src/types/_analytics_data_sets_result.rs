// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about datasets that are available to associate with: <code>DataSetId</code>, <code>DataSetName</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalyticsDataSetsResult {
    /// <p>The identifier of the dataset.</p>
    pub data_set_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the dataset.</p>
    pub data_set_name: ::std::option::Option<::std::string::String>,
}
impl AnalyticsDataSetsResult {
    /// <p>The identifier of the dataset.</p>
    pub fn data_set_id(&self) -> ::std::option::Option<&str> {
        self.data_set_id.as_deref()
    }
    /// <p>The name of the dataset.</p>
    pub fn data_set_name(&self) -> ::std::option::Option<&str> {
        self.data_set_name.as_deref()
    }
}
impl AnalyticsDataSetsResult {
    /// Creates a new builder-style object to manufacture [`AnalyticsDataSetsResult`](crate::types::AnalyticsDataSetsResult).
    pub fn builder() -> crate::types::builders::AnalyticsDataSetsResultBuilder {
        crate::types::builders::AnalyticsDataSetsResultBuilder::default()
    }
}

/// A builder for [`AnalyticsDataSetsResult`](crate::types::AnalyticsDataSetsResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AnalyticsDataSetsResultBuilder {
    pub(crate) data_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) data_set_name: ::std::option::Option<::std::string::String>,
}
impl AnalyticsDataSetsResultBuilder {
    /// <p>The identifier of the dataset.</p>
    pub fn data_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the dataset.</p>
    pub fn set_data_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_set_id = input;
        self
    }
    /// <p>The identifier of the dataset.</p>
    pub fn get_data_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_set_id
    }
    /// <p>The name of the dataset.</p>
    pub fn data_set_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_set_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the dataset.</p>
    pub fn set_data_set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_set_name = input;
        self
    }
    /// <p>The name of the dataset.</p>
    pub fn get_data_set_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_set_name
    }
    /// Consumes the builder and constructs a [`AnalyticsDataSetsResult`](crate::types::AnalyticsDataSetsResult).
    pub fn build(self) -> crate::types::AnalyticsDataSetsResult {
        crate::types::AnalyticsDataSetsResult {
            data_set_id: self.data_set_id,
            data_set_name: self.data_set_name,
        }
    }
}
