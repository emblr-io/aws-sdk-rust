// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filters to be applied to search results.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AgentStatusSearchFilter {
    /// <p>An object that can be used to specify Tag conditions inside the <code>SearchFilter</code>. This accepts an <code>OR</code> of <code>AND</code> (List of List) input where:</p>
    /// <ul>
    /// <li>
    /// <p>The top level list specifies conditions that need to be applied with <code>OR</code> operator.</p></li>
    /// <li>
    /// <p>The inner list specifies conditions that need to be applied with <code>AND</code> operator.</p></li>
    /// </ul>
    pub attribute_filter: ::std::option::Option<crate::types::ControlPlaneAttributeFilter>,
}
impl AgentStatusSearchFilter {
    /// <p>An object that can be used to specify Tag conditions inside the <code>SearchFilter</code>. This accepts an <code>OR</code> of <code>AND</code> (List of List) input where:</p>
    /// <ul>
    /// <li>
    /// <p>The top level list specifies conditions that need to be applied with <code>OR</code> operator.</p></li>
    /// <li>
    /// <p>The inner list specifies conditions that need to be applied with <code>AND</code> operator.</p></li>
    /// </ul>
    pub fn attribute_filter(&self) -> ::std::option::Option<&crate::types::ControlPlaneAttributeFilter> {
        self.attribute_filter.as_ref()
    }
}
impl AgentStatusSearchFilter {
    /// Creates a new builder-style object to manufacture [`AgentStatusSearchFilter`](crate::types::AgentStatusSearchFilter).
    pub fn builder() -> crate::types::builders::AgentStatusSearchFilterBuilder {
        crate::types::builders::AgentStatusSearchFilterBuilder::default()
    }
}

/// A builder for [`AgentStatusSearchFilter`](crate::types::AgentStatusSearchFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AgentStatusSearchFilterBuilder {
    pub(crate) attribute_filter: ::std::option::Option<crate::types::ControlPlaneAttributeFilter>,
}
impl AgentStatusSearchFilterBuilder {
    /// <p>An object that can be used to specify Tag conditions inside the <code>SearchFilter</code>. This accepts an <code>OR</code> of <code>AND</code> (List of List) input where:</p>
    /// <ul>
    /// <li>
    /// <p>The top level list specifies conditions that need to be applied with <code>OR</code> operator.</p></li>
    /// <li>
    /// <p>The inner list specifies conditions that need to be applied with <code>AND</code> operator.</p></li>
    /// </ul>
    pub fn attribute_filter(mut self, input: crate::types::ControlPlaneAttributeFilter) -> Self {
        self.attribute_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that can be used to specify Tag conditions inside the <code>SearchFilter</code>. This accepts an <code>OR</code> of <code>AND</code> (List of List) input where:</p>
    /// <ul>
    /// <li>
    /// <p>The top level list specifies conditions that need to be applied with <code>OR</code> operator.</p></li>
    /// <li>
    /// <p>The inner list specifies conditions that need to be applied with <code>AND</code> operator.</p></li>
    /// </ul>
    pub fn set_attribute_filter(mut self, input: ::std::option::Option<crate::types::ControlPlaneAttributeFilter>) -> Self {
        self.attribute_filter = input;
        self
    }
    /// <p>An object that can be used to specify Tag conditions inside the <code>SearchFilter</code>. This accepts an <code>OR</code> of <code>AND</code> (List of List) input where:</p>
    /// <ul>
    /// <li>
    /// <p>The top level list specifies conditions that need to be applied with <code>OR</code> operator.</p></li>
    /// <li>
    /// <p>The inner list specifies conditions that need to be applied with <code>AND</code> operator.</p></li>
    /// </ul>
    pub fn get_attribute_filter(&self) -> &::std::option::Option<crate::types::ControlPlaneAttributeFilter> {
        &self.attribute_filter
    }
    /// Consumes the builder and constructs a [`AgentStatusSearchFilter`](crate::types::AgentStatusSearchFilter).
    pub fn build(self) -> crate::types::AgentStatusSearchFilter {
        crate::types::AgentStatusSearchFilter {
            attribute_filter: self.attribute_filter,
        }
    }
}
