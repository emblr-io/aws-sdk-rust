// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A value for a segment attribute. This is structured as a map where the key is <code>valueString</code> and the value is a string.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SegmentAttributeValue {
    /// <p>The value of a segment attribute.</p>
    pub value_string: ::std::option::Option<::std::string::String>,
    /// <p>The value of a segment attribute.</p>
    pub value_map: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SegmentAttributeValue>>,
    /// <p>The value of a segment attribute.</p>
    pub value_integer: ::std::option::Option<i32>,
}
impl SegmentAttributeValue {
    /// <p>The value of a segment attribute.</p>
    pub fn value_string(&self) -> ::std::option::Option<&str> {
        self.value_string.as_deref()
    }
    /// <p>The value of a segment attribute.</p>
    pub fn value_map(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::SegmentAttributeValue>> {
        self.value_map.as_ref()
    }
    /// <p>The value of a segment attribute.</p>
    pub fn value_integer(&self) -> ::std::option::Option<i32> {
        self.value_integer
    }
}
impl SegmentAttributeValue {
    /// Creates a new builder-style object to manufacture [`SegmentAttributeValue`](crate::types::SegmentAttributeValue).
    pub fn builder() -> crate::types::builders::SegmentAttributeValueBuilder {
        crate::types::builders::SegmentAttributeValueBuilder::default()
    }
}

/// A builder for [`SegmentAttributeValue`](crate::types::SegmentAttributeValue).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SegmentAttributeValueBuilder {
    pub(crate) value_string: ::std::option::Option<::std::string::String>,
    pub(crate) value_map: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SegmentAttributeValue>>,
    pub(crate) value_integer: ::std::option::Option<i32>,
}
impl SegmentAttributeValueBuilder {
    /// <p>The value of a segment attribute.</p>
    pub fn value_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value_string = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of a segment attribute.</p>
    pub fn set_value_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value_string = input;
        self
    }
    /// <p>The value of a segment attribute.</p>
    pub fn get_value_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.value_string
    }
    /// Adds a key-value pair to `value_map`.
    ///
    /// To override the contents of this collection use [`set_value_map`](Self::set_value_map).
    ///
    /// <p>The value of a segment attribute.</p>
    pub fn value_map(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::SegmentAttributeValue) -> Self {
        let mut hash_map = self.value_map.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.value_map = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The value of a segment attribute.</p>
    pub fn set_value_map(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SegmentAttributeValue>>,
    ) -> Self {
        self.value_map = input;
        self
    }
    /// <p>The value of a segment attribute.</p>
    pub fn get_value_map(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SegmentAttributeValue>> {
        &self.value_map
    }
    /// <p>The value of a segment attribute.</p>
    pub fn value_integer(mut self, input: i32) -> Self {
        self.value_integer = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of a segment attribute.</p>
    pub fn set_value_integer(mut self, input: ::std::option::Option<i32>) -> Self {
        self.value_integer = input;
        self
    }
    /// <p>The value of a segment attribute.</p>
    pub fn get_value_integer(&self) -> &::std::option::Option<i32> {
        &self.value_integer
    }
    /// Consumes the builder and constructs a [`SegmentAttributeValue`](crate::types::SegmentAttributeValue).
    pub fn build(self) -> crate::types::SegmentAttributeValue {
        crate::types::SegmentAttributeValue {
            value_string: self.value_string,
            value_map: self.value_map,
            value_integer: self.value_integer,
        }
    }
}
