// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Latest routing criteria on the contact.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RoutingCriteria {
    /// <p>List of routing steps. When Amazon Connect does not find an available agent meeting the requirements in a step for a given step duration, the routing criteria will move on to the next step sequentially until a join is completed with an agent. When all steps are exhausted, the contact will be offered to any agent in the queue.</p>
    pub steps: ::std::option::Option<::std::vec::Vec<crate::types::Step>>,
    /// <p>The timestamp indicating when the routing criteria is set to active. A routing criteria is activated when contact is transferred to a queue. ActivationTimestamp will be set on routing criteria for contacts in agent queue even though Routing criteria is never activated for contacts in agent queue.</p>
    pub activation_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Information about the index of the routing criteria.</p>
    pub index: ::std::option::Option<i32>,
}
impl RoutingCriteria {
    /// <p>List of routing steps. When Amazon Connect does not find an available agent meeting the requirements in a step for a given step duration, the routing criteria will move on to the next step sequentially until a join is completed with an agent. When all steps are exhausted, the contact will be offered to any agent in the queue.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.steps.is_none()`.
    pub fn steps(&self) -> &[crate::types::Step] {
        self.steps.as_deref().unwrap_or_default()
    }
    /// <p>The timestamp indicating when the routing criteria is set to active. A routing criteria is activated when contact is transferred to a queue. ActivationTimestamp will be set on routing criteria for contacts in agent queue even though Routing criteria is never activated for contacts in agent queue.</p>
    pub fn activation_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.activation_timestamp.as_ref()
    }
    /// <p>Information about the index of the routing criteria.</p>
    pub fn index(&self) -> ::std::option::Option<i32> {
        self.index
    }
}
impl RoutingCriteria {
    /// Creates a new builder-style object to manufacture [`RoutingCriteria`](crate::types::RoutingCriteria).
    pub fn builder() -> crate::types::builders::RoutingCriteriaBuilder {
        crate::types::builders::RoutingCriteriaBuilder::default()
    }
}

/// A builder for [`RoutingCriteria`](crate::types::RoutingCriteria).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RoutingCriteriaBuilder {
    pub(crate) steps: ::std::option::Option<::std::vec::Vec<crate::types::Step>>,
    pub(crate) activation_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) index: ::std::option::Option<i32>,
}
impl RoutingCriteriaBuilder {
    /// Appends an item to `steps`.
    ///
    /// To override the contents of this collection use [`set_steps`](Self::set_steps).
    ///
    /// <p>List of routing steps. When Amazon Connect does not find an available agent meeting the requirements in a step for a given step duration, the routing criteria will move on to the next step sequentially until a join is completed with an agent. When all steps are exhausted, the contact will be offered to any agent in the queue.</p>
    pub fn steps(mut self, input: crate::types::Step) -> Self {
        let mut v = self.steps.unwrap_or_default();
        v.push(input);
        self.steps = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of routing steps. When Amazon Connect does not find an available agent meeting the requirements in a step for a given step duration, the routing criteria will move on to the next step sequentially until a join is completed with an agent. When all steps are exhausted, the contact will be offered to any agent in the queue.</p>
    pub fn set_steps(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Step>>) -> Self {
        self.steps = input;
        self
    }
    /// <p>List of routing steps. When Amazon Connect does not find an available agent meeting the requirements in a step for a given step duration, the routing criteria will move on to the next step sequentially until a join is completed with an agent. When all steps are exhausted, the contact will be offered to any agent in the queue.</p>
    pub fn get_steps(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Step>> {
        &self.steps
    }
    /// <p>The timestamp indicating when the routing criteria is set to active. A routing criteria is activated when contact is transferred to a queue. ActivationTimestamp will be set on routing criteria for contacts in agent queue even though Routing criteria is never activated for contacts in agent queue.</p>
    pub fn activation_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.activation_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp indicating when the routing criteria is set to active. A routing criteria is activated when contact is transferred to a queue. ActivationTimestamp will be set on routing criteria for contacts in agent queue even though Routing criteria is never activated for contacts in agent queue.</p>
    pub fn set_activation_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.activation_timestamp = input;
        self
    }
    /// <p>The timestamp indicating when the routing criteria is set to active. A routing criteria is activated when contact is transferred to a queue. ActivationTimestamp will be set on routing criteria for contacts in agent queue even though Routing criteria is never activated for contacts in agent queue.</p>
    pub fn get_activation_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.activation_timestamp
    }
    /// <p>Information about the index of the routing criteria.</p>
    pub fn index(mut self, input: i32) -> Self {
        self.index = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the index of the routing criteria.</p>
    pub fn set_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.index = input;
        self
    }
    /// <p>Information about the index of the routing criteria.</p>
    pub fn get_index(&self) -> &::std::option::Option<i32> {
        &self.index
    }
    /// Consumes the builder and constructs a [`RoutingCriteria`](crate::types::RoutingCriteria).
    pub fn build(self) -> crate::types::RoutingCriteria {
        crate::types::RoutingCriteria {
            steps: self.steps,
            activation_timestamp: self.activation_timestamp,
            index: self.index,
        }
    }
}
