// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about how agent, bot, and customer interact in a chat contact.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ChatMetrics {
    /// <p>Information about the overall participant interactions at the contact level.</p>
    pub chat_contact_metrics: ::std::option::Option<crate::types::ChatContactMetrics>,
    /// <p>Information about agent interactions in a contact.</p>
    pub agent_metrics: ::std::option::Option<crate::types::ParticipantMetrics>,
    /// <p>Information about customer interactions in a contact.</p>
    pub customer_metrics: ::std::option::Option<crate::types::ParticipantMetrics>,
}
impl ChatMetrics {
    /// <p>Information about the overall participant interactions at the contact level.</p>
    pub fn chat_contact_metrics(&self) -> ::std::option::Option<&crate::types::ChatContactMetrics> {
        self.chat_contact_metrics.as_ref()
    }
    /// <p>Information about agent interactions in a contact.</p>
    pub fn agent_metrics(&self) -> ::std::option::Option<&crate::types::ParticipantMetrics> {
        self.agent_metrics.as_ref()
    }
    /// <p>Information about customer interactions in a contact.</p>
    pub fn customer_metrics(&self) -> ::std::option::Option<&crate::types::ParticipantMetrics> {
        self.customer_metrics.as_ref()
    }
}
impl ChatMetrics {
    /// Creates a new builder-style object to manufacture [`ChatMetrics`](crate::types::ChatMetrics).
    pub fn builder() -> crate::types::builders::ChatMetricsBuilder {
        crate::types::builders::ChatMetricsBuilder::default()
    }
}

/// A builder for [`ChatMetrics`](crate::types::ChatMetrics).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ChatMetricsBuilder {
    pub(crate) chat_contact_metrics: ::std::option::Option<crate::types::ChatContactMetrics>,
    pub(crate) agent_metrics: ::std::option::Option<crate::types::ParticipantMetrics>,
    pub(crate) customer_metrics: ::std::option::Option<crate::types::ParticipantMetrics>,
}
impl ChatMetricsBuilder {
    /// <p>Information about the overall participant interactions at the contact level.</p>
    pub fn chat_contact_metrics(mut self, input: crate::types::ChatContactMetrics) -> Self {
        self.chat_contact_metrics = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the overall participant interactions at the contact level.</p>
    pub fn set_chat_contact_metrics(mut self, input: ::std::option::Option<crate::types::ChatContactMetrics>) -> Self {
        self.chat_contact_metrics = input;
        self
    }
    /// <p>Information about the overall participant interactions at the contact level.</p>
    pub fn get_chat_contact_metrics(&self) -> &::std::option::Option<crate::types::ChatContactMetrics> {
        &self.chat_contact_metrics
    }
    /// <p>Information about agent interactions in a contact.</p>
    pub fn agent_metrics(mut self, input: crate::types::ParticipantMetrics) -> Self {
        self.agent_metrics = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about agent interactions in a contact.</p>
    pub fn set_agent_metrics(mut self, input: ::std::option::Option<crate::types::ParticipantMetrics>) -> Self {
        self.agent_metrics = input;
        self
    }
    /// <p>Information about agent interactions in a contact.</p>
    pub fn get_agent_metrics(&self) -> &::std::option::Option<crate::types::ParticipantMetrics> {
        &self.agent_metrics
    }
    /// <p>Information about customer interactions in a contact.</p>
    pub fn customer_metrics(mut self, input: crate::types::ParticipantMetrics) -> Self {
        self.customer_metrics = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about customer interactions in a contact.</p>
    pub fn set_customer_metrics(mut self, input: ::std::option::Option<crate::types::ParticipantMetrics>) -> Self {
        self.customer_metrics = input;
        self
    }
    /// <p>Information about customer interactions in a contact.</p>
    pub fn get_customer_metrics(&self) -> &::std::option::Option<crate::types::ParticipantMetrics> {
        &self.customer_metrics
    }
    /// Consumes the builder and constructs a [`ChatMetrics`](crate::types::ChatMetrics).
    pub fn build(self) -> crate::types::ChatMetrics {
        crate::types::ChatMetrics {
            chat_contact_metrics: self.chat_contact_metrics,
            agent_metrics: self.agent_metrics,
            customer_metrics: self.customer_metrics,
        }
    }
}
