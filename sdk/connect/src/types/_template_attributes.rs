// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the template attributes.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TemplateAttributes {
    /// <p>An object that specifies the custom attributes values to use for variables in the message template. This object contains different categories of key-value pairs. Each key defines a variable or placeholder in the message template.</p>
    pub custom_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>An object that specifies the customer profile attributes values to use for variables in the message template. This object contains different categories of key-value pairs. Each key defines a variable or placeholder in the message template.</p>
    pub customer_profile_attributes: ::std::option::Option<::std::string::String>,
}
impl TemplateAttributes {
    /// <p>An object that specifies the custom attributes values to use for variables in the message template. This object contains different categories of key-value pairs. Each key defines a variable or placeholder in the message template.</p>
    pub fn custom_attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.custom_attributes.as_ref()
    }
    /// <p>An object that specifies the customer profile attributes values to use for variables in the message template. This object contains different categories of key-value pairs. Each key defines a variable or placeholder in the message template.</p>
    pub fn customer_profile_attributes(&self) -> ::std::option::Option<&str> {
        self.customer_profile_attributes.as_deref()
    }
}
impl TemplateAttributes {
    /// Creates a new builder-style object to manufacture [`TemplateAttributes`](crate::types::TemplateAttributes).
    pub fn builder() -> crate::types::builders::TemplateAttributesBuilder {
        crate::types::builders::TemplateAttributesBuilder::default()
    }
}

/// A builder for [`TemplateAttributes`](crate::types::TemplateAttributes).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TemplateAttributesBuilder {
    pub(crate) custom_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) customer_profile_attributes: ::std::option::Option<::std::string::String>,
}
impl TemplateAttributesBuilder {
    /// Adds a key-value pair to `custom_attributes`.
    ///
    /// To override the contents of this collection use [`set_custom_attributes`](Self::set_custom_attributes).
    ///
    /// <p>An object that specifies the custom attributes values to use for variables in the message template. This object contains different categories of key-value pairs. Each key defines a variable or placeholder in the message template.</p>
    pub fn custom_attributes(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.custom_attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.custom_attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>An object that specifies the custom attributes values to use for variables in the message template. This object contains different categories of key-value pairs. Each key defines a variable or placeholder in the message template.</p>
    pub fn set_custom_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.custom_attributes = input;
        self
    }
    /// <p>An object that specifies the custom attributes values to use for variables in the message template. This object contains different categories of key-value pairs. Each key defines a variable or placeholder in the message template.</p>
    pub fn get_custom_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.custom_attributes
    }
    /// <p>An object that specifies the customer profile attributes values to use for variables in the message template. This object contains different categories of key-value pairs. Each key defines a variable or placeholder in the message template.</p>
    pub fn customer_profile_attributes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_profile_attributes = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An object that specifies the customer profile attributes values to use for variables in the message template. This object contains different categories of key-value pairs. Each key defines a variable or placeholder in the message template.</p>
    pub fn set_customer_profile_attributes(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_profile_attributes = input;
        self
    }
    /// <p>An object that specifies the customer profile attributes values to use for variables in the message template. This object contains different categories of key-value pairs. Each key defines a variable or placeholder in the message template.</p>
    pub fn get_customer_profile_attributes(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_profile_attributes
    }
    /// Consumes the builder and constructs a [`TemplateAttributes`](crate::types::TemplateAttributes).
    pub fn build(self) -> crate::types::TemplateAttributes {
        crate::types::TemplateAttributes {
            custom_attributes: self.custom_attributes,
            customer_profile_attributes: self.customer_profile_attributes,
        }
    }
}
