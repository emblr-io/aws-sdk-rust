// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of conditions which would be applied together with an <code>AND</code> condition.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CommonAttributeAndCondition {
    /// <p>A leaf node condition which can be used to specify a tag condition.</p>
    pub tag_conditions: ::std::option::Option<::std::vec::Vec<crate::types::TagCondition>>,
}
impl CommonAttributeAndCondition {
    /// <p>A leaf node condition which can be used to specify a tag condition.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tag_conditions.is_none()`.
    pub fn tag_conditions(&self) -> &[crate::types::TagCondition] {
        self.tag_conditions.as_deref().unwrap_or_default()
    }
}
impl CommonAttributeAndCondition {
    /// Creates a new builder-style object to manufacture [`CommonAttributeAndCondition`](crate::types::CommonAttributeAndCondition).
    pub fn builder() -> crate::types::builders::CommonAttributeAndConditionBuilder {
        crate::types::builders::CommonAttributeAndConditionBuilder::default()
    }
}

/// A builder for [`CommonAttributeAndCondition`](crate::types::CommonAttributeAndCondition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CommonAttributeAndConditionBuilder {
    pub(crate) tag_conditions: ::std::option::Option<::std::vec::Vec<crate::types::TagCondition>>,
}
impl CommonAttributeAndConditionBuilder {
    /// Appends an item to `tag_conditions`.
    ///
    /// To override the contents of this collection use [`set_tag_conditions`](Self::set_tag_conditions).
    ///
    /// <p>A leaf node condition which can be used to specify a tag condition.</p>
    pub fn tag_conditions(mut self, input: crate::types::TagCondition) -> Self {
        let mut v = self.tag_conditions.unwrap_or_default();
        v.push(input);
        self.tag_conditions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A leaf node condition which can be used to specify a tag condition.</p>
    pub fn set_tag_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagCondition>>) -> Self {
        self.tag_conditions = input;
        self
    }
    /// <p>A leaf node condition which can be used to specify a tag condition.</p>
    pub fn get_tag_conditions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagCondition>> {
        &self.tag_conditions
    }
    /// Consumes the builder and constructs a [`CommonAttributeAndCondition`](crate::types::CommonAttributeAndCondition).
    pub fn build(self) -> crate::types::CommonAttributeAndCondition {
        crate::types::CommonAttributeAndCondition {
            tag_conditions: self.tag_conditions,
        }
    }
}
