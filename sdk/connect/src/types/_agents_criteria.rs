// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Can be used to define a list of preferred agents to target the contact to within the queue.  Note that agents must have the queue in their routing profile in order to be offered the  contact.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AgentsCriteria {
    /// <p>An object to specify a list of agents, by user ID.</p>
    pub agent_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AgentsCriteria {
    /// <p>An object to specify a list of agents, by user ID.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.agent_ids.is_none()`.
    pub fn agent_ids(&self) -> &[::std::string::String] {
        self.agent_ids.as_deref().unwrap_or_default()
    }
}
impl AgentsCriteria {
    /// Creates a new builder-style object to manufacture [`AgentsCriteria`](crate::types::AgentsCriteria).
    pub fn builder() -> crate::types::builders::AgentsCriteriaBuilder {
        crate::types::builders::AgentsCriteriaBuilder::default()
    }
}

/// A builder for [`AgentsCriteria`](crate::types::AgentsCriteria).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AgentsCriteriaBuilder {
    pub(crate) agent_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AgentsCriteriaBuilder {
    /// Appends an item to `agent_ids`.
    ///
    /// To override the contents of this collection use [`set_agent_ids`](Self::set_agent_ids).
    ///
    /// <p>An object to specify a list of agents, by user ID.</p>
    pub fn agent_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.agent_ids.unwrap_or_default();
        v.push(input.into());
        self.agent_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>An object to specify a list of agents, by user ID.</p>
    pub fn set_agent_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.agent_ids = input;
        self
    }
    /// <p>An object to specify a list of agents, by user ID.</p>
    pub fn get_agent_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.agent_ids
    }
    /// Consumes the builder and constructs a [`AgentsCriteria`](crate::types::AgentsCriteria).
    pub fn build(self) -> crate::types::AgentsCriteria {
        crate::types::AgentsCriteria { agent_ids: self.agent_ids }
    }
}
