// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the hours of operations with the effective override applied.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EffectiveHoursOfOperations {
    /// <p>The date that the hours of operation or overrides applies to.</p>
    pub date: ::std::option::Option<::std::string::String>,
    /// <p>Information about the hours of operations with the effective override applied.</p>
    pub operational_hours: ::std::option::Option<::std::vec::Vec<crate::types::OperationalHour>>,
}
impl EffectiveHoursOfOperations {
    /// <p>The date that the hours of operation or overrides applies to.</p>
    pub fn date(&self) -> ::std::option::Option<&str> {
        self.date.as_deref()
    }
    /// <p>Information about the hours of operations with the effective override applied.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.operational_hours.is_none()`.
    pub fn operational_hours(&self) -> &[crate::types::OperationalHour] {
        self.operational_hours.as_deref().unwrap_or_default()
    }
}
impl EffectiveHoursOfOperations {
    /// Creates a new builder-style object to manufacture [`EffectiveHoursOfOperations`](crate::types::EffectiveHoursOfOperations).
    pub fn builder() -> crate::types::builders::EffectiveHoursOfOperationsBuilder {
        crate::types::builders::EffectiveHoursOfOperationsBuilder::default()
    }
}

/// A builder for [`EffectiveHoursOfOperations`](crate::types::EffectiveHoursOfOperations).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EffectiveHoursOfOperationsBuilder {
    pub(crate) date: ::std::option::Option<::std::string::String>,
    pub(crate) operational_hours: ::std::option::Option<::std::vec::Vec<crate::types::OperationalHour>>,
}
impl EffectiveHoursOfOperationsBuilder {
    /// <p>The date that the hours of operation or overrides applies to.</p>
    pub fn date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date that the hours of operation or overrides applies to.</p>
    pub fn set_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.date = input;
        self
    }
    /// <p>The date that the hours of operation or overrides applies to.</p>
    pub fn get_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.date
    }
    /// Appends an item to `operational_hours`.
    ///
    /// To override the contents of this collection use [`set_operational_hours`](Self::set_operational_hours).
    ///
    /// <p>Information about the hours of operations with the effective override applied.</p>
    pub fn operational_hours(mut self, input: crate::types::OperationalHour) -> Self {
        let mut v = self.operational_hours.unwrap_or_default();
        v.push(input);
        self.operational_hours = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the hours of operations with the effective override applied.</p>
    pub fn set_operational_hours(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OperationalHour>>) -> Self {
        self.operational_hours = input;
        self
    }
    /// <p>Information about the hours of operations with the effective override applied.</p>
    pub fn get_operational_hours(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OperationalHour>> {
        &self.operational_hours
    }
    /// Consumes the builder and constructs a [`EffectiveHoursOfOperations`](crate::types::EffectiveHoursOfOperations).
    pub fn build(self) -> crate::types::EffectiveHoursOfOperations {
        crate::types::EffectiveHoursOfOperations {
            date: self.date,
            operational_hours: self.operational_hours,
        }
    }
}
