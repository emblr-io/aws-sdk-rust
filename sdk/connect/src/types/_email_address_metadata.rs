// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an email address for a contact center.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EmailAddressMetadata {
    /// <p>The identifier of the email address.</p>
    pub email_address_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the email address.</p>
    pub email_address_arn: ::std::option::Option<::std::string::String>,
    /// <p>The email address, including the domain.</p>
    pub email_address: ::std::option::Option<::std::string::String>,
    /// <p>The description of the email address.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The display name of email address.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
}
impl EmailAddressMetadata {
    /// <p>The identifier of the email address.</p>
    pub fn email_address_id(&self) -> ::std::option::Option<&str> {
        self.email_address_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the email address.</p>
    pub fn email_address_arn(&self) -> ::std::option::Option<&str> {
        self.email_address_arn.as_deref()
    }
    /// <p>The email address, including the domain.</p>
    pub fn email_address(&self) -> ::std::option::Option<&str> {
        self.email_address.as_deref()
    }
    /// <p>The description of the email address.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The display name of email address.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
}
impl ::std::fmt::Debug for EmailAddressMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EmailAddressMetadata");
        formatter.field("email_address_id", &self.email_address_id);
        formatter.field("email_address_arn", &self.email_address_arn);
        formatter.field("email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl EmailAddressMetadata {
    /// Creates a new builder-style object to manufacture [`EmailAddressMetadata`](crate::types::EmailAddressMetadata).
    pub fn builder() -> crate::types::builders::EmailAddressMetadataBuilder {
        crate::types::builders::EmailAddressMetadataBuilder::default()
    }
}

/// A builder for [`EmailAddressMetadata`](crate::types::EmailAddressMetadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct EmailAddressMetadataBuilder {
    pub(crate) email_address_id: ::std::option::Option<::std::string::String>,
    pub(crate) email_address_arn: ::std::option::Option<::std::string::String>,
    pub(crate) email_address: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
}
impl EmailAddressMetadataBuilder {
    /// <p>The identifier of the email address.</p>
    pub fn email_address_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email_address_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the email address.</p>
    pub fn set_email_address_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email_address_id = input;
        self
    }
    /// <p>The identifier of the email address.</p>
    pub fn get_email_address_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.email_address_id
    }
    /// <p>The Amazon Resource Name (ARN) of the email address.</p>
    pub fn email_address_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email_address_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the email address.</p>
    pub fn set_email_address_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email_address_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the email address.</p>
    pub fn get_email_address_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.email_address_arn
    }
    /// <p>The email address, including the domain.</p>
    pub fn email_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address, including the domain.</p>
    pub fn set_email_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email_address = input;
        self
    }
    /// <p>The email address, including the domain.</p>
    pub fn get_email_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.email_address
    }
    /// <p>The description of the email address.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the email address.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the email address.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The display name of email address.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of email address.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name of email address.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// Consumes the builder and constructs a [`EmailAddressMetadata`](crate::types::EmailAddressMetadata).
    pub fn build(self) -> crate::types::EmailAddressMetadata {
        crate::types::EmailAddressMetadata {
            email_address_id: self.email_address_id,
            email_address_arn: self.email_address_arn,
            email_address: self.email_address,
            description: self.description,
            display_name: self.display_name,
        }
    }
}
impl ::std::fmt::Debug for EmailAddressMetadataBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EmailAddressMetadataBuilder");
        formatter.field("email_address_id", &self.email_address_id);
        formatter.field("email_address_arn", &self.email_address_arn);
        formatter.field("email_address", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
