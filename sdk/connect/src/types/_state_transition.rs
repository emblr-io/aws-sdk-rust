// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the state transition of a supervisor.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StateTransition {
    /// <p>The state of the transition.</p>
    pub state: ::std::option::Option<crate::types::ParticipantState>,
    /// <p>The date and time when the state started in UTC time.</p>
    pub state_start_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when the state ended in UTC time.</p>
    pub state_end_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl StateTransition {
    /// <p>The state of the transition.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::ParticipantState> {
        self.state.as_ref()
    }
    /// <p>The date and time when the state started in UTC time.</p>
    pub fn state_start_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.state_start_timestamp.as_ref()
    }
    /// <p>The date and time when the state ended in UTC time.</p>
    pub fn state_end_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.state_end_timestamp.as_ref()
    }
}
impl StateTransition {
    /// Creates a new builder-style object to manufacture [`StateTransition`](crate::types::StateTransition).
    pub fn builder() -> crate::types::builders::StateTransitionBuilder {
        crate::types::builders::StateTransitionBuilder::default()
    }
}

/// A builder for [`StateTransition`](crate::types::StateTransition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StateTransitionBuilder {
    pub(crate) state: ::std::option::Option<crate::types::ParticipantState>,
    pub(crate) state_start_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) state_end_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl StateTransitionBuilder {
    /// <p>The state of the transition.</p>
    pub fn state(mut self, input: crate::types::ParticipantState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the transition.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::ParticipantState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the transition.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::ParticipantState> {
        &self.state
    }
    /// <p>The date and time when the state started in UTC time.</p>
    pub fn state_start_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.state_start_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the state started in UTC time.</p>
    pub fn set_state_start_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.state_start_timestamp = input;
        self
    }
    /// <p>The date and time when the state started in UTC time.</p>
    pub fn get_state_start_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.state_start_timestamp
    }
    /// <p>The date and time when the state ended in UTC time.</p>
    pub fn state_end_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.state_end_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the state ended in UTC time.</p>
    pub fn set_state_end_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.state_end_timestamp = input;
        self
    }
    /// <p>The date and time when the state ended in UTC time.</p>
    pub fn get_state_end_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.state_end_timestamp
    }
    /// Consumes the builder and constructs a [`StateTransition`](crate::types::StateTransition).
    pub fn build(self) -> crate::types::StateTransition {
        crate::types::StateTransition {
            state: self.state,
            state_start_timestamp: self.state_start_timestamp,
            state_end_timestamp: self.state_end_timestamp,
        }
    }
}
