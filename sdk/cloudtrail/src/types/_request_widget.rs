// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a widget on a CloudTrail Lake dashboard.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RequestWidget {
    /// <p>The query statement for the widget. For custom dashboard widgets, you can query across multiple event data stores as long as all event data stores exist in your account.</p><note>
    /// <p>When a query uses <code>?</code> with <code>eventTime</code>, <code>?</code> must be surrounded by single quotes as follows: <code>'?'</code>.</p>
    /// </note>
    pub query_statement: ::std::string::String,
    /// <p>The optional query parameters. The following query parameters are valid: <code>$StartTime$</code>, <code>$EndTime$</code>, and <code>$Period$</code>.</p>
    pub query_parameters: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The view properties for the widget. For more information about view properties, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/lake-widget-properties.html"> View properties for widgets </a> in the <i>CloudTrail User Guide</i>.</p>
    pub view_properties: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
}
impl RequestWidget {
    /// <p>The query statement for the widget. For custom dashboard widgets, you can query across multiple event data stores as long as all event data stores exist in your account.</p><note>
    /// <p>When a query uses <code>?</code> with <code>eventTime</code>, <code>?</code> must be surrounded by single quotes as follows: <code>'?'</code>.</p>
    /// </note>
    pub fn query_statement(&self) -> &str {
        use std::ops::Deref;
        self.query_statement.deref()
    }
    /// <p>The optional query parameters. The following query parameters are valid: <code>$StartTime$</code>, <code>$EndTime$</code>, and <code>$Period$</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.query_parameters.is_none()`.
    pub fn query_parameters(&self) -> &[::std::string::String] {
        self.query_parameters.as_deref().unwrap_or_default()
    }
    /// <p>The view properties for the widget. For more information about view properties, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/lake-widget-properties.html"> View properties for widgets </a> in the <i>CloudTrail User Guide</i>.</p>
    pub fn view_properties(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.view_properties
    }
}
impl RequestWidget {
    /// Creates a new builder-style object to manufacture [`RequestWidget`](crate::types::RequestWidget).
    pub fn builder() -> crate::types::builders::RequestWidgetBuilder {
        crate::types::builders::RequestWidgetBuilder::default()
    }
}

/// A builder for [`RequestWidget`](crate::types::RequestWidget).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RequestWidgetBuilder {
    pub(crate) query_statement: ::std::option::Option<::std::string::String>,
    pub(crate) query_parameters: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) view_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl RequestWidgetBuilder {
    /// <p>The query statement for the widget. For custom dashboard widgets, you can query across multiple event data stores as long as all event data stores exist in your account.</p><note>
    /// <p>When a query uses <code>?</code> with <code>eventTime</code>, <code>?</code> must be surrounded by single quotes as follows: <code>'?'</code>.</p>
    /// </note>
    /// This field is required.
    pub fn query_statement(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query_statement = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The query statement for the widget. For custom dashboard widgets, you can query across multiple event data stores as long as all event data stores exist in your account.</p><note>
    /// <p>When a query uses <code>?</code> with <code>eventTime</code>, <code>?</code> must be surrounded by single quotes as follows: <code>'?'</code>.</p>
    /// </note>
    pub fn set_query_statement(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query_statement = input;
        self
    }
    /// <p>The query statement for the widget. For custom dashboard widgets, you can query across multiple event data stores as long as all event data stores exist in your account.</p><note>
    /// <p>When a query uses <code>?</code> with <code>eventTime</code>, <code>?</code> must be surrounded by single quotes as follows: <code>'?'</code>.</p>
    /// </note>
    pub fn get_query_statement(&self) -> &::std::option::Option<::std::string::String> {
        &self.query_statement
    }
    /// Appends an item to `query_parameters`.
    ///
    /// To override the contents of this collection use [`set_query_parameters`](Self::set_query_parameters).
    ///
    /// <p>The optional query parameters. The following query parameters are valid: <code>$StartTime$</code>, <code>$EndTime$</code>, and <code>$Period$</code>.</p>
    pub fn query_parameters(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.query_parameters.unwrap_or_default();
        v.push(input.into());
        self.query_parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The optional query parameters. The following query parameters are valid: <code>$StartTime$</code>, <code>$EndTime$</code>, and <code>$Period$</code>.</p>
    pub fn set_query_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.query_parameters = input;
        self
    }
    /// <p>The optional query parameters. The following query parameters are valid: <code>$StartTime$</code>, <code>$EndTime$</code>, and <code>$Period$</code>.</p>
    pub fn get_query_parameters(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.query_parameters
    }
    /// Adds a key-value pair to `view_properties`.
    ///
    /// To override the contents of this collection use [`set_view_properties`](Self::set_view_properties).
    ///
    /// <p>The view properties for the widget. For more information about view properties, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/lake-widget-properties.html"> View properties for widgets </a> in the <i>CloudTrail User Guide</i>.</p>
    pub fn view_properties(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.view_properties.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.view_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The view properties for the widget. For more information about view properties, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/lake-widget-properties.html"> View properties for widgets </a> in the <i>CloudTrail User Guide</i>.</p>
    pub fn set_view_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.view_properties = input;
        self
    }
    /// <p>The view properties for the widget. For more information about view properties, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/lake-widget-properties.html"> View properties for widgets </a> in the <i>CloudTrail User Guide</i>.</p>
    pub fn get_view_properties(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.view_properties
    }
    /// Consumes the builder and constructs a [`RequestWidget`](crate::types::RequestWidget).
    /// This method will fail if any of the following fields are not set:
    /// - [`query_statement`](crate::types::builders::RequestWidgetBuilder::query_statement)
    /// - [`view_properties`](crate::types::builders::RequestWidgetBuilder::view_properties)
    pub fn build(self) -> ::std::result::Result<crate::types::RequestWidget, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RequestWidget {
            query_statement: self.query_statement.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "query_statement",
                    "query_statement was not specified but it is required when building RequestWidget",
                )
            })?,
            query_parameters: self.query_parameters,
            view_properties: self.view_properties.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "view_properties",
                    "view_properties was not specified but it is required when building RequestWidget",
                )
            })?,
        })
    }
}
