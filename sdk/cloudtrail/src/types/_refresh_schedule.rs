// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The schedule for a dashboard refresh.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RefreshSchedule {
    /// <p>The frequency at which you want the dashboard refreshed.</p>
    pub frequency: ::std::option::Option<crate::types::RefreshScheduleFrequency>,
    /// <p>Specifies whether the refresh schedule is enabled. Set the value to <code>ENABLED</code> to enable the refresh schedule, or to <code>DISABLED</code> to turn off the refresh schedule.</p>
    pub status: ::std::option::Option<crate::types::RefreshScheduleStatus>,
    /// <p>The time of day in UTC to run the schedule; for hourly only refer to minutes; default is 00:00.</p>
    pub time_of_day: ::std::option::Option<::std::string::String>,
}
impl RefreshSchedule {
    /// <p>The frequency at which you want the dashboard refreshed.</p>
    pub fn frequency(&self) -> ::std::option::Option<&crate::types::RefreshScheduleFrequency> {
        self.frequency.as_ref()
    }
    /// <p>Specifies whether the refresh schedule is enabled. Set the value to <code>ENABLED</code> to enable the refresh schedule, or to <code>DISABLED</code> to turn off the refresh schedule.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::RefreshScheduleStatus> {
        self.status.as_ref()
    }
    /// <p>The time of day in UTC to run the schedule; for hourly only refer to minutes; default is 00:00.</p>
    pub fn time_of_day(&self) -> ::std::option::Option<&str> {
        self.time_of_day.as_deref()
    }
}
impl RefreshSchedule {
    /// Creates a new builder-style object to manufacture [`RefreshSchedule`](crate::types::RefreshSchedule).
    pub fn builder() -> crate::types::builders::RefreshScheduleBuilder {
        crate::types::builders::RefreshScheduleBuilder::default()
    }
}

/// A builder for [`RefreshSchedule`](crate::types::RefreshSchedule).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RefreshScheduleBuilder {
    pub(crate) frequency: ::std::option::Option<crate::types::RefreshScheduleFrequency>,
    pub(crate) status: ::std::option::Option<crate::types::RefreshScheduleStatus>,
    pub(crate) time_of_day: ::std::option::Option<::std::string::String>,
}
impl RefreshScheduleBuilder {
    /// <p>The frequency at which you want the dashboard refreshed.</p>
    pub fn frequency(mut self, input: crate::types::RefreshScheduleFrequency) -> Self {
        self.frequency = ::std::option::Option::Some(input);
        self
    }
    /// <p>The frequency at which you want the dashboard refreshed.</p>
    pub fn set_frequency(mut self, input: ::std::option::Option<crate::types::RefreshScheduleFrequency>) -> Self {
        self.frequency = input;
        self
    }
    /// <p>The frequency at which you want the dashboard refreshed.</p>
    pub fn get_frequency(&self) -> &::std::option::Option<crate::types::RefreshScheduleFrequency> {
        &self.frequency
    }
    /// <p>Specifies whether the refresh schedule is enabled. Set the value to <code>ENABLED</code> to enable the refresh schedule, or to <code>DISABLED</code> to turn off the refresh schedule.</p>
    pub fn status(mut self, input: crate::types::RefreshScheduleStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the refresh schedule is enabled. Set the value to <code>ENABLED</code> to enable the refresh schedule, or to <code>DISABLED</code> to turn off the refresh schedule.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::RefreshScheduleStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Specifies whether the refresh schedule is enabled. Set the value to <code>ENABLED</code> to enable the refresh schedule, or to <code>DISABLED</code> to turn off the refresh schedule.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::RefreshScheduleStatus> {
        &self.status
    }
    /// <p>The time of day in UTC to run the schedule; for hourly only refer to minutes; default is 00:00.</p>
    pub fn time_of_day(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.time_of_day = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time of day in UTC to run the schedule; for hourly only refer to minutes; default is 00:00.</p>
    pub fn set_time_of_day(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.time_of_day = input;
        self
    }
    /// <p>The time of day in UTC to run the schedule; for hourly only refer to minutes; default is 00:00.</p>
    pub fn get_time_of_day(&self) -> &::std::option::Option<::std::string::String> {
        &self.time_of_day
    }
    /// Consumes the builder and constructs a [`RefreshSchedule`](crate::types::RefreshSchedule).
    pub fn build(self) -> crate::types::RefreshSchedule {
        crate::types::RefreshSchedule {
            frequency: self.frequency,
            status: self.status,
            time_of_day: self.time_of_day,
        }
    }
}
