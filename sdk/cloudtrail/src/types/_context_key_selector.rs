// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains information types to be included in CloudTrail enriched events.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContextKeySelector {
    /// <p>Specifies the type of the event record field in ContextKeySelector. Valid values include RequestContext, TagContext.</p>
    pub r#type: crate::types::Type,
    /// <p>A list of keys defined by Type to be included in CloudTrail enriched events.</p>
    pub equals: ::std::vec::Vec<::std::string::String>,
}
impl ContextKeySelector {
    /// <p>Specifies the type of the event record field in ContextKeySelector. Valid values include RequestContext, TagContext.</p>
    pub fn r#type(&self) -> &crate::types::Type {
        &self.r#type
    }
    /// <p>A list of keys defined by Type to be included in CloudTrail enriched events.</p>
    pub fn equals(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.equals.deref()
    }
}
impl ContextKeySelector {
    /// Creates a new builder-style object to manufacture [`ContextKeySelector`](crate::types::ContextKeySelector).
    pub fn builder() -> crate::types::builders::ContextKeySelectorBuilder {
        crate::types::builders::ContextKeySelectorBuilder::default()
    }
}

/// A builder for [`ContextKeySelector`](crate::types::ContextKeySelector).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContextKeySelectorBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::Type>,
    pub(crate) equals: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ContextKeySelectorBuilder {
    /// <p>Specifies the type of the event record field in ContextKeySelector. Valid values include RequestContext, TagContext.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::Type) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of the event record field in ContextKeySelector. Valid values include RequestContext, TagContext.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::Type>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Specifies the type of the event record field in ContextKeySelector. Valid values include RequestContext, TagContext.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::Type> {
        &self.r#type
    }
    /// Appends an item to `equals`.
    ///
    /// To override the contents of this collection use [`set_equals`](Self::set_equals).
    ///
    /// <p>A list of keys defined by Type to be included in CloudTrail enriched events.</p>
    pub fn equals(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.equals.unwrap_or_default();
        v.push(input.into());
        self.equals = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of keys defined by Type to be included in CloudTrail enriched events.</p>
    pub fn set_equals(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.equals = input;
        self
    }
    /// <p>A list of keys defined by Type to be included in CloudTrail enriched events.</p>
    pub fn get_equals(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.equals
    }
    /// Consumes the builder and constructs a [`ContextKeySelector`](crate::types::ContextKeySelector).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::ContextKeySelectorBuilder::type)
    /// - [`equals`](crate::types::builders::ContextKeySelectorBuilder::equals)
    pub fn build(self) -> ::std::result::Result<crate::types::ContextKeySelector, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ContextKeySelector {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building ContextKeySelector",
                )
            })?,
            equals: self.equals.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "equals",
                    "equals was not specified but it is required when building ContextKeySelector",
                )
            })?,
        })
    }
}
