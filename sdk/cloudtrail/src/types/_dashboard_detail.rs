// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about a CloudTrail Lake dashboard.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DashboardDetail {
    /// <p>The ARN for the dashboard.</p>
    pub dashboard_arn: ::std::option::Option<::std::string::String>,
    /// <p>The type of dashboard.</p>
    pub r#type: ::std::option::Option<crate::types::DashboardType>,
}
impl DashboardDetail {
    /// <p>The ARN for the dashboard.</p>
    pub fn dashboard_arn(&self) -> ::std::option::Option<&str> {
        self.dashboard_arn.as_deref()
    }
    /// <p>The type of dashboard.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::DashboardType> {
        self.r#type.as_ref()
    }
}
impl DashboardDetail {
    /// Creates a new builder-style object to manufacture [`DashboardDetail`](crate::types::DashboardDetail).
    pub fn builder() -> crate::types::builders::DashboardDetailBuilder {
        crate::types::builders::DashboardDetailBuilder::default()
    }
}

/// A builder for [`DashboardDetail`](crate::types::DashboardDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DashboardDetailBuilder {
    pub(crate) dashboard_arn: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::DashboardType>,
}
impl DashboardDetailBuilder {
    /// <p>The ARN for the dashboard.</p>
    pub fn dashboard_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dashboard_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN for the dashboard.</p>
    pub fn set_dashboard_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dashboard_arn = input;
        self
    }
    /// <p>The ARN for the dashboard.</p>
    pub fn get_dashboard_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.dashboard_arn
    }
    /// <p>The type of dashboard.</p>
    pub fn r#type(mut self, input: crate::types::DashboardType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of dashboard.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::DashboardType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of dashboard.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::DashboardType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`DashboardDetail`](crate::types::DashboardDetail).
    pub fn build(self) -> crate::types::DashboardDetail {
        crate::types::DashboardDetail {
            dashboard_arn: self.dashboard_arn,
            r#type: self.r#type,
        }
    }
}
