// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the frequency for a dashboard refresh schedule.</p>
/// <p>For a custom dashboard, you can schedule a refresh for every 1, 6, 12, or 24 hours, or every day.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RefreshScheduleFrequency {
    /// <p>The unit to use for the refresh.</p>
    /// <p>For custom dashboards, the unit can be <code>HOURS</code> or <code>DAYS</code>.</p>
    /// <p>For the Highlights dashboard, the <code>Unit</code> must be <code>HOURS</code>.</p>
    pub unit: ::std::option::Option<crate::types::RefreshScheduleFrequencyUnit>,
    /// <p>The value for the refresh schedule.</p>
    /// <p>For custom dashboards, the following values are valid when the unit is <code>HOURS</code>: <code>1</code>, <code>6</code>, <code>12</code>, <code>24</code></p>
    /// <p>For custom dashboards, the only valid value when the unit is <code>DAYS</code> is <code>1</code>.</p>
    /// <p>For the Highlights dashboard, the <code>Value</code> must be <code>6</code>.</p>
    pub value: ::std::option::Option<i32>,
}
impl RefreshScheduleFrequency {
    /// <p>The unit to use for the refresh.</p>
    /// <p>For custom dashboards, the unit can be <code>HOURS</code> or <code>DAYS</code>.</p>
    /// <p>For the Highlights dashboard, the <code>Unit</code> must be <code>HOURS</code>.</p>
    pub fn unit(&self) -> ::std::option::Option<&crate::types::RefreshScheduleFrequencyUnit> {
        self.unit.as_ref()
    }
    /// <p>The value for the refresh schedule.</p>
    /// <p>For custom dashboards, the following values are valid when the unit is <code>HOURS</code>: <code>1</code>, <code>6</code>, <code>12</code>, <code>24</code></p>
    /// <p>For custom dashboards, the only valid value when the unit is <code>DAYS</code> is <code>1</code>.</p>
    /// <p>For the Highlights dashboard, the <code>Value</code> must be <code>6</code>.</p>
    pub fn value(&self) -> ::std::option::Option<i32> {
        self.value
    }
}
impl RefreshScheduleFrequency {
    /// Creates a new builder-style object to manufacture [`RefreshScheduleFrequency`](crate::types::RefreshScheduleFrequency).
    pub fn builder() -> crate::types::builders::RefreshScheduleFrequencyBuilder {
        crate::types::builders::RefreshScheduleFrequencyBuilder::default()
    }
}

/// A builder for [`RefreshScheduleFrequency`](crate::types::RefreshScheduleFrequency).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RefreshScheduleFrequencyBuilder {
    pub(crate) unit: ::std::option::Option<crate::types::RefreshScheduleFrequencyUnit>,
    pub(crate) value: ::std::option::Option<i32>,
}
impl RefreshScheduleFrequencyBuilder {
    /// <p>The unit to use for the refresh.</p>
    /// <p>For custom dashboards, the unit can be <code>HOURS</code> or <code>DAYS</code>.</p>
    /// <p>For the Highlights dashboard, the <code>Unit</code> must be <code>HOURS</code>.</p>
    pub fn unit(mut self, input: crate::types::RefreshScheduleFrequencyUnit) -> Self {
        self.unit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The unit to use for the refresh.</p>
    /// <p>For custom dashboards, the unit can be <code>HOURS</code> or <code>DAYS</code>.</p>
    /// <p>For the Highlights dashboard, the <code>Unit</code> must be <code>HOURS</code>.</p>
    pub fn set_unit(mut self, input: ::std::option::Option<crate::types::RefreshScheduleFrequencyUnit>) -> Self {
        self.unit = input;
        self
    }
    /// <p>The unit to use for the refresh.</p>
    /// <p>For custom dashboards, the unit can be <code>HOURS</code> or <code>DAYS</code>.</p>
    /// <p>For the Highlights dashboard, the <code>Unit</code> must be <code>HOURS</code>.</p>
    pub fn get_unit(&self) -> &::std::option::Option<crate::types::RefreshScheduleFrequencyUnit> {
        &self.unit
    }
    /// <p>The value for the refresh schedule.</p>
    /// <p>For custom dashboards, the following values are valid when the unit is <code>HOURS</code>: <code>1</code>, <code>6</code>, <code>12</code>, <code>24</code></p>
    /// <p>For custom dashboards, the only valid value when the unit is <code>DAYS</code> is <code>1</code>.</p>
    /// <p>For the Highlights dashboard, the <code>Value</code> must be <code>6</code>.</p>
    pub fn value(mut self, input: i32) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value for the refresh schedule.</p>
    /// <p>For custom dashboards, the following values are valid when the unit is <code>HOURS</code>: <code>1</code>, <code>6</code>, <code>12</code>, <code>24</code></p>
    /// <p>For custom dashboards, the only valid value when the unit is <code>DAYS</code> is <code>1</code>.</p>
    /// <p>For the Highlights dashboard, the <code>Value</code> must be <code>6</code>.</p>
    pub fn set_value(mut self, input: ::std::option::Option<i32>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value for the refresh schedule.</p>
    /// <p>For custom dashboards, the following values are valid when the unit is <code>HOURS</code>: <code>1</code>, <code>6</code>, <code>12</code>, <code>24</code></p>
    /// <p>For custom dashboards, the only valid value when the unit is <code>DAYS</code> is <code>1</code>.</p>
    /// <p>For the Highlights dashboard, the <code>Value</code> must be <code>6</code>.</p>
    pub fn get_value(&self) -> &::std::option::Option<i32> {
        &self.value
    }
    /// Consumes the builder and constructs a [`RefreshScheduleFrequency`](crate::types::RefreshScheduleFrequency).
    pub fn build(self) -> crate::types::RefreshScheduleFrequency {
        crate::types::RefreshScheduleFrequency {
            unit: self.unit,
            value: self.value,
        }
    }
}
