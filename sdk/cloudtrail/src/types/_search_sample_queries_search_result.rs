// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A search result returned by the <code>SearchSampleQueries</code> operation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchSampleQueriesSearchResult {
    /// <p>The name of a sample query.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A longer description of a sample query.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The SQL code of the sample query.</p>
    pub sql: ::std::option::Option<::std::string::String>,
    /// <p>A value between 0 and 1 indicating the similarity between the search phrase and result.</p>
    pub relevance: f32,
}
impl SearchSampleQueriesSearchResult {
    /// <p>The name of a sample query.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A longer description of a sample query.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The SQL code of the sample query.</p>
    pub fn sql(&self) -> ::std::option::Option<&str> {
        self.sql.as_deref()
    }
    /// <p>A value between 0 and 1 indicating the similarity between the search phrase and result.</p>
    pub fn relevance(&self) -> f32 {
        self.relevance
    }
}
impl SearchSampleQueriesSearchResult {
    /// Creates a new builder-style object to manufacture [`SearchSampleQueriesSearchResult`](crate::types::SearchSampleQueriesSearchResult).
    pub fn builder() -> crate::types::builders::SearchSampleQueriesSearchResultBuilder {
        crate::types::builders::SearchSampleQueriesSearchResultBuilder::default()
    }
}

/// A builder for [`SearchSampleQueriesSearchResult`](crate::types::SearchSampleQueriesSearchResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SearchSampleQueriesSearchResultBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) sql: ::std::option::Option<::std::string::String>,
    pub(crate) relevance: ::std::option::Option<f32>,
}
impl SearchSampleQueriesSearchResultBuilder {
    /// <p>The name of a sample query.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a sample query.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of a sample query.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A longer description of a sample query.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A longer description of a sample query.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A longer description of a sample query.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The SQL code of the sample query.</p>
    pub fn sql(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sql = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The SQL code of the sample query.</p>
    pub fn set_sql(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sql = input;
        self
    }
    /// <p>The SQL code of the sample query.</p>
    pub fn get_sql(&self) -> &::std::option::Option<::std::string::String> {
        &self.sql
    }
    /// <p>A value between 0 and 1 indicating the similarity between the search phrase and result.</p>
    pub fn relevance(mut self, input: f32) -> Self {
        self.relevance = ::std::option::Option::Some(input);
        self
    }
    /// <p>A value between 0 and 1 indicating the similarity between the search phrase and result.</p>
    pub fn set_relevance(mut self, input: ::std::option::Option<f32>) -> Self {
        self.relevance = input;
        self
    }
    /// <p>A value between 0 and 1 indicating the similarity between the search phrase and result.</p>
    pub fn get_relevance(&self) -> &::std::option::Option<f32> {
        &self.relevance
    }
    /// Consumes the builder and constructs a [`SearchSampleQueriesSearchResult`](crate::types::SearchSampleQueriesSearchResult).
    pub fn build(self) -> crate::types::SearchSampleQueriesSearchResult {
        crate::types::SearchSampleQueriesSearchResult {
            name: self.name,
            description: self.description,
            sql: self.sql,
            relevance: self.relevance.unwrap_or_default(),
        }
    }
}
