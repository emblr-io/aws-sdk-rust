// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchSampleQueriesInput {
    /// <p>The natural language phrase to use for the semantic search. The phrase must be in English. The length constraint is in characters, not words.</p>
    pub search_phrase: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return on a single page. The default value is 10.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>A token you can use to get the next page of results. The length constraint is in characters, not words.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl SearchSampleQueriesInput {
    /// <p>The natural language phrase to use for the semantic search. The phrase must be in English. The length constraint is in characters, not words.</p>
    pub fn search_phrase(&self) -> ::std::option::Option<&str> {
        self.search_phrase.as_deref()
    }
    /// <p>The maximum number of results to return on a single page. The default value is 10.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>A token you can use to get the next page of results. The length constraint is in characters, not words.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl SearchSampleQueriesInput {
    /// Creates a new builder-style object to manufacture [`SearchSampleQueriesInput`](crate::operation::search_sample_queries::SearchSampleQueriesInput).
    pub fn builder() -> crate::operation::search_sample_queries::builders::SearchSampleQueriesInputBuilder {
        crate::operation::search_sample_queries::builders::SearchSampleQueriesInputBuilder::default()
    }
}

/// A builder for [`SearchSampleQueriesInput`](crate::operation::search_sample_queries::SearchSampleQueriesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SearchSampleQueriesInputBuilder {
    pub(crate) search_phrase: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl SearchSampleQueriesInputBuilder {
    /// <p>The natural language phrase to use for the semantic search. The phrase must be in English. The length constraint is in characters, not words.</p>
    /// This field is required.
    pub fn search_phrase(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.search_phrase = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The natural language phrase to use for the semantic search. The phrase must be in English. The length constraint is in characters, not words.</p>
    pub fn set_search_phrase(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.search_phrase = input;
        self
    }
    /// <p>The natural language phrase to use for the semantic search. The phrase must be in English. The length constraint is in characters, not words.</p>
    pub fn get_search_phrase(&self) -> &::std::option::Option<::std::string::String> {
        &self.search_phrase
    }
    /// <p>The maximum number of results to return on a single page. The default value is 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return on a single page. The default value is 10.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return on a single page. The default value is 10.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>A token you can use to get the next page of results. The length constraint is in characters, not words.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token you can use to get the next page of results. The length constraint is in characters, not words.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token you can use to get the next page of results. The length constraint is in characters, not words.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`SearchSampleQueriesInput`](crate::operation::search_sample_queries::SearchSampleQueriesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::search_sample_queries::SearchSampleQueriesInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::search_sample_queries::SearchSampleQueriesInput {
            search_phrase: self.search_phrase,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
