// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartDashboardRefreshInput {
    /// <p>The name or ARN of the dashboard.</p>
    pub dashboard_id: ::std::option::Option<::std::string::String>,
    /// <p>The query parameter values for the dashboard</p>
    /// <p>For custom dashboards, the following query parameters are valid: <code>$StartTime$</code>, <code>$EndTime$</code>, and <code>$Period$</code>.</p>
    /// <p>For managed dashboards, the following query parameters are valid: <code>$StartTime$</code>, <code>$EndTime$</code>, <code>$Period$</code>, and <code>$EventDataStoreId$</code>. The <code>$EventDataStoreId$</code> query parameter is required.</p>
    pub query_parameter_values: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl StartDashboardRefreshInput {
    /// <p>The name or ARN of the dashboard.</p>
    pub fn dashboard_id(&self) -> ::std::option::Option<&str> {
        self.dashboard_id.as_deref()
    }
    /// <p>The query parameter values for the dashboard</p>
    /// <p>For custom dashboards, the following query parameters are valid: <code>$StartTime$</code>, <code>$EndTime$</code>, and <code>$Period$</code>.</p>
    /// <p>For managed dashboards, the following query parameters are valid: <code>$StartTime$</code>, <code>$EndTime$</code>, <code>$Period$</code>, and <code>$EventDataStoreId$</code>. The <code>$EventDataStoreId$</code> query parameter is required.</p>
    pub fn query_parameter_values(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.query_parameter_values.as_ref()
    }
}
impl StartDashboardRefreshInput {
    /// Creates a new builder-style object to manufacture [`StartDashboardRefreshInput`](crate::operation::start_dashboard_refresh::StartDashboardRefreshInput).
    pub fn builder() -> crate::operation::start_dashboard_refresh::builders::StartDashboardRefreshInputBuilder {
        crate::operation::start_dashboard_refresh::builders::StartDashboardRefreshInputBuilder::default()
    }
}

/// A builder for [`StartDashboardRefreshInput`](crate::operation::start_dashboard_refresh::StartDashboardRefreshInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartDashboardRefreshInputBuilder {
    pub(crate) dashboard_id: ::std::option::Option<::std::string::String>,
    pub(crate) query_parameter_values: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl StartDashboardRefreshInputBuilder {
    /// <p>The name or ARN of the dashboard.</p>
    /// This field is required.
    pub fn dashboard_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dashboard_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or ARN of the dashboard.</p>
    pub fn set_dashboard_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dashboard_id = input;
        self
    }
    /// <p>The name or ARN of the dashboard.</p>
    pub fn get_dashboard_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.dashboard_id
    }
    /// Adds a key-value pair to `query_parameter_values`.
    ///
    /// To override the contents of this collection use [`set_query_parameter_values`](Self::set_query_parameter_values).
    ///
    /// <p>The query parameter values for the dashboard</p>
    /// <p>For custom dashboards, the following query parameters are valid: <code>$StartTime$</code>, <code>$EndTime$</code>, and <code>$Period$</code>.</p>
    /// <p>For managed dashboards, the following query parameters are valid: <code>$StartTime$</code>, <code>$EndTime$</code>, <code>$Period$</code>, and <code>$EventDataStoreId$</code>. The <code>$EventDataStoreId$</code> query parameter is required.</p>
    pub fn query_parameter_values(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.query_parameter_values.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.query_parameter_values = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The query parameter values for the dashboard</p>
    /// <p>For custom dashboards, the following query parameters are valid: <code>$StartTime$</code>, <code>$EndTime$</code>, and <code>$Period$</code>.</p>
    /// <p>For managed dashboards, the following query parameters are valid: <code>$StartTime$</code>, <code>$EndTime$</code>, <code>$Period$</code>, and <code>$EventDataStoreId$</code>. The <code>$EventDataStoreId$</code> query parameter is required.</p>
    pub fn set_query_parameter_values(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.query_parameter_values = input;
        self
    }
    /// <p>The query parameter values for the dashboard</p>
    /// <p>For custom dashboards, the following query parameters are valid: <code>$StartTime$</code>, <code>$EndTime$</code>, and <code>$Period$</code>.</p>
    /// <p>For managed dashboards, the following query parameters are valid: <code>$StartTime$</code>, <code>$EndTime$</code>, <code>$Period$</code>, and <code>$EventDataStoreId$</code>. The <code>$EventDataStoreId$</code> query parameter is required.</p>
    pub fn get_query_parameter_values(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.query_parameter_values
    }
    /// Consumes the builder and constructs a [`StartDashboardRefreshInput`](crate::operation::start_dashboard_refresh::StartDashboardRefreshInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_dashboard_refresh::StartDashboardRefreshInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::start_dashboard_refresh::StartDashboardRefreshInput {
            dashboard_id: self.dashboard_id,
            query_parameter_values: self.query_parameter_values,
        })
    }
}
