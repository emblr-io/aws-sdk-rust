// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetPersonalAccessTokenMetadataOutput {
    /// <p>The Personal Access Token ID.</p>
    pub personal_access_token_id: ::std::option::Option<::std::string::String>,
    /// <p>The WorkMail User ID.</p>
    pub user_id: ::std::option::Option<::std::string::String>,
    /// <p>The Personal Access Token name.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The date when the Personal Access Token ID was created.</p>
    pub date_created: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date when the Personal Access Token ID was last used.</p>
    pub date_last_used: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time when the Personal Access Token ID will expire.</p>
    pub expires_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Lists all the Personal Access Token permissions for a mailbox.</p>
    pub scopes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl GetPersonalAccessTokenMetadataOutput {
    /// <p>The Personal Access Token ID.</p>
    pub fn personal_access_token_id(&self) -> ::std::option::Option<&str> {
        self.personal_access_token_id.as_deref()
    }
    /// <p>The WorkMail User ID.</p>
    pub fn user_id(&self) -> ::std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>The Personal Access Token name.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The date when the Personal Access Token ID was created.</p>
    pub fn date_created(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.date_created.as_ref()
    }
    /// <p>The date when the Personal Access Token ID was last used.</p>
    pub fn date_last_used(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.date_last_used.as_ref()
    }
    /// <p>The time when the Personal Access Token ID will expire.</p>
    pub fn expires_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.expires_time.as_ref()
    }
    /// <p>Lists all the Personal Access Token permissions for a mailbox.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.scopes.is_none()`.
    pub fn scopes(&self) -> &[::std::string::String] {
        self.scopes.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for GetPersonalAccessTokenMetadataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPersonalAccessTokenMetadataOutput {
    /// Creates a new builder-style object to manufacture [`GetPersonalAccessTokenMetadataOutput`](crate::operation::get_personal_access_token_metadata::GetPersonalAccessTokenMetadataOutput).
    pub fn builder() -> crate::operation::get_personal_access_token_metadata::builders::GetPersonalAccessTokenMetadataOutputBuilder {
        crate::operation::get_personal_access_token_metadata::builders::GetPersonalAccessTokenMetadataOutputBuilder::default()
    }
}

/// A builder for [`GetPersonalAccessTokenMetadataOutput`](crate::operation::get_personal_access_token_metadata::GetPersonalAccessTokenMetadataOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetPersonalAccessTokenMetadataOutputBuilder {
    pub(crate) personal_access_token_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) date_created: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) date_last_used: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) expires_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) scopes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl GetPersonalAccessTokenMetadataOutputBuilder {
    /// <p>The Personal Access Token ID.</p>
    pub fn personal_access_token_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.personal_access_token_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Personal Access Token ID.</p>
    pub fn set_personal_access_token_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.personal_access_token_id = input;
        self
    }
    /// <p>The Personal Access Token ID.</p>
    pub fn get_personal_access_token_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.personal_access_token_id
    }
    /// <p>The WorkMail User ID.</p>
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The WorkMail User ID.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The WorkMail User ID.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// <p>The Personal Access Token name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Personal Access Token name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The Personal Access Token name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The date when the Personal Access Token ID was created.</p>
    pub fn date_created(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.date_created = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the Personal Access Token ID was created.</p>
    pub fn set_date_created(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.date_created = input;
        self
    }
    /// <p>The date when the Personal Access Token ID was created.</p>
    pub fn get_date_created(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.date_created
    }
    /// <p>The date when the Personal Access Token ID was last used.</p>
    pub fn date_last_used(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.date_last_used = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the Personal Access Token ID was last used.</p>
    pub fn set_date_last_used(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.date_last_used = input;
        self
    }
    /// <p>The date when the Personal Access Token ID was last used.</p>
    pub fn get_date_last_used(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.date_last_used
    }
    /// <p>The time when the Personal Access Token ID will expire.</p>
    pub fn expires_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expires_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the Personal Access Token ID will expire.</p>
    pub fn set_expires_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expires_time = input;
        self
    }
    /// <p>The time when the Personal Access Token ID will expire.</p>
    pub fn get_expires_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expires_time
    }
    /// Appends an item to `scopes`.
    ///
    /// To override the contents of this collection use [`set_scopes`](Self::set_scopes).
    ///
    /// <p>Lists all the Personal Access Token permissions for a mailbox.</p>
    pub fn scopes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.scopes.unwrap_or_default();
        v.push(input.into());
        self.scopes = ::std::option::Option::Some(v);
        self
    }
    /// <p>Lists all the Personal Access Token permissions for a mailbox.</p>
    pub fn set_scopes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.scopes = input;
        self
    }
    /// <p>Lists all the Personal Access Token permissions for a mailbox.</p>
    pub fn get_scopes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.scopes
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetPersonalAccessTokenMetadataOutput`](crate::operation::get_personal_access_token_metadata::GetPersonalAccessTokenMetadataOutput).
    pub fn build(self) -> crate::operation::get_personal_access_token_metadata::GetPersonalAccessTokenMetadataOutput {
        crate::operation::get_personal_access_token_metadata::GetPersonalAccessTokenMetadataOutput {
            personal_access_token_id: self.personal_access_token_id,
            user_id: self.user_id,
            name: self.name,
            date_created: self.date_created,
            date_last_used: self.date_last_used,
            expires_time: self.expires_time,
            scopes: self.scopes,
            _request_id: self._request_id,
        }
    }
}
