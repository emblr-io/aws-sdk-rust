// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateClusterVersionInput {
    /// <p>The name of the Amazon EKS cluster to update.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The desired Kubernetes version following a successful update.</p>
    pub version: ::std::option::Option<::std::string::String>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
    /// <p>Set this value to <code>true</code> to override upgrade-blocking readiness checks when updating a cluster.</p>
    pub force: ::std::option::Option<bool>,
}
impl UpdateClusterVersionInput {
    /// <p>The name of the Amazon EKS cluster to update.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The desired Kubernetes version following a successful update.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>Set this value to <code>true</code> to override upgrade-blocking readiness checks when updating a cluster.</p>
    pub fn force(&self) -> ::std::option::Option<bool> {
        self.force
    }
}
impl UpdateClusterVersionInput {
    /// Creates a new builder-style object to manufacture [`UpdateClusterVersionInput`](crate::operation::update_cluster_version::UpdateClusterVersionInput).
    pub fn builder() -> crate::operation::update_cluster_version::builders::UpdateClusterVersionInputBuilder {
        crate::operation::update_cluster_version::builders::UpdateClusterVersionInputBuilder::default()
    }
}

/// A builder for [`UpdateClusterVersionInput`](crate::operation::update_cluster_version::UpdateClusterVersionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateClusterVersionInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
    pub(crate) force: ::std::option::Option<bool>,
}
impl UpdateClusterVersionInputBuilder {
    /// <p>The name of the Amazon EKS cluster to update.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon EKS cluster to update.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Amazon EKS cluster to update.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The desired Kubernetes version following a successful update.</p>
    /// This field is required.
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The desired Kubernetes version following a successful update.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The desired Kubernetes version following a successful update.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// <p>Set this value to <code>true</code> to override upgrade-blocking readiness checks when updating a cluster.</p>
    pub fn force(mut self, input: bool) -> Self {
        self.force = ::std::option::Option::Some(input);
        self
    }
    /// <p>Set this value to <code>true</code> to override upgrade-blocking readiness checks when updating a cluster.</p>
    pub fn set_force(mut self, input: ::std::option::Option<bool>) -> Self {
        self.force = input;
        self
    }
    /// <p>Set this value to <code>true</code> to override upgrade-blocking readiness checks when updating a cluster.</p>
    pub fn get_force(&self) -> &::std::option::Option<bool> {
        &self.force
    }
    /// Consumes the builder and constructs a [`UpdateClusterVersionInput`](crate::operation::update_cluster_version::UpdateClusterVersionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_cluster_version::UpdateClusterVersionInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_cluster_version::UpdateClusterVersionInput {
            name: self.name,
            version: self.version,
            client_request_token: self.client_request_token,
            force: self.force,
        })
    }
}
