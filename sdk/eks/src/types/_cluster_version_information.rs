// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about a specific EKS cluster version.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClusterVersionInformation {
    /// <p>The Kubernetes version for the cluster.</p>
    pub cluster_version: ::std::option::Option<::std::string::String>,
    /// <p>The type of cluster this version is for.</p>
    pub cluster_type: ::std::option::Option<::std::string::String>,
    /// <p>Default platform version for this Kubernetes version.</p>
    pub default_platform_version: ::std::option::Option<::std::string::String>,
    /// <p>Indicates if this is a default version.</p>
    pub default_version: bool,
    /// <p>The release date of this cluster version.</p>
    pub release_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Date when standard support ends for this version.</p>
    pub end_of_standard_support_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Date when extended support ends for this version.</p>
    pub end_of_extended_support_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <important>
    /// <p>This field is deprecated. Use <code>versionStatus</code> instead, as that field matches for input and output of this action.</p>
    /// </important>
    /// <p>Current status of this cluster version.</p>
    pub status: ::std::option::Option<crate::types::ClusterVersionStatus>,
    /// <p>Current status of this cluster version.</p>
    pub version_status: ::std::option::Option<crate::types::VersionStatus>,
    /// <p>The patch version of Kubernetes for this cluster version.</p>
    pub kubernetes_patch_version: ::std::option::Option<::std::string::String>,
}
impl ClusterVersionInformation {
    /// <p>The Kubernetes version for the cluster.</p>
    pub fn cluster_version(&self) -> ::std::option::Option<&str> {
        self.cluster_version.as_deref()
    }
    /// <p>The type of cluster this version is for.</p>
    pub fn cluster_type(&self) -> ::std::option::Option<&str> {
        self.cluster_type.as_deref()
    }
    /// <p>Default platform version for this Kubernetes version.</p>
    pub fn default_platform_version(&self) -> ::std::option::Option<&str> {
        self.default_platform_version.as_deref()
    }
    /// <p>Indicates if this is a default version.</p>
    pub fn default_version(&self) -> bool {
        self.default_version
    }
    /// <p>The release date of this cluster version.</p>
    pub fn release_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.release_date.as_ref()
    }
    /// <p>Date when standard support ends for this version.</p>
    pub fn end_of_standard_support_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_of_standard_support_date.as_ref()
    }
    /// <p>Date when extended support ends for this version.</p>
    pub fn end_of_extended_support_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_of_extended_support_date.as_ref()
    }
    /// <important>
    /// <p>This field is deprecated. Use <code>versionStatus</code> instead, as that field matches for input and output of this action.</p>
    /// </important>
    /// <p>Current status of this cluster version.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ClusterVersionStatus> {
        self.status.as_ref()
    }
    /// <p>Current status of this cluster version.</p>
    pub fn version_status(&self) -> ::std::option::Option<&crate::types::VersionStatus> {
        self.version_status.as_ref()
    }
    /// <p>The patch version of Kubernetes for this cluster version.</p>
    pub fn kubernetes_patch_version(&self) -> ::std::option::Option<&str> {
        self.kubernetes_patch_version.as_deref()
    }
}
impl ClusterVersionInformation {
    /// Creates a new builder-style object to manufacture [`ClusterVersionInformation`](crate::types::ClusterVersionInformation).
    pub fn builder() -> crate::types::builders::ClusterVersionInformationBuilder {
        crate::types::builders::ClusterVersionInformationBuilder::default()
    }
}

/// A builder for [`ClusterVersionInformation`](crate::types::ClusterVersionInformation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ClusterVersionInformationBuilder {
    pub(crate) cluster_version: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_type: ::std::option::Option<::std::string::String>,
    pub(crate) default_platform_version: ::std::option::Option<::std::string::String>,
    pub(crate) default_version: ::std::option::Option<bool>,
    pub(crate) release_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_of_standard_support_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_of_extended_support_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::ClusterVersionStatus>,
    pub(crate) version_status: ::std::option::Option<crate::types::VersionStatus>,
    pub(crate) kubernetes_patch_version: ::std::option::Option<::std::string::String>,
}
impl ClusterVersionInformationBuilder {
    /// <p>The Kubernetes version for the cluster.</p>
    pub fn cluster_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Kubernetes version for the cluster.</p>
    pub fn set_cluster_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_version = input;
        self
    }
    /// <p>The Kubernetes version for the cluster.</p>
    pub fn get_cluster_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_version
    }
    /// <p>The type of cluster this version is for.</p>
    pub fn cluster_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of cluster this version is for.</p>
    pub fn set_cluster_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_type = input;
        self
    }
    /// <p>The type of cluster this version is for.</p>
    pub fn get_cluster_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_type
    }
    /// <p>Default platform version for this Kubernetes version.</p>
    pub fn default_platform_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_platform_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Default platform version for this Kubernetes version.</p>
    pub fn set_default_platform_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_platform_version = input;
        self
    }
    /// <p>Default platform version for this Kubernetes version.</p>
    pub fn get_default_platform_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_platform_version
    }
    /// <p>Indicates if this is a default version.</p>
    pub fn default_version(mut self, input: bool) -> Self {
        self.default_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates if this is a default version.</p>
    pub fn set_default_version(mut self, input: ::std::option::Option<bool>) -> Self {
        self.default_version = input;
        self
    }
    /// <p>Indicates if this is a default version.</p>
    pub fn get_default_version(&self) -> &::std::option::Option<bool> {
        &self.default_version
    }
    /// <p>The release date of this cluster version.</p>
    pub fn release_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.release_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The release date of this cluster version.</p>
    pub fn set_release_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.release_date = input;
        self
    }
    /// <p>The release date of this cluster version.</p>
    pub fn get_release_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.release_date
    }
    /// <p>Date when standard support ends for this version.</p>
    pub fn end_of_standard_support_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_of_standard_support_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Date when standard support ends for this version.</p>
    pub fn set_end_of_standard_support_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_of_standard_support_date = input;
        self
    }
    /// <p>Date when standard support ends for this version.</p>
    pub fn get_end_of_standard_support_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_of_standard_support_date
    }
    /// <p>Date when extended support ends for this version.</p>
    pub fn end_of_extended_support_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_of_extended_support_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Date when extended support ends for this version.</p>
    pub fn set_end_of_extended_support_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_of_extended_support_date = input;
        self
    }
    /// <p>Date when extended support ends for this version.</p>
    pub fn get_end_of_extended_support_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_of_extended_support_date
    }
    /// <important>
    /// <p>This field is deprecated. Use <code>versionStatus</code> instead, as that field matches for input and output of this action.</p>
    /// </important>
    /// <p>Current status of this cluster version.</p>
    pub fn status(mut self, input: crate::types::ClusterVersionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <important>
    /// <p>This field is deprecated. Use <code>versionStatus</code> instead, as that field matches for input and output of this action.</p>
    /// </important>
    /// <p>Current status of this cluster version.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ClusterVersionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <important>
    /// <p>This field is deprecated. Use <code>versionStatus</code> instead, as that field matches for input and output of this action.</p>
    /// </important>
    /// <p>Current status of this cluster version.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ClusterVersionStatus> {
        &self.status
    }
    /// <p>Current status of this cluster version.</p>
    pub fn version_status(mut self, input: crate::types::VersionStatus) -> Self {
        self.version_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Current status of this cluster version.</p>
    pub fn set_version_status(mut self, input: ::std::option::Option<crate::types::VersionStatus>) -> Self {
        self.version_status = input;
        self
    }
    /// <p>Current status of this cluster version.</p>
    pub fn get_version_status(&self) -> &::std::option::Option<crate::types::VersionStatus> {
        &self.version_status
    }
    /// <p>The patch version of Kubernetes for this cluster version.</p>
    pub fn kubernetes_patch_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kubernetes_patch_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The patch version of Kubernetes for this cluster version.</p>
    pub fn set_kubernetes_patch_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kubernetes_patch_version = input;
        self
    }
    /// <p>The patch version of Kubernetes for this cluster version.</p>
    pub fn get_kubernetes_patch_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.kubernetes_patch_version
    }
    /// Consumes the builder and constructs a [`ClusterVersionInformation`](crate::types::ClusterVersionInformation).
    pub fn build(self) -> crate::types::ClusterVersionInformation {
        crate::types::ClusterVersionInformation {
            cluster_version: self.cluster_version,
            cluster_type: self.cluster_type,
            default_platform_version: self.default_platform_version,
            default_version: self.default_version.unwrap_or_default(),
            release_date: self.release_date,
            end_of_standard_support_date: self.end_of_standard_support_date,
            end_of_extended_support_date: self.end_of_extended_support_date,
            status: self.status,
            version_status: self.version_status,
            kubernetes_patch_version: self.kubernetes_patch_version,
        }
    }
}
