// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An issue that is associated with the Fargate profile.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FargateProfileIssue {
    /// <p>A brief description of the error.</p>
    pub code: ::std::option::Option<crate::types::FargateProfileIssueCode>,
    /// <p>The error message associated with the issue.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services resources that are affected by this issue.</p>
    pub resource_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl FargateProfileIssue {
    /// <p>A brief description of the error.</p>
    pub fn code(&self) -> ::std::option::Option<&crate::types::FargateProfileIssueCode> {
        self.code.as_ref()
    }
    /// <p>The error message associated with the issue.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The Amazon Web Services resources that are affected by this issue.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_ids.is_none()`.
    pub fn resource_ids(&self) -> &[::std::string::String] {
        self.resource_ids.as_deref().unwrap_or_default()
    }
}
impl FargateProfileIssue {
    /// Creates a new builder-style object to manufacture [`FargateProfileIssue`](crate::types::FargateProfileIssue).
    pub fn builder() -> crate::types::builders::FargateProfileIssueBuilder {
        crate::types::builders::FargateProfileIssueBuilder::default()
    }
}

/// A builder for [`FargateProfileIssue`](crate::types::FargateProfileIssue).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FargateProfileIssueBuilder {
    pub(crate) code: ::std::option::Option<crate::types::FargateProfileIssueCode>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) resource_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl FargateProfileIssueBuilder {
    /// <p>A brief description of the error.</p>
    pub fn code(mut self, input: crate::types::FargateProfileIssueCode) -> Self {
        self.code = ::std::option::Option::Some(input);
        self
    }
    /// <p>A brief description of the error.</p>
    pub fn set_code(mut self, input: ::std::option::Option<crate::types::FargateProfileIssueCode>) -> Self {
        self.code = input;
        self
    }
    /// <p>A brief description of the error.</p>
    pub fn get_code(&self) -> &::std::option::Option<crate::types::FargateProfileIssueCode> {
        &self.code
    }
    /// <p>The error message associated with the issue.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error message associated with the issue.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The error message associated with the issue.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Appends an item to `resource_ids`.
    ///
    /// To override the contents of this collection use [`set_resource_ids`](Self::set_resource_ids).
    ///
    /// <p>The Amazon Web Services resources that are affected by this issue.</p>
    pub fn resource_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.resource_ids.unwrap_or_default();
        v.push(input.into());
        self.resource_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Web Services resources that are affected by this issue.</p>
    pub fn set_resource_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.resource_ids = input;
        self
    }
    /// <p>The Amazon Web Services resources that are affected by this issue.</p>
    pub fn get_resource_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.resource_ids
    }
    /// Consumes the builder and constructs a [`FargateProfileIssue`](crate::types::FargateProfileIssue).
    pub fn build(self) -> crate::types::FargateProfileIssue {
        crate::types::FargateProfileIssue {
            code: self.code,
            message: self.message,
            resource_ids: self.resource_ids,
        }
    }
}
