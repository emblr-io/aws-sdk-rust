// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Request to update the configuration of the storage capability of your EKS Auto Mode cluster. For example, enable the capability. For more information, see EKS Auto Mode block storage capability in the <i>Amazon EKS User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StorageConfigRequest {
    /// <p>Request to configure EBS Block Storage settings for your EKS Auto Mode cluster.</p>
    pub block_storage: ::std::option::Option<crate::types::BlockStorage>,
}
impl StorageConfigRequest {
    /// <p>Request to configure EBS Block Storage settings for your EKS Auto Mode cluster.</p>
    pub fn block_storage(&self) -> ::std::option::Option<&crate::types::BlockStorage> {
        self.block_storage.as_ref()
    }
}
impl StorageConfigRequest {
    /// Creates a new builder-style object to manufacture [`StorageConfigRequest`](crate::types::StorageConfigRequest).
    pub fn builder() -> crate::types::builders::StorageConfigRequestBuilder {
        crate::types::builders::StorageConfigRequestBuilder::default()
    }
}

/// A builder for [`StorageConfigRequest`](crate::types::StorageConfigRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StorageConfigRequestBuilder {
    pub(crate) block_storage: ::std::option::Option<crate::types::BlockStorage>,
}
impl StorageConfigRequestBuilder {
    /// <p>Request to configure EBS Block Storage settings for your EKS Auto Mode cluster.</p>
    pub fn block_storage(mut self, input: crate::types::BlockStorage) -> Self {
        self.block_storage = ::std::option::Option::Some(input);
        self
    }
    /// <p>Request to configure EBS Block Storage settings for your EKS Auto Mode cluster.</p>
    pub fn set_block_storage(mut self, input: ::std::option::Option<crate::types::BlockStorage>) -> Self {
        self.block_storage = input;
        self
    }
    /// <p>Request to configure EBS Block Storage settings for your EKS Auto Mode cluster.</p>
    pub fn get_block_storage(&self) -> &::std::option::Option<crate::types::BlockStorage> {
        &self.block_storage
    }
    /// Consumes the builder and constructs a [`StorageConfigRequest`](crate::types::StorageConfigRequest).
    pub fn build(self) -> crate::types::StorageConfigRequest {
        crate::types::StorageConfigRequest {
            block_storage: self.block_storage,
        }
    }
}
