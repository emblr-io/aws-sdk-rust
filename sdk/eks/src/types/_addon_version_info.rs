// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an add-on version.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AddonVersionInfo {
    /// <p>The version of the add-on.</p>
    pub addon_version: ::std::option::Option<::std::string::String>,
    /// <p>The architectures that the version supports.</p>
    pub architecture: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Indicates the compute type of the add-on version.</p>
    pub compute_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>An object representing the compatibilities of a version.</p>
    pub compatibilities: ::std::option::Option<::std::vec::Vec<crate::types::Compatibility>>,
    /// <p>Whether the add-on requires configuration.</p>
    pub requires_configuration: bool,
    /// <p>Indicates if the add-on requires IAM Permissions to operate, such as networking permissions.</p>
    pub requires_iam_permissions: bool,
}
impl AddonVersionInfo {
    /// <p>The version of the add-on.</p>
    pub fn addon_version(&self) -> ::std::option::Option<&str> {
        self.addon_version.as_deref()
    }
    /// <p>The architectures that the version supports.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.architecture.is_none()`.
    pub fn architecture(&self) -> &[::std::string::String] {
        self.architecture.as_deref().unwrap_or_default()
    }
    /// <p>Indicates the compute type of the add-on version.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.compute_types.is_none()`.
    pub fn compute_types(&self) -> &[::std::string::String] {
        self.compute_types.as_deref().unwrap_or_default()
    }
    /// <p>An object representing the compatibilities of a version.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.compatibilities.is_none()`.
    pub fn compatibilities(&self) -> &[crate::types::Compatibility] {
        self.compatibilities.as_deref().unwrap_or_default()
    }
    /// <p>Whether the add-on requires configuration.</p>
    pub fn requires_configuration(&self) -> bool {
        self.requires_configuration
    }
    /// <p>Indicates if the add-on requires IAM Permissions to operate, such as networking permissions.</p>
    pub fn requires_iam_permissions(&self) -> bool {
        self.requires_iam_permissions
    }
}
impl AddonVersionInfo {
    /// Creates a new builder-style object to manufacture [`AddonVersionInfo`](crate::types::AddonVersionInfo).
    pub fn builder() -> crate::types::builders::AddonVersionInfoBuilder {
        crate::types::builders::AddonVersionInfoBuilder::default()
    }
}

/// A builder for [`AddonVersionInfo`](crate::types::AddonVersionInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AddonVersionInfoBuilder {
    pub(crate) addon_version: ::std::option::Option<::std::string::String>,
    pub(crate) architecture: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) compute_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) compatibilities: ::std::option::Option<::std::vec::Vec<crate::types::Compatibility>>,
    pub(crate) requires_configuration: ::std::option::Option<bool>,
    pub(crate) requires_iam_permissions: ::std::option::Option<bool>,
}
impl AddonVersionInfoBuilder {
    /// <p>The version of the add-on.</p>
    pub fn addon_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.addon_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the add-on.</p>
    pub fn set_addon_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.addon_version = input;
        self
    }
    /// <p>The version of the add-on.</p>
    pub fn get_addon_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.addon_version
    }
    /// Appends an item to `architecture`.
    ///
    /// To override the contents of this collection use [`set_architecture`](Self::set_architecture).
    ///
    /// <p>The architectures that the version supports.</p>
    pub fn architecture(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.architecture.unwrap_or_default();
        v.push(input.into());
        self.architecture = ::std::option::Option::Some(v);
        self
    }
    /// <p>The architectures that the version supports.</p>
    pub fn set_architecture(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.architecture = input;
        self
    }
    /// <p>The architectures that the version supports.</p>
    pub fn get_architecture(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.architecture
    }
    /// Appends an item to `compute_types`.
    ///
    /// To override the contents of this collection use [`set_compute_types`](Self::set_compute_types).
    ///
    /// <p>Indicates the compute type of the add-on version.</p>
    pub fn compute_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.compute_types.unwrap_or_default();
        v.push(input.into());
        self.compute_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates the compute type of the add-on version.</p>
    pub fn set_compute_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.compute_types = input;
        self
    }
    /// <p>Indicates the compute type of the add-on version.</p>
    pub fn get_compute_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.compute_types
    }
    /// Appends an item to `compatibilities`.
    ///
    /// To override the contents of this collection use [`set_compatibilities`](Self::set_compatibilities).
    ///
    /// <p>An object representing the compatibilities of a version.</p>
    pub fn compatibilities(mut self, input: crate::types::Compatibility) -> Self {
        let mut v = self.compatibilities.unwrap_or_default();
        v.push(input);
        self.compatibilities = ::std::option::Option::Some(v);
        self
    }
    /// <p>An object representing the compatibilities of a version.</p>
    pub fn set_compatibilities(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Compatibility>>) -> Self {
        self.compatibilities = input;
        self
    }
    /// <p>An object representing the compatibilities of a version.</p>
    pub fn get_compatibilities(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Compatibility>> {
        &self.compatibilities
    }
    /// <p>Whether the add-on requires configuration.</p>
    pub fn requires_configuration(mut self, input: bool) -> Self {
        self.requires_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the add-on requires configuration.</p>
    pub fn set_requires_configuration(mut self, input: ::std::option::Option<bool>) -> Self {
        self.requires_configuration = input;
        self
    }
    /// <p>Whether the add-on requires configuration.</p>
    pub fn get_requires_configuration(&self) -> &::std::option::Option<bool> {
        &self.requires_configuration
    }
    /// <p>Indicates if the add-on requires IAM Permissions to operate, such as networking permissions.</p>
    pub fn requires_iam_permissions(mut self, input: bool) -> Self {
        self.requires_iam_permissions = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates if the add-on requires IAM Permissions to operate, such as networking permissions.</p>
    pub fn set_requires_iam_permissions(mut self, input: ::std::option::Option<bool>) -> Self {
        self.requires_iam_permissions = input;
        self
    }
    /// <p>Indicates if the add-on requires IAM Permissions to operate, such as networking permissions.</p>
    pub fn get_requires_iam_permissions(&self) -> &::std::option::Option<bool> {
        &self.requires_iam_permissions
    }
    /// Consumes the builder and constructs a [`AddonVersionInfo`](crate::types::AddonVersionInfo).
    pub fn build(self) -> crate::types::AddonVersionInfo {
        crate::types::AddonVersionInfo {
            addon_version: self.addon_version,
            architecture: self.architecture,
            compute_types: self.compute_types,
            compatibilities: self.compatibilities,
            requires_configuration: self.requires_configuration.unwrap_or_default(),
            requires_iam_permissions: self.requires_iam_permissions.unwrap_or_default(),
        }
    }
}
