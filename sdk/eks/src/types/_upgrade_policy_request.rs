// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The support policy to use for the cluster. Extended support allows you to remain on specific Kubernetes versions for longer. Clusters in extended support have higher costs. The default value is <code>EXTENDED</code>. Use <code>STANDARD</code> to disable extended support.</p>
/// <p><a href="https://docs.aws.amazon.com/eks/latest/userguide/extended-support-control.html">Learn more about EKS Extended Support in the <i>Amazon EKS User Guide</i>.</a></p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpgradePolicyRequest {
    /// <p>If the cluster is set to <code>EXTENDED</code>, it will enter extended support at the end of standard support. If the cluster is set to <code>STANDARD</code>, it will be automatically upgraded at the end of standard support.</p>
    /// <p><a href="https://docs.aws.amazon.com/eks/latest/userguide/extended-support-control.html">Learn more about EKS Extended Support in the <i>Amazon EKS User Guide</i>.</a></p>
    pub support_type: ::std::option::Option<crate::types::SupportType>,
}
impl UpgradePolicyRequest {
    /// <p>If the cluster is set to <code>EXTENDED</code>, it will enter extended support at the end of standard support. If the cluster is set to <code>STANDARD</code>, it will be automatically upgraded at the end of standard support.</p>
    /// <p><a href="https://docs.aws.amazon.com/eks/latest/userguide/extended-support-control.html">Learn more about EKS Extended Support in the <i>Amazon EKS User Guide</i>.</a></p>
    pub fn support_type(&self) -> ::std::option::Option<&crate::types::SupportType> {
        self.support_type.as_ref()
    }
}
impl UpgradePolicyRequest {
    /// Creates a new builder-style object to manufacture [`UpgradePolicyRequest`](crate::types::UpgradePolicyRequest).
    pub fn builder() -> crate::types::builders::UpgradePolicyRequestBuilder {
        crate::types::builders::UpgradePolicyRequestBuilder::default()
    }
}

/// A builder for [`UpgradePolicyRequest`](crate::types::UpgradePolicyRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpgradePolicyRequestBuilder {
    pub(crate) support_type: ::std::option::Option<crate::types::SupportType>,
}
impl UpgradePolicyRequestBuilder {
    /// <p>If the cluster is set to <code>EXTENDED</code>, it will enter extended support at the end of standard support. If the cluster is set to <code>STANDARD</code>, it will be automatically upgraded at the end of standard support.</p>
    /// <p><a href="https://docs.aws.amazon.com/eks/latest/userguide/extended-support-control.html">Learn more about EKS Extended Support in the <i>Amazon EKS User Guide</i>.</a></p>
    pub fn support_type(mut self, input: crate::types::SupportType) -> Self {
        self.support_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the cluster is set to <code>EXTENDED</code>, it will enter extended support at the end of standard support. If the cluster is set to <code>STANDARD</code>, it will be automatically upgraded at the end of standard support.</p>
    /// <p><a href="https://docs.aws.amazon.com/eks/latest/userguide/extended-support-control.html">Learn more about EKS Extended Support in the <i>Amazon EKS User Guide</i>.</a></p>
    pub fn set_support_type(mut self, input: ::std::option::Option<crate::types::SupportType>) -> Self {
        self.support_type = input;
        self
    }
    /// <p>If the cluster is set to <code>EXTENDED</code>, it will enter extended support at the end of standard support. If the cluster is set to <code>STANDARD</code>, it will be automatically upgraded at the end of standard support.</p>
    /// <p><a href="https://docs.aws.amazon.com/eks/latest/userguide/extended-support-control.html">Learn more about EKS Extended Support in the <i>Amazon EKS User Guide</i>.</a></p>
    pub fn get_support_type(&self) -> &::std::option::Option<crate::types::SupportType> {
        &self.support_type
    }
    /// Consumes the builder and constructs a [`UpgradePolicyRequest`](crate::types::UpgradePolicyRequest).
    pub fn build(self) -> crate::types::UpgradePolicyRequest {
        crate::types::UpgradePolicyRequest {
            support_type: self.support_type,
        }
    }
}
