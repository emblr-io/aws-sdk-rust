// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary information about the Amazon EKS add-on compatibility for the next Kubernetes version for an insight check in the <code>UPGRADE_READINESS</code> category.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AddonCompatibilityDetail {
    /// <p>The name of the Amazon EKS add-on.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The list of compatible Amazon EKS add-on versions for the next Kubernetes version.</p>
    pub compatible_versions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AddonCompatibilityDetail {
    /// <p>The name of the Amazon EKS add-on.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The list of compatible Amazon EKS add-on versions for the next Kubernetes version.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.compatible_versions.is_none()`.
    pub fn compatible_versions(&self) -> &[::std::string::String] {
        self.compatible_versions.as_deref().unwrap_or_default()
    }
}
impl AddonCompatibilityDetail {
    /// Creates a new builder-style object to manufacture [`AddonCompatibilityDetail`](crate::types::AddonCompatibilityDetail).
    pub fn builder() -> crate::types::builders::AddonCompatibilityDetailBuilder {
        crate::types::builders::AddonCompatibilityDetailBuilder::default()
    }
}

/// A builder for [`AddonCompatibilityDetail`](crate::types::AddonCompatibilityDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AddonCompatibilityDetailBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) compatible_versions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AddonCompatibilityDetailBuilder {
    /// <p>The name of the Amazon EKS add-on.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon EKS add-on.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Amazon EKS add-on.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `compatible_versions`.
    ///
    /// To override the contents of this collection use [`set_compatible_versions`](Self::set_compatible_versions).
    ///
    /// <p>The list of compatible Amazon EKS add-on versions for the next Kubernetes version.</p>
    pub fn compatible_versions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.compatible_versions.unwrap_or_default();
        v.push(input.into());
        self.compatible_versions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of compatible Amazon EKS add-on versions for the next Kubernetes version.</p>
    pub fn set_compatible_versions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.compatible_versions = input;
        self
    }
    /// <p>The list of compatible Amazon EKS add-on versions for the next Kubernetes version.</p>
    pub fn get_compatible_versions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.compatible_versions
    }
    /// Consumes the builder and constructs a [`AddonCompatibilityDetail`](crate::types::AddonCompatibilityDetail).
    pub fn build(self) -> crate::types::AddonCompatibilityDetail {
        crate::types::AddonCompatibilityDetail {
            name: self.name,
            compatible_versions: self.compatible_versions,
        }
    }
}
