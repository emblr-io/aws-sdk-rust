// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Request to update the configuration of the compute capability of your EKS Auto Mode cluster. For example, enable the capability. For more information, see EKS Auto Mode compute capability in the <i>Amazon EKS User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComputeConfigRequest {
    /// <p>Request to enable or disable the compute capability on your EKS Auto Mode cluster. If the compute capability is enabled, EKS Auto Mode will create and delete EC2 Managed Instances in your Amazon Web Services account.</p>
    pub enabled: ::std::option::Option<bool>,
    /// <p>Configuration for node pools that defines the compute resources for your EKS Auto Mode cluster. For more information, see EKS Auto Mode Node Pools in the <i>Amazon EKS User Guide</i>.</p>
    pub node_pools: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The ARN of the IAM Role EKS will assign to EC2 Managed Instances in your EKS Auto Mode cluster. This value cannot be changed after the compute capability of EKS Auto Mode is enabled. For more information, see the IAM Reference in the <i>Amazon EKS User Guide</i>.</p>
    pub node_role_arn: ::std::option::Option<::std::string::String>,
}
impl ComputeConfigRequest {
    /// <p>Request to enable or disable the compute capability on your EKS Auto Mode cluster. If the compute capability is enabled, EKS Auto Mode will create and delete EC2 Managed Instances in your Amazon Web Services account.</p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
    /// <p>Configuration for node pools that defines the compute resources for your EKS Auto Mode cluster. For more information, see EKS Auto Mode Node Pools in the <i>Amazon EKS User Guide</i>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.node_pools.is_none()`.
    pub fn node_pools(&self) -> &[::std::string::String] {
        self.node_pools.as_deref().unwrap_or_default()
    }
    /// <p>The ARN of the IAM Role EKS will assign to EC2 Managed Instances in your EKS Auto Mode cluster. This value cannot be changed after the compute capability of EKS Auto Mode is enabled. For more information, see the IAM Reference in the <i>Amazon EKS User Guide</i>.</p>
    pub fn node_role_arn(&self) -> ::std::option::Option<&str> {
        self.node_role_arn.as_deref()
    }
}
impl ComputeConfigRequest {
    /// Creates a new builder-style object to manufacture [`ComputeConfigRequest`](crate::types::ComputeConfigRequest).
    pub fn builder() -> crate::types::builders::ComputeConfigRequestBuilder {
        crate::types::builders::ComputeConfigRequestBuilder::default()
    }
}

/// A builder for [`ComputeConfigRequest`](crate::types::ComputeConfigRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ComputeConfigRequestBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) node_pools: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) node_role_arn: ::std::option::Option<::std::string::String>,
}
impl ComputeConfigRequestBuilder {
    /// <p>Request to enable or disable the compute capability on your EKS Auto Mode cluster. If the compute capability is enabled, EKS Auto Mode will create and delete EC2 Managed Instances in your Amazon Web Services account.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Request to enable or disable the compute capability on your EKS Auto Mode cluster. If the compute capability is enabled, EKS Auto Mode will create and delete EC2 Managed Instances in your Amazon Web Services account.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Request to enable or disable the compute capability on your EKS Auto Mode cluster. If the compute capability is enabled, EKS Auto Mode will create and delete EC2 Managed Instances in your Amazon Web Services account.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// Appends an item to `node_pools`.
    ///
    /// To override the contents of this collection use [`set_node_pools`](Self::set_node_pools).
    ///
    /// <p>Configuration for node pools that defines the compute resources for your EKS Auto Mode cluster. For more information, see EKS Auto Mode Node Pools in the <i>Amazon EKS User Guide</i>.</p>
    pub fn node_pools(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.node_pools.unwrap_or_default();
        v.push(input.into());
        self.node_pools = ::std::option::Option::Some(v);
        self
    }
    /// <p>Configuration for node pools that defines the compute resources for your EKS Auto Mode cluster. For more information, see EKS Auto Mode Node Pools in the <i>Amazon EKS User Guide</i>.</p>
    pub fn set_node_pools(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.node_pools = input;
        self
    }
    /// <p>Configuration for node pools that defines the compute resources for your EKS Auto Mode cluster. For more information, see EKS Auto Mode Node Pools in the <i>Amazon EKS User Guide</i>.</p>
    pub fn get_node_pools(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.node_pools
    }
    /// <p>The ARN of the IAM Role EKS will assign to EC2 Managed Instances in your EKS Auto Mode cluster. This value cannot be changed after the compute capability of EKS Auto Mode is enabled. For more information, see the IAM Reference in the <i>Amazon EKS User Guide</i>.</p>
    pub fn node_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM Role EKS will assign to EC2 Managed Instances in your EKS Auto Mode cluster. This value cannot be changed after the compute capability of EKS Auto Mode is enabled. For more information, see the IAM Reference in the <i>Amazon EKS User Guide</i>.</p>
    pub fn set_node_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_role_arn = input;
        self
    }
    /// <p>The ARN of the IAM Role EKS will assign to EC2 Managed Instances in your EKS Auto Mode cluster. This value cannot be changed after the compute capability of EKS Auto Mode is enabled. For more information, see the IAM Reference in the <i>Amazon EKS User Guide</i>.</p>
    pub fn get_node_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_role_arn
    }
    /// Consumes the builder and constructs a [`ComputeConfigRequest`](crate::types::ComputeConfigRequest).
    pub fn build(self) -> crate::types::ComputeConfigRequest {
        crate::types::ComputeConfigRequest {
            enabled: self.enabled,
            node_pools: self.node_pools,
            node_role_arn: self.node_role_arn,
        }
    }
}
