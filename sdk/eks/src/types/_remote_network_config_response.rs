// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration in the cluster for EKS Hybrid Nodes. You can add, change, or remove this configuration after the cluster is created.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RemoteNetworkConfigResponse {
    /// <p>The list of network CIDRs that can contain hybrid nodes.</p>
    pub remote_node_networks: ::std::option::Option<::std::vec::Vec<crate::types::RemoteNodeNetwork>>,
    /// <p>The list of network CIDRs that can contain pods that run Kubernetes webhooks on hybrid nodes.</p>
    pub remote_pod_networks: ::std::option::Option<::std::vec::Vec<crate::types::RemotePodNetwork>>,
}
impl RemoteNetworkConfigResponse {
    /// <p>The list of network CIDRs that can contain hybrid nodes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.remote_node_networks.is_none()`.
    pub fn remote_node_networks(&self) -> &[crate::types::RemoteNodeNetwork] {
        self.remote_node_networks.as_deref().unwrap_or_default()
    }
    /// <p>The list of network CIDRs that can contain pods that run Kubernetes webhooks on hybrid nodes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.remote_pod_networks.is_none()`.
    pub fn remote_pod_networks(&self) -> &[crate::types::RemotePodNetwork] {
        self.remote_pod_networks.as_deref().unwrap_or_default()
    }
}
impl RemoteNetworkConfigResponse {
    /// Creates a new builder-style object to manufacture [`RemoteNetworkConfigResponse`](crate::types::RemoteNetworkConfigResponse).
    pub fn builder() -> crate::types::builders::RemoteNetworkConfigResponseBuilder {
        crate::types::builders::RemoteNetworkConfigResponseBuilder::default()
    }
}

/// A builder for [`RemoteNetworkConfigResponse`](crate::types::RemoteNetworkConfigResponse).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RemoteNetworkConfigResponseBuilder {
    pub(crate) remote_node_networks: ::std::option::Option<::std::vec::Vec<crate::types::RemoteNodeNetwork>>,
    pub(crate) remote_pod_networks: ::std::option::Option<::std::vec::Vec<crate::types::RemotePodNetwork>>,
}
impl RemoteNetworkConfigResponseBuilder {
    /// Appends an item to `remote_node_networks`.
    ///
    /// To override the contents of this collection use [`set_remote_node_networks`](Self::set_remote_node_networks).
    ///
    /// <p>The list of network CIDRs that can contain hybrid nodes.</p>
    pub fn remote_node_networks(mut self, input: crate::types::RemoteNodeNetwork) -> Self {
        let mut v = self.remote_node_networks.unwrap_or_default();
        v.push(input);
        self.remote_node_networks = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of network CIDRs that can contain hybrid nodes.</p>
    pub fn set_remote_node_networks(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RemoteNodeNetwork>>) -> Self {
        self.remote_node_networks = input;
        self
    }
    /// <p>The list of network CIDRs that can contain hybrid nodes.</p>
    pub fn get_remote_node_networks(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RemoteNodeNetwork>> {
        &self.remote_node_networks
    }
    /// Appends an item to `remote_pod_networks`.
    ///
    /// To override the contents of this collection use [`set_remote_pod_networks`](Self::set_remote_pod_networks).
    ///
    /// <p>The list of network CIDRs that can contain pods that run Kubernetes webhooks on hybrid nodes.</p>
    pub fn remote_pod_networks(mut self, input: crate::types::RemotePodNetwork) -> Self {
        let mut v = self.remote_pod_networks.unwrap_or_default();
        v.push(input);
        self.remote_pod_networks = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of network CIDRs that can contain pods that run Kubernetes webhooks on hybrid nodes.</p>
    pub fn set_remote_pod_networks(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RemotePodNetwork>>) -> Self {
        self.remote_pod_networks = input;
        self
    }
    /// <p>The list of network CIDRs that can contain pods that run Kubernetes webhooks on hybrid nodes.</p>
    pub fn get_remote_pod_networks(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RemotePodNetwork>> {
        &self.remote_pod_networks
    }
    /// Consumes the builder and constructs a [`RemoteNetworkConfigResponse`](crate::types::RemoteNetworkConfigResponse).
    pub fn build(self) -> crate::types::RemoteNetworkConfigResponse {
        crate::types::RemoteNetworkConfigResponse {
            remote_node_networks: self.remote_node_networks,
            remote_pod_networks: self.remote_pod_networks,
        }
    }
}
