// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This value indicates if extended support is enabled or disabled for the cluster.</p>
/// <p><a href="https://docs.aws.amazon.com/eks/latest/userguide/extended-support-control.html">Learn more about EKS Extended Support in the <i>Amazon EKS User Guide</i>.</a></p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpgradePolicyResponse {
    /// <p>If the cluster is set to <code>EXTENDED</code>, it will enter extended support at the end of standard support. If the cluster is set to <code>STANDARD</code>, it will be automatically upgraded at the end of standard support.</p>
    /// <p><a href="https://docs.aws.amazon.com/eks/latest/userguide/extended-support-control.html">Learn more about EKS Extended Support in the <i>Amazon EKS User Guide</i>.</a></p>
    pub support_type: ::std::option::Option<crate::types::SupportType>,
}
impl UpgradePolicyResponse {
    /// <p>If the cluster is set to <code>EXTENDED</code>, it will enter extended support at the end of standard support. If the cluster is set to <code>STANDARD</code>, it will be automatically upgraded at the end of standard support.</p>
    /// <p><a href="https://docs.aws.amazon.com/eks/latest/userguide/extended-support-control.html">Learn more about EKS Extended Support in the <i>Amazon EKS User Guide</i>.</a></p>
    pub fn support_type(&self) -> ::std::option::Option<&crate::types::SupportType> {
        self.support_type.as_ref()
    }
}
impl UpgradePolicyResponse {
    /// Creates a new builder-style object to manufacture [`UpgradePolicyResponse`](crate::types::UpgradePolicyResponse).
    pub fn builder() -> crate::types::builders::UpgradePolicyResponseBuilder {
        crate::types::builders::UpgradePolicyResponseBuilder::default()
    }
}

/// A builder for [`UpgradePolicyResponse`](crate::types::UpgradePolicyResponse).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpgradePolicyResponseBuilder {
    pub(crate) support_type: ::std::option::Option<crate::types::SupportType>,
}
impl UpgradePolicyResponseBuilder {
    /// <p>If the cluster is set to <code>EXTENDED</code>, it will enter extended support at the end of standard support. If the cluster is set to <code>STANDARD</code>, it will be automatically upgraded at the end of standard support.</p>
    /// <p><a href="https://docs.aws.amazon.com/eks/latest/userguide/extended-support-control.html">Learn more about EKS Extended Support in the <i>Amazon EKS User Guide</i>.</a></p>
    pub fn support_type(mut self, input: crate::types::SupportType) -> Self {
        self.support_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the cluster is set to <code>EXTENDED</code>, it will enter extended support at the end of standard support. If the cluster is set to <code>STANDARD</code>, it will be automatically upgraded at the end of standard support.</p>
    /// <p><a href="https://docs.aws.amazon.com/eks/latest/userguide/extended-support-control.html">Learn more about EKS Extended Support in the <i>Amazon EKS User Guide</i>.</a></p>
    pub fn set_support_type(mut self, input: ::std::option::Option<crate::types::SupportType>) -> Self {
        self.support_type = input;
        self
    }
    /// <p>If the cluster is set to <code>EXTENDED</code>, it will enter extended support at the end of standard support. If the cluster is set to <code>STANDARD</code>, it will be automatically upgraded at the end of standard support.</p>
    /// <p><a href="https://docs.aws.amazon.com/eks/latest/userguide/extended-support-control.html">Learn more about EKS Extended Support in the <i>Amazon EKS User Guide</i>.</a></p>
    pub fn get_support_type(&self) -> &::std::option::Option<crate::types::SupportType> {
        &self.support_type
    }
    /// Consumes the builder and constructs a [`UpgradePolicyResponse`](crate::types::UpgradePolicyResponse).
    pub fn build(self) -> crate::types::UpgradePolicyResponse {
        crate::types::UpgradePolicyResponse {
            support_type: self.support_type,
        }
    }
}
