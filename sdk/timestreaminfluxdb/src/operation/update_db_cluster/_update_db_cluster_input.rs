// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateDbClusterInput {
    /// <p>Service-generated unique identifier of the DB cluster to update.</p>
    pub db_cluster_id: ::std::option::Option<::std::string::String>,
    /// <p>The log delivery configuration to apply to the DB cluster.</p>
    pub log_delivery_configuration: ::std::option::Option<crate::types::LogDeliveryConfiguration>,
    /// <p>Update the DB cluster to use the specified DB parameter group.</p>
    pub db_parameter_group_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Update the DB cluster to use the specified port.</p>
    pub port: ::std::option::Option<i32>,
    /// <p>Update the DB cluster to use the specified DB instance Type.</p>
    pub db_instance_type: ::std::option::Option<crate::types::DbInstanceType>,
    /// <p>Update the DB cluster's failover behavior.</p>
    pub failover_mode: ::std::option::Option<crate::types::FailoverMode>,
}
impl UpdateDbClusterInput {
    /// <p>Service-generated unique identifier of the DB cluster to update.</p>
    pub fn db_cluster_id(&self) -> ::std::option::Option<&str> {
        self.db_cluster_id.as_deref()
    }
    /// <p>The log delivery configuration to apply to the DB cluster.</p>
    pub fn log_delivery_configuration(&self) -> ::std::option::Option<&crate::types::LogDeliveryConfiguration> {
        self.log_delivery_configuration.as_ref()
    }
    /// <p>Update the DB cluster to use the specified DB parameter group.</p>
    pub fn db_parameter_group_identifier(&self) -> ::std::option::Option<&str> {
        self.db_parameter_group_identifier.as_deref()
    }
    /// <p>Update the DB cluster to use the specified port.</p>
    pub fn port(&self) -> ::std::option::Option<i32> {
        self.port
    }
    /// <p>Update the DB cluster to use the specified DB instance Type.</p>
    pub fn db_instance_type(&self) -> ::std::option::Option<&crate::types::DbInstanceType> {
        self.db_instance_type.as_ref()
    }
    /// <p>Update the DB cluster's failover behavior.</p>
    pub fn failover_mode(&self) -> ::std::option::Option<&crate::types::FailoverMode> {
        self.failover_mode.as_ref()
    }
}
impl UpdateDbClusterInput {
    /// Creates a new builder-style object to manufacture [`UpdateDbClusterInput`](crate::operation::update_db_cluster::UpdateDbClusterInput).
    pub fn builder() -> crate::operation::update_db_cluster::builders::UpdateDbClusterInputBuilder {
        crate::operation::update_db_cluster::builders::UpdateDbClusterInputBuilder::default()
    }
}

/// A builder for [`UpdateDbClusterInput`](crate::operation::update_db_cluster::UpdateDbClusterInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateDbClusterInputBuilder {
    pub(crate) db_cluster_id: ::std::option::Option<::std::string::String>,
    pub(crate) log_delivery_configuration: ::std::option::Option<crate::types::LogDeliveryConfiguration>,
    pub(crate) db_parameter_group_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) port: ::std::option::Option<i32>,
    pub(crate) db_instance_type: ::std::option::Option<crate::types::DbInstanceType>,
    pub(crate) failover_mode: ::std::option::Option<crate::types::FailoverMode>,
}
impl UpdateDbClusterInputBuilder {
    /// <p>Service-generated unique identifier of the DB cluster to update.</p>
    /// This field is required.
    pub fn db_cluster_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_cluster_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Service-generated unique identifier of the DB cluster to update.</p>
    pub fn set_db_cluster_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_cluster_id = input;
        self
    }
    /// <p>Service-generated unique identifier of the DB cluster to update.</p>
    pub fn get_db_cluster_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_cluster_id
    }
    /// <p>The log delivery configuration to apply to the DB cluster.</p>
    pub fn log_delivery_configuration(mut self, input: crate::types::LogDeliveryConfiguration) -> Self {
        self.log_delivery_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The log delivery configuration to apply to the DB cluster.</p>
    pub fn set_log_delivery_configuration(mut self, input: ::std::option::Option<crate::types::LogDeliveryConfiguration>) -> Self {
        self.log_delivery_configuration = input;
        self
    }
    /// <p>The log delivery configuration to apply to the DB cluster.</p>
    pub fn get_log_delivery_configuration(&self) -> &::std::option::Option<crate::types::LogDeliveryConfiguration> {
        &self.log_delivery_configuration
    }
    /// <p>Update the DB cluster to use the specified DB parameter group.</p>
    pub fn db_parameter_group_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_parameter_group_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Update the DB cluster to use the specified DB parameter group.</p>
    pub fn set_db_parameter_group_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_parameter_group_identifier = input;
        self
    }
    /// <p>Update the DB cluster to use the specified DB parameter group.</p>
    pub fn get_db_parameter_group_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_parameter_group_identifier
    }
    /// <p>Update the DB cluster to use the specified port.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// <p>Update the DB cluster to use the specified port.</p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>Update the DB cluster to use the specified port.</p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// <p>Update the DB cluster to use the specified DB instance Type.</p>
    pub fn db_instance_type(mut self, input: crate::types::DbInstanceType) -> Self {
        self.db_instance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Update the DB cluster to use the specified DB instance Type.</p>
    pub fn set_db_instance_type(mut self, input: ::std::option::Option<crate::types::DbInstanceType>) -> Self {
        self.db_instance_type = input;
        self
    }
    /// <p>Update the DB cluster to use the specified DB instance Type.</p>
    pub fn get_db_instance_type(&self) -> &::std::option::Option<crate::types::DbInstanceType> {
        &self.db_instance_type
    }
    /// <p>Update the DB cluster's failover behavior.</p>
    pub fn failover_mode(mut self, input: crate::types::FailoverMode) -> Self {
        self.failover_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Update the DB cluster's failover behavior.</p>
    pub fn set_failover_mode(mut self, input: ::std::option::Option<crate::types::FailoverMode>) -> Self {
        self.failover_mode = input;
        self
    }
    /// <p>Update the DB cluster's failover behavior.</p>
    pub fn get_failover_mode(&self) -> &::std::option::Option<crate::types::FailoverMode> {
        &self.failover_mode
    }
    /// Consumes the builder and constructs a [`UpdateDbClusterInput`](crate::operation::update_db_cluster::UpdateDbClusterInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_db_cluster::UpdateDbClusterInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_db_cluster::UpdateDbClusterInput {
            db_cluster_id: self.db_cluster_id,
            log_delivery_configuration: self.log_delivery_configuration,
            db_parameter_group_identifier: self.db_parameter_group_identifier,
            port: self.port,
            db_instance_type: self.db_instance_type,
            failover_mode: self.failover_mode,
        })
    }
}
