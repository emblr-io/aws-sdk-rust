// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateDbInstanceInput {
    /// <p>The id of the DB instance.</p>
    pub identifier: ::std::option::Option<::std::string::String>,
    /// <p>Configuration for sending InfluxDB engine logs to send to specified S3 bucket.</p>
    pub log_delivery_configuration: ::std::option::Option<crate::types::LogDeliveryConfiguration>,
    /// <p>The id of the DB parameter group to assign to your DB instance. DB parameter groups specify how the database is configured. For example, DB parameter groups can specify the limit for query concurrency.</p>
    pub db_parameter_group_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The port number on which InfluxDB accepts connections.</p>
    /// <p>If you change the Port value, your database restarts immediately.</p>
    /// <p>Valid Values: 1024-65535</p>
    /// <p>Default: 8086</p>
    /// <p>Constraints: The value can't be 2375-2376, 7788-7799, 8090, or 51678-51680</p>
    pub port: ::std::option::Option<i32>,
    /// <p>The Timestream for InfluxDB DB instance type to run InfluxDB on.</p>
    pub db_instance_type: ::std::option::Option<crate::types::DbInstanceType>,
    /// <p>Specifies whether the DB instance will be deployed as a standalone instance or with a Multi-AZ standby for high availability.</p>
    pub deployment_type: ::std::option::Option<crate::types::DeploymentType>,
    /// <p>The Timestream for InfluxDB DB storage type that InfluxDB stores data on.</p>
    pub db_storage_type: ::std::option::Option<crate::types::DbStorageType>,
    /// <p>The amount of storage to allocate for your DB storage type (in gibibytes).</p>
    pub allocated_storage: ::std::option::Option<i32>,
}
impl UpdateDbInstanceInput {
    /// <p>The id of the DB instance.</p>
    pub fn identifier(&self) -> ::std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>Configuration for sending InfluxDB engine logs to send to specified S3 bucket.</p>
    pub fn log_delivery_configuration(&self) -> ::std::option::Option<&crate::types::LogDeliveryConfiguration> {
        self.log_delivery_configuration.as_ref()
    }
    /// <p>The id of the DB parameter group to assign to your DB instance. DB parameter groups specify how the database is configured. For example, DB parameter groups can specify the limit for query concurrency.</p>
    pub fn db_parameter_group_identifier(&self) -> ::std::option::Option<&str> {
        self.db_parameter_group_identifier.as_deref()
    }
    /// <p>The port number on which InfluxDB accepts connections.</p>
    /// <p>If you change the Port value, your database restarts immediately.</p>
    /// <p>Valid Values: 1024-65535</p>
    /// <p>Default: 8086</p>
    /// <p>Constraints: The value can't be 2375-2376, 7788-7799, 8090, or 51678-51680</p>
    pub fn port(&self) -> ::std::option::Option<i32> {
        self.port
    }
    /// <p>The Timestream for InfluxDB DB instance type to run InfluxDB on.</p>
    pub fn db_instance_type(&self) -> ::std::option::Option<&crate::types::DbInstanceType> {
        self.db_instance_type.as_ref()
    }
    /// <p>Specifies whether the DB instance will be deployed as a standalone instance or with a Multi-AZ standby for high availability.</p>
    pub fn deployment_type(&self) -> ::std::option::Option<&crate::types::DeploymentType> {
        self.deployment_type.as_ref()
    }
    /// <p>The Timestream for InfluxDB DB storage type that InfluxDB stores data on.</p>
    pub fn db_storage_type(&self) -> ::std::option::Option<&crate::types::DbStorageType> {
        self.db_storage_type.as_ref()
    }
    /// <p>The amount of storage to allocate for your DB storage type (in gibibytes).</p>
    pub fn allocated_storage(&self) -> ::std::option::Option<i32> {
        self.allocated_storage
    }
}
impl UpdateDbInstanceInput {
    /// Creates a new builder-style object to manufacture [`UpdateDbInstanceInput`](crate::operation::update_db_instance::UpdateDbInstanceInput).
    pub fn builder() -> crate::operation::update_db_instance::builders::UpdateDbInstanceInputBuilder {
        crate::operation::update_db_instance::builders::UpdateDbInstanceInputBuilder::default()
    }
}

/// A builder for [`UpdateDbInstanceInput`](crate::operation::update_db_instance::UpdateDbInstanceInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateDbInstanceInputBuilder {
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) log_delivery_configuration: ::std::option::Option<crate::types::LogDeliveryConfiguration>,
    pub(crate) db_parameter_group_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) port: ::std::option::Option<i32>,
    pub(crate) db_instance_type: ::std::option::Option<crate::types::DbInstanceType>,
    pub(crate) deployment_type: ::std::option::Option<crate::types::DeploymentType>,
    pub(crate) db_storage_type: ::std::option::Option<crate::types::DbStorageType>,
    pub(crate) allocated_storage: ::std::option::Option<i32>,
}
impl UpdateDbInstanceInputBuilder {
    /// <p>The id of the DB instance.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The id of the DB instance.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The id of the DB instance.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>Configuration for sending InfluxDB engine logs to send to specified S3 bucket.</p>
    pub fn log_delivery_configuration(mut self, input: crate::types::LogDeliveryConfiguration) -> Self {
        self.log_delivery_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration for sending InfluxDB engine logs to send to specified S3 bucket.</p>
    pub fn set_log_delivery_configuration(mut self, input: ::std::option::Option<crate::types::LogDeliveryConfiguration>) -> Self {
        self.log_delivery_configuration = input;
        self
    }
    /// <p>Configuration for sending InfluxDB engine logs to send to specified S3 bucket.</p>
    pub fn get_log_delivery_configuration(&self) -> &::std::option::Option<crate::types::LogDeliveryConfiguration> {
        &self.log_delivery_configuration
    }
    /// <p>The id of the DB parameter group to assign to your DB instance. DB parameter groups specify how the database is configured. For example, DB parameter groups can specify the limit for query concurrency.</p>
    pub fn db_parameter_group_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_parameter_group_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The id of the DB parameter group to assign to your DB instance. DB parameter groups specify how the database is configured. For example, DB parameter groups can specify the limit for query concurrency.</p>
    pub fn set_db_parameter_group_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_parameter_group_identifier = input;
        self
    }
    /// <p>The id of the DB parameter group to assign to your DB instance. DB parameter groups specify how the database is configured. For example, DB parameter groups can specify the limit for query concurrency.</p>
    pub fn get_db_parameter_group_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_parameter_group_identifier
    }
    /// <p>The port number on which InfluxDB accepts connections.</p>
    /// <p>If you change the Port value, your database restarts immediately.</p>
    /// <p>Valid Values: 1024-65535</p>
    /// <p>Default: 8086</p>
    /// <p>Constraints: The value can't be 2375-2376, 7788-7799, 8090, or 51678-51680</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port number on which InfluxDB accepts connections.</p>
    /// <p>If you change the Port value, your database restarts immediately.</p>
    /// <p>Valid Values: 1024-65535</p>
    /// <p>Default: 8086</p>
    /// <p>Constraints: The value can't be 2375-2376, 7788-7799, 8090, or 51678-51680</p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The port number on which InfluxDB accepts connections.</p>
    /// <p>If you change the Port value, your database restarts immediately.</p>
    /// <p>Valid Values: 1024-65535</p>
    /// <p>Default: 8086</p>
    /// <p>Constraints: The value can't be 2375-2376, 7788-7799, 8090, or 51678-51680</p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// <p>The Timestream for InfluxDB DB instance type to run InfluxDB on.</p>
    pub fn db_instance_type(mut self, input: crate::types::DbInstanceType) -> Self {
        self.db_instance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Timestream for InfluxDB DB instance type to run InfluxDB on.</p>
    pub fn set_db_instance_type(mut self, input: ::std::option::Option<crate::types::DbInstanceType>) -> Self {
        self.db_instance_type = input;
        self
    }
    /// <p>The Timestream for InfluxDB DB instance type to run InfluxDB on.</p>
    pub fn get_db_instance_type(&self) -> &::std::option::Option<crate::types::DbInstanceType> {
        &self.db_instance_type
    }
    /// <p>Specifies whether the DB instance will be deployed as a standalone instance or with a Multi-AZ standby for high availability.</p>
    pub fn deployment_type(mut self, input: crate::types::DeploymentType) -> Self {
        self.deployment_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the DB instance will be deployed as a standalone instance or with a Multi-AZ standby for high availability.</p>
    pub fn set_deployment_type(mut self, input: ::std::option::Option<crate::types::DeploymentType>) -> Self {
        self.deployment_type = input;
        self
    }
    /// <p>Specifies whether the DB instance will be deployed as a standalone instance or with a Multi-AZ standby for high availability.</p>
    pub fn get_deployment_type(&self) -> &::std::option::Option<crate::types::DeploymentType> {
        &self.deployment_type
    }
    /// <p>The Timestream for InfluxDB DB storage type that InfluxDB stores data on.</p>
    pub fn db_storage_type(mut self, input: crate::types::DbStorageType) -> Self {
        self.db_storage_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Timestream for InfluxDB DB storage type that InfluxDB stores data on.</p>
    pub fn set_db_storage_type(mut self, input: ::std::option::Option<crate::types::DbStorageType>) -> Self {
        self.db_storage_type = input;
        self
    }
    /// <p>The Timestream for InfluxDB DB storage type that InfluxDB stores data on.</p>
    pub fn get_db_storage_type(&self) -> &::std::option::Option<crate::types::DbStorageType> {
        &self.db_storage_type
    }
    /// <p>The amount of storage to allocate for your DB storage type (in gibibytes).</p>
    pub fn allocated_storage(mut self, input: i32) -> Self {
        self.allocated_storage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of storage to allocate for your DB storage type (in gibibytes).</p>
    pub fn set_allocated_storage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.allocated_storage = input;
        self
    }
    /// <p>The amount of storage to allocate for your DB storage type (in gibibytes).</p>
    pub fn get_allocated_storage(&self) -> &::std::option::Option<i32> {
        &self.allocated_storage
    }
    /// Consumes the builder and constructs a [`UpdateDbInstanceInput`](crate::operation::update_db_instance::UpdateDbInstanceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_db_instance::UpdateDbInstanceInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_db_instance::UpdateDbInstanceInput {
            identifier: self.identifier,
            log_delivery_configuration: self.log_delivery_configuration,
            db_parameter_group_identifier: self.db_parameter_group_identifier,
            port: self.port,
            db_instance_type: self.db_instance_type,
            deployment_type: self.deployment_type,
            db_storage_type: self.db_storage_type,
            allocated_storage: self.allocated_storage,
        })
    }
}
