// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the content and "From" address for an email message that's sent to recipients of a campaign.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CampaignEmailMessage {
    /// <p>The body of the email for recipients whose email clients don't render HTML content.</p>
    pub body: ::std::option::Option<::std::string::String>,
    /// <p>The verified email address to send the email from. The default address is the FromAddress specified for the email channel for the application.</p>
    pub from_address: ::std::option::Option<::std::string::String>,
    /// <p>The list of <a href="https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-campaigns-campaign-id.html#apps-application-id-campaigns-campaign-id-model-messageheader">MessageHeaders</a> for the email. You can have up to 15 MessageHeaders for each email.</p>
    pub headers: ::std::option::Option<::std::vec::Vec<crate::types::MessageHeader>>,
    /// <p>The body of the email, in HTML format, for recipients whose email clients render HTML content.</p>
    pub html_body: ::std::option::Option<::std::string::String>,
    /// <p>The subject line, or title, of the email.</p>
    pub title: ::std::option::Option<::std::string::String>,
}
impl CampaignEmailMessage {
    /// <p>The body of the email for recipients whose email clients don't render HTML content.</p>
    pub fn body(&self) -> ::std::option::Option<&str> {
        self.body.as_deref()
    }
    /// <p>The verified email address to send the email from. The default address is the FromAddress specified for the email channel for the application.</p>
    pub fn from_address(&self) -> ::std::option::Option<&str> {
        self.from_address.as_deref()
    }
    /// <p>The list of <a href="https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-campaigns-campaign-id.html#apps-application-id-campaigns-campaign-id-model-messageheader">MessageHeaders</a> for the email. You can have up to 15 MessageHeaders for each email.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.headers.is_none()`.
    pub fn headers(&self) -> &[crate::types::MessageHeader] {
        self.headers.as_deref().unwrap_or_default()
    }
    /// <p>The body of the email, in HTML format, for recipients whose email clients render HTML content.</p>
    pub fn html_body(&self) -> ::std::option::Option<&str> {
        self.html_body.as_deref()
    }
    /// <p>The subject line, or title, of the email.</p>
    pub fn title(&self) -> ::std::option::Option<&str> {
        self.title.as_deref()
    }
}
impl CampaignEmailMessage {
    /// Creates a new builder-style object to manufacture [`CampaignEmailMessage`](crate::types::CampaignEmailMessage).
    pub fn builder() -> crate::types::builders::CampaignEmailMessageBuilder {
        crate::types::builders::CampaignEmailMessageBuilder::default()
    }
}

/// A builder for [`CampaignEmailMessage`](crate::types::CampaignEmailMessage).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CampaignEmailMessageBuilder {
    pub(crate) body: ::std::option::Option<::std::string::String>,
    pub(crate) from_address: ::std::option::Option<::std::string::String>,
    pub(crate) headers: ::std::option::Option<::std::vec::Vec<crate::types::MessageHeader>>,
    pub(crate) html_body: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
}
impl CampaignEmailMessageBuilder {
    /// <p>The body of the email for recipients whose email clients don't render HTML content.</p>
    pub fn body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The body of the email for recipients whose email clients don't render HTML content.</p>
    pub fn set_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// <p>The body of the email for recipients whose email clients don't render HTML content.</p>
    pub fn get_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.body
    }
    /// <p>The verified email address to send the email from. The default address is the FromAddress specified for the email channel for the application.</p>
    pub fn from_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.from_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The verified email address to send the email from. The default address is the FromAddress specified for the email channel for the application.</p>
    pub fn set_from_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.from_address = input;
        self
    }
    /// <p>The verified email address to send the email from. The default address is the FromAddress specified for the email channel for the application.</p>
    pub fn get_from_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.from_address
    }
    /// Appends an item to `headers`.
    ///
    /// To override the contents of this collection use [`set_headers`](Self::set_headers).
    ///
    /// <p>The list of <a href="https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-campaigns-campaign-id.html#apps-application-id-campaigns-campaign-id-model-messageheader">MessageHeaders</a> for the email. You can have up to 15 MessageHeaders for each email.</p>
    pub fn headers(mut self, input: crate::types::MessageHeader) -> Self {
        let mut v = self.headers.unwrap_or_default();
        v.push(input);
        self.headers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of <a href="https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-campaigns-campaign-id.html#apps-application-id-campaigns-campaign-id-model-messageheader">MessageHeaders</a> for the email. You can have up to 15 MessageHeaders for each email.</p>
    pub fn set_headers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MessageHeader>>) -> Self {
        self.headers = input;
        self
    }
    /// <p>The list of <a href="https://docs.aws.amazon.com/pinpoint/latest/apireference/apps-application-id-campaigns-campaign-id.html#apps-application-id-campaigns-campaign-id-model-messageheader">MessageHeaders</a> for the email. You can have up to 15 MessageHeaders for each email.</p>
    pub fn get_headers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MessageHeader>> {
        &self.headers
    }
    /// <p>The body of the email, in HTML format, for recipients whose email clients render HTML content.</p>
    pub fn html_body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.html_body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The body of the email, in HTML format, for recipients whose email clients render HTML content.</p>
    pub fn set_html_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.html_body = input;
        self
    }
    /// <p>The body of the email, in HTML format, for recipients whose email clients render HTML content.</p>
    pub fn get_html_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.html_body
    }
    /// <p>The subject line, or title, of the email.</p>
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subject line, or title, of the email.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The subject line, or title, of the email.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// Consumes the builder and constructs a [`CampaignEmailMessage`](crate::types::CampaignEmailMessage).
    pub fn build(self) -> crate::types::CampaignEmailMessage {
        crate::types::CampaignEmailMessage {
            body: self.body,
            from_address: self.from_address,
            headers: self.headers,
            html_body: self.html_body,
            title: self.title,
        }
    }
}
