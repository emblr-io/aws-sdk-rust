// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the contents of an email message, composed of a subject, a text part, and an HTML part.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SimpleEmail {
    /// <p>The body of the email message, in HTML format. We recommend using HTML format for email clients that render HTML content. You can include links, formatted text, and more in an HTML message.</p>
    pub html_part: ::std::option::Option<crate::types::SimpleEmailPart>,
    /// <p>The subject line, or title, of the email.</p>
    pub subject: ::std::option::Option<crate::types::SimpleEmailPart>,
    /// <p>The body of the email message, in plain text format. We recommend using plain text format for email clients that don't render HTML content and clients that are connected to high-latency networks, such as mobile devices.</p>
    pub text_part: ::std::option::Option<crate::types::SimpleEmailPart>,
    /// <p>The list of MessageHeaders for the email. You can have up to 15 Headers.</p>
    pub headers: ::std::option::Option<::std::vec::Vec<crate::types::MessageHeader>>,
}
impl SimpleEmail {
    /// <p>The body of the email message, in HTML format. We recommend using HTML format for email clients that render HTML content. You can include links, formatted text, and more in an HTML message.</p>
    pub fn html_part(&self) -> ::std::option::Option<&crate::types::SimpleEmailPart> {
        self.html_part.as_ref()
    }
    /// <p>The subject line, or title, of the email.</p>
    pub fn subject(&self) -> ::std::option::Option<&crate::types::SimpleEmailPart> {
        self.subject.as_ref()
    }
    /// <p>The body of the email message, in plain text format. We recommend using plain text format for email clients that don't render HTML content and clients that are connected to high-latency networks, such as mobile devices.</p>
    pub fn text_part(&self) -> ::std::option::Option<&crate::types::SimpleEmailPart> {
        self.text_part.as_ref()
    }
    /// <p>The list of MessageHeaders for the email. You can have up to 15 Headers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.headers.is_none()`.
    pub fn headers(&self) -> &[crate::types::MessageHeader] {
        self.headers.as_deref().unwrap_or_default()
    }
}
impl SimpleEmail {
    /// Creates a new builder-style object to manufacture [`SimpleEmail`](crate::types::SimpleEmail).
    pub fn builder() -> crate::types::builders::SimpleEmailBuilder {
        crate::types::builders::SimpleEmailBuilder::default()
    }
}

/// A builder for [`SimpleEmail`](crate::types::SimpleEmail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SimpleEmailBuilder {
    pub(crate) html_part: ::std::option::Option<crate::types::SimpleEmailPart>,
    pub(crate) subject: ::std::option::Option<crate::types::SimpleEmailPart>,
    pub(crate) text_part: ::std::option::Option<crate::types::SimpleEmailPart>,
    pub(crate) headers: ::std::option::Option<::std::vec::Vec<crate::types::MessageHeader>>,
}
impl SimpleEmailBuilder {
    /// <p>The body of the email message, in HTML format. We recommend using HTML format for email clients that render HTML content. You can include links, formatted text, and more in an HTML message.</p>
    pub fn html_part(mut self, input: crate::types::SimpleEmailPart) -> Self {
        self.html_part = ::std::option::Option::Some(input);
        self
    }
    /// <p>The body of the email message, in HTML format. We recommend using HTML format for email clients that render HTML content. You can include links, formatted text, and more in an HTML message.</p>
    pub fn set_html_part(mut self, input: ::std::option::Option<crate::types::SimpleEmailPart>) -> Self {
        self.html_part = input;
        self
    }
    /// <p>The body of the email message, in HTML format. We recommend using HTML format for email clients that render HTML content. You can include links, formatted text, and more in an HTML message.</p>
    pub fn get_html_part(&self) -> &::std::option::Option<crate::types::SimpleEmailPart> {
        &self.html_part
    }
    /// <p>The subject line, or title, of the email.</p>
    pub fn subject(mut self, input: crate::types::SimpleEmailPart) -> Self {
        self.subject = ::std::option::Option::Some(input);
        self
    }
    /// <p>The subject line, or title, of the email.</p>
    pub fn set_subject(mut self, input: ::std::option::Option<crate::types::SimpleEmailPart>) -> Self {
        self.subject = input;
        self
    }
    /// <p>The subject line, or title, of the email.</p>
    pub fn get_subject(&self) -> &::std::option::Option<crate::types::SimpleEmailPart> {
        &self.subject
    }
    /// <p>The body of the email message, in plain text format. We recommend using plain text format for email clients that don't render HTML content and clients that are connected to high-latency networks, such as mobile devices.</p>
    pub fn text_part(mut self, input: crate::types::SimpleEmailPart) -> Self {
        self.text_part = ::std::option::Option::Some(input);
        self
    }
    /// <p>The body of the email message, in plain text format. We recommend using plain text format for email clients that don't render HTML content and clients that are connected to high-latency networks, such as mobile devices.</p>
    pub fn set_text_part(mut self, input: ::std::option::Option<crate::types::SimpleEmailPart>) -> Self {
        self.text_part = input;
        self
    }
    /// <p>The body of the email message, in plain text format. We recommend using plain text format for email clients that don't render HTML content and clients that are connected to high-latency networks, such as mobile devices.</p>
    pub fn get_text_part(&self) -> &::std::option::Option<crate::types::SimpleEmailPart> {
        &self.text_part
    }
    /// Appends an item to `headers`.
    ///
    /// To override the contents of this collection use [`set_headers`](Self::set_headers).
    ///
    /// <p>The list of MessageHeaders for the email. You can have up to 15 Headers.</p>
    pub fn headers(mut self, input: crate::types::MessageHeader) -> Self {
        let mut v = self.headers.unwrap_or_default();
        v.push(input);
        self.headers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of MessageHeaders for the email. You can have up to 15 Headers.</p>
    pub fn set_headers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MessageHeader>>) -> Self {
        self.headers = input;
        self
    }
    /// <p>The list of MessageHeaders for the email. You can have up to 15 Headers.</p>
    pub fn get_headers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MessageHeader>> {
        &self.headers
    }
    /// Consumes the builder and constructs a [`SimpleEmail`](crate::types::SimpleEmail).
    pub fn build(self) -> crate::types::SimpleEmail {
        crate::types::SimpleEmail {
            html_part: self.html_part,
            subject: self.subject,
            text_part: self.text_part,
            headers: self.headers,
        }
    }
}
