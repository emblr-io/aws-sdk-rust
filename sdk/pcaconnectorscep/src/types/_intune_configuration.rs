// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configuration details for use with Microsoft Intune. For information about using Connector for SCEP for Microsoft Intune, see <a href="https://docs.aws.amazon.com/privateca/latest/userguide/scep-connector.htmlconnector-for-scep-intune.html">Using Connector for SCEP for Microsoft Intune</a>.</p>
/// <p>When you use Connector for SCEP for Microsoft Intune, certain functionalities are enabled by accessing Microsoft Intune through the Microsoft API. Your use of the Connector for SCEP and accompanying Amazon Web Services services doesn't remove your need to have a valid license for your use of the Microsoft Intune service. You should also review the <a href="https://learn.microsoft.com/en-us/mem/intune/apps/app-protection-policy">Microsoft IntuneÂ® App Protection Policies</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IntuneConfiguration {
    /// <p>The directory (tenant) ID from your Microsoft Entra ID app registration.</p>
    pub azure_application_id: ::std::string::String,
    /// <p>The primary domain from your Microsoft Entra ID app registration.</p>
    pub domain: ::std::string::String,
}
impl IntuneConfiguration {
    /// <p>The directory (tenant) ID from your Microsoft Entra ID app registration.</p>
    pub fn azure_application_id(&self) -> &str {
        use std::ops::Deref;
        self.azure_application_id.deref()
    }
    /// <p>The primary domain from your Microsoft Entra ID app registration.</p>
    pub fn domain(&self) -> &str {
        use std::ops::Deref;
        self.domain.deref()
    }
}
impl IntuneConfiguration {
    /// Creates a new builder-style object to manufacture [`IntuneConfiguration`](crate::types::IntuneConfiguration).
    pub fn builder() -> crate::types::builders::IntuneConfigurationBuilder {
        crate::types::builders::IntuneConfigurationBuilder::default()
    }
}

/// A builder for [`IntuneConfiguration`](crate::types::IntuneConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IntuneConfigurationBuilder {
    pub(crate) azure_application_id: ::std::option::Option<::std::string::String>,
    pub(crate) domain: ::std::option::Option<::std::string::String>,
}
impl IntuneConfigurationBuilder {
    /// <p>The directory (tenant) ID from your Microsoft Entra ID app registration.</p>
    /// This field is required.
    pub fn azure_application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.azure_application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The directory (tenant) ID from your Microsoft Entra ID app registration.</p>
    pub fn set_azure_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.azure_application_id = input;
        self
    }
    /// <p>The directory (tenant) ID from your Microsoft Entra ID app registration.</p>
    pub fn get_azure_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.azure_application_id
    }
    /// <p>The primary domain from your Microsoft Entra ID app registration.</p>
    /// This field is required.
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The primary domain from your Microsoft Entra ID app registration.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The primary domain from your Microsoft Entra ID app registration.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// Consumes the builder and constructs a [`IntuneConfiguration`](crate::types::IntuneConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`azure_application_id`](crate::types::builders::IntuneConfigurationBuilder::azure_application_id)
    /// - [`domain`](crate::types::builders::IntuneConfigurationBuilder::domain)
    pub fn build(self) -> ::std::result::Result<crate::types::IntuneConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IntuneConfiguration {
            azure_application_id: self.azure_application_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "azure_application_id",
                    "azure_application_id was not specified but it is required when building IntuneConfiguration",
                )
            })?,
            domain: self.domain.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain",
                    "domain was not specified but it is required when building IntuneConfiguration",
                )
            })?,
        })
    }
}
