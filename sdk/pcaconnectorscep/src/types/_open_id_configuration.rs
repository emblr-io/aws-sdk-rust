// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains OpenID Connect (OIDC) parameters for use with Microsoft Intune. For more information about using Connector for SCEP for Microsoft Intune, see <a href="https://docs.aws.amazon.com/privateca/latest/userguide/scep-connector.htmlconnector-for-scep-intune.html">Using Connector for SCEP for Microsoft Intune</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OpenIdConfiguration {
    /// <p>The issuer value to copy into your Microsoft Entra app registration's OIDC.</p>
    pub issuer: ::std::option::Option<::std::string::String>,
    /// <p>The subject value to copy into your Microsoft Entra app registration's OIDC.</p>
    pub subject: ::std::option::Option<::std::string::String>,
    /// <p>The audience value to copy into your Microsoft Entra app registration's OIDC.</p>
    pub audience: ::std::option::Option<::std::string::String>,
}
impl OpenIdConfiguration {
    /// <p>The issuer value to copy into your Microsoft Entra app registration's OIDC.</p>
    pub fn issuer(&self) -> ::std::option::Option<&str> {
        self.issuer.as_deref()
    }
    /// <p>The subject value to copy into your Microsoft Entra app registration's OIDC.</p>
    pub fn subject(&self) -> ::std::option::Option<&str> {
        self.subject.as_deref()
    }
    /// <p>The audience value to copy into your Microsoft Entra app registration's OIDC.</p>
    pub fn audience(&self) -> ::std::option::Option<&str> {
        self.audience.as_deref()
    }
}
impl OpenIdConfiguration {
    /// Creates a new builder-style object to manufacture [`OpenIdConfiguration`](crate::types::OpenIdConfiguration).
    pub fn builder() -> crate::types::builders::OpenIdConfigurationBuilder {
        crate::types::builders::OpenIdConfigurationBuilder::default()
    }
}

/// A builder for [`OpenIdConfiguration`](crate::types::OpenIdConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OpenIdConfigurationBuilder {
    pub(crate) issuer: ::std::option::Option<::std::string::String>,
    pub(crate) subject: ::std::option::Option<::std::string::String>,
    pub(crate) audience: ::std::option::Option<::std::string::String>,
}
impl OpenIdConfigurationBuilder {
    /// <p>The issuer value to copy into your Microsoft Entra app registration's OIDC.</p>
    pub fn issuer(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.issuer = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The issuer value to copy into your Microsoft Entra app registration's OIDC.</p>
    pub fn set_issuer(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.issuer = input;
        self
    }
    /// <p>The issuer value to copy into your Microsoft Entra app registration's OIDC.</p>
    pub fn get_issuer(&self) -> &::std::option::Option<::std::string::String> {
        &self.issuer
    }
    /// <p>The subject value to copy into your Microsoft Entra app registration's OIDC.</p>
    pub fn subject(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subject = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subject value to copy into your Microsoft Entra app registration's OIDC.</p>
    pub fn set_subject(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subject = input;
        self
    }
    /// <p>The subject value to copy into your Microsoft Entra app registration's OIDC.</p>
    pub fn get_subject(&self) -> &::std::option::Option<::std::string::String> {
        &self.subject
    }
    /// <p>The audience value to copy into your Microsoft Entra app registration's OIDC.</p>
    pub fn audience(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.audience = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The audience value to copy into your Microsoft Entra app registration's OIDC.</p>
    pub fn set_audience(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.audience = input;
        self
    }
    /// <p>The audience value to copy into your Microsoft Entra app registration's OIDC.</p>
    pub fn get_audience(&self) -> &::std::option::Option<::std::string::String> {
        &self.audience
    }
    /// Consumes the builder and constructs a [`OpenIdConfiguration`](crate::types::OpenIdConfiguration).
    pub fn build(self) -> crate::types::OpenIdConfiguration {
        crate::types::OpenIdConfiguration {
            issuer: self.issuer,
            subject: self.subject,
            audience: self.audience,
        }
    }
}
