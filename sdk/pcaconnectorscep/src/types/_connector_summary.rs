// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Lists the Amazon Web Services Private CA SCEP connectors belonging to your Amazon Web Services account.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConnectorSummary {
    /// <p>The Amazon Resource Name (ARN) of the connector.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the connector's associated certificate authority.</p>
    pub certificate_authority_arn: ::std::option::Option<::std::string::String>,
    /// <p>The connector type.</p>
    pub r#type: ::std::option::Option<crate::types::ConnectorType>,
    /// <p>Contains settings relevant to the mobile device management system that you chose for the connector. If you didn't configure <code>MobileDeviceManagement</code>, then the connector is for general-purpose use and this object is empty.</p>
    pub mobile_device_management: ::std::option::Option<crate::types::MobileDeviceManagement>,
    /// <p>Contains OpenID Connect (OIDC) parameters for use with Microsoft Intune.</p>
    pub open_id_configuration: ::std::option::Option<crate::types::OpenIdConfiguration>,
    /// <p>The connector's status. Status can be creating, active, deleting, or failed.</p>
    pub status: ::std::option::Option<crate::types::ConnectorStatus>,
    /// <p>Information about why connector creation failed, if status is <code>FAILED</code>.</p>
    pub status_reason: ::std::option::Option<crate::types::ConnectorStatusReason>,
    /// <p>The connector's HTTPS public SCEP URL.</p>
    pub endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the challenge was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time that the challenge was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ConnectorSummary {
    /// <p>The Amazon Resource Name (ARN) of the connector.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the connector's associated certificate authority.</p>
    pub fn certificate_authority_arn(&self) -> ::std::option::Option<&str> {
        self.certificate_authority_arn.as_deref()
    }
    /// <p>The connector type.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::ConnectorType> {
        self.r#type.as_ref()
    }
    /// <p>Contains settings relevant to the mobile device management system that you chose for the connector. If you didn't configure <code>MobileDeviceManagement</code>, then the connector is for general-purpose use and this object is empty.</p>
    pub fn mobile_device_management(&self) -> ::std::option::Option<&crate::types::MobileDeviceManagement> {
        self.mobile_device_management.as_ref()
    }
    /// <p>Contains OpenID Connect (OIDC) parameters for use with Microsoft Intune.</p>
    pub fn open_id_configuration(&self) -> ::std::option::Option<&crate::types::OpenIdConfiguration> {
        self.open_id_configuration.as_ref()
    }
    /// <p>The connector's status. Status can be creating, active, deleting, or failed.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ConnectorStatus> {
        self.status.as_ref()
    }
    /// <p>Information about why connector creation failed, if status is <code>FAILED</code>.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&crate::types::ConnectorStatusReason> {
        self.status_reason.as_ref()
    }
    /// <p>The connector's HTTPS public SCEP URL.</p>
    pub fn endpoint(&self) -> ::std::option::Option<&str> {
        self.endpoint.as_deref()
    }
    /// <p>The date and time that the challenge was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The date and time that the challenge was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl ConnectorSummary {
    /// Creates a new builder-style object to manufacture [`ConnectorSummary`](crate::types::ConnectorSummary).
    pub fn builder() -> crate::types::builders::ConnectorSummaryBuilder {
        crate::types::builders::ConnectorSummaryBuilder::default()
    }
}

/// A builder for [`ConnectorSummary`](crate::types::ConnectorSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConnectorSummaryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) certificate_authority_arn: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::ConnectorType>,
    pub(crate) mobile_device_management: ::std::option::Option<crate::types::MobileDeviceManagement>,
    pub(crate) open_id_configuration: ::std::option::Option<crate::types::OpenIdConfiguration>,
    pub(crate) status: ::std::option::Option<crate::types::ConnectorStatus>,
    pub(crate) status_reason: ::std::option::Option<crate::types::ConnectorStatusReason>,
    pub(crate) endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ConnectorSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the connector.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connector.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connector.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The Amazon Resource Name (ARN) of the connector's associated certificate authority.</p>
    pub fn certificate_authority_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certificate_authority_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connector's associated certificate authority.</p>
    pub fn set_certificate_authority_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certificate_authority_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connector's associated certificate authority.</p>
    pub fn get_certificate_authority_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.certificate_authority_arn
    }
    /// <p>The connector type.</p>
    pub fn r#type(mut self, input: crate::types::ConnectorType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The connector type.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ConnectorType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The connector type.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ConnectorType> {
        &self.r#type
    }
    /// <p>Contains settings relevant to the mobile device management system that you chose for the connector. If you didn't configure <code>MobileDeviceManagement</code>, then the connector is for general-purpose use and this object is empty.</p>
    pub fn mobile_device_management(mut self, input: crate::types::MobileDeviceManagement) -> Self {
        self.mobile_device_management = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains settings relevant to the mobile device management system that you chose for the connector. If you didn't configure <code>MobileDeviceManagement</code>, then the connector is for general-purpose use and this object is empty.</p>
    pub fn set_mobile_device_management(mut self, input: ::std::option::Option<crate::types::MobileDeviceManagement>) -> Self {
        self.mobile_device_management = input;
        self
    }
    /// <p>Contains settings relevant to the mobile device management system that you chose for the connector. If you didn't configure <code>MobileDeviceManagement</code>, then the connector is for general-purpose use and this object is empty.</p>
    pub fn get_mobile_device_management(&self) -> &::std::option::Option<crate::types::MobileDeviceManagement> {
        &self.mobile_device_management
    }
    /// <p>Contains OpenID Connect (OIDC) parameters for use with Microsoft Intune.</p>
    pub fn open_id_configuration(mut self, input: crate::types::OpenIdConfiguration) -> Self {
        self.open_id_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains OpenID Connect (OIDC) parameters for use with Microsoft Intune.</p>
    pub fn set_open_id_configuration(mut self, input: ::std::option::Option<crate::types::OpenIdConfiguration>) -> Self {
        self.open_id_configuration = input;
        self
    }
    /// <p>Contains OpenID Connect (OIDC) parameters for use with Microsoft Intune.</p>
    pub fn get_open_id_configuration(&self) -> &::std::option::Option<crate::types::OpenIdConfiguration> {
        &self.open_id_configuration
    }
    /// <p>The connector's status. Status can be creating, active, deleting, or failed.</p>
    pub fn status(mut self, input: crate::types::ConnectorStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The connector's status. Status can be creating, active, deleting, or failed.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ConnectorStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The connector's status. Status can be creating, active, deleting, or failed.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ConnectorStatus> {
        &self.status
    }
    /// <p>Information about why connector creation failed, if status is <code>FAILED</code>.</p>
    pub fn status_reason(mut self, input: crate::types::ConnectorStatusReason) -> Self {
        self.status_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about why connector creation failed, if status is <code>FAILED</code>.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<crate::types::ConnectorStatusReason>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>Information about why connector creation failed, if status is <code>FAILED</code>.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<crate::types::ConnectorStatusReason> {
        &self.status_reason
    }
    /// <p>The connector's HTTPS public SCEP URL.</p>
    pub fn endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The connector's HTTPS public SCEP URL.</p>
    pub fn set_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint = input;
        self
    }
    /// <p>The connector's HTTPS public SCEP URL.</p>
    pub fn get_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint
    }
    /// <p>The date and time that the challenge was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the challenge was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time that the challenge was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The date and time that the challenge was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the challenge was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The date and time that the challenge was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Consumes the builder and constructs a [`ConnectorSummary`](crate::types::ConnectorSummary).
    pub fn build(self) -> crate::types::ConnectorSummary {
        crate::types::ConnectorSummary {
            arn: self.arn,
            certificate_authority_arn: self.certificate_authority_arn,
            r#type: self.r#type,
            mobile_device_management: self.mobile_device_management,
            open_id_configuration: self.open_id_configuration,
            status: self.status,
            status_reason: self.status_reason,
            endpoint: self.endpoint,
            created_at: self.created_at,
            updated_at: self.updated_at,
        }
    }
}
