// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartTrainedModelExportJobInput {
    /// <p>The name of the trained model export job.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the trained model that you want to export.</p>
    pub trained_model_arn: ::std::option::Option<::std::string::String>,
    /// <p>The version identifier of the trained model to export. This specifies which version of the trained model should be exported to the specified destination.</p>
    pub trained_model_version_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The membership ID of the member that is receiving the exported trained model artifacts.</p>
    pub membership_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The output configuration information for the trained model export job.</p>
    pub output_configuration: ::std::option::Option<crate::types::TrainedModelExportOutputConfiguration>,
    /// <p>The description of the trained model export job.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl StartTrainedModelExportJobInput {
    /// <p>The name of the trained model export job.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model that you want to export.</p>
    pub fn trained_model_arn(&self) -> ::std::option::Option<&str> {
        self.trained_model_arn.as_deref()
    }
    /// <p>The version identifier of the trained model to export. This specifies which version of the trained model should be exported to the specified destination.</p>
    pub fn trained_model_version_identifier(&self) -> ::std::option::Option<&str> {
        self.trained_model_version_identifier.as_deref()
    }
    /// <p>The membership ID of the member that is receiving the exported trained model artifacts.</p>
    pub fn membership_identifier(&self) -> ::std::option::Option<&str> {
        self.membership_identifier.as_deref()
    }
    /// <p>The output configuration information for the trained model export job.</p>
    pub fn output_configuration(&self) -> ::std::option::Option<&crate::types::TrainedModelExportOutputConfiguration> {
        self.output_configuration.as_ref()
    }
    /// <p>The description of the trained model export job.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl StartTrainedModelExportJobInput {
    /// Creates a new builder-style object to manufacture [`StartTrainedModelExportJobInput`](crate::operation::start_trained_model_export_job::StartTrainedModelExportJobInput).
    pub fn builder() -> crate::operation::start_trained_model_export_job::builders::StartTrainedModelExportJobInputBuilder {
        crate::operation::start_trained_model_export_job::builders::StartTrainedModelExportJobInputBuilder::default()
    }
}

/// A builder for [`StartTrainedModelExportJobInput`](crate::operation::start_trained_model_export_job::StartTrainedModelExportJobInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartTrainedModelExportJobInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) trained_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) trained_model_version_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) membership_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) output_configuration: ::std::option::Option<crate::types::TrainedModelExportOutputConfiguration>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl StartTrainedModelExportJobInputBuilder {
    /// <p>The name of the trained model export job.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the trained model export job.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the trained model export job.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model that you want to export.</p>
    /// This field is required.
    pub fn trained_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trained_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model that you want to export.</p>
    pub fn set_trained_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trained_model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model that you want to export.</p>
    pub fn get_trained_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.trained_model_arn
    }
    /// <p>The version identifier of the trained model to export. This specifies which version of the trained model should be exported to the specified destination.</p>
    pub fn trained_model_version_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trained_model_version_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version identifier of the trained model to export. This specifies which version of the trained model should be exported to the specified destination.</p>
    pub fn set_trained_model_version_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trained_model_version_identifier = input;
        self
    }
    /// <p>The version identifier of the trained model to export. This specifies which version of the trained model should be exported to the specified destination.</p>
    pub fn get_trained_model_version_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.trained_model_version_identifier
    }
    /// <p>The membership ID of the member that is receiving the exported trained model artifacts.</p>
    /// This field is required.
    pub fn membership_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The membership ID of the member that is receiving the exported trained model artifacts.</p>
    pub fn set_membership_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_identifier = input;
        self
    }
    /// <p>The membership ID of the member that is receiving the exported trained model artifacts.</p>
    pub fn get_membership_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_identifier
    }
    /// <p>The output configuration information for the trained model export job.</p>
    /// This field is required.
    pub fn output_configuration(mut self, input: crate::types::TrainedModelExportOutputConfiguration) -> Self {
        self.output_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The output configuration information for the trained model export job.</p>
    pub fn set_output_configuration(mut self, input: ::std::option::Option<crate::types::TrainedModelExportOutputConfiguration>) -> Self {
        self.output_configuration = input;
        self
    }
    /// <p>The output configuration information for the trained model export job.</p>
    pub fn get_output_configuration(&self) -> &::std::option::Option<crate::types::TrainedModelExportOutputConfiguration> {
        &self.output_configuration
    }
    /// <p>The description of the trained model export job.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the trained model export job.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the trained model export job.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`StartTrainedModelExportJobInput`](crate::operation::start_trained_model_export_job::StartTrainedModelExportJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_trained_model_export_job::StartTrainedModelExportJobInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::start_trained_model_export_job::StartTrainedModelExportJobInput {
            name: self.name,
            trained_model_arn: self.trained_model_arn,
            trained_model_version_identifier: self.trained_model_version_identifier,
            membership_identifier: self.membership_identifier,
            output_configuration: self.output_configuration,
            description: self.description,
        })
    }
}
