// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListTrainedModelVersionsInput {
    /// <p>The pagination token from a previous <code>ListTrainedModelVersions</code> request. Use this token to retrieve the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of trained model versions to return in a single page. The default value is 10, and the maximum value is 100.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The membership identifier for the collaboration that contains the trained model.</p>
    pub membership_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the trained model for which to list versions.</p>
    pub trained_model_arn: ::std::option::Option<::std::string::String>,
    /// <p>Filter the results to only include trained model versions with the specified status. Valid values include <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>ACTIVE</code>, <code>CREATE_FAILED</code>, and others.</p>
    pub status: ::std::option::Option<crate::types::TrainedModelStatus>,
}
impl ListTrainedModelVersionsInput {
    /// <p>The pagination token from a previous <code>ListTrainedModelVersions</code> request. Use this token to retrieve the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of trained model versions to return in a single page. The default value is 10, and the maximum value is 100.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The membership identifier for the collaboration that contains the trained model.</p>
    pub fn membership_identifier(&self) -> ::std::option::Option<&str> {
        self.membership_identifier.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model for which to list versions.</p>
    pub fn trained_model_arn(&self) -> ::std::option::Option<&str> {
        self.trained_model_arn.as_deref()
    }
    /// <p>Filter the results to only include trained model versions with the specified status. Valid values include <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>ACTIVE</code>, <code>CREATE_FAILED</code>, and others.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::TrainedModelStatus> {
        self.status.as_ref()
    }
}
impl ListTrainedModelVersionsInput {
    /// Creates a new builder-style object to manufacture [`ListTrainedModelVersionsInput`](crate::operation::list_trained_model_versions::ListTrainedModelVersionsInput).
    pub fn builder() -> crate::operation::list_trained_model_versions::builders::ListTrainedModelVersionsInputBuilder {
        crate::operation::list_trained_model_versions::builders::ListTrainedModelVersionsInputBuilder::default()
    }
}

/// A builder for [`ListTrainedModelVersionsInput`](crate::operation::list_trained_model_versions::ListTrainedModelVersionsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListTrainedModelVersionsInputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) membership_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) trained_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::TrainedModelStatus>,
}
impl ListTrainedModelVersionsInputBuilder {
    /// <p>The pagination token from a previous <code>ListTrainedModelVersions</code> request. Use this token to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token from a previous <code>ListTrainedModelVersions</code> request. Use this token to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token from a previous <code>ListTrainedModelVersions</code> request. Use this token to retrieve the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of trained model versions to return in a single page. The default value is 10, and the maximum value is 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of trained model versions to return in a single page. The default value is 10, and the maximum value is 100.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of trained model versions to return in a single page. The default value is 10, and the maximum value is 100.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The membership identifier for the collaboration that contains the trained model.</p>
    /// This field is required.
    pub fn membership_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The membership identifier for the collaboration that contains the trained model.</p>
    pub fn set_membership_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_identifier = input;
        self
    }
    /// <p>The membership identifier for the collaboration that contains the trained model.</p>
    pub fn get_membership_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_identifier
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model for which to list versions.</p>
    /// This field is required.
    pub fn trained_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trained_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model for which to list versions.</p>
    pub fn set_trained_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trained_model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model for which to list versions.</p>
    pub fn get_trained_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.trained_model_arn
    }
    /// <p>Filter the results to only include trained model versions with the specified status. Valid values include <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>ACTIVE</code>, <code>CREATE_FAILED</code>, and others.</p>
    pub fn status(mut self, input: crate::types::TrainedModelStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter the results to only include trained model versions with the specified status. Valid values include <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>ACTIVE</code>, <code>CREATE_FAILED</code>, and others.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TrainedModelStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Filter the results to only include trained model versions with the specified status. Valid values include <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>ACTIVE</code>, <code>CREATE_FAILED</code>, and others.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TrainedModelStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`ListTrainedModelVersionsInput`](crate::operation::list_trained_model_versions::ListTrainedModelVersionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_trained_model_versions::ListTrainedModelVersionsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_trained_model_versions::ListTrainedModelVersionsInput {
            next_token: self.next_token,
            max_results: self.max_results,
            membership_identifier: self.membership_identifier,
            trained_model_arn: self.trained_model_arn,
            status: self.status,
        })
    }
}
