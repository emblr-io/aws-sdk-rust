// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTrainedModelInferenceJobOutput {
    /// <p>The time at which the trained model inference job was created.</p>
    pub create_time: ::aws_smithy_types::DateTime,
    /// <p>The most recent time at which the trained model inference job was updated.</p>
    pub update_time: ::aws_smithy_types::DateTime,
    /// <p>The Amazon Resource Name (ARN) of the trained model inference job.</p>
    pub trained_model_inference_job_arn: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the configured model algorithm association that was used for the trained model inference job.</p>
    pub configured_model_algorithm_association_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the trained model inference job.</p>
    pub name: ::std::string::String,
    /// <p>The status of the trained model inference job.</p>
    pub status: crate::types::TrainedModelInferenceJobStatus,
    /// <p>The Amazon Resource Name (ARN) for the trained model that was used for the trained model inference job.</p>
    pub trained_model_arn: ::std::string::String,
    /// <p>The version identifier of the trained model used for this inference job. This identifies the specific version of the trained model that was used to generate the inference results.</p>
    pub trained_model_version_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The resource configuration information for the trained model inference job.</p>
    pub resource_config: ::std::option::Option<crate::types::InferenceResourceConfig>,
    /// <p>The output configuration information for the trained model inference job.</p>
    pub output_configuration: ::std::option::Option<crate::types::InferenceOutputConfiguration>,
    /// <p>The membership ID of the membership that contains the trained model inference job.</p>
    pub membership_identifier: ::std::string::String,
    /// <p>The data source that was used for the trained model inference job.</p>
    pub data_source: ::std::option::Option<crate::types::ModelInferenceDataSource>,
    /// <p>The execution parameters for the model inference job container.</p>
    pub container_execution_parameters: ::std::option::Option<crate::types::InferenceContainerExecutionParameters>,
    /// <p>Details about the status of a resource.</p>
    pub status_details: ::std::option::Option<crate::types::StatusDetails>,
    /// <p>The description of the trained model inference job.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Information about the training container image.</p>
    pub inference_container_image_digest: ::std::option::Option<::std::string::String>,
    /// <p>The environment variables to set in the Docker container.</p>
    pub environment: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The Amazon Resource Name (ARN) of the KMS key. This key is used to encrypt and decrypt customer-owned data in the ML inference job and associated data.</p>
    pub kms_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The metrics status for the trained model inference job.</p>
    pub metrics_status: ::std::option::Option<crate::types::MetricsStatus>,
    /// <p>Details about the metrics status for the trained model inference job.</p>
    pub metrics_status_details: ::std::option::Option<::std::string::String>,
    /// <p>The logs status for the trained model inference job.</p>
    pub logs_status: ::std::option::Option<crate::types::LogsStatus>,
    /// <p>Details about the logs status for the trained model inference job.</p>
    pub logs_status_details: ::std::option::Option<::std::string::String>,
    /// <p>The optional metadata that you applied to the resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
    /// <p>The following basic restrictions apply to tags:</p>
    /// <ul>
    /// <li>
    /// <p>Maximum number of tags per resource - 50.</p></li>
    /// <li>
    /// <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p></li>
    /// <li>
    /// <p>Maximum key length - 128 Unicode characters in UTF-8.</p></li>
    /// <li>
    /// <p>Maximum value length - 256 Unicode characters in UTF-8.</p></li>
    /// <li>
    /// <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p></li>
    /// <li>
    /// <p>Tag keys and values are case sensitive.</p></li>
    /// <li>
    /// <p>Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has aws as its prefix but the key does not, then Clean Rooms ML considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of aws do not count against your tags per resource limit.</p></li>
    /// </ul>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetTrainedModelInferenceJobOutput {
    /// <p>The time at which the trained model inference job was created.</p>
    pub fn create_time(&self) -> &::aws_smithy_types::DateTime {
        &self.create_time
    }
    /// <p>The most recent time at which the trained model inference job was updated.</p>
    pub fn update_time(&self) -> &::aws_smithy_types::DateTime {
        &self.update_time
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model inference job.</p>
    pub fn trained_model_inference_job_arn(&self) -> &str {
        use std::ops::Deref;
        self.trained_model_inference_job_arn.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the configured model algorithm association that was used for the trained model inference job.</p>
    pub fn configured_model_algorithm_association_arn(&self) -> ::std::option::Option<&str> {
        self.configured_model_algorithm_association_arn.as_deref()
    }
    /// <p>The name of the trained model inference job.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The status of the trained model inference job.</p>
    pub fn status(&self) -> &crate::types::TrainedModelInferenceJobStatus {
        &self.status
    }
    /// <p>The Amazon Resource Name (ARN) for the trained model that was used for the trained model inference job.</p>
    pub fn trained_model_arn(&self) -> &str {
        use std::ops::Deref;
        self.trained_model_arn.deref()
    }
    /// <p>The version identifier of the trained model used for this inference job. This identifies the specific version of the trained model that was used to generate the inference results.</p>
    pub fn trained_model_version_identifier(&self) -> ::std::option::Option<&str> {
        self.trained_model_version_identifier.as_deref()
    }
    /// <p>The resource configuration information for the trained model inference job.</p>
    pub fn resource_config(&self) -> ::std::option::Option<&crate::types::InferenceResourceConfig> {
        self.resource_config.as_ref()
    }
    /// <p>The output configuration information for the trained model inference job.</p>
    pub fn output_configuration(&self) -> ::std::option::Option<&crate::types::InferenceOutputConfiguration> {
        self.output_configuration.as_ref()
    }
    /// <p>The membership ID of the membership that contains the trained model inference job.</p>
    pub fn membership_identifier(&self) -> &str {
        use std::ops::Deref;
        self.membership_identifier.deref()
    }
    /// <p>The data source that was used for the trained model inference job.</p>
    pub fn data_source(&self) -> ::std::option::Option<&crate::types::ModelInferenceDataSource> {
        self.data_source.as_ref()
    }
    /// <p>The execution parameters for the model inference job container.</p>
    pub fn container_execution_parameters(&self) -> ::std::option::Option<&crate::types::InferenceContainerExecutionParameters> {
        self.container_execution_parameters.as_ref()
    }
    /// <p>Details about the status of a resource.</p>
    pub fn status_details(&self) -> ::std::option::Option<&crate::types::StatusDetails> {
        self.status_details.as_ref()
    }
    /// <p>The description of the trained model inference job.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Information about the training container image.</p>
    pub fn inference_container_image_digest(&self) -> ::std::option::Option<&str> {
        self.inference_container_image_digest.as_deref()
    }
    /// <p>The environment variables to set in the Docker container.</p>
    pub fn environment(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.environment.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key. This key is used to encrypt and decrypt customer-owned data in the ML inference job and associated data.</p>
    pub fn kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
    /// <p>The metrics status for the trained model inference job.</p>
    pub fn metrics_status(&self) -> ::std::option::Option<&crate::types::MetricsStatus> {
        self.metrics_status.as_ref()
    }
    /// <p>Details about the metrics status for the trained model inference job.</p>
    pub fn metrics_status_details(&self) -> ::std::option::Option<&str> {
        self.metrics_status_details.as_deref()
    }
    /// <p>The logs status for the trained model inference job.</p>
    pub fn logs_status(&self) -> ::std::option::Option<&crate::types::LogsStatus> {
        self.logs_status.as_ref()
    }
    /// <p>Details about the logs status for the trained model inference job.</p>
    pub fn logs_status_details(&self) -> ::std::option::Option<&str> {
        self.logs_status_details.as_deref()
    }
    /// <p>The optional metadata that you applied to the resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
    /// <p>The following basic restrictions apply to tags:</p>
    /// <ul>
    /// <li>
    /// <p>Maximum number of tags per resource - 50.</p></li>
    /// <li>
    /// <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p></li>
    /// <li>
    /// <p>Maximum key length - 128 Unicode characters in UTF-8.</p></li>
    /// <li>
    /// <p>Maximum value length - 256 Unicode characters in UTF-8.</p></li>
    /// <li>
    /// <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p></li>
    /// <li>
    /// <p>Tag keys and values are case sensitive.</p></li>
    /// <li>
    /// <p>Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has aws as its prefix but the key does not, then Clean Rooms ML considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of aws do not count against your tags per resource limit.</p></li>
    /// </ul>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetTrainedModelInferenceJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTrainedModelInferenceJobOutput {
    /// Creates a new builder-style object to manufacture [`GetTrainedModelInferenceJobOutput`](crate::operation::get_trained_model_inference_job::GetTrainedModelInferenceJobOutput).
    pub fn builder() -> crate::operation::get_trained_model_inference_job::builders::GetTrainedModelInferenceJobOutputBuilder {
        crate::operation::get_trained_model_inference_job::builders::GetTrainedModelInferenceJobOutputBuilder::default()
    }
}

/// A builder for [`GetTrainedModelInferenceJobOutput`](crate::operation::get_trained_model_inference_job::GetTrainedModelInferenceJobOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetTrainedModelInferenceJobOutputBuilder {
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) trained_model_inference_job_arn: ::std::option::Option<::std::string::String>,
    pub(crate) configured_model_algorithm_association_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::TrainedModelInferenceJobStatus>,
    pub(crate) trained_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) trained_model_version_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) resource_config: ::std::option::Option<crate::types::InferenceResourceConfig>,
    pub(crate) output_configuration: ::std::option::Option<crate::types::InferenceOutputConfiguration>,
    pub(crate) membership_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) data_source: ::std::option::Option<crate::types::ModelInferenceDataSource>,
    pub(crate) container_execution_parameters: ::std::option::Option<crate::types::InferenceContainerExecutionParameters>,
    pub(crate) status_details: ::std::option::Option<crate::types::StatusDetails>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) inference_container_image_digest: ::std::option::Option<::std::string::String>,
    pub(crate) environment: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) kms_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) metrics_status: ::std::option::Option<crate::types::MetricsStatus>,
    pub(crate) metrics_status_details: ::std::option::Option<::std::string::String>,
    pub(crate) logs_status: ::std::option::Option<crate::types::LogsStatus>,
    pub(crate) logs_status_details: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetTrainedModelInferenceJobOutputBuilder {
    /// <p>The time at which the trained model inference job was created.</p>
    /// This field is required.
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the trained model inference job was created.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time at which the trained model inference job was created.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The most recent time at which the trained model inference job was updated.</p>
    /// This field is required.
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The most recent time at which the trained model inference job was updated.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The most recent time at which the trained model inference job was updated.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model inference job.</p>
    /// This field is required.
    pub fn trained_model_inference_job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trained_model_inference_job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model inference job.</p>
    pub fn set_trained_model_inference_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trained_model_inference_job_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model inference job.</p>
    pub fn get_trained_model_inference_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.trained_model_inference_job_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the configured model algorithm association that was used for the trained model inference job.</p>
    pub fn configured_model_algorithm_association_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configured_model_algorithm_association_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the configured model algorithm association that was used for the trained model inference job.</p>
    pub fn set_configured_model_algorithm_association_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configured_model_algorithm_association_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the configured model algorithm association that was used for the trained model inference job.</p>
    pub fn get_configured_model_algorithm_association_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.configured_model_algorithm_association_arn
    }
    /// <p>The name of the trained model inference job.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the trained model inference job.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the trained model inference job.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The status of the trained model inference job.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::TrainedModelInferenceJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the trained model inference job.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TrainedModelInferenceJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the trained model inference job.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TrainedModelInferenceJobStatus> {
        &self.status
    }
    /// <p>The Amazon Resource Name (ARN) for the trained model that was used for the trained model inference job.</p>
    /// This field is required.
    pub fn trained_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trained_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the trained model that was used for the trained model inference job.</p>
    pub fn set_trained_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trained_model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the trained model that was used for the trained model inference job.</p>
    pub fn get_trained_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.trained_model_arn
    }
    /// <p>The version identifier of the trained model used for this inference job. This identifies the specific version of the trained model that was used to generate the inference results.</p>
    pub fn trained_model_version_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trained_model_version_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version identifier of the trained model used for this inference job. This identifies the specific version of the trained model that was used to generate the inference results.</p>
    pub fn set_trained_model_version_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trained_model_version_identifier = input;
        self
    }
    /// <p>The version identifier of the trained model used for this inference job. This identifies the specific version of the trained model that was used to generate the inference results.</p>
    pub fn get_trained_model_version_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.trained_model_version_identifier
    }
    /// <p>The resource configuration information for the trained model inference job.</p>
    /// This field is required.
    pub fn resource_config(mut self, input: crate::types::InferenceResourceConfig) -> Self {
        self.resource_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The resource configuration information for the trained model inference job.</p>
    pub fn set_resource_config(mut self, input: ::std::option::Option<crate::types::InferenceResourceConfig>) -> Self {
        self.resource_config = input;
        self
    }
    /// <p>The resource configuration information for the trained model inference job.</p>
    pub fn get_resource_config(&self) -> &::std::option::Option<crate::types::InferenceResourceConfig> {
        &self.resource_config
    }
    /// <p>The output configuration information for the trained model inference job.</p>
    /// This field is required.
    pub fn output_configuration(mut self, input: crate::types::InferenceOutputConfiguration) -> Self {
        self.output_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The output configuration information for the trained model inference job.</p>
    pub fn set_output_configuration(mut self, input: ::std::option::Option<crate::types::InferenceOutputConfiguration>) -> Self {
        self.output_configuration = input;
        self
    }
    /// <p>The output configuration information for the trained model inference job.</p>
    pub fn get_output_configuration(&self) -> &::std::option::Option<crate::types::InferenceOutputConfiguration> {
        &self.output_configuration
    }
    /// <p>The membership ID of the membership that contains the trained model inference job.</p>
    /// This field is required.
    pub fn membership_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The membership ID of the membership that contains the trained model inference job.</p>
    pub fn set_membership_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_identifier = input;
        self
    }
    /// <p>The membership ID of the membership that contains the trained model inference job.</p>
    pub fn get_membership_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_identifier
    }
    /// <p>The data source that was used for the trained model inference job.</p>
    /// This field is required.
    pub fn data_source(mut self, input: crate::types::ModelInferenceDataSource) -> Self {
        self.data_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data source that was used for the trained model inference job.</p>
    pub fn set_data_source(mut self, input: ::std::option::Option<crate::types::ModelInferenceDataSource>) -> Self {
        self.data_source = input;
        self
    }
    /// <p>The data source that was used for the trained model inference job.</p>
    pub fn get_data_source(&self) -> &::std::option::Option<crate::types::ModelInferenceDataSource> {
        &self.data_source
    }
    /// <p>The execution parameters for the model inference job container.</p>
    pub fn container_execution_parameters(mut self, input: crate::types::InferenceContainerExecutionParameters) -> Self {
        self.container_execution_parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>The execution parameters for the model inference job container.</p>
    pub fn set_container_execution_parameters(mut self, input: ::std::option::Option<crate::types::InferenceContainerExecutionParameters>) -> Self {
        self.container_execution_parameters = input;
        self
    }
    /// <p>The execution parameters for the model inference job container.</p>
    pub fn get_container_execution_parameters(&self) -> &::std::option::Option<crate::types::InferenceContainerExecutionParameters> {
        &self.container_execution_parameters
    }
    /// <p>Details about the status of a resource.</p>
    pub fn status_details(mut self, input: crate::types::StatusDetails) -> Self {
        self.status_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the status of a resource.</p>
    pub fn set_status_details(mut self, input: ::std::option::Option<crate::types::StatusDetails>) -> Self {
        self.status_details = input;
        self
    }
    /// <p>Details about the status of a resource.</p>
    pub fn get_status_details(&self) -> &::std::option::Option<crate::types::StatusDetails> {
        &self.status_details
    }
    /// <p>The description of the trained model inference job.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the trained model inference job.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the trained model inference job.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Information about the training container image.</p>
    pub fn inference_container_image_digest(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inference_container_image_digest = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Information about the training container image.</p>
    pub fn set_inference_container_image_digest(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inference_container_image_digest = input;
        self
    }
    /// <p>Information about the training container image.</p>
    pub fn get_inference_container_image_digest(&self) -> &::std::option::Option<::std::string::String> {
        &self.inference_container_image_digest
    }
    /// Adds a key-value pair to `environment`.
    ///
    /// To override the contents of this collection use [`set_environment`](Self::set_environment).
    ///
    /// <p>The environment variables to set in the Docker container.</p>
    pub fn environment(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.environment.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.environment = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The environment variables to set in the Docker container.</p>
    pub fn set_environment(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.environment = input;
        self
    }
    /// <p>The environment variables to set in the Docker container.</p>
    pub fn get_environment(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.environment
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key. This key is used to encrypt and decrypt customer-owned data in the ML inference job and associated data.</p>
    pub fn kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key. This key is used to encrypt and decrypt customer-owned data in the ML inference job and associated data.</p>
    pub fn set_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key. This key is used to encrypt and decrypt customer-owned data in the ML inference job and associated data.</p>
    pub fn get_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_arn
    }
    /// <p>The metrics status for the trained model inference job.</p>
    pub fn metrics_status(mut self, input: crate::types::MetricsStatus) -> Self {
        self.metrics_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metrics status for the trained model inference job.</p>
    pub fn set_metrics_status(mut self, input: ::std::option::Option<crate::types::MetricsStatus>) -> Self {
        self.metrics_status = input;
        self
    }
    /// <p>The metrics status for the trained model inference job.</p>
    pub fn get_metrics_status(&self) -> &::std::option::Option<crate::types::MetricsStatus> {
        &self.metrics_status
    }
    /// <p>Details about the metrics status for the trained model inference job.</p>
    pub fn metrics_status_details(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metrics_status_details = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Details about the metrics status for the trained model inference job.</p>
    pub fn set_metrics_status_details(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metrics_status_details = input;
        self
    }
    /// <p>Details about the metrics status for the trained model inference job.</p>
    pub fn get_metrics_status_details(&self) -> &::std::option::Option<::std::string::String> {
        &self.metrics_status_details
    }
    /// <p>The logs status for the trained model inference job.</p>
    pub fn logs_status(mut self, input: crate::types::LogsStatus) -> Self {
        self.logs_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The logs status for the trained model inference job.</p>
    pub fn set_logs_status(mut self, input: ::std::option::Option<crate::types::LogsStatus>) -> Self {
        self.logs_status = input;
        self
    }
    /// <p>The logs status for the trained model inference job.</p>
    pub fn get_logs_status(&self) -> &::std::option::Option<crate::types::LogsStatus> {
        &self.logs_status
    }
    /// <p>Details about the logs status for the trained model inference job.</p>
    pub fn logs_status_details(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.logs_status_details = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Details about the logs status for the trained model inference job.</p>
    pub fn set_logs_status_details(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.logs_status_details = input;
        self
    }
    /// <p>Details about the logs status for the trained model inference job.</p>
    pub fn get_logs_status_details(&self) -> &::std::option::Option<::std::string::String> {
        &self.logs_status_details
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The optional metadata that you applied to the resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
    /// <p>The following basic restrictions apply to tags:</p>
    /// <ul>
    /// <li>
    /// <p>Maximum number of tags per resource - 50.</p></li>
    /// <li>
    /// <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p></li>
    /// <li>
    /// <p>Maximum key length - 128 Unicode characters in UTF-8.</p></li>
    /// <li>
    /// <p>Maximum value length - 256 Unicode characters in UTF-8.</p></li>
    /// <li>
    /// <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p></li>
    /// <li>
    /// <p>Tag keys and values are case sensitive.</p></li>
    /// <li>
    /// <p>Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has aws as its prefix but the key does not, then Clean Rooms ML considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of aws do not count against your tags per resource limit.</p></li>
    /// </ul>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The optional metadata that you applied to the resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
    /// <p>The following basic restrictions apply to tags:</p>
    /// <ul>
    /// <li>
    /// <p>Maximum number of tags per resource - 50.</p></li>
    /// <li>
    /// <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p></li>
    /// <li>
    /// <p>Maximum key length - 128 Unicode characters in UTF-8.</p></li>
    /// <li>
    /// <p>Maximum value length - 256 Unicode characters in UTF-8.</p></li>
    /// <li>
    /// <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p></li>
    /// <li>
    /// <p>Tag keys and values are case sensitive.</p></li>
    /// <li>
    /// <p>Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has aws as its prefix but the key does not, then Clean Rooms ML considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of aws do not count against your tags per resource limit.</p></li>
    /// </ul>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The optional metadata that you applied to the resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
    /// <p>The following basic restrictions apply to tags:</p>
    /// <ul>
    /// <li>
    /// <p>Maximum number of tags per resource - 50.</p></li>
    /// <li>
    /// <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p></li>
    /// <li>
    /// <p>Maximum key length - 128 Unicode characters in UTF-8.</p></li>
    /// <li>
    /// <p>Maximum value length - 256 Unicode characters in UTF-8.</p></li>
    /// <li>
    /// <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p></li>
    /// <li>
    /// <p>Tag keys and values are case sensitive.</p></li>
    /// <li>
    /// <p>Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has aws as its prefix but the key does not, then Clean Rooms ML considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of aws do not count against your tags per resource limit.</p></li>
    /// </ul>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetTrainedModelInferenceJobOutput`](crate::operation::get_trained_model_inference_job::GetTrainedModelInferenceJobOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`create_time`](crate::operation::get_trained_model_inference_job::builders::GetTrainedModelInferenceJobOutputBuilder::create_time)
    /// - [`update_time`](crate::operation::get_trained_model_inference_job::builders::GetTrainedModelInferenceJobOutputBuilder::update_time)
    /// - [`trained_model_inference_job_arn`](crate::operation::get_trained_model_inference_job::builders::GetTrainedModelInferenceJobOutputBuilder::trained_model_inference_job_arn)
    /// - [`name`](crate::operation::get_trained_model_inference_job::builders::GetTrainedModelInferenceJobOutputBuilder::name)
    /// - [`status`](crate::operation::get_trained_model_inference_job::builders::GetTrainedModelInferenceJobOutputBuilder::status)
    /// - [`trained_model_arn`](crate::operation::get_trained_model_inference_job::builders::GetTrainedModelInferenceJobOutputBuilder::trained_model_arn)
    /// - [`membership_identifier`](crate::operation::get_trained_model_inference_job::builders::GetTrainedModelInferenceJobOutputBuilder::membership_identifier)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_trained_model_inference_job::GetTrainedModelInferenceJobOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_trained_model_inference_job::GetTrainedModelInferenceJobOutput {
            create_time: self.create_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_time",
                    "create_time was not specified but it is required when building GetTrainedModelInferenceJobOutput",
                )
            })?,
            update_time: self.update_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_time",
                    "update_time was not specified but it is required when building GetTrainedModelInferenceJobOutput",
                )
            })?,
            trained_model_inference_job_arn: self.trained_model_inference_job_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "trained_model_inference_job_arn",
                    "trained_model_inference_job_arn was not specified but it is required when building GetTrainedModelInferenceJobOutput",
                )
            })?,
            configured_model_algorithm_association_arn: self.configured_model_algorithm_association_arn,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GetTrainedModelInferenceJobOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetTrainedModelInferenceJobOutput",
                )
            })?,
            trained_model_arn: self.trained_model_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "trained_model_arn",
                    "trained_model_arn was not specified but it is required when building GetTrainedModelInferenceJobOutput",
                )
            })?,
            trained_model_version_identifier: self.trained_model_version_identifier,
            resource_config: self.resource_config,
            output_configuration: self.output_configuration,
            membership_identifier: self.membership_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "membership_identifier",
                    "membership_identifier was not specified but it is required when building GetTrainedModelInferenceJobOutput",
                )
            })?,
            data_source: self.data_source,
            container_execution_parameters: self.container_execution_parameters,
            status_details: self.status_details,
            description: self.description,
            inference_container_image_digest: self.inference_container_image_digest,
            environment: self.environment,
            kms_key_arn: self.kms_key_arn,
            metrics_status: self.metrics_status,
            metrics_status_details: self.metrics_status_details,
            logs_status: self.logs_status,
            logs_status_details: self.logs_status_details,
            tags: self.tags,
            _request_id: self._request_id,
        })
    }
}
