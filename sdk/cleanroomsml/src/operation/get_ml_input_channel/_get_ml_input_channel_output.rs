// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetMlInputChannelOutput {
    /// <p>The time at which the ML input channel was created.</p>
    pub create_time: ::aws_smithy_types::DateTime,
    /// <p>The most recent time at which the ML input channel was updated.</p>
    pub update_time: ::aws_smithy_types::DateTime,
    /// <p>The membership ID of the membership that contains the ML input channel.</p>
    pub membership_identifier: ::std::string::String,
    /// <p>The collaboration ID of the collaboration that contains the ML input channel.</p>
    pub collaboration_identifier: ::std::string::String,
    /// <p>The input channel that was used to create the ML input channel.</p>
    pub input_channel: ::std::option::Option<crate::types::InputChannel>,
    /// <p>The ID of the protected query that was used to create the ML input channel.</p>
    pub protected_query_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the ML input channel.</p>
    pub ml_input_channel_arn: ::std::string::String,
    /// <p>The name of the ML input channel.</p>
    pub name: ::std::string::String,
    /// <p>The configured model algorithm associations that were used to create the ML input channel.</p>
    pub configured_model_algorithm_associations: ::std::vec::Vec<::std::string::String>,
    /// <p>The status of the ML input channel.</p>
    pub status: crate::types::MlInputChannelStatus,
    /// <p>Details about the status of a resource.</p>
    pub status_details: ::std::option::Option<crate::types::StatusDetails>,
    /// <p>The number of days to keep the data in the ML input channel.</p>
    pub retention_in_days: i32,
    /// <p>The number of records in the ML input channel.</p>
    pub number_of_records: ::std::option::Option<i64>,
    /// <p>The number of files in the ML input channel.</p>
    pub number_of_files: ::std::option::Option<f64>,
    /// <p>The size, in GB, of the ML input channel.</p>
    pub size_in_gb: ::std::option::Option<f64>,
    /// <p>The description of the ML input channel.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the KMS key that was used to create the ML input channel.</p>
    pub kms_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The optional metadata that you applied to the resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
    /// <p>The following basic restrictions apply to tags:</p>
    /// <ul>
    /// <li>
    /// <p>Maximum number of tags per resource - 50.</p></li>
    /// <li>
    /// <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p></li>
    /// <li>
    /// <p>Maximum key length - 128 Unicode characters in UTF-8.</p></li>
    /// <li>
    /// <p>Maximum value length - 256 Unicode characters in UTF-8.</p></li>
    /// <li>
    /// <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p></li>
    /// <li>
    /// <p>Tag keys and values are case sensitive.</p></li>
    /// <li>
    /// <p>Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has aws as its prefix but the key does not, then Clean Rooms ML considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of aws do not count against your tags per resource limit.</p></li>
    /// </ul>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetMlInputChannelOutput {
    /// <p>The time at which the ML input channel was created.</p>
    pub fn create_time(&self) -> &::aws_smithy_types::DateTime {
        &self.create_time
    }
    /// <p>The most recent time at which the ML input channel was updated.</p>
    pub fn update_time(&self) -> &::aws_smithy_types::DateTime {
        &self.update_time
    }
    /// <p>The membership ID of the membership that contains the ML input channel.</p>
    pub fn membership_identifier(&self) -> &str {
        use std::ops::Deref;
        self.membership_identifier.deref()
    }
    /// <p>The collaboration ID of the collaboration that contains the ML input channel.</p>
    pub fn collaboration_identifier(&self) -> &str {
        use std::ops::Deref;
        self.collaboration_identifier.deref()
    }
    /// <p>The input channel that was used to create the ML input channel.</p>
    pub fn input_channel(&self) -> ::std::option::Option<&crate::types::InputChannel> {
        self.input_channel.as_ref()
    }
    /// <p>The ID of the protected query that was used to create the ML input channel.</p>
    pub fn protected_query_identifier(&self) -> ::std::option::Option<&str> {
        self.protected_query_identifier.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the ML input channel.</p>
    pub fn ml_input_channel_arn(&self) -> &str {
        use std::ops::Deref;
        self.ml_input_channel_arn.deref()
    }
    /// <p>The name of the ML input channel.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The configured model algorithm associations that were used to create the ML input channel.</p>
    pub fn configured_model_algorithm_associations(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.configured_model_algorithm_associations.deref()
    }
    /// <p>The status of the ML input channel.</p>
    pub fn status(&self) -> &crate::types::MlInputChannelStatus {
        &self.status
    }
    /// <p>Details about the status of a resource.</p>
    pub fn status_details(&self) -> ::std::option::Option<&crate::types::StatusDetails> {
        self.status_details.as_ref()
    }
    /// <p>The number of days to keep the data in the ML input channel.</p>
    pub fn retention_in_days(&self) -> i32 {
        self.retention_in_days
    }
    /// <p>The number of records in the ML input channel.</p>
    pub fn number_of_records(&self) -> ::std::option::Option<i64> {
        self.number_of_records
    }
    /// <p>The number of files in the ML input channel.</p>
    pub fn number_of_files(&self) -> ::std::option::Option<f64> {
        self.number_of_files
    }
    /// <p>The size, in GB, of the ML input channel.</p>
    pub fn size_in_gb(&self) -> ::std::option::Option<f64> {
        self.size_in_gb
    }
    /// <p>The description of the ML input channel.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key that was used to create the ML input channel.</p>
    pub fn kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
    /// <p>The optional metadata that you applied to the resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
    /// <p>The following basic restrictions apply to tags:</p>
    /// <ul>
    /// <li>
    /// <p>Maximum number of tags per resource - 50.</p></li>
    /// <li>
    /// <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p></li>
    /// <li>
    /// <p>Maximum key length - 128 Unicode characters in UTF-8.</p></li>
    /// <li>
    /// <p>Maximum value length - 256 Unicode characters in UTF-8.</p></li>
    /// <li>
    /// <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p></li>
    /// <li>
    /// <p>Tag keys and values are case sensitive.</p></li>
    /// <li>
    /// <p>Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has aws as its prefix but the key does not, then Clean Rooms ML considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of aws do not count against your tags per resource limit.</p></li>
    /// </ul>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetMlInputChannelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetMlInputChannelOutput {
    /// Creates a new builder-style object to manufacture [`GetMlInputChannelOutput`](crate::operation::get_ml_input_channel::GetMlInputChannelOutput).
    pub fn builder() -> crate::operation::get_ml_input_channel::builders::GetMlInputChannelOutputBuilder {
        crate::operation::get_ml_input_channel::builders::GetMlInputChannelOutputBuilder::default()
    }
}

/// A builder for [`GetMlInputChannelOutput`](crate::operation::get_ml_input_channel::GetMlInputChannelOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetMlInputChannelOutputBuilder {
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) membership_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) collaboration_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) input_channel: ::std::option::Option<crate::types::InputChannel>,
    pub(crate) protected_query_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) ml_input_channel_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) configured_model_algorithm_associations: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) status: ::std::option::Option<crate::types::MlInputChannelStatus>,
    pub(crate) status_details: ::std::option::Option<crate::types::StatusDetails>,
    pub(crate) retention_in_days: ::std::option::Option<i32>,
    pub(crate) number_of_records: ::std::option::Option<i64>,
    pub(crate) number_of_files: ::std::option::Option<f64>,
    pub(crate) size_in_gb: ::std::option::Option<f64>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetMlInputChannelOutputBuilder {
    /// <p>The time at which the ML input channel was created.</p>
    /// This field is required.
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the ML input channel was created.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time at which the ML input channel was created.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The most recent time at which the ML input channel was updated.</p>
    /// This field is required.
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The most recent time at which the ML input channel was updated.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The most recent time at which the ML input channel was updated.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// <p>The membership ID of the membership that contains the ML input channel.</p>
    /// This field is required.
    pub fn membership_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The membership ID of the membership that contains the ML input channel.</p>
    pub fn set_membership_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_identifier = input;
        self
    }
    /// <p>The membership ID of the membership that contains the ML input channel.</p>
    pub fn get_membership_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_identifier
    }
    /// <p>The collaboration ID of the collaboration that contains the ML input channel.</p>
    /// This field is required.
    pub fn collaboration_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaboration_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The collaboration ID of the collaboration that contains the ML input channel.</p>
    pub fn set_collaboration_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaboration_identifier = input;
        self
    }
    /// <p>The collaboration ID of the collaboration that contains the ML input channel.</p>
    pub fn get_collaboration_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaboration_identifier
    }
    /// <p>The input channel that was used to create the ML input channel.</p>
    /// This field is required.
    pub fn input_channel(mut self, input: crate::types::InputChannel) -> Self {
        self.input_channel = ::std::option::Option::Some(input);
        self
    }
    /// <p>The input channel that was used to create the ML input channel.</p>
    pub fn set_input_channel(mut self, input: ::std::option::Option<crate::types::InputChannel>) -> Self {
        self.input_channel = input;
        self
    }
    /// <p>The input channel that was used to create the ML input channel.</p>
    pub fn get_input_channel(&self) -> &::std::option::Option<crate::types::InputChannel> {
        &self.input_channel
    }
    /// <p>The ID of the protected query that was used to create the ML input channel.</p>
    pub fn protected_query_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.protected_query_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the protected query that was used to create the ML input channel.</p>
    pub fn set_protected_query_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.protected_query_identifier = input;
        self
    }
    /// <p>The ID of the protected query that was used to create the ML input channel.</p>
    pub fn get_protected_query_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.protected_query_identifier
    }
    /// <p>The Amazon Resource Name (ARN) of the ML input channel.</p>
    /// This field is required.
    pub fn ml_input_channel_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ml_input_channel_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ML input channel.</p>
    pub fn set_ml_input_channel_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ml_input_channel_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ML input channel.</p>
    pub fn get_ml_input_channel_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.ml_input_channel_arn
    }
    /// <p>The name of the ML input channel.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the ML input channel.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the ML input channel.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `configured_model_algorithm_associations`.
    ///
    /// To override the contents of this collection use [`set_configured_model_algorithm_associations`](Self::set_configured_model_algorithm_associations).
    ///
    /// <p>The configured model algorithm associations that were used to create the ML input channel.</p>
    pub fn configured_model_algorithm_associations(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.configured_model_algorithm_associations.unwrap_or_default();
        v.push(input.into());
        self.configured_model_algorithm_associations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The configured model algorithm associations that were used to create the ML input channel.</p>
    pub fn set_configured_model_algorithm_associations(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.configured_model_algorithm_associations = input;
        self
    }
    /// <p>The configured model algorithm associations that were used to create the ML input channel.</p>
    pub fn get_configured_model_algorithm_associations(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.configured_model_algorithm_associations
    }
    /// <p>The status of the ML input channel.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::MlInputChannelStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the ML input channel.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::MlInputChannelStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the ML input channel.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::MlInputChannelStatus> {
        &self.status
    }
    /// <p>Details about the status of a resource.</p>
    pub fn status_details(mut self, input: crate::types::StatusDetails) -> Self {
        self.status_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the status of a resource.</p>
    pub fn set_status_details(mut self, input: ::std::option::Option<crate::types::StatusDetails>) -> Self {
        self.status_details = input;
        self
    }
    /// <p>Details about the status of a resource.</p>
    pub fn get_status_details(&self) -> &::std::option::Option<crate::types::StatusDetails> {
        &self.status_details
    }
    /// <p>The number of days to keep the data in the ML input channel.</p>
    /// This field is required.
    pub fn retention_in_days(mut self, input: i32) -> Self {
        self.retention_in_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of days to keep the data in the ML input channel.</p>
    pub fn set_retention_in_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.retention_in_days = input;
        self
    }
    /// <p>The number of days to keep the data in the ML input channel.</p>
    pub fn get_retention_in_days(&self) -> &::std::option::Option<i32> {
        &self.retention_in_days
    }
    /// <p>The number of records in the ML input channel.</p>
    pub fn number_of_records(mut self, input: i64) -> Self {
        self.number_of_records = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of records in the ML input channel.</p>
    pub fn set_number_of_records(mut self, input: ::std::option::Option<i64>) -> Self {
        self.number_of_records = input;
        self
    }
    /// <p>The number of records in the ML input channel.</p>
    pub fn get_number_of_records(&self) -> &::std::option::Option<i64> {
        &self.number_of_records
    }
    /// <p>The number of files in the ML input channel.</p>
    pub fn number_of_files(mut self, input: f64) -> Self {
        self.number_of_files = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of files in the ML input channel.</p>
    pub fn set_number_of_files(mut self, input: ::std::option::Option<f64>) -> Self {
        self.number_of_files = input;
        self
    }
    /// <p>The number of files in the ML input channel.</p>
    pub fn get_number_of_files(&self) -> &::std::option::Option<f64> {
        &self.number_of_files
    }
    /// <p>The size, in GB, of the ML input channel.</p>
    pub fn size_in_gb(mut self, input: f64) -> Self {
        self.size_in_gb = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size, in GB, of the ML input channel.</p>
    pub fn set_size_in_gb(mut self, input: ::std::option::Option<f64>) -> Self {
        self.size_in_gb = input;
        self
    }
    /// <p>The size, in GB, of the ML input channel.</p>
    pub fn get_size_in_gb(&self) -> &::std::option::Option<f64> {
        &self.size_in_gb
    }
    /// <p>The description of the ML input channel.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the ML input channel.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the ML input channel.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key that was used to create the ML input channel.</p>
    pub fn kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key that was used to create the ML input channel.</p>
    pub fn set_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key that was used to create the ML input channel.</p>
    pub fn get_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_arn
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The optional metadata that you applied to the resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
    /// <p>The following basic restrictions apply to tags:</p>
    /// <ul>
    /// <li>
    /// <p>Maximum number of tags per resource - 50.</p></li>
    /// <li>
    /// <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p></li>
    /// <li>
    /// <p>Maximum key length - 128 Unicode characters in UTF-8.</p></li>
    /// <li>
    /// <p>Maximum value length - 256 Unicode characters in UTF-8.</p></li>
    /// <li>
    /// <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p></li>
    /// <li>
    /// <p>Tag keys and values are case sensitive.</p></li>
    /// <li>
    /// <p>Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has aws as its prefix but the key does not, then Clean Rooms ML considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of aws do not count against your tags per resource limit.</p></li>
    /// </ul>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The optional metadata that you applied to the resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
    /// <p>The following basic restrictions apply to tags:</p>
    /// <ul>
    /// <li>
    /// <p>Maximum number of tags per resource - 50.</p></li>
    /// <li>
    /// <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p></li>
    /// <li>
    /// <p>Maximum key length - 128 Unicode characters in UTF-8.</p></li>
    /// <li>
    /// <p>Maximum value length - 256 Unicode characters in UTF-8.</p></li>
    /// <li>
    /// <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p></li>
    /// <li>
    /// <p>Tag keys and values are case sensitive.</p></li>
    /// <li>
    /// <p>Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has aws as its prefix but the key does not, then Clean Rooms ML considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of aws do not count against your tags per resource limit.</p></li>
    /// </ul>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The optional metadata that you applied to the resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
    /// <p>The following basic restrictions apply to tags:</p>
    /// <ul>
    /// <li>
    /// <p>Maximum number of tags per resource - 50.</p></li>
    /// <li>
    /// <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p></li>
    /// <li>
    /// <p>Maximum key length - 128 Unicode characters in UTF-8.</p></li>
    /// <li>
    /// <p>Maximum value length - 256 Unicode characters in UTF-8.</p></li>
    /// <li>
    /// <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p></li>
    /// <li>
    /// <p>Tag keys and values are case sensitive.</p></li>
    /// <li>
    /// <p>Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has aws as its prefix but the key does not, then Clean Rooms ML considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of aws do not count against your tags per resource limit.</p></li>
    /// </ul>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetMlInputChannelOutput`](crate::operation::get_ml_input_channel::GetMlInputChannelOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`create_time`](crate::operation::get_ml_input_channel::builders::GetMlInputChannelOutputBuilder::create_time)
    /// - [`update_time`](crate::operation::get_ml_input_channel::builders::GetMlInputChannelOutputBuilder::update_time)
    /// - [`membership_identifier`](crate::operation::get_ml_input_channel::builders::GetMlInputChannelOutputBuilder::membership_identifier)
    /// - [`collaboration_identifier`](crate::operation::get_ml_input_channel::builders::GetMlInputChannelOutputBuilder::collaboration_identifier)
    /// - [`ml_input_channel_arn`](crate::operation::get_ml_input_channel::builders::GetMlInputChannelOutputBuilder::ml_input_channel_arn)
    /// - [`name`](crate::operation::get_ml_input_channel::builders::GetMlInputChannelOutputBuilder::name)
    /// - [`configured_model_algorithm_associations`](crate::operation::get_ml_input_channel::builders::GetMlInputChannelOutputBuilder::configured_model_algorithm_associations)
    /// - [`status`](crate::operation::get_ml_input_channel::builders::GetMlInputChannelOutputBuilder::status)
    /// - [`retention_in_days`](crate::operation::get_ml_input_channel::builders::GetMlInputChannelOutputBuilder::retention_in_days)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_ml_input_channel::GetMlInputChannelOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_ml_input_channel::GetMlInputChannelOutput {
            create_time: self.create_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_time",
                    "create_time was not specified but it is required when building GetMlInputChannelOutput",
                )
            })?,
            update_time: self.update_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_time",
                    "update_time was not specified but it is required when building GetMlInputChannelOutput",
                )
            })?,
            membership_identifier: self.membership_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "membership_identifier",
                    "membership_identifier was not specified but it is required when building GetMlInputChannelOutput",
                )
            })?,
            collaboration_identifier: self.collaboration_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "collaboration_identifier",
                    "collaboration_identifier was not specified but it is required when building GetMlInputChannelOutput",
                )
            })?,
            input_channel: self.input_channel,
            protected_query_identifier: self.protected_query_identifier,
            ml_input_channel_arn: self.ml_input_channel_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ml_input_channel_arn",
                    "ml_input_channel_arn was not specified but it is required when building GetMlInputChannelOutput",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GetMlInputChannelOutput",
                )
            })?,
            configured_model_algorithm_associations: self.configured_model_algorithm_associations.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "configured_model_algorithm_associations",
                    "configured_model_algorithm_associations was not specified but it is required when building GetMlInputChannelOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetMlInputChannelOutput",
                )
            })?,
            status_details: self.status_details,
            retention_in_days: self.retention_in_days.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "retention_in_days",
                    "retention_in_days was not specified but it is required when building GetMlInputChannelOutput",
                )
            })?,
            number_of_records: self.number_of_records,
            number_of_files: self.number_of_files,
            size_in_gb: self.size_in_gb,
            description: self.description,
            kms_key_arn: self.kms_key_arn,
            tags: self.tags,
            _request_id: self._request_id,
        })
    }
}
