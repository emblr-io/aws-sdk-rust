// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides summary information about an ML input channel in a collaboration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CollaborationMlInputChannelSummary {
    /// <p>The time at which the ML input channel was created.</p>
    pub create_time: ::aws_smithy_types::DateTime,
    /// <p>The most recent time at which the ML input channel was updated.</p>
    pub update_time: ::aws_smithy_types::DateTime,
    /// <p>The membership ID of the membership that contains the ML input channel.</p>
    pub membership_identifier: ::std::string::String,
    /// <p>The collaboration ID of the collaboration that contains the ML input channel.</p>
    pub collaboration_identifier: ::std::string::String,
    /// <p>The name of the ML input channel.</p>
    pub name: ::std::string::String,
    /// <p>The associated configured model algorithms used to create the ML input channel.</p>
    pub configured_model_algorithm_associations: ::std::vec::Vec<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the ML input channel.</p>
    pub ml_input_channel_arn: ::std::string::String,
    /// <p>The status of the ML input channel.</p>
    pub status: crate::types::MlInputChannelStatus,
    /// <p>The account ID of the member who created the ML input channel.</p>
    pub creator_account_id: ::std::string::String,
    /// <p>The description of the ML input channel.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl CollaborationMlInputChannelSummary {
    /// <p>The time at which the ML input channel was created.</p>
    pub fn create_time(&self) -> &::aws_smithy_types::DateTime {
        &self.create_time
    }
    /// <p>The most recent time at which the ML input channel was updated.</p>
    pub fn update_time(&self) -> &::aws_smithy_types::DateTime {
        &self.update_time
    }
    /// <p>The membership ID of the membership that contains the ML input channel.</p>
    pub fn membership_identifier(&self) -> &str {
        use std::ops::Deref;
        self.membership_identifier.deref()
    }
    /// <p>The collaboration ID of the collaboration that contains the ML input channel.</p>
    pub fn collaboration_identifier(&self) -> &str {
        use std::ops::Deref;
        self.collaboration_identifier.deref()
    }
    /// <p>The name of the ML input channel.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The associated configured model algorithms used to create the ML input channel.</p>
    pub fn configured_model_algorithm_associations(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.configured_model_algorithm_associations.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the ML input channel.</p>
    pub fn ml_input_channel_arn(&self) -> &str {
        use std::ops::Deref;
        self.ml_input_channel_arn.deref()
    }
    /// <p>The status of the ML input channel.</p>
    pub fn status(&self) -> &crate::types::MlInputChannelStatus {
        &self.status
    }
    /// <p>The account ID of the member who created the ML input channel.</p>
    pub fn creator_account_id(&self) -> &str {
        use std::ops::Deref;
        self.creator_account_id.deref()
    }
    /// <p>The description of the ML input channel.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl CollaborationMlInputChannelSummary {
    /// Creates a new builder-style object to manufacture [`CollaborationMlInputChannelSummary`](crate::types::CollaborationMlInputChannelSummary).
    pub fn builder() -> crate::types::builders::CollaborationMlInputChannelSummaryBuilder {
        crate::types::builders::CollaborationMlInputChannelSummaryBuilder::default()
    }
}

/// A builder for [`CollaborationMlInputChannelSummary`](crate::types::CollaborationMlInputChannelSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CollaborationMlInputChannelSummaryBuilder {
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) membership_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) collaboration_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) configured_model_algorithm_associations: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) ml_input_channel_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::MlInputChannelStatus>,
    pub(crate) creator_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl CollaborationMlInputChannelSummaryBuilder {
    /// <p>The time at which the ML input channel was created.</p>
    /// This field is required.
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the ML input channel was created.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time at which the ML input channel was created.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The most recent time at which the ML input channel was updated.</p>
    /// This field is required.
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The most recent time at which the ML input channel was updated.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The most recent time at which the ML input channel was updated.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// <p>The membership ID of the membership that contains the ML input channel.</p>
    /// This field is required.
    pub fn membership_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The membership ID of the membership that contains the ML input channel.</p>
    pub fn set_membership_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_identifier = input;
        self
    }
    /// <p>The membership ID of the membership that contains the ML input channel.</p>
    pub fn get_membership_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_identifier
    }
    /// <p>The collaboration ID of the collaboration that contains the ML input channel.</p>
    /// This field is required.
    pub fn collaboration_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaboration_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The collaboration ID of the collaboration that contains the ML input channel.</p>
    pub fn set_collaboration_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaboration_identifier = input;
        self
    }
    /// <p>The collaboration ID of the collaboration that contains the ML input channel.</p>
    pub fn get_collaboration_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaboration_identifier
    }
    /// <p>The name of the ML input channel.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the ML input channel.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the ML input channel.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `configured_model_algorithm_associations`.
    ///
    /// To override the contents of this collection use [`set_configured_model_algorithm_associations`](Self::set_configured_model_algorithm_associations).
    ///
    /// <p>The associated configured model algorithms used to create the ML input channel.</p>
    pub fn configured_model_algorithm_associations(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.configured_model_algorithm_associations.unwrap_or_default();
        v.push(input.into());
        self.configured_model_algorithm_associations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The associated configured model algorithms used to create the ML input channel.</p>
    pub fn set_configured_model_algorithm_associations(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.configured_model_algorithm_associations = input;
        self
    }
    /// <p>The associated configured model algorithms used to create the ML input channel.</p>
    pub fn get_configured_model_algorithm_associations(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.configured_model_algorithm_associations
    }
    /// <p>The Amazon Resource Name (ARN) of the ML input channel.</p>
    /// This field is required.
    pub fn ml_input_channel_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ml_input_channel_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ML input channel.</p>
    pub fn set_ml_input_channel_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ml_input_channel_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ML input channel.</p>
    pub fn get_ml_input_channel_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.ml_input_channel_arn
    }
    /// <p>The status of the ML input channel.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::MlInputChannelStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the ML input channel.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::MlInputChannelStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the ML input channel.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::MlInputChannelStatus> {
        &self.status
    }
    /// <p>The account ID of the member who created the ML input channel.</p>
    /// This field is required.
    pub fn creator_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creator_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account ID of the member who created the ML input channel.</p>
    pub fn set_creator_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creator_account_id = input;
        self
    }
    /// <p>The account ID of the member who created the ML input channel.</p>
    pub fn get_creator_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.creator_account_id
    }
    /// <p>The description of the ML input channel.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the ML input channel.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the ML input channel.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`CollaborationMlInputChannelSummary`](crate::types::CollaborationMlInputChannelSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`create_time`](crate::types::builders::CollaborationMlInputChannelSummaryBuilder::create_time)
    /// - [`update_time`](crate::types::builders::CollaborationMlInputChannelSummaryBuilder::update_time)
    /// - [`membership_identifier`](crate::types::builders::CollaborationMlInputChannelSummaryBuilder::membership_identifier)
    /// - [`collaboration_identifier`](crate::types::builders::CollaborationMlInputChannelSummaryBuilder::collaboration_identifier)
    /// - [`name`](crate::types::builders::CollaborationMlInputChannelSummaryBuilder::name)
    /// - [`configured_model_algorithm_associations`](crate::types::builders::CollaborationMlInputChannelSummaryBuilder::configured_model_algorithm_associations)
    /// - [`ml_input_channel_arn`](crate::types::builders::CollaborationMlInputChannelSummaryBuilder::ml_input_channel_arn)
    /// - [`status`](crate::types::builders::CollaborationMlInputChannelSummaryBuilder::status)
    /// - [`creator_account_id`](crate::types::builders::CollaborationMlInputChannelSummaryBuilder::creator_account_id)
    pub fn build(self) -> ::std::result::Result<crate::types::CollaborationMlInputChannelSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CollaborationMlInputChannelSummary {
            create_time: self.create_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_time",
                    "create_time was not specified but it is required when building CollaborationMlInputChannelSummary",
                )
            })?,
            update_time: self.update_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_time",
                    "update_time was not specified but it is required when building CollaborationMlInputChannelSummary",
                )
            })?,
            membership_identifier: self.membership_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "membership_identifier",
                    "membership_identifier was not specified but it is required when building CollaborationMlInputChannelSummary",
                )
            })?,
            collaboration_identifier: self.collaboration_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "collaboration_identifier",
                    "collaboration_identifier was not specified but it is required when building CollaborationMlInputChannelSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building CollaborationMlInputChannelSummary",
                )
            })?,
            configured_model_algorithm_associations: self.configured_model_algorithm_associations.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "configured_model_algorithm_associations",
                    "configured_model_algorithm_associations was not specified but it is required when building CollaborationMlInputChannelSummary",
                )
            })?,
            ml_input_channel_arn: self.ml_input_channel_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ml_input_channel_arn",
                    "ml_input_channel_arn was not specified but it is required when building CollaborationMlInputChannelSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building CollaborationMlInputChannelSummary",
                )
            })?,
            creator_account_id: self.creator_account_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creator_account_id",
                    "creator_account_id was not specified but it is required when building CollaborationMlInputChannelSummary",
                )
            })?,
            description: self.description,
        })
    }
}
