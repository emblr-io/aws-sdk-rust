// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines an incremental training data channel that references a previously trained model. Incremental training allows you to update an existing trained model with new data, building upon the knowledge from a base model rather than training from scratch. This can significantly reduce training time and computational costs while improving model performance with additional data.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IncrementalTrainingDataChannel {
    /// <p>The Amazon Resource Name (ARN) of the base trained model to use for incremental training. This model serves as the starting point for the incremental training process.</p>
    pub trained_model_arn: ::std::string::String,
    /// <p>The version identifier of the base trained model to use for incremental training. If not specified, the latest version of the trained model is used.</p>
    pub version_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The name of the incremental training data channel. This name is used to identify the channel during the training process and must be unique within the training job.</p>
    pub channel_name: ::std::string::String,
}
impl IncrementalTrainingDataChannel {
    /// <p>The Amazon Resource Name (ARN) of the base trained model to use for incremental training. This model serves as the starting point for the incremental training process.</p>
    pub fn trained_model_arn(&self) -> &str {
        use std::ops::Deref;
        self.trained_model_arn.deref()
    }
    /// <p>The version identifier of the base trained model to use for incremental training. If not specified, the latest version of the trained model is used.</p>
    pub fn version_identifier(&self) -> ::std::option::Option<&str> {
        self.version_identifier.as_deref()
    }
    /// <p>The name of the incremental training data channel. This name is used to identify the channel during the training process and must be unique within the training job.</p>
    pub fn channel_name(&self) -> &str {
        use std::ops::Deref;
        self.channel_name.deref()
    }
}
impl IncrementalTrainingDataChannel {
    /// Creates a new builder-style object to manufacture [`IncrementalTrainingDataChannel`](crate::types::IncrementalTrainingDataChannel).
    pub fn builder() -> crate::types::builders::IncrementalTrainingDataChannelBuilder {
        crate::types::builders::IncrementalTrainingDataChannelBuilder::default()
    }
}

/// A builder for [`IncrementalTrainingDataChannel`](crate::types::IncrementalTrainingDataChannel).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IncrementalTrainingDataChannelBuilder {
    pub(crate) trained_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) version_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) channel_name: ::std::option::Option<::std::string::String>,
}
impl IncrementalTrainingDataChannelBuilder {
    /// <p>The Amazon Resource Name (ARN) of the base trained model to use for incremental training. This model serves as the starting point for the incremental training process.</p>
    /// This field is required.
    pub fn trained_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trained_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the base trained model to use for incremental training. This model serves as the starting point for the incremental training process.</p>
    pub fn set_trained_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trained_model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the base trained model to use for incremental training. This model serves as the starting point for the incremental training process.</p>
    pub fn get_trained_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.trained_model_arn
    }
    /// <p>The version identifier of the base trained model to use for incremental training. If not specified, the latest version of the trained model is used.</p>
    pub fn version_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version identifier of the base trained model to use for incremental training. If not specified, the latest version of the trained model is used.</p>
    pub fn set_version_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_identifier = input;
        self
    }
    /// <p>The version identifier of the base trained model to use for incremental training. If not specified, the latest version of the trained model is used.</p>
    pub fn get_version_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_identifier
    }
    /// <p>The name of the incremental training data channel. This name is used to identify the channel during the training process and must be unique within the training job.</p>
    /// This field is required.
    pub fn channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the incremental training data channel. This name is used to identify the channel during the training process and must be unique within the training job.</p>
    pub fn set_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>The name of the incremental training data channel. This name is used to identify the channel during the training process and must be unique within the training job.</p>
    pub fn get_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_name
    }
    /// Consumes the builder and constructs a [`IncrementalTrainingDataChannel`](crate::types::IncrementalTrainingDataChannel).
    /// This method will fail if any of the following fields are not set:
    /// - [`trained_model_arn`](crate::types::builders::IncrementalTrainingDataChannelBuilder::trained_model_arn)
    /// - [`channel_name`](crate::types::builders::IncrementalTrainingDataChannelBuilder::channel_name)
    pub fn build(self) -> ::std::result::Result<crate::types::IncrementalTrainingDataChannel, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IncrementalTrainingDataChannel {
            trained_model_arn: self.trained_model_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "trained_model_arn",
                    "trained_model_arn was not specified but it is required when building IncrementalTrainingDataChannel",
                )
            })?,
            version_identifier: self.version_identifier,
            channel_name: self.channel_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "channel_name",
                    "channel_name was not specified but it is required when building IncrementalTrainingDataChannel",
                )
            })?,
        })
    }
}
