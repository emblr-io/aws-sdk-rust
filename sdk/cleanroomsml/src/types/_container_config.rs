// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides configuration information for the dockerized container where the model algorithm is stored.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContainerConfig {
    /// <p>The registry path of the docker image that contains the algorithm. Clean Rooms ML currently only supports the <code>registry/repository\[:tag\]</code> image path format. For more information about using images in Clean Rooms ML, see the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AlgorithmSpecification.html#sagemaker-Type-AlgorithmSpecification-TrainingImage">Sagemaker API reference</a>.</p>
    pub image_uri: ::std::string::String,
    /// <p>The entrypoint script for a Docker container used to run a training job. This script takes precedence over the default train processing instructions. See How Amazon SageMaker Runs Your Training Image for additional information. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo-dockerfile.html">How Sagemaker runs your training image</a>.</p>
    pub entrypoint: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The arguments for a container used to run a training job. See How Amazon SageMaker Runs Your Training Image for additional information. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo-dockerfile.html">How Sagemaker runs your training image</a>.</p>
    pub arguments: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of metric definition objects. Each object specifies the metric name and regular expressions used to parse algorithm logs. Amazon Web Services Clean Rooms ML publishes each metric to all members' Amazon CloudWatch using IAM role configured in <code>PutMLConfiguration</code>.</p>
    pub metric_definitions: ::std::option::Option<::std::vec::Vec<crate::types::MetricDefinition>>,
}
impl ContainerConfig {
    /// <p>The registry path of the docker image that contains the algorithm. Clean Rooms ML currently only supports the <code>registry/repository\[:tag\]</code> image path format. For more information about using images in Clean Rooms ML, see the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AlgorithmSpecification.html#sagemaker-Type-AlgorithmSpecification-TrainingImage">Sagemaker API reference</a>.</p>
    pub fn image_uri(&self) -> &str {
        use std::ops::Deref;
        self.image_uri.deref()
    }
    /// <p>The entrypoint script for a Docker container used to run a training job. This script takes precedence over the default train processing instructions. See How Amazon SageMaker Runs Your Training Image for additional information. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo-dockerfile.html">How Sagemaker runs your training image</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.entrypoint.is_none()`.
    pub fn entrypoint(&self) -> &[::std::string::String] {
        self.entrypoint.as_deref().unwrap_or_default()
    }
    /// <p>The arguments for a container used to run a training job. See How Amazon SageMaker Runs Your Training Image for additional information. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo-dockerfile.html">How Sagemaker runs your training image</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.arguments.is_none()`.
    pub fn arguments(&self) -> &[::std::string::String] {
        self.arguments.as_deref().unwrap_or_default()
    }
    /// <p>A list of metric definition objects. Each object specifies the metric name and regular expressions used to parse algorithm logs. Amazon Web Services Clean Rooms ML publishes each metric to all members' Amazon CloudWatch using IAM role configured in <code>PutMLConfiguration</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metric_definitions.is_none()`.
    pub fn metric_definitions(&self) -> &[crate::types::MetricDefinition] {
        self.metric_definitions.as_deref().unwrap_or_default()
    }
}
impl ContainerConfig {
    /// Creates a new builder-style object to manufacture [`ContainerConfig`](crate::types::ContainerConfig).
    pub fn builder() -> crate::types::builders::ContainerConfigBuilder {
        crate::types::builders::ContainerConfigBuilder::default()
    }
}

/// A builder for [`ContainerConfig`](crate::types::ContainerConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContainerConfigBuilder {
    pub(crate) image_uri: ::std::option::Option<::std::string::String>,
    pub(crate) entrypoint: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) arguments: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) metric_definitions: ::std::option::Option<::std::vec::Vec<crate::types::MetricDefinition>>,
}
impl ContainerConfigBuilder {
    /// <p>The registry path of the docker image that contains the algorithm. Clean Rooms ML currently only supports the <code>registry/repository\[:tag\]</code> image path format. For more information about using images in Clean Rooms ML, see the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AlgorithmSpecification.html#sagemaker-Type-AlgorithmSpecification-TrainingImage">Sagemaker API reference</a>.</p>
    /// This field is required.
    pub fn image_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The registry path of the docker image that contains the algorithm. Clean Rooms ML currently only supports the <code>registry/repository\[:tag\]</code> image path format. For more information about using images in Clean Rooms ML, see the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AlgorithmSpecification.html#sagemaker-Type-AlgorithmSpecification-TrainingImage">Sagemaker API reference</a>.</p>
    pub fn set_image_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_uri = input;
        self
    }
    /// <p>The registry path of the docker image that contains the algorithm. Clean Rooms ML currently only supports the <code>registry/repository\[:tag\]</code> image path format. For more information about using images in Clean Rooms ML, see the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AlgorithmSpecification.html#sagemaker-Type-AlgorithmSpecification-TrainingImage">Sagemaker API reference</a>.</p>
    pub fn get_image_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_uri
    }
    /// Appends an item to `entrypoint`.
    ///
    /// To override the contents of this collection use [`set_entrypoint`](Self::set_entrypoint).
    ///
    /// <p>The entrypoint script for a Docker container used to run a training job. This script takes precedence over the default train processing instructions. See How Amazon SageMaker Runs Your Training Image for additional information. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo-dockerfile.html">How Sagemaker runs your training image</a>.</p>
    pub fn entrypoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.entrypoint.unwrap_or_default();
        v.push(input.into());
        self.entrypoint = ::std::option::Option::Some(v);
        self
    }
    /// <p>The entrypoint script for a Docker container used to run a training job. This script takes precedence over the default train processing instructions. See How Amazon SageMaker Runs Your Training Image for additional information. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo-dockerfile.html">How Sagemaker runs your training image</a>.</p>
    pub fn set_entrypoint(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.entrypoint = input;
        self
    }
    /// <p>The entrypoint script for a Docker container used to run a training job. This script takes precedence over the default train processing instructions. See How Amazon SageMaker Runs Your Training Image for additional information. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo-dockerfile.html">How Sagemaker runs your training image</a>.</p>
    pub fn get_entrypoint(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.entrypoint
    }
    /// Appends an item to `arguments`.
    ///
    /// To override the contents of this collection use [`set_arguments`](Self::set_arguments).
    ///
    /// <p>The arguments for a container used to run a training job. See How Amazon SageMaker Runs Your Training Image for additional information. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo-dockerfile.html">How Sagemaker runs your training image</a>.</p>
    pub fn arguments(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.arguments.unwrap_or_default();
        v.push(input.into());
        self.arguments = ::std::option::Option::Some(v);
        self
    }
    /// <p>The arguments for a container used to run a training job. See How Amazon SageMaker Runs Your Training Image for additional information. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo-dockerfile.html">How Sagemaker runs your training image</a>.</p>
    pub fn set_arguments(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.arguments = input;
        self
    }
    /// <p>The arguments for a container used to run a training job. See How Amazon SageMaker Runs Your Training Image for additional information. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo-dockerfile.html">How Sagemaker runs your training image</a>.</p>
    pub fn get_arguments(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.arguments
    }
    /// Appends an item to `metric_definitions`.
    ///
    /// To override the contents of this collection use [`set_metric_definitions`](Self::set_metric_definitions).
    ///
    /// <p>A list of metric definition objects. Each object specifies the metric name and regular expressions used to parse algorithm logs. Amazon Web Services Clean Rooms ML publishes each metric to all members' Amazon CloudWatch using IAM role configured in <code>PutMLConfiguration</code>.</p>
    pub fn metric_definitions(mut self, input: crate::types::MetricDefinition) -> Self {
        let mut v = self.metric_definitions.unwrap_or_default();
        v.push(input);
        self.metric_definitions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of metric definition objects. Each object specifies the metric name and regular expressions used to parse algorithm logs. Amazon Web Services Clean Rooms ML publishes each metric to all members' Amazon CloudWatch using IAM role configured in <code>PutMLConfiguration</code>.</p>
    pub fn set_metric_definitions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetricDefinition>>) -> Self {
        self.metric_definitions = input;
        self
    }
    /// <p>A list of metric definition objects. Each object specifies the metric name and regular expressions used to parse algorithm logs. Amazon Web Services Clean Rooms ML publishes each metric to all members' Amazon CloudWatch using IAM role configured in <code>PutMLConfiguration</code>.</p>
    pub fn get_metric_definitions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetricDefinition>> {
        &self.metric_definitions
    }
    /// Consumes the builder and constructs a [`ContainerConfig`](crate::types::ContainerConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`image_uri`](crate::types::builders::ContainerConfigBuilder::image_uri)
    pub fn build(self) -> ::std::result::Result<crate::types::ContainerConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ContainerConfig {
            image_uri: self.image_uri.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "image_uri",
                    "image_uri was not specified but it is required when building ContainerConfig",
                )
            })?,
            entrypoint: self.entrypoint,
            arguments: self.arguments,
            metric_definitions: self.metric_definitions,
        })
    }
}
