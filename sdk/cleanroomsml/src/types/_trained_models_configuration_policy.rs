// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration policy for the trained models.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TrainedModelsConfigurationPolicy {
    /// <p>The container for the logs of the trained model.</p>
    pub container_logs: ::std::option::Option<::std::vec::Vec<crate::types::LogsConfigurationPolicy>>,
    /// <p>The container for the metrics of the trained model.</p>
    pub container_metrics: ::std::option::Option<crate::types::MetricsConfigurationPolicy>,
    /// <p>The maximum size limit for trained model artifacts as defined in the configuration policy. This setting helps enforce consistent size limits across trained models in the collaboration.</p>
    pub max_artifact_size: ::std::option::Option<crate::types::TrainedModelArtifactMaxSize>,
}
impl TrainedModelsConfigurationPolicy {
    /// <p>The container for the logs of the trained model.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.container_logs.is_none()`.
    pub fn container_logs(&self) -> &[crate::types::LogsConfigurationPolicy] {
        self.container_logs.as_deref().unwrap_or_default()
    }
    /// <p>The container for the metrics of the trained model.</p>
    pub fn container_metrics(&self) -> ::std::option::Option<&crate::types::MetricsConfigurationPolicy> {
        self.container_metrics.as_ref()
    }
    /// <p>The maximum size limit for trained model artifacts as defined in the configuration policy. This setting helps enforce consistent size limits across trained models in the collaboration.</p>
    pub fn max_artifact_size(&self) -> ::std::option::Option<&crate::types::TrainedModelArtifactMaxSize> {
        self.max_artifact_size.as_ref()
    }
}
impl TrainedModelsConfigurationPolicy {
    /// Creates a new builder-style object to manufacture [`TrainedModelsConfigurationPolicy`](crate::types::TrainedModelsConfigurationPolicy).
    pub fn builder() -> crate::types::builders::TrainedModelsConfigurationPolicyBuilder {
        crate::types::builders::TrainedModelsConfigurationPolicyBuilder::default()
    }
}

/// A builder for [`TrainedModelsConfigurationPolicy`](crate::types::TrainedModelsConfigurationPolicy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TrainedModelsConfigurationPolicyBuilder {
    pub(crate) container_logs: ::std::option::Option<::std::vec::Vec<crate::types::LogsConfigurationPolicy>>,
    pub(crate) container_metrics: ::std::option::Option<crate::types::MetricsConfigurationPolicy>,
    pub(crate) max_artifact_size: ::std::option::Option<crate::types::TrainedModelArtifactMaxSize>,
}
impl TrainedModelsConfigurationPolicyBuilder {
    /// Appends an item to `container_logs`.
    ///
    /// To override the contents of this collection use [`set_container_logs`](Self::set_container_logs).
    ///
    /// <p>The container for the logs of the trained model.</p>
    pub fn container_logs(mut self, input: crate::types::LogsConfigurationPolicy) -> Self {
        let mut v = self.container_logs.unwrap_or_default();
        v.push(input);
        self.container_logs = ::std::option::Option::Some(v);
        self
    }
    /// <p>The container for the logs of the trained model.</p>
    pub fn set_container_logs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LogsConfigurationPolicy>>) -> Self {
        self.container_logs = input;
        self
    }
    /// <p>The container for the logs of the trained model.</p>
    pub fn get_container_logs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LogsConfigurationPolicy>> {
        &self.container_logs
    }
    /// <p>The container for the metrics of the trained model.</p>
    pub fn container_metrics(mut self, input: crate::types::MetricsConfigurationPolicy) -> Self {
        self.container_metrics = ::std::option::Option::Some(input);
        self
    }
    /// <p>The container for the metrics of the trained model.</p>
    pub fn set_container_metrics(mut self, input: ::std::option::Option<crate::types::MetricsConfigurationPolicy>) -> Self {
        self.container_metrics = input;
        self
    }
    /// <p>The container for the metrics of the trained model.</p>
    pub fn get_container_metrics(&self) -> &::std::option::Option<crate::types::MetricsConfigurationPolicy> {
        &self.container_metrics
    }
    /// <p>The maximum size limit for trained model artifacts as defined in the configuration policy. This setting helps enforce consistent size limits across trained models in the collaboration.</p>
    pub fn max_artifact_size(mut self, input: crate::types::TrainedModelArtifactMaxSize) -> Self {
        self.max_artifact_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum size limit for trained model artifacts as defined in the configuration policy. This setting helps enforce consistent size limits across trained models in the collaboration.</p>
    pub fn set_max_artifact_size(mut self, input: ::std::option::Option<crate::types::TrainedModelArtifactMaxSize>) -> Self {
        self.max_artifact_size = input;
        self
    }
    /// <p>The maximum size limit for trained model artifacts as defined in the configuration policy. This setting helps enforce consistent size limits across trained models in the collaboration.</p>
    pub fn get_max_artifact_size(&self) -> &::std::option::Option<crate::types::TrainedModelArtifactMaxSize> {
        &self.max_artifact_size
    }
    /// Consumes the builder and constructs a [`TrainedModelsConfigurationPolicy`](crate::types::TrainedModelsConfigurationPolicy).
    pub fn build(self) -> crate::types::TrainedModelsConfigurationPolicy {
        crate::types::TrainedModelsConfigurationPolicy {
            container_logs: self.container_logs,
            container_metrics: self.container_metrics,
            max_artifact_size: self.max_artifact_size,
        }
    }
}
