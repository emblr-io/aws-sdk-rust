// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the maximum size limit for trained model artifacts. This configuration helps control storage costs and ensures that trained models don't exceed specified size constraints. The size limit applies to the total size of all artifacts produced by the training job.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TrainedModelArtifactMaxSize {
    /// <p>The unit of measurement for the maximum artifact size. Valid values include common storage units such as bytes, kilobytes, megabytes, gigabytes, and terabytes.</p>
    pub unit: crate::types::TrainedModelArtifactMaxSizeUnitType,
    /// <p>The numerical value for the maximum artifact size limit. This value is interpreted according to the specified unit.</p>
    pub value: f64,
}
impl TrainedModelArtifactMaxSize {
    /// <p>The unit of measurement for the maximum artifact size. Valid values include common storage units such as bytes, kilobytes, megabytes, gigabytes, and terabytes.</p>
    pub fn unit(&self) -> &crate::types::TrainedModelArtifactMaxSizeUnitType {
        &self.unit
    }
    /// <p>The numerical value for the maximum artifact size limit. This value is interpreted according to the specified unit.</p>
    pub fn value(&self) -> f64 {
        self.value
    }
}
impl TrainedModelArtifactMaxSize {
    /// Creates a new builder-style object to manufacture [`TrainedModelArtifactMaxSize`](crate::types::TrainedModelArtifactMaxSize).
    pub fn builder() -> crate::types::builders::TrainedModelArtifactMaxSizeBuilder {
        crate::types::builders::TrainedModelArtifactMaxSizeBuilder::default()
    }
}

/// A builder for [`TrainedModelArtifactMaxSize`](crate::types::TrainedModelArtifactMaxSize).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TrainedModelArtifactMaxSizeBuilder {
    pub(crate) unit: ::std::option::Option<crate::types::TrainedModelArtifactMaxSizeUnitType>,
    pub(crate) value: ::std::option::Option<f64>,
}
impl TrainedModelArtifactMaxSizeBuilder {
    /// <p>The unit of measurement for the maximum artifact size. Valid values include common storage units such as bytes, kilobytes, megabytes, gigabytes, and terabytes.</p>
    /// This field is required.
    pub fn unit(mut self, input: crate::types::TrainedModelArtifactMaxSizeUnitType) -> Self {
        self.unit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The unit of measurement for the maximum artifact size. Valid values include common storage units such as bytes, kilobytes, megabytes, gigabytes, and terabytes.</p>
    pub fn set_unit(mut self, input: ::std::option::Option<crate::types::TrainedModelArtifactMaxSizeUnitType>) -> Self {
        self.unit = input;
        self
    }
    /// <p>The unit of measurement for the maximum artifact size. Valid values include common storage units such as bytes, kilobytes, megabytes, gigabytes, and terabytes.</p>
    pub fn get_unit(&self) -> &::std::option::Option<crate::types::TrainedModelArtifactMaxSizeUnitType> {
        &self.unit
    }
    /// <p>The numerical value for the maximum artifact size limit. This value is interpreted according to the specified unit.</p>
    /// This field is required.
    pub fn value(mut self, input: f64) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The numerical value for the maximum artifact size limit. This value is interpreted according to the specified unit.</p>
    pub fn set_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.value = input;
        self
    }
    /// <p>The numerical value for the maximum artifact size limit. This value is interpreted according to the specified unit.</p>
    pub fn get_value(&self) -> &::std::option::Option<f64> {
        &self.value
    }
    /// Consumes the builder and constructs a [`TrainedModelArtifactMaxSize`](crate::types::TrainedModelArtifactMaxSize).
    /// This method will fail if any of the following fields are not set:
    /// - [`unit`](crate::types::builders::TrainedModelArtifactMaxSizeBuilder::unit)
    /// - [`value`](crate::types::builders::TrainedModelArtifactMaxSizeBuilder::value)
    pub fn build(self) -> ::std::result::Result<crate::types::TrainedModelArtifactMaxSize, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TrainedModelArtifactMaxSize {
            unit: self.unit.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "unit",
                    "unit was not specified but it is required when building TrainedModelArtifactMaxSize",
                )
            })?,
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building TrainedModelArtifactMaxSize",
                )
            })?,
        })
    }
}
