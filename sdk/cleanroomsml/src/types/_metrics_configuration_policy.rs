// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the configuration policy for metrics generation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetricsConfigurationPolicy {
    /// <p>The noise level for the generated metrics.</p>
    pub noise_level: crate::types::NoiseLevelType,
}
impl MetricsConfigurationPolicy {
    /// <p>The noise level for the generated metrics.</p>
    pub fn noise_level(&self) -> &crate::types::NoiseLevelType {
        &self.noise_level
    }
}
impl MetricsConfigurationPolicy {
    /// Creates a new builder-style object to manufacture [`MetricsConfigurationPolicy`](crate::types::MetricsConfigurationPolicy).
    pub fn builder() -> crate::types::builders::MetricsConfigurationPolicyBuilder {
        crate::types::builders::MetricsConfigurationPolicyBuilder::default()
    }
}

/// A builder for [`MetricsConfigurationPolicy`](crate::types::MetricsConfigurationPolicy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MetricsConfigurationPolicyBuilder {
    pub(crate) noise_level: ::std::option::Option<crate::types::NoiseLevelType>,
}
impl MetricsConfigurationPolicyBuilder {
    /// <p>The noise level for the generated metrics.</p>
    /// This field is required.
    pub fn noise_level(mut self, input: crate::types::NoiseLevelType) -> Self {
        self.noise_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The noise level for the generated metrics.</p>
    pub fn set_noise_level(mut self, input: ::std::option::Option<crate::types::NoiseLevelType>) -> Self {
        self.noise_level = input;
        self
    }
    /// <p>The noise level for the generated metrics.</p>
    pub fn get_noise_level(&self) -> &::std::option::Option<crate::types::NoiseLevelType> {
        &self.noise_level
    }
    /// Consumes the builder and constructs a [`MetricsConfigurationPolicy`](crate::types::MetricsConfigurationPolicy).
    /// This method will fail if any of the following fields are not set:
    /// - [`noise_level`](crate::types::builders::MetricsConfigurationPolicyBuilder::noise_level)
    pub fn build(self) -> ::std::result::Result<crate::types::MetricsConfigurationPolicy, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MetricsConfigurationPolicy {
            noise_level: self.noise_level.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "noise_level",
                    "noise_level was not specified but it is required when building MetricsConfigurationPolicy",
                )
            })?,
        })
    }
}
