// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metrics that describe the quality of the generated audience.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AudienceQualityMetrics {
    /// <p>The relevance scores of the generated audience.</p>
    pub relevance_metrics: ::std::vec::Vec<crate::types::RelevanceMetric>,
    /// <p>The recall score of the generated audience. Recall is the percentage of the most similar users (by default, the most similar 20%) from a sample of the training data that are included in the seed audience by the audience generation job. Values range from 0-1, larger values indicate a better audience. A recall value approximately equal to the maximum bin size indicates that the audience model is equivalent to random selection.</p>
    pub recall_metric: ::std::option::Option<f64>,
}
impl AudienceQualityMetrics {
    /// <p>The relevance scores of the generated audience.</p>
    pub fn relevance_metrics(&self) -> &[crate::types::RelevanceMetric] {
        use std::ops::Deref;
        self.relevance_metrics.deref()
    }
    /// <p>The recall score of the generated audience. Recall is the percentage of the most similar users (by default, the most similar 20%) from a sample of the training data that are included in the seed audience by the audience generation job. Values range from 0-1, larger values indicate a better audience. A recall value approximately equal to the maximum bin size indicates that the audience model is equivalent to random selection.</p>
    pub fn recall_metric(&self) -> ::std::option::Option<f64> {
        self.recall_metric
    }
}
impl AudienceQualityMetrics {
    /// Creates a new builder-style object to manufacture [`AudienceQualityMetrics`](crate::types::AudienceQualityMetrics).
    pub fn builder() -> crate::types::builders::AudienceQualityMetricsBuilder {
        crate::types::builders::AudienceQualityMetricsBuilder::default()
    }
}

/// A builder for [`AudienceQualityMetrics`](crate::types::AudienceQualityMetrics).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AudienceQualityMetricsBuilder {
    pub(crate) relevance_metrics: ::std::option::Option<::std::vec::Vec<crate::types::RelevanceMetric>>,
    pub(crate) recall_metric: ::std::option::Option<f64>,
}
impl AudienceQualityMetricsBuilder {
    /// Appends an item to `relevance_metrics`.
    ///
    /// To override the contents of this collection use [`set_relevance_metrics`](Self::set_relevance_metrics).
    ///
    /// <p>The relevance scores of the generated audience.</p>
    pub fn relevance_metrics(mut self, input: crate::types::RelevanceMetric) -> Self {
        let mut v = self.relevance_metrics.unwrap_or_default();
        v.push(input);
        self.relevance_metrics = ::std::option::Option::Some(v);
        self
    }
    /// <p>The relevance scores of the generated audience.</p>
    pub fn set_relevance_metrics(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RelevanceMetric>>) -> Self {
        self.relevance_metrics = input;
        self
    }
    /// <p>The relevance scores of the generated audience.</p>
    pub fn get_relevance_metrics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RelevanceMetric>> {
        &self.relevance_metrics
    }
    /// <p>The recall score of the generated audience. Recall is the percentage of the most similar users (by default, the most similar 20%) from a sample of the training data that are included in the seed audience by the audience generation job. Values range from 0-1, larger values indicate a better audience. A recall value approximately equal to the maximum bin size indicates that the audience model is equivalent to random selection.</p>
    pub fn recall_metric(mut self, input: f64) -> Self {
        self.recall_metric = ::std::option::Option::Some(input);
        self
    }
    /// <p>The recall score of the generated audience. Recall is the percentage of the most similar users (by default, the most similar 20%) from a sample of the training data that are included in the seed audience by the audience generation job. Values range from 0-1, larger values indicate a better audience. A recall value approximately equal to the maximum bin size indicates that the audience model is equivalent to random selection.</p>
    pub fn set_recall_metric(mut self, input: ::std::option::Option<f64>) -> Self {
        self.recall_metric = input;
        self
    }
    /// <p>The recall score of the generated audience. Recall is the percentage of the most similar users (by default, the most similar 20%) from a sample of the training data that are included in the seed audience by the audience generation job. Values range from 0-1, larger values indicate a better audience. A recall value approximately equal to the maximum bin size indicates that the audience model is equivalent to random selection.</p>
    pub fn get_recall_metric(&self) -> &::std::option::Option<f64> {
        &self.recall_metric
    }
    /// Consumes the builder and constructs a [`AudienceQualityMetrics`](crate::types::AudienceQualityMetrics).
    /// This method will fail if any of the following fields are not set:
    /// - [`relevance_metrics`](crate::types::builders::AudienceQualityMetricsBuilder::relevance_metrics)
    pub fn build(self) -> ::std::result::Result<crate::types::AudienceQualityMetrics, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AudienceQualityMetrics {
            relevance_metrics: self.relevance_metrics.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "relevance_metrics",
                    "relevance_metrics was not specified but it is required when building AudienceQualityMetrics",
                )
            })?,
            recall_metric: self.recall_metric,
        })
    }
}
