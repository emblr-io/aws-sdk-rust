// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the model training data channel. A training data channel is a named data source that the training algorithms can consume.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModelTrainingDataChannel {
    /// <p>The Amazon Resource Name (ARN) of the ML input channel for this model training data channel.</p>
    pub ml_input_channel_arn: ::std::string::String,
    /// <p>The name of the training data channel.</p>
    pub channel_name: ::std::string::String,
    /// <p>Specifies how the training data stored in Amazon S3 should be distributed to training instances. This parameter controls the data distribution strategy for the training job:</p>
    /// <ul>
    /// <li>
    /// <p><code>FullyReplicated</code> - The entire dataset is replicated on each training instance. This is suitable for smaller datasets and algorithms that require access to the complete dataset.</p></li>
    /// <li>
    /// <p><code>ShardedByS3Key</code> - The dataset is distributed across training instances based on Amazon S3 key names. This is suitable for larger datasets and distributed training scenarios where each instance processes a subset of the data.</p></li>
    /// </ul>
    pub s3_data_distribution_type: crate::types::S3DataDistributionType,
}
impl ModelTrainingDataChannel {
    /// <p>The Amazon Resource Name (ARN) of the ML input channel for this model training data channel.</p>
    pub fn ml_input_channel_arn(&self) -> &str {
        use std::ops::Deref;
        self.ml_input_channel_arn.deref()
    }
    /// <p>The name of the training data channel.</p>
    pub fn channel_name(&self) -> &str {
        use std::ops::Deref;
        self.channel_name.deref()
    }
    /// <p>Specifies how the training data stored in Amazon S3 should be distributed to training instances. This parameter controls the data distribution strategy for the training job:</p>
    /// <ul>
    /// <li>
    /// <p><code>FullyReplicated</code> - The entire dataset is replicated on each training instance. This is suitable for smaller datasets and algorithms that require access to the complete dataset.</p></li>
    /// <li>
    /// <p><code>ShardedByS3Key</code> - The dataset is distributed across training instances based on Amazon S3 key names. This is suitable for larger datasets and distributed training scenarios where each instance processes a subset of the data.</p></li>
    /// </ul>
    pub fn s3_data_distribution_type(&self) -> &crate::types::S3DataDistributionType {
        &self.s3_data_distribution_type
    }
}
impl ModelTrainingDataChannel {
    /// Creates a new builder-style object to manufacture [`ModelTrainingDataChannel`](crate::types::ModelTrainingDataChannel).
    pub fn builder() -> crate::types::builders::ModelTrainingDataChannelBuilder {
        crate::types::builders::ModelTrainingDataChannelBuilder::default()
    }
}

/// A builder for [`ModelTrainingDataChannel`](crate::types::ModelTrainingDataChannel).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ModelTrainingDataChannelBuilder {
    pub(crate) ml_input_channel_arn: ::std::option::Option<::std::string::String>,
    pub(crate) channel_name: ::std::option::Option<::std::string::String>,
    pub(crate) s3_data_distribution_type: ::std::option::Option<crate::types::S3DataDistributionType>,
}
impl ModelTrainingDataChannelBuilder {
    /// <p>The Amazon Resource Name (ARN) of the ML input channel for this model training data channel.</p>
    /// This field is required.
    pub fn ml_input_channel_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ml_input_channel_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ML input channel for this model training data channel.</p>
    pub fn set_ml_input_channel_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ml_input_channel_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ML input channel for this model training data channel.</p>
    pub fn get_ml_input_channel_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.ml_input_channel_arn
    }
    /// <p>The name of the training data channel.</p>
    /// This field is required.
    pub fn channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the training data channel.</p>
    pub fn set_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>The name of the training data channel.</p>
    pub fn get_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_name
    }
    /// <p>Specifies how the training data stored in Amazon S3 should be distributed to training instances. This parameter controls the data distribution strategy for the training job:</p>
    /// <ul>
    /// <li>
    /// <p><code>FullyReplicated</code> - The entire dataset is replicated on each training instance. This is suitable for smaller datasets and algorithms that require access to the complete dataset.</p></li>
    /// <li>
    /// <p><code>ShardedByS3Key</code> - The dataset is distributed across training instances based on Amazon S3 key names. This is suitable for larger datasets and distributed training scenarios where each instance processes a subset of the data.</p></li>
    /// </ul>
    pub fn s3_data_distribution_type(mut self, input: crate::types::S3DataDistributionType) -> Self {
        self.s3_data_distribution_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies how the training data stored in Amazon S3 should be distributed to training instances. This parameter controls the data distribution strategy for the training job:</p>
    /// <ul>
    /// <li>
    /// <p><code>FullyReplicated</code> - The entire dataset is replicated on each training instance. This is suitable for smaller datasets and algorithms that require access to the complete dataset.</p></li>
    /// <li>
    /// <p><code>ShardedByS3Key</code> - The dataset is distributed across training instances based on Amazon S3 key names. This is suitable for larger datasets and distributed training scenarios where each instance processes a subset of the data.</p></li>
    /// </ul>
    pub fn set_s3_data_distribution_type(mut self, input: ::std::option::Option<crate::types::S3DataDistributionType>) -> Self {
        self.s3_data_distribution_type = input;
        self
    }
    /// <p>Specifies how the training data stored in Amazon S3 should be distributed to training instances. This parameter controls the data distribution strategy for the training job:</p>
    /// <ul>
    /// <li>
    /// <p><code>FullyReplicated</code> - The entire dataset is replicated on each training instance. This is suitable for smaller datasets and algorithms that require access to the complete dataset.</p></li>
    /// <li>
    /// <p><code>ShardedByS3Key</code> - The dataset is distributed across training instances based on Amazon S3 key names. This is suitable for larger datasets and distributed training scenarios where each instance processes a subset of the data.</p></li>
    /// </ul>
    pub fn get_s3_data_distribution_type(&self) -> &::std::option::Option<crate::types::S3DataDistributionType> {
        &self.s3_data_distribution_type
    }
    /// Consumes the builder and constructs a [`ModelTrainingDataChannel`](crate::types::ModelTrainingDataChannel).
    /// This method will fail if any of the following fields are not set:
    /// - [`ml_input_channel_arn`](crate::types::builders::ModelTrainingDataChannelBuilder::ml_input_channel_arn)
    /// - [`channel_name`](crate::types::builders::ModelTrainingDataChannelBuilder::channel_name)
    pub fn build(self) -> ::std::result::Result<crate::types::ModelTrainingDataChannel, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ModelTrainingDataChannel {
            ml_input_channel_arn: self.ml_input_channel_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ml_input_channel_arn",
                    "ml_input_channel_arn was not specified but it is required when building ModelTrainingDataChannel",
                )
            })?,
            channel_name: self.channel_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "channel_name",
                    "channel_name was not specified but it is required when building ModelTrainingDataChannel",
                )
            })?,
            s3_data_distribution_type: self.s3_data_distribution_type.unwrap_or(
                "FullyReplicated"
                    .parse::<crate::types::S3DataDistributionType>()
                    .expect("static value validated to member"),
            ),
        })
    }
}
