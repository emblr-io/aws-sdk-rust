// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the data source that is used to create an ML input channel.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InputChannel {
    /// <p>The data source that is used to create the ML input channel.</p>
    pub data_source: ::std::option::Option<crate::types::InputChannelDataSource>,
    /// <p>The Amazon Resource Name (ARN) of the role used to run the query specified in the <code>dataSource</code> field of the input channel.</p>
    /// <p>Passing a role across AWS accounts is not allowed. If you pass a role that isn't in your account, you get an <code>AccessDeniedException</code> error.</p>
    pub role_arn: ::std::string::String,
}
impl InputChannel {
    /// <p>The data source that is used to create the ML input channel.</p>
    pub fn data_source(&self) -> ::std::option::Option<&crate::types::InputChannelDataSource> {
        self.data_source.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the role used to run the query specified in the <code>dataSource</code> field of the input channel.</p>
    /// <p>Passing a role across AWS accounts is not allowed. If you pass a role that isn't in your account, you get an <code>AccessDeniedException</code> error.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
}
impl InputChannel {
    /// Creates a new builder-style object to manufacture [`InputChannel`](crate::types::InputChannel).
    pub fn builder() -> crate::types::builders::InputChannelBuilder {
        crate::types::builders::InputChannelBuilder::default()
    }
}

/// A builder for [`InputChannel`](crate::types::InputChannel).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InputChannelBuilder {
    pub(crate) data_source: ::std::option::Option<crate::types::InputChannelDataSource>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
}
impl InputChannelBuilder {
    /// <p>The data source that is used to create the ML input channel.</p>
    /// This field is required.
    pub fn data_source(mut self, input: crate::types::InputChannelDataSource) -> Self {
        self.data_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data source that is used to create the ML input channel.</p>
    pub fn set_data_source(mut self, input: ::std::option::Option<crate::types::InputChannelDataSource>) -> Self {
        self.data_source = input;
        self
    }
    /// <p>The data source that is used to create the ML input channel.</p>
    pub fn get_data_source(&self) -> &::std::option::Option<crate::types::InputChannelDataSource> {
        &self.data_source
    }
    /// <p>The Amazon Resource Name (ARN) of the role used to run the query specified in the <code>dataSource</code> field of the input channel.</p>
    /// <p>Passing a role across AWS accounts is not allowed. If you pass a role that isn't in your account, you get an <code>AccessDeniedException</code> error.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role used to run the query specified in the <code>dataSource</code> field of the input channel.</p>
    /// <p>Passing a role across AWS accounts is not allowed. If you pass a role that isn't in your account, you get an <code>AccessDeniedException</code> error.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role used to run the query specified in the <code>dataSource</code> field of the input channel.</p>
    /// <p>Passing a role across AWS accounts is not allowed. If you pass a role that isn't in your account, you get an <code>AccessDeniedException</code> error.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Consumes the builder and constructs a [`InputChannel`](crate::types::InputChannel).
    /// This method will fail if any of the following fields are not set:
    /// - [`role_arn`](crate::types::builders::InputChannelBuilder::role_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::InputChannel, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::InputChannel {
            data_source: self.data_source,
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building InputChannel",
                )
            })?,
        })
    }
}
