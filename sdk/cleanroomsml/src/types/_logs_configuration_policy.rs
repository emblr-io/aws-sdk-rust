// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the information necessary for a user to access the logs.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LogsConfigurationPolicy {
    /// <p>A list of account IDs that are allowed to access the logs.</p>
    pub allowed_account_ids: ::std::vec::Vec<::std::string::String>,
    /// <p>A regular expression pattern that is used to parse the logs and return information that matches the pattern.</p>
    pub filter_pattern: ::std::option::Option<::std::string::String>,
}
impl LogsConfigurationPolicy {
    /// <p>A list of account IDs that are allowed to access the logs.</p>
    pub fn allowed_account_ids(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.allowed_account_ids.deref()
    }
    /// <p>A regular expression pattern that is used to parse the logs and return information that matches the pattern.</p>
    pub fn filter_pattern(&self) -> ::std::option::Option<&str> {
        self.filter_pattern.as_deref()
    }
}
impl LogsConfigurationPolicy {
    /// Creates a new builder-style object to manufacture [`LogsConfigurationPolicy`](crate::types::LogsConfigurationPolicy).
    pub fn builder() -> crate::types::builders::LogsConfigurationPolicyBuilder {
        crate::types::builders::LogsConfigurationPolicyBuilder::default()
    }
}

/// A builder for [`LogsConfigurationPolicy`](crate::types::LogsConfigurationPolicy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LogsConfigurationPolicyBuilder {
    pub(crate) allowed_account_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) filter_pattern: ::std::option::Option<::std::string::String>,
}
impl LogsConfigurationPolicyBuilder {
    /// Appends an item to `allowed_account_ids`.
    ///
    /// To override the contents of this collection use [`set_allowed_account_ids`](Self::set_allowed_account_ids).
    ///
    /// <p>A list of account IDs that are allowed to access the logs.</p>
    pub fn allowed_account_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_account_ids.unwrap_or_default();
        v.push(input.into());
        self.allowed_account_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of account IDs that are allowed to access the logs.</p>
    pub fn set_allowed_account_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allowed_account_ids = input;
        self
    }
    /// <p>A list of account IDs that are allowed to access the logs.</p>
    pub fn get_allowed_account_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allowed_account_ids
    }
    /// <p>A regular expression pattern that is used to parse the logs and return information that matches the pattern.</p>
    pub fn filter_pattern(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter_pattern = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A regular expression pattern that is used to parse the logs and return information that matches the pattern.</p>
    pub fn set_filter_pattern(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter_pattern = input;
        self
    }
    /// <p>A regular expression pattern that is used to parse the logs and return information that matches the pattern.</p>
    pub fn get_filter_pattern(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter_pattern
    }
    /// Consumes the builder and constructs a [`LogsConfigurationPolicy`](crate::types::LogsConfigurationPolicy).
    /// This method will fail if any of the following fields are not set:
    /// - [`allowed_account_ids`](crate::types::builders::LogsConfigurationPolicyBuilder::allowed_account_ids)
    pub fn build(self) -> ::std::result::Result<crate::types::LogsConfigurationPolicy, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LogsConfigurationPolicy {
            allowed_account_ids: self.allowed_account_ids.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "allowed_account_ids",
                    "allowed_account_ids was not specified but it is required when building LogsConfigurationPolicy",
                )
            })?,
            filter_pattern: self.filter_pattern,
        })
    }
}
