// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the trained model inference job.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TrainedModelInferenceJobSummary {
    /// <p>The Amazon Resource Name (ARN) of the trained model inference job.</p>
    pub trained_model_inference_job_arn: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the configured model algorithm association that is used for the trained model inference job.</p>
    pub configured_model_algorithm_association_arn: ::std::option::Option<::std::string::String>,
    /// <p>The membership ID of the membership that contains the trained model inference job.</p>
    pub membership_identifier: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the trained model that is used for the trained model inference job.</p>
    pub trained_model_arn: ::std::string::String,
    /// <p>The version identifier of the trained model that was used for inference in this job.</p>
    pub trained_model_version_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The collaboration ID of the collaboration that contains the trained model inference job.</p>
    pub collaboration_identifier: ::std::string::String,
    /// <p>The status of the trained model inference job.</p>
    pub status: crate::types::TrainedModelInferenceJobStatus,
    /// <p>The output configuration information of the trained model job.</p>
    pub output_configuration: ::std::option::Option<crate::types::InferenceOutputConfiguration>,
    /// <p>The name of the trained model inference job.</p>
    pub name: ::std::string::String,
    /// <p>The description of the trained model inference job.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The metric status of the trained model inference job.</p>
    pub metrics_status: ::std::option::Option<crate::types::MetricsStatus>,
    /// <p>Details about the metrics status for the trained model inference job.</p>
    pub metrics_status_details: ::std::option::Option<::std::string::String>,
    /// <p>The log status of the trained model inference job.</p>
    pub logs_status: ::std::option::Option<crate::types::LogsStatus>,
    /// <p>Details about the log status for the trained model inference job.</p>
    pub logs_status_details: ::std::option::Option<::std::string::String>,
    /// <p>The time at which the trained model inference job was created.</p>
    pub create_time: ::aws_smithy_types::DateTime,
    /// <p>The most recent time at which the trained model inference job was updated.</p>
    pub update_time: ::aws_smithy_types::DateTime,
}
impl TrainedModelInferenceJobSummary {
    /// <p>The Amazon Resource Name (ARN) of the trained model inference job.</p>
    pub fn trained_model_inference_job_arn(&self) -> &str {
        use std::ops::Deref;
        self.trained_model_inference_job_arn.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the configured model algorithm association that is used for the trained model inference job.</p>
    pub fn configured_model_algorithm_association_arn(&self) -> ::std::option::Option<&str> {
        self.configured_model_algorithm_association_arn.as_deref()
    }
    /// <p>The membership ID of the membership that contains the trained model inference job.</p>
    pub fn membership_identifier(&self) -> &str {
        use std::ops::Deref;
        self.membership_identifier.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model that is used for the trained model inference job.</p>
    pub fn trained_model_arn(&self) -> &str {
        use std::ops::Deref;
        self.trained_model_arn.deref()
    }
    /// <p>The version identifier of the trained model that was used for inference in this job.</p>
    pub fn trained_model_version_identifier(&self) -> ::std::option::Option<&str> {
        self.trained_model_version_identifier.as_deref()
    }
    /// <p>The collaboration ID of the collaboration that contains the trained model inference job.</p>
    pub fn collaboration_identifier(&self) -> &str {
        use std::ops::Deref;
        self.collaboration_identifier.deref()
    }
    /// <p>The status of the trained model inference job.</p>
    pub fn status(&self) -> &crate::types::TrainedModelInferenceJobStatus {
        &self.status
    }
    /// <p>The output configuration information of the trained model job.</p>
    pub fn output_configuration(&self) -> ::std::option::Option<&crate::types::InferenceOutputConfiguration> {
        self.output_configuration.as_ref()
    }
    /// <p>The name of the trained model inference job.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of the trained model inference job.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The metric status of the trained model inference job.</p>
    pub fn metrics_status(&self) -> ::std::option::Option<&crate::types::MetricsStatus> {
        self.metrics_status.as_ref()
    }
    /// <p>Details about the metrics status for the trained model inference job.</p>
    pub fn metrics_status_details(&self) -> ::std::option::Option<&str> {
        self.metrics_status_details.as_deref()
    }
    /// <p>The log status of the trained model inference job.</p>
    pub fn logs_status(&self) -> ::std::option::Option<&crate::types::LogsStatus> {
        self.logs_status.as_ref()
    }
    /// <p>Details about the log status for the trained model inference job.</p>
    pub fn logs_status_details(&self) -> ::std::option::Option<&str> {
        self.logs_status_details.as_deref()
    }
    /// <p>The time at which the trained model inference job was created.</p>
    pub fn create_time(&self) -> &::aws_smithy_types::DateTime {
        &self.create_time
    }
    /// <p>The most recent time at which the trained model inference job was updated.</p>
    pub fn update_time(&self) -> &::aws_smithy_types::DateTime {
        &self.update_time
    }
}
impl TrainedModelInferenceJobSummary {
    /// Creates a new builder-style object to manufacture [`TrainedModelInferenceJobSummary`](crate::types::TrainedModelInferenceJobSummary).
    pub fn builder() -> crate::types::builders::TrainedModelInferenceJobSummaryBuilder {
        crate::types::builders::TrainedModelInferenceJobSummaryBuilder::default()
    }
}

/// A builder for [`TrainedModelInferenceJobSummary`](crate::types::TrainedModelInferenceJobSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TrainedModelInferenceJobSummaryBuilder {
    pub(crate) trained_model_inference_job_arn: ::std::option::Option<::std::string::String>,
    pub(crate) configured_model_algorithm_association_arn: ::std::option::Option<::std::string::String>,
    pub(crate) membership_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) trained_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) trained_model_version_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) collaboration_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::TrainedModelInferenceJobStatus>,
    pub(crate) output_configuration: ::std::option::Option<crate::types::InferenceOutputConfiguration>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) metrics_status: ::std::option::Option<crate::types::MetricsStatus>,
    pub(crate) metrics_status_details: ::std::option::Option<::std::string::String>,
    pub(crate) logs_status: ::std::option::Option<crate::types::LogsStatus>,
    pub(crate) logs_status_details: ::std::option::Option<::std::string::String>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl TrainedModelInferenceJobSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the trained model inference job.</p>
    /// This field is required.
    pub fn trained_model_inference_job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trained_model_inference_job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model inference job.</p>
    pub fn set_trained_model_inference_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trained_model_inference_job_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model inference job.</p>
    pub fn get_trained_model_inference_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.trained_model_inference_job_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the configured model algorithm association that is used for the trained model inference job.</p>
    pub fn configured_model_algorithm_association_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configured_model_algorithm_association_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the configured model algorithm association that is used for the trained model inference job.</p>
    pub fn set_configured_model_algorithm_association_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configured_model_algorithm_association_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the configured model algorithm association that is used for the trained model inference job.</p>
    pub fn get_configured_model_algorithm_association_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.configured_model_algorithm_association_arn
    }
    /// <p>The membership ID of the membership that contains the trained model inference job.</p>
    /// This field is required.
    pub fn membership_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.membership_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The membership ID of the membership that contains the trained model inference job.</p>
    pub fn set_membership_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.membership_identifier = input;
        self
    }
    /// <p>The membership ID of the membership that contains the trained model inference job.</p>
    pub fn get_membership_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.membership_identifier
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model that is used for the trained model inference job.</p>
    /// This field is required.
    pub fn trained_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trained_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model that is used for the trained model inference job.</p>
    pub fn set_trained_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trained_model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model that is used for the trained model inference job.</p>
    pub fn get_trained_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.trained_model_arn
    }
    /// <p>The version identifier of the trained model that was used for inference in this job.</p>
    pub fn trained_model_version_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trained_model_version_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version identifier of the trained model that was used for inference in this job.</p>
    pub fn set_trained_model_version_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trained_model_version_identifier = input;
        self
    }
    /// <p>The version identifier of the trained model that was used for inference in this job.</p>
    pub fn get_trained_model_version_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.trained_model_version_identifier
    }
    /// <p>The collaboration ID of the collaboration that contains the trained model inference job.</p>
    /// This field is required.
    pub fn collaboration_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaboration_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The collaboration ID of the collaboration that contains the trained model inference job.</p>
    pub fn set_collaboration_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaboration_identifier = input;
        self
    }
    /// <p>The collaboration ID of the collaboration that contains the trained model inference job.</p>
    pub fn get_collaboration_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaboration_identifier
    }
    /// <p>The status of the trained model inference job.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::TrainedModelInferenceJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the trained model inference job.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TrainedModelInferenceJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the trained model inference job.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TrainedModelInferenceJobStatus> {
        &self.status
    }
    /// <p>The output configuration information of the trained model job.</p>
    /// This field is required.
    pub fn output_configuration(mut self, input: crate::types::InferenceOutputConfiguration) -> Self {
        self.output_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The output configuration information of the trained model job.</p>
    pub fn set_output_configuration(mut self, input: ::std::option::Option<crate::types::InferenceOutputConfiguration>) -> Self {
        self.output_configuration = input;
        self
    }
    /// <p>The output configuration information of the trained model job.</p>
    pub fn get_output_configuration(&self) -> &::std::option::Option<crate::types::InferenceOutputConfiguration> {
        &self.output_configuration
    }
    /// <p>The name of the trained model inference job.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the trained model inference job.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the trained model inference job.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the trained model inference job.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the trained model inference job.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the trained model inference job.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The metric status of the trained model inference job.</p>
    pub fn metrics_status(mut self, input: crate::types::MetricsStatus) -> Self {
        self.metrics_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metric status of the trained model inference job.</p>
    pub fn set_metrics_status(mut self, input: ::std::option::Option<crate::types::MetricsStatus>) -> Self {
        self.metrics_status = input;
        self
    }
    /// <p>The metric status of the trained model inference job.</p>
    pub fn get_metrics_status(&self) -> &::std::option::Option<crate::types::MetricsStatus> {
        &self.metrics_status
    }
    /// <p>Details about the metrics status for the trained model inference job.</p>
    pub fn metrics_status_details(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metrics_status_details = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Details about the metrics status for the trained model inference job.</p>
    pub fn set_metrics_status_details(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metrics_status_details = input;
        self
    }
    /// <p>Details about the metrics status for the trained model inference job.</p>
    pub fn get_metrics_status_details(&self) -> &::std::option::Option<::std::string::String> {
        &self.metrics_status_details
    }
    /// <p>The log status of the trained model inference job.</p>
    pub fn logs_status(mut self, input: crate::types::LogsStatus) -> Self {
        self.logs_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The log status of the trained model inference job.</p>
    pub fn set_logs_status(mut self, input: ::std::option::Option<crate::types::LogsStatus>) -> Self {
        self.logs_status = input;
        self
    }
    /// <p>The log status of the trained model inference job.</p>
    pub fn get_logs_status(&self) -> &::std::option::Option<crate::types::LogsStatus> {
        &self.logs_status
    }
    /// <p>Details about the log status for the trained model inference job.</p>
    pub fn logs_status_details(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.logs_status_details = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Details about the log status for the trained model inference job.</p>
    pub fn set_logs_status_details(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.logs_status_details = input;
        self
    }
    /// <p>Details about the log status for the trained model inference job.</p>
    pub fn get_logs_status_details(&self) -> &::std::option::Option<::std::string::String> {
        &self.logs_status_details
    }
    /// <p>The time at which the trained model inference job was created.</p>
    /// This field is required.
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the trained model inference job was created.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time at which the trained model inference job was created.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The most recent time at which the trained model inference job was updated.</p>
    /// This field is required.
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The most recent time at which the trained model inference job was updated.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The most recent time at which the trained model inference job was updated.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// Consumes the builder and constructs a [`TrainedModelInferenceJobSummary`](crate::types::TrainedModelInferenceJobSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`trained_model_inference_job_arn`](crate::types::builders::TrainedModelInferenceJobSummaryBuilder::trained_model_inference_job_arn)
    /// - [`membership_identifier`](crate::types::builders::TrainedModelInferenceJobSummaryBuilder::membership_identifier)
    /// - [`trained_model_arn`](crate::types::builders::TrainedModelInferenceJobSummaryBuilder::trained_model_arn)
    /// - [`collaboration_identifier`](crate::types::builders::TrainedModelInferenceJobSummaryBuilder::collaboration_identifier)
    /// - [`status`](crate::types::builders::TrainedModelInferenceJobSummaryBuilder::status)
    /// - [`name`](crate::types::builders::TrainedModelInferenceJobSummaryBuilder::name)
    /// - [`create_time`](crate::types::builders::TrainedModelInferenceJobSummaryBuilder::create_time)
    /// - [`update_time`](crate::types::builders::TrainedModelInferenceJobSummaryBuilder::update_time)
    pub fn build(self) -> ::std::result::Result<crate::types::TrainedModelInferenceJobSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TrainedModelInferenceJobSummary {
            trained_model_inference_job_arn: self.trained_model_inference_job_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "trained_model_inference_job_arn",
                    "trained_model_inference_job_arn was not specified but it is required when building TrainedModelInferenceJobSummary",
                )
            })?,
            configured_model_algorithm_association_arn: self.configured_model_algorithm_association_arn,
            membership_identifier: self.membership_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "membership_identifier",
                    "membership_identifier was not specified but it is required when building TrainedModelInferenceJobSummary",
                )
            })?,
            trained_model_arn: self.trained_model_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "trained_model_arn",
                    "trained_model_arn was not specified but it is required when building TrainedModelInferenceJobSummary",
                )
            })?,
            trained_model_version_identifier: self.trained_model_version_identifier,
            collaboration_identifier: self.collaboration_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "collaboration_identifier",
                    "collaboration_identifier was not specified but it is required when building TrainedModelInferenceJobSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building TrainedModelInferenceJobSummary",
                )
            })?,
            output_configuration: self.output_configuration,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building TrainedModelInferenceJobSummary",
                )
            })?,
            description: self.description,
            metrics_status: self.metrics_status,
            metrics_status_details: self.metrics_status_details,
            logs_status: self.logs_status,
            logs_status_details: self.logs_status_details,
            create_time: self.create_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_time",
                    "create_time was not specified but it is required when building TrainedModelInferenceJobSummary",
                )
            })?,
            update_time: self.update_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_time",
                    "update_time was not specified but it is required when building TrainedModelInferenceJobSummary",
                )
            })?,
        })
    }
}
