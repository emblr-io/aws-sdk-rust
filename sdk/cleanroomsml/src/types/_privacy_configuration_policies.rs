// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the privacy configuration policies for a configured model algorithm association.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PrivacyConfigurationPolicies {
    /// <p>Specifies who will receive the trained models.</p>
    pub trained_models: ::std::option::Option<crate::types::TrainedModelsConfigurationPolicy>,
    /// <p>Specifies who will receive the trained model export.</p>
    pub trained_model_exports: ::std::option::Option<crate::types::TrainedModelExportsConfigurationPolicy>,
    /// <p>Specifies who will receive the trained model inference jobs.</p>
    pub trained_model_inference_jobs: ::std::option::Option<crate::types::TrainedModelInferenceJobsConfigurationPolicy>,
}
impl PrivacyConfigurationPolicies {
    /// <p>Specifies who will receive the trained models.</p>
    pub fn trained_models(&self) -> ::std::option::Option<&crate::types::TrainedModelsConfigurationPolicy> {
        self.trained_models.as_ref()
    }
    /// <p>Specifies who will receive the trained model export.</p>
    pub fn trained_model_exports(&self) -> ::std::option::Option<&crate::types::TrainedModelExportsConfigurationPolicy> {
        self.trained_model_exports.as_ref()
    }
    /// <p>Specifies who will receive the trained model inference jobs.</p>
    pub fn trained_model_inference_jobs(&self) -> ::std::option::Option<&crate::types::TrainedModelInferenceJobsConfigurationPolicy> {
        self.trained_model_inference_jobs.as_ref()
    }
}
impl PrivacyConfigurationPolicies {
    /// Creates a new builder-style object to manufacture [`PrivacyConfigurationPolicies`](crate::types::PrivacyConfigurationPolicies).
    pub fn builder() -> crate::types::builders::PrivacyConfigurationPoliciesBuilder {
        crate::types::builders::PrivacyConfigurationPoliciesBuilder::default()
    }
}

/// A builder for [`PrivacyConfigurationPolicies`](crate::types::PrivacyConfigurationPolicies).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PrivacyConfigurationPoliciesBuilder {
    pub(crate) trained_models: ::std::option::Option<crate::types::TrainedModelsConfigurationPolicy>,
    pub(crate) trained_model_exports: ::std::option::Option<crate::types::TrainedModelExportsConfigurationPolicy>,
    pub(crate) trained_model_inference_jobs: ::std::option::Option<crate::types::TrainedModelInferenceJobsConfigurationPolicy>,
}
impl PrivacyConfigurationPoliciesBuilder {
    /// <p>Specifies who will receive the trained models.</p>
    pub fn trained_models(mut self, input: crate::types::TrainedModelsConfigurationPolicy) -> Self {
        self.trained_models = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies who will receive the trained models.</p>
    pub fn set_trained_models(mut self, input: ::std::option::Option<crate::types::TrainedModelsConfigurationPolicy>) -> Self {
        self.trained_models = input;
        self
    }
    /// <p>Specifies who will receive the trained models.</p>
    pub fn get_trained_models(&self) -> &::std::option::Option<crate::types::TrainedModelsConfigurationPolicy> {
        &self.trained_models
    }
    /// <p>Specifies who will receive the trained model export.</p>
    pub fn trained_model_exports(mut self, input: crate::types::TrainedModelExportsConfigurationPolicy) -> Self {
        self.trained_model_exports = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies who will receive the trained model export.</p>
    pub fn set_trained_model_exports(mut self, input: ::std::option::Option<crate::types::TrainedModelExportsConfigurationPolicy>) -> Self {
        self.trained_model_exports = input;
        self
    }
    /// <p>Specifies who will receive the trained model export.</p>
    pub fn get_trained_model_exports(&self) -> &::std::option::Option<crate::types::TrainedModelExportsConfigurationPolicy> {
        &self.trained_model_exports
    }
    /// <p>Specifies who will receive the trained model inference jobs.</p>
    pub fn trained_model_inference_jobs(mut self, input: crate::types::TrainedModelInferenceJobsConfigurationPolicy) -> Self {
        self.trained_model_inference_jobs = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies who will receive the trained model inference jobs.</p>
    pub fn set_trained_model_inference_jobs(
        mut self,
        input: ::std::option::Option<crate::types::TrainedModelInferenceJobsConfigurationPolicy>,
    ) -> Self {
        self.trained_model_inference_jobs = input;
        self
    }
    /// <p>Specifies who will receive the trained model inference jobs.</p>
    pub fn get_trained_model_inference_jobs(&self) -> &::std::option::Option<crate::types::TrainedModelInferenceJobsConfigurationPolicy> {
        &self.trained_model_inference_jobs
    }
    /// Consumes the builder and constructs a [`PrivacyConfigurationPolicies`](crate::types::PrivacyConfigurationPolicies).
    pub fn build(self) -> crate::types::PrivacyConfigurationPolicies {
        crate::types::PrivacyConfigurationPolicies {
            trained_models: self.trained_models,
            trained_model_exports: self.trained_model_exports,
            trained_model_inference_jobs: self.trained_model_inference_jobs,
        }
    }
}
