// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Output from the bidirectional stream. The output is speech and a text transcription.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct BidirectionalOutputPayloadPart {
    /// <p>The speech output of the bidirectional stream.</p>
    pub bytes: ::std::option::Option<::aws_smithy_types::Blob>,
}
impl BidirectionalOutputPayloadPart {
    /// <p>The speech output of the bidirectional stream.</p>
    pub fn bytes(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.bytes.as_ref()
    }
}
impl ::std::fmt::Debug for BidirectionalOutputPayloadPart {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BidirectionalOutputPayloadPart");
        formatter.field("bytes", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl BidirectionalOutputPayloadPart {
    /// Creates a new builder-style object to manufacture [`BidirectionalOutputPayloadPart`](crate::types::BidirectionalOutputPayloadPart).
    pub fn builder() -> crate::types::builders::BidirectionalOutputPayloadPartBuilder {
        crate::types::builders::BidirectionalOutputPayloadPartBuilder::default()
    }
}

/// A builder for [`BidirectionalOutputPayloadPart`](crate::types::BidirectionalOutputPayloadPart).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct BidirectionalOutputPayloadPartBuilder {
    pub(crate) bytes: ::std::option::Option<::aws_smithy_types::Blob>,
}
impl BidirectionalOutputPayloadPartBuilder {
    /// <p>The speech output of the bidirectional stream.</p>
    pub fn bytes(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.bytes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The speech output of the bidirectional stream.</p>
    pub fn set_bytes(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.bytes = input;
        self
    }
    /// <p>The speech output of the bidirectional stream.</p>
    pub fn get_bytes(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.bytes
    }
    /// Consumes the builder and constructs a [`BidirectionalOutputPayloadPart`](crate::types::BidirectionalOutputPayloadPart).
    pub fn build(self) -> crate::types::BidirectionalOutputPayloadPart {
        crate::types::BidirectionalOutputPayloadPart { bytes: self.bytes }
    }
}
impl ::std::fmt::Debug for BidirectionalOutputPayloadPartBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BidirectionalOutputPayloadPartBuilder");
        formatter.field("bytes", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
