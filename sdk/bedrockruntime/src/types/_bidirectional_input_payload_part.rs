// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Payload content for the bidirectional input. The input is an audio stream.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct BidirectionalInputPayloadPart {
    /// <p>The audio content for the bidirectional input.</p>
    pub bytes: ::std::option::Option<::aws_smithy_types::Blob>,
}
impl BidirectionalInputPayloadPart {
    /// <p>The audio content for the bidirectional input.</p>
    pub fn bytes(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.bytes.as_ref()
    }
}
impl ::std::fmt::Debug for BidirectionalInputPayloadPart {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BidirectionalInputPayloadPart");
        formatter.field("bytes", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl BidirectionalInputPayloadPart {
    /// Creates a new builder-style object to manufacture [`BidirectionalInputPayloadPart`](crate::types::BidirectionalInputPayloadPart).
    pub fn builder() -> crate::types::builders::BidirectionalInputPayloadPartBuilder {
        crate::types::builders::BidirectionalInputPayloadPartBuilder::default()
    }
}

/// A builder for [`BidirectionalInputPayloadPart`](crate::types::BidirectionalInputPayloadPart).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct BidirectionalInputPayloadPartBuilder {
    pub(crate) bytes: ::std::option::Option<::aws_smithy_types::Blob>,
}
impl BidirectionalInputPayloadPartBuilder {
    /// <p>The audio content for the bidirectional input.</p>
    pub fn bytes(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.bytes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The audio content for the bidirectional input.</p>
    pub fn set_bytes(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.bytes = input;
        self
    }
    /// <p>The audio content for the bidirectional input.</p>
    pub fn get_bytes(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.bytes
    }
    /// Consumes the builder and constructs a [`BidirectionalInputPayloadPart`](crate::types::BidirectionalInputPayloadPart).
    pub fn build(self) -> crate::types::BidirectionalInputPayloadPart {
        crate::types::BidirectionalInputPayloadPart { bytes: self.bytes }
    }
}
impl ::std::fmt::Debug for BidirectionalInputPayloadPartBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BidirectionalInputPayloadPartBuilder");
        formatter.field("bytes", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
