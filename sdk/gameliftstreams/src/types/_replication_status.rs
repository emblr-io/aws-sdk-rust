// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the status of the replication of an application to a location. An application cannot be streamed from a location until it has finished replicating there.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReplicationStatus {
    /// <p>A location's name. For example, <code>us-east-1</code>. For a complete list of locations that Amazon GameLift Streams supports, refer to <a href="https://docs.aws.amazon.com/gameliftstreams/latest/developerguide/regions-quotas.html">Regions, quotas, and limitations</a> in the <i>Amazon GameLift Streams Developer Guide</i>.</p>
    pub location: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the replication process.</p>
    pub status: ::std::option::Option<crate::types::ReplicationStatusType>,
}
impl ReplicationStatus {
    /// <p>A location's name. For example, <code>us-east-1</code>. For a complete list of locations that Amazon GameLift Streams supports, refer to <a href="https://docs.aws.amazon.com/gameliftstreams/latest/developerguide/regions-quotas.html">Regions, quotas, and limitations</a> in the <i>Amazon GameLift Streams Developer Guide</i>.</p>
    pub fn location(&self) -> ::std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>The current status of the replication process.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ReplicationStatusType> {
        self.status.as_ref()
    }
}
impl ReplicationStatus {
    /// Creates a new builder-style object to manufacture [`ReplicationStatus`](crate::types::ReplicationStatus).
    pub fn builder() -> crate::types::builders::ReplicationStatusBuilder {
        crate::types::builders::ReplicationStatusBuilder::default()
    }
}

/// A builder for [`ReplicationStatus`](crate::types::ReplicationStatus).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ReplicationStatusBuilder {
    pub(crate) location: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ReplicationStatusType>,
}
impl ReplicationStatusBuilder {
    /// <p>A location's name. For example, <code>us-east-1</code>. For a complete list of locations that Amazon GameLift Streams supports, refer to <a href="https://docs.aws.amazon.com/gameliftstreams/latest/developerguide/regions-quotas.html">Regions, quotas, and limitations</a> in the <i>Amazon GameLift Streams Developer Guide</i>.</p>
    pub fn location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A location's name. For example, <code>us-east-1</code>. For a complete list of locations that Amazon GameLift Streams supports, refer to <a href="https://docs.aws.amazon.com/gameliftstreams/latest/developerguide/regions-quotas.html">Regions, quotas, and limitations</a> in the <i>Amazon GameLift Streams Developer Guide</i>.</p>
    pub fn set_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>A location's name. For example, <code>us-east-1</code>. For a complete list of locations that Amazon GameLift Streams supports, refer to <a href="https://docs.aws.amazon.com/gameliftstreams/latest/developerguide/regions-quotas.html">Regions, quotas, and limitations</a> in the <i>Amazon GameLift Streams Developer Guide</i>.</p>
    pub fn get_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.location
    }
    /// <p>The current status of the replication process.</p>
    pub fn status(mut self, input: crate::types::ReplicationStatusType) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the replication process.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ReplicationStatusType>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the replication process.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ReplicationStatusType> {
        &self.status
    }
    /// Consumes the builder and constructs a [`ReplicationStatus`](crate::types::ReplicationStatus).
    pub fn build(self) -> crate::types::ReplicationStatus {
        crate::types::ReplicationStatus {
            location: self.location,
            status: self.status,
        }
    }
}
