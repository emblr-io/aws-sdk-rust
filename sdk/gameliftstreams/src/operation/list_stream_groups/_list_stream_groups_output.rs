// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListStreamGroupsOutput {
    /// <p>A collection of Amazon GameLift Streams stream groups that are associated with the Amazon Web Services account in use. Each item includes stream group metadata and status, but doesn't include capacity information.</p>
    pub items: ::std::option::Option<::std::vec::Vec<crate::types::StreamGroupSummary>>,
    /// <p>A token that marks the start of the next sequential page of results. If an operation doesn't return a token, you've reached the end of the list.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListStreamGroupsOutput {
    /// <p>A collection of Amazon GameLift Streams stream groups that are associated with the Amazon Web Services account in use. Each item includes stream group metadata and status, but doesn't include capacity information.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.items.is_none()`.
    pub fn items(&self) -> &[crate::types::StreamGroupSummary] {
        self.items.as_deref().unwrap_or_default()
    }
    /// <p>A token that marks the start of the next sequential page of results. If an operation doesn't return a token, you've reached the end of the list.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListStreamGroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListStreamGroupsOutput {
    /// Creates a new builder-style object to manufacture [`ListStreamGroupsOutput`](crate::operation::list_stream_groups::ListStreamGroupsOutput).
    pub fn builder() -> crate::operation::list_stream_groups::builders::ListStreamGroupsOutputBuilder {
        crate::operation::list_stream_groups::builders::ListStreamGroupsOutputBuilder::default()
    }
}

/// A builder for [`ListStreamGroupsOutput`](crate::operation::list_stream_groups::ListStreamGroupsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListStreamGroupsOutputBuilder {
    pub(crate) items: ::std::option::Option<::std::vec::Vec<crate::types::StreamGroupSummary>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListStreamGroupsOutputBuilder {
    /// Appends an item to `items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    /// <p>A collection of Amazon GameLift Streams stream groups that are associated with the Amazon Web Services account in use. Each item includes stream group metadata and status, but doesn't include capacity information.</p>
    pub fn items(mut self, input: crate::types::StreamGroupSummary) -> Self {
        let mut v = self.items.unwrap_or_default();
        v.push(input);
        self.items = ::std::option::Option::Some(v);
        self
    }
    /// <p>A collection of Amazon GameLift Streams stream groups that are associated with the Amazon Web Services account in use. Each item includes stream group metadata and status, but doesn't include capacity information.</p>
    pub fn set_items(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StreamGroupSummary>>) -> Self {
        self.items = input;
        self
    }
    /// <p>A collection of Amazon GameLift Streams stream groups that are associated with the Amazon Web Services account in use. Each item includes stream group metadata and status, but doesn't include capacity information.</p>
    pub fn get_items(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StreamGroupSummary>> {
        &self.items
    }
    /// <p>A token that marks the start of the next sequential page of results. If an operation doesn't return a token, you've reached the end of the list.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that marks the start of the next sequential page of results. If an operation doesn't return a token, you've reached the end of the list.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token that marks the start of the next sequential page of results. If an operation doesn't return a token, you've reached the end of the list.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListStreamGroupsOutput`](crate::operation::list_stream_groups::ListStreamGroupsOutput).
    pub fn build(self) -> crate::operation::list_stream_groups::ListStreamGroupsOutput {
        crate::operation::list_stream_groups::ListStreamGroupsOutput {
            items: self.items,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
