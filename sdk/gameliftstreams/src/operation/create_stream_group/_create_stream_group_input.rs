// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateStreamGroupInput {
    /// <p>A descriptive label for the stream group.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The target stream quality for sessions that are hosted in this stream group. Set a stream class that is appropriate to the type of content that you're streaming. Stream class determines the type of computing resources Amazon GameLift Streams uses and impacts the cost of streaming. The following options are available:</p>
    /// <p>A stream class can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><b> <code>gen5n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 12 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_ultra</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Uses dedicated NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 8 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_ultra</code> (NVIDIA, ultra)</b> Supports applications with high 3D scene complexity. Uses dedicated NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// </ul>
    pub stream_class: ::std::option::Option<crate::types::StreamClass>,
    /// <p>The unique identifier of the Amazon GameLift Streams application that you want to associate to a stream group as the default application. The application must be in <code>READY</code> status. By setting the default application identifier, you will optimize startup performance of this application in your stream group. Once set, this application cannot be disassociated from the stream group, unlike applications that are associated using AssociateApplications. If not set when creating a stream group, you will need to call AssociateApplications later, before you can start streaming.</p>
    /// <p>This value is an <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> or ID that uniquely identifies the application resource. Example ARN: <code>arn:aws:gameliftstreams:us-west-2:111122223333:application/a-9ZY8X7Wv6</code>. Example ID: <code>a-9ZY8X7Wv6</code>.</p>
    pub default_application_identifier: ::std::option::Option<::std::string::String>,
    /// <p>A set of one or more locations and the streaming capacity for each location.</p>
    pub location_configurations: ::std::option::Option<::std::vec::Vec<crate::types::LocationConfiguration>>,
    /// <p>A list of labels to assign to the new stream group resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources is useful for resource management, access management and cost allocation. See <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging Amazon Web Services Resources</a> in the <i>Amazon Web Services General Reference</i>. You can use <a href="https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_TagResource.html">TagResource</a> to add tags, <a href="https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_UntagResource.html">UntagResource</a> to remove tags, and <a href="https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_ListTagsForResource.html">ListTagsForResource</a> to view tags on existing resources.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>A unique identifier that represents a client request. The request is idempotent, which ensures that an API request completes only once. When users send a request, Amazon GameLift Streams automatically populates this field.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateStreamGroupInput {
    /// <p>A descriptive label for the stream group.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The target stream quality for sessions that are hosted in this stream group. Set a stream class that is appropriate to the type of content that you're streaming. Stream class determines the type of computing resources Amazon GameLift Streams uses and impacts the cost of streaming. The following options are available:</p>
    /// <p>A stream class can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><b> <code>gen5n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 12 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_ultra</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Uses dedicated NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 8 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_ultra</code> (NVIDIA, ultra)</b> Supports applications with high 3D scene complexity. Uses dedicated NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// </ul>
    pub fn stream_class(&self) -> ::std::option::Option<&crate::types::StreamClass> {
        self.stream_class.as_ref()
    }
    /// <p>The unique identifier of the Amazon GameLift Streams application that you want to associate to a stream group as the default application. The application must be in <code>READY</code> status. By setting the default application identifier, you will optimize startup performance of this application in your stream group. Once set, this application cannot be disassociated from the stream group, unlike applications that are associated using AssociateApplications. If not set when creating a stream group, you will need to call AssociateApplications later, before you can start streaming.</p>
    /// <p>This value is an <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> or ID that uniquely identifies the application resource. Example ARN: <code>arn:aws:gameliftstreams:us-west-2:111122223333:application/a-9ZY8X7Wv6</code>. Example ID: <code>a-9ZY8X7Wv6</code>.</p>
    pub fn default_application_identifier(&self) -> ::std::option::Option<&str> {
        self.default_application_identifier.as_deref()
    }
    /// <p>A set of one or more locations and the streaming capacity for each location.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.location_configurations.is_none()`.
    pub fn location_configurations(&self) -> &[crate::types::LocationConfiguration] {
        self.location_configurations.as_deref().unwrap_or_default()
    }
    /// <p>A list of labels to assign to the new stream group resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources is useful for resource management, access management and cost allocation. See <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging Amazon Web Services Resources</a> in the <i>Amazon Web Services General Reference</i>. You can use <a href="https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_TagResource.html">TagResource</a> to add tags, <a href="https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_UntagResource.html">UntagResource</a> to remove tags, and <a href="https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_ListTagsForResource.html">ListTagsForResource</a> to view tags on existing resources.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>A unique identifier that represents a client request. The request is idempotent, which ensures that an API request completes only once. When users send a request, Amazon GameLift Streams automatically populates this field.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateStreamGroupInput {
    /// Creates a new builder-style object to manufacture [`CreateStreamGroupInput`](crate::operation::create_stream_group::CreateStreamGroupInput).
    pub fn builder() -> crate::operation::create_stream_group::builders::CreateStreamGroupInputBuilder {
        crate::operation::create_stream_group::builders::CreateStreamGroupInputBuilder::default()
    }
}

/// A builder for [`CreateStreamGroupInput`](crate::operation::create_stream_group::CreateStreamGroupInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateStreamGroupInputBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) stream_class: ::std::option::Option<crate::types::StreamClass>,
    pub(crate) default_application_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) location_configurations: ::std::option::Option<::std::vec::Vec<crate::types::LocationConfiguration>>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateStreamGroupInputBuilder {
    /// <p>A descriptive label for the stream group.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A descriptive label for the stream group.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A descriptive label for the stream group.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The target stream quality for sessions that are hosted in this stream group. Set a stream class that is appropriate to the type of content that you're streaming. Stream class determines the type of computing resources Amazon GameLift Streams uses and impacts the cost of streaming. The following options are available:</p>
    /// <p>A stream class can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><b> <code>gen5n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 12 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_ultra</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Uses dedicated NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 8 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_ultra</code> (NVIDIA, ultra)</b> Supports applications with high 3D scene complexity. Uses dedicated NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// </ul>
    /// This field is required.
    pub fn stream_class(mut self, input: crate::types::StreamClass) -> Self {
        self.stream_class = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target stream quality for sessions that are hosted in this stream group. Set a stream class that is appropriate to the type of content that you're streaming. Stream class determines the type of computing resources Amazon GameLift Streams uses and impacts the cost of streaming. The following options are available:</p>
    /// <p>A stream class can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><b> <code>gen5n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 12 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_ultra</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Uses dedicated NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 8 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_ultra</code> (NVIDIA, ultra)</b> Supports applications with high 3D scene complexity. Uses dedicated NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// </ul>
    pub fn set_stream_class(mut self, input: ::std::option::Option<crate::types::StreamClass>) -> Self {
        self.stream_class = input;
        self
    }
    /// <p>The target stream quality for sessions that are hosted in this stream group. Set a stream class that is appropriate to the type of content that you're streaming. Stream class determines the type of computing resources Amazon GameLift Streams uses and impacts the cost of streaming. The following options are available:</p>
    /// <p>A stream class can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><b> <code>gen5n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 12 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen5n_ultra</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Uses dedicated NVIDIA A10G Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_win2022</code> (NVIDIA, ultra)</b> Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_high</code> (NVIDIA, high)</b> Supports applications with moderate to high 3D scene complexity. Uses NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 4 vCPUs, 16 GB RAM, 8 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports up to 2 concurrent stream sessions</p></li>
    /// </ul></li>
    /// <li>
    /// <p><b> <code>gen4n_ultra</code> (NVIDIA, ultra)</b> Supports applications with high 3D scene complexity. Uses dedicated NVIDIA T4 Tensor GPU.</p>
    /// <ul>
    /// <li>
    /// <p>Reference resolution: 1080p</p></li>
    /// <li>
    /// <p>Reference frame rate: 60 fps</p></li>
    /// <li>
    /// <p>Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM</p></li>
    /// <li>
    /// <p>Tenancy: Supports 1 concurrent stream session</p></li>
    /// </ul></li>
    /// </ul>
    pub fn get_stream_class(&self) -> &::std::option::Option<crate::types::StreamClass> {
        &self.stream_class
    }
    /// <p>The unique identifier of the Amazon GameLift Streams application that you want to associate to a stream group as the default application. The application must be in <code>READY</code> status. By setting the default application identifier, you will optimize startup performance of this application in your stream group. Once set, this application cannot be disassociated from the stream group, unlike applications that are associated using AssociateApplications. If not set when creating a stream group, you will need to call AssociateApplications later, before you can start streaming.</p>
    /// <p>This value is an <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> or ID that uniquely identifies the application resource. Example ARN: <code>arn:aws:gameliftstreams:us-west-2:111122223333:application/a-9ZY8X7Wv6</code>. Example ID: <code>a-9ZY8X7Wv6</code>.</p>
    pub fn default_application_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_application_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Amazon GameLift Streams application that you want to associate to a stream group as the default application. The application must be in <code>READY</code> status. By setting the default application identifier, you will optimize startup performance of this application in your stream group. Once set, this application cannot be disassociated from the stream group, unlike applications that are associated using AssociateApplications. If not set when creating a stream group, you will need to call AssociateApplications later, before you can start streaming.</p>
    /// <p>This value is an <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> or ID that uniquely identifies the application resource. Example ARN: <code>arn:aws:gameliftstreams:us-west-2:111122223333:application/a-9ZY8X7Wv6</code>. Example ID: <code>a-9ZY8X7Wv6</code>.</p>
    pub fn set_default_application_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_application_identifier = input;
        self
    }
    /// <p>The unique identifier of the Amazon GameLift Streams application that you want to associate to a stream group as the default application. The application must be in <code>READY</code> status. By setting the default application identifier, you will optimize startup performance of this application in your stream group. Once set, this application cannot be disassociated from the stream group, unlike applications that are associated using AssociateApplications. If not set when creating a stream group, you will need to call AssociateApplications later, before you can start streaming.</p>
    /// <p>This value is an <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">Amazon Resource Name (ARN)</a> or ID that uniquely identifies the application resource. Example ARN: <code>arn:aws:gameliftstreams:us-west-2:111122223333:application/a-9ZY8X7Wv6</code>. Example ID: <code>a-9ZY8X7Wv6</code>.</p>
    pub fn get_default_application_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_application_identifier
    }
    /// Appends an item to `location_configurations`.
    ///
    /// To override the contents of this collection use [`set_location_configurations`](Self::set_location_configurations).
    ///
    /// <p>A set of one or more locations and the streaming capacity for each location.</p>
    pub fn location_configurations(mut self, input: crate::types::LocationConfiguration) -> Self {
        let mut v = self.location_configurations.unwrap_or_default();
        v.push(input);
        self.location_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A set of one or more locations and the streaming capacity for each location.</p>
    pub fn set_location_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LocationConfiguration>>) -> Self {
        self.location_configurations = input;
        self
    }
    /// <p>A set of one or more locations and the streaming capacity for each location.</p>
    pub fn get_location_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LocationConfiguration>> {
        &self.location_configurations
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of labels to assign to the new stream group resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources is useful for resource management, access management and cost allocation. See <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging Amazon Web Services Resources</a> in the <i>Amazon Web Services General Reference</i>. You can use <a href="https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_TagResource.html">TagResource</a> to add tags, <a href="https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_UntagResource.html">UntagResource</a> to remove tags, and <a href="https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_ListTagsForResource.html">ListTagsForResource</a> to view tags on existing resources.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A list of labels to assign to the new stream group resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources is useful for resource management, access management and cost allocation. See <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging Amazon Web Services Resources</a> in the <i>Amazon Web Services General Reference</i>. You can use <a href="https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_TagResource.html">TagResource</a> to add tags, <a href="https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_UntagResource.html">UntagResource</a> to remove tags, and <a href="https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_ListTagsForResource.html">ListTagsForResource</a> to view tags on existing resources.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of labels to assign to the new stream group resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources is useful for resource management, access management and cost allocation. See <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"> Tagging Amazon Web Services Resources</a> in the <i>Amazon Web Services General Reference</i>. You can use <a href="https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_TagResource.html">TagResource</a> to add tags, <a href="https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_UntagResource.html">UntagResource</a> to remove tags, and <a href="https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_ListTagsForResource.html">ListTagsForResource</a> to view tags on existing resources.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>A unique identifier that represents a client request. The request is idempotent, which ensures that an API request completes only once. When users send a request, Amazon GameLift Streams automatically populates this field.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier that represents a client request. The request is idempotent, which ensures that an API request completes only once. When users send a request, Amazon GameLift Streams automatically populates this field.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique identifier that represents a client request. The request is idempotent, which ensures that an API request completes only once. When users send a request, Amazon GameLift Streams automatically populates this field.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateStreamGroupInput`](crate::operation::create_stream_group::CreateStreamGroupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_stream_group::CreateStreamGroupInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_stream_group::CreateStreamGroupInput {
            description: self.description,
            stream_class: self.stream_class,
            default_application_identifier: self.default_application_identifier,
            location_configurations: self.location_configurations,
            tags: self.tags,
            client_token: self.client_token,
        })
    }
}
