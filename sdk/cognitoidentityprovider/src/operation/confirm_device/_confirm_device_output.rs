// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The confirm-device response.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfirmDeviceOutput {
    /// <p>When <code>true</code>, your user must confirm that they want to remember the device. Prompt the user for an answer.</p>
    /// <p>When <code>false</code>, immediately sets the device as remembered and eligible for device authentication.</p>
    /// <p>You can configure your user pool to always remember devices, in which case this response is <code>false</code>, or to allow users to opt in, in which case this response is <code>true</code>. Configure this option under <i>Device tracking</i> in the <i>Sign-in</i> menu of your user pool.</p>
    pub user_confirmation_necessary: bool,
    _request_id: Option<String>,
}
impl ConfirmDeviceOutput {
    /// <p>When <code>true</code>, your user must confirm that they want to remember the device. Prompt the user for an answer.</p>
    /// <p>When <code>false</code>, immediately sets the device as remembered and eligible for device authentication.</p>
    /// <p>You can configure your user pool to always remember devices, in which case this response is <code>false</code>, or to allow users to opt in, in which case this response is <code>true</code>. Configure this option under <i>Device tracking</i> in the <i>Sign-in</i> menu of your user pool.</p>
    pub fn user_confirmation_necessary(&self) -> bool {
        self.user_confirmation_necessary
    }
}
impl ::aws_types::request_id::RequestId for ConfirmDeviceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ConfirmDeviceOutput {
    /// Creates a new builder-style object to manufacture [`ConfirmDeviceOutput`](crate::operation::confirm_device::ConfirmDeviceOutput).
    pub fn builder() -> crate::operation::confirm_device::builders::ConfirmDeviceOutputBuilder {
        crate::operation::confirm_device::builders::ConfirmDeviceOutputBuilder::default()
    }
}

/// A builder for [`ConfirmDeviceOutput`](crate::operation::confirm_device::ConfirmDeviceOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConfirmDeviceOutputBuilder {
    pub(crate) user_confirmation_necessary: ::std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ConfirmDeviceOutputBuilder {
    /// <p>When <code>true</code>, your user must confirm that they want to remember the device. Prompt the user for an answer.</p>
    /// <p>When <code>false</code>, immediately sets the device as remembered and eligible for device authentication.</p>
    /// <p>You can configure your user pool to always remember devices, in which case this response is <code>false</code>, or to allow users to opt in, in which case this response is <code>true</code>. Configure this option under <i>Device tracking</i> in the <i>Sign-in</i> menu of your user pool.</p>
    pub fn user_confirmation_necessary(mut self, input: bool) -> Self {
        self.user_confirmation_necessary = ::std::option::Option::Some(input);
        self
    }
    /// <p>When <code>true</code>, your user must confirm that they want to remember the device. Prompt the user for an answer.</p>
    /// <p>When <code>false</code>, immediately sets the device as remembered and eligible for device authentication.</p>
    /// <p>You can configure your user pool to always remember devices, in which case this response is <code>false</code>, or to allow users to opt in, in which case this response is <code>true</code>. Configure this option under <i>Device tracking</i> in the <i>Sign-in</i> menu of your user pool.</p>
    pub fn set_user_confirmation_necessary(mut self, input: ::std::option::Option<bool>) -> Self {
        self.user_confirmation_necessary = input;
        self
    }
    /// <p>When <code>true</code>, your user must confirm that they want to remember the device. Prompt the user for an answer.</p>
    /// <p>When <code>false</code>, immediately sets the device as remembered and eligible for device authentication.</p>
    /// <p>You can configure your user pool to always remember devices, in which case this response is <code>false</code>, or to allow users to opt in, in which case this response is <code>true</code>. Configure this option under <i>Device tracking</i> in the <i>Sign-in</i> menu of your user pool.</p>
    pub fn get_user_confirmation_necessary(&self) -> &::std::option::Option<bool> {
        &self.user_confirmation_necessary
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ConfirmDeviceOutput`](crate::operation::confirm_device::ConfirmDeviceOutput).
    pub fn build(self) -> crate::operation::confirm_device::ConfirmDeviceOutput {
        crate::operation::confirm_device::ConfirmDeviceOutput {
            user_confirmation_necessary: self.user_confirmation_necessary.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
