// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateUserPoolDomainOutput {
    /// <p>The version of managed login branding applied your domain. A value of <code>1</code> indicates hosted UI (classic) and a version of <code>2</code> indicates managed login.</p>
    pub managed_login_version: ::std::option::Option<i32>,
    /// <p>The fully-qualified domain name (FQDN) of the Amazon CloudFront distribution that hosts your managed login or classic hosted UI pages. Your domain-name authority must have an alias record that points requests for your custom domain to this FQDN. Amazon Cognito returns this value if you set a custom domain with <code>CustomDomainConfig</code>. If you set an Amazon Cognito prefix domain, this parameter returns null.</p>
    pub cloud_front_domain: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateUserPoolDomainOutput {
    /// <p>The version of managed login branding applied your domain. A value of <code>1</code> indicates hosted UI (classic) and a version of <code>2</code> indicates managed login.</p>
    pub fn managed_login_version(&self) -> ::std::option::Option<i32> {
        self.managed_login_version
    }
    /// <p>The fully-qualified domain name (FQDN) of the Amazon CloudFront distribution that hosts your managed login or classic hosted UI pages. Your domain-name authority must have an alias record that points requests for your custom domain to this FQDN. Amazon Cognito returns this value if you set a custom domain with <code>CustomDomainConfig</code>. If you set an Amazon Cognito prefix domain, this parameter returns null.</p>
    pub fn cloud_front_domain(&self) -> ::std::option::Option<&str> {
        self.cloud_front_domain.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for CreateUserPoolDomainOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateUserPoolDomainOutput {
    /// Creates a new builder-style object to manufacture [`CreateUserPoolDomainOutput`](crate::operation::create_user_pool_domain::CreateUserPoolDomainOutput).
    pub fn builder() -> crate::operation::create_user_pool_domain::builders::CreateUserPoolDomainOutputBuilder {
        crate::operation::create_user_pool_domain::builders::CreateUserPoolDomainOutputBuilder::default()
    }
}

/// A builder for [`CreateUserPoolDomainOutput`](crate::operation::create_user_pool_domain::CreateUserPoolDomainOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateUserPoolDomainOutputBuilder {
    pub(crate) managed_login_version: ::std::option::Option<i32>,
    pub(crate) cloud_front_domain: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateUserPoolDomainOutputBuilder {
    /// <p>The version of managed login branding applied your domain. A value of <code>1</code> indicates hosted UI (classic) and a version of <code>2</code> indicates managed login.</p>
    pub fn managed_login_version(mut self, input: i32) -> Self {
        self.managed_login_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version of managed login branding applied your domain. A value of <code>1</code> indicates hosted UI (classic) and a version of <code>2</code> indicates managed login.</p>
    pub fn set_managed_login_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.managed_login_version = input;
        self
    }
    /// <p>The version of managed login branding applied your domain. A value of <code>1</code> indicates hosted UI (classic) and a version of <code>2</code> indicates managed login.</p>
    pub fn get_managed_login_version(&self) -> &::std::option::Option<i32> {
        &self.managed_login_version
    }
    /// <p>The fully-qualified domain name (FQDN) of the Amazon CloudFront distribution that hosts your managed login or classic hosted UI pages. Your domain-name authority must have an alias record that points requests for your custom domain to this FQDN. Amazon Cognito returns this value if you set a custom domain with <code>CustomDomainConfig</code>. If you set an Amazon Cognito prefix domain, this parameter returns null.</p>
    pub fn cloud_front_domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloud_front_domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The fully-qualified domain name (FQDN) of the Amazon CloudFront distribution that hosts your managed login or classic hosted UI pages. Your domain-name authority must have an alias record that points requests for your custom domain to this FQDN. Amazon Cognito returns this value if you set a custom domain with <code>CustomDomainConfig</code>. If you set an Amazon Cognito prefix domain, this parameter returns null.</p>
    pub fn set_cloud_front_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloud_front_domain = input;
        self
    }
    /// <p>The fully-qualified domain name (FQDN) of the Amazon CloudFront distribution that hosts your managed login or classic hosted UI pages. Your domain-name authority must have an alias record that points requests for your custom domain to this FQDN. Amazon Cognito returns this value if you set a custom domain with <code>CustomDomainConfig</code>. If you set an Amazon Cognito prefix domain, this parameter returns null.</p>
    pub fn get_cloud_front_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloud_front_domain
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateUserPoolDomainOutput`](crate::operation::create_user_pool_domain::CreateUserPoolDomainOutput).
    pub fn build(self) -> crate::operation::create_user_pool_domain::CreateUserPoolDomainOutput {
        crate::operation::create_user_pool_domain::CreateUserPoolDomainOutput {
            managed_login_version: self.managed_login_version,
            cloud_front_domain: self.cloud_front_domain,
            _request_id: self._request_id,
        }
    }
}
