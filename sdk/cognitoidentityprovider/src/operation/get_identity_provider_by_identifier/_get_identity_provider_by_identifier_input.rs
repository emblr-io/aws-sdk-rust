// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetIdentityProviderByIdentifierInput {
    /// <p>The ID of the user pool where you want to get information about the IdP.</p>
    pub user_pool_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier that you assigned to your user pool. The identifier is an alternative name for an IdP that is distinct from the IdP name. For example, an IdP with a name of <code>MyIdP</code> might have an identifier of the email domain <code>example.com</code>.</p>
    pub idp_identifier: ::std::option::Option<::std::string::String>,
}
impl GetIdentityProviderByIdentifierInput {
    /// <p>The ID of the user pool where you want to get information about the IdP.</p>
    pub fn user_pool_id(&self) -> ::std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The identifier that you assigned to your user pool. The identifier is an alternative name for an IdP that is distinct from the IdP name. For example, an IdP with a name of <code>MyIdP</code> might have an identifier of the email domain <code>example.com</code>.</p>
    pub fn idp_identifier(&self) -> ::std::option::Option<&str> {
        self.idp_identifier.as_deref()
    }
}
impl GetIdentityProviderByIdentifierInput {
    /// Creates a new builder-style object to manufacture [`GetIdentityProviderByIdentifierInput`](crate::operation::get_identity_provider_by_identifier::GetIdentityProviderByIdentifierInput).
    pub fn builder() -> crate::operation::get_identity_provider_by_identifier::builders::GetIdentityProviderByIdentifierInputBuilder {
        crate::operation::get_identity_provider_by_identifier::builders::GetIdentityProviderByIdentifierInputBuilder::default()
    }
}

/// A builder for [`GetIdentityProviderByIdentifierInput`](crate::operation::get_identity_provider_by_identifier::GetIdentityProviderByIdentifierInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetIdentityProviderByIdentifierInputBuilder {
    pub(crate) user_pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) idp_identifier: ::std::option::Option<::std::string::String>,
}
impl GetIdentityProviderByIdentifierInputBuilder {
    /// <p>The ID of the user pool where you want to get information about the IdP.</p>
    /// This field is required.
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the user pool where you want to get information about the IdP.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The ID of the user pool where you want to get information about the IdP.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_pool_id
    }
    /// <p>The identifier that you assigned to your user pool. The identifier is an alternative name for an IdP that is distinct from the IdP name. For example, an IdP with a name of <code>MyIdP</code> might have an identifier of the email domain <code>example.com</code>.</p>
    /// This field is required.
    pub fn idp_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.idp_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier that you assigned to your user pool. The identifier is an alternative name for an IdP that is distinct from the IdP name. For example, an IdP with a name of <code>MyIdP</code> might have an identifier of the email domain <code>example.com</code>.</p>
    pub fn set_idp_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.idp_identifier = input;
        self
    }
    /// <p>The identifier that you assigned to your user pool. The identifier is an alternative name for an IdP that is distinct from the IdP name. For example, an IdP with a name of <code>MyIdP</code> might have an identifier of the email domain <code>example.com</code>.</p>
    pub fn get_idp_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.idp_identifier
    }
    /// Consumes the builder and constructs a [`GetIdentityProviderByIdentifierInput`](crate::operation::get_identity_provider_by_identifier::GetIdentityProviderByIdentifierInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_identity_provider_by_identifier::GetIdentityProviderByIdentifierInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::get_identity_provider_by_identifier::GetIdentityProviderByIdentifierInput {
                user_pool_id: self.user_pool_id,
                idp_identifier: self.idp_identifier,
            },
        )
    }
}
