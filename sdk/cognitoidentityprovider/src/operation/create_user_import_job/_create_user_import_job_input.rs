// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the request to create the user import job.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateUserImportJobInput {
    /// <p>A friendly name for the user import job.</p>
    pub job_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the user pool that you want to import users into.</p>
    pub user_pool_id: ::std::option::Option<::std::string::String>,
    /// <p>You must specify an IAM role that has permission to log import-job results to Amazon CloudWatch Logs. This parameter is the ARN of that role.</p>
    pub cloud_watch_logs_role_arn: ::std::option::Option<::std::string::String>,
}
impl CreateUserImportJobInput {
    /// <p>A friendly name for the user import job.</p>
    pub fn job_name(&self) -> ::std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>The ID of the user pool that you want to import users into.</p>
    pub fn user_pool_id(&self) -> ::std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>You must specify an IAM role that has permission to log import-job results to Amazon CloudWatch Logs. This parameter is the ARN of that role.</p>
    pub fn cloud_watch_logs_role_arn(&self) -> ::std::option::Option<&str> {
        self.cloud_watch_logs_role_arn.as_deref()
    }
}
impl CreateUserImportJobInput {
    /// Creates a new builder-style object to manufacture [`CreateUserImportJobInput`](crate::operation::create_user_import_job::CreateUserImportJobInput).
    pub fn builder() -> crate::operation::create_user_import_job::builders::CreateUserImportJobInputBuilder {
        crate::operation::create_user_import_job::builders::CreateUserImportJobInputBuilder::default()
    }
}

/// A builder for [`CreateUserImportJobInput`](crate::operation::create_user_import_job::CreateUserImportJobInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateUserImportJobInputBuilder {
    pub(crate) job_name: ::std::option::Option<::std::string::String>,
    pub(crate) user_pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) cloud_watch_logs_role_arn: ::std::option::Option<::std::string::String>,
}
impl CreateUserImportJobInputBuilder {
    /// <p>A friendly name for the user import job.</p>
    /// This field is required.
    pub fn job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A friendly name for the user import job.</p>
    pub fn set_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>A friendly name for the user import job.</p>
    pub fn get_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_name
    }
    /// <p>The ID of the user pool that you want to import users into.</p>
    /// This field is required.
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the user pool that you want to import users into.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The ID of the user pool that you want to import users into.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_pool_id
    }
    /// <p>You must specify an IAM role that has permission to log import-job results to Amazon CloudWatch Logs. This parameter is the ARN of that role.</p>
    /// This field is required.
    pub fn cloud_watch_logs_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloud_watch_logs_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>You must specify an IAM role that has permission to log import-job results to Amazon CloudWatch Logs. This parameter is the ARN of that role.</p>
    pub fn set_cloud_watch_logs_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloud_watch_logs_role_arn = input;
        self
    }
    /// <p>You must specify an IAM role that has permission to log import-job results to Amazon CloudWatch Logs. This parameter is the ARN of that role.</p>
    pub fn get_cloud_watch_logs_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloud_watch_logs_role_arn
    }
    /// Consumes the builder and constructs a [`CreateUserImportJobInput`](crate::operation::create_user_import_job::CreateUserImportJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_user_import_job::CreateUserImportJobInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_user_import_job::CreateUserImportJobInput {
            job_name: self.job_name,
            user_pool_id: self.user_pool_id,
            cloud_watch_logs_role_arn: self.cloud_watch_logs_role_arn,
        })
    }
}
