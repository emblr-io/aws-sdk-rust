// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetUserAuthFactorsOutput {
    /// <p>The name of the user who is eligible for the authentication factors in the response.</p>
    pub username: ::std::string::String,
    /// <p>The challenge method that Amazon Cognito returns to the user in response to sign-in requests. Users can prefer SMS message, email message, or TOTP MFA.</p>
    pub preferred_mfa_setting: ::std::option::Option<::std::string::String>,
    /// <p>The MFA options that are activated for the user. The possible values in this list are <code>SMS_MFA</code>, <code>EMAIL_OTP</code>, and <code>SOFTWARE_TOKEN_MFA</code>.</p>
    pub user_mfa_setting_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The authentication types that are available to the user with <code>USER_AUTH</code> sign-in, for example <code>\["PASSWORD", "WEB_AUTHN"\]</code>.</p>
    pub configured_user_auth_factors: ::std::option::Option<::std::vec::Vec<crate::types::AuthFactorType>>,
    _request_id: Option<String>,
}
impl GetUserAuthFactorsOutput {
    /// <p>The name of the user who is eligible for the authentication factors in the response.</p>
    pub fn username(&self) -> &str {
        use std::ops::Deref;
        self.username.deref()
    }
    /// <p>The challenge method that Amazon Cognito returns to the user in response to sign-in requests. Users can prefer SMS message, email message, or TOTP MFA.</p>
    pub fn preferred_mfa_setting(&self) -> ::std::option::Option<&str> {
        self.preferred_mfa_setting.as_deref()
    }
    /// <p>The MFA options that are activated for the user. The possible values in this list are <code>SMS_MFA</code>, <code>EMAIL_OTP</code>, and <code>SOFTWARE_TOKEN_MFA</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_mfa_setting_list.is_none()`.
    pub fn user_mfa_setting_list(&self) -> &[::std::string::String] {
        self.user_mfa_setting_list.as_deref().unwrap_or_default()
    }
    /// <p>The authentication types that are available to the user with <code>USER_AUTH</code> sign-in, for example <code>\["PASSWORD", "WEB_AUTHN"\]</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.configured_user_auth_factors.is_none()`.
    pub fn configured_user_auth_factors(&self) -> &[crate::types::AuthFactorType] {
        self.configured_user_auth_factors.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for GetUserAuthFactorsOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetUserAuthFactorsOutput");
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("preferred_mfa_setting", &self.preferred_mfa_setting);
        formatter.field("user_mfa_setting_list", &self.user_mfa_setting_list);
        formatter.field("configured_user_auth_factors", &self.configured_user_auth_factors);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetUserAuthFactorsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetUserAuthFactorsOutput {
    /// Creates a new builder-style object to manufacture [`GetUserAuthFactorsOutput`](crate::operation::get_user_auth_factors::GetUserAuthFactorsOutput).
    pub fn builder() -> crate::operation::get_user_auth_factors::builders::GetUserAuthFactorsOutputBuilder {
        crate::operation::get_user_auth_factors::builders::GetUserAuthFactorsOutputBuilder::default()
    }
}

/// A builder for [`GetUserAuthFactorsOutput`](crate::operation::get_user_auth_factors::GetUserAuthFactorsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetUserAuthFactorsOutputBuilder {
    pub(crate) username: ::std::option::Option<::std::string::String>,
    pub(crate) preferred_mfa_setting: ::std::option::Option<::std::string::String>,
    pub(crate) user_mfa_setting_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) configured_user_auth_factors: ::std::option::Option<::std::vec::Vec<crate::types::AuthFactorType>>,
    _request_id: Option<String>,
}
impl GetUserAuthFactorsOutputBuilder {
    /// <p>The name of the user who is eligible for the authentication factors in the response.</p>
    /// This field is required.
    pub fn username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the user who is eligible for the authentication factors in the response.</p>
    pub fn set_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p>The name of the user who is eligible for the authentication factors in the response.</p>
    pub fn get_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.username
    }
    /// <p>The challenge method that Amazon Cognito returns to the user in response to sign-in requests. Users can prefer SMS message, email message, or TOTP MFA.</p>
    pub fn preferred_mfa_setting(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.preferred_mfa_setting = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The challenge method that Amazon Cognito returns to the user in response to sign-in requests. Users can prefer SMS message, email message, or TOTP MFA.</p>
    pub fn set_preferred_mfa_setting(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.preferred_mfa_setting = input;
        self
    }
    /// <p>The challenge method that Amazon Cognito returns to the user in response to sign-in requests. Users can prefer SMS message, email message, or TOTP MFA.</p>
    pub fn get_preferred_mfa_setting(&self) -> &::std::option::Option<::std::string::String> {
        &self.preferred_mfa_setting
    }
    /// Appends an item to `user_mfa_setting_list`.
    ///
    /// To override the contents of this collection use [`set_user_mfa_setting_list`](Self::set_user_mfa_setting_list).
    ///
    /// <p>The MFA options that are activated for the user. The possible values in this list are <code>SMS_MFA</code>, <code>EMAIL_OTP</code>, and <code>SOFTWARE_TOKEN_MFA</code>.</p>
    pub fn user_mfa_setting_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.user_mfa_setting_list.unwrap_or_default();
        v.push(input.into());
        self.user_mfa_setting_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The MFA options that are activated for the user. The possible values in this list are <code>SMS_MFA</code>, <code>EMAIL_OTP</code>, and <code>SOFTWARE_TOKEN_MFA</code>.</p>
    pub fn set_user_mfa_setting_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.user_mfa_setting_list = input;
        self
    }
    /// <p>The MFA options that are activated for the user. The possible values in this list are <code>SMS_MFA</code>, <code>EMAIL_OTP</code>, and <code>SOFTWARE_TOKEN_MFA</code>.</p>
    pub fn get_user_mfa_setting_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.user_mfa_setting_list
    }
    /// Appends an item to `configured_user_auth_factors`.
    ///
    /// To override the contents of this collection use [`set_configured_user_auth_factors`](Self::set_configured_user_auth_factors).
    ///
    /// <p>The authentication types that are available to the user with <code>USER_AUTH</code> sign-in, for example <code>\["PASSWORD", "WEB_AUTHN"\]</code>.</p>
    pub fn configured_user_auth_factors(mut self, input: crate::types::AuthFactorType) -> Self {
        let mut v = self.configured_user_auth_factors.unwrap_or_default();
        v.push(input);
        self.configured_user_auth_factors = ::std::option::Option::Some(v);
        self
    }
    /// <p>The authentication types that are available to the user with <code>USER_AUTH</code> sign-in, for example <code>\["PASSWORD", "WEB_AUTHN"\]</code>.</p>
    pub fn set_configured_user_auth_factors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AuthFactorType>>) -> Self {
        self.configured_user_auth_factors = input;
        self
    }
    /// <p>The authentication types that are available to the user with <code>USER_AUTH</code> sign-in, for example <code>\["PASSWORD", "WEB_AUTHN"\]</code>.</p>
    pub fn get_configured_user_auth_factors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AuthFactorType>> {
        &self.configured_user_auth_factors
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetUserAuthFactorsOutput`](crate::operation::get_user_auth_factors::GetUserAuthFactorsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`username`](crate::operation::get_user_auth_factors::builders::GetUserAuthFactorsOutputBuilder::username)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_user_auth_factors::GetUserAuthFactorsOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_user_auth_factors::GetUserAuthFactorsOutput {
            username: self.username.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "username",
                    "username was not specified but it is required when building GetUserAuthFactorsOutput",
                )
            })?,
            preferred_mfa_setting: self.preferred_mfa_setting,
            user_mfa_setting_list: self.user_mfa_setting_list,
            configured_user_auth_factors: self.configured_user_auth_factors,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetUserAuthFactorsOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetUserAuthFactorsOutputBuilder");
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("preferred_mfa_setting", &self.preferred_mfa_setting);
        formatter.field("user_mfa_setting_list", &self.user_mfa_setting_list);
        formatter.field("configured_user_auth_factors", &self.configured_user_auth_factors);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
