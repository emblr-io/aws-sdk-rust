// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The request to update the device status, as an administrator.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AdminUpdateDeviceStatusInput {
    /// <p>The ID of the user pool where you want to change a user's device status.</p>
    pub user_pool_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If <code>username</code> isn't an alias attribute in your user pool, this value must be the <code>sub</code> of a local user or the username of a user from a third-party IdP.</p>
    pub username: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier, or device key, of the device that you want to update the status for.</p>
    pub device_key: ::std::option::Option<::std::string::String>,
    /// <p>To enable device authentication with the specified device, set to <code>remembered</code>.To disable, set to <code>not_remembered</code>.</p>
    pub device_remembered_status: ::std::option::Option<crate::types::DeviceRememberedStatusType>,
}
impl AdminUpdateDeviceStatusInput {
    /// <p>The ID of the user pool where you want to change a user's device status.</p>
    pub fn user_pool_id(&self) -> ::std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The name of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If <code>username</code> isn't an alias attribute in your user pool, this value must be the <code>sub</code> of a local user or the username of a user from a third-party IdP.</p>
    pub fn username(&self) -> ::std::option::Option<&str> {
        self.username.as_deref()
    }
    /// <p>The unique identifier, or device key, of the device that you want to update the status for.</p>
    pub fn device_key(&self) -> ::std::option::Option<&str> {
        self.device_key.as_deref()
    }
    /// <p>To enable device authentication with the specified device, set to <code>remembered</code>.To disable, set to <code>not_remembered</code>.</p>
    pub fn device_remembered_status(&self) -> ::std::option::Option<&crate::types::DeviceRememberedStatusType> {
        self.device_remembered_status.as_ref()
    }
}
impl ::std::fmt::Debug for AdminUpdateDeviceStatusInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AdminUpdateDeviceStatusInput");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("device_key", &self.device_key);
        formatter.field("device_remembered_status", &self.device_remembered_status);
        formatter.finish()
    }
}
impl AdminUpdateDeviceStatusInput {
    /// Creates a new builder-style object to manufacture [`AdminUpdateDeviceStatusInput`](crate::operation::admin_update_device_status::AdminUpdateDeviceStatusInput).
    pub fn builder() -> crate::operation::admin_update_device_status::builders::AdminUpdateDeviceStatusInputBuilder {
        crate::operation::admin_update_device_status::builders::AdminUpdateDeviceStatusInputBuilder::default()
    }
}

/// A builder for [`AdminUpdateDeviceStatusInput`](crate::operation::admin_update_device_status::AdminUpdateDeviceStatusInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AdminUpdateDeviceStatusInputBuilder {
    pub(crate) user_pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) username: ::std::option::Option<::std::string::String>,
    pub(crate) device_key: ::std::option::Option<::std::string::String>,
    pub(crate) device_remembered_status: ::std::option::Option<crate::types::DeviceRememberedStatusType>,
}
impl AdminUpdateDeviceStatusInputBuilder {
    /// <p>The ID of the user pool where you want to change a user's device status.</p>
    /// This field is required.
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the user pool where you want to change a user's device status.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The ID of the user pool where you want to change a user's device status.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_pool_id
    }
    /// <p>The name of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If <code>username</code> isn't an alias attribute in your user pool, this value must be the <code>sub</code> of a local user or the username of a user from a third-party IdP.</p>
    /// This field is required.
    pub fn username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If <code>username</code> isn't an alias attribute in your user pool, this value must be the <code>sub</code> of a local user or the username of a user from a third-party IdP.</p>
    pub fn set_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p>The name of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If <code>username</code> isn't an alias attribute in your user pool, this value must be the <code>sub</code> of a local user or the username of a user from a third-party IdP.</p>
    pub fn get_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.username
    }
    /// <p>The unique identifier, or device key, of the device that you want to update the status for.</p>
    /// This field is required.
    pub fn device_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier, or device key, of the device that you want to update the status for.</p>
    pub fn set_device_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_key = input;
        self
    }
    /// <p>The unique identifier, or device key, of the device that you want to update the status for.</p>
    pub fn get_device_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_key
    }
    /// <p>To enable device authentication with the specified device, set to <code>remembered</code>.To disable, set to <code>not_remembered</code>.</p>
    pub fn device_remembered_status(mut self, input: crate::types::DeviceRememberedStatusType) -> Self {
        self.device_remembered_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>To enable device authentication with the specified device, set to <code>remembered</code>.To disable, set to <code>not_remembered</code>.</p>
    pub fn set_device_remembered_status(mut self, input: ::std::option::Option<crate::types::DeviceRememberedStatusType>) -> Self {
        self.device_remembered_status = input;
        self
    }
    /// <p>To enable device authentication with the specified device, set to <code>remembered</code>.To disable, set to <code>not_remembered</code>.</p>
    pub fn get_device_remembered_status(&self) -> &::std::option::Option<crate::types::DeviceRememberedStatusType> {
        &self.device_remembered_status
    }
    /// Consumes the builder and constructs a [`AdminUpdateDeviceStatusInput`](crate::operation::admin_update_device_status::AdminUpdateDeviceStatusInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::admin_update_device_status::AdminUpdateDeviceStatusInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::admin_update_device_status::AdminUpdateDeviceStatusInput {
            user_pool_id: self.user_pool_id,
            username: self.username,
            device_key: self.device_key,
            device_remembered_status: self.device_remembered_status,
        })
    }
}
impl ::std::fmt::Debug for AdminUpdateDeviceStatusInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AdminUpdateDeviceStatusInputBuilder");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("device_key", &self.device_key);
        formatter.field("device_remembered_status", &self.device_remembered_status);
        formatter.finish()
    }
}
