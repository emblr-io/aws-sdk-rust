// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the response from the server for the registration confirmation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ConfirmSignUpOutput {
    /// <p>A session identifier that you can use to immediately sign in the confirmed user. You can automatically sign users in with the one-time password that they provided in a successful <code>ConfirmSignUp</code> request.</p>
    pub session: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ConfirmSignUpOutput {
    /// <p>A session identifier that you can use to immediately sign in the confirmed user. You can automatically sign users in with the one-time password that they provided in a successful <code>ConfirmSignUp</code> request.</p>
    pub fn session(&self) -> ::std::option::Option<&str> {
        self.session.as_deref()
    }
}
impl ::std::fmt::Debug for ConfirmSignUpOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ConfirmSignUpOutput");
        formatter.field("session", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for ConfirmSignUpOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ConfirmSignUpOutput {
    /// Creates a new builder-style object to manufacture [`ConfirmSignUpOutput`](crate::operation::confirm_sign_up::ConfirmSignUpOutput).
    pub fn builder() -> crate::operation::confirm_sign_up::builders::ConfirmSignUpOutputBuilder {
        crate::operation::confirm_sign_up::builders::ConfirmSignUpOutputBuilder::default()
    }
}

/// A builder for [`ConfirmSignUpOutput`](crate::operation::confirm_sign_up::ConfirmSignUpOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ConfirmSignUpOutputBuilder {
    pub(crate) session: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ConfirmSignUpOutputBuilder {
    /// <p>A session identifier that you can use to immediately sign in the confirmed user. You can automatically sign users in with the one-time password that they provided in a successful <code>ConfirmSignUp</code> request.</p>
    pub fn session(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A session identifier that you can use to immediately sign in the confirmed user. You can automatically sign users in with the one-time password that they provided in a successful <code>ConfirmSignUp</code> request.</p>
    pub fn set_session(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session = input;
        self
    }
    /// <p>A session identifier that you can use to immediately sign in the confirmed user. You can automatically sign users in with the one-time password that they provided in a successful <code>ConfirmSignUp</code> request.</p>
    pub fn get_session(&self) -> &::std::option::Option<::std::string::String> {
        &self.session
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ConfirmSignUpOutput`](crate::operation::confirm_sign_up::ConfirmSignUpOutput).
    pub fn build(self) -> crate::operation::confirm_sign_up::ConfirmSignUpOutput {
        crate::operation::confirm_sign_up::ConfirmSignUpOutput {
            session: self.session,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for ConfirmSignUpOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ConfirmSignUpOutputBuilder");
        formatter.field("session", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
