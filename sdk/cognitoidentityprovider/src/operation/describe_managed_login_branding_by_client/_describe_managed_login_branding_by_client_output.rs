// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeManagedLoginBrandingByClientOutput {
    /// <p>The details of the requested branding style.</p>
    pub managed_login_branding: ::std::option::Option<crate::types::ManagedLoginBrandingType>,
    _request_id: Option<String>,
}
impl DescribeManagedLoginBrandingByClientOutput {
    /// <p>The details of the requested branding style.</p>
    pub fn managed_login_branding(&self) -> ::std::option::Option<&crate::types::ManagedLoginBrandingType> {
        self.managed_login_branding.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeManagedLoginBrandingByClientOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeManagedLoginBrandingByClientOutput {
    /// Creates a new builder-style object to manufacture [`DescribeManagedLoginBrandingByClientOutput`](crate::operation::describe_managed_login_branding_by_client::DescribeManagedLoginBrandingByClientOutput).
    pub fn builder() -> crate::operation::describe_managed_login_branding_by_client::builders::DescribeManagedLoginBrandingByClientOutputBuilder {
        crate::operation::describe_managed_login_branding_by_client::builders::DescribeManagedLoginBrandingByClientOutputBuilder::default()
    }
}

/// A builder for [`DescribeManagedLoginBrandingByClientOutput`](crate::operation::describe_managed_login_branding_by_client::DescribeManagedLoginBrandingByClientOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeManagedLoginBrandingByClientOutputBuilder {
    pub(crate) managed_login_branding: ::std::option::Option<crate::types::ManagedLoginBrandingType>,
    _request_id: Option<String>,
}
impl DescribeManagedLoginBrandingByClientOutputBuilder {
    /// <p>The details of the requested branding style.</p>
    pub fn managed_login_branding(mut self, input: crate::types::ManagedLoginBrandingType) -> Self {
        self.managed_login_branding = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the requested branding style.</p>
    pub fn set_managed_login_branding(mut self, input: ::std::option::Option<crate::types::ManagedLoginBrandingType>) -> Self {
        self.managed_login_branding = input;
        self
    }
    /// <p>The details of the requested branding style.</p>
    pub fn get_managed_login_branding(&self) -> &::std::option::Option<crate::types::ManagedLoginBrandingType> {
        &self.managed_login_branding
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeManagedLoginBrandingByClientOutput`](crate::operation::describe_managed_login_branding_by_client::DescribeManagedLoginBrandingByClientOutput).
    pub fn build(self) -> crate::operation::describe_managed_login_branding_by_client::DescribeManagedLoginBrandingByClientOutput {
        crate::operation::describe_managed_login_branding_by_client::DescribeManagedLoginBrandingByClientOutput {
            managed_login_branding: self.managed_login_branding,
            _request_id: self._request_id,
        }
    }
}
