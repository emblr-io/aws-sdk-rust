// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the request to get the device, as an administrator.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AdminGetDeviceInput {
    /// <p>The key of the device that you want to delete.</p>
    pub device_key: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the user pool where the device owner is a user.</p>
    pub user_pool_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If <code>username</code> isn't an alias attribute in your user pool, this value must be the <code>sub</code> of a local user or the username of a user from a third-party IdP.</p>
    pub username: ::std::option::Option<::std::string::String>,
}
impl AdminGetDeviceInput {
    /// <p>The key of the device that you want to delete.</p>
    pub fn device_key(&self) -> ::std::option::Option<&str> {
        self.device_key.as_deref()
    }
    /// <p>The ID of the user pool where the device owner is a user.</p>
    pub fn user_pool_id(&self) -> ::std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The name of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If <code>username</code> isn't an alias attribute in your user pool, this value must be the <code>sub</code> of a local user or the username of a user from a third-party IdP.</p>
    pub fn username(&self) -> ::std::option::Option<&str> {
        self.username.as_deref()
    }
}
impl ::std::fmt::Debug for AdminGetDeviceInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AdminGetDeviceInput");
        formatter.field("device_key", &self.device_key);
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AdminGetDeviceInput {
    /// Creates a new builder-style object to manufacture [`AdminGetDeviceInput`](crate::operation::admin_get_device::AdminGetDeviceInput).
    pub fn builder() -> crate::operation::admin_get_device::builders::AdminGetDeviceInputBuilder {
        crate::operation::admin_get_device::builders::AdminGetDeviceInputBuilder::default()
    }
}

/// A builder for [`AdminGetDeviceInput`](crate::operation::admin_get_device::AdminGetDeviceInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AdminGetDeviceInputBuilder {
    pub(crate) device_key: ::std::option::Option<::std::string::String>,
    pub(crate) user_pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) username: ::std::option::Option<::std::string::String>,
}
impl AdminGetDeviceInputBuilder {
    /// <p>The key of the device that you want to delete.</p>
    /// This field is required.
    pub fn device_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key of the device that you want to delete.</p>
    pub fn set_device_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_key = input;
        self
    }
    /// <p>The key of the device that you want to delete.</p>
    pub fn get_device_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_key
    }
    /// <p>The ID of the user pool where the device owner is a user.</p>
    /// This field is required.
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the user pool where the device owner is a user.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The ID of the user pool where the device owner is a user.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_pool_id
    }
    /// <p>The name of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If <code>username</code> isn't an alias attribute in your user pool, this value must be the <code>sub</code> of a local user or the username of a user from a third-party IdP.</p>
    /// This field is required.
    pub fn username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If <code>username</code> isn't an alias attribute in your user pool, this value must be the <code>sub</code> of a local user or the username of a user from a third-party IdP.</p>
    pub fn set_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p>The name of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If <code>username</code> isn't an alias attribute in your user pool, this value must be the <code>sub</code> of a local user or the username of a user from a third-party IdP.</p>
    pub fn get_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.username
    }
    /// Consumes the builder and constructs a [`AdminGetDeviceInput`](crate::operation::admin_get_device::AdminGetDeviceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::admin_get_device::AdminGetDeviceInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::admin_get_device::AdminGetDeviceInput {
            device_key: self.device_key,
            user_pool_id: self.user_pool_id,
            username: self.username,
        })
    }
}
impl ::std::fmt::Debug for AdminGetDeviceInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AdminGetDeviceInputBuilder");
        formatter.field("device_key", &self.device_key);
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
