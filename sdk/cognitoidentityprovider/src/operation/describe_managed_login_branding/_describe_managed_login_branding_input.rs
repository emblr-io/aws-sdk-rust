// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeManagedLoginBrandingInput {
    /// <p>The ID of the user pool that contains the managed login branding style that you want to get information about.</p>
    pub user_pool_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the managed login branding style that you want to get more information about.</p>
    pub managed_login_branding_id: ::std::option::Option<::std::string::String>,
    /// <p>When <code>true</code>, returns values for branding options that are unchanged from Amazon Cognito defaults. When <code>false</code> or when you omit this parameter, returns only values that you customized in your branding style.</p>
    pub return_merged_resources: ::std::option::Option<bool>,
}
impl DescribeManagedLoginBrandingInput {
    /// <p>The ID of the user pool that contains the managed login branding style that you want to get information about.</p>
    pub fn user_pool_id(&self) -> ::std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The ID of the managed login branding style that you want to get more information about.</p>
    pub fn managed_login_branding_id(&self) -> ::std::option::Option<&str> {
        self.managed_login_branding_id.as_deref()
    }
    /// <p>When <code>true</code>, returns values for branding options that are unchanged from Amazon Cognito defaults. When <code>false</code> or when you omit this parameter, returns only values that you customized in your branding style.</p>
    pub fn return_merged_resources(&self) -> ::std::option::Option<bool> {
        self.return_merged_resources
    }
}
impl DescribeManagedLoginBrandingInput {
    /// Creates a new builder-style object to manufacture [`DescribeManagedLoginBrandingInput`](crate::operation::describe_managed_login_branding::DescribeManagedLoginBrandingInput).
    pub fn builder() -> crate::operation::describe_managed_login_branding::builders::DescribeManagedLoginBrandingInputBuilder {
        crate::operation::describe_managed_login_branding::builders::DescribeManagedLoginBrandingInputBuilder::default()
    }
}

/// A builder for [`DescribeManagedLoginBrandingInput`](crate::operation::describe_managed_login_branding::DescribeManagedLoginBrandingInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeManagedLoginBrandingInputBuilder {
    pub(crate) user_pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) managed_login_branding_id: ::std::option::Option<::std::string::String>,
    pub(crate) return_merged_resources: ::std::option::Option<bool>,
}
impl DescribeManagedLoginBrandingInputBuilder {
    /// <p>The ID of the user pool that contains the managed login branding style that you want to get information about.</p>
    /// This field is required.
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the user pool that contains the managed login branding style that you want to get information about.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The ID of the user pool that contains the managed login branding style that you want to get information about.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_pool_id
    }
    /// <p>The ID of the managed login branding style that you want to get more information about.</p>
    /// This field is required.
    pub fn managed_login_branding_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.managed_login_branding_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the managed login branding style that you want to get more information about.</p>
    pub fn set_managed_login_branding_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.managed_login_branding_id = input;
        self
    }
    /// <p>The ID of the managed login branding style that you want to get more information about.</p>
    pub fn get_managed_login_branding_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.managed_login_branding_id
    }
    /// <p>When <code>true</code>, returns values for branding options that are unchanged from Amazon Cognito defaults. When <code>false</code> or when you omit this parameter, returns only values that you customized in your branding style.</p>
    pub fn return_merged_resources(mut self, input: bool) -> Self {
        self.return_merged_resources = ::std::option::Option::Some(input);
        self
    }
    /// <p>When <code>true</code>, returns values for branding options that are unchanged from Amazon Cognito defaults. When <code>false</code> or when you omit this parameter, returns only values that you customized in your branding style.</p>
    pub fn set_return_merged_resources(mut self, input: ::std::option::Option<bool>) -> Self {
        self.return_merged_resources = input;
        self
    }
    /// <p>When <code>true</code>, returns values for branding options that are unchanged from Amazon Cognito defaults. When <code>false</code> or when you omit this parameter, returns only values that you customized in your branding style.</p>
    pub fn get_return_merged_resources(&self) -> &::std::option::Option<bool> {
        &self.return_merged_resources
    }
    /// Consumes the builder and constructs a [`DescribeManagedLoginBrandingInput`](crate::operation::describe_managed_login_branding::DescribeManagedLoginBrandingInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_managed_login_branding::DescribeManagedLoginBrandingInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_managed_login_branding::DescribeManagedLoginBrandingInput {
            user_pool_id: self.user_pool_id,
            managed_login_branding_id: self.managed_login_branding_id,
            return_merged_resources: self.return_merged_resources,
        })
    }
}
