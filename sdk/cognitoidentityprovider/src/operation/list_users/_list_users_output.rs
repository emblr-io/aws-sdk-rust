// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The response from the request to list users.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListUsersOutput {
    /// <p>An array of user pool users who match your query, and their attributes.</p>
    pub users: ::std::option::Option<::std::vec::Vec<crate::types::UserType>>,
    /// <p>The identifier that Amazon Cognito returned with the previous request to this operation. When you include a pagination token in your request, Amazon Cognito returns the next set of items in the list. By use of this token, you can paginate through the full list of items.</p>
    pub pagination_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListUsersOutput {
    /// <p>An array of user pool users who match your query, and their attributes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.users.is_none()`.
    pub fn users(&self) -> &[crate::types::UserType] {
        self.users.as_deref().unwrap_or_default()
    }
    /// <p>The identifier that Amazon Cognito returned with the previous request to this operation. When you include a pagination token in your request, Amazon Cognito returns the next set of items in the list. By use of this token, you can paginate through the full list of items.</p>
    pub fn pagination_token(&self) -> ::std::option::Option<&str> {
        self.pagination_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListUsersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListUsersOutput {
    /// Creates a new builder-style object to manufacture [`ListUsersOutput`](crate::operation::list_users::ListUsersOutput).
    pub fn builder() -> crate::operation::list_users::builders::ListUsersOutputBuilder {
        crate::operation::list_users::builders::ListUsersOutputBuilder::default()
    }
}

/// A builder for [`ListUsersOutput`](crate::operation::list_users::ListUsersOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListUsersOutputBuilder {
    pub(crate) users: ::std::option::Option<::std::vec::Vec<crate::types::UserType>>,
    pub(crate) pagination_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListUsersOutputBuilder {
    /// Appends an item to `users`.
    ///
    /// To override the contents of this collection use [`set_users`](Self::set_users).
    ///
    /// <p>An array of user pool users who match your query, and their attributes.</p>
    pub fn users(mut self, input: crate::types::UserType) -> Self {
        let mut v = self.users.unwrap_or_default();
        v.push(input);
        self.users = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of user pool users who match your query, and their attributes.</p>
    pub fn set_users(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UserType>>) -> Self {
        self.users = input;
        self
    }
    /// <p>An array of user pool users who match your query, and their attributes.</p>
    pub fn get_users(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UserType>> {
        &self.users
    }
    /// <p>The identifier that Amazon Cognito returned with the previous request to this operation. When you include a pagination token in your request, Amazon Cognito returns the next set of items in the list. By use of this token, you can paginate through the full list of items.</p>
    pub fn pagination_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pagination_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier that Amazon Cognito returned with the previous request to this operation. When you include a pagination token in your request, Amazon Cognito returns the next set of items in the list. By use of this token, you can paginate through the full list of items.</p>
    pub fn set_pagination_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pagination_token = input;
        self
    }
    /// <p>The identifier that Amazon Cognito returned with the previous request to this operation. When you include a pagination token in your request, Amazon Cognito returns the next set of items in the list. By use of this token, you can paginate through the full list of items.</p>
    pub fn get_pagination_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.pagination_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListUsersOutput`](crate::operation::list_users::ListUsersOutput).
    pub fn build(self) -> crate::operation::list_users::ListUsersOutput {
        crate::operation::list_users::ListUsersOutput {
            users: self.users,
            pagination_token: self.pagination_token,
            _request_id: self._request_id,
        }
    }
}
