// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct VerifySoftwareTokenInput {
    /// <p>A valid access token that Amazon Cognito issued to the currently signed-in user. Must include a scope claim for <code>aws.cognito.signin.user.admin</code>.</p>
    pub access_token: ::std::option::Option<::std::string::String>,
    /// <p>The session ID from an <code>AssociateSoftwareToken</code> request.</p>
    pub session: ::std::option::Option<::std::string::String>,
    /// <p>A TOTP that the user generated in their configured authenticator app.</p>
    pub user_code: ::std::option::Option<::std::string::String>,
    /// <p>A friendly name for the device that's running the TOTP authenticator.</p>
    pub friendly_device_name: ::std::option::Option<::std::string::String>,
}
impl VerifySoftwareTokenInput {
    /// <p>A valid access token that Amazon Cognito issued to the currently signed-in user. Must include a scope claim for <code>aws.cognito.signin.user.admin</code>.</p>
    pub fn access_token(&self) -> ::std::option::Option<&str> {
        self.access_token.as_deref()
    }
    /// <p>The session ID from an <code>AssociateSoftwareToken</code> request.</p>
    pub fn session(&self) -> ::std::option::Option<&str> {
        self.session.as_deref()
    }
    /// <p>A TOTP that the user generated in their configured authenticator app.</p>
    pub fn user_code(&self) -> ::std::option::Option<&str> {
        self.user_code.as_deref()
    }
    /// <p>A friendly name for the device that's running the TOTP authenticator.</p>
    pub fn friendly_device_name(&self) -> ::std::option::Option<&str> {
        self.friendly_device_name.as_deref()
    }
}
impl ::std::fmt::Debug for VerifySoftwareTokenInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("VerifySoftwareTokenInput");
        formatter.field("access_token", &"*** Sensitive Data Redacted ***");
        formatter.field("session", &"*** Sensitive Data Redacted ***");
        formatter.field("user_code", &"*** Sensitive Data Redacted ***");
        formatter.field("friendly_device_name", &self.friendly_device_name);
        formatter.finish()
    }
}
impl VerifySoftwareTokenInput {
    /// Creates a new builder-style object to manufacture [`VerifySoftwareTokenInput`](crate::operation::verify_software_token::VerifySoftwareTokenInput).
    pub fn builder() -> crate::operation::verify_software_token::builders::VerifySoftwareTokenInputBuilder {
        crate::operation::verify_software_token::builders::VerifySoftwareTokenInputBuilder::default()
    }
}

/// A builder for [`VerifySoftwareTokenInput`](crate::operation::verify_software_token::VerifySoftwareTokenInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct VerifySoftwareTokenInputBuilder {
    pub(crate) access_token: ::std::option::Option<::std::string::String>,
    pub(crate) session: ::std::option::Option<::std::string::String>,
    pub(crate) user_code: ::std::option::Option<::std::string::String>,
    pub(crate) friendly_device_name: ::std::option::Option<::std::string::String>,
}
impl VerifySoftwareTokenInputBuilder {
    /// <p>A valid access token that Amazon Cognito issued to the currently signed-in user. Must include a scope claim for <code>aws.cognito.signin.user.admin</code>.</p>
    pub fn access_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A valid access token that Amazon Cognito issued to the currently signed-in user. Must include a scope claim for <code>aws.cognito.signin.user.admin</code>.</p>
    pub fn set_access_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_token = input;
        self
    }
    /// <p>A valid access token that Amazon Cognito issued to the currently signed-in user. Must include a scope claim for <code>aws.cognito.signin.user.admin</code>.</p>
    pub fn get_access_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_token
    }
    /// <p>The session ID from an <code>AssociateSoftwareToken</code> request.</p>
    pub fn session(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The session ID from an <code>AssociateSoftwareToken</code> request.</p>
    pub fn set_session(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session = input;
        self
    }
    /// <p>The session ID from an <code>AssociateSoftwareToken</code> request.</p>
    pub fn get_session(&self) -> &::std::option::Option<::std::string::String> {
        &self.session
    }
    /// <p>A TOTP that the user generated in their configured authenticator app.</p>
    /// This field is required.
    pub fn user_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A TOTP that the user generated in their configured authenticator app.</p>
    pub fn set_user_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_code = input;
        self
    }
    /// <p>A TOTP that the user generated in their configured authenticator app.</p>
    pub fn get_user_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_code
    }
    /// <p>A friendly name for the device that's running the TOTP authenticator.</p>
    pub fn friendly_device_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.friendly_device_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A friendly name for the device that's running the TOTP authenticator.</p>
    pub fn set_friendly_device_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.friendly_device_name = input;
        self
    }
    /// <p>A friendly name for the device that's running the TOTP authenticator.</p>
    pub fn get_friendly_device_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.friendly_device_name
    }
    /// Consumes the builder and constructs a [`VerifySoftwareTokenInput`](crate::operation::verify_software_token::VerifySoftwareTokenInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::verify_software_token::VerifySoftwareTokenInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::verify_software_token::VerifySoftwareTokenInput {
            access_token: self.access_token,
            session: self.session,
            user_code: self.user_code,
            friendly_device_name: self.friendly_device_name,
        })
    }
}
impl ::std::fmt::Debug for VerifySoftwareTokenInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("VerifySoftwareTokenInputBuilder");
        formatter.field("access_token", &"*** Sensitive Data Redacted ***");
        formatter.field("session", &"*** Sensitive Data Redacted ***");
        formatter.field("user_code", &"*** Sensitive Data Redacted ***");
        formatter.field("friendly_device_name", &self.friendly_device_name);
        formatter.finish()
    }
}
