// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct VerifySoftwareTokenOutput {
    /// <p>Amazon Cognito can accept or reject the code that you provide. This response parameter indicates the success of TOTP verification. Some reasons that this operation might return an error are clock skew on the user's device and excessive retries.</p>
    pub status: ::std::option::Option<crate::types::VerifySoftwareTokenResponseType>,
    /// <p>This session ID satisfies an <code>MFA_SETUP</code> challenge. Supply the session ID in your challenge response.</p>
    pub session: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl VerifySoftwareTokenOutput {
    /// <p>Amazon Cognito can accept or reject the code that you provide. This response parameter indicates the success of TOTP verification. Some reasons that this operation might return an error are clock skew on the user's device and excessive retries.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::VerifySoftwareTokenResponseType> {
        self.status.as_ref()
    }
    /// <p>This session ID satisfies an <code>MFA_SETUP</code> challenge. Supply the session ID in your challenge response.</p>
    pub fn session(&self) -> ::std::option::Option<&str> {
        self.session.as_deref()
    }
}
impl ::std::fmt::Debug for VerifySoftwareTokenOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("VerifySoftwareTokenOutput");
        formatter.field("status", &self.status);
        formatter.field("session", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for VerifySoftwareTokenOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl VerifySoftwareTokenOutput {
    /// Creates a new builder-style object to manufacture [`VerifySoftwareTokenOutput`](crate::operation::verify_software_token::VerifySoftwareTokenOutput).
    pub fn builder() -> crate::operation::verify_software_token::builders::VerifySoftwareTokenOutputBuilder {
        crate::operation::verify_software_token::builders::VerifySoftwareTokenOutputBuilder::default()
    }
}

/// A builder for [`VerifySoftwareTokenOutput`](crate::operation::verify_software_token::VerifySoftwareTokenOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct VerifySoftwareTokenOutputBuilder {
    pub(crate) status: ::std::option::Option<crate::types::VerifySoftwareTokenResponseType>,
    pub(crate) session: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl VerifySoftwareTokenOutputBuilder {
    /// <p>Amazon Cognito can accept or reject the code that you provide. This response parameter indicates the success of TOTP verification. Some reasons that this operation might return an error are clock skew on the user's device and excessive retries.</p>
    pub fn status(mut self, input: crate::types::VerifySoftwareTokenResponseType) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Amazon Cognito can accept or reject the code that you provide. This response parameter indicates the success of TOTP verification. Some reasons that this operation might return an error are clock skew on the user's device and excessive retries.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::VerifySoftwareTokenResponseType>) -> Self {
        self.status = input;
        self
    }
    /// <p>Amazon Cognito can accept or reject the code that you provide. This response parameter indicates the success of TOTP verification. Some reasons that this operation might return an error are clock skew on the user's device and excessive retries.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::VerifySoftwareTokenResponseType> {
        &self.status
    }
    /// <p>This session ID satisfies an <code>MFA_SETUP</code> challenge. Supply the session ID in your challenge response.</p>
    pub fn session(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This session ID satisfies an <code>MFA_SETUP</code> challenge. Supply the session ID in your challenge response.</p>
    pub fn set_session(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session = input;
        self
    }
    /// <p>This session ID satisfies an <code>MFA_SETUP</code> challenge. Supply the session ID in your challenge response.</p>
    pub fn get_session(&self) -> &::std::option::Option<::std::string::String> {
        &self.session
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`VerifySoftwareTokenOutput`](crate::operation::verify_software_token::VerifySoftwareTokenOutput).
    pub fn build(self) -> crate::operation::verify_software_token::VerifySoftwareTokenOutput {
        crate::operation::verify_software_token::VerifySoftwareTokenOutput {
            status: self.status,
            session: self.session,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for VerifySoftwareTokenOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("VerifySoftwareTokenOutputBuilder");
        formatter.field("status", &self.status);
        formatter.field("session", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
