// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateAuthEventFeedbackInput {
    /// <p>The ID of the user pool where you want to update auth event feedback.</p>
    pub user_pool_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If <code>username</code> isn't an alias attribute in your user pool, this value must be the <code>sub</code> of a local user or the username of a user from a third-party IdP.</p>
    pub username: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the authentication event that you want to submit feedback for.</p>
    pub event_id: ::std::option::Option<::std::string::String>,
    /// <p>The feedback token, an encrypted object generated by Amazon Cognito and passed to your user in the notification email message from the event.</p>
    pub feedback_token: ::std::option::Option<::std::string::String>,
    /// <p>Your feedback to the authentication event. When you provide a <code>FeedbackValue</code> value of <code>valid</code>, you tell Amazon Cognito that you trust a user session where Amazon Cognito has evaluated some level of risk. When you provide a <code>FeedbackValue</code> value of <code>invalid</code>, you tell Amazon Cognito that you don't trust a user session, or you don't believe that Amazon Cognito evaluated a high-enough risk level.</p>
    pub feedback_value: ::std::option::Option<crate::types::FeedbackValueType>,
}
impl UpdateAuthEventFeedbackInput {
    /// <p>The ID of the user pool where you want to update auth event feedback.</p>
    pub fn user_pool_id(&self) -> ::std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The name of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If <code>username</code> isn't an alias attribute in your user pool, this value must be the <code>sub</code> of a local user or the username of a user from a third-party IdP.</p>
    pub fn username(&self) -> ::std::option::Option<&str> {
        self.username.as_deref()
    }
    /// <p>The ID of the authentication event that you want to submit feedback for.</p>
    pub fn event_id(&self) -> ::std::option::Option<&str> {
        self.event_id.as_deref()
    }
    /// <p>The feedback token, an encrypted object generated by Amazon Cognito and passed to your user in the notification email message from the event.</p>
    pub fn feedback_token(&self) -> ::std::option::Option<&str> {
        self.feedback_token.as_deref()
    }
    /// <p>Your feedback to the authentication event. When you provide a <code>FeedbackValue</code> value of <code>valid</code>, you tell Amazon Cognito that you trust a user session where Amazon Cognito has evaluated some level of risk. When you provide a <code>FeedbackValue</code> value of <code>invalid</code>, you tell Amazon Cognito that you don't trust a user session, or you don't believe that Amazon Cognito evaluated a high-enough risk level.</p>
    pub fn feedback_value(&self) -> ::std::option::Option<&crate::types::FeedbackValueType> {
        self.feedback_value.as_ref()
    }
}
impl ::std::fmt::Debug for UpdateAuthEventFeedbackInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAuthEventFeedbackInput");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("event_id", &self.event_id);
        formatter.field("feedback_token", &"*** Sensitive Data Redacted ***");
        formatter.field("feedback_value", &self.feedback_value);
        formatter.finish()
    }
}
impl UpdateAuthEventFeedbackInput {
    /// Creates a new builder-style object to manufacture [`UpdateAuthEventFeedbackInput`](crate::operation::update_auth_event_feedback::UpdateAuthEventFeedbackInput).
    pub fn builder() -> crate::operation::update_auth_event_feedback::builders::UpdateAuthEventFeedbackInputBuilder {
        crate::operation::update_auth_event_feedback::builders::UpdateAuthEventFeedbackInputBuilder::default()
    }
}

/// A builder for [`UpdateAuthEventFeedbackInput`](crate::operation::update_auth_event_feedback::UpdateAuthEventFeedbackInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateAuthEventFeedbackInputBuilder {
    pub(crate) user_pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) username: ::std::option::Option<::std::string::String>,
    pub(crate) event_id: ::std::option::Option<::std::string::String>,
    pub(crate) feedback_token: ::std::option::Option<::std::string::String>,
    pub(crate) feedback_value: ::std::option::Option<crate::types::FeedbackValueType>,
}
impl UpdateAuthEventFeedbackInputBuilder {
    /// <p>The ID of the user pool where you want to update auth event feedback.</p>
    /// This field is required.
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the user pool where you want to update auth event feedback.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The ID of the user pool where you want to update auth event feedback.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_pool_id
    }
    /// <p>The name of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If <code>username</code> isn't an alias attribute in your user pool, this value must be the <code>sub</code> of a local user or the username of a user from a third-party IdP.</p>
    /// This field is required.
    pub fn username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If <code>username</code> isn't an alias attribute in your user pool, this value must be the <code>sub</code> of a local user or the username of a user from a third-party IdP.</p>
    pub fn set_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p>The name of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If <code>username</code> isn't an alias attribute in your user pool, this value must be the <code>sub</code> of a local user or the username of a user from a third-party IdP.</p>
    pub fn get_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.username
    }
    /// <p>The ID of the authentication event that you want to submit feedback for.</p>
    /// This field is required.
    pub fn event_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the authentication event that you want to submit feedback for.</p>
    pub fn set_event_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>The ID of the authentication event that you want to submit feedback for.</p>
    pub fn get_event_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_id
    }
    /// <p>The feedback token, an encrypted object generated by Amazon Cognito and passed to your user in the notification email message from the event.</p>
    /// This field is required.
    pub fn feedback_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.feedback_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The feedback token, an encrypted object generated by Amazon Cognito and passed to your user in the notification email message from the event.</p>
    pub fn set_feedback_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.feedback_token = input;
        self
    }
    /// <p>The feedback token, an encrypted object generated by Amazon Cognito and passed to your user in the notification email message from the event.</p>
    pub fn get_feedback_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.feedback_token
    }
    /// <p>Your feedback to the authentication event. When you provide a <code>FeedbackValue</code> value of <code>valid</code>, you tell Amazon Cognito that you trust a user session where Amazon Cognito has evaluated some level of risk. When you provide a <code>FeedbackValue</code> value of <code>invalid</code>, you tell Amazon Cognito that you don't trust a user session, or you don't believe that Amazon Cognito evaluated a high-enough risk level.</p>
    /// This field is required.
    pub fn feedback_value(mut self, input: crate::types::FeedbackValueType) -> Self {
        self.feedback_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>Your feedback to the authentication event. When you provide a <code>FeedbackValue</code> value of <code>valid</code>, you tell Amazon Cognito that you trust a user session where Amazon Cognito has evaluated some level of risk. When you provide a <code>FeedbackValue</code> value of <code>invalid</code>, you tell Amazon Cognito that you don't trust a user session, or you don't believe that Amazon Cognito evaluated a high-enough risk level.</p>
    pub fn set_feedback_value(mut self, input: ::std::option::Option<crate::types::FeedbackValueType>) -> Self {
        self.feedback_value = input;
        self
    }
    /// <p>Your feedback to the authentication event. When you provide a <code>FeedbackValue</code> value of <code>valid</code>, you tell Amazon Cognito that you trust a user session where Amazon Cognito has evaluated some level of risk. When you provide a <code>FeedbackValue</code> value of <code>invalid</code>, you tell Amazon Cognito that you don't trust a user session, or you don't believe that Amazon Cognito evaluated a high-enough risk level.</p>
    pub fn get_feedback_value(&self) -> &::std::option::Option<crate::types::FeedbackValueType> {
        &self.feedback_value
    }
    /// Consumes the builder and constructs a [`UpdateAuthEventFeedbackInput`](crate::operation::update_auth_event_feedback::UpdateAuthEventFeedbackInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_auth_event_feedback::UpdateAuthEventFeedbackInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_auth_event_feedback::UpdateAuthEventFeedbackInput {
            user_pool_id: self.user_pool_id,
            username: self.username,
            event_id: self.event_id,
            feedback_token: self.feedback_token,
            feedback_value: self.feedback_value,
        })
    }
}
impl ::std::fmt::Debug for UpdateAuthEventFeedbackInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAuthEventFeedbackInputBuilder");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("event_id", &self.event_id);
        formatter.field("feedback_token", &"*** Sensitive Data Redacted ***");
        formatter.field("feedback_value", &self.feedback_value);
        formatter.finish()
    }
}
