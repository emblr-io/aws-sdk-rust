// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The settings of risk configuration for threat protection with threat protection in a user pool.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RiskConfigurationType {
    /// <p>The ID of the user pool that has the risk configuration applied.</p>
    pub user_pool_id: ::std::option::Option<::std::string::String>,
    /// <p>The app client where this configuration is applied. When this parameter isn't present, the risk configuration applies to all user pool app clients that don't have client-level settings.</p>
    pub client_id: ::std::option::Option<::std::string::String>,
    /// <p>Settings for compromised-credentials actions and authentication types with threat protection in full-function <code>ENFORCED</code> mode.</p>
    pub compromised_credentials_risk_configuration: ::std::option::Option<crate::types::CompromisedCredentialsRiskConfigurationType>,
    /// <p>The settings for automated responses and notification templates for adaptive authentication with threat protection.</p>
    pub account_takeover_risk_configuration: ::std::option::Option<crate::types::AccountTakeoverRiskConfigurationType>,
    /// <p>Exceptions to the risk evaluation configuration, including always-allow and always-block IP address ranges.</p>
    pub risk_exception_configuration: ::std::option::Option<crate::types::RiskExceptionConfigurationType>,
    /// <p>The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub last_modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl RiskConfigurationType {
    /// <p>The ID of the user pool that has the risk configuration applied.</p>
    pub fn user_pool_id(&self) -> ::std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The app client where this configuration is applied. When this parameter isn't present, the risk configuration applies to all user pool app clients that don't have client-level settings.</p>
    pub fn client_id(&self) -> ::std::option::Option<&str> {
        self.client_id.as_deref()
    }
    /// <p>Settings for compromised-credentials actions and authentication types with threat protection in full-function <code>ENFORCED</code> mode.</p>
    pub fn compromised_credentials_risk_configuration(&self) -> ::std::option::Option<&crate::types::CompromisedCredentialsRiskConfigurationType> {
        self.compromised_credentials_risk_configuration.as_ref()
    }
    /// <p>The settings for automated responses and notification templates for adaptive authentication with threat protection.</p>
    pub fn account_takeover_risk_configuration(&self) -> ::std::option::Option<&crate::types::AccountTakeoverRiskConfigurationType> {
        self.account_takeover_risk_configuration.as_ref()
    }
    /// <p>Exceptions to the risk evaluation configuration, including always-allow and always-block IP address ranges.</p>
    pub fn risk_exception_configuration(&self) -> ::std::option::Option<&crate::types::RiskExceptionConfigurationType> {
        self.risk_exception_configuration.as_ref()
    }
    /// <p>The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn last_modified_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_date.as_ref()
    }
}
impl ::std::fmt::Debug for RiskConfigurationType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RiskConfigurationType");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("client_id", &"*** Sensitive Data Redacted ***");
        formatter.field(
            "compromised_credentials_risk_configuration",
            &self.compromised_credentials_risk_configuration,
        );
        formatter.field("account_takeover_risk_configuration", &self.account_takeover_risk_configuration);
        formatter.field("risk_exception_configuration", &self.risk_exception_configuration);
        formatter.field("last_modified_date", &self.last_modified_date);
        formatter.finish()
    }
}
impl RiskConfigurationType {
    /// Creates a new builder-style object to manufacture [`RiskConfigurationType`](crate::types::RiskConfigurationType).
    pub fn builder() -> crate::types::builders::RiskConfigurationTypeBuilder {
        crate::types::builders::RiskConfigurationTypeBuilder::default()
    }
}

/// A builder for [`RiskConfigurationType`](crate::types::RiskConfigurationType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RiskConfigurationTypeBuilder {
    pub(crate) user_pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_id: ::std::option::Option<::std::string::String>,
    pub(crate) compromised_credentials_risk_configuration: ::std::option::Option<crate::types::CompromisedCredentialsRiskConfigurationType>,
    pub(crate) account_takeover_risk_configuration: ::std::option::Option<crate::types::AccountTakeoverRiskConfigurationType>,
    pub(crate) risk_exception_configuration: ::std::option::Option<crate::types::RiskExceptionConfigurationType>,
    pub(crate) last_modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl RiskConfigurationTypeBuilder {
    /// <p>The ID of the user pool that has the risk configuration applied.</p>
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the user pool that has the risk configuration applied.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The ID of the user pool that has the risk configuration applied.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_pool_id
    }
    /// <p>The app client where this configuration is applied. When this parameter isn't present, the risk configuration applies to all user pool app clients that don't have client-level settings.</p>
    pub fn client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The app client where this configuration is applied. When this parameter isn't present, the risk configuration applies to all user pool app clients that don't have client-level settings.</p>
    pub fn set_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_id = input;
        self
    }
    /// <p>The app client where this configuration is applied. When this parameter isn't present, the risk configuration applies to all user pool app clients that don't have client-level settings.</p>
    pub fn get_client_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_id
    }
    /// <p>Settings for compromised-credentials actions and authentication types with threat protection in full-function <code>ENFORCED</code> mode.</p>
    pub fn compromised_credentials_risk_configuration(mut self, input: crate::types::CompromisedCredentialsRiskConfigurationType) -> Self {
        self.compromised_credentials_risk_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Settings for compromised-credentials actions and authentication types with threat protection in full-function <code>ENFORCED</code> mode.</p>
    pub fn set_compromised_credentials_risk_configuration(
        mut self,
        input: ::std::option::Option<crate::types::CompromisedCredentialsRiskConfigurationType>,
    ) -> Self {
        self.compromised_credentials_risk_configuration = input;
        self
    }
    /// <p>Settings for compromised-credentials actions and authentication types with threat protection in full-function <code>ENFORCED</code> mode.</p>
    pub fn get_compromised_credentials_risk_configuration(
        &self,
    ) -> &::std::option::Option<crate::types::CompromisedCredentialsRiskConfigurationType> {
        &self.compromised_credentials_risk_configuration
    }
    /// <p>The settings for automated responses and notification templates for adaptive authentication with threat protection.</p>
    pub fn account_takeover_risk_configuration(mut self, input: crate::types::AccountTakeoverRiskConfigurationType) -> Self {
        self.account_takeover_risk_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The settings for automated responses and notification templates for adaptive authentication with threat protection.</p>
    pub fn set_account_takeover_risk_configuration(
        mut self,
        input: ::std::option::Option<crate::types::AccountTakeoverRiskConfigurationType>,
    ) -> Self {
        self.account_takeover_risk_configuration = input;
        self
    }
    /// <p>The settings for automated responses and notification templates for adaptive authentication with threat protection.</p>
    pub fn get_account_takeover_risk_configuration(&self) -> &::std::option::Option<crate::types::AccountTakeoverRiskConfigurationType> {
        &self.account_takeover_risk_configuration
    }
    /// <p>Exceptions to the risk evaluation configuration, including always-allow and always-block IP address ranges.</p>
    pub fn risk_exception_configuration(mut self, input: crate::types::RiskExceptionConfigurationType) -> Self {
        self.risk_exception_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Exceptions to the risk evaluation configuration, including always-allow and always-block IP address ranges.</p>
    pub fn set_risk_exception_configuration(mut self, input: ::std::option::Option<crate::types::RiskExceptionConfigurationType>) -> Self {
        self.risk_exception_configuration = input;
        self
    }
    /// <p>Exceptions to the risk evaluation configuration, including always-allow and always-block IP address ranges.</p>
    pub fn get_risk_exception_configuration(&self) -> &::std::option::Option<crate::types::RiskExceptionConfigurationType> {
        &self.risk_exception_configuration
    }
    /// <p>The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn last_modified_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn set_last_modified_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn get_last_modified_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_date
    }
    /// Consumes the builder and constructs a [`RiskConfigurationType`](crate::types::RiskConfigurationType).
    pub fn build(self) -> crate::types::RiskConfigurationType {
        crate::types::RiskConfigurationType {
            user_pool_id: self.user_pool_id,
            client_id: self.client_id,
            compromised_credentials_risk_configuration: self.compromised_credentials_risk_configuration,
            account_takeover_risk_configuration: self.account_takeover_risk_configuration,
            risk_exception_configuration: self.risk_exception_configuration,
            last_modified_date: self.last_modified_date,
        }
    }
}
impl ::std::fmt::Debug for RiskConfigurationTypeBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RiskConfigurationTypeBuilder");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("client_id", &"*** Sensitive Data Redacted ***");
        formatter.field(
            "compromised_credentials_risk_configuration",
            &self.compromised_credentials_risk_configuration,
        );
        formatter.field("account_takeover_risk_configuration", &self.account_takeover_risk_configuration);
        formatter.field("risk_exception_configuration", &self.risk_exception_configuration);
        formatter.field("last_modified_date", &self.last_modified_date);
        formatter.finish()
    }
}
