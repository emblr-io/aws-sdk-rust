// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings for authentication (MFA) with passkey, or webauthN, biometric and security-key devices in a user pool. Configures the following:</p>
/// <ul>
/// <li>
/// <p>Configuration for requiring user-verification support in passkeys.</p></li>
/// <li>
/// <p>The user pool relying-party ID. This is the domain, typically your user pool domain, that user's passkey providers should trust as a receiver of passkey authentication.</p></li>
/// <li>
/// <p>The providers that you want to allow as origins for passkey authentication.</p></li>
/// </ul>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WebAuthnConfigurationType {
    /// <p>Sets or displays the authentication domain, typically your user pool domain, that passkey providers must use as a relying party (RP) in their configuration.</p>
    /// <p>Under the following conditions, the passkey relying party ID must be the fully-qualified domain name of your custom domain:</p>
    /// <ul>
    /// <li>
    /// <p>The user pool is configured for passkey authentication.</p></li>
    /// <li>
    /// <p>The user pool has a custom domain, whether or not it also has a prefix domain.</p></li>
    /// <li>
    /// <p>Your application performs authentication with managed login or the classic hosted UI.</p></li>
    /// </ul>
    pub relying_party_id: ::std::option::Option<::std::string::String>,
    /// <p>When <code>required</code>, users can only register and sign in users with passkeys that are capable of <a href="https://www.w3.org/TR/webauthn-2/#enum-userVerificationRequirement">user verification</a>. When <code>preferred</code>, your user pool doesn't require the use of authenticators with user verification but encourages it.</p>
    pub user_verification: ::std::option::Option<crate::types::UserVerificationType>,
}
impl WebAuthnConfigurationType {
    /// <p>Sets or displays the authentication domain, typically your user pool domain, that passkey providers must use as a relying party (RP) in their configuration.</p>
    /// <p>Under the following conditions, the passkey relying party ID must be the fully-qualified domain name of your custom domain:</p>
    /// <ul>
    /// <li>
    /// <p>The user pool is configured for passkey authentication.</p></li>
    /// <li>
    /// <p>The user pool has a custom domain, whether or not it also has a prefix domain.</p></li>
    /// <li>
    /// <p>Your application performs authentication with managed login or the classic hosted UI.</p></li>
    /// </ul>
    pub fn relying_party_id(&self) -> ::std::option::Option<&str> {
        self.relying_party_id.as_deref()
    }
    /// <p>When <code>required</code>, users can only register and sign in users with passkeys that are capable of <a href="https://www.w3.org/TR/webauthn-2/#enum-userVerificationRequirement">user verification</a>. When <code>preferred</code>, your user pool doesn't require the use of authenticators with user verification but encourages it.</p>
    pub fn user_verification(&self) -> ::std::option::Option<&crate::types::UserVerificationType> {
        self.user_verification.as_ref()
    }
}
impl WebAuthnConfigurationType {
    /// Creates a new builder-style object to manufacture [`WebAuthnConfigurationType`](crate::types::WebAuthnConfigurationType).
    pub fn builder() -> crate::types::builders::WebAuthnConfigurationTypeBuilder {
        crate::types::builders::WebAuthnConfigurationTypeBuilder::default()
    }
}

/// A builder for [`WebAuthnConfigurationType`](crate::types::WebAuthnConfigurationType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WebAuthnConfigurationTypeBuilder {
    pub(crate) relying_party_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_verification: ::std::option::Option<crate::types::UserVerificationType>,
}
impl WebAuthnConfigurationTypeBuilder {
    /// <p>Sets or displays the authentication domain, typically your user pool domain, that passkey providers must use as a relying party (RP) in their configuration.</p>
    /// <p>Under the following conditions, the passkey relying party ID must be the fully-qualified domain name of your custom domain:</p>
    /// <ul>
    /// <li>
    /// <p>The user pool is configured for passkey authentication.</p></li>
    /// <li>
    /// <p>The user pool has a custom domain, whether or not it also has a prefix domain.</p></li>
    /// <li>
    /// <p>Your application performs authentication with managed login or the classic hosted UI.</p></li>
    /// </ul>
    pub fn relying_party_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.relying_party_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Sets or displays the authentication domain, typically your user pool domain, that passkey providers must use as a relying party (RP) in their configuration.</p>
    /// <p>Under the following conditions, the passkey relying party ID must be the fully-qualified domain name of your custom domain:</p>
    /// <ul>
    /// <li>
    /// <p>The user pool is configured for passkey authentication.</p></li>
    /// <li>
    /// <p>The user pool has a custom domain, whether or not it also has a prefix domain.</p></li>
    /// <li>
    /// <p>Your application performs authentication with managed login or the classic hosted UI.</p></li>
    /// </ul>
    pub fn set_relying_party_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.relying_party_id = input;
        self
    }
    /// <p>Sets or displays the authentication domain, typically your user pool domain, that passkey providers must use as a relying party (RP) in their configuration.</p>
    /// <p>Under the following conditions, the passkey relying party ID must be the fully-qualified domain name of your custom domain:</p>
    /// <ul>
    /// <li>
    /// <p>The user pool is configured for passkey authentication.</p></li>
    /// <li>
    /// <p>The user pool has a custom domain, whether or not it also has a prefix domain.</p></li>
    /// <li>
    /// <p>Your application performs authentication with managed login or the classic hosted UI.</p></li>
    /// </ul>
    pub fn get_relying_party_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.relying_party_id
    }
    /// <p>When <code>required</code>, users can only register and sign in users with passkeys that are capable of <a href="https://www.w3.org/TR/webauthn-2/#enum-userVerificationRequirement">user verification</a>. When <code>preferred</code>, your user pool doesn't require the use of authenticators with user verification but encourages it.</p>
    pub fn user_verification(mut self, input: crate::types::UserVerificationType) -> Self {
        self.user_verification = ::std::option::Option::Some(input);
        self
    }
    /// <p>When <code>required</code>, users can only register and sign in users with passkeys that are capable of <a href="https://www.w3.org/TR/webauthn-2/#enum-userVerificationRequirement">user verification</a>. When <code>preferred</code>, your user pool doesn't require the use of authenticators with user verification but encourages it.</p>
    pub fn set_user_verification(mut self, input: ::std::option::Option<crate::types::UserVerificationType>) -> Self {
        self.user_verification = input;
        self
    }
    /// <p>When <code>required</code>, users can only register and sign in users with passkeys that are capable of <a href="https://www.w3.org/TR/webauthn-2/#enum-userVerificationRequirement">user verification</a>. When <code>preferred</code>, your user pool doesn't require the use of authenticators with user verification but encourages it.</p>
    pub fn get_user_verification(&self) -> &::std::option::Option<crate::types::UserVerificationType> {
        &self.user_verification
    }
    /// Consumes the builder and constructs a [`WebAuthnConfigurationType`](crate::types::WebAuthnConfigurationType).
    pub fn build(self) -> crate::types::WebAuthnConfigurationType {
        crate::types::WebAuthnConfigurationType {
            relying_party_id: self.relying_party_id,
            user_verification: self.user_verification,
        }
    }
}
