// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of multi-factor authentication (MFA) with SMS messages in a user pool.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SmsMfaConfigType {
    /// <p>The SMS authentication message that will be sent to users with the code they must sign in with. The message must contain the <code>{####}</code> placeholder. Your user pool replaces the placeholder with the MFA code. If this parameter isn't provided, your user pool sends a default message.</p>
    pub sms_authentication_message: ::std::option::Option<::std::string::String>,
    /// <p>User pool configuration for delivery of SMS messages with Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role in your Amazon Web Services account.</p>
    /// <p>You can set <code>SmsConfiguration</code> in <code>CreateUserPool</code> and <code> UpdateUserPool</code>, or in <code>SetUserPoolMfaConfig</code>.</p>
    pub sms_configuration: ::std::option::Option<crate::types::SmsConfigurationType>,
}
impl SmsMfaConfigType {
    /// <p>The SMS authentication message that will be sent to users with the code they must sign in with. The message must contain the <code>{####}</code> placeholder. Your user pool replaces the placeholder with the MFA code. If this parameter isn't provided, your user pool sends a default message.</p>
    pub fn sms_authentication_message(&self) -> ::std::option::Option<&str> {
        self.sms_authentication_message.as_deref()
    }
    /// <p>User pool configuration for delivery of SMS messages with Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role in your Amazon Web Services account.</p>
    /// <p>You can set <code>SmsConfiguration</code> in <code>CreateUserPool</code> and <code> UpdateUserPool</code>, or in <code>SetUserPoolMfaConfig</code>.</p>
    pub fn sms_configuration(&self) -> ::std::option::Option<&crate::types::SmsConfigurationType> {
        self.sms_configuration.as_ref()
    }
}
impl SmsMfaConfigType {
    /// Creates a new builder-style object to manufacture [`SmsMfaConfigType`](crate::types::SmsMfaConfigType).
    pub fn builder() -> crate::types::builders::SmsMfaConfigTypeBuilder {
        crate::types::builders::SmsMfaConfigTypeBuilder::default()
    }
}

/// A builder for [`SmsMfaConfigType`](crate::types::SmsMfaConfigType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SmsMfaConfigTypeBuilder {
    pub(crate) sms_authentication_message: ::std::option::Option<::std::string::String>,
    pub(crate) sms_configuration: ::std::option::Option<crate::types::SmsConfigurationType>,
}
impl SmsMfaConfigTypeBuilder {
    /// <p>The SMS authentication message that will be sent to users with the code they must sign in with. The message must contain the <code>{####}</code> placeholder. Your user pool replaces the placeholder with the MFA code. If this parameter isn't provided, your user pool sends a default message.</p>
    pub fn sms_authentication_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sms_authentication_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The SMS authentication message that will be sent to users with the code they must sign in with. The message must contain the <code>{####}</code> placeholder. Your user pool replaces the placeholder with the MFA code. If this parameter isn't provided, your user pool sends a default message.</p>
    pub fn set_sms_authentication_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sms_authentication_message = input;
        self
    }
    /// <p>The SMS authentication message that will be sent to users with the code they must sign in with. The message must contain the <code>{####}</code> placeholder. Your user pool replaces the placeholder with the MFA code. If this parameter isn't provided, your user pool sends a default message.</p>
    pub fn get_sms_authentication_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.sms_authentication_message
    }
    /// <p>User pool configuration for delivery of SMS messages with Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role in your Amazon Web Services account.</p>
    /// <p>You can set <code>SmsConfiguration</code> in <code>CreateUserPool</code> and <code> UpdateUserPool</code>, or in <code>SetUserPoolMfaConfig</code>.</p>
    pub fn sms_configuration(mut self, input: crate::types::SmsConfigurationType) -> Self {
        self.sms_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>User pool configuration for delivery of SMS messages with Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role in your Amazon Web Services account.</p>
    /// <p>You can set <code>SmsConfiguration</code> in <code>CreateUserPool</code> and <code> UpdateUserPool</code>, or in <code>SetUserPoolMfaConfig</code>.</p>
    pub fn set_sms_configuration(mut self, input: ::std::option::Option<crate::types::SmsConfigurationType>) -> Self {
        self.sms_configuration = input;
        self
    }
    /// <p>User pool configuration for delivery of SMS messages with Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role in your Amazon Web Services account.</p>
    /// <p>You can set <code>SmsConfiguration</code> in <code>CreateUserPool</code> and <code> UpdateUserPool</code>, or in <code>SetUserPoolMfaConfig</code>.</p>
    pub fn get_sms_configuration(&self) -> &::std::option::Option<crate::types::SmsConfigurationType> {
        &self.sms_configuration
    }
    /// Consumes the builder and constructs a [`SmsMfaConfigType`](crate::types::SmsMfaConfigType).
    pub fn build(self) -> crate::types::SmsMfaConfigType {
        crate::types::SmsMfaConfigType {
            sms_authentication_message: self.sms_authentication_message,
            sms_configuration: self.sms_configuration,
        }
    }
}
