// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The settings for administrator creation of users in a user pool. Contains settings for allowing user sign-up, customizing invitation messages to new users, and the amount of time before temporary passwords expire.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AdminCreateUserConfigType {
    /// <p>The setting for allowing self-service sign-up. When <code>true</code>, only administrators can create new user profiles. When <code>false</code>, users can register themselves and create a new user profile with the <code>SignUp</code> operation.</p>
    pub allow_admin_create_user_only: bool,
    /// <p>This parameter is no longer in use.</p>
    /// <p>The password expiration limit in days for administrator-created users. When this time expires, the user can't sign in with their temporary password. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again, specifying <code>RESEND</code> for the <code>MessageAction</code> parameter.</p>
    /// <p>The default value for this parameter is 7.</p>
    pub unused_account_validity_days: i32,
    /// <p>The template for the welcome message to new users. This template must include the <code>{####}</code> temporary password placeholder if you are creating users with passwords. If your users don't have passwords, you can omit the placeholder.</p>
    /// <p>See also <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization">Customizing User Invitation Messages</a>.</p>
    pub invite_message_template: ::std::option::Option<crate::types::MessageTemplateType>,
}
impl AdminCreateUserConfigType {
    /// <p>The setting for allowing self-service sign-up. When <code>true</code>, only administrators can create new user profiles. When <code>false</code>, users can register themselves and create a new user profile with the <code>SignUp</code> operation.</p>
    pub fn allow_admin_create_user_only(&self) -> bool {
        self.allow_admin_create_user_only
    }
    /// <p>This parameter is no longer in use.</p>
    /// <p>The password expiration limit in days for administrator-created users. When this time expires, the user can't sign in with their temporary password. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again, specifying <code>RESEND</code> for the <code>MessageAction</code> parameter.</p>
    /// <p>The default value for this parameter is 7.</p>
    pub fn unused_account_validity_days(&self) -> i32 {
        self.unused_account_validity_days
    }
    /// <p>The template for the welcome message to new users. This template must include the <code>{####}</code> temporary password placeholder if you are creating users with passwords. If your users don't have passwords, you can omit the placeholder.</p>
    /// <p>See also <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization">Customizing User Invitation Messages</a>.</p>
    pub fn invite_message_template(&self) -> ::std::option::Option<&crate::types::MessageTemplateType> {
        self.invite_message_template.as_ref()
    }
}
impl AdminCreateUserConfigType {
    /// Creates a new builder-style object to manufacture [`AdminCreateUserConfigType`](crate::types::AdminCreateUserConfigType).
    pub fn builder() -> crate::types::builders::AdminCreateUserConfigTypeBuilder {
        crate::types::builders::AdminCreateUserConfigTypeBuilder::default()
    }
}

/// A builder for [`AdminCreateUserConfigType`](crate::types::AdminCreateUserConfigType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AdminCreateUserConfigTypeBuilder {
    pub(crate) allow_admin_create_user_only: ::std::option::Option<bool>,
    pub(crate) unused_account_validity_days: ::std::option::Option<i32>,
    pub(crate) invite_message_template: ::std::option::Option<crate::types::MessageTemplateType>,
}
impl AdminCreateUserConfigTypeBuilder {
    /// <p>The setting for allowing self-service sign-up. When <code>true</code>, only administrators can create new user profiles. When <code>false</code>, users can register themselves and create a new user profile with the <code>SignUp</code> operation.</p>
    pub fn allow_admin_create_user_only(mut self, input: bool) -> Self {
        self.allow_admin_create_user_only = ::std::option::Option::Some(input);
        self
    }
    /// <p>The setting for allowing self-service sign-up. When <code>true</code>, only administrators can create new user profiles. When <code>false</code>, users can register themselves and create a new user profile with the <code>SignUp</code> operation.</p>
    pub fn set_allow_admin_create_user_only(mut self, input: ::std::option::Option<bool>) -> Self {
        self.allow_admin_create_user_only = input;
        self
    }
    /// <p>The setting for allowing self-service sign-up. When <code>true</code>, only administrators can create new user profiles. When <code>false</code>, users can register themselves and create a new user profile with the <code>SignUp</code> operation.</p>
    pub fn get_allow_admin_create_user_only(&self) -> &::std::option::Option<bool> {
        &self.allow_admin_create_user_only
    }
    /// <p>This parameter is no longer in use.</p>
    /// <p>The password expiration limit in days for administrator-created users. When this time expires, the user can't sign in with their temporary password. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again, specifying <code>RESEND</code> for the <code>MessageAction</code> parameter.</p>
    /// <p>The default value for this parameter is 7.</p>
    pub fn unused_account_validity_days(mut self, input: i32) -> Self {
        self.unused_account_validity_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>This parameter is no longer in use.</p>
    /// <p>The password expiration limit in days for administrator-created users. When this time expires, the user can't sign in with their temporary password. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again, specifying <code>RESEND</code> for the <code>MessageAction</code> parameter.</p>
    /// <p>The default value for this parameter is 7.</p>
    pub fn set_unused_account_validity_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.unused_account_validity_days = input;
        self
    }
    /// <p>This parameter is no longer in use.</p>
    /// <p>The password expiration limit in days for administrator-created users. When this time expires, the user can't sign in with their temporary password. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again, specifying <code>RESEND</code> for the <code>MessageAction</code> parameter.</p>
    /// <p>The default value for this parameter is 7.</p>
    pub fn get_unused_account_validity_days(&self) -> &::std::option::Option<i32> {
        &self.unused_account_validity_days
    }
    /// <p>The template for the welcome message to new users. This template must include the <code>{####}</code> temporary password placeholder if you are creating users with passwords. If your users don't have passwords, you can omit the placeholder.</p>
    /// <p>See also <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization">Customizing User Invitation Messages</a>.</p>
    pub fn invite_message_template(mut self, input: crate::types::MessageTemplateType) -> Self {
        self.invite_message_template = ::std::option::Option::Some(input);
        self
    }
    /// <p>The template for the welcome message to new users. This template must include the <code>{####}</code> temporary password placeholder if you are creating users with passwords. If your users don't have passwords, you can omit the placeholder.</p>
    /// <p>See also <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization">Customizing User Invitation Messages</a>.</p>
    pub fn set_invite_message_template(mut self, input: ::std::option::Option<crate::types::MessageTemplateType>) -> Self {
        self.invite_message_template = input;
        self
    }
    /// <p>The template for the welcome message to new users. This template must include the <code>{####}</code> temporary password placeholder if you are creating users with passwords. If your users don't have passwords, you can omit the placeholder.</p>
    /// <p>See also <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization">Customizing User Invitation Messages</a>.</p>
    pub fn get_invite_message_template(&self) -> &::std::option::Option<crate::types::MessageTemplateType> {
        &self.invite_message_template
    }
    /// Consumes the builder and constructs a [`AdminCreateUserConfigType`](crate::types::AdminCreateUserConfigType).
    pub fn build(self) -> crate::types::AdminCreateUserConfigType {
        crate::types::AdminCreateUserConfigType {
            allow_admin_create_user_only: self.allow_admin_create_user_only.unwrap_or_default(),
            unused_account_validity_days: self.unused_account_validity_days.unwrap_or_default(),
            invite_message_template: self.invite_message_template,
        }
    }
}
