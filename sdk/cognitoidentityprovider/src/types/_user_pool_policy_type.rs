// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of user pool policies. Contains the policy that sets password-complexity requirements.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UserPoolPolicyType {
    /// <p>The password policy settings for a user pool, including complexity, history, and length requirements.</p>
    pub password_policy: ::std::option::Option<crate::types::PasswordPolicyType>,
    /// <p>The policy for allowed types of authentication in a user pool.</p>
    pub sign_in_policy: ::std::option::Option<crate::types::SignInPolicyType>,
}
impl UserPoolPolicyType {
    /// <p>The password policy settings for a user pool, including complexity, history, and length requirements.</p>
    pub fn password_policy(&self) -> ::std::option::Option<&crate::types::PasswordPolicyType> {
        self.password_policy.as_ref()
    }
    /// <p>The policy for allowed types of authentication in a user pool.</p>
    pub fn sign_in_policy(&self) -> ::std::option::Option<&crate::types::SignInPolicyType> {
        self.sign_in_policy.as_ref()
    }
}
impl UserPoolPolicyType {
    /// Creates a new builder-style object to manufacture [`UserPoolPolicyType`](crate::types::UserPoolPolicyType).
    pub fn builder() -> crate::types::builders::UserPoolPolicyTypeBuilder {
        crate::types::builders::UserPoolPolicyTypeBuilder::default()
    }
}

/// A builder for [`UserPoolPolicyType`](crate::types::UserPoolPolicyType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UserPoolPolicyTypeBuilder {
    pub(crate) password_policy: ::std::option::Option<crate::types::PasswordPolicyType>,
    pub(crate) sign_in_policy: ::std::option::Option<crate::types::SignInPolicyType>,
}
impl UserPoolPolicyTypeBuilder {
    /// <p>The password policy settings for a user pool, including complexity, history, and length requirements.</p>
    pub fn password_policy(mut self, input: crate::types::PasswordPolicyType) -> Self {
        self.password_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The password policy settings for a user pool, including complexity, history, and length requirements.</p>
    pub fn set_password_policy(mut self, input: ::std::option::Option<crate::types::PasswordPolicyType>) -> Self {
        self.password_policy = input;
        self
    }
    /// <p>The password policy settings for a user pool, including complexity, history, and length requirements.</p>
    pub fn get_password_policy(&self) -> &::std::option::Option<crate::types::PasswordPolicyType> {
        &self.password_policy
    }
    /// <p>The policy for allowed types of authentication in a user pool.</p>
    pub fn sign_in_policy(mut self, input: crate::types::SignInPolicyType) -> Self {
        self.sign_in_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The policy for allowed types of authentication in a user pool.</p>
    pub fn set_sign_in_policy(mut self, input: ::std::option::Option<crate::types::SignInPolicyType>) -> Self {
        self.sign_in_policy = input;
        self
    }
    /// <p>The policy for allowed types of authentication in a user pool.</p>
    pub fn get_sign_in_policy(&self) -> &::std::option::Option<crate::types::SignInPolicyType> {
        &self.sign_in_policy
    }
    /// Consumes the builder and constructs a [`UserPoolPolicyType`](crate::types::UserPoolPolicyType).
    pub fn build(self) -> crate::types::UserPoolPolicyType {
        crate::types::UserPoolPolicyType {
            password_policy: self.password_policy,
            sign_in_policy: self.sign_in_policy,
        }
    }
}
