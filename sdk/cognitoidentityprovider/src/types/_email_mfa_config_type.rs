// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Sets or shows configuration for user pool email message MFA and sign-in with one-time passwords (OTPs). Includes the subject and body of the email message template for sign-in and MFA messages. To activate this setting, your user pool must be in the <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/feature-plans-features-essentials.html"> Essentials tier</a> or higher.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EmailMfaConfigType {
    /// <p>The template for the email messages that your user pool sends to users with codes for MFA and sign-in with email OTPs. The message must contain the <code>{####}</code> placeholder. In the message, Amazon Cognito replaces this placeholder with the code. If you don't provide this parameter, Amazon Cognito sends messages in the default format.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>The subject of the email messages that your user pool sends to users with codes for MFA and email OTP sign-in.</p>
    pub subject: ::std::option::Option<::std::string::String>,
}
impl EmailMfaConfigType {
    /// <p>The template for the email messages that your user pool sends to users with codes for MFA and sign-in with email OTPs. The message must contain the <code>{####}</code> placeholder. In the message, Amazon Cognito replaces this placeholder with the code. If you don't provide this parameter, Amazon Cognito sends messages in the default format.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The subject of the email messages that your user pool sends to users with codes for MFA and email OTP sign-in.</p>
    pub fn subject(&self) -> ::std::option::Option<&str> {
        self.subject.as_deref()
    }
}
impl EmailMfaConfigType {
    /// Creates a new builder-style object to manufacture [`EmailMfaConfigType`](crate::types::EmailMfaConfigType).
    pub fn builder() -> crate::types::builders::EmailMfaConfigTypeBuilder {
        crate::types::builders::EmailMfaConfigTypeBuilder::default()
    }
}

/// A builder for [`EmailMfaConfigType`](crate::types::EmailMfaConfigType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EmailMfaConfigTypeBuilder {
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) subject: ::std::option::Option<::std::string::String>,
}
impl EmailMfaConfigTypeBuilder {
    /// <p>The template for the email messages that your user pool sends to users with codes for MFA and sign-in with email OTPs. The message must contain the <code>{####}</code> placeholder. In the message, Amazon Cognito replaces this placeholder with the code. If you don't provide this parameter, Amazon Cognito sends messages in the default format.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The template for the email messages that your user pool sends to users with codes for MFA and sign-in with email OTPs. The message must contain the <code>{####}</code> placeholder. In the message, Amazon Cognito replaces this placeholder with the code. If you don't provide this parameter, Amazon Cognito sends messages in the default format.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The template for the email messages that your user pool sends to users with codes for MFA and sign-in with email OTPs. The message must contain the <code>{####}</code> placeholder. In the message, Amazon Cognito replaces this placeholder with the code. If you don't provide this parameter, Amazon Cognito sends messages in the default format.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>The subject of the email messages that your user pool sends to users with codes for MFA and email OTP sign-in.</p>
    pub fn subject(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subject = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subject of the email messages that your user pool sends to users with codes for MFA and email OTP sign-in.</p>
    pub fn set_subject(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subject = input;
        self
    }
    /// <p>The subject of the email messages that your user pool sends to users with codes for MFA and email OTP sign-in.</p>
    pub fn get_subject(&self) -> &::std::option::Option<::std::string::String> {
        &self.subject
    }
    /// Consumes the builder and constructs a [`EmailMfaConfigType`](crate::types::EmailMfaConfigType).
    pub fn build(self) -> crate::types::EmailMfaConfigType {
        crate::types::EmailMfaConfigType {
            message: self.message,
            subject: self.subject,
        }
    }
}
