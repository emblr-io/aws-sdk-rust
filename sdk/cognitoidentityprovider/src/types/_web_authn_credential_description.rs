// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a passkey, or webauthN, biometric or security-key authentication factor for a user.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WebAuthnCredentialDescription {
    /// <p>The unique identifier of the passkey credential.</p>
    pub credential_id: ::std::string::String,
    /// <p>An automatically-generated friendly name for the passkey credential.</p>
    pub friendly_credential_name: ::std::string::String,
    /// <p>The relying-party ID of the provider for the passkey credential.</p>
    pub relying_party_id: ::std::string::String,
    /// <p>The general category of the passkey authenticator. Can be a platform, or on-device authenticator like a built-in fingerprint scanner, or a cross-platform device that's not attached to the device like a Bluetooth security key.</p>
    pub authenticator_attachment: ::std::option::Option<::std::string::String>,
    /// <p>Information about the transport methods of the passkey credential, for example USB or Bluetooth Low Energy.</p>
    pub authenticator_transports: ::std::vec::Vec<::std::string::String>,
    /// <p>The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub created_at: ::aws_smithy_types::DateTime,
}
impl WebAuthnCredentialDescription {
    /// <p>The unique identifier of the passkey credential.</p>
    pub fn credential_id(&self) -> &str {
        use std::ops::Deref;
        self.credential_id.deref()
    }
    /// <p>An automatically-generated friendly name for the passkey credential.</p>
    pub fn friendly_credential_name(&self) -> &str {
        use std::ops::Deref;
        self.friendly_credential_name.deref()
    }
    /// <p>The relying-party ID of the provider for the passkey credential.</p>
    pub fn relying_party_id(&self) -> &str {
        use std::ops::Deref;
        self.relying_party_id.deref()
    }
    /// <p>The general category of the passkey authenticator. Can be a platform, or on-device authenticator like a built-in fingerprint scanner, or a cross-platform device that's not attached to the device like a Bluetooth security key.</p>
    pub fn authenticator_attachment(&self) -> ::std::option::Option<&str> {
        self.authenticator_attachment.as_deref()
    }
    /// <p>Information about the transport methods of the passkey credential, for example USB or Bluetooth Low Energy.</p>
    pub fn authenticator_transports(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.authenticator_transports.deref()
    }
    /// <p>The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
}
impl WebAuthnCredentialDescription {
    /// Creates a new builder-style object to manufacture [`WebAuthnCredentialDescription`](crate::types::WebAuthnCredentialDescription).
    pub fn builder() -> crate::types::builders::WebAuthnCredentialDescriptionBuilder {
        crate::types::builders::WebAuthnCredentialDescriptionBuilder::default()
    }
}

/// A builder for [`WebAuthnCredentialDescription`](crate::types::WebAuthnCredentialDescription).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WebAuthnCredentialDescriptionBuilder {
    pub(crate) credential_id: ::std::option::Option<::std::string::String>,
    pub(crate) friendly_credential_name: ::std::option::Option<::std::string::String>,
    pub(crate) relying_party_id: ::std::option::Option<::std::string::String>,
    pub(crate) authenticator_attachment: ::std::option::Option<::std::string::String>,
    pub(crate) authenticator_transports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl WebAuthnCredentialDescriptionBuilder {
    /// <p>The unique identifier of the passkey credential.</p>
    /// This field is required.
    pub fn credential_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.credential_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the passkey credential.</p>
    pub fn set_credential_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.credential_id = input;
        self
    }
    /// <p>The unique identifier of the passkey credential.</p>
    pub fn get_credential_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.credential_id
    }
    /// <p>An automatically-generated friendly name for the passkey credential.</p>
    /// This field is required.
    pub fn friendly_credential_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.friendly_credential_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An automatically-generated friendly name for the passkey credential.</p>
    pub fn set_friendly_credential_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.friendly_credential_name = input;
        self
    }
    /// <p>An automatically-generated friendly name for the passkey credential.</p>
    pub fn get_friendly_credential_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.friendly_credential_name
    }
    /// <p>The relying-party ID of the provider for the passkey credential.</p>
    /// This field is required.
    pub fn relying_party_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.relying_party_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The relying-party ID of the provider for the passkey credential.</p>
    pub fn set_relying_party_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.relying_party_id = input;
        self
    }
    /// <p>The relying-party ID of the provider for the passkey credential.</p>
    pub fn get_relying_party_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.relying_party_id
    }
    /// <p>The general category of the passkey authenticator. Can be a platform, or on-device authenticator like a built-in fingerprint scanner, or a cross-platform device that's not attached to the device like a Bluetooth security key.</p>
    pub fn authenticator_attachment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authenticator_attachment = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The general category of the passkey authenticator. Can be a platform, or on-device authenticator like a built-in fingerprint scanner, or a cross-platform device that's not attached to the device like a Bluetooth security key.</p>
    pub fn set_authenticator_attachment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authenticator_attachment = input;
        self
    }
    /// <p>The general category of the passkey authenticator. Can be a platform, or on-device authenticator like a built-in fingerprint scanner, or a cross-platform device that's not attached to the device like a Bluetooth security key.</p>
    pub fn get_authenticator_attachment(&self) -> &::std::option::Option<::std::string::String> {
        &self.authenticator_attachment
    }
    /// Appends an item to `authenticator_transports`.
    ///
    /// To override the contents of this collection use [`set_authenticator_transports`](Self::set_authenticator_transports).
    ///
    /// <p>Information about the transport methods of the passkey credential, for example USB or Bluetooth Low Energy.</p>
    pub fn authenticator_transports(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.authenticator_transports.unwrap_or_default();
        v.push(input.into());
        self.authenticator_transports = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the transport methods of the passkey credential, for example USB or Bluetooth Low Energy.</p>
    pub fn set_authenticator_transports(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.authenticator_transports = input;
        self
    }
    /// <p>Information about the transport methods of the passkey credential, for example USB or Bluetooth Low Energy.</p>
    pub fn get_authenticator_transports(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.authenticator_transports
    }
    /// <p>The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// Consumes the builder and constructs a [`WebAuthnCredentialDescription`](crate::types::WebAuthnCredentialDescription).
    /// This method will fail if any of the following fields are not set:
    /// - [`credential_id`](crate::types::builders::WebAuthnCredentialDescriptionBuilder::credential_id)
    /// - [`friendly_credential_name`](crate::types::builders::WebAuthnCredentialDescriptionBuilder::friendly_credential_name)
    /// - [`relying_party_id`](crate::types::builders::WebAuthnCredentialDescriptionBuilder::relying_party_id)
    /// - [`authenticator_transports`](crate::types::builders::WebAuthnCredentialDescriptionBuilder::authenticator_transports)
    /// - [`created_at`](crate::types::builders::WebAuthnCredentialDescriptionBuilder::created_at)
    pub fn build(self) -> ::std::result::Result<crate::types::WebAuthnCredentialDescription, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WebAuthnCredentialDescription {
            credential_id: self.credential_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "credential_id",
                    "credential_id was not specified but it is required when building WebAuthnCredentialDescription",
                )
            })?,
            friendly_credential_name: self.friendly_credential_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "friendly_credential_name",
                    "friendly_credential_name was not specified but it is required when building WebAuthnCredentialDescription",
                )
            })?,
            relying_party_id: self.relying_party_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "relying_party_id",
                    "relying_party_id was not specified but it is required when building WebAuthnCredentialDescription",
                )
            })?,
            authenticator_attachment: self.authenticator_attachment,
            authenticator_transports: self.authenticator_transports.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "authenticator_transports",
                    "authenticator_transports was not specified but it is required when building WebAuthnCredentialDescription",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building WebAuthnCredentialDescription",
                )
            })?,
        })
    }
}
