// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The responses to the challenge that you received in the previous request. Each challenge has its own required response parameters. The following examples are partial JSON request bodies that highlight challenge-response parameters.</p><important>
/// <p>You must provide a SECRET_HASH parameter in all challenge responses to an app client that has a client secret. Include a <code>DEVICE_KEY</code> for device authentication.</p>
/// </important>
/// <dl>
/// <dt>
/// SELECT_CHALLENGE
/// </dt>
/// <dd>
/// <p><code>"ChallengeName": "SELECT_CHALLENGE", "ChallengeResponses": { "USERNAME": "\[username\]", "ANSWER": "\[Challenge name\]"}</code></p>
/// <p>Available challenges are <code>PASSWORD</code>, <code>PASSWORD_SRP</code>, <code>EMAIL_OTP</code>, <code>SMS_OTP</code>, and <code>WEB_AUTHN</code>.</p>
/// <p>Complete authentication in the <code>SELECT_CHALLENGE</code> response for <code>PASSWORD</code>, <code>PASSWORD_SRP</code>, and <code>WEB_AUTHN</code>:</p>
/// <ul>
/// <li>
/// <p><code>"ChallengeName": "SELECT_CHALLENGE", "ChallengeResponses": { "ANSWER": "WEB_AUTHN", "USERNAME": "\[username\]", "CREDENTIAL": "\[AuthenticationResponseJSON\]"}</code></p>
/// <p>See <a href="https://www.w3.org/TR/WebAuthn-3/#dictdef-authenticationresponsejson"> AuthenticationResponseJSON</a>.</p></li>
/// <li>
/// <p><code>"ChallengeName": "SELECT_CHALLENGE", "ChallengeResponses": { "ANSWER": "PASSWORD", "USERNAME": "\[username\]", "PASSWORD": "\[password\]"}</code></p></li>
/// <li>
/// <p><code>"ChallengeName": "SELECT_CHALLENGE", "ChallengeResponses": { "ANSWER": "PASSWORD_SRP", "USERNAME": "\[username\]", "SRP_A": "\[SRP_A\]"}</code></p></li>
/// </ul>
/// <p>For <code>SMS_OTP</code> and <code>EMAIL_OTP</code>, respond with the username and answer. Your user pool will send a code for the user to submit in the next challenge response.</p>
/// <ul>
/// <li>
/// <p><code>"ChallengeName": "SELECT_CHALLENGE", "ChallengeResponses": { "ANSWER": "SMS_OTP", "USERNAME": "\[username\]"}</code></p></li>
/// <li>
/// <p><code>"ChallengeName": "SELECT_CHALLENGE", "ChallengeResponses": { "ANSWER": "EMAIL_OTP", "USERNAME": "\[username\]"}</code></p></li>
/// </ul>
/// </dd>
/// <dt>
/// SMS_OTP
/// </dt>
/// <dd>
/// <p><code>"ChallengeName": "SMS_OTP", "ChallengeResponses": {"SMS_OTP_CODE": "\[code\]", "USERNAME": "\[username\]"}</code></p>
/// </dd>
/// <dt>
/// EMAIL_OTP
/// </dt>
/// <dd>
/// <p><code>"ChallengeName": "EMAIL_OTP", "ChallengeResponses": {"EMAIL_OTP_CODE": "\[code\]", "USERNAME": "\[username\]"}</code></p>
/// </dd>
/// <dt>
/// SMS_MFA
/// </dt>
/// <dd>
/// <p><code>"ChallengeName": "SMS_MFA", "ChallengeResponses": {"SMS_MFA_CODE": "\[code\]", "USERNAME": "\[username\]"}</code></p>
/// </dd>
/// <dt>
/// PASSWORD_VERIFIER
/// </dt>
/// <dd>
/// <p>This challenge response is part of the SRP flow. Amazon Cognito requires that your application respond to this challenge within a few seconds. When the response time exceeds this period, your user pool returns a <code>NotAuthorizedException</code> error.</p>
/// <p><code>"ChallengeName": "PASSWORD_VERIFIER", "ChallengeResponses": {"PASSWORD_CLAIM_SIGNATURE": "\[claim_signature\]", "PASSWORD_CLAIM_SECRET_BLOCK": "\[secret_block\]", "TIMESTAMP": \[timestamp\], "USERNAME": "\[username\]"}</code></p>
/// <p>Add <code>"DEVICE_KEY"</code> when you sign in with a remembered device.</p>
/// </dd>
/// <dt>
/// CUSTOM_CHALLENGE
/// </dt>
/// <dd>
/// <p><code>"ChallengeName": "CUSTOM_CHALLENGE", "ChallengeResponses": {"USERNAME": "\[username\]", "ANSWER": "\[challenge_answer\]"}</code></p>
/// <p>Add <code>"DEVICE_KEY"</code> when you sign in with a remembered device.</p>
/// </dd>
/// <dt>
/// NEW_PASSWORD_REQUIRED
/// </dt>
/// <dd>
/// <p><code>"ChallengeName": "NEW_PASSWORD_REQUIRED", "ChallengeResponses": {"NEW_PASSWORD": "\[new_password\]", "USERNAME": "\[username\]"}</code></p>
/// <p>To set any required attributes that <code>InitiateAuth</code> returned in an <code>requiredAttributes</code> parameter, add <code>"userAttributes.\[attribute_name\]": "\[attribute_value\]"</code>. This parameter can also set values for writable attributes that aren't required by your user pool.</p><note>
/// <p>In a <code>NEW_PASSWORD_REQUIRED</code> challenge response, you can't modify a required attribute that already has a value. In <code>AdminRespondToAuthChallenge</code> or <code>RespondToAuthChallenge</code>, set a value for any keys that Amazon Cognito returned in the <code>requiredAttributes</code> parameter, then use the <code>AdminUpdateUserAttributes</code> or <code>UpdateUserAttributes</code> API operation to modify the value of any additional attributes.</p>
/// </note>
/// </dd>
/// <dt>
/// SOFTWARE_TOKEN_MFA
/// </dt>
/// <dd>
/// <p><code>"ChallengeName": "SOFTWARE_TOKEN_MFA", "ChallengeResponses": {"USERNAME": "\[username\]", "SOFTWARE_TOKEN_MFA_CODE": \[authenticator_code\]}</code></p>
/// </dd>
/// <dt>
/// DEVICE_SRP_AUTH
/// </dt>
/// <dd>
/// <p><code>"ChallengeName": "DEVICE_SRP_AUTH", "ChallengeResponses": {"USERNAME": "\[username\]", "DEVICE_KEY": "\[device_key\]", "SRP_A": "\[srp_a\]"}</code></p>
/// </dd>
/// <dt>
/// DEVICE_PASSWORD_VERIFIER
/// </dt>
/// <dd>
/// <p><code>"ChallengeName": "DEVICE_PASSWORD_VERIFIER", "ChallengeResponses": {"DEVICE_KEY": "\[device_key\]", "PASSWORD_CLAIM_SIGNATURE": "\[claim_signature\]", "PASSWORD_CLAIM_SECRET_BLOCK": "\[secret_block\]", "TIMESTAMP": \[timestamp\], "USERNAME": "\[username\]"}</code></p>
/// </dd>
/// <dt>
/// MFA_SETUP
/// </dt>
/// <dd>
/// <p><code>"ChallengeName": "MFA_SETUP", "ChallengeResponses": {"USERNAME": "\[username\]"}, "SESSION": "\[Session ID from VerifySoftwareToken\]"</code></p>
/// </dd>
/// <dt>
/// SELECT_MFA_TYPE
/// </dt>
/// <dd>
/// <p><code>"ChallengeName": "SELECT_MFA_TYPE", "ChallengeResponses": {"USERNAME": "\[username\]", "ANSWER": "\[SMS_MFA or SOFTWARE_TOKEN_MFA\]"}</code></p>
/// </dd>
/// </dl>
/// <p>For more information about <code>SECRET_HASH</code>, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/signing-up-users-in-your-app.html#cognito-user-pools-computing-secret-hash">Computing secret hash values</a>. For information about <code>DEVICE_KEY</code>, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-device-tracking.html">Working with user devices in your user pool</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ChallengeResponseType {
    /// <p>The type of challenge that your previous authentication request returned in the parameter <code>ChallengeName</code>, for example <code>SMS_MFA</code>.</p>
    pub challenge_name: ::std::option::Option<crate::types::ChallengeName>,
    /// <p>The set of key-value pairs that provides a response to the requested challenge.</p>
    pub challenge_response: ::std::option::Option<crate::types::ChallengeResponse>,
}
impl ChallengeResponseType {
    /// <p>The type of challenge that your previous authentication request returned in the parameter <code>ChallengeName</code>, for example <code>SMS_MFA</code>.</p>
    pub fn challenge_name(&self) -> ::std::option::Option<&crate::types::ChallengeName> {
        self.challenge_name.as_ref()
    }
    /// <p>The set of key-value pairs that provides a response to the requested challenge.</p>
    pub fn challenge_response(&self) -> ::std::option::Option<&crate::types::ChallengeResponse> {
        self.challenge_response.as_ref()
    }
}
impl ChallengeResponseType {
    /// Creates a new builder-style object to manufacture [`ChallengeResponseType`](crate::types::ChallengeResponseType).
    pub fn builder() -> crate::types::builders::ChallengeResponseTypeBuilder {
        crate::types::builders::ChallengeResponseTypeBuilder::default()
    }
}

/// A builder for [`ChallengeResponseType`](crate::types::ChallengeResponseType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ChallengeResponseTypeBuilder {
    pub(crate) challenge_name: ::std::option::Option<crate::types::ChallengeName>,
    pub(crate) challenge_response: ::std::option::Option<crate::types::ChallengeResponse>,
}
impl ChallengeResponseTypeBuilder {
    /// <p>The type of challenge that your previous authentication request returned in the parameter <code>ChallengeName</code>, for example <code>SMS_MFA</code>.</p>
    pub fn challenge_name(mut self, input: crate::types::ChallengeName) -> Self {
        self.challenge_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of challenge that your previous authentication request returned in the parameter <code>ChallengeName</code>, for example <code>SMS_MFA</code>.</p>
    pub fn set_challenge_name(mut self, input: ::std::option::Option<crate::types::ChallengeName>) -> Self {
        self.challenge_name = input;
        self
    }
    /// <p>The type of challenge that your previous authentication request returned in the parameter <code>ChallengeName</code>, for example <code>SMS_MFA</code>.</p>
    pub fn get_challenge_name(&self) -> &::std::option::Option<crate::types::ChallengeName> {
        &self.challenge_name
    }
    /// <p>The set of key-value pairs that provides a response to the requested challenge.</p>
    pub fn challenge_response(mut self, input: crate::types::ChallengeResponse) -> Self {
        self.challenge_response = ::std::option::Option::Some(input);
        self
    }
    /// <p>The set of key-value pairs that provides a response to the requested challenge.</p>
    pub fn set_challenge_response(mut self, input: ::std::option::Option<crate::types::ChallengeResponse>) -> Self {
        self.challenge_response = input;
        self
    }
    /// <p>The set of key-value pairs that provides a response to the requested challenge.</p>
    pub fn get_challenge_response(&self) -> &::std::option::Option<crate::types::ChallengeResponse> {
        &self.challenge_response
    }
    /// Consumes the builder and constructs a [`ChallengeResponseType`](crate::types::ChallengeResponseType).
    pub fn build(self) -> crate::types::ChallengeResponseType {
        crate::types::ChallengeResponseType {
            challenge_name: self.challenge_name,
            challenge_response: self.challenge_response,
        }
    }
}
