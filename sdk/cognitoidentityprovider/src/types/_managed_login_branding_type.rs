// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A managed login branding style that's assigned to a user pool app client.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ManagedLoginBrandingType {
    /// <p>The ID of the managed login branding style.</p>
    pub managed_login_branding_id: ::std::option::Option<::std::string::String>,
    /// <p>The user pool where the branding style is assigned.</p>
    pub user_pool_id: ::std::option::Option<::std::string::String>,
    /// <p>When true, applies the default branding style options. This option reverts to default style options that are managed by Amazon Cognito. You can modify them later in the branding designer.</p>
    /// <p>When you specify <code>true</code> for this option, you must also omit values for <code>Settings</code> and <code>Assets</code> in the request.</p>
    pub use_cognito_provided_values: bool,
    /// <p>A JSON file, encoded as a <code>Document</code> type, with the the settings that you want to apply to your style.</p>
    pub settings: ::std::option::Option<::aws_smithy_types::Document>,
    /// <p>An array of image files that you want to apply to roles like backgrounds, logos, and icons. Each object must also indicate whether it is for dark mode, light mode, or browser-adaptive mode.</p>
    pub assets: ::std::option::Option<::std::vec::Vec<crate::types::AssetType>>,
    /// <p>The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub last_modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ManagedLoginBrandingType {
    /// <p>The ID of the managed login branding style.</p>
    pub fn managed_login_branding_id(&self) -> ::std::option::Option<&str> {
        self.managed_login_branding_id.as_deref()
    }
    /// <p>The user pool where the branding style is assigned.</p>
    pub fn user_pool_id(&self) -> ::std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>When true, applies the default branding style options. This option reverts to default style options that are managed by Amazon Cognito. You can modify them later in the branding designer.</p>
    /// <p>When you specify <code>true</code> for this option, you must also omit values for <code>Settings</code> and <code>Assets</code> in the request.</p>
    pub fn use_cognito_provided_values(&self) -> bool {
        self.use_cognito_provided_values
    }
    /// <p>A JSON file, encoded as a <code>Document</code> type, with the the settings that you want to apply to your style.</p>
    pub fn settings(&self) -> ::std::option::Option<&::aws_smithy_types::Document> {
        self.settings.as_ref()
    }
    /// <p>An array of image files that you want to apply to roles like backgrounds, logos, and icons. Each object must also indicate whether it is for dark mode, light mode, or browser-adaptive mode.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.assets.is_none()`.
    pub fn assets(&self) -> &[crate::types::AssetType] {
        self.assets.as_deref().unwrap_or_default()
    }
    /// <p>The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn creation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn last_modified_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_date.as_ref()
    }
}
impl ManagedLoginBrandingType {
    /// Creates a new builder-style object to manufacture [`ManagedLoginBrandingType`](crate::types::ManagedLoginBrandingType).
    pub fn builder() -> crate::types::builders::ManagedLoginBrandingTypeBuilder {
        crate::types::builders::ManagedLoginBrandingTypeBuilder::default()
    }
}

/// A builder for [`ManagedLoginBrandingType`](crate::types::ManagedLoginBrandingType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ManagedLoginBrandingTypeBuilder {
    pub(crate) managed_login_branding_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) use_cognito_provided_values: ::std::option::Option<bool>,
    pub(crate) settings: ::std::option::Option<::aws_smithy_types::Document>,
    pub(crate) assets: ::std::option::Option<::std::vec::Vec<crate::types::AssetType>>,
    pub(crate) creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ManagedLoginBrandingTypeBuilder {
    /// <p>The ID of the managed login branding style.</p>
    pub fn managed_login_branding_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.managed_login_branding_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the managed login branding style.</p>
    pub fn set_managed_login_branding_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.managed_login_branding_id = input;
        self
    }
    /// <p>The ID of the managed login branding style.</p>
    pub fn get_managed_login_branding_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.managed_login_branding_id
    }
    /// <p>The user pool where the branding style is assigned.</p>
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user pool where the branding style is assigned.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The user pool where the branding style is assigned.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_pool_id
    }
    /// <p>When true, applies the default branding style options. This option reverts to default style options that are managed by Amazon Cognito. You can modify them later in the branding designer.</p>
    /// <p>When you specify <code>true</code> for this option, you must also omit values for <code>Settings</code> and <code>Assets</code> in the request.</p>
    pub fn use_cognito_provided_values(mut self, input: bool) -> Self {
        self.use_cognito_provided_values = ::std::option::Option::Some(input);
        self
    }
    /// <p>When true, applies the default branding style options. This option reverts to default style options that are managed by Amazon Cognito. You can modify them later in the branding designer.</p>
    /// <p>When you specify <code>true</code> for this option, you must also omit values for <code>Settings</code> and <code>Assets</code> in the request.</p>
    pub fn set_use_cognito_provided_values(mut self, input: ::std::option::Option<bool>) -> Self {
        self.use_cognito_provided_values = input;
        self
    }
    /// <p>When true, applies the default branding style options. This option reverts to default style options that are managed by Amazon Cognito. You can modify them later in the branding designer.</p>
    /// <p>When you specify <code>true</code> for this option, you must also omit values for <code>Settings</code> and <code>Assets</code> in the request.</p>
    pub fn get_use_cognito_provided_values(&self) -> &::std::option::Option<bool> {
        &self.use_cognito_provided_values
    }
    /// <p>A JSON file, encoded as a <code>Document</code> type, with the the settings that you want to apply to your style.</p>
    pub fn settings(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>A JSON file, encoded as a <code>Document</code> type, with the the settings that you want to apply to your style.</p>
    pub fn set_settings(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.settings = input;
        self
    }
    /// <p>A JSON file, encoded as a <code>Document</code> type, with the the settings that you want to apply to your style.</p>
    pub fn get_settings(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.settings
    }
    /// Appends an item to `assets`.
    ///
    /// To override the contents of this collection use [`set_assets`](Self::set_assets).
    ///
    /// <p>An array of image files that you want to apply to roles like backgrounds, logos, and icons. Each object must also indicate whether it is for dark mode, light mode, or browser-adaptive mode.</p>
    pub fn assets(mut self, input: crate::types::AssetType) -> Self {
        let mut v = self.assets.unwrap_or_default();
        v.push(input);
        self.assets = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of image files that you want to apply to roles like backgrounds, logos, and icons. Each object must also indicate whether it is for dark mode, light mode, or browser-adaptive mode.</p>
    pub fn set_assets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AssetType>>) -> Self {
        self.assets = input;
        self
    }
    /// <p>An array of image files that you want to apply to roles like backgrounds, logos, and icons. Each object must also indicate whether it is for dark mode, light mode, or browser-adaptive mode.</p>
    pub fn get_assets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AssetType>> {
        &self.assets
    }
    /// <p>The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn creation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date
    }
    /// <p>The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn last_modified_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn set_last_modified_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn get_last_modified_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_date
    }
    /// Consumes the builder and constructs a [`ManagedLoginBrandingType`](crate::types::ManagedLoginBrandingType).
    pub fn build(self) -> crate::types::ManagedLoginBrandingType {
        crate::types::ManagedLoginBrandingType {
            managed_login_branding_id: self.managed_login_branding_id,
            user_pool_id: self.user_pool_id,
            use_cognito_provided_values: self.use_cognito_provided_values.unwrap_or_default(),
            settings: self.settings,
            assets: self.assets,
            creation_date: self.creation_date,
            last_modified_date: self.last_modified_date,
        }
    }
}
