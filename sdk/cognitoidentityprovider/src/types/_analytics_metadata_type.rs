// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information that your application adds to authentication requests. Applies an endpoint ID to the analytics data that your user pool sends to Amazon Pinpoint.</p>
/// <p>An endpoint ID uniquely identifies a mobile device, email address or phone number that can receive messages from Amazon Pinpoint analytics. For more information about Amazon Web Services Regions that can contain Amazon Pinpoint resources for use with Amazon Cognito user pools, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-pinpoint-integration.html">Using Amazon Pinpoint analytics with Amazon Cognito user pools</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalyticsMetadataType {
    /// <p>The endpoint ID. Information that you want to pass to Amazon Pinpoint about where to send notifications.</p>
    pub analytics_endpoint_id: ::std::option::Option<::std::string::String>,
}
impl AnalyticsMetadataType {
    /// <p>The endpoint ID. Information that you want to pass to Amazon Pinpoint about where to send notifications.</p>
    pub fn analytics_endpoint_id(&self) -> ::std::option::Option<&str> {
        self.analytics_endpoint_id.as_deref()
    }
}
impl AnalyticsMetadataType {
    /// Creates a new builder-style object to manufacture [`AnalyticsMetadataType`](crate::types::AnalyticsMetadataType).
    pub fn builder() -> crate::types::builders::AnalyticsMetadataTypeBuilder {
        crate::types::builders::AnalyticsMetadataTypeBuilder::default()
    }
}

/// A builder for [`AnalyticsMetadataType`](crate::types::AnalyticsMetadataType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AnalyticsMetadataTypeBuilder {
    pub(crate) analytics_endpoint_id: ::std::option::Option<::std::string::String>,
}
impl AnalyticsMetadataTypeBuilder {
    /// <p>The endpoint ID. Information that you want to pass to Amazon Pinpoint about where to send notifications.</p>
    pub fn analytics_endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.analytics_endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The endpoint ID. Information that you want to pass to Amazon Pinpoint about where to send notifications.</p>
    pub fn set_analytics_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.analytics_endpoint_id = input;
        self
    }
    /// <p>The endpoint ID. Information that you want to pass to Amazon Pinpoint about where to send notifications.</p>
    pub fn get_analytics_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.analytics_endpoint_id
    }
    /// Consumes the builder and constructs a [`AnalyticsMetadataType`](crate::types::AnalyticsMetadataType).
    pub fn build(self) -> crate::types::AnalyticsMetadataType {
        crate::types::AnalyticsMetadataType {
            analytics_endpoint_id: self.analytics_endpoint_id,
        }
    }
}
