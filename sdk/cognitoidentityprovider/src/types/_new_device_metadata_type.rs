// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information that your user pool responds with in <code>AuthenticationResult</code>when you configure it to remember devices and a user signs in with an unrecognized device. Amazon Cognito presents a new device key that you can use to set up <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-device-tracking.html">device authentication</a> in a "Remember me on this device" authentication model.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NewDeviceMetadataType {
    /// <p>The device key, an identifier used in generating the <code>DEVICE_PASSWORD_VERIFIER</code> for device SRP authentication.</p>
    pub device_key: ::std::option::Option<::std::string::String>,
    /// <p>The device group key, an identifier used in generating the <code>DEVICE_PASSWORD_VERIFIER</code> for device SRP authentication.</p>
    pub device_group_key: ::std::option::Option<::std::string::String>,
}
impl NewDeviceMetadataType {
    /// <p>The device key, an identifier used in generating the <code>DEVICE_PASSWORD_VERIFIER</code> for device SRP authentication.</p>
    pub fn device_key(&self) -> ::std::option::Option<&str> {
        self.device_key.as_deref()
    }
    /// <p>The device group key, an identifier used in generating the <code>DEVICE_PASSWORD_VERIFIER</code> for device SRP authentication.</p>
    pub fn device_group_key(&self) -> ::std::option::Option<&str> {
        self.device_group_key.as_deref()
    }
}
impl NewDeviceMetadataType {
    /// Creates a new builder-style object to manufacture [`NewDeviceMetadataType`](crate::types::NewDeviceMetadataType).
    pub fn builder() -> crate::types::builders::NewDeviceMetadataTypeBuilder {
        crate::types::builders::NewDeviceMetadataTypeBuilder::default()
    }
}

/// A builder for [`NewDeviceMetadataType`](crate::types::NewDeviceMetadataType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NewDeviceMetadataTypeBuilder {
    pub(crate) device_key: ::std::option::Option<::std::string::String>,
    pub(crate) device_group_key: ::std::option::Option<::std::string::String>,
}
impl NewDeviceMetadataTypeBuilder {
    /// <p>The device key, an identifier used in generating the <code>DEVICE_PASSWORD_VERIFIER</code> for device SRP authentication.</p>
    pub fn device_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The device key, an identifier used in generating the <code>DEVICE_PASSWORD_VERIFIER</code> for device SRP authentication.</p>
    pub fn set_device_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_key = input;
        self
    }
    /// <p>The device key, an identifier used in generating the <code>DEVICE_PASSWORD_VERIFIER</code> for device SRP authentication.</p>
    pub fn get_device_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_key
    }
    /// <p>The device group key, an identifier used in generating the <code>DEVICE_PASSWORD_VERIFIER</code> for device SRP authentication.</p>
    pub fn device_group_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_group_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The device group key, an identifier used in generating the <code>DEVICE_PASSWORD_VERIFIER</code> for device SRP authentication.</p>
    pub fn set_device_group_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_group_key = input;
        self
    }
    /// <p>The device group key, an identifier used in generating the <code>DEVICE_PASSWORD_VERIFIER</code> for device SRP authentication.</p>
    pub fn get_device_group_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_group_key
    }
    /// Consumes the builder and constructs a [`NewDeviceMetadataType`](crate::types::NewDeviceMetadataType).
    pub fn build(self) -> crate::types::NewDeviceMetadataType {
        crate::types::NewDeviceMetadataType {
            device_key: self.device_key,
            device_group_key: self.device_group_key,
        }
    }
}
