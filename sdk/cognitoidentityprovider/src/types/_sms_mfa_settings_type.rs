// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A user's preference for using SMS message multi-factor authentication (MFA). Turns SMS MFA on and off, and can set SMS as preferred when other MFA options are available. You can't turn off SMS MFA for any of your users when MFA is required in your user pool; you can only set the type that your user prefers.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SmsMfaSettingsType {
    /// <p>Specifies whether SMS message MFA is activated. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.</p>
    pub enabled: bool,
    /// <p>Specifies whether SMS is the preferred MFA method. If true, your user pool prompts the specified user for a code delivered by SMS message after username-password sign-in succeeds.</p>
    pub preferred_mfa: bool,
}
impl SmsMfaSettingsType {
    /// <p>Specifies whether SMS message MFA is activated. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>Specifies whether SMS is the preferred MFA method. If true, your user pool prompts the specified user for a code delivered by SMS message after username-password sign-in succeeds.</p>
    pub fn preferred_mfa(&self) -> bool {
        self.preferred_mfa
    }
}
impl SmsMfaSettingsType {
    /// Creates a new builder-style object to manufacture [`SmsMfaSettingsType`](crate::types::SmsMfaSettingsType).
    pub fn builder() -> crate::types::builders::SmsMfaSettingsTypeBuilder {
        crate::types::builders::SmsMfaSettingsTypeBuilder::default()
    }
}

/// A builder for [`SmsMfaSettingsType`](crate::types::SmsMfaSettingsType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SmsMfaSettingsTypeBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) preferred_mfa: ::std::option::Option<bool>,
}
impl SmsMfaSettingsTypeBuilder {
    /// <p>Specifies whether SMS message MFA is activated. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether SMS message MFA is activated. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Specifies whether SMS message MFA is activated. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>Specifies whether SMS is the preferred MFA method. If true, your user pool prompts the specified user for a code delivered by SMS message after username-password sign-in succeeds.</p>
    pub fn preferred_mfa(mut self, input: bool) -> Self {
        self.preferred_mfa = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether SMS is the preferred MFA method. If true, your user pool prompts the specified user for a code delivered by SMS message after username-password sign-in succeeds.</p>
    pub fn set_preferred_mfa(mut self, input: ::std::option::Option<bool>) -> Self {
        self.preferred_mfa = input;
        self
    }
    /// <p>Specifies whether SMS is the preferred MFA method. If true, your user pool prompts the specified user for a code delivered by SMS message after username-password sign-in succeeds.</p>
    pub fn get_preferred_mfa(&self) -> &::std::option::Option<bool> {
        &self.preferred_mfa
    }
    /// Consumes the builder and constructs a [`SmsMfaSettingsType`](crate::types::SmsMfaSettingsType).
    pub fn build(self) -> crate::types::SmsMfaSettingsType {
        crate::types::SmsMfaSettingsType {
            enabled: self.enabled.unwrap_or_default(),
            preferred_mfa: self.preferred_mfa.unwrap_or_default(),
        }
    }
}
