// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An image file from a managed login branding style in a user pool.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssetType {
    /// <p>The category that the image corresponds to in your managed login configuration. Managed login has asset categories for different types of logos, backgrounds, and icons.</p>
    pub category: crate::types::AssetCategoryType,
    /// <p>The display-mode target of the asset: light, dark, or browser-adaptive. For example, Amazon Cognito displays a dark-mode image only when the browser or application is in dark mode, but displays a browser-adaptive file in all contexts.</p>
    pub color_mode: crate::types::ColorSchemeModeType,
    /// <p>The file type of the image file.</p>
    pub extension: crate::types::AssetExtensionType,
    /// <p>The image file, in Base64-encoded binary.</p>
    pub bytes: ::std::option::Option<::aws_smithy_types::Blob>,
    /// <p>The ID of the asset.</p>
    pub resource_id: ::std::option::Option<::std::string::String>,
}
impl AssetType {
    /// <p>The category that the image corresponds to in your managed login configuration. Managed login has asset categories for different types of logos, backgrounds, and icons.</p>
    pub fn category(&self) -> &crate::types::AssetCategoryType {
        &self.category
    }
    /// <p>The display-mode target of the asset: light, dark, or browser-adaptive. For example, Amazon Cognito displays a dark-mode image only when the browser or application is in dark mode, but displays a browser-adaptive file in all contexts.</p>
    pub fn color_mode(&self) -> &crate::types::ColorSchemeModeType {
        &self.color_mode
    }
    /// <p>The file type of the image file.</p>
    pub fn extension(&self) -> &crate::types::AssetExtensionType {
        &self.extension
    }
    /// <p>The image file, in Base64-encoded binary.</p>
    pub fn bytes(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.bytes.as_ref()
    }
    /// <p>The ID of the asset.</p>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
}
impl AssetType {
    /// Creates a new builder-style object to manufacture [`AssetType`](crate::types::AssetType).
    pub fn builder() -> crate::types::builders::AssetTypeBuilder {
        crate::types::builders::AssetTypeBuilder::default()
    }
}

/// A builder for [`AssetType`](crate::types::AssetType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssetTypeBuilder {
    pub(crate) category: ::std::option::Option<crate::types::AssetCategoryType>,
    pub(crate) color_mode: ::std::option::Option<crate::types::ColorSchemeModeType>,
    pub(crate) extension: ::std::option::Option<crate::types::AssetExtensionType>,
    pub(crate) bytes: ::std::option::Option<::aws_smithy_types::Blob>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
}
impl AssetTypeBuilder {
    /// <p>The category that the image corresponds to in your managed login configuration. Managed login has asset categories for different types of logos, backgrounds, and icons.</p>
    /// This field is required.
    pub fn category(mut self, input: crate::types::AssetCategoryType) -> Self {
        self.category = ::std::option::Option::Some(input);
        self
    }
    /// <p>The category that the image corresponds to in your managed login configuration. Managed login has asset categories for different types of logos, backgrounds, and icons.</p>
    pub fn set_category(mut self, input: ::std::option::Option<crate::types::AssetCategoryType>) -> Self {
        self.category = input;
        self
    }
    /// <p>The category that the image corresponds to in your managed login configuration. Managed login has asset categories for different types of logos, backgrounds, and icons.</p>
    pub fn get_category(&self) -> &::std::option::Option<crate::types::AssetCategoryType> {
        &self.category
    }
    /// <p>The display-mode target of the asset: light, dark, or browser-adaptive. For example, Amazon Cognito displays a dark-mode image only when the browser or application is in dark mode, but displays a browser-adaptive file in all contexts.</p>
    /// This field is required.
    pub fn color_mode(mut self, input: crate::types::ColorSchemeModeType) -> Self {
        self.color_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The display-mode target of the asset: light, dark, or browser-adaptive. For example, Amazon Cognito displays a dark-mode image only when the browser or application is in dark mode, but displays a browser-adaptive file in all contexts.</p>
    pub fn set_color_mode(mut self, input: ::std::option::Option<crate::types::ColorSchemeModeType>) -> Self {
        self.color_mode = input;
        self
    }
    /// <p>The display-mode target of the asset: light, dark, or browser-adaptive. For example, Amazon Cognito displays a dark-mode image only when the browser or application is in dark mode, but displays a browser-adaptive file in all contexts.</p>
    pub fn get_color_mode(&self) -> &::std::option::Option<crate::types::ColorSchemeModeType> {
        &self.color_mode
    }
    /// <p>The file type of the image file.</p>
    /// This field is required.
    pub fn extension(mut self, input: crate::types::AssetExtensionType) -> Self {
        self.extension = ::std::option::Option::Some(input);
        self
    }
    /// <p>The file type of the image file.</p>
    pub fn set_extension(mut self, input: ::std::option::Option<crate::types::AssetExtensionType>) -> Self {
        self.extension = input;
        self
    }
    /// <p>The file type of the image file.</p>
    pub fn get_extension(&self) -> &::std::option::Option<crate::types::AssetExtensionType> {
        &self.extension
    }
    /// <p>The image file, in Base64-encoded binary.</p>
    pub fn bytes(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.bytes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The image file, in Base64-encoded binary.</p>
    pub fn set_bytes(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.bytes = input;
        self
    }
    /// <p>The image file, in Base64-encoded binary.</p>
    pub fn get_bytes(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.bytes
    }
    /// <p>The ID of the asset.</p>
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the asset.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The ID of the asset.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// Consumes the builder and constructs a [`AssetType`](crate::types::AssetType).
    /// This method will fail if any of the following fields are not set:
    /// - [`category`](crate::types::builders::AssetTypeBuilder::category)
    /// - [`color_mode`](crate::types::builders::AssetTypeBuilder::color_mode)
    /// - [`extension`](crate::types::builders::AssetTypeBuilder::extension)
    pub fn build(self) -> ::std::result::Result<crate::types::AssetType, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AssetType {
            category: self.category.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "category",
                    "category was not specified but it is required when building AssetType",
                )
            })?,
            color_mode: self.color_mode.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "color_mode",
                    "color_mode was not specified but it is required when building AssetType",
                )
            })?,
            extension: self.extension.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "extension",
                    "extension was not specified but it is required when building AssetType",
                )
            })?,
            bytes: self.bytes,
            resource_id: self.resource_id,
        })
    }
}
