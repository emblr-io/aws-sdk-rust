// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A Secure Remote Password (SRP) value that your application generates when you register a user's device. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-device-tracking.html#user-pools-remembered-devices-getting-a-device-key">Getting a device key</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeviceSecretVerifierConfigType {
    /// <p>A password verifier for a user's device. Used in SRP authentication.</p>
    pub password_verifier: ::std::option::Option<::std::string::String>,
    /// <p>The salt that you want to use in SRP authentication with the user's device.</p>
    pub salt: ::std::option::Option<::std::string::String>,
}
impl DeviceSecretVerifierConfigType {
    /// <p>A password verifier for a user's device. Used in SRP authentication.</p>
    pub fn password_verifier(&self) -> ::std::option::Option<&str> {
        self.password_verifier.as_deref()
    }
    /// <p>The salt that you want to use in SRP authentication with the user's device.</p>
    pub fn salt(&self) -> ::std::option::Option<&str> {
        self.salt.as_deref()
    }
}
impl DeviceSecretVerifierConfigType {
    /// Creates a new builder-style object to manufacture [`DeviceSecretVerifierConfigType`](crate::types::DeviceSecretVerifierConfigType).
    pub fn builder() -> crate::types::builders::DeviceSecretVerifierConfigTypeBuilder {
        crate::types::builders::DeviceSecretVerifierConfigTypeBuilder::default()
    }
}

/// A builder for [`DeviceSecretVerifierConfigType`](crate::types::DeviceSecretVerifierConfigType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeviceSecretVerifierConfigTypeBuilder {
    pub(crate) password_verifier: ::std::option::Option<::std::string::String>,
    pub(crate) salt: ::std::option::Option<::std::string::String>,
}
impl DeviceSecretVerifierConfigTypeBuilder {
    /// <p>A password verifier for a user's device. Used in SRP authentication.</p>
    pub fn password_verifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.password_verifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A password verifier for a user's device. Used in SRP authentication.</p>
    pub fn set_password_verifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.password_verifier = input;
        self
    }
    /// <p>A password verifier for a user's device. Used in SRP authentication.</p>
    pub fn get_password_verifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.password_verifier
    }
    /// <p>The salt that you want to use in SRP authentication with the user's device.</p>
    pub fn salt(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.salt = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The salt that you want to use in SRP authentication with the user's device.</p>
    pub fn set_salt(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.salt = input;
        self
    }
    /// <p>The salt that you want to use in SRP authentication with the user's device.</p>
    pub fn get_salt(&self) -> &::std::option::Option<::std::string::String> {
        &self.salt
    }
    /// Consumes the builder and constructs a [`DeviceSecretVerifierConfigType`](crate::types::DeviceSecretVerifierConfigType).
    pub fn build(self) -> crate::types::DeviceSecretVerifierConfigType {
        crate::types::DeviceSecretVerifierConfigType {
            password_verifier: self.password_verifier,
            salt: self.salt,
        }
    }
}
