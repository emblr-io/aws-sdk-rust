// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A user's preference for using time-based one-time password (TOTP) multi-factor authentication (MFA). Turns TOTP MFA on and off, and can set TOTP as preferred when other MFA options are available. You can't turn off TOTP MFA for any of your users when MFA is required in your user pool; you can only set the type that your user prefers.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SoftwareTokenMfaSettingsType {
    /// <p>Specifies whether software token MFA is activated. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.</p>
    pub enabled: bool,
    /// <p>Specifies whether software token MFA is the preferred MFA method.</p>
    pub preferred_mfa: bool,
}
impl SoftwareTokenMfaSettingsType {
    /// <p>Specifies whether software token MFA is activated. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>Specifies whether software token MFA is the preferred MFA method.</p>
    pub fn preferred_mfa(&self) -> bool {
        self.preferred_mfa
    }
}
impl SoftwareTokenMfaSettingsType {
    /// Creates a new builder-style object to manufacture [`SoftwareTokenMfaSettingsType`](crate::types::SoftwareTokenMfaSettingsType).
    pub fn builder() -> crate::types::builders::SoftwareTokenMfaSettingsTypeBuilder {
        crate::types::builders::SoftwareTokenMfaSettingsTypeBuilder::default()
    }
}

/// A builder for [`SoftwareTokenMfaSettingsType`](crate::types::SoftwareTokenMfaSettingsType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SoftwareTokenMfaSettingsTypeBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) preferred_mfa: ::std::option::Option<bool>,
}
impl SoftwareTokenMfaSettingsTypeBuilder {
    /// <p>Specifies whether software token MFA is activated. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether software token MFA is activated. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Specifies whether software token MFA is activated. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>Specifies whether software token MFA is the preferred MFA method.</p>
    pub fn preferred_mfa(mut self, input: bool) -> Self {
        self.preferred_mfa = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether software token MFA is the preferred MFA method.</p>
    pub fn set_preferred_mfa(mut self, input: ::std::option::Option<bool>) -> Self {
        self.preferred_mfa = input;
        self
    }
    /// <p>Specifies whether software token MFA is the preferred MFA method.</p>
    pub fn get_preferred_mfa(&self) -> &::std::option::Option<bool> {
        &self.preferred_mfa
    }
    /// Consumes the builder and constructs a [`SoftwareTokenMfaSettingsType`](crate::types::SoftwareTokenMfaSettingsType).
    pub fn build(self) -> crate::types::SoftwareTokenMfaSettingsType {
        crate::types::SoftwareTokenMfaSettingsType {
            enabled: self.enabled.unwrap_or_default(),
            preferred_mfa: self.preferred_mfa.unwrap_or_default(),
        }
    }
}
