// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The device-remembering configuration for a user pool.</p><note>
/// <p>When you provide a value for any property of <code>DeviceConfiguration</code>, you activate the device remembering for the user pool.</p>
/// </note>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeviceConfigurationType {
    /// <p>When true, a remembered device can sign in with device authentication instead of SMS and time-based one-time password (TOTP) factors for multi-factor authentication (MFA).</p><note>
    /// <p>Whether or not <code>ChallengeRequiredOnNewDevice</code> is true, users who sign in with devices that have not been confirmed or remembered must still provide a second factor in a user pool that requires MFA.</p>
    /// </note>
    pub challenge_required_on_new_device: bool,
    /// <p>When true, Amazon Cognito doesn't automatically remember a user's device when your app sends a <code>ConfirmDevice</code> API request. In your app, create a prompt for your user to choose whether they want to remember their device. Return the user's choice in an <code>UpdateDeviceStatus</code> API request.</p>
    /// <p>When <code>DeviceOnlyRememberedOnUserPrompt</code> is <code>false</code>, Amazon Cognito immediately remembers devices that you register in a <code>ConfirmDevice</code> API request.</p>
    pub device_only_remembered_on_user_prompt: bool,
}
impl DeviceConfigurationType {
    /// <p>When true, a remembered device can sign in with device authentication instead of SMS and time-based one-time password (TOTP) factors for multi-factor authentication (MFA).</p><note>
    /// <p>Whether or not <code>ChallengeRequiredOnNewDevice</code> is true, users who sign in with devices that have not been confirmed or remembered must still provide a second factor in a user pool that requires MFA.</p>
    /// </note>
    pub fn challenge_required_on_new_device(&self) -> bool {
        self.challenge_required_on_new_device
    }
    /// <p>When true, Amazon Cognito doesn't automatically remember a user's device when your app sends a <code>ConfirmDevice</code> API request. In your app, create a prompt for your user to choose whether they want to remember their device. Return the user's choice in an <code>UpdateDeviceStatus</code> API request.</p>
    /// <p>When <code>DeviceOnlyRememberedOnUserPrompt</code> is <code>false</code>, Amazon Cognito immediately remembers devices that you register in a <code>ConfirmDevice</code> API request.</p>
    pub fn device_only_remembered_on_user_prompt(&self) -> bool {
        self.device_only_remembered_on_user_prompt
    }
}
impl DeviceConfigurationType {
    /// Creates a new builder-style object to manufacture [`DeviceConfigurationType`](crate::types::DeviceConfigurationType).
    pub fn builder() -> crate::types::builders::DeviceConfigurationTypeBuilder {
        crate::types::builders::DeviceConfigurationTypeBuilder::default()
    }
}

/// A builder for [`DeviceConfigurationType`](crate::types::DeviceConfigurationType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeviceConfigurationTypeBuilder {
    pub(crate) challenge_required_on_new_device: ::std::option::Option<bool>,
    pub(crate) device_only_remembered_on_user_prompt: ::std::option::Option<bool>,
}
impl DeviceConfigurationTypeBuilder {
    /// <p>When true, a remembered device can sign in with device authentication instead of SMS and time-based one-time password (TOTP) factors for multi-factor authentication (MFA).</p><note>
    /// <p>Whether or not <code>ChallengeRequiredOnNewDevice</code> is true, users who sign in with devices that have not been confirmed or remembered must still provide a second factor in a user pool that requires MFA.</p>
    /// </note>
    pub fn challenge_required_on_new_device(mut self, input: bool) -> Self {
        self.challenge_required_on_new_device = ::std::option::Option::Some(input);
        self
    }
    /// <p>When true, a remembered device can sign in with device authentication instead of SMS and time-based one-time password (TOTP) factors for multi-factor authentication (MFA).</p><note>
    /// <p>Whether or not <code>ChallengeRequiredOnNewDevice</code> is true, users who sign in with devices that have not been confirmed or remembered must still provide a second factor in a user pool that requires MFA.</p>
    /// </note>
    pub fn set_challenge_required_on_new_device(mut self, input: ::std::option::Option<bool>) -> Self {
        self.challenge_required_on_new_device = input;
        self
    }
    /// <p>When true, a remembered device can sign in with device authentication instead of SMS and time-based one-time password (TOTP) factors for multi-factor authentication (MFA).</p><note>
    /// <p>Whether or not <code>ChallengeRequiredOnNewDevice</code> is true, users who sign in with devices that have not been confirmed or remembered must still provide a second factor in a user pool that requires MFA.</p>
    /// </note>
    pub fn get_challenge_required_on_new_device(&self) -> &::std::option::Option<bool> {
        &self.challenge_required_on_new_device
    }
    /// <p>When true, Amazon Cognito doesn't automatically remember a user's device when your app sends a <code>ConfirmDevice</code> API request. In your app, create a prompt for your user to choose whether they want to remember their device. Return the user's choice in an <code>UpdateDeviceStatus</code> API request.</p>
    /// <p>When <code>DeviceOnlyRememberedOnUserPrompt</code> is <code>false</code>, Amazon Cognito immediately remembers devices that you register in a <code>ConfirmDevice</code> API request.</p>
    pub fn device_only_remembered_on_user_prompt(mut self, input: bool) -> Self {
        self.device_only_remembered_on_user_prompt = ::std::option::Option::Some(input);
        self
    }
    /// <p>When true, Amazon Cognito doesn't automatically remember a user's device when your app sends a <code>ConfirmDevice</code> API request. In your app, create a prompt for your user to choose whether they want to remember their device. Return the user's choice in an <code>UpdateDeviceStatus</code> API request.</p>
    /// <p>When <code>DeviceOnlyRememberedOnUserPrompt</code> is <code>false</code>, Amazon Cognito immediately remembers devices that you register in a <code>ConfirmDevice</code> API request.</p>
    pub fn set_device_only_remembered_on_user_prompt(mut self, input: ::std::option::Option<bool>) -> Self {
        self.device_only_remembered_on_user_prompt = input;
        self
    }
    /// <p>When true, Amazon Cognito doesn't automatically remember a user's device when your app sends a <code>ConfirmDevice</code> API request. In your app, create a prompt for your user to choose whether they want to remember their device. Return the user's choice in an <code>UpdateDeviceStatus</code> API request.</p>
    /// <p>When <code>DeviceOnlyRememberedOnUserPrompt</code> is <code>false</code>, Amazon Cognito immediately remembers devices that you register in a <code>ConfirmDevice</code> API request.</p>
    pub fn get_device_only_remembered_on_user_prompt(&self) -> &::std::option::Option<bool> {
        &self.device_only_remembered_on_user_prompt
    }
    /// Consumes the builder and constructs a [`DeviceConfigurationType`](crate::types::DeviceConfigurationType).
    pub fn build(self) -> crate::types::DeviceConfigurationType {
        crate::types::DeviceConfigurationType {
            challenge_required_on_new_device: self.challenge_required_on_new_device.unwrap_or_default(),
            device_only_remembered_on_user_prompt: self.device_only_remembered_on_user_prompt.unwrap_or_default(),
        }
    }
}
