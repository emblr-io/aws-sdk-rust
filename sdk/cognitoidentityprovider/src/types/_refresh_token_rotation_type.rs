// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of your app client for refresh token rotation. When enabled, your app client issues new ID, access, and refresh tokens when users renew their sessions with refresh tokens. When disabled, token refresh issues only ID and access tokens.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RefreshTokenRotationType {
    /// <p>The state of refresh token rotation for the current app client.</p>
    pub feature: crate::types::FeatureType,
    /// <p>When you request a token refresh with <code>GetTokensFromRefreshToken</code>, the original refresh token that you're rotating out can remain valid for a period of time of up to 60 seconds. This allows for client-side retries. When <code>RetryGracePeriodSeconds</code> is <code>0</code>, the grace period is disabled and a successful request immediately invalidates the submitted refresh token.</p>
    pub retry_grace_period_seconds: ::std::option::Option<i32>,
}
impl RefreshTokenRotationType {
    /// <p>The state of refresh token rotation for the current app client.</p>
    pub fn feature(&self) -> &crate::types::FeatureType {
        &self.feature
    }
    /// <p>When you request a token refresh with <code>GetTokensFromRefreshToken</code>, the original refresh token that you're rotating out can remain valid for a period of time of up to 60 seconds. This allows for client-side retries. When <code>RetryGracePeriodSeconds</code> is <code>0</code>, the grace period is disabled and a successful request immediately invalidates the submitted refresh token.</p>
    pub fn retry_grace_period_seconds(&self) -> ::std::option::Option<i32> {
        self.retry_grace_period_seconds
    }
}
impl RefreshTokenRotationType {
    /// Creates a new builder-style object to manufacture [`RefreshTokenRotationType`](crate::types::RefreshTokenRotationType).
    pub fn builder() -> crate::types::builders::RefreshTokenRotationTypeBuilder {
        crate::types::builders::RefreshTokenRotationTypeBuilder::default()
    }
}

/// A builder for [`RefreshTokenRotationType`](crate::types::RefreshTokenRotationType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RefreshTokenRotationTypeBuilder {
    pub(crate) feature: ::std::option::Option<crate::types::FeatureType>,
    pub(crate) retry_grace_period_seconds: ::std::option::Option<i32>,
}
impl RefreshTokenRotationTypeBuilder {
    /// <p>The state of refresh token rotation for the current app client.</p>
    /// This field is required.
    pub fn feature(mut self, input: crate::types::FeatureType) -> Self {
        self.feature = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of refresh token rotation for the current app client.</p>
    pub fn set_feature(mut self, input: ::std::option::Option<crate::types::FeatureType>) -> Self {
        self.feature = input;
        self
    }
    /// <p>The state of refresh token rotation for the current app client.</p>
    pub fn get_feature(&self) -> &::std::option::Option<crate::types::FeatureType> {
        &self.feature
    }
    /// <p>When you request a token refresh with <code>GetTokensFromRefreshToken</code>, the original refresh token that you're rotating out can remain valid for a period of time of up to 60 seconds. This allows for client-side retries. When <code>RetryGracePeriodSeconds</code> is <code>0</code>, the grace period is disabled and a successful request immediately invalidates the submitted refresh token.</p>
    pub fn retry_grace_period_seconds(mut self, input: i32) -> Self {
        self.retry_grace_period_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>When you request a token refresh with <code>GetTokensFromRefreshToken</code>, the original refresh token that you're rotating out can remain valid for a period of time of up to 60 seconds. This allows for client-side retries. When <code>RetryGracePeriodSeconds</code> is <code>0</code>, the grace period is disabled and a successful request immediately invalidates the submitted refresh token.</p>
    pub fn set_retry_grace_period_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.retry_grace_period_seconds = input;
        self
    }
    /// <p>When you request a token refresh with <code>GetTokensFromRefreshToken</code>, the original refresh token that you're rotating out can remain valid for a period of time of up to 60 seconds. This allows for client-side retries. When <code>RetryGracePeriodSeconds</code> is <code>0</code>, the grace period is disabled and a successful request immediately invalidates the submitted refresh token.</p>
    pub fn get_retry_grace_period_seconds(&self) -> &::std::option::Option<i32> {
        &self.retry_grace_period_seconds
    }
    /// Consumes the builder and constructs a [`RefreshTokenRotationType`](crate::types::RefreshTokenRotationType).
    /// This method will fail if any of the following fields are not set:
    /// - [`feature`](crate::types::builders::RefreshTokenRotationTypeBuilder::feature)
    pub fn build(self) -> ::std::result::Result<crate::types::RefreshTokenRotationType, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RefreshTokenRotationType {
            feature: self.feature.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "feature",
                    "feature was not specified but it is required when building RefreshTokenRotationType",
                )
            })?,
            retry_grace_period_seconds: self.retry_grace_period_seconds,
        })
    }
}
