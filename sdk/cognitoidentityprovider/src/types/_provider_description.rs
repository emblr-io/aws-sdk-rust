// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a user pool identity provider (IdP), including name and type.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProviderDescription {
    /// <p>The name of the IdP, for example <code>MySAMLProvider</code>.</p>
    pub provider_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of the provider, for example <code>SAML</code>. Amazon Cognito supports SAML 2.0, OIDC, and social IdPs. User pools list supported social IdPs by name in this response parameter: Facebook, Google, Login with Amazon, and Sign in with Apple.</p>
    pub provider_type: ::std::option::Option<crate::types::IdentityProviderTypeType>,
    /// <p>The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub last_modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ProviderDescription {
    /// <p>The name of the IdP, for example <code>MySAMLProvider</code>.</p>
    pub fn provider_name(&self) -> ::std::option::Option<&str> {
        self.provider_name.as_deref()
    }
    /// <p>The type of the provider, for example <code>SAML</code>. Amazon Cognito supports SAML 2.0, OIDC, and social IdPs. User pools list supported social IdPs by name in this response parameter: Facebook, Google, Login with Amazon, and Sign in with Apple.</p>
    pub fn provider_type(&self) -> ::std::option::Option<&crate::types::IdentityProviderTypeType> {
        self.provider_type.as_ref()
    }
    /// <p>The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn last_modified_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_date.as_ref()
    }
    /// <p>The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn creation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
}
impl ProviderDescription {
    /// Creates a new builder-style object to manufacture [`ProviderDescription`](crate::types::ProviderDescription).
    pub fn builder() -> crate::types::builders::ProviderDescriptionBuilder {
        crate::types::builders::ProviderDescriptionBuilder::default()
    }
}

/// A builder for [`ProviderDescription`](crate::types::ProviderDescription).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProviderDescriptionBuilder {
    pub(crate) provider_name: ::std::option::Option<::std::string::String>,
    pub(crate) provider_type: ::std::option::Option<crate::types::IdentityProviderTypeType>,
    pub(crate) last_modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ProviderDescriptionBuilder {
    /// <p>The name of the IdP, for example <code>MySAMLProvider</code>.</p>
    pub fn provider_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provider_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the IdP, for example <code>MySAMLProvider</code>.</p>
    pub fn set_provider_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provider_name = input;
        self
    }
    /// <p>The name of the IdP, for example <code>MySAMLProvider</code>.</p>
    pub fn get_provider_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.provider_name
    }
    /// <p>The type of the provider, for example <code>SAML</code>. Amazon Cognito supports SAML 2.0, OIDC, and social IdPs. User pools list supported social IdPs by name in this response parameter: Facebook, Google, Login with Amazon, and Sign in with Apple.</p>
    pub fn provider_type(mut self, input: crate::types::IdentityProviderTypeType) -> Self {
        self.provider_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the provider, for example <code>SAML</code>. Amazon Cognito supports SAML 2.0, OIDC, and social IdPs. User pools list supported social IdPs by name in this response parameter: Facebook, Google, Login with Amazon, and Sign in with Apple.</p>
    pub fn set_provider_type(mut self, input: ::std::option::Option<crate::types::IdentityProviderTypeType>) -> Self {
        self.provider_type = input;
        self
    }
    /// <p>The type of the provider, for example <code>SAML</code>. Amazon Cognito supports SAML 2.0, OIDC, and social IdPs. User pools list supported social IdPs by name in this response parameter: Facebook, Google, Login with Amazon, and Sign in with Apple.</p>
    pub fn get_provider_type(&self) -> &::std::option::Option<crate::types::IdentityProviderTypeType> {
        &self.provider_type
    }
    /// <p>The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn last_modified_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn set_last_modified_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn get_last_modified_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_date
    }
    /// <p>The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn creation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date
    }
    /// Consumes the builder and constructs a [`ProviderDescription`](crate::types::ProviderDescription).
    pub fn build(self) -> crate::types::ProviderDescription {
        crate::types::ProviderDescription {
            provider_name: self.provider_name,
            provider_type: self.provider_type,
            last_modified_date: self.last_modified_date,
            creation_date: self.creation_date,
        }
    }
}
