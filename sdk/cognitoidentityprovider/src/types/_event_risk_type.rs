// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The risk evaluation by adaptive authentication, as displayed in an <code>AdminListUserAuthEvents</code> response. Contains evaluations of compromised-credentials detection and assessed risk level and action taken by adaptive authentication.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EventRiskType {
    /// <p>The action taken by adaptive authentication. If <code>NoRisk</code>, your user pool took no action. If <code>AccountTakeover</code>, your user pool applied the adaptive authentication automated response that you configured. If <code>Block</code>, your user pool prevented the attempt.</p>
    pub risk_decision: ::std::option::Option<crate::types::RiskDecisionType>,
    /// <p>The risk level that adaptive authentication assessed for the authentication event.</p>
    pub risk_level: ::std::option::Option<crate::types::RiskLevelType>,
    /// <p>Indicates whether compromised credentials were detected during an authentication event.</p>
    pub compromised_credentials_detected: ::std::option::Option<bool>,
}
impl EventRiskType {
    /// <p>The action taken by adaptive authentication. If <code>NoRisk</code>, your user pool took no action. If <code>AccountTakeover</code>, your user pool applied the adaptive authentication automated response that you configured. If <code>Block</code>, your user pool prevented the attempt.</p>
    pub fn risk_decision(&self) -> ::std::option::Option<&crate::types::RiskDecisionType> {
        self.risk_decision.as_ref()
    }
    /// <p>The risk level that adaptive authentication assessed for the authentication event.</p>
    pub fn risk_level(&self) -> ::std::option::Option<&crate::types::RiskLevelType> {
        self.risk_level.as_ref()
    }
    /// <p>Indicates whether compromised credentials were detected during an authentication event.</p>
    pub fn compromised_credentials_detected(&self) -> ::std::option::Option<bool> {
        self.compromised_credentials_detected
    }
}
impl EventRiskType {
    /// Creates a new builder-style object to manufacture [`EventRiskType`](crate::types::EventRiskType).
    pub fn builder() -> crate::types::builders::EventRiskTypeBuilder {
        crate::types::builders::EventRiskTypeBuilder::default()
    }
}

/// A builder for [`EventRiskType`](crate::types::EventRiskType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EventRiskTypeBuilder {
    pub(crate) risk_decision: ::std::option::Option<crate::types::RiskDecisionType>,
    pub(crate) risk_level: ::std::option::Option<crate::types::RiskLevelType>,
    pub(crate) compromised_credentials_detected: ::std::option::Option<bool>,
}
impl EventRiskTypeBuilder {
    /// <p>The action taken by adaptive authentication. If <code>NoRisk</code>, your user pool took no action. If <code>AccountTakeover</code>, your user pool applied the adaptive authentication automated response that you configured. If <code>Block</code>, your user pool prevented the attempt.</p>
    pub fn risk_decision(mut self, input: crate::types::RiskDecisionType) -> Self {
        self.risk_decision = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action taken by adaptive authentication. If <code>NoRisk</code>, your user pool took no action. If <code>AccountTakeover</code>, your user pool applied the adaptive authentication automated response that you configured. If <code>Block</code>, your user pool prevented the attempt.</p>
    pub fn set_risk_decision(mut self, input: ::std::option::Option<crate::types::RiskDecisionType>) -> Self {
        self.risk_decision = input;
        self
    }
    /// <p>The action taken by adaptive authentication. If <code>NoRisk</code>, your user pool took no action. If <code>AccountTakeover</code>, your user pool applied the adaptive authentication automated response that you configured. If <code>Block</code>, your user pool prevented the attempt.</p>
    pub fn get_risk_decision(&self) -> &::std::option::Option<crate::types::RiskDecisionType> {
        &self.risk_decision
    }
    /// <p>The risk level that adaptive authentication assessed for the authentication event.</p>
    pub fn risk_level(mut self, input: crate::types::RiskLevelType) -> Self {
        self.risk_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The risk level that adaptive authentication assessed for the authentication event.</p>
    pub fn set_risk_level(mut self, input: ::std::option::Option<crate::types::RiskLevelType>) -> Self {
        self.risk_level = input;
        self
    }
    /// <p>The risk level that adaptive authentication assessed for the authentication event.</p>
    pub fn get_risk_level(&self) -> &::std::option::Option<crate::types::RiskLevelType> {
        &self.risk_level
    }
    /// <p>Indicates whether compromised credentials were detected during an authentication event.</p>
    pub fn compromised_credentials_detected(mut self, input: bool) -> Self {
        self.compromised_credentials_detected = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether compromised credentials were detected during an authentication event.</p>
    pub fn set_compromised_credentials_detected(mut self, input: ::std::option::Option<bool>) -> Self {
        self.compromised_credentials_detected = input;
        self
    }
    /// <p>Indicates whether compromised credentials were detected during an authentication event.</p>
    pub fn get_compromised_credentials_detected(&self) -> &::std::option::Option<bool> {
        &self.compromised_credentials_detected
    }
    /// Consumes the builder and constructs a [`EventRiskType`](crate::types::EventRiskType).
    pub fn build(self) -> crate::types::EventRiskType {
        crate::types::EventRiskType {
            risk_decision: self.risk_decision,
            risk_level: self.risk_level,
            compromised_credentials_detected: self.compromised_credentials_detected,
        }
    }
}
