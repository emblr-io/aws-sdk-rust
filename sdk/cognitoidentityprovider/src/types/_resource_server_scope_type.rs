// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>One custom scope associated with a user pool resource server. This data type is a member of <code>ResourceServerScopeType</code>. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-define-resource-servers.html"> Scopes, M2M, and API authorization with resource servers</a>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceServerScopeType {
    /// <p>The name of the scope. Amazon Cognito renders custom scopes in the format <code>resourceServerIdentifier/ScopeName</code>. For example, if this parameter is <code>exampleScope</code> in the resource server with the identifier <code>exampleResourceServer</code>, you request and receive the scope <code>exampleResourceServer/exampleScope</code>.</p>
    pub scope_name: ::std::string::String,
    /// <p>A friendly description of a custom scope.</p>
    pub scope_description: ::std::string::String,
}
impl ResourceServerScopeType {
    /// <p>The name of the scope. Amazon Cognito renders custom scopes in the format <code>resourceServerIdentifier/ScopeName</code>. For example, if this parameter is <code>exampleScope</code> in the resource server with the identifier <code>exampleResourceServer</code>, you request and receive the scope <code>exampleResourceServer/exampleScope</code>.</p>
    pub fn scope_name(&self) -> &str {
        use std::ops::Deref;
        self.scope_name.deref()
    }
    /// <p>A friendly description of a custom scope.</p>
    pub fn scope_description(&self) -> &str {
        use std::ops::Deref;
        self.scope_description.deref()
    }
}
impl ResourceServerScopeType {
    /// Creates a new builder-style object to manufacture [`ResourceServerScopeType`](crate::types::ResourceServerScopeType).
    pub fn builder() -> crate::types::builders::ResourceServerScopeTypeBuilder {
        crate::types::builders::ResourceServerScopeTypeBuilder::default()
    }
}

/// A builder for [`ResourceServerScopeType`](crate::types::ResourceServerScopeType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ResourceServerScopeTypeBuilder {
    pub(crate) scope_name: ::std::option::Option<::std::string::String>,
    pub(crate) scope_description: ::std::option::Option<::std::string::String>,
}
impl ResourceServerScopeTypeBuilder {
    /// <p>The name of the scope. Amazon Cognito renders custom scopes in the format <code>resourceServerIdentifier/ScopeName</code>. For example, if this parameter is <code>exampleScope</code> in the resource server with the identifier <code>exampleResourceServer</code>, you request and receive the scope <code>exampleResourceServer/exampleScope</code>.</p>
    /// This field is required.
    pub fn scope_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scope_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the scope. Amazon Cognito renders custom scopes in the format <code>resourceServerIdentifier/ScopeName</code>. For example, if this parameter is <code>exampleScope</code> in the resource server with the identifier <code>exampleResourceServer</code>, you request and receive the scope <code>exampleResourceServer/exampleScope</code>.</p>
    pub fn set_scope_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scope_name = input;
        self
    }
    /// <p>The name of the scope. Amazon Cognito renders custom scopes in the format <code>resourceServerIdentifier/ScopeName</code>. For example, if this parameter is <code>exampleScope</code> in the resource server with the identifier <code>exampleResourceServer</code>, you request and receive the scope <code>exampleResourceServer/exampleScope</code>.</p>
    pub fn get_scope_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.scope_name
    }
    /// <p>A friendly description of a custom scope.</p>
    /// This field is required.
    pub fn scope_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scope_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A friendly description of a custom scope.</p>
    pub fn set_scope_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scope_description = input;
        self
    }
    /// <p>A friendly description of a custom scope.</p>
    pub fn get_scope_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.scope_description
    }
    /// Consumes the builder and constructs a [`ResourceServerScopeType`](crate::types::ResourceServerScopeType).
    /// This method will fail if any of the following fields are not set:
    /// - [`scope_name`](crate::types::builders::ResourceServerScopeTypeBuilder::scope_name)
    /// - [`scope_description`](crate::types::builders::ResourceServerScopeTypeBuilder::scope_description)
    pub fn build(self) -> ::std::result::Result<crate::types::ResourceServerScopeType, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ResourceServerScopeType {
            scope_name: self.scope_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "scope_name",
                    "scope_name was not specified but it is required when building ResourceServerScopeType",
                )
            })?,
            scope_description: self.scope_description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "scope_description",
                    "scope_description was not specified but it is required when building ResourceServerScopeType",
                )
            })?,
        })
    }
}
