// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of account-takeover actions for each level of risk that Amazon Cognito might assess with threat protection features.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccountTakeoverActionsType {
    /// <p>The action that you assign to a low-risk assessment by threat protection.</p>
    pub low_action: ::std::option::Option<crate::types::AccountTakeoverActionType>,
    /// <p>The action that you assign to a medium-risk assessment by threat protection.</p>
    pub medium_action: ::std::option::Option<crate::types::AccountTakeoverActionType>,
    /// <p>The action that you assign to a high-risk assessment by threat protection.</p>
    pub high_action: ::std::option::Option<crate::types::AccountTakeoverActionType>,
}
impl AccountTakeoverActionsType {
    /// <p>The action that you assign to a low-risk assessment by threat protection.</p>
    pub fn low_action(&self) -> ::std::option::Option<&crate::types::AccountTakeoverActionType> {
        self.low_action.as_ref()
    }
    /// <p>The action that you assign to a medium-risk assessment by threat protection.</p>
    pub fn medium_action(&self) -> ::std::option::Option<&crate::types::AccountTakeoverActionType> {
        self.medium_action.as_ref()
    }
    /// <p>The action that you assign to a high-risk assessment by threat protection.</p>
    pub fn high_action(&self) -> ::std::option::Option<&crate::types::AccountTakeoverActionType> {
        self.high_action.as_ref()
    }
}
impl AccountTakeoverActionsType {
    /// Creates a new builder-style object to manufacture [`AccountTakeoverActionsType`](crate::types::AccountTakeoverActionsType).
    pub fn builder() -> crate::types::builders::AccountTakeoverActionsTypeBuilder {
        crate::types::builders::AccountTakeoverActionsTypeBuilder::default()
    }
}

/// A builder for [`AccountTakeoverActionsType`](crate::types::AccountTakeoverActionsType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AccountTakeoverActionsTypeBuilder {
    pub(crate) low_action: ::std::option::Option<crate::types::AccountTakeoverActionType>,
    pub(crate) medium_action: ::std::option::Option<crate::types::AccountTakeoverActionType>,
    pub(crate) high_action: ::std::option::Option<crate::types::AccountTakeoverActionType>,
}
impl AccountTakeoverActionsTypeBuilder {
    /// <p>The action that you assign to a low-risk assessment by threat protection.</p>
    pub fn low_action(mut self, input: crate::types::AccountTakeoverActionType) -> Self {
        self.low_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action that you assign to a low-risk assessment by threat protection.</p>
    pub fn set_low_action(mut self, input: ::std::option::Option<crate::types::AccountTakeoverActionType>) -> Self {
        self.low_action = input;
        self
    }
    /// <p>The action that you assign to a low-risk assessment by threat protection.</p>
    pub fn get_low_action(&self) -> &::std::option::Option<crate::types::AccountTakeoverActionType> {
        &self.low_action
    }
    /// <p>The action that you assign to a medium-risk assessment by threat protection.</p>
    pub fn medium_action(mut self, input: crate::types::AccountTakeoverActionType) -> Self {
        self.medium_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action that you assign to a medium-risk assessment by threat protection.</p>
    pub fn set_medium_action(mut self, input: ::std::option::Option<crate::types::AccountTakeoverActionType>) -> Self {
        self.medium_action = input;
        self
    }
    /// <p>The action that you assign to a medium-risk assessment by threat protection.</p>
    pub fn get_medium_action(&self) -> &::std::option::Option<crate::types::AccountTakeoverActionType> {
        &self.medium_action
    }
    /// <p>The action that you assign to a high-risk assessment by threat protection.</p>
    pub fn high_action(mut self, input: crate::types::AccountTakeoverActionType) -> Self {
        self.high_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action that you assign to a high-risk assessment by threat protection.</p>
    pub fn set_high_action(mut self, input: ::std::option::Option<crate::types::AccountTakeoverActionType>) -> Self {
        self.high_action = input;
        self
    }
    /// <p>The action that you assign to a high-risk assessment by threat protection.</p>
    pub fn get_high_action(&self) -> &::std::option::Option<crate::types::AccountTakeoverActionType> {
        &self.high_action
    }
    /// Consumes the builder and constructs a [`AccountTakeoverActionsType`](crate::types::AccountTakeoverActionsType).
    pub fn build(self) -> crate::types::AccountTakeoverActionsType {
        crate::types::AccountTakeoverActionsType {
            low_action: self.low_action,
            medium_action: self.medium_action,
            high_action: self.high_action,
        }
    }
}
