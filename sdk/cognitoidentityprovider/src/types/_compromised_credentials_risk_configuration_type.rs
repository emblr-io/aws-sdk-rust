// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings for compromised-credentials actions and authentication-event sources with threat protection in full-function <code>ENFORCED</code> mode.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CompromisedCredentialsRiskConfigurationType {
    /// <p>Settings for the sign-in activity where you want to configure compromised-credentials actions. Defaults to all events.</p>
    pub event_filter: ::std::option::Option<::std::vec::Vec<crate::types::EventFilterType>>,
    /// <p>Settings for the actions that you want your user pool to take when Amazon Cognito detects compromised credentials.</p>
    pub actions: ::std::option::Option<crate::types::CompromisedCredentialsActionsType>,
}
impl CompromisedCredentialsRiskConfigurationType {
    /// <p>Settings for the sign-in activity where you want to configure compromised-credentials actions. Defaults to all events.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.event_filter.is_none()`.
    pub fn event_filter(&self) -> &[crate::types::EventFilterType] {
        self.event_filter.as_deref().unwrap_or_default()
    }
    /// <p>Settings for the actions that you want your user pool to take when Amazon Cognito detects compromised credentials.</p>
    pub fn actions(&self) -> ::std::option::Option<&crate::types::CompromisedCredentialsActionsType> {
        self.actions.as_ref()
    }
}
impl CompromisedCredentialsRiskConfigurationType {
    /// Creates a new builder-style object to manufacture [`CompromisedCredentialsRiskConfigurationType`](crate::types::CompromisedCredentialsRiskConfigurationType).
    pub fn builder() -> crate::types::builders::CompromisedCredentialsRiskConfigurationTypeBuilder {
        crate::types::builders::CompromisedCredentialsRiskConfigurationTypeBuilder::default()
    }
}

/// A builder for [`CompromisedCredentialsRiskConfigurationType`](crate::types::CompromisedCredentialsRiskConfigurationType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CompromisedCredentialsRiskConfigurationTypeBuilder {
    pub(crate) event_filter: ::std::option::Option<::std::vec::Vec<crate::types::EventFilterType>>,
    pub(crate) actions: ::std::option::Option<crate::types::CompromisedCredentialsActionsType>,
}
impl CompromisedCredentialsRiskConfigurationTypeBuilder {
    /// Appends an item to `event_filter`.
    ///
    /// To override the contents of this collection use [`set_event_filter`](Self::set_event_filter).
    ///
    /// <p>Settings for the sign-in activity where you want to configure compromised-credentials actions. Defaults to all events.</p>
    pub fn event_filter(mut self, input: crate::types::EventFilterType) -> Self {
        let mut v = self.event_filter.unwrap_or_default();
        v.push(input);
        self.event_filter = ::std::option::Option::Some(v);
        self
    }
    /// <p>Settings for the sign-in activity where you want to configure compromised-credentials actions. Defaults to all events.</p>
    pub fn set_event_filter(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EventFilterType>>) -> Self {
        self.event_filter = input;
        self
    }
    /// <p>Settings for the sign-in activity where you want to configure compromised-credentials actions. Defaults to all events.</p>
    pub fn get_event_filter(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EventFilterType>> {
        &self.event_filter
    }
    /// <p>Settings for the actions that you want your user pool to take when Amazon Cognito detects compromised credentials.</p>
    /// This field is required.
    pub fn actions(mut self, input: crate::types::CompromisedCredentialsActionsType) -> Self {
        self.actions = ::std::option::Option::Some(input);
        self
    }
    /// <p>Settings for the actions that you want your user pool to take when Amazon Cognito detects compromised credentials.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<crate::types::CompromisedCredentialsActionsType>) -> Self {
        self.actions = input;
        self
    }
    /// <p>Settings for the actions that you want your user pool to take when Amazon Cognito detects compromised credentials.</p>
    pub fn get_actions(&self) -> &::std::option::Option<crate::types::CompromisedCredentialsActionsType> {
        &self.actions
    }
    /// Consumes the builder and constructs a [`CompromisedCredentialsRiskConfigurationType`](crate::types::CompromisedCredentialsRiskConfigurationType).
    pub fn build(self) -> crate::types::CompromisedCredentialsRiskConfigurationType {
        crate::types::CompromisedCredentialsRiskConfigurationType {
            event_filter: self.event_filter,
            actions: self.actions,
        }
    }
}
