// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The minimum and maximum length values of an attribute that is of the string type, for example <code>custom:department</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StringAttributeConstraintsType {
    /// <p>The minimum length of a string attribute value.</p>
    pub min_length: ::std::option::Option<::std::string::String>,
    /// <p>The maximum length of a string attribute value. Must be a number less than or equal to <code>2^1023</code>, represented as a string with a length of 131072 characters or fewer.</p>
    pub max_length: ::std::option::Option<::std::string::String>,
}
impl StringAttributeConstraintsType {
    /// <p>The minimum length of a string attribute value.</p>
    pub fn min_length(&self) -> ::std::option::Option<&str> {
        self.min_length.as_deref()
    }
    /// <p>The maximum length of a string attribute value. Must be a number less than or equal to <code>2^1023</code>, represented as a string with a length of 131072 characters or fewer.</p>
    pub fn max_length(&self) -> ::std::option::Option<&str> {
        self.max_length.as_deref()
    }
}
impl StringAttributeConstraintsType {
    /// Creates a new builder-style object to manufacture [`StringAttributeConstraintsType`](crate::types::StringAttributeConstraintsType).
    pub fn builder() -> crate::types::builders::StringAttributeConstraintsTypeBuilder {
        crate::types::builders::StringAttributeConstraintsTypeBuilder::default()
    }
}

/// A builder for [`StringAttributeConstraintsType`](crate::types::StringAttributeConstraintsType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StringAttributeConstraintsTypeBuilder {
    pub(crate) min_length: ::std::option::Option<::std::string::String>,
    pub(crate) max_length: ::std::option::Option<::std::string::String>,
}
impl StringAttributeConstraintsTypeBuilder {
    /// <p>The minimum length of a string attribute value.</p>
    pub fn min_length(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.min_length = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The minimum length of a string attribute value.</p>
    pub fn set_min_length(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.min_length = input;
        self
    }
    /// <p>The minimum length of a string attribute value.</p>
    pub fn get_min_length(&self) -> &::std::option::Option<::std::string::String> {
        &self.min_length
    }
    /// <p>The maximum length of a string attribute value. Must be a number less than or equal to <code>2^1023</code>, represented as a string with a length of 131072 characters or fewer.</p>
    pub fn max_length(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.max_length = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The maximum length of a string attribute value. Must be a number less than or equal to <code>2^1023</code>, represented as a string with a length of 131072 characters or fewer.</p>
    pub fn set_max_length(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.max_length = input;
        self
    }
    /// <p>The maximum length of a string attribute value. Must be a number less than or equal to <code>2^1023</code>, represented as a string with a length of 131072 characters or fewer.</p>
    pub fn get_max_length(&self) -> &::std::option::Option<::std::string::String> {
        &self.max_length
    }
    /// Consumes the builder and constructs a [`StringAttributeConstraintsType`](crate::types::StringAttributeConstraintsType).
    pub fn build(self) -> crate::types::StringAttributeConstraintsType {
        crate::types::StringAttributeConstraintsType {
            min_length: self.min_length,
            max_length: self.max_length,
        }
    }
}
