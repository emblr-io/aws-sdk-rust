// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateFirewallRuleInput {
    /// <p>The unique identifier of the firewall rule group for the rule.</p>
    pub firewall_rule_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the domain list to use in the rule.</p>
    pub firewall_domain_list_id: ::std::option::Option<::std::string::String>,
    /// <p>The DNS Firewall Advanced rule ID.</p>
    pub firewall_threat_protection_id: ::std::option::Option<::std::string::String>,
    /// <p>The setting that determines the processing order of the rule in the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.</p>
    /// <p>You must specify a unique priority for each rule in a rule group. To make it easier to insert rules later, leave space between the numbers, for example, use 100, 200, and so on. You can change the priority setting for the rules in a rule group at any time.</p>
    pub priority: ::std::option::Option<i32>,
    /// <p>The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list, or a threat in a DNS Firewall Advanced rule:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALLOW</code> - Permit the request to go through. Not available for DNS Firewall Advanced rules.</p></li>
    /// <li>
    /// <p><code>ALERT</code> - Permit the request to go through but send an alert to the logs.</p></li>
    /// <li>
    /// <p><code>BLOCK</code> - Disallow the request. This option requires additional details in the rule's <code>BlockResponse</code>.</p></li>
    /// </ul>
    pub action: ::std::option::Option<crate::types::Action>,
    /// <p>The way that you want DNS Firewall to block the request. Used for the rule action setting <code>BLOCK</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>NODATA</code> - Respond indicating that the query was successful, but no response is available for it.</p></li>
    /// <li>
    /// <p><code>NXDOMAIN</code> - Respond indicating that the domain name that's in the query doesn't exist.</p></li>
    /// <li>
    /// <p><code>OVERRIDE</code> - Provide a custom override in the response. This option requires custom handling details in the rule's <code>BlockOverride*</code> settings.</p></li>
    /// </ul>
    pub block_response: ::std::option::Option<crate::types::BlockResponse>,
    /// <p>The custom DNS record to send back in response to the query. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub block_override_domain: ::std::option::Option<::std::string::String>,
    /// <p>The DNS record's type. This determines the format of the record value that you provided in <code>BlockOverrideDomain</code>. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub block_override_dns_type: ::std::option::Option<crate::types::BlockOverrideDnsType>,
    /// <p>The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub block_override_ttl: ::std::option::Option<i32>,
    /// <p>The name of the rule.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>How you want the the rule to evaluate DNS redirection in the DNS redirection chain, such as CNAME or DNAME.</p>
    /// <p><code>INSPECT_REDIRECTION_DOMAIN</code>: (Default) inspects all domains in the redirection chain. The individual domains in the redirection chain must be added to the domain list.</p>
    /// <p><code>TRUST_REDIRECTION_DOMAIN</code>: Inspects only the first domain in the redirection chain. You don't need to add the subsequent domains in the domain in the redirection list to the domain list.</p>
    pub firewall_domain_redirection_action: ::std::option::Option<crate::types::FirewallDomainRedirectionAction>,
    /// <p>The DNS query type you want the rule to evaluate. Allowed values are;</p>
    /// <ul>
    /// <li>
    /// <p>A: Returns an IPv4 address.</p></li>
    /// <li>
    /// <p>AAAA: Returns an Ipv6 address.</p></li>
    /// <li>
    /// <p>CAA: Restricts CAs that can create SSL/TLS certifications for the domain.</p></li>
    /// <li>
    /// <p>CNAME: Returns another domain name.</p></li>
    /// <li>
    /// <p>DS: Record that identifies the DNSSEC signing key of a delegated zone.</p></li>
    /// <li>
    /// <p>MX: Specifies mail servers.</p></li>
    /// <li>
    /// <p>NAPTR: Regular-expression-based rewriting of domain names.</p></li>
    /// <li>
    /// <p>NS: Authoritative name servers.</p></li>
    /// <li>
    /// <p>PTR: Maps an IP address to a domain name.</p></li>
    /// <li>
    /// <p>SOA: Start of authority record for the zone.</p></li>
    /// <li>
    /// <p>SPF: Lists the servers authorized to send emails from a domain.</p></li>
    /// <li>
    /// <p>SRV: Application specific values that identify servers.</p></li>
    /// <li>
    /// <p>TXT: Verifies email senders and application-specific values.</p></li>
    /// <li>
    /// <p>A query type you define by using the DNS type ID, for example 28 for AAAA. The values must be defined as TYPENUMBER, where the NUMBER can be 1-65334, for example, TYPE28. For more information, see <a href="https://en.wikipedia.org/wiki/List_of_DNS_record_types">List of DNS record types</a>.</p><note>
    /// <p>If you set up a firewall BLOCK rule with action NXDOMAIN on query type equals AAAA, this action will not be applied to synthetic IPv6 addresses generated when DNS64 is enabled.</p>
    /// </note></li>
    /// </ul>
    pub qtype: ::std::option::Option<::std::string::String>,
    /// <p>The type of the DNS Firewall Advanced rule. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>DGA</code>: Domain generation algorithms detection. DGAs are used by attackers to generate a large number of domains to to launch malware attacks.</p></li>
    /// <li>
    /// <p><code>DNS_TUNNELING</code>: DNS tunneling detection. DNS tunneling is used by attackers to exfiltrate data from the client by using the DNS tunnel without making a network connection to the client.</p></li>
    /// </ul>
    pub dns_threat_protection: ::std::option::Option<crate::types::DnsThreatProtection>,
    /// <p>The confidence threshold for DNS Firewall Advanced. You must provide this value when you create a DNS Firewall Advanced rule. The confidence level values mean:</p>
    /// <ul>
    /// <li>
    /// <p><code>LOW</code>: Provides the highest detection rate for threats, but also increases false positives.</p></li>
    /// <li>
    /// <p><code>MEDIUM</code>: Provides a balance between detecting threats and false positives.</p></li>
    /// <li>
    /// <p><code>HIGH</code>: Detects only the most well corroborated threats with a low rate of false positives.</p></li>
    /// </ul>
    pub confidence_threshold: ::std::option::Option<crate::types::ConfidenceThreshold>,
}
impl UpdateFirewallRuleInput {
    /// <p>The unique identifier of the firewall rule group for the rule.</p>
    pub fn firewall_rule_group_id(&self) -> ::std::option::Option<&str> {
        self.firewall_rule_group_id.as_deref()
    }
    /// <p>The ID of the domain list to use in the rule.</p>
    pub fn firewall_domain_list_id(&self) -> ::std::option::Option<&str> {
        self.firewall_domain_list_id.as_deref()
    }
    /// <p>The DNS Firewall Advanced rule ID.</p>
    pub fn firewall_threat_protection_id(&self) -> ::std::option::Option<&str> {
        self.firewall_threat_protection_id.as_deref()
    }
    /// <p>The setting that determines the processing order of the rule in the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.</p>
    /// <p>You must specify a unique priority for each rule in a rule group. To make it easier to insert rules later, leave space between the numbers, for example, use 100, 200, and so on. You can change the priority setting for the rules in a rule group at any time.</p>
    pub fn priority(&self) -> ::std::option::Option<i32> {
        self.priority
    }
    /// <p>The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list, or a threat in a DNS Firewall Advanced rule:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALLOW</code> - Permit the request to go through. Not available for DNS Firewall Advanced rules.</p></li>
    /// <li>
    /// <p><code>ALERT</code> - Permit the request to go through but send an alert to the logs.</p></li>
    /// <li>
    /// <p><code>BLOCK</code> - Disallow the request. This option requires additional details in the rule's <code>BlockResponse</code>.</p></li>
    /// </ul>
    pub fn action(&self) -> ::std::option::Option<&crate::types::Action> {
        self.action.as_ref()
    }
    /// <p>The way that you want DNS Firewall to block the request. Used for the rule action setting <code>BLOCK</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>NODATA</code> - Respond indicating that the query was successful, but no response is available for it.</p></li>
    /// <li>
    /// <p><code>NXDOMAIN</code> - Respond indicating that the domain name that's in the query doesn't exist.</p></li>
    /// <li>
    /// <p><code>OVERRIDE</code> - Provide a custom override in the response. This option requires custom handling details in the rule's <code>BlockOverride*</code> settings.</p></li>
    /// </ul>
    pub fn block_response(&self) -> ::std::option::Option<&crate::types::BlockResponse> {
        self.block_response.as_ref()
    }
    /// <p>The custom DNS record to send back in response to the query. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub fn block_override_domain(&self) -> ::std::option::Option<&str> {
        self.block_override_domain.as_deref()
    }
    /// <p>The DNS record's type. This determines the format of the record value that you provided in <code>BlockOverrideDomain</code>. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub fn block_override_dns_type(&self) -> ::std::option::Option<&crate::types::BlockOverrideDnsType> {
        self.block_override_dns_type.as_ref()
    }
    /// <p>The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub fn block_override_ttl(&self) -> ::std::option::Option<i32> {
        self.block_override_ttl
    }
    /// <p>The name of the rule.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>How you want the the rule to evaluate DNS redirection in the DNS redirection chain, such as CNAME or DNAME.</p>
    /// <p><code>INSPECT_REDIRECTION_DOMAIN</code>: (Default) inspects all domains in the redirection chain. The individual domains in the redirection chain must be added to the domain list.</p>
    /// <p><code>TRUST_REDIRECTION_DOMAIN</code>: Inspects only the first domain in the redirection chain. You don't need to add the subsequent domains in the domain in the redirection list to the domain list.</p>
    pub fn firewall_domain_redirection_action(&self) -> ::std::option::Option<&crate::types::FirewallDomainRedirectionAction> {
        self.firewall_domain_redirection_action.as_ref()
    }
    /// <p>The DNS query type you want the rule to evaluate. Allowed values are;</p>
    /// <ul>
    /// <li>
    /// <p>A: Returns an IPv4 address.</p></li>
    /// <li>
    /// <p>AAAA: Returns an Ipv6 address.</p></li>
    /// <li>
    /// <p>CAA: Restricts CAs that can create SSL/TLS certifications for the domain.</p></li>
    /// <li>
    /// <p>CNAME: Returns another domain name.</p></li>
    /// <li>
    /// <p>DS: Record that identifies the DNSSEC signing key of a delegated zone.</p></li>
    /// <li>
    /// <p>MX: Specifies mail servers.</p></li>
    /// <li>
    /// <p>NAPTR: Regular-expression-based rewriting of domain names.</p></li>
    /// <li>
    /// <p>NS: Authoritative name servers.</p></li>
    /// <li>
    /// <p>PTR: Maps an IP address to a domain name.</p></li>
    /// <li>
    /// <p>SOA: Start of authority record for the zone.</p></li>
    /// <li>
    /// <p>SPF: Lists the servers authorized to send emails from a domain.</p></li>
    /// <li>
    /// <p>SRV: Application specific values that identify servers.</p></li>
    /// <li>
    /// <p>TXT: Verifies email senders and application-specific values.</p></li>
    /// <li>
    /// <p>A query type you define by using the DNS type ID, for example 28 for AAAA. The values must be defined as TYPENUMBER, where the NUMBER can be 1-65334, for example, TYPE28. For more information, see <a href="https://en.wikipedia.org/wiki/List_of_DNS_record_types">List of DNS record types</a>.</p><note>
    /// <p>If you set up a firewall BLOCK rule with action NXDOMAIN on query type equals AAAA, this action will not be applied to synthetic IPv6 addresses generated when DNS64 is enabled.</p>
    /// </note></li>
    /// </ul>
    pub fn qtype(&self) -> ::std::option::Option<&str> {
        self.qtype.as_deref()
    }
    /// <p>The type of the DNS Firewall Advanced rule. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>DGA</code>: Domain generation algorithms detection. DGAs are used by attackers to generate a large number of domains to to launch malware attacks.</p></li>
    /// <li>
    /// <p><code>DNS_TUNNELING</code>: DNS tunneling detection. DNS tunneling is used by attackers to exfiltrate data from the client by using the DNS tunnel without making a network connection to the client.</p></li>
    /// </ul>
    pub fn dns_threat_protection(&self) -> ::std::option::Option<&crate::types::DnsThreatProtection> {
        self.dns_threat_protection.as_ref()
    }
    /// <p>The confidence threshold for DNS Firewall Advanced. You must provide this value when you create a DNS Firewall Advanced rule. The confidence level values mean:</p>
    /// <ul>
    /// <li>
    /// <p><code>LOW</code>: Provides the highest detection rate for threats, but also increases false positives.</p></li>
    /// <li>
    /// <p><code>MEDIUM</code>: Provides a balance between detecting threats and false positives.</p></li>
    /// <li>
    /// <p><code>HIGH</code>: Detects only the most well corroborated threats with a low rate of false positives.</p></li>
    /// </ul>
    pub fn confidence_threshold(&self) -> ::std::option::Option<&crate::types::ConfidenceThreshold> {
        self.confidence_threshold.as_ref()
    }
}
impl UpdateFirewallRuleInput {
    /// Creates a new builder-style object to manufacture [`UpdateFirewallRuleInput`](crate::operation::update_firewall_rule::UpdateFirewallRuleInput).
    pub fn builder() -> crate::operation::update_firewall_rule::builders::UpdateFirewallRuleInputBuilder {
        crate::operation::update_firewall_rule::builders::UpdateFirewallRuleInputBuilder::default()
    }
}

/// A builder for [`UpdateFirewallRuleInput`](crate::operation::update_firewall_rule::UpdateFirewallRuleInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateFirewallRuleInputBuilder {
    pub(crate) firewall_rule_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) firewall_domain_list_id: ::std::option::Option<::std::string::String>,
    pub(crate) firewall_threat_protection_id: ::std::option::Option<::std::string::String>,
    pub(crate) priority: ::std::option::Option<i32>,
    pub(crate) action: ::std::option::Option<crate::types::Action>,
    pub(crate) block_response: ::std::option::Option<crate::types::BlockResponse>,
    pub(crate) block_override_domain: ::std::option::Option<::std::string::String>,
    pub(crate) block_override_dns_type: ::std::option::Option<crate::types::BlockOverrideDnsType>,
    pub(crate) block_override_ttl: ::std::option::Option<i32>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) firewall_domain_redirection_action: ::std::option::Option<crate::types::FirewallDomainRedirectionAction>,
    pub(crate) qtype: ::std::option::Option<::std::string::String>,
    pub(crate) dns_threat_protection: ::std::option::Option<crate::types::DnsThreatProtection>,
    pub(crate) confidence_threshold: ::std::option::Option<crate::types::ConfidenceThreshold>,
}
impl UpdateFirewallRuleInputBuilder {
    /// <p>The unique identifier of the firewall rule group for the rule.</p>
    /// This field is required.
    pub fn firewall_rule_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.firewall_rule_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the firewall rule group for the rule.</p>
    pub fn set_firewall_rule_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.firewall_rule_group_id = input;
        self
    }
    /// <p>The unique identifier of the firewall rule group for the rule.</p>
    pub fn get_firewall_rule_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.firewall_rule_group_id
    }
    /// <p>The ID of the domain list to use in the rule.</p>
    pub fn firewall_domain_list_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.firewall_domain_list_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain list to use in the rule.</p>
    pub fn set_firewall_domain_list_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.firewall_domain_list_id = input;
        self
    }
    /// <p>The ID of the domain list to use in the rule.</p>
    pub fn get_firewall_domain_list_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.firewall_domain_list_id
    }
    /// <p>The DNS Firewall Advanced rule ID.</p>
    pub fn firewall_threat_protection_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.firewall_threat_protection_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DNS Firewall Advanced rule ID.</p>
    pub fn set_firewall_threat_protection_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.firewall_threat_protection_id = input;
        self
    }
    /// <p>The DNS Firewall Advanced rule ID.</p>
    pub fn get_firewall_threat_protection_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.firewall_threat_protection_id
    }
    /// <p>The setting that determines the processing order of the rule in the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.</p>
    /// <p>You must specify a unique priority for each rule in a rule group. To make it easier to insert rules later, leave space between the numbers, for example, use 100, 200, and so on. You can change the priority setting for the rules in a rule group at any time.</p>
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = ::std::option::Option::Some(input);
        self
    }
    /// <p>The setting that determines the processing order of the rule in the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.</p>
    /// <p>You must specify a unique priority for each rule in a rule group. To make it easier to insert rules later, leave space between the numbers, for example, use 100, 200, and so on. You can change the priority setting for the rules in a rule group at any time.</p>
    pub fn set_priority(mut self, input: ::std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// <p>The setting that determines the processing order of the rule in the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.</p>
    /// <p>You must specify a unique priority for each rule in a rule group. To make it easier to insert rules later, leave space between the numbers, for example, use 100, 200, and so on. You can change the priority setting for the rules in a rule group at any time.</p>
    pub fn get_priority(&self) -> &::std::option::Option<i32> {
        &self.priority
    }
    /// <p>The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list, or a threat in a DNS Firewall Advanced rule:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALLOW</code> - Permit the request to go through. Not available for DNS Firewall Advanced rules.</p></li>
    /// <li>
    /// <p><code>ALERT</code> - Permit the request to go through but send an alert to the logs.</p></li>
    /// <li>
    /// <p><code>BLOCK</code> - Disallow the request. This option requires additional details in the rule's <code>BlockResponse</code>.</p></li>
    /// </ul>
    pub fn action(mut self, input: crate::types::Action) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list, or a threat in a DNS Firewall Advanced rule:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALLOW</code> - Permit the request to go through. Not available for DNS Firewall Advanced rules.</p></li>
    /// <li>
    /// <p><code>ALERT</code> - Permit the request to go through but send an alert to the logs.</p></li>
    /// <li>
    /// <p><code>BLOCK</code> - Disallow the request. This option requires additional details in the rule's <code>BlockResponse</code>.</p></li>
    /// </ul>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::Action>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list, or a threat in a DNS Firewall Advanced rule:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALLOW</code> - Permit the request to go through. Not available for DNS Firewall Advanced rules.</p></li>
    /// <li>
    /// <p><code>ALERT</code> - Permit the request to go through but send an alert to the logs.</p></li>
    /// <li>
    /// <p><code>BLOCK</code> - Disallow the request. This option requires additional details in the rule's <code>BlockResponse</code>.</p></li>
    /// </ul>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::Action> {
        &self.action
    }
    /// <p>The way that you want DNS Firewall to block the request. Used for the rule action setting <code>BLOCK</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>NODATA</code> - Respond indicating that the query was successful, but no response is available for it.</p></li>
    /// <li>
    /// <p><code>NXDOMAIN</code> - Respond indicating that the domain name that's in the query doesn't exist.</p></li>
    /// <li>
    /// <p><code>OVERRIDE</code> - Provide a custom override in the response. This option requires custom handling details in the rule's <code>BlockOverride*</code> settings.</p></li>
    /// </ul>
    pub fn block_response(mut self, input: crate::types::BlockResponse) -> Self {
        self.block_response = ::std::option::Option::Some(input);
        self
    }
    /// <p>The way that you want DNS Firewall to block the request. Used for the rule action setting <code>BLOCK</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>NODATA</code> - Respond indicating that the query was successful, but no response is available for it.</p></li>
    /// <li>
    /// <p><code>NXDOMAIN</code> - Respond indicating that the domain name that's in the query doesn't exist.</p></li>
    /// <li>
    /// <p><code>OVERRIDE</code> - Provide a custom override in the response. This option requires custom handling details in the rule's <code>BlockOverride*</code> settings.</p></li>
    /// </ul>
    pub fn set_block_response(mut self, input: ::std::option::Option<crate::types::BlockResponse>) -> Self {
        self.block_response = input;
        self
    }
    /// <p>The way that you want DNS Firewall to block the request. Used for the rule action setting <code>BLOCK</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>NODATA</code> - Respond indicating that the query was successful, but no response is available for it.</p></li>
    /// <li>
    /// <p><code>NXDOMAIN</code> - Respond indicating that the domain name that's in the query doesn't exist.</p></li>
    /// <li>
    /// <p><code>OVERRIDE</code> - Provide a custom override in the response. This option requires custom handling details in the rule's <code>BlockOverride*</code> settings.</p></li>
    /// </ul>
    pub fn get_block_response(&self) -> &::std::option::Option<crate::types::BlockResponse> {
        &self.block_response
    }
    /// <p>The custom DNS record to send back in response to the query. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub fn block_override_domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.block_override_domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The custom DNS record to send back in response to the query. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub fn set_block_override_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.block_override_domain = input;
        self
    }
    /// <p>The custom DNS record to send back in response to the query. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub fn get_block_override_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.block_override_domain
    }
    /// <p>The DNS record's type. This determines the format of the record value that you provided in <code>BlockOverrideDomain</code>. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub fn block_override_dns_type(mut self, input: crate::types::BlockOverrideDnsType) -> Self {
        self.block_override_dns_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The DNS record's type. This determines the format of the record value that you provided in <code>BlockOverrideDomain</code>. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub fn set_block_override_dns_type(mut self, input: ::std::option::Option<crate::types::BlockOverrideDnsType>) -> Self {
        self.block_override_dns_type = input;
        self
    }
    /// <p>The DNS record's type. This determines the format of the record value that you provided in <code>BlockOverrideDomain</code>. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub fn get_block_override_dns_type(&self) -> &::std::option::Option<crate::types::BlockOverrideDnsType> {
        &self.block_override_dns_type
    }
    /// <p>The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub fn block_override_ttl(mut self, input: i32) -> Self {
        self.block_override_ttl = ::std::option::Option::Some(input);
        self
    }
    /// <p>The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub fn set_block_override_ttl(mut self, input: ::std::option::Option<i32>) -> Self {
        self.block_override_ttl = input;
        self
    }
    /// <p>The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub fn get_block_override_ttl(&self) -> &::std::option::Option<i32> {
        &self.block_override_ttl
    }
    /// <p>The name of the rule.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the rule.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the rule.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>How you want the the rule to evaluate DNS redirection in the DNS redirection chain, such as CNAME or DNAME.</p>
    /// <p><code>INSPECT_REDIRECTION_DOMAIN</code>: (Default) inspects all domains in the redirection chain. The individual domains in the redirection chain must be added to the domain list.</p>
    /// <p><code>TRUST_REDIRECTION_DOMAIN</code>: Inspects only the first domain in the redirection chain. You don't need to add the subsequent domains in the domain in the redirection list to the domain list.</p>
    pub fn firewall_domain_redirection_action(mut self, input: crate::types::FirewallDomainRedirectionAction) -> Self {
        self.firewall_domain_redirection_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>How you want the the rule to evaluate DNS redirection in the DNS redirection chain, such as CNAME or DNAME.</p>
    /// <p><code>INSPECT_REDIRECTION_DOMAIN</code>: (Default) inspects all domains in the redirection chain. The individual domains in the redirection chain must be added to the domain list.</p>
    /// <p><code>TRUST_REDIRECTION_DOMAIN</code>: Inspects only the first domain in the redirection chain. You don't need to add the subsequent domains in the domain in the redirection list to the domain list.</p>
    pub fn set_firewall_domain_redirection_action(mut self, input: ::std::option::Option<crate::types::FirewallDomainRedirectionAction>) -> Self {
        self.firewall_domain_redirection_action = input;
        self
    }
    /// <p>How you want the the rule to evaluate DNS redirection in the DNS redirection chain, such as CNAME or DNAME.</p>
    /// <p><code>INSPECT_REDIRECTION_DOMAIN</code>: (Default) inspects all domains in the redirection chain. The individual domains in the redirection chain must be added to the domain list.</p>
    /// <p><code>TRUST_REDIRECTION_DOMAIN</code>: Inspects only the first domain in the redirection chain. You don't need to add the subsequent domains in the domain in the redirection list to the domain list.</p>
    pub fn get_firewall_domain_redirection_action(&self) -> &::std::option::Option<crate::types::FirewallDomainRedirectionAction> {
        &self.firewall_domain_redirection_action
    }
    /// <p>The DNS query type you want the rule to evaluate. Allowed values are;</p>
    /// <ul>
    /// <li>
    /// <p>A: Returns an IPv4 address.</p></li>
    /// <li>
    /// <p>AAAA: Returns an Ipv6 address.</p></li>
    /// <li>
    /// <p>CAA: Restricts CAs that can create SSL/TLS certifications for the domain.</p></li>
    /// <li>
    /// <p>CNAME: Returns another domain name.</p></li>
    /// <li>
    /// <p>DS: Record that identifies the DNSSEC signing key of a delegated zone.</p></li>
    /// <li>
    /// <p>MX: Specifies mail servers.</p></li>
    /// <li>
    /// <p>NAPTR: Regular-expression-based rewriting of domain names.</p></li>
    /// <li>
    /// <p>NS: Authoritative name servers.</p></li>
    /// <li>
    /// <p>PTR: Maps an IP address to a domain name.</p></li>
    /// <li>
    /// <p>SOA: Start of authority record for the zone.</p></li>
    /// <li>
    /// <p>SPF: Lists the servers authorized to send emails from a domain.</p></li>
    /// <li>
    /// <p>SRV: Application specific values that identify servers.</p></li>
    /// <li>
    /// <p>TXT: Verifies email senders and application-specific values.</p></li>
    /// <li>
    /// <p>A query type you define by using the DNS type ID, for example 28 for AAAA. The values must be defined as TYPENUMBER, where the NUMBER can be 1-65334, for example, TYPE28. For more information, see <a href="https://en.wikipedia.org/wiki/List_of_DNS_record_types">List of DNS record types</a>.</p><note>
    /// <p>If you set up a firewall BLOCK rule with action NXDOMAIN on query type equals AAAA, this action will not be applied to synthetic IPv6 addresses generated when DNS64 is enabled.</p>
    /// </note></li>
    /// </ul>
    pub fn qtype(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.qtype = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DNS query type you want the rule to evaluate. Allowed values are;</p>
    /// <ul>
    /// <li>
    /// <p>A: Returns an IPv4 address.</p></li>
    /// <li>
    /// <p>AAAA: Returns an Ipv6 address.</p></li>
    /// <li>
    /// <p>CAA: Restricts CAs that can create SSL/TLS certifications for the domain.</p></li>
    /// <li>
    /// <p>CNAME: Returns another domain name.</p></li>
    /// <li>
    /// <p>DS: Record that identifies the DNSSEC signing key of a delegated zone.</p></li>
    /// <li>
    /// <p>MX: Specifies mail servers.</p></li>
    /// <li>
    /// <p>NAPTR: Regular-expression-based rewriting of domain names.</p></li>
    /// <li>
    /// <p>NS: Authoritative name servers.</p></li>
    /// <li>
    /// <p>PTR: Maps an IP address to a domain name.</p></li>
    /// <li>
    /// <p>SOA: Start of authority record for the zone.</p></li>
    /// <li>
    /// <p>SPF: Lists the servers authorized to send emails from a domain.</p></li>
    /// <li>
    /// <p>SRV: Application specific values that identify servers.</p></li>
    /// <li>
    /// <p>TXT: Verifies email senders and application-specific values.</p></li>
    /// <li>
    /// <p>A query type you define by using the DNS type ID, for example 28 for AAAA. The values must be defined as TYPENUMBER, where the NUMBER can be 1-65334, for example, TYPE28. For more information, see <a href="https://en.wikipedia.org/wiki/List_of_DNS_record_types">List of DNS record types</a>.</p><note>
    /// <p>If you set up a firewall BLOCK rule with action NXDOMAIN on query type equals AAAA, this action will not be applied to synthetic IPv6 addresses generated when DNS64 is enabled.</p>
    /// </note></li>
    /// </ul>
    pub fn set_qtype(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.qtype = input;
        self
    }
    /// <p>The DNS query type you want the rule to evaluate. Allowed values are;</p>
    /// <ul>
    /// <li>
    /// <p>A: Returns an IPv4 address.</p></li>
    /// <li>
    /// <p>AAAA: Returns an Ipv6 address.</p></li>
    /// <li>
    /// <p>CAA: Restricts CAs that can create SSL/TLS certifications for the domain.</p></li>
    /// <li>
    /// <p>CNAME: Returns another domain name.</p></li>
    /// <li>
    /// <p>DS: Record that identifies the DNSSEC signing key of a delegated zone.</p></li>
    /// <li>
    /// <p>MX: Specifies mail servers.</p></li>
    /// <li>
    /// <p>NAPTR: Regular-expression-based rewriting of domain names.</p></li>
    /// <li>
    /// <p>NS: Authoritative name servers.</p></li>
    /// <li>
    /// <p>PTR: Maps an IP address to a domain name.</p></li>
    /// <li>
    /// <p>SOA: Start of authority record for the zone.</p></li>
    /// <li>
    /// <p>SPF: Lists the servers authorized to send emails from a domain.</p></li>
    /// <li>
    /// <p>SRV: Application specific values that identify servers.</p></li>
    /// <li>
    /// <p>TXT: Verifies email senders and application-specific values.</p></li>
    /// <li>
    /// <p>A query type you define by using the DNS type ID, for example 28 for AAAA. The values must be defined as TYPENUMBER, where the NUMBER can be 1-65334, for example, TYPE28. For more information, see <a href="https://en.wikipedia.org/wiki/List_of_DNS_record_types">List of DNS record types</a>.</p><note>
    /// <p>If you set up a firewall BLOCK rule with action NXDOMAIN on query type equals AAAA, this action will not be applied to synthetic IPv6 addresses generated when DNS64 is enabled.</p>
    /// </note></li>
    /// </ul>
    pub fn get_qtype(&self) -> &::std::option::Option<::std::string::String> {
        &self.qtype
    }
    /// <p>The type of the DNS Firewall Advanced rule. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>DGA</code>: Domain generation algorithms detection. DGAs are used by attackers to generate a large number of domains to to launch malware attacks.</p></li>
    /// <li>
    /// <p><code>DNS_TUNNELING</code>: DNS tunneling detection. DNS tunneling is used by attackers to exfiltrate data from the client by using the DNS tunnel without making a network connection to the client.</p></li>
    /// </ul>
    pub fn dns_threat_protection(mut self, input: crate::types::DnsThreatProtection) -> Self {
        self.dns_threat_protection = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the DNS Firewall Advanced rule. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>DGA</code>: Domain generation algorithms detection. DGAs are used by attackers to generate a large number of domains to to launch malware attacks.</p></li>
    /// <li>
    /// <p><code>DNS_TUNNELING</code>: DNS tunneling detection. DNS tunneling is used by attackers to exfiltrate data from the client by using the DNS tunnel without making a network connection to the client.</p></li>
    /// </ul>
    pub fn set_dns_threat_protection(mut self, input: ::std::option::Option<crate::types::DnsThreatProtection>) -> Self {
        self.dns_threat_protection = input;
        self
    }
    /// <p>The type of the DNS Firewall Advanced rule. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>DGA</code>: Domain generation algorithms detection. DGAs are used by attackers to generate a large number of domains to to launch malware attacks.</p></li>
    /// <li>
    /// <p><code>DNS_TUNNELING</code>: DNS tunneling detection. DNS tunneling is used by attackers to exfiltrate data from the client by using the DNS tunnel without making a network connection to the client.</p></li>
    /// </ul>
    pub fn get_dns_threat_protection(&self) -> &::std::option::Option<crate::types::DnsThreatProtection> {
        &self.dns_threat_protection
    }
    /// <p>The confidence threshold for DNS Firewall Advanced. You must provide this value when you create a DNS Firewall Advanced rule. The confidence level values mean:</p>
    /// <ul>
    /// <li>
    /// <p><code>LOW</code>: Provides the highest detection rate for threats, but also increases false positives.</p></li>
    /// <li>
    /// <p><code>MEDIUM</code>: Provides a balance between detecting threats and false positives.</p></li>
    /// <li>
    /// <p><code>HIGH</code>: Detects only the most well corroborated threats with a low rate of false positives.</p></li>
    /// </ul>
    pub fn confidence_threshold(mut self, input: crate::types::ConfidenceThreshold) -> Self {
        self.confidence_threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>The confidence threshold for DNS Firewall Advanced. You must provide this value when you create a DNS Firewall Advanced rule. The confidence level values mean:</p>
    /// <ul>
    /// <li>
    /// <p><code>LOW</code>: Provides the highest detection rate for threats, but also increases false positives.</p></li>
    /// <li>
    /// <p><code>MEDIUM</code>: Provides a balance between detecting threats and false positives.</p></li>
    /// <li>
    /// <p><code>HIGH</code>: Detects only the most well corroborated threats with a low rate of false positives.</p></li>
    /// </ul>
    pub fn set_confidence_threshold(mut self, input: ::std::option::Option<crate::types::ConfidenceThreshold>) -> Self {
        self.confidence_threshold = input;
        self
    }
    /// <p>The confidence threshold for DNS Firewall Advanced. You must provide this value when you create a DNS Firewall Advanced rule. The confidence level values mean:</p>
    /// <ul>
    /// <li>
    /// <p><code>LOW</code>: Provides the highest detection rate for threats, but also increases false positives.</p></li>
    /// <li>
    /// <p><code>MEDIUM</code>: Provides a balance between detecting threats and false positives.</p></li>
    /// <li>
    /// <p><code>HIGH</code>: Detects only the most well corroborated threats with a low rate of false positives.</p></li>
    /// </ul>
    pub fn get_confidence_threshold(&self) -> &::std::option::Option<crate::types::ConfidenceThreshold> {
        &self.confidence_threshold
    }
    /// Consumes the builder and constructs a [`UpdateFirewallRuleInput`](crate::operation::update_firewall_rule::UpdateFirewallRuleInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_firewall_rule::UpdateFirewallRuleInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_firewall_rule::UpdateFirewallRuleInput {
            firewall_rule_group_id: self.firewall_rule_group_id,
            firewall_domain_list_id: self.firewall_domain_list_id,
            firewall_threat_protection_id: self.firewall_threat_protection_id,
            priority: self.priority,
            action: self.action,
            block_response: self.block_response,
            block_override_domain: self.block_override_domain,
            block_override_dns_type: self.block_override_dns_type,
            block_override_ttl: self.block_override_ttl,
            name: self.name,
            firewall_domain_redirection_action: self.firewall_domain_redirection_action,
            qtype: self.qtype,
            dns_threat_protection: self.dns_threat_protection,
            confidence_threshold: self.confidence_threshold,
        })
    }
}
