// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateAggregatorV2Input {
    /// <p>The ARN of the Aggregator V2.</p>
    pub aggregator_v2_arn: ::std::option::Option<::std::string::String>,
    /// <p>Determines how Amazon Web Services Regions should be linked to the Aggregator V2.</p>
    pub region_linking_mode: ::std::option::Option<::std::string::String>,
    /// <p>A list of Amazon Web Services Regions linked to the aggegation Region.</p>
    pub linked_regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateAggregatorV2Input {
    /// <p>The ARN of the Aggregator V2.</p>
    pub fn aggregator_v2_arn(&self) -> ::std::option::Option<&str> {
        self.aggregator_v2_arn.as_deref()
    }
    /// <p>Determines how Amazon Web Services Regions should be linked to the Aggregator V2.</p>
    pub fn region_linking_mode(&self) -> ::std::option::Option<&str> {
        self.region_linking_mode.as_deref()
    }
    /// <p>A list of Amazon Web Services Regions linked to the aggegation Region.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.linked_regions.is_none()`.
    pub fn linked_regions(&self) -> &[::std::string::String] {
        self.linked_regions.as_deref().unwrap_or_default()
    }
}
impl UpdateAggregatorV2Input {
    /// Creates a new builder-style object to manufacture [`UpdateAggregatorV2Input`](crate::operation::update_aggregator_v2::UpdateAggregatorV2Input).
    pub fn builder() -> crate::operation::update_aggregator_v2::builders::UpdateAggregatorV2InputBuilder {
        crate::operation::update_aggregator_v2::builders::UpdateAggregatorV2InputBuilder::default()
    }
}

/// A builder for [`UpdateAggregatorV2Input`](crate::operation::update_aggregator_v2::UpdateAggregatorV2Input).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateAggregatorV2InputBuilder {
    pub(crate) aggregator_v2_arn: ::std::option::Option<::std::string::String>,
    pub(crate) region_linking_mode: ::std::option::Option<::std::string::String>,
    pub(crate) linked_regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateAggregatorV2InputBuilder {
    /// <p>The ARN of the Aggregator V2.</p>
    /// This field is required.
    pub fn aggregator_v2_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aggregator_v2_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Aggregator V2.</p>
    pub fn set_aggregator_v2_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aggregator_v2_arn = input;
        self
    }
    /// <p>The ARN of the Aggregator V2.</p>
    pub fn get_aggregator_v2_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.aggregator_v2_arn
    }
    /// <p>Determines how Amazon Web Services Regions should be linked to the Aggregator V2.</p>
    /// This field is required.
    pub fn region_linking_mode(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region_linking_mode = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Determines how Amazon Web Services Regions should be linked to the Aggregator V2.</p>
    pub fn set_region_linking_mode(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region_linking_mode = input;
        self
    }
    /// <p>Determines how Amazon Web Services Regions should be linked to the Aggregator V2.</p>
    pub fn get_region_linking_mode(&self) -> &::std::option::Option<::std::string::String> {
        &self.region_linking_mode
    }
    /// Appends an item to `linked_regions`.
    ///
    /// To override the contents of this collection use [`set_linked_regions`](Self::set_linked_regions).
    ///
    /// <p>A list of Amazon Web Services Regions linked to the aggegation Region.</p>
    pub fn linked_regions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.linked_regions.unwrap_or_default();
        v.push(input.into());
        self.linked_regions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Amazon Web Services Regions linked to the aggegation Region.</p>
    pub fn set_linked_regions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.linked_regions = input;
        self
    }
    /// <p>A list of Amazon Web Services Regions linked to the aggegation Region.</p>
    pub fn get_linked_regions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.linked_regions
    }
    /// Consumes the builder and constructs a [`UpdateAggregatorV2Input`](crate::operation::update_aggregator_v2::UpdateAggregatorV2Input).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_aggregator_v2::UpdateAggregatorV2Input, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_aggregator_v2::UpdateAggregatorV2Input {
            aggregator_v2_arn: self.aggregator_v2_arn,
            region_linking_mode: self.region_linking_mode,
            linked_regions: self.linked_regions,
        })
    }
}
