// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListConnectorsV2Input {
    /// <p>The pagination token per the Amazon Web Services Pagination standard</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to be returned.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The name of the third-party provider.</p>
    pub provider_name: ::std::option::Option<crate::types::ConnectorProviderName>,
    /// <p>The status for the connectorV2.</p>
    pub connector_status: ::std::option::Option<crate::types::ConnectorStatus>,
}
impl ListConnectorsV2Input {
    /// <p>The pagination token per the Amazon Web Services Pagination standard</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to be returned.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The name of the third-party provider.</p>
    pub fn provider_name(&self) -> ::std::option::Option<&crate::types::ConnectorProviderName> {
        self.provider_name.as_ref()
    }
    /// <p>The status for the connectorV2.</p>
    pub fn connector_status(&self) -> ::std::option::Option<&crate::types::ConnectorStatus> {
        self.connector_status.as_ref()
    }
}
impl ListConnectorsV2Input {
    /// Creates a new builder-style object to manufacture [`ListConnectorsV2Input`](crate::operation::list_connectors_v2::ListConnectorsV2Input).
    pub fn builder() -> crate::operation::list_connectors_v2::builders::ListConnectorsV2InputBuilder {
        crate::operation::list_connectors_v2::builders::ListConnectorsV2InputBuilder::default()
    }
}

/// A builder for [`ListConnectorsV2Input`](crate::operation::list_connectors_v2::ListConnectorsV2Input).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListConnectorsV2InputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) provider_name: ::std::option::Option<crate::types::ConnectorProviderName>,
    pub(crate) connector_status: ::std::option::Option<crate::types::ConnectorStatus>,
}
impl ListConnectorsV2InputBuilder {
    /// <p>The pagination token per the Amazon Web Services Pagination standard</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token per the Amazon Web Services Pagination standard</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token per the Amazon Web Services Pagination standard</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to be returned.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to be returned.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to be returned.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The name of the third-party provider.</p>
    pub fn provider_name(mut self, input: crate::types::ConnectorProviderName) -> Self {
        self.provider_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the third-party provider.</p>
    pub fn set_provider_name(mut self, input: ::std::option::Option<crate::types::ConnectorProviderName>) -> Self {
        self.provider_name = input;
        self
    }
    /// <p>The name of the third-party provider.</p>
    pub fn get_provider_name(&self) -> &::std::option::Option<crate::types::ConnectorProviderName> {
        &self.provider_name
    }
    /// <p>The status for the connectorV2.</p>
    pub fn connector_status(mut self, input: crate::types::ConnectorStatus) -> Self {
        self.connector_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status for the connectorV2.</p>
    pub fn set_connector_status(mut self, input: ::std::option::Option<crate::types::ConnectorStatus>) -> Self {
        self.connector_status = input;
        self
    }
    /// <p>The status for the connectorV2.</p>
    pub fn get_connector_status(&self) -> &::std::option::Option<crate::types::ConnectorStatus> {
        &self.connector_status
    }
    /// Consumes the builder and constructs a [`ListConnectorsV2Input`](crate::operation::list_connectors_v2::ListConnectorsV2Input).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_connectors_v2::ListConnectorsV2Input, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_connectors_v2::ListConnectorsV2Input {
            next_token: self.next_token,
            max_results: self.max_results,
            provider_name: self.provider_name,
            connector_status: self.connector_status,
        })
    }
}
