// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetFindingStatisticsV2Input {
    /// <p>Specifies how security findings should be aggregated and organized in the statistical analysis. It can accept up to 5 <code>groupBy</code> fields in a single call.</p>
    pub group_by_rules: ::std::option::Option<::std::vec::Vec<crate::types::GroupByRule>>,
    /// <p>Orders the aggregation count in descending or ascending order. Descending order is the default.</p>
    pub sort_order: ::std::option::Option<crate::types::SortOrder>,
    /// <p>The maximum number of results to be returned.</p>
    pub max_statistic_results: ::std::option::Option<i32>,
}
impl GetFindingStatisticsV2Input {
    /// <p>Specifies how security findings should be aggregated and organized in the statistical analysis. It can accept up to 5 <code>groupBy</code> fields in a single call.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.group_by_rules.is_none()`.
    pub fn group_by_rules(&self) -> &[crate::types::GroupByRule] {
        self.group_by_rules.as_deref().unwrap_or_default()
    }
    /// <p>Orders the aggregation count in descending or ascending order. Descending order is the default.</p>
    pub fn sort_order(&self) -> ::std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
    /// <p>The maximum number of results to be returned.</p>
    pub fn max_statistic_results(&self) -> ::std::option::Option<i32> {
        self.max_statistic_results
    }
}
impl GetFindingStatisticsV2Input {
    /// Creates a new builder-style object to manufacture [`GetFindingStatisticsV2Input`](crate::operation::get_finding_statistics_v2::GetFindingStatisticsV2Input).
    pub fn builder() -> crate::operation::get_finding_statistics_v2::builders::GetFindingStatisticsV2InputBuilder {
        crate::operation::get_finding_statistics_v2::builders::GetFindingStatisticsV2InputBuilder::default()
    }
}

/// A builder for [`GetFindingStatisticsV2Input`](crate::operation::get_finding_statistics_v2::GetFindingStatisticsV2Input).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetFindingStatisticsV2InputBuilder {
    pub(crate) group_by_rules: ::std::option::Option<::std::vec::Vec<crate::types::GroupByRule>>,
    pub(crate) sort_order: ::std::option::Option<crate::types::SortOrder>,
    pub(crate) max_statistic_results: ::std::option::Option<i32>,
}
impl GetFindingStatisticsV2InputBuilder {
    /// Appends an item to `group_by_rules`.
    ///
    /// To override the contents of this collection use [`set_group_by_rules`](Self::set_group_by_rules).
    ///
    /// <p>Specifies how security findings should be aggregated and organized in the statistical analysis. It can accept up to 5 <code>groupBy</code> fields in a single call.</p>
    pub fn group_by_rules(mut self, input: crate::types::GroupByRule) -> Self {
        let mut v = self.group_by_rules.unwrap_or_default();
        v.push(input);
        self.group_by_rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies how security findings should be aggregated and organized in the statistical analysis. It can accept up to 5 <code>groupBy</code> fields in a single call.</p>
    pub fn set_group_by_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GroupByRule>>) -> Self {
        self.group_by_rules = input;
        self
    }
    /// <p>Specifies how security findings should be aggregated and organized in the statistical analysis. It can accept up to 5 <code>groupBy</code> fields in a single call.</p>
    pub fn get_group_by_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GroupByRule>> {
        &self.group_by_rules
    }
    /// <p>Orders the aggregation count in descending or ascending order. Descending order is the default.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>Orders the aggregation count in descending or ascending order. Descending order is the default.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>Orders the aggregation count in descending or ascending order. Descending order is the default.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortOrder> {
        &self.sort_order
    }
    /// <p>The maximum number of results to be returned.</p>
    pub fn max_statistic_results(mut self, input: i32) -> Self {
        self.max_statistic_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to be returned.</p>
    pub fn set_max_statistic_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_statistic_results = input;
        self
    }
    /// <p>The maximum number of results to be returned.</p>
    pub fn get_max_statistic_results(&self) -> &::std::option::Option<i32> {
        &self.max_statistic_results
    }
    /// Consumes the builder and constructs a [`GetFindingStatisticsV2Input`](crate::operation::get_finding_statistics_v2::GetFindingStatisticsV2Input).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_finding_statistics_v2::GetFindingStatisticsV2Input,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_finding_statistics_v2::GetFindingStatisticsV2Input {
            group_by_rules: self.group_by_rules,
            sort_order: self.sort_order,
            max_statistic_results: self.max_statistic_results,
        })
    }
}
