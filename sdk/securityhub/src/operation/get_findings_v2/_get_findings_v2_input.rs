// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetFindingsV2Input {
    /// <p>The finding attributes used to define a condition to filter the returned OCSF findings. You can filter up to 10 composite filters. For each filter type inside of a composite filter, you can provide up to 20 filters.</p>
    pub filters: ::std::option::Option<crate::types::OcsfFindingFilters>,
    /// <p>The finding attributes used to sort the list of returned findings.</p>
    pub sort_criteria: ::std::option::Option<::std::vec::Vec<crate::types::SortCriterion>>,
    /// <p>The token required for pagination. On your first call, set the value of this parameter to <code>NULL</code>. For subsequent calls, to continue listing data, set the value of this parameter to the value returned in the previous response.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl GetFindingsV2Input {
    /// <p>The finding attributes used to define a condition to filter the returned OCSF findings. You can filter up to 10 composite filters. For each filter type inside of a composite filter, you can provide up to 20 filters.</p>
    pub fn filters(&self) -> ::std::option::Option<&crate::types::OcsfFindingFilters> {
        self.filters.as_ref()
    }
    /// <p>The finding attributes used to sort the list of returned findings.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sort_criteria.is_none()`.
    pub fn sort_criteria(&self) -> &[crate::types::SortCriterion] {
        self.sort_criteria.as_deref().unwrap_or_default()
    }
    /// <p>The token required for pagination. On your first call, set the value of this parameter to <code>NULL</code>. For subsequent calls, to continue listing data, set the value of this parameter to the value returned in the previous response.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl GetFindingsV2Input {
    /// Creates a new builder-style object to manufacture [`GetFindingsV2Input`](crate::operation::get_findings_v2::GetFindingsV2Input).
    pub fn builder() -> crate::operation::get_findings_v2::builders::GetFindingsV2InputBuilder {
        crate::operation::get_findings_v2::builders::GetFindingsV2InputBuilder::default()
    }
}

/// A builder for [`GetFindingsV2Input`](crate::operation::get_findings_v2::GetFindingsV2Input).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetFindingsV2InputBuilder {
    pub(crate) filters: ::std::option::Option<crate::types::OcsfFindingFilters>,
    pub(crate) sort_criteria: ::std::option::Option<::std::vec::Vec<crate::types::SortCriterion>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl GetFindingsV2InputBuilder {
    /// <p>The finding attributes used to define a condition to filter the returned OCSF findings. You can filter up to 10 composite filters. For each filter type inside of a composite filter, you can provide up to 20 filters.</p>
    pub fn filters(mut self, input: crate::types::OcsfFindingFilters) -> Self {
        self.filters = ::std::option::Option::Some(input);
        self
    }
    /// <p>The finding attributes used to define a condition to filter the returned OCSF findings. You can filter up to 10 composite filters. For each filter type inside of a composite filter, you can provide up to 20 filters.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<crate::types::OcsfFindingFilters>) -> Self {
        self.filters = input;
        self
    }
    /// <p>The finding attributes used to define a condition to filter the returned OCSF findings. You can filter up to 10 composite filters. For each filter type inside of a composite filter, you can provide up to 20 filters.</p>
    pub fn get_filters(&self) -> &::std::option::Option<crate::types::OcsfFindingFilters> {
        &self.filters
    }
    /// Appends an item to `sort_criteria`.
    ///
    /// To override the contents of this collection use [`set_sort_criteria`](Self::set_sort_criteria).
    ///
    /// <p>The finding attributes used to sort the list of returned findings.</p>
    pub fn sort_criteria(mut self, input: crate::types::SortCriterion) -> Self {
        let mut v = self.sort_criteria.unwrap_or_default();
        v.push(input);
        self.sort_criteria = ::std::option::Option::Some(v);
        self
    }
    /// <p>The finding attributes used to sort the list of returned findings.</p>
    pub fn set_sort_criteria(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SortCriterion>>) -> Self {
        self.sort_criteria = input;
        self
    }
    /// <p>The finding attributes used to sort the list of returned findings.</p>
    pub fn get_sort_criteria(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SortCriterion>> {
        &self.sort_criteria
    }
    /// <p>The token required for pagination. On your first call, set the value of this parameter to <code>NULL</code>. For subsequent calls, to continue listing data, set the value of this parameter to the value returned in the previous response.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token required for pagination. On your first call, set the value of this parameter to <code>NULL</code>. For subsequent calls, to continue listing data, set the value of this parameter to the value returned in the previous response.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token required for pagination. On your first call, set the value of this parameter to <code>NULL</code>. For subsequent calls, to continue listing data, set the value of this parameter to the value returned in the previous response.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`GetFindingsV2Input`](crate::operation::get_findings_v2::GetFindingsV2Input).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_findings_v2::GetFindingsV2Input, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_findings_v2::GetFindingsV2Input {
            filters: self.filters,
            sort_criteria: self.sort_criteria,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
