// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetConnectorV2Output {
    /// <p>The Amazon Resource Name (ARN) of the connectorV2.</p>
    pub connector_arn: ::std::option::Option<::std::string::String>,
    /// <p>The UUID of the connectorV2 to identify connectorV2 resource.</p>
    pub connector_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the connectorV2.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the connectorV2.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of KMS key used for the connectorV2.</p>
    pub kms_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>ISO 8601 UTC timestamp for the time create the connectorV2.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>ISO 8601 UTC timestamp for the time update the connectorV2 connectorStatus.</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The current health status for connectorV2</p>
    pub health: ::std::option::Option<crate::types::HealthCheck>,
    /// <p>The third-party provider detail for a service configuration.</p>
    pub provider_detail: ::std::option::Option<crate::types::ProviderDetail>,
    _request_id: Option<String>,
}
impl GetConnectorV2Output {
    /// <p>The Amazon Resource Name (ARN) of the connectorV2.</p>
    pub fn connector_arn(&self) -> ::std::option::Option<&str> {
        self.connector_arn.as_deref()
    }
    /// <p>The UUID of the connectorV2 to identify connectorV2 resource.</p>
    pub fn connector_id(&self) -> ::std::option::Option<&str> {
        self.connector_id.as_deref()
    }
    /// <p>The name of the connectorV2.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the connectorV2.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of KMS key used for the connectorV2.</p>
    pub fn kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
    /// <p>ISO 8601 UTC timestamp for the time create the connectorV2.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>ISO 8601 UTC timestamp for the time update the connectorV2 connectorStatus.</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p>The current health status for connectorV2</p>
    pub fn health(&self) -> ::std::option::Option<&crate::types::HealthCheck> {
        self.health.as_ref()
    }
    /// <p>The third-party provider detail for a service configuration.</p>
    pub fn provider_detail(&self) -> ::std::option::Option<&crate::types::ProviderDetail> {
        self.provider_detail.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetConnectorV2Output {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetConnectorV2Output {
    /// Creates a new builder-style object to manufacture [`GetConnectorV2Output`](crate::operation::get_connector_v2::GetConnectorV2Output).
    pub fn builder() -> crate::operation::get_connector_v2::builders::GetConnectorV2OutputBuilder {
        crate::operation::get_connector_v2::builders::GetConnectorV2OutputBuilder::default()
    }
}

/// A builder for [`GetConnectorV2Output`](crate::operation::get_connector_v2::GetConnectorV2Output).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetConnectorV2OutputBuilder {
    pub(crate) connector_arn: ::std::option::Option<::std::string::String>,
    pub(crate) connector_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) health: ::std::option::Option<crate::types::HealthCheck>,
    pub(crate) provider_detail: ::std::option::Option<crate::types::ProviderDetail>,
    _request_id: Option<String>,
}
impl GetConnectorV2OutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the connectorV2.</p>
    pub fn connector_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connectorV2.</p>
    pub fn set_connector_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connectorV2.</p>
    pub fn get_connector_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_arn
    }
    /// <p>The UUID of the connectorV2 to identify connectorV2 resource.</p>
    /// This field is required.
    pub fn connector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The UUID of the connectorV2 to identify connectorV2 resource.</p>
    pub fn set_connector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_id = input;
        self
    }
    /// <p>The UUID of the connectorV2 to identify connectorV2 resource.</p>
    pub fn get_connector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_id
    }
    /// <p>The name of the connectorV2.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the connectorV2.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the connectorV2.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the connectorV2.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the connectorV2.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the connectorV2.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The Amazon Resource Name (ARN) of KMS key used for the connectorV2.</p>
    pub fn kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of KMS key used for the connectorV2.</p>
    pub fn set_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of KMS key used for the connectorV2.</p>
    pub fn get_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_arn
    }
    /// <p>ISO 8601 UTC timestamp for the time create the connectorV2.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>ISO 8601 UTC timestamp for the time create the connectorV2.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>ISO 8601 UTC timestamp for the time create the connectorV2.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>ISO 8601 UTC timestamp for the time update the connectorV2 connectorStatus.</p>
    /// This field is required.
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>ISO 8601 UTC timestamp for the time update the connectorV2 connectorStatus.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>ISO 8601 UTC timestamp for the time update the connectorV2 connectorStatus.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// <p>The current health status for connectorV2</p>
    /// This field is required.
    pub fn health(mut self, input: crate::types::HealthCheck) -> Self {
        self.health = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current health status for connectorV2</p>
    pub fn set_health(mut self, input: ::std::option::Option<crate::types::HealthCheck>) -> Self {
        self.health = input;
        self
    }
    /// <p>The current health status for connectorV2</p>
    pub fn get_health(&self) -> &::std::option::Option<crate::types::HealthCheck> {
        &self.health
    }
    /// <p>The third-party provider detail for a service configuration.</p>
    /// This field is required.
    pub fn provider_detail(mut self, input: crate::types::ProviderDetail) -> Self {
        self.provider_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>The third-party provider detail for a service configuration.</p>
    pub fn set_provider_detail(mut self, input: ::std::option::Option<crate::types::ProviderDetail>) -> Self {
        self.provider_detail = input;
        self
    }
    /// <p>The third-party provider detail for a service configuration.</p>
    pub fn get_provider_detail(&self) -> &::std::option::Option<crate::types::ProviderDetail> {
        &self.provider_detail
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetConnectorV2Output`](crate::operation::get_connector_v2::GetConnectorV2Output).
    pub fn build(self) -> crate::operation::get_connector_v2::GetConnectorV2Output {
        crate::operation::get_connector_v2::GetConnectorV2Output {
            connector_arn: self.connector_arn,
            connector_id: self.connector_id,
            name: self.name,
            description: self.description,
            kms_key_arn: self.kms_key_arn,
            created_at: self.created_at,
            last_updated_at: self.last_updated_at,
            health: self.health,
            provider_detail: self.provider_detail,
            _request_id: self._request_id,
        }
    }
}
