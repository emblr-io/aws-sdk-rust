// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchUpdateFindingsV2Input {
    /// <p>The list of finding <code>metadata.uid</code> to indicate findings to update. Finding <code>metadata.uid</code> is a globally unique identifier associated with the finding. Customers cannot use <code>MetadataUids</code> together with <code>FindingIdentifiers</code>.</p>
    pub metadata_uids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Provides information to identify a specific V2 finding.</p>
    pub finding_identifiers: ::std::option::Option<::std::vec::Vec<crate::types::OcsfFindingIdentifier>>,
    /// <p>The updated value for a user provided comment about the finding. Minimum character length 1. Maximum character length 512.</p>
    pub comment: ::std::option::Option<::std::string::String>,
    /// <p>The updated value for the normalized severity identifier. The severity ID is an integer with the allowed enum values \[0, 1, 2, 3, 4, 5, 99\]. When customer provides the updated severity ID, the string sibling severity will automatically be updated in the finding.</p>
    pub severity_id: ::std::option::Option<i32>,
    /// <p>The updated value for the normalized status identifier. The status ID is an integer with the allowed enum values \[0, 1, 2, 3, 4, 5, 6, 99\]. When customer provides the updated status ID, the string sibling status will automatically be updated in the finding.</p>
    pub status_id: ::std::option::Option<i32>,
}
impl BatchUpdateFindingsV2Input {
    /// <p>The list of finding <code>metadata.uid</code> to indicate findings to update. Finding <code>metadata.uid</code> is a globally unique identifier associated with the finding. Customers cannot use <code>MetadataUids</code> together with <code>FindingIdentifiers</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metadata_uids.is_none()`.
    pub fn metadata_uids(&self) -> &[::std::string::String] {
        self.metadata_uids.as_deref().unwrap_or_default()
    }
    /// <p>Provides information to identify a specific V2 finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.finding_identifiers.is_none()`.
    pub fn finding_identifiers(&self) -> &[crate::types::OcsfFindingIdentifier] {
        self.finding_identifiers.as_deref().unwrap_or_default()
    }
    /// <p>The updated value for a user provided comment about the finding. Minimum character length 1. Maximum character length 512.</p>
    pub fn comment(&self) -> ::std::option::Option<&str> {
        self.comment.as_deref()
    }
    /// <p>The updated value for the normalized severity identifier. The severity ID is an integer with the allowed enum values \[0, 1, 2, 3, 4, 5, 99\]. When customer provides the updated severity ID, the string sibling severity will automatically be updated in the finding.</p>
    pub fn severity_id(&self) -> ::std::option::Option<i32> {
        self.severity_id
    }
    /// <p>The updated value for the normalized status identifier. The status ID is an integer with the allowed enum values \[0, 1, 2, 3, 4, 5, 6, 99\]. When customer provides the updated status ID, the string sibling status will automatically be updated in the finding.</p>
    pub fn status_id(&self) -> ::std::option::Option<i32> {
        self.status_id
    }
}
impl BatchUpdateFindingsV2Input {
    /// Creates a new builder-style object to manufacture [`BatchUpdateFindingsV2Input`](crate::operation::batch_update_findings_v2::BatchUpdateFindingsV2Input).
    pub fn builder() -> crate::operation::batch_update_findings_v2::builders::BatchUpdateFindingsV2InputBuilder {
        crate::operation::batch_update_findings_v2::builders::BatchUpdateFindingsV2InputBuilder::default()
    }
}

/// A builder for [`BatchUpdateFindingsV2Input`](crate::operation::batch_update_findings_v2::BatchUpdateFindingsV2Input).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchUpdateFindingsV2InputBuilder {
    pub(crate) metadata_uids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) finding_identifiers: ::std::option::Option<::std::vec::Vec<crate::types::OcsfFindingIdentifier>>,
    pub(crate) comment: ::std::option::Option<::std::string::String>,
    pub(crate) severity_id: ::std::option::Option<i32>,
    pub(crate) status_id: ::std::option::Option<i32>,
}
impl BatchUpdateFindingsV2InputBuilder {
    /// Appends an item to `metadata_uids`.
    ///
    /// To override the contents of this collection use [`set_metadata_uids`](Self::set_metadata_uids).
    ///
    /// <p>The list of finding <code>metadata.uid</code> to indicate findings to update. Finding <code>metadata.uid</code> is a globally unique identifier associated with the finding. Customers cannot use <code>MetadataUids</code> together with <code>FindingIdentifiers</code>.</p>
    pub fn metadata_uids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.metadata_uids.unwrap_or_default();
        v.push(input.into());
        self.metadata_uids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of finding <code>metadata.uid</code> to indicate findings to update. Finding <code>metadata.uid</code> is a globally unique identifier associated with the finding. Customers cannot use <code>MetadataUids</code> together with <code>FindingIdentifiers</code>.</p>
    pub fn set_metadata_uids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.metadata_uids = input;
        self
    }
    /// <p>The list of finding <code>metadata.uid</code> to indicate findings to update. Finding <code>metadata.uid</code> is a globally unique identifier associated with the finding. Customers cannot use <code>MetadataUids</code> together with <code>FindingIdentifiers</code>.</p>
    pub fn get_metadata_uids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.metadata_uids
    }
    /// Appends an item to `finding_identifiers`.
    ///
    /// To override the contents of this collection use [`set_finding_identifiers`](Self::set_finding_identifiers).
    ///
    /// <p>Provides information to identify a specific V2 finding.</p>
    pub fn finding_identifiers(mut self, input: crate::types::OcsfFindingIdentifier) -> Self {
        let mut v = self.finding_identifiers.unwrap_or_default();
        v.push(input);
        self.finding_identifiers = ::std::option::Option::Some(v);
        self
    }
    /// <p>Provides information to identify a specific V2 finding.</p>
    pub fn set_finding_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OcsfFindingIdentifier>>) -> Self {
        self.finding_identifiers = input;
        self
    }
    /// <p>Provides information to identify a specific V2 finding.</p>
    pub fn get_finding_identifiers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OcsfFindingIdentifier>> {
        &self.finding_identifiers
    }
    /// <p>The updated value for a user provided comment about the finding. Minimum character length 1. Maximum character length 512.</p>
    pub fn comment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.comment = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated value for a user provided comment about the finding. Minimum character length 1. Maximum character length 512.</p>
    pub fn set_comment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// <p>The updated value for a user provided comment about the finding. Minimum character length 1. Maximum character length 512.</p>
    pub fn get_comment(&self) -> &::std::option::Option<::std::string::String> {
        &self.comment
    }
    /// <p>The updated value for the normalized severity identifier. The severity ID is an integer with the allowed enum values \[0, 1, 2, 3, 4, 5, 99\]. When customer provides the updated severity ID, the string sibling severity will automatically be updated in the finding.</p>
    pub fn severity_id(mut self, input: i32) -> Self {
        self.severity_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated value for the normalized severity identifier. The severity ID is an integer with the allowed enum values \[0, 1, 2, 3, 4, 5, 99\]. When customer provides the updated severity ID, the string sibling severity will automatically be updated in the finding.</p>
    pub fn set_severity_id(mut self, input: ::std::option::Option<i32>) -> Self {
        self.severity_id = input;
        self
    }
    /// <p>The updated value for the normalized severity identifier. The severity ID is an integer with the allowed enum values \[0, 1, 2, 3, 4, 5, 99\]. When customer provides the updated severity ID, the string sibling severity will automatically be updated in the finding.</p>
    pub fn get_severity_id(&self) -> &::std::option::Option<i32> {
        &self.severity_id
    }
    /// <p>The updated value for the normalized status identifier. The status ID is an integer with the allowed enum values \[0, 1, 2, 3, 4, 5, 6, 99\]. When customer provides the updated status ID, the string sibling status will automatically be updated in the finding.</p>
    pub fn status_id(mut self, input: i32) -> Self {
        self.status_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated value for the normalized status identifier. The status ID is an integer with the allowed enum values \[0, 1, 2, 3, 4, 5, 6, 99\]. When customer provides the updated status ID, the string sibling status will automatically be updated in the finding.</p>
    pub fn set_status_id(mut self, input: ::std::option::Option<i32>) -> Self {
        self.status_id = input;
        self
    }
    /// <p>The updated value for the normalized status identifier. The status ID is an integer with the allowed enum values \[0, 1, 2, 3, 4, 5, 6, 99\]. When customer provides the updated status ID, the string sibling status will automatically be updated in the finding.</p>
    pub fn get_status_id(&self) -> &::std::option::Option<i32> {
        &self.status_id
    }
    /// Consumes the builder and constructs a [`BatchUpdateFindingsV2Input`](crate::operation::batch_update_findings_v2::BatchUpdateFindingsV2Input).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::batch_update_findings_v2::BatchUpdateFindingsV2Input, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::batch_update_findings_v2::BatchUpdateFindingsV2Input {
            metadata_uids: self.metadata_uids,
            finding_identifiers: self.finding_identifiers,
            comment: self.comment,
            severity_id: self.severity_id,
            status_id: self.status_id,
        })
    }
}
