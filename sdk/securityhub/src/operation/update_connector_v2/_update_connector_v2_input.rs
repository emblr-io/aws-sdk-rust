// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateConnectorV2Input {
    /// <p>The UUID of the connectorV2 to identify connectorV2 resource.</p>
    pub connector_id: ::std::option::Option<::std::string::String>,
    /// <p>The clientSecret of ServiceNow.</p>
    pub client_secret: ::std::option::Option<::std::string::String>,
    /// <p>The description of the connectorV2.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The third-party provider’s service configuration.</p>
    pub provider: ::std::option::Option<crate::types::ProviderUpdateConfiguration>,
}
impl UpdateConnectorV2Input {
    /// <p>The UUID of the connectorV2 to identify connectorV2 resource.</p>
    pub fn connector_id(&self) -> ::std::option::Option<&str> {
        self.connector_id.as_deref()
    }
    /// <p>The clientSecret of ServiceNow.</p>
    pub fn client_secret(&self) -> ::std::option::Option<&str> {
        self.client_secret.as_deref()
    }
    /// <p>The description of the connectorV2.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The third-party provider’s service configuration.</p>
    pub fn provider(&self) -> ::std::option::Option<&crate::types::ProviderUpdateConfiguration> {
        self.provider.as_ref()
    }
}
impl ::std::fmt::Debug for UpdateConnectorV2Input {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateConnectorV2Input");
        formatter.field("connector_id", &self.connector_id);
        formatter.field("client_secret", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &self.description);
        formatter.field("provider", &self.provider);
        formatter.finish()
    }
}
impl UpdateConnectorV2Input {
    /// Creates a new builder-style object to manufacture [`UpdateConnectorV2Input`](crate::operation::update_connector_v2::UpdateConnectorV2Input).
    pub fn builder() -> crate::operation::update_connector_v2::builders::UpdateConnectorV2InputBuilder {
        crate::operation::update_connector_v2::builders::UpdateConnectorV2InputBuilder::default()
    }
}

/// A builder for [`UpdateConnectorV2Input`](crate::operation::update_connector_v2::UpdateConnectorV2Input).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateConnectorV2InputBuilder {
    pub(crate) connector_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_secret: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) provider: ::std::option::Option<crate::types::ProviderUpdateConfiguration>,
}
impl UpdateConnectorV2InputBuilder {
    /// <p>The UUID of the connectorV2 to identify connectorV2 resource.</p>
    /// This field is required.
    pub fn connector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The UUID of the connectorV2 to identify connectorV2 resource.</p>
    pub fn set_connector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_id = input;
        self
    }
    /// <p>The UUID of the connectorV2 to identify connectorV2 resource.</p>
    pub fn get_connector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_id
    }
    /// <p>The clientSecret of ServiceNow.</p>
    pub fn client_secret(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_secret = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The clientSecret of ServiceNow.</p>
    pub fn set_client_secret(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_secret = input;
        self
    }
    /// <p>The clientSecret of ServiceNow.</p>
    pub fn get_client_secret(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_secret
    }
    /// <p>The description of the connectorV2.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the connectorV2.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the connectorV2.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The third-party provider’s service configuration.</p>
    pub fn provider(mut self, input: crate::types::ProviderUpdateConfiguration) -> Self {
        self.provider = ::std::option::Option::Some(input);
        self
    }
    /// <p>The third-party provider’s service configuration.</p>
    pub fn set_provider(mut self, input: ::std::option::Option<crate::types::ProviderUpdateConfiguration>) -> Self {
        self.provider = input;
        self
    }
    /// <p>The third-party provider’s service configuration.</p>
    pub fn get_provider(&self) -> &::std::option::Option<crate::types::ProviderUpdateConfiguration> {
        &self.provider
    }
    /// Consumes the builder and constructs a [`UpdateConnectorV2Input`](crate::operation::update_connector_v2::UpdateConnectorV2Input).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_connector_v2::UpdateConnectorV2Input, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_connector_v2::UpdateConnectorV2Input {
            connector_id: self.connector_id,
            client_secret: self.client_secret,
            description: self.description,
            provider: self.provider,
        })
    }
}
impl ::std::fmt::Debug for UpdateConnectorV2InputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateConnectorV2InputBuilder");
        formatter.field("connector_id", &self.connector_id);
        formatter.field("client_secret", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &self.description);
        formatter.field("provider", &self.provider);
        formatter.finish()
    }
}
