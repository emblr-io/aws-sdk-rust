// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateAutomationRuleV2Input {
    /// <p>The ARN of the automation rule.</p>
    pub identifier: ::std::option::Option<::std::string::String>,
    /// <p>The status of the automation rule.</p>
    pub rule_status: ::std::option::Option<crate::types::RuleStatusV2>,
    /// <p>Represents a value for the rule priority.</p>
    pub rule_order: ::std::option::Option<f32>,
    /// <p>A description of the automation rule.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The name of the automation rule.</p>
    pub rule_name: ::std::option::Option<::std::string::String>,
    /// <p>The filtering type and configuration of the automation rule.</p>
    pub criteria: ::std::option::Option<crate::types::Criteria>,
    /// <p>A list of actions to be performed when the rule criteria is met.</p>
    pub actions: ::std::option::Option<::std::vec::Vec<crate::types::AutomationRulesActionV2>>,
}
impl UpdateAutomationRuleV2Input {
    /// <p>The ARN of the automation rule.</p>
    pub fn identifier(&self) -> ::std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>The status of the automation rule.</p>
    pub fn rule_status(&self) -> ::std::option::Option<&crate::types::RuleStatusV2> {
        self.rule_status.as_ref()
    }
    /// <p>Represents a value for the rule priority.</p>
    pub fn rule_order(&self) -> ::std::option::Option<f32> {
        self.rule_order
    }
    /// <p>A description of the automation rule.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The name of the automation rule.</p>
    pub fn rule_name(&self) -> ::std::option::Option<&str> {
        self.rule_name.as_deref()
    }
    /// <p>The filtering type and configuration of the automation rule.</p>
    pub fn criteria(&self) -> ::std::option::Option<&crate::types::Criteria> {
        self.criteria.as_ref()
    }
    /// <p>A list of actions to be performed when the rule criteria is met.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.actions.is_none()`.
    pub fn actions(&self) -> &[crate::types::AutomationRulesActionV2] {
        self.actions.as_deref().unwrap_or_default()
    }
}
impl UpdateAutomationRuleV2Input {
    /// Creates a new builder-style object to manufacture [`UpdateAutomationRuleV2Input`](crate::operation::update_automation_rule_v2::UpdateAutomationRuleV2Input).
    pub fn builder() -> crate::operation::update_automation_rule_v2::builders::UpdateAutomationRuleV2InputBuilder {
        crate::operation::update_automation_rule_v2::builders::UpdateAutomationRuleV2InputBuilder::default()
    }
}

/// A builder for [`UpdateAutomationRuleV2Input`](crate::operation::update_automation_rule_v2::UpdateAutomationRuleV2Input).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateAutomationRuleV2InputBuilder {
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) rule_status: ::std::option::Option<crate::types::RuleStatusV2>,
    pub(crate) rule_order: ::std::option::Option<f32>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) rule_name: ::std::option::Option<::std::string::String>,
    pub(crate) criteria: ::std::option::Option<crate::types::Criteria>,
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<crate::types::AutomationRulesActionV2>>,
}
impl UpdateAutomationRuleV2InputBuilder {
    /// <p>The ARN of the automation rule.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the automation rule.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The ARN of the automation rule.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>The status of the automation rule.</p>
    pub fn rule_status(mut self, input: crate::types::RuleStatusV2) -> Self {
        self.rule_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the automation rule.</p>
    pub fn set_rule_status(mut self, input: ::std::option::Option<crate::types::RuleStatusV2>) -> Self {
        self.rule_status = input;
        self
    }
    /// <p>The status of the automation rule.</p>
    pub fn get_rule_status(&self) -> &::std::option::Option<crate::types::RuleStatusV2> {
        &self.rule_status
    }
    /// <p>Represents a value for the rule priority.</p>
    pub fn rule_order(mut self, input: f32) -> Self {
        self.rule_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents a value for the rule priority.</p>
    pub fn set_rule_order(mut self, input: ::std::option::Option<f32>) -> Self {
        self.rule_order = input;
        self
    }
    /// <p>Represents a value for the rule priority.</p>
    pub fn get_rule_order(&self) -> &::std::option::Option<f32> {
        &self.rule_order
    }
    /// <p>A description of the automation rule.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the automation rule.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the automation rule.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The name of the automation rule.</p>
    pub fn rule_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the automation rule.</p>
    pub fn set_rule_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_name = input;
        self
    }
    /// <p>The name of the automation rule.</p>
    pub fn get_rule_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_name
    }
    /// <p>The filtering type and configuration of the automation rule.</p>
    pub fn criteria(mut self, input: crate::types::Criteria) -> Self {
        self.criteria = ::std::option::Option::Some(input);
        self
    }
    /// <p>The filtering type and configuration of the automation rule.</p>
    pub fn set_criteria(mut self, input: ::std::option::Option<crate::types::Criteria>) -> Self {
        self.criteria = input;
        self
    }
    /// <p>The filtering type and configuration of the automation rule.</p>
    pub fn get_criteria(&self) -> &::std::option::Option<crate::types::Criteria> {
        &self.criteria
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>A list of actions to be performed when the rule criteria is met.</p>
    pub fn actions(mut self, input: crate::types::AutomationRulesActionV2) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of actions to be performed when the rule criteria is met.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AutomationRulesActionV2>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>A list of actions to be performed when the rule criteria is met.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AutomationRulesActionV2>> {
        &self.actions
    }
    /// Consumes the builder and constructs a [`UpdateAutomationRuleV2Input`](crate::operation::update_automation_rule_v2::UpdateAutomationRuleV2Input).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_automation_rule_v2::UpdateAutomationRuleV2Input,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_automation_rule_v2::UpdateAutomationRuleV2Input {
            identifier: self.identifier,
            rule_status: self.rule_status,
            rule_order: self.rule_order,
            description: self.description,
            rule_name: self.rule_name,
            criteria: self.criteria,
            actions: self.actions,
        })
    }
}
