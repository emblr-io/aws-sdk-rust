// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConnectorRegistrationsV2Input {
    /// <p>The authCode retrieved from authUrl to complete the OAuth 2.0 authorization code flow.</p>
    pub auth_code: ::std::option::Option<::std::string::String>,
    /// <p>The authState retrieved from authUrl to complete the OAuth 2.0 authorization code flow.</p>
    pub auth_state: ::std::option::Option<::std::string::String>,
}
impl ConnectorRegistrationsV2Input {
    /// <p>The authCode retrieved from authUrl to complete the OAuth 2.0 authorization code flow.</p>
    pub fn auth_code(&self) -> ::std::option::Option<&str> {
        self.auth_code.as_deref()
    }
    /// <p>The authState retrieved from authUrl to complete the OAuth 2.0 authorization code flow.</p>
    pub fn auth_state(&self) -> ::std::option::Option<&str> {
        self.auth_state.as_deref()
    }
}
impl ConnectorRegistrationsV2Input {
    /// Creates a new builder-style object to manufacture [`ConnectorRegistrationsV2Input`](crate::operation::connector_registrations_v2::ConnectorRegistrationsV2Input).
    pub fn builder() -> crate::operation::connector_registrations_v2::builders::ConnectorRegistrationsV2InputBuilder {
        crate::operation::connector_registrations_v2::builders::ConnectorRegistrationsV2InputBuilder::default()
    }
}

/// A builder for [`ConnectorRegistrationsV2Input`](crate::operation::connector_registrations_v2::ConnectorRegistrationsV2Input).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConnectorRegistrationsV2InputBuilder {
    pub(crate) auth_code: ::std::option::Option<::std::string::String>,
    pub(crate) auth_state: ::std::option::Option<::std::string::String>,
}
impl ConnectorRegistrationsV2InputBuilder {
    /// <p>The authCode retrieved from authUrl to complete the OAuth 2.0 authorization code flow.</p>
    /// This field is required.
    pub fn auth_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.auth_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The authCode retrieved from authUrl to complete the OAuth 2.0 authorization code flow.</p>
    pub fn set_auth_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.auth_code = input;
        self
    }
    /// <p>The authCode retrieved from authUrl to complete the OAuth 2.0 authorization code flow.</p>
    pub fn get_auth_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.auth_code
    }
    /// <p>The authState retrieved from authUrl to complete the OAuth 2.0 authorization code flow.</p>
    /// This field is required.
    pub fn auth_state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.auth_state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The authState retrieved from authUrl to complete the OAuth 2.0 authorization code flow.</p>
    pub fn set_auth_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.auth_state = input;
        self
    }
    /// <p>The authState retrieved from authUrl to complete the OAuth 2.0 authorization code flow.</p>
    pub fn get_auth_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.auth_state
    }
    /// Consumes the builder and constructs a [`ConnectorRegistrationsV2Input`](crate::operation::connector_registrations_v2::ConnectorRegistrationsV2Input).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::connector_registrations_v2::ConnectorRegistrationsV2Input,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::connector_registrations_v2::ConnectorRegistrationsV2Input {
            auth_code: self.auth_code,
            auth_state: self.auth_state,
        })
    }
}
