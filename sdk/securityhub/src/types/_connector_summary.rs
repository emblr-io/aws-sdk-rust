// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A condensed overview of the connectorV2..</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConnectorSummary {
    /// <p>The Amazon Resource Name (ARN) of the connectorV2.</p>
    pub connector_arn: ::std::option::Option<::std::string::String>,
    /// <p>The UUID of the connectorV2 to identify connectorV2 resource.</p>
    pub connector_id: ::std::option::Option<::std::string::String>,
    /// <p>The Name field contains the user-defined name assigned to the integration connector. This helps identify and manage multiple connectors within Security Hub.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the connectorV2.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The connectorV2 third party provider configuration summary.</p>
    pub provider_summary: ::std::option::Option<crate::types::ProviderSummary>,
    /// <p>ISO 8601 UTC timestamp for the time create the connectorV2.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ConnectorSummary {
    /// <p>The Amazon Resource Name (ARN) of the connectorV2.</p>
    pub fn connector_arn(&self) -> ::std::option::Option<&str> {
        self.connector_arn.as_deref()
    }
    /// <p>The UUID of the connectorV2 to identify connectorV2 resource.</p>
    pub fn connector_id(&self) -> ::std::option::Option<&str> {
        self.connector_id.as_deref()
    }
    /// <p>The Name field contains the user-defined name assigned to the integration connector. This helps identify and manage multiple connectors within Security Hub.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the connectorV2.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The connectorV2 third party provider configuration summary.</p>
    pub fn provider_summary(&self) -> ::std::option::Option<&crate::types::ProviderSummary> {
        self.provider_summary.as_ref()
    }
    /// <p>ISO 8601 UTC timestamp for the time create the connectorV2.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
}
impl ConnectorSummary {
    /// Creates a new builder-style object to manufacture [`ConnectorSummary`](crate::types::ConnectorSummary).
    pub fn builder() -> crate::types::builders::ConnectorSummaryBuilder {
        crate::types::builders::ConnectorSummaryBuilder::default()
    }
}

/// A builder for [`ConnectorSummary`](crate::types::ConnectorSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConnectorSummaryBuilder {
    pub(crate) connector_arn: ::std::option::Option<::std::string::String>,
    pub(crate) connector_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) provider_summary: ::std::option::Option<crate::types::ProviderSummary>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ConnectorSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the connectorV2.</p>
    pub fn connector_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connectorV2.</p>
    pub fn set_connector_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connectorV2.</p>
    pub fn get_connector_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_arn
    }
    /// <p>The UUID of the connectorV2 to identify connectorV2 resource.</p>
    /// This field is required.
    pub fn connector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The UUID of the connectorV2 to identify connectorV2 resource.</p>
    pub fn set_connector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_id = input;
        self
    }
    /// <p>The UUID of the connectorV2 to identify connectorV2 resource.</p>
    pub fn get_connector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_id
    }
    /// <p>The Name field contains the user-defined name assigned to the integration connector. This helps identify and manage multiple connectors within Security Hub.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Name field contains the user-defined name assigned to the integration connector. This helps identify and manage multiple connectors within Security Hub.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The Name field contains the user-defined name assigned to the integration connector. This helps identify and manage multiple connectors within Security Hub.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the connectorV2.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the connectorV2.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the connectorV2.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The connectorV2 third party provider configuration summary.</p>
    /// This field is required.
    pub fn provider_summary(mut self, input: crate::types::ProviderSummary) -> Self {
        self.provider_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>The connectorV2 third party provider configuration summary.</p>
    pub fn set_provider_summary(mut self, input: ::std::option::Option<crate::types::ProviderSummary>) -> Self {
        self.provider_summary = input;
        self
    }
    /// <p>The connectorV2 third party provider configuration summary.</p>
    pub fn get_provider_summary(&self) -> &::std::option::Option<crate::types::ProviderSummary> {
        &self.provider_summary
    }
    /// <p>ISO 8601 UTC timestamp for the time create the connectorV2.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>ISO 8601 UTC timestamp for the time create the connectorV2.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>ISO 8601 UTC timestamp for the time create the connectorV2.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// Consumes the builder and constructs a [`ConnectorSummary`](crate::types::ConnectorSummary).
    pub fn build(self) -> crate::types::ConnectorSummary {
        crate::types::ConnectorSummary {
            connector_arn: self.connector_arn,
            connector_id: self.connector_id,
            name: self.name,
            description: self.description,
            provider_summary: self.provider_summary,
            created_at: self.created_at,
        }
    }
}
