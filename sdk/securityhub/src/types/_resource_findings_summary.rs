// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of summaries for all finding types on a resource.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceFindingsSummary {
    /// <p>The category or classification of the security finding.</p>
    pub finding_type: ::std::option::Option<::std::string::String>,
    /// <p>The name of the product associated with the security finding.</p>
    pub product_name: ::std::option::Option<::std::string::String>,
    /// <p>The total count of security findings.</p>
    pub total_findings: ::std::option::Option<i32>,
    /// <p>A breakdown of security findings by their severity levels.</p>
    pub severities: ::std::option::Option<crate::types::ResourceSeverityBreakdown>,
}
impl ResourceFindingsSummary {
    /// <p>The category or classification of the security finding.</p>
    pub fn finding_type(&self) -> ::std::option::Option<&str> {
        self.finding_type.as_deref()
    }
    /// <p>The name of the product associated with the security finding.</p>
    pub fn product_name(&self) -> ::std::option::Option<&str> {
        self.product_name.as_deref()
    }
    /// <p>The total count of security findings.</p>
    pub fn total_findings(&self) -> ::std::option::Option<i32> {
        self.total_findings
    }
    /// <p>A breakdown of security findings by their severity levels.</p>
    pub fn severities(&self) -> ::std::option::Option<&crate::types::ResourceSeverityBreakdown> {
        self.severities.as_ref()
    }
}
impl ResourceFindingsSummary {
    /// Creates a new builder-style object to manufacture [`ResourceFindingsSummary`](crate::types::ResourceFindingsSummary).
    pub fn builder() -> crate::types::builders::ResourceFindingsSummaryBuilder {
        crate::types::builders::ResourceFindingsSummaryBuilder::default()
    }
}

/// A builder for [`ResourceFindingsSummary`](crate::types::ResourceFindingsSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ResourceFindingsSummaryBuilder {
    pub(crate) finding_type: ::std::option::Option<::std::string::String>,
    pub(crate) product_name: ::std::option::Option<::std::string::String>,
    pub(crate) total_findings: ::std::option::Option<i32>,
    pub(crate) severities: ::std::option::Option<crate::types::ResourceSeverityBreakdown>,
}
impl ResourceFindingsSummaryBuilder {
    /// <p>The category or classification of the security finding.</p>
    /// This field is required.
    pub fn finding_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.finding_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The category or classification of the security finding.</p>
    pub fn set_finding_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.finding_type = input;
        self
    }
    /// <p>The category or classification of the security finding.</p>
    pub fn get_finding_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.finding_type
    }
    /// <p>The name of the product associated with the security finding.</p>
    /// This field is required.
    pub fn product_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.product_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the product associated with the security finding.</p>
    pub fn set_product_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.product_name = input;
        self
    }
    /// <p>The name of the product associated with the security finding.</p>
    pub fn get_product_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.product_name
    }
    /// <p>The total count of security findings.</p>
    /// This field is required.
    pub fn total_findings(mut self, input: i32) -> Self {
        self.total_findings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total count of security findings.</p>
    pub fn set_total_findings(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_findings = input;
        self
    }
    /// <p>The total count of security findings.</p>
    pub fn get_total_findings(&self) -> &::std::option::Option<i32> {
        &self.total_findings
    }
    /// <p>A breakdown of security findings by their severity levels.</p>
    pub fn severities(mut self, input: crate::types::ResourceSeverityBreakdown) -> Self {
        self.severities = ::std::option::Option::Some(input);
        self
    }
    /// <p>A breakdown of security findings by their severity levels.</p>
    pub fn set_severities(mut self, input: ::std::option::Option<crate::types::ResourceSeverityBreakdown>) -> Self {
        self.severities = input;
        self
    }
    /// <p>A breakdown of security findings by their severity levels.</p>
    pub fn get_severities(&self) -> &::std::option::Option<crate::types::ResourceSeverityBreakdown> {
        &self.severities
    }
    /// Consumes the builder and constructs a [`ResourceFindingsSummary`](crate::types::ResourceFindingsSummary).
    pub fn build(self) -> crate::types::ResourceFindingsSummary {
        crate::types::ResourceFindingsSummary {
            finding_type: self.finding_type,
            product_name: self.product_name,
            total_findings: self.total_findings,
            severities: self.severities,
        }
    }
}
