// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Includes essential metadata information about automation rules.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutomationRulesMetadataV2 {
    /// <p>The ARN of the automation rule.</p>
    pub rule_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the automation rule.</p>
    pub rule_id: ::std::option::Option<::std::string::String>,
    /// <p>The value for the rule priority.</p>
    pub rule_order: ::std::option::Option<f32>,
    /// <p>The name of the automation rule.</p>
    pub rule_name: ::std::option::Option<::std::string::String>,
    /// <p>The status of the automation rule.</p>
    pub rule_status: ::std::option::Option<crate::types::RuleStatusV2>,
    /// <p>An explanation for the purpose and funcitonality of the automation rule.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The list of action to be performed when the rule criteria is met.</p>
    pub actions: ::std::option::Option<::std::vec::Vec<crate::types::AutomationRulesActionTypeObjectV2>>,
    /// <p>The timestamp for when the automation rule was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp for the most recent modification to the automation rule.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl AutomationRulesMetadataV2 {
    /// <p>The ARN of the automation rule.</p>
    pub fn rule_arn(&self) -> ::std::option::Option<&str> {
        self.rule_arn.as_deref()
    }
    /// <p>The ID of the automation rule.</p>
    pub fn rule_id(&self) -> ::std::option::Option<&str> {
        self.rule_id.as_deref()
    }
    /// <p>The value for the rule priority.</p>
    pub fn rule_order(&self) -> ::std::option::Option<f32> {
        self.rule_order
    }
    /// <p>The name of the automation rule.</p>
    pub fn rule_name(&self) -> ::std::option::Option<&str> {
        self.rule_name.as_deref()
    }
    /// <p>The status of the automation rule.</p>
    pub fn rule_status(&self) -> ::std::option::Option<&crate::types::RuleStatusV2> {
        self.rule_status.as_ref()
    }
    /// <p>An explanation for the purpose and funcitonality of the automation rule.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The list of action to be performed when the rule criteria is met.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.actions.is_none()`.
    pub fn actions(&self) -> &[crate::types::AutomationRulesActionTypeObjectV2] {
        self.actions.as_deref().unwrap_or_default()
    }
    /// <p>The timestamp for when the automation rule was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp for the most recent modification to the automation rule.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl AutomationRulesMetadataV2 {
    /// Creates a new builder-style object to manufacture [`AutomationRulesMetadataV2`](crate::types::AutomationRulesMetadataV2).
    pub fn builder() -> crate::types::builders::AutomationRulesMetadataV2Builder {
        crate::types::builders::AutomationRulesMetadataV2Builder::default()
    }
}

/// A builder for [`AutomationRulesMetadataV2`](crate::types::AutomationRulesMetadataV2).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutomationRulesMetadataV2Builder {
    pub(crate) rule_arn: ::std::option::Option<::std::string::String>,
    pub(crate) rule_id: ::std::option::Option<::std::string::String>,
    pub(crate) rule_order: ::std::option::Option<f32>,
    pub(crate) rule_name: ::std::option::Option<::std::string::String>,
    pub(crate) rule_status: ::std::option::Option<crate::types::RuleStatusV2>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<crate::types::AutomationRulesActionTypeObjectV2>>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl AutomationRulesMetadataV2Builder {
    /// <p>The ARN of the automation rule.</p>
    pub fn rule_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the automation rule.</p>
    pub fn set_rule_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_arn = input;
        self
    }
    /// <p>The ARN of the automation rule.</p>
    pub fn get_rule_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_arn
    }
    /// <p>The ID of the automation rule.</p>
    pub fn rule_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the automation rule.</p>
    pub fn set_rule_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_id = input;
        self
    }
    /// <p>The ID of the automation rule.</p>
    pub fn get_rule_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_id
    }
    /// <p>The value for the rule priority.</p>
    pub fn rule_order(mut self, input: f32) -> Self {
        self.rule_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value for the rule priority.</p>
    pub fn set_rule_order(mut self, input: ::std::option::Option<f32>) -> Self {
        self.rule_order = input;
        self
    }
    /// <p>The value for the rule priority.</p>
    pub fn get_rule_order(&self) -> &::std::option::Option<f32> {
        &self.rule_order
    }
    /// <p>The name of the automation rule.</p>
    pub fn rule_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the automation rule.</p>
    pub fn set_rule_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_name = input;
        self
    }
    /// <p>The name of the automation rule.</p>
    pub fn get_rule_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_name
    }
    /// <p>The status of the automation rule.</p>
    pub fn rule_status(mut self, input: crate::types::RuleStatusV2) -> Self {
        self.rule_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the automation rule.</p>
    pub fn set_rule_status(mut self, input: ::std::option::Option<crate::types::RuleStatusV2>) -> Self {
        self.rule_status = input;
        self
    }
    /// <p>The status of the automation rule.</p>
    pub fn get_rule_status(&self) -> &::std::option::Option<crate::types::RuleStatusV2> {
        &self.rule_status
    }
    /// <p>An explanation for the purpose and funcitonality of the automation rule.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An explanation for the purpose and funcitonality of the automation rule.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>An explanation for the purpose and funcitonality of the automation rule.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The list of action to be performed when the rule criteria is met.</p>
    pub fn actions(mut self, input: crate::types::AutomationRulesActionTypeObjectV2) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of action to be performed when the rule criteria is met.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AutomationRulesActionTypeObjectV2>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>The list of action to be performed when the rule criteria is met.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AutomationRulesActionTypeObjectV2>> {
        &self.actions
    }
    /// <p>The timestamp for when the automation rule was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp for when the automation rule was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp for when the automation rule was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp for the most recent modification to the automation rule.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp for the most recent modification to the automation rule.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp for the most recent modification to the automation rule.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Consumes the builder and constructs a [`AutomationRulesMetadataV2`](crate::types::AutomationRulesMetadataV2).
    pub fn build(self) -> crate::types::AutomationRulesMetadataV2 {
        crate::types::AutomationRulesMetadataV2 {
            rule_arn: self.rule_arn,
            rule_id: self.rule_id,
            rule_order: self.rule_order,
            rule_name: self.rule_name,
            rule_status: self.rule_status,
            description: self.description,
            actions: self.actions,
            created_at: self.created_at,
            updated_at: self.updated_at,
        }
    }
}
