// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The list of findings that were not updated.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchUpdateFindingsV2UnprocessedFinding {
    /// <p>The finding identifier of an unprocessed finding.</p>
    pub finding_identifier: ::std::option::Option<crate::types::OcsfFindingIdentifier>,
    /// <p>The metadata.uid of an unprocessed finding.</p>
    pub metadata_uid: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the specific type of error preventing successful processing of a finding during a batch update operation.</p>
    pub error_code: ::std::option::Option<crate::types::BatchUpdateFindingsV2UnprocessedFindingErrorCode>,
    /// <p>A detailed description of why a finding could not be processed during a batch update operation.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
}
impl BatchUpdateFindingsV2UnprocessedFinding {
    /// <p>The finding identifier of an unprocessed finding.</p>
    pub fn finding_identifier(&self) -> ::std::option::Option<&crate::types::OcsfFindingIdentifier> {
        self.finding_identifier.as_ref()
    }
    /// <p>The metadata.uid of an unprocessed finding.</p>
    pub fn metadata_uid(&self) -> ::std::option::Option<&str> {
        self.metadata_uid.as_deref()
    }
    /// <p>Indicates the specific type of error preventing successful processing of a finding during a batch update operation.</p>
    pub fn error_code(&self) -> ::std::option::Option<&crate::types::BatchUpdateFindingsV2UnprocessedFindingErrorCode> {
        self.error_code.as_ref()
    }
    /// <p>A detailed description of why a finding could not be processed during a batch update operation.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl BatchUpdateFindingsV2UnprocessedFinding {
    /// Creates a new builder-style object to manufacture [`BatchUpdateFindingsV2UnprocessedFinding`](crate::types::BatchUpdateFindingsV2UnprocessedFinding).
    pub fn builder() -> crate::types::builders::BatchUpdateFindingsV2UnprocessedFindingBuilder {
        crate::types::builders::BatchUpdateFindingsV2UnprocessedFindingBuilder::default()
    }
}

/// A builder for [`BatchUpdateFindingsV2UnprocessedFinding`](crate::types::BatchUpdateFindingsV2UnprocessedFinding).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchUpdateFindingsV2UnprocessedFindingBuilder {
    pub(crate) finding_identifier: ::std::option::Option<crate::types::OcsfFindingIdentifier>,
    pub(crate) metadata_uid: ::std::option::Option<::std::string::String>,
    pub(crate) error_code: ::std::option::Option<crate::types::BatchUpdateFindingsV2UnprocessedFindingErrorCode>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
}
impl BatchUpdateFindingsV2UnprocessedFindingBuilder {
    /// <p>The finding identifier of an unprocessed finding.</p>
    pub fn finding_identifier(mut self, input: crate::types::OcsfFindingIdentifier) -> Self {
        self.finding_identifier = ::std::option::Option::Some(input);
        self
    }
    /// <p>The finding identifier of an unprocessed finding.</p>
    pub fn set_finding_identifier(mut self, input: ::std::option::Option<crate::types::OcsfFindingIdentifier>) -> Self {
        self.finding_identifier = input;
        self
    }
    /// <p>The finding identifier of an unprocessed finding.</p>
    pub fn get_finding_identifier(&self) -> &::std::option::Option<crate::types::OcsfFindingIdentifier> {
        &self.finding_identifier
    }
    /// <p>The metadata.uid of an unprocessed finding.</p>
    pub fn metadata_uid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metadata_uid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The metadata.uid of an unprocessed finding.</p>
    pub fn set_metadata_uid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metadata_uid = input;
        self
    }
    /// <p>The metadata.uid of an unprocessed finding.</p>
    pub fn get_metadata_uid(&self) -> &::std::option::Option<::std::string::String> {
        &self.metadata_uid
    }
    /// <p>Indicates the specific type of error preventing successful processing of a finding during a batch update operation.</p>
    pub fn error_code(mut self, input: crate::types::BatchUpdateFindingsV2UnprocessedFindingErrorCode) -> Self {
        self.error_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the specific type of error preventing successful processing of a finding during a batch update operation.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<crate::types::BatchUpdateFindingsV2UnprocessedFindingErrorCode>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>Indicates the specific type of error preventing successful processing of a finding during a batch update operation.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<crate::types::BatchUpdateFindingsV2UnprocessedFindingErrorCode> {
        &self.error_code
    }
    /// <p>A detailed description of why a finding could not be processed during a batch update operation.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A detailed description of why a finding could not be processed during a batch update operation.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>A detailed description of why a finding could not be processed during a batch update operation.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// Consumes the builder and constructs a [`BatchUpdateFindingsV2UnprocessedFinding`](crate::types::BatchUpdateFindingsV2UnprocessedFinding).
    pub fn build(self) -> crate::types::BatchUpdateFindingsV2UnprocessedFinding {
        crate::types::BatchUpdateFindingsV2UnprocessedFinding {
            finding_identifier: self.finding_identifier,
            metadata_uid: self.metadata_uid,
            error_code: self.error_code,
            error_message: self.error_message,
        }
    }
}
