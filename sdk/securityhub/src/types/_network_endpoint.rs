// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about network endpoints involved in an Amazon GuardDuty Extended Threat Detection attack sequence. GuardDuty generates an attack sequence finding when multiple events align to a potentially suspicious activity. To receive GuardDuty attack sequence findings in Security Hub, you must have GuardDuty enabled. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty-extended-threat-detection.html">GuardDuty Extended Threat Detection </a> in the <i>Amazon GuardDuty User Guide</i>.</p>
/// <p>This field can provide information about the network endpoints associated with the resource in the attack sequence finding, or about a specific network endpoint used for the attack.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NetworkEndpoint {
    /// <p>The identifier of the network endpoint involved in the attack sequence.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The IP address used in the network endpoint.</p>
    pub ip: ::std::option::Option<::std::string::String>,
    /// <p>The domain information for the network endpoint.</p>
    pub domain: ::std::option::Option<::std::string::String>,
    /// <p>The port number associated with the network endpoint.</p>
    pub port: ::std::option::Option<i32>,
    /// <p>Information about the location of the network endpoint.</p>
    pub location: ::std::option::Option<crate::types::NetworkGeoLocation>,
    /// <p>The Autonomous System Number (ASN) of the network endpoint.</p>
    pub autonomous_system: ::std::option::Option<crate::types::NetworkAutonomousSystem>,
    /// <p>Information about the network connection.</p>
    pub connection: ::std::option::Option<crate::types::NetworkConnection>,
}
impl NetworkEndpoint {
    /// <p>The identifier of the network endpoint involved in the attack sequence.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The IP address used in the network endpoint.</p>
    pub fn ip(&self) -> ::std::option::Option<&str> {
        self.ip.as_deref()
    }
    /// <p>The domain information for the network endpoint.</p>
    pub fn domain(&self) -> ::std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The port number associated with the network endpoint.</p>
    pub fn port(&self) -> ::std::option::Option<i32> {
        self.port
    }
    /// <p>Information about the location of the network endpoint.</p>
    pub fn location(&self) -> ::std::option::Option<&crate::types::NetworkGeoLocation> {
        self.location.as_ref()
    }
    /// <p>The Autonomous System Number (ASN) of the network endpoint.</p>
    pub fn autonomous_system(&self) -> ::std::option::Option<&crate::types::NetworkAutonomousSystem> {
        self.autonomous_system.as_ref()
    }
    /// <p>Information about the network connection.</p>
    pub fn connection(&self) -> ::std::option::Option<&crate::types::NetworkConnection> {
        self.connection.as_ref()
    }
}
impl NetworkEndpoint {
    /// Creates a new builder-style object to manufacture [`NetworkEndpoint`](crate::types::NetworkEndpoint).
    pub fn builder() -> crate::types::builders::NetworkEndpointBuilder {
        crate::types::builders::NetworkEndpointBuilder::default()
    }
}

/// A builder for [`NetworkEndpoint`](crate::types::NetworkEndpoint).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NetworkEndpointBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) ip: ::std::option::Option<::std::string::String>,
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) port: ::std::option::Option<i32>,
    pub(crate) location: ::std::option::Option<crate::types::NetworkGeoLocation>,
    pub(crate) autonomous_system: ::std::option::Option<crate::types::NetworkAutonomousSystem>,
    pub(crate) connection: ::std::option::Option<crate::types::NetworkConnection>,
}
impl NetworkEndpointBuilder {
    /// <p>The identifier of the network endpoint involved in the attack sequence.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the network endpoint involved in the attack sequence.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the network endpoint involved in the attack sequence.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The IP address used in the network endpoint.</p>
    pub fn ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address used in the network endpoint.</p>
    pub fn set_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ip = input;
        self
    }
    /// <p>The IP address used in the network endpoint.</p>
    pub fn get_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.ip
    }
    /// <p>The domain information for the network endpoint.</p>
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain information for the network endpoint.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The domain information for the network endpoint.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>The port number associated with the network endpoint.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port number associated with the network endpoint.</p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The port number associated with the network endpoint.</p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// <p>Information about the location of the network endpoint.</p>
    pub fn location(mut self, input: crate::types::NetworkGeoLocation) -> Self {
        self.location = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the location of the network endpoint.</p>
    pub fn set_location(mut self, input: ::std::option::Option<crate::types::NetworkGeoLocation>) -> Self {
        self.location = input;
        self
    }
    /// <p>Information about the location of the network endpoint.</p>
    pub fn get_location(&self) -> &::std::option::Option<crate::types::NetworkGeoLocation> {
        &self.location
    }
    /// <p>The Autonomous System Number (ASN) of the network endpoint.</p>
    pub fn autonomous_system(mut self, input: crate::types::NetworkAutonomousSystem) -> Self {
        self.autonomous_system = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Autonomous System Number (ASN) of the network endpoint.</p>
    pub fn set_autonomous_system(mut self, input: ::std::option::Option<crate::types::NetworkAutonomousSystem>) -> Self {
        self.autonomous_system = input;
        self
    }
    /// <p>The Autonomous System Number (ASN) of the network endpoint.</p>
    pub fn get_autonomous_system(&self) -> &::std::option::Option<crate::types::NetworkAutonomousSystem> {
        &self.autonomous_system
    }
    /// <p>Information about the network connection.</p>
    pub fn connection(mut self, input: crate::types::NetworkConnection) -> Self {
        self.connection = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the network connection.</p>
    pub fn set_connection(mut self, input: ::std::option::Option<crate::types::NetworkConnection>) -> Self {
        self.connection = input;
        self
    }
    /// <p>Information about the network connection.</p>
    pub fn get_connection(&self) -> &::std::option::Option<crate::types::NetworkConnection> {
        &self.connection
    }
    /// Consumes the builder and constructs a [`NetworkEndpoint`](crate::types::NetworkEndpoint).
    pub fn build(self) -> crate::types::NetworkEndpoint {
        crate::types::NetworkEndpoint {
            id: self.id,
            ip: self.ip,
            domain: self.domain,
            port: self.port,
            location: self.location,
            autonomous_system: self.autonomous_system,
            connection: self.connection,
        }
    }
}
