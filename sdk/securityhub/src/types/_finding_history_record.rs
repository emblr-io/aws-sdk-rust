// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of events that changed the specified finding during the specified time period. Each record represents a single finding change event.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FindingHistoryRecord {
    /// <p>Identifies which finding to get the finding history for.</p>
    pub finding_identifier: ::std::option::Option<crate::types::AwsSecurityFindingIdentifier>,
    /// <p>A timestamp that indicates when Security Hub processed the updated finding record.</p>
    /// <p>For more information about the validation and formatting of timestamp fields in Security Hub, see <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/Welcome.html#timestamps">Timestamps</a>.</p>
    pub update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Identifies whether the event marks the creation of a new finding. A value of <code>True</code> means that the finding is newly created. A value of <code>False</code> means that the finding isn’t newly created.</p>
    pub finding_created: ::std::option::Option<bool>,
    /// <p>Identifies the source of the event that changed the finding. For example, an integrated Amazon Web Services service or third-party partner integration may call <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchImportFindings.html"> <code>BatchImportFindings</code> </a>, or an Security Hub customer may call <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchUpdateFindings.html"> <code>BatchUpdateFindings</code> </a>.</p>
    pub update_source: ::std::option::Option<crate::types::FindingHistoryUpdateSource>,
    /// <p>An array of objects that provides details about the finding change event, including the Amazon Web Services Security Finding Format (ASFF) field that changed, the value of the field before the change, and the value of the field after the change.</p>
    pub updates: ::std::option::Option<::std::vec::Vec<crate::types::FindingHistoryUpdate>>,
    /// <p>A token for pagination purposes. Provide this token in the subsequent request to <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_GetFindingsHistory.html"> <code>GetFindingsHistory</code> </a> to get up to an additional 100 results of history for the same finding that you specified in your initial request.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl FindingHistoryRecord {
    /// <p>Identifies which finding to get the finding history for.</p>
    pub fn finding_identifier(&self) -> ::std::option::Option<&crate::types::AwsSecurityFindingIdentifier> {
        self.finding_identifier.as_ref()
    }
    /// <p>A timestamp that indicates when Security Hub processed the updated finding record.</p>
    /// <p>For more information about the validation and formatting of timestamp fields in Security Hub, see <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/Welcome.html#timestamps">Timestamps</a>.</p>
    pub fn update_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
    /// <p>Identifies whether the event marks the creation of a new finding. A value of <code>True</code> means that the finding is newly created. A value of <code>False</code> means that the finding isn’t newly created.</p>
    pub fn finding_created(&self) -> ::std::option::Option<bool> {
        self.finding_created
    }
    /// <p>Identifies the source of the event that changed the finding. For example, an integrated Amazon Web Services service or third-party partner integration may call <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchImportFindings.html"> <code>BatchImportFindings</code> </a>, or an Security Hub customer may call <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchUpdateFindings.html"> <code>BatchUpdateFindings</code> </a>.</p>
    pub fn update_source(&self) -> ::std::option::Option<&crate::types::FindingHistoryUpdateSource> {
        self.update_source.as_ref()
    }
    /// <p>An array of objects that provides details about the finding change event, including the Amazon Web Services Security Finding Format (ASFF) field that changed, the value of the field before the change, and the value of the field after the change.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.updates.is_none()`.
    pub fn updates(&self) -> &[crate::types::FindingHistoryUpdate] {
        self.updates.as_deref().unwrap_or_default()
    }
    /// <p>A token for pagination purposes. Provide this token in the subsequent request to <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_GetFindingsHistory.html"> <code>GetFindingsHistory</code> </a> to get up to an additional 100 results of history for the same finding that you specified in your initial request.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl FindingHistoryRecord {
    /// Creates a new builder-style object to manufacture [`FindingHistoryRecord`](crate::types::FindingHistoryRecord).
    pub fn builder() -> crate::types::builders::FindingHistoryRecordBuilder {
        crate::types::builders::FindingHistoryRecordBuilder::default()
    }
}

/// A builder for [`FindingHistoryRecord`](crate::types::FindingHistoryRecord).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FindingHistoryRecordBuilder {
    pub(crate) finding_identifier: ::std::option::Option<crate::types::AwsSecurityFindingIdentifier>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) finding_created: ::std::option::Option<bool>,
    pub(crate) update_source: ::std::option::Option<crate::types::FindingHistoryUpdateSource>,
    pub(crate) updates: ::std::option::Option<::std::vec::Vec<crate::types::FindingHistoryUpdate>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl FindingHistoryRecordBuilder {
    /// <p>Identifies which finding to get the finding history for.</p>
    pub fn finding_identifier(mut self, input: crate::types::AwsSecurityFindingIdentifier) -> Self {
        self.finding_identifier = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies which finding to get the finding history for.</p>
    pub fn set_finding_identifier(mut self, input: ::std::option::Option<crate::types::AwsSecurityFindingIdentifier>) -> Self {
        self.finding_identifier = input;
        self
    }
    /// <p>Identifies which finding to get the finding history for.</p>
    pub fn get_finding_identifier(&self) -> &::std::option::Option<crate::types::AwsSecurityFindingIdentifier> {
        &self.finding_identifier
    }
    /// <p>A timestamp that indicates when Security Hub processed the updated finding record.</p>
    /// <p>For more information about the validation and formatting of timestamp fields in Security Hub, see <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/Welcome.html#timestamps">Timestamps</a>.</p>
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp that indicates when Security Hub processed the updated finding record.</p>
    /// <p>For more information about the validation and formatting of timestamp fields in Security Hub, see <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/Welcome.html#timestamps">Timestamps</a>.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>A timestamp that indicates when Security Hub processed the updated finding record.</p>
    /// <p>For more information about the validation and formatting of timestamp fields in Security Hub, see <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/Welcome.html#timestamps">Timestamps</a>.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// <p>Identifies whether the event marks the creation of a new finding. A value of <code>True</code> means that the finding is newly created. A value of <code>False</code> means that the finding isn’t newly created.</p>
    pub fn finding_created(mut self, input: bool) -> Self {
        self.finding_created = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies whether the event marks the creation of a new finding. A value of <code>True</code> means that the finding is newly created. A value of <code>False</code> means that the finding isn’t newly created.</p>
    pub fn set_finding_created(mut self, input: ::std::option::Option<bool>) -> Self {
        self.finding_created = input;
        self
    }
    /// <p>Identifies whether the event marks the creation of a new finding. A value of <code>True</code> means that the finding is newly created. A value of <code>False</code> means that the finding isn’t newly created.</p>
    pub fn get_finding_created(&self) -> &::std::option::Option<bool> {
        &self.finding_created
    }
    /// <p>Identifies the source of the event that changed the finding. For example, an integrated Amazon Web Services service or third-party partner integration may call <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchImportFindings.html"> <code>BatchImportFindings</code> </a>, or an Security Hub customer may call <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchUpdateFindings.html"> <code>BatchUpdateFindings</code> </a>.</p>
    pub fn update_source(mut self, input: crate::types::FindingHistoryUpdateSource) -> Self {
        self.update_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies the source of the event that changed the finding. For example, an integrated Amazon Web Services service or third-party partner integration may call <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchImportFindings.html"> <code>BatchImportFindings</code> </a>, or an Security Hub customer may call <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchUpdateFindings.html"> <code>BatchUpdateFindings</code> </a>.</p>
    pub fn set_update_source(mut self, input: ::std::option::Option<crate::types::FindingHistoryUpdateSource>) -> Self {
        self.update_source = input;
        self
    }
    /// <p>Identifies the source of the event that changed the finding. For example, an integrated Amazon Web Services service or third-party partner integration may call <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchImportFindings.html"> <code>BatchImportFindings</code> </a>, or an Security Hub customer may call <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchUpdateFindings.html"> <code>BatchUpdateFindings</code> </a>.</p>
    pub fn get_update_source(&self) -> &::std::option::Option<crate::types::FindingHistoryUpdateSource> {
        &self.update_source
    }
    /// Appends an item to `updates`.
    ///
    /// To override the contents of this collection use [`set_updates`](Self::set_updates).
    ///
    /// <p>An array of objects that provides details about the finding change event, including the Amazon Web Services Security Finding Format (ASFF) field that changed, the value of the field before the change, and the value of the field after the change.</p>
    pub fn updates(mut self, input: crate::types::FindingHistoryUpdate) -> Self {
        let mut v = self.updates.unwrap_or_default();
        v.push(input);
        self.updates = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects that provides details about the finding change event, including the Amazon Web Services Security Finding Format (ASFF) field that changed, the value of the field before the change, and the value of the field after the change.</p>
    pub fn set_updates(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FindingHistoryUpdate>>) -> Self {
        self.updates = input;
        self
    }
    /// <p>An array of objects that provides details about the finding change event, including the Amazon Web Services Security Finding Format (ASFF) field that changed, the value of the field before the change, and the value of the field after the change.</p>
    pub fn get_updates(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FindingHistoryUpdate>> {
        &self.updates
    }
    /// <p>A token for pagination purposes. Provide this token in the subsequent request to <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_GetFindingsHistory.html"> <code>GetFindingsHistory</code> </a> to get up to an additional 100 results of history for the same finding that you specified in your initial request.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token for pagination purposes. Provide this token in the subsequent request to <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_GetFindingsHistory.html"> <code>GetFindingsHistory</code> </a> to get up to an additional 100 results of history for the same finding that you specified in your initial request.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token for pagination purposes. Provide this token in the subsequent request to <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_GetFindingsHistory.html"> <code>GetFindingsHistory</code> </a> to get up to an additional 100 results of history for the same finding that you specified in your initial request.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`FindingHistoryRecord`](crate::types::FindingHistoryRecord).
    pub fn build(self) -> crate::types::FindingHistoryRecord {
        crate::types::FindingHistoryRecord {
            finding_identifier: self.finding_identifier,
            update_time: self.update_time,
            finding_created: self.finding_created,
            update_source: self.update_source,
            updates: self.updates,
            next_token: self.next_token,
        }
    }
}
