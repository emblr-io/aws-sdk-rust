// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Enables filtering of security findings based on date and timestamp fields in OCSF.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OcsfDateFilter {
    /// <p>The name of the field.</p>
    pub field_name: ::std::option::Option<crate::types::OcsfDateField>,
    /// <p>A date filter for querying findings.</p>
    pub filter: ::std::option::Option<crate::types::DateFilter>,
}
impl OcsfDateFilter {
    /// <p>The name of the field.</p>
    pub fn field_name(&self) -> ::std::option::Option<&crate::types::OcsfDateField> {
        self.field_name.as_ref()
    }
    /// <p>A date filter for querying findings.</p>
    pub fn filter(&self) -> ::std::option::Option<&crate::types::DateFilter> {
        self.filter.as_ref()
    }
}
impl OcsfDateFilter {
    /// Creates a new builder-style object to manufacture [`OcsfDateFilter`](crate::types::OcsfDateFilter).
    pub fn builder() -> crate::types::builders::OcsfDateFilterBuilder {
        crate::types::builders::OcsfDateFilterBuilder::default()
    }
}

/// A builder for [`OcsfDateFilter`](crate::types::OcsfDateFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OcsfDateFilterBuilder {
    pub(crate) field_name: ::std::option::Option<crate::types::OcsfDateField>,
    pub(crate) filter: ::std::option::Option<crate::types::DateFilter>,
}
impl OcsfDateFilterBuilder {
    /// <p>The name of the field.</p>
    pub fn field_name(mut self, input: crate::types::OcsfDateField) -> Self {
        self.field_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the field.</p>
    pub fn set_field_name(mut self, input: ::std::option::Option<crate::types::OcsfDateField>) -> Self {
        self.field_name = input;
        self
    }
    /// <p>The name of the field.</p>
    pub fn get_field_name(&self) -> &::std::option::Option<crate::types::OcsfDateField> {
        &self.field_name
    }
    /// <p>A date filter for querying findings.</p>
    pub fn filter(mut self, input: crate::types::DateFilter) -> Self {
        self.filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>A date filter for querying findings.</p>
    pub fn set_filter(mut self, input: ::std::option::Option<crate::types::DateFilter>) -> Self {
        self.filter = input;
        self
    }
    /// <p>A date filter for querying findings.</p>
    pub fn get_filter(&self) -> &::std::option::Option<crate::types::DateFilter> {
        &self.filter
    }
    /// Consumes the builder and constructs a [`OcsfDateFilter`](crate::types::OcsfDateFilter).
    pub fn build(self) -> crate::types::OcsfDateFilter {
        crate::types::OcsfDateFilter {
            field_name: self.field_name,
            filter: self.filter,
        }
    }
}
