// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A comprehensive distribution of security findings by severity level for Amazon Web Services resources.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceSeverityBreakdown {
    /// <p>The number of findings not in any of the severity categories.</p>
    pub other: ::std::option::Option<i32>,
    /// <p>The number of findings with a severity level of fatal.</p>
    pub fatal: ::std::option::Option<i32>,
    /// <p>The number of findings with a severity level of critical.</p>
    pub critical: ::std::option::Option<i32>,
    /// <p>The number of findings with a severity level of high.</p>
    pub high: ::std::option::Option<i32>,
    /// <p>The number of findings with a severity level of medium.</p>
    pub medium: ::std::option::Option<i32>,
    /// <p>The number of findings with a severity level of low.</p>
    pub low: ::std::option::Option<i32>,
    /// <p>The number of findings that provide security-related information.</p>
    pub informational: ::std::option::Option<i32>,
    /// <p>The number of findings with a severity level cannot be determined.</p>
    pub unknown: ::std::option::Option<i32>,
}
impl ResourceSeverityBreakdown {
    /// <p>The number of findings not in any of the severity categories.</p>
    pub fn other(&self) -> ::std::option::Option<i32> {
        self.other
    }
    /// <p>The number of findings with a severity level of fatal.</p>
    pub fn fatal(&self) -> ::std::option::Option<i32> {
        self.fatal
    }
    /// <p>The number of findings with a severity level of critical.</p>
    pub fn critical(&self) -> ::std::option::Option<i32> {
        self.critical
    }
    /// <p>The number of findings with a severity level of high.</p>
    pub fn high(&self) -> ::std::option::Option<i32> {
        self.high
    }
    /// <p>The number of findings with a severity level of medium.</p>
    pub fn medium(&self) -> ::std::option::Option<i32> {
        self.medium
    }
    /// <p>The number of findings with a severity level of low.</p>
    pub fn low(&self) -> ::std::option::Option<i32> {
        self.low
    }
    /// <p>The number of findings that provide security-related information.</p>
    pub fn informational(&self) -> ::std::option::Option<i32> {
        self.informational
    }
    /// <p>The number of findings with a severity level cannot be determined.</p>
    pub fn unknown(&self) -> ::std::option::Option<i32> {
        self.unknown
    }
}
impl ResourceSeverityBreakdown {
    /// Creates a new builder-style object to manufacture [`ResourceSeverityBreakdown`](crate::types::ResourceSeverityBreakdown).
    pub fn builder() -> crate::types::builders::ResourceSeverityBreakdownBuilder {
        crate::types::builders::ResourceSeverityBreakdownBuilder::default()
    }
}

/// A builder for [`ResourceSeverityBreakdown`](crate::types::ResourceSeverityBreakdown).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ResourceSeverityBreakdownBuilder {
    pub(crate) other: ::std::option::Option<i32>,
    pub(crate) fatal: ::std::option::Option<i32>,
    pub(crate) critical: ::std::option::Option<i32>,
    pub(crate) high: ::std::option::Option<i32>,
    pub(crate) medium: ::std::option::Option<i32>,
    pub(crate) low: ::std::option::Option<i32>,
    pub(crate) informational: ::std::option::Option<i32>,
    pub(crate) unknown: ::std::option::Option<i32>,
}
impl ResourceSeverityBreakdownBuilder {
    /// <p>The number of findings not in any of the severity categories.</p>
    pub fn other(mut self, input: i32) -> Self {
        self.other = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of findings not in any of the severity categories.</p>
    pub fn set_other(mut self, input: ::std::option::Option<i32>) -> Self {
        self.other = input;
        self
    }
    /// <p>The number of findings not in any of the severity categories.</p>
    pub fn get_other(&self) -> &::std::option::Option<i32> {
        &self.other
    }
    /// <p>The number of findings with a severity level of fatal.</p>
    pub fn fatal(mut self, input: i32) -> Self {
        self.fatal = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of findings with a severity level of fatal.</p>
    pub fn set_fatal(mut self, input: ::std::option::Option<i32>) -> Self {
        self.fatal = input;
        self
    }
    /// <p>The number of findings with a severity level of fatal.</p>
    pub fn get_fatal(&self) -> &::std::option::Option<i32> {
        &self.fatal
    }
    /// <p>The number of findings with a severity level of critical.</p>
    pub fn critical(mut self, input: i32) -> Self {
        self.critical = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of findings with a severity level of critical.</p>
    pub fn set_critical(mut self, input: ::std::option::Option<i32>) -> Self {
        self.critical = input;
        self
    }
    /// <p>The number of findings with a severity level of critical.</p>
    pub fn get_critical(&self) -> &::std::option::Option<i32> {
        &self.critical
    }
    /// <p>The number of findings with a severity level of high.</p>
    pub fn high(mut self, input: i32) -> Self {
        self.high = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of findings with a severity level of high.</p>
    pub fn set_high(mut self, input: ::std::option::Option<i32>) -> Self {
        self.high = input;
        self
    }
    /// <p>The number of findings with a severity level of high.</p>
    pub fn get_high(&self) -> &::std::option::Option<i32> {
        &self.high
    }
    /// <p>The number of findings with a severity level of medium.</p>
    pub fn medium(mut self, input: i32) -> Self {
        self.medium = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of findings with a severity level of medium.</p>
    pub fn set_medium(mut self, input: ::std::option::Option<i32>) -> Self {
        self.medium = input;
        self
    }
    /// <p>The number of findings with a severity level of medium.</p>
    pub fn get_medium(&self) -> &::std::option::Option<i32> {
        &self.medium
    }
    /// <p>The number of findings with a severity level of low.</p>
    pub fn low(mut self, input: i32) -> Self {
        self.low = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of findings with a severity level of low.</p>
    pub fn set_low(mut self, input: ::std::option::Option<i32>) -> Self {
        self.low = input;
        self
    }
    /// <p>The number of findings with a severity level of low.</p>
    pub fn get_low(&self) -> &::std::option::Option<i32> {
        &self.low
    }
    /// <p>The number of findings that provide security-related information.</p>
    pub fn informational(mut self, input: i32) -> Self {
        self.informational = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of findings that provide security-related information.</p>
    pub fn set_informational(mut self, input: ::std::option::Option<i32>) -> Self {
        self.informational = input;
        self
    }
    /// <p>The number of findings that provide security-related information.</p>
    pub fn get_informational(&self) -> &::std::option::Option<i32> {
        &self.informational
    }
    /// <p>The number of findings with a severity level cannot be determined.</p>
    pub fn unknown(mut self, input: i32) -> Self {
        self.unknown = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of findings with a severity level cannot be determined.</p>
    pub fn set_unknown(mut self, input: ::std::option::Option<i32>) -> Self {
        self.unknown = input;
        self
    }
    /// <p>The number of findings with a severity level cannot be determined.</p>
    pub fn get_unknown(&self) -> &::std::option::Option<i32> {
        &self.unknown
    }
    /// Consumes the builder and constructs a [`ResourceSeverityBreakdown`](crate::types::ResourceSeverityBreakdown).
    pub fn build(self) -> crate::types::ResourceSeverityBreakdown {
        crate::types::ResourceSeverityBreakdown {
            other: self.other,
            fatal: self.fatal,
            critical: self.critical,
            high: self.high,
            medium: self.medium,
            low: self.low,
            informational: self.informational,
            unknown: self.unknown,
        }
    }
}
