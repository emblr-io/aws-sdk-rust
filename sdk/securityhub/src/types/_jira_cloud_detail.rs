// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the configuration and status of a Jira Cloud integration.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JiraCloudDetail {
    /// <p>The cloud id of the Jira Cloud.</p>
    pub cloud_id: ::std::option::Option<::std::string::String>,
    /// <p>The projectKey of Jira Cloud.</p>
    pub project_key: ::std::option::Option<::std::string::String>,
    /// <p>The URL domain of your Jira Cloud instance.</p>
    pub domain: ::std::option::Option<::std::string::String>,
    /// <p>The URL to provide to customers for OAuth auth code flow.</p>
    pub auth_url: ::std::option::Option<::std::string::String>,
    /// <p>The status of the authorization between Jira Cloud and the service.</p>
    pub auth_status: ::std::option::Option<crate::types::ConnectorAuthStatus>,
}
impl JiraCloudDetail {
    /// <p>The cloud id of the Jira Cloud.</p>
    pub fn cloud_id(&self) -> ::std::option::Option<&str> {
        self.cloud_id.as_deref()
    }
    /// <p>The projectKey of Jira Cloud.</p>
    pub fn project_key(&self) -> ::std::option::Option<&str> {
        self.project_key.as_deref()
    }
    /// <p>The URL domain of your Jira Cloud instance.</p>
    pub fn domain(&self) -> ::std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The URL to provide to customers for OAuth auth code flow.</p>
    pub fn auth_url(&self) -> ::std::option::Option<&str> {
        self.auth_url.as_deref()
    }
    /// <p>The status of the authorization between Jira Cloud and the service.</p>
    pub fn auth_status(&self) -> ::std::option::Option<&crate::types::ConnectorAuthStatus> {
        self.auth_status.as_ref()
    }
}
impl JiraCloudDetail {
    /// Creates a new builder-style object to manufacture [`JiraCloudDetail`](crate::types::JiraCloudDetail).
    pub fn builder() -> crate::types::builders::JiraCloudDetailBuilder {
        crate::types::builders::JiraCloudDetailBuilder::default()
    }
}

/// A builder for [`JiraCloudDetail`](crate::types::JiraCloudDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct JiraCloudDetailBuilder {
    pub(crate) cloud_id: ::std::option::Option<::std::string::String>,
    pub(crate) project_key: ::std::option::Option<::std::string::String>,
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) auth_url: ::std::option::Option<::std::string::String>,
    pub(crate) auth_status: ::std::option::Option<crate::types::ConnectorAuthStatus>,
}
impl JiraCloudDetailBuilder {
    /// <p>The cloud id of the Jira Cloud.</p>
    pub fn cloud_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloud_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cloud id of the Jira Cloud.</p>
    pub fn set_cloud_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloud_id = input;
        self
    }
    /// <p>The cloud id of the Jira Cloud.</p>
    pub fn get_cloud_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloud_id
    }
    /// <p>The projectKey of Jira Cloud.</p>
    pub fn project_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The projectKey of Jira Cloud.</p>
    pub fn set_project_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_key = input;
        self
    }
    /// <p>The projectKey of Jira Cloud.</p>
    pub fn get_project_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_key
    }
    /// <p>The URL domain of your Jira Cloud instance.</p>
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL domain of your Jira Cloud instance.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The URL domain of your Jira Cloud instance.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>The URL to provide to customers for OAuth auth code flow.</p>
    pub fn auth_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.auth_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL to provide to customers for OAuth auth code flow.</p>
    pub fn set_auth_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.auth_url = input;
        self
    }
    /// <p>The URL to provide to customers for OAuth auth code flow.</p>
    pub fn get_auth_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.auth_url
    }
    /// <p>The status of the authorization between Jira Cloud and the service.</p>
    pub fn auth_status(mut self, input: crate::types::ConnectorAuthStatus) -> Self {
        self.auth_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the authorization between Jira Cloud and the service.</p>
    pub fn set_auth_status(mut self, input: ::std::option::Option<crate::types::ConnectorAuthStatus>) -> Self {
        self.auth_status = input;
        self
    }
    /// <p>The status of the authorization between Jira Cloud and the service.</p>
    pub fn get_auth_status(&self) -> &::std::option::Option<crate::types::ConnectorAuthStatus> {
        &self.auth_status
    }
    /// Consumes the builder and constructs a [`JiraCloudDetail`](crate::types::JiraCloudDetail).
    pub fn build(self) -> crate::types::JiraCloudDetail {
        crate::types::JiraCloudDetail {
            cloud_id: self.cloud_id,
            project_key: self.project_key,
            domain: self.domain,
            auth_url: self.auth_url,
            auth_status: self.auth_status,
        }
    }
}
