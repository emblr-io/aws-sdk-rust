// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A resource that represents your subscription to a supported standard.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StandardsSubscription {
    /// <p>The ARN of the resource that represents your subscription to the standard.</p>
    pub standards_subscription_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the standard.</p>
    pub standards_arn: ::std::option::Option<::std::string::String>,
    /// <p>A key-value pair of input for the standard.</p>
    pub standards_input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The status of your subscription to the standard. Possible values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code> - The standard is in the process of being enabled. Or the standard is already enabled and Security Hub is adding new controls to the standard.</p></li>
    /// <li>
    /// <p><code>READY</code> - The standard is enabled.</p></li>
    /// <li>
    /// <p><code>INCOMPLETE</code> - The standard could not be enabled completely. One or more errors (<code>StandardsStatusReason</code>) occurred when Security Hub attempted to enable the standard.</p></li>
    /// <li>
    /// <p><code>DELETING</code> - The standard is in the process of being disabled.</p></li>
    /// <li>
    /// <p><code>FAILED</code> - The standard could not be disabled. One or more errors (<code>StandardsStatusReason</code>) occurred when Security Hub attempted to disable the standard.</p></li>
    /// </ul>
    pub standards_status: ::std::option::Option<crate::types::StandardsStatus>,
    /// <p>Specifies whether you can retrieve information about and configure individual controls that apply to the standard. Possible values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>READY_FOR_UPDATES</code> - Controls in the standard can be retrieved and configured.</p></li>
    /// <li>
    /// <p><code>NOT_READY_FOR_UPDATES</code> - Controls in the standard cannot be retrieved or configured.</p></li>
    /// </ul>
    pub standards_controls_updatable: ::std::option::Option<crate::types::StandardsControlsUpdatable>,
    /// <p>The reason for the current status.</p>
    pub standards_status_reason: ::std::option::Option<crate::types::StandardsStatusReason>,
}
impl StandardsSubscription {
    /// <p>The ARN of the resource that represents your subscription to the standard.</p>
    pub fn standards_subscription_arn(&self) -> ::std::option::Option<&str> {
        self.standards_subscription_arn.as_deref()
    }
    /// <p>The ARN of the standard.</p>
    pub fn standards_arn(&self) -> ::std::option::Option<&str> {
        self.standards_arn.as_deref()
    }
    /// <p>A key-value pair of input for the standard.</p>
    pub fn standards_input(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.standards_input.as_ref()
    }
    /// <p>The status of your subscription to the standard. Possible values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code> - The standard is in the process of being enabled. Or the standard is already enabled and Security Hub is adding new controls to the standard.</p></li>
    /// <li>
    /// <p><code>READY</code> - The standard is enabled.</p></li>
    /// <li>
    /// <p><code>INCOMPLETE</code> - The standard could not be enabled completely. One or more errors (<code>StandardsStatusReason</code>) occurred when Security Hub attempted to enable the standard.</p></li>
    /// <li>
    /// <p><code>DELETING</code> - The standard is in the process of being disabled.</p></li>
    /// <li>
    /// <p><code>FAILED</code> - The standard could not be disabled. One or more errors (<code>StandardsStatusReason</code>) occurred when Security Hub attempted to disable the standard.</p></li>
    /// </ul>
    pub fn standards_status(&self) -> ::std::option::Option<&crate::types::StandardsStatus> {
        self.standards_status.as_ref()
    }
    /// <p>Specifies whether you can retrieve information about and configure individual controls that apply to the standard. Possible values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>READY_FOR_UPDATES</code> - Controls in the standard can be retrieved and configured.</p></li>
    /// <li>
    /// <p><code>NOT_READY_FOR_UPDATES</code> - Controls in the standard cannot be retrieved or configured.</p></li>
    /// </ul>
    pub fn standards_controls_updatable(&self) -> ::std::option::Option<&crate::types::StandardsControlsUpdatable> {
        self.standards_controls_updatable.as_ref()
    }
    /// <p>The reason for the current status.</p>
    pub fn standards_status_reason(&self) -> ::std::option::Option<&crate::types::StandardsStatusReason> {
        self.standards_status_reason.as_ref()
    }
}
impl StandardsSubscription {
    /// Creates a new builder-style object to manufacture [`StandardsSubscription`](crate::types::StandardsSubscription).
    pub fn builder() -> crate::types::builders::StandardsSubscriptionBuilder {
        crate::types::builders::StandardsSubscriptionBuilder::default()
    }
}

/// A builder for [`StandardsSubscription`](crate::types::StandardsSubscription).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StandardsSubscriptionBuilder {
    pub(crate) standards_subscription_arn: ::std::option::Option<::std::string::String>,
    pub(crate) standards_arn: ::std::option::Option<::std::string::String>,
    pub(crate) standards_input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) standards_status: ::std::option::Option<crate::types::StandardsStatus>,
    pub(crate) standards_controls_updatable: ::std::option::Option<crate::types::StandardsControlsUpdatable>,
    pub(crate) standards_status_reason: ::std::option::Option<crate::types::StandardsStatusReason>,
}
impl StandardsSubscriptionBuilder {
    /// <p>The ARN of the resource that represents your subscription to the standard.</p>
    /// This field is required.
    pub fn standards_subscription_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.standards_subscription_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the resource that represents your subscription to the standard.</p>
    pub fn set_standards_subscription_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.standards_subscription_arn = input;
        self
    }
    /// <p>The ARN of the resource that represents your subscription to the standard.</p>
    pub fn get_standards_subscription_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.standards_subscription_arn
    }
    /// <p>The ARN of the standard.</p>
    /// This field is required.
    pub fn standards_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.standards_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the standard.</p>
    pub fn set_standards_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.standards_arn = input;
        self
    }
    /// <p>The ARN of the standard.</p>
    pub fn get_standards_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.standards_arn
    }
    /// Adds a key-value pair to `standards_input`.
    ///
    /// To override the contents of this collection use [`set_standards_input`](Self::set_standards_input).
    ///
    /// <p>A key-value pair of input for the standard.</p>
    pub fn standards_input(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.standards_input.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.standards_input = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A key-value pair of input for the standard.</p>
    pub fn set_standards_input(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.standards_input = input;
        self
    }
    /// <p>A key-value pair of input for the standard.</p>
    pub fn get_standards_input(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.standards_input
    }
    /// <p>The status of your subscription to the standard. Possible values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code> - The standard is in the process of being enabled. Or the standard is already enabled and Security Hub is adding new controls to the standard.</p></li>
    /// <li>
    /// <p><code>READY</code> - The standard is enabled.</p></li>
    /// <li>
    /// <p><code>INCOMPLETE</code> - The standard could not be enabled completely. One or more errors (<code>StandardsStatusReason</code>) occurred when Security Hub attempted to enable the standard.</p></li>
    /// <li>
    /// <p><code>DELETING</code> - The standard is in the process of being disabled.</p></li>
    /// <li>
    /// <p><code>FAILED</code> - The standard could not be disabled. One or more errors (<code>StandardsStatusReason</code>) occurred when Security Hub attempted to disable the standard.</p></li>
    /// </ul>
    /// This field is required.
    pub fn standards_status(mut self, input: crate::types::StandardsStatus) -> Self {
        self.standards_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of your subscription to the standard. Possible values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code> - The standard is in the process of being enabled. Or the standard is already enabled and Security Hub is adding new controls to the standard.</p></li>
    /// <li>
    /// <p><code>READY</code> - The standard is enabled.</p></li>
    /// <li>
    /// <p><code>INCOMPLETE</code> - The standard could not be enabled completely. One or more errors (<code>StandardsStatusReason</code>) occurred when Security Hub attempted to enable the standard.</p></li>
    /// <li>
    /// <p><code>DELETING</code> - The standard is in the process of being disabled.</p></li>
    /// <li>
    /// <p><code>FAILED</code> - The standard could not be disabled. One or more errors (<code>StandardsStatusReason</code>) occurred when Security Hub attempted to disable the standard.</p></li>
    /// </ul>
    pub fn set_standards_status(mut self, input: ::std::option::Option<crate::types::StandardsStatus>) -> Self {
        self.standards_status = input;
        self
    }
    /// <p>The status of your subscription to the standard. Possible values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>PENDING</code> - The standard is in the process of being enabled. Or the standard is already enabled and Security Hub is adding new controls to the standard.</p></li>
    /// <li>
    /// <p><code>READY</code> - The standard is enabled.</p></li>
    /// <li>
    /// <p><code>INCOMPLETE</code> - The standard could not be enabled completely. One or more errors (<code>StandardsStatusReason</code>) occurred when Security Hub attempted to enable the standard.</p></li>
    /// <li>
    /// <p><code>DELETING</code> - The standard is in the process of being disabled.</p></li>
    /// <li>
    /// <p><code>FAILED</code> - The standard could not be disabled. One or more errors (<code>StandardsStatusReason</code>) occurred when Security Hub attempted to disable the standard.</p></li>
    /// </ul>
    pub fn get_standards_status(&self) -> &::std::option::Option<crate::types::StandardsStatus> {
        &self.standards_status
    }
    /// <p>Specifies whether you can retrieve information about and configure individual controls that apply to the standard. Possible values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>READY_FOR_UPDATES</code> - Controls in the standard can be retrieved and configured.</p></li>
    /// <li>
    /// <p><code>NOT_READY_FOR_UPDATES</code> - Controls in the standard cannot be retrieved or configured.</p></li>
    /// </ul>
    pub fn standards_controls_updatable(mut self, input: crate::types::StandardsControlsUpdatable) -> Self {
        self.standards_controls_updatable = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether you can retrieve information about and configure individual controls that apply to the standard. Possible values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>READY_FOR_UPDATES</code> - Controls in the standard can be retrieved and configured.</p></li>
    /// <li>
    /// <p><code>NOT_READY_FOR_UPDATES</code> - Controls in the standard cannot be retrieved or configured.</p></li>
    /// </ul>
    pub fn set_standards_controls_updatable(mut self, input: ::std::option::Option<crate::types::StandardsControlsUpdatable>) -> Self {
        self.standards_controls_updatable = input;
        self
    }
    /// <p>Specifies whether you can retrieve information about and configure individual controls that apply to the standard. Possible values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>READY_FOR_UPDATES</code> - Controls in the standard can be retrieved and configured.</p></li>
    /// <li>
    /// <p><code>NOT_READY_FOR_UPDATES</code> - Controls in the standard cannot be retrieved or configured.</p></li>
    /// </ul>
    pub fn get_standards_controls_updatable(&self) -> &::std::option::Option<crate::types::StandardsControlsUpdatable> {
        &self.standards_controls_updatable
    }
    /// <p>The reason for the current status.</p>
    pub fn standards_status_reason(mut self, input: crate::types::StandardsStatusReason) -> Self {
        self.standards_status_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>The reason for the current status.</p>
    pub fn set_standards_status_reason(mut self, input: ::std::option::Option<crate::types::StandardsStatusReason>) -> Self {
        self.standards_status_reason = input;
        self
    }
    /// <p>The reason for the current status.</p>
    pub fn get_standards_status_reason(&self) -> &::std::option::Option<crate::types::StandardsStatusReason> {
        &self.standards_status_reason
    }
    /// Consumes the builder and constructs a [`StandardsSubscription`](crate::types::StandardsSubscription).
    pub fn build(self) -> crate::types::StandardsSubscription {
        crate::types::StandardsSubscription {
            standards_subscription_arn: self.standards_subscription_arn,
            standards_arn: self.standards_arn,
            standards_input: self.standards_input,
            standards_status: self.standards_status,
            standards_controls_updatable: self.standards_controls_updatable,
            standards_status_reason: self.standards_status_reason,
        }
    }
}
