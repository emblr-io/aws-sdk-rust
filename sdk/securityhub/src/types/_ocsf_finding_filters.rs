// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the filtering criteria for security findings using OCSF.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OcsfFindingFilters {
    /// <p>Enables the creation of complex filtering conditions by combining filter criteria.</p>
    pub composite_filters: ::std::option::Option<::std::vec::Vec<crate::types::CompositeFilter>>,
    /// <p>The logical operators used to combine the filtering on multiple <code>CompositeFilters</code>.</p>
    pub composite_operator: ::std::option::Option<crate::types::AllowedOperators>,
}
impl OcsfFindingFilters {
    /// <p>Enables the creation of complex filtering conditions by combining filter criteria.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.composite_filters.is_none()`.
    pub fn composite_filters(&self) -> &[crate::types::CompositeFilter] {
        self.composite_filters.as_deref().unwrap_or_default()
    }
    /// <p>The logical operators used to combine the filtering on multiple <code>CompositeFilters</code>.</p>
    pub fn composite_operator(&self) -> ::std::option::Option<&crate::types::AllowedOperators> {
        self.composite_operator.as_ref()
    }
}
impl OcsfFindingFilters {
    /// Creates a new builder-style object to manufacture [`OcsfFindingFilters`](crate::types::OcsfFindingFilters).
    pub fn builder() -> crate::types::builders::OcsfFindingFiltersBuilder {
        crate::types::builders::OcsfFindingFiltersBuilder::default()
    }
}

/// A builder for [`OcsfFindingFilters`](crate::types::OcsfFindingFilters).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OcsfFindingFiltersBuilder {
    pub(crate) composite_filters: ::std::option::Option<::std::vec::Vec<crate::types::CompositeFilter>>,
    pub(crate) composite_operator: ::std::option::Option<crate::types::AllowedOperators>,
}
impl OcsfFindingFiltersBuilder {
    /// Appends an item to `composite_filters`.
    ///
    /// To override the contents of this collection use [`set_composite_filters`](Self::set_composite_filters).
    ///
    /// <p>Enables the creation of complex filtering conditions by combining filter criteria.</p>
    pub fn composite_filters(mut self, input: crate::types::CompositeFilter) -> Self {
        let mut v = self.composite_filters.unwrap_or_default();
        v.push(input);
        self.composite_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Enables the creation of complex filtering conditions by combining filter criteria.</p>
    pub fn set_composite_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CompositeFilter>>) -> Self {
        self.composite_filters = input;
        self
    }
    /// <p>Enables the creation of complex filtering conditions by combining filter criteria.</p>
    pub fn get_composite_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CompositeFilter>> {
        &self.composite_filters
    }
    /// <p>The logical operators used to combine the filtering on multiple <code>CompositeFilters</code>.</p>
    pub fn composite_operator(mut self, input: crate::types::AllowedOperators) -> Self {
        self.composite_operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The logical operators used to combine the filtering on multiple <code>CompositeFilters</code>.</p>
    pub fn set_composite_operator(mut self, input: ::std::option::Option<crate::types::AllowedOperators>) -> Self {
        self.composite_operator = input;
        self
    }
    /// <p>The logical operators used to combine the filtering on multiple <code>CompositeFilters</code>.</p>
    pub fn get_composite_operator(&self) -> &::std::option::Option<crate::types::AllowedOperators> {
        &self.composite_operator
    }
    /// Consumes the builder and constructs a [`OcsfFindingFilters`](crate::types::OcsfFindingFilters).
    pub fn build(self) -> crate::types::OcsfFindingFilters {
        crate::types::OcsfFindingFilters {
            composite_filters: self.composite_filters,
            composite_operator: self.composite_operator,
        }
    }
}
