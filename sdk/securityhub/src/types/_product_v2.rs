// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the structure for the productV2.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProductV2 {
    /// <p>The name of the productV2.</p>
    pub product_v2_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the organization or vendor that provides the productV2.</p>
    pub company_name: ::std::option::Option<::std::string::String>,
    /// <p>Detailed information about the productV2.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The domains or functional areas the productV2 addresses.</p>
    pub categories: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The type of integration.</p>
    pub integration_v2_types: ::std::option::Option<::std::vec::Vec<crate::types::IntegrationV2Type>>,
    /// <p>The console URL where you can purchase or subscribe to products.</p>
    pub marketplace_url: ::std::option::Option<::std::string::String>,
    /// <p>The URL to the serviceV@ or productV2 documentation about the integration, which includes how to activate the integration.</p>
    pub activation_url: ::std::option::Option<::std::string::String>,
}
impl ProductV2 {
    /// <p>The name of the productV2.</p>
    pub fn product_v2_name(&self) -> ::std::option::Option<&str> {
        self.product_v2_name.as_deref()
    }
    /// <p>The name of the organization or vendor that provides the productV2.</p>
    pub fn company_name(&self) -> ::std::option::Option<&str> {
        self.company_name.as_deref()
    }
    /// <p>Detailed information about the productV2.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The domains or functional areas the productV2 addresses.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.categories.is_none()`.
    pub fn categories(&self) -> &[::std::string::String] {
        self.categories.as_deref().unwrap_or_default()
    }
    /// <p>The type of integration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.integration_v2_types.is_none()`.
    pub fn integration_v2_types(&self) -> &[crate::types::IntegrationV2Type] {
        self.integration_v2_types.as_deref().unwrap_or_default()
    }
    /// <p>The console URL where you can purchase or subscribe to products.</p>
    pub fn marketplace_url(&self) -> ::std::option::Option<&str> {
        self.marketplace_url.as_deref()
    }
    /// <p>The URL to the serviceV@ or productV2 documentation about the integration, which includes how to activate the integration.</p>
    pub fn activation_url(&self) -> ::std::option::Option<&str> {
        self.activation_url.as_deref()
    }
}
impl ProductV2 {
    /// Creates a new builder-style object to manufacture [`ProductV2`](crate::types::ProductV2).
    pub fn builder() -> crate::types::builders::ProductV2Builder {
        crate::types::builders::ProductV2Builder::default()
    }
}

/// A builder for [`ProductV2`](crate::types::ProductV2).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProductV2Builder {
    pub(crate) product_v2_name: ::std::option::Option<::std::string::String>,
    pub(crate) company_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) categories: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) integration_v2_types: ::std::option::Option<::std::vec::Vec<crate::types::IntegrationV2Type>>,
    pub(crate) marketplace_url: ::std::option::Option<::std::string::String>,
    pub(crate) activation_url: ::std::option::Option<::std::string::String>,
}
impl ProductV2Builder {
    /// <p>The name of the productV2.</p>
    pub fn product_v2_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.product_v2_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the productV2.</p>
    pub fn set_product_v2_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.product_v2_name = input;
        self
    }
    /// <p>The name of the productV2.</p>
    pub fn get_product_v2_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.product_v2_name
    }
    /// <p>The name of the organization or vendor that provides the productV2.</p>
    pub fn company_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.company_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the organization or vendor that provides the productV2.</p>
    pub fn set_company_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.company_name = input;
        self
    }
    /// <p>The name of the organization or vendor that provides the productV2.</p>
    pub fn get_company_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.company_name
    }
    /// <p>Detailed information about the productV2.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Detailed information about the productV2.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Detailed information about the productV2.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `categories`.
    ///
    /// To override the contents of this collection use [`set_categories`](Self::set_categories).
    ///
    /// <p>The domains or functional areas the productV2 addresses.</p>
    pub fn categories(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.categories.unwrap_or_default();
        v.push(input.into());
        self.categories = ::std::option::Option::Some(v);
        self
    }
    /// <p>The domains or functional areas the productV2 addresses.</p>
    pub fn set_categories(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.categories = input;
        self
    }
    /// <p>The domains or functional areas the productV2 addresses.</p>
    pub fn get_categories(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.categories
    }
    /// Appends an item to `integration_v2_types`.
    ///
    /// To override the contents of this collection use [`set_integration_v2_types`](Self::set_integration_v2_types).
    ///
    /// <p>The type of integration.</p>
    pub fn integration_v2_types(mut self, input: crate::types::IntegrationV2Type) -> Self {
        let mut v = self.integration_v2_types.unwrap_or_default();
        v.push(input);
        self.integration_v2_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The type of integration.</p>
    pub fn set_integration_v2_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IntegrationV2Type>>) -> Self {
        self.integration_v2_types = input;
        self
    }
    /// <p>The type of integration.</p>
    pub fn get_integration_v2_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IntegrationV2Type>> {
        &self.integration_v2_types
    }
    /// <p>The console URL where you can purchase or subscribe to products.</p>
    pub fn marketplace_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marketplace_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The console URL where you can purchase or subscribe to products.</p>
    pub fn set_marketplace_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marketplace_url = input;
        self
    }
    /// <p>The console URL where you can purchase or subscribe to products.</p>
    pub fn get_marketplace_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.marketplace_url
    }
    /// <p>The URL to the serviceV@ or productV2 documentation about the integration, which includes how to activate the integration.</p>
    pub fn activation_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.activation_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL to the serviceV@ or productV2 documentation about the integration, which includes how to activate the integration.</p>
    pub fn set_activation_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.activation_url = input;
        self
    }
    /// <p>The URL to the serviceV@ or productV2 documentation about the integration, which includes how to activate the integration.</p>
    pub fn get_activation_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.activation_url
    }
    /// Consumes the builder and constructs a [`ProductV2`](crate::types::ProductV2).
    pub fn build(self) -> crate::types::ProductV2 {
        crate::types::ProductV2 {
            product_v2_name: self.product_v2_name,
            company_name: self.company_name,
            description: self.description,
            categories: self.categories,
            integration_v2_types: self.integration_v2_types,
            marketplace_url: self.marketplace_url,
            activation_url: self.activation_url,
        }
    }
}
