// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The initial configuration settings required to establish an integration between Security Hub and Jira Cloud.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JiraCloudProviderConfiguration {
    /// <p>The project key for a JiraCloud instance.</p>
    pub project_key: ::std::option::Option<::std::string::String>,
}
impl JiraCloudProviderConfiguration {
    /// <p>The project key for a JiraCloud instance.</p>
    pub fn project_key(&self) -> ::std::option::Option<&str> {
        self.project_key.as_deref()
    }
}
impl JiraCloudProviderConfiguration {
    /// Creates a new builder-style object to manufacture [`JiraCloudProviderConfiguration`](crate::types::JiraCloudProviderConfiguration).
    pub fn builder() -> crate::types::builders::JiraCloudProviderConfigurationBuilder {
        crate::types::builders::JiraCloudProviderConfigurationBuilder::default()
    }
}

/// A builder for [`JiraCloudProviderConfiguration`](crate::types::JiraCloudProviderConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct JiraCloudProviderConfigurationBuilder {
    pub(crate) project_key: ::std::option::Option<::std::string::String>,
}
impl JiraCloudProviderConfigurationBuilder {
    /// <p>The project key for a JiraCloud instance.</p>
    pub fn project_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The project key for a JiraCloud instance.</p>
    pub fn set_project_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_key = input;
        self
    }
    /// <p>The project key for a JiraCloud instance.</p>
    pub fn get_project_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_key
    }
    /// Consumes the builder and constructs a [`JiraCloudProviderConfiguration`](crate::types::JiraCloudProviderConfiguration).
    pub fn build(self) -> crate::types::JiraCloudProviderConfiguration {
        crate::types::JiraCloudProviderConfiguration {
            project_key: self.project_key,
        }
    }
}
