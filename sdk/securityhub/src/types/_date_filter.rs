// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A date filter for querying findings.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DateFilter {
    /// <p>A timestamp that provides the start date for the date filter.</p>
    /// <p>For more information about the validation and formatting of timestamp fields in Security Hub, see <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/Welcome.html#timestamps">Timestamps</a>.</p>
    pub start: ::std::option::Option<::std::string::String>,
    /// <p>A timestamp that provides the end date for the date filter.</p>
    /// <p>For more information about the validation and formatting of timestamp fields in Security Hub, see <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/Welcome.html#timestamps">Timestamps</a>.</p>
    pub end: ::std::option::Option<::std::string::String>,
    /// <p>A date range for the date filter.</p>
    pub date_range: ::std::option::Option<crate::types::DateRange>,
}
impl DateFilter {
    /// <p>A timestamp that provides the start date for the date filter.</p>
    /// <p>For more information about the validation and formatting of timestamp fields in Security Hub, see <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/Welcome.html#timestamps">Timestamps</a>.</p>
    pub fn start(&self) -> ::std::option::Option<&str> {
        self.start.as_deref()
    }
    /// <p>A timestamp that provides the end date for the date filter.</p>
    /// <p>For more information about the validation and formatting of timestamp fields in Security Hub, see <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/Welcome.html#timestamps">Timestamps</a>.</p>
    pub fn end(&self) -> ::std::option::Option<&str> {
        self.end.as_deref()
    }
    /// <p>A date range for the date filter.</p>
    pub fn date_range(&self) -> ::std::option::Option<&crate::types::DateRange> {
        self.date_range.as_ref()
    }
}
impl DateFilter {
    /// Creates a new builder-style object to manufacture [`DateFilter`](crate::types::DateFilter).
    pub fn builder() -> crate::types::builders::DateFilterBuilder {
        crate::types::builders::DateFilterBuilder::default()
    }
}

/// A builder for [`DateFilter`](crate::types::DateFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DateFilterBuilder {
    pub(crate) start: ::std::option::Option<::std::string::String>,
    pub(crate) end: ::std::option::Option<::std::string::String>,
    pub(crate) date_range: ::std::option::Option<crate::types::DateRange>,
}
impl DateFilterBuilder {
    /// <p>A timestamp that provides the start date for the date filter.</p>
    /// <p>For more information about the validation and formatting of timestamp fields in Security Hub, see <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/Welcome.html#timestamps">Timestamps</a>.</p>
    pub fn start(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.start = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A timestamp that provides the start date for the date filter.</p>
    /// <p>For more information about the validation and formatting of timestamp fields in Security Hub, see <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/Welcome.html#timestamps">Timestamps</a>.</p>
    pub fn set_start(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.start = input;
        self
    }
    /// <p>A timestamp that provides the start date for the date filter.</p>
    /// <p>For more information about the validation and formatting of timestamp fields in Security Hub, see <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/Welcome.html#timestamps">Timestamps</a>.</p>
    pub fn get_start(&self) -> &::std::option::Option<::std::string::String> {
        &self.start
    }
    /// <p>A timestamp that provides the end date for the date filter.</p>
    /// <p>For more information about the validation and formatting of timestamp fields in Security Hub, see <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/Welcome.html#timestamps">Timestamps</a>.</p>
    pub fn end(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.end = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A timestamp that provides the end date for the date filter.</p>
    /// <p>For more information about the validation and formatting of timestamp fields in Security Hub, see <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/Welcome.html#timestamps">Timestamps</a>.</p>
    pub fn set_end(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.end = input;
        self
    }
    /// <p>A timestamp that provides the end date for the date filter.</p>
    /// <p>For more information about the validation and formatting of timestamp fields in Security Hub, see <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/Welcome.html#timestamps">Timestamps</a>.</p>
    pub fn get_end(&self) -> &::std::option::Option<::std::string::String> {
        &self.end
    }
    /// <p>A date range for the date filter.</p>
    pub fn date_range(mut self, input: crate::types::DateRange) -> Self {
        self.date_range = ::std::option::Option::Some(input);
        self
    }
    /// <p>A date range for the date filter.</p>
    pub fn set_date_range(mut self, input: ::std::option::Option<crate::types::DateRange>) -> Self {
        self.date_range = input;
        self
    }
    /// <p>A date range for the date filter.</p>
    pub fn get_date_range(&self) -> &::std::option::Option<crate::types::DateRange> {
        &self.date_range
    }
    /// Consumes the builder and constructs a [`DateFilter`](crate::types::DateFilter).
    pub fn build(self) -> crate::types::DateFilter {
        crate::types::DateFilter {
            start: self.start,
            end: self.end,
            date_range: self.date_range,
        }
    }
}
