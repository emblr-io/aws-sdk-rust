// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the credentials used by the threat actor identified in an Amazon GuardDuty Extended Threat Detection attack sequence. GuardDuty generates an attack sequence finding when multiple events align to a potentially suspicious activity. To receive GuardDuty attack sequence findings in Security Hub, you must have GuardDuty enabled. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty-extended-threat-detection.html">GuardDuty Extended Threat Detection </a> in the <i>Amazon GuardDuty User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ActorUser {
    /// <p>The name of the threat actor.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the threat actor.</p>
    pub uid: ::std::option::Option<::std::string::String>,
    /// <p>The type of user.</p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>Unique identifier of the threat actor’s user credentials.</p>
    pub credential_uid: ::std::option::Option<::std::string::String>,
    /// <p>The account of the threat actor.</p>
    pub account: ::std::option::Option<crate::types::UserAccount>,
}
impl ActorUser {
    /// <p>The name of the threat actor.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The unique identifier of the threat actor.</p>
    pub fn uid(&self) -> ::std::option::Option<&str> {
        self.uid.as_deref()
    }
    /// <p>The type of user.</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>Unique identifier of the threat actor’s user credentials.</p>
    pub fn credential_uid(&self) -> ::std::option::Option<&str> {
        self.credential_uid.as_deref()
    }
    /// <p>The account of the threat actor.</p>
    pub fn account(&self) -> ::std::option::Option<&crate::types::UserAccount> {
        self.account.as_ref()
    }
}
impl ActorUser {
    /// Creates a new builder-style object to manufacture [`ActorUser`](crate::types::ActorUser).
    pub fn builder() -> crate::types::builders::ActorUserBuilder {
        crate::types::builders::ActorUserBuilder::default()
    }
}

/// A builder for [`ActorUser`](crate::types::ActorUser).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ActorUserBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) uid: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) credential_uid: ::std::option::Option<::std::string::String>,
    pub(crate) account: ::std::option::Option<crate::types::UserAccount>,
}
impl ActorUserBuilder {
    /// <p>The name of the threat actor.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the threat actor.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the threat actor.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The unique identifier of the threat actor.</p>
    pub fn uid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.uid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the threat actor.</p>
    pub fn set_uid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.uid = input;
        self
    }
    /// <p>The unique identifier of the threat actor.</p>
    pub fn get_uid(&self) -> &::std::option::Option<::std::string::String> {
        &self.uid
    }
    /// <p>The type of user.</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of user.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of user.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>Unique identifier of the threat actor’s user credentials.</p>
    pub fn credential_uid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.credential_uid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier of the threat actor’s user credentials.</p>
    pub fn set_credential_uid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.credential_uid = input;
        self
    }
    /// <p>Unique identifier of the threat actor’s user credentials.</p>
    pub fn get_credential_uid(&self) -> &::std::option::Option<::std::string::String> {
        &self.credential_uid
    }
    /// <p>The account of the threat actor.</p>
    pub fn account(mut self, input: crate::types::UserAccount) -> Self {
        self.account = ::std::option::Option::Some(input);
        self
    }
    /// <p>The account of the threat actor.</p>
    pub fn set_account(mut self, input: ::std::option::Option<crate::types::UserAccount>) -> Self {
        self.account = input;
        self
    }
    /// <p>The account of the threat actor.</p>
    pub fn get_account(&self) -> &::std::option::Option<crate::types::UserAccount> {
        &self.account
    }
    /// Consumes the builder and constructs a [`ActorUser`](crate::types::ActorUser).
    pub fn build(self) -> crate::types::ActorUser {
        crate::types::ActorUser {
            name: self.name,
            uid: self.uid,
            r#type: self.r#type,
            credential_uid: self.credential_uid,
            account: self.account,
        }
    }
}
