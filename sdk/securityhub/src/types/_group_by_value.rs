// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents individual aggregated results when grouping security findings for each <code>GroupByField</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GroupByValue {
    /// <p>The value of the field by which findings are grouped.</p>
    pub field_value: ::std::option::Option<::std::string::String>,
    /// <p>The number of findings for a specific <code>FieldValue</code> and <code>GroupByField</code>.</p>
    pub count: ::std::option::Option<i32>,
}
impl GroupByValue {
    /// <p>The value of the field by which findings are grouped.</p>
    pub fn field_value(&self) -> ::std::option::Option<&str> {
        self.field_value.as_deref()
    }
    /// <p>The number of findings for a specific <code>FieldValue</code> and <code>GroupByField</code>.</p>
    pub fn count(&self) -> ::std::option::Option<i32> {
        self.count
    }
}
impl GroupByValue {
    /// Creates a new builder-style object to manufacture [`GroupByValue`](crate::types::GroupByValue).
    pub fn builder() -> crate::types::builders::GroupByValueBuilder {
        crate::types::builders::GroupByValueBuilder::default()
    }
}

/// A builder for [`GroupByValue`](crate::types::GroupByValue).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GroupByValueBuilder {
    pub(crate) field_value: ::std::option::Option<::std::string::String>,
    pub(crate) count: ::std::option::Option<i32>,
}
impl GroupByValueBuilder {
    /// <p>The value of the field by which findings are grouped.</p>
    pub fn field_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the field by which findings are grouped.</p>
    pub fn set_field_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_value = input;
        self
    }
    /// <p>The value of the field by which findings are grouped.</p>
    pub fn get_field_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_value
    }
    /// <p>The number of findings for a specific <code>FieldValue</code> and <code>GroupByField</code>.</p>
    pub fn count(mut self, input: i32) -> Self {
        self.count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of findings for a specific <code>FieldValue</code> and <code>GroupByField</code>.</p>
    pub fn set_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.count = input;
        self
    }
    /// <p>The number of findings for a specific <code>FieldValue</code> and <code>GroupByField</code>.</p>
    pub fn get_count(&self) -> &::std::option::Option<i32> {
        &self.count
    }
    /// Consumes the builder and constructs a [`GroupByValue`](crate::types::GroupByValue).
    pub fn build(self) -> crate::types::GroupByValue {
        crate::types::GroupByValue {
            field_value: self.field_value,
            count: self.count,
        }
    }
}
