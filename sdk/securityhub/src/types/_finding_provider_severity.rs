// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The severity assigned to a finding by the finding provider. This object may include one or more of the following attributes:</p>
/// <ul>
/// <li>
/// <p><code>Label</code></p></li>
/// <li>
/// <p><code>Normalized</code></p></li>
/// <li>
/// <p><code>Original</code></p></li>
/// <li>
/// <p><code>Product</code></p></li>
/// </ul>
/// <p>If a <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchImportFindings.html"> <code>BatchImportFindings</code> </a> request for a new finding only provides <code>Label</code> or only provides <code>Normalized</code>, Security Hub automatically populates the value of the other field.</p>
/// <p>The <code>Normalized</code> and <code>Product</code> attributes are included in the <code>FindingProviderSeverity</code> structure to preserve the historical information associated with the finding, even if the top-level <code>Severity</code> object is later modified using the <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchUpdateFindings.html"> <code>BatchUpdateFindings</code> </a> operation.</p>
/// <p>If the top-level <code>Finding.Severity</code> object is present, but <code>Finding.FindingProviderFields</code> isn't present, Security Hub creates the <code>FindingProviderFields.Severity</code> object and copies the entire <code>Finding.Severity</code> object into it. This ensures that the original, provider-supplied details are retained within the <code>FindingProviderFields.Severity</code> object, even if the top-level <code>Severity</code> object is overwritten.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FindingProviderSeverity {
    /// <p>The severity label assigned to the finding by the finding provider.</p>
    pub label: ::std::option::Option<crate::types::SeverityLabel>,
    /// <p>The finding provider's original value for the severity.</p>
    /// <p>Length Constraints: Minimum length of 1. Maximum length of 64.</p>
    pub original: ::std::option::Option<::std::string::String>,
}
impl FindingProviderSeverity {
    /// <p>The severity label assigned to the finding by the finding provider.</p>
    pub fn label(&self) -> ::std::option::Option<&crate::types::SeverityLabel> {
        self.label.as_ref()
    }
    /// <p>The finding provider's original value for the severity.</p>
    /// <p>Length Constraints: Minimum length of 1. Maximum length of 64.</p>
    pub fn original(&self) -> ::std::option::Option<&str> {
        self.original.as_deref()
    }
}
impl FindingProviderSeverity {
    /// Creates a new builder-style object to manufacture [`FindingProviderSeverity`](crate::types::FindingProviderSeverity).
    pub fn builder() -> crate::types::builders::FindingProviderSeverityBuilder {
        crate::types::builders::FindingProviderSeverityBuilder::default()
    }
}

/// A builder for [`FindingProviderSeverity`](crate::types::FindingProviderSeverity).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FindingProviderSeverityBuilder {
    pub(crate) label: ::std::option::Option<crate::types::SeverityLabel>,
    pub(crate) original: ::std::option::Option<::std::string::String>,
}
impl FindingProviderSeverityBuilder {
    /// <p>The severity label assigned to the finding by the finding provider.</p>
    pub fn label(mut self, input: crate::types::SeverityLabel) -> Self {
        self.label = ::std::option::Option::Some(input);
        self
    }
    /// <p>The severity label assigned to the finding by the finding provider.</p>
    pub fn set_label(mut self, input: ::std::option::Option<crate::types::SeverityLabel>) -> Self {
        self.label = input;
        self
    }
    /// <p>The severity label assigned to the finding by the finding provider.</p>
    pub fn get_label(&self) -> &::std::option::Option<crate::types::SeverityLabel> {
        &self.label
    }
    /// <p>The finding provider's original value for the severity.</p>
    /// <p>Length Constraints: Minimum length of 1. Maximum length of 64.</p>
    pub fn original(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.original = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The finding provider's original value for the severity.</p>
    /// <p>Length Constraints: Minimum length of 1. Maximum length of 64.</p>
    pub fn set_original(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.original = input;
        self
    }
    /// <p>The finding provider's original value for the severity.</p>
    /// <p>Length Constraints: Minimum length of 1. Maximum length of 64.</p>
    pub fn get_original(&self) -> &::std::option::Option<::std::string::String> {
        &self.original
    }
    /// Consumes the builder and constructs a [`FindingProviderSeverity`](crate::types::FindingProviderSeverity).
    pub fn build(self) -> crate::types::FindingProviderSeverity {
        crate::types::FindingProviderSeverity {
            label: self.label,
            original: self.original,
        }
    }
}
