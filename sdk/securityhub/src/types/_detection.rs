// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A top-level object field that provides details about an Amazon GuardDuty Extended Threat Detection attack sequence. GuardDuty generates an attack sequence finding when multiple events align to a potentially suspicious activity. To receive GuardDuty attack sequence findings in Security Hub, you must have GuardDuty enabled. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty-extended-threat-detection.html">GuardDuty Extended Threat Detection </a> in the <i>Amazon GuardDuty User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Detection {
    /// <p>Provides details about an attack sequence.</p>
    pub sequence: ::std::option::Option<crate::types::Sequence>,
}
impl Detection {
    /// <p>Provides details about an attack sequence.</p>
    pub fn sequence(&self) -> ::std::option::Option<&crate::types::Sequence> {
        self.sequence.as_ref()
    }
}
impl Detection {
    /// Creates a new builder-style object to manufacture [`Detection`](crate::types::Detection).
    pub fn builder() -> crate::types::builders::DetectionBuilder {
        crate::types::builders::DetectionBuilder::default()
    }
}

/// A builder for [`Detection`](crate::types::Detection).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DetectionBuilder {
    pub(crate) sequence: ::std::option::Option<crate::types::Sequence>,
}
impl DetectionBuilder {
    /// <p>Provides details about an attack sequence.</p>
    pub fn sequence(mut self, input: crate::types::Sequence) -> Self {
        self.sequence = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides details about an attack sequence.</p>
    pub fn set_sequence(mut self, input: ::std::option::Option<crate::types::Sequence>) -> Self {
        self.sequence = input;
        self
    }
    /// <p>Provides details about an attack sequence.</p>
    pub fn get_sequence(&self) -> &::std::option::Option<crate::types::Sequence> {
        &self.sequence
    }
    /// Consumes the builder and constructs a [`Detection`](crate::types::Detection).
    pub fn build(self) -> crate::types::Detection {
        crate::types::Detection { sequence: self.sequence }
    }
}
