// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the configuration for organizing and categorizing Amazon Web Services resources based on associated security findings.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceGroupByRule {
    /// <p>Specifies the attribute that resources should be grouped by.</p>
    pub group_by_field: ::std::option::Option<crate::types::ResourceGroupByField>,
    /// <p>The criteria used to select resources and associated security findings.</p>
    pub filters: ::std::option::Option<crate::types::ResourcesFilters>,
}
impl ResourceGroupByRule {
    /// <p>Specifies the attribute that resources should be grouped by.</p>
    pub fn group_by_field(&self) -> ::std::option::Option<&crate::types::ResourceGroupByField> {
        self.group_by_field.as_ref()
    }
    /// <p>The criteria used to select resources and associated security findings.</p>
    pub fn filters(&self) -> ::std::option::Option<&crate::types::ResourcesFilters> {
        self.filters.as_ref()
    }
}
impl ResourceGroupByRule {
    /// Creates a new builder-style object to manufacture [`ResourceGroupByRule`](crate::types::ResourceGroupByRule).
    pub fn builder() -> crate::types::builders::ResourceGroupByRuleBuilder {
        crate::types::builders::ResourceGroupByRuleBuilder::default()
    }
}

/// A builder for [`ResourceGroupByRule`](crate::types::ResourceGroupByRule).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ResourceGroupByRuleBuilder {
    pub(crate) group_by_field: ::std::option::Option<crate::types::ResourceGroupByField>,
    pub(crate) filters: ::std::option::Option<crate::types::ResourcesFilters>,
}
impl ResourceGroupByRuleBuilder {
    /// <p>Specifies the attribute that resources should be grouped by.</p>
    /// This field is required.
    pub fn group_by_field(mut self, input: crate::types::ResourceGroupByField) -> Self {
        self.group_by_field = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the attribute that resources should be grouped by.</p>
    pub fn set_group_by_field(mut self, input: ::std::option::Option<crate::types::ResourceGroupByField>) -> Self {
        self.group_by_field = input;
        self
    }
    /// <p>Specifies the attribute that resources should be grouped by.</p>
    pub fn get_group_by_field(&self) -> &::std::option::Option<crate::types::ResourceGroupByField> {
        &self.group_by_field
    }
    /// <p>The criteria used to select resources and associated security findings.</p>
    pub fn filters(mut self, input: crate::types::ResourcesFilters) -> Self {
        self.filters = ::std::option::Option::Some(input);
        self
    }
    /// <p>The criteria used to select resources and associated security findings.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<crate::types::ResourcesFilters>) -> Self {
        self.filters = input;
        self
    }
    /// <p>The criteria used to select resources and associated security findings.</p>
    pub fn get_filters(&self) -> &::std::option::Option<crate::types::ResourcesFilters> {
        &self.filters
    }
    /// Consumes the builder and constructs a [`ResourceGroupByRule`](crate::types::ResourceGroupByRule).
    pub fn build(self) -> crate::types::ResourceGroupByRule {
        crate::types::ResourceGroupByRule {
            group_by_field: self.group_by_field,
            filters: self.filters,
        }
    }
}
