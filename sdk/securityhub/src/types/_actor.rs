// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the threat actor identified in an Amazon GuardDuty Extended Threat Detection attack sequence. GuardDuty generates an attack sequence finding when multiple events align to a potentially suspicious activity. To receive GuardDuty attack sequence findings in Security Hub, you must have GuardDuty enabled. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty-extended-threat-detection.html">GuardDuty Extended Threat Detection </a> in the <i>Amazon GuardDuty User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Actor {
    /// <p>The ID of the threat actor.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>Contains information about the user credentials used by the threat actor.</p>
    pub user: ::std::option::Option<crate::types::ActorUser>,
    /// <p>Contains information about the user session where the activity initiated.</p>
    pub session: ::std::option::Option<crate::types::ActorSession>,
}
impl Actor {
    /// <p>The ID of the threat actor.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Contains information about the user credentials used by the threat actor.</p>
    pub fn user(&self) -> ::std::option::Option<&crate::types::ActorUser> {
        self.user.as_ref()
    }
    /// <p>Contains information about the user session where the activity initiated.</p>
    pub fn session(&self) -> ::std::option::Option<&crate::types::ActorSession> {
        self.session.as_ref()
    }
}
impl Actor {
    /// Creates a new builder-style object to manufacture [`Actor`](crate::types::Actor).
    pub fn builder() -> crate::types::builders::ActorBuilder {
        crate::types::builders::ActorBuilder::default()
    }
}

/// A builder for [`Actor`](crate::types::Actor).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ActorBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) user: ::std::option::Option<crate::types::ActorUser>,
    pub(crate) session: ::std::option::Option<crate::types::ActorSession>,
}
impl ActorBuilder {
    /// <p>The ID of the threat actor.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the threat actor.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the threat actor.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Contains information about the user credentials used by the threat actor.</p>
    pub fn user(mut self, input: crate::types::ActorUser) -> Self {
        self.user = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the user credentials used by the threat actor.</p>
    pub fn set_user(mut self, input: ::std::option::Option<crate::types::ActorUser>) -> Self {
        self.user = input;
        self
    }
    /// <p>Contains information about the user credentials used by the threat actor.</p>
    pub fn get_user(&self) -> &::std::option::Option<crate::types::ActorUser> {
        &self.user
    }
    /// <p>Contains information about the user session where the activity initiated.</p>
    pub fn session(mut self, input: crate::types::ActorSession) -> Self {
        self.session = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the user session where the activity initiated.</p>
    pub fn set_session(mut self, input: ::std::option::Option<crate::types::ActorSession>) -> Self {
        self.session = input;
        self
    }
    /// <p>Contains information about the user session where the activity initiated.</p>
    pub fn get_session(&self) -> &::std::option::Option<crate::types::ActorSession> {
        &self.session
    }
    /// Consumes the builder and constructs a [`Actor`](crate::types::Actor).
    pub fn build(self) -> crate::types::Actor {
        crate::types::Actor {
            id: self.id,
            user: self.user,
            session: self.session,
        }
    }
}
