// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the settings and parameters required for integrating external security tools and services.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExternalIntegrationConfiguration {
    /// <p>The ARN of the connector that establishes the integration.</p>
    pub connector_arn: ::std::option::Option<::std::string::String>,
}
impl ExternalIntegrationConfiguration {
    /// <p>The ARN of the connector that establishes the integration.</p>
    pub fn connector_arn(&self) -> ::std::option::Option<&str> {
        self.connector_arn.as_deref()
    }
}
impl ExternalIntegrationConfiguration {
    /// Creates a new builder-style object to manufacture [`ExternalIntegrationConfiguration`](crate::types::ExternalIntegrationConfiguration).
    pub fn builder() -> crate::types::builders::ExternalIntegrationConfigurationBuilder {
        crate::types::builders::ExternalIntegrationConfigurationBuilder::default()
    }
}

/// A builder for [`ExternalIntegrationConfiguration`](crate::types::ExternalIntegrationConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ExternalIntegrationConfigurationBuilder {
    pub(crate) connector_arn: ::std::option::Option<::std::string::String>,
}
impl ExternalIntegrationConfigurationBuilder {
    /// <p>The ARN of the connector that establishes the integration.</p>
    pub fn connector_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the connector that establishes the integration.</p>
    pub fn set_connector_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_arn = input;
        self
    }
    /// <p>The ARN of the connector that establishes the integration.</p>
    pub fn get_connector_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_arn
    }
    /// Consumes the builder and constructs a [`ExternalIntegrationConfiguration`](crate::types::ExternalIntegrationConfiguration).
    pub fn build(self) -> crate::types::ExternalIntegrationConfiguration {
        crate::types::ExternalIntegrationConfiguration {
            connector_arn: self.connector_arn,
        }
    }
}
