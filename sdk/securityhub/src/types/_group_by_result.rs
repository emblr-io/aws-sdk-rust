// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents finding statistics grouped by <code>GroupedByField</code>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GroupByResult {
    /// <p>The attribute by which filtered security findings should be grouped.</p>
    pub group_by_field: ::std::option::Option<::std::string::String>,
    /// <p>An array of grouped values and their respective counts for each <code>GroupByField</code>.</p>
    pub group_by_values: ::std::option::Option<::std::vec::Vec<crate::types::GroupByValue>>,
}
impl GroupByResult {
    /// <p>The attribute by which filtered security findings should be grouped.</p>
    pub fn group_by_field(&self) -> ::std::option::Option<&str> {
        self.group_by_field.as_deref()
    }
    /// <p>An array of grouped values and their respective counts for each <code>GroupByField</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.group_by_values.is_none()`.
    pub fn group_by_values(&self) -> &[crate::types::GroupByValue] {
        self.group_by_values.as_deref().unwrap_or_default()
    }
}
impl GroupByResult {
    /// Creates a new builder-style object to manufacture [`GroupByResult`](crate::types::GroupByResult).
    pub fn builder() -> crate::types::builders::GroupByResultBuilder {
        crate::types::builders::GroupByResultBuilder::default()
    }
}

/// A builder for [`GroupByResult`](crate::types::GroupByResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GroupByResultBuilder {
    pub(crate) group_by_field: ::std::option::Option<::std::string::String>,
    pub(crate) group_by_values: ::std::option::Option<::std::vec::Vec<crate::types::GroupByValue>>,
}
impl GroupByResultBuilder {
    /// <p>The attribute by which filtered security findings should be grouped.</p>
    pub fn group_by_field(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_by_field = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The attribute by which filtered security findings should be grouped.</p>
    pub fn set_group_by_field(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_by_field = input;
        self
    }
    /// <p>The attribute by which filtered security findings should be grouped.</p>
    pub fn get_group_by_field(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_by_field
    }
    /// Appends an item to `group_by_values`.
    ///
    /// To override the contents of this collection use [`set_group_by_values`](Self::set_group_by_values).
    ///
    /// <p>An array of grouped values and their respective counts for each <code>GroupByField</code>.</p>
    pub fn group_by_values(mut self, input: crate::types::GroupByValue) -> Self {
        let mut v = self.group_by_values.unwrap_or_default();
        v.push(input);
        self.group_by_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of grouped values and their respective counts for each <code>GroupByField</code>.</p>
    pub fn set_group_by_values(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GroupByValue>>) -> Self {
        self.group_by_values = input;
        self
    }
    /// <p>An array of grouped values and their respective counts for each <code>GroupByField</code>.</p>
    pub fn get_group_by_values(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GroupByValue>> {
        &self.group_by_values
    }
    /// Consumes the builder and constructs a [`GroupByResult`](crate::types::GroupByResult).
    pub fn build(self) -> crate::types::GroupByResult {
        crate::types::GroupByResult {
            group_by_field: self.group_by_field,
            group_by_values: self.group_by_values,
        }
    }
}
