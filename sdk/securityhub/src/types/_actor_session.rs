// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the authenticated session used by the threat actor identified in an Amazon GuardDuty Extended Threat Detection attack sequence. GuardDuty generates an attack sequence finding when multiple events align to a potentially suspicious activity. To receive GuardDuty attack sequence findings in Security Hub, you must have GuardDuty enabled. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty-extended-threat-detection.html">GuardDuty Extended Threat Detection </a> in the <i>Amazon GuardDuty User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ActorSession {
    /// <p>Unique identifier of the session.</p>
    pub uid: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether multi-factor authentication (MFA) was used for authentication during the session.</p>
    /// <p>In CloudTrail, you can find this value as <code>userIdentity.sessionContext.attributes.mfaAuthenticated</code>.</p>
    pub mfa_status: ::std::option::Option<crate::types::ActorSessionMfaStatus>,
    /// <p>The timestamp for when the session was created.</p>
    /// <p>In CloudTrail, you can find this value as <code>userIdentity.sessionContext.attributes.creationDate</code>.</p>
    pub created_time: ::std::option::Option<i64>,
    /// <p>The issuer of the session.</p>
    /// <p>In CloudTrail, you can find this value as <code>userIdentity.sessionContext.sessionIssuer.arn</code>.</p>
    pub issuer: ::std::option::Option<::std::string::String>,
}
impl ActorSession {
    /// <p>Unique identifier of the session.</p>
    pub fn uid(&self) -> ::std::option::Option<&str> {
        self.uid.as_deref()
    }
    /// <p>Indicates whether multi-factor authentication (MFA) was used for authentication during the session.</p>
    /// <p>In CloudTrail, you can find this value as <code>userIdentity.sessionContext.attributes.mfaAuthenticated</code>.</p>
    pub fn mfa_status(&self) -> ::std::option::Option<&crate::types::ActorSessionMfaStatus> {
        self.mfa_status.as_ref()
    }
    /// <p>The timestamp for when the session was created.</p>
    /// <p>In CloudTrail, you can find this value as <code>userIdentity.sessionContext.attributes.creationDate</code>.</p>
    pub fn created_time(&self) -> ::std::option::Option<i64> {
        self.created_time
    }
    /// <p>The issuer of the session.</p>
    /// <p>In CloudTrail, you can find this value as <code>userIdentity.sessionContext.sessionIssuer.arn</code>.</p>
    pub fn issuer(&self) -> ::std::option::Option<&str> {
        self.issuer.as_deref()
    }
}
impl ActorSession {
    /// Creates a new builder-style object to manufacture [`ActorSession`](crate::types::ActorSession).
    pub fn builder() -> crate::types::builders::ActorSessionBuilder {
        crate::types::builders::ActorSessionBuilder::default()
    }
}

/// A builder for [`ActorSession`](crate::types::ActorSession).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ActorSessionBuilder {
    pub(crate) uid: ::std::option::Option<::std::string::String>,
    pub(crate) mfa_status: ::std::option::Option<crate::types::ActorSessionMfaStatus>,
    pub(crate) created_time: ::std::option::Option<i64>,
    pub(crate) issuer: ::std::option::Option<::std::string::String>,
}
impl ActorSessionBuilder {
    /// <p>Unique identifier of the session.</p>
    pub fn uid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.uid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier of the session.</p>
    pub fn set_uid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.uid = input;
        self
    }
    /// <p>Unique identifier of the session.</p>
    pub fn get_uid(&self) -> &::std::option::Option<::std::string::String> {
        &self.uid
    }
    /// <p>Indicates whether multi-factor authentication (MFA) was used for authentication during the session.</p>
    /// <p>In CloudTrail, you can find this value as <code>userIdentity.sessionContext.attributes.mfaAuthenticated</code>.</p>
    pub fn mfa_status(mut self, input: crate::types::ActorSessionMfaStatus) -> Self {
        self.mfa_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether multi-factor authentication (MFA) was used for authentication during the session.</p>
    /// <p>In CloudTrail, you can find this value as <code>userIdentity.sessionContext.attributes.mfaAuthenticated</code>.</p>
    pub fn set_mfa_status(mut self, input: ::std::option::Option<crate::types::ActorSessionMfaStatus>) -> Self {
        self.mfa_status = input;
        self
    }
    /// <p>Indicates whether multi-factor authentication (MFA) was used for authentication during the session.</p>
    /// <p>In CloudTrail, you can find this value as <code>userIdentity.sessionContext.attributes.mfaAuthenticated</code>.</p>
    pub fn get_mfa_status(&self) -> &::std::option::Option<crate::types::ActorSessionMfaStatus> {
        &self.mfa_status
    }
    /// <p>The timestamp for when the session was created.</p>
    /// <p>In CloudTrail, you can find this value as <code>userIdentity.sessionContext.attributes.creationDate</code>.</p>
    pub fn created_time(mut self, input: i64) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp for when the session was created.</p>
    /// <p>In CloudTrail, you can find this value as <code>userIdentity.sessionContext.attributes.creationDate</code>.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<i64>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The timestamp for when the session was created.</p>
    /// <p>In CloudTrail, you can find this value as <code>userIdentity.sessionContext.attributes.creationDate</code>.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<i64> {
        &self.created_time
    }
    /// <p>The issuer of the session.</p>
    /// <p>In CloudTrail, you can find this value as <code>userIdentity.sessionContext.sessionIssuer.arn</code>.</p>
    pub fn issuer(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.issuer = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The issuer of the session.</p>
    /// <p>In CloudTrail, you can find this value as <code>userIdentity.sessionContext.sessionIssuer.arn</code>.</p>
    pub fn set_issuer(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.issuer = input;
        self
    }
    /// <p>The issuer of the session.</p>
    /// <p>In CloudTrail, you can find this value as <code>userIdentity.sessionContext.sessionIssuer.arn</code>.</p>
    pub fn get_issuer(&self) -> &::std::option::Option<::std::string::String> {
        &self.issuer
    }
    /// Consumes the builder and constructs a [`ActorSession`](crate::types::ActorSession).
    pub fn build(self) -> crate::types::ActorSession {
        crate::types::ActorSession {
            uid: self.uid,
            mfa_status: self.mfa_status,
            created_time: self.created_time,
            issuer: self.issuer,
        }
    }
}
