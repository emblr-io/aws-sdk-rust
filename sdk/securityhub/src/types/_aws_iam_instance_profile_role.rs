// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a role associated with an instance profile.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsIamInstanceProfileRole {
    /// <p>The ARN of the role.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The policy that grants an entity permission to assume the role.</p>
    pub assume_role_policy_document: ::std::option::Option<::std::string::String>,
    /// <p>Indicates when the role was created.</p>
    /// <p>For more information about the validation and formatting of timestamp fields in Security Hub, see <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/Welcome.html#timestamps">Timestamps</a>.</p>
    pub create_date: ::std::option::Option<::std::string::String>,
    /// <p>The path to the role.</p>
    pub path: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the role.</p>
    pub role_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the role.</p>
    pub role_name: ::std::option::Option<::std::string::String>,
}
impl AwsIamInstanceProfileRole {
    /// <p>The ARN of the role.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The policy that grants an entity permission to assume the role.</p>
    pub fn assume_role_policy_document(&self) -> ::std::option::Option<&str> {
        self.assume_role_policy_document.as_deref()
    }
    /// <p>Indicates when the role was created.</p>
    /// <p>For more information about the validation and formatting of timestamp fields in Security Hub, see <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/Welcome.html#timestamps">Timestamps</a>.</p>
    pub fn create_date(&self) -> ::std::option::Option<&str> {
        self.create_date.as_deref()
    }
    /// <p>The path to the role.</p>
    pub fn path(&self) -> ::std::option::Option<&str> {
        self.path.as_deref()
    }
    /// <p>The identifier of the role.</p>
    pub fn role_id(&self) -> ::std::option::Option<&str> {
        self.role_id.as_deref()
    }
    /// <p>The name of the role.</p>
    pub fn role_name(&self) -> ::std::option::Option<&str> {
        self.role_name.as_deref()
    }
}
impl AwsIamInstanceProfileRole {
    /// Creates a new builder-style object to manufacture [`AwsIamInstanceProfileRole`](crate::types::AwsIamInstanceProfileRole).
    pub fn builder() -> crate::types::builders::AwsIamInstanceProfileRoleBuilder {
        crate::types::builders::AwsIamInstanceProfileRoleBuilder::default()
    }
}

/// A builder for [`AwsIamInstanceProfileRole`](crate::types::AwsIamInstanceProfileRole).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AwsIamInstanceProfileRoleBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) assume_role_policy_document: ::std::option::Option<::std::string::String>,
    pub(crate) create_date: ::std::option::Option<::std::string::String>,
    pub(crate) path: ::std::option::Option<::std::string::String>,
    pub(crate) role_id: ::std::option::Option<::std::string::String>,
    pub(crate) role_name: ::std::option::Option<::std::string::String>,
}
impl AwsIamInstanceProfileRoleBuilder {
    /// <p>The ARN of the role.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the role.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the role.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The policy that grants an entity permission to assume the role.</p>
    pub fn assume_role_policy_document(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.assume_role_policy_document = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The policy that grants an entity permission to assume the role.</p>
    pub fn set_assume_role_policy_document(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.assume_role_policy_document = input;
        self
    }
    /// <p>The policy that grants an entity permission to assume the role.</p>
    pub fn get_assume_role_policy_document(&self) -> &::std::option::Option<::std::string::String> {
        &self.assume_role_policy_document
    }
    /// <p>Indicates when the role was created.</p>
    /// <p>For more information about the validation and formatting of timestamp fields in Security Hub, see <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/Welcome.html#timestamps">Timestamps</a>.</p>
    pub fn create_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.create_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates when the role was created.</p>
    /// <p>For more information about the validation and formatting of timestamp fields in Security Hub, see <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/Welcome.html#timestamps">Timestamps</a>.</p>
    pub fn set_create_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.create_date = input;
        self
    }
    /// <p>Indicates when the role was created.</p>
    /// <p>For more information about the validation and formatting of timestamp fields in Security Hub, see <a href="https://docs.aws.amazon.com/securityhub/1.0/APIReference/Welcome.html#timestamps">Timestamps</a>.</p>
    pub fn get_create_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.create_date
    }
    /// <p>The path to the role.</p>
    pub fn path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path to the role.</p>
    pub fn set_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.path = input;
        self
    }
    /// <p>The path to the role.</p>
    pub fn get_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.path
    }
    /// <p>The identifier of the role.</p>
    pub fn role_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the role.</p>
    pub fn set_role_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_id = input;
        self
    }
    /// <p>The identifier of the role.</p>
    pub fn get_role_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_id
    }
    /// <p>The name of the role.</p>
    pub fn role_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the role.</p>
    pub fn set_role_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_name = input;
        self
    }
    /// <p>The name of the role.</p>
    pub fn get_role_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_name
    }
    /// Consumes the builder and constructs a [`AwsIamInstanceProfileRole`](crate::types::AwsIamInstanceProfileRole).
    pub fn build(self) -> crate::types::AwsIamInstanceProfileRole {
        crate::types::AwsIamInstanceProfileRole {
            arn: self.arn,
            assume_role_policy_document: self.assume_role_policy_document,
            create_date: self.create_date,
            path: self.path,
            role_id: self.role_id,
            role_name: self.role_name,
        }
    }
}
