// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the location of a network endpoint involved in an Amazon GuardDuty Extended Threat Detection attack sequence. GuardDuty generates an attack sequence finding when multiple events align to a potentially suspicious activity. To receive GuardDuty attack sequence findings in Security Hub, you must have GuardDuty enabled. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty-extended-threat-detection.html">GuardDuty Extended Threat Detection </a> in the <i>Amazon GuardDuty User Guide</i>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NetworkGeoLocation {
    /// <p>The name of the city.</p>
    pub city: ::std::option::Option<::std::string::String>,
    /// <p>The name of the country.</p>
    pub country: ::std::option::Option<::std::string::String>,
    /// <p>The latitude information of the endpoint location.</p>
    pub lat: ::std::option::Option<f64>,
    /// <p>The longitude information of the endpoint location.</p>
    pub lon: ::std::option::Option<f64>,
}
impl NetworkGeoLocation {
    /// <p>The name of the city.</p>
    pub fn city(&self) -> ::std::option::Option<&str> {
        self.city.as_deref()
    }
    /// <p>The name of the country.</p>
    pub fn country(&self) -> ::std::option::Option<&str> {
        self.country.as_deref()
    }
    /// <p>The latitude information of the endpoint location.</p>
    pub fn lat(&self) -> ::std::option::Option<f64> {
        self.lat
    }
    /// <p>The longitude information of the endpoint location.</p>
    pub fn lon(&self) -> ::std::option::Option<f64> {
        self.lon
    }
}
impl NetworkGeoLocation {
    /// Creates a new builder-style object to manufacture [`NetworkGeoLocation`](crate::types::NetworkGeoLocation).
    pub fn builder() -> crate::types::builders::NetworkGeoLocationBuilder {
        crate::types::builders::NetworkGeoLocationBuilder::default()
    }
}

/// A builder for [`NetworkGeoLocation`](crate::types::NetworkGeoLocation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NetworkGeoLocationBuilder {
    pub(crate) city: ::std::option::Option<::std::string::String>,
    pub(crate) country: ::std::option::Option<::std::string::String>,
    pub(crate) lat: ::std::option::Option<f64>,
    pub(crate) lon: ::std::option::Option<f64>,
}
impl NetworkGeoLocationBuilder {
    /// <p>The name of the city.</p>
    pub fn city(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.city = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the city.</p>
    pub fn set_city(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.city = input;
        self
    }
    /// <p>The name of the city.</p>
    pub fn get_city(&self) -> &::std::option::Option<::std::string::String> {
        &self.city
    }
    /// <p>The name of the country.</p>
    pub fn country(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.country = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the country.</p>
    pub fn set_country(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.country = input;
        self
    }
    /// <p>The name of the country.</p>
    pub fn get_country(&self) -> &::std::option::Option<::std::string::String> {
        &self.country
    }
    /// <p>The latitude information of the endpoint location.</p>
    pub fn lat(mut self, input: f64) -> Self {
        self.lat = ::std::option::Option::Some(input);
        self
    }
    /// <p>The latitude information of the endpoint location.</p>
    pub fn set_lat(mut self, input: ::std::option::Option<f64>) -> Self {
        self.lat = input;
        self
    }
    /// <p>The latitude information of the endpoint location.</p>
    pub fn get_lat(&self) -> &::std::option::Option<f64> {
        &self.lat
    }
    /// <p>The longitude information of the endpoint location.</p>
    pub fn lon(mut self, input: f64) -> Self {
        self.lon = ::std::option::Option::Some(input);
        self
    }
    /// <p>The longitude information of the endpoint location.</p>
    pub fn set_lon(mut self, input: ::std::option::Option<f64>) -> Self {
        self.lon = input;
        self
    }
    /// <p>The longitude information of the endpoint location.</p>
    pub fn get_lon(&self) -> &::std::option::Option<f64> {
        &self.lon
    }
    /// Consumes the builder and constructs a [`NetworkGeoLocation`](crate::types::NetworkGeoLocation).
    pub fn build(self) -> crate::types::NetworkGeoLocation {
        crate::types::NetworkGeoLocation {
            city: self.city,
            country: self.country,
            lat: self.lat,
            lon: self.lon,
        }
    }
}
