// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The shared Slurm key for authentication, also known as the <b>cluster secret</b>.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SlurmAuthKey {
    /// <p>The Amazon Resource Name (ARN) of the the shared Slurm key.</p>
    pub secret_arn: ::std::string::String,
    /// <p>The version of the shared Slurm key.</p>
    pub secret_version: ::std::string::String,
}
impl SlurmAuthKey {
    /// <p>The Amazon Resource Name (ARN) of the the shared Slurm key.</p>
    pub fn secret_arn(&self) -> &str {
        use std::ops::Deref;
        self.secret_arn.deref()
    }
    /// <p>The version of the shared Slurm key.</p>
    pub fn secret_version(&self) -> &str {
        use std::ops::Deref;
        self.secret_version.deref()
    }
}
impl SlurmAuthKey {
    /// Creates a new builder-style object to manufacture [`SlurmAuthKey`](crate::types::SlurmAuthKey).
    pub fn builder() -> crate::types::builders::SlurmAuthKeyBuilder {
        crate::types::builders::SlurmAuthKeyBuilder::default()
    }
}

/// A builder for [`SlurmAuthKey`](crate::types::SlurmAuthKey).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SlurmAuthKeyBuilder {
    pub(crate) secret_arn: ::std::option::Option<::std::string::String>,
    pub(crate) secret_version: ::std::option::Option<::std::string::String>,
}
impl SlurmAuthKeyBuilder {
    /// <p>The Amazon Resource Name (ARN) of the the shared Slurm key.</p>
    /// This field is required.
    pub fn secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the the shared Slurm key.</p>
    pub fn set_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the the shared Slurm key.</p>
    pub fn get_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_arn
    }
    /// <p>The version of the shared Slurm key.</p>
    /// This field is required.
    pub fn secret_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the shared Slurm key.</p>
    pub fn set_secret_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_version = input;
        self
    }
    /// <p>The version of the shared Slurm key.</p>
    pub fn get_secret_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_version
    }
    /// Consumes the builder and constructs a [`SlurmAuthKey`](crate::types::SlurmAuthKey).
    /// This method will fail if any of the following fields are not set:
    /// - [`secret_arn`](crate::types::builders::SlurmAuthKeyBuilder::secret_arn)
    /// - [`secret_version`](crate::types::builders::SlurmAuthKeyBuilder::secret_version)
    pub fn build(self) -> ::std::result::Result<crate::types::SlurmAuthKey, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SlurmAuthKey {
            secret_arn: self.secret_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "secret_arn",
                    "secret_arn was not specified but it is required when building SlurmAuthKey",
                )
            })?,
            secret_version: self.secret_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "secret_version",
                    "secret_version was not specified but it is required when building SlurmAuthKey",
                )
            })?,
        })
    }
}
