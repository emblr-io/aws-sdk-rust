// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The compute node group configuration for a queue.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComputeNodeGroupConfiguration {
    /// <p>The compute node group ID for the compute node group configuration.</p>
    pub compute_node_group_id: ::std::option::Option<::std::string::String>,
}
impl ComputeNodeGroupConfiguration {
    /// <p>The compute node group ID for the compute node group configuration.</p>
    pub fn compute_node_group_id(&self) -> ::std::option::Option<&str> {
        self.compute_node_group_id.as_deref()
    }
}
impl ComputeNodeGroupConfiguration {
    /// Creates a new builder-style object to manufacture [`ComputeNodeGroupConfiguration`](crate::types::ComputeNodeGroupConfiguration).
    pub fn builder() -> crate::types::builders::ComputeNodeGroupConfigurationBuilder {
        crate::types::builders::ComputeNodeGroupConfigurationBuilder::default()
    }
}

/// A builder for [`ComputeNodeGroupConfiguration`](crate::types::ComputeNodeGroupConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ComputeNodeGroupConfigurationBuilder {
    pub(crate) compute_node_group_id: ::std::option::Option<::std::string::String>,
}
impl ComputeNodeGroupConfigurationBuilder {
    /// <p>The compute node group ID for the compute node group configuration.</p>
    pub fn compute_node_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.compute_node_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The compute node group ID for the compute node group configuration.</p>
    pub fn set_compute_node_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.compute_node_group_id = input;
        self
    }
    /// <p>The compute node group ID for the compute node group configuration.</p>
    pub fn get_compute_node_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.compute_node_group_id
    }
    /// Consumes the builder and constructs a [`ComputeNodeGroupConfiguration`](crate::types::ComputeNodeGroupConfiguration).
    pub fn build(self) -> crate::types::ComputeNodeGroupConfiguration {
        crate::types::ComputeNodeGroupConfiguration {
            compute_node_group_id: self.compute_node_group_id,
        }
    }
}
