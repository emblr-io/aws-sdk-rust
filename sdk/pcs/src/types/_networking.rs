// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The networking configuration for the cluster's control plane.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Networking {
    /// <p>The ID of the subnet where Amazon Web Services PCS creates an Elastic Network Interface (ENI) to enable communication between managed controllers and Amazon Web Services PCS resources. The subnet must have an available IP address, cannot reside in AWS Outposts, AWS Wavelength, or an AWS Local Zone.</p>
    /// <p>Example: <code>subnet-abcd1234</code></p>
    pub subnet_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The list of security group IDs associated with the Elastic Network Interface (ENI) created in subnets.</p>
    /// <p>The following rules are required:</p>
    /// <ul>
    /// <li>
    /// <p>Inbound rule 1</p>
    /// <ul>
    /// <li>
    /// <p>Protocol: All</p></li>
    /// <li>
    /// <p>Ports: All</p></li>
    /// <li>
    /// <p>Source: Self</p></li>
    /// </ul></li>
    /// <li>
    /// <p>Outbound rule 1</p>
    /// <ul>
    /// <li>
    /// <p>Protocol: All</p></li>
    /// <li>
    /// <p>Ports: All</p></li>
    /// <li>
    /// <p>Destination: 0.0.0.0/0 (IPv4)</p></li>
    /// </ul></li>
    /// <li>
    /// <p>Outbound rule 2</p>
    /// <ul>
    /// <li>
    /// <p>Protocol: All</p></li>
    /// <li>
    /// <p>Ports: All</p></li>
    /// <li>
    /// <p>Destination: Self</p></li>
    /// </ul></li>
    /// </ul>
    pub security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl Networking {
    /// <p>The ID of the subnet where Amazon Web Services PCS creates an Elastic Network Interface (ENI) to enable communication between managed controllers and Amazon Web Services PCS resources. The subnet must have an available IP address, cannot reside in AWS Outposts, AWS Wavelength, or an AWS Local Zone.</p>
    /// <p>Example: <code>subnet-abcd1234</code></p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.subnet_ids.is_none()`.
    pub fn subnet_ids(&self) -> &[::std::string::String] {
        self.subnet_ids.as_deref().unwrap_or_default()
    }
    /// <p>The list of security group IDs associated with the Elastic Network Interface (ENI) created in subnets.</p>
    /// <p>The following rules are required:</p>
    /// <ul>
    /// <li>
    /// <p>Inbound rule 1</p>
    /// <ul>
    /// <li>
    /// <p>Protocol: All</p></li>
    /// <li>
    /// <p>Ports: All</p></li>
    /// <li>
    /// <p>Source: Self</p></li>
    /// </ul></li>
    /// <li>
    /// <p>Outbound rule 1</p>
    /// <ul>
    /// <li>
    /// <p>Protocol: All</p></li>
    /// <li>
    /// <p>Ports: All</p></li>
    /// <li>
    /// <p>Destination: 0.0.0.0/0 (IPv4)</p></li>
    /// </ul></li>
    /// <li>
    /// <p>Outbound rule 2</p>
    /// <ul>
    /// <li>
    /// <p>Protocol: All</p></li>
    /// <li>
    /// <p>Ports: All</p></li>
    /// <li>
    /// <p>Destination: Self</p></li>
    /// </ul></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_group_ids.is_none()`.
    pub fn security_group_ids(&self) -> &[::std::string::String] {
        self.security_group_ids.as_deref().unwrap_or_default()
    }
}
impl Networking {
    /// Creates a new builder-style object to manufacture [`Networking`](crate::types::Networking).
    pub fn builder() -> crate::types::builders::NetworkingBuilder {
        crate::types::builders::NetworkingBuilder::default()
    }
}

/// A builder for [`Networking`](crate::types::Networking).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NetworkingBuilder {
    pub(crate) subnet_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl NetworkingBuilder {
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>The ID of the subnet where Amazon Web Services PCS creates an Elastic Network Interface (ENI) to enable communication between managed controllers and Amazon Web Services PCS resources. The subnet must have an available IP address, cannot reside in AWS Outposts, AWS Wavelength, or an AWS Local Zone.</p>
    /// <p>Example: <code>subnet-abcd1234</code></p>
    pub fn subnet_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The ID of the subnet where Amazon Web Services PCS creates an Elastic Network Interface (ENI) to enable communication between managed controllers and Amazon Web Services PCS resources. The subnet must have an available IP address, cannot reside in AWS Outposts, AWS Wavelength, or an AWS Local Zone.</p>
    /// <p>Example: <code>subnet-abcd1234</code></p>
    pub fn set_subnet_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.subnet_ids = input;
        self
    }
    /// <p>The ID of the subnet where Amazon Web Services PCS creates an Elastic Network Interface (ENI) to enable communication between managed controllers and Amazon Web Services PCS resources. The subnet must have an available IP address, cannot reside in AWS Outposts, AWS Wavelength, or an AWS Local Zone.</p>
    /// <p>Example: <code>subnet-abcd1234</code></p>
    pub fn get_subnet_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.subnet_ids
    }
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>The list of security group IDs associated with the Elastic Network Interface (ENI) created in subnets.</p>
    /// <p>The following rules are required:</p>
    /// <ul>
    /// <li>
    /// <p>Inbound rule 1</p>
    /// <ul>
    /// <li>
    /// <p>Protocol: All</p></li>
    /// <li>
    /// <p>Ports: All</p></li>
    /// <li>
    /// <p>Source: Self</p></li>
    /// </ul></li>
    /// <li>
    /// <p>Outbound rule 1</p>
    /// <ul>
    /// <li>
    /// <p>Protocol: All</p></li>
    /// <li>
    /// <p>Ports: All</p></li>
    /// <li>
    /// <p>Destination: 0.0.0.0/0 (IPv4)</p></li>
    /// </ul></li>
    /// <li>
    /// <p>Outbound rule 2</p>
    /// <ul>
    /// <li>
    /// <p>Protocol: All</p></li>
    /// <li>
    /// <p>Ports: All</p></li>
    /// <li>
    /// <p>Destination: Self</p></li>
    /// </ul></li>
    /// </ul>
    pub fn security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of security group IDs associated with the Elastic Network Interface (ENI) created in subnets.</p>
    /// <p>The following rules are required:</p>
    /// <ul>
    /// <li>
    /// <p>Inbound rule 1</p>
    /// <ul>
    /// <li>
    /// <p>Protocol: All</p></li>
    /// <li>
    /// <p>Ports: All</p></li>
    /// <li>
    /// <p>Source: Self</p></li>
    /// </ul></li>
    /// <li>
    /// <p>Outbound rule 1</p>
    /// <ul>
    /// <li>
    /// <p>Protocol: All</p></li>
    /// <li>
    /// <p>Ports: All</p></li>
    /// <li>
    /// <p>Destination: 0.0.0.0/0 (IPv4)</p></li>
    /// </ul></li>
    /// <li>
    /// <p>Outbound rule 2</p>
    /// <ul>
    /// <li>
    /// <p>Protocol: All</p></li>
    /// <li>
    /// <p>Ports: All</p></li>
    /// <li>
    /// <p>Destination: Self</p></li>
    /// </ul></li>
    /// </ul>
    pub fn set_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_group_ids = input;
        self
    }
    /// <p>The list of security group IDs associated with the Elastic Network Interface (ENI) created in subnets.</p>
    /// <p>The following rules are required:</p>
    /// <ul>
    /// <li>
    /// <p>Inbound rule 1</p>
    /// <ul>
    /// <li>
    /// <p>Protocol: All</p></li>
    /// <li>
    /// <p>Ports: All</p></li>
    /// <li>
    /// <p>Source: Self</p></li>
    /// </ul></li>
    /// <li>
    /// <p>Outbound rule 1</p>
    /// <ul>
    /// <li>
    /// <p>Protocol: All</p></li>
    /// <li>
    /// <p>Ports: All</p></li>
    /// <li>
    /// <p>Destination: 0.0.0.0/0 (IPv4)</p></li>
    /// </ul></li>
    /// <li>
    /// <p>Outbound rule 2</p>
    /// <ul>
    /// <li>
    /// <p>Protocol: All</p></li>
    /// <li>
    /// <p>Ports: All</p></li>
    /// <li>
    /// <p>Destination: Self</p></li>
    /// </ul></li>
    /// </ul>
    pub fn get_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_group_ids
    }
    /// Consumes the builder and constructs a [`Networking`](crate::types::Networking).
    pub fn build(self) -> crate::types::Networking {
        crate::types::Networking {
            subnet_ids: self.subnet_ids,
            security_group_ids: self.security_group_ids,
        }
    }
}
