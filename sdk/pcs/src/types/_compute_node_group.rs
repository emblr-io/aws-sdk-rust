// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A compute node group associated with a cluster.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComputeNodeGroup {
    /// <p>The name that identifies the compute node group.</p>
    pub name: ::std::string::String,
    /// <p>The generated unique ID of the compute node group.</p>
    pub id: ::std::string::String,
    /// <p>The unique Amazon Resource Name (ARN) of the compute node group.</p>
    pub arn: ::std::string::String,
    /// <p>The ID of the cluster of the compute node group.</p>
    pub cluster_id: ::std::string::String,
    /// <p>The date and time the resource was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The date and time the resource was modified.</p>
    pub modified_at: ::aws_smithy_types::DateTime,
    /// <p>The provisioning status of the compute node group.</p><note>
    /// <p>The provisioning status doesn't indicate the overall health of the compute node group.</p>
    /// </note> <important>
    /// <p>The resource enters the <code>SUSPENDING</code> and <code>SUSPENDED</code> states when the scheduler is beyond end of life and we have suspended the cluster. When in these states, you can't use the cluster. The cluster controller is down and all compute instances are terminated. The resources still count toward your service quotas. You can delete a resource if its status is <code>SUSPENDED</code>. For more information, see <a href="https://docs.aws.amazon.com/pcs/latest/userguide/slurm-versions_faq.html">Frequently asked questions about Slurm versions in PCS</a> in the <i>PCS User Guide</i>.</p>
    /// </important>
    pub status: crate::types::ComputeNodeGroupStatus,
    /// <p>The ID of the Amazon Machine Image (AMI) that Amazon Web Services PCS uses to launch instances. If not provided, Amazon Web Services PCS uses the AMI ID specified in the custom launch template.</p>
    pub ami_id: ::std::option::Option<::std::string::String>,
    /// <p>The list of subnet IDs where instances are provisioned by the compute node group. The subnets must be in the same VPC as the cluster.</p>
    pub subnet_ids: ::std::vec::Vec<::std::string::String>,
    /// <p>Specifies how EC2 instances are purchased on your behalf. Amazon Web Services PCS supports On-Demand and Spot instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-purchasing-options.html">Instance purchasing options</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. If you don't provide this option, it defaults to On-Demand.</p>
    pub purchase_option: ::std::option::Option<crate::types::PurchaseOption>,
    /// <p>An Amazon EC2 launch template Amazon Web Services PCS uses to launch compute nodes.</p>
    pub custom_launch_template: ::std::option::Option<crate::types::CustomLaunchTemplate>,
    /// <p>The Amazon Resource Name (ARN) of the IAM instance profile used to pass an IAM role when launching EC2 instances. The role contained in your instance profile must have the <code>pcs:RegisterComputeNodeGroupInstance</code> permission. The resource identifier of the ARN must start with <code>AWSPCS</code> or it must have <code>/aws-pcs/</code> in its path.</p>
    /// <p class="title"><b>Examples</b></p>
    /// <ul>
    /// <li>
    /// <p><code>arn:aws:iam::111122223333:instance-profile/AWSPCS-example-role-1</code></p></li>
    /// <li>
    /// <p><code>arn:aws:iam::111122223333:instance-profile/aws-pcs/example-role-2</code></p></li>
    /// </ul>
    pub iam_instance_profile_arn: ::std::string::String,
    /// <p>Specifies the boundaries of the compute node group auto scaling.</p>
    pub scaling_configuration: ::std::option::Option<crate::types::ScalingConfiguration>,
    /// <p>A list of EC2 instance configurations that Amazon Web Services PCS can provision in the compute node group.</p>
    pub instance_configs: ::std::vec::Vec<crate::types::InstanceConfig>,
    /// <p>Additional configuration when you specify <code>SPOT</code> as the <code>purchaseOption</code> for the <code>CreateComputeNodeGroup</code> API action.</p>
    pub spot_options: ::std::option::Option<crate::types::SpotOptions>,
    /// <p>Additional options related to the Slurm scheduler.</p>
    pub slurm_configuration: ::std::option::Option<crate::types::ComputeNodeGroupSlurmConfiguration>,
    /// <p>The list of errors that occurred during compute node group provisioning.</p>
    pub error_info: ::std::option::Option<::std::vec::Vec<crate::types::ErrorInfo>>,
}
impl ComputeNodeGroup {
    /// <p>The name that identifies the compute node group.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The generated unique ID of the compute node group.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The unique Amazon Resource Name (ARN) of the compute node group.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The ID of the cluster of the compute node group.</p>
    pub fn cluster_id(&self) -> &str {
        use std::ops::Deref;
        self.cluster_id.deref()
    }
    /// <p>The date and time the resource was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The date and time the resource was modified.</p>
    pub fn modified_at(&self) -> &::aws_smithy_types::DateTime {
        &self.modified_at
    }
    /// <p>The provisioning status of the compute node group.</p><note>
    /// <p>The provisioning status doesn't indicate the overall health of the compute node group.</p>
    /// </note> <important>
    /// <p>The resource enters the <code>SUSPENDING</code> and <code>SUSPENDED</code> states when the scheduler is beyond end of life and we have suspended the cluster. When in these states, you can't use the cluster. The cluster controller is down and all compute instances are terminated. The resources still count toward your service quotas. You can delete a resource if its status is <code>SUSPENDED</code>. For more information, see <a href="https://docs.aws.amazon.com/pcs/latest/userguide/slurm-versions_faq.html">Frequently asked questions about Slurm versions in PCS</a> in the <i>PCS User Guide</i>.</p>
    /// </important>
    pub fn status(&self) -> &crate::types::ComputeNodeGroupStatus {
        &self.status
    }
    /// <p>The ID of the Amazon Machine Image (AMI) that Amazon Web Services PCS uses to launch instances. If not provided, Amazon Web Services PCS uses the AMI ID specified in the custom launch template.</p>
    pub fn ami_id(&self) -> ::std::option::Option<&str> {
        self.ami_id.as_deref()
    }
    /// <p>The list of subnet IDs where instances are provisioned by the compute node group. The subnets must be in the same VPC as the cluster.</p>
    pub fn subnet_ids(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.subnet_ids.deref()
    }
    /// <p>Specifies how EC2 instances are purchased on your behalf. Amazon Web Services PCS supports On-Demand and Spot instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-purchasing-options.html">Instance purchasing options</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. If you don't provide this option, it defaults to On-Demand.</p>
    pub fn purchase_option(&self) -> ::std::option::Option<&crate::types::PurchaseOption> {
        self.purchase_option.as_ref()
    }
    /// <p>An Amazon EC2 launch template Amazon Web Services PCS uses to launch compute nodes.</p>
    pub fn custom_launch_template(&self) -> ::std::option::Option<&crate::types::CustomLaunchTemplate> {
        self.custom_launch_template.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM instance profile used to pass an IAM role when launching EC2 instances. The role contained in your instance profile must have the <code>pcs:RegisterComputeNodeGroupInstance</code> permission. The resource identifier of the ARN must start with <code>AWSPCS</code> or it must have <code>/aws-pcs/</code> in its path.</p>
    /// <p class="title"><b>Examples</b></p>
    /// <ul>
    /// <li>
    /// <p><code>arn:aws:iam::111122223333:instance-profile/AWSPCS-example-role-1</code></p></li>
    /// <li>
    /// <p><code>arn:aws:iam::111122223333:instance-profile/aws-pcs/example-role-2</code></p></li>
    /// </ul>
    pub fn iam_instance_profile_arn(&self) -> &str {
        use std::ops::Deref;
        self.iam_instance_profile_arn.deref()
    }
    /// <p>Specifies the boundaries of the compute node group auto scaling.</p>
    pub fn scaling_configuration(&self) -> ::std::option::Option<&crate::types::ScalingConfiguration> {
        self.scaling_configuration.as_ref()
    }
    /// <p>A list of EC2 instance configurations that Amazon Web Services PCS can provision in the compute node group.</p>
    pub fn instance_configs(&self) -> &[crate::types::InstanceConfig] {
        use std::ops::Deref;
        self.instance_configs.deref()
    }
    /// <p>Additional configuration when you specify <code>SPOT</code> as the <code>purchaseOption</code> for the <code>CreateComputeNodeGroup</code> API action.</p>
    pub fn spot_options(&self) -> ::std::option::Option<&crate::types::SpotOptions> {
        self.spot_options.as_ref()
    }
    /// <p>Additional options related to the Slurm scheduler.</p>
    pub fn slurm_configuration(&self) -> ::std::option::Option<&crate::types::ComputeNodeGroupSlurmConfiguration> {
        self.slurm_configuration.as_ref()
    }
    /// <p>The list of errors that occurred during compute node group provisioning.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.error_info.is_none()`.
    pub fn error_info(&self) -> &[crate::types::ErrorInfo] {
        self.error_info.as_deref().unwrap_or_default()
    }
}
impl ComputeNodeGroup {
    /// Creates a new builder-style object to manufacture [`ComputeNodeGroup`](crate::types::ComputeNodeGroup).
    pub fn builder() -> crate::types::builders::ComputeNodeGroupBuilder {
        crate::types::builders::ComputeNodeGroupBuilder::default()
    }
}

/// A builder for [`ComputeNodeGroup`](crate::types::ComputeNodeGroup).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ComputeNodeGroupBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_id: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::ComputeNodeGroupStatus>,
    pub(crate) ami_id: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) purchase_option: ::std::option::Option<crate::types::PurchaseOption>,
    pub(crate) custom_launch_template: ::std::option::Option<crate::types::CustomLaunchTemplate>,
    pub(crate) iam_instance_profile_arn: ::std::option::Option<::std::string::String>,
    pub(crate) scaling_configuration: ::std::option::Option<crate::types::ScalingConfiguration>,
    pub(crate) instance_configs: ::std::option::Option<::std::vec::Vec<crate::types::InstanceConfig>>,
    pub(crate) spot_options: ::std::option::Option<crate::types::SpotOptions>,
    pub(crate) slurm_configuration: ::std::option::Option<crate::types::ComputeNodeGroupSlurmConfiguration>,
    pub(crate) error_info: ::std::option::Option<::std::vec::Vec<crate::types::ErrorInfo>>,
}
impl ComputeNodeGroupBuilder {
    /// <p>The name that identifies the compute node group.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name that identifies the compute node group.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name that identifies the compute node group.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The generated unique ID of the compute node group.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The generated unique ID of the compute node group.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The generated unique ID of the compute node group.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The unique Amazon Resource Name (ARN) of the compute node group.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique Amazon Resource Name (ARN) of the compute node group.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The unique Amazon Resource Name (ARN) of the compute node group.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The ID of the cluster of the compute node group.</p>
    /// This field is required.
    pub fn cluster_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the cluster of the compute node group.</p>
    pub fn set_cluster_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_id = input;
        self
    }
    /// <p>The ID of the cluster of the compute node group.</p>
    pub fn get_cluster_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_id
    }
    /// <p>The date and time the resource was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time the resource was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The date and time the resource was modified.</p>
    /// This field is required.
    pub fn modified_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modified_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the resource was modified.</p>
    pub fn set_modified_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modified_at = input;
        self
    }
    /// <p>The date and time the resource was modified.</p>
    pub fn get_modified_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modified_at
    }
    /// <p>The provisioning status of the compute node group.</p><note>
    /// <p>The provisioning status doesn't indicate the overall health of the compute node group.</p>
    /// </note> <important>
    /// <p>The resource enters the <code>SUSPENDING</code> and <code>SUSPENDED</code> states when the scheduler is beyond end of life and we have suspended the cluster. When in these states, you can't use the cluster. The cluster controller is down and all compute instances are terminated. The resources still count toward your service quotas. You can delete a resource if its status is <code>SUSPENDED</code>. For more information, see <a href="https://docs.aws.amazon.com/pcs/latest/userguide/slurm-versions_faq.html">Frequently asked questions about Slurm versions in PCS</a> in the <i>PCS User Guide</i>.</p>
    /// </important>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ComputeNodeGroupStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The provisioning status of the compute node group.</p><note>
    /// <p>The provisioning status doesn't indicate the overall health of the compute node group.</p>
    /// </note> <important>
    /// <p>The resource enters the <code>SUSPENDING</code> and <code>SUSPENDED</code> states when the scheduler is beyond end of life and we have suspended the cluster. When in these states, you can't use the cluster. The cluster controller is down and all compute instances are terminated. The resources still count toward your service quotas. You can delete a resource if its status is <code>SUSPENDED</code>. For more information, see <a href="https://docs.aws.amazon.com/pcs/latest/userguide/slurm-versions_faq.html">Frequently asked questions about Slurm versions in PCS</a> in the <i>PCS User Guide</i>.</p>
    /// </important>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ComputeNodeGroupStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The provisioning status of the compute node group.</p><note>
    /// <p>The provisioning status doesn't indicate the overall health of the compute node group.</p>
    /// </note> <important>
    /// <p>The resource enters the <code>SUSPENDING</code> and <code>SUSPENDED</code> states when the scheduler is beyond end of life and we have suspended the cluster. When in these states, you can't use the cluster. The cluster controller is down and all compute instances are terminated. The resources still count toward your service quotas. You can delete a resource if its status is <code>SUSPENDED</code>. For more information, see <a href="https://docs.aws.amazon.com/pcs/latest/userguide/slurm-versions_faq.html">Frequently asked questions about Slurm versions in PCS</a> in the <i>PCS User Guide</i>.</p>
    /// </important>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ComputeNodeGroupStatus> {
        &self.status
    }
    /// <p>The ID of the Amazon Machine Image (AMI) that Amazon Web Services PCS uses to launch instances. If not provided, Amazon Web Services PCS uses the AMI ID specified in the custom launch template.</p>
    pub fn ami_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ami_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Machine Image (AMI) that Amazon Web Services PCS uses to launch instances. If not provided, Amazon Web Services PCS uses the AMI ID specified in the custom launch template.</p>
    pub fn set_ami_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ami_id = input;
        self
    }
    /// <p>The ID of the Amazon Machine Image (AMI) that Amazon Web Services PCS uses to launch instances. If not provided, Amazon Web Services PCS uses the AMI ID specified in the custom launch template.</p>
    pub fn get_ami_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ami_id
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>The list of subnet IDs where instances are provisioned by the compute node group. The subnets must be in the same VPC as the cluster.</p>
    pub fn subnet_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of subnet IDs where instances are provisioned by the compute node group. The subnets must be in the same VPC as the cluster.</p>
    pub fn set_subnet_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.subnet_ids = input;
        self
    }
    /// <p>The list of subnet IDs where instances are provisioned by the compute node group. The subnets must be in the same VPC as the cluster.</p>
    pub fn get_subnet_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.subnet_ids
    }
    /// <p>Specifies how EC2 instances are purchased on your behalf. Amazon Web Services PCS supports On-Demand and Spot instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-purchasing-options.html">Instance purchasing options</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. If you don't provide this option, it defaults to On-Demand.</p>
    pub fn purchase_option(mut self, input: crate::types::PurchaseOption) -> Self {
        self.purchase_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies how EC2 instances are purchased on your behalf. Amazon Web Services PCS supports On-Demand and Spot instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-purchasing-options.html">Instance purchasing options</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. If you don't provide this option, it defaults to On-Demand.</p>
    pub fn set_purchase_option(mut self, input: ::std::option::Option<crate::types::PurchaseOption>) -> Self {
        self.purchase_option = input;
        self
    }
    /// <p>Specifies how EC2 instances are purchased on your behalf. Amazon Web Services PCS supports On-Demand and Spot instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-purchasing-options.html">Instance purchasing options</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. If you don't provide this option, it defaults to On-Demand.</p>
    pub fn get_purchase_option(&self) -> &::std::option::Option<crate::types::PurchaseOption> {
        &self.purchase_option
    }
    /// <p>An Amazon EC2 launch template Amazon Web Services PCS uses to launch compute nodes.</p>
    /// This field is required.
    pub fn custom_launch_template(mut self, input: crate::types::CustomLaunchTemplate) -> Self {
        self.custom_launch_template = ::std::option::Option::Some(input);
        self
    }
    /// <p>An Amazon EC2 launch template Amazon Web Services PCS uses to launch compute nodes.</p>
    pub fn set_custom_launch_template(mut self, input: ::std::option::Option<crate::types::CustomLaunchTemplate>) -> Self {
        self.custom_launch_template = input;
        self
    }
    /// <p>An Amazon EC2 launch template Amazon Web Services PCS uses to launch compute nodes.</p>
    pub fn get_custom_launch_template(&self) -> &::std::option::Option<crate::types::CustomLaunchTemplate> {
        &self.custom_launch_template
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM instance profile used to pass an IAM role when launching EC2 instances. The role contained in your instance profile must have the <code>pcs:RegisterComputeNodeGroupInstance</code> permission. The resource identifier of the ARN must start with <code>AWSPCS</code> or it must have <code>/aws-pcs/</code> in its path.</p>
    /// <p class="title"><b>Examples</b></p>
    /// <ul>
    /// <li>
    /// <p><code>arn:aws:iam::111122223333:instance-profile/AWSPCS-example-role-1</code></p></li>
    /// <li>
    /// <p><code>arn:aws:iam::111122223333:instance-profile/aws-pcs/example-role-2</code></p></li>
    /// </ul>
    /// This field is required.
    pub fn iam_instance_profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_instance_profile_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM instance profile used to pass an IAM role when launching EC2 instances. The role contained in your instance profile must have the <code>pcs:RegisterComputeNodeGroupInstance</code> permission. The resource identifier of the ARN must start with <code>AWSPCS</code> or it must have <code>/aws-pcs/</code> in its path.</p>
    /// <p class="title"><b>Examples</b></p>
    /// <ul>
    /// <li>
    /// <p><code>arn:aws:iam::111122223333:instance-profile/AWSPCS-example-role-1</code></p></li>
    /// <li>
    /// <p><code>arn:aws:iam::111122223333:instance-profile/aws-pcs/example-role-2</code></p></li>
    /// </ul>
    pub fn set_iam_instance_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_instance_profile_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM instance profile used to pass an IAM role when launching EC2 instances. The role contained in your instance profile must have the <code>pcs:RegisterComputeNodeGroupInstance</code> permission. The resource identifier of the ARN must start with <code>AWSPCS</code> or it must have <code>/aws-pcs/</code> in its path.</p>
    /// <p class="title"><b>Examples</b></p>
    /// <ul>
    /// <li>
    /// <p><code>arn:aws:iam::111122223333:instance-profile/AWSPCS-example-role-1</code></p></li>
    /// <li>
    /// <p><code>arn:aws:iam::111122223333:instance-profile/aws-pcs/example-role-2</code></p></li>
    /// </ul>
    pub fn get_iam_instance_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_instance_profile_arn
    }
    /// <p>Specifies the boundaries of the compute node group auto scaling.</p>
    /// This field is required.
    pub fn scaling_configuration(mut self, input: crate::types::ScalingConfiguration) -> Self {
        self.scaling_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the boundaries of the compute node group auto scaling.</p>
    pub fn set_scaling_configuration(mut self, input: ::std::option::Option<crate::types::ScalingConfiguration>) -> Self {
        self.scaling_configuration = input;
        self
    }
    /// <p>Specifies the boundaries of the compute node group auto scaling.</p>
    pub fn get_scaling_configuration(&self) -> &::std::option::Option<crate::types::ScalingConfiguration> {
        &self.scaling_configuration
    }
    /// Appends an item to `instance_configs`.
    ///
    /// To override the contents of this collection use [`set_instance_configs`](Self::set_instance_configs).
    ///
    /// <p>A list of EC2 instance configurations that Amazon Web Services PCS can provision in the compute node group.</p>
    pub fn instance_configs(mut self, input: crate::types::InstanceConfig) -> Self {
        let mut v = self.instance_configs.unwrap_or_default();
        v.push(input);
        self.instance_configs = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of EC2 instance configurations that Amazon Web Services PCS can provision in the compute node group.</p>
    pub fn set_instance_configs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InstanceConfig>>) -> Self {
        self.instance_configs = input;
        self
    }
    /// <p>A list of EC2 instance configurations that Amazon Web Services PCS can provision in the compute node group.</p>
    pub fn get_instance_configs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InstanceConfig>> {
        &self.instance_configs
    }
    /// <p>Additional configuration when you specify <code>SPOT</code> as the <code>purchaseOption</code> for the <code>CreateComputeNodeGroup</code> API action.</p>
    pub fn spot_options(mut self, input: crate::types::SpotOptions) -> Self {
        self.spot_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Additional configuration when you specify <code>SPOT</code> as the <code>purchaseOption</code> for the <code>CreateComputeNodeGroup</code> API action.</p>
    pub fn set_spot_options(mut self, input: ::std::option::Option<crate::types::SpotOptions>) -> Self {
        self.spot_options = input;
        self
    }
    /// <p>Additional configuration when you specify <code>SPOT</code> as the <code>purchaseOption</code> for the <code>CreateComputeNodeGroup</code> API action.</p>
    pub fn get_spot_options(&self) -> &::std::option::Option<crate::types::SpotOptions> {
        &self.spot_options
    }
    /// <p>Additional options related to the Slurm scheduler.</p>
    pub fn slurm_configuration(mut self, input: crate::types::ComputeNodeGroupSlurmConfiguration) -> Self {
        self.slurm_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Additional options related to the Slurm scheduler.</p>
    pub fn set_slurm_configuration(mut self, input: ::std::option::Option<crate::types::ComputeNodeGroupSlurmConfiguration>) -> Self {
        self.slurm_configuration = input;
        self
    }
    /// <p>Additional options related to the Slurm scheduler.</p>
    pub fn get_slurm_configuration(&self) -> &::std::option::Option<crate::types::ComputeNodeGroupSlurmConfiguration> {
        &self.slurm_configuration
    }
    /// Appends an item to `error_info`.
    ///
    /// To override the contents of this collection use [`set_error_info`](Self::set_error_info).
    ///
    /// <p>The list of errors that occurred during compute node group provisioning.</p>
    pub fn error_info(mut self, input: crate::types::ErrorInfo) -> Self {
        let mut v = self.error_info.unwrap_or_default();
        v.push(input);
        self.error_info = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of errors that occurred during compute node group provisioning.</p>
    pub fn set_error_info(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ErrorInfo>>) -> Self {
        self.error_info = input;
        self
    }
    /// <p>The list of errors that occurred during compute node group provisioning.</p>
    pub fn get_error_info(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ErrorInfo>> {
        &self.error_info
    }
    /// Consumes the builder and constructs a [`ComputeNodeGroup`](crate::types::ComputeNodeGroup).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::ComputeNodeGroupBuilder::name)
    /// - [`id`](crate::types::builders::ComputeNodeGroupBuilder::id)
    /// - [`arn`](crate::types::builders::ComputeNodeGroupBuilder::arn)
    /// - [`cluster_id`](crate::types::builders::ComputeNodeGroupBuilder::cluster_id)
    /// - [`created_at`](crate::types::builders::ComputeNodeGroupBuilder::created_at)
    /// - [`modified_at`](crate::types::builders::ComputeNodeGroupBuilder::modified_at)
    /// - [`status`](crate::types::builders::ComputeNodeGroupBuilder::status)
    /// - [`subnet_ids`](crate::types::builders::ComputeNodeGroupBuilder::subnet_ids)
    /// - [`iam_instance_profile_arn`](crate::types::builders::ComputeNodeGroupBuilder::iam_instance_profile_arn)
    /// - [`instance_configs`](crate::types::builders::ComputeNodeGroupBuilder::instance_configs)
    pub fn build(self) -> ::std::result::Result<crate::types::ComputeNodeGroup, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ComputeNodeGroup {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building ComputeNodeGroup",
                )
            })?,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building ComputeNodeGroup",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building ComputeNodeGroup",
                )
            })?,
            cluster_id: self.cluster_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cluster_id",
                    "cluster_id was not specified but it is required when building ComputeNodeGroup",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building ComputeNodeGroup",
                )
            })?,
            modified_at: self.modified_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "modified_at",
                    "modified_at was not specified but it is required when building ComputeNodeGroup",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ComputeNodeGroup",
                )
            })?,
            ami_id: self.ami_id,
            subnet_ids: self.subnet_ids.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "subnet_ids",
                    "subnet_ids was not specified but it is required when building ComputeNodeGroup",
                )
            })?,
            purchase_option: self.purchase_option,
            custom_launch_template: self.custom_launch_template,
            iam_instance_profile_arn: self.iam_instance_profile_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "iam_instance_profile_arn",
                    "iam_instance_profile_arn was not specified but it is required when building ComputeNodeGroup",
                )
            })?,
            scaling_configuration: self.scaling_configuration,
            instance_configs: self.instance_configs.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "instance_configs",
                    "instance_configs was not specified but it is required when building ComputeNodeGroup",
                )
            })?,
            spot_options: self.spot_options,
            slurm_configuration: self.slurm_configuration,
            error_info: self.error_info,
        })
    }
}
