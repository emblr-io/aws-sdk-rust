// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Additional options related to the Slurm scheduler.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClusterSlurmConfiguration {
    /// <p>The time (in seconds) before an idle node is scaled down.</p>
    /// <p>Default: <code>600</code></p>
    pub scale_down_idle_time_in_seconds: ::std::option::Option<i32>,
    /// <p>Additional Slurm-specific configuration that directly maps to Slurm settings.</p>
    pub slurm_custom_settings: ::std::option::Option<::std::vec::Vec<crate::types::SlurmCustomSetting>>,
    /// <p>The shared Slurm key for authentication, also known as the <b>cluster secret</b>.</p>
    pub auth_key: ::std::option::Option<crate::types::SlurmAuthKey>,
    /// <p>The accounting configuration includes configurable settings for Slurm accounting.</p>
    pub accounting: ::std::option::Option<crate::types::Accounting>,
}
impl ClusterSlurmConfiguration {
    /// <p>The time (in seconds) before an idle node is scaled down.</p>
    /// <p>Default: <code>600</code></p>
    pub fn scale_down_idle_time_in_seconds(&self) -> ::std::option::Option<i32> {
        self.scale_down_idle_time_in_seconds
    }
    /// <p>Additional Slurm-specific configuration that directly maps to Slurm settings.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.slurm_custom_settings.is_none()`.
    pub fn slurm_custom_settings(&self) -> &[crate::types::SlurmCustomSetting] {
        self.slurm_custom_settings.as_deref().unwrap_or_default()
    }
    /// <p>The shared Slurm key for authentication, also known as the <b>cluster secret</b>.</p>
    pub fn auth_key(&self) -> ::std::option::Option<&crate::types::SlurmAuthKey> {
        self.auth_key.as_ref()
    }
    /// <p>The accounting configuration includes configurable settings for Slurm accounting.</p>
    pub fn accounting(&self) -> ::std::option::Option<&crate::types::Accounting> {
        self.accounting.as_ref()
    }
}
impl ClusterSlurmConfiguration {
    /// Creates a new builder-style object to manufacture [`ClusterSlurmConfiguration`](crate::types::ClusterSlurmConfiguration).
    pub fn builder() -> crate::types::builders::ClusterSlurmConfigurationBuilder {
        crate::types::builders::ClusterSlurmConfigurationBuilder::default()
    }
}

/// A builder for [`ClusterSlurmConfiguration`](crate::types::ClusterSlurmConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ClusterSlurmConfigurationBuilder {
    pub(crate) scale_down_idle_time_in_seconds: ::std::option::Option<i32>,
    pub(crate) slurm_custom_settings: ::std::option::Option<::std::vec::Vec<crate::types::SlurmCustomSetting>>,
    pub(crate) auth_key: ::std::option::Option<crate::types::SlurmAuthKey>,
    pub(crate) accounting: ::std::option::Option<crate::types::Accounting>,
}
impl ClusterSlurmConfigurationBuilder {
    /// <p>The time (in seconds) before an idle node is scaled down.</p>
    /// <p>Default: <code>600</code></p>
    pub fn scale_down_idle_time_in_seconds(mut self, input: i32) -> Self {
        self.scale_down_idle_time_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time (in seconds) before an idle node is scaled down.</p>
    /// <p>Default: <code>600</code></p>
    pub fn set_scale_down_idle_time_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.scale_down_idle_time_in_seconds = input;
        self
    }
    /// <p>The time (in seconds) before an idle node is scaled down.</p>
    /// <p>Default: <code>600</code></p>
    pub fn get_scale_down_idle_time_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.scale_down_idle_time_in_seconds
    }
    /// Appends an item to `slurm_custom_settings`.
    ///
    /// To override the contents of this collection use [`set_slurm_custom_settings`](Self::set_slurm_custom_settings).
    ///
    /// <p>Additional Slurm-specific configuration that directly maps to Slurm settings.</p>
    pub fn slurm_custom_settings(mut self, input: crate::types::SlurmCustomSetting) -> Self {
        let mut v = self.slurm_custom_settings.unwrap_or_default();
        v.push(input);
        self.slurm_custom_settings = ::std::option::Option::Some(v);
        self
    }
    /// <p>Additional Slurm-specific configuration that directly maps to Slurm settings.</p>
    pub fn set_slurm_custom_settings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SlurmCustomSetting>>) -> Self {
        self.slurm_custom_settings = input;
        self
    }
    /// <p>Additional Slurm-specific configuration that directly maps to Slurm settings.</p>
    pub fn get_slurm_custom_settings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SlurmCustomSetting>> {
        &self.slurm_custom_settings
    }
    /// <p>The shared Slurm key for authentication, also known as the <b>cluster secret</b>.</p>
    pub fn auth_key(mut self, input: crate::types::SlurmAuthKey) -> Self {
        self.auth_key = ::std::option::Option::Some(input);
        self
    }
    /// <p>The shared Slurm key for authentication, also known as the <b>cluster secret</b>.</p>
    pub fn set_auth_key(mut self, input: ::std::option::Option<crate::types::SlurmAuthKey>) -> Self {
        self.auth_key = input;
        self
    }
    /// <p>The shared Slurm key for authentication, also known as the <b>cluster secret</b>.</p>
    pub fn get_auth_key(&self) -> &::std::option::Option<crate::types::SlurmAuthKey> {
        &self.auth_key
    }
    /// <p>The accounting configuration includes configurable settings for Slurm accounting.</p>
    pub fn accounting(mut self, input: crate::types::Accounting) -> Self {
        self.accounting = ::std::option::Option::Some(input);
        self
    }
    /// <p>The accounting configuration includes configurable settings for Slurm accounting.</p>
    pub fn set_accounting(mut self, input: ::std::option::Option<crate::types::Accounting>) -> Self {
        self.accounting = input;
        self
    }
    /// <p>The accounting configuration includes configurable settings for Slurm accounting.</p>
    pub fn get_accounting(&self) -> &::std::option::Option<crate::types::Accounting> {
        &self.accounting
    }
    /// Consumes the builder and constructs a [`ClusterSlurmConfiguration`](crate::types::ClusterSlurmConfiguration).
    pub fn build(self) -> crate::types::ClusterSlurmConfiguration {
        crate::types::ClusterSlurmConfiguration {
            scale_down_idle_time_in_seconds: self.scale_down_idle_time_in_seconds,
            slurm_custom_settings: self.slurm_custom_settings,
            auth_key: self.auth_key,
            accounting: self.accounting,
        }
    }
}
