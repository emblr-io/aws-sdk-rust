// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateComputeNodeGroupInput {
    /// <p>The name or ID of the cluster to create a compute node group in.</p>
    pub cluster_identifier: ::std::option::Option<::std::string::String>,
    /// <p>A name to identify the cluster. Example: <code>MyCluster</code></p>
    pub compute_node_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon Machine Image (AMI) that Amazon Web Services PCS uses to launch compute nodes (Amazon EC2 instances). If you don't provide this value, Amazon Web Services PCS uses the AMI ID specified in the custom launch template.</p>
    pub ami_id: ::std::option::Option<::std::string::String>,
    /// <p>The list of subnet IDs where the compute node group launches instances. Subnets must be in the same VPC as the cluster.</p>
    pub subnet_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies how EC2 instances are purchased on your behalf. Amazon Web Services PCS supports On-Demand and Spot instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-purchasing-options.html">Instance purchasing options</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. If you don't provide this option, it defaults to On-Demand.</p>
    pub purchase_option: ::std::option::Option<crate::types::PurchaseOption>,
    /// <p>An Amazon EC2 launch template Amazon Web Services PCS uses to launch compute nodes.</p>
    pub custom_launch_template: ::std::option::Option<crate::types::CustomLaunchTemplate>,
    /// <p>The Amazon Resource Name (ARN) of the IAM instance profile used to pass an IAM role when launching EC2 instances. The role contained in your instance profile must have the <code>pcs:RegisterComputeNodeGroupInstance</code> permission. The resource identifier of the ARN must start with <code>AWSPCS</code> or it must have <code>/aws-pcs/</code> in its path.</p>
    /// <p class="title"><b>Examples</b></p>
    /// <ul>
    /// <li>
    /// <p><code>arn:aws:iam::111122223333:instance-profile/AWSPCS-example-role-1</code></p></li>
    /// <li>
    /// <p><code>arn:aws:iam::111122223333:instance-profile/aws-pcs/example-role-2</code></p></li>
    /// </ul>
    pub iam_instance_profile_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the boundaries of the compute node group auto scaling.</p>
    pub scaling_configuration: ::std::option::Option<crate::types::ScalingConfigurationRequest>,
    /// <p>A list of EC2 instance configurations that Amazon Web Services PCS can provision in the compute node group.</p>
    pub instance_configs: ::std::option::Option<::std::vec::Vec<crate::types::InstanceConfig>>,
    /// <p>Additional configuration when you specify <code>SPOT</code> as the <code>purchaseOption</code> for the <code>CreateComputeNodeGroup</code> API action.</p>
    pub spot_options: ::std::option::Option<crate::types::SpotOptions>,
    /// <p>Additional options related to the Slurm scheduler.</p>
    pub slurm_configuration: ::std::option::Option<crate::types::ComputeNodeGroupSlurmConfigurationRequest>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries with the same client token return the result from the original successful request and they have no additional effect. If you don't specify a client token, the CLI and SDK automatically generate 1 for you.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateComputeNodeGroupInput {
    /// <p>The name or ID of the cluster to create a compute node group in.</p>
    pub fn cluster_identifier(&self) -> ::std::option::Option<&str> {
        self.cluster_identifier.as_deref()
    }
    /// <p>A name to identify the cluster. Example: <code>MyCluster</code></p>
    pub fn compute_node_group_name(&self) -> ::std::option::Option<&str> {
        self.compute_node_group_name.as_deref()
    }
    /// <p>The ID of the Amazon Machine Image (AMI) that Amazon Web Services PCS uses to launch compute nodes (Amazon EC2 instances). If you don't provide this value, Amazon Web Services PCS uses the AMI ID specified in the custom launch template.</p>
    pub fn ami_id(&self) -> ::std::option::Option<&str> {
        self.ami_id.as_deref()
    }
    /// <p>The list of subnet IDs where the compute node group launches instances. Subnets must be in the same VPC as the cluster.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.subnet_ids.is_none()`.
    pub fn subnet_ids(&self) -> &[::std::string::String] {
        self.subnet_ids.as_deref().unwrap_or_default()
    }
    /// <p>Specifies how EC2 instances are purchased on your behalf. Amazon Web Services PCS supports On-Demand and Spot instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-purchasing-options.html">Instance purchasing options</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. If you don't provide this option, it defaults to On-Demand.</p>
    pub fn purchase_option(&self) -> ::std::option::Option<&crate::types::PurchaseOption> {
        self.purchase_option.as_ref()
    }
    /// <p>An Amazon EC2 launch template Amazon Web Services PCS uses to launch compute nodes.</p>
    pub fn custom_launch_template(&self) -> ::std::option::Option<&crate::types::CustomLaunchTemplate> {
        self.custom_launch_template.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM instance profile used to pass an IAM role when launching EC2 instances. The role contained in your instance profile must have the <code>pcs:RegisterComputeNodeGroupInstance</code> permission. The resource identifier of the ARN must start with <code>AWSPCS</code> or it must have <code>/aws-pcs/</code> in its path.</p>
    /// <p class="title"><b>Examples</b></p>
    /// <ul>
    /// <li>
    /// <p><code>arn:aws:iam::111122223333:instance-profile/AWSPCS-example-role-1</code></p></li>
    /// <li>
    /// <p><code>arn:aws:iam::111122223333:instance-profile/aws-pcs/example-role-2</code></p></li>
    /// </ul>
    pub fn iam_instance_profile_arn(&self) -> ::std::option::Option<&str> {
        self.iam_instance_profile_arn.as_deref()
    }
    /// <p>Specifies the boundaries of the compute node group auto scaling.</p>
    pub fn scaling_configuration(&self) -> ::std::option::Option<&crate::types::ScalingConfigurationRequest> {
        self.scaling_configuration.as_ref()
    }
    /// <p>A list of EC2 instance configurations that Amazon Web Services PCS can provision in the compute node group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instance_configs.is_none()`.
    pub fn instance_configs(&self) -> &[crate::types::InstanceConfig] {
        self.instance_configs.as_deref().unwrap_or_default()
    }
    /// <p>Additional configuration when you specify <code>SPOT</code> as the <code>purchaseOption</code> for the <code>CreateComputeNodeGroup</code> API action.</p>
    pub fn spot_options(&self) -> ::std::option::Option<&crate::types::SpotOptions> {
        self.spot_options.as_ref()
    }
    /// <p>Additional options related to the Slurm scheduler.</p>
    pub fn slurm_configuration(&self) -> ::std::option::Option<&crate::types::ComputeNodeGroupSlurmConfigurationRequest> {
        self.slurm_configuration.as_ref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries with the same client token return the result from the original successful request and they have no additional effect. If you don't specify a client token, the CLI and SDK automatically generate 1 for you.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateComputeNodeGroupInput {
    /// Creates a new builder-style object to manufacture [`CreateComputeNodeGroupInput`](crate::operation::create_compute_node_group::CreateComputeNodeGroupInput).
    pub fn builder() -> crate::operation::create_compute_node_group::builders::CreateComputeNodeGroupInputBuilder {
        crate::operation::create_compute_node_group::builders::CreateComputeNodeGroupInputBuilder::default()
    }
}

/// A builder for [`CreateComputeNodeGroupInput`](crate::operation::create_compute_node_group::CreateComputeNodeGroupInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateComputeNodeGroupInputBuilder {
    pub(crate) cluster_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) compute_node_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) ami_id: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) purchase_option: ::std::option::Option<crate::types::PurchaseOption>,
    pub(crate) custom_launch_template: ::std::option::Option<crate::types::CustomLaunchTemplate>,
    pub(crate) iam_instance_profile_arn: ::std::option::Option<::std::string::String>,
    pub(crate) scaling_configuration: ::std::option::Option<crate::types::ScalingConfigurationRequest>,
    pub(crate) instance_configs: ::std::option::Option<::std::vec::Vec<crate::types::InstanceConfig>>,
    pub(crate) spot_options: ::std::option::Option<crate::types::SpotOptions>,
    pub(crate) slurm_configuration: ::std::option::Option<crate::types::ComputeNodeGroupSlurmConfigurationRequest>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateComputeNodeGroupInputBuilder {
    /// <p>The name or ID of the cluster to create a compute node group in.</p>
    /// This field is required.
    pub fn cluster_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or ID of the cluster to create a compute node group in.</p>
    pub fn set_cluster_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_identifier = input;
        self
    }
    /// <p>The name or ID of the cluster to create a compute node group in.</p>
    pub fn get_cluster_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_identifier
    }
    /// <p>A name to identify the cluster. Example: <code>MyCluster</code></p>
    /// This field is required.
    pub fn compute_node_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.compute_node_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name to identify the cluster. Example: <code>MyCluster</code></p>
    pub fn set_compute_node_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.compute_node_group_name = input;
        self
    }
    /// <p>A name to identify the cluster. Example: <code>MyCluster</code></p>
    pub fn get_compute_node_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.compute_node_group_name
    }
    /// <p>The ID of the Amazon Machine Image (AMI) that Amazon Web Services PCS uses to launch compute nodes (Amazon EC2 instances). If you don't provide this value, Amazon Web Services PCS uses the AMI ID specified in the custom launch template.</p>
    pub fn ami_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ami_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Machine Image (AMI) that Amazon Web Services PCS uses to launch compute nodes (Amazon EC2 instances). If you don't provide this value, Amazon Web Services PCS uses the AMI ID specified in the custom launch template.</p>
    pub fn set_ami_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ami_id = input;
        self
    }
    /// <p>The ID of the Amazon Machine Image (AMI) that Amazon Web Services PCS uses to launch compute nodes (Amazon EC2 instances). If you don't provide this value, Amazon Web Services PCS uses the AMI ID specified in the custom launch template.</p>
    pub fn get_ami_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ami_id
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>The list of subnet IDs where the compute node group launches instances. Subnets must be in the same VPC as the cluster.</p>
    pub fn subnet_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of subnet IDs where the compute node group launches instances. Subnets must be in the same VPC as the cluster.</p>
    pub fn set_subnet_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.subnet_ids = input;
        self
    }
    /// <p>The list of subnet IDs where the compute node group launches instances. Subnets must be in the same VPC as the cluster.</p>
    pub fn get_subnet_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.subnet_ids
    }
    /// <p>Specifies how EC2 instances are purchased on your behalf. Amazon Web Services PCS supports On-Demand and Spot instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-purchasing-options.html">Instance purchasing options</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. If you don't provide this option, it defaults to On-Demand.</p>
    pub fn purchase_option(mut self, input: crate::types::PurchaseOption) -> Self {
        self.purchase_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies how EC2 instances are purchased on your behalf. Amazon Web Services PCS supports On-Demand and Spot instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-purchasing-options.html">Instance purchasing options</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. If you don't provide this option, it defaults to On-Demand.</p>
    pub fn set_purchase_option(mut self, input: ::std::option::Option<crate::types::PurchaseOption>) -> Self {
        self.purchase_option = input;
        self
    }
    /// <p>Specifies how EC2 instances are purchased on your behalf. Amazon Web Services PCS supports On-Demand and Spot instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-purchasing-options.html">Instance purchasing options</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. If you don't provide this option, it defaults to On-Demand.</p>
    pub fn get_purchase_option(&self) -> &::std::option::Option<crate::types::PurchaseOption> {
        &self.purchase_option
    }
    /// <p>An Amazon EC2 launch template Amazon Web Services PCS uses to launch compute nodes.</p>
    /// This field is required.
    pub fn custom_launch_template(mut self, input: crate::types::CustomLaunchTemplate) -> Self {
        self.custom_launch_template = ::std::option::Option::Some(input);
        self
    }
    /// <p>An Amazon EC2 launch template Amazon Web Services PCS uses to launch compute nodes.</p>
    pub fn set_custom_launch_template(mut self, input: ::std::option::Option<crate::types::CustomLaunchTemplate>) -> Self {
        self.custom_launch_template = input;
        self
    }
    /// <p>An Amazon EC2 launch template Amazon Web Services PCS uses to launch compute nodes.</p>
    pub fn get_custom_launch_template(&self) -> &::std::option::Option<crate::types::CustomLaunchTemplate> {
        &self.custom_launch_template
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM instance profile used to pass an IAM role when launching EC2 instances. The role contained in your instance profile must have the <code>pcs:RegisterComputeNodeGroupInstance</code> permission. The resource identifier of the ARN must start with <code>AWSPCS</code> or it must have <code>/aws-pcs/</code> in its path.</p>
    /// <p class="title"><b>Examples</b></p>
    /// <ul>
    /// <li>
    /// <p><code>arn:aws:iam::111122223333:instance-profile/AWSPCS-example-role-1</code></p></li>
    /// <li>
    /// <p><code>arn:aws:iam::111122223333:instance-profile/aws-pcs/example-role-2</code></p></li>
    /// </ul>
    /// This field is required.
    pub fn iam_instance_profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_instance_profile_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM instance profile used to pass an IAM role when launching EC2 instances. The role contained in your instance profile must have the <code>pcs:RegisterComputeNodeGroupInstance</code> permission. The resource identifier of the ARN must start with <code>AWSPCS</code> or it must have <code>/aws-pcs/</code> in its path.</p>
    /// <p class="title"><b>Examples</b></p>
    /// <ul>
    /// <li>
    /// <p><code>arn:aws:iam::111122223333:instance-profile/AWSPCS-example-role-1</code></p></li>
    /// <li>
    /// <p><code>arn:aws:iam::111122223333:instance-profile/aws-pcs/example-role-2</code></p></li>
    /// </ul>
    pub fn set_iam_instance_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_instance_profile_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM instance profile used to pass an IAM role when launching EC2 instances. The role contained in your instance profile must have the <code>pcs:RegisterComputeNodeGroupInstance</code> permission. The resource identifier of the ARN must start with <code>AWSPCS</code> or it must have <code>/aws-pcs/</code> in its path.</p>
    /// <p class="title"><b>Examples</b></p>
    /// <ul>
    /// <li>
    /// <p><code>arn:aws:iam::111122223333:instance-profile/AWSPCS-example-role-1</code></p></li>
    /// <li>
    /// <p><code>arn:aws:iam::111122223333:instance-profile/aws-pcs/example-role-2</code></p></li>
    /// </ul>
    pub fn get_iam_instance_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_instance_profile_arn
    }
    /// <p>Specifies the boundaries of the compute node group auto scaling.</p>
    /// This field is required.
    pub fn scaling_configuration(mut self, input: crate::types::ScalingConfigurationRequest) -> Self {
        self.scaling_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the boundaries of the compute node group auto scaling.</p>
    pub fn set_scaling_configuration(mut self, input: ::std::option::Option<crate::types::ScalingConfigurationRequest>) -> Self {
        self.scaling_configuration = input;
        self
    }
    /// <p>Specifies the boundaries of the compute node group auto scaling.</p>
    pub fn get_scaling_configuration(&self) -> &::std::option::Option<crate::types::ScalingConfigurationRequest> {
        &self.scaling_configuration
    }
    /// Appends an item to `instance_configs`.
    ///
    /// To override the contents of this collection use [`set_instance_configs`](Self::set_instance_configs).
    ///
    /// <p>A list of EC2 instance configurations that Amazon Web Services PCS can provision in the compute node group.</p>
    pub fn instance_configs(mut self, input: crate::types::InstanceConfig) -> Self {
        let mut v = self.instance_configs.unwrap_or_default();
        v.push(input);
        self.instance_configs = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of EC2 instance configurations that Amazon Web Services PCS can provision in the compute node group.</p>
    pub fn set_instance_configs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InstanceConfig>>) -> Self {
        self.instance_configs = input;
        self
    }
    /// <p>A list of EC2 instance configurations that Amazon Web Services PCS can provision in the compute node group.</p>
    pub fn get_instance_configs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InstanceConfig>> {
        &self.instance_configs
    }
    /// <p>Additional configuration when you specify <code>SPOT</code> as the <code>purchaseOption</code> for the <code>CreateComputeNodeGroup</code> API action.</p>
    pub fn spot_options(mut self, input: crate::types::SpotOptions) -> Self {
        self.spot_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Additional configuration when you specify <code>SPOT</code> as the <code>purchaseOption</code> for the <code>CreateComputeNodeGroup</code> API action.</p>
    pub fn set_spot_options(mut self, input: ::std::option::Option<crate::types::SpotOptions>) -> Self {
        self.spot_options = input;
        self
    }
    /// <p>Additional configuration when you specify <code>SPOT</code> as the <code>purchaseOption</code> for the <code>CreateComputeNodeGroup</code> API action.</p>
    pub fn get_spot_options(&self) -> &::std::option::Option<crate::types::SpotOptions> {
        &self.spot_options
    }
    /// <p>Additional options related to the Slurm scheduler.</p>
    pub fn slurm_configuration(mut self, input: crate::types::ComputeNodeGroupSlurmConfigurationRequest) -> Self {
        self.slurm_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Additional options related to the Slurm scheduler.</p>
    pub fn set_slurm_configuration(mut self, input: ::std::option::Option<crate::types::ComputeNodeGroupSlurmConfigurationRequest>) -> Self {
        self.slurm_configuration = input;
        self
    }
    /// <p>Additional options related to the Slurm scheduler.</p>
    pub fn get_slurm_configuration(&self) -> &::std::option::Option<crate::types::ComputeNodeGroupSlurmConfigurationRequest> {
        &self.slurm_configuration
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries with the same client token return the result from the original successful request and they have no additional effect. If you don't specify a client token, the CLI and SDK automatically generate 1 for you.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries with the same client token return the result from the original successful request and they have no additional effect. If you don't specify a client token, the CLI and SDK automatically generate 1 for you.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries with the same client token return the result from the original successful request and they have no additional effect. If you don't specify a client token, the CLI and SDK automatically generate 1 for you.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateComputeNodeGroupInput`](crate::operation::create_compute_node_group::CreateComputeNodeGroupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_compute_node_group::CreateComputeNodeGroupInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_compute_node_group::CreateComputeNodeGroupInput {
            cluster_identifier: self.cluster_identifier,
            compute_node_group_name: self.compute_node_group_name,
            ami_id: self.ami_id,
            subnet_ids: self.subnet_ids,
            purchase_option: self.purchase_option,
            custom_launch_template: self.custom_launch_template,
            iam_instance_profile_arn: self.iam_instance_profile_arn,
            scaling_configuration: self.scaling_configuration,
            instance_configs: self.instance_configs,
            spot_options: self.spot_options,
            slurm_configuration: self.slurm_configuration,
            client_token: self.client_token,
            tags: self.tags,
        })
    }
}
