// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RegisterComputeNodeGroupInstanceOutput {
    /// <p>The scheduler node ID for this instance.</p>
    pub node_id: ::std::string::String,
    /// <p>For the Slurm scheduler, this is the shared Munge key the scheduler uses to authenticate compute node group instances.</p>
    pub shared_secret: ::std::string::String,
    /// <p>The list of endpoints available for interaction with the scheduler.</p>
    pub endpoints: ::std::vec::Vec<crate::types::Endpoint>,
    _request_id: Option<String>,
}
impl RegisterComputeNodeGroupInstanceOutput {
    /// <p>The scheduler node ID for this instance.</p>
    pub fn node_id(&self) -> &str {
        use std::ops::Deref;
        self.node_id.deref()
    }
    /// <p>For the Slurm scheduler, this is the shared Munge key the scheduler uses to authenticate compute node group instances.</p>
    pub fn shared_secret(&self) -> &str {
        use std::ops::Deref;
        self.shared_secret.deref()
    }
    /// <p>The list of endpoints available for interaction with the scheduler.</p>
    pub fn endpoints(&self) -> &[crate::types::Endpoint] {
        use std::ops::Deref;
        self.endpoints.deref()
    }
}
impl ::std::fmt::Debug for RegisterComputeNodeGroupInstanceOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RegisterComputeNodeGroupInstanceOutput");
        formatter.field("node_id", &self.node_id);
        formatter.field("shared_secret", &"*** Sensitive Data Redacted ***");
        formatter.field("endpoints", &self.endpoints);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for RegisterComputeNodeGroupInstanceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RegisterComputeNodeGroupInstanceOutput {
    /// Creates a new builder-style object to manufacture [`RegisterComputeNodeGroupInstanceOutput`](crate::operation::register_compute_node_group_instance::RegisterComputeNodeGroupInstanceOutput).
    pub fn builder() -> crate::operation::register_compute_node_group_instance::builders::RegisterComputeNodeGroupInstanceOutputBuilder {
        crate::operation::register_compute_node_group_instance::builders::RegisterComputeNodeGroupInstanceOutputBuilder::default()
    }
}

/// A builder for [`RegisterComputeNodeGroupInstanceOutput`](crate::operation::register_compute_node_group_instance::RegisterComputeNodeGroupInstanceOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RegisterComputeNodeGroupInstanceOutputBuilder {
    pub(crate) node_id: ::std::option::Option<::std::string::String>,
    pub(crate) shared_secret: ::std::option::Option<::std::string::String>,
    pub(crate) endpoints: ::std::option::Option<::std::vec::Vec<crate::types::Endpoint>>,
    _request_id: Option<String>,
}
impl RegisterComputeNodeGroupInstanceOutputBuilder {
    /// <p>The scheduler node ID for this instance.</p>
    /// This field is required.
    pub fn node_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The scheduler node ID for this instance.</p>
    pub fn set_node_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_id = input;
        self
    }
    /// <p>The scheduler node ID for this instance.</p>
    pub fn get_node_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_id
    }
    /// <p>For the Slurm scheduler, this is the shared Munge key the scheduler uses to authenticate compute node group instances.</p>
    /// This field is required.
    pub fn shared_secret(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.shared_secret = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>For the Slurm scheduler, this is the shared Munge key the scheduler uses to authenticate compute node group instances.</p>
    pub fn set_shared_secret(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.shared_secret = input;
        self
    }
    /// <p>For the Slurm scheduler, this is the shared Munge key the scheduler uses to authenticate compute node group instances.</p>
    pub fn get_shared_secret(&self) -> &::std::option::Option<::std::string::String> {
        &self.shared_secret
    }
    /// Appends an item to `endpoints`.
    ///
    /// To override the contents of this collection use [`set_endpoints`](Self::set_endpoints).
    ///
    /// <p>The list of endpoints available for interaction with the scheduler.</p>
    pub fn endpoints(mut self, input: crate::types::Endpoint) -> Self {
        let mut v = self.endpoints.unwrap_or_default();
        v.push(input);
        self.endpoints = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of endpoints available for interaction with the scheduler.</p>
    pub fn set_endpoints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Endpoint>>) -> Self {
        self.endpoints = input;
        self
    }
    /// <p>The list of endpoints available for interaction with the scheduler.</p>
    pub fn get_endpoints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Endpoint>> {
        &self.endpoints
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`RegisterComputeNodeGroupInstanceOutput`](crate::operation::register_compute_node_group_instance::RegisterComputeNodeGroupInstanceOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`node_id`](crate::operation::register_compute_node_group_instance::builders::RegisterComputeNodeGroupInstanceOutputBuilder::node_id)
    /// - [`shared_secret`](crate::operation::register_compute_node_group_instance::builders::RegisterComputeNodeGroupInstanceOutputBuilder::shared_secret)
    /// - [`endpoints`](crate::operation::register_compute_node_group_instance::builders::RegisterComputeNodeGroupInstanceOutputBuilder::endpoints)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::register_compute_node_group_instance::RegisterComputeNodeGroupInstanceOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::register_compute_node_group_instance::RegisterComputeNodeGroupInstanceOutput {
                node_id: self.node_id.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "node_id",
                        "node_id was not specified but it is required when building RegisterComputeNodeGroupInstanceOutput",
                    )
                })?,
                shared_secret: self.shared_secret.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "shared_secret",
                        "shared_secret was not specified but it is required when building RegisterComputeNodeGroupInstanceOutput",
                    )
                })?,
                endpoints: self.endpoints.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "endpoints",
                        "endpoints was not specified but it is required when building RegisterComputeNodeGroupInstanceOutput",
                    )
                })?,
                _request_id: self._request_id,
            },
        )
    }
}
impl ::std::fmt::Debug for RegisterComputeNodeGroupInstanceOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RegisterComputeNodeGroupInstanceOutputBuilder");
        formatter.field("node_id", &self.node_id);
        formatter.field("shared_secret", &"*** Sensitive Data Redacted ***");
        formatter.field("endpoints", &self.endpoints);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
