// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Additional tax information to specify for a TRN in Uzbekistan.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UzbekistanAdditionalInfo {
    /// <p>The tax registration number type. The tax registration number type valid values are <code>Business</code> and <code>Individual</code>.</p>
    pub tax_registration_number_type: ::std::option::Option<crate::types::UzbekistanTaxRegistrationNumberType>,
    /// <p>The unique 12-digit number issued to identify VAT-registered identities in Uzbekistan.</p>
    pub vat_registration_number: ::std::option::Option<::std::string::String>,
}
impl UzbekistanAdditionalInfo {
    /// <p>The tax registration number type. The tax registration number type valid values are <code>Business</code> and <code>Individual</code>.</p>
    pub fn tax_registration_number_type(&self) -> ::std::option::Option<&crate::types::UzbekistanTaxRegistrationNumberType> {
        self.tax_registration_number_type.as_ref()
    }
    /// <p>The unique 12-digit number issued to identify VAT-registered identities in Uzbekistan.</p>
    pub fn vat_registration_number(&self) -> ::std::option::Option<&str> {
        self.vat_registration_number.as_deref()
    }
}
impl UzbekistanAdditionalInfo {
    /// Creates a new builder-style object to manufacture [`UzbekistanAdditionalInfo`](crate::types::UzbekistanAdditionalInfo).
    pub fn builder() -> crate::types::builders::UzbekistanAdditionalInfoBuilder {
        crate::types::builders::UzbekistanAdditionalInfoBuilder::default()
    }
}

/// A builder for [`UzbekistanAdditionalInfo`](crate::types::UzbekistanAdditionalInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UzbekistanAdditionalInfoBuilder {
    pub(crate) tax_registration_number_type: ::std::option::Option<crate::types::UzbekistanTaxRegistrationNumberType>,
    pub(crate) vat_registration_number: ::std::option::Option<::std::string::String>,
}
impl UzbekistanAdditionalInfoBuilder {
    /// <p>The tax registration number type. The tax registration number type valid values are <code>Business</code> and <code>Individual</code>.</p>
    pub fn tax_registration_number_type(mut self, input: crate::types::UzbekistanTaxRegistrationNumberType) -> Self {
        self.tax_registration_number_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The tax registration number type. The tax registration number type valid values are <code>Business</code> and <code>Individual</code>.</p>
    pub fn set_tax_registration_number_type(mut self, input: ::std::option::Option<crate::types::UzbekistanTaxRegistrationNumberType>) -> Self {
        self.tax_registration_number_type = input;
        self
    }
    /// <p>The tax registration number type. The tax registration number type valid values are <code>Business</code> and <code>Individual</code>.</p>
    pub fn get_tax_registration_number_type(&self) -> &::std::option::Option<crate::types::UzbekistanTaxRegistrationNumberType> {
        &self.tax_registration_number_type
    }
    /// <p>The unique 12-digit number issued to identify VAT-registered identities in Uzbekistan.</p>
    pub fn vat_registration_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vat_registration_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique 12-digit number issued to identify VAT-registered identities in Uzbekistan.</p>
    pub fn set_vat_registration_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vat_registration_number = input;
        self
    }
    /// <p>The unique 12-digit number issued to identify VAT-registered identities in Uzbekistan.</p>
    pub fn get_vat_registration_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.vat_registration_number
    }
    /// Consumes the builder and constructs a [`UzbekistanAdditionalInfo`](crate::types::UzbekistanAdditionalInfo).
    pub fn build(self) -> crate::types::UzbekistanAdditionalInfo {
        crate::types::UzbekistanAdditionalInfo {
            tax_registration_number_type: self.tax_registration_number_type,
            vat_registration_number: self.vat_registration_number,
        }
    }
}
