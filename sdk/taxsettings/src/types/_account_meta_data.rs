// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The meta data information associated with the account.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AccountMetaData {
    /// <p>The Amazon Web Services accounts name.</p>
    pub account_name: ::std::option::Option<::std::string::String>,
    /// <p>Seller information associated with the account.</p>
    pub seller: ::std::option::Option<::std::string::String>,
    /// <p>The details of the address associated with the TRN information.</p>
    pub address: ::std::option::Option<crate::types::Address>,
    /// <p>The type of address associated with the legal profile.</p>
    pub address_type: ::std::option::Option<crate::types::AddressRoleType>,
    /// <p>Address roles associated with the account containing country code information.</p>
    pub address_role_map: ::std::option::Option<::std::collections::HashMap<crate::types::AddressRoleType, crate::types::Jurisdiction>>,
}
impl AccountMetaData {
    /// <p>The Amazon Web Services accounts name.</p>
    pub fn account_name(&self) -> ::std::option::Option<&str> {
        self.account_name.as_deref()
    }
    /// <p>Seller information associated with the account.</p>
    pub fn seller(&self) -> ::std::option::Option<&str> {
        self.seller.as_deref()
    }
    /// <p>The details of the address associated with the TRN information.</p>
    pub fn address(&self) -> ::std::option::Option<&crate::types::Address> {
        self.address.as_ref()
    }
    /// <p>The type of address associated with the legal profile.</p>
    pub fn address_type(&self) -> ::std::option::Option<&crate::types::AddressRoleType> {
        self.address_type.as_ref()
    }
    /// <p>Address roles associated with the account containing country code information.</p>
    pub fn address_role_map(&self) -> ::std::option::Option<&::std::collections::HashMap<crate::types::AddressRoleType, crate::types::Jurisdiction>> {
        self.address_role_map.as_ref()
    }
}
impl ::std::fmt::Debug for AccountMetaData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AccountMetaData");
        formatter.field("account_name", &"*** Sensitive Data Redacted ***");
        formatter.field("seller", &"*** Sensitive Data Redacted ***");
        formatter.field("address", &"*** Sensitive Data Redacted ***");
        formatter.field("address_type", &"*** Sensitive Data Redacted ***");
        formatter.field("address_role_map", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AccountMetaData {
    /// Creates a new builder-style object to manufacture [`AccountMetaData`](crate::types::AccountMetaData).
    pub fn builder() -> crate::types::builders::AccountMetaDataBuilder {
        crate::types::builders::AccountMetaDataBuilder::default()
    }
}

/// A builder for [`AccountMetaData`](crate::types::AccountMetaData).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AccountMetaDataBuilder {
    pub(crate) account_name: ::std::option::Option<::std::string::String>,
    pub(crate) seller: ::std::option::Option<::std::string::String>,
    pub(crate) address: ::std::option::Option<crate::types::Address>,
    pub(crate) address_type: ::std::option::Option<crate::types::AddressRoleType>,
    pub(crate) address_role_map: ::std::option::Option<::std::collections::HashMap<crate::types::AddressRoleType, crate::types::Jurisdiction>>,
}
impl AccountMetaDataBuilder {
    /// <p>The Amazon Web Services accounts name.</p>
    pub fn account_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services accounts name.</p>
    pub fn set_account_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_name = input;
        self
    }
    /// <p>The Amazon Web Services accounts name.</p>
    pub fn get_account_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_name
    }
    /// <p>Seller information associated with the account.</p>
    pub fn seller(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.seller = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Seller information associated with the account.</p>
    pub fn set_seller(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.seller = input;
        self
    }
    /// <p>Seller information associated with the account.</p>
    pub fn get_seller(&self) -> &::std::option::Option<::std::string::String> {
        &self.seller
    }
    /// <p>The details of the address associated with the TRN information.</p>
    pub fn address(mut self, input: crate::types::Address) -> Self {
        self.address = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the address associated with the TRN information.</p>
    pub fn set_address(mut self, input: ::std::option::Option<crate::types::Address>) -> Self {
        self.address = input;
        self
    }
    /// <p>The details of the address associated with the TRN information.</p>
    pub fn get_address(&self) -> &::std::option::Option<crate::types::Address> {
        &self.address
    }
    /// <p>The type of address associated with the legal profile.</p>
    pub fn address_type(mut self, input: crate::types::AddressRoleType) -> Self {
        self.address_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of address associated with the legal profile.</p>
    pub fn set_address_type(mut self, input: ::std::option::Option<crate::types::AddressRoleType>) -> Self {
        self.address_type = input;
        self
    }
    /// <p>The type of address associated with the legal profile.</p>
    pub fn get_address_type(&self) -> &::std::option::Option<crate::types::AddressRoleType> {
        &self.address_type
    }
    /// Adds a key-value pair to `address_role_map`.
    ///
    /// To override the contents of this collection use [`set_address_role_map`](Self::set_address_role_map).
    ///
    /// <p>Address roles associated with the account containing country code information.</p>
    pub fn address_role_map(mut self, k: crate::types::AddressRoleType, v: crate::types::Jurisdiction) -> Self {
        let mut hash_map = self.address_role_map.unwrap_or_default();
        hash_map.insert(k, v);
        self.address_role_map = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Address roles associated with the account containing country code information.</p>
    pub fn set_address_role_map(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::AddressRoleType, crate::types::Jurisdiction>>,
    ) -> Self {
        self.address_role_map = input;
        self
    }
    /// <p>Address roles associated with the account containing country code information.</p>
    pub fn get_address_role_map(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<crate::types::AddressRoleType, crate::types::Jurisdiction>> {
        &self.address_role_map
    }
    /// Consumes the builder and constructs a [`AccountMetaData`](crate::types::AccountMetaData).
    pub fn build(self) -> crate::types::AccountMetaData {
        crate::types::AccountMetaData {
            account_name: self.account_name,
            seller: self.seller,
            address: self.address,
            address_type: self.address_type,
            address_role_map: self.address_role_map,
        }
    }
}
impl ::std::fmt::Debug for AccountMetaDataBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AccountMetaDataBuilder");
        formatter.field("account_name", &"*** Sensitive Data Redacted ***");
        formatter.field("seller", &"*** Sensitive Data Redacted ***");
        formatter.field("address", &"*** Sensitive Data Redacted ***");
        formatter.field("address_type", &"*** Sensitive Data Redacted ***");
        formatter.field("address_role_map", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
