// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The address domain associate with the tax information.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Authority {
    /// <p>The country code for the country that the address is in.</p>
    pub country: ::std::string::String,
    /// <p>The state that the address is located.</p>
    pub state: ::std::option::Option<::std::string::String>,
}
impl Authority {
    /// <p>The country code for the country that the address is in.</p>
    pub fn country(&self) -> &str {
        use std::ops::Deref;
        self.country.deref()
    }
    /// <p>The state that the address is located.</p>
    pub fn state(&self) -> ::std::option::Option<&str> {
        self.state.as_deref()
    }
}
impl Authority {
    /// Creates a new builder-style object to manufacture [`Authority`](crate::types::Authority).
    pub fn builder() -> crate::types::builders::AuthorityBuilder {
        crate::types::builders::AuthorityBuilder::default()
    }
}

/// A builder for [`Authority`](crate::types::Authority).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AuthorityBuilder {
    pub(crate) country: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<::std::string::String>,
}
impl AuthorityBuilder {
    /// <p>The country code for the country that the address is in.</p>
    /// This field is required.
    pub fn country(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.country = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The country code for the country that the address is in.</p>
    pub fn set_country(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.country = input;
        self
    }
    /// <p>The country code for the country that the address is in.</p>
    pub fn get_country(&self) -> &::std::option::Option<::std::string::String> {
        &self.country
    }
    /// <p>The state that the address is located.</p>
    pub fn state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The state that the address is located.</p>
    pub fn set_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state that the address is located.</p>
    pub fn get_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.state
    }
    /// Consumes the builder and constructs a [`Authority`](crate::types::Authority).
    /// This method will fail if any of the following fields are not set:
    /// - [`country`](crate::types::builders::AuthorityBuilder::country)
    pub fn build(self) -> ::std::result::Result<crate::types::Authority, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Authority {
            country: self.country.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "country",
                    "country was not specified but it is required when building Authority",
                )
            })?,
            state: self.state,
        })
    }
}
