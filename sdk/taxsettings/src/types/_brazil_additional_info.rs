// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Additional tax information associated with your TRN in Brazil.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BrazilAdditionalInfo {
    /// <p>The Cadastro de Contribuintes Mobiliários (CCM) code for your TRN in Brazil. This only applies for a CNPJ tax type for the São Paulo municipality.</p>
    pub ccm_code: ::std::option::Option<::std::string::String>,
    /// <p>Legal nature of business, based on your TRN in Brazil. This only applies for a CNPJ tax type.</p>
    pub legal_nature_code: ::std::option::Option<::std::string::String>,
}
impl BrazilAdditionalInfo {
    /// <p>The Cadastro de Contribuintes Mobiliários (CCM) code for your TRN in Brazil. This only applies for a CNPJ tax type for the São Paulo municipality.</p>
    pub fn ccm_code(&self) -> ::std::option::Option<&str> {
        self.ccm_code.as_deref()
    }
    /// <p>Legal nature of business, based on your TRN in Brazil. This only applies for a CNPJ tax type.</p>
    pub fn legal_nature_code(&self) -> ::std::option::Option<&str> {
        self.legal_nature_code.as_deref()
    }
}
impl BrazilAdditionalInfo {
    /// Creates a new builder-style object to manufacture [`BrazilAdditionalInfo`](crate::types::BrazilAdditionalInfo).
    pub fn builder() -> crate::types::builders::BrazilAdditionalInfoBuilder {
        crate::types::builders::BrazilAdditionalInfoBuilder::default()
    }
}

/// A builder for [`BrazilAdditionalInfo`](crate::types::BrazilAdditionalInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BrazilAdditionalInfoBuilder {
    pub(crate) ccm_code: ::std::option::Option<::std::string::String>,
    pub(crate) legal_nature_code: ::std::option::Option<::std::string::String>,
}
impl BrazilAdditionalInfoBuilder {
    /// <p>The Cadastro de Contribuintes Mobiliários (CCM) code for your TRN in Brazil. This only applies for a CNPJ tax type for the São Paulo municipality.</p>
    pub fn ccm_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ccm_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Cadastro de Contribuintes Mobiliários (CCM) code for your TRN in Brazil. This only applies for a CNPJ tax type for the São Paulo municipality.</p>
    pub fn set_ccm_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ccm_code = input;
        self
    }
    /// <p>The Cadastro de Contribuintes Mobiliários (CCM) code for your TRN in Brazil. This only applies for a CNPJ tax type for the São Paulo municipality.</p>
    pub fn get_ccm_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.ccm_code
    }
    /// <p>Legal nature of business, based on your TRN in Brazil. This only applies for a CNPJ tax type.</p>
    pub fn legal_nature_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.legal_nature_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Legal nature of business, based on your TRN in Brazil. This only applies for a CNPJ tax type.</p>
    pub fn set_legal_nature_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.legal_nature_code = input;
        self
    }
    /// <p>Legal nature of business, based on your TRN in Brazil. This only applies for a CNPJ tax type.</p>
    pub fn get_legal_nature_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.legal_nature_code
    }
    /// Consumes the builder and constructs a [`BrazilAdditionalInfo`](crate::types::BrazilAdditionalInfo).
    pub fn build(self) -> crate::types::BrazilAdditionalInfo {
        crate::types::BrazilAdditionalInfo {
            ccm_code: self.ccm_code,
            legal_nature_code: self.legal_nature_code,
        }
    }
}
