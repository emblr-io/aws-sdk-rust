// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Supplemental TRN details.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SupplementalTaxRegistration {
    /// <p>The supplemental TRN unique identifier.</p>
    pub registration_id: ::std::string::String,
    /// <p>Type of supplemental TRN. Currently, this can only be VAT.</p>
    pub registration_type: crate::types::SupplementalTaxRegistrationType,
    /// <p>The legal name associated with your TRN registration.</p>
    pub legal_name: ::std::string::String,
    /// <p>The details of the address associated with the TRN information.</p>
    pub address: ::std::option::Option<crate::types::Address>,
    /// <p>Unique authority ID for the supplemental TRN.</p>
    pub authority_id: ::std::string::String,
    /// <p>The status of your TRN.</p>
    pub status: crate::types::TaxRegistrationStatus,
}
impl SupplementalTaxRegistration {
    /// <p>The supplemental TRN unique identifier.</p>
    pub fn registration_id(&self) -> &str {
        use std::ops::Deref;
        self.registration_id.deref()
    }
    /// <p>Type of supplemental TRN. Currently, this can only be VAT.</p>
    pub fn registration_type(&self) -> &crate::types::SupplementalTaxRegistrationType {
        &self.registration_type
    }
    /// <p>The legal name associated with your TRN registration.</p>
    pub fn legal_name(&self) -> &str {
        use std::ops::Deref;
        self.legal_name.deref()
    }
    /// <p>The details of the address associated with the TRN information.</p>
    pub fn address(&self) -> ::std::option::Option<&crate::types::Address> {
        self.address.as_ref()
    }
    /// <p>Unique authority ID for the supplemental TRN.</p>
    pub fn authority_id(&self) -> &str {
        use std::ops::Deref;
        self.authority_id.deref()
    }
    /// <p>The status of your TRN.</p>
    pub fn status(&self) -> &crate::types::TaxRegistrationStatus {
        &self.status
    }
}
impl ::std::fmt::Debug for SupplementalTaxRegistration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SupplementalTaxRegistration");
        formatter.field("registration_id", &"*** Sensitive Data Redacted ***");
        formatter.field("registration_type", &"*** Sensitive Data Redacted ***");
        formatter.field("legal_name", &"*** Sensitive Data Redacted ***");
        formatter.field("address", &"*** Sensitive Data Redacted ***");
        formatter.field("authority_id", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl SupplementalTaxRegistration {
    /// Creates a new builder-style object to manufacture [`SupplementalTaxRegistration`](crate::types::SupplementalTaxRegistration).
    pub fn builder() -> crate::types::builders::SupplementalTaxRegistrationBuilder {
        crate::types::builders::SupplementalTaxRegistrationBuilder::default()
    }
}

/// A builder for [`SupplementalTaxRegistration`](crate::types::SupplementalTaxRegistration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct SupplementalTaxRegistrationBuilder {
    pub(crate) registration_id: ::std::option::Option<::std::string::String>,
    pub(crate) registration_type: ::std::option::Option<crate::types::SupplementalTaxRegistrationType>,
    pub(crate) legal_name: ::std::option::Option<::std::string::String>,
    pub(crate) address: ::std::option::Option<crate::types::Address>,
    pub(crate) authority_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::TaxRegistrationStatus>,
}
impl SupplementalTaxRegistrationBuilder {
    /// <p>The supplemental TRN unique identifier.</p>
    /// This field is required.
    pub fn registration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registration_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The supplemental TRN unique identifier.</p>
    pub fn set_registration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registration_id = input;
        self
    }
    /// <p>The supplemental TRN unique identifier.</p>
    pub fn get_registration_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.registration_id
    }
    /// <p>Type of supplemental TRN. Currently, this can only be VAT.</p>
    /// This field is required.
    pub fn registration_type(mut self, input: crate::types::SupplementalTaxRegistrationType) -> Self {
        self.registration_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of supplemental TRN. Currently, this can only be VAT.</p>
    pub fn set_registration_type(mut self, input: ::std::option::Option<crate::types::SupplementalTaxRegistrationType>) -> Self {
        self.registration_type = input;
        self
    }
    /// <p>Type of supplemental TRN. Currently, this can only be VAT.</p>
    pub fn get_registration_type(&self) -> &::std::option::Option<crate::types::SupplementalTaxRegistrationType> {
        &self.registration_type
    }
    /// <p>The legal name associated with your TRN registration.</p>
    /// This field is required.
    pub fn legal_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.legal_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The legal name associated with your TRN registration.</p>
    pub fn set_legal_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.legal_name = input;
        self
    }
    /// <p>The legal name associated with your TRN registration.</p>
    pub fn get_legal_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.legal_name
    }
    /// <p>The details of the address associated with the TRN information.</p>
    /// This field is required.
    pub fn address(mut self, input: crate::types::Address) -> Self {
        self.address = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the address associated with the TRN information.</p>
    pub fn set_address(mut self, input: ::std::option::Option<crate::types::Address>) -> Self {
        self.address = input;
        self
    }
    /// <p>The details of the address associated with the TRN information.</p>
    pub fn get_address(&self) -> &::std::option::Option<crate::types::Address> {
        &self.address
    }
    /// <p>Unique authority ID for the supplemental TRN.</p>
    /// This field is required.
    pub fn authority_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authority_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique authority ID for the supplemental TRN.</p>
    pub fn set_authority_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authority_id = input;
        self
    }
    /// <p>Unique authority ID for the supplemental TRN.</p>
    pub fn get_authority_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.authority_id
    }
    /// <p>The status of your TRN.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::TaxRegistrationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of your TRN.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TaxRegistrationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of your TRN.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TaxRegistrationStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`SupplementalTaxRegistration`](crate::types::SupplementalTaxRegistration).
    /// This method will fail if any of the following fields are not set:
    /// - [`registration_id`](crate::types::builders::SupplementalTaxRegistrationBuilder::registration_id)
    /// - [`registration_type`](crate::types::builders::SupplementalTaxRegistrationBuilder::registration_type)
    /// - [`legal_name`](crate::types::builders::SupplementalTaxRegistrationBuilder::legal_name)
    /// - [`authority_id`](crate::types::builders::SupplementalTaxRegistrationBuilder::authority_id)
    /// - [`status`](crate::types::builders::SupplementalTaxRegistrationBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::SupplementalTaxRegistration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SupplementalTaxRegistration {
            registration_id: self.registration_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "registration_id",
                    "registration_id was not specified but it is required when building SupplementalTaxRegistration",
                )
            })?,
            registration_type: self.registration_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "registration_type",
                    "registration_type was not specified but it is required when building SupplementalTaxRegistration",
                )
            })?,
            legal_name: self.legal_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "legal_name",
                    "legal_name was not specified but it is required when building SupplementalTaxRegistration",
                )
            })?,
            address: self.address,
            authority_id: self.authority_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "authority_id",
                    "authority_id was not specified but it is required when building SupplementalTaxRegistration",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building SupplementalTaxRegistration",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for SupplementalTaxRegistrationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SupplementalTaxRegistrationBuilder");
        formatter.field("registration_id", &"*** Sensitive Data Redacted ***");
        formatter.field("registration_type", &"*** Sensitive Data Redacted ***");
        formatter.field("legal_name", &"*** Sensitive Data Redacted ***");
        formatter.field("address", &"*** Sensitive Data Redacted ***");
        formatter.field("authority_id", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
