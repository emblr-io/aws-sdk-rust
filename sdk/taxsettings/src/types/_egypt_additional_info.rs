// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Additional tax information to specify for a TRN in Egypt.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EgyptAdditionalInfo {
    /// <p>The unique identification number provided by the Egypt Tax Authority.</p>
    pub unique_identification_number: ::std::option::Option<::std::string::String>,
    /// <p>The expiration date of the unique identification number provided by the Egypt Tax Authority.</p>
    pub unique_identification_number_expiration_date: ::std::option::Option<::std::string::String>,
}
impl EgyptAdditionalInfo {
    /// <p>The unique identification number provided by the Egypt Tax Authority.</p>
    pub fn unique_identification_number(&self) -> ::std::option::Option<&str> {
        self.unique_identification_number.as_deref()
    }
    /// <p>The expiration date of the unique identification number provided by the Egypt Tax Authority.</p>
    pub fn unique_identification_number_expiration_date(&self) -> ::std::option::Option<&str> {
        self.unique_identification_number_expiration_date.as_deref()
    }
}
impl EgyptAdditionalInfo {
    /// Creates a new builder-style object to manufacture [`EgyptAdditionalInfo`](crate::types::EgyptAdditionalInfo).
    pub fn builder() -> crate::types::builders::EgyptAdditionalInfoBuilder {
        crate::types::builders::EgyptAdditionalInfoBuilder::default()
    }
}

/// A builder for [`EgyptAdditionalInfo`](crate::types::EgyptAdditionalInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EgyptAdditionalInfoBuilder {
    pub(crate) unique_identification_number: ::std::option::Option<::std::string::String>,
    pub(crate) unique_identification_number_expiration_date: ::std::option::Option<::std::string::String>,
}
impl EgyptAdditionalInfoBuilder {
    /// <p>The unique identification number provided by the Egypt Tax Authority.</p>
    pub fn unique_identification_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.unique_identification_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identification number provided by the Egypt Tax Authority.</p>
    pub fn set_unique_identification_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.unique_identification_number = input;
        self
    }
    /// <p>The unique identification number provided by the Egypt Tax Authority.</p>
    pub fn get_unique_identification_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.unique_identification_number
    }
    /// <p>The expiration date of the unique identification number provided by the Egypt Tax Authority.</p>
    pub fn unique_identification_number_expiration_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.unique_identification_number_expiration_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The expiration date of the unique identification number provided by the Egypt Tax Authority.</p>
    pub fn set_unique_identification_number_expiration_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.unique_identification_number_expiration_date = input;
        self
    }
    /// <p>The expiration date of the unique identification number provided by the Egypt Tax Authority.</p>
    pub fn get_unique_identification_number_expiration_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.unique_identification_number_expiration_date
    }
    /// Consumes the builder and constructs a [`EgyptAdditionalInfo`](crate::types::EgyptAdditionalInfo).
    pub fn build(self) -> crate::types::EgyptAdditionalInfo {
        crate::types::EgyptAdditionalInfo {
            unique_identification_number: self.unique_identification_number,
            unique_identification_number_expiration_date: self.unique_identification_number_expiration_date,
        }
    }
}
