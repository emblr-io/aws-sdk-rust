// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Additional tax information associated with your TRN in Israel.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IsraelAdditionalInfo {
    /// <p>Dealer type for your TRN in Israel. If you're not a local authorized dealer with an Israeli VAT ID, specify your tax identification number so that Amazon Web Services can send you a compliant tax invoice.</p>
    pub dealer_type: crate::types::IsraelDealerType,
    /// <p>Customer type for your TRN in Israel. The value can be <code>Business</code> or <code>Individual</code>. Use <code>Business</code>for entities such as not-for-profit and financial institutions.</p>
    pub customer_type: crate::types::IsraelCustomerType,
}
impl IsraelAdditionalInfo {
    /// <p>Dealer type for your TRN in Israel. If you're not a local authorized dealer with an Israeli VAT ID, specify your tax identification number so that Amazon Web Services can send you a compliant tax invoice.</p>
    pub fn dealer_type(&self) -> &crate::types::IsraelDealerType {
        &self.dealer_type
    }
    /// <p>Customer type for your TRN in Israel. The value can be <code>Business</code> or <code>Individual</code>. Use <code>Business</code>for entities such as not-for-profit and financial institutions.</p>
    pub fn customer_type(&self) -> &crate::types::IsraelCustomerType {
        &self.customer_type
    }
}
impl IsraelAdditionalInfo {
    /// Creates a new builder-style object to manufacture [`IsraelAdditionalInfo`](crate::types::IsraelAdditionalInfo).
    pub fn builder() -> crate::types::builders::IsraelAdditionalInfoBuilder {
        crate::types::builders::IsraelAdditionalInfoBuilder::default()
    }
}

/// A builder for [`IsraelAdditionalInfo`](crate::types::IsraelAdditionalInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IsraelAdditionalInfoBuilder {
    pub(crate) dealer_type: ::std::option::Option<crate::types::IsraelDealerType>,
    pub(crate) customer_type: ::std::option::Option<crate::types::IsraelCustomerType>,
}
impl IsraelAdditionalInfoBuilder {
    /// <p>Dealer type for your TRN in Israel. If you're not a local authorized dealer with an Israeli VAT ID, specify your tax identification number so that Amazon Web Services can send you a compliant tax invoice.</p>
    /// This field is required.
    pub fn dealer_type(mut self, input: crate::types::IsraelDealerType) -> Self {
        self.dealer_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Dealer type for your TRN in Israel. If you're not a local authorized dealer with an Israeli VAT ID, specify your tax identification number so that Amazon Web Services can send you a compliant tax invoice.</p>
    pub fn set_dealer_type(mut self, input: ::std::option::Option<crate::types::IsraelDealerType>) -> Self {
        self.dealer_type = input;
        self
    }
    /// <p>Dealer type for your TRN in Israel. If you're not a local authorized dealer with an Israeli VAT ID, specify your tax identification number so that Amazon Web Services can send you a compliant tax invoice.</p>
    pub fn get_dealer_type(&self) -> &::std::option::Option<crate::types::IsraelDealerType> {
        &self.dealer_type
    }
    /// <p>Customer type for your TRN in Israel. The value can be <code>Business</code> or <code>Individual</code>. Use <code>Business</code>for entities such as not-for-profit and financial institutions.</p>
    /// This field is required.
    pub fn customer_type(mut self, input: crate::types::IsraelCustomerType) -> Self {
        self.customer_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Customer type for your TRN in Israel. The value can be <code>Business</code> or <code>Individual</code>. Use <code>Business</code>for entities such as not-for-profit and financial institutions.</p>
    pub fn set_customer_type(mut self, input: ::std::option::Option<crate::types::IsraelCustomerType>) -> Self {
        self.customer_type = input;
        self
    }
    /// <p>Customer type for your TRN in Israel. The value can be <code>Business</code> or <code>Individual</code>. Use <code>Business</code>for entities such as not-for-profit and financial institutions.</p>
    pub fn get_customer_type(&self) -> &::std::option::Option<crate::types::IsraelCustomerType> {
        &self.customer_type
    }
    /// Consumes the builder and constructs a [`IsraelAdditionalInfo`](crate::types::IsraelAdditionalInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`dealer_type`](crate::types::builders::IsraelAdditionalInfoBuilder::dealer_type)
    /// - [`customer_type`](crate::types::builders::IsraelAdditionalInfoBuilder::customer_type)
    pub fn build(self) -> ::std::result::Result<crate::types::IsraelAdditionalInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IsraelAdditionalInfo {
            dealer_type: self.dealer_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dealer_type",
                    "dealer_type was not specified but it is required when building IsraelAdditionalInfo",
                )
            })?,
            customer_type: self.customer_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "customer_type",
                    "customer_type was not specified but it is required when building IsraelAdditionalInfo",
                )
            })?,
        })
    }
}
