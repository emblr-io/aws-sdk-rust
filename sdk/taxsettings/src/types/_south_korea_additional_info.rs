// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Additional tax information associated with your TRN in South Korea.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SouthKoreaAdditionalInfo {
    /// <p>The business legal name based on the most recently uploaded tax registration certificate.</p>
    pub business_representative_name: ::std::string::String,
    /// <p>Line of business based on the most recently uploaded tax registration certificate.</p>
    pub line_of_business: ::std::string::String,
    /// <p>Item of business based on the most recently uploaded tax registration certificate.</p>
    pub item_of_business: ::std::string::String,
}
impl SouthKoreaAdditionalInfo {
    /// <p>The business legal name based on the most recently uploaded tax registration certificate.</p>
    pub fn business_representative_name(&self) -> &str {
        use std::ops::Deref;
        self.business_representative_name.deref()
    }
    /// <p>Line of business based on the most recently uploaded tax registration certificate.</p>
    pub fn line_of_business(&self) -> &str {
        use std::ops::Deref;
        self.line_of_business.deref()
    }
    /// <p>Item of business based on the most recently uploaded tax registration certificate.</p>
    pub fn item_of_business(&self) -> &str {
        use std::ops::Deref;
        self.item_of_business.deref()
    }
}
impl SouthKoreaAdditionalInfo {
    /// Creates a new builder-style object to manufacture [`SouthKoreaAdditionalInfo`](crate::types::SouthKoreaAdditionalInfo).
    pub fn builder() -> crate::types::builders::SouthKoreaAdditionalInfoBuilder {
        crate::types::builders::SouthKoreaAdditionalInfoBuilder::default()
    }
}

/// A builder for [`SouthKoreaAdditionalInfo`](crate::types::SouthKoreaAdditionalInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SouthKoreaAdditionalInfoBuilder {
    pub(crate) business_representative_name: ::std::option::Option<::std::string::String>,
    pub(crate) line_of_business: ::std::option::Option<::std::string::String>,
    pub(crate) item_of_business: ::std::option::Option<::std::string::String>,
}
impl SouthKoreaAdditionalInfoBuilder {
    /// <p>The business legal name based on the most recently uploaded tax registration certificate.</p>
    /// This field is required.
    pub fn business_representative_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.business_representative_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The business legal name based on the most recently uploaded tax registration certificate.</p>
    pub fn set_business_representative_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.business_representative_name = input;
        self
    }
    /// <p>The business legal name based on the most recently uploaded tax registration certificate.</p>
    pub fn get_business_representative_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.business_representative_name
    }
    /// <p>Line of business based on the most recently uploaded tax registration certificate.</p>
    /// This field is required.
    pub fn line_of_business(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.line_of_business = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Line of business based on the most recently uploaded tax registration certificate.</p>
    pub fn set_line_of_business(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.line_of_business = input;
        self
    }
    /// <p>Line of business based on the most recently uploaded tax registration certificate.</p>
    pub fn get_line_of_business(&self) -> &::std::option::Option<::std::string::String> {
        &self.line_of_business
    }
    /// <p>Item of business based on the most recently uploaded tax registration certificate.</p>
    /// This field is required.
    pub fn item_of_business(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.item_of_business = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Item of business based on the most recently uploaded tax registration certificate.</p>
    pub fn set_item_of_business(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.item_of_business = input;
        self
    }
    /// <p>Item of business based on the most recently uploaded tax registration certificate.</p>
    pub fn get_item_of_business(&self) -> &::std::option::Option<::std::string::String> {
        &self.item_of_business
    }
    /// Consumes the builder and constructs a [`SouthKoreaAdditionalInfo`](crate::types::SouthKoreaAdditionalInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`business_representative_name`](crate::types::builders::SouthKoreaAdditionalInfoBuilder::business_representative_name)
    /// - [`line_of_business`](crate::types::builders::SouthKoreaAdditionalInfoBuilder::line_of_business)
    /// - [`item_of_business`](crate::types::builders::SouthKoreaAdditionalInfoBuilder::item_of_business)
    pub fn build(self) -> ::std::result::Result<crate::types::SouthKoreaAdditionalInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SouthKoreaAdditionalInfo {
            business_representative_name: self.business_representative_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "business_representative_name",
                    "business_representative_name was not specified but it is required when building SouthKoreaAdditionalInfo",
                )
            })?,
            line_of_business: self.line_of_business.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "line_of_business",
                    "line_of_business was not specified but it is required when building SouthKoreaAdditionalInfo",
                )
            })?,
            item_of_business: self.item_of_business.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "item_of_business",
                    "item_of_business was not specified but it is required when building SouthKoreaAdditionalInfo",
                )
            })?,
        })
    }
}
