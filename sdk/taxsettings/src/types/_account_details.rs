// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object with your <code>accountId</code> and TRN information.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AccountDetails {
    /// <p>List of unique account identifiers.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>Your TRN information. Instead of having full legal address, here TRN information will have jurisdiction details (for example, country code and state/region/province if applicable).</p>
    pub tax_registration: ::std::option::Option<crate::types::TaxRegistrationWithJurisdiction>,
    /// <p>Tax inheritance information associated with the account.</p>
    pub tax_inheritance_details: ::std::option::Option<crate::types::TaxInheritanceDetails>,
    /// <p>The meta data information associated with the account.</p>
    pub account_meta_data: ::std::option::Option<crate::types::AccountMetaData>,
}
impl AccountDetails {
    /// <p>List of unique account identifiers.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>Your TRN information. Instead of having full legal address, here TRN information will have jurisdiction details (for example, country code and state/region/province if applicable).</p>
    pub fn tax_registration(&self) -> ::std::option::Option<&crate::types::TaxRegistrationWithJurisdiction> {
        self.tax_registration.as_ref()
    }
    /// <p>Tax inheritance information associated with the account.</p>
    pub fn tax_inheritance_details(&self) -> ::std::option::Option<&crate::types::TaxInheritanceDetails> {
        self.tax_inheritance_details.as_ref()
    }
    /// <p>The meta data information associated with the account.</p>
    pub fn account_meta_data(&self) -> ::std::option::Option<&crate::types::AccountMetaData> {
        self.account_meta_data.as_ref()
    }
}
impl ::std::fmt::Debug for AccountDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AccountDetails");
        formatter.field("account_id", &"*** Sensitive Data Redacted ***");
        formatter.field("tax_registration", &"*** Sensitive Data Redacted ***");
        formatter.field("tax_inheritance_details", &"*** Sensitive Data Redacted ***");
        formatter.field("account_meta_data", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AccountDetails {
    /// Creates a new builder-style object to manufacture [`AccountDetails`](crate::types::AccountDetails).
    pub fn builder() -> crate::types::builders::AccountDetailsBuilder {
        crate::types::builders::AccountDetailsBuilder::default()
    }
}

/// A builder for [`AccountDetails`](crate::types::AccountDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AccountDetailsBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) tax_registration: ::std::option::Option<crate::types::TaxRegistrationWithJurisdiction>,
    pub(crate) tax_inheritance_details: ::std::option::Option<crate::types::TaxInheritanceDetails>,
    pub(crate) account_meta_data: ::std::option::Option<crate::types::AccountMetaData>,
}
impl AccountDetailsBuilder {
    /// <p>List of unique account identifiers.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>List of unique account identifiers.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>List of unique account identifiers.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>Your TRN information. Instead of having full legal address, here TRN information will have jurisdiction details (for example, country code and state/region/province if applicable).</p>
    pub fn tax_registration(mut self, input: crate::types::TaxRegistrationWithJurisdiction) -> Self {
        self.tax_registration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Your TRN information. Instead of having full legal address, here TRN information will have jurisdiction details (for example, country code and state/region/province if applicable).</p>
    pub fn set_tax_registration(mut self, input: ::std::option::Option<crate::types::TaxRegistrationWithJurisdiction>) -> Self {
        self.tax_registration = input;
        self
    }
    /// <p>Your TRN information. Instead of having full legal address, here TRN information will have jurisdiction details (for example, country code and state/region/province if applicable).</p>
    pub fn get_tax_registration(&self) -> &::std::option::Option<crate::types::TaxRegistrationWithJurisdiction> {
        &self.tax_registration
    }
    /// <p>Tax inheritance information associated with the account.</p>
    pub fn tax_inheritance_details(mut self, input: crate::types::TaxInheritanceDetails) -> Self {
        self.tax_inheritance_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Tax inheritance information associated with the account.</p>
    pub fn set_tax_inheritance_details(mut self, input: ::std::option::Option<crate::types::TaxInheritanceDetails>) -> Self {
        self.tax_inheritance_details = input;
        self
    }
    /// <p>Tax inheritance information associated with the account.</p>
    pub fn get_tax_inheritance_details(&self) -> &::std::option::Option<crate::types::TaxInheritanceDetails> {
        &self.tax_inheritance_details
    }
    /// <p>The meta data information associated with the account.</p>
    pub fn account_meta_data(mut self, input: crate::types::AccountMetaData) -> Self {
        self.account_meta_data = ::std::option::Option::Some(input);
        self
    }
    /// <p>The meta data information associated with the account.</p>
    pub fn set_account_meta_data(mut self, input: ::std::option::Option<crate::types::AccountMetaData>) -> Self {
        self.account_meta_data = input;
        self
    }
    /// <p>The meta data information associated with the account.</p>
    pub fn get_account_meta_data(&self) -> &::std::option::Option<crate::types::AccountMetaData> {
        &self.account_meta_data
    }
    /// Consumes the builder and constructs a [`AccountDetails`](crate::types::AccountDetails).
    pub fn build(self) -> crate::types::AccountDetails {
        crate::types::AccountDetails {
            account_id: self.account_id,
            tax_registration: self.tax_registration,
            tax_inheritance_details: self.tax_inheritance_details,
            account_meta_data: self.account_meta_data,
        }
    }
}
impl ::std::fmt::Debug for AccountDetailsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AccountDetailsBuilder");
        formatter.field("account_id", &"*** Sensitive Data Redacted ***");
        formatter.field("tax_registration", &"*** Sensitive Data Redacted ***");
        formatter.field("tax_inheritance_details", &"*** Sensitive Data Redacted ***");
        formatter.field("account_meta_data", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
