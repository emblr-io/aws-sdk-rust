// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Additional tax information associated with your TRN in Poland.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PolandAdditionalInfo {
    /// <p>The individual tax registration number (NIP). Individual NIP is valid for other taxes excluding VAT purposes.</p>
    pub individual_registration_number: ::std::option::Option<::std::string::String>,
    /// <p>True if your business is a member of a VAT group with a NIP active for VAT purposes. Otherwise, this is false.</p>
    pub is_group_vat_enabled: ::std::option::Option<bool>,
}
impl PolandAdditionalInfo {
    /// <p>The individual tax registration number (NIP). Individual NIP is valid for other taxes excluding VAT purposes.</p>
    pub fn individual_registration_number(&self) -> ::std::option::Option<&str> {
        self.individual_registration_number.as_deref()
    }
    /// <p>True if your business is a member of a VAT group with a NIP active for VAT purposes. Otherwise, this is false.</p>
    pub fn is_group_vat_enabled(&self) -> ::std::option::Option<bool> {
        self.is_group_vat_enabled
    }
}
impl PolandAdditionalInfo {
    /// Creates a new builder-style object to manufacture [`PolandAdditionalInfo`](crate::types::PolandAdditionalInfo).
    pub fn builder() -> crate::types::builders::PolandAdditionalInfoBuilder {
        crate::types::builders::PolandAdditionalInfoBuilder::default()
    }
}

/// A builder for [`PolandAdditionalInfo`](crate::types::PolandAdditionalInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PolandAdditionalInfoBuilder {
    pub(crate) individual_registration_number: ::std::option::Option<::std::string::String>,
    pub(crate) is_group_vat_enabled: ::std::option::Option<bool>,
}
impl PolandAdditionalInfoBuilder {
    /// <p>The individual tax registration number (NIP). Individual NIP is valid for other taxes excluding VAT purposes.</p>
    pub fn individual_registration_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.individual_registration_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The individual tax registration number (NIP). Individual NIP is valid for other taxes excluding VAT purposes.</p>
    pub fn set_individual_registration_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.individual_registration_number = input;
        self
    }
    /// <p>The individual tax registration number (NIP). Individual NIP is valid for other taxes excluding VAT purposes.</p>
    pub fn get_individual_registration_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.individual_registration_number
    }
    /// <p>True if your business is a member of a VAT group with a NIP active for VAT purposes. Otherwise, this is false.</p>
    pub fn is_group_vat_enabled(mut self, input: bool) -> Self {
        self.is_group_vat_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>True if your business is a member of a VAT group with a NIP active for VAT purposes. Otherwise, this is false.</p>
    pub fn set_is_group_vat_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_group_vat_enabled = input;
        self
    }
    /// <p>True if your business is a member of a VAT group with a NIP active for VAT purposes. Otherwise, this is false.</p>
    pub fn get_is_group_vat_enabled(&self) -> &::std::option::Option<bool> {
        &self.is_group_vat_enabled
    }
    /// Consumes the builder and constructs a [`PolandAdditionalInfo`](crate::types::PolandAdditionalInfo).
    pub fn build(self) -> crate::types::PolandAdditionalInfo {
        crate::types::PolandAdditionalInfo {
            individual_registration_number: self.individual_registration_number,
            is_group_vat_enabled: self.is_group_vat_enabled,
        }
    }
}
