// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The jurisdiction details of the TRN information of the customers. This doesn't contain full legal address, and contains only country code and state/region/province.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Jurisdiction {
    /// <p>The state, region, or province associated with the country of the jurisdiction, if applicable.</p>
    pub state_or_region: ::std::option::Option<::std::string::String>,
    /// <p>The country code of the jurisdiction.</p>
    pub country_code: ::std::string::String,
}
impl Jurisdiction {
    /// <p>The state, region, or province associated with the country of the jurisdiction, if applicable.</p>
    pub fn state_or_region(&self) -> ::std::option::Option<&str> {
        self.state_or_region.as_deref()
    }
    /// <p>The country code of the jurisdiction.</p>
    pub fn country_code(&self) -> &str {
        use std::ops::Deref;
        self.country_code.deref()
    }
}
impl Jurisdiction {
    /// Creates a new builder-style object to manufacture [`Jurisdiction`](crate::types::Jurisdiction).
    pub fn builder() -> crate::types::builders::JurisdictionBuilder {
        crate::types::builders::JurisdictionBuilder::default()
    }
}

/// A builder for [`Jurisdiction`](crate::types::Jurisdiction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct JurisdictionBuilder {
    pub(crate) state_or_region: ::std::option::Option<::std::string::String>,
    pub(crate) country_code: ::std::option::Option<::std::string::String>,
}
impl JurisdictionBuilder {
    /// <p>The state, region, or province associated with the country of the jurisdiction, if applicable.</p>
    pub fn state_or_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_or_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The state, region, or province associated with the country of the jurisdiction, if applicable.</p>
    pub fn set_state_or_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_or_region = input;
        self
    }
    /// <p>The state, region, or province associated with the country of the jurisdiction, if applicable.</p>
    pub fn get_state_or_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_or_region
    }
    /// <p>The country code of the jurisdiction.</p>
    /// This field is required.
    pub fn country_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.country_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The country code of the jurisdiction.</p>
    pub fn set_country_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.country_code = input;
        self
    }
    /// <p>The country code of the jurisdiction.</p>
    pub fn get_country_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.country_code
    }
    /// Consumes the builder and constructs a [`Jurisdiction`](crate::types::Jurisdiction).
    /// This method will fail if any of the following fields are not set:
    /// - [`country_code`](crate::types::builders::JurisdictionBuilder::country_code)
    pub fn build(self) -> ::std::result::Result<crate::types::Jurisdiction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Jurisdiction {
            state_or_region: self.state_or_region,
            country_code: self.country_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "country_code",
                    "country_code was not specified but it is required when building Jurisdiction",
                )
            })?,
        })
    }
}
