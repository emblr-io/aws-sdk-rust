// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the address associated with the TRN information.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Address {
    /// <p>The first line of the address.</p>
    pub address_line1: ::std::string::String,
    /// <p>The second line of the address, if applicable.</p>
    pub address_line2: ::std::option::Option<::std::string::String>,
    /// <p>The third line of the address, if applicable. Currently, the Tax Settings API accepts the <code>addressLine3</code> parameter only for Saudi Arabia. When you specify a TRN in Saudi Arabia, you must enter the <code>addressLine3</code> and specify the building number for the address. For example, you might enter <code>1234</code>.</p>
    pub address_line3: ::std::option::Option<::std::string::String>,
    /// <p>The district or county the address is located.</p><note>
    /// <p>For addresses in Brazil, this parameter uses the name of the neighborhood. When you set a TRN in Brazil, use <code>districtOrCounty</code> for the neighborhood name.</p>
    /// </note>
    pub district_or_county: ::std::option::Option<::std::string::String>,
    /// <p>The city that the address is in.</p>
    pub city: ::std::string::String,
    /// <p>The state, region, or province that the address is located. This field is only required for Canada, India, United Arab Emirates, Romania, and Brazil (CPF). It is optional for all other countries.</p>
    /// <p>If this is required for tax settings, use the same name as shown on the <b>Tax Settings</b> page.</p>
    pub state_or_region: ::std::option::Option<::std::string::String>,
    /// <p>The postal code associated with the address.</p>
    pub postal_code: ::std::string::String,
    /// <p>The country code for the country that the address is in.</p>
    pub country_code: ::std::string::String,
}
impl Address {
    /// <p>The first line of the address.</p>
    pub fn address_line1(&self) -> &str {
        use std::ops::Deref;
        self.address_line1.deref()
    }
    /// <p>The second line of the address, if applicable.</p>
    pub fn address_line2(&self) -> ::std::option::Option<&str> {
        self.address_line2.as_deref()
    }
    /// <p>The third line of the address, if applicable. Currently, the Tax Settings API accepts the <code>addressLine3</code> parameter only for Saudi Arabia. When you specify a TRN in Saudi Arabia, you must enter the <code>addressLine3</code> and specify the building number for the address. For example, you might enter <code>1234</code>.</p>
    pub fn address_line3(&self) -> ::std::option::Option<&str> {
        self.address_line3.as_deref()
    }
    /// <p>The district or county the address is located.</p><note>
    /// <p>For addresses in Brazil, this parameter uses the name of the neighborhood. When you set a TRN in Brazil, use <code>districtOrCounty</code> for the neighborhood name.</p>
    /// </note>
    pub fn district_or_county(&self) -> ::std::option::Option<&str> {
        self.district_or_county.as_deref()
    }
    /// <p>The city that the address is in.</p>
    pub fn city(&self) -> &str {
        use std::ops::Deref;
        self.city.deref()
    }
    /// <p>The state, region, or province that the address is located. This field is only required for Canada, India, United Arab Emirates, Romania, and Brazil (CPF). It is optional for all other countries.</p>
    /// <p>If this is required for tax settings, use the same name as shown on the <b>Tax Settings</b> page.</p>
    pub fn state_or_region(&self) -> ::std::option::Option<&str> {
        self.state_or_region.as_deref()
    }
    /// <p>The postal code associated with the address.</p>
    pub fn postal_code(&self) -> &str {
        use std::ops::Deref;
        self.postal_code.deref()
    }
    /// <p>The country code for the country that the address is in.</p>
    pub fn country_code(&self) -> &str {
        use std::ops::Deref;
        self.country_code.deref()
    }
}
impl Address {
    /// Creates a new builder-style object to manufacture [`Address`](crate::types::Address).
    pub fn builder() -> crate::types::builders::AddressBuilder {
        crate::types::builders::AddressBuilder::default()
    }
}

/// A builder for [`Address`](crate::types::Address).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AddressBuilder {
    pub(crate) address_line1: ::std::option::Option<::std::string::String>,
    pub(crate) address_line2: ::std::option::Option<::std::string::String>,
    pub(crate) address_line3: ::std::option::Option<::std::string::String>,
    pub(crate) district_or_county: ::std::option::Option<::std::string::String>,
    pub(crate) city: ::std::option::Option<::std::string::String>,
    pub(crate) state_or_region: ::std::option::Option<::std::string::String>,
    pub(crate) postal_code: ::std::option::Option<::std::string::String>,
    pub(crate) country_code: ::std::option::Option<::std::string::String>,
}
impl AddressBuilder {
    /// <p>The first line of the address.</p>
    /// This field is required.
    pub fn address_line1(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address_line1 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The first line of the address.</p>
    pub fn set_address_line1(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address_line1 = input;
        self
    }
    /// <p>The first line of the address.</p>
    pub fn get_address_line1(&self) -> &::std::option::Option<::std::string::String> {
        &self.address_line1
    }
    /// <p>The second line of the address, if applicable.</p>
    pub fn address_line2(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address_line2 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The second line of the address, if applicable.</p>
    pub fn set_address_line2(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address_line2 = input;
        self
    }
    /// <p>The second line of the address, if applicable.</p>
    pub fn get_address_line2(&self) -> &::std::option::Option<::std::string::String> {
        &self.address_line2
    }
    /// <p>The third line of the address, if applicable. Currently, the Tax Settings API accepts the <code>addressLine3</code> parameter only for Saudi Arabia. When you specify a TRN in Saudi Arabia, you must enter the <code>addressLine3</code> and specify the building number for the address. For example, you might enter <code>1234</code>.</p>
    pub fn address_line3(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address_line3 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The third line of the address, if applicable. Currently, the Tax Settings API accepts the <code>addressLine3</code> parameter only for Saudi Arabia. When you specify a TRN in Saudi Arabia, you must enter the <code>addressLine3</code> and specify the building number for the address. For example, you might enter <code>1234</code>.</p>
    pub fn set_address_line3(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address_line3 = input;
        self
    }
    /// <p>The third line of the address, if applicable. Currently, the Tax Settings API accepts the <code>addressLine3</code> parameter only for Saudi Arabia. When you specify a TRN in Saudi Arabia, you must enter the <code>addressLine3</code> and specify the building number for the address. For example, you might enter <code>1234</code>.</p>
    pub fn get_address_line3(&self) -> &::std::option::Option<::std::string::String> {
        &self.address_line3
    }
    /// <p>The district or county the address is located.</p><note>
    /// <p>For addresses in Brazil, this parameter uses the name of the neighborhood. When you set a TRN in Brazil, use <code>districtOrCounty</code> for the neighborhood name.</p>
    /// </note>
    pub fn district_or_county(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.district_or_county = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The district or county the address is located.</p><note>
    /// <p>For addresses in Brazil, this parameter uses the name of the neighborhood. When you set a TRN in Brazil, use <code>districtOrCounty</code> for the neighborhood name.</p>
    /// </note>
    pub fn set_district_or_county(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.district_or_county = input;
        self
    }
    /// <p>The district or county the address is located.</p><note>
    /// <p>For addresses in Brazil, this parameter uses the name of the neighborhood. When you set a TRN in Brazil, use <code>districtOrCounty</code> for the neighborhood name.</p>
    /// </note>
    pub fn get_district_or_county(&self) -> &::std::option::Option<::std::string::String> {
        &self.district_or_county
    }
    /// <p>The city that the address is in.</p>
    /// This field is required.
    pub fn city(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.city = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The city that the address is in.</p>
    pub fn set_city(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.city = input;
        self
    }
    /// <p>The city that the address is in.</p>
    pub fn get_city(&self) -> &::std::option::Option<::std::string::String> {
        &self.city
    }
    /// <p>The state, region, or province that the address is located. This field is only required for Canada, India, United Arab Emirates, Romania, and Brazil (CPF). It is optional for all other countries.</p>
    /// <p>If this is required for tax settings, use the same name as shown on the <b>Tax Settings</b> page.</p>
    pub fn state_or_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_or_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The state, region, or province that the address is located. This field is only required for Canada, India, United Arab Emirates, Romania, and Brazil (CPF). It is optional for all other countries.</p>
    /// <p>If this is required for tax settings, use the same name as shown on the <b>Tax Settings</b> page.</p>
    pub fn set_state_or_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_or_region = input;
        self
    }
    /// <p>The state, region, or province that the address is located. This field is only required for Canada, India, United Arab Emirates, Romania, and Brazil (CPF). It is optional for all other countries.</p>
    /// <p>If this is required for tax settings, use the same name as shown on the <b>Tax Settings</b> page.</p>
    pub fn get_state_or_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_or_region
    }
    /// <p>The postal code associated with the address.</p>
    /// This field is required.
    pub fn postal_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.postal_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The postal code associated with the address.</p>
    pub fn set_postal_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.postal_code = input;
        self
    }
    /// <p>The postal code associated with the address.</p>
    pub fn get_postal_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.postal_code
    }
    /// <p>The country code for the country that the address is in.</p>
    /// This field is required.
    pub fn country_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.country_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The country code for the country that the address is in.</p>
    pub fn set_country_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.country_code = input;
        self
    }
    /// <p>The country code for the country that the address is in.</p>
    pub fn get_country_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.country_code
    }
    /// Consumes the builder and constructs a [`Address`](crate::types::Address).
    /// This method will fail if any of the following fields are not set:
    /// - [`address_line1`](crate::types::builders::AddressBuilder::address_line1)
    /// - [`city`](crate::types::builders::AddressBuilder::city)
    /// - [`postal_code`](crate::types::builders::AddressBuilder::postal_code)
    /// - [`country_code`](crate::types::builders::AddressBuilder::country_code)
    pub fn build(self) -> ::std::result::Result<crate::types::Address, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Address {
            address_line1: self.address_line1.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "address_line1",
                    "address_line1 was not specified but it is required when building Address",
                )
            })?,
            address_line2: self.address_line2,
            address_line3: self.address_line3,
            district_or_county: self.district_or_county,
            city: self.city.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "city",
                    "city was not specified but it is required when building Address",
                )
            })?,
            state_or_region: self.state_or_region,
            postal_code: self.postal_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "postal_code",
                    "postal_code was not specified but it is required when building Address",
                )
            })?,
            country_code: self.country_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "country_code",
                    "country_code was not specified but it is required when building Address",
                )
            })?,
        })
    }
}
