// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The error object for representing failures in the <code>BatchDeleteTaxRegistration</code> operation.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct BatchDeleteTaxRegistrationError {
    /// <p>The unique account identifier for the account whose tax registration couldn't be deleted during the <code>BatchDeleteTaxRegistration</code> operation.</p>
    pub account_id: ::std::string::String,
    /// <p>The error message for an individual failure in the <code>BatchDeleteTaxRegistration</code> operation.</p>
    pub message: ::std::string::String,
    /// <p>The error code for an individual failure in BatchDeleteTaxRegistration operation.</p>
    pub code: ::std::option::Option<::std::string::String>,
}
impl BatchDeleteTaxRegistrationError {
    /// <p>The unique account identifier for the account whose tax registration couldn't be deleted during the <code>BatchDeleteTaxRegistration</code> operation.</p>
    pub fn account_id(&self) -> &str {
        use std::ops::Deref;
        self.account_id.deref()
    }
    /// <p>The error message for an individual failure in the <code>BatchDeleteTaxRegistration</code> operation.</p>
    pub fn message(&self) -> &str {
        use std::ops::Deref;
        self.message.deref()
    }
    /// <p>The error code for an individual failure in BatchDeleteTaxRegistration operation.</p>
    pub fn code(&self) -> ::std::option::Option<&str> {
        self.code.as_deref()
    }
}
impl ::std::fmt::Debug for BatchDeleteTaxRegistrationError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BatchDeleteTaxRegistrationError");
        formatter.field("account_id", &self.account_id);
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.field("code", &self.code);
        formatter.finish()
    }
}
impl BatchDeleteTaxRegistrationError {
    /// Creates a new builder-style object to manufacture [`BatchDeleteTaxRegistrationError`](crate::types::BatchDeleteTaxRegistrationError).
    pub fn builder() -> crate::types::builders::BatchDeleteTaxRegistrationErrorBuilder {
        crate::types::builders::BatchDeleteTaxRegistrationErrorBuilder::default()
    }
}

/// A builder for [`BatchDeleteTaxRegistrationError`](crate::types::BatchDeleteTaxRegistrationError).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct BatchDeleteTaxRegistrationErrorBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) code: ::std::option::Option<::std::string::String>,
}
impl BatchDeleteTaxRegistrationErrorBuilder {
    /// <p>The unique account identifier for the account whose tax registration couldn't be deleted during the <code>BatchDeleteTaxRegistration</code> operation.</p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique account identifier for the account whose tax registration couldn't be deleted during the <code>BatchDeleteTaxRegistration</code> operation.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The unique account identifier for the account whose tax registration couldn't be deleted during the <code>BatchDeleteTaxRegistration</code> operation.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The error message for an individual failure in the <code>BatchDeleteTaxRegistration</code> operation.</p>
    /// This field is required.
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error message for an individual failure in the <code>BatchDeleteTaxRegistration</code> operation.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The error message for an individual failure in the <code>BatchDeleteTaxRegistration</code> operation.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>The error code for an individual failure in BatchDeleteTaxRegistration operation.</p>
    pub fn code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error code for an individual failure in BatchDeleteTaxRegistration operation.</p>
    pub fn set_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>The error code for an individual failure in BatchDeleteTaxRegistration operation.</p>
    pub fn get_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.code
    }
    /// Consumes the builder and constructs a [`BatchDeleteTaxRegistrationError`](crate::types::BatchDeleteTaxRegistrationError).
    /// This method will fail if any of the following fields are not set:
    /// - [`account_id`](crate::types::builders::BatchDeleteTaxRegistrationErrorBuilder::account_id)
    /// - [`message`](crate::types::builders::BatchDeleteTaxRegistrationErrorBuilder::message)
    pub fn build(self) -> ::std::result::Result<crate::types::BatchDeleteTaxRegistrationError, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BatchDeleteTaxRegistrationError {
            account_id: self.account_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "account_id",
                    "account_id was not specified but it is required when building BatchDeleteTaxRegistrationError",
                )
            })?,
            message: self.message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message",
                    "message was not specified but it is required when building BatchDeleteTaxRegistrationError",
                )
            })?,
            code: self.code,
        })
    }
}
impl ::std::fmt::Debug for BatchDeleteTaxRegistrationErrorBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BatchDeleteTaxRegistrationErrorBuilder");
        formatter.field("account_id", &self.account_id);
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.field("code", &self.code);
        formatter.finish()
    }
}
