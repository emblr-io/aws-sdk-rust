// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Additional tax information associated with your TRN in Italy.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ItalyAdditionalInfo {
    /// <p>Additional tax information to specify for a TRN in Italy. Use CodiceDestinatario to receive your invoices via web service (API) or FTP.</p>
    pub sdi_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The tender procedure identification code.</p>
    pub cig_number: ::std::option::Option<::std::string::String>,
    /// <p>Additional tax information to specify for a TRN in Italy. This is managed by the Interministerial Committee for Economic Planning (CIPE) which characterizes every public investment project (Individual Project Code).</p>
    pub cup_number: ::std::option::Option<::std::string::String>,
    /// <p>List of service tax codes for your TRN in Italy. You can use your customer tax code as part of a VAT Group.</p>
    pub tax_code: ::std::option::Option<::std::string::String>,
}
impl ItalyAdditionalInfo {
    /// <p>Additional tax information to specify for a TRN in Italy. Use CodiceDestinatario to receive your invoices via web service (API) or FTP.</p>
    pub fn sdi_account_id(&self) -> ::std::option::Option<&str> {
        self.sdi_account_id.as_deref()
    }
    /// <p>The tender procedure identification code.</p>
    pub fn cig_number(&self) -> ::std::option::Option<&str> {
        self.cig_number.as_deref()
    }
    /// <p>Additional tax information to specify for a TRN in Italy. This is managed by the Interministerial Committee for Economic Planning (CIPE) which characterizes every public investment project (Individual Project Code).</p>
    pub fn cup_number(&self) -> ::std::option::Option<&str> {
        self.cup_number.as_deref()
    }
    /// <p>List of service tax codes for your TRN in Italy. You can use your customer tax code as part of a VAT Group.</p>
    pub fn tax_code(&self) -> ::std::option::Option<&str> {
        self.tax_code.as_deref()
    }
}
impl ItalyAdditionalInfo {
    /// Creates a new builder-style object to manufacture [`ItalyAdditionalInfo`](crate::types::ItalyAdditionalInfo).
    pub fn builder() -> crate::types::builders::ItalyAdditionalInfoBuilder {
        crate::types::builders::ItalyAdditionalInfoBuilder::default()
    }
}

/// A builder for [`ItalyAdditionalInfo`](crate::types::ItalyAdditionalInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ItalyAdditionalInfoBuilder {
    pub(crate) sdi_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) cig_number: ::std::option::Option<::std::string::String>,
    pub(crate) cup_number: ::std::option::Option<::std::string::String>,
    pub(crate) tax_code: ::std::option::Option<::std::string::String>,
}
impl ItalyAdditionalInfoBuilder {
    /// <p>Additional tax information to specify for a TRN in Italy. Use CodiceDestinatario to receive your invoices via web service (API) or FTP.</p>
    pub fn sdi_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sdi_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Additional tax information to specify for a TRN in Italy. Use CodiceDestinatario to receive your invoices via web service (API) or FTP.</p>
    pub fn set_sdi_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sdi_account_id = input;
        self
    }
    /// <p>Additional tax information to specify for a TRN in Italy. Use CodiceDestinatario to receive your invoices via web service (API) or FTP.</p>
    pub fn get_sdi_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sdi_account_id
    }
    /// <p>The tender procedure identification code.</p>
    pub fn cig_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cig_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The tender procedure identification code.</p>
    pub fn set_cig_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cig_number = input;
        self
    }
    /// <p>The tender procedure identification code.</p>
    pub fn get_cig_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.cig_number
    }
    /// <p>Additional tax information to specify for a TRN in Italy. This is managed by the Interministerial Committee for Economic Planning (CIPE) which characterizes every public investment project (Individual Project Code).</p>
    pub fn cup_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cup_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Additional tax information to specify for a TRN in Italy. This is managed by the Interministerial Committee for Economic Planning (CIPE) which characterizes every public investment project (Individual Project Code).</p>
    pub fn set_cup_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cup_number = input;
        self
    }
    /// <p>Additional tax information to specify for a TRN in Italy. This is managed by the Interministerial Committee for Economic Planning (CIPE) which characterizes every public investment project (Individual Project Code).</p>
    pub fn get_cup_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.cup_number
    }
    /// <p>List of service tax codes for your TRN in Italy. You can use your customer tax code as part of a VAT Group.</p>
    pub fn tax_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tax_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>List of service tax codes for your TRN in Italy. You can use your customer tax code as part of a VAT Group.</p>
    pub fn set_tax_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tax_code = input;
        self
    }
    /// <p>List of service tax codes for your TRN in Italy. You can use your customer tax code as part of a VAT Group.</p>
    pub fn get_tax_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.tax_code
    }
    /// Consumes the builder and constructs a [`ItalyAdditionalInfo`](crate::types::ItalyAdditionalInfo).
    pub fn build(self) -> crate::types::ItalyAdditionalInfo {
        crate::types::ItalyAdditionalInfo {
            sdi_account_id: self.sdi_account_id,
            cig_number: self.cig_number,
            cup_number: self.cup_number,
            tax_code: self.tax_code,
        }
    }
}
