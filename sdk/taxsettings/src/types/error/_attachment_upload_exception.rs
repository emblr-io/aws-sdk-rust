// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Failed to upload the tax exemption document to Amazon Web ServicesSupport case.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AttachmentUploadException {
    #[allow(missing_docs)] // documentation missing in model
    pub message: ::std::string::String,
    pub(crate) meta: ::aws_smithy_types::error::ErrorMetadata,
}
impl ::std::fmt::Debug for AttachmentUploadException {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AttachmentUploadException");
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.field("meta", &self.meta);
        formatter.finish()
    }
}
impl AttachmentUploadException {
    /// Returns the error message.
    pub fn message(&self) -> &str {
        &self.message
    }
}
impl ::std::fmt::Display for AttachmentUploadException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        ::std::write!(f, "AttachmentUploadException")?;
        ::std::write!(f, ": {}", "*** Sensitive Data Redacted ***")?;
        Ok(())
    }
}
impl ::std::error::Error for AttachmentUploadException {}
impl ::aws_types::request_id::RequestId for crate::types::error::AttachmentUploadException {
    fn request_id(&self) -> Option<&str> {
        use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for AttachmentUploadException {
    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}
impl AttachmentUploadException {
    /// Creates a new builder-style object to manufacture [`AttachmentUploadException`](crate::types::error::AttachmentUploadException).
    pub fn builder() -> crate::types::error::builders::AttachmentUploadExceptionBuilder {
        crate::types::error::builders::AttachmentUploadExceptionBuilder::default()
    }
}

/// A builder for [`AttachmentUploadException`](crate::types::error::AttachmentUploadException).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AttachmentUploadExceptionBuilder {
    pub(crate) message: ::std::option::Option<::std::string::String>,
    meta: std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
}
impl AttachmentUploadExceptionBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Sets error metadata
    pub fn meta(mut self, meta: ::aws_smithy_types::error::ErrorMetadata) -> Self {
        self.meta = Some(meta);
        self
    }

    /// Sets error metadata
    pub fn set_meta(&mut self, meta: std::option::Option<::aws_smithy_types::error::ErrorMetadata>) -> &mut Self {
        self.meta = meta;
        self
    }
    /// Consumes the builder and constructs a [`AttachmentUploadException`](crate::types::error::AttachmentUploadException).
    /// This method will fail if any of the following fields are not set:
    /// - [`message`](crate::types::error::builders::AttachmentUploadExceptionBuilder::message)
    pub fn build(self) -> ::std::result::Result<crate::types::error::AttachmentUploadException, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::error::AttachmentUploadException {
            message: self.message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message",
                    "message was not specified but it is required when building AttachmentUploadException",
                )
            })?,
            meta: self.meta.unwrap_or_default(),
        })
    }
}
impl ::std::fmt::Debug for AttachmentUploadExceptionBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AttachmentUploadExceptionBuilder");
        formatter.field("message", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
