// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The tax exemption type.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TaxExemptionType {
    /// <p>The tax exemption's type display name.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The tax exemption's type description.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The tax exemption's applicable jurisdictions.</p>
    pub applicable_jurisdictions: ::std::option::Option<::std::vec::Vec<crate::types::Authority>>,
}
impl TaxExemptionType {
    /// <p>The tax exemption's type display name.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The tax exemption's type description.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The tax exemption's applicable jurisdictions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.applicable_jurisdictions.is_none()`.
    pub fn applicable_jurisdictions(&self) -> &[crate::types::Authority] {
        self.applicable_jurisdictions.as_deref().unwrap_or_default()
    }
}
impl TaxExemptionType {
    /// Creates a new builder-style object to manufacture [`TaxExemptionType`](crate::types::TaxExemptionType).
    pub fn builder() -> crate::types::builders::TaxExemptionTypeBuilder {
        crate::types::builders::TaxExemptionTypeBuilder::default()
    }
}

/// A builder for [`TaxExemptionType`](crate::types::TaxExemptionType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TaxExemptionTypeBuilder {
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) applicable_jurisdictions: ::std::option::Option<::std::vec::Vec<crate::types::Authority>>,
}
impl TaxExemptionTypeBuilder {
    /// <p>The tax exemption's type display name.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The tax exemption's type display name.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The tax exemption's type display name.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The tax exemption's type description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The tax exemption's type description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The tax exemption's type description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `applicable_jurisdictions`.
    ///
    /// To override the contents of this collection use [`set_applicable_jurisdictions`](Self::set_applicable_jurisdictions).
    ///
    /// <p>The tax exemption's applicable jurisdictions.</p>
    pub fn applicable_jurisdictions(mut self, input: crate::types::Authority) -> Self {
        let mut v = self.applicable_jurisdictions.unwrap_or_default();
        v.push(input);
        self.applicable_jurisdictions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tax exemption's applicable jurisdictions.</p>
    pub fn set_applicable_jurisdictions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Authority>>) -> Self {
        self.applicable_jurisdictions = input;
        self
    }
    /// <p>The tax exemption's applicable jurisdictions.</p>
    pub fn get_applicable_jurisdictions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Authority>> {
        &self.applicable_jurisdictions
    }
    /// Consumes the builder and constructs a [`TaxExemptionType`](crate::types::TaxExemptionType).
    pub fn build(self) -> crate::types::TaxExemptionType {
        crate::types::TaxExemptionType {
            display_name: self.display_name,
            description: self.description,
            applicable_jurisdictions: self.applicable_jurisdictions,
        }
    }
}
