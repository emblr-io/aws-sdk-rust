// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Tax registration document information.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TaxRegistrationDocument {
    /// <p>The Amazon S3 location where your tax registration document is stored.</p>
    pub s3_location: ::std::option::Option<crate::types::SourceS3Location>,
    /// <p>The tax registration document.</p>
    pub file: ::std::option::Option<crate::types::TaxRegistrationDocFile>,
}
impl TaxRegistrationDocument {
    /// <p>The Amazon S3 location where your tax registration document is stored.</p>
    pub fn s3_location(&self) -> ::std::option::Option<&crate::types::SourceS3Location> {
        self.s3_location.as_ref()
    }
    /// <p>The tax registration document.</p>
    pub fn file(&self) -> ::std::option::Option<&crate::types::TaxRegistrationDocFile> {
        self.file.as_ref()
    }
}
impl TaxRegistrationDocument {
    /// Creates a new builder-style object to manufacture [`TaxRegistrationDocument`](crate::types::TaxRegistrationDocument).
    pub fn builder() -> crate::types::builders::TaxRegistrationDocumentBuilder {
        crate::types::builders::TaxRegistrationDocumentBuilder::default()
    }
}

/// A builder for [`TaxRegistrationDocument`](crate::types::TaxRegistrationDocument).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TaxRegistrationDocumentBuilder {
    pub(crate) s3_location: ::std::option::Option<crate::types::SourceS3Location>,
    pub(crate) file: ::std::option::Option<crate::types::TaxRegistrationDocFile>,
}
impl TaxRegistrationDocumentBuilder {
    /// <p>The Amazon S3 location where your tax registration document is stored.</p>
    pub fn s3_location(mut self, input: crate::types::SourceS3Location) -> Self {
        self.s3_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon S3 location where your tax registration document is stored.</p>
    pub fn set_s3_location(mut self, input: ::std::option::Option<crate::types::SourceS3Location>) -> Self {
        self.s3_location = input;
        self
    }
    /// <p>The Amazon S3 location where your tax registration document is stored.</p>
    pub fn get_s3_location(&self) -> &::std::option::Option<crate::types::SourceS3Location> {
        &self.s3_location
    }
    /// <p>The tax registration document.</p>
    pub fn file(mut self, input: crate::types::TaxRegistrationDocFile) -> Self {
        self.file = ::std::option::Option::Some(input);
        self
    }
    /// <p>The tax registration document.</p>
    pub fn set_file(mut self, input: ::std::option::Option<crate::types::TaxRegistrationDocFile>) -> Self {
        self.file = input;
        self
    }
    /// <p>The tax registration document.</p>
    pub fn get_file(&self) -> &::std::option::Option<crate::types::TaxRegistrationDocFile> {
        &self.file
    }
    /// Consumes the builder and constructs a [`TaxRegistrationDocument`](crate::types::TaxRegistrationDocument).
    pub fn build(self) -> crate::types::TaxRegistrationDocument {
        crate::types::TaxRegistrationDocument {
            s3_location: self.s3_location,
            file: self.file,
        }
    }
}
