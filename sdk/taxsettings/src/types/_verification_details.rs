// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Required information to verify your TRN.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VerificationDetails {
    /// <p>Date of birth to verify your submitted TRN. Use the <code>YYYY-MM-DD</code> format.</p>
    pub date_of_birth: ::std::option::Option<::std::string::String>,
    /// <p>The tax registration document, which is required for specific countries such as Bangladesh, Kenya, South Korea and Spain.</p>
    pub tax_registration_documents: ::std::option::Option<::std::vec::Vec<crate::types::TaxRegistrationDocument>>,
}
impl VerificationDetails {
    /// <p>Date of birth to verify your submitted TRN. Use the <code>YYYY-MM-DD</code> format.</p>
    pub fn date_of_birth(&self) -> ::std::option::Option<&str> {
        self.date_of_birth.as_deref()
    }
    /// <p>The tax registration document, which is required for specific countries such as Bangladesh, Kenya, South Korea and Spain.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tax_registration_documents.is_none()`.
    pub fn tax_registration_documents(&self) -> &[crate::types::TaxRegistrationDocument] {
        self.tax_registration_documents.as_deref().unwrap_or_default()
    }
}
impl VerificationDetails {
    /// Creates a new builder-style object to manufacture [`VerificationDetails`](crate::types::VerificationDetails).
    pub fn builder() -> crate::types::builders::VerificationDetailsBuilder {
        crate::types::builders::VerificationDetailsBuilder::default()
    }
}

/// A builder for [`VerificationDetails`](crate::types::VerificationDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VerificationDetailsBuilder {
    pub(crate) date_of_birth: ::std::option::Option<::std::string::String>,
    pub(crate) tax_registration_documents: ::std::option::Option<::std::vec::Vec<crate::types::TaxRegistrationDocument>>,
}
impl VerificationDetailsBuilder {
    /// <p>Date of birth to verify your submitted TRN. Use the <code>YYYY-MM-DD</code> format.</p>
    pub fn date_of_birth(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.date_of_birth = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Date of birth to verify your submitted TRN. Use the <code>YYYY-MM-DD</code> format.</p>
    pub fn set_date_of_birth(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.date_of_birth = input;
        self
    }
    /// <p>Date of birth to verify your submitted TRN. Use the <code>YYYY-MM-DD</code> format.</p>
    pub fn get_date_of_birth(&self) -> &::std::option::Option<::std::string::String> {
        &self.date_of_birth
    }
    /// Appends an item to `tax_registration_documents`.
    ///
    /// To override the contents of this collection use [`set_tax_registration_documents`](Self::set_tax_registration_documents).
    ///
    /// <p>The tax registration document, which is required for specific countries such as Bangladesh, Kenya, South Korea and Spain.</p>
    pub fn tax_registration_documents(mut self, input: crate::types::TaxRegistrationDocument) -> Self {
        let mut v = self.tax_registration_documents.unwrap_or_default();
        v.push(input);
        self.tax_registration_documents = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tax registration document, which is required for specific countries such as Bangladesh, Kenya, South Korea and Spain.</p>
    pub fn set_tax_registration_documents(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TaxRegistrationDocument>>) -> Self {
        self.tax_registration_documents = input;
        self
    }
    /// <p>The tax registration document, which is required for specific countries such as Bangladesh, Kenya, South Korea and Spain.</p>
    pub fn get_tax_registration_documents(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TaxRegistrationDocument>> {
        &self.tax_registration_documents
    }
    /// Consumes the builder and constructs a [`VerificationDetails`](crate::types::VerificationDetails).
    pub fn build(self) -> crate::types::VerificationDetails {
        crate::types::VerificationDetails {
            date_of_birth: self.date_of_birth,
            tax_registration_documents: self.tax_registration_documents,
        }
    }
}
