// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Additional tax information to specify for a TRN in Romania.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RomaniaAdditionalInfo {
    /// <p>The tax registration number type. The value can be <code>TaxRegistrationNumber</code> or <code>LocalRegistrationNumber</code>.</p>
    pub tax_registration_number_type: crate::types::TaxRegistrationNumberType,
}
impl RomaniaAdditionalInfo {
    /// <p>The tax registration number type. The value can be <code>TaxRegistrationNumber</code> or <code>LocalRegistrationNumber</code>.</p>
    pub fn tax_registration_number_type(&self) -> &crate::types::TaxRegistrationNumberType {
        &self.tax_registration_number_type
    }
}
impl RomaniaAdditionalInfo {
    /// Creates a new builder-style object to manufacture [`RomaniaAdditionalInfo`](crate::types::RomaniaAdditionalInfo).
    pub fn builder() -> crate::types::builders::RomaniaAdditionalInfoBuilder {
        crate::types::builders::RomaniaAdditionalInfoBuilder::default()
    }
}

/// A builder for [`RomaniaAdditionalInfo`](crate::types::RomaniaAdditionalInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RomaniaAdditionalInfoBuilder {
    pub(crate) tax_registration_number_type: ::std::option::Option<crate::types::TaxRegistrationNumberType>,
}
impl RomaniaAdditionalInfoBuilder {
    /// <p>The tax registration number type. The value can be <code>TaxRegistrationNumber</code> or <code>LocalRegistrationNumber</code>.</p>
    /// This field is required.
    pub fn tax_registration_number_type(mut self, input: crate::types::TaxRegistrationNumberType) -> Self {
        self.tax_registration_number_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The tax registration number type. The value can be <code>TaxRegistrationNumber</code> or <code>LocalRegistrationNumber</code>.</p>
    pub fn set_tax_registration_number_type(mut self, input: ::std::option::Option<crate::types::TaxRegistrationNumberType>) -> Self {
        self.tax_registration_number_type = input;
        self
    }
    /// <p>The tax registration number type. The value can be <code>TaxRegistrationNumber</code> or <code>LocalRegistrationNumber</code>.</p>
    pub fn get_tax_registration_number_type(&self) -> &::std::option::Option<crate::types::TaxRegistrationNumberType> {
        &self.tax_registration_number_type
    }
    /// Consumes the builder and constructs a [`RomaniaAdditionalInfo`](crate::types::RomaniaAdditionalInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`tax_registration_number_type`](crate::types::builders::RomaniaAdditionalInfoBuilder::tax_registration_number_type)
    pub fn build(self) -> ::std::result::Result<crate::types::RomaniaAdditionalInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RomaniaAdditionalInfo {
            tax_registration_number_type: self.tax_registration_number_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "tax_registration_number_type",
                    "tax_registration_number_type was not specified but it is required when building RomaniaAdditionalInfo",
                )
            })?,
        })
    }
}
