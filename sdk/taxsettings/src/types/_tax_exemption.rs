// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The tax exemption.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TaxExemption {
    /// <p>The address domain associate with tax exemption.</p>
    pub authority: ::std::option::Option<crate::types::Authority>,
    /// <p>The tax exemption type.</p>
    pub tax_exemption_type: ::std::option::Option<crate::types::TaxExemptionType>,
    /// <p>The tax exemption effective date.</p>
    pub effective_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The tax exemption expiration date.</p>
    pub expiration_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The tax exemption recording time in the <code>TaxSettings</code> system.</p>
    pub system_effective_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The tax exemption status.</p>
    pub status: ::std::option::Option<crate::types::EntityExemptionAccountStatus>,
}
impl TaxExemption {
    /// <p>The address domain associate with tax exemption.</p>
    pub fn authority(&self) -> ::std::option::Option<&crate::types::Authority> {
        self.authority.as_ref()
    }
    /// <p>The tax exemption type.</p>
    pub fn tax_exemption_type(&self) -> ::std::option::Option<&crate::types::TaxExemptionType> {
        self.tax_exemption_type.as_ref()
    }
    /// <p>The tax exemption effective date.</p>
    pub fn effective_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.effective_date.as_ref()
    }
    /// <p>The tax exemption expiration date.</p>
    pub fn expiration_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.expiration_date.as_ref()
    }
    /// <p>The tax exemption recording time in the <code>TaxSettings</code> system.</p>
    pub fn system_effective_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.system_effective_date.as_ref()
    }
    /// <p>The tax exemption status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::EntityExemptionAccountStatus> {
        self.status.as_ref()
    }
}
impl TaxExemption {
    /// Creates a new builder-style object to manufacture [`TaxExemption`](crate::types::TaxExemption).
    pub fn builder() -> crate::types::builders::TaxExemptionBuilder {
        crate::types::builders::TaxExemptionBuilder::default()
    }
}

/// A builder for [`TaxExemption`](crate::types::TaxExemption).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TaxExemptionBuilder {
    pub(crate) authority: ::std::option::Option<crate::types::Authority>,
    pub(crate) tax_exemption_type: ::std::option::Option<crate::types::TaxExemptionType>,
    pub(crate) effective_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) expiration_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) system_effective_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::EntityExemptionAccountStatus>,
}
impl TaxExemptionBuilder {
    /// <p>The address domain associate with tax exemption.</p>
    /// This field is required.
    pub fn authority(mut self, input: crate::types::Authority) -> Self {
        self.authority = ::std::option::Option::Some(input);
        self
    }
    /// <p>The address domain associate with tax exemption.</p>
    pub fn set_authority(mut self, input: ::std::option::Option<crate::types::Authority>) -> Self {
        self.authority = input;
        self
    }
    /// <p>The address domain associate with tax exemption.</p>
    pub fn get_authority(&self) -> &::std::option::Option<crate::types::Authority> {
        &self.authority
    }
    /// <p>The tax exemption type.</p>
    /// This field is required.
    pub fn tax_exemption_type(mut self, input: crate::types::TaxExemptionType) -> Self {
        self.tax_exemption_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The tax exemption type.</p>
    pub fn set_tax_exemption_type(mut self, input: ::std::option::Option<crate::types::TaxExemptionType>) -> Self {
        self.tax_exemption_type = input;
        self
    }
    /// <p>The tax exemption type.</p>
    pub fn get_tax_exemption_type(&self) -> &::std::option::Option<crate::types::TaxExemptionType> {
        &self.tax_exemption_type
    }
    /// <p>The tax exemption effective date.</p>
    pub fn effective_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.effective_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The tax exemption effective date.</p>
    pub fn set_effective_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.effective_date = input;
        self
    }
    /// <p>The tax exemption effective date.</p>
    pub fn get_effective_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.effective_date
    }
    /// <p>The tax exemption expiration date.</p>
    pub fn expiration_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expiration_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The tax exemption expiration date.</p>
    pub fn set_expiration_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expiration_date = input;
        self
    }
    /// <p>The tax exemption expiration date.</p>
    pub fn get_expiration_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expiration_date
    }
    /// <p>The tax exemption recording time in the <code>TaxSettings</code> system.</p>
    pub fn system_effective_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.system_effective_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The tax exemption recording time in the <code>TaxSettings</code> system.</p>
    pub fn set_system_effective_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.system_effective_date = input;
        self
    }
    /// <p>The tax exemption recording time in the <code>TaxSettings</code> system.</p>
    pub fn get_system_effective_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.system_effective_date
    }
    /// <p>The tax exemption status.</p>
    pub fn status(mut self, input: crate::types::EntityExemptionAccountStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The tax exemption status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::EntityExemptionAccountStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The tax exemption status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::EntityExemptionAccountStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`TaxExemption`](crate::types::TaxExemption).
    pub fn build(self) -> crate::types::TaxExemption {
        crate::types::TaxExemption {
            authority: self.authority,
            tax_exemption_type: self.tax_exemption_type,
            effective_date: self.effective_date,
            expiration_date: self.expiration_date,
            system_effective_date: self.system_effective_date,
            status: self.status,
        }
    }
}
