// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The TRN information you provide when you add a new TRN, or update.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TaxRegistrationEntry {
    /// <p>Your tax registration unique identifier.</p>
    pub registration_id: ::std::string::String,
    /// <p>Your tax registration type. This can be either <code>VAT</code> or <code>GST</code>.</p>
    pub registration_type: crate::types::TaxRegistrationType,
    /// <p>The legal name associated with your TRN.</p><note>
    /// <p>If you're setting a TRN in Brazil, you don't need to specify the legal name. For TRNs in other countries, you must specify the legal name.</p>
    /// </note>
    pub legal_name: ::std::option::Option<::std::string::String>,
    /// <p>The legal address associated with your TRN.</p><note>
    /// <p>If you're setting a TRN in Brazil for the CNPJ tax type, you don't need to specify the legal address.</p>
    /// <p>For TRNs in other countries and for CPF tax types Brazil, you must specify the legal address.</p>
    /// </note>
    pub legal_address: ::std::option::Option<crate::types::Address>,
    /// <p>The industry that describes your business. For business-to-business (B2B) customers, specify Business. For business-to-consumer (B2C) customers, specify Individual. For business-to-government (B2G), specify Government.Note that certain values may not applicable for the request country. Please refer to country specific information in API document.</p>
    pub sector: ::std::option::Option<crate::types::Sector>,
    /// <p>Additional tax information associated with your TRN. You only need to specify this parameter if Amazon Web Services collects any additional information for your country within <code>AdditionalInfoRequest</code>.</p>
    pub additional_tax_information: ::std::option::Option<crate::types::AdditionalInfoRequest>,
    /// <p>Additional details needed to verify your TRN information in Brazil. You only need to specify this parameter when you set a TRN in Brazil that is the CPF tax type.</p><note>
    /// <p>Don't specify this parameter to set a TRN in Brazil of the CNPJ tax type or to set a TRN for another country.</p>
    /// </note>
    pub verification_details: ::std::option::Option<crate::types::VerificationDetails>,
    /// <p>The email address to receive VAT invoices.</p>
    pub certified_email_id: ::std::option::Option<::std::string::String>,
}
impl TaxRegistrationEntry {
    /// <p>Your tax registration unique identifier.</p>
    pub fn registration_id(&self) -> &str {
        use std::ops::Deref;
        self.registration_id.deref()
    }
    /// <p>Your tax registration type. This can be either <code>VAT</code> or <code>GST</code>.</p>
    pub fn registration_type(&self) -> &crate::types::TaxRegistrationType {
        &self.registration_type
    }
    /// <p>The legal name associated with your TRN.</p><note>
    /// <p>If you're setting a TRN in Brazil, you don't need to specify the legal name. For TRNs in other countries, you must specify the legal name.</p>
    /// </note>
    pub fn legal_name(&self) -> ::std::option::Option<&str> {
        self.legal_name.as_deref()
    }
    /// <p>The legal address associated with your TRN.</p><note>
    /// <p>If you're setting a TRN in Brazil for the CNPJ tax type, you don't need to specify the legal address.</p>
    /// <p>For TRNs in other countries and for CPF tax types Brazil, you must specify the legal address.</p>
    /// </note>
    pub fn legal_address(&self) -> ::std::option::Option<&crate::types::Address> {
        self.legal_address.as_ref()
    }
    /// <p>The industry that describes your business. For business-to-business (B2B) customers, specify Business. For business-to-consumer (B2C) customers, specify Individual. For business-to-government (B2G), specify Government.Note that certain values may not applicable for the request country. Please refer to country specific information in API document.</p>
    pub fn sector(&self) -> ::std::option::Option<&crate::types::Sector> {
        self.sector.as_ref()
    }
    /// <p>Additional tax information associated with your TRN. You only need to specify this parameter if Amazon Web Services collects any additional information for your country within <code>AdditionalInfoRequest</code>.</p>
    pub fn additional_tax_information(&self) -> ::std::option::Option<&crate::types::AdditionalInfoRequest> {
        self.additional_tax_information.as_ref()
    }
    /// <p>Additional details needed to verify your TRN information in Brazil. You only need to specify this parameter when you set a TRN in Brazil that is the CPF tax type.</p><note>
    /// <p>Don't specify this parameter to set a TRN in Brazil of the CNPJ tax type or to set a TRN for another country.</p>
    /// </note>
    pub fn verification_details(&self) -> ::std::option::Option<&crate::types::VerificationDetails> {
        self.verification_details.as_ref()
    }
    /// <p>The email address to receive VAT invoices.</p>
    pub fn certified_email_id(&self) -> ::std::option::Option<&str> {
        self.certified_email_id.as_deref()
    }
}
impl ::std::fmt::Debug for TaxRegistrationEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TaxRegistrationEntry");
        formatter.field("registration_id", &"*** Sensitive Data Redacted ***");
        formatter.field("registration_type", &"*** Sensitive Data Redacted ***");
        formatter.field("legal_name", &"*** Sensitive Data Redacted ***");
        formatter.field("legal_address", &"*** Sensitive Data Redacted ***");
        formatter.field("sector", &"*** Sensitive Data Redacted ***");
        formatter.field("additional_tax_information", &"*** Sensitive Data Redacted ***");
        formatter.field("verification_details", &"*** Sensitive Data Redacted ***");
        formatter.field("certified_email_id", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl TaxRegistrationEntry {
    /// Creates a new builder-style object to manufacture [`TaxRegistrationEntry`](crate::types::TaxRegistrationEntry).
    pub fn builder() -> crate::types::builders::TaxRegistrationEntryBuilder {
        crate::types::builders::TaxRegistrationEntryBuilder::default()
    }
}

/// A builder for [`TaxRegistrationEntry`](crate::types::TaxRegistrationEntry).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct TaxRegistrationEntryBuilder {
    pub(crate) registration_id: ::std::option::Option<::std::string::String>,
    pub(crate) registration_type: ::std::option::Option<crate::types::TaxRegistrationType>,
    pub(crate) legal_name: ::std::option::Option<::std::string::String>,
    pub(crate) legal_address: ::std::option::Option<crate::types::Address>,
    pub(crate) sector: ::std::option::Option<crate::types::Sector>,
    pub(crate) additional_tax_information: ::std::option::Option<crate::types::AdditionalInfoRequest>,
    pub(crate) verification_details: ::std::option::Option<crate::types::VerificationDetails>,
    pub(crate) certified_email_id: ::std::option::Option<::std::string::String>,
}
impl TaxRegistrationEntryBuilder {
    /// <p>Your tax registration unique identifier.</p>
    /// This field is required.
    pub fn registration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registration_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Your tax registration unique identifier.</p>
    pub fn set_registration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registration_id = input;
        self
    }
    /// <p>Your tax registration unique identifier.</p>
    pub fn get_registration_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.registration_id
    }
    /// <p>Your tax registration type. This can be either <code>VAT</code> or <code>GST</code>.</p>
    /// This field is required.
    pub fn registration_type(mut self, input: crate::types::TaxRegistrationType) -> Self {
        self.registration_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Your tax registration type. This can be either <code>VAT</code> or <code>GST</code>.</p>
    pub fn set_registration_type(mut self, input: ::std::option::Option<crate::types::TaxRegistrationType>) -> Self {
        self.registration_type = input;
        self
    }
    /// <p>Your tax registration type. This can be either <code>VAT</code> or <code>GST</code>.</p>
    pub fn get_registration_type(&self) -> &::std::option::Option<crate::types::TaxRegistrationType> {
        &self.registration_type
    }
    /// <p>The legal name associated with your TRN.</p><note>
    /// <p>If you're setting a TRN in Brazil, you don't need to specify the legal name. For TRNs in other countries, you must specify the legal name.</p>
    /// </note>
    pub fn legal_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.legal_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The legal name associated with your TRN.</p><note>
    /// <p>If you're setting a TRN in Brazil, you don't need to specify the legal name. For TRNs in other countries, you must specify the legal name.</p>
    /// </note>
    pub fn set_legal_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.legal_name = input;
        self
    }
    /// <p>The legal name associated with your TRN.</p><note>
    /// <p>If you're setting a TRN in Brazil, you don't need to specify the legal name. For TRNs in other countries, you must specify the legal name.</p>
    /// </note>
    pub fn get_legal_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.legal_name
    }
    /// <p>The legal address associated with your TRN.</p><note>
    /// <p>If you're setting a TRN in Brazil for the CNPJ tax type, you don't need to specify the legal address.</p>
    /// <p>For TRNs in other countries and for CPF tax types Brazil, you must specify the legal address.</p>
    /// </note>
    pub fn legal_address(mut self, input: crate::types::Address) -> Self {
        self.legal_address = ::std::option::Option::Some(input);
        self
    }
    /// <p>The legal address associated with your TRN.</p><note>
    /// <p>If you're setting a TRN in Brazil for the CNPJ tax type, you don't need to specify the legal address.</p>
    /// <p>For TRNs in other countries and for CPF tax types Brazil, you must specify the legal address.</p>
    /// </note>
    pub fn set_legal_address(mut self, input: ::std::option::Option<crate::types::Address>) -> Self {
        self.legal_address = input;
        self
    }
    /// <p>The legal address associated with your TRN.</p><note>
    /// <p>If you're setting a TRN in Brazil for the CNPJ tax type, you don't need to specify the legal address.</p>
    /// <p>For TRNs in other countries and for CPF tax types Brazil, you must specify the legal address.</p>
    /// </note>
    pub fn get_legal_address(&self) -> &::std::option::Option<crate::types::Address> {
        &self.legal_address
    }
    /// <p>The industry that describes your business. For business-to-business (B2B) customers, specify Business. For business-to-consumer (B2C) customers, specify Individual. For business-to-government (B2G), specify Government.Note that certain values may not applicable for the request country. Please refer to country specific information in API document.</p>
    pub fn sector(mut self, input: crate::types::Sector) -> Self {
        self.sector = ::std::option::Option::Some(input);
        self
    }
    /// <p>The industry that describes your business. For business-to-business (B2B) customers, specify Business. For business-to-consumer (B2C) customers, specify Individual. For business-to-government (B2G), specify Government.Note that certain values may not applicable for the request country. Please refer to country specific information in API document.</p>
    pub fn set_sector(mut self, input: ::std::option::Option<crate::types::Sector>) -> Self {
        self.sector = input;
        self
    }
    /// <p>The industry that describes your business. For business-to-business (B2B) customers, specify Business. For business-to-consumer (B2C) customers, specify Individual. For business-to-government (B2G), specify Government.Note that certain values may not applicable for the request country. Please refer to country specific information in API document.</p>
    pub fn get_sector(&self) -> &::std::option::Option<crate::types::Sector> {
        &self.sector
    }
    /// <p>Additional tax information associated with your TRN. You only need to specify this parameter if Amazon Web Services collects any additional information for your country within <code>AdditionalInfoRequest</code>.</p>
    pub fn additional_tax_information(mut self, input: crate::types::AdditionalInfoRequest) -> Self {
        self.additional_tax_information = ::std::option::Option::Some(input);
        self
    }
    /// <p>Additional tax information associated with your TRN. You only need to specify this parameter if Amazon Web Services collects any additional information for your country within <code>AdditionalInfoRequest</code>.</p>
    pub fn set_additional_tax_information(mut self, input: ::std::option::Option<crate::types::AdditionalInfoRequest>) -> Self {
        self.additional_tax_information = input;
        self
    }
    /// <p>Additional tax information associated with your TRN. You only need to specify this parameter if Amazon Web Services collects any additional information for your country within <code>AdditionalInfoRequest</code>.</p>
    pub fn get_additional_tax_information(&self) -> &::std::option::Option<crate::types::AdditionalInfoRequest> {
        &self.additional_tax_information
    }
    /// <p>Additional details needed to verify your TRN information in Brazil. You only need to specify this parameter when you set a TRN in Brazil that is the CPF tax type.</p><note>
    /// <p>Don't specify this parameter to set a TRN in Brazil of the CNPJ tax type or to set a TRN for another country.</p>
    /// </note>
    pub fn verification_details(mut self, input: crate::types::VerificationDetails) -> Self {
        self.verification_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Additional details needed to verify your TRN information in Brazil. You only need to specify this parameter when you set a TRN in Brazil that is the CPF tax type.</p><note>
    /// <p>Don't specify this parameter to set a TRN in Brazil of the CNPJ tax type or to set a TRN for another country.</p>
    /// </note>
    pub fn set_verification_details(mut self, input: ::std::option::Option<crate::types::VerificationDetails>) -> Self {
        self.verification_details = input;
        self
    }
    /// <p>Additional details needed to verify your TRN information in Brazil. You only need to specify this parameter when you set a TRN in Brazil that is the CPF tax type.</p><note>
    /// <p>Don't specify this parameter to set a TRN in Brazil of the CNPJ tax type or to set a TRN for another country.</p>
    /// </note>
    pub fn get_verification_details(&self) -> &::std::option::Option<crate::types::VerificationDetails> {
        &self.verification_details
    }
    /// <p>The email address to receive VAT invoices.</p>
    pub fn certified_email_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certified_email_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address to receive VAT invoices.</p>
    pub fn set_certified_email_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certified_email_id = input;
        self
    }
    /// <p>The email address to receive VAT invoices.</p>
    pub fn get_certified_email_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.certified_email_id
    }
    /// Consumes the builder and constructs a [`TaxRegistrationEntry`](crate::types::TaxRegistrationEntry).
    /// This method will fail if any of the following fields are not set:
    /// - [`registration_id`](crate::types::builders::TaxRegistrationEntryBuilder::registration_id)
    /// - [`registration_type`](crate::types::builders::TaxRegistrationEntryBuilder::registration_type)
    pub fn build(self) -> ::std::result::Result<crate::types::TaxRegistrationEntry, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TaxRegistrationEntry {
            registration_id: self.registration_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "registration_id",
                    "registration_id was not specified but it is required when building TaxRegistrationEntry",
                )
            })?,
            registration_type: self.registration_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "registration_type",
                    "registration_type was not specified but it is required when building TaxRegistrationEntry",
                )
            })?,
            legal_name: self.legal_name,
            legal_address: self.legal_address,
            sector: self.sector,
            additional_tax_information: self.additional_tax_information,
            verification_details: self.verification_details,
            certified_email_id: self.certified_email_id,
        })
    }
}
impl ::std::fmt::Debug for TaxRegistrationEntryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TaxRegistrationEntryBuilder");
        formatter.field("registration_id", &"*** Sensitive Data Redacted ***");
        formatter.field("registration_type", &"*** Sensitive Data Redacted ***");
        formatter.field("legal_name", &"*** Sensitive Data Redacted ***");
        formatter.field("legal_address", &"*** Sensitive Data Redacted ***");
        formatter.field("sector", &"*** Sensitive Data Redacted ***");
        formatter.field("additional_tax_information", &"*** Sensitive Data Redacted ***");
        formatter.field("verification_details", &"*** Sensitive Data Redacted ***");
        formatter.field("certified_email_id", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
