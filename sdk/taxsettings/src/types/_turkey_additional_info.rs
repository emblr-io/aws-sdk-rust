// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Additional tax information associated with your TRN in Turkey.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TurkeyAdditionalInfo {
    /// <p>The tax office where you're registered. You can enter this information as a string. The Tax Settings API will add this information to your invoice. This parameter is required for business-to-business (B2B) and business-to-government customers. It's not required for business-to-consumer (B2C) customers.</p>
    pub tax_office: ::std::option::Option<::std::string::String>,
    /// <p>The Registered Electronic Mail (REM) that is used to send notarized communication. This parameter is optional for business-to-business (B2B) and business-to-government (B2G) customers. It's not required for business-to-consumer (B2C) customers.</p>
    pub kep_email_id: ::std::option::Option<::std::string::String>,
    /// <p>Secondary tax ID (“harcama birimi VKN”si”). If one isn't provided, we will use your VKN as the secondary ID.</p>
    pub secondary_tax_id: ::std::option::Option<::std::string::String>,
    /// <p>The industry information that tells the Tax Settings API if you're subject to additional withholding taxes. This information required for business-to-business (B2B) customers. This information is conditionally mandatory for B2B customers who are subject to KDV tax.</p>
    pub industries: ::std::option::Option<crate::types::Industries>,
}
impl TurkeyAdditionalInfo {
    /// <p>The tax office where you're registered. You can enter this information as a string. The Tax Settings API will add this information to your invoice. This parameter is required for business-to-business (B2B) and business-to-government customers. It's not required for business-to-consumer (B2C) customers.</p>
    pub fn tax_office(&self) -> ::std::option::Option<&str> {
        self.tax_office.as_deref()
    }
    /// <p>The Registered Electronic Mail (REM) that is used to send notarized communication. This parameter is optional for business-to-business (B2B) and business-to-government (B2G) customers. It's not required for business-to-consumer (B2C) customers.</p>
    pub fn kep_email_id(&self) -> ::std::option::Option<&str> {
        self.kep_email_id.as_deref()
    }
    /// <p>Secondary tax ID (“harcama birimi VKN”si”). If one isn't provided, we will use your VKN as the secondary ID.</p>
    pub fn secondary_tax_id(&self) -> ::std::option::Option<&str> {
        self.secondary_tax_id.as_deref()
    }
    /// <p>The industry information that tells the Tax Settings API if you're subject to additional withholding taxes. This information required for business-to-business (B2B) customers. This information is conditionally mandatory for B2B customers who are subject to KDV tax.</p>
    pub fn industries(&self) -> ::std::option::Option<&crate::types::Industries> {
        self.industries.as_ref()
    }
}
impl TurkeyAdditionalInfo {
    /// Creates a new builder-style object to manufacture [`TurkeyAdditionalInfo`](crate::types::TurkeyAdditionalInfo).
    pub fn builder() -> crate::types::builders::TurkeyAdditionalInfoBuilder {
        crate::types::builders::TurkeyAdditionalInfoBuilder::default()
    }
}

/// A builder for [`TurkeyAdditionalInfo`](crate::types::TurkeyAdditionalInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TurkeyAdditionalInfoBuilder {
    pub(crate) tax_office: ::std::option::Option<::std::string::String>,
    pub(crate) kep_email_id: ::std::option::Option<::std::string::String>,
    pub(crate) secondary_tax_id: ::std::option::Option<::std::string::String>,
    pub(crate) industries: ::std::option::Option<crate::types::Industries>,
}
impl TurkeyAdditionalInfoBuilder {
    /// <p>The tax office where you're registered. You can enter this information as a string. The Tax Settings API will add this information to your invoice. This parameter is required for business-to-business (B2B) and business-to-government customers. It's not required for business-to-consumer (B2C) customers.</p>
    pub fn tax_office(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tax_office = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The tax office where you're registered. You can enter this information as a string. The Tax Settings API will add this information to your invoice. This parameter is required for business-to-business (B2B) and business-to-government customers. It's not required for business-to-consumer (B2C) customers.</p>
    pub fn set_tax_office(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tax_office = input;
        self
    }
    /// <p>The tax office where you're registered. You can enter this information as a string. The Tax Settings API will add this information to your invoice. This parameter is required for business-to-business (B2B) and business-to-government customers. It's not required for business-to-consumer (B2C) customers.</p>
    pub fn get_tax_office(&self) -> &::std::option::Option<::std::string::String> {
        &self.tax_office
    }
    /// <p>The Registered Electronic Mail (REM) that is used to send notarized communication. This parameter is optional for business-to-business (B2B) and business-to-government (B2G) customers. It's not required for business-to-consumer (B2C) customers.</p>
    pub fn kep_email_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kep_email_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Registered Electronic Mail (REM) that is used to send notarized communication. This parameter is optional for business-to-business (B2B) and business-to-government (B2G) customers. It's not required for business-to-consumer (B2C) customers.</p>
    pub fn set_kep_email_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kep_email_id = input;
        self
    }
    /// <p>The Registered Electronic Mail (REM) that is used to send notarized communication. This parameter is optional for business-to-business (B2B) and business-to-government (B2G) customers. It's not required for business-to-consumer (B2C) customers.</p>
    pub fn get_kep_email_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kep_email_id
    }
    /// <p>Secondary tax ID (“harcama birimi VKN”si”). If one isn't provided, we will use your VKN as the secondary ID.</p>
    pub fn secondary_tax_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secondary_tax_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Secondary tax ID (“harcama birimi VKN”si”). If one isn't provided, we will use your VKN as the secondary ID.</p>
    pub fn set_secondary_tax_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secondary_tax_id = input;
        self
    }
    /// <p>Secondary tax ID (“harcama birimi VKN”si”). If one isn't provided, we will use your VKN as the secondary ID.</p>
    pub fn get_secondary_tax_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.secondary_tax_id
    }
    /// <p>The industry information that tells the Tax Settings API if you're subject to additional withholding taxes. This information required for business-to-business (B2B) customers. This information is conditionally mandatory for B2B customers who are subject to KDV tax.</p>
    pub fn industries(mut self, input: crate::types::Industries) -> Self {
        self.industries = ::std::option::Option::Some(input);
        self
    }
    /// <p>The industry information that tells the Tax Settings API if you're subject to additional withholding taxes. This information required for business-to-business (B2B) customers. This information is conditionally mandatory for B2B customers who are subject to KDV tax.</p>
    pub fn set_industries(mut self, input: ::std::option::Option<crate::types::Industries>) -> Self {
        self.industries = input;
        self
    }
    /// <p>The industry information that tells the Tax Settings API if you're subject to additional withholding taxes. This information required for business-to-business (B2B) customers. This information is conditionally mandatory for B2B customers who are subject to KDV tax.</p>
    pub fn get_industries(&self) -> &::std::option::Option<crate::types::Industries> {
        &self.industries
    }
    /// Consumes the builder and constructs a [`TurkeyAdditionalInfo`](crate::types::TurkeyAdditionalInfo).
    pub fn build(self) -> crate::types::TurkeyAdditionalInfo {
        crate::types::TurkeyAdditionalInfo {
            tax_office: self.tax_office,
            kep_email_id: self.kep_email_id,
            secondary_tax_id: self.secondary_tax_id,
            industries: self.industries,
        }
    }
}
