// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The exemption certificate.</p>
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExemptionCertificate {
    /// <p>The exemption certificate file name.</p>
    pub document_name: ::std::string::String,
    /// <p>The exemption certificate file content.</p>
    pub document_file: ::aws_smithy_types::Blob,
}
impl ExemptionCertificate {
    /// <p>The exemption certificate file name.</p>
    pub fn document_name(&self) -> &str {
        use std::ops::Deref;
        self.document_name.deref()
    }
    /// <p>The exemption certificate file content.</p>
    pub fn document_file(&self) -> &::aws_smithy_types::Blob {
        &self.document_file
    }
}
impl ExemptionCertificate {
    /// Creates a new builder-style object to manufacture [`ExemptionCertificate`](crate::types::ExemptionCertificate).
    pub fn builder() -> crate::types::builders::ExemptionCertificateBuilder {
        crate::types::builders::ExemptionCertificateBuilder::default()
    }
}

/// A builder for [`ExemptionCertificate`](crate::types::ExemptionCertificate).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ExemptionCertificateBuilder {
    pub(crate) document_name: ::std::option::Option<::std::string::String>,
    pub(crate) document_file: ::std::option::Option<::aws_smithy_types::Blob>,
}
impl ExemptionCertificateBuilder {
    /// <p>The exemption certificate file name.</p>
    /// This field is required.
    pub fn document_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.document_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The exemption certificate file name.</p>
    pub fn set_document_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.document_name = input;
        self
    }
    /// <p>The exemption certificate file name.</p>
    pub fn get_document_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.document_name
    }
    /// <p>The exemption certificate file content.</p>
    /// This field is required.
    pub fn document_file(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.document_file = ::std::option::Option::Some(input);
        self
    }
    /// <p>The exemption certificate file content.</p>
    pub fn set_document_file(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.document_file = input;
        self
    }
    /// <p>The exemption certificate file content.</p>
    pub fn get_document_file(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.document_file
    }
    /// Consumes the builder and constructs a [`ExemptionCertificate`](crate::types::ExemptionCertificate).
    /// This method will fail if any of the following fields are not set:
    /// - [`document_name`](crate::types::builders::ExemptionCertificateBuilder::document_name)
    /// - [`document_file`](crate::types::builders::ExemptionCertificateBuilder::document_file)
    pub fn build(self) -> ::std::result::Result<crate::types::ExemptionCertificate, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ExemptionCertificate {
            document_name: self.document_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "document_name",
                    "document_name was not specified but it is required when building ExemptionCertificate",
                )
            })?,
            document_file: self.document_file.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "document_file",
                    "document_file was not specified but it is required when building ExemptionCertificate",
                )
            })?,
        })
    }
}
