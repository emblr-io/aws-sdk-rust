// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListTaxExemptionsOutput {
    /// <p>The token to retrieve the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The tax exemption details map of <code>accountId</code> and tax exemption details.</p>
    pub tax_exemption_details_map: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::TaxExemptionDetails>>,
    _request_id: Option<String>,
}
impl ListTaxExemptionsOutput {
    /// <p>The token to retrieve the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The tax exemption details map of <code>accountId</code> and tax exemption details.</p>
    pub fn tax_exemption_details_map(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::TaxExemptionDetails>> {
        self.tax_exemption_details_map.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for ListTaxExemptionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTaxExemptionsOutput {
    /// Creates a new builder-style object to manufacture [`ListTaxExemptionsOutput`](crate::operation::list_tax_exemptions::ListTaxExemptionsOutput).
    pub fn builder() -> crate::operation::list_tax_exemptions::builders::ListTaxExemptionsOutputBuilder {
        crate::operation::list_tax_exemptions::builders::ListTaxExemptionsOutputBuilder::default()
    }
}

/// A builder for [`ListTaxExemptionsOutput`](crate::operation::list_tax_exemptions::ListTaxExemptionsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListTaxExemptionsOutputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) tax_exemption_details_map:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::TaxExemptionDetails>>,
    _request_id: Option<String>,
}
impl ListTaxExemptionsOutputBuilder {
    /// <p>The token to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token to retrieve the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Adds a key-value pair to `tax_exemption_details_map`.
    ///
    /// To override the contents of this collection use [`set_tax_exemption_details_map`](Self::set_tax_exemption_details_map).
    ///
    /// <p>The tax exemption details map of <code>accountId</code> and tax exemption details.</p>
    pub fn tax_exemption_details_map(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::TaxExemptionDetails) -> Self {
        let mut hash_map = self.tax_exemption_details_map.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.tax_exemption_details_map = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tax exemption details map of <code>accountId</code> and tax exemption details.</p>
    pub fn set_tax_exemption_details_map(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::TaxExemptionDetails>>,
    ) -> Self {
        self.tax_exemption_details_map = input;
        self
    }
    /// <p>The tax exemption details map of <code>accountId</code> and tax exemption details.</p>
    pub fn get_tax_exemption_details_map(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::TaxExemptionDetails>> {
        &self.tax_exemption_details_map
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListTaxExemptionsOutput`](crate::operation::list_tax_exemptions::ListTaxExemptionsOutput).
    pub fn build(self) -> crate::operation::list_tax_exemptions::ListTaxExemptionsOutput {
        crate::operation::list_tax_exemptions::ListTaxExemptionsOutput {
            next_token: self.next_token,
            tax_exemption_details_map: self.tax_exemption_details_map,
            _request_id: self._request_id,
        }
    }
}
