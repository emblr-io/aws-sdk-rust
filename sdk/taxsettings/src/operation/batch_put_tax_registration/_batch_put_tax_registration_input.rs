// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct BatchPutTaxRegistrationInput {
    /// <p>List of unique account identifiers.</p>
    pub account_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Your TRN information that will be stored to the accounts mentioned in <code>putEntries</code>.</p>
    pub tax_registration_entry: ::std::option::Option<crate::types::TaxRegistrationEntry>,
}
impl BatchPutTaxRegistrationInput {
    /// <p>List of unique account identifiers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.account_ids.is_none()`.
    pub fn account_ids(&self) -> &[::std::string::String] {
        self.account_ids.as_deref().unwrap_or_default()
    }
    /// <p>Your TRN information that will be stored to the accounts mentioned in <code>putEntries</code>.</p>
    pub fn tax_registration_entry(&self) -> ::std::option::Option<&crate::types::TaxRegistrationEntry> {
        self.tax_registration_entry.as_ref()
    }
}
impl ::std::fmt::Debug for BatchPutTaxRegistrationInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BatchPutTaxRegistrationInput");
        formatter.field("account_ids", &self.account_ids);
        formatter.field("tax_registration_entry", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl BatchPutTaxRegistrationInput {
    /// Creates a new builder-style object to manufacture [`BatchPutTaxRegistrationInput`](crate::operation::batch_put_tax_registration::BatchPutTaxRegistrationInput).
    pub fn builder() -> crate::operation::batch_put_tax_registration::builders::BatchPutTaxRegistrationInputBuilder {
        crate::operation::batch_put_tax_registration::builders::BatchPutTaxRegistrationInputBuilder::default()
    }
}

/// A builder for [`BatchPutTaxRegistrationInput`](crate::operation::batch_put_tax_registration::BatchPutTaxRegistrationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct BatchPutTaxRegistrationInputBuilder {
    pub(crate) account_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) tax_registration_entry: ::std::option::Option<crate::types::TaxRegistrationEntry>,
}
impl BatchPutTaxRegistrationInputBuilder {
    /// Appends an item to `account_ids`.
    ///
    /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
    ///
    /// <p>List of unique account identifiers.</p>
    pub fn account_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.account_ids.unwrap_or_default();
        v.push(input.into());
        self.account_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of unique account identifiers.</p>
    pub fn set_account_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.account_ids = input;
        self
    }
    /// <p>List of unique account identifiers.</p>
    pub fn get_account_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.account_ids
    }
    /// <p>Your TRN information that will be stored to the accounts mentioned in <code>putEntries</code>.</p>
    /// This field is required.
    pub fn tax_registration_entry(mut self, input: crate::types::TaxRegistrationEntry) -> Self {
        self.tax_registration_entry = ::std::option::Option::Some(input);
        self
    }
    /// <p>Your TRN information that will be stored to the accounts mentioned in <code>putEntries</code>.</p>
    pub fn set_tax_registration_entry(mut self, input: ::std::option::Option<crate::types::TaxRegistrationEntry>) -> Self {
        self.tax_registration_entry = input;
        self
    }
    /// <p>Your TRN information that will be stored to the accounts mentioned in <code>putEntries</code>.</p>
    pub fn get_tax_registration_entry(&self) -> &::std::option::Option<crate::types::TaxRegistrationEntry> {
        &self.tax_registration_entry
    }
    /// Consumes the builder and constructs a [`BatchPutTaxRegistrationInput`](crate::operation::batch_put_tax_registration::BatchPutTaxRegistrationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_put_tax_registration::BatchPutTaxRegistrationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::batch_put_tax_registration::BatchPutTaxRegistrationInput {
            account_ids: self.account_ids,
            tax_registration_entry: self.tax_registration_entry,
        })
    }
}
impl ::std::fmt::Debug for BatchPutTaxRegistrationInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("BatchPutTaxRegistrationInputBuilder");
        formatter.field("account_ids", &self.account_ids);
        formatter.field("tax_registration_entry", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
