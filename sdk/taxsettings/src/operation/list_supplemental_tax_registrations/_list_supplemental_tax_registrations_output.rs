// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListSupplementalTaxRegistrationsOutput {
    /// <p>The list of supplemental tax registrations.</p>
    pub tax_registrations: ::std::vec::Vec<crate::types::SupplementalTaxRegistration>,
    /// <p>The token to retrieve the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListSupplementalTaxRegistrationsOutput {
    /// <p>The list of supplemental tax registrations.</p>
    pub fn tax_registrations(&self) -> &[crate::types::SupplementalTaxRegistration] {
        use std::ops::Deref;
        self.tax_registrations.deref()
    }
    /// <p>The token to retrieve the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListSupplementalTaxRegistrationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListSupplementalTaxRegistrationsOutput {
    /// Creates a new builder-style object to manufacture [`ListSupplementalTaxRegistrationsOutput`](crate::operation::list_supplemental_tax_registrations::ListSupplementalTaxRegistrationsOutput).
    pub fn builder() -> crate::operation::list_supplemental_tax_registrations::builders::ListSupplementalTaxRegistrationsOutputBuilder {
        crate::operation::list_supplemental_tax_registrations::builders::ListSupplementalTaxRegistrationsOutputBuilder::default()
    }
}

/// A builder for [`ListSupplementalTaxRegistrationsOutput`](crate::operation::list_supplemental_tax_registrations::ListSupplementalTaxRegistrationsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListSupplementalTaxRegistrationsOutputBuilder {
    pub(crate) tax_registrations: ::std::option::Option<::std::vec::Vec<crate::types::SupplementalTaxRegistration>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListSupplementalTaxRegistrationsOutputBuilder {
    /// Appends an item to `tax_registrations`.
    ///
    /// To override the contents of this collection use [`set_tax_registrations`](Self::set_tax_registrations).
    ///
    /// <p>The list of supplemental tax registrations.</p>
    pub fn tax_registrations(mut self, input: crate::types::SupplementalTaxRegistration) -> Self {
        let mut v = self.tax_registrations.unwrap_or_default();
        v.push(input);
        self.tax_registrations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of supplemental tax registrations.</p>
    pub fn set_tax_registrations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SupplementalTaxRegistration>>) -> Self {
        self.tax_registrations = input;
        self
    }
    /// <p>The list of supplemental tax registrations.</p>
    pub fn get_tax_registrations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SupplementalTaxRegistration>> {
        &self.tax_registrations
    }
    /// <p>The token to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token to retrieve the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListSupplementalTaxRegistrationsOutput`](crate::operation::list_supplemental_tax_registrations::ListSupplementalTaxRegistrationsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`tax_registrations`](crate::operation::list_supplemental_tax_registrations::builders::ListSupplementalTaxRegistrationsOutputBuilder::tax_registrations)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_supplemental_tax_registrations::ListSupplementalTaxRegistrationsOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::list_supplemental_tax_registrations::ListSupplementalTaxRegistrationsOutput {
                tax_registrations: self.tax_registrations.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "tax_registrations",
                        "tax_registrations was not specified but it is required when building ListSupplementalTaxRegistrationsOutput",
                    )
                })?,
                next_token: self.next_token,
                _request_id: self._request_id,
            },
        )
    }
}
