// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutSupplementalTaxRegistrationOutput {
    /// <p>Unique authority ID for the supplemental TRN information that was stored.</p>
    pub authority_id: ::std::string::String,
    /// <p>The status of the supplemental TRN stored in the system after processing. Based on the validation occurring on the TRN, the status can be <code>Verified</code>, <code>Pending</code>, <code>Rejected</code>, or <code>Deleted</code>.</p>
    pub status: crate::types::TaxRegistrationStatus,
    _request_id: Option<String>,
}
impl PutSupplementalTaxRegistrationOutput {
    /// <p>Unique authority ID for the supplemental TRN information that was stored.</p>
    pub fn authority_id(&self) -> &str {
        use std::ops::Deref;
        self.authority_id.deref()
    }
    /// <p>The status of the supplemental TRN stored in the system after processing. Based on the validation occurring on the TRN, the status can be <code>Verified</code>, <code>Pending</code>, <code>Rejected</code>, or <code>Deleted</code>.</p>
    pub fn status(&self) -> &crate::types::TaxRegistrationStatus {
        &self.status
    }
}
impl ::aws_types::request_id::RequestId for PutSupplementalTaxRegistrationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutSupplementalTaxRegistrationOutput {
    /// Creates a new builder-style object to manufacture [`PutSupplementalTaxRegistrationOutput`](crate::operation::put_supplemental_tax_registration::PutSupplementalTaxRegistrationOutput).
    pub fn builder() -> crate::operation::put_supplemental_tax_registration::builders::PutSupplementalTaxRegistrationOutputBuilder {
        crate::operation::put_supplemental_tax_registration::builders::PutSupplementalTaxRegistrationOutputBuilder::default()
    }
}

/// A builder for [`PutSupplementalTaxRegistrationOutput`](crate::operation::put_supplemental_tax_registration::PutSupplementalTaxRegistrationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PutSupplementalTaxRegistrationOutputBuilder {
    pub(crate) authority_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::TaxRegistrationStatus>,
    _request_id: Option<String>,
}
impl PutSupplementalTaxRegistrationOutputBuilder {
    /// <p>Unique authority ID for the supplemental TRN information that was stored.</p>
    /// This field is required.
    pub fn authority_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authority_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique authority ID for the supplemental TRN information that was stored.</p>
    pub fn set_authority_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authority_id = input;
        self
    }
    /// <p>Unique authority ID for the supplemental TRN information that was stored.</p>
    pub fn get_authority_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.authority_id
    }
    /// <p>The status of the supplemental TRN stored in the system after processing. Based on the validation occurring on the TRN, the status can be <code>Verified</code>, <code>Pending</code>, <code>Rejected</code>, or <code>Deleted</code>.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::TaxRegistrationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the supplemental TRN stored in the system after processing. Based on the validation occurring on the TRN, the status can be <code>Verified</code>, <code>Pending</code>, <code>Rejected</code>, or <code>Deleted</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TaxRegistrationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the supplemental TRN stored in the system after processing. Based on the validation occurring on the TRN, the status can be <code>Verified</code>, <code>Pending</code>, <code>Rejected</code>, or <code>Deleted</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TaxRegistrationStatus> {
        &self.status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`PutSupplementalTaxRegistrationOutput`](crate::operation::put_supplemental_tax_registration::PutSupplementalTaxRegistrationOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`authority_id`](crate::operation::put_supplemental_tax_registration::builders::PutSupplementalTaxRegistrationOutputBuilder::authority_id)
    /// - [`status`](crate::operation::put_supplemental_tax_registration::builders::PutSupplementalTaxRegistrationOutputBuilder::status)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_supplemental_tax_registration::PutSupplementalTaxRegistrationOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::put_supplemental_tax_registration::PutSupplementalTaxRegistrationOutput {
                authority_id: self.authority_id.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "authority_id",
                        "authority_id was not specified but it is required when building PutSupplementalTaxRegistrationOutput",
                    )
                })?,
                status: self.status.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "status",
                        "status was not specified but it is required when building PutSupplementalTaxRegistrationOutput",
                    )
                })?,
                _request_id: self._request_id,
            },
        )
    }
}
