// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PutSupplementalTaxRegistrationInput {
    /// <p>The supplemental TRN information that will be stored for the caller account ID.</p>
    pub tax_registration_entry: ::std::option::Option<crate::types::SupplementalTaxRegistrationEntry>,
}
impl PutSupplementalTaxRegistrationInput {
    /// <p>The supplemental TRN information that will be stored for the caller account ID.</p>
    pub fn tax_registration_entry(&self) -> ::std::option::Option<&crate::types::SupplementalTaxRegistrationEntry> {
        self.tax_registration_entry.as_ref()
    }
}
impl ::std::fmt::Debug for PutSupplementalTaxRegistrationInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PutSupplementalTaxRegistrationInput");
        formatter.field("tax_registration_entry", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl PutSupplementalTaxRegistrationInput {
    /// Creates a new builder-style object to manufacture [`PutSupplementalTaxRegistrationInput`](crate::operation::put_supplemental_tax_registration::PutSupplementalTaxRegistrationInput).
    pub fn builder() -> crate::operation::put_supplemental_tax_registration::builders::PutSupplementalTaxRegistrationInputBuilder {
        crate::operation::put_supplemental_tax_registration::builders::PutSupplementalTaxRegistrationInputBuilder::default()
    }
}

/// A builder for [`PutSupplementalTaxRegistrationInput`](crate::operation::put_supplemental_tax_registration::PutSupplementalTaxRegistrationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct PutSupplementalTaxRegistrationInputBuilder {
    pub(crate) tax_registration_entry: ::std::option::Option<crate::types::SupplementalTaxRegistrationEntry>,
}
impl PutSupplementalTaxRegistrationInputBuilder {
    /// <p>The supplemental TRN information that will be stored for the caller account ID.</p>
    /// This field is required.
    pub fn tax_registration_entry(mut self, input: crate::types::SupplementalTaxRegistrationEntry) -> Self {
        self.tax_registration_entry = ::std::option::Option::Some(input);
        self
    }
    /// <p>The supplemental TRN information that will be stored for the caller account ID.</p>
    pub fn set_tax_registration_entry(mut self, input: ::std::option::Option<crate::types::SupplementalTaxRegistrationEntry>) -> Self {
        self.tax_registration_entry = input;
        self
    }
    /// <p>The supplemental TRN information that will be stored for the caller account ID.</p>
    pub fn get_tax_registration_entry(&self) -> &::std::option::Option<crate::types::SupplementalTaxRegistrationEntry> {
        &self.tax_registration_entry
    }
    /// Consumes the builder and constructs a [`PutSupplementalTaxRegistrationInput`](crate::operation::put_supplemental_tax_registration::PutSupplementalTaxRegistrationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_supplemental_tax_registration::PutSupplementalTaxRegistrationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::put_supplemental_tax_registration::PutSupplementalTaxRegistrationInput {
            tax_registration_entry: self.tax_registration_entry,
        })
    }
}
impl ::std::fmt::Debug for PutSupplementalTaxRegistrationInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PutSupplementalTaxRegistrationInputBuilder");
        formatter.field("tax_registration_entry", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
