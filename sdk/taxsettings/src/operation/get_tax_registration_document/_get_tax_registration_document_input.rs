// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTaxRegistrationDocumentInput {
    /// <p>The Amazon S3 bucket that you specify to download your tax documents to.</p>
    pub destination_s3_location: ::std::option::Option<crate::types::DestinationS3Location>,
    /// <p>The metadata for your tax document.</p>
    pub tax_document_metadata: ::std::option::Option<crate::types::TaxDocumentMetadata>,
}
impl GetTaxRegistrationDocumentInput {
    /// <p>The Amazon S3 bucket that you specify to download your tax documents to.</p>
    pub fn destination_s3_location(&self) -> ::std::option::Option<&crate::types::DestinationS3Location> {
        self.destination_s3_location.as_ref()
    }
    /// <p>The metadata for your tax document.</p>
    pub fn tax_document_metadata(&self) -> ::std::option::Option<&crate::types::TaxDocumentMetadata> {
        self.tax_document_metadata.as_ref()
    }
}
impl GetTaxRegistrationDocumentInput {
    /// Creates a new builder-style object to manufacture [`GetTaxRegistrationDocumentInput`](crate::operation::get_tax_registration_document::GetTaxRegistrationDocumentInput).
    pub fn builder() -> crate::operation::get_tax_registration_document::builders::GetTaxRegistrationDocumentInputBuilder {
        crate::operation::get_tax_registration_document::builders::GetTaxRegistrationDocumentInputBuilder::default()
    }
}

/// A builder for [`GetTaxRegistrationDocumentInput`](crate::operation::get_tax_registration_document::GetTaxRegistrationDocumentInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetTaxRegistrationDocumentInputBuilder {
    pub(crate) destination_s3_location: ::std::option::Option<crate::types::DestinationS3Location>,
    pub(crate) tax_document_metadata: ::std::option::Option<crate::types::TaxDocumentMetadata>,
}
impl GetTaxRegistrationDocumentInputBuilder {
    /// <p>The Amazon S3 bucket that you specify to download your tax documents to.</p>
    pub fn destination_s3_location(mut self, input: crate::types::DestinationS3Location) -> Self {
        self.destination_s3_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon S3 bucket that you specify to download your tax documents to.</p>
    pub fn set_destination_s3_location(mut self, input: ::std::option::Option<crate::types::DestinationS3Location>) -> Self {
        self.destination_s3_location = input;
        self
    }
    /// <p>The Amazon S3 bucket that you specify to download your tax documents to.</p>
    pub fn get_destination_s3_location(&self) -> &::std::option::Option<crate::types::DestinationS3Location> {
        &self.destination_s3_location
    }
    /// <p>The metadata for your tax document.</p>
    /// This field is required.
    pub fn tax_document_metadata(mut self, input: crate::types::TaxDocumentMetadata) -> Self {
        self.tax_document_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metadata for your tax document.</p>
    pub fn set_tax_document_metadata(mut self, input: ::std::option::Option<crate::types::TaxDocumentMetadata>) -> Self {
        self.tax_document_metadata = input;
        self
    }
    /// <p>The metadata for your tax document.</p>
    pub fn get_tax_document_metadata(&self) -> &::std::option::Option<crate::types::TaxDocumentMetadata> {
        &self.tax_document_metadata
    }
    /// Consumes the builder and constructs a [`GetTaxRegistrationDocumentInput`](crate::operation::get_tax_registration_document::GetTaxRegistrationDocumentInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_tax_registration_document::GetTaxRegistrationDocumentInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_tax_registration_document::GetTaxRegistrationDocumentInput {
            destination_s3_location: self.destination_s3_location,
            tax_document_metadata: self.tax_document_metadata,
        })
    }
}
