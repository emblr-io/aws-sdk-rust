// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTaxRegistrationDocumentOutput {
    /// <p>The file path of the Amazon S3 bucket where you want to download your tax document to.</p>
    pub destination_file_path: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon S3 presigned URL of the tax registration document.</p>
    pub presigned_s3_url: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetTaxRegistrationDocumentOutput {
    /// <p>The file path of the Amazon S3 bucket where you want to download your tax document to.</p>
    pub fn destination_file_path(&self) -> ::std::option::Option<&str> {
        self.destination_file_path.as_deref()
    }
    /// <p>The Amazon S3 presigned URL of the tax registration document.</p>
    pub fn presigned_s3_url(&self) -> ::std::option::Option<&str> {
        self.presigned_s3_url.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetTaxRegistrationDocumentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTaxRegistrationDocumentOutput {
    /// Creates a new builder-style object to manufacture [`GetTaxRegistrationDocumentOutput`](crate::operation::get_tax_registration_document::GetTaxRegistrationDocumentOutput).
    pub fn builder() -> crate::operation::get_tax_registration_document::builders::GetTaxRegistrationDocumentOutputBuilder {
        crate::operation::get_tax_registration_document::builders::GetTaxRegistrationDocumentOutputBuilder::default()
    }
}

/// A builder for [`GetTaxRegistrationDocumentOutput`](crate::operation::get_tax_registration_document::GetTaxRegistrationDocumentOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetTaxRegistrationDocumentOutputBuilder {
    pub(crate) destination_file_path: ::std::option::Option<::std::string::String>,
    pub(crate) presigned_s3_url: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetTaxRegistrationDocumentOutputBuilder {
    /// <p>The file path of the Amazon S3 bucket where you want to download your tax document to.</p>
    pub fn destination_file_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_file_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The file path of the Amazon S3 bucket where you want to download your tax document to.</p>
    pub fn set_destination_file_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_file_path = input;
        self
    }
    /// <p>The file path of the Amazon S3 bucket where you want to download your tax document to.</p>
    pub fn get_destination_file_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_file_path
    }
    /// <p>The Amazon S3 presigned URL of the tax registration document.</p>
    pub fn presigned_s3_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.presigned_s3_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 presigned URL of the tax registration document.</p>
    pub fn set_presigned_s3_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.presigned_s3_url = input;
        self
    }
    /// <p>The Amazon S3 presigned URL of the tax registration document.</p>
    pub fn get_presigned_s3_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.presigned_s3_url
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetTaxRegistrationDocumentOutput`](crate::operation::get_tax_registration_document::GetTaxRegistrationDocumentOutput).
    pub fn build(self) -> crate::operation::get_tax_registration_document::GetTaxRegistrationDocumentOutput {
        crate::operation::get_tax_registration_document::GetTaxRegistrationDocumentOutput {
            destination_file_path: self.destination_file_path,
            presigned_s3_url: self.presigned_s3_url,
            _request_id: self._request_id,
        }
    }
}
