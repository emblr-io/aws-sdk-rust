// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutTaxExemptionInput {
    /// <p>The list of unique account identifiers.</p>
    pub account_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The address domain associate with the tax information.</p>
    pub authority: ::std::option::Option<crate::types::Authority>,
    /// <p>The exemption type. Use the supported tax exemption type description.</p>
    pub exemption_type: ::std::option::Option<::std::string::String>,
    /// <p>The exemption certificate.</p>
    pub exemption_certificate: ::std::option::Option<crate::types::ExemptionCertificate>,
}
impl PutTaxExemptionInput {
    /// <p>The list of unique account identifiers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.account_ids.is_none()`.
    pub fn account_ids(&self) -> &[::std::string::String] {
        self.account_ids.as_deref().unwrap_or_default()
    }
    /// <p>The address domain associate with the tax information.</p>
    pub fn authority(&self) -> ::std::option::Option<&crate::types::Authority> {
        self.authority.as_ref()
    }
    /// <p>The exemption type. Use the supported tax exemption type description.</p>
    pub fn exemption_type(&self) -> ::std::option::Option<&str> {
        self.exemption_type.as_deref()
    }
    /// <p>The exemption certificate.</p>
    pub fn exemption_certificate(&self) -> ::std::option::Option<&crate::types::ExemptionCertificate> {
        self.exemption_certificate.as_ref()
    }
}
impl PutTaxExemptionInput {
    /// Creates a new builder-style object to manufacture [`PutTaxExemptionInput`](crate::operation::put_tax_exemption::PutTaxExemptionInput).
    pub fn builder() -> crate::operation::put_tax_exemption::builders::PutTaxExemptionInputBuilder {
        crate::operation::put_tax_exemption::builders::PutTaxExemptionInputBuilder::default()
    }
}

/// A builder for [`PutTaxExemptionInput`](crate::operation::put_tax_exemption::PutTaxExemptionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PutTaxExemptionInputBuilder {
    pub(crate) account_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) authority: ::std::option::Option<crate::types::Authority>,
    pub(crate) exemption_type: ::std::option::Option<::std::string::String>,
    pub(crate) exemption_certificate: ::std::option::Option<crate::types::ExemptionCertificate>,
}
impl PutTaxExemptionInputBuilder {
    /// Appends an item to `account_ids`.
    ///
    /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
    ///
    /// <p>The list of unique account identifiers.</p>
    pub fn account_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.account_ids.unwrap_or_default();
        v.push(input.into());
        self.account_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of unique account identifiers.</p>
    pub fn set_account_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.account_ids = input;
        self
    }
    /// <p>The list of unique account identifiers.</p>
    pub fn get_account_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.account_ids
    }
    /// <p>The address domain associate with the tax information.</p>
    /// This field is required.
    pub fn authority(mut self, input: crate::types::Authority) -> Self {
        self.authority = ::std::option::Option::Some(input);
        self
    }
    /// <p>The address domain associate with the tax information.</p>
    pub fn set_authority(mut self, input: ::std::option::Option<crate::types::Authority>) -> Self {
        self.authority = input;
        self
    }
    /// <p>The address domain associate with the tax information.</p>
    pub fn get_authority(&self) -> &::std::option::Option<crate::types::Authority> {
        &self.authority
    }
    /// <p>The exemption type. Use the supported tax exemption type description.</p>
    /// This field is required.
    pub fn exemption_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.exemption_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The exemption type. Use the supported tax exemption type description.</p>
    pub fn set_exemption_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.exemption_type = input;
        self
    }
    /// <p>The exemption type. Use the supported tax exemption type description.</p>
    pub fn get_exemption_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.exemption_type
    }
    /// <p>The exemption certificate.</p>
    /// This field is required.
    pub fn exemption_certificate(mut self, input: crate::types::ExemptionCertificate) -> Self {
        self.exemption_certificate = ::std::option::Option::Some(input);
        self
    }
    /// <p>The exemption certificate.</p>
    pub fn set_exemption_certificate(mut self, input: ::std::option::Option<crate::types::ExemptionCertificate>) -> Self {
        self.exemption_certificate = input;
        self
    }
    /// <p>The exemption certificate.</p>
    pub fn get_exemption_certificate(&self) -> &::std::option::Option<crate::types::ExemptionCertificate> {
        &self.exemption_certificate
    }
    /// Consumes the builder and constructs a [`PutTaxExemptionInput`](crate::operation::put_tax_exemption::PutTaxExemptionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::put_tax_exemption::PutTaxExemptionInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::put_tax_exemption::PutTaxExemptionInput {
            account_ids: self.account_ids,
            authority: self.authority,
            exemption_type: self.exemption_type,
            exemption_certificate: self.exemption_certificate,
        })
    }
}
