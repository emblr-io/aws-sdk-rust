// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[cfg_attr(feature = "serde-serialize", derive(::serde::Serialize))]
#[cfg_attr(feature = "serde-deserialize", derive(::serde::Deserialize))]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PutTaxRegistrationInput {
    /// <p>Your unique account identifier.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>Your TRN information that will be stored to the account mentioned in <code>accountId</code>.</p>
    pub tax_registration_entry: ::std::option::Option<crate::types::TaxRegistrationEntry>,
}
impl PutTaxRegistrationInput {
    /// <p>Your unique account identifier.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>Your TRN information that will be stored to the account mentioned in <code>accountId</code>.</p>
    pub fn tax_registration_entry(&self) -> ::std::option::Option<&crate::types::TaxRegistrationEntry> {
        self.tax_registration_entry.as_ref()
    }
}
impl ::std::fmt::Debug for PutTaxRegistrationInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PutTaxRegistrationInput");
        formatter.field("account_id", &self.account_id);
        formatter.field("tax_registration_entry", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl PutTaxRegistrationInput {
    /// Creates a new builder-style object to manufacture [`PutTaxRegistrationInput`](crate::operation::put_tax_registration::PutTaxRegistrationInput).
    pub fn builder() -> crate::operation::put_tax_registration::builders::PutTaxRegistrationInputBuilder {
        crate::operation::put_tax_registration::builders::PutTaxRegistrationInputBuilder::default()
    }
}

/// A builder for [`PutTaxRegistrationInput`](crate::operation::put_tax_registration::PutTaxRegistrationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct PutTaxRegistrationInputBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) tax_registration_entry: ::std::option::Option<crate::types::TaxRegistrationEntry>,
}
impl PutTaxRegistrationInputBuilder {
    /// <p>Your unique account identifier.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Your unique account identifier.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>Your unique account identifier.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>Your TRN information that will be stored to the account mentioned in <code>accountId</code>.</p>
    /// This field is required.
    pub fn tax_registration_entry(mut self, input: crate::types::TaxRegistrationEntry) -> Self {
        self.tax_registration_entry = ::std::option::Option::Some(input);
        self
    }
    /// <p>Your TRN information that will be stored to the account mentioned in <code>accountId</code>.</p>
    pub fn set_tax_registration_entry(mut self, input: ::std::option::Option<crate::types::TaxRegistrationEntry>) -> Self {
        self.tax_registration_entry = input;
        self
    }
    /// <p>Your TRN information that will be stored to the account mentioned in <code>accountId</code>.</p>
    pub fn get_tax_registration_entry(&self) -> &::std::option::Option<crate::types::TaxRegistrationEntry> {
        &self.tax_registration_entry
    }
    /// Consumes the builder and constructs a [`PutTaxRegistrationInput`](crate::operation::put_tax_registration::PutTaxRegistrationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::put_tax_registration::PutTaxRegistrationInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::put_tax_registration::PutTaxRegistrationInput {
            account_id: self.account_id,
            tax_registration_entry: self.tax_registration_entry,
        })
    }
}
impl ::std::fmt::Debug for PutTaxRegistrationInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PutTaxRegistrationInputBuilder");
        formatter.field("account_id", &self.account_id);
        formatter.field("tax_registration_entry", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
